/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('btripopen', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model KeywordSuggestInfo {
  address?: string(name='address'),
  businessAreaWithCity?: KeywordSuggestInfo(name='business_area_with_city'),
  cityCode?: int32(name='city_code', example='300100'),
  cityName?: string(name='city_name', example='杭州'),
  displayName?: string(name='display_name', example='杭州东站'),
  hotelId?: string(name='hotel_id', example='53853318'),
  icon?: string(name='icon'),
  point?: string(name='point', example='4.8分'),
  price?: string(name='price', example='524'),
  region?: int32(name='region', example='0'),
  type?: int32(name='type'),
  typeDesc?: string(name='type_desc', example='景点'),
}

model ModuleFlightItemListBestPriceItemFlightRuleInfosValue = {
  refundChangeRuleDesc?: string(name='refund_change_rule_desc'),
  baggageDesc?: string(name='baggage_desc'),
}

model ModuleFlightItemListBestPriceItemShoppingItemMapValue = {
  cabinQuantityList?: [ 
    {
      segmentPosition?: {
        journeyIndex?: int32(name='journey_index', example='0'),
        segmentIndex?: int32(name='segment_index', example='0'),
      }(name='segment_position'),
      cabinInfo?: {
        cabin?: string(name='cabin'),
        cabinClass?: string(name='cabin_class'),
        cabinClassName?: string(name='cabin_class_name'),
        quantity?: string(name='quantity'),
      }(name='cabin_info'),
    }
  ](name='cabin_quantity_list'),
  searchPrice?: {
    floorPrice?: int32(name='floor_price', example='17400'),
    ticketPrice?: int32(name='ticket_price', example='121000'),
    sellPrice?: int32(name='sell_price', example='17400'),
    originalSellPrice?: int32(name='original_sell_price', example='17400'),
    baseTotalPrice?: int32(name='base_total_price'),
    beforeControlPrice?: int32(name='before_control_price', example='17400'),
    tax?: int32(name='tax', example='11000'),
    supplyPrice?: int32(name='supply_price'),
    basicCabinPrice?: int32(name='basic_cabin_price', example='242000'),
    buildPrice?: int32(name='build_price', example='5000'),
    oilPrice?: int32(name='oil_price', example='6000'),
    firstStandardPrice?: int32(name='first_standard_price'),
    businessStandardPrice?: int32(name='business_standard_price'),
    commonStandardPrice?: int32(name='common_standard_price', example='242000'),
    interTicketPrice?: int32(name='inter_ticket_price', description='fdPrice', example='fdPrice'),
    subtractedPrice?: int32(name='subtracted_price'),
    originCommonPrice?: int32(name='origin_common_price'),
    dynamicPromotionPrice?: int32(name='dynamic_promotion_price'),
    installmentNum?: int32(name='installment_num'),
    installmentPrice?: double(name='installment_price'),
    competitionDynamicPrice?: int32(name='competition_dynamic_price'),
    competitionPromotionPrice?: int32(name='competition_promotion_price'),
    minBeforeControlPriceOfNormal?: int32(name='min_before_control_price_of_normal', example='17400'),
    priceShowInfo?: {
      discountInfo?: string(name='discount_info'),
      discountNum?: double(name='discount_num', example='0.8'),
      showTicketPrice?: boolean(name='show_ticket_price', example='false'),
    }(name='price_show_info'),
  }(name='search_price'),
  segmentPriceList?: [ 
    {
      segmentPosition?: {
        journeyIndex?: int32(name='journey_index', example='0'),
        segmentIndex?: int32(name='segment_index', example='0'),
      }(name='segment_position'),
      searchPrice?: {
        sellPrice?: int32(name='sell_price', example='120000'),
        ticketPrice?: int32(name='ticket_price', example='120000'),
        tax?: int32(name='tax', example='6000'),
      }(name='search_price'),
    }
  ](name='segment_price_list'),
  id?: string(name='id', description='id', example='ADT07df0bd9-f803-4a50-8449-f4bd675d9939'),
  cabinQuantity?: map[string]ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityValue(name='cabin_quantity'),
  segmentPrice?: map[string]ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValue(name='segment_price'),
}

model ModuleFlightItemListBestPriceItemSubItemPositionMapValue = {
  journeyIndex?: int32(name='journey_index', example='0'),
  segmentIndex?: int32(name='segment_index', example='0'),
}

model ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValue = {
  id?: string(name='id', description='id', example='ADT07df0bd9-f803-4a50-8449-f4bd675d9939'),
  cabinQuantity?: map[string]ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueCabinQuantityValue(name='cabin_quantity'),
  searchPrice?: {
    floorPrice?: int32(name='floor_price', example='17400'),
    ticketPrice?: int32(name='ticket_price', example='121000'),
    sellPrice?: int32(name='sell_price', example='17400'),
    originalSellPrice?: int32(name='original_sell_price', example='17400'),
    baseTotalPrice?: int32(name='base_total_price'),
    beforeControlPrice?: int32(name='before_control_price', example='17400'),
    tax?: int32(name='tax', example='11000'),
    supplyPrice?: int32(name='supply_price'),
    basicCabinPrice?: int32(name='basic_cabin_price', example='242000'),
    buildPrice?: int32(name='build_price', example='5000'),
    oilPrice?: int32(name='oil_price', example='6000'),
    firstStandardPrice?: int32(name='first_standard_price'),
    businessStandardPrice?: int32(name='business_standard_price'),
    commonStandardPrice?: int32(name='common_standard_price', example='242000'),
    interTicketPrice?: int32(name='inter_ticket_price', description='fdPrice', example='fdPrice'),
    subtractedPrice?: int32(name='subtracted_price'),
    originCommonPrice?: int32(name='origin_common_price'),
    dynamicPromotionPrice?: int32(name='dynamic_promotion_price'),
    installmentNum?: int32(name='installment_num'),
    installmentPrice?: double(name='installment_price'),
    competitionDynamicPrice?: int32(name='competition_dynamic_price'),
    competitionPromotionPrice?: int32(name='competition_promotion_price'),
    minBeforeControlPriceOfNormal?: int32(name='min_before_control_price_of_normal', example='17400'),
    priceShowInfo?: {
      discountInfo?: string(name='discount_info'),
      discountNum?: double(name='discount_num', example='0.8'),
      showTicketPrice?: boolean(name='show_ticket_price', example='false'),
    }(name='price_show_info'),
  }(name='search_price'),
  segmentPrice?: map[string]ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValue(name='segment_price'),
}

model ModuleFlightItemListItemListFlightRuleInfosValue = {
  refundChangeRuleDesc?: string(name='refund_change_rule_desc'),
  baggageDesc?: string(name='baggage_desc'),
}

model ModuleFlightItemListItemListShoppingItemMapValue = {
  id?: string(name='id', description='id', example='ADT07df0bd9-f803-4a50-8449-f4bd675d9939'),
  cabinQuantity?: map[string]ModuleFlightItemListItemListShoppingItemMapValueCabinQuantityValue(name='cabin_quantity'),
  searchPrice?: {
    floorPrice?: int32(name='floor_price', example='17400'),
    ticketPrice?: int32(name='ticket_price', example='121000'),
    sellPrice?: int32(name='sell_price', example='17400'),
    originalSellPrice?: int32(name='original_sell_price', example='17400'),
    baseTotalPrice?: int32(name='base_total_price'),
    beforeControlPrice?: int32(name='before_control_price', example='17400'),
    tax?: int32(name='tax', example='11000'),
    supplyPrice?: int32(name='supply_price'),
    basicCabinPrice?: int32(name='basic_cabin_price', example='242000'),
    buildPrice?: int32(name='build_price', example='5000'),
    oilPrice?: int32(name='oil_price', example='6000'),
    firstStandardPrice?: int32(name='first_standard_price'),
    businessStandardPrice?: int32(name='business_standard_price'),
    commonStandardPrice?: int32(name='common_standard_price', example='242000'),
    interTicketPrice?: int32(name='inter_ticket_price', description='fdPrice', example='fdPrice'),
    subtractedPrice?: int32(name='subtracted_price'),
    originCommonPrice?: int32(name='origin_common_price'),
    dynamicPromotionPrice?: int32(name='dynamic_promotion_price'),
    installmentNum?: int32(name='installment_num'),
    installmentPrice?: double(name='installment_price'),
    competitionDynamicPrice?: int32(name='competition_dynamic_price'),
    competitionPromotionPrice?: int32(name='competition_promotion_price'),
    minBeforeControlPriceOfNormal?: int32(name='min_before_control_price_of_normal', example='17400'),
    priceShowInfo?: {
      discountInfo?: string(name='discount_info'),
      discountNum?: double(name='discount_num', example='0.8'),
      showTicketPrice?: boolean(name='show_ticket_price', example='false'),
    }(name='price_show_info'),
  }(name='search_price'),
  segmentPrice?: map[string]ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValue(name='segment_price'),
}

model ModuleFlightItemListItemListSubItemPositionMapValue = {
  journeyIndex?: int32(name='journey_index', example='0'),
  segmentIndex?: int32(name='segment_index', example='0'),
}

model ModuleFlightItemListItemListSubItemsShoppingItemMapValue = {
  id?: string(name='id', description='id', example='ADT07df0bd9-f803-4a50-8449-f4bd675d9939'),
  cabinQuantity?: map[string]ModuleFlightItemListItemListSubItemsShoppingItemMapValueCabinQuantityValue(name='cabin_quantity'),
  searchPrice?: {
    floorPrice?: int32(name='floor_price', example='17400'),
    ticketPrice?: int32(name='ticket_price', example='121000'),
    sellPrice?: int32(name='sell_price', example='17400'),
    originalSellPrice?: int32(name='original_sell_price', example='17400'),
    baseTotalPrice?: int32(name='base_total_price'),
    beforeControlPrice?: int32(name='before_control_price', example='17400'),
    tax?: int32(name='tax', example='11000'),
    supplyPrice?: int32(name='supply_price'),
    basicCabinPrice?: int32(name='basic_cabin_price', example='242000'),
    buildPrice?: int32(name='build_price', example='5000'),
    oilPrice?: int32(name='oil_price', example='6000'),
    firstStandardPrice?: int32(name='first_standard_price'),
    businessStandardPrice?: int32(name='business_standard_price'),
    commonStandardPrice?: int32(name='common_standard_price', example='242000'),
    interTicketPrice?: int32(name='inter_ticket_price', description='fdPrice', example='fdPrice'),
    subtractedPrice?: int32(name='subtracted_price'),
    originCommonPrice?: int32(name='origin_common_price'),
    dynamicPromotionPrice?: int32(name='dynamic_promotion_price'),
    installmentNum?: int32(name='installment_num'),
    installmentPrice?: double(name='installment_price'),
    competitionDynamicPrice?: int32(name='competition_dynamic_price'),
    competitionPromotionPrice?: int32(name='competition_promotion_price'),
    minBeforeControlPriceOfNormal?: int32(name='min_before_control_price_of_normal', example='17400'),
    priceShowInfo?: {
      discountInfo?: string(name='discount_info'),
      discountNum?: double(name='discount_num', example='0.8'),
      showTicketPrice?: boolean(name='show_ticket_price', example='false'),
    }(name='price_show_info'),
  }(name='search_price'),
  segmentPrice?: map[string]ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValue(name='segment_price'),
}

model ModuleAgentInfosAttributeShowInfoMapValue = {
  code?: string(name='code'),
  name?: string(name='name'),
  text?: string(name='text'),
}

model ModuleAgentInfoAttributeShowInfoMapValue = {
  code?: string(name='code', example='FIRST_BAGGAGE'),
  name?: string(name='name'),
  text?: string(name='text'),
}

model ModuleItemListFlightRuleInfosValue = {
  refundChangeRuleDesc?: string(name='refund_change_rule_desc'),
  baggageDesc?: string(name='baggage_desc'),
}

model ModuleItemListShoppingItemMapValue = {
  cabinQuantityList?: [ 
    {
      segmentPosition?: {
        journeyIndex?: int32(name='journey_index', example='0'),
        segmentIndex?: int32(name='segment_index', example='0'),
      }(name='segment_position'),
      cabinInfo?: {
        cabin?: string(name='cabin'),
        cabinClass?: string(name='cabin_class'),
        cabinClassName?: string(name='cabin_class_name'),
        quantity?: string(name='quantity'),
      }(name='cabin_info'),
    }
  ](name='cabin_quantity_list'),
  searchPrice?: {
    floorPrice?: int32(name='floor_price', example='17400'),
    ticketPrice?: int32(name='ticket_price', example='121000'),
    sellPrice?: int32(name='sell_price', example='17400'),
    originalSellPrice?: int32(name='original_sell_price', example='17400'),
    baseTotalPrice?: int32(name='base_total_price'),
    beforeControlPrice?: int32(name='before_control_price', example='17400'),
    tax?: int32(name='tax', example='11000'),
    supplyPrice?: int32(name='supply_price'),
    basicCabinPrice?: int32(name='basic_cabin_price', example='242000'),
    buildPrice?: int32(name='build_price', example='5000'),
    oilPrice?: int32(name='oil_price', example='6000'),
    firstStandardPrice?: int32(name='first_standard_price'),
    businessStandardPrice?: int32(name='business_standard_price'),
    commonStandardPrice?: int32(name='common_standard_price', example='242000'),
    interTicketPrice?: int32(name='inter_ticket_price', description='fdPrice', example='fdPrice'),
    subtractedPrice?: int32(name='subtracted_price'),
    originCommonPrice?: int32(name='origin_common_price'),
    dynamicPromotionPrice?: int32(name='dynamic_promotion_price'),
    installmentNum?: int32(name='installment_num'),
    installmentPrice?: double(name='installment_price'),
    competitionDynamicPrice?: int32(name='competition_dynamic_price'),
    competitionPromotionPrice?: int32(name='competition_promotion_price'),
    minBeforeControlPriceOfNormal?: int32(name='min_before_control_price_of_normal', example='17400'),
    priceShowInfo?: {
      discountInfo?: string(name='discount_info'),
      discountNum?: double(name='discount_num', example='0.8'),
      showTicketPrice?: boolean(name='show_ticket_price', example='false'),
    }(name='price_show_info'),
  }(name='search_price'),
  segmentPriceList?: [ 
    {
      segmentPosition?: {
        journeyIndex?: int32(name='journey_index', example='0'),
        segmentIndex?: int32(name='segment_index', example='0'),
      }(name='segment_position'),
      searchPrice?: {
        sellPrice?: int32(name='sell_price', example='120000'),
        ticketPrice?: int32(name='ticket_price', example='120000'),
        tax?: int32(name='tax', example='6000'),
      }(name='search_price'),
    }
  ](name='segment_price_list'),
  id?: string(name='id', description='id', example='ADT07df0bd9-f803-4a50-8449-f4bd675d9939'),
  cabinQuantity?: map[string]ModuleItemListShoppingItemMapValueCabinQuantityValue(name='cabin_quantity'),
  segmentPrice?: map[string]ModuleItemListShoppingItemMapValueSegmentPriceValue(name='segment_price'),
}

model ModuleItemListSubItemPositionMapValue = {
  journeyIndex?: int32(name='journey_index', example='0'),
  segmentIndex?: int32(name='segment_index', example='0'),
}

model ModuleItemListSubItemsShoppingItemMapValue = {
  cabinQuantityList?: [ 
    {
      segmentPosition?: {
        journeyIndex?: int32(name='journey_index', example='0'),
        segmentIndex?: int32(name='segment_index', example='0'),
      }(name='segment_position'),
      cabinInfo?: {
        cabin?: string(name='cabin'),
        cabinClass?: string(name='cabin_class'),
        cabinClassName?: string(name='cabin_class_name'),
        quantity?: string(name='quantity'),
      }(name='cabin_info'),
    }
  ](name='cabin_quantity_list'),
  searchPrice?: {
    floorPrice?: int32(name='floor_price', example='17400'),
    ticketPrice?: int32(name='ticket_price', example='121000'),
    sellPrice?: int32(name='sell_price', example='17400'),
    originalSellPrice?: int32(name='original_sell_price', example='17400'),
    baseTotalPrice?: int32(name='base_total_price'),
    beforeControlPrice?: int32(name='before_control_price', example='17400'),
    tax?: int32(name='tax', example='11000'),
    supplyPrice?: int32(name='supply_price'),
    basicCabinPrice?: int32(name='basic_cabin_price', example='242000'),
    buildPrice?: int32(name='build_price', example='5000'),
    oilPrice?: int32(name='oil_price', example='6000'),
    firstStandardPrice?: int32(name='first_standard_price'),
    businessStandardPrice?: int32(name='business_standard_price'),
    commonStandardPrice?: int32(name='common_standard_price', example='242000'),
    interTicketPrice?: int32(name='inter_ticket_price', description='fdPrice', example='fdPrice'),
    subtractedPrice?: int32(name='subtracted_price'),
    originCommonPrice?: int32(name='origin_common_price'),
    dynamicPromotionPrice?: int32(name='dynamic_promotion_price'),
    installmentNum?: int32(name='installment_num'),
    installmentPrice?: double(name='installment_price'),
    competitionDynamicPrice?: int32(name='competition_dynamic_price'),
    competitionPromotionPrice?: int32(name='competition_promotion_price'),
    minBeforeControlPriceOfNormal?: int32(name='min_before_control_price_of_normal', example='17400'),
    priceShowInfo?: {
      discountInfo?: string(name='discount_info'),
      discountNum?: double(name='discount_num', example='0.8'),
      showTicketPrice?: boolean(name='show_ticket_price', example='false'),
    }(name='price_show_info'),
  }(name='search_price'),
  segmentPriceList?: [ 
    {
      segmentPosition?: {
        journeyIndex?: int32(name='journey_index', example='0'),
        segmentIndex?: int32(name='segment_index', example='0'),
      }(name='segment_position'),
      searchPrice?: {
        sellPrice?: int32(name='sell_price', example='120000'),
        ticketPrice?: int32(name='ticket_price', example='120000'),
        tax?: int32(name='tax', example='6000'),
      }(name='search_price'),
    }
  ](name='segment_price_list'),
  id?: string(name='id', description='id', example='ADT07df0bd9-f803-4a50-8449-f4bd675d9939'),
  cabinQuantity?: map[string]ModuleItemListSubItemsShoppingItemMapValueCabinQuantityValue(name='cabin_quantity'),
  segmentPrice?: map[string]ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValue(name='segment_price'),
}

model ModuleOrderItemListBaggageRuleOfferBaggageInfoMapValue = {
  startCityCode?: string(name='start_city_code'),
  endCityCode?: string(name='end_city_code'),
  carryFreePc?: int32(name='carry_free_pc'),
  carryBagWeight?: int32(name='carry_bag_weight'),
  carryBagSize?: string(name='carry_bag_size'),
  isAllCarryBagWeight?: boolean(name='is_all_carry_bag_weight'),
  totalPcs?: long(name='total_pcs'),
  totalWeight?: long(name='total_weight'),
  carryUnknown?: boolean(name='carry_unknown'),
  carryLength?: int32(name='carry_length'),
  carryWidth?: int32(name='carry_width'),
  carryHeight?: int32(name='carry_height'),
  carrySumOfLengthWidthHeight?: int32(name='carry_sum_of_length_width_height'),
  freePcs?: long(name='free_pcs'),
  baggageWeight?: long(name='baggage_weight'),
  baggageUnit?: string(name='baggage_unit'),
  baggageSize?: string(name='baggage_size'),
  allWeight?: boolean(name='all_weight'),
  length?: int32(name='length'),
  width?: int32(name='width'),
  height?: int32(name='height'),
  sumOfLengthWidthHeight?: int32(name='sum_of_length_width_height'),
  unknown?: boolean(name='unknown'),
  cnDesc?: string(name='cn_desc'),
  enDesc?: string(name='en_desc'),
  attribute?: string(name='attribute'),
  baggagePrice?: int32(name='baggage_price'),
  carryOnBaggageTips?: string(name='carry_on_baggage_tips'),
}

model ModuleOrderItemListRefundChangeRuleOfferPenaltyInfoMapValue = {
  struct?: boolean(name='struct', example='true'),
  cancelFeeInd?: boolean(name='cancel_fee_ind', example='true'),
  changeFeeInd?: boolean(name='change_fee_ind', example='false'),
  upgradeFeeInd?: boolean(name='upgrade_fee_ind', example='false'),
  reissueInd?: boolean(name='reissue_ind', example='false'),
  penaltyTypeCode?: int32(name='penalty_type_code', example='0'),
  penaltyApplyRangeCode?: int32(name='penalty_apply_range_code', example='1'),
  penaltyChargeTypeCode?: int32(name='penalty_charge_type_code', example='0'),
  fee?: double(name='fee', example='1'),
  currency?: string(name='currency', example='CNY'),
  penaltyPercent?: double(name='penalty_percent', example='0'),
  startTime?: int32(name='start_time', example='1'),
  endTime?: int32(name='end_time', example='10'),
  timeUnitCode?: int32(name='time_unit_code', example='0'),
  title?: string(name='title'),
  depTime?: string(name='dep_time'),
  segmentNumber?: string(name='segment_number'),
  descInfos?: map[string]string(name='desc_infos'),
}

model ModuleGroupItemShoppingItemMapValue = {
  cabinQuantityList?: [ 
    {
      segmentPosition?: {
        journeyIndex?: int32(name='journey_index', example='0'),
        segmentIndex?: int32(name='segment_index', example='0'),
      }(name='segment_position'),
      cabin?: {
        cabin?: string(name='cabin', example='Y'),
        cabinClass?: string(name='cabin_class', example='Y'),
        cabinClassName?: string(name='cabin_class_name'),
        quantity?: string(name='quantity', example='A'),
      }(name='cabin'),
    }
  ](name='cabin_quantity_list'),
  searchPrice?: {
    ticketPrice?: int32(name='ticket_price', example='120000'),
    sellPrice?: int32(name='sell_price', example='120000'),
    tax?: int32(name='tax', example='6000'),
  }(name='search_price'),
  segmentPriceList?: [ 
    {
      segmentPosition?: {
        journeyIndex?: int32(name='journey_index', example='0'),
        segmentIndex?: int32(name='segment_index', example='0'),
      }(name='segment_position'),
      searchPrice?: {
        ticketPrice?: int32(name='ticket_price', example='120000'),
        sellPrice?: int32(name='sell_price', example='120000'),
        tax?: int32(name='tax', example='6000'),
      }(name='search_price'),
    }
  ](name='segment_price_list'),
}

model ModuleGroupItemSubItemPositionMapValue = {
  journeyIndex?: int32(name='journey_index', example='0'),
  segmentIndex?: int32(name='segment_index', example='0'),
}

model ModuleGroupItemSubItemsBaggageRuleBaggageInfoMapValue = {
  carryFreepc?: int32(name='carry_freepc', example='1'),
  carryBagWeight?: int32(name='carry_bag_weight', example='10'),
  carryBagSize?: string(name='carry_bag_size', example='20*20'),
  isAllCarryBagWeight?: boolean(name='is_all_carry_bag_weight', example='false'),
  airline?: string(name='airline', example='CA'),
  startAirport?: string(name='start_airport', example='BJS'),
  endAirport?: string(name='end_airport', example='HGH'),
  startCityCode?: string(name='start_city_code', example='BJS'),
  endCityCode?: string(name='end_city_code', example='HGH'),
  freePcs?: long(name='free_pcs', example='1'),
  baggageWeight?: long(name='baggage_weight', example='30'),
  baggageUnit?: string(name='baggage_unit', example='KG'),
  baggageSize?: string(name='baggage_size', example='40*50'),
  allWeight?: boolean(name='all_weight', example='false'),
}

model ModuleGroupItemSubItemsRefundChangeRuleOfferPenaltyInfoMapValue = {
  struct?: boolean(name='struct', example='true'),
  cancelFeeInd?: boolean(name='cancel_fee_ind', example='true'),
  changeFeeInd?: boolean(name='change_fee_ind', example='true'),
  upgradeFeeInd?: boolean(name='upgrade_fee_ind', example='true'),
  reissueInd?: boolean(name='reissue_ind', example='true'),
  penaltyTypeCode?: int32(name='penalty_type_code', example='1'),
  penaltyApplyRangeCode?: int32(name='penalty_apply_range_code', example='0'),
  penaltyChargeTypeCode?: int32(name='penalty_charge_type_code', example='1'),
  fee?: double(name='fee', example='300'),
  currency?: string(name='currency', example='CNY'),
  penaltyPercent?: double(name='penalty_percent', example='30'),
  startTime?: int32(name='start_time', example='48'),
  endTime?: int32(name='end_time', example='0'),
  timeUnitCode?: int32(name='time_unit_code', example='0'),
}

model ModuleGroupItemSubItemsShoppingItemMapValue = {
  searchPrice?: {
    ticketPrice?: int32(name='ticket_price', example='120000'),
    sellPrice?: int32(name='sell_price', example='120000'),
    tax?: int32(name='tax', example='6000'),
  }(name='search_price'),
}

model ModuleItemListSubItemsBaggageRuleOfferBaggageInfoMapValue = {
  startCityCode?: string(name='start_city_code'),
  endCityCode?: string(name='end_city_code'),
  carryFreePc?: int32(name='carry_free_pc'),
  carryBagWeight?: int32(name='carry_bag_weight'),
  carryBagSize?: string(name='carry_bag_size'),
  isAllCarryBagWeight?: boolean(name='is_all_carry_bag_weight'),
  totalPcs?: long(name='total_pcs'),
  totalWeight?: long(name='total_weight'),
  carryUnknown?: boolean(name='carry_unknown'),
  carryLength?: int32(name='carry_length'),
  carryWidth?: int32(name='carry_width'),
  carryHeight?: int32(name='carry_height'),
  carrySumOfLengthWidthHeight?: int32(name='carry_sum_of_length_width_height'),
  freePcs?: long(name='free_pcs'),
  baggageWeight?: long(name='baggage_weight'),
  baggageUnit?: string(name='baggage_unit'),
  baggageSize?: string(name='baggage_size'),
  allWeight?: boolean(name='all_weight'),
  length?: int32(name='length'),
  width?: int32(name='width'),
  height?: int32(name='height'),
  sumOfLengthWidthHeight?: int32(name='sum_of_length_width_height'),
  unknown?: boolean(name='unknown'),
  cnDesc?: string(name='cn_desc'),
  enDesc?: string(name='en_desc'),
  attribute?: string(name='attribute'),
  baggagePrice?: int32(name='baggage_price'),
  carryOnBaggageTips?: string(name='carry_on_baggage_tips'),
}

model ModuleItemListSubItemsRefundChangeRuleOfferPenaltyInfoMapValue = {
  struct?: boolean(name='struct', example='true'),
  cancelFeeInd?: boolean(name='cancel_fee_ind', example='true'),
  changeFeeInd?: boolean(name='change_fee_ind', example='true'),
  upgradeFeeInd?: boolean(name='upgrade_fee_ind', example='true'),
  reissueInd?: boolean(name='reissue_ind', example='false'),
  penaltyTypeCode?: int32(name='penalty_type_code', example='0'),
  penaltyApplyRangeCode?: int32(name='penalty_apply_range_code', example='1'),
  penaltyChargeTypeCode?: int32(name='penalty_charge_type_code', example='0'),
  fee?: double(name='fee', example='300'),
  currency?: string(name='currency', example='CNY'),
  penaltyPercent?: double(name='penalty_percent', example='30'),
  startTime?: int32(name='start_time', example='48'),
  endTime?: int32(name='end_time', example='0'),
  timeUnitCode?: int32(name='time_unit_code', example='0'),
  title?: string(name='title'),
  depTime?: string(name='dep_time'),
  segmentNumber?: string(name='segment_number'),
  descInfos?: map[string]string(name='desc_infos'),
}

model ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityValue = {
  cabin?: string(name='cabin', example='R'),
  cabinClass?: string(name='cabin_class', example='Y'),
  cabinClassName?: string(name='cabin_class_name'),
  cabinClassMemo?: string(name='cabin_class_memo'),
  specification?: string(name='specification'),
  quantity?: string(name='quantity', example='A'),
  linkCabins?: [ string ](name='link_cabins'),
  reshopChangeCabin?: boolean(name='reshop_change_cabin', example='false'),
  childCabinType?: int32(name='child_cabin_type'),
  infantBasicCabin?: string(name='infant_basic_cabin'),
  innerCabinClass?: int32(name='inner_cabin_class', example='2'),
}

model ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValue = {
  floorPrice?: int32(name='floor_price', example='17400'),
  ticketPrice?: int32(name='ticket_price', example='121000'),
  sellPrice?: int32(name='sell_price', example='17400'),
  originalSellPrice?: int32(name='original_sell_price', example='17400'),
  baseTotalPrice?: int32(name='base_total_price'),
  beforeControlPrice?: int32(name='before_control_price', example='17400'),
  tax?: int32(name='tax', example='11000'),
  supplyPrice?: int32(name='supply_price'),
  basicCabinPrice?: int32(name='basic_cabin_price', example='242000'),
  buildPrice?: int32(name='build_price', example='5000'),
  oilPrice?: int32(name='oil_price', example='6000'),
  firstStandardPrice?: int32(name='first_standard_price'),
  businessStandardPrice?: int32(name='business_standard_price'),
  commonStandardPrice?: int32(name='common_standard_price', example='242000'),
  interTicketPrice?: int32(name='inter_ticket_price', description='fdPrice', example='fdPrice'),
  subtractedPrice?: int32(name='subtracted_price'),
  originCommonPrice?: int32(name='origin_common_price'),
  dynamicPromotionPrice?: int32(name='dynamic_promotion_price'),
  installmentNum?: int32(name='installment_num'),
  installmentPrice?: double(name='installment_price'),
  competitionDynamicPrice?: int32(name='competition_dynamic_price'),
  competitionPromotionPrice?: int32(name='competition_promotion_price'),
  minBeforeControlPriceOfNormal?: int32(name='min_before_control_price_of_normal'),
  priceShowInfo?: {
    discountInfo?: string(name='discount_info'),
    discountNum?: double(name='discount_num', example='0.8'),
    showTicketPrice?: boolean(name='show_ticket_price', example='false'),
  }(name='price_show_info'),
}

model ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueCabinQuantityValue = {
  cabin?: string(name='cabin', example='R'),
  cabinClass?: string(name='cabin_class', example='Y'),
  cabinClassName?: string(name='cabin_class_name'),
  cabinClassMemo?: string(name='cabin_class_memo'),
  specification?: string(name='specification'),
  quantity?: string(name='quantity', example='A'),
  linkCabins?: [ string ](name='link_cabins'),
  reshopChangeCabin?: boolean(name='reshop_change_cabin', example='false'),
  childCabinType?: int32(name='child_cabin_type'),
  infantBasicCabin?: string(name='infant_basic_cabin'),
  innerCabinClass?: int32(name='inner_cabin_class', example='2'),
}

model ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValue = {
  floorPrice?: int32(name='floor_price', example='17400'),
  ticketPrice?: int32(name='ticket_price', example='121000'),
  sellPrice?: int32(name='sell_price', example='17400'),
  originalSellPrice?: int32(name='original_sell_price', example='17400'),
  baseTotalPrice?: int32(name='base_total_price'),
  beforeControlPrice?: int32(name='before_control_price', example='17400'),
  tax?: int32(name='tax', example='11000'),
  supplyPrice?: int32(name='supply_price'),
  basicCabinPrice?: int32(name='basic_cabin_price', example='242000'),
  buildPrice?: int32(name='build_price', example='5000'),
  oilPrice?: int32(name='oil_price', example='6000'),
  firstStandardPrice?: int32(name='first_standard_price'),
  businessStandardPrice?: int32(name='business_standard_price'),
  commonStandardPrice?: int32(name='common_standard_price', example='242000'),
  interTicketPrice?: int32(name='inter_ticket_price', description='fdPrice', example='fdPrice'),
  subtractedPrice?: int32(name='subtracted_price'),
  originCommonPrice?: int32(name='origin_common_price'),
  dynamicPromotionPrice?: int32(name='dynamic_promotion_price'),
  installmentNum?: int32(name='installment_num'),
  installmentPrice?: double(name='installment_price'),
  competitionDynamicPrice?: int32(name='competition_dynamic_price'),
  competitionPromotionPrice?: int32(name='competition_promotion_price'),
  minBeforeControlPriceOfNormal?: int32(name='min_before_control_price_of_normal'),
  priceShowInfo?: {
    discountInfo?: string(name='discount_info'),
    discountNum?: double(name='discount_num', example='0.8'),
    showTicketPrice?: boolean(name='show_ticket_price', example='false'),
  }(name='price_show_info'),
}

model ModuleFlightItemListItemListShoppingItemMapValueCabinQuantityValue = {
  cabin?: string(name='cabin', example='R'),
  cabinClass?: string(name='cabin_class', example='Y'),
  cabinClassName?: string(name='cabin_class_name'),
  cabinClassMemo?: string(name='cabin_class_memo'),
  specification?: string(name='specification'),
  quantity?: string(name='quantity', example='A'),
  linkCabins?: [ string ](name='link_cabins'),
  reshopChangeCabin?: boolean(name='reshop_change_cabin', example='false'),
  childCabinType?: int32(name='child_cabin_type'),
  infantBasicCabin?: string(name='infant_basic_cabin'),
  innerCabinClass?: int32(name='inner_cabin_class', example='2'),
}

model ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValue = {
  floorPrice?: int32(name='floor_price', example='17400'),
  ticketPrice?: int32(name='ticket_price', example='121000'),
  sellPrice?: int32(name='sell_price', example='17400'),
  originalSellPrice?: int32(name='original_sell_price', example='17400'),
  baseTotalPrice?: int32(name='base_total_price'),
  beforeControlPrice?: int32(name='before_control_price', example='17400'),
  tax?: int32(name='tax', example='11000'),
  supplyPrice?: int32(name='supply_price'),
  basicCabinPrice?: int32(name='basic_cabin_price', example='242000'),
  buildPrice?: int32(name='build_price', example='5000'),
  oilPrice?: int32(name='oil_price', example='6000'),
  firstStandardPrice?: int32(name='first_standard_price'),
  businessStandardPrice?: int32(name='business_standard_price'),
  commonStandardPrice?: int32(name='common_standard_price', example='242000'),
  interTicketPrice?: int32(name='inter_ticket_price', description='fdPrice', example='fdPrice'),
  subtractedPrice?: int32(name='subtracted_price'),
  originCommonPrice?: int32(name='origin_common_price'),
  dynamicPromotionPrice?: int32(name='dynamic_promotion_price'),
  installmentNum?: int32(name='installment_num'),
  installmentPrice?: double(name='installment_price'),
  competitionDynamicPrice?: int32(name='competition_dynamic_price'),
  competitionPromotionPrice?: int32(name='competition_promotion_price'),
  minBeforeControlPriceOfNormal?: int32(name='min_before_control_price_of_normal'),
  priceShowInfo?: {
    discountInfo?: string(name='discount_info'),
    discountNum?: double(name='discount_num', example='0.8'),
    showTicketPrice?: boolean(name='show_ticket_price', example='false'),
  }(name='price_show_info'),
}

model ModuleFlightItemListItemListSubItemsShoppingItemMapValueCabinQuantityValue = {
  cabin?: string(name='cabin', example='R'),
  cabinClass?: string(name='cabin_class', example='Y'),
  cabinClassName?: string(name='cabin_class_name'),
  cabinClassMemo?: string(name='cabin_class_memo'),
  specification?: string(name='specification'),
  quantity?: string(name='quantity', example='A'),
  linkCabins?: [ string ](name='link_cabins'),
  reshopChangeCabin?: boolean(name='reshop_change_cabin', example='false'),
  childCabinType?: int32(name='child_cabin_type'),
  infantBasicCabin?: string(name='infant_basic_cabin'),
  innerCabinClass?: int32(name='inner_cabin_class', example='2'),
}

model ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValue = {
  floorPrice?: int32(name='floor_price', example='17400'),
  ticketPrice?: int32(name='ticket_price', example='121000'),
  sellPrice?: int32(name='sell_price', example='17400'),
  originalSellPrice?: int32(name='original_sell_price', example='17400'),
  baseTotalPrice?: int32(name='base_total_price'),
  beforeControlPrice?: int32(name='before_control_price', example='17400'),
  tax?: int32(name='tax', example='11000'),
  supplyPrice?: int32(name='supply_price'),
  basicCabinPrice?: int32(name='basic_cabin_price', example='242000'),
  buildPrice?: int32(name='build_price', example='5000'),
  oilPrice?: int32(name='oil_price', example='6000'),
  firstStandardPrice?: int32(name='first_standard_price'),
  businessStandardPrice?: int32(name='business_standard_price'),
  commonStandardPrice?: int32(name='common_standard_price', example='242000'),
  interTicketPrice?: int32(name='inter_ticket_price', description='fdPrice', example='fdPrice'),
  subtractedPrice?: int32(name='subtracted_price'),
  originCommonPrice?: int32(name='origin_common_price'),
  dynamicPromotionPrice?: int32(name='dynamic_promotion_price'),
  installmentNum?: int32(name='installment_num'),
  installmentPrice?: double(name='installment_price'),
  competitionDynamicPrice?: int32(name='competition_dynamic_price'),
  competitionPromotionPrice?: int32(name='competition_promotion_price'),
  minBeforeControlPriceOfNormal?: int32(name='min_before_control_price_of_normal'),
  priceShowInfo?: {
    discountInfo?: string(name='discount_info'),
    discountNum?: double(name='discount_num', example='0.8'),
    showTicketPrice?: boolean(name='show_ticket_price', example='false'),
  }(name='price_show_info'),
}

model ModuleItemListShoppingItemMapValueCabinQuantityValue = {
  cabin?: string(name='cabin', example='R'),
  cabinClass?: string(name='cabin_class', example='Y'),
  cabinClassName?: string(name='cabin_class_name'),
  cabinClassMemo?: string(name='cabin_class_memo'),
  specification?: string(name='specification'),
  quantity?: string(name='quantity', example='A'),
  linkCabins?: [ string ](name='link_cabins'),
  reshopChangeCabin?: boolean(name='reshop_change_cabin', example='false'),
  childCabinType?: int32(name='child_cabin_type'),
  infantBasicCabin?: string(name='infant_basic_cabin'),
  innerCabinClass?: int32(name='inner_cabin_class', example='2'),
}

model ModuleItemListShoppingItemMapValueSegmentPriceValue = {
  floorPrice?: int32(name='floor_price', example='17400'),
  ticketPrice?: int32(name='ticket_price', example='121000'),
  sellPrice?: int32(name='sell_price', example='17400'),
  originalSellPrice?: int32(name='original_sell_price', example='17400'),
  baseTotalPrice?: int32(name='base_total_price'),
  beforeControlPrice?: int32(name='before_control_price', example='17400'),
  tax?: int32(name='tax', example='11000'),
  supplyPrice?: int32(name='supply_price'),
  basicCabinPrice?: int32(name='basic_cabin_price', example='242000'),
  buildPrice?: int32(name='build_price', example='5000'),
  oilPrice?: int32(name='oil_price', example='6000'),
  firstStandardPrice?: int32(name='first_standard_price'),
  businessStandardPrice?: int32(name='business_standard_price'),
  commonStandardPrice?: int32(name='common_standard_price', example='242000'),
  interTicketPrice?: int32(name='inter_ticket_price', description='fdPrice', example='fdPrice'),
  subtractedPrice?: int32(name='subtracted_price'),
  originCommonPrice?: int32(name='origin_common_price'),
  dynamicPromotionPrice?: int32(name='dynamic_promotion_price'),
  installmentNum?: int32(name='installment_num'),
  installmentPrice?: double(name='installment_price'),
  competitionDynamicPrice?: int32(name='competition_dynamic_price'),
  competitionPromotionPrice?: int32(name='competition_promotion_price'),
  minBeforeControlPriceOfNormal?: int32(name='min_before_control_price_of_normal'),
  priceShowInfo?: {
    discountInfo?: string(name='discount_info'),
    discountNum?: double(name='discount_num', example='0.8'),
    showTicketPrice?: boolean(name='show_ticket_price', example='false'),
  }(name='price_show_info'),
}

model ModuleItemListSubItemsShoppingItemMapValueCabinQuantityValue = {
  cabin?: string(name='cabin', example='R'),
  cabinClass?: string(name='cabin_class', example='Y'),
  cabinClassName?: string(name='cabin_class_name'),
  cabinClassMemo?: string(name='cabin_class_memo'),
  specification?: string(name='specification'),
  quantity?: string(name='quantity', example='A'),
  linkCabins?: [ string ](name='link_cabins'),
  reshopChangeCabin?: boolean(name='reshop_change_cabin', example='false'),
  childCabinType?: int32(name='child_cabin_type'),
  infantBasicCabin?: string(name='infant_basic_cabin'),
  innerCabinClass?: int32(name='inner_cabin_class', example='2'),
}

model ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValue = {
  floorPrice?: int32(name='floor_price', example='17400'),
  ticketPrice?: int32(name='ticket_price', example='121000'),
  sellPrice?: int32(name='sell_price', example='17400'),
  originalSellPrice?: int32(name='original_sell_price', example='17400'),
  baseTotalPrice?: int32(name='base_total_price'),
  beforeControlPrice?: int32(name='before_control_price', example='17400'),
  tax?: int32(name='tax', example='11000'),
  supplyPrice?: int32(name='supply_price'),
  basicCabinPrice?: int32(name='basic_cabin_price', example='242000'),
  buildPrice?: int32(name='build_price', example='5000'),
  oilPrice?: int32(name='oil_price', example='6000'),
  firstStandardPrice?: int32(name='first_standard_price'),
  businessStandardPrice?: int32(name='business_standard_price'),
  commonStandardPrice?: int32(name='common_standard_price', example='242000'),
  interTicketPrice?: int32(name='inter_ticket_price', description='fdPrice', example='fdPrice'),
  subtractedPrice?: int32(name='subtracted_price'),
  originCommonPrice?: int32(name='origin_common_price'),
  dynamicPromotionPrice?: int32(name='dynamic_promotion_price'),
  installmentNum?: int32(name='installment_num'),
  installmentPrice?: double(name='installment_price'),
  competitionDynamicPrice?: int32(name='competition_dynamic_price'),
  competitionPromotionPrice?: int32(name='competition_promotion_price'),
  minBeforeControlPriceOfNormal?: int32(name='min_before_control_price_of_normal'),
  priceShowInfo?: {
    discountInfo?: string(name='discount_info'),
    discountNum?: double(name='discount_num', example='0.8'),
    showTicketPrice?: boolean(name='show_ticket_price', example='false'),
  }(name='price_show_info'),
}

model AccessTokenRequest {
  appSecret?: string(name='app_secret', description='This parameter is required.', example='ggZADkghsadgogeDxdaD'),
}

model AccessTokenResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  data?: {
    expire?: long(name='expire', example='70000'),
    token?: string(name='token', example='37j76df'),
  }(name='data'),
  message?: string(name='message'),
  module?: {
    expire?: long(name='expire', example='70000'),
    start?: long(name='start', example='1652410740914'),
    token?: string(name='token', example='37j76df'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', description='成功标识', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model AccessTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AccessTokenResponseBody(name='body'),
}

/**
 * @summary 换取accessToken接口
 *
 * @param request AccessTokenRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AccessTokenResponse
 */
async function accessTokenWithOptions(request: AccessTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AccessTokenResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.appSecret)) {
    query['app_secret'] = request.appSecret;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AccessToken',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/btrip-open-auth/v1/access-token/action/take`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 换取accessToken接口
 *
 * @param request AccessTokenRequest
 * @return AccessTokenResponse
 */
async function accessToken(request: AccessTokenRequest): AccessTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return accessTokenWithOptions(request, headers, runtime);
}

model AddDepartmentHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model AddDepartmentRequest {
  deptName?: string(name='dept_name', description='This parameter is required.'),
  managerEmployeeIdList?: [ string ](name='manager_employee_id_list'),
  outDeptId?: string(name='out_dept_id', description='This parameter is required.', example='dept123'),
  outDeptPid?: string(name='out_dept_pid', example='dept456'),
}

model AddDepartmentShrinkRequest {
  deptName?: string(name='dept_name', description='This parameter is required.'),
  managerEmployeeIdListShrink?: string(name='manager_employee_id_list'),
  outDeptId?: string(name='out_dept_id', description='This parameter is required.', example='dept123'),
  outDeptPid?: string(name='out_dept_pid', example='dept456'),
}

model AddDepartmentResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model AddDepartmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDepartmentResponseBody(name='body'),
}

/**
 * @summary 创建企业部门
 *
 * @param tmpReq AddDepartmentRequest
 * @param headers AddDepartmentHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddDepartmentResponse
 */
async function addDepartmentWithOptions(tmpReq: AddDepartmentRequest, headers: AddDepartmentHeaders, runtime: Util.RuntimeOptions): AddDepartmentResponse {
  Util.validateModel(tmpReq);
  var request = new AddDepartmentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.managerEmployeeIdList)) {
    request.managerEmployeeIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.managerEmployeeIdList, 'manager_employee_id_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deptName)) {
    body['dept_name'] = request.deptName;
  }
  if (!Util.isUnset(request.managerEmployeeIdListShrink)) {
    body['manager_employee_id_list'] = request.managerEmployeeIdListShrink;
  }
  if (!Util.isUnset(request.outDeptId)) {
    body['out_dept_id'] = request.outDeptId;
  }
  if (!Util.isUnset(request.outDeptPid)) {
    body['out_dept_pid'] = request.outDeptPid;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddDepartment',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/department/v2/add`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建企业部门
 *
 * @param request AddDepartmentRequest
 * @return AddDepartmentResponse
 */
async function addDepartment(request: AddDepartmentRequest): AddDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddDepartmentHeaders{};
  return addDepartmentWithOptions(request, headers, runtime);
}

model AddEmployeeHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model AddEmployeeRequest {
  accountEmail?: string(name='account_email'),
  accountPhone?: string(name='account_phone'),
  attribute?: string(name='attribute'),
  avatar?: string(name='avatar', example='https://static-legacy.dingtalk.com/media/lADPF8XMoxJeUkbNA2LNA5s_923_866.jpg'),
  baseCityCodeList?: [ string ](name='base_city_code_list'),
  baseLocationList?: [ 
    {
      code?: string(name='code'),
      level?: string(name='level'),
    }
  ](name='base_location_list'),
  birthday?: string(name='birthday', example='2000-01-02'),
  certList?: [ 
    {
      birthday?: string(name='birthday', example='2000-01-02'),
      certExpiredTime?: string(name='cert_expired_time', example='2099-03-12'),
      certNation?: string(name='cert_nation', example='CN'),
      certNo?: string(name='cert_no', example='123'),
      certType?: int32(name='cert_type', example='0'),
      gender?: string(name='gender', example='F'),
      nationality?: string(name='nationality', example='CN'),
      phone?: string(name='phone', example='13111111111'),
      realName?: string(name='real_name'),
      realNameEn?: string(name='real_name_en', example='John/Wilson'),
    }
  ](name='cert_list'),
  customRoleCodeList?: [ string ](name='custom_role_code_list'),
  email?: string(name='email', example='123@163.com'),
  gender?: string(name='gender', example='F'),
  isAdmin?: boolean(name='is_admin', example='false'),
  isBoss?: boolean(name='is_boss', example='false'),
  isDeptLeader?: boolean(name='is_dept_leader', example='false'),
  jobNo?: string(name='job_no', example='1001'),
  managerUserId?: string(name='manager_user_id', example='user456'),
  outDeptIdList?: [ string ](name='out_dept_id_list'),
  phone?: string(name='phone', example='13111111111'),
  positionLevel?: string(name='position_level', example='M4'),
  realName?: string(name='real_name'),
  realNameEn?: string(name='real_name_en', example='John/Wilson'),
  unionId?: string(name='union_id', example='union123'),
  userId?: string(name='user_id', description='This parameter is required.', example='user123'),
  userNick?: string(name='user_nick', description='This parameter is required.'),
}

model AddEmployeeShrinkRequest {
  accountEmail?: string(name='account_email'),
  accountPhone?: string(name='account_phone'),
  attribute?: string(name='attribute'),
  avatar?: string(name='avatar', example='https://static-legacy.dingtalk.com/media/lADPF8XMoxJeUkbNA2LNA5s_923_866.jpg'),
  baseCityCodeListShrink?: string(name='base_city_code_list'),
  baseLocationListShrink?: string(name='base_location_list'),
  birthday?: string(name='birthday', example='2000-01-02'),
  certListShrink?: string(name='cert_list'),
  customRoleCodeListShrink?: string(name='custom_role_code_list'),
  email?: string(name='email', example='123@163.com'),
  gender?: string(name='gender', example='F'),
  isAdmin?: boolean(name='is_admin', example='false'),
  isBoss?: boolean(name='is_boss', example='false'),
  isDeptLeader?: boolean(name='is_dept_leader', example='false'),
  jobNo?: string(name='job_no', example='1001'),
  managerUserId?: string(name='manager_user_id', example='user456'),
  outDeptIdListShrink?: string(name='out_dept_id_list'),
  phone?: string(name='phone', example='13111111111'),
  positionLevel?: string(name='position_level', example='M4'),
  realName?: string(name='real_name'),
  realNameEn?: string(name='real_name_en', example='John/Wilson'),
  unionId?: string(name='union_id', example='union123'),
  userId?: string(name='user_id', description='This parameter is required.', example='user123'),
  userNick?: string(name='user_nick', description='This parameter is required.'),
}

model AddEmployeeResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model AddEmployeeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddEmployeeResponseBody(name='body'),
}

/**
 * @summary 添加员工
 *
 * @param tmpReq AddEmployeeRequest
 * @param headers AddEmployeeHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddEmployeeResponse
 */
async function addEmployeeWithOptions(tmpReq: AddEmployeeRequest, headers: AddEmployeeHeaders, runtime: Util.RuntimeOptions): AddEmployeeResponse {
  Util.validateModel(tmpReq);
  var request = new AddEmployeeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.baseCityCodeList)) {
    request.baseCityCodeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.baseCityCodeList, 'base_city_code_list', 'json');
  }
  if (!Util.isUnset(tmpReq.baseLocationList)) {
    request.baseLocationListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.baseLocationList, 'base_location_list', 'json');
  }
  if (!Util.isUnset(tmpReq.certList)) {
    request.certListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.certList, 'cert_list', 'json');
  }
  if (!Util.isUnset(tmpReq.customRoleCodeList)) {
    request.customRoleCodeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.customRoleCodeList, 'custom_role_code_list', 'json');
  }
  if (!Util.isUnset(tmpReq.outDeptIdList)) {
    request.outDeptIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.outDeptIdList, 'out_dept_id_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.accountEmail)) {
    body['account_email'] = request.accountEmail;
  }
  if (!Util.isUnset(request.accountPhone)) {
    body['account_phone'] = request.accountPhone;
  }
  if (!Util.isUnset(request.attribute)) {
    body['attribute'] = request.attribute;
  }
  if (!Util.isUnset(request.avatar)) {
    body['avatar'] = request.avatar;
  }
  if (!Util.isUnset(request.baseCityCodeListShrink)) {
    body['base_city_code_list'] = request.baseCityCodeListShrink;
  }
  if (!Util.isUnset(request.baseLocationListShrink)) {
    body['base_location_list'] = request.baseLocationListShrink;
  }
  if (!Util.isUnset(request.birthday)) {
    body['birthday'] = request.birthday;
  }
  if (!Util.isUnset(request.certListShrink)) {
    body['cert_list'] = request.certListShrink;
  }
  if (!Util.isUnset(request.customRoleCodeListShrink)) {
    body['custom_role_code_list'] = request.customRoleCodeListShrink;
  }
  if (!Util.isUnset(request.email)) {
    body['email'] = request.email;
  }
  if (!Util.isUnset(request.gender)) {
    body['gender'] = request.gender;
  }
  if (!Util.isUnset(request.isAdmin)) {
    body['is_admin'] = request.isAdmin;
  }
  if (!Util.isUnset(request.isBoss)) {
    body['is_boss'] = request.isBoss;
  }
  if (!Util.isUnset(request.isDeptLeader)) {
    body['is_dept_leader'] = request.isDeptLeader;
  }
  if (!Util.isUnset(request.jobNo)) {
    body['job_no'] = request.jobNo;
  }
  if (!Util.isUnset(request.managerUserId)) {
    body['manager_user_id'] = request.managerUserId;
  }
  if (!Util.isUnset(request.outDeptIdListShrink)) {
    body['out_dept_id_list'] = request.outDeptIdListShrink;
  }
  if (!Util.isUnset(request.phone)) {
    body['phone'] = request.phone;
  }
  if (!Util.isUnset(request.positionLevel)) {
    body['position_level'] = request.positionLevel;
  }
  if (!Util.isUnset(request.realName)) {
    body['real_name'] = request.realName;
  }
  if (!Util.isUnset(request.realNameEn)) {
    body['real_name_en'] = request.realNameEn;
  }
  if (!Util.isUnset(request.unionId)) {
    body['union_id'] = request.unionId;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userNick)) {
    body['user_nick'] = request.userNick;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddEmployee',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/employee/v2/add`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 添加员工
 *
 * @param request AddEmployeeRequest
 * @return AddEmployeeResponse
 */
async function addEmployee(request: AddEmployeeRequest): AddEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddEmployeeHeaders{};
  return addEmployeeWithOptions(request, headers, runtime);
}

model AddEmployeesToCustomRoleHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model AddEmployeesToCustomRoleRequest {
  roleId?: string(name='role_id', description='This parameter is required.', example='12345'),
  userIdList?: [ string ](name='user_id_list', description='This parameter is required.', nullable=false),
}

model AddEmployeesToCustomRoleShrinkRequest {
  roleId?: string(name='role_id', description='This parameter is required.', example='12345'),
  userIdListShrink?: string(name='user_id_list', description='This parameter is required.', nullable=false),
}

model AddEmployeesToCustomRoleResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model AddEmployeesToCustomRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddEmployeesToCustomRoleResponseBody(name='body'),
}

/**
 * @summary 批量新增企业自定义角色下人员
 *
 * @param tmpReq AddEmployeesToCustomRoleRequest
 * @param headers AddEmployeesToCustomRoleHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddEmployeesToCustomRoleResponse
 */
async function addEmployeesToCustomRoleWithOptions(tmpReq: AddEmployeesToCustomRoleRequest, headers: AddEmployeesToCustomRoleHeaders, runtime: Util.RuntimeOptions): AddEmployeesToCustomRoleResponse {
  Util.validateModel(tmpReq);
  var request = new AddEmployeesToCustomRoleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userIdList)) {
    request.userIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userIdList, 'user_id_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.roleId)) {
    body['role_id'] = request.roleId;
  }
  if (!Util.isUnset(request.userIdListShrink)) {
    body['user_id_list'] = request.userIdListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddEmployeesToCustomRole',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/role/v1/customRoleEmployees/add`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量新增企业自定义角色下人员
 *
 * @param request AddEmployeesToCustomRoleRequest
 * @return AddEmployeesToCustomRoleResponse
 */
async function addEmployeesToCustomRole(request: AddEmployeesToCustomRoleRequest): AddEmployeesToCustomRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddEmployeesToCustomRoleHeaders{};
  return addEmployeesToCustomRoleWithOptions(request, headers, runtime);
}

model AddInvoiceEntityHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model AddInvoiceEntityRequest {
  entities?: [ 
    {
      entityId?: string(name='entity_id', description='This parameter is required.', example='12345'),
      entityName?: string(name='entity_name', description='This parameter is required.'),
      entityType?: string(name='entity_type', description='This parameter is required.', example='1'),
    }
  ](name='entities', description='This parameter is required.'),
  thirdPartId?: string(name='third_part_id', description='This parameter is required.', example='4854821'),
}

model AddInvoiceEntityShrinkRequest {
  entitiesShrink?: string(name='entities', description='This parameter is required.'),
  thirdPartId?: string(name='third_part_id', description='This parameter is required.', example='4854821'),
}

model AddInvoiceEntityResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    addNum?: int32(name='add_num', example='1'),
    selectedUserNum?: int32(name='selected_user_num', example='2'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210f079e16603757182131635d866a'),
}

model AddInvoiceEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddInvoiceEntityResponseBody(name='body'),
}

/**
 * @summary 新增发票抬头适用人员
 *
 * @param tmpReq AddInvoiceEntityRequest
 * @param headers AddInvoiceEntityHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddInvoiceEntityResponse
 */
async function addInvoiceEntityWithOptions(tmpReq: AddInvoiceEntityRequest, headers: AddInvoiceEntityHeaders, runtime: Util.RuntimeOptions): AddInvoiceEntityResponse {
  Util.validateModel(tmpReq);
  var request = new AddInvoiceEntityShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entities)) {
    request.entitiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entities, 'entities', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.entitiesShrink)) {
    body['entities'] = request.entitiesShrink;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    body['third_part_id'] = request.thirdPartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddInvoiceEntity',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/entities`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新增发票抬头适用人员
 *
 * @param request AddInvoiceEntityRequest
 * @return AddInvoiceEntityResponse
 */
async function addInvoiceEntity(request: AddInvoiceEntityRequest): AddInvoiceEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddInvoiceEntityHeaders{};
  return addInvoiceEntityWithOptions(request, headers, runtime);
}

model AddressGetHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model AddressGetRequest {
  actionType?: int32(name='action_type', description='This parameter is required.', example='1'),
  arrCityCode?: string(name='arr_city_code'),
  arrCityName?: string(name='arr_city_name'),
  carScenesCode?: string(name='car_scenes_code'),
  depCityCode?: string(name='dep_city_code'),
  depCityName?: string(name='dep_city_name'),
  depDate?: string(name='dep_date'),
  itineraryId?: string(name='itinerary_id', example='460e254b5a5b4bd0801744a2790e5d78'),
  middlePage?: int32(name='middle_page'),
  orderId?: string(name='order_Id'),
  phone?: string(name='phone'),
  sessionParameters?: string(name='session_parameters'),
  subCorpId?: string(name='sub_corp_id'),
  taobaoCallbackUrl?: string(name='taobao_callback_url', example='https://alibtrip.open.com'),
  thirdpartApplyId?: string(name='thirdpart_apply_id'),
  travelerId?: string(name='traveler_id'),
  type?: int32(name='type', example='1'),
  useBookingProxy?: int32(name='use_booking_proxy'),
  userId?: string(name='user_id', description='This parameter is required.'),
}

model AddressGetResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    url?: string(name='url', example='https://trip-hisv.taobao.com/ding/trustLogin.htm?redirectUrl=https%3A%2F%2Fmarket.m.taobao.com%2Fapp%2Fbtrip-fe%2Frx-alitrip-main%2Fhome.html%3Ffpt%3DbIdentify%2528dingtalk.isv.h5.home%2529%26corpId%3Dding3f9797e277423f14a1320dcb25e91351%26dingUserId%3Dmanager9302%26dingAppId%3D1692%26fit%3Dtrue&token=b73e0b9e-d25a-40f0-aff8-2c2e58da659b'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210bcc3a16583004579056128d33d7'),
}

model AddressGetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddressGetResponseBody(name='body'),
}

/**
 * @summary 商旅功能页跳转
 *
 * @param request AddressGetRequest
 * @param headers AddressGetHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddressGetResponse
 */
async function addressGetWithOptions(request: AddressGetRequest, headers: AddressGetHeaders, runtime: Util.RuntimeOptions): AddressGetResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.actionType)) {
    query['action_type'] = request.actionType;
  }
  if (!Util.isUnset(request.arrCityCode)) {
    query['arr_city_code'] = request.arrCityCode;
  }
  if (!Util.isUnset(request.arrCityName)) {
    query['arr_city_name'] = request.arrCityName;
  }
  if (!Util.isUnset(request.carScenesCode)) {
    query['car_scenes_code'] = request.carScenesCode;
  }
  if (!Util.isUnset(request.depCityCode)) {
    query['dep_city_code'] = request.depCityCode;
  }
  if (!Util.isUnset(request.depCityName)) {
    query['dep_city_name'] = request.depCityName;
  }
  if (!Util.isUnset(request.depDate)) {
    query['dep_date'] = request.depDate;
  }
  if (!Util.isUnset(request.itineraryId)) {
    query['itinerary_id'] = request.itineraryId;
  }
  if (!Util.isUnset(request.middlePage)) {
    query['middle_page'] = request.middlePage;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_Id'] = request.orderId;
  }
  if (!Util.isUnset(request.phone)) {
    query['phone'] = request.phone;
  }
  if (!Util.isUnset(request.sessionParameters)) {
    query['session_parameters'] = request.sessionParameters;
  }
  if (!Util.isUnset(request.subCorpId)) {
    query['sub_corp_id'] = request.subCorpId;
  }
  if (!Util.isUnset(request.taobaoCallbackUrl)) {
    query['taobao_callback_url'] = request.taobaoCallbackUrl;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    query['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.travelerId)) {
    query['traveler_id'] = request.travelerId;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }
  if (!Util.isUnset(request.useBookingProxy)) {
    query['use_booking_proxy'] = request.useBookingProxy;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddressGet',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/open/v1/address`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 商旅功能页跳转
 *
 * @param request AddressGetRequest
 * @return AddressGetResponse
 */
async function addressGet(request: AddressGetRequest): AddressGetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddressGetHeaders{};
  return addressGetWithOptions(request, headers, runtime);
}

model AirportSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model AirportSearchRequest {
  keyword?: string(name='keyword', description='This parameter is required.'),
  type?: int32(name='type', example='0'),
}

model AirportSearchResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    cities?: [ 
      {
        code?: string(name='code', example='HGH'),
        distance?: int32(name='distance', example='100'),
        name?: string(name='name'),
        travelName?: string(name='travel_name', example='上海'),
      }
    ](name='cities'),
    nearby?: boolean(name='nearby', example='false'),
  }(name='module', description='module。'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210f07f316603757445272547d959f'),
}

model AirportSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AirportSearchResponseBody(name='body'),
}

/**
 * @summary 查询机场数据
 *
 * @param request AirportSearchRequest
 * @param headers AirportSearchHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AirportSearchResponse
 */
async function airportSearchWithOptions(request: AirportSearchRequest, headers: AirportSearchHeaders, runtime: Util.RuntimeOptions): AirportSearchResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AirportSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/city/v1/airport`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询机场数据
 *
 * @param request AirportSearchRequest
 * @return AirportSearchResponse
 */
async function airportSearch(request: AirportSearchRequest): AirportSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AirportSearchHeaders{};
  return airportSearchWithOptions(request, headers, runtime);
}

model AllBaseCityInfoQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripAccessToken?: string(name='x-acs-btrip-access-token', example='feth00jqwls'),
}

model AllBaseCityInfoQueryResponseBody = {
  code?: string(name='code', example='success'),
  message?: string(name='message', example='demo'),
  module?: {
    allCityBaseInfoList?: [ 
      {
        adcode?: string(name='adcode', example='330122'),
        cityCode?: string(name='city_code', example='0571'),
        cityLevel?: string(name='city_level', example='3'),
        cityName?: string(name='city_name', example='桐庐'),
        cnNameTree?: string(name='cn_name_tree', example='中国，浙江省，杭州市，桐庐'),
        id?: long(name='id', example='1'),
        otherNameList?: [ string ](name='other_name_list'),
      }
    ](name='all_city_base_info_list'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210f079e16603757182131635d866a'),
}

model AllBaseCityInfoQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AllBaseCityInfoQueryResponseBody(name='body'),
}

/**
 * @summary 全量查询商旅城市行政区划编码信息
 *
 * @param headers AllBaseCityInfoQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AllBaseCityInfoQueryResponse
 */
async function allBaseCityInfoQueryWithOptions(headers: AllBaseCityInfoQueryHeaders, runtime: Util.RuntimeOptions): AllBaseCityInfoQueryResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripAccessToken)) {
    realHeaders['x-acs-btrip-access-token'] = Util.toJSONString(headers.xAcsBtripAccessToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'AllBaseCityInfoQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/city/v1/code`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 全量查询商旅城市行政区划编码信息
 *
 * @return AllBaseCityInfoQueryResponse
 */
async function allBaseCityInfoQuery(): AllBaseCityInfoQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AllBaseCityInfoQueryHeaders{};
  return allBaseCityInfoQueryWithOptions(headers, runtime);
}

model ApplyAddHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ApplyAddRequest {
  budget?: long(name='budget', example='4000'),
  budgetMerge?: int32(name='budget_merge', example='1'),
  carRule?: {
    scenarioTemplateId?: string(name='scenario_template_id'),
    scenarioTemplateName?: string(name='scenario_template_name'),
  }(name='car_rule'),
  corpName?: string(name='corp_name'),
  defaultStandard?: {
    businessDiscount?: int32(name='business_discount'),
    economyDiscount?: int32(name='economy_discount'),
    firstDiscount?: int32(name='first_discount'),
    flightCabins?: string(name='flight_cabins'),
    flightIntlRuleCode?: long(name='flight_intl_rule_code'),
    flightRuleCode?: long(name='flight_rule_code'),
    hotelCitys?: [ 
      {
        cityCode?: string(name='city_code'),
        cityName?: string(name='city_name'),
        fee?: long(name='fee'),
      }
    ](name='hotel_citys'),
    hotelIntlCitys?: [ 
      {
        cityCode?: string(name='city_code'),
        cityName?: string(name='city_name'),
        fee?: long(name='fee'),
      }
    ](name='hotel_intl_citys'),
    hotelIntlRuleCode?: long(name='hotel_intl_rule_code'),
    hotelRuleCode?: long(name='hotel_rule_code'),
    internationalFlightCabins?: string(name='international_flight_cabins', example='F'),
    premiumEconomyDiscount?: int32(name='premium_economy_discount'),
    reserveType?: int32(name='reserve_type'),
    trainRuleCode?: long(name='train_rule_code'),
    trainSeats?: string(name='train_seats'),
  }(name='default_standard'),
  departId?: string(name='depart_id', example='departId01'),
  departName?: string(name='depart_name'),
  extendField?: string(name='extend_field', description='可将补充描述传入此字段，账单中将会体现此字段的值。可以用于企业的统计和对账', example='{"cost_center":"成本中心"}'),
  externalTravelerList?: [ 
    {
      attribute?: string(name='attribute'),
      costCenterId?: long(name='cost_center_id'),
      externalUserId?: string(name='external_user_id'),
      invoiceId?: long(name='invoice_id'),
      paymentDepartmentId?: string(name='payment_department_id'),
      paymentDepartmentName?: string(name='payment_department_name'),
      projectCode?: string(name='project_code'),
      projectTitle?: string(name='project_title'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id'),
      thirdpartCostCenterId?: string(name='thirdpart_cost_center_id'),
      thirdpartDepartId?: string(name='thirdpart_depart_id'),
      userName?: string(name='user_name'),
      userNameEn?: string(name='user_name_en'),
    }
  ](name='external_traveler_list'),
  externalTravelerStandard?: {
    businessDiscount?: int32(name='business_discount', example='1'),
    economyDiscount?: int32(name='economy_discount', example='1'),
    firstDiscount?: int32(name='first_discount', example='1'),
    flightCabins?: string(name='flight_cabins', example='F'),
    flightIntlRuleCode?: long(name='flight_intl_rule_code'),
    flightRuleCode?: long(name='flight_rule_code'),
    hotelCitys?: [ 
      {
        cityCode?: string(name='city_code', example='0'),
        cityName?: string(name='city_name'),
        fee?: long(name='fee', example='1009'),
      }
    ](name='hotel_citys'),
    hotelIntlCitys?: [ 
      {
        cityCode?: string(name='city_code'),
        cityName?: string(name='city_name'),
        fee?: long(name='fee'),
      }
    ](name='hotel_intl_citys'),
    hotelIntlRuleCode?: long(name='hotel_intl_rule_code'),
    hotelRuleCode?: long(name='hotel_rule_code'),
    internationalFlightCabins?: string(name='international_flight_cabins', example='F'),
    premiumEconomyDiscount?: int32(name='premium_economy_discount', example='1'),
    reserveType?: int32(name='reserve_type', example='0'),
    trainRuleCode?: long(name='train_rule_code'),
    trainSeats?: string(name='train_seats', example='0'),
  }(name='external_traveler_standard'),
  flightBudget?: long(name='flight_budget', example='1000'),
  hotelBudget?: long(name='hotel_budget', example='1000'),
  hotelShare?: {
    param?: string(name='param', example='70'),
    type?: string(name='type', example='1'),
  }(name='hotel_share'),
  internationalFlightCabins?: string(name='international_flight_cabins'),
  intlFlightBudget?: long(name='intl_flight_budget'),
  intlHotelBudget?: long(name='intl_hotel_budget'),
  itineraryList?: [ 
    {
      arrCity?: string(name='arr_city', description='This parameter is required.'),
      arrCityCode?: string(name='arr_city_code', example='HGH'),
      arrDate?: string(name='arr_date', description='This parameter is required.'),
      attribute?: string(name='attribute'),
      costCenterId?: long(name='cost_center_id', example='12138'),
      depCity?: string(name='dep_city', description='This parameter is required.'),
      depCityCode?: string(name='dep_city_code', example='BJS'),
      depDate?: string(name='dep_date', description='This parameter is required.', example='2017-01-01 00:00:00'),
      invoiceId?: long(name='invoice_id', example='34711'),
      itineraryId?: string(name='itinerary_id', description='This parameter is required.', example='123456'),
      itineraryTravelStandard?: {
        hotelAvailableNightsPerDay?: int32(name='hotel_available_nights_per_day'),
      }(name='itinerary_travel_standard'),
      needHotel?: boolean(name='need_hotel', example='true'),
      needTraffic?: boolean(name='need_traffic', example='true'),
      projectCode?: string(name='project_code', example='projecttow'),
      projectTitle?: string(name='project_title'),
      provinceTravelCityAdcodes?: [ string ](name='province_travel_city_adcodes'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id', example='thirdpart34711'),
      thirdpartCostCenterId?: string(name='thirdpart_cost_center_id', example='thridpart12138'),
      trafficType?: int32(name='traffic_type', description='This parameter is required.', example='0'),
      tripWay?: int32(name='trip_way', description='This parameter is required.', example='0'),
    }
  ](name='itinerary_list'),
  itineraryRule?: int32(name='itinerary_rule', example='0'),
  itinerarySetList?: [ 
    {
      arrDate?: string(name='arr_date', description='This parameter is required.', example='2017-01-01 00:00:00'),
      attribute?: string(name='attribute'),
      cityCodeSet?: string(name='city_code_set', description='This parameter is required.', example='BJS,HGH'),
      citySet?: string(name='city_set', description='This parameter is required.'),
      costCenterId?: long(name='cost_center_id', example='12345'),
      depDate?: string(name='dep_date', description='This parameter is required.', example='2017-01-01 00:00:00'),
      invoiceId?: long(name='invoice_id', example='12345'),
      itineraryId?: string(name='itinerary_id', description='This parameter is required.', example='123'),
      itineraryTravelStandard?: {
        hotelAvailableNightsPerDay?: int32(name='hotel_available_nights_per_day'),
      }(name='itinerary_travel_standard'),
      projectCode?: string(name='project_code', example='projecttow'),
      projectTitle?: string(name='project_title'),
      provinceTravelCityAdcodes?: [ string ](name='province_travel_city_adcodes'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id', example='thridpart12138'),
      thirdpartCostCenterId?: string(name='thirdpart_cost_center_id', example='thridpart12138'),
      trafficType?: int32(name='traffic_type', description='This parameter is required.', example='0'),
    }
  ](name='itinerary_set_list'),
  limitTraveler?: int32(name='limit_traveler', example='1'),
  mealBudget?: long(name='meal_budget'),
  paymentDepartmentId?: string(name='payment_department_id'),
  paymentDepartmentName?: string(name='payment_department_name'),
  status?: int32(name='status', example='0'),
  subCorpId?: string(name='sub_corp_id'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', description='This parameter is required.', example='12345'),
  thirdpartBusinessId?: string(name='thirdpart_business_id', example='00714131'),
  thirdpartDepartId?: string(name='thirdpart_depart_id'),
  togetherBookRule?: int32(name='together_book_rule', example='1'),
  trainBudget?: long(name='train_budget', example='1000'),
  travelerList?: [ 
    {
      attribute?: string(name='attribute'),
      costCenterId?: long(name='cost_center_id'),
      invoiceId?: long(name='invoice_id'),
      paymentDepartmentId?: string(name='payment_department_id'),
      paymentDepartmentName?: string(name='payment_department_name'),
      projectCode?: string(name='project_code'),
      projectTitle?: string(name='project_title'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id'),
      thirdpartCostCenterId?: string(name='thirdpart_cost_center_id'),
      thirdpartDepartId?: string(name='thirdpart_depart_id'),
      userId?: string(name='user_id', example='wu51531'),
      userName?: string(name='user_name'),
    }
  ](name='traveler_list'),
  travelerStandard?: [ 
    {
      businessDiscount?: int32(name='business_discount', example='1'),
      carCitySet?: [ 
        {
          cityCode?: string(name='city_code', description='This parameter is required.'),
          cityName?: string(name='city_name', description='This parameter is required.'),
        }
      ](name='car_city_set'),
      economyDiscount?: int32(name='economy_discount', example='1'),
      firstDiscount?: int32(name='first_discount', example='1'),
      flightCabins?: string(name='flight_cabins', example='Y'),
      flightIntlRuleCode?: long(name='flight_intl_rule_code'),
      flightRuleCode?: long(name='flight_rule_code'),
      hotelCitys?: [ 
        {
          cityCode?: string(name='city_code', example='0'),
          cityName?: string(name='city_name'),
          fee?: long(name='fee', example='1009'),
        }
      ](name='hotel_citys'),
      hotelIntlCitys?: [ 
        {
          cityCode?: string(name='city_code'),
          cityName?: string(name='city_name'),
          fee?: long(name='fee'),
        }
      ](name='hotel_intl_citys'),
      hotelIntlRuleCode?: long(name='hotel_intl_rule_code'),
      hotelRuleCode?: long(name='hotel_rule_code'),
      internationalFlightCabins?: string(name='international_flight_cabins', example='F'),
      premiumEconomyDiscount?: int32(name='premium_economy_discount', example='1'),
      reserveType?: int32(name='reserve_type', example='0'),
      trainRuleCode?: long(name='train_rule_code'),
      trainSeats?: string(name='train_seats', example='1'),
      userId?: string(name='user_id', example='wfffeng'),
    }
  ](name='traveler_standard'),
  tripCause?: string(name='trip_cause', description='This parameter is required.'),
  tripDay?: int32(name='trip_day', example='1'),
  tripTitle?: string(name='trip_title', description='This parameter is required.'),
  type?: int32(name='type', example='1'),
  unionNo?: string(name='union_no', example='union001'),
  userId?: string(name='user_id', description='This parameter is required.', example='thridpart12138'),
  userName?: string(name='user_name'),
  vehicleBudget?: long(name='vehicle_budget', example='1000'),
}

model ApplyAddShrinkRequest {
  budget?: long(name='budget', example='4000'),
  budgetMerge?: int32(name='budget_merge', example='1'),
  carRuleShrink?: string(name='car_rule'),
  corpName?: string(name='corp_name'),
  defaultStandardShrink?: string(name='default_standard'),
  departId?: string(name='depart_id', example='departId01'),
  departName?: string(name='depart_name'),
  extendField?: string(name='extend_field', description='可将补充描述传入此字段，账单中将会体现此字段的值。可以用于企业的统计和对账', example='{"cost_center":"成本中心"}'),
  externalTravelerListShrink?: string(name='external_traveler_list'),
  externalTravelerStandardShrink?: string(name='external_traveler_standard'),
  flightBudget?: long(name='flight_budget', example='1000'),
  hotelBudget?: long(name='hotel_budget', example='1000'),
  hotelShareShrink?: string(name='hotel_share'),
  internationalFlightCabins?: string(name='international_flight_cabins'),
  intlFlightBudget?: long(name='intl_flight_budget'),
  intlHotelBudget?: long(name='intl_hotel_budget'),
  itineraryListShrink?: string(name='itinerary_list'),
  itineraryRule?: int32(name='itinerary_rule', example='0'),
  itinerarySetListShrink?: string(name='itinerary_set_list'),
  limitTraveler?: int32(name='limit_traveler', example='1'),
  mealBudget?: long(name='meal_budget'),
  paymentDepartmentId?: string(name='payment_department_id'),
  paymentDepartmentName?: string(name='payment_department_name'),
  status?: int32(name='status', example='0'),
  subCorpId?: string(name='sub_corp_id'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', description='This parameter is required.', example='12345'),
  thirdpartBusinessId?: string(name='thirdpart_business_id', example='00714131'),
  thirdpartDepartId?: string(name='thirdpart_depart_id'),
  togetherBookRule?: int32(name='together_book_rule', example='1'),
  trainBudget?: long(name='train_budget', example='1000'),
  travelerListShrink?: string(name='traveler_list'),
  travelerStandardShrink?: string(name='traveler_standard'),
  tripCause?: string(name='trip_cause', description='This parameter is required.'),
  tripDay?: int32(name='trip_day', example='1'),
  tripTitle?: string(name='trip_title', description='This parameter is required.'),
  type?: int32(name='type', example='1'),
  unionNo?: string(name='union_no', example='union001'),
  userId?: string(name='user_id', description='This parameter is required.', example='thridpart12138'),
  userName?: string(name='user_name'),
  vehicleBudget?: long(name='vehicle_budget', example='1000'),
}

model ApplyAddResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id', example='thirdpart12132'),
    thirdpartApplyId?: string(name='thirdpart_apply_id', example='thirdpart12132'),
    thirdpartBusinessId?: string(name='thirdpart_business_id', example='20220702001'),
  }(name='module', description='module。'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model ApplyAddResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyAddResponseBody(name='body'),
}

/**
 * @summary 新建出差审批单
 *
 * @param tmpReq ApplyAddRequest
 * @param headers ApplyAddHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ApplyAddResponse
 */
async function applyAddWithOptions(tmpReq: ApplyAddRequest, headers: ApplyAddHeaders, runtime: Util.RuntimeOptions): ApplyAddResponse {
  Util.validateModel(tmpReq);
  var request = new ApplyAddShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.carRule)) {
    request.carRuleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.carRule, 'car_rule', 'json');
  }
  if (!Util.isUnset(tmpReq.defaultStandard)) {
    request.defaultStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.defaultStandard, 'default_standard', 'json');
  }
  if (!Util.isUnset(tmpReq.externalTravelerList)) {
    request.externalTravelerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.externalTravelerList, 'external_traveler_list', 'json');
  }
  if (!Util.isUnset(tmpReq.externalTravelerStandard)) {
    request.externalTravelerStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.externalTravelerStandard, 'external_traveler_standard', 'json');
  }
  if (!Util.isUnset(tmpReq.hotelShare)) {
    request.hotelShareShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hotelShare, 'hotel_share', 'json');
  }
  if (!Util.isUnset(tmpReq.itineraryList)) {
    request.itineraryListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itineraryList, 'itinerary_list', 'json');
  }
  if (!Util.isUnset(tmpReq.itinerarySetList)) {
    request.itinerarySetListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itinerarySetList, 'itinerary_set_list', 'json');
  }
  if (!Util.isUnset(tmpReq.travelerList)) {
    request.travelerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerList, 'traveler_list', 'json');
  }
  if (!Util.isUnset(tmpReq.travelerStandard)) {
    request.travelerStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerStandard, 'traveler_standard', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.budget)) {
    body['budget'] = request.budget;
  }
  if (!Util.isUnset(request.budgetMerge)) {
    body['budget_merge'] = request.budgetMerge;
  }
  if (!Util.isUnset(request.carRuleShrink)) {
    body['car_rule'] = request.carRuleShrink;
  }
  if (!Util.isUnset(request.corpName)) {
    body['corp_name'] = request.corpName;
  }
  if (!Util.isUnset(request.defaultStandardShrink)) {
    body['default_standard'] = request.defaultStandardShrink;
  }
  if (!Util.isUnset(request.departId)) {
    body['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.departName)) {
    body['depart_name'] = request.departName;
  }
  if (!Util.isUnset(request.extendField)) {
    body['extend_field'] = request.extendField;
  }
  if (!Util.isUnset(request.externalTravelerListShrink)) {
    body['external_traveler_list'] = request.externalTravelerListShrink;
  }
  if (!Util.isUnset(request.externalTravelerStandardShrink)) {
    body['external_traveler_standard'] = request.externalTravelerStandardShrink;
  }
  if (!Util.isUnset(request.flightBudget)) {
    body['flight_budget'] = request.flightBudget;
  }
  if (!Util.isUnset(request.hotelBudget)) {
    body['hotel_budget'] = request.hotelBudget;
  }
  if (!Util.isUnset(request.hotelShareShrink)) {
    body['hotel_share'] = request.hotelShareShrink;
  }
  if (!Util.isUnset(request.internationalFlightCabins)) {
    body['international_flight_cabins'] = request.internationalFlightCabins;
  }
  if (!Util.isUnset(request.intlFlightBudget)) {
    body['intl_flight_budget'] = request.intlFlightBudget;
  }
  if (!Util.isUnset(request.intlHotelBudget)) {
    body['intl_hotel_budget'] = request.intlHotelBudget;
  }
  if (!Util.isUnset(request.itineraryListShrink)) {
    body['itinerary_list'] = request.itineraryListShrink;
  }
  if (!Util.isUnset(request.itineraryRule)) {
    body['itinerary_rule'] = request.itineraryRule;
  }
  if (!Util.isUnset(request.itinerarySetListShrink)) {
    body['itinerary_set_list'] = request.itinerarySetListShrink;
  }
  if (!Util.isUnset(request.limitTraveler)) {
    body['limit_traveler'] = request.limitTraveler;
  }
  if (!Util.isUnset(request.mealBudget)) {
    body['meal_budget'] = request.mealBudget;
  }
  if (!Util.isUnset(request.paymentDepartmentId)) {
    body['payment_department_id'] = request.paymentDepartmentId;
  }
  if (!Util.isUnset(request.paymentDepartmentName)) {
    body['payment_department_name'] = request.paymentDepartmentName;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.subCorpId)) {
    body['sub_corp_id'] = request.subCorpId;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    body['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.thirdpartBusinessId)) {
    body['thirdpart_business_id'] = request.thirdpartBusinessId;
  }
  if (!Util.isUnset(request.thirdpartDepartId)) {
    body['thirdpart_depart_id'] = request.thirdpartDepartId;
  }
  if (!Util.isUnset(request.togetherBookRule)) {
    body['together_book_rule'] = request.togetherBookRule;
  }
  if (!Util.isUnset(request.trainBudget)) {
    body['train_budget'] = request.trainBudget;
  }
  if (!Util.isUnset(request.travelerListShrink)) {
    body['traveler_list'] = request.travelerListShrink;
  }
  if (!Util.isUnset(request.travelerStandardShrink)) {
    body['traveler_standard'] = request.travelerStandardShrink;
  }
  if (!Util.isUnset(request.tripCause)) {
    body['trip_cause'] = request.tripCause;
  }
  if (!Util.isUnset(request.tripDay)) {
    body['trip_day'] = request.tripDay;
  }
  if (!Util.isUnset(request.tripTitle)) {
    body['trip_title'] = request.tripTitle;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }
  if (!Util.isUnset(request.unionNo)) {
    body['union_no'] = request.unionNo;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    body['user_name'] = request.userName;
  }
  if (!Util.isUnset(request.vehicleBudget)) {
    body['vehicle_budget'] = request.vehicleBudget;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyAdd',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/biz-trip`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新建出差审批单
 *
 * @param request ApplyAddRequest
 * @return ApplyAddResponse
 */
async function applyAdd(request: ApplyAddRequest): ApplyAddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ApplyAddHeaders{};
  return applyAddWithOptions(request, headers, runtime);
}

model ApplyApproveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ApplyApproveRequest {
  applyId?: string(name='apply_id', description='This parameter is required.', example='sdfg'),
  note?: string(name='note'),
  operateTime?: string(name='operate_time', description='This parameter is required.', example='2022-07-12 16:12:53'),
  status?: int32(name='status', description='This parameter is required.', example='1'),
  subCorpId?: string(name='sub_corp_id', example='btrip123'),
  userId?: string(name='user_id', description='This parameter is required.', example='thirdpart12138'),
  userName?: string(name='user_name'),
}

model ApplyApproveResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: string(name='module', description='module。', example='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model ApplyApproveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyApproveResponseBody(name='body'),
}

/**
 * @summary 更新出差审批单（状态）
 *
 * @param request ApplyApproveRequest
 * @param headers ApplyApproveHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ApplyApproveResponse
 */
async function applyApproveWithOptions(request: ApplyApproveRequest, headers: ApplyApproveHeaders, runtime: Util.RuntimeOptions): ApplyApproveResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    body['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.note)) {
    body['note'] = request.note;
  }
  if (!Util.isUnset(request.operateTime)) {
    body['operate_time'] = request.operateTime;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.subCorpId)) {
    body['sub_corp_id'] = request.subCorpId;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    body['user_name'] = request.userName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyApprove',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/biz-trip/action/approve`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新出差审批单（状态）
 *
 * @param request ApplyApproveRequest
 * @return ApplyApproveResponse
 */
async function applyApprove(request: ApplyApproveRequest): ApplyApproveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ApplyApproveHeaders{};
  return applyApproveWithOptions(request, headers, runtime);
}

model ApplyExternalNodeStatusUpdateHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model ApplyExternalNodeStatusUpdateRequest {
  nodeId?: string(name='node_id', description='This parameter is required.', example='123'),
  operationRecords?: [ 
    {
      comment?: string(name='comment'),
      operateTime?: string(name='operate_time', example='2023-05-28 11:33:28'),
      operatorName?: string(name='operator_name'),
      result?: string(name='result', example='AGREE'),
      type?: string(name='type', example='PROCESS_APPROVE'),
    }
  ](name='operation_records'),
  processActionResult?: string(name='process_action_result', description='This parameter is required.', example='PROCESS_AGREE'),
}

model ApplyExternalNodeStatusUpdateShrinkRequest {
  nodeId?: string(name='node_id', description='This parameter is required.', example='123'),
  operationRecordsShrink?: string(name='operation_records'),
  processActionResult?: string(name='process_action_result', description='This parameter is required.', example='PROCESS_AGREE'),
}

model ApplyExternalNodeStatusUpdateResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: boolean(name='module', example='true'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210f079416784321627628333de4ab'),
}

model ApplyExternalNodeStatusUpdateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyExternalNodeStatusUpdateResponseBody(name='body'),
}

/**
 * @summary 外部审批节点状态同步
 *
 * @param tmpReq ApplyExternalNodeStatusUpdateRequest
 * @param headers ApplyExternalNodeStatusUpdateHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ApplyExternalNodeStatusUpdateResponse
 */
async function applyExternalNodeStatusUpdateWithOptions(tmpReq: ApplyExternalNodeStatusUpdateRequest, headers: ApplyExternalNodeStatusUpdateHeaders, runtime: Util.RuntimeOptions): ApplyExternalNodeStatusUpdateResponse {
  Util.validateModel(tmpReq);
  var request = new ApplyExternalNodeStatusUpdateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.operationRecords)) {
    request.operationRecordsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.operationRecords, 'operation_records', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodeId)) {
    body['node_id'] = request.nodeId;
  }
  if (!Util.isUnset(request.operationRecordsShrink)) {
    body['operation_records'] = request.operationRecordsShrink;
  }
  if (!Util.isUnset(request.processActionResult)) {
    body['process_action_result'] = request.processActionResult;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyExternalNodeStatusUpdate',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/external-nodes/action/status-update`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 外部审批节点状态同步
 *
 * @param request ApplyExternalNodeStatusUpdateRequest
 * @return ApplyExternalNodeStatusUpdateResponse
 */
async function applyExternalNodeStatusUpdate(request: ApplyExternalNodeStatusUpdateRequest): ApplyExternalNodeStatusUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ApplyExternalNodeStatusUpdateHeaders{};
  return applyExternalNodeStatusUpdateWithOptions(request, headers, runtime);
}

model ApplyInvoiceTaskHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ApplyInvoiceTaskRequest {
  billDate?: string(name='bill_date', description='This parameter is required.', example='2022-12-01'),
  invoiceTaskList?: [ 
    {
      contact?: string(name='contact'),
      email?: string(name='email'),
      flightInvoiceFee?: string(name='flight_invoice_fee', example='0'),
      fuPointInvoiceFee?: string(name='fu_point_invoice_fee', example='3.12'),
      hotelNormalInvoiceFee?: string(name='hotel_normal_invoice_fee', example='0'),
      hotelSpecialInvoiceFee?: string(name='hotel_special_invoice_fee', example='100'),
      internationalFlightInvoiceFee?: string(name='international_flight_invoice_fee', example='0'),
      internationalHotelInvoiceFee?: string(name='international_hotel_invoice_fee'),
      invoiceThirdPartId?: string(name='invoice_third_part_id', description='This parameter is required.', example='123'),
      invoiceType?: int32(name='invoice_type'),
      mailAddress?: string(name='mail_address'),
      mailCity?: string(name='mail_city'),
      mailFullAddress?: string(name='mail_full_address'),
      mailProvince?: string(name='mail_province'),
      mealNormalInvoiceFee?: string(name='meal_normal_invoice_fee'),
      penaltyFee?: string(name='penalty_fee', example='0'),
      remark?: string(name='remark'),
      serviceFee?: string(name='service_fee', example='1.02'),
      telephone?: string(name='telephone', example='1234567890'),
      trainAccelerationPackageInvoiceFee?: string(name='train_acceleration_package_invoice_fee'),
      trainInvoiceFee?: string(name='train_invoice_fee', example='0'),
      vacationNormalInvoiceFee?: string(name='vacation_normal_invoice_fee'),
      vasMallSpecialInvoiceFee?: string(name='vas_mall_special_invoice_fee'),
      vehicleInvoiceFee?: string(name='vehicle_invoice_fee', example='100'),
      vehicleNormalInvoiceFee?: string(name='vehicle_normal_invoice_fee'),
    }
  ](name='invoice_task_list', description='This parameter is required.'),
}

model ApplyInvoiceTaskShrinkRequest {
  billDate?: string(name='bill_date', description='This parameter is required.', example='2022-12-01'),
  invoiceTaskListShrink?: string(name='invoice_task_list', description='This parameter is required.'),
}

model ApplyInvoiceTaskResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  requestId?: string(name='requestId', description='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model ApplyInvoiceTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyInvoiceTaskResponseBody(name='body'),
}

/**
 * @summary 申请发票
 *
 * @param tmpReq ApplyInvoiceTaskRequest
 * @param headers ApplyInvoiceTaskHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ApplyInvoiceTaskResponse
 */
async function applyInvoiceTaskWithOptions(tmpReq: ApplyInvoiceTaskRequest, headers: ApplyInvoiceTaskHeaders, runtime: Util.RuntimeOptions): ApplyInvoiceTaskResponse {
  Util.validateModel(tmpReq);
  var request = new ApplyInvoiceTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.invoiceTaskList)) {
    request.invoiceTaskListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.invoiceTaskList, 'invoice_task_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.billDate)) {
    body['bill_date'] = request.billDate;
  }
  if (!Util.isUnset(request.invoiceTaskListShrink)) {
    body['invoice_task_list'] = request.invoiceTaskListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyInvoiceTask',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/apply-invoice-task`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 申请发票
 *
 * @param request ApplyInvoiceTaskRequest
 * @return ApplyInvoiceTaskResponse
 */
async function applyInvoiceTask(request: ApplyInvoiceTaskRequest): ApplyInvoiceTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ApplyInvoiceTaskHeaders{};
  return applyInvoiceTaskWithOptions(request, headers, runtime);
}

model ApplyListQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ApplyListQueryRequest {
  allApply?: boolean(name='all_apply', example='true'),
  departId?: string(name='depart_id', example='dept1'),
  endTime?: string(name='end_time', example='2017-05-01 00:00:00'),
  gmtModified?: string(name='gmt_modified', example='2018-05-01 00:00:00'),
  onlyShangLvApply?: boolean(name='only_shang_lv_apply', example='false'),
  page?: int32(name='page', example='1'),
  pageSize?: int32(name='page_size', example='10'),
  startTime?: string(name='start_time', example='2017-05-01 00:00:00'),
  subCorpId?: string(name='sub_corp_id', example='btrip123'),
  type?: int32(name='type', example='2'),
  unionNo?: string(name='union_no', example='abs123'),
  userId?: string(name='user_id', example='user1'),
}

model ApplyListQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  moduleList?: [ 
    {
      applyShowId?: string(name='apply_show_id', example='201710111505000464651'),
      approverList?: [ 
        {
          note?: string(name='note'),
          operateTime?: string(name='operate_time', example='2018-09-19T14:03Z'),
          order?: int32(name='order', example='1'),
          status?: int32(name='status', example='1'),
          statusDesc?: string(name='status_desc'),
          userId?: string(name='user_id', example='user1'),
          userName?: string(name='user_name'),
        }
      ](name='approver_list'),
      carRule?: {
        scenarioTemplateId?: string(name='scenario_template_id'),
        scenarioTemplateName?: string(name='scenario_template_name'),
      }(name='car_rule'),
      corpId?: string(name='corp_id', example='corp1'),
      corpName?: string(name='corp_name', example='abc'),
      departId?: string(name='depart_id', example='depart1'),
      departName?: string(name='depart_name'),
      externalTravelerList?: [ 
        {
          attribute?: string(name='attribute'),
          costCenterName?: string(name='cost_center_name'),
          departId?: string(name='depart_id'),
          externalUserId?: string(name='external_user_id'),
          invoiceName?: string(name='invoice_name'),
          paymentDepartmentName?: string(name='payment_department_name'),
          projectCode?: string(name='project_code'),
          projectTitle?: string(name='project_title'),
          thirdpartDepartId?: string(name='thirdpart_depart_id'),
          userName?: string(name='user_name'),
        }
      ](name='external_traveler_list'),
      flowCode?: string(name='flow_code', example='abc1234'),
      gmtCreate?: string(name='gmt_create', example='2018-09-19T14:03Z'),
      gmtModified?: string(name='gmt_modified', example='2018-09-19T14:03Z'),
      id?: long(name='id', example='1476'),
      itineraryList?: [ 
        {
          arrCity?: string(name='arr_city'),
          arrDate?: string(name='arr_date', example='2018-09-19T14:03Z'),
          costCenterName?: string(name='cost_center_name'),
          depCity?: string(name='dep_city'),
          depDate?: string(name='dep_date', example='2018-09-19T14:03Z'),
          invoiceName?: string(name='invoice_name'),
          itineraryId?: string(name='itinerary_id', example='abcd'),
          projectCode?: string(name='project_code', example='xm1'),
          projectTitle?: string(name='project_title'),
          thirdpartCostCenterId?: string(name='thirdpart_cost_center_id'),
          thirdpartInvoiceId?: string(name='thirdpart_invoice_id'),
          thirdpartItineraryId?: string(name='thirdpart_itinerary_id'),
          trafficType?: int32(name='traffic_type', example='0'),
          tripWay?: int32(name='trip_way', example='1'),
        }
      ](name='itinerary_list'),
      itineraryRule?: int32(name='itinerary_rule', example='0'),
      itinerarySetList?: [ 
        {
          arrDate?: string(name='arr_date', example='2018-09-19T14:03Z'),
          cityCodeSet?: string(name='city_code_set', example='BJS，HGH'),
          citySet?: string(name='city_set'),
          costCenterName?: string(name='cost_center_name'),
          depDate?: string(name='dep_date', example='2018-09-19T14:03Z'),
          invoiceName?: string(name='invoice_name'),
          itineraryId?: string(name='itinerary_id', example='abcd'),
          projectCode?: string(name='project_code', example='12345'),
          projectTitle?: string(name='project_title'),
          thirdpartCostCenterId?: string(name='thirdpart_cost_center_id'),
          thirdpartInvoiceId?: string(name='thirdpart_invoice_id'),
          thirdpartItineraryId?: string(name='thirdpart_itinerary_id'),
          trafficType?: int32(name='traffic_type', example='0'),
        }
      ](name='itinerary_set_list'),
      jobNo?: string(name='job_no'),
      paymentDepartmentId?: string(name='payment_department_id'),
      paymentDepartmentName?: string(name='payment_department_name'),
      status?: int32(name='status', example='1'),
      statusDesc?: string(name='status_desc'),
      thirdpartBusinessId?: string(name='thirdpart_business_id', example='abc'),
      thirdpartId?: string(name='thirdpart_id', example='abc'),
      travelerList?: [ 
        {
          attribute?: string(name='attribute'),
          carCitySet?: [ 
            {
              cityCode?: string(name='city_code'),
              cityName?: string(name='city_name'),
            }
          ](name='car_city_set'),
          costCenterName?: string(name='cost_center_name'),
          departId?: string(name='depart_id'),
          invoiceName?: string(name='invoice_name'),
          jobNo?: string(name='job_no'),
          paymentDepartmentName?: string(name='payment_department_name'),
          projectCode?: string(name='project_code'),
          projectTitle?: string(name='project_title'),
          thirdpartDepartId?: string(name='thirdpart_depart_id'),
          userId?: string(name='user_id', example='user1'),
          userName?: string(name='user_name'),
        }
      ](name='traveler_list'),
      tripCause?: string(name='trip_cause'),
      tripDay?: int32(name='trip_day', example='1'),
      tripTitle?: string(name='trip_title'),
      type?: int32(name='type', example='2'),
      unionNo?: string(name='union_no', example='abc'),
      userId?: string(name='user_id', example='user1'),
      userName?: string(name='user_name'),
    }
  ](name='module_list'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model ApplyListQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyListQueryResponseBody(name='body'),
}

/**
 * @summary 查询出差审批单列表
 *
 * @param request ApplyListQueryRequest
 * @param headers ApplyListQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ApplyListQueryResponse
 */
async function applyListQueryWithOptions(request: ApplyListQueryRequest, headers: ApplyListQueryHeaders, runtime: Util.RuntimeOptions): ApplyListQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.allApply)) {
    query['all_apply'] = request.allApply;
  }
  if (!Util.isUnset(request.departId)) {
    query['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['end_time'] = request.endTime;
  }
  if (!Util.isUnset(request.gmtModified)) {
    query['gmt_modified'] = request.gmtModified;
  }
  if (!Util.isUnset(request.onlyShangLvApply)) {
    query['only_shang_lv_apply'] = request.onlyShangLvApply;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['start_time'] = request.startTime;
  }
  if (!Util.isUnset(request.subCorpId)) {
    query['sub_corp_id'] = request.subCorpId;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }
  if (!Util.isUnset(request.unionNo)) {
    query['union_no'] = request.unionNo;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyListQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/biz-trips`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询出差审批单列表
 *
 * @param request ApplyListQueryRequest
 * @return ApplyListQueryResponse
 */
async function applyListQuery(request: ApplyListQueryRequest): ApplyListQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ApplyListQueryHeaders{};
  return applyListQueryWithOptions(request, headers, runtime);
}

model ApplyModifyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ApplyModifyRequest {
  budget?: long(name='budget', example='4000'),
  budgetMerge?: int32(name='budget_merge', example='1'),
  carRule?: {
    scenarioTemplateId?: string(name='scenario_template_id'),
    scenarioTemplateName?: string(name='scenario_template_name'),
  }(name='car_rule'),
  corpName?: string(name='corp_name'),
  defaultStandard?: {
    businessDiscount?: int32(name='business_discount'),
    economyDiscount?: int32(name='economy_discount'),
    firstDiscount?: int32(name='first_discount'),
    flightCabins?: string(name='flight_cabins'),
    flightIntlRuleCode?: long(name='flight_intl_rule_code'),
    flightRuleCode?: long(name='flight_rule_code'),
    hotelCitys?: [ 
      {
        cityCode?: string(name='city_code'),
        cityName?: string(name='city_name'),
        fee?: long(name='fee'),
      }
    ](name='hotel_citys'),
    hotelIntlCitys?: [ 
      {
        cityCode?: string(name='city_code'),
        cityName?: string(name='city_name'),
        fee?: long(name='fee'),
      }
    ](name='hotel_intl_citys'),
    hotelIntlRuleCode?: long(name='hotel_intl_rule_code'),
    hotelRuleCode?: long(name='hotel_rule_code'),
    premiumEconomyDiscount?: int32(name='premium_economy_discount'),
    reserveType?: int32(name='reserve_type'),
    trainRuleCode?: long(name='train_rule_code'),
    trainSeats?: string(name='train_seats'),
  }(name='default_standard'),
  departId?: string(name='depart_id', example='001'),
  departName?: string(name='depart_name'),
  extendField?: string(name='extend_field', description='可将补充描述传入此字段，账单中将会体现此字段的值。可以用于企业的统计和对账', example='{"cost_center":"成本中心"}'),
  externalTravelerList?: [ 
    {
      attribute?: string(name='attribute'),
      costCenterId?: long(name='cost_center_id'),
      externalUserId?: string(name='external_user_id'),
      invoiceId?: long(name='invoice_id'),
      paymentDepartmentId?: string(name='payment_department_id'),
      paymentDepartmentName?: string(name='payment_department_name'),
      projectCode?: string(name='project_code'),
      projectTitle?: string(name='project_title'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id'),
      thirdpartCostCenterId?: string(name='thirdpart_cost_center_id'),
      thirdpartDepartId?: string(name='thirdpart_depart_id'),
      userName?: string(name='user_name'),
      userNameEn?: string(name='user_name_en'),
    }
  ](name='external_traveler_list'),
  externalTravelerStandard?: {
    businessDiscount?: int32(name='business_discount', example='1'),
    economyDiscount?: int32(name='economy_discount', example='1'),
    firstDiscount?: int32(name='first_discount', example='1'),
    flightCabins?: string(name='flight_cabins', example='Y'),
    flightIntlRuleCode?: long(name='flight_intl_rule_code'),
    flightRuleCode?: long(name='flight_rule_code'),
    hotelCitys?: [ 
      {
        cityCode?: string(name='city_code', example='0'),
        cityName?: string(name='city_name'),
        fee?: long(name='fee', example='1001'),
      }
    ](name='hotel_citys'),
    hotelIntlCitys?: [ 
      {
        cityCode?: string(name='city_code'),
        cityName?: string(name='city_name'),
        fee?: long(name='fee'),
      }
    ](name='hotel_intl_citys'),
    hotelIntlRuleCode?: long(name='hotel_intl_rule_code'),
    hotelRuleCode?: long(name='hotel_rule_code'),
    premiumEconomyDiscount?: int32(name='premium_economy_discount', description='超级经济舱折扣。1到10的整数', example='1'),
    reserveType?: int32(name='reserve_type', example='0'),
    trainRuleCode?: long(name='train_rule_code'),
    trainSeats?: string(name='train_seats', example='1'),
  }(name='external_traveler_standard'),
  flightBudget?: long(name='flight_budget', example='1000'),
  hotelBudget?: long(name='hotel_budget', example='1000'),
  hotelShare?: {
    param?: string(name='param', example='70'),
    type?: string(name='type', example='1'),
  }(name='hotel_share'),
  intlFlightBudget?: long(name='intl_flight_budget'),
  intlHotelBudget?: long(name='intl_hotel_budget'),
  itineraryList?: [ 
    {
      arrCity?: string(name='arr_city', description='This parameter is required.'),
      arrCityCode?: string(name='arr_city_code', example='HGH'),
      arrDate?: string(name='arr_date', description='This parameter is required.', example='2022-07-12 00:00:00'),
      attribute?: string(name='attribute'),
      costCenterId?: long(name='cost_center_id', example='2021413'),
      depCity?: string(name='dep_city', description='This parameter is required.'),
      depCityCode?: string(name='dep_city_code', example='BJS'),
      depDate?: string(name='dep_date', description='This parameter is required.', example='2022-07-12 00:00:00'),
      invoiceId?: long(name='invoice_id', example='614141'),
      itineraryId?: string(name='itinerary_id', description='This parameter is required.', example='2000131'),
      itineraryTravelStandard?: {
        hotelAvailableNightsPerDay?: int32(name='hotel_available_nights_per_day'),
      }(name='itinerary_travel_standard'),
      needHotel?: boolean(name='need_hotel', example='true'),
      needTraffic?: boolean(name='need_traffic', example='true'),
      projectCode?: string(name='project_code', example='projectone'),
      projectTitle?: string(name='project_title'),
      provinceTravelCityAdcodes?: [ string ](name='province_travel_city_adcodes'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id', example='ZG14131'),
      thirdpartCostCenterId?: string(name='thirdpart_cost_center_id', example='thirdpart5151'),
      trafficType?: int32(name='traffic_type', description='This parameter is required.', example='0'),
      tripWay?: int32(name='trip_way', description='This parameter is required.', example='0'),
    }
  ](name='itinerary_list', example='0'),
  itineraryRule?: int32(name='itinerary_rule', example='0'),
  itinerarySetList?: [ 
    {
      arrDate?: string(name='arr_date', example='2017-01-01 00:00:00'),
      attribute?: string(name='attribute'),
      cityCodeSet?: string(name='city_code_set', example='BJS,SHA'),
      citySet?: string(name='city_set'),
      costCenterId?: long(name='cost_center_id', example='123455'),
      depDate?: string(name='dep_date', example='2017-01-01 00:00:00'),
      invoiceId?: long(name='invoice_id', example='12344'),
      itineraryId?: string(name='itinerary_id', example='20220722001'),
      itineraryTravelStandard?: {
        hotelAvailableNightsPerDay?: int32(name='hotel_available_nights_per_day'),
      }(name='itinerary_travel_standard'),
      projectCode?: string(name='project_code', example='projecttow'),
      projectTitle?: string(name='project_title'),
      provinceTravelCityAdcodes?: [ string ](name='province_travel_city_adcodes'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id', example='thridpart12138'),
      thirdpartCostCenterId?: string(name='thirdpart_cost_center_id', example='thridpart12138'),
      trafficType?: int32(name='traffic_type', example='0'),
    }
  ](name='itinerary_set_list'),
  limitTraveler?: int32(name='limit_traveler', example='0'),
  mealBudget?: long(name='meal_budget'),
  paymentDepartmentId?: string(name='payment_department_id'),
  paymentDepartmentName?: string(name='payment_department_name'),
  status?: int32(name='status', example='1'),
  subCorpId?: string(name='sub_corp_id', description='子企业Id', example='btrip123'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', description='This parameter is required.', example='0001A1100000007EX08O'),
  thirdpartBusinessId?: string(name='thirdpart_business_id', example='202201413141'),
  thirdpartDepartId?: string(name='thirdpart_depart_id'),
  togetherBookRule?: int32(name='together_book_rule', example='1'),
  trainBudget?: long(name='train_budget', example='1000'),
  travelerList?: [ 
    {
      attribute?: string(name='attribute'),
      costCenterId?: long(name='cost_center_id'),
      invoiceId?: long(name='invoice_id'),
      paymentDepartmentId?: string(name='payment_department_id'),
      paymentDepartmentName?: string(name='payment_department_name'),
      projectCode?: string(name='project_code'),
      projectTitle?: string(name='project_title'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id'),
      thirdpartCostCenterId?: string(name='thirdpart_cost_center_id'),
      thirdpartDepartId?: string(name='thirdpart_depart_id'),
      userId?: string(name='user_id', example='GS641312'),
      userName?: string(name='user_name'),
    }
  ](name='traveler_list'),
  travelerStandard?: [ 
    {
      businessDiscount?: int32(name='business_discount', example='1'),
      carCitySet?: [ 
        {
          cityCode?: string(name='city_code', description='This parameter is required.'),
          cityName?: string(name='city_name', description='This parameter is required.'),
        }
      ](name='car_city_set'),
      economyDiscount?: int32(name='economy_discount', example='1'),
      firstDiscount?: int32(name='first_discount', example='1'),
      flightCabins?: string(name='flight_cabins', example='Y'),
      flightIntlRuleCode?: long(name='flight_intl_rule_code'),
      flightRuleCode?: long(name='flight_rule_code'),
      hotelCitys?: [ 
        {
          cityCode?: string(name='city_code', example='0'),
          cityName?: string(name='city_name'),
          fee?: long(name='fee', example='1014'),
        }
      ](name='hotel_citys'),
      hotelIntlCitys?: [ 
        {
          cityCode?: string(name='city_code'),
          cityName?: string(name='city_name'),
          fee?: long(name='fee'),
        }
      ](name='hotel_intl_citys'),
      hotelIntlRuleCode?: long(name='hotel_intl_rule_code'),
      hotelRuleCode?: long(name='hotel_rule_code'),
      premiumEconomyDiscount?: int32(name='premium_economy_discount', description='超级经济舱折扣。1到10的整数', example='1'),
      reserveType?: int32(name='reserve_type', example='0'),
      trainRuleCode?: long(name='train_rule_code'),
      trainSeats?: string(name='train_seats', example='1'),
      userId?: string(name='user_id', example='thirdpart12138'),
    }
  ](name='traveler_standard'),
  tripCause?: string(name='trip_cause', description='This parameter is required.'),
  tripDay?: int32(name='trip_day', example='1'),
  tripTitle?: string(name='trip_title', description='This parameter is required.'),
  unionNo?: string(name='union_no', example='union51415'),
  userId?: string(name='user_id', description='This parameter is required.', example='thirdpart12138'),
  userName?: string(name='user_name'),
  vehicleBudget?: long(name='vehicle_budget', example='1000'),
}

model ApplyModifyShrinkRequest {
  budget?: long(name='budget', example='4000'),
  budgetMerge?: int32(name='budget_merge', example='1'),
  carRuleShrink?: string(name='car_rule'),
  corpName?: string(name='corp_name'),
  defaultStandardShrink?: string(name='default_standard'),
  departId?: string(name='depart_id', example='001'),
  departName?: string(name='depart_name'),
  extendField?: string(name='extend_field', description='可将补充描述传入此字段，账单中将会体现此字段的值。可以用于企业的统计和对账', example='{"cost_center":"成本中心"}'),
  externalTravelerListShrink?: string(name='external_traveler_list'),
  externalTravelerStandardShrink?: string(name='external_traveler_standard'),
  flightBudget?: long(name='flight_budget', example='1000'),
  hotelBudget?: long(name='hotel_budget', example='1000'),
  hotelShareShrink?: string(name='hotel_share'),
  intlFlightBudget?: long(name='intl_flight_budget'),
  intlHotelBudget?: long(name='intl_hotel_budget'),
  itineraryListShrink?: string(name='itinerary_list', example='0'),
  itineraryRule?: int32(name='itinerary_rule', example='0'),
  itinerarySetListShrink?: string(name='itinerary_set_list'),
  limitTraveler?: int32(name='limit_traveler', example='0'),
  mealBudget?: long(name='meal_budget'),
  paymentDepartmentId?: string(name='payment_department_id'),
  paymentDepartmentName?: string(name='payment_department_name'),
  status?: int32(name='status', example='1'),
  subCorpId?: string(name='sub_corp_id', description='子企业Id', example='btrip123'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', description='This parameter is required.', example='0001A1100000007EX08O'),
  thirdpartBusinessId?: string(name='thirdpart_business_id', example='202201413141'),
  thirdpartDepartId?: string(name='thirdpart_depart_id'),
  togetherBookRule?: int32(name='together_book_rule', example='1'),
  trainBudget?: long(name='train_budget', example='1000'),
  travelerListShrink?: string(name='traveler_list'),
  travelerStandardShrink?: string(name='traveler_standard'),
  tripCause?: string(name='trip_cause', description='This parameter is required.'),
  tripDay?: int32(name='trip_day', example='1'),
  tripTitle?: string(name='trip_title', description='This parameter is required.'),
  unionNo?: string(name='union_no', example='union51415'),
  userId?: string(name='user_id', description='This parameter is required.', example='thirdpart12138'),
  userName?: string(name='user_name'),
  vehicleBudget?: long(name='vehicle_budget', example='1000'),
}

model ApplyModifyResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id', example='118526587'),
    thirdpartApplyId?: string(name='thirdpart_apply_id', example='thirdpart12132'),
    thirdpartBusinessId?: string(name='thirdpart_business_id', example='20220702001'),
  }(name='module', description='module。'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model ApplyModifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyModifyResponseBody(name='body'),
}

/**
 * @summary 更新出差审批单
 *
 * @param tmpReq ApplyModifyRequest
 * @param headers ApplyModifyHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ApplyModifyResponse
 */
async function applyModifyWithOptions(tmpReq: ApplyModifyRequest, headers: ApplyModifyHeaders, runtime: Util.RuntimeOptions): ApplyModifyResponse {
  Util.validateModel(tmpReq);
  var request = new ApplyModifyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.carRule)) {
    request.carRuleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.carRule, 'car_rule', 'json');
  }
  if (!Util.isUnset(tmpReq.defaultStandard)) {
    request.defaultStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.defaultStandard, 'default_standard', 'json');
  }
  if (!Util.isUnset(tmpReq.externalTravelerList)) {
    request.externalTravelerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.externalTravelerList, 'external_traveler_list', 'json');
  }
  if (!Util.isUnset(tmpReq.externalTravelerStandard)) {
    request.externalTravelerStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.externalTravelerStandard, 'external_traveler_standard', 'json');
  }
  if (!Util.isUnset(tmpReq.hotelShare)) {
    request.hotelShareShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hotelShare, 'hotel_share', 'json');
  }
  if (!Util.isUnset(tmpReq.itineraryList)) {
    request.itineraryListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itineraryList, 'itinerary_list', 'json');
  }
  if (!Util.isUnset(tmpReq.itinerarySetList)) {
    request.itinerarySetListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itinerarySetList, 'itinerary_set_list', 'json');
  }
  if (!Util.isUnset(tmpReq.travelerList)) {
    request.travelerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerList, 'traveler_list', 'json');
  }
  if (!Util.isUnset(tmpReq.travelerStandard)) {
    request.travelerStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerStandard, 'traveler_standard', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.budget)) {
    body['budget'] = request.budget;
  }
  if (!Util.isUnset(request.budgetMerge)) {
    body['budget_merge'] = request.budgetMerge;
  }
  if (!Util.isUnset(request.carRuleShrink)) {
    body['car_rule'] = request.carRuleShrink;
  }
  if (!Util.isUnset(request.corpName)) {
    body['corp_name'] = request.corpName;
  }
  if (!Util.isUnset(request.defaultStandardShrink)) {
    body['default_standard'] = request.defaultStandardShrink;
  }
  if (!Util.isUnset(request.departId)) {
    body['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.departName)) {
    body['depart_name'] = request.departName;
  }
  if (!Util.isUnset(request.extendField)) {
    body['extend_field'] = request.extendField;
  }
  if (!Util.isUnset(request.externalTravelerListShrink)) {
    body['external_traveler_list'] = request.externalTravelerListShrink;
  }
  if (!Util.isUnset(request.externalTravelerStandardShrink)) {
    body['external_traveler_standard'] = request.externalTravelerStandardShrink;
  }
  if (!Util.isUnset(request.flightBudget)) {
    body['flight_budget'] = request.flightBudget;
  }
  if (!Util.isUnset(request.hotelBudget)) {
    body['hotel_budget'] = request.hotelBudget;
  }
  if (!Util.isUnset(request.hotelShareShrink)) {
    body['hotel_share'] = request.hotelShareShrink;
  }
  if (!Util.isUnset(request.intlFlightBudget)) {
    body['intl_flight_budget'] = request.intlFlightBudget;
  }
  if (!Util.isUnset(request.intlHotelBudget)) {
    body['intl_hotel_budget'] = request.intlHotelBudget;
  }
  if (!Util.isUnset(request.itineraryListShrink)) {
    body['itinerary_list'] = request.itineraryListShrink;
  }
  if (!Util.isUnset(request.itineraryRule)) {
    body['itinerary_rule'] = request.itineraryRule;
  }
  if (!Util.isUnset(request.itinerarySetListShrink)) {
    body['itinerary_set_list'] = request.itinerarySetListShrink;
  }
  if (!Util.isUnset(request.limitTraveler)) {
    body['limit_traveler'] = request.limitTraveler;
  }
  if (!Util.isUnset(request.mealBudget)) {
    body['meal_budget'] = request.mealBudget;
  }
  if (!Util.isUnset(request.paymentDepartmentId)) {
    body['payment_department_id'] = request.paymentDepartmentId;
  }
  if (!Util.isUnset(request.paymentDepartmentName)) {
    body['payment_department_name'] = request.paymentDepartmentName;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.subCorpId)) {
    body['sub_corp_id'] = request.subCorpId;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    body['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.thirdpartBusinessId)) {
    body['thirdpart_business_id'] = request.thirdpartBusinessId;
  }
  if (!Util.isUnset(request.thirdpartDepartId)) {
    body['thirdpart_depart_id'] = request.thirdpartDepartId;
  }
  if (!Util.isUnset(request.togetherBookRule)) {
    body['together_book_rule'] = request.togetherBookRule;
  }
  if (!Util.isUnset(request.trainBudget)) {
    body['train_budget'] = request.trainBudget;
  }
  if (!Util.isUnset(request.travelerListShrink)) {
    body['traveler_list'] = request.travelerListShrink;
  }
  if (!Util.isUnset(request.travelerStandardShrink)) {
    body['traveler_standard'] = request.travelerStandardShrink;
  }
  if (!Util.isUnset(request.tripCause)) {
    body['trip_cause'] = request.tripCause;
  }
  if (!Util.isUnset(request.tripDay)) {
    body['trip_day'] = request.tripDay;
  }
  if (!Util.isUnset(request.tripTitle)) {
    body['trip_title'] = request.tripTitle;
  }
  if (!Util.isUnset(request.unionNo)) {
    body['union_no'] = request.unionNo;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    body['user_name'] = request.userName;
  }
  if (!Util.isUnset(request.vehicleBudget)) {
    body['vehicle_budget'] = request.vehicleBudget;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyModify',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/biz-trip`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新出差审批单
 *
 * @param request ApplyModifyRequest
 * @return ApplyModifyResponse
 */
async function applyModify(request: ApplyModifyRequest): ApplyModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ApplyModifyHeaders{};
  return applyModifyWithOptions(request, headers, runtime);
}

model ApplyQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ApplyQueryRequest {
  applyId?: int32(name='apply_id', example='123'),
  applyShowId?: string(name='apply_show_id', example='201710111505000464651'),
  subCorpId?: string(name='sub_corp_id', example='btrip123'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', example='adczd'),
  type?: int32(name='type', example='1'),
}

model ApplyQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    applyShowId?: string(name='apply_show_id', example='201710111505000464651'),
    approverList?: [ 
      {
        note?: string(name='note'),
        operateTime?: string(name='operate_time', example='2018-09-19T14:03Z'),
        order?: int32(name='order', example='1'),
        status?: int32(name='status', example='0'),
        statusDesc?: string(name='status_desc'),
        userId?: string(name='user_id', example='user1'),
        userName?: string(name='user_name'),
      }
    ](name='approver_list'),
    budget?: long(name='budget', example='100000'),
    budgetMerge?: int32(name='budget_merge', example='1'),
    carRule?: {
      scenarioTemplateId?: string(name='scenario_template_id'),
      scenarioTemplateName?: string(name='scenario_template_name'),
    }(name='car_rule'),
    corpId?: string(name='corp_id', example='corpid'),
    corpName?: string(name='corp_name'),
    departId?: string(name='depart_id', example='dept1'),
    departName?: string(name='depart_name', example='adv'),
    extendField?: string(name='extend_field', description='补充描述，账单中将会体现此字段的值。可以用于企业的统计和对账', example='{"cost_center":"成本中心"}'),
    externalTravelerList?: [ 
      {
        attribute?: string(name='attribute'),
        businessDiscount?: int32(name='business_discount', example='1'),
        costCenterName?: string(name='cost_center_name'),
        departId?: string(name='depart_id'),
        economyDiscount?: int32(name='economy_discount', example='1'),
        externalUserId?: string(name='external_user_id'),
        firstDiscount?: int32(name='first_discount', example='1'),
        flightCabins?: string(name='flight_cabins', example='F'),
        flightIntlRuleCode?: long(name='flight_intl_rule_code'),
        flightRuleCode?: long(name='flight_rule_code'),
        hotelCitys?: [ 
          {
            cityCode?: string(name='city_code', example='0'),
            cityName?: string(name='city_name'),
            fee?: long(name='fee', example='100000'),
          }
        ](name='hotel_citys'),
        hotelIntlCitys?: [ 
          {
            cityCode?: string(name='city_code'),
            cityName?: string(name='city_name'),
            fee?: long(name='fee'),
          }
        ](name='hotel_intl_citys'),
        hotelIntlRuleCode?: long(name='hotel_intl_rule_code'),
        hotelRuleCode?: long(name='hotel_rule_code'),
        invoiceName?: string(name='invoice_name'),
        paymentDepartmentId?: string(name='payment_department_id'),
        paymentDepartmentName?: string(name='payment_department_name'),
        premiumEconomyDiscount?: int32(name='premium_economy_discount', example='1'),
        projectCode?: string(name='project_code'),
        projectTitle?: string(name='project_title'),
        reserveType?: int32(name='reserve_type', example='1'),
        thirdPartInvoiceId?: string(name='third_part_invoice_id'),
        thirdpartCostCenterId?: string(name='thirdpart_cost_center_id'),
        thirdpartDepartId?: string(name='thirdpart_depart_id'),
        trainRuleCode?: long(name='train_rule_code'),
        trainSeats?: string(name='train_seats', example='1'),
        userName?: string(name='user_name'),
      }
    ](name='external_traveler_list'),
    flightBudget?: long(name='flight_budget', example='10000'),
    gmtCreate?: string(name='gmt_create', example='2018-09-19T14:03Z'),
    gmtModified?: string(name='gmt_modified', example='2018-09-19T14:03Z'),
    hotelBudget?: long(name='hotel_budget', example='100000'),
    hotelShare?: {
      param?: string(name='param', example='70'),
      type?: string(name='type', example='1'),
    }(name='hotel_share'),
    id?: long(name='id', example='3298'),
    intlFlightBudget?: long(name='intl_flight_budget'),
    intlHotelBudget?: long(name='intl_hotel_budget'),
    itineraryList?: [ 
      {
        arrCity?: string(name='arr_city'),
        arrCityCode?: string(name='arr_city_code', example='330100'),
        arrDate?: string(name='arr_date', example='2018-09-19T14:03Z'),
        attribute?: string(name='attribute'),
        costCenterName?: string(name='cost_center_name', example='accac'),
        depCity?: string(name='dep_city'),
        depCityCode?: string(name='dep_city_code', example='330100'),
        depDate?: string(name='dep_date', example='2018-09-19T14:03Z'),
        invoiceName?: string(name='invoice_name'),
        itineraryId?: string(name='itinerary_id'),
        itineraryTravelStandard?: {
          hotelAvailableNightsPerDay?: int32(name='hotel_available_nights_per_day'),
        }(name='itinerary_travel_standard'),
        projectCode?: string(name='project_code', example='xm1'),
        projectTitle?: string(name='project_title'),
        thirdpartCostCenterId?: string(name='thirdpart_cost_center_id'),
        thirdpartInvoiceId?: string(name='thirdpart_invoice_id'),
        thirdpartItineraryId?: string(name='thirdpart_itinerary_id'),
        trafficType?: int32(name='traffic_type', example='1'),
        tripWay?: int32(name='trip_way', example='1'),
      }
    ](name='itinerary_list'),
    itineraryRule?: int32(name='itinerary_rule', example='0'),
    itinerarySetList?: [ 
      {
        arrDate?: string(name='arr_date', example='2018-09-19T14:03Z'),
        attribute?: string(name='attribute'),
        cityCodeSet?: string(name='city_code_set', example='BJS，HGH'),
        citySet?: string(name='city_set'),
        costCenterName?: string(name='cost_center_name'),
        depDate?: string(name='dep_date', example='2018-09-19T14:03Z'),
        invoiceName?: string(name='invoice_name'),
        itineraryId?: string(name='itinerary_id', example='12345'),
        itineraryTravelStandard?: {
          hotelAvailableNightsPerDay?: int32(name='hotel_available_nights_per_day'),
        }(name='itinerary_travel_standard'),
        projectCode?: string(name='project_code', example='projecttow'),
        projectTitle?: string(name='project_title'),
        thirdpartCostCenterId?: string(name='thirdpart_cost_center_id'),
        thirdpartInvoiceId?: string(name='thirdpart_invoice_id'),
        thirdpartItineraryId?: string(name='thirdpart_itinerary_id'),
        trafficType?: int32(name='traffic_type', example='0'),
      }
    ](name='itinerary_set_list'),
    limitTraveler?: int32(name='limit_traveler', example='0'),
    mealBudget?: long(name='meal_budget'),
    paymentDepartmentId?: string(name='payment_department_id'),
    paymentDepartmentName?: string(name='payment_department_name'),
    status?: int32(name='status', example='1'),
    statusDesc?: string(name='status_desc'),
    thirdpartBusinessId?: string(name='thirdpart_business_id', example='1213'),
    thirdpartId?: string(name='thirdpart_id', example='1214254'),
    togetherBookRule?: int32(name='together_book_rule', example='1'),
    trainBudget?: long(name='train_budget', example='10000'),
    travelerList?: [ 
      {
        attribute?: string(name='attribute'),
        businessDiscount?: int32(name='business_discount', example='1'),
        carCitySet?: [ 
          {
            cityCode?: string(name='city_code'),
            cityName?: string(name='city_name'),
          }
        ](name='car_city_set'),
        costCenterName?: string(name='cost_center_name'),
        departId?: string(name='depart_id'),
        economyDiscount?: int32(name='economy_discount', example='1'),
        firstDiscount?: int32(name='first_discount', example='1'),
        flightCabins?: string(name='flight_cabins', example='F'),
        flightIntlRuleCode?: long(name='flight_intl_rule_code'),
        flightRuleCode?: long(name='flight_rule_code'),
        hotelCitys?: [ 
          {
            cityCode?: string(name='city_code', example='0'),
            cityName?: string(name='city_name'),
            fee?: long(name='fee', example='100000'),
          }
        ](name='hotel_citys'),
        hotelIntlCitys?: [ 
          {
            cityCode?: string(name='city_code'),
            cityName?: string(name='city_name'),
            fee?: long(name='fee'),
          }
        ](name='hotel_intl_citys'),
        hotelIntlRuleCode?: long(name='hotel_intl_rule_code'),
        hotelRuleCode?: long(name='hotel_rule_code'),
        invoiceName?: string(name='invoice_name'),
        paymentDepartmentId?: string(name='payment_department_id'),
        paymentDepartmentName?: string(name='payment_department_name'),
        premiumEconomyDiscount?: int32(name='premium_economy_discount', example='1'),
        projectCode?: string(name='project_code'),
        projectTitle?: string(name='project_title'),
        reserveType?: int32(name='reserve_type', example='1'),
        thirdPartInvoiceId?: string(name='third_part_invoice_id'),
        thirdpartCostCenterId?: string(name='thirdpart_cost_center_id'),
        thirdpartDepartId?: string(name='thirdpart_depart_id'),
        trainRuleCode?: long(name='train_rule_code'),
        trainSeats?: string(name='train_seats', example='1'),
        userId?: string(name='user_id', example='3423'),
        userName?: string(name='user_name'),
      }
    ](name='traveler_list'),
    tripCause?: string(name='trip_cause'),
    tripDay?: int32(name='trip_day', example='2'),
    tripTitle?: string(name='trip_title'),
    type?: int32(name='type', example='2'),
    unionNo?: string(name='union_no', example='abd123'),
    userId?: string(name='user_id', example='user1'),
    userName?: string(name='user_name'),
    vehicleBudget?: long(name='vehicle_budget', example='10000'),
  }(name='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model ApplyQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyQueryResponseBody(name='body'),
}

/**
 * @summary 查询出差审批单详情
 *
 * @param request ApplyQueryRequest
 * @param headers ApplyQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ApplyQueryResponse
 */
async function applyQueryWithOptions(request: ApplyQueryRequest, headers: ApplyQueryHeaders, runtime: Util.RuntimeOptions): ApplyQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.applyShowId)) {
    query['apply_show_id'] = request.applyShowId;
  }
  if (!Util.isUnset(request.subCorpId)) {
    query['sub_corp_id'] = request.subCorpId;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    query['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/biz-trip`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询出差审批单详情
 *
 * @param request ApplyQueryRequest
 * @return ApplyQueryResponse
 */
async function applyQuery(request: ApplyQueryRequest): ApplyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ApplyQueryHeaders{};
  return applyQueryWithOptions(request, headers, runtime);
}

model ApplyTripTaskExecuteHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ApplyTripTaskExecuteRequest {
  actionFrom?: string(name='action_from', description='This parameter is required.', example='open'),
  comment?: string(name='comment'),
  taskAction?: string(name='task_action', description='This parameter is required.', example='agree'),
  taskId?: long(name='task_id', description='This parameter is required.', example='12345'),
  userId?: string(name='user_id', description='This parameter is required.', example='thirdpart12138'),
  userName?: string(name='user_name'),
}

model ApplyTripTaskExecuteResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: boolean(name='module', example='true'),
  requestId?: string(name='requestId', example='2FB0D7A8-BA41-5D04-BEFC-CADA5481AC53'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210bc56016876728084104176d2c35'),
}

model ApplyTripTaskExecuteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyTripTaskExecuteResponseBody(name='body'),
}

/**
 * @summary 执行审批任务
 *
 * @param request ApplyTripTaskExecuteRequest
 * @param headers ApplyTripTaskExecuteHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ApplyTripTaskExecuteResponse
 */
async function applyTripTaskExecuteWithOptions(request: ApplyTripTaskExecuteRequest, headers: ApplyTripTaskExecuteHeaders, runtime: Util.RuntimeOptions): ApplyTripTaskExecuteResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.actionFrom)) {
    body['action_from'] = request.actionFrom;
  }
  if (!Util.isUnset(request.comment)) {
    body['comment'] = request.comment;
  }
  if (!Util.isUnset(request.taskAction)) {
    body['task_action'] = request.taskAction;
  }
  if (!Util.isUnset(request.taskId)) {
    body['task_id'] = request.taskId;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    body['user_name'] = request.userName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyTripTaskExecute',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/trip-task/action/execute`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 执行审批任务
 *
 * @param request ApplyTripTaskExecuteRequest
 * @return ApplyTripTaskExecuteResponse
 */
async function applyTripTaskExecute(request: ApplyTripTaskExecuteRequest): ApplyTripTaskExecuteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ApplyTripTaskExecuteHeaders{};
  return applyTripTaskExecuteWithOptions(request, headers, runtime);
}

model BaseCityInfoSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripAccessToken?: string(name='x-acs-btrip-access-token', example='feth00jqwls'),
}

model BaseCityInfoSearchRequest {
  keyword?: string(name='keyword', description='This parameter is required.'),
  region?: string(name='region', description='This parameter is required.', example='0', nullable=false),
}

model BaseCityInfoSearchResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: [ 
    {
      code?: string(name='code', example='330100'),
      name?: string(name='name'),
      nameTree?: string(name='nameTree'),
      region?: string(name='region', example='0'),
    }
  ](name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210f079e16603757182131635d866a'),
}

model BaseCityInfoSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BaseCityInfoSearchResponseBody(name='body'),
}

/**
 * @summary 搜索国内/国际（港澳台）城市基础行政区划数据
 *
 * @param request BaseCityInfoSearchRequest
 * @param headers BaseCityInfoSearchHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return BaseCityInfoSearchResponse
 */
async function baseCityInfoSearchWithOptions(request: BaseCityInfoSearchRequest, headers: BaseCityInfoSearchHeaders, runtime: Util.RuntimeOptions): BaseCityInfoSearchResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripAccessToken)) {
    realHeaders['x-acs-btrip-access-token'] = Util.toJSONString(headers.xAcsBtripAccessToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BaseCityInfoSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/city/v1/cities/action/search`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 搜索国内/国际（港澳台）城市基础行政区划数据
 *
 * @param request BaseCityInfoSearchRequest
 * @return BaseCityInfoSearchResponse
 */
async function baseCityInfoSearch(request: BaseCityInfoSearchRequest): BaseCityInfoSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new BaseCityInfoSearchHeaders{};
  return baseCityInfoSearchWithOptions(request, headers, runtime);
}

model BtripBillInfoAdjustHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model BtripBillInfoAdjustRequest {
  primaryId?: long(name='primary_id', description='This parameter is required.', example='123456'),
  thirdPartCostCenterId?: string(name='third_part_cost_center_id', example='GA15131'),
  thirdPartDepartmentId?: string(name='third_part_department_id', example='GA15131'),
  thirdPartInvoiceId?: string(name='third_part_invoice_id', example='GA15131'),
  thirdPartProjectId?: string(name='third_part_project_id', example='GA15131'),
  userId?: string(name='user_id', example='123'),
}

model BtripBillInfoAdjustResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model BtripBillInfoAdjustResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BtripBillInfoAdjustResponseBody(name='body'),
}

/**
 * @summary 商旅账单内容修改
 *
 * @param request BtripBillInfoAdjustRequest
 * @param headers BtripBillInfoAdjustHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return BtripBillInfoAdjustResponse
 */
async function btripBillInfoAdjustWithOptions(request: BtripBillInfoAdjustRequest, headers: BtripBillInfoAdjustHeaders, runtime: Util.RuntimeOptions): BtripBillInfoAdjustResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.primaryId)) {
    body['primary_id'] = request.primaryId;
  }
  if (!Util.isUnset(request.thirdPartCostCenterId)) {
    body['third_part_cost_center_id'] = request.thirdPartCostCenterId;
  }
  if (!Util.isUnset(request.thirdPartDepartmentId)) {
    body['third_part_department_id'] = request.thirdPartDepartmentId;
  }
  if (!Util.isUnset(request.thirdPartInvoiceId)) {
    body['third_part_invoice_id'] = request.thirdPartInvoiceId;
  }
  if (!Util.isUnset(request.thirdPartProjectId)) {
    body['third_part_project_id'] = request.thirdPartProjectId;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BtripBillInfoAdjust',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/bill/v1/info/action/adjust`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 商旅账单内容修改
 *
 * @param request BtripBillInfoAdjustRequest
 * @return BtripBillInfoAdjustResponse
 */
async function btripBillInfoAdjust(request: BtripBillInfoAdjustRequest): BtripBillInfoAdjustResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new BtripBillInfoAdjustHeaders{};
  return btripBillInfoAdjustWithOptions(request, headers, runtime);
}

model CarApplyAddHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CarApplyAddRequest {
  cause?: string(name='cause', description='This parameter is required.'),
  city?: string(name='city', description='This parameter is required.'),
  cityCodeSet?: string(name='city_code_set'),
  date?: string(name='date', description='This parameter is required.', example='2022-07-12 14:52:52'),
  finishedDate?: string(name='finished_date', example='2022-07-12 18:51:25'),
  projectCode?: string(name='project_code', example='project1413'),
  projectName?: string(name='project_name'),
  status?: int32(name='status', description='This parameter is required.', example='0'),
  thirdPartApplyId?: string(name='third_part_apply_id', description='This parameter is required.', example='IRGS1413'),
  thirdPartCostCenterId?: string(name='third_part_cost_center_id', example='QA1411'),
  thirdPartInvoiceId?: string(name='third_part_invoice_id', example='GA15131'),
  timesTotal?: int32(name='times_total', description='This parameter is required.', example='1'),
  timesType?: int32(name='times_type', description='This parameter is required.', example='1'),
  timesUsed?: int32(name='times_used', description='This parameter is required.', example='1'),
  title?: string(name='title', description='This parameter is required.'),
  travelerStandard?: [ 
    {
      carCitySet?: [ 
        {
          cityCode?: string(name='city_code', description='This parameter is required.'),
          cityName?: string(name='city_name', description='This parameter is required.'),
        }
      ](name='car_city_set'),
      userId?: string(name='user_id', description='This parameter is required.'),
    }
  ](name='traveler_standard'),
  userId?: string(name='user_id', description='This parameter is required.', example='OPEN1415614'),
}

model CarApplyAddShrinkRequest {
  cause?: string(name='cause', description='This parameter is required.'),
  city?: string(name='city', description='This parameter is required.'),
  cityCodeSet?: string(name='city_code_set'),
  date?: string(name='date', description='This parameter is required.', example='2022-07-12 14:52:52'),
  finishedDate?: string(name='finished_date', example='2022-07-12 18:51:25'),
  projectCode?: string(name='project_code', example='project1413'),
  projectName?: string(name='project_name'),
  status?: int32(name='status', description='This parameter is required.', example='0'),
  thirdPartApplyId?: string(name='third_part_apply_id', description='This parameter is required.', example='IRGS1413'),
  thirdPartCostCenterId?: string(name='third_part_cost_center_id', example='QA1411'),
  thirdPartInvoiceId?: string(name='third_part_invoice_id', example='GA15131'),
  timesTotal?: int32(name='times_total', description='This parameter is required.', example='1'),
  timesType?: int32(name='times_type', description='This parameter is required.', example='1'),
  timesUsed?: int32(name='times_used', description='This parameter is required.', example='1'),
  title?: string(name='title', description='This parameter is required.'),
  travelerStandardShrink?: string(name='traveler_standard'),
  userId?: string(name='user_id', description='This parameter is required.', example='OPEN1415614'),
}

model CarApplyAddResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: long(name='module', example='1002923002'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model CarApplyAddResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CarApplyAddResponseBody(name='body'),
}

/**
 * @summary 同步市内用车审批单
 *
 * @param tmpReq CarApplyAddRequest
 * @param headers CarApplyAddHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CarApplyAddResponse
 */
async function carApplyAddWithOptions(tmpReq: CarApplyAddRequest, headers: CarApplyAddHeaders, runtime: Util.RuntimeOptions): CarApplyAddResponse {
  Util.validateModel(tmpReq);
  var request = new CarApplyAddShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.travelerStandard)) {
    request.travelerStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerStandard, 'traveler_standard', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.cause)) {
    body['cause'] = request.cause;
  }
  if (!Util.isUnset(request.city)) {
    body['city'] = request.city;
  }
  if (!Util.isUnset(request.cityCodeSet)) {
    body['city_code_set'] = request.cityCodeSet;
  }
  if (!Util.isUnset(request.date)) {
    body['date'] = request.date;
  }
  if (!Util.isUnset(request.finishedDate)) {
    body['finished_date'] = request.finishedDate;
  }
  if (!Util.isUnset(request.projectCode)) {
    body['project_code'] = request.projectCode;
  }
  if (!Util.isUnset(request.projectName)) {
    body['project_name'] = request.projectName;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.thirdPartApplyId)) {
    body['third_part_apply_id'] = request.thirdPartApplyId;
  }
  if (!Util.isUnset(request.thirdPartCostCenterId)) {
    body['third_part_cost_center_id'] = request.thirdPartCostCenterId;
  }
  if (!Util.isUnset(request.thirdPartInvoiceId)) {
    body['third_part_invoice_id'] = request.thirdPartInvoiceId;
  }
  if (!Util.isUnset(request.timesTotal)) {
    body['times_total'] = request.timesTotal;
  }
  if (!Util.isUnset(request.timesType)) {
    body['times_type'] = request.timesType;
  }
  if (!Util.isUnset(request.timesUsed)) {
    body['times_used'] = request.timesUsed;
  }
  if (!Util.isUnset(request.title)) {
    body['title'] = request.title;
  }
  if (!Util.isUnset(request.travelerStandardShrink)) {
    body['traveler_standard'] = request.travelerStandardShrink;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CarApplyAdd',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/car`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 同步市内用车审批单
 *
 * @param request CarApplyAddRequest
 * @return CarApplyAddResponse
 */
async function carApplyAdd(request: CarApplyAddRequest): CarApplyAddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CarApplyAddHeaders{};
  return carApplyAddWithOptions(request, headers, runtime);
}

model CarApplyModifyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CarApplyModifyRequest {
  operateTime?: string(name='operate_time', example='2022-07-12 16:12:53'),
  remark?: string(name='remark'),
  status?: int32(name='status', description='This parameter is required.', example='1'),
  thirdPartApplyId?: string(name='third_part_apply_id', description='This parameter is required.', example='IRGS1413'),
  userId?: string(name='user_id', description='This parameter is required.', example='open62141'),
}

model CarApplyModifyResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: boolean(name='module', description='module。', example='{\\\\"list\\\\": [], \\\\"pageSize\\\\": 20, \\\\"pageNo\\\\": 1}'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model CarApplyModifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CarApplyModifyResponseBody(name='body'),
}

/**
 * @summary 更新市内用车审批单
 *
 * @param request CarApplyModifyRequest
 * @param headers CarApplyModifyHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CarApplyModifyResponse
 */
async function carApplyModifyWithOptions(request: CarApplyModifyRequest, headers: CarApplyModifyHeaders, runtime: Util.RuntimeOptions): CarApplyModifyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.operateTime)) {
    body['operate_time'] = request.operateTime;
  }
  if (!Util.isUnset(request.remark)) {
    body['remark'] = request.remark;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.thirdPartApplyId)) {
    body['third_part_apply_id'] = request.thirdPartApplyId;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CarApplyModify',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/car`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新市内用车审批单
 *
 * @param request CarApplyModifyRequest
 * @return CarApplyModifyResponse
 */
async function carApplyModify(request: CarApplyModifyRequest): CarApplyModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CarApplyModifyHeaders{};
  return carApplyModifyWithOptions(request, headers, runtime);
}

model CarApplyQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CarApplyQueryRequest {
  createdEndAt?: string(name='created_end_at', example='2021-03-18 20:26:56'),
  createdStartAt?: string(name='created_start_at', example='2021-03-18 20:26:56'),
  pageNumber?: int32(name='page_number', example='1'),
  pageSize?: int32(name='page_size', example='20'),
  thirdPartApplyId?: string(name='third_part_apply_id', example='apply1'),
  userId?: string(name='user_id', example='userid'),
}

model CarApplyQueryResponseBody = {
  applyList?: [ 
    {
      approverList?: [ 
        {
          note?: string(name='note'),
          operateTime?: string(name='operate_time', example='2021-03-18T20:26Z'),
          order?: int32(name='order', example='1'),
          status?: int32(name='status', example='1'),
          statusDesc?: string(name='status_desc'),
          userId?: string(name='user_id', example='user1'),
          userName?: string(name='user_name'),
        }
      ](name='approver_list'),
      businessType?: string(name='business_type'),
      departId?: string(name='depart_id', example='depart1'),
      departName?: string(name='depart_name'),
      gmtCreate?: string(name='gmt_create', example='2021-03-18T20:26Z'),
      gmtModified?: string(name='gmt_modified', example='2021-03-18T20:26Z'),
      itineraryList?: [ 
        {
          arrCity?: string(name='arr_city'),
          arrCityCode?: string(name='arr_city_code', example='HGH'),
          arrDate?: string(name='arr_date', example='2021-03-18T20:26Z'),
          costCenterId?: long(name='cost_center_id', example='1'),
          costCenterName?: string(name='cost_center_name'),
          depCity?: string(name='dep_city'),
          depCityCode?: string(name='dep_city_code', example='HGH'),
          depDate?: string(name='dep_date', example='2021-03-18T20:26Z'),
          invoiceId?: long(name='invoice_id', example='1'),
          invoiceName?: string(name='invoice_name'),
          itineraryId?: string(name='itinerary_id', example='1'),
          projectCode?: string(name='project_code', example='xm1'),
          projectTitle?: string(name='project_title'),
          trafficType?: int32(name='traffic_type', example='4'),
        }
      ](name='itinerary_list'),
      orderId?: long(name='order_id'),
      relatedThirdApplyId?: string(name='related_third_apply_id'),
      status?: int32(name='status', example='2'),
      statusDesc?: string(name='status_desc'),
      thirdpartId?: string(name='thirdpart_id', example='1'),
      travelerStandard?: [ 
        {
          carCitySet?: [ 
            {
              cityCode?: string(name='city_code'),
              cityName?: string(name='city_name'),
            }
          ](name='car_city_set'),
          userId?: string(name='user_id'),
        }
      ](name='traveler_standard'),
      tripCause?: string(name='trip_cause'),
      tripTitle?: string(name='trip_title'),
      userId?: string(name='user_id', example='user1'),
      userName?: string(name='user_name'),
    }
  ](name='apply_list'),
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='True'),
  total?: int32(name='total', example='6'),
  traceId?: string(name='traceId', example='210bcc3a16583004579056128d33d7'),
}

model CarApplyQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CarApplyQueryResponseBody(name='body'),
}

/**
 * @summary 查询市内用车审批单
 *
 * @param request CarApplyQueryRequest
 * @param headers CarApplyQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CarApplyQueryResponse
 */
async function carApplyQueryWithOptions(request: CarApplyQueryRequest, headers: CarApplyQueryHeaders, runtime: Util.RuntimeOptions): CarApplyQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.createdEndAt)) {
    query['created_end_at'] = request.createdEndAt;
  }
  if (!Util.isUnset(request.createdStartAt)) {
    query['created_start_at'] = request.createdStartAt;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['page_number'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.thirdPartApplyId)) {
    query['third_part_apply_id'] = request.thirdPartApplyId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CarApplyQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/car`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询市内用车审批单
 *
 * @param request CarApplyQueryRequest
 * @return CarApplyQueryResponse
 */
async function carApplyQuery(request: CarApplyQueryRequest): CarApplyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CarApplyQueryHeaders{};
  return carApplyQueryWithOptions(request, headers, runtime);
}

model CarBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CarBillSettlementQueryRequest {
  billBatch?: string(name='bill_batch'),
  orderId?: long(name='order_id'),
  pageNo?: int32(name='page_no', description='This parameter is required.', example='1'),
  pageSize?: int32(name='page_size', description='This parameter is required.', example='30'),
  periodEnd?: string(name='period_end', example='2022-07-01'),
  periodStart?: string(name='period_start', example='2022-07-01'),
  scrollId?: string(name='scroll_id'),
  scrollMod?: boolean(name='scroll_mod'),
}

model CarBillSettlementQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category', example='4'),
    corpId?: string(name='corp_id'),
    dataList?: [ 
      {
        adjustTime?: string(name='adjust_time'),
        alipayTradeNo?: string(name='alipay_trade_no', example='34534543545345'),
        applyArrCityCode?: string(name='apply_arr_city_code'),
        applyArrCityName?: string(name='apply_arr_city_name'),
        applyDepCityCode?: string(name='apply_dep_city_code'),
        applyDepCityName?: string(name='apply_dep_city_name'),
        applyExtendField?: string(name='apply_extend_field', description='审批扩展自定义字段'),
        applyId?: string(name='apply_id'),
        approverEmail?: string(name='approver_email'),
        approverId?: string(name='approver_id'),
        approverName?: string(name='approver_name'),
        arrCity?: string(name='arr_city'),
        arrCityCode?: string(name='arr_city_code'),
        arrDate?: string(name='arr_date', example='2022-07-02'),
        arrLocation?: string(name='arr_location'),
        arrTime?: string(name='arr_time', example='13:51:43'),
        baseLocation?: string(name='base_location'),
        billRecordTime?: string(name='bill_record_time', example='2022-05-15T22:27Z'),
        billingEntity?: string(name='billing_entity'),
        bookModel?: string(name='book_model'),
        bookTime?: string(name='book_time', example='2022-05-15 22:27:00'),
        bookerId?: string(name='booker_id'),
        bookerJobNo?: string(name='booker_job_no', example='70022164'),
        bookerName?: string(name='booker_name'),
        businessCategory?: string(name='business_category'),
        capitalDirection?: string(name='capital_direction', example='1'),
        carLevel?: string(name='car_level'),
        cascadeDepartment?: string(name='cascade_department'),
        categoryDesc?: string(name='category_desc'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number', example='2391-CN90.150'),
        costDepartment?: string(name='cost_department'),
        coupon?: double(name='coupon', example='1'),
        couponPrice?: double(name='coupon_price', example='12.7'),
        customContent?: string(name='custom_content'),
        deductibleTax?: double(name='deductible_tax'),
        depCityCode?: string(name='dep_city_code'),
        department?: string(name='department'),
        departmentId?: string(name='department_id'),
        deptCity?: string(name='dept_city'),
        deptDate?: string(name='dept_date', example='2021-10-13'),
        deptLocation?: string(name='dept_location'),
        deptTime?: string(name='dept_time', example='13:46:05'),
        driverAddDetail?: string(name='driver_add_detail'),
        driverAddFee?: double(name='driver_add_fee'),
        estimateDriveDistance?: string(name='estimate_drive_distance', example='29.07'),
        estimatePrice?: double(name='estimate_price', example='69'),
        feeType?: string(name='fee_type', example='40107'),
        feeTypeDesc?: string(name='fee_type_desc'),
        foreignersTag?: string(name='foreigners_tag'),
        index?: string(name='index', example='4988580'),
        invoiceTitle?: string(name='invoice_title'),
        levelName?: string(name='level_name'),
        location?: string(name='location'),
        mappingCompanyCode?: string(name='mapping_company_code'),
        memo?: string(name='memo'),
        orderId?: string(name='order_id', example='110285961234324'),
        orderPrice?: double(name='order_price', example='12.7'),
        overApplyId?: string(name='over_apply_id', example='34535465346'),
        paymentDepartmentId?: string(name='payment_department_id'),
        paymentDepartmentName?: string(name='payment_department_name'),
        personSettleFee?: double(name='person_settle_fee', example='0'),
        position?: string(name='position'),
        positionLevel?: string(name='position_level'),
        primaryId?: long(name='primary_id', example='4988580'),
        processorOaCode?: string(name='processor_oa_code'),
        projectCode?: string(name='project_code', example='23423432423'),
        projectName?: string(name='project_name'),
        protocolDiscountFee?: double(name='protocol_discount_fee'),
        providerName?: string(name='provider_name'),
        realDriveDistance?: string(name='real_drive_distance', example='0.00'),
        realFromAddr?: string(name='real_from_addr'),
        realToAddr?: string(name='real_to_addr'),
        remark?: string(name='remark'),
        sceneId?: string(name='scene_id'),
        sceneName?: string(name='scene_name'),
        serviceFee?: double(name='service_fee', example='12.7'),
        settleTypeDesc?: string(name='settle_type_desc'),
        settlementFee?: double(name='settlement_fee', example='5'),
        settlementGrantFee?: double(name='settlement_grant_fee', example='6.11'),
        settlementTime?: string(name='settlement_time', example='2022-05-15 22:27:00'),
        settlementType?: string(name='settlement_type', example='4'),
        sio?: string(name='sio'),
        specialOrder?: string(name='special_order'),
        specialReason?: string(name='special_reason'),
        status?: int32(name='status', example='1'),
        statusDesc?: string(name='status_desc'),
        subOrderId?: string(name='sub_order_id', example='123123232'),
        supplementApplyId?: string(name='supplement_apply_id'),
        taxRate?: string(name='tax_rate', description='税率', example='6%'),
        thirdItineraryId?: string(name='third_itinerary_id'),
        timeType?: string(name='time_type'),
        tradeActionDesc?: string(name='trade_action_desc'),
        travelerEmail?: string(name='traveler_email'),
        travelerId?: string(name='traveler_id'),
        travelerJobNo?: string(name='traveler_job_no', example='70022164'),
        travelerMemberType?: string(name='traveler_member_type'),
        travelerMemberTypeName?: string(name='traveler_member_type_name'),
        travelerName?: string(name='traveler_name'),
        userConfirmDesc?: string(name='user_confirm_desc'),
        vehicleSceneId?: string(name='vehicle_scene_id'),
        vehicleSceneName?: string(name='vehicle_scene_name'),
        voucherType?: int32(name='voucher_type', example='11'),
        voucherTypeDesc?: string(name='voucher_type_desc'),
      }
    ](name='data_list'),
    periodEnd?: string(name='period_end', example='2021-10-14'),
    periodStart?: string(name='period_start', example='2021-10-13'),
    scrollId?: string(name='scroll_id'),
    totalNum?: long(name='total_num', example='2695'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model CarBillSettlementQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CarBillSettlementQueryResponseBody(name='body'),
}

/**
 * @summary 查询用车记账数据
 *
 * @param request CarBillSettlementQueryRequest
 * @param headers CarBillSettlementQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CarBillSettlementQueryResponse
 */
async function carBillSettlementQueryWithOptions(request: CarBillSettlementQueryRequest, headers: CarBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): CarBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billBatch)) {
    query['bill_batch'] = request.billBatch;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }
  if (!Util.isUnset(request.scrollId)) {
    query['scroll_id'] = request.scrollId;
  }
  if (!Util.isUnset(request.scrollMod)) {
    query['scroll_mod'] = request.scrollMod;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CarBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/car/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询用车记账数据
 *
 * @param request CarBillSettlementQueryRequest
 * @return CarBillSettlementQueryResponse
 */
async function carBillSettlementQuery(request: CarBillSettlementQueryRequest): CarBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CarBillSettlementQueryHeaders{};
  return carBillSettlementQueryWithOptions(request, headers, runtime);
}

model CarOrderListQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CarOrderListQueryRequest {
  allApply?: boolean(name='all_apply', example='false'),
  applyId?: long(name='apply_id', example='117429516'),
  departId?: string(name='depart_id', example='departId'),
  endTime?: string(name='end_time', example='2022-07-01 00:00:00'),
  page?: int32(name='page', example='1'),
  pageSize?: int32(name='page_size', example='10'),
  startTime?: string(name='start_time', example='2022-07-01 00:00:00'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', example='cs2NH_n1QTC3R6hB9m-BAQ08221658314273'),
  updateEndTime?: string(name='update_end_time', example='2022-07-01 00:00:00'),
  updateStartTime?: string(name='update_start_time', example='2022-07-01 00:00:00'),
  userId?: string(name='user_id', example='userId'),
}

model CarOrderListQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: [ 
    {
      applyId?: long(name='apply_id', example='117429516'),
      applyShowId?: string(name='apply_show_id', example='201802031353000525653'),
      btripTitle?: string(name='btrip_title'),
      businessCategory?: string(name='business_category', example='TRAVEL'),
      cancelTime?: string(name='cancel_time', example='2022-07-04T16:13Z'),
      carInfo?: string(name='car_info'),
      carLevel?: int32(name='car_level', example='1'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      costCenterId?: long(name='cost_center_id', example='11376'),
      costCenterName?: string(name='cost_center_name'),
      costCenterNumber?: string(name='cost_center_number', example='CT-134JHK'),
      deptId?: long(name='dept_id'),
      deptName?: string(name='dept_name'),
      driverConfirmTime?: string(name='driver_confirm_time', example='2022-07-04T16:13Z'),
      estimatePrice?: double(name='estimate_price', example='100'),
      fromAddress?: string(name='from_address'),
      fromCityAdCode?: string(name='from_city_ad_code'),
      fromCityName?: string(name='from_city_name'),
      gmtCreate?: string(name='gmt_create', example='2022-07-04T16:13Z'),
      gmtModified?: string(name='gmt_modified', example='2022-07-04T16:13Z'),
      id?: long(name='id', example='3615085'),
      invoiceId?: long(name='invoice_id', example='11876'),
      invoiceTitle?: string(name='invoice_title'),
      isSpecial?: boolean(name='is_special', example='true'),
      memo?: string(name='memo'),
      orderId?: string(name='order_id'),
      orderStatus?: int32(name='order_status'),
      passengerName?: string(name='passenger_name'),
      payTime?: string(name='pay_time', example='2022-07-04T16:13Z'),
      priceInfoList?: [ 
        {
          categoryCode?: int32(name='category_code', example='1'),
          categoryType?: int32(name='category_type', example='1'),
          gmtCreate?: string(name='gmt_create', example='2022-07-04T16:13Z'),
          passengerName?: string(name='passenger_name'),
          payType?: int32(name='pay_type', example='1'),
          personPrice?: double(name='person_price', example='100'),
          price?: double(name='price', example='100'),
          tradeId?: string(name='trade_id', example='8908076767'),
          type?: int32(name='type', example='1'),
        }
      ](name='price_info_list'),
      projectCode?: string(name='project_code', example='P- JI87KK'),
      projectId?: long(name='project_id', example='11546'),
      projectTitle?: string(name='project_title'),
      provider?: int32(name='provider', example='2'),
      publishTime?: string(name='publish_time', example='2022-07-04T16:13Z'),
      realFromAddress?: string(name='real_from_address'),
      realFromCityAdCode?: string(name='real_from_city_ad_code'),
      realFromCityName?: string(name='real_from_city_name'),
      realToAddress?: string(name='real_to_address'),
      realToCityAdCode?: string(name='real_to_city_ad_code'),
      realToCityName?: string(name='real_to_city_name'),
      serviceType?: int32(name='service_type', example='1'),
      specialTypes?: [ string ](name='special_types'),
      takenTime?: string(name='taken_time', example='2022-07-04T16:13Z'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', example='CS-OIPK34H'),
      thirdpartBusinessId?: string(name='thirdpart_business_id'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', example='CS-112JKDF'),
      toAddress?: string(name='to_address'),
      toCityAdCode?: string(name='to_city_ad_code'),
      toCityName?: string(name='to_city_name'),
      travelDistance?: double(name='travel_distance', example='1.2'),
      userAffiliateList?: [ 
        {
          userId?: string(name='user_id', example='11342'),
          userName?: string(name='user_name'),
        }
      ](name='user_affiliate_list'),
      userConfirm?: int32(name='user_confirm', example='1'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='module'),
  pageInfo?: {
    page?: int32(name='page', example='1'),
    pageSize?: int32(name='page_size', example='10'),
    totalNumber?: int32(name='total_number', example='1000'),
  }(name='page_info'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model CarOrderListQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CarOrderListQueryResponseBody(name='body'),
}

/**
 * @summary 查询用车订单列表
 *
 * @param request CarOrderListQueryRequest
 * @param headers CarOrderListQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CarOrderListQueryResponse
 */
async function carOrderListQueryWithOptions(request: CarOrderListQueryRequest, headers: CarOrderListQueryHeaders, runtime: Util.RuntimeOptions): CarOrderListQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.allApply)) {
    query['all_apply'] = request.allApply;
  }
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.departId)) {
    query['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['end_time'] = request.endTime;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['start_time'] = request.startTime;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    query['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.updateEndTime)) {
    query['update_end_time'] = request.updateEndTime;
  }
  if (!Util.isUnset(request.updateStartTime)) {
    query['update_start_time'] = request.updateStartTime;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CarOrderListQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/car/v1/order-list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询用车订单列表
 *
 * @param request CarOrderListQueryRequest
 * @return CarOrderListQueryResponse
 */
async function carOrderListQuery(request: CarOrderListQueryRequest): CarOrderListQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CarOrderListQueryHeaders{};
  return carOrderListQueryWithOptions(request, headers, runtime);
}

model CarOrderQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CarOrderQueryRequest {
  orderId?: long(name='order_id', example='1012000000000000'),
  subOrderId?: long(name='sub_order_id', example='1000000'),
}

model CarOrderQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    carInfo?: {
      businessCategory?: string(name='business_category', example='TRAVEL'),
      cancelTime?: long(name='cancel_time', example='1669274251000'),
      carInfo?: string(name='car_info'),
      carLevel?: int32(name='car_level', example='601'),
      driverCard?: string(name='driver_card'),
      driverConfirmTime?: long(name='driver_confirm_time', example='1669274251000'),
      driverName?: string(name='driver_name'),
      estimatePrice?: long(name='estimate_price', example='2900'),
      fromAddress?: string(name='from_address'),
      fromCityAdCode?: string(name='from_city_ad_code'),
      fromCityName?: string(name='from_city_name'),
      isSpecial?: boolean(name='is_special', example='true'),
      memo?: string(name='memo'),
      payTime?: long(name='pay_time', example='1669274251000'),
      publishTime?: long(name='publish_time', example='1669274251000'),
      realFromAddress?: string(name='real_from_address'),
      realFromCityAdCode?: string(name='real_from_city_ad_code'),
      realFromCityName?: string(name='real_from_city_name'),
      realToAddress?: string(name='real_to_address'),
      realToCityAdCode?: string(name='real_to_city_ad_code'),
      realToCityName?: string(name='real_to_city_name'),
      serviceType?: int32(name='service_type', example='3'),
      specialTypes?: string(name='special_types', example='v_sp_t_1,v_sp_t_2,v_sp_t_3,v_sp_t_4,v_sp_t_5'),
      takenTime?: long(name='taken_time', example='1669274251000'),
      toAddress?: string(name='to_address'),
      toCityAdCode?: string(name='to_city_ad_code'),
      toCityName?: string(name='to_city_name'),
      travelDistance?: string(name='travel_distance', example='12'),
      wayPoints?: [ 
        {
          address?: string(name='address'),
          index?: string(name='index'),
          latitude?: string(name='latitude'),
          longitude?: string(name='longitude'),
        }
      ](name='way_points'),
    }(name='car_info'),
    invoiceInfo?: {
      id?: long(name='id', example='1'),
      title?: string(name='title', example='xxxx'),
    }(name='invoice_info'),
    orderBaseInfo?: {
      applyId?: string(name='apply_id', example='xxxxx'),
      btripCause?: string(name='btrip_cause'),
      btripTitle?: string(name='btrip_title'),
      corpId?: string(name='corp_id', example='xxxxxxxx'),
      corpName?: string(name='corp_name'),
      departId?: string(name='depart_id', example='10101010'),
      departName?: string(name='depart_name'),
      gmtCreate?: long(name='gmt_create', example='1669274251000'),
      gmtModified?: long(name='gmt_modified', example='1669274251000'),
      itineraryId?: string(name='itinerary_id', example='xxxxx'),
      orderId?: long(name='order_id', example='1012000000000000'),
      orderStatus?: int32(name='order_status', example='5'),
      subOrderId?: long(name='sub_order_id', example='100000'),
      thirdDepartId?: string(name='third_depart_id', example='thirdpart_1010101010'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', example='xxxxx'),
      thirdpartBusinessId?: string(name='thirdpart_business_id'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', example='xxxxx'),
      userId?: string(name='user_id', example='xxxxxxxx'),
      userName?: string(name='user_name'),
    }(name='order_base_info'),
    passengerList?: [ 
      {
        costCenterId?: long(name='cost_center_id', example='costId'),
        costCenterName?: string(name='cost_center_name', example='costName'),
        costCenterNumber?: string(name='cost_center_number', example='costNumber'),
        projectCode?: string(name='project_code', example='projectCode1'),
        projectId?: long(name='project_id', example='projectId'),
        projectTitle?: string(name='project_title'),
        thirdpartCostCenterId?: string(name='thirdpart_cost_center_id', example='thirdpartCostId'),
        thirdpartProjectId?: string(name='thirdpart_project_id', example='thirdpartProjectId'),
        userId?: string(name='user_id', example='userId'),
        userName?: string(name='user_name'),
        userType?: int32(name='user_type', example='1'),
      }
    ](name='passenger_list'),
    priceInfoList?: [ 
      {
        categoryCode?: int32(name='category_code', example='1'),
        gmtCreate?: long(name='gmt_create', example='1669274251000'),
        payType?: int32(name='pay_type', example='4'),
        personPrice?: long(name='person_price', example='1000'),
        price?: long(name='price', example='2000'),
        tradeId?: string(name='trade_id', example='1012000000001'),
        type?: int32(name='type', example='1'),
      }
    ](name='price_info_list'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model CarOrderQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CarOrderQueryResponseBody(name='body'),
}

/**
 * @summary 用车订单查询
 *
 * @param request CarOrderQueryRequest
 * @param headers CarOrderQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CarOrderQueryResponse
 */
async function carOrderQueryWithOptions(request: CarOrderQueryRequest, headers: CarOrderQueryHeaders, runtime: Util.RuntimeOptions): CarOrderQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.subOrderId)) {
    query['sub_order_id'] = request.subOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CarOrderQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/car/v1/order`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 用车订单查询
 *
 * @param request CarOrderQueryRequest
 * @return CarOrderQueryResponse
 */
async function carOrderQuery(request: CarOrderQueryRequest): CarOrderQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CarOrderQueryHeaders{};
  return carOrderQueryWithOptions(request, headers, runtime);
}

model CarSceneQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwis'),
}

model CarSceneQueryResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: [ 
    {
      scenarioTemplateId?: string(name='scenarioTemplateId', example='travel'),
      scenarioTemplateName?: string(name='scenarioTemplateName'),
      state?: string(name='state', example='ACTIVATE'),
    }
  ](name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model CarSceneQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CarSceneQueryResponseBody(name='body'),
}

/**
 * @summary 查询企业用车场景
 *
 * @param headers CarSceneQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CarSceneQueryResponse
 */
async function carSceneQueryWithOptions(headers: CarSceneQueryHeaders, runtime: Util.RuntimeOptions): CarSceneQueryResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'CarSceneQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/car/v1/scenes`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询企业用车场景
 *
 * @return CarSceneQueryResponse
 */
async function carSceneQuery(): CarSceneQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CarSceneQueryHeaders{};
  return carSceneQueryWithOptions(headers, runtime);
}

model ChannelCorpCreateHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='aqfrefd2321'),
}

model ChannelCorpCreateRequest {
  administratorName?: string(name='administrator_name', description='This parameter is required.'),
  administratorPhone?: string(name='administrator_phone', description='This parameter is required.', example='18378889782'),
  city?: string(name='city'),
  corpName?: string(name='corp_name', description='This parameter is required.'),
  province?: string(name='province'),
  scope?: int32(name='scope', example='1'),
  thirdCorpId?: string(name='third_corp_id', description='This parameter is required.', example='00001'),
  userId?: string(name='user_id'),
}

model ChannelCorpCreateResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    administratorName?: string(name='administrator_name'),
    administratorPhone?: string(name='administrator_phone', example='18378889782'),
    corpId?: string(name='corp_id', example='dingaa15ca45cba9ee744a5'),
    corpName?: string(name='corp_name'),
    openAgentId?: string(name='open_agent_id', example='open12mplkebufu8701012jq'),
    userId?: string(name='user_id'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model ChannelCorpCreateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChannelCorpCreateResponseBody(name='body'),
}

/**
 * @summary 渠道商创建企业
 *
 * @param request ChannelCorpCreateRequest
 * @param headers ChannelCorpCreateHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ChannelCorpCreateResponse
 */
async function channelCorpCreateWithOptions(request: ChannelCorpCreateRequest, headers: ChannelCorpCreateHeaders, runtime: Util.RuntimeOptions): ChannelCorpCreateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.administratorName)) {
    body['administrator_name'] = request.administratorName;
  }
  if (!Util.isUnset(request.administratorPhone)) {
    body['administrator_phone'] = request.administratorPhone;
  }
  if (!Util.isUnset(request.city)) {
    body['city'] = request.city;
  }
  if (!Util.isUnset(request.corpName)) {
    body['corp_name'] = request.corpName;
  }
  if (!Util.isUnset(request.province)) {
    body['province'] = request.province;
  }
  if (!Util.isUnset(request.scope)) {
    body['scope'] = request.scope;
  }
  if (!Util.isUnset(request.thirdCorpId)) {
    body['third_corp_id'] = request.thirdCorpId;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChannelCorpCreate',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/corp/v1/channelCorps`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 渠道商创建企业
 *
 * @param request ChannelCorpCreateRequest
 * @return ChannelCorpCreateResponse
 */
async function channelCorpCreate(request: ChannelCorpCreateRequest): ChannelCorpCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ChannelCorpCreateHeaders{};
  return channelCorpCreateWithOptions(request, headers, runtime);
}

model CitySearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CitySearchRequest {
  keyword?: string(name='keyword', description='This parameter is required.'),
}

model CitySearchResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    cities?: [ 
      {
        code?: string(name='code', example='330100'),
        name?: string(name='name'),
        region?: int32(name='region', example='0'),
      }
    ](name='cities'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210f079e16603757182131635d866a'),
}

model CitySearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CitySearchResponseBody(name='body'),
}

/**
 * @summary 查询行政区划（市，区）基础数据
 *
 * @param request CitySearchRequest
 * @param headers CitySearchHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CitySearchResponse
 */
async function citySearchWithOptions(request: CitySearchRequest, headers: CitySearchHeaders, runtime: Util.RuntimeOptions): CitySearchResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CitySearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/city/v1/city`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询行政区划（市，区）基础数据
 *
 * @param request CitySearchRequest
 * @return CitySearchResponse
 */
async function citySearch(request: CitySearchRequest): CitySearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CitySearchHeaders{};
  return citySearchWithOptions(request, headers, runtime);
}

model CommonApplyQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CommonApplyQueryRequest {
  applyId?: long(name='apply_id', example='1003366164'),
  bizCategory?: int32(name='biz_category', description='This parameter is required.', example='3'),
  businessInstanceId?: string(name='business_instance_id'),
  userId?: string(name='user_id'),
}

model CommonApplyQueryResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id', example='123'),
    bizCategory?: int32(name='biz_category', example='5'),
    cause?: string(name='cause'),
    corpId?: string(name='corp_id', example='0001A1100000007EX08O'),
    extendValue?: string(name='extend_value'),
    gmtCreate?: string(name='gmt_create', example='2021-03-18T20:26Z'),
    status?: int32(name='status', example='0'),
    thirdpartCorpId?: string(name='thirdpart_corp_id', example='1233'),
    thirdpartId?: string(name='thirdpart_id', example='12344'),
    tripCause?: string(name='trip_cause'),
    userId?: string(name='user_id', example='user1'),
    userName?: string(name='user_name'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model CommonApplyQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CommonApplyQueryResponseBody(name='body'),
}

/**
 * @summary 查询退改审批信息
 *
 * @param request CommonApplyQueryRequest
 * @param headers CommonApplyQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CommonApplyQueryResponse
 */
async function commonApplyQueryWithOptions(request: CommonApplyQueryRequest, headers: CommonApplyQueryHeaders, runtime: Util.RuntimeOptions): CommonApplyQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.bizCategory)) {
    query['biz_category'] = request.bizCategory;
  }
  if (!Util.isUnset(request.businessInstanceId)) {
    query['business_instance_id'] = request.businessInstanceId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CommonApplyQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/common`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询退改审批信息
 *
 * @param request CommonApplyQueryRequest
 * @return CommonApplyQueryResponse
 */
async function commonApplyQuery(request: CommonApplyQueryRequest): CommonApplyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CommonApplyQueryHeaders{};
  return commonApplyQueryWithOptions(request, headers, runtime);
}

model CommonApplySyncHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CommonApplySyncRequest {
  applyId?: long(name='apply_id', description='This parameter is required.', example='1003366164'),
  bizCategory?: int32(name='biz_category', example='3'),
  remark?: string(name='remark'),
  status?: int32(name='status', description='This parameter is required.', example='1'),
  thirdpartyFlowId?: string(name='thirdparty_flow_id', example='asfa'),
  userId?: string(name='user_id', description='This parameter is required.'),
}

model CommonApplySyncResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: boolean(name='module', description='module。', example='{\\\\"list\\\\": [], \\\\"pageSize\\\\": 20, \\\\"pageNo\\\\": 1}'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model CommonApplySyncResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CommonApplySyncResponseBody(name='body'),
}

/**
 * @summary 退改审批结果同步
 *
 * @param request CommonApplySyncRequest
 * @param headers CommonApplySyncHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CommonApplySyncResponse
 */
async function commonApplySyncWithOptions(request: CommonApplySyncRequest, headers: CommonApplySyncHeaders, runtime: Util.RuntimeOptions): CommonApplySyncResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.bizCategory)) {
    query['biz_category'] = request.bizCategory;
  }
  if (!Util.isUnset(request.remark)) {
    query['remark'] = request.remark;
  }
  if (!Util.isUnset(request.status)) {
    query['status'] = request.status;
  }
  if (!Util.isUnset(request.thirdpartyFlowId)) {
    query['thirdparty_flow_id'] = request.thirdpartyFlowId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CommonApplySync',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/syn-common`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 退改审批结果同步
 *
 * @param request CommonApplySyncRequest
 * @return CommonApplySyncResponse
 */
async function commonApplySync(request: CommonApplySyncRequest): CommonApplySyncResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CommonApplySyncHeaders{};
  return commonApplySyncWithOptions(request, headers, runtime);
}

model CooperatorFlightBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model CooperatorFlightBillSettlementQueryRequest {
  billBatch?: string(name='bill_batch'),
  cooperatorId?: string(name='cooperator_id', example='cooperator_alibtrip'),
  orderId?: long(name='order_id'),
  pageNo?: int32(name='page_no', description='This parameter is required.', example='1'),
  pageSize?: int32(name='page_size', description='This parameter is required.', example='100'),
  periodEnd?: string(name='period_end', example='2021-10-02'),
  periodStart?: string(name='period_start', example='2021-10-01'),
  scrollId?: string(name='scroll_id'),
  scrollMod?: boolean(name='scroll_mod'),
}

model CooperatorFlightBillSettlementQueryResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category', example='1'),
    corpId?: string(name='corp_id', example='123'),
    items?: [ 
      {
        adjustTime?: string(name='adjust_time'),
        advanceDay?: int32(name='advance_day', example='1'),
        airlineCorpCode?: string(name='airline_corp_code', example='AB'),
        airlineCorpName?: string(name='airline_corp_name'),
        alipayId?: string(name='alipay_id', example='123aaa'),
        alipayTradeNo?: string(name='alipay_trade_no', example='a123'),
        applyArrCityCode?: string(name='apply_arr_city_code', example='CD'),
        applyArrCityName?: string(name='apply_arr_city_name'),
        applyDepCityCode?: string(name='apply_dep_city_code', example='AB'),
        applyDepCityName?: string(name='apply_dep_city_name'),
        applyExtendField?: string(name='apply_extend_field'),
        applyId?: string(name='apply_id', example='1004430880'),
        approverEmail?: string(name='approver_email'),
        approverId?: string(name='approver_id'),
        approverName?: string(name='approver_name'),
        arrAirportCode?: string(name='arr_airport_code', example='CKG'),
        arrCity?: string(name='arr_city'),
        arrCityCode?: string(name='arr_city_code', example='CKG'),
        arrDate?: string(name='arr_date', example='2023-01-01'),
        arrStation?: string(name='arr_station'),
        arrTime?: string(name='arr_time', example='12:00:00'),
        baseLocation?: string(name='base_location'),
        billRecordTime?: string(name='bill_record_time', example='2023-01-01 00:00:00'),
        bookChannel?: string(name='book_channel'),
        bookMode?: string(name='book_mode'),
        bookTime?: string(name='book_time', example='2023-01-01 00:00:00'),
        bookerId?: string(name='booker_id', example='1234'),
        bookerJobNo?: string(name='booker_job_no', example='A1234'),
        bookerName?: string(name='booker_name'),
        btripCouponFee?: double(name='btrip_coupon_fee', example='100.0'),
        buildFee?: double(name='build_fee', example='50.0'),
        businessTripResult?: string(name='business_trip_result'),
        cabin?: string(name='cabin', example='A'),
        cabinClass?: string(name='cabin_class', example='YS'),
        cabinClassCode?: string(name='cabin_class_code'),
        capitalDirection?: string(name='capital_direction'),
        cascadeDepartment?: string(name='cascade_department'),
        categoryDesc?: string(name='category_desc'),
        changeFee?: double(name='change_fee', example='100.0'),
        changeResult?: string(name='change_result'),
        cooperatorBillCode?: string(name='cooperator_bill_code', example='IN240102113438277278'),
        cooperatorName?: string(name='cooperator_name'),
        cooperatorOrderId?: string(name='cooperator_order_id', example='DF24020163776907739'),
        corpPayOrderFee?: double(name='corp_pay_order_fee', example='100.0'),
        corpSettlePrice?: double(name='corp_settle_price', example='100.0'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number', example='cs1'),
        costDepartment?: string(name='cost_department'),
        coupon?: double(name='coupon', example='0.0'),
        customContent?: string(name='custom_content'),
        depAirportCode?: string(name='dep_airport_code', example='JHG'),
        depCityCode?: string(name='dep_city_code', example='TAO'),
        department?: string(name='department'),
        departmentId?: string(name='department_id', example='1112'),
        deptCity?: string(name='dept_city'),
        deptDate?: string(name='dept_date', example='2023-01-01'),
        deptStation?: string(name='dept_station'),
        deptTime?: string(name='dept_time', example='09:30:00'),
        discount?: string(name='discount', example='1'),
        exceedReason?: string(name='exceed_reason'),
        feeType?: string(name='fee_type'),
        feeTypeDesc?: string(name='fee_type_desc'),
        flightNo?: string(name='flight_no', example='CZ3590'),
        flightTripType?: string(name='flight_trip_type'),
        foreignersTag?: string(name='foreigners_tag'),
        index?: string(name='index', example='1'),
        insOrderId?: string(name='ins_order_id', example='111'),
        insuranceFee?: double(name='insurance_fee', example='0.0'),
        insuranceNumber?: string(name='insurance_number', example='1234A'),
        invoiceTitle?: string(name='invoice_title'),
        itemType?: string(name='item_type'),
        itineraryNum?: string(name='itinerary_num', example='6666666666'),
        itineraryPrice?: double(name='itinerary_price', example='100.0'),
        location?: string(name='location'),
        mappingCompanyCode?: string(name='mapping_company_code'),
        mileage?: int32(name='mileage', example='100'),
        mostDifferenceDeptTime?: string(name='most_difference_dept_time', example='2023-01-01 00:00:00'),
        mostDifferenceDiscount?: string(name='most_difference_discount', example='1'),
        mostDifferenceFlightNo?: string(name='most_difference_flight_no', example='123'),
        mostDifferencePrice?: double(name='most_difference_price', example='100.0'),
        mostDifferenceReason?: string(name='most_difference_reason'),
        mostPrice?: double(name='most_price', example='100.0'),
        negotiationCouponFee?: double(name='negotiation_coupon_fee', example='0.0'),
        oilFee?: double(name='oil_fee', example='30.0'),
        orderId?: string(name='order_id', example='3137168772101111000'),
        orderStatusDesc?: string(name='order_status_desc'),
        orderTicketNo?: string(name='order_ticket_no'),
        overApplyId?: string(name='over_apply_id', example='123'),
        paymentDepartmentId?: string(name='payment_department_id', example='123'),
        paymentDepartmentName?: string(name='payment_department_name'),
        personSettlePrice?: double(name='person_settle_price', example='100.0'),
        position?: string(name='position'),
        positionLevel?: string(name='position_level'),
        preBookTip?: string(name='pre_book_tip'),
        primaryId?: long(name='primary_id', example='60399513'),
        processorOaCode?: string(name='processor_oa_code'),
        projectCode?: string(name='project_code', example='acs'),
        projectName?: string(name='project_name'),
        refundFee?: double(name='refund_fee', example='100.0'),
        refundResult?: string(name='refund_result'),
        refundUpgradeCost?: double(name='refund_upgrade_cost', example='20.0'),
        remark?: string(name='remark'),
        repeatRefund?: string(name='repeat_refund'),
        sealPrice?: double(name='seal_price', example='100.0'),
        serviceFee?: double(name='service_fee', example='0.0'),
        settleTypeDesc?: string(name='settle_type_desc'),
        settlementFee?: double(name='settlement_fee', example='200.0'),
        settlementGrantFee?: double(name='settlement_grant_fee', example='0.0'),
        settlementTime?: string(name='settlement_time', example='2023-01-01 00:00:00'),
        settlementType?: string(name='settlement_type'),
        sio?: string(name='sio'),
        status?: int32(name='status', example='0'),
        statusDesc?: string(name='status_desc'),
        subOrderId?: string(name='sub_order_id', example='169551103'),
        taxRate?: string(name='tax_rate', example='9%'),
        thirdInvoiceId?: string(name='third_invoice_id', example='cs2'),
        thirdItineraryId?: string(name='third_itinerary_id', example='11'),
        ticketId?: string(name='ticket_id', example='123-2345'),
        trade?: string(name='trade', example='1'),
        tradeActionDesc?: string(name='trade_action_desc'),
        travelerEmail?: string(name='traveler_email'),
        travelerId?: string(name='traveler_id', example='A1234'),
        travelerJobNo?: string(name='traveler_job_no', example='A1234'),
        travelerMemberType?: string(name='traveler_member_type'),
        travelerMemberTypeName?: string(name='traveler_member_type_name'),
        travelerName?: string(name='traveler_name'),
        upgradeCost?: double(name='upgrade_cost', example='100.0'),
        voucherType?: int32(name='voucher_type', example='11'),
        voucherTypeDesc?: string(name='voucher_type_desc'),
        voyageName?: string(name='voyage_name'),
      }
    ](name='items'),
    periodEnd?: string(name='period_end', example='2022-11-02'),
    periodStart?: string(name='period_start', example='2021-10-13'),
    scrollId?: string(name='scroll_id'),
    totalSize?: long(name='total_size', example='30'),
  }(name='module'),
  requestId?: string(name='requestId', example='2103ad1216872266815642815d7e03'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='trace_id', example='213e20c816937929648732715e16f1'),
}

model CooperatorFlightBillSettlementQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CooperatorFlightBillSettlementQueryResponseBody(name='body'),
}

/**
 * @summary 查询服务商机票记账数据
 *
 * @param request CooperatorFlightBillSettlementQueryRequest
 * @param headers CooperatorFlightBillSettlementQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CooperatorFlightBillSettlementQueryResponse
 */
async function cooperatorFlightBillSettlementQueryWithOptions(request: CooperatorFlightBillSettlementQueryRequest, headers: CooperatorFlightBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): CooperatorFlightBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billBatch)) {
    query['bill_batch'] = request.billBatch;
  }
  if (!Util.isUnset(request.cooperatorId)) {
    query['cooperator_id'] = request.cooperatorId;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }
  if (!Util.isUnset(request.scrollId)) {
    query['scroll_id'] = request.scrollId;
  }
  if (!Util.isUnset(request.scrollMod)) {
    query['scroll_mod'] = request.scrollMod;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CooperatorFlightBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/cooperator-flight/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询服务商机票记账数据
 *
 * @param request CooperatorFlightBillSettlementQueryRequest
 * @return CooperatorFlightBillSettlementQueryResponse
 */
async function cooperatorFlightBillSettlementQuery(request: CooperatorFlightBillSettlementQueryRequest): CooperatorFlightBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CooperatorFlightBillSettlementQueryHeaders{};
  return cooperatorFlightBillSettlementQueryWithOptions(request, headers, runtime);
}

model CooperatorHotelBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model CooperatorHotelBillSettlementQueryRequest {
  billBatch?: string(name='bill_batch'),
  cooperatorId?: string(name='cooperator_id', example='cooperator_alibtrip'),
  orderId?: long(name='order_id'),
  pageNo?: int32(name='page_no', description='This parameter is required.', example='1'),
  pageSize?: int32(name='page_size', description='This parameter is required.', example='100'),
  periodEnd?: string(name='period_end', example='2021-10-02'),
  periodStart?: string(name='period_start', example='2021-10-01'),
  scrollId?: string(name='scroll_id'),
  scrollMod?: boolean(name='scroll_mod'),
}

model CooperatorHotelBillSettlementQueryResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category', example='2'),
    corpId?: string(name='corp_id', example='open12ilgngll7us7v10Bm5UlMg700'),
    items?: [ 
      {
        adjustTime?: string(name='adjust_time'),
        alipayTradeNo?: string(name='alipay_trade_no', example='124'),
        applyArrCityCode?: string(name='apply_arr_city_code', example='123'),
        applyArrCityName?: string(name='apply_arr_city_name'),
        applyDepCityCode?: string(name='apply_dep_city_code', example='123'),
        applyDepCityName?: string(name='apply_dep_city_name'),
        applyExtendField?: string(name='apply_extend_field'),
        applyId?: string(name='apply_id', example='sdasdas123324'),
        approverEmail?: string(name='approver_email'),
        approverId?: string(name='approver_id'),
        approverName?: string(name='approver_name'),
        averageNights?: double(name='average_nights', example='1.0'),
        baseLocation?: string(name='base_location'),
        billRecordTime?: string(name='bill_record_time', example='2023-01-01 00:00:00'),
        bookChannel?: string(name='book_channel'),
        bookMode?: string(name='book_mode'),
        bookReason?: string(name='book_reason'),
        bookTime?: string(name='book_time', example='2023-01-01 00:00:00'),
        bookerId?: string(name='booker_id', example='123'),
        bookerJobNo?: string(name='booker_job_no', example='zs123'),
        bookerName?: string(name='booker_name'),
        brandGroup?: string(name='brand_group'),
        brandName?: string(name='brand_name'),
        businessTripResult?: string(name='business_trip_result'),
        capitalDirection?: string(name='capital_direction'),
        cascadeDepartment?: string(name='cascade_department'),
        categoryDesc?: string(name='category_desc'),
        checkInDate?: string(name='check_in_date', example='2024-02-13'),
        checkoutDate?: string(name='checkout_date', example='2024-02-15'),
        city?: string(name='city'),
        cityCode?: string(name='city_code', example='330100'),
        cityCounty?: string(name='city_county'),
        cityCountyCode?: int32(name='city_county_code', example='330100'),
        cooperatorBillCode?: string(name='cooperator_bill_code', example='IN240102113438277278'),
        cooperatorName?: string(name='cooperator_name'),
        cooperatorOrderId?: string(name='cooperator_order_id', example='HO20240125162800280928'),
        corpRefundFee?: double(name='corp_refund_fee', example='0.1'),
        corpTotalFee?: double(name='corp_total_fee', example='100.0'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number', example='123'),
        costDepartment?: string(name='cost_department'),
        customContent?: string(name='custom_content'),
        department?: string(name='department'),
        departmentId?: string(name='department_id', example='123'),
        exceedReason?: string(name='exceed_reason'),
        feeType?: string(name='fee_type'),
        feeTypeDesc?: string(name='fee_type_desc'),
        fees?: double(name='fees', example='10.0'),
        fines?: double(name='fines', example='1.0'),
        foreignersTag?: string(name='foreigners_tag'),
        fuPointFee?: double(name='fu_point_fee', example='10.0'),
        hotelName?: string(name='hotel_name'),
        index?: string(name='index', example='1'),
        invoiceTitle?: string(name='invoice_title'),
        isEarlyDeparture?: string(name='is_early_departure'),
        isNegotiation?: string(name='is_negotiation'),
        isShareStr?: string(name='is_share_str'),
        location?: string(name='location'),
        mappingCompanyCode?: string(name='mapping_company_code'),
        nights?: int32(name='nights', example='2'),
        orderId?: string(name='order_id', example='3137168772101111000'),
        orderPrice?: double(name='order_price', example='100.0'),
        orderStatusDesc?: string(name='order_status_desc'),
        orderType?: string(name='order_type'),
        overApplyId?: string(name='over_apply_id', example='123'),
        paymentDepartmentId?: string(name='payment_department_id', example='123'),
        paymentDepartmentName?: string(name='payment_department_name'),
        personRefundFee?: double(name='person_refund_fee', example='0.1'),
        personSettlePrice?: double(name='person_settle_price', example='10.0'),
        position?: string(name='position'),
        positionLevel?: string(name='position_level'),
        primaryId?: long(name='primary_id', example='72328485'),
        processorOaCode?: string(name='processor_oa_code'),
        projectCode?: string(name='project_code', example='acs'),
        projectName?: string(name='project_name'),
        promotionFee?: double(name='promotion_fee', example='0.0'),
        remark?: string(name='remark'),
        reserveRule?: int32(name='reserve_rule', example='10'),
        roomNo?: string(name='room_no'),
        roomNumber?: int32(name='room_number', example='1'),
        roomPrice?: double(name='room_price', example='105.0'),
        roomType?: string(name='room_type'),
        serviceFee?: double(name='service_fee', example='5.0'),
        settleTypeDesc?: string(name='settle_type_desc'),
        settlementFee?: double(name='settlement_fee', example='110.0'),
        settlementGrantFee?: double(name='settlement_grant_fee', example='0.0'),
        settlementTime?: string(name='settlement_time', example='2023-01-01 00:00:00'),
        settlementType?: string(name='settlement_type'),
        sio?: string(name='sio'),
        star?: string(name='star'),
        status?: int32(name='status', example='2'),
        statusDesc?: string(name='status_desc'),
        subOrderId?: string(name='sub_order_id', example='166564408'),
        taxRate?: string(name='tax_rate', example='9%'),
        thirdInvoiceId?: string(name='third_invoice_id', example='1'),
        thirdItineraryId?: string(name='third_itinerary_id', example='123'),
        totalNights?: int32(name='total_nights', example='2'),
        tradeActionDesc?: string(name='trade_action_desc'),
        travelerEmail?: string(name='traveler_email'),
        travelerId?: string(name='traveler_id', example='123'),
        travelerJobNo?: string(name='traveler_job_no', example='zs123'),
        travelerMemberType?: string(name='traveler_member_type'),
        travelerMemberTypeName?: string(name='traveler_member_type_name'),
        travelerName?: string(name='traveler_name'),
        voucherType?: int32(name='voucher_type', example='1'),
        voucherTypeDesc?: string(name='voucher_type_desc'),
      }
    ](name='items'),
    periodEnd?: string(name='period_end', example='2021-10-14'),
    periodStart?: string(name='period_start', example='2021-10-13'),
    scrollId?: string(name='scroll_id'),
    totalSize?: long(name='total_size', example='30'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model CooperatorHotelBillSettlementQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CooperatorHotelBillSettlementQueryResponseBody(name='body'),
}

/**
 * @summary 查询服务商酒店记账数据
 *
 * @param request CooperatorHotelBillSettlementQueryRequest
 * @param headers CooperatorHotelBillSettlementQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CooperatorHotelBillSettlementQueryResponse
 */
async function cooperatorHotelBillSettlementQueryWithOptions(request: CooperatorHotelBillSettlementQueryRequest, headers: CooperatorHotelBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): CooperatorHotelBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billBatch)) {
    query['bill_batch'] = request.billBatch;
  }
  if (!Util.isUnset(request.cooperatorId)) {
    query['cooperator_id'] = request.cooperatorId;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }
  if (!Util.isUnset(request.scrollId)) {
    query['scroll_id'] = request.scrollId;
  }
  if (!Util.isUnset(request.scrollMod)) {
    query['scroll_mod'] = request.scrollMod;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CooperatorHotelBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/cooperator-hotel/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询服务商酒店记账数据
 *
 * @param request CooperatorHotelBillSettlementQueryRequest
 * @return CooperatorHotelBillSettlementQueryResponse
 */
async function cooperatorHotelBillSettlementQuery(request: CooperatorHotelBillSettlementQueryRequest): CooperatorHotelBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CooperatorHotelBillSettlementQueryHeaders{};
  return cooperatorHotelBillSettlementQueryWithOptions(request, headers, runtime);
}

model CooperatorHotelEventPushHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model CooperatorHotelEventPushRequest {
  changeOrderStatus?: int32(name='change_order_status', example='11'),
  changeOrderStatusDesc?: string(name='change_order_status_desc'),
  cooperatorOrderId?: string(name='cooperator_order_id', description='This parameter is required.', example='coop_123456'),
  event?: string(name='event', description='This parameter is required.', example='USER_LEAVE'),
  eventDesc?: string(name='event_desc'),
  eventTime?: string(name='event_time', description='This parameter is required.', example='204-09-01 10:55:20'),
  orderId?: string(name='order_id', description='This parameter is required.', example='123456'),
}

model CooperatorHotelEventPushResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: boolean(name='module', example='true'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
}

model CooperatorHotelEventPushResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CooperatorHotelEventPushResponseBody(name='body'),
}

/**
 * @summary 酒店订单事件推送
 *
 * @param request CooperatorHotelEventPushRequest
 * @param headers CooperatorHotelEventPushHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CooperatorHotelEventPushResponse
 */
async function cooperatorHotelEventPushWithOptions(request: CooperatorHotelEventPushRequest, headers: CooperatorHotelEventPushHeaders, runtime: Util.RuntimeOptions): CooperatorHotelEventPushResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.changeOrderStatus)) {
    body['change_order_status'] = request.changeOrderStatus;
  }
  if (!Util.isUnset(request.changeOrderStatusDesc)) {
    body['change_order_status_desc'] = request.changeOrderStatusDesc;
  }
  if (!Util.isUnset(request.cooperatorOrderId)) {
    body['cooperator_order_id'] = request.cooperatorOrderId;
  }
  if (!Util.isUnset(request.event)) {
    body['event'] = request.event;
  }
  if (!Util.isUnset(request.eventDesc)) {
    body['event_desc'] = request.eventDesc;
  }
  if (!Util.isUnset(request.eventTime)) {
    body['event_time'] = request.eventTime;
  }
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CooperatorHotelEventPush',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/coop-hotel/v1/orders/events`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 酒店订单事件推送
 *
 * @param request CooperatorHotelEventPushRequest
 * @return CooperatorHotelEventPushResponse
 */
async function cooperatorHotelEventPush(request: CooperatorHotelEventPushRequest): CooperatorHotelEventPushResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CooperatorHotelEventPushHeaders{};
  return cooperatorHotelEventPushWithOptions(request, headers, runtime);
}

model CooperatorSyncPayStatusHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwis'),
}

model CooperatorSyncPayStatusRequest {
  cooperatorOrderId?: string(name='cooperator_order_id', description='This parameter is required.', example='1234'),
  cooperatorPayNo?: string(name='cooperator_pay_no', description='This parameter is required.', example='12345'),
  orderId?: string(name='order_id', description='This parameter is required.', example='1017018197205925373'),
  payStatus?: string(name='pay_status', description='This parameter is required.', example='SUCCESS'),
  payTime?: long(name='pay_time', description='This parameter is required.', example='1726022215000'),
}

model CooperatorSyncPayStatusResponseBody = {
  code?: string(name='code', example='System.Error'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='false'),
}

model CooperatorSyncPayStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CooperatorSyncPayStatusResponseBody(name='body'),
}

/**
 * @summary 个人支付结果推送
 *
 * @param request CooperatorSyncPayStatusRequest
 * @param headers CooperatorSyncPayStatusHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CooperatorSyncPayStatusResponse
 */
async function cooperatorSyncPayStatusWithOptions(request: CooperatorSyncPayStatusRequest, headers: CooperatorSyncPayStatusHeaders, runtime: Util.RuntimeOptions): CooperatorSyncPayStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cooperatorOrderId)) {
    body['cooperator_order_id'] = request.cooperatorOrderId;
  }
  if (!Util.isUnset(request.cooperatorPayNo)) {
    body['cooperator_pay_no'] = request.cooperatorPayNo;
  }
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.payStatus)) {
    body['pay_status'] = request.payStatus;
  }
  if (!Util.isUnset(request.payTime)) {
    body['pay_time'] = request.payTime;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CooperatorSyncPayStatus',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/coop-pay/v1/cashiers/status`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 个人支付结果推送
 *
 * @param request CooperatorSyncPayStatusRequest
 * @return CooperatorSyncPayStatusResponse
 */
async function cooperatorSyncPayStatus(request: CooperatorSyncPayStatusRequest): CooperatorSyncPayStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CooperatorSyncPayStatusHeaders{};
  return cooperatorSyncPayStatusWithOptions(request, headers, runtime);
}

model CorpAuthLinkInfoQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    linkCorps?: [ 
      {
        corpName?: string(name='corp_name'),
        openCorpId?: string(name='open_corp_id'),
        trueCorpId?: string(name='true_corp_id'),
      }
    ](name='link_corps'),
    orgCorp?: {
      corpName?: string(name='corp_name'),
      openCorpId?: string(name='open_corp_id'),
      trueCorpId?: string(name='true_corp_id'),
    }(name='org_corp'),
  }(name='module'),
  requestId?: string(name='requestId'),
  traceId?: string(name='traceId'),
}

model CorpAuthLinkInfoQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CorpAuthLinkInfoQueryResponseBody(name='body'),
}

/**
 * @summary 获取关联可调用企业接口
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CorpAuthLinkInfoQueryResponse
 */
async function corpAuthLinkInfoQueryWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): CorpAuthLinkInfoQueryResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CorpAuthLinkInfoQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/corp-authority-link/v1/info`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取关联可调用企业接口
 *
 * @return CorpAuthLinkInfoQueryResponse
 */
async function corpAuthLinkInfoQuery(): CorpAuthLinkInfoQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return corpAuthLinkInfoQueryWithOptions(headers, runtime);
}

model CorpTokenHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripAccessToken?: string(name='x-acs-btrip-access-token', example='vf9_bvla0qs'),
}

model CorpTokenRequest {
  appSecret?: string(name='app_secret', example='Z2FyYmE1YTZjMDAwTixJU1M5LnZlLXtMO3FKbiYqJSM'),
  corpId?: string(name='corp_id', description='This parameter is required.', example='open324dfsdafsgcxvxv'),
  type?: int32(name='type', description='This parameter is required.', example='0'),
}

model CorpTokenResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  data?: {
    expire?: long(name='expire', example='70000'),
    token?: string(name='token', example='37j76df'),
  }(name='data'),
  message?: string(name='message'),
  module?: {
    expire?: long(name='expire', example='70000'),
    start?: long(name='start', example='1635744378301'),
    token?: string(name='token', example='37j76df'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', description='是否成功', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model CorpTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CorpTokenResponseBody(name='body'),
}

/**
 * @summary 换取CorpToken接口
 *
 * @param request CorpTokenRequest
 * @param headers CorpTokenHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CorpTokenResponse
 */
async function corpTokenWithOptions(request: CorpTokenRequest, headers: CorpTokenHeaders, runtime: Util.RuntimeOptions): CorpTokenResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.appSecret)) {
    query['app_secret'] = request.appSecret;
  }
  if (!Util.isUnset(request.corpId)) {
    query['corp_id'] = request.corpId;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripAccessToken)) {
    realHeaders['x-acs-btrip-access-token'] = Util.toJSONString(headers.xAcsBtripAccessToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CorpToken',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/btrip-open-auth/v1/corp-token/action/take`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 换取CorpToken接口
 *
 * @param request CorpTokenRequest
 * @return CorpTokenResponse
 */
async function corpToken(request: CorpTokenRequest): CorpTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CorpTokenHeaders{};
  return corpTokenWithOptions(request, headers, runtime);
}

model CostCenterDeleteHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CostCenterDeleteRequest {
  thirdpartId?: string(name='thirdpart_id', description='This parameter is required.', example='340049'),
}

model CostCenterDeleteResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model CostCenterDeleteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CostCenterDeleteResponseBody(name='body'),
}

/**
 * @summary 删除成本中心
 *
 * @param request CostCenterDeleteRequest
 * @param headers CostCenterDeleteHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CostCenterDeleteResponse
 */
async function costCenterDeleteWithOptions(request: CostCenterDeleteRequest, headers: CostCenterDeleteHeaders, runtime: Util.RuntimeOptions): CostCenterDeleteResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.thirdpartId)) {
    query['thirdpart_id'] = request.thirdpartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CostCenterDelete',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/delete-costcenter`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除成本中心
 *
 * @param request CostCenterDeleteRequest
 * @return CostCenterDeleteResponse
 */
async function costCenterDelete(request: CostCenterDeleteRequest): CostCenterDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CostCenterDeleteHeaders{};
  return costCenterDeleteWithOptions(request, headers, runtime);
}

model CostCenterModifyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CostCenterModifyRequest {
  alipayNo?: string(name='alipay_no', example='a@alipay.com'),
  disable?: long(name='disable'),
  number?: string(name='number', example='12345'),
  scope?: long(name='scope', description='This parameter is required.', example='1'),
  thirdpartId?: string(name='thirdpart_id', description='This parameter is required.', example='340049'),
  title?: string(name='title', description='This parameter is required.'),
}

model CostCenterModifyResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model CostCenterModifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CostCenterModifyResponseBody(name='body'),
}

/**
 * @summary 修改成本中心
 *
 * @param request CostCenterModifyRequest
 * @param headers CostCenterModifyHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CostCenterModifyResponse
 */
async function costCenterModifyWithOptions(request: CostCenterModifyRequest, headers: CostCenterModifyHeaders, runtime: Util.RuntimeOptions): CostCenterModifyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alipayNo)) {
    body['alipay_no'] = request.alipayNo;
  }
  if (!Util.isUnset(request.disable)) {
    body['disable'] = request.disable;
  }
  if (!Util.isUnset(request.number)) {
    body['number'] = request.number;
  }
  if (!Util.isUnset(request.scope)) {
    body['scope'] = request.scope;
  }
  if (!Util.isUnset(request.thirdpartId)) {
    body['thirdpart_id'] = request.thirdpartId;
  }
  if (!Util.isUnset(request.title)) {
    body['title'] = request.title;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CostCenterModify',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/modify-costcenter`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改成本中心
 *
 * @param request CostCenterModifyRequest
 * @return CostCenterModifyResponse
 */
async function costCenterModify(request: CostCenterModifyRequest): CostCenterModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CostCenterModifyHeaders{};
  return costCenterModifyWithOptions(request, headers, runtime);
}

model CostCenterQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CostCenterQueryRequest {
  disable?: long(name='disable'),
  needOrgEntity?: boolean(name='need_org_entity', example='false'),
  thirdpartId?: string(name='thirdpart_id', example='cost1'),
  title?: string(name='title'),
  userId?: string(name='user_id', example='user1'),
}

model CostCenterQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: [ 
    {
      alipayNo?: string(name='alipay_no', example='a@alipay.com'),
      corpId?: string(name='corp_id', example='ding12345678'),
      disable?: long(name='disable'),
      entityDOS?: [ 
        {
          corpId?: string(name='corp_id', example='ding1234567'),
          entityId?: string(name='entity_id', example='12345'),
          entityType?: string(name='entity_type', example='1'),
          name?: string(name='name', example='default_bus'),
          userNum?: int32(name='user_num', example='10'),
        }
      ](name='entity_d_o_s'),
      id?: long(name='id', example='7232'),
      number?: string(name='number', example='123456'),
      ruleCode?: long(name='rule_code', description='rule code', example='500578154'),
      scope?: long(name='scope', example='1'),
      thirdpartId?: string(name='thirdpart_id', example='1'),
      title?: string(name='title'),
    }
  ](name='module'),
  morePage?: boolean(name='more_page', example='true'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model CostCenterQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CostCenterQueryResponseBody(name='body'),
}

/**
 * @summary 查看成本中心
 *
 * @param request CostCenterQueryRequest
 * @param headers CostCenterQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CostCenterQueryResponse
 */
async function costCenterQueryWithOptions(request: CostCenterQueryRequest, headers: CostCenterQueryHeaders, runtime: Util.RuntimeOptions): CostCenterQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.disable)) {
    query['disable'] = request.disable;
  }
  if (!Util.isUnset(request.needOrgEntity)) {
    query['need_org_entity'] = request.needOrgEntity;
  }
  if (!Util.isUnset(request.thirdpartId)) {
    query['thirdpart_id'] = request.thirdpartId;
  }
  if (!Util.isUnset(request.title)) {
    query['title'] = request.title;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CostCenterQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/costcenter`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看成本中心
 *
 * @param request CostCenterQueryRequest
 * @return CostCenterQueryResponse
 */
async function costCenterQuery(request: CostCenterQueryRequest): CostCenterQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CostCenterQueryHeaders{};
  return costCenterQueryWithOptions(request, headers, runtime);
}

model CostCenterSaveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CostCenterSaveRequest {
  alipayNo?: string(name='alipay_no', example='a@alipay.com'),
  disable?: long(name='disable'),
  number?: string(name='number', example='12345'),
  scope?: long(name='scope', description='This parameter is required.', example='1'),
  thirdpartId?: string(name='thirdpart_id', description='This parameter is required.', example='340049'),
  title?: string(name='title', description='This parameter is required.'),
}

model CostCenterSaveResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    id?: long(name='id', example='17690'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model CostCenterSaveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CostCenterSaveResponseBody(name='body'),
}

/**
 * @summary 保存成本中心
 *
 * @param request CostCenterSaveRequest
 * @param headers CostCenterSaveHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CostCenterSaveResponse
 */
async function costCenterSaveWithOptions(request: CostCenterSaveRequest, headers: CostCenterSaveHeaders, runtime: Util.RuntimeOptions): CostCenterSaveResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alipayNo)) {
    body['alipay_no'] = request.alipayNo;
  }
  if (!Util.isUnset(request.disable)) {
    body['disable'] = request.disable;
  }
  if (!Util.isUnset(request.number)) {
    body['number'] = request.number;
  }
  if (!Util.isUnset(request.scope)) {
    body['scope'] = request.scope;
  }
  if (!Util.isUnset(request.thirdpartId)) {
    body['thirdpart_id'] = request.thirdpartId;
  }
  if (!Util.isUnset(request.title)) {
    body['title'] = request.title;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CostCenterSave',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/save-costcenter`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 保存成本中心
 *
 * @param request CostCenterSaveRequest
 * @return CostCenterSaveResponse
 */
async function costCenterSave(request: CostCenterSaveRequest): CostCenterSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CostCenterSaveHeaders{};
  return costCenterSaveWithOptions(request, headers, runtime);
}

model CreateCustomRoleHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model CreateCustomRoleRequest {
  roleId?: string(name='role_id', description='This parameter is required.', example='123abc'),
  roleName?: string(name='role_name', description='This parameter is required.'),
}

model CreateCustomRoleResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model CreateCustomRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustomRoleResponseBody(name='body'),
}

/**
 * @summary 创建企业自定义角色
 *
 * @param request CreateCustomRoleRequest
 * @param headers CreateCustomRoleHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCustomRoleResponse
 */
async function createCustomRoleWithOptions(request: CreateCustomRoleRequest, headers: CreateCustomRoleHeaders, runtime: Util.RuntimeOptions): CreateCustomRoleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.roleId)) {
    body['role_id'] = request.roleId;
  }
  if (!Util.isUnset(request.roleName)) {
    body['role_name'] = request.roleName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateCustomRole',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/role/v1/customRoles/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建企业自定义角色
 *
 * @param request CreateCustomRoleRequest
 * @return CreateCustomRoleResponse
 */
async function createCustomRole(request: CreateCustomRoleRequest): CreateCustomRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateCustomRoleHeaders{};
  return createCustomRoleWithOptions(request, headers, runtime);
}

model CreateSubCorpHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model CreateSubCorpRequest {
  outerCorpId?: string(name='outer_corp_id', description='This parameter is required.', example='corp123'),
  outerCorpName?: string(name='outer_corp_name', description='This parameter is required.'),
  userId?: string(name='user_id', description='This parameter is required.', example='123'),
}

model CreateSubCorpResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    subCorpId?: string(name='sub_corp_id', example='btrip123'),
  }(name='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model CreateSubCorpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSubCorpResponseBody(name='body'),
}

/**
 * @summary 创建子企业
 *
 * @param request CreateSubCorpRequest
 * @param headers CreateSubCorpHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSubCorpResponse
 */
async function createSubCorpWithOptions(request: CreateSubCorpRequest, headers: CreateSubCorpHeaders, runtime: Util.RuntimeOptions): CreateSubCorpResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.outerCorpId)) {
    body['outer_corp_id'] = request.outerCorpId;
  }
  if (!Util.isUnset(request.outerCorpName)) {
    body['outer_corp_name'] = request.outerCorpName;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSubCorp',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/sub_corps/v1/corps`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建子企业
 *
 * @param request CreateSubCorpRequest
 * @return CreateSubCorpResponse
 */
async function createSubCorp(request: CreateSubCorpRequest): CreateSubCorpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateSubCorpHeaders{};
  return createSubCorpWithOptions(request, headers, runtime);
}

model DeleteCustomRoleHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model DeleteCustomRoleRequest {
  roleId?: string(name='role_id', description='This parameter is required.', example='12345'),
}

model DeleteCustomRoleResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210f079e16603757182131635d866a'),
}

model DeleteCustomRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomRoleResponseBody(name='body'),
}

/**
 * @summary 删除企业自定义角色
 *
 * @param request DeleteCustomRoleRequest
 * @param headers DeleteCustomRoleHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCustomRoleResponse
 */
async function deleteCustomRoleWithOptions(request: DeleteCustomRoleRequest, headers: DeleteCustomRoleHeaders, runtime: Util.RuntimeOptions): DeleteCustomRoleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.roleId)) {
    body['role_id'] = request.roleId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCustomRole',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/role/v1/customRoles/delete`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除企业自定义角色
 *
 * @param request DeleteCustomRoleRequest
 * @return DeleteCustomRoleResponse
 */
async function deleteCustomRole(request: DeleteCustomRoleRequest): DeleteCustomRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteCustomRoleHeaders{};
  return deleteCustomRoleWithOptions(request, headers, runtime);
}

model DeleteDepartmentHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model DeleteDepartmentRequest {
  outDeptId?: string(name='out_dept_id', description='This parameter is required.', example='dept123'),
}

model DeleteDepartmentResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210e847f16611516748613869de4f6'),
}

model DeleteDepartmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDepartmentResponseBody(name='body'),
}

/**
 * @summary 删除企业部门
 *
 * @param request DeleteDepartmentRequest
 * @param headers DeleteDepartmentHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDepartmentResponse
 */
async function deleteDepartmentWithOptions(request: DeleteDepartmentRequest, headers: DeleteDepartmentHeaders, runtime: Util.RuntimeOptions): DeleteDepartmentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.outDeptId)) {
    body['out_dept_id'] = request.outDeptId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDepartment',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/department/v2/delete`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除企业部门
 *
 * @param request DeleteDepartmentRequest
 * @return DeleteDepartmentResponse
 */
async function deleteDepartment(request: DeleteDepartmentRequest): DeleteDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteDepartmentHeaders{};
  return deleteDepartmentWithOptions(request, headers, runtime);
}

model DeleteEmployeesFromCustomRoleHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model DeleteEmployeesFromCustomRoleRequest {
  roleId?: string(name='role_id', description='This parameter is required.', example='12345'),
  userIdList?: [ string ](name='user_id_list', description='This parameter is required.'),
}

model DeleteEmployeesFromCustomRoleShrinkRequest {
  roleId?: string(name='role_id', description='This parameter is required.', example='12345'),
  userIdListShrink?: string(name='user_id_list', description='This parameter is required.'),
}

model DeleteEmployeesFromCustomRoleResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model DeleteEmployeesFromCustomRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEmployeesFromCustomRoleResponseBody(name='body'),
}

/**
 * @summary 批量删除企业自定义角色下人员
 *
 * @param tmpReq DeleteEmployeesFromCustomRoleRequest
 * @param headers DeleteEmployeesFromCustomRoleHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEmployeesFromCustomRoleResponse
 */
async function deleteEmployeesFromCustomRoleWithOptions(tmpReq: DeleteEmployeesFromCustomRoleRequest, headers: DeleteEmployeesFromCustomRoleHeaders, runtime: Util.RuntimeOptions): DeleteEmployeesFromCustomRoleResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteEmployeesFromCustomRoleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userIdList)) {
    request.userIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userIdList, 'user_id_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.roleId)) {
    body['role_id'] = request.roleId;
  }
  if (!Util.isUnset(request.userIdListShrink)) {
    body['user_id_list'] = request.userIdListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEmployeesFromCustomRole',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/role/v1/customRoleEmployees/delete`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量删除企业自定义角色下人员
 *
 * @param request DeleteEmployeesFromCustomRoleRequest
 * @return DeleteEmployeesFromCustomRoleResponse
 */
async function deleteEmployeesFromCustomRole(request: DeleteEmployeesFromCustomRoleRequest): DeleteEmployeesFromCustomRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteEmployeesFromCustomRoleHeaders{};
  return deleteEmployeesFromCustomRoleWithOptions(request, headers, runtime);
}

model DeleteInvoiceEntityHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model DeleteInvoiceEntityRequest {
  delAll?: boolean(name='del_all', example='false'),
  entities?: [ 
    {
      entityId?: string(name='entity_id', example='12345'),
      entityType?: string(name='entity_type', example='1'),
    }
  ](name='entities'),
  thirdPartId?: string(name='third_part_id', description='This parameter is required.', example='340049'),
}

model DeleteInvoiceEntityShrinkRequest {
  delAll?: boolean(name='del_all', example='false'),
  entitiesShrink?: string(name='entities'),
  thirdPartId?: string(name='third_part_id', description='This parameter is required.', example='340049'),
}

model DeleteInvoiceEntityResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    removeNum?: int32(name='remove_num', example='1'),
    selectedUserNum?: int32(name='selected_user_num', example='2'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model DeleteInvoiceEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInvoiceEntityResponseBody(name='body'),
}

/**
 * @summary 删除发票抬头适用人员
 *
 * @param tmpReq DeleteInvoiceEntityRequest
 * @param headers DeleteInvoiceEntityHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteInvoiceEntityResponse
 */
async function deleteInvoiceEntityWithOptions(tmpReq: DeleteInvoiceEntityRequest, headers: DeleteInvoiceEntityHeaders, runtime: Util.RuntimeOptions): DeleteInvoiceEntityResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteInvoiceEntityShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entities)) {
    request.entitiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entities, 'entities', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.delAll)) {
    query['del_all'] = request.delAll;
  }
  if (!Util.isUnset(request.entitiesShrink)) {
    query['entities'] = request.entitiesShrink;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    query['third_part_id'] = request.thirdPartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInvoiceEntity',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/entities`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除发票抬头适用人员
 *
 * @param request DeleteInvoiceEntityRequest
 * @return DeleteInvoiceEntityResponse
 */
async function deleteInvoiceEntity(request: DeleteInvoiceEntityRequest): DeleteInvoiceEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteInvoiceEntityHeaders{};
  return deleteInvoiceEntityWithOptions(request, headers, runtime);
}

model DepartmentSaveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model DepartmentSaveRequest {
  departList?: [ 
    {
      departId?: long(name='depart_id', example='10'),
      departName?: string(name='depart_name', description='This parameter is required.'),
      departPid?: long(name='depart_pid', example='10'),
      managerIds?: string(name='manager_ids', example='001|002|003'),
      status?: int32(name='status', example='1'),
      thirdDepartId?: string(name='third_depart_id', example='testdepartid001'),
      thirdDepartPid?: string(name='third_depart_pid', example='testdepartpid001'),
    }
  ](name='depart_list'),
}

model DepartmentSaveShrinkRequest {
  departListShrink?: string(name='depart_list'),
}

model DepartmentSaveResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: string(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210e847516614936690356047dde07'),
}

model DepartmentSaveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DepartmentSaveResponseBody(name='body'),
}

/**
 * @summary 同步外部平台部门信息至商旅内部
 *
 * @param tmpReq DepartmentSaveRequest
 * @param headers DepartmentSaveHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DepartmentSaveResponse
 */
async function departmentSaveWithOptions(tmpReq: DepartmentSaveRequest, headers: DepartmentSaveHeaders, runtime: Util.RuntimeOptions): DepartmentSaveResponse {
  Util.validateModel(tmpReq);
  var request = new DepartmentSaveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.departList)) {
    request.departListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.departList, 'depart_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.departListShrink)) {
    body['depart_list'] = request.departListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DepartmentSave',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/department/v1/department`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 同步外部平台部门信息至商旅内部
 *
 * @param request DepartmentSaveRequest
 * @return DepartmentSaveResponse
 */
async function departmentSave(request: DepartmentSaveRequest): DepartmentSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DepartmentSaveHeaders{};
  return departmentSaveWithOptions(request, headers, runtime);
}

model ElectronicItineraryBatchApplyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ElectronicItineraryBatchApplyRequest {
  applyItineraryList?: [ 
    {
      purchaserName?: string(name='purchaser_name'),
      purchaserTaxNo?: string(name='purchaser_tax_no', example='tax3213132131'),
      purchaserType?: int32(name='purchaser_type', description='This parameter is required.', example='1'),
      ticketNo?: string(name='ticket_no', description='This parameter is required.', example='781-2205431917'),
    }
  ](name='apply_itinerary_list', description='This parameter is required.'),
  canReprint?: boolean(name='can_reprint', example='true'),
}

model ElectronicItineraryBatchApplyShrinkRequest {
  applyItineraryListShrink?: string(name='apply_itinerary_list', description='This parameter is required.'),
  canReprint?: boolean(name='can_reprint', example='true'),
}

model ElectronicItineraryBatchApplyResponseBody = {
  code?: int32(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    applyFailedTicketList?: [ 
      {
        failedCode?: int32(name='failed_code'),
        failedReason?: string(name='failed_reason'),
        ticketNo?: string(name='ticket_no'),
      }
    ](name='apply_failed_ticket_list'),
    batchNo?: string(name='batch_no'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model ElectronicItineraryBatchApplyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ElectronicItineraryBatchApplyResponseBody(name='body'),
}

/**
 * @summary 批量申请电子行程单
 *
 * @param tmpReq ElectronicItineraryBatchApplyRequest
 * @param headers ElectronicItineraryBatchApplyHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ElectronicItineraryBatchApplyResponse
 */
async function electronicItineraryBatchApplyWithOptions(tmpReq: ElectronicItineraryBatchApplyRequest, headers: ElectronicItineraryBatchApplyHeaders, runtime: Util.RuntimeOptions): ElectronicItineraryBatchApplyResponse {
  Util.validateModel(tmpReq);
  var request = new ElectronicItineraryBatchApplyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.applyItineraryList)) {
    request.applyItineraryListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.applyItineraryList, 'apply_itinerary_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.applyItineraryListShrink)) {
    body['apply_itinerary_list'] = request.applyItineraryListShrink;
  }
  if (!Util.isUnset(request.canReprint)) {
    body['can_reprint'] = request.canReprint;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ElectronicItineraryBatchApply',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/apply-itinerary-batch-task`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量申请电子行程单
 *
 * @param request ElectronicItineraryBatchApplyRequest
 * @return ElectronicItineraryBatchApplyResponse
 */
async function electronicItineraryBatchApply(request: ElectronicItineraryBatchApplyRequest): ElectronicItineraryBatchApplyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ElectronicItineraryBatchApplyHeaders{};
  return electronicItineraryBatchApplyWithOptions(request, headers, runtime);
}

model ElectronicItineraryGetApplyResultHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ElectronicItineraryGetApplyResultRequest {
  batchApplyNo?: string(name='batch_apply_no', description='This parameter is required.', example='0c7d5944608943479a9a4d40c1eec618'),
}

model ElectronicItineraryGetApplyResultResponseBody = {
  code?: int32(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    applyTicketList?: [ 
      {
        failedCode?: int32(name='failed_code', example='5001'),
        failedReason?: string(name='failed_reason'),
        itineraryStatus?: int32(name='itinerary_status'),
        remark?: string(name='remark'),
        ticketNo?: string(name='ticket_no', example='781-6605285563'),
      }
    ](name='apply_ticket_list'),
    batchApplyNo?: string(name='batch_apply_no'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model ElectronicItineraryGetApplyResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ElectronicItineraryGetApplyResultResponseBody(name='body'),
}

/**
 * @summary 获取电子行程单申请结果
 *
 * @param request ElectronicItineraryGetApplyResultRequest
 * @param headers ElectronicItineraryGetApplyResultHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ElectronicItineraryGetApplyResultResponse
 */
async function electronicItineraryGetApplyResultWithOptions(request: ElectronicItineraryGetApplyResultRequest, headers: ElectronicItineraryGetApplyResultHeaders, runtime: Util.RuntimeOptions): ElectronicItineraryGetApplyResultResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.batchApplyNo)) {
    query['batch_apply_no'] = request.batchApplyNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ElectronicItineraryGetApplyResult',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/get-itinerary-batch-task`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取电子行程单申请结果
 *
 * @param request ElectronicItineraryGetApplyResultRequest
 * @return ElectronicItineraryGetApplyResultResponse
 */
async function electronicItineraryGetApplyResult(request: ElectronicItineraryGetApplyResultRequest): ElectronicItineraryGetApplyResultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ElectronicItineraryGetApplyResultHeaders{};
  return electronicItineraryGetApplyResultWithOptions(request, headers, runtime);
}

model EntityAddHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model EntityAddRequest {
  entityDOList?: [ 
    {
      entityId?: string(name='entity_id', example='12345'),
      entityType?: string(name='entity_type', example='1'),
    }
  ](name='entity_d_o_list'),
  thirdpartId?: string(name='thirdpart_id', description='This parameter is required.', example='340049'),
}

model EntityAddShrinkRequest {
  entityDOListShrink?: string(name='entity_d_o_list'),
  thirdpartId?: string(name='thirdpart_id', description='This parameter is required.', example='340049'),
}

model EntityAddResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    addNum?: int32(name='add_num', example='1'),
    selectedUserNum?: int32(name='selected_user_num', example='2'),
  }(name='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model EntityAddResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EntityAddResponseBody(name='body'),
}

/**
 * @summary 增加成本中心人员信息
 *
 * @param tmpReq EntityAddRequest
 * @param headers EntityAddHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return EntityAddResponse
 */
async function entityAddWithOptions(tmpReq: EntityAddRequest, headers: EntityAddHeaders, runtime: Util.RuntimeOptions): EntityAddResponse {
  Util.validateModel(tmpReq);
  var request = new EntityAddShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entityDOList)) {
    request.entityDOListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entityDOList, 'entity_d_o_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityDOListShrink)) {
    body['entity_d_o_list'] = request.entityDOListShrink;
  }
  if (!Util.isUnset(request.thirdpartId)) {
    body['thirdpart_id'] = request.thirdpartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EntityAdd',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/add-entity`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 增加成本中心人员信息
 *
 * @param request EntityAddRequest
 * @return EntityAddResponse
 */
async function entityAdd(request: EntityAddRequest): EntityAddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new EntityAddHeaders{};
  return entityAddWithOptions(request, headers, runtime);
}

model EntityDeleteHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model EntityDeleteRequest {
  delAll?: boolean(name='del_all', description='This parameter is required.', example='true'),
  entityDOList?: [ 
    {
      entityId?: string(name='entity_id', description='This parameter is required.', example='123'),
      entityType?: string(name='entity_type', description='This parameter is required.', example='1'),
    }
  ](name='entity_d_o_list'),
  thirdpartId?: string(name='thirdpart_id', description='This parameter is required.', example='12345'),
}

model EntityDeleteShrinkRequest {
  delAll?: boolean(name='del_all', description='This parameter is required.', example='true'),
  entityDOListShrink?: string(name='entity_d_o_list'),
  thirdpartId?: string(name='thirdpart_id', description='This parameter is required.', example='12345'),
}

model EntityDeleteResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    removeNum?: int32(name='remove_num', example='1'),
    selectedUserNum?: int32(name='selected_user_num', example='1'),
  }(name='module'),
  morePage?: boolean(name='more_page', example='true'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model EntityDeleteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EntityDeleteResponseBody(name='body'),
}

/**
 * @summary 删除成本中心人员信息
 *
 * @param tmpReq EntityDeleteRequest
 * @param headers EntityDeleteHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return EntityDeleteResponse
 */
async function entityDeleteWithOptions(tmpReq: EntityDeleteRequest, headers: EntityDeleteHeaders, runtime: Util.RuntimeOptions): EntityDeleteResponse {
  Util.validateModel(tmpReq);
  var request = new EntityDeleteShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entityDOList)) {
    request.entityDOListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entityDOList, 'entity_d_o_list', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.delAll)) {
    query['del_all'] = request.delAll;
  }
  if (!Util.isUnset(request.thirdpartId)) {
    query['thirdpart_id'] = request.thirdpartId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.entityDOListShrink)) {
    body['entity_d_o_list'] = request.entityDOListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EntityDelete',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/entity/action/delete`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除成本中心人员信息
 *
 * @param request EntityDeleteRequest
 * @return EntityDeleteResponse
 */
async function entityDelete(request: EntityDeleteRequest): EntityDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new EntityDeleteHeaders{};
  return entityDeleteWithOptions(request, headers, runtime);
}

model EntitySetHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model EntitySetRequest {
  entityDOList?: [ 
    {
      entityId?: string(name='entity_id', description='This parameter is required.', example='123'),
      entityType?: string(name='entity_type', description='This parameter is required.', example='1'),
    }
  ](name='entity_d_o_list'),
  thirdpartId?: string(name='thirdpart_id', description='This parameter is required.', example='340049'),
}

model EntitySetShrinkRequest {
  entityDOListShrink?: string(name='entity_d_o_list'),
  thirdpartId?: string(name='thirdpart_id', description='This parameter is required.', example='340049'),
}

model EntitySetResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    addNum?: int32(name='add_num', example='1'),
    removeNum?: int32(name='remove_num', example='1'),
    selectedUserNum?: int32(name='selected_user_num', example='1'),
  }(name='module'),
  morePage?: boolean(name='more_page', example='true'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model EntitySetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EntitySetResponseBody(name='body'),
}

/**
 * @summary 设置成本中心人员信息
 *
 * @param tmpReq EntitySetRequest
 * @param headers EntitySetHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return EntitySetResponse
 */
async function entitySetWithOptions(tmpReq: EntitySetRequest, headers: EntitySetHeaders, runtime: Util.RuntimeOptions): EntitySetResponse {
  Util.validateModel(tmpReq);
  var request = new EntitySetShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entityDOList)) {
    request.entityDOListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entityDOList, 'entity_d_o_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityDOListShrink)) {
    body['entity_d_o_list'] = request.entityDOListShrink;
  }
  if (!Util.isUnset(request.thirdpartId)) {
    body['thirdpart_id'] = request.thirdpartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EntitySet',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/set-entity`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设置成本中心人员信息
 *
 * @param request EntitySetRequest
 * @return EntitySetResponse
 */
async function entitySet(request: EntitySetRequest): EntitySetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new EntitySetHeaders{};
  return entitySetWithOptions(request, headers, runtime);
}

model EstimatedPriceQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model EstimatedPriceQueryRequest {
  arrCity?: string(name='arr_city', description='This parameter is required.'),
  category?: string(name='category', description='This parameter is required.', example='flight'),
  depCity?: string(name='dep_city', description='This parameter is required.'),
  endTime?: long(name='end_time', description='This parameter is required.', example='1670601600000'),
  itineraryId?: string(name='itinerary_id', example='1245'),
  startTime?: long(name='start_time', description='This parameter is required.', example='1670428800000'),
  subCorpId?: string(name='sub_corp_id', example='btrip123'),
  userId?: string(name='user_id', description='This parameter is required.', example='12345678910'),
}

model EstimatedPriceQueryResponseBody = {
  code?: int32(name='code', example='0'),
  message?: string(name='message', example='demo'),
  module?: {
    hotelFeeDetail?: [ 
      {
        city?: string(name='city'),
        criterion?: long(name='criterion', example='6'),
        itineraryId?: string(name='itinerary_id', example='1245'),
        total?: long(name='total', example='6'),
        tripDays?: int32(name='trip_days', example='1'),
      }
    ](name='hotel_fee_detail'),
    totalHotelFee?: long(name='total_hotel_fee', description='酒店费用总额，单位为元', example='500'),
    trafficFee?: {
      btripRoutes?: [ 
        {
          arrCity?: string(name='arr_city'),
          arrDate?: long(name='arr_date'),
          cheapest?: {
            arrTime?: string(name='arr_time', example='00:40'),
            depTime?: string(name='dep_time', example='22:20'),
            fee?: long(name='fee', example='30100'),
            seatGrade?: string(name='seat_grade'),
            vehicleNo?: string(name='vehicle_no', example='MU9668'),
          }(name='cheapest'),
          depCity?: string(name='dep_city'),
          depDate?: long(name='dep_date'),
          errMsg?: string(name='err_msg', example='demo'),
          itineraryId?: string(name='itinerary_id', example='1245'),
          mostExpensive?: {
            arrTime?: string(name='arr_time', example='19:20'),
            depTime?: string(name='dep_time', example='17:00'),
            fee?: long(name='fee', example='265000'),
            seatGrade?: string(name='seat_grade'),
            vehicleNo?: string(name='vehicle_no', example='CA1721'),
          }(name='most_expensive'),
          success?: boolean(name='success', example='true'),
        }
      ](name='btrip_routes'),
      errMsg?: string(name='err_msg', example='demo'),
      maxFee?: long(name='max_fee', example='265000'),
      minFee?: long(name='min_fee', example='30100'),
      success?: boolean(name='success', example='true'),
    }(name='traffic_fee'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model EstimatedPriceQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EstimatedPriceQueryResponseBody(name='body'),
}

/**
 * @summary 预估价格查询
 *
 * @param request EstimatedPriceQueryRequest
 * @param headers EstimatedPriceQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return EstimatedPriceQueryResponse
 */
async function estimatedPriceQueryWithOptions(request: EstimatedPriceQueryRequest, headers: EstimatedPriceQueryHeaders, runtime: Util.RuntimeOptions): EstimatedPriceQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.arrCity)) {
    query['arr_city'] = request.arrCity;
  }
  if (!Util.isUnset(request.category)) {
    query['category'] = request.category;
  }
  if (!Util.isUnset(request.depCity)) {
    query['dep_city'] = request.depCity;
  }
  if (!Util.isUnset(request.endTime)) {
    query['end_time'] = request.endTime;
  }
  if (!Util.isUnset(request.itineraryId)) {
    query['itinerary_id'] = request.itineraryId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['start_time'] = request.startTime;
  }
  if (!Util.isUnset(request.subCorpId)) {
    query['sub_corp_id'] = request.subCorpId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EstimatedPriceQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/estimated-price`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 预估价格查询
 *
 * @param request EstimatedPriceQueryRequest
 * @return EstimatedPriceQueryResponse
 */
async function estimatedPriceQuery(request: EstimatedPriceQueryRequest): EstimatedPriceQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new EstimatedPriceQueryHeaders{};
  return estimatedPriceQueryWithOptions(request, headers, runtime);
}

model ExceedApplySyncHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ExceedApplySyncRequest {
  applyId?: long(name='apply_id', description='This parameter is required.', example='823744'),
  bizCategory?: int32(name='biz_category', example='3'),
  remark?: string(name='remark'),
  status?: int32(name='status', description='This parameter is required.', example='1'),
  thirdpartyFlowId?: string(name='thirdparty_flow_id', example='123421'),
  userId?: string(name='user_id', description='This parameter is required.', example='open5145141'),
}

model ExceedApplySyncResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: boolean(name='module', description='module。', example='{\\\\"list\\\\": [], \\\\"pageSize\\\\": 20, \\\\"pageNo\\\\": 1}'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model ExceedApplySyncResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExceedApplySyncResponseBody(name='body'),
}

/**
 * @summary 超标审批结果同步
 *
 * @param request ExceedApplySyncRequest
 * @param headers ExceedApplySyncHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExceedApplySyncResponse
 */
async function exceedApplySyncWithOptions(request: ExceedApplySyncRequest, headers: ExceedApplySyncHeaders, runtime: Util.RuntimeOptions): ExceedApplySyncResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.bizCategory)) {
    query['biz_category'] = request.bizCategory;
  }
  if (!Util.isUnset(request.remark)) {
    query['remark'] = request.remark;
  }
  if (!Util.isUnset(request.status)) {
    query['status'] = request.status;
  }
  if (!Util.isUnset(request.thirdpartyFlowId)) {
    query['thirdparty_flow_id'] = request.thirdpartyFlowId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExceedApplySync',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/syn-exceed`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 超标审批结果同步
 *
 * @param request ExceedApplySyncRequest
 * @return ExceedApplySyncResponse
 */
async function exceedApplySync(request: ExceedApplySyncRequest): ExceedApplySyncResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ExceedApplySyncHeaders{};
  return exceedApplySyncWithOptions(request, headers, runtime);
}

model ExternalUserAddHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model ExternalUserAddRequest {
  birthday?: string(name='birthday', example='2000-01-02'),
  certRequestList?: [ 
    {
      certExpiredTime?: string(name='cert_expired_time', example='2034-10-01'),
      certNation?: string(name='cert_nation', example='CN'),
      certNo?: string(name='cert_no', description='This parameter is required.', example='330101199010010213'),
      certType?: int32(name='cert_type', description='This parameter is required.', example='0'),
      nationality?: string(name='nationality', example='CN'),
    }
  ](name='cert_request_list'),
  email?: string(name='email', example='zhangsan@alibaba-inc.com'),
  externalUserId?: string(name='external_user_id', description='This parameter is required.', example='0012'),
  phone?: string(name='phone', example='13438009765'),
  realName?: string(name='real_name'),
  realNameEn?: string(name='real_name_en', example='zhang/san'),
  userType?: int32(name='user_type', description='This parameter is required.', example='2'),
}

model ExternalUserAddShrinkRequest {
  birthday?: string(name='birthday', example='2000-01-02'),
  certRequestListShrink?: string(name='cert_request_list'),
  email?: string(name='email', example='zhangsan@alibaba-inc.com'),
  externalUserId?: string(name='external_user_id', description='This parameter is required.', example='0012'),
  phone?: string(name='phone', example='13438009765'),
  realName?: string(name='real_name'),
  realNameEn?: string(name='real_name_en', example='zhang/san'),
  userType?: int32(name='user_type', description='This parameter is required.', example='2'),
}

model ExternalUserAddResponseBody = {
  code?: string(name='code', example='success'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210f079416784321627628333de4ab'),
}

model ExternalUserAddResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExternalUserAddResponseBody(name='body'),
}

/**
 * @summary 添加外部出行人与证件信息
 *
 * @param tmpReq ExternalUserAddRequest
 * @param headers ExternalUserAddHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExternalUserAddResponse
 */
async function externalUserAddWithOptions(tmpReq: ExternalUserAddRequest, headers: ExternalUserAddHeaders, runtime: Util.RuntimeOptions): ExternalUserAddResponse {
  Util.validateModel(tmpReq);
  var request = new ExternalUserAddShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.certRequestList)) {
    request.certRequestListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.certRequestList, 'cert_request_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.birthday)) {
    body['birthday'] = request.birthday;
  }
  if (!Util.isUnset(request.certRequestListShrink)) {
    body['cert_request_list'] = request.certRequestListShrink;
  }
  if (!Util.isUnset(request.email)) {
    body['email'] = request.email;
  }
  if (!Util.isUnset(request.externalUserId)) {
    body['external_user_id'] = request.externalUserId;
  }
  if (!Util.isUnset(request.phone)) {
    body['phone'] = request.phone;
  }
  if (!Util.isUnset(request.realName)) {
    body['real_name'] = request.realName;
  }
  if (!Util.isUnset(request.realNameEn)) {
    body['real_name_en'] = request.realNameEn;
  }
  if (!Util.isUnset(request.userType)) {
    body['user_type'] = request.userType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ExternalUserAdd',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/user/v1/externalUsers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 添加外部出行人与证件信息
 *
 * @param request ExternalUserAddRequest
 * @return ExternalUserAddResponse
 */
async function externalUserAdd(request: ExternalUserAddRequest): ExternalUserAddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ExternalUserAddHeaders{};
  return externalUserAddWithOptions(request, headers, runtime);
}

model ExternalUserDeleteHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model ExternalUserDeleteResponseBody = {
  code?: string(name='code', example='success'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210f079416784321627628333de4ab'),
}

model ExternalUserDeleteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExternalUserDeleteResponseBody(name='body'),
}

/**
 * @summary 删除外部出行人
 *
 * @param headers ExternalUserDeleteHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExternalUserDeleteResponse
 */
async function externalUserDeleteWithOptions(externalUserId: string, headers: ExternalUserDeleteHeaders, runtime: Util.RuntimeOptions): ExternalUserDeleteResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'ExternalUserDelete',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/user/v1/externalUsers/${OpenApiUtil.getEncodeParam(externalUserId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除外部出行人
 *
 * @return ExternalUserDeleteResponse
 */
async function externalUserDelete(externalUserId: string): ExternalUserDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ExternalUserDeleteHeaders{};
  return externalUserDeleteWithOptions(externalUserId, headers, runtime);
}

model ExternalUserQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model ExternalUserQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message'),
  module?: {
    birthday?: string(name='birthday', example='2000-01-02'),
    corpId?: string(name='corp_id', example='btrip123456'),
    email?: string(name='email', example='zhangsan@alibaba-inc.com'),
    externalUserId?: string(name='external_user_id', example='000001'),
    phone?: string(name='phone', example='13438009765'),
    realName?: string(name='real_name'),
    realNameEn?: string(name='real_name_en', example='zhang/san'),
    userId?: string(name='user_id', example='e1$12345678'),
    userNick?: string(name='user_nick'),
    userType?: int32(name='user_type', example='1'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210e847f16611516748613869de4f6'),
}

model ExternalUserQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExternalUserQueryResponseBody(name='body'),
}

/**
 * @summary 查询外部出行人
 *
 * @param headers ExternalUserQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExternalUserQueryResponse
 */
async function externalUserQueryWithOptions(externalUserId: string, headers: ExternalUserQueryHeaders, runtime: Util.RuntimeOptions): ExternalUserQueryResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'ExternalUserQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/user/v1/externalUsers/${OpenApiUtil.getEncodeParam(externalUserId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询外部出行人
 *
 * @return ExternalUserQueryResponse
 */
async function externalUserQuery(externalUserId: string): ExternalUserQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ExternalUserQueryHeaders{};
  return externalUserQueryWithOptions(externalUserId, headers, runtime);
}

model ExternalUserUpdateHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model ExternalUserUpdateRequest {
  birthday?: string(name='birthday', example='2000-01-02'),
  certRequestList?: [ 
    {
      certExpiredTime?: string(name='cert_expired_time', example='2034-10-01'),
      certNation?: string(name='cert_nation', example='CN'),
      certNo?: string(name='cert_no', description='This parameter is required.', example='330101199010010213'),
      certType?: int32(name='cert_type', description='This parameter is required.', example='0'),
      nationality?: string(name='nationality', example='CN'),
    }
  ](name='cert_request_list'),
  email?: string(name='email', example='zhangsan@alibaba-inc.com'),
  phone?: string(name='phone', example='13438009765'),
  realName?: string(name='real_name'),
  realNameEn?: string(name='real_name_en', example='zhang/san'),
}

model ExternalUserUpdateShrinkRequest {
  birthday?: string(name='birthday', example='2000-01-02'),
  certRequestListShrink?: string(name='cert_request_list'),
  email?: string(name='email', example='zhangsan@alibaba-inc.com'),
  phone?: string(name='phone', example='13438009765'),
  realName?: string(name='real_name'),
  realNameEn?: string(name='real_name_en', example='zhang/san'),
}

model ExternalUserUpdateResponseBody = {
  code?: string(name='code', example='success'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210f079416784321627628333de4ab'),
}

model ExternalUserUpdateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExternalUserUpdateResponseBody(name='body'),
}

/**
 * @summary 修改外部出行人与证件信息
 *
 * @param tmpReq ExternalUserUpdateRequest
 * @param headers ExternalUserUpdateHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExternalUserUpdateResponse
 */
async function externalUserUpdateWithOptions(externalUserId: string, tmpReq: ExternalUserUpdateRequest, headers: ExternalUserUpdateHeaders, runtime: Util.RuntimeOptions): ExternalUserUpdateResponse {
  Util.validateModel(tmpReq);
  var request = new ExternalUserUpdateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.certRequestList)) {
    request.certRequestListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.certRequestList, 'cert_request_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.birthday)) {
    body['birthday'] = request.birthday;
  }
  if (!Util.isUnset(request.certRequestListShrink)) {
    body['cert_request_list'] = request.certRequestListShrink;
  }
  if (!Util.isUnset(request.email)) {
    body['email'] = request.email;
  }
  if (!Util.isUnset(request.phone)) {
    body['phone'] = request.phone;
  }
  if (!Util.isUnset(request.realName)) {
    body['real_name'] = request.realName;
  }
  if (!Util.isUnset(request.realNameEn)) {
    body['real_name_en'] = request.realNameEn;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ExternalUserUpdate',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/user/v1/externalUsers/${OpenApiUtil.getEncodeParam(externalUserId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改外部出行人与证件信息
 *
 * @param request ExternalUserUpdateRequest
 * @return ExternalUserUpdateResponse
 */
async function externalUserUpdate(externalUserId: string, request: ExternalUserUpdateRequest): ExternalUserUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ExternalUserUpdateHeaders{};
  return externalUserUpdateWithOptions(externalUserId, request, headers, runtime);
}

model FlightBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model FlightBillSettlementQueryRequest {
  billBatch?: string(name='bill_batch'),
  orderId?: long(name='order_id'),
  pageNo?: int32(name='page_no', description='This parameter is required.', example='1'),
  pageSize?: int32(name='page_size', description='This parameter is required.', example='50'),
  periodEnd?: string(name='period_end', example='2021-10-01'),
  periodStart?: string(name='period_start', example='2021-10-01'),
  scrollId?: string(name='scroll_id'),
  scrollMod?: boolean(name='scroll_mod'),
}

model FlightBillSettlementQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category', example='1'),
    corpId?: string(name='corp_id'),
    dataList?: [ 
      {
        adjustTime?: string(name='adjust_time'),
        advanceDay?: int32(name='advance_day', example='1'),
        airlineCorpCode?: string(name='airline_corp_code', example='MU'),
        airlineCorpName?: string(name='airline_corp_name'),
        alipayId?: string(name='alipay_id'),
        alipayTradeNo?: string(name='alipay_trade_no', example='2021100122001138061456080520'),
        applyArrCityCode?: string(name='apply_arr_city_code'),
        applyArrCityName?: string(name='apply_arr_city_name'),
        applyDepCityCode?: string(name='apply_dep_city_code'),
        applyDepCityName?: string(name='apply_dep_city_name'),
        applyExtendField?: string(name='apply_extend_field', description='审批扩展自定义字段'),
        applyId?: string(name='apply_id', example='103177854'),
        approverEmail?: string(name='approver_email'),
        approverId?: string(name='approver_id'),
        approverName?: string(name='approver_name'),
        arrAirportCode?: string(name='arr_airport_code', example='CAN'),
        arrCity?: string(name='arr_city'),
        arrCityCode?: string(name='arr_city_code'),
        arrDate?: string(name='arr_date', example='2021-10-02'),
        arrStation?: string(name='arr_station'),
        arrTime?: string(name='arr_time', example='13:30:00'),
        baseLocation?: string(name='base_location'),
        billRecordTime?: string(name='bill_record_time', example='2020-12-23T20:18Z'),
        bookChannel?: string(name='book_channel'),
        bookMode?: string(name='book_mode'),
        bookTime?: string(name='book_time', example='2021-10-01 00:17:05'),
        bookerId?: string(name='booker_id'),
        bookerJobNo?: string(name='booker_job_no', example='2342432'),
        bookerName?: string(name='booker_name'),
        btripCouponFee?: double(name='btrip_coupon_fee', example='23.9'),
        buildFee?: double(name='build_fee', example='50'),
        businessTripResult?: string(name='business_trip_result'),
        cabin?: string(name='cabin', example='R'),
        cabinClass?: string(name='cabin_class'),
        cabinClassCode?: string(name='cabin_class_code'),
        capitalDirection?: string(name='capital_direction', example='1'),
        cascadeDepartment?: string(name='cascade_department'),
        categoryDesc?: string(name='category_desc'),
        changeFee?: double(name='change_fee', example='23.9'),
        changeReasonCode?: string(name='change_reason_code'),
        changeResult?: string(name='change_result'),
        corpPayOrderFee?: double(name='corp_pay_order_fee', example='460'),
        corpSettlePrice?: double(name='corp_settle_price'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number', example='48b7f3cd-8a4f-4df9-ae2c-883e008cf097'),
        costDepartment?: string(name='cost_department'),
        coupon?: double(name='coupon', example='1'),
        customContent?: string(name='custom_content'),
        deductibleTax?: double(name='deductible_tax'),
        depAirportCode?: string(name='dep_airport_code', example='KHN'),
        depCityCode?: string(name='dep_city_code'),
        department?: string(name='department'),
        departmentId?: string(name='department_id'),
        deptCity?: string(name='dept_city'),
        deptDate?: string(name='dept_date', example='2021-10-02'),
        deptStation?: string(name='dept_station'),
        deptTime?: string(name='dept_time', example='12:00:00'),
        discount?: string(name='discount', example='51%'),
        exceedReason?: string(name='exceed_reason'),
        feeType?: string(name='fee_type', example='10101'),
        feeTypeDesc?: string(name='fee_type_desc'),
        flightNo?: string(name='flight_no', example='MU9684'),
        flightTripType?: string(name='flight_trip_type'),
        foreignersTag?: string(name='foreigners_tag'),
        index?: string(name='index', example='4564547'),
        insOrderId?: string(name='ins_order_id'),
        insuranceFee?: double(name='insurance_fee', example='23.9'),
        insuranceNumber?: string(name='insurance_number'),
        invoiceTitle?: string(name='invoice_title'),
        itemType?: string(name='item_type'),
        itineraryNum?: string(name='itinerary_num', example='5334916421'),
        itineraryPrice?: double(name='itinerary_price', example='460'),
        location?: string(name='location'),
        mappingCompanyCode?: string(name='mapping_company_code'),
        mileage?: string(name='mileage'),
        mostDifferenceDeptTime?: string(name='most_difference_dept_time', example='2021-10-01 00:17:13'),
        mostDifferenceDiscount?: string(name='most_difference_discount', example='23%'),
        mostDifferenceFlightNo?: string(name='most_difference_flight_no', example='MU9684'),
        mostDifferencePrice?: double(name='most_difference_price', example='23.9'),
        mostDifferenceReason?: string(name='most_difference_reason'),
        mostPrice?: double(name='most_price', example='23.9'),
        negotiationCouponFee?: double(name='negotiation_coupon_fee', example='23.9'),
        offlineStatus?: string(name='offline_status'),
        oilFee?: double(name='oil_fee', example='0'),
        orderId?: string(name='order_id', example='234223423423'),
        orderTicketNo?: string(name='order_ticket_no'),
        overApplyId?: string(name='over_apply_id', example='234324324423'),
        paymentDepartmentId?: string(name='payment_department_id'),
        paymentDepartmentName?: string(name='payment_department_name'),
        personSettlePrice?: double(name='person_settle_price'),
        position?: string(name='position'),
        positionLevel?: string(name='position_level'),
        preBookTip?: string(name='pre_book_tip'),
        primaryId?: long(name='primary_id', example='4564547'),
        processorOaCode?: string(name='processor_oa_code'),
        projectCode?: string(name='project_code', example='45623234'),
        projectName?: string(name='project_name'),
        refundAffiliateNo?: string(name='refund_affiliate_no'),
        refundApplyId?: string(name='refund_apply_id'),
        refundFee?: double(name='refund_fee', example='23.9'),
        refundReasonCode?: string(name='refund_reason_code'),
        refundResult?: string(name='refund_result'),
        refundUpgradeCost?: double(name='refund_upgrade_cost', example='23.9'),
        remark?: string(name='remark'),
        repeatRefund?: string(name='repeat_refund'),
        sceneId?: string(name='scene_id'),
        sceneName?: string(name='scene_name'),
        sealPrice?: double(name='seal_price', example='410'),
        serviceFee?: double(name='service_fee', example='23.9'),
        settleTypeDesc?: string(name='settle_type_desc'),
        settlementFee?: double(name='settlement_fee', example='460'),
        settlementGrantFee?: double(name='settlement_grant_fee', example='5.67'),
        settlementTime?: string(name='settlement_time', example='2021-10-01 00:17:13'),
        settlementType?: string(name='settlement_type', example='2'),
        sio?: string(name='sio'),
        status?: int32(name='status', example='1'),
        statusDesc?: string(name='status_desc'),
        taxRate?: string(name='tax_rate', description='税率', example='6%'),
        thirdItineraryId?: string(name='third_itinerary_id'),
        ticketId?: string(name='ticket_id', example='781-6586234234324'),
        trade?: string(name='trade'),
        tradeActionDesc?: string(name='trade_action_desc'),
        travelerEmail?: string(name='traveler_email'),
        travelerId?: string(name='traveler_id'),
        travelerJobNo?: string(name='traveler_job_no', example='345345'),
        travelerMemberType?: string(name='traveler_member_type'),
        travelerMemberTypeName?: string(name='traveler_member_type_name'),
        travelerName?: string(name='traveler_name'),
        upgradeCost?: double(name='upgrade_cost', example='23.9'),
        voucherType?: int32(name='voucher_type', example='11'),
        voucherTypeDesc?: string(name='voucher_type_desc'),
        voyageName?: string(name='voyage_name'),
      }
    ](name='data_list'),
    periodEnd?: string(name='period_end', example='2021-10-14'),
    periodStart?: string(name='period_start', example='2021-10-13'),
    scrollId?: string(name='scroll_id'),
    totalNum?: long(name='total_num', example='5180'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightBillSettlementQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightBillSettlementQueryResponseBody(name='body'),
}

/**
 * @summary 查询机票记账数据
 *
 * @param request FlightBillSettlementQueryRequest
 * @param headers FlightBillSettlementQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightBillSettlementQueryResponse
 */
async function flightBillSettlementQueryWithOptions(request: FlightBillSettlementQueryRequest, headers: FlightBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): FlightBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billBatch)) {
    query['bill_batch'] = request.billBatch;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }
  if (!Util.isUnset(request.scrollId)) {
    query['scroll_id'] = request.scrollId;
  }
  if (!Util.isUnset(request.scrollMod)) {
    query['scroll_mod'] = request.scrollMod;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/flight/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询机票记账数据
 *
 * @param request FlightBillSettlementQueryRequest
 * @return FlightBillSettlementQueryResponse
 */
async function flightBillSettlementQuery(request: FlightBillSettlementQueryRequest): FlightBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightBillSettlementQueryHeaders{};
  return flightBillSettlementQueryWithOptions(request, headers, runtime);
}

model FlightCancelOrderHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightCancelOrderRequest {
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='dis123'),
}

model FlightCancelOrderResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    cancelTime?: string(name='cancel_time', example='2022-07-04T16:13Z'),
    failCode?: string(name='fail_code'),
    failReason?: string(name='fail_reason'),
    orderStatus?: string(name='order_status', example='0'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightCancelOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightCancelOrderResponseBody(name='body'),
}

/**
 * @summary 航班订单取消
 *
 * @param request FlightCancelOrderRequest
 * @param headers FlightCancelOrderHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightCancelOrderResponse
 */
async function flightCancelOrderWithOptions(request: FlightCancelOrderRequest, headers: FlightCancelOrderHeaders, runtime: Util.RuntimeOptions): FlightCancelOrderResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.disOrderId)) {
    query['dis_order_id'] = request.disOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightCancelOrder',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/order/action/cancel`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 航班订单取消
 *
 * @param request FlightCancelOrderRequest
 * @return FlightCancelOrderResponse
 */
async function flightCancelOrder(request: FlightCancelOrderRequest): FlightCancelOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightCancelOrderHeaders{};
  return flightCancelOrderWithOptions(request, headers, runtime);
}

model FlightCancelOrderV2Headers {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwis'),
}

model FlightCancelOrderV2Request {
  isvName?: string(name='isv_name', description='This parameter is required.'),
  orderId?: string(name='order_id'),
  outOrderId?: string(name='out_order_id'),
}

model FlightCancelOrderV2ResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    cancelTime?: string(name='cancel_time', example='2023-08-10 17:45:32'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', description='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightCancelOrderV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightCancelOrderV2ResponseBody(name='body'),
}

/**
 * @summary 机票订单取消
 *
 * @param request FlightCancelOrderV2Request
 * @param headers FlightCancelOrderV2Headers
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightCancelOrderV2Response
 */
async function flightCancelOrderV2WithOptions(request: FlightCancelOrderV2Request, headers: FlightCancelOrderV2Headers, runtime: Util.RuntimeOptions): FlightCancelOrderV2Response {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    query['out_order_id'] = request.outOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightCancelOrderV2',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v2/order/action/cancel`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票订单取消
 *
 * @param request FlightCancelOrderV2Request
 * @return FlightCancelOrderV2Response
 */
async function flightCancelOrderV2(request: FlightCancelOrderV2Request): FlightCancelOrderV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightCancelOrderV2Headers{};
  return flightCancelOrderV2WithOptions(request, headers, runtime);
}

model FlightCreateOrderHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightCreateOrderRequest {
  arrAirportCode?: string(name='arr_airport_code', example='HGH'),
  arrCityCode?: string(name='arr_city_code', description='This parameter is required.', example='HGH'),
  autoPay?: int32(name='auto_pay', example='0'),
  buyerName?: string(name='buyer_name'),
  buyerUniqueKey?: string(name='buyer_unique_key', description='This parameter is required.', example='123'),
  contactInfo?: {
    contactEmail?: string(name='contact_email', example='******@alibaba-inc.com'),
    contactName?: string(name='contact_name', description='This parameter is required.'),
    contactPhone?: string(name='contact_phone', description='This parameter is required.', example='12312345211'),
  }(name='contact_info', description='This parameter is required.'),
  depAirportCode?: string(name='dep_airport_code', example='PEK'),
  depCityCode?: string(name='dep_city_code', description='This parameter is required.', example='BJS'),
  depDate?: string(name='dep_date', description='This parameter is required.', example='2000-00-00 00:00:00'),
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='dis123'),
  orderAttr?: map[string]any(name='order_attr'),
  orderParams?: string(name='order_params', description='This parameter is required.', example='1000_1_0'),
  otaItemId?: string(name='ota_item_id', description='This parameter is required.', example='7fb731deeb4510b86c17e8c8c25740_11'),
  price?: long(name='price', description='This parameter is required.', example='1000'),
  receiptAddress?: string(name='receipt_address'),
  receiptTarget?: int32(name='receipt_target', example='1'),
  receiptTitle?: string(name='receipt_title'),
  travelerInfoList?: [ 
    {
      birthday?: string(name='birthday', example='2000-00-00'),
      certNation?: string(name='cert_nation'),
      certNo?: string(name='cert_no', description='This parameter is required.', example='1262651555151'),
      certType?: string(name='cert_type', description='This parameter is required.', example='1'),
      certValidDate?: string(name='cert_valid_date', example='2000-00-00'),
      name?: string(name='name', description='This parameter is required.'),
      nationality?: string(name='nationality', description='国籍', example='中国大陆'),
      nationalityCode?: string(name='nationality_code', description='国籍二字码', example='CN'),
      outUserId?: string(name='out_user_id', description='This parameter is required.', example='1234'),
      phone?: string(name='phone', description='This parameter is required.', example='12341231232'),
      sex?: int32(name='sex', example='0'),
      type?: string(name='type', description='This parameter is required.', example='1'),
    }
  ](name='traveler_info_list', description='This parameter is required.'),
  tripType?: int32(name='trip_type', description='This parameter is required.', example='0'),
}

model FlightCreateOrderShrinkRequest {
  arrAirportCode?: string(name='arr_airport_code', example='HGH'),
  arrCityCode?: string(name='arr_city_code', description='This parameter is required.', example='HGH'),
  autoPay?: int32(name='auto_pay', example='0'),
  buyerName?: string(name='buyer_name'),
  buyerUniqueKey?: string(name='buyer_unique_key', description='This parameter is required.', example='123'),
  contactInfoShrink?: string(name='contact_info', description='This parameter is required.'),
  depAirportCode?: string(name='dep_airport_code', example='PEK'),
  depCityCode?: string(name='dep_city_code', description='This parameter is required.', example='BJS'),
  depDate?: string(name='dep_date', description='This parameter is required.', example='2000-00-00 00:00:00'),
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='dis123'),
  orderAttrShrink?: string(name='order_attr'),
  orderParams?: string(name='order_params', description='This parameter is required.', example='1000_1_0'),
  otaItemId?: string(name='ota_item_id', description='This parameter is required.', example='7fb731deeb4510b86c17e8c8c25740_11'),
  price?: long(name='price', description='This parameter is required.', example='1000'),
  receiptAddress?: string(name='receipt_address'),
  receiptTarget?: int32(name='receipt_target', example='1'),
  receiptTitle?: string(name='receipt_title'),
  travelerInfoListShrink?: string(name='traveler_info_list', description='This parameter is required.'),
  tripType?: int32(name='trip_type', description='This parameter is required.', example='0'),
}

model FlightCreateOrderResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    alipayTradeNo?: string(name='alipay_trade_no', example='3287177727711'),
    btripOrderId?: long(name='btrip_order_id', example='123'),
    disOrderId?: string(name='dis_order_id', example='dis123'),
    lastPayTime?: string(name='last_pay_time', example='2000-00-00 00:00:00'),
    orderStatus?: int32(name='order_status', example='1'),
    payStatus?: int32(name='pay_status', example='1'),
    paymentPrice?: long(name='payment_price', example='100'),
    totalPrice?: long(name='total_price', example='100'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightCreateOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightCreateOrderResponseBody(name='body'),
}

/**
 * @summary 航班订单创建
 *
 * @param tmpReq FlightCreateOrderRequest
 * @param headers FlightCreateOrderHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightCreateOrderResponse
 */
async function flightCreateOrderWithOptions(tmpReq: FlightCreateOrderRequest, headers: FlightCreateOrderHeaders, runtime: Util.RuntimeOptions): FlightCreateOrderResponse {
  Util.validateModel(tmpReq);
  var request = new FlightCreateOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.contactInfo)) {
    request.contactInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contactInfo, 'contact_info', 'json');
  }
  if (!Util.isUnset(tmpReq.orderAttr)) {
    request.orderAttrShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.orderAttr, 'order_attr', 'json');
  }
  if (!Util.isUnset(tmpReq.travelerInfoList)) {
    request.travelerInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerInfoList, 'traveler_info_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.arrAirportCode)) {
    body['arr_airport_code'] = request.arrAirportCode;
  }
  if (!Util.isUnset(request.arrCityCode)) {
    body['arr_city_code'] = request.arrCityCode;
  }
  if (!Util.isUnset(request.autoPay)) {
    body['auto_pay'] = request.autoPay;
  }
  if (!Util.isUnset(request.buyerName)) {
    body['buyer_name'] = request.buyerName;
  }
  if (!Util.isUnset(request.buyerUniqueKey)) {
    body['buyer_unique_key'] = request.buyerUniqueKey;
  }
  if (!Util.isUnset(request.contactInfoShrink)) {
    body['contact_info'] = request.contactInfoShrink;
  }
  if (!Util.isUnset(request.depAirportCode)) {
    body['dep_airport_code'] = request.depAirportCode;
  }
  if (!Util.isUnset(request.depCityCode)) {
    body['dep_city_code'] = request.depCityCode;
  }
  if (!Util.isUnset(request.depDate)) {
    body['dep_date'] = request.depDate;
  }
  if (!Util.isUnset(request.disOrderId)) {
    body['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.orderAttrShrink)) {
    body['order_attr'] = request.orderAttrShrink;
  }
  if (!Util.isUnset(request.orderParams)) {
    body['order_params'] = request.orderParams;
  }
  if (!Util.isUnset(request.otaItemId)) {
    body['ota_item_id'] = request.otaItemId;
  }
  if (!Util.isUnset(request.price)) {
    body['price'] = request.price;
  }
  if (!Util.isUnset(request.receiptAddress)) {
    body['receipt_address'] = request.receiptAddress;
  }
  if (!Util.isUnset(request.receiptTarget)) {
    body['receipt_target'] = request.receiptTarget;
  }
  if (!Util.isUnset(request.receiptTitle)) {
    body['receipt_title'] = request.receiptTitle;
  }
  if (!Util.isUnset(request.travelerInfoListShrink)) {
    body['traveler_info_list'] = request.travelerInfoListShrink;
  }
  if (!Util.isUnset(request.tripType)) {
    body['trip_type'] = request.tripType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FlightCreateOrder',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/order/action/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 航班订单创建
 *
 * @param request FlightCreateOrderRequest
 * @return FlightCreateOrderResponse
 */
async function flightCreateOrder(request: FlightCreateOrderRequest): FlightCreateOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightCreateOrderHeaders{};
  return flightCreateOrderWithOptions(request, headers, runtime);
}

model FlightCreateOrderV2Headers {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwis'),
}

model FlightCreateOrderV2Request {
  asyncCreateOrderKey?: string(name='async_create_order_key'),
  asyncCreateOrderMode?: boolean(name='async_create_order_mode', example='false'),
  btripUserId?: string(name='btrip_user_id'),
  buyerName?: string(name='buyer_name'),
  contactInfo?: {
    contactEmail?: string(name='contact_email'),
    contactName?: string(name='contact_name'),
    contactPhone?: string(name='contact_phone'),
    sendMsgToPassenger?: boolean(name='send_msg_to_passenger'),
  }(name='contact_info', description='This parameter is required.'),
  isvName?: string(name='isv_name', description='This parameter is required.', example='cheshiapi'),
  otaItemId?: string(name='ota_item_id', description='This parameter is required.', example='7fb731deeb4510b86c17e8c8c25740_11'),
  outOrderId?: string(name='out_order_id', description='This parameter is required.'),
  totalPriceCent?: long(name='total_price_cent'),
  travelers?: [ 
    {
      birthday?: string(name='birthday', description='This parameter is required.', example='1991-01-22'),
      certNation?: string(name='cert_nation'),
      certNo?: string(name='cert_no', description='This parameter is required.'),
      certType?: int32(name='cert_type', description='This parameter is required.', example='0'),
      certValidDate?: string(name='cert_valid_date'),
      costCenterName?: string(name='cost_center_name'),
      costCenterNumber?: string(name='cost_center_number'),
      deptId?: string(name='dept_id'),
      deptName?: string(name='dept_name'),
      gender?: int32(name='gender', description='This parameter is required.'),
      invoiceTitle?: string(name='invoice_title'),
      nationality?: string(name='nationality'),
      nationalityCode?: string(name='nationality_code'),
      passengerName?: string(name='passenger_name', description='This parameter is required.'),
      passengerType?: int32(name='passenger_type', description='This parameter is required.', example='0'),
      phone?: string(name='phone', description='This parameter is required.'),
      projectCode?: string(name='project_code'),
      projectTitle?: string(name='project_title'),
      taxNumber?: string(name='tax_number'),
      userId?: string(name='user_id', description='This parameter is required.', example='18155711459129970552412'),
      userType?: int32(name='user_type'),
    }
  ](name='travelers', description='This parameter is required.'),
}

model FlightCreateOrderV2ShrinkRequest {
  asyncCreateOrderKey?: string(name='async_create_order_key'),
  asyncCreateOrderMode?: boolean(name='async_create_order_mode', example='false'),
  btripUserId?: string(name='btrip_user_id'),
  buyerName?: string(name='buyer_name'),
  contactInfoShrink?: string(name='contact_info', description='This parameter is required.'),
  isvName?: string(name='isv_name', description='This parameter is required.', example='cheshiapi'),
  otaItemId?: string(name='ota_item_id', description='This parameter is required.', example='7fb731deeb4510b86c17e8c8c25740_11'),
  outOrderId?: string(name='out_order_id', description='This parameter is required.'),
  totalPriceCent?: long(name='total_price_cent'),
  travelersShrink?: string(name='travelers', description='This parameter is required.'),
}

model FlightCreateOrderV2ResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    asyncCreateOrderKey?: string(name='async_create_order_key'),
    latestPayTime?: string(name='latest_pay_time', example='2023-08-10 17:42:32'),
    orderId?: long(name='order_id', example='1017002195798359369'),
    outOrderId?: string(name='out_order_id', example='cheshiapi002kwl'),
    status?: int32(name='status', example='32'),
    totalPrice?: long(name='total_price', example='51000'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', description='requestId', example='210bc60a16916593445203790d2a16'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='2103ad0716827336456723986d4bda'),
}

model FlightCreateOrderV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightCreateOrderV2ResponseBody(name='body'),
}

/**
 * @summary 机票订单创建
 *
 * @param tmpReq FlightCreateOrderV2Request
 * @param headers FlightCreateOrderV2Headers
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightCreateOrderV2Response
 */
async function flightCreateOrderV2WithOptions(tmpReq: FlightCreateOrderV2Request, headers: FlightCreateOrderV2Headers, runtime: Util.RuntimeOptions): FlightCreateOrderV2Response {
  Util.validateModel(tmpReq);
  var request = new FlightCreateOrderV2ShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.contactInfo)) {
    request.contactInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contactInfo, 'contact_info', 'json');
  }
  if (!Util.isUnset(tmpReq.travelers)) {
    request.travelersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelers, 'travelers', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.asyncCreateOrderKey)) {
    body['async_create_order_key'] = request.asyncCreateOrderKey;
  }
  if (!Util.isUnset(request.asyncCreateOrderMode)) {
    body['async_create_order_mode'] = request.asyncCreateOrderMode;
  }
  if (!Util.isUnset(request.btripUserId)) {
    body['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.buyerName)) {
    body['buyer_name'] = request.buyerName;
  }
  if (!Util.isUnset(request.contactInfoShrink)) {
    body['contact_info'] = request.contactInfoShrink;
  }
  if (!Util.isUnset(request.isvName)) {
    body['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.otaItemId)) {
    body['ota_item_id'] = request.otaItemId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.totalPriceCent)) {
    body['total_price_cent'] = request.totalPriceCent;
  }
  if (!Util.isUnset(request.travelersShrink)) {
    body['travelers'] = request.travelersShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FlightCreateOrderV2',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v2/order/action/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票订单创建
 *
 * @param request FlightCreateOrderV2Request
 * @return FlightCreateOrderV2Response
 */
async function flightCreateOrderV2(request: FlightCreateOrderV2Request): FlightCreateOrderV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightCreateOrderV2Headers{};
  return flightCreateOrderV2WithOptions(request, headers, runtime);
}

model FlightExceedApplyQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model FlightExceedApplyQueryRequest {
  applyId?: long(name='apply_id', example='175634'),
  businessInstanceId?: string(name='business_instance_id'),
}

model FlightExceedApplyQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id', example='1231'),
    applyIntentionInfoDo?: {
      arrAirportName?: string(name='arr_airport_name'),
      arrCity?: string(name='arr_city', example='SHA'),
      arrCityName?: string(name='arr_city_name'),
      arrTime?: string(name='arr_time', example='2022-01-12T16:47Z'),
      cabin?: string(name='cabin', example='F'),
      cabinClass?: int32(name='cabin_class', example='1'),
      cabinClassStr?: string(name='cabin_class_str'),
      depAirportName?: string(name='dep_airport_name'),
      depCity?: string(name='dep_city', example='SHA'),
      depCityName?: string(name='dep_city_name'),
      depTime?: string(name='dep_time', example='2022-01-12T16:47Z'),
      discount?: string(name='discount', example='4'),
      flightNo?: string(name='flight_no', example='MU2759'),
      price?: long(name='price', example='300'),
      type?: int32(name='type', example='1'),
    }(name='apply_intention_info_do'),
    applyIntentionInfoDoList?: [ 
      {
        arrAirportName?: string(name='arr_airport_name'),
        arrCity?: string(name='arr_city'),
        arrCityName?: string(name='arr_city_name'),
        arrTime?: string(name='arr_time'),
        cabin?: string(name='cabin'),
        cabinClass?: int32(name='cabin_class'),
        cabinClassStr?: string(name='cabin_class_str'),
        depAirportName?: string(name='dep_airport_name'),
        depCity?: string(name='dep_city'),
        depCityName?: string(name='dep_city_name'),
        depTime?: string(name='dep_time'),
        discount?: string(name='discount'),
        flightNo?: string(name='flight_no'),
        price?: long(name='price'),
        type?: int32(name='type'),
      }
    ](name='apply_intention_info_do_list'),
    applyRecommendFlights?: {
      arrAirportName?: string(name='arr_airport_name'),
      arrCityName?: string(name='arr_city_name'),
      arrTime?: string(name='arr_time'),
      cabin?: string(name='cabin'),
      cabinClass?: int32(name='cabin_class'),
      cabinClassStr?: string(name='cabin_class_str'),
      depAirportName?: string(name='dep_airport_name'),
      depCityName?: string(name='dep_city_name'),
      depTime?: string(name='dep_time'),
      discount?: string(name='discount'),
      flightNo?: string(name='flight_no'),
      price?: long(name='price'),
      transferAirportName?: string(name='transfer_airport_name'),
    }(name='apply_recommend_flights'),
    btripCause?: string(name='btrip_cause'),
    corpId?: string(name='corp_id', example='123'),
    exceedReason?: string(name='exceed_reason'),
    exceedType?: int32(name='exceed_type', example='1'),
    originStandard?: string(name='origin_standard'),
    status?: int32(name='status', example='1'),
    submitTime?: string(name='submit_time', example='2022-01-12T16:47Z'),
    thirdpartApplyId?: string(name='thirdpart_apply_id', example='0001A1100000007EX08O'),
    thirdpartCorpId?: string(name='thirdpart_corp_id', example='test_corp'),
    userId?: string(name='user_id', example='user1'),
    userName?: string(name='user_name'),
  }(name='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightExceedApplyQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightExceedApplyQueryResponseBody(name='body'),
}

/**
 * @summary 查询飞机超标审批详情
 *
 * @param request FlightExceedApplyQueryRequest
 * @param headers FlightExceedApplyQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightExceedApplyQueryResponse
 */
async function flightExceedApplyQueryWithOptions(request: FlightExceedApplyQueryRequest, headers: FlightExceedApplyQueryHeaders, runtime: Util.RuntimeOptions): FlightExceedApplyQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.businessInstanceId)) {
    query['business_instance_id'] = request.businessInstanceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightExceedApplyQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/flight-exceed`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询飞机超标审批详情
 *
 * @param request FlightExceedApplyQueryRequest
 * @return FlightExceedApplyQueryResponse
 */
async function flightExceedApplyQuery(request: FlightExceedApplyQueryRequest): FlightExceedApplyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightExceedApplyQueryHeaders{};
  return flightExceedApplyQueryWithOptions(request, headers, runtime);
}

model FlightItineraryScanQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model FlightItineraryScanQueryRequest {
  billDate?: string(name='bill_date', example='2022-12-01'),
  billId?: long(name='bill_id', example='123'),
  invoiceSubTaskId?: long(name='invoice_sub_task_id', example='456'),
  itineraryNum?: string(name='itinerary_num'),
  pageNo?: int32(name='page_no', example='1'),
  pageSize?: int32(name='page_size', example='20'),
  ticketNo?: string(name='ticket_no'),
}

model FlightItineraryScanQueryResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    items?: [ 
      {
        agentCode?: string(name='agent_code', description='销售单位代号', example='SIA25608336893'),
        applyId?: string(name='apply_id'),
        billDate?: string(name='bill_date', example='2022-12-01'),
        build?: string(name='build', example='50'),
        costCenter?: string(name='cost_center'),
        department?: string(name='department'),
        flights?: [ 
          {
            arrivalStation?: string(name='arrival_station', description='航班至'),
            cabinClass?: string(name='cabin_class', description='座位等级', example='M'),
            carrier?: string(name='carrier', description='承运人'),
            departureStation?: string(name='departure_station', description='航班从'),
            flightDate?: string(name='flight_date', description='日期', example='2018-11-18'),
            flightNumber?: string(name='flight_number', description='航班号', example='MU2271'),
            flightTime?: string(name='flight_time', description='时间', example='18:25'),
            freeBaggageAllowance?: string(name='free_baggage_allowance', description='免费行李', example='20K'),
            index?: string(name='index', description='行号', example='1'),
            seatClass?: string(name='seat_class', description='客票级别', example='M'),
            validFromDate?: string(name='valid_from_date', description='客票生效日期', example='2023-01-01'),
            validToDate?: string(name='valid_to_date', description='有效截止日期', example='2023-01-01'),
          }
        ](name='flights', description='机票行程明细'),
        fuelSurcharge?: string(name='fuel_surcharge', example='120'),
        id?: string(name='id', description='UK', example='30'),
        insurance?: string(name='insurance', example='0'),
        invoiceTitle?: string(name='invoice_title'),
        invoiceType?: int32(name='invoice_type'),
        issueCompany?: string(name='issue_company', description='填开单位'),
        issueDate?: string(name='issue_date', description='填开日期', example='2019-02-28'),
        itineraryNum?: string(name='itinerary_num', example='6666666666'),
        ofdOssUrl?: string(name='ofd_oss_url'),
        orderId?: long(name='order_id', example='4801105714092'),
        ossUrl?: string(name='oss_url', example='https://www.testurl.com'),
        passengerName?: string(name='passenger_name'),
        pdfOssUrl?: string(name='pdf_oss_url'),
        project?: string(name='project'),
        promptMessage?: string(name='prompt_message', description='提示信息'),
        purchaserName?: string(name='purchaser_name'),
        purchaserTaxNo?: string(name='purchaser_tax_no'),
        purchaserType?: int32(name='purchaser_type'),
        taxAmount?: string(name='tax_amount', example='108.17'),
        taxRate?: string(name='tax_rate', example='9%'),
        ticketNo?: string(name='ticket_no', example='784-1111111111'),
        ticketPrice?: string(name='ticket_price', example='1190'),
        totalPrice?: string(name='total_price', example='1360'),
        validationCode?: string(name='validation_code', description='验证码', example='9817'),
      }
    ](name='items'),
    pageNo?: int32(name='page_no', example='1'),
    pageSize?: int32(name='page_size', example='20'),
    totalPage?: int32(name='total_page', example='2'),
    totalSize?: int32(name='total_size', example='30'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightItineraryScanQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightItineraryScanQueryResponseBody(name='body'),
}

/**
 * @summary 查询机票行程单扫描件
 *
 * @param request FlightItineraryScanQueryRequest
 * @param headers FlightItineraryScanQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightItineraryScanQueryResponse
 */
async function flightItineraryScanQueryWithOptions(request: FlightItineraryScanQueryRequest, headers: FlightItineraryScanQueryHeaders, runtime: Util.RuntimeOptions): FlightItineraryScanQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billDate)) {
    query['bill_date'] = request.billDate;
  }
  if (!Util.isUnset(request.billId)) {
    query['bill_id'] = request.billId;
  }
  if (!Util.isUnset(request.invoiceSubTaskId)) {
    query['invoice_sub_task_id'] = request.invoiceSubTaskId;
  }
  if (!Util.isUnset(request.itineraryNum)) {
    query['itinerary_num'] = request.itineraryNum;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.ticketNo)) {
    query['ticket_no'] = request.ticketNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightItineraryScanQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/scan/v1/flight-itinerary`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询机票行程单扫描件
 *
 * @param request FlightItineraryScanQueryRequest
 * @return FlightItineraryScanQueryResponse
 */
async function flightItineraryScanQuery(request: FlightItineraryScanQueryRequest): FlightItineraryScanQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightItineraryScanQueryHeaders{};
  return flightItineraryScanQueryWithOptions(request, headers, runtime);
}

model FlightListingSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightListingSearchRequest {
  airlineCode?: string(name='airline_code', example='MU'),
  arrCityCode?: string(name='arr_city_code', description='This parameter is required.', example='HGH'),
  cabinClass?: string(name='cabin_class', example='Y'),
  depCityCode?: string(name='dep_city_code', description='This parameter is required.', example='BJS'),
  depDate?: string(name='dep_date', description='This parameter is required.', example='2023-02-26'),
}

model FlightListingSearchResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    flightList?: [ 
      {
        airlineInfo?: {
          airlineCode?: string(name='airline_code', example='CA'),
          airlineName?: string(name='airline_name'),
          airlineSimpleName?: string(name='airline_simple_name'),
        }(name='airline_info'),
        arrAirportInfo?: {
          airportCode?: string(name='airport_code', example='HGH'),
          airportName?: string(name='airport_name'),
          cityCode?: string(name='city_code', example='HGH'),
          cityName?: string(name='city_name'),
          terminal?: string(name='terminal', example='T3'),
        }(name='arr_airport_info'),
        arrDate?: string(name='arr_date', example='yyyy-MM-dd HH:mm:ss'),
        basicCabinPrice?: int32(name='basic_cabin_price', example='12456'),
        buildPrice?: int32(name='build_price', example='100'),
        cabin?: string(name='cabin', example='Y'),
        cabinClass?: string(name='cabin_class', example='2'),
        carrierAirline?: string(name='carrier_airline', example='FM'),
        carrierNo?: string(name='carrier_no', example='FM9152'),
        depAirportInfo?: {
          airportCode?: string(name='airport_code', example='PEK'),
          airportName?: string(name='airport_name'),
          cityCode?: string(name='city_code', example='BJS'),
          cityName?: string(name='city_name'),
          terminal?: string(name='terminal', example='T3'),
        }(name='dep_airport_info'),
        depCityCode?: string(name='dep_city_code', example='BJS'),
        depDate?: string(name='dep_date', example='yyyy-MM-dd HH:mm:ss'),
        discount?: int32(name='discount', example='1'),
        flightNo?: string(name='flight_no', example='CA1234'),
        flightRuleList?: [ 
          {
            baggageInfo?: string(name='baggage_info', example='demo'),
            baggageItem?: {
              baggageSubItems?: [ 
                {
                  baggageSubContentVisualizes?: [ 
                    {
                      baggageDesc?: [ string ](name='baggage_desc'),
                      baggageSubContentType?: int32(name='baggage_sub_content_type', example='1'),
                      description?: {
                        desc?: string(name='desc'),
                        icon?: string(name='icon', example='https://gw.alicdn.com/imgextra/i4/O1CN01UynXG31pjsEtA3tMF_!!6000000005397-2-tps-36-36.png'),
                        image?: string(name='image', example='https://gw.alicdn.com/imgextra/i1/O1CN01qe7wL21gJ0SmEXXL7_!!6000000004120-2-tps-1206-768.png'),
                        title?: string(name='title'),
                      }(name='description'),
                      imageDO?: {
                        image?: string(name='image', example='demo'),
                        largest?: string(name='largest', example='50'),
                        middle?: string(name='middle', example='40'),
                        smallest?: string(name='smallest', example='20'),
                      }(name='image_d_o'),
                      isHighlight?: boolean(name='is_highlight', example='true'),
                      subTitle?: string(name='sub_title'),
                    }
                  ](name='baggage_sub_content_visualizes'),
                  extraContentVisualizes?: [ any ](name='extra_content_visualizes'),
                  isStruct?: boolean(name='is_struct', example='true'),
                  ptc?: string(name='ptc', description='PTC', example='ADT'),
                  title?: string(name='title'),
                }
              ](name='baggage_sub_items'),
              index?: int32(name='index', example='1'),
              tableHead?: string(name='table_head'),
              tips?: {
                logo?: string(name='logo', example='https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png'),
                tipsDesc?: string(name='tips_desc'),
                tipsImage?: string(name='tips_image', example='https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png'),
              }(name='tips'),
              title?: string(name='title'),
              type?: int32(name='type', example='1'),
            }(name='baggage_item'),
            changeRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='change_rule'),
            changeRuleItem?: {
              extraContents?: [ 
                {
                  content?: string(name='content'),
                  title?: string(name='title'),
                }
              ](name='extra_contents'),
              index?: int32(name='index', example='0'),
              refundSubItems?: [ 
                {
                  isStruct?: boolean(name='is_struct', description='isStruct : true', example='true'),
                  ptc?: string(name='ptc', description='PTC', example='ADT'),
                  refundSubContents?: [ 
                    {
                      feeDesc?: string(name='fee_desc'),
                      feeRange?: string(name='fee_range'),
                      style?: int32(name='style', example='1'),
                    }
                  ](name='refund_sub_contents'),
                  title?: string(name='title'),
                }
              ](name='refund_sub_items'),
              subTableHead?: [ string ](name='sub_table_head'),
              tableHead?: string(name='table_head'),
              title?: string(name='title'),
              type?: int32(name='type', example='1'),
            }(name='change_rule_item'),
            extra?: string(name='extra', example='{}'),
            refundRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='refund_rule'),
            refundRuleItem?: {
              extraContents?: [ 
                {
                  content?: string(name='content', example='demo'),
                  title?: string(name='title', example='demo'),
                }
              ](name='extra_contents'),
              index?: int32(name='index', example='1'),
              refundSubItems?: [ 
                {
                  isStruct?: boolean(name='is_struct', example='true'),
                  ptc?: string(name='ptc', description='PTC', example='ADT'),
                  refundSubContents?: [ 
                    {
                      feeDesc?: string(name='fee_desc'),
                      feeRange?: string(name='fee_range'),
                      style?: int32(name='style', example='1'),
                    }
                  ](name='refund_sub_contents'),
                  title?: string(name='title'),
                }
              ](name='refund_sub_items'),
              subTableHead?: [ string ](name='sub_table_head'),
              tableHead?: string(name='table_head'),
              title?: string(name='title'),
              type?: int32(name='type', example='1'),
            }(name='refund_rule_item'),
            signRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='sign_rule'),
            tuigaiqianInfo?: string(name='tuigaiqian_info'),
            upgradeRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='upgrade_rule'),
          }
        ](name='flight_rule_list'),
        flightRuleListStr?: string(name='flight_rule_list_str', example='demo'),
        flightSize?: string(name='flight_size'),
        flightType?: string(name='flight_type', example='demo'),
        invoiceType?: int32(name='invoice_type', example='1'),
        isProtocol?: boolean(name='is_protocol', example='true'),
        isShare?: boolean(name='is_share', example='false'),
        isStop?: boolean(name='is_stop', example='false'),
        isTransfer?: boolean(name='is_transfer', example='false'),
        mealDesc?: string(name='meal_desc'),
        oilPrice?: int32(name='oil_price', example='100'),
        otaItemId?: string(name='ota_item_id', example='4ec61b13fc9746f99c072a16bfc265af_0'),
        price?: int32(name='price', example='100'),
        productType?: long(name='product_type', example='1'),
        productTypeDesc?: string(name='product_type_desc'),
        promotionPrice?: string(name='promotion_price', example='100'),
        remainedSeatCount?: string(name='remained_seat_count', example='1'),
        secretParams?: string(name='secret_params', example='1000_1_0'),
        segmentNumber?: string(name='segment_number', example='1'),
        stopArrTime?: string(name='stop_arr_time', example='yyyy-MM-dd HH:mm:ss'),
        stopCity?: string(name='stop_city', example='HGH'),
        stopDepTime?: string(name='stop_dep_time', example='yyyy-MM-dd HH:mm:ss'),
        ticketPrice?: int32(name='ticket_price', example='100'),
        totalPrice?: string(name='total_price', example='100'),
        tripType?: int32(name='trip_type', example='1'),
      }
    ](name='flight_list'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightListingSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightListingSearchResponseBody(name='body'),
}

/**
 * @summary 航班列表搜索
 *
 * @param request FlightListingSearchRequest
 * @param headers FlightListingSearchHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightListingSearchResponse
 */
async function flightListingSearchWithOptions(request: FlightListingSearchRequest, headers: FlightListingSearchHeaders, runtime: Util.RuntimeOptions): FlightListingSearchResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.airlineCode)) {
    query['airline_code'] = request.airlineCode;
  }
  if (!Util.isUnset(request.arrCityCode)) {
    query['arr_city_code'] = request.arrCityCode;
  }
  if (!Util.isUnset(request.cabinClass)) {
    query['cabin_class'] = request.cabinClass;
  }
  if (!Util.isUnset(request.depCityCode)) {
    query['dep_city_code'] = request.depCityCode;
  }
  if (!Util.isUnset(request.depDate)) {
    query['dep_date'] = request.depDate;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightListingSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/flight/action/listing-search`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 航班列表搜索
 *
 * @param request FlightListingSearchRequest
 * @return FlightListingSearchResponse
 */
async function flightListingSearch(request: FlightListingSearchRequest): FlightListingSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightListingSearchHeaders{};
  return flightListingSearchWithOptions(request, headers, runtime);
}

model FlightListingSearchV2Headers {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='Dj2laAwE00'),
}

model FlightListingSearchV2Request {
  airlineCode?: string(name='airline_code', example='CA'),
  cabinTypeList?: [ int32 ](name='cabin_type_list'),
  directOnly?: boolean(name='direct_only', example='true'),
  isvName?: string(name='isv_name', description='This parameter is required.', example='cheshi'),
  needMultiClassPrice?: boolean(name='need_multi_class_price', example='false'),
  needQueryServiceFee?: boolean(name='need_query_service_fee', example='true'),
  needShareFlight?: boolean(name='need_share_flight', example='true'),
  needYCBestPrice?: boolean(name='need_y_c_best_price', example='false'),
  searchJourneys?: [ 
    {
      arrCityCode?: string(name='arr_city_code', description='This parameter is required.', example='HGH'),
      depCityCode?: string(name='dep_city_code', description='This parameter is required.', example='BJS'),
      depDate?: string(name='dep_date', description='This parameter is required.', example='2023-09-01'),
      selectedFlights?: [ 
        {
          arrAirportCode?: string(name='arr_airport_code', example='HGH'),
          arrCityCode?: string(name='arr_city_code', example='HGH'),
          depAirportCode?: string(name='dep_airport_code', example='PKX'),
          depCityCode?: string(name='dep_city_code', example='BJS'),
          flightTime?: string(name='flight_time', example='2023-09-01 07:10:00'),
          marketFlightNo?: string(name='market_flight_no', example='HO3925'),
          operateFlightNo?: string(name='operate_flight_no', example='CX601'),
        }
      ](name='selected_flights'),
    }
  ](name='search_journeys', description='This parameter is required.'),
  searchMode?: int32(name='search_mode', description='This parameter is required.', example='0'),
  tripType?: int32(name='trip_type', description='This parameter is required.', example='1'),
}

model FlightListingSearchV2ShrinkRequest {
  airlineCode?: string(name='airline_code', example='CA'),
  cabinTypeListShrink?: string(name='cabin_type_list'),
  directOnly?: boolean(name='direct_only', example='true'),
  isvName?: string(name='isv_name', description='This parameter is required.', example='cheshi'),
  needMultiClassPrice?: boolean(name='need_multi_class_price', example='false'),
  needQueryServiceFee?: boolean(name='need_query_service_fee', example='true'),
  needShareFlight?: boolean(name='need_share_flight', example='true'),
  needYCBestPrice?: boolean(name='need_y_c_best_price', example='false'),
  searchJourneysShrink?: string(name='search_journeys', description='This parameter is required.'),
  searchMode?: int32(name='search_mode', description='This parameter is required.', example='0'),
  tripType?: int32(name='trip_type', description='This parameter is required.', example='1'),
}

model FlightListingSearchV2ResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    flightItemList?: [ 
      {
        bestPriceItem?: {
          flightRuleInfos?: map[string]ModuleFlightItemListBestPriceItemFlightRuleInfosValue(name='flight_rule_infos'),
          itemId?: string(name='item_id', example='e50d380fc05942cc8ac57af8ae02f448_0'),
          shoppingItemMap?: map[string]ModuleFlightItemListBestPriceItemShoppingItemMapValue(name='shopping_item_map'),
          subItemPositionMap?: map[string][ ModuleFlightItemListBestPriceItemSubItemPositionMapValue           ](name='sub_item_position_map'),
          subItems?: [ 
            {
              shoppingItemMap?: map[string]ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValue(name='shopping_item_map'),
              uniqKey?: string(name='uniq_key', example='07df0bd9-f803-4a50-8449-f4bd675d9939'),
            }
          ](name='sub_items'),
        }(name='best_price_item'),
        flightJourneyInfos?: [ 
          {
            arrCityCode?: string(name='arr_city_code', example='HGH'),
            arrCityName?: string(name='arr_city_name'),
            arrTime?: string(name='arr_time', example='2023-08-13 09:45'),
            depCityCode?: string(name='dep_city_code', example='BJS'),
            depCityName?: string(name='dep_city_name'),
            depTime?: string(name='dep_time', example='2023-08-13 07:25'),
            duration?: int32(name='duration', example='140'),
            extensions?: map[string]string(name='extensions'),
            flightSegmentInfos?: [ 
              {
                airlineInfo?: {
                  airlineChineseName?: string(name='airline_chinese_name'),
                  airlineChineseShortName?: string(name='airline_chinese_short_name'),
                  airlineCode?: string(name='airline_code', example='MU'),
                  airlineIcon?: string(name='airline_icon', example='https://gw.alicdn.com/tfs/TB15EXDFHY1gK0jSZTEXXXDQVXa-450-450.png_80x80.jpg'),
                  cheapFlight?: boolean(name='cheap_flight', example='false'),
                }(name='airline_info'),
                arrAirportInfo?: {
                  airportCode?: string(name='airport_code', example='PKX'),
                  airportName?: string(name='airport_name'),
                  airportNameColor?: string(name='airport_name_color', example='#FF7300'),
                  airportShortName?: string(name='airport_short_name'),
                  terminal?: string(name='terminal', example='--'),
                }(name='arr_airport_info'),
                arrCityCode?: string(name='arr_city_code', example='BJS'),
                arrCityName?: string(name='arr_city_name'),
                arrTime?: string(name='arr_time', example='2023-08-13 09:45'),
                baggageDesc?: string(name='baggage_desc'),
                depAirportInfo?: {
                  airportCode?: string(name='airport_code', example='HGH'),
                  airportName?: string(name='airport_name'),
                  airportNameColor?: string(name='airport_name_color', example='#FF7300'),
                  airportShortName?: string(name='airport_short_name'),
                  terminal?: string(name='terminal', example='T3'),
                }(name='dep_airport_info'),
                depCityCode?: string(name='dep_city_code', example='HGH'),
                depCityName?: string(name='dep_city_name'),
                depTime?: string(name='dep_time', example='2023-08-13 07:25'),
                duration?: int32(name='duration', description='duration', example='140'),
                extraInfo?: map[string]any(name='extra_info'),
                flightNo?: string(name='flight_no', example='MU5131'),
                flightShareInfo?: {
                  operatingAirlineInfo?: {
                    airlineChineseName?: string(name='airline_chinese_name'),
                    airlineChineseShortName?: string(name='airline_chinese_short_name'),
                    airlineCode?: string(name='airline_code', example='DR'),
                    airlineIcon?: string(name='airline_icon', example='https://gw.alicdn.com/tfs/TB1gSXBFUT1gK0jSZFhXXaAtVXa-450-450.png_80x80.jpg'),
                    cheapFlight?: boolean(name='cheap_flight', example='false'),
                  }(name='operating_airline_info'),
                  operatingFlightNo?: string(name='operating_flight_no', example='CX601'),
                }(name='flight_share_info'),
                flightSize?: string(name='flight_size'),
                flightStopInfo?: {
                  stopAirport?: string(name='stop_airport', example='HGH'),
                  stopAirportName?: string(name='stop_airport_name'),
                  stopArrTerm?: string(name='stop_arr_term', example='T3'),
                  stopArrTime?: string(name='stop_arr_time', example='BJS'),
                  stopCityCode?: string(name='stop_city_code', example='HGH'),
                  stopCityName?: string(name='stop_city_name', example='HGH'),
                  stopCityNames?: [ string ](name='stop_city_names'),
                  stopDepTerm?: string(name='stop_dep_term', example='T4'),
                  stopDepTime?: string(name='stop_dep_time', example='2023-08-13 07:25'),
                  stopTime?: string(name='stop_time'),
                }(name='flight_stop_info'),
                flightType?: string(name='flight_type', example='320'),
                manufacturer?: string(name='manufacturer'),
                mealDesc?: string(name='meal_desc'),
                miles?: int32(name='miles'),
                onTimeRate?: string(name='on_time_rate'),
                oneMore?: int32(name='one_more', example='0'),
                oneMoreShow?: string(name='one_more_show'),
                segmentIndex?: int32(name='segment_index', example='0'),
                share?: boolean(name='share', example='false'),
                shortFlightSize?: string(name='short_flight_size'),
                stop?: boolean(name='stop', example='false'),
                totalTime?: string(name='total_time'),
                transferTime?: string(name='transfer_time'),
                transferTimeNumber?: int32(name='transfer_time_number'),
              }
            ](name='flight_segment_infos'),
            journeyIndex?: int32(name='journey_index', example='0'),
            transferTime?: int32(name='transfer_time', example='0'),
          }
        ](name='flight_journey_infos'),
        itemList?: [ 
          {
            flightRuleInfos?: map[string]ModuleFlightItemListItemListFlightRuleInfosValue(name='flight_rule_infos'),
            itemId?: string(name='item_id', example='e50d380fc05942cc8ac57af8ae02f448_0'),
            shoppingItemMap?: map[string]ModuleFlightItemListItemListShoppingItemMapValue(name='shopping_item_map'),
            subItemPositionMap?: map[string][ ModuleFlightItemListItemListSubItemPositionMapValue             ](name='sub_item_position_map'),
            subItems?: [ 
              {
                shoppingItemMap?: map[string]ModuleFlightItemListItemListSubItemsShoppingItemMapValue(name='shopping_item_map'),
                tag?: string(name='tag'),
                uniqKey?: string(name='uniq_key', example='07df0bd9-f803-4a50-8449-f4bd675d9939'),
              }
            ](name='sub_items'),
          }
        ](name='item_list'),
      }
    ](name='flight_item_list'),
    searchMode?: int32(name='search_mode', example='0'),
    tripType?: int32(name='trip_type', example='1'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', description='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210e842b16611337974412836dae27'),
}

model FlightListingSearchV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightListingSearchV2ResponseBody(name='body'),
}

/**
 * @summary 航班列表搜索
 *
 * @param tmpReq FlightListingSearchV2Request
 * @param headers FlightListingSearchV2Headers
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightListingSearchV2Response
 */
async function flightListingSearchV2WithOptions(tmpReq: FlightListingSearchV2Request, headers: FlightListingSearchV2Headers, runtime: Util.RuntimeOptions): FlightListingSearchV2Response {
  Util.validateModel(tmpReq);
  var request = new FlightListingSearchV2ShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.cabinTypeList)) {
    request.cabinTypeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cabinTypeList, 'cabin_type_list', 'json');
  }
  if (!Util.isUnset(tmpReq.searchJourneys)) {
    request.searchJourneysShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.searchJourneys, 'search_journeys', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.airlineCode)) {
    query['airline_code'] = request.airlineCode;
  }
  if (!Util.isUnset(request.cabinTypeListShrink)) {
    query['cabin_type_list'] = request.cabinTypeListShrink;
  }
  if (!Util.isUnset(request.directOnly)) {
    query['direct_only'] = request.directOnly;
  }
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.needMultiClassPrice)) {
    query['need_multi_class_price'] = request.needMultiClassPrice;
  }
  if (!Util.isUnset(request.needQueryServiceFee)) {
    query['need_query_service_fee'] = request.needQueryServiceFee;
  }
  if (!Util.isUnset(request.needShareFlight)) {
    query['need_share_flight'] = request.needShareFlight;
  }
  if (!Util.isUnset(request.needYCBestPrice)) {
    query['need_y_c_best_price'] = request.needYCBestPrice;
  }
  if (!Util.isUnset(request.searchJourneysShrink)) {
    query['search_journeys'] = request.searchJourneysShrink;
  }
  if (!Util.isUnset(request.searchMode)) {
    query['search_mode'] = request.searchMode;
  }
  if (!Util.isUnset(request.tripType)) {
    query['trip_type'] = request.tripType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightListingSearchV2',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v2/flight/action/listing-search`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 航班列表搜索
 *
 * @param request FlightListingSearchV2Request
 * @return FlightListingSearchV2Response
 */
async function flightListingSearchV2(request: FlightListingSearchV2Request): FlightListingSearchV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightListingSearchV2Headers{};
  return flightListingSearchV2WithOptions(request, headers, runtime);
}

model FlightModifyApplyV2Headers {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightModifyApplyV2Request {
  cacheKey?: string(name='cache_key', example='72e961f8-930b-43c1-a4ca-18a6f28349c6distributionModifyCacheInfo'),
  contactPhone?: string(name='contact_phone', example='17816963077'),
  isvName?: string(name='isv_name', example='name'),
  itemId?: string(name='item_id', example='fa2fb23a859a4e78b5ddb87a6a23094b_0'),
  orderId?: long(name='order_id', example='1017002195370467138'),
  outOrderId?: string(name='out_order_id', example='1017002195370467137'),
  outSubOrderId?: string(name='out_sub_order_id', example='1019195786853020'),
  passengerSegmentRelations?: [ 
    {
      passengerId?: string(name='passenger_id', example='3243028'),
      segmentIdList?: [ string ](name='segment_id_list'),
    }
  ](name='passenger_segment_relations'),
  reason?: string(name='reason'),
  sessionId?: string(name='session_id', description='sessionId', example='a2ffebfe733742aab5c491d960ba3d59'),
  voluntary?: boolean(name='voluntary', example='true'),
}

model FlightModifyApplyV2ShrinkRequest {
  cacheKey?: string(name='cache_key', example='72e961f8-930b-43c1-a4ca-18a6f28349c6distributionModifyCacheInfo'),
  contactPhone?: string(name='contact_phone', example='17816963077'),
  isvName?: string(name='isv_name', example='name'),
  itemId?: string(name='item_id', example='fa2fb23a859a4e78b5ddb87a6a23094b_0'),
  orderId?: long(name='order_id', example='1017002195370467138'),
  outOrderId?: string(name='out_order_id', example='1017002195370467137'),
  outSubOrderId?: string(name='out_sub_order_id', example='1019195786853020'),
  passengerSegmentRelationsShrink?: string(name='passenger_segment_relations'),
  reason?: string(name='reason'),
  sessionId?: string(name='session_id', description='sessionId', example='a2ffebfe733742aab5c491d960ba3d59'),
  voluntary?: boolean(name='voluntary', example='true'),
}

model FlightModifyApplyV2ResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    orderId?: string(name='order_id', example='1017002195370467138'),
    outOrderId?: string(name='out_order_id', example='1017002195370467137'),
    outSubOrderId?: string(name='out_sub_order_id', example='1019195786853020'),
    subOrderId?: string(name='sub_order_id', example='1019195786853020'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', description='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='212a8b8216915622178333839e665d'),
}

model FlightModifyApplyV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightModifyApplyV2ResponseBody(name='body'),
}

/**
 * @summary 机票改签申请
 *
 * @param tmpReq FlightModifyApplyV2Request
 * @param headers FlightModifyApplyV2Headers
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightModifyApplyV2Response
 */
async function flightModifyApplyV2WithOptions(tmpReq: FlightModifyApplyV2Request, headers: FlightModifyApplyV2Headers, runtime: Util.RuntimeOptions): FlightModifyApplyV2Response {
  Util.validateModel(tmpReq);
  var request = new FlightModifyApplyV2ShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.passengerSegmentRelations)) {
    request.passengerSegmentRelationsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerSegmentRelations, 'passenger_segment_relations', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.cacheKey)) {
    body['cache_key'] = request.cacheKey;
  }
  if (!Util.isUnset(request.contactPhone)) {
    body['contact_phone'] = request.contactPhone;
  }
  if (!Util.isUnset(request.isvName)) {
    body['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.itemId)) {
    body['item_id'] = request.itemId;
  }
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.outSubOrderId)) {
    body['out_sub_order_id'] = request.outSubOrderId;
  }
  if (!Util.isUnset(request.passengerSegmentRelationsShrink)) {
    body['passenger_segment_relations'] = request.passengerSegmentRelationsShrink;
  }
  if (!Util.isUnset(request.reason)) {
    body['reason'] = request.reason;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['session_id'] = request.sessionId;
  }
  if (!Util.isUnset(request.voluntary)) {
    body['voluntary'] = request.voluntary;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FlightModifyApplyV2',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v2/modify/action/apply`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票改签申请
 *
 * @param request FlightModifyApplyV2Request
 * @return FlightModifyApplyV2Response
 */
async function flightModifyApplyV2(request: FlightModifyApplyV2Request): FlightModifyApplyV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightModifyApplyV2Headers{};
  return flightModifyApplyV2WithOptions(request, headers, runtime);
}

model FlightModifyCancelV2Headers {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightModifyCancelV2Request {
  isvName?: string(name='isv_name'),
  orderId?: long(name='order_id'),
  outOrderId?: string(name='out_order_id'),
  outSubOrderId?: string(name='out_sub_order_id'),
  subOrderId?: long(name='sub_order_id'),
}

model FlightModifyCancelV2ResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: map[string]any(name='module', description='module'),
  requestId?: string(name='requestId', description='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightModifyCancelV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightModifyCancelV2ResponseBody(name='body'),
}

/**
 * @summary 机票改签取消
 *
 * @param request FlightModifyCancelV2Request
 * @param headers FlightModifyCancelV2Headers
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightModifyCancelV2Response
 */
async function flightModifyCancelV2WithOptions(request: FlightModifyCancelV2Request, headers: FlightModifyCancelV2Headers, runtime: Util.RuntimeOptions): FlightModifyCancelV2Response {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    query['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.outSubOrderId)) {
    query['out_sub_order_id'] = request.outSubOrderId;
  }
  if (!Util.isUnset(request.subOrderId)) {
    query['sub_order_id'] = request.subOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightModifyCancelV2',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v2/modify/action/cancel`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票改签取消
 *
 * @param request FlightModifyCancelV2Request
 * @return FlightModifyCancelV2Response
 */
async function flightModifyCancelV2(request: FlightModifyCancelV2Request): FlightModifyCancelV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightModifyCancelV2Headers{};
  return flightModifyCancelV2WithOptions(request, headers, runtime);
}

model FlightModifyListingSearchV2Headers {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightModifyListingSearchV2Request {
  cabinClass?: [ int32 ](name='cabin_class'),
  depDate?: [ string ](name='dep_date'),
  interfaceCallerIsSupportRetry?: boolean(name='interface_caller_is_support_retry'),
  isvName?: string(name='isv_name', example='name'),
  orderId?: long(name='order_id', example='1017002195370467138'),
  outOrderId?: string(name='out_order_id', example='1017002195370467137'),
  passengerSegmentRelations?: [ 
    {
      passengerId?: string(name='passenger_id', example='3243028'),
      segmentIdList?: [ string ](name='segment_id_list'),
    }
  ](name='passenger_segment_relations'),
  searchMode?: int32(name='search_mode', example='2'),
  searchRetryToken?: string(name='search_retry_token'),
  selectedSegments?: [ 
    {
      arrCityCode?: string(name='arr_city_code', example='XIL'),
      depCityCode?: string(name='dep_city_code', example='BJS'),
      depDateTime?: string(name='dep_date_time', example='2023-09-17 18:15:00'),
      journeySeq?: int32(name='journey_seq', example='0'),
      marketingFlightNo?: string(name='marketing_flight_no', example='CA8625'),
      operatingFlightNo?: string(name='operating_flight_no', example='MU8625'),
      segmentSeq?: int32(name='segment_seq', example='0'),
    }
  ](name='selected_segments'),
  sessionId?: string(name='session_id', example='a2ffebfe733742aab5c491d960ba3d59'),
  voluntary?: boolean(name='voluntary', example='true'),
}

model FlightModifyListingSearchV2ShrinkRequest {
  cabinClassShrink?: string(name='cabin_class'),
  depDateShrink?: string(name='dep_date'),
  interfaceCallerIsSupportRetry?: boolean(name='interface_caller_is_support_retry'),
  isvName?: string(name='isv_name', example='name'),
  orderId?: long(name='order_id', example='1017002195370467138'),
  outOrderId?: string(name='out_order_id', example='1017002195370467137'),
  passengerSegmentRelationsShrink?: string(name='passenger_segment_relations'),
  searchMode?: int32(name='search_mode', example='2'),
  searchRetryToken?: string(name='search_retry_token'),
  selectedSegmentsShrink?: string(name='selected_segments'),
  sessionId?: string(name='session_id', example='a2ffebfe733742aab5c491d960ba3d59'),
  voluntary?: boolean(name='voluntary', example='true'),
}

model FlightModifyListingSearchV2ResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    directFlightList?: [ 
      {
        airlineInfo?: {
          airlineChineseName?: string(name='airline_chinese_name'),
          airlineChineseShortName?: string(name='airline_chinese_short_name'),
          airlineCode?: string(name='airline_code', example='CA'),
          airlineIcon?: string(name='airline_icon', example='//gw.alicdn.com/tfs/TB12fJAFHr1gK0jSZR0XXbP8XXa-450-450.png_80x80.jpg'),
          cheapFlight?: boolean(name='cheap_flight', example='false'),
        }(name='airline_info'),
        arrAirportInfo?: {
          airportCode?: string(name='airport_code', example='XIL'),
          airportName?: string(name='airport_name'),
          airportShortName?: string(name='airport_short_name'),
          terminal?: string(name='terminal', example='T3'),
        }(name='arr_airport_info'),
        arrCityCode?: string(name='arr_city_code', example='BJS'),
        arrTime?: string(name='arr_time', example='2023-09-18 10:25:00'),
        cabinClass?: string(name='cabinClass'),
        cabinClassName?: string(name='cabinClassName'),
        depAirportInfo?: {
          airportCode?: string(name='airport_code', example='PEK'),
          airportName?: string(name='airport_name'),
          airportShortName?: string(name='airport_short_name'),
          terminal?: string(name='terminal', example='T2'),
        }(name='dep_airport_info'),
        depCityCode?: string(name='dep_city_code', example='XIL'),
        depTime?: string(name='dep_time', example='2023-09-18 09:10:00'),
        duration?: int32(name='duration', example='240'),
        flightNo?: string(name='flight_no', example='CA1110'),
        flightShareInfo?: {
          operatingAirlineInfo?: {
            airlineChineseName?: string(name='airline_chinese_name'),
            airlineChineseShortName?: string(name='airline_chinese_short_name'),
            airlineCode?: string(name='airline_code'),
            airlineIcon?: string(name='airline_icon'),
            cheapFlight?: boolean(name='cheap_flight', example='false'),
          }(name='operating_airline_info'),
          operatingFlightNo?: string(name='operating_flight_no'),
        }(name='flight_share_info'),
        flightSize?: string(name='flight_size'),
        flightStopInfo?: {
          stopAirport?: string(name='stop_airport'),
          stopArrTerm?: string(name='stop_arr_term'),
          stopArrTime?: string(name='stop_arr_time'),
          stopCityCode?: string(name='stop_city_code'),
          stopCityName?: string(name='stop_city_name'),
          stopDepTerm?: string(name='stop_dep_term'),
          stopDepTime?: string(name='stop_dep_time'),
        }(name='flight_stop_info'),
        flightTransferInfo?: {
          transferAirlineInfo?: {
            airlineChineseName?: string(name='airline_chinese_name'),
            airlineChineseShortName?: string(name='airline_chinese_short_name'),
            airlineCode?: string(name='airline_code'),
            airlineIcon?: string(name='airline_icon'),
            cheapFlight?: boolean(name='cheap_flight', example='false'),
          }(name='transfer_airline_info'),
          transferCityCode?: string(name='transfer_city_code'),
          transferCityName?: string(name='transfer_city_name'),
          transferDepTime?: string(name='transfer_dep_time'),
          transferFlightNo?: string(name='transfer_flight_no'),
          transferFlightSize?: string(name='transfer_flight_size'),
          transferShare?: boolean(name='transfer_share', example='false'),
          transferStopTime?: int32(name='transfer_stop_time', example='60'),
        }(name='flight_transfer_info'),
        flightType?: string(name='flight_type', example='ARJ'),
        journeySeq?: int32(name='journey_seq', example='0'),
        leftNum?: string(name='left_num', example='8'),
        manufacturer?: string(name='manufacturer'),
        mealDesc?: string(name='meal_desc'),
        priceInfoDTO?: {
          adultPrice?: int32(name='adult_price', example='126000'),
          adultTax?: int32(name='adult_tax', example='11000'),
          adultTotalPrice?: int32(name='adult_total_price', example='137000'),
          beforeControlPrice?: int32(name='before_control_price', example='126000'),
          childPrice?: int32(name='child_price', example='64000'),
          childTax?: int32(name='child_tax', example='2000'),
          childTotalPrice?: int32(name='child_total_price', example='66000'),
          infantPrice?: int32(name='infant_price', example='12000'),
          infantTax?: int32(name='infant_tax', example='0'),
          infantTotalPrice?: int32(name='infant_total_price', example='12000'),
          originalAdultPrice?: int32(name='original_adult_price', example='1300'),
          originalAdultTotalPrice?: int32(name='original_adult_total_price', example='12300'),
          reShopPriceInfoDTO?: {
            reShopAdultChangeFee?: int32(name='re_shop_adult_change_fee', example='-1'),
            reShopAdultPrice?: int32(name='re_shop_adult_price', example='-1'),
            reShopAdultPriceGap?: int32(name='re_shop_adult_price_gap', example='-1'),
            reShopChildChangeFee?: int32(name='re_shop_child_change_fee', example='-1'),
            reShopChildPrice?: int32(name='re_shop_child_price', example='-1'),
            reShopChildPriceGap?: int32(name='re_shop_child_price_gap', example='-1'),
            reShopInfChangeFee?: int32(name='re_shop_inf_change_fee', example='-1'),
            reShopInfPrice?: int32(name='re_shop_inf_price', example='-1'),
            reShopInfPriceGap?: int32(name='re_shop_inf_price_gap', example='-1'),
          }(name='re_shop_price_info_d_t_o'),
        }(name='price_info_d_t_o'),
        segmentSeq?: int32(name='segment_seq', example='0'),
        share?: boolean(name='share', example='false'),
        shortFlightSize?: string(name='short_flight_size'),
        spanDay?: string(name='span_day'),
        stop?: boolean(name='stop', example='false'),
        transfer?: boolean(name='transfer', example='false'),
      }
    ](name='direct_flight_list'),
    nextReqWaitTime?: long(name='next_req_wait_time'),
    retry?: boolean(name='retry'),
    searchRetryToken?: string(name='search_retry_token'),
    sessionId?: string(name='session_id', example='a2ffebfe733742aab5c491d960ba3d59'),
    transferFlightList?: [ 
      {
        airlineInfo?: {
          airlineChineseName?: string(name='airline_chinese_name'),
          airlineChineseShortName?: string(name='airline_chinese_short_name'),
          airlineCode?: string(name='airline_code'),
          airlineIcon?: string(name='airline_icon'),
          cheapFlight?: boolean(name='cheap_flight'),
        }(name='airline_info'),
        arrAirportInfo?: {
          airportCode?: string(name='airport_code'),
          airportName?: string(name='airport_name'),
          airportShortName?: string(name='airport_short_name'),
          terminal?: string(name='terminal'),
        }(name='arr_airport_info'),
        arrCityCode?: string(name='arr_city_code'),
        arrTime?: string(name='arr_time'),
        cabinClass?: string(name='cabinClass'),
        cabinClassName?: string(name='cabinClassName'),
        depAirportInfo?: {
          airportCode?: string(name='airport_code'),
          airportName?: string(name='airport_name'),
          airportShortName?: string(name='airport_short_name'),
          terminal?: string(name='terminal'),
        }(name='dep_airport_info'),
        depCityCode?: string(name='dep_city_code'),
        depTime?: string(name='dep_time'),
        duration?: int32(name='duration', example='240'),
        flightNo?: string(name='flight_no'),
        flightShareInfo?: {
          operatingAirlineInfo?: {
            airlineChineseName?: string(name='airline_chinese_name'),
            airlineChineseShortName?: string(name='airline_chinese_short_name'),
            airlineCode?: string(name='airline_code'),
            airlineIcon?: string(name='airline_icon'),
            cheapFlight?: boolean(name='cheap_flight', example='false'),
          }(name='operating_airline_info'),
          operatingFlightNo?: string(name='operating_flight_no'),
        }(name='flight_share_info'),
        flightSize?: string(name='flight_size'),
        flightStopInfo?: {
          stopAirport?: string(name='stop_airport'),
          stopArrTerm?: string(name='stop_arr_term'),
          stopArrTime?: string(name='stop_arr_time'),
          stopCityCode?: string(name='stop_city_code'),
          stopCityName?: string(name='stop_city_name'),
          stopDepTerm?: string(name='stop_dep_term'),
          stopDepTime?: string(name='stop_dep_time'),
        }(name='flight_stop_info'),
        flightTransferInfo?: {
          transferAirlineInfo?: {
            airlineChineseName?: string(name='airline_chinese_name'),
            airlineChineseShortName?: string(name='airline_chinese_short_name'),
            airlineCode?: string(name='airline_code'),
            airlineIcon?: string(name='airline_icon'),
            cheapFlight?: boolean(name='cheap_flight', example='false'),
          }(name='transfer_airline_info'),
          transferCityCode?: string(name='transfer_city_code'),
          transferCityName?: string(name='transfer_city_name'),
          transferDepTime?: string(name='transfer_dep_time'),
          transferFlightNo?: string(name='transfer_flight_no'),
          transferFlightSize?: string(name='transfer_flight_size'),
          transferShare?: boolean(name='transfer_share', example='false'),
          transferStopTime?: int32(name='transfer_stop_time', example='20'),
        }(name='flight_transfer_info'),
        flightType?: string(name='flight_type'),
        journeySeq?: int32(name='journey_seq', example='0'),
        leftNum?: string(name='left_num', example='7'),
        manufacturer?: string(name='manufacturer'),
        mealDesc?: string(name='meal_desc'),
        priceInfoDTO?: {
          adultPrice?: int32(name='adult_price', example='1000'),
          adultTax?: int32(name='adult_tax', example='1000'),
          adultTotalPrice?: int32(name='adult_total_price', example='1000'),
          beforeControlPrice?: int32(name='before_control_price', example='1000'),
          childPrice?: int32(name='child_price', example='1000'),
          childTax?: int32(name='child_tax', example='1000'),
          childTotalPrice?: int32(name='child_total_price', example='1000'),
          infantPrice?: int32(name='infant_price', example='1000'),
          infantTax?: int32(name='infant_tax', example='1000'),
          infantTotalPrice?: int32(name='infant_total_price', example='1000'),
          originalAdultPrice?: int32(name='original_adult_price', example='1000'),
          originalAdultTotalPrice?: int32(name='original_adult_total_price', example='1000'),
          reShopPriceInfoDTO?: {
            reShopAdultChangeFee?: int32(name='re_shop_adult_change_fee', example='-1'),
            reShopAdultPrice?: int32(name='re_shop_adult_price', example='-1'),
            reShopAdultPriceGap?: int32(name='re_shop_adult_price_gap', example='-1'),
            reShopChildChangeFee?: int32(name='re_shop_child_change_fee', example='-1'),
            reShopChildPrice?: int32(name='re_shop_child_price', example='-1'),
            reShopChildPriceGap?: int32(name='re_shop_child_price_gap', example='-1'),
            reShopInfChangeFee?: int32(name='re_shop_inf_change_fee', example='-1'),
            reShopInfPrice?: int32(name='re_shop_inf_price', example='-1'),
            reShopInfPriceGap?: int32(name='re_shop_inf_price_gap', example='-1'),
          }(name='re_shop_price_info_d_t_o'),
        }(name='price_info_d_t_o'),
        segmentSeq?: int32(name='segment_seq', example='0'),
        share?: boolean(name='share', example='false'),
        shortFlightSize?: string(name='short_flight_size'),
        spanDay?: string(name='span_day'),
        stop?: boolean(name='stop', example='false'),
        transfer?: boolean(name='transfer', example='false'),
      }
    ](name='transfer_flight_list'),
    transferTitle?: string(name='transfer_title'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', description='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='requestId', example='2136019116915615924561621e06ee'),
}

model FlightModifyListingSearchV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightModifyListingSearchV2ResponseBody(name='body'),
}

/**
 * @summary 机票改签列表搜索
 *
 * @param tmpReq FlightModifyListingSearchV2Request
 * @param headers FlightModifyListingSearchV2Headers
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightModifyListingSearchV2Response
 */
async function flightModifyListingSearchV2WithOptions(tmpReq: FlightModifyListingSearchV2Request, headers: FlightModifyListingSearchV2Headers, runtime: Util.RuntimeOptions): FlightModifyListingSearchV2Response {
  Util.validateModel(tmpReq);
  var request = new FlightModifyListingSearchV2ShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.cabinClass)) {
    request.cabinClassShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cabinClass, 'cabin_class', 'json');
  }
  if (!Util.isUnset(tmpReq.depDate)) {
    request.depDateShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.depDate, 'dep_date', 'json');
  }
  if (!Util.isUnset(tmpReq.passengerSegmentRelations)) {
    request.passengerSegmentRelationsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerSegmentRelations, 'passenger_segment_relations', 'json');
  }
  if (!Util.isUnset(tmpReq.selectedSegments)) {
    request.selectedSegmentsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.selectedSegments, 'selected_segments', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.cabinClassShrink)) {
    query['cabin_class'] = request.cabinClassShrink;
  }
  if (!Util.isUnset(request.depDateShrink)) {
    query['dep_date'] = request.depDateShrink;
  }
  if (!Util.isUnset(request.interfaceCallerIsSupportRetry)) {
    query['interface_caller_is_support_retry'] = request.interfaceCallerIsSupportRetry;
  }
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    query['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.passengerSegmentRelationsShrink)) {
    query['passenger_segment_relations'] = request.passengerSegmentRelationsShrink;
  }
  if (!Util.isUnset(request.searchMode)) {
    query['search_mode'] = request.searchMode;
  }
  if (!Util.isUnset(request.searchRetryToken)) {
    query['search_retry_token'] = request.searchRetryToken;
  }
  if (!Util.isUnset(request.selectedSegmentsShrink)) {
    query['selected_segments'] = request.selectedSegmentsShrink;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['session_id'] = request.sessionId;
  }
  if (!Util.isUnset(request.voluntary)) {
    query['voluntary'] = request.voluntary;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightModifyListingSearchV2',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v2/modify/action/listing-search`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票改签列表搜索
 *
 * @param request FlightModifyListingSearchV2Request
 * @return FlightModifyListingSearchV2Response
 */
async function flightModifyListingSearchV2(request: FlightModifyListingSearchV2Request): FlightModifyListingSearchV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightModifyListingSearchV2Headers{};
  return flightModifyListingSearchV2WithOptions(request, headers, runtime);
}

model FlightModifyOrderDetailV2Headers {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightModifyOrderDetailV2Request {
  isvName?: string(name='isv_name', example='name'),
  modifyApplyId?: string(name='modify_apply_id', example='1019195786853020'),
  needQueryServiceFee?: boolean(name='need_query_service_fee', example='false'),
  orderId?: string(name='order_id', example='1017002195370467200'),
  outModifyApplyId?: string(name='out_modify_apply_id'),
  outOrderId?: string(name='out_order_id'),
}

model FlightModifyOrderDetailV2ResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    applyTime?: string(name='apply_time', example='2023-08-14 11:28:01'),
    attributes?: {
      baggageRule?: string(name='baggage_rule'),
      changeRule?: string(name='change_rule'),
      latestPayTime?: any(name='latest_pay_time'),
      latestPayTimeStr?: string(name='latest_pay_time_str'),
      refundRule?: string(name='refund_rule'),
    }(name='attributes'),
    bookUserEmail?: string(name='book_user_email', example='17635462345@163.com'),
    bookUserName?: string(name='book_user_name'),
    bookuserPhone?: string(name='bookuser_phone', example='17635462345'),
    changeFailReason?: string(name='change_fail_reason'),
    contactInfoDTO?: {
      contactEmail?: string(name='contact_email', example='17816963077@163.com'),
      contactName?: string(name='contact_name'),
      contactPhone?: string(name='contact_phone', example='17816963077'),
      sendMsgToPassenger?: boolean(name='send_msg_to_passenger', example='false'),
    }(name='contact_info_d_t_o'),
    destFlightInfoDTOS?: [ 
      {
        airlineCode?: string(name='airline_code', example='MU'),
        airlineIconUrl?: string(name='airline_icon_url'),
        airlineName?: string(name='airline_name'),
        arrAirportCode?: string(name='arr_airport_code', example='HGH'),
        arrAirportName?: string(name='arr_airport_name'),
        arrCityCode?: string(name='arr_city_code', example='HGH'),
        arrCityName?: string(name='arr_city_name'),
        arrTerminal?: string(name='arr_terminal'),
        arrTime?: string(name='arr_time', example='2023-10-03 09:30:00'),
        cabin?: string(name='cabin', example='Y'),
        cabinClass?: string(name='cabin_class', example='Y'),
        cabinClassName?: string(name='cabin_class_name'),
        cabinDiscount?: long(name='cabin_discount', example='10'),
        carrierAirlineCode?: string(name='carrier_airline_code'),
        carrierAirlineIconUrl?: string(name='carrier_airline_icon_url'),
        carrierAirlineName?: string(name='carrier_airline_name'),
        carrierFlightNo?: string(name='carrier_flight_no'),
        depAirportCode?: string(name='dep_airport_code', example='PKX'),
        depAirportName?: string(name='dep_airport_name'),
        depCityCode?: string(name='dep_city_code', example='BJS'),
        depCityName?: string(name='dep_city_name'),
        depTerminal?: string(name='dep_terminal'),
        depTime?: string(name='dep_time', example='2023-10-03 07:30:00'),
        flightChange?: {
          changeDesc?: string(name='change_desc'),
          changeStatus?: string(name='change_status'),
          changeStatusCode?: string(name='change_status_code'),
          newSegment?: any(name='new_segment'),
          passengerNames?: [ string ](name='passenger_names'),
        }(name='flight_change'),
        flightNo?: string(name='flight_no', example='MU5193'),
        flightType?: string(name='flight_type'),
        mealDesc?: string(name='meal_desc'),
        segmentIId?: string(name='segmentI_id', example='1194012'),
        segmentPosition?: {
          journeyIndex?: int32(name='journey_index', example='0'),
          segmentIndex?: int32(name='segment_index', example='0'),
        }(name='segment_position'),
        stopArrTime?: string(name='stop_arr_time'),
        stopCity?: string(name='stop_city'),
        stopDepTime?: string(name='stop_dep_time'),
      }
    ](name='dest_flight_info_d_t_o_s'),
    lastPayTime?: string(name='last_pay_time', example='2023-08-14 11:48:01'),
    orderId?: long(name='order_id', example='1017124195788186048'),
    outOrderId?: string(name='out_order_id', example='1017124195788186048'),
    outSubOrderId?: string(name='out_sub_order_id', example='1019195836916029'),
    payTime?: string(name='pay_time', example='2023-08-14 11:38:01'),
    reason?: string(name='reason'),
    status?: int32(name='status', example='1'),
    subOrderId?: long(name='sub_order_id', example='1019195836916029'),
    ticketTime?: string(name='ticket_time', example='2023-08-19 15:24:08'),
    totalPrice?: long(name='total_price', example='100'),
    totalServiceFeePrice?: long(name='total_service_fee_price', example='0'),
    travelerInfoDTOS?: [ 
      {
        birthDate?: string(name='birth_date', example='2000-08-19'),
        certNo?: string(name='cert_no', example='430131413423435353'),
        certType?: int32(name='cert_type', example='0'),
        changeFee?: {
          changeFee?: long(name='change_fee'),
          serviceFee?: long(name='service_fee'),
          upgradePrice?: long(name='upgrade_price'),
        }(name='change_fee'),
        gender?: int32(name='gender', example='1'),
        originTicketNos?: [ string ](name='origin_ticket_nos'),
        passengerId?: string(name='passenger_id', example='12172819047252004460056'),
        passengerName?: string(name='passenger_name'),
        passengerType?: int32(name='passenger_type', example='0'),
        phone?: string(name='phone', example='17635462345'),
        pid?: long(name='pid', example='3243028'),
        ticketNoSegmentMap?: map[string]any(name='ticket_no_segment_map'),
        ticketNos?: [ string ](name='ticket_nos'),
      }
    ](name='traveler_info_d_t_o_s'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', description='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210bc2dc16839612026565712dcbe6'),
}

model FlightModifyOrderDetailV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightModifyOrderDetailV2ResponseBody(name='body'),
}

/**
 * @summary 机票改签详情
 *
 * @param request FlightModifyOrderDetailV2Request
 * @param headers FlightModifyOrderDetailV2Headers
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightModifyOrderDetailV2Response
 */
async function flightModifyOrderDetailV2WithOptions(request: FlightModifyOrderDetailV2Request, headers: FlightModifyOrderDetailV2Headers, runtime: Util.RuntimeOptions): FlightModifyOrderDetailV2Response {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.modifyApplyId)) {
    query['modify_apply_id'] = request.modifyApplyId;
  }
  if (!Util.isUnset(request.needQueryServiceFee)) {
    query['need_query_service_fee'] = request.needQueryServiceFee;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outModifyApplyId)) {
    query['out_modify_apply_id'] = request.outModifyApplyId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    query['out_order_id'] = request.outOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightModifyOrderDetailV2',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v2/modify/action/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票改签详情
 *
 * @param request FlightModifyOrderDetailV2Request
 * @return FlightModifyOrderDetailV2Response
 */
async function flightModifyOrderDetailV2(request: FlightModifyOrderDetailV2Request): FlightModifyOrderDetailV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightModifyOrderDetailV2Headers{};
  return flightModifyOrderDetailV2WithOptions(request, headers, runtime);
}

model FlightModifyOtaSearchV2Headers {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightModifyOtaSearchV2Request {
  cabinClass?: [ int32 ](name='cabin_class'),
  depDate?: [ string ](name='dep_date'),
  isvName?: string(name='isv_name', example='name'),
  orderId?: long(name='order_id', example='1017002195370467200'),
  outOrderId?: string(name='out_order_id', example='1017002195370467200'),
  passengerSegmentRelations?: [ 
    {
      passengerId?: string(name='passenger_id', example='3243028'),
      segmentIdList?: [ string ](name='segment_id_list'),
    }
  ](name='passenger_segment_relations'),
  selectedSegments?: [ 
    {
      arrCityCode?: string(name='arr_city_code', example='BJS'),
      depCityCode?: string(name='dep_city_code', example='XIL'),
      depDateTime?: string(name='dep_date_time', example='2023-09-18 09:10:00'),
      journeySeq?: int32(name='journey_seq', example='0'),
      marketingFlightNo?: string(name='marketing_flight_no', example='CA1110'),
      operatingFlightNo?: string(name='operating_flight_no', example='MU8625'),
      segmentSeq?: int32(name='segment_seq', example='0'),
    }
  ](name='selected_segments'),
  sessionId?: string(name='session_id', example='590f17eca9374f20ac7e8ed8a7db2f35'),
  voluntary?: boolean(name='voluntary', example='true'),
}

model FlightModifyOtaSearchV2ShrinkRequest {
  cabinClassShrink?: string(name='cabin_class'),
  depDateShrink?: string(name='dep_date'),
  isvName?: string(name='isv_name', example='name'),
  orderId?: long(name='order_id', example='1017002195370467200'),
  outOrderId?: string(name='out_order_id', example='1017002195370467200'),
  passengerSegmentRelationsShrink?: string(name='passenger_segment_relations'),
  selectedSegmentsShrink?: string(name='selected_segments'),
  sessionId?: string(name='session_id', example='590f17eca9374f20ac7e8ed8a7db2f35'),
  voluntary?: boolean(name='voluntary', example='true'),
}

model FlightModifyOtaSearchV2ResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    agentInfos?: [ 
      {
        attributeShowInfoMap?: map[string][ ModuleAgentInfosAttributeShowInfoMapValue         ](name='attribute_show_info_map'),
        bestDiscount?: double(name='best_discount'),
        cabinClassInfo?: {
          cabinClass?: string(name='cabin_class'),
          className?: string(name='class_name'),
          innerCabinClass?: int32(name='inner_cabin_class'),
          quantity?: string(name='quantity'),
        }(name='cabin_class_info'),
        cabinCode?: int32(name='cabin_code'),
        cabinName?: string(name='cabin_name'),
        itemId?: string(name='item_id'),
        modifyTypeDesc?: string(name='modify_type_desc'),
        modifyTypeName?: string(name='modify_type_name'),
        priceInfoDTO?: {
          adultPrice?: int32(name='adult_price'),
          adultTax?: int32(name='adult_tax'),
          adultTotalPrice?: int32(name='adult_total_price'),
          beforeControlPrice?: int32(name='before_control_price'),
          childPrice?: int32(name='child_price'),
          childTax?: int32(name='child_tax'),
          childTotalPrice?: int32(name='child_total_price'),
          infantPrice?: int32(name='infant_price'),
          infantTax?: int32(name='infant_tax'),
          infantTotalPrice?: int32(name='infant_total_price'),
          originalAdultPrice?: int32(name='original_adult_price'),
          originalAdultTotalPrice?: int32(name='original_adult_total_price'),
          reShopPriceInfoDTO?: {
            reShopAdultChangeFee?: int32(name='re_shop_adult_change_fee'),
            reShopAdultPrice?: int32(name='re_shop_adult_price'),
            reShopAdultPriceGap?: int32(name='re_shop_adult_price_gap'),
            reShopChildChangeFee?: int32(name='re_shop_child_change_fee'),
            reShopChildPrice?: int32(name='re_shop_child_price'),
            reShopChildPriceGap?: int32(name='re_shop_child_price_gap'),
            reShopInfChangeFee?: int32(name='re_shop_inf_change_fee'),
            reShopInfPrice?: int32(name='re_shop_inf_price'),
            reShopInfPriceGap?: int32(name='re_shop_inf_price_gap'),
          }(name='re_shop_price_info_d_t_o'),
        }(name='price_info_d_t_o'),
        quantity?: int32(name='quantity'),
        supportChildTicket?: boolean(name='support_child_ticket'),
      }
    ](name='agentInfos'),
    agentInfo?: {
      attributeShowInfoMap?: map[string][ ModuleAgentInfoAttributeShowInfoMapValue       ](name='attribute_show_info_map'),
      bestDiscount?: double(name='best_discount', example='10'),
      cabinClassInfo?: {
        cabinClass?: string(name='cabin_class'),
        className?: string(name='class_name'),
        innerCabinClass?: int32(name='inner_cabin_class', description='inner_cabin_class', example='1'),
        quantity?: string(name='quantity'),
      }(name='cabin_class_info'),
      cabinCode?: int32(name='cabin_code', example='1'),
      cabinName?: string(name='cabin_name'),
      itemId?: string(name='item_id', description='item_id', example='c85124c527fc4b26b86d0c043ddc08d3_0'),
      modifyTypeDesc?: string(name='modify_type_desc'),
      modifyTypeName?: string(name='modify_type_name'),
      priceInfoDTO?: {
        adultPrice?: int32(name='adult_price', example='126000'),
        adultTax?: int32(name='adult_tax', example='11000'),
        adultTotalPrice?: int32(name='adult_total_price', example='137000'),
        beforeControlPrice?: int32(name='before_control_price', example='126000'),
        childPrice?: int32(name='child_price', example='64000'),
        childTax?: int32(name='child_tax', example='2000'),
        childTotalPrice?: int32(name='child_total_price', example='66000'),
        infantPrice?: int32(name='infant_price', example='120'),
        infantTax?: int32(name='infant_tax', example='0'),
        infantTotalPrice?: int32(name='infant_total_price', example='120'),
        originalAdultPrice?: int32(name='original_adult_price', example='1300'),
        originalAdultTotalPrice?: int32(name='original_adult_total_price', example='12300'),
        reShopPriceInfoDTO?: {
          reShopAdultChangeFee?: int32(name='re_shop_adult_change_fee', example='-1'),
          reShopAdultPrice?: int32(name='re_shop_adult_price', example='-1'),
          reShopAdultPriceGap?: int32(name='re_shop_adult_price_gap', example='-1'),
          reShopChildChangeFee?: int32(name='re_shop_child_change_fee', example='-1'),
          reShopChildPrice?: int32(name='re_shop_child_price', example='-1'),
          reShopChildPriceGap?: int32(name='re_shop_child_price_gap', example='-1'),
          reShopInfChangeFee?: int32(name='re_shop_inf_change_fee', example='-1'),
          reShopInfPrice?: int32(name='re_shop_inf_price', example='-1'),
          reShopInfPriceGap?: int32(name='re_shop_inf_price_gap', example='-1'),
        }(name='re_shop_price_info_d_t_o'),
      }(name='price_info_d_t_o'),
      quantity?: int32(name='quantity', example='8'),
      supportChildTicket?: boolean(name='support_child_ticket', example='true'),
    }(name='agent_info'),
    cacheKey?: string(name='cache_key', example='2136019116915615639457351e06ee'),
    flightSegmentInfos?: [[ 
      {
        journeySeq?: int32(name='journey_seq', example='0'),
        segmentSeq?: int32(name='segment_seq', example='0'),
        flightNo?: string(name='flight_no', example='CA1110'),
        depCityCode?: string(name='dep_city_code', example='XIL'),
        arrCityCode?: string(name='arr_city_code', example='BJS'),
        depCityName?: string(name='dep_city_name'),
        arrCityName?: string(name='arr_city_name'),
        depAirportInfo?: {
          airportCode?: string(name='airport_code', example='XIL'),
          airportName?: string(name='airport_name'),
          airportShortName?: string(name='airport_short_name'),
          terminal?: string(name='terminal', example='T3'),
        }(name='dep_airport_info'),
        arrAirportInfo?: {
          airportCode?: string(name='airport_code', example='PEK'),
          airportName?: string(name='airport_name'),
          airportShortName?: string(name='airport_short_name'),
          terminal?: string(name='terminal', example='T2'),
        }(name='arr_airport_info'),
        depTime?: string(name='dep_time', example='2023-09-18 09:10:00'),
        arrTime?: string(name='arr_time', example='2023-09-18 10:25:00'),
        airlineInfo?: {
          airlineCode?: string(name='airline_code', example='CA'),
          airlineChineseName?: string(name='airline_chinese_name'),
          airlineChineseShortName?: string(name='airline_chinese_short_name'),
          airlineIcon?: string(name='airline_icon', example='//gw.alicdn.com/tfs/TB12fJAFHr1gK0jSZR0XXbP8XXa-450-450.png_80x80.jpg'),
          cheapFlight?: boolean(name='cheap_flight', example='false'),
        }(name='airline_info'),
        share?: boolean(name='share', example='false'),
        flightSharedInfo?: {
          operatingFlightNo?: string(name='operating_flight_no'),
          operatingAirlineInfo?: {
            airlineCode?: string(name='airline_code'),
            airlineChineseName?: string(name='airline_chinese_name'),
            airlineChineseShortName?: string(name='airline_chinese_short_name'),
            airlineIcon?: string(name='airline_icon'),
            cheapFlight?: boolean(name='cheap_flight', example='false'),
          }(name='operating_airline_info'),
        }(name='flight_shared_info'),
        stop?: boolean(name='stop', example='false'),
        flightStopInfo?: {
          stopCityName?: string(name='stop_city_name'),
          stopArrTime?: string(name='stop_arr_time'),
          stopDepTime?: string(name='stop_dep_time'),
          stopCityCode?: string(name='stop_city_code'),
          stopAirport?: string(name='stop_airport'),
          stopArrTerm?: string(name='stop_arr_term'),
          stopDepTerm?: string(name='stop_dep_term'),
        }(name='flight_stop_info'),
        transferTime?: int32(name='transfer_time', example='20'),
        duration?: int32(name='duration', example='75'),
        manufacturer?: string(name='manufacturer'),
        flightType?: string(name='flight_type', example='ARJ'),
        flightSize?: string(name='flight_size'),
        mealDesc?: string(name='meal_desc'),
        onTimeRate?: string(name='on_time_rate'),
      }
    ]    ](name='flight_segment_infos'),
    passengerCount?: {
      adultPassengerNum?: int32(name='adult_passenger_num', example='1'),
      childPassengerNum?: int32(name='child_passenger_num', example='0'),
      infantPassengerNum?: int32(name='infant_passenger_num', example='0'),
    }(name='passenger_count'),
    sessionId?: string(name='session_id', example='a2ffebfe733742aab5c491d960ba3d59'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', description='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='2136019116915615639457351e06ee'),
}

model FlightModifyOtaSearchV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightModifyOtaSearchV2ResponseBody(name='body'),
}

/**
 * @summary 机票改签报价搜索
 *
 * @param tmpReq FlightModifyOtaSearchV2Request
 * @param headers FlightModifyOtaSearchV2Headers
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightModifyOtaSearchV2Response
 */
async function flightModifyOtaSearchV2WithOptions(tmpReq: FlightModifyOtaSearchV2Request, headers: FlightModifyOtaSearchV2Headers, runtime: Util.RuntimeOptions): FlightModifyOtaSearchV2Response {
  Util.validateModel(tmpReq);
  var request = new FlightModifyOtaSearchV2ShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.cabinClass)) {
    request.cabinClassShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cabinClass, 'cabin_class', 'json');
  }
  if (!Util.isUnset(tmpReq.depDate)) {
    request.depDateShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.depDate, 'dep_date', 'json');
  }
  if (!Util.isUnset(tmpReq.passengerSegmentRelations)) {
    request.passengerSegmentRelationsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerSegmentRelations, 'passenger_segment_relations', 'json');
  }
  if (!Util.isUnset(tmpReq.selectedSegments)) {
    request.selectedSegmentsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.selectedSegments, 'selected_segments', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.cabinClassShrink)) {
    query['cabin_class'] = request.cabinClassShrink;
  }
  if (!Util.isUnset(request.depDateShrink)) {
    query['dep_date'] = request.depDateShrink;
  }
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    query['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.passengerSegmentRelationsShrink)) {
    query['passenger_segment_relations'] = request.passengerSegmentRelationsShrink;
  }
  if (!Util.isUnset(request.selectedSegmentsShrink)) {
    query['selected_segments'] = request.selectedSegmentsShrink;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['session_id'] = request.sessionId;
  }
  if (!Util.isUnset(request.voluntary)) {
    query['voluntary'] = request.voluntary;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightModifyOtaSearchV2',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v2/modify/action/ota-search`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票改签报价搜索
 *
 * @param request FlightModifyOtaSearchV2Request
 * @return FlightModifyOtaSearchV2Response
 */
async function flightModifyOtaSearchV2(request: FlightModifyOtaSearchV2Request): FlightModifyOtaSearchV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightModifyOtaSearchV2Headers{};
  return flightModifyOtaSearchV2WithOptions(request, headers, runtime);
}

model FlightModifyPayV2Headers {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightModifyPayV2Request {
  extParams?: map[string]any(name='ext_params'),
  isvName?: string(name='isv_name', example='name'),
  modifyPayAmount?: long(name='modify_pay_amount', example='5100'),
  orderId?: long(name='order_id', example='1017002195370467200'),
  outOrderId?: string(name='out_order_id', example='1017002195370467200'),
  outSubOrderId?: string(name='out_sub_order_id', example='1019195786853020'),
  subOrderId?: long(name='sub_order_id', example='1019195786853020'),
}

model FlightModifyPayV2ShrinkRequest {
  extParamsShrink?: string(name='ext_params'),
  isvName?: string(name='isv_name', example='name'),
  modifyPayAmount?: long(name='modify_pay_amount', example='5100'),
  orderId?: long(name='order_id', example='1017002195370467200'),
  outOrderId?: string(name='out_order_id', example='1017002195370467200'),
  outSubOrderId?: string(name='out_sub_order_id', example='1019195786853020'),
  subOrderId?: long(name='sub_order_id', example='1019195786853020'),
}

model FlightModifyPayV2ResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: map[string]any(name='module', description='module'),
  requestId?: string(name='requestId', description='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210bc59716837025964391120d3a5e'),
}

model FlightModifyPayV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightModifyPayV2ResponseBody(name='body'),
}

/**
 * @summary 机票改签支付
 *
 * @param tmpReq FlightModifyPayV2Request
 * @param headers FlightModifyPayV2Headers
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightModifyPayV2Response
 */
async function flightModifyPayV2WithOptions(tmpReq: FlightModifyPayV2Request, headers: FlightModifyPayV2Headers, runtime: Util.RuntimeOptions): FlightModifyPayV2Response {
  Util.validateModel(tmpReq);
  var request = new FlightModifyPayV2ShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extParams)) {
    request.extParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extParams, 'ext_params', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.extParamsShrink)) {
    body['ext_params'] = request.extParamsShrink;
  }
  if (!Util.isUnset(request.isvName)) {
    body['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.modifyPayAmount)) {
    body['modify_pay_amount'] = request.modifyPayAmount;
  }
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.outSubOrderId)) {
    body['out_sub_order_id'] = request.outSubOrderId;
  }
  if (!Util.isUnset(request.subOrderId)) {
    body['sub_order_id'] = request.subOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FlightModifyPayV2',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v2/modify/action/pay`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票改签支付
 *
 * @param request FlightModifyPayV2Request
 * @return FlightModifyPayV2Response
 */
async function flightModifyPayV2(request: FlightModifyPayV2Request): FlightModifyPayV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightModifyPayV2Headers{};
  return flightModifyPayV2WithOptions(request, headers, runtime);
}

model FlightOrderDetailInfoHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightOrderDetailInfoRequest {
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='dis123'),
}

model FlightOrderDetailInfoResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    alipayTradeNo?: string(name='alipay_trade_no', example='2389927372772'),
    bookUserId?: string(name='book_user_id', example='1223'),
    btripOrderId?: long(name='btrip_order_id', example='123'),
    contactName?: string(name='contact_name'),
    contactPhone?: string(name='contact_phone', example='12345678909'),
    disOrderId?: string(name='dis_order_id', example='dis123'),
    extra?: string(name='extra', example='{}'),
    flightInfoList?: [ 
      {
        airlineCode?: string(name='airline_code', example='CA'),
        airlineName?: string(name='airline_name'),
        airlineSimpleName?: string(name='airline_simple_name'),
        arrAirport?: string(name='arr_airport'),
        arrAirportCode?: string(name='arr_airport_code', example='LHW'),
        arrAirportCodeName?: string(name='arr_airport_code_name'),
        arrCity?: string(name='arr_city', example='HGH'),
        arrCityCode?: string(name='arr_city_code', example='LHW'),
        arrTerminal?: string(name='arr_terminal'),
        arrTime?: string(name='arr_time', example='2000-00-00 00:00:00'),
        baggage?: string(name='baggage', example='“”'),
        buildPrice?: long(name='build_price', example='100'),
        cabin?: string(name='cabin'),
        cabinClass?: string(name='cabin_class'),
        carrier?: string(name='carrier', example='"CA1351_PEK_CAN_2000-00-00 08:00'),
        depAirport?: string(name='dep_airport'),
        depAirportCode?: string(name='dep_airport_code', example='NGB'),
        depAirportCodeName?: string(name='dep_airport_code_name'),
        depCity?: string(name='dep_city', example='BJS'),
        depCityCode?: string(name='dep_city_code', example='NGB'),
        depTerminal?: string(name='dep_terminal'),
        depTime?: string(name='dep_time', example='2000-01-01 00:00:00'),
        flightNo?: string(name='flight_no', example='CA1351'),
        lastCabin?: string(name='last_cabin', example='Y'),
        lastFlightNo?: string(name='last_flight_no', example='CA1351'),
        meal?: string(name='meal'),
        oilPrice?: long(name='oil_price', example='100'),
        segmentType?: int32(name='segment_type', example='0'),
        stopArrTime?: string(name='stop_arr_time', example='2000-00-00 00:00:00'),
        stopCity?: string(name='stop_city', example='CAN'),
        stopDepTime?: string(name='stop_dep_time', example='2000-00-00 00:00:00'),
        ticketPrice?: long(name='ticket_price', example='100'),
        tuigaiqianInfo?: string(name='tuigaiqian_info', example='“”'),
      }
    ](name='flight_info_list'),
    lastPayTime?: string(name='last_pay_time', example='2000-00-00 00:00:00'),
    payStatus?: int32(name='pay_status', example='0'),
    payTime?: string(name='pay_time', example='2000-00-00 00:00:00'),
    promotionPrice?: long(name='promotion_price', example='1000'),
    settleAmount?: long(name='settle_amount', example='100'),
    settleType?: int32(name='settle_type', example='0'),
    status?: int32(name='status', example='1'),
    ticketInfoList?: [ 
      {
        openTicketStatus?: string(name='open_ticket_status', example='0'),
        pnrCode?: string(name='pnr_code', example='KF0528'),
        ticketNo?: string(name='ticket_no', example='444-000000000'),
        ticketStatus?: string(name='ticket_status', example='1'),
      }
    ](name='ticket_info_list'),
    totalBuildPrice?: long(name='total_build_price', example='1000'),
    totalOilPrice?: long(name='total_oil_price', example='1000'),
    totalOrderPrice?: long(name='total_order_price', example='1000'),
    travelerInfoList?: [ 
      {
        birthDate?: string(name='birth_date', example='2000-01-01'),
        certNo?: string(name='cert_no', example='1234'),
        certType?: string(name='cert_type', example='0'),
        openTicketStatus?: int32(name='open_ticket_status', example='0'),
        passengerName?: string(name='passenger_name'),
        passengerType?: string(name='passenger_type', example='0'),
        phone?: string(name='phone', example='12345678909'),
        ticketNo?: string(name='ticket_no', example='444-000000000'),
        userId?: string(name='user_id', example='123'),
      }
    ](name='traveler_info_list'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightOrderDetailInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightOrderDetailInfoResponseBody(name='body'),
}

/**
 * @summary 航班订单明细信息
 *
 * @param request FlightOrderDetailInfoRequest
 * @param headers FlightOrderDetailInfoHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightOrderDetailInfoResponse
 */
async function flightOrderDetailInfoWithOptions(request: FlightOrderDetailInfoRequest, headers: FlightOrderDetailInfoHeaders, runtime: Util.RuntimeOptions): FlightOrderDetailInfoResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.disOrderId)) {
    query['dis_order_id'] = request.disOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightOrderDetailInfo',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/order/action/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 航班订单明细信息
 *
 * @param request FlightOrderDetailInfoRequest
 * @return FlightOrderDetailInfoResponse
 */
async function flightOrderDetailInfo(request: FlightOrderDetailInfoRequest): FlightOrderDetailInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightOrderDetailInfoHeaders{};
  return flightOrderDetailInfoWithOptions(request, headers, runtime);
}

model FlightOrderDetailV2Headers {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='Dj2laAwE00'),
}

model FlightOrderDetailV2Request {
  isvName?: string(name='isv_name', description='This parameter is required.', example='cheshiapi'),
  orderId?: long(name='order_id', example='1017002195370467138'),
  outOrderId?: string(name='out_order_id', example='1017002195370467137'),
}

model FlightOrderDetailV2ResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    b2gVipCode?: string(name='b2g_vip_code'),
    bookSuccTime?: string(name='book_succ_time', example='2023-06-29 15:28:44'),
    bookUserId?: string(name='book_user_id', example='qingg1234'),
    bookUserName?: string(name='book_user_name'),
    buildPrice?: long(name='build_price', example='0'),
    contactInfoDTO?: {
      contactEmail?: string(name='contact_email', example='178169630111@163.com'),
      contactName?: string(name='contact_name'),
      contactPhone?: string(name='contact_phone', example='178169630111'),
      sendMsgToPassenger?: boolean(name='send_msg_to_passenger', example='true'),
    }(name='contact_info_d_t_o'),
    createTime?: string(name='create_time', example='2023-06-29 15:03:11'),
    facevalue?: long(name='facevalue', example='126000'),
    flightTaleInfoDTO?: {
      journeys?: [ 
        {
          allFlyDuration?: long(name='all_fly_duration', example='85'),
          allFlyDurationAfterChange?: long(name='all_fly_duration_after_change', example='85'),
          applyId?: long(name='apply_id'),
          arrCityCode?: string(name='arr_city_code', example='XIL'),
          arrCityName?: string(name='arr_city_name'),
          arrTime?: string(name='arr_time', example='2023-07-20 08:25:00'),
          baggageDetails?: string(name='baggage_details'),
          depCityCode?: string(name='dep_city_code', example='BJS'),
          depCityName?: string(name='dep_city_name'),
          depTime?: string(name='dep_time', example='2023-07-20 07:00:00'),
          flightStatus?: string(name='flight_status'),
          iataNo?: string(name='iata_no', description='iata_no', example='iata_no'),
          isReshopJourney?: boolean(name='is_reshop_journey'),
          isTransfer?: boolean(name='is_transfer'),
          journeyTitle?: string(name='journey_title'),
          refundChangeDetails?: string(name='refund_change_details'),
          segmentList?: [ 
            {
              airLineCode?: string(name='air_line_code', example='CA'),
              airLineEnglishName?: string(name='air_line_english_name', example='Air China Limited'),
              airLineName?: string(name='air_line_name'),
              airLinePhone?: string(name='air_line_phone', example='95583'),
              airlineIconUrl?: string(name='airline_icon_url', example='https://gw.alicdn.com/tfs/TB12fJAFHr1gK0jSZR0XXbP8XXa-450-450.png'),
              airlineShortName?: string(name='airline_short_name'),
              arrAirportCode?: string(name='arr_airport_code', example='XIL'),
              arrAirportName?: string(name='arr_airport_name'),
              arrCityCode?: string(name='arr_city_code', example='XIL'),
              arrCityName?: string(name='arr_city_name'),
              arrTime?: string(name='arr_time', example='2023-07-20 08:25:00'),
              arriveTerminal?: string(name='arrive_terminal'),
              cabin?: string(name='cabin', description='cabin'),
              cabinAndDiscount?: string(name='cabin_and_discount'),
              cabinClass?: string(name='cabin_class', description='cabin_class', example='Y'),
              cabinClassName?: string(name='cabin_class_name', description='cabin_class_name'),
              codeShare?: boolean(name='code_share', example='false'),
              deadlineText?: string(name='deadline_text'),
              depAirportCode?: string(name='dep_airport_code', example='PEK'),
              depAirportName?: string(name='dep_airport_name'),
              depCityCode?: string(name='dep_city_code', example='BJS'),
              depCityName?: string(name='dep_city_name'),
              depDate?: string(name='dep_date', example='2023-07-29'),
              depTime?: string(name='dep_time', example='2023-07-20 07:00:00'),
              departTerminal?: string(name='depart_terminal'),
              discount?: double(name='discount', example='0.4'),
              flightChange?: {
                changeDesc?: string(name='change_desc'),
                changeStatus?: string(name='change_status'),
                changeStatusCode?: string(name='change_status_code'),
                newSegment?: any(name='new_segment'),
                passengerNames?: [ string ](name='passenger_names'),
              }(name='flight_change'),
              flightNo?: string(name='flight_no', example='CA1110'),
              flightType?: string(name='flight_type', example='ARJ'),
              flyDuration?: int32(name='fly_duration'),
              manufacturer?: string(name='manufacturer'),
              mealDesc?: string(name='meal_desc'),
              onTimeRate?: string(name='on_time_rate'),
              operatingAirShortName?: string(name='operating_air_short_name'),
              operatingAirlineCode?: string(name='operating_airline_code'),
              operatingAirlineEnglishName?: string(name='operating_airline_english_name'),
              operatingAirlineIconUrl?: string(name='operating_airline_icon_url'),
              operatingAirlineName?: string(name='operating_airline_name'),
              operatingAirlinePhone?: string(name='operating_airline_phone'),
              operatingFlightNo?: string(name='operating_flight_no'),
              planeType?: string(name='plane_type'),
              raisePrice?: long(name='raise_price'),
              segmentId?: string(name='segment_id'),
              segmentIndex?: int32(name='segment_index', description='segmentIndex', example='0'),
              segmentPosition?: {
                journeyIndex?: int32(name='journey_index', example='0'),
                segmentIndex?: int32(name='segment_index', example='0'),
              }(name='segment_position'),
              stopAirport?: string(name='stop_airport'),
              stopArrTime?: string(name='stop_arr_time'),
              stopCity?: string(name='stop_city'),
              stopCityName?: string(name='stop_city_name'),
              stopDepTime?: string(name='stop_dep_time'),
              stopQuantity?: int32(name='stop_quantity'),
            }
          ](name='segment_list'),
        }
      ](name='journeys'),
      noticeTips?: string(name='notice_tips'),
      tripType?: string(name='trip_type'),
      tripTypeCode?: int32(name='trip_type_code', example='2'),
    }(name='flight_tale_info_d_t_o'),
    isProtocol?: boolean(name='is_protocol', example='false'),
    isemergency?: boolean(name='isemergency', example='false'),
    issendmessage?: boolean(name='issendmessage', example='true'),
    oilPrice?: long(name='oil_price', example='4000'),
    orderId?: long(name='order_id', example='1017002195370467200'),
    orderPrice?: long(name='order_price', example='8500'),
    outOrderId?: string(name='out_order_id', example='1017002195370467137'),
    passengerList?: [ 
      {
        birthday?: string(name='birthday', example='1991-06-21 00:00:00'),
        btripUserId?: string(name='btrip_user_id', example='12172819047252004460056'),
        code?: int32(name='code'),
        country?: string(name='country'),
        countryCode?: string(name='country_code', example='CN'),
        credential?: {
          birthDate?: string(name='birth_date', example='1991-06-21 00:00:00'),
          certIssueDate?: string(name='cert_issue_date', example='1991-06-21 00:00:00'),
          certIssuePlace?: string(name='cert_issue_place'),
          credentialNo?: string(name='credential_no'),
          driveLicenceFirst?: string(name='drive_licence_first'),
          driveLicenceType?: string(name='drive_licence_type'),
          expireDate?: string(name='expire_date', example='1991-06-21 00:00:00'),
          holderNationality?: string(name='holder_nationality'),
          id?: long(name='id', example='131332'),
          idCheckCode?: string(name='id_check_code'),
          issueCountry?: string(name='issue_country'),
          type?: int32(name='type', example='0'),
        }(name='credential'),
        credentials?: [ 
          {
            birthDate?: string(name='birth_date'),
            certIssueDate?: string(name='cert_issue_date'),
            certIssuePlace?: string(name='cert_issue_place'),
            credentialNo?: string(name='credential_no'),
            driveLicenceFirst?: string(name='drive_licence_first'),
            driveLicenceType?: string(name='drive_licence_type'),
            expireDate?: string(name='expire_date'),
            holderNationality?: string(name='holder_nationality'),
            id?: long(name='id', example='131332'),
            idCheckCode?: string(name='id_check_code'),
            issueCountry?: string(name='issue_country'),
            type?: int32(name='type', example='0'),
          }
        ](name='credentials'),
        email?: string(name='email', example='17800000001@163.com'),
        enFirstName?: string(name='en_first_name', example='san'),
        enLastName?: string(name='en_last_name', example='zhang'),
        englishName?: string(name='english_name', example='zhangsan'),
        gender?: int32(name='gender', example='1'),
        id?: string(name='id', example='3243028'),
        isComplete?: boolean(name='is_complete', example='true'),
        isFrequently?: boolean(name='is_frequently', example='false'),
        memo?: string(name='memo'),
        mobileCountryCode?: string(name='mobile_country_code', example='86'),
        mobilePhoneNumber?: string(name='mobile_phone_number', example='17800000001'),
        name?: string(name='name'),
        oneself?: boolean(name='oneself', example='true'),
        orderName?: string(name='order_name'),
        outPassengerId?: string(name='out_passenger_id', example='1111'),
        phone?: string(name='phone', example='17800000001'),
        shengPiPinyin?: string(name='sheng_pi_pinyin', example='111'),
        ticketNos?: [ string ](name='ticket_nos'),
        tickets?: [ 
          {
            channel?: string(name='channel'),
            journeyTitle?: string(name='journey_title'),
            openTicketStatus?: string(name='open_ticket_status', example='OPEN_FOR_USE'),
            pcc?: string(name='pcc', description='pcc/office', example='pcc/office'),
            segmentOpenTicketList?: [ 
              {
                journeyIndex?: int32(name='journey_index'),
                openTicketStatus?: int32(name='open_ticket_status'),
                segmentIndex?: int32(name='segment_index'),
              }
            ](name='segment_open_ticket_list'),
            ticketAuthMemo?: string(name='ticket_auth_memo'),
            ticketAuthStatus?: int32(name='ticket_auth_status', example='2'),
            ticketNo?: string(name='ticket_no', example='444-2023062999'),
            ticketPrice?: long(name='ticket_price', example='4500'),
            ticketStatus?: string(name='ticket_status'),
          }
        ](name='tickets'),
        type?: int32(name='type', example='0'),
        userId?: string(name='user_id', example='312312'),
      }
    ](name='passenger_list'),
    passengerSegmentMap?: map[string]string(name='passenger_segment_map', description='key :passengerId

value :segmentId'),
    payTime?: string(name='pay_time', example='2023-06-29 15:03:59'),
    saleprice?: long(name='saleprice', example='4500'),
    sendcpsms?: boolean(name='sendcpsms', example='true'),
    status?: int32(name='status', example='5'),
    totalServiceFeePrice?: long(name='total_service_fee_price', example='3'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', description='requestId', example='E5F4ACF5-5677-1515-9999-ABBB5E668032'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210bc60a16917251281873772dac41'),
}

model FlightOrderDetailV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightOrderDetailV2ResponseBody(name='body'),
}

/**
 * @summary 机票订单详情
 *
 * @param request FlightOrderDetailV2Request
 * @param headers FlightOrderDetailV2Headers
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightOrderDetailV2Response
 */
async function flightOrderDetailV2WithOptions(request: FlightOrderDetailV2Request, headers: FlightOrderDetailV2Headers, runtime: Util.RuntimeOptions): FlightOrderDetailV2Response {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    query['out_order_id'] = request.outOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightOrderDetailV2',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v2/order/action/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票订单详情
 *
 * @param request FlightOrderDetailV2Request
 * @return FlightOrderDetailV2Response
 */
async function flightOrderDetailV2(request: FlightOrderDetailV2Request): FlightOrderDetailV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightOrderDetailV2Headers{};
  return flightOrderDetailV2WithOptions(request, headers, runtime);
}

model FlightOrderListQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model FlightOrderListQueryRequest {
  allApply?: boolean(name='all_apply', example='false'),
  applyId?: long(name='apply_id', example='175634'),
  departId?: string(name='depart_id'),
  endTime?: string(name='end_time', example='2022-07-01 00:00:00'),
  page?: int32(name='page', example='1'),
  pageSize?: int32(name='page_size', example='10'),
  startTime?: string(name='start_time', example='2022-07-01 00:00:00'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', example='CS-FLIGHT'),
  updateEndTime?: string(name='update_end_time', example='2022-07-01 00:00:00'),
  updateStartTime?: string(name='update_start_time', example='2022-07-01 00:00:00'),
  userId?: string(name='user_id'),
}

model FlightOrderListQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: [ 
    {
      applyId?: long(name='apply_id', example='11774'),
      arrAirport?: string(name='arr_airport'),
      arrCity?: string(name='arr_city'),
      arrCityAdCode?: string(name='arr_city_ad_code'),
      btripTitle?: string(name='btrip_title'),
      cabinClass?: string(name='cabin_class', example='Y'),
      contactName?: string(name='contact_name'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      costCenter?: {
        corpId?: string(name='corp_id'),
        id?: long(name='id', example='44632'),
        name?: string(name='name'),
        number?: string(name='number', example='NM98767'),
      }(name='cost_center'),
      depAirport?: string(name='dep_airport'),
      depCity?: string(name='dep_city'),
      depCityAdCode?: string(name='dep_city_ad_code'),
      depDate?: string(name='dep_date', example='2022-07-20T10:40Z'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      discount?: string(name='discount', example='30.12%'),
      flightNo?: string(name='flight_no', example='MU7854'),
      gmtCreate?: string(name='gmt_create', example='2022-07-20T10:40Z'),
      gmtModified?: string(name='gmt_modified', example='2022-07-20T10:40Z'),
      id?: long(name='id', example='200042'),
      insureInfoList?: [ 
        {
          insureNo?: string(name='insure_no', example='KJ-879657'),
          name?: string(name='name'),
          status?: int32(name='status', example='1'),
        }
      ](name='insure_info_list'),
      invoice?: {
        id?: long(name='id', example='7304'),
        title?: string(name='title'),
      }(name='invoice'),
      passengerCount?: int32(name='passenger_count', example='4'),
      passengerName?: string(name='passenger_name'),
      priceInfoList?: [ 
        {
          categoryCode?: int32(name='category_code', example='1'),
          categoryType?: int32(name='category_type', example='1'),
          changeFlightNo?: string(name='change_flight_no', example='MU5354'),
          discount?: string(name='discount', example='12%'),
          endTime?: string(name='end_time', example='2022-07-20T10:40Z'),
          gmtCreate?: string(name='gmt_create', example='2022-07-20T10:40Z'),
          originalTicketNo?: string(name='original_ticket_no', example='00-7687'),
          passengerName?: string(name='passenger_name'),
          payType?: int32(name='pay_type', example='1'),
          price?: double(name='price', example='100'),
          startTime?: string(name='start_time', example='2022-07-20T10:40Z'),
          ticketNo?: string(name='ticket_no', example='A-135767'),
          tradeId?: string(name='trade_id', example='f98236773'),
          type?: int32(name='type', example='1'),
        }
      ](name='price_info_list'),
      projectCode?: string(name='project_code', example='CS-PROJECT'),
      projectId?: long(name='project_id', example='CS-PROJECT'),
      projectTitle?: string(name='project_title'),
      retDate?: string(name='ret_date', example='2022-07-20T10:40Z'),
      status?: int32(name='status', example='0'),
      thirdPartProjectId?: string(name='third_part_project_id', example='CS-PROJECT'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', example='CS-UMN98989'),
      thirdpartBusinessId?: string(name='thirdpart_business_id'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', example='cs9897766'),
      tripType?: int32(name='trip_type', example='0'),
      userAffiliateList?: [ 
        {
          userId?: string(name='user_id'),
          userName?: string(name='user_name'),
        }
      ](name='user_affiliate_list'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='module'),
  pageInfo?: {
    page?: int32(name='page', example='1'),
    pageSize?: int32(name='page_size', example='20'),
    totalNumber?: int32(name='total_number', example='100'),
  }(name='page_info'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightOrderListQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightOrderListQueryResponseBody(name='body'),
}

/**
 * @summary 查询机票订单列表
 *
 * @param request FlightOrderListQueryRequest
 * @param headers FlightOrderListQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightOrderListQueryResponse
 */
async function flightOrderListQueryWithOptions(request: FlightOrderListQueryRequest, headers: FlightOrderListQueryHeaders, runtime: Util.RuntimeOptions): FlightOrderListQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.allApply)) {
    query['all_apply'] = request.allApply;
  }
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.departId)) {
    query['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['end_time'] = request.endTime;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['start_time'] = request.startTime;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    query['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.updateEndTime)) {
    query['update_end_time'] = request.updateEndTime;
  }
  if (!Util.isUnset(request.updateStartTime)) {
    query['update_start_time'] = request.updateStartTime;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightOrderListQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/flight/v1/order-list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询机票订单列表
 *
 * @param request FlightOrderListQueryRequest
 * @return FlightOrderListQueryResponse
 */
async function flightOrderListQuery(request: FlightOrderListQueryRequest): FlightOrderListQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightOrderListQueryHeaders{};
  return flightOrderListQueryWithOptions(request, headers, runtime);
}

model FlightOrderListQueryV2Headers {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightOrderListQueryV2Request {
  approveId?: [ string ](name='approve_id'),
  bookerId?: [ string ](name='booker_id'),
  departId?: [ string ](name='depart_id'),
  endDate?: string(name='end_date', example='2022-07-01 00:00:00'),
  pageSize?: int32(name='page_Size', example='10'),
  scrollId?: string(name='scroll_id', example='CAESBgoEIgIIABgAIhkKFwMSAAAAMUw4ZGViODFlYmM3MYzM4'),
  startDate?: string(name='start_date', example='2022-07-01 00:00:00'),
  supplier?: [ string ](name='supplier'),
  thirdpartApproveId?: [ string ](name='thirdpart_approve_id'),
  updateEndDate?: string(name='update_end_date', example='2022-07-01 00:00:00'),
  updateStartDate?: string(name='update_start_date', example='2022-07-01 00:00:00'),
}

model FlightOrderListQueryV2ShrinkRequest {
  approveIdShrink?: string(name='approve_id'),
  bookerIdShrink?: string(name='booker_id'),
  departIdShrink?: string(name='depart_id'),
  endDate?: string(name='end_date', example='2022-07-01 00:00:00'),
  pageSize?: int32(name='page_Size', example='10'),
  scrollId?: string(name='scroll_id', example='CAESBgoEIgIIABgAIhkKFwMSAAAAMUw4ZGViODFlYmM3MYzM4'),
  startDate?: string(name='start_date', example='2022-07-01 00:00:00'),
  supplierShrink?: string(name='supplier'),
  thirdpartApproveIdShrink?: string(name='thirdpart_approve_id'),
  updateEndDate?: string(name='update_end_date', example='2022-07-01 00:00:00'),
  updateStartDate?: string(name='update_start_date', example='2022-07-01 00:00:00'),
}

model FlightOrderListQueryV2ResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: [ 
    {
      approve?: {
        approveId?: long(name='approve_id', example='test1234'),
        btripTitle?: string(name='btrip_title'),
        exceedApproveId?: string(name='exceed_approve_id', example='1233544'),
        thirdpartApproveId?: string(name='thirdpart_approve_id', example='100231431'),
        thirdpartExceedApproveId?: string(name='thirdpart_exceed_approve_id', example='test123'),
      }(name='approve'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      flightOrderTicketList?: [ 
        {
          flightList?: [ 
            {
              arrTime?: string(name='arr_time', example='2022-07-20T10:40Z'),
              cabin?: string(name='cabin', example='V'),
              cabinClass?: string(name='cabin_class', example='Y'),
              cabinClassName?: string(name='cabin_class_name'),
              depTime?: string(name='dep_time', example='2022-07-20T10:40Z'),
              flightNo?: string(name='flight_no', example='CA8572'),
            }
          ](name='flight_list'),
          ticketNoList?: [ string ](name='ticket_no_list'),
          userId?: string(name='user_id'),
        }
      ](name='flight_order_ticket_list'),
      flightOrderUserFeeList?: [ 
        {
          buildFee?: double(name='build_fee'),
          corpPayAmount?: double(name='corp_pay_amount'),
          oilFee?: double(name='oil_fee'),
          personPayAmount?: double(name='person_pay_amount'),
          ticketPrice?: double(name='ticket_price'),
          userId?: string(name='user_id'),
        }
      ](name='flight_order_user_fee_list'),
      flightRefundApplyList?: [ 
        {
          flightRefundApplyTicketList?: [ 
            {
              flightList?: [ 
                {
                  arrTime?: string(name='arr_time', example='2022-07-20T10:40Z'),
                  cabin?: string(name='cabin', example='V'),
                  cabinClass?: string(name='cabin_class', example='Y'),
                  cabinClassName?: string(name='cabin_class_name'),
                  depTime?: string(name='dep_time', example='2022-07-20T10:40Z'),
                  flightNo?: string(name='flight_no', example='HU7052'),
                }
              ](name='flight_list'),
              ticketNoList?: [ string ](name='ticket_no_list'),
              userId?: string(name='user_id'),
            }
          ](name='flight_refund_apply_ticket_list'),
          flightRefundSegmentList?: [ 
            {
              airlineCode?: string(name='airline_code', example='CZ'),
              airlineName?: string(name='airline_name'),
              arrApt?: string(name='arr_apt'),
              arrAptCode?: string(name='arr_apt_code', example='PKX'),
              arrCity?: string(name='arr_city'),
              arrCityCode?: string(name='arr_city_code', example='BJS'),
              arrTerminal?: string(name='arr_terminal', example='T1'),
              arrTime?: string(name='arr_time', example='2022-07-20T10:40Z'),
              depApt?: string(name='dep_apt'),
              depAptCode?: string(name='dep_apt_code', example='HGH'),
              depCity?: string(name='dep_city'),
              depCityCode?: string(name='dep_city_code', example='HGH'),
              depTerminal?: string(name='dep_terminal', example='T1'),
              depTime?: string(name='dep_time', example='2022-07-20T10:40Z'),
              flightMile?: int32(name='flight_mile'),
              flightNo?: string(name='flight_no', example='MU5619'),
              journeyIndex?: int32(name='journey_index', example='0'),
              segmentIndex?: int32(name='segment_index', example='0'),
              stopCity?: [ string ](name='stop_city'),
            }
          ](name='flight_refund_segment_list'),
          flightRefundUserFeeList?: [ 
            {
              alreadyUseAmount?: double(name='already_use_amount'),
              nonRefundableReshopChangeAmount?: double(name='non_refundable_reshop_change_amount'),
              nonRefundableReshopUpgradeAmount?: double(name='non_refundable_reshop_upgrade_amount'),
              refundAmount?: double(name='refund_amount'),
              refundCorpAmount?: double(name='refund_corp_amount'),
              refundHandFee?: double(name='refund_hand_fee'),
              refundPersonAmount?: double(name='refund_person_amount'),
              userId?: string(name='user_id'),
            }
          ](name='flight_refund_user_fee_list'),
          refundApplyId?: string(name='refund_apply_id', example='232213'),
          refundApproveId?: string(name='refund_approve_id', example='2024122312'),
          refundCorpTotalAmount?: double(name='refund_corp_total_amount'),
          refundHandFee?: double(name='refund_hand_fee'),
          refundPersonTotalAmount?: double(name='refund_person_total_amount'),
          refundReason?: string(name='refund_reason'),
          refundReasonCode?: string(name='refund_reason_code', example='0'),
          refundTotalAmount?: double(name='refund_total_amount'),
          relateRefundApplyId?: string(name='relate_refund_apply_id', example='232218'),
          userIdList?: [ string ](name='user_id_list'),
        }
      ](name='flight_refund_apply_list'),
      flightReshopApplyList?: [ 
        {
          flightReshopApplyTicketList?: [ 
            {
              flightList?: [ 
                {
                  arrTime?: string(name='arr_time', example='2022-07-20T10:40Z'),
                  cabin?: string(name='cabin', example='V'),
                  cabinClass?: string(name='cabin_class', example='Y'),
                  cabinClassName?: string(name='cabin_class_name'),
                  depTime?: string(name='dep_time', example='2022-07-20T10:40Z'),
                  flightNo?: string(name='flight_no', example='MU1398'),
                }
              ](name='flight_list'),
              relateTicketNoList?: [ string ](name='relate_ticket_no_list'),
              ticketNoList?: [ string ](name='ticket_no_list'),
              userId?: string(name='user_id', example='alitrip123'),
            }
          ](name='flight_reshop_apply_ticket_list'),
          flightReshopSegmentList?: [ 
            {
              airlineCode?: string(name='airline_code', example='CA'),
              airlineName?: string(name='airline_name'),
              arrApt?: string(name='arr_apt'),
              arrAptCode?: string(name='arr_apt_code', example='PEX'),
              arrCity?: string(name='arr_city'),
              arrCityCode?: string(name='arr_city_code', example='BJS'),
              arrTerminal?: string(name='arr_terminal', example='T1'),
              arrTime?: string(name='arr_time', example='2022-07-20T10:40Z'),
              depApt?: string(name='dep_apt'),
              depAptCode?: string(name='dep_apt_code', example='HGH'),
              depCity?: string(name='dep_city'),
              depCityCode?: string(name='dep_city_code', example='HGH'),
              depTerminal?: string(name='dep_terminal', example='T1'),
              depTime?: string(name='dep_time', example='2022-07-20T10:40Z'),
              flightMile?: int32(name='flight_mile'),
              flightNo?: string(name='flight_no', example='CA3358'),
              journeyIndex?: int32(name='journey_index', example='0'),
              segmentIndex?: int32(name='segment_index', example='0'),
              stopCity?: [ string ](name='stop_city'),
            }
          ](name='flight_reshop_segment_list'),
          flightReshopUserFeeList?: [ 
            {
              changeFee?: double(name='change_fee'),
              reshopCorpAmount?: double(name='reshop_corp_amount'),
              reshopPersonAmount?: double(name='reshop_person_amount'),
              upgradeFee?: double(name='upgrade_fee'),
              userId?: string(name='user_id', example='alitrip123'),
            }
          ](name='flight_reshop_user_fee_list'),
          relateReshopApplyId?: long(name='relate_reshop_apply_id', example='100231231'),
          reshopApplyId?: long(name='reshop_apply_id', example='123232323'),
          reshopApproveId?: string(name='reshop_approve_id', example='122312'),
          reshopCorpTotalAmount?: double(name='reshop_corp_total_amount'),
          reshopPersonTotalAmount?: double(name='reshop_person_total_amount'),
          reshopReason?: string(name='reshop_reason'),
          reshopReasonCode?: string(name='reshop_reason_code', example='1002'),
          reshopTotalAmount?: double(name='reshop_total_amount'),
          userIdList?: [ string ](name='user_id_list'),
        }
      ](name='flight_reshop_apply_list'),
      flightSegmentList?: [ 
        {
          airlineCode?: string(name='airline_code', example='CZ'),
          airlineName?: string(name='airline_name'),
          arrApt?: string(name='arr_apt'),
          arrAptCode?: string(name='arr_apt_code', example='PEK'),
          arrCity?: string(name='arr_city'),
          arrCityCode?: string(name='arr_city_code', example='BJS'),
          arrTerminal?: string(name='arr_terminal', example='T1'),
          arrTime?: string(name='arr_time', example='2022-07-20T10:40Z'),
          depApt?: string(name='dep_apt'),
          depAptCode?: string(name='dep_apt_code', example='HGH'),
          depCity?: string(name='dep_city'),
          depCityCode?: string(name='dep_city_code', example='HGH'),
          depTerminal?: string(name='dep_terminal', example='T1'),
          depTime?: string(name='dep_time', example='2022-07-20T10:40Z'),
          flightMile?: int32(name='flight_mile'),
          flightNo?: string(name='flight_no', example='CZ2891'),
          journeyIndex?: int32(name='journey_index', example='0'),
          segmentIndex?: int32(name='segment_index', example='0'),
          stopCity?: [ string ](name='stop_city'),
        }
      ](name='flight_segment_list'),
      gmtCreate?: string(name='gmt_create', example='yyyy-MM-dd HH:mm:ss'),
      gmtModified?: string(name='gmt_modified', example='yyyy-MM-dd HH:mm:ss'),
      id?: string(name='id', example='200042'),
      insureInfoList?: [ 
        {
          insureId?: string(name='insure_id', example='1002308231'),
          insureOrderAmount?: double(name='insure_order_amount'),
          insurePrice?: double(name='insure_price'),
          insureType?: string(name='insure_type'),
          nameList?: [ string ](name='name_list'),
          number?: int32(name='number', example='5'),
          status?: int32(name='status', example='0'),
        }
      ](name='insure_info_list'),
      mixPay?: boolean(name='mix_pay', example='true'),
      orderReserveAmount?: double(name='order_reserve_amount'),
      passengerCount?: int32(name='passenger_count', example='1'),
      payTime?: string(name='pay_time', example='yyyy-MM-dd HH:mm:ss'),
      priceInfoList?: [ 
        {
          categoryCode?: int32(name='category_code', example='1'),
          categoryType?: int32(name='category_type', example='1'),
          gmtCreate?: string(name='gmt_create', example='yyyy-MM-dd HH:mm:ss'),
          payType?: int32(name='pay_type', example='1'),
          price?: double(name='price'),
          subOrderId?: string(name='sub_order_id', example='175549295'),
          tradeId?: string(name='trade_id', example='f98236773'),
          type?: int32(name='type', example='1'),
        }
      ](name='price_info_list'),
      status?: int32(name='status', example='0'),
      supplier?: string(name='supplier'),
      thirdpartItineraryId?: [ string ](name='thirdpart_itinerary_id', example='cs9897766'),
      ticketCorpReserveAmount?: double(name='ticket_corp_reserve_amount'),
      ticketPersonReserveAmount?: double(name='ticket_person_reserve_amount'),
      tripMode?: int32(name='trip_mode', example='1'),
      tripType?: int32(name='trip_type', example='0'),
      userAffiliateList?: [ 
        {
          costCenter?: {
            corpId?: string(name='corp_id', example='alitrip'),
            id?: long(name='id', example='alitripTest'),
            name?: string(name='name'),
            number?: string(name='number', example='test_cost_center'),
          }(name='cost_center'),
          department?: {
            departId?: string(name='depart_id', example='alitrip'),
            departName?: string(name='depart_name'),
          }(name='department'),
          invoice?: {
            id?: long(name='id', example='test1233'),
            title?: string(name='title'),
          }(name='invoice'),
          project?: {
            projectId?: string(name='project_id', example='test_project_id'),
            projectTitle?: string(name='project_title'),
            thirdpartProjectId?: string(name='thirdpart_project_id', example='test_third_part_project_id'),
          }(name='project'),
          userId?: string(name='user_id'),
          userName?: string(name='user_name'),
        }
      ](name='user_affiliate_list'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='module'),
  pageInfo?: {
    number?: int32(name='number'),
    scrollId?: string(name='scroll_id', example='CAESBgoEIgIIABgAIhkKFwMSAAAAMUw4ZGViODFlYmM3MYzM4'),
    totalNumber?: int32(name='total_number', example='100'),
  }(name='pageInfo'),
  requestId?: string(name='requestId', example='C61ECFF6-****-****-****-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce********056433edbb2'),
}

model FlightOrderListQueryV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightOrderListQueryV2ResponseBody(name='body'),
}

/**
 * @summary 机票订单列表查询
 *
 * @param tmpReq FlightOrderListQueryV2Request
 * @param headers FlightOrderListQueryV2Headers
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightOrderListQueryV2Response
 */
async function flightOrderListQueryV2WithOptions(tmpReq: FlightOrderListQueryV2Request, headers: FlightOrderListQueryV2Headers, runtime: Util.RuntimeOptions): FlightOrderListQueryV2Response {
  Util.validateModel(tmpReq);
  var request = new FlightOrderListQueryV2ShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.approveId)) {
    request.approveIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.approveId, 'approve_id', 'json');
  }
  if (!Util.isUnset(tmpReq.bookerId)) {
    request.bookerIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bookerId, 'booker_id', 'json');
  }
  if (!Util.isUnset(tmpReq.departId)) {
    request.departIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.departId, 'depart_id', 'json');
  }
  if (!Util.isUnset(tmpReq.supplier)) {
    request.supplierShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.supplier, 'supplier', 'json');
  }
  if (!Util.isUnset(tmpReq.thirdpartApproveId)) {
    request.thirdpartApproveIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.thirdpartApproveId, 'thirdpart_approve_id', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.approveIdShrink)) {
    query['approve_id'] = request.approveIdShrink;
  }
  if (!Util.isUnset(request.bookerIdShrink)) {
    query['booker_id'] = request.bookerIdShrink;
  }
  if (!Util.isUnset(request.departIdShrink)) {
    query['depart_id'] = request.departIdShrink;
  }
  if (!Util.isUnset(request.endDate)) {
    query['end_date'] = request.endDate;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_Size'] = request.pageSize;
  }
  if (!Util.isUnset(request.scrollId)) {
    query['scroll_id'] = request.scrollId;
  }
  if (!Util.isUnset(request.startDate)) {
    query['start_date'] = request.startDate;
  }
  if (!Util.isUnset(request.supplierShrink)) {
    query['supplier'] = request.supplierShrink;
  }
  if (!Util.isUnset(request.thirdpartApproveIdShrink)) {
    query['thirdpart_approve_id'] = request.thirdpartApproveIdShrink;
  }
  if (!Util.isUnset(request.updateEndDate)) {
    query['update_end_date'] = request.updateEndDate;
  }
  if (!Util.isUnset(request.updateStartDate)) {
    query['update_start_date'] = request.updateStartDate;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightOrderListQueryV2',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/open/v2/Flight-order-list-query`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票订单列表查询
 *
 * @param request FlightOrderListQueryV2Request
 * @return FlightOrderListQueryV2Response
 */
async function flightOrderListQueryV2(request: FlightOrderListQueryV2Request): FlightOrderListQueryV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightOrderListQueryV2Headers{};
  return flightOrderListQueryV2WithOptions(request, headers, runtime);
}

model FlightOrderQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model FlightOrderQueryRequest {
  orderId?: long(name='order_id', description='This parameter is required.', example='246584390'),
  userId?: string(name='user_id'),
}

model FlightOrderQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    flightChangeTicketInfoList?: [ 
      {
        applyId?: string(name='apply_id'),
        arrAirport?: string(name='arr_airport'),
        arrAirportCode?: string(name='arr_airport_code'),
        arrCity?: string(name='arr_city'),
        arrCityCode?: string(name='arr_city_code'),
        arrTime?: string(name='arr_time', example='2022-07-20T10:40Z'),
        changeCabin?: string(name='change_cabin', example='V'),
        changeCabinLevel?: string(name='change_cabin_level', example='Y'),
        changeFee?: double(name='change_fee', example='100'),
        changeFlightNo?: string(name='change_flight_no', example='MU7767'),
        changeOrderId?: long(name='change_order_id', example='33576'),
        changeReason?: string(name='change_reason'),
        changeType?: int32(name='change_type', example='0'),
        depAirport?: string(name='dep_airport'),
        depAirportCode?: string(name='dep_airport_code'),
        depCity?: string(name='dep_city'),
        depCityCode?: string(name='dep_city_code'),
        depTime?: string(name='dep_time', example='2022-07-20T10:40Z'),
        discount?: string(name='discount'),
        gmtCreate?: string(name='gmt_create', example='2022-07-20T10:40Z'),
        gmtModify?: string(name='gmt_modify', example='2022-07-20T10:40Z'),
        journeyIndex?: int32(name='journey_index'),
        originTicketNo?: string(name='origin_ticket_no', example='00-123123'),
        outApplyId?: string(name='out_apply_id'),
        segmentIndex?: int32(name='segment_index'),
        stopCity?: string(name='stop_city'),
        ticketNo?: string(name='ticket_no', example='000-123123'),
        ticketStatus?: string(name='ticket_status'),
        ticketStatusCode?: int32(name='ticket_status_code'),
        upgradeFee?: double(name='upgrade_fee', example='100'),
      }
    ](name='flight_change_ticket_info_list'),
    flightInfoList?: [ 
      {
        airlineCode?: string(name='airline_code', example='MU'),
        airlineName?: string(name='airline_name'),
        arrAirportCityCounty?: {
          adcode?: string(name='adcode'),
          airportCityCode?: string(name='airport_city_code'),
          airportCityName?: string(name='airport_city_name'),
          airportCode?: string(name='airport_code'),
          airportName?: string(name='airport_name'),
          airportParentCityName?: string(name='airport_parent_city_name'),
          countyCityAdcode?: string(name='county_city_adcode'),
          countyCityName?: string(name='county_city_name'),
          prefectureCityAdcode?: string(name='prefecture_city_adcode'),
          prefectureCityName?: string(name='prefecture_city_name'),
        }(name='arr_airport_city_county'),
        arrAirportCode?: string(name='arr_airport_code', example='LHW'),
        arrAirportName?: string(name='arr_airport_name'),
        arrCityAdCode?: string(name='arr_city_ad_code'),
        arrCityCode?: string(name='arr_city_code', example='LHW'),
        arrCityName?: string(name='arr_city_name'),
        arrTerminal?: string(name='arr_terminal'),
        arrTime?: string(name='arr_time', example='2022-07-20T10:40Z'),
        cabin?: string(name='cabin', example='V'),
        cabinLevel?: string(name='cabin_level', example='Y'),
        depAirportCityCounty?: {
          adcode?: string(name='adcode'),
          airportCityCode?: string(name='airport_city_code'),
          airportCityName?: string(name='airport_city_name'),
          airportCode?: string(name='airport_code'),
          airportName?: string(name='airport_name'),
          airportParentCityName?: string(name='airport_parent_city_name'),
          countyCityAdcode?: string(name='county_city_adcode'),
          countyCityName?: string(name='county_city_name'),
          prefectureCityAdcode?: string(name='prefecture_city_adcode'),
          prefectureCityName?: string(name='prefecture_city_name'),
        }(name='dep_airport_city_county'),
        depAirportCode?: string(name='dep_airport_code', example='NGB'),
        depAirportName?: string(name='dep_airport_name'),
        depCityAdCode?: string(name='dep_city_ad_code'),
        depCityCode?: string(name='dep_city_code', example='NGB'),
        depCityName?: string(name='dep_city_name'),
        depTerminal?: string(name='dep_terminal'),
        depTime?: string(name='dep_time', example='2022-07-20T10:40Z'),
        flightMile?: int32(name='flight_mile', example='900'),
        flightNo?: string(name='flight_no', example='MU3849'),
        journeyIndex?: int32(name='journey_index'),
        segmentIndex?: int32(name='segment_index'),
        stopCity?: [ string ](name='stop_city'),
        stopCityInfoList?: [ 
          {
            stopAirportCityCounty?: {
              adcode?: string(name='adcode'),
              airportCityCode?: string(name='airport_city_code'),
              airportCityName?: string(name='airport_city_name'),
              airportCode?: string(name='airport_code'),
              airportName?: string(name='airport_name'),
              airportParentCityName?: string(name='airport_parent_city_name'),
              countyCityAdcode?: string(name='county_city_adcode'),
              countyCityName?: string(name='county_city_name'),
              prefectureCityAdcode?: string(name='prefecture_city_adcode'),
              prefectureCityName?: string(name='prefecture_city_name'),
            }(name='stop_airport_city_county'),
            stopAirportCode?: string(name='stop_airport_code'),
          }
        ](name='stop_city_info_list'),
      }
    ](name='flight_info_list'),
    flightRefundTicketInfoList?: [ 
      {
        applyId?: string(name='apply_id'),
        arrAirport?: string(name='arr_airport'),
        arrAirportCode?: string(name='arr_airport_code'),
        arrCity?: string(name='arr_city'),
        arrCityCode?: string(name='arr_city_code'),
        companyRefundTicketFee?: double(name='company_refund_ticket_fee'),
        depAirport?: string(name='dep_airport'),
        depAirportCode?: string(name='dep_airport_code'),
        depCity?: string(name='dep_city'),
        depCityCode?: string(name='dep_city_code'),
        flightNo?: string(name='flight_no'),
        gmtCreate?: string(name='gmt_create', example='2022-07-20T10:40Z'),
        gmtModify?: string(name='gmt_modify', example='2022-07-20T10:40Z'),
        journeyIndex?: int32(name='journey_index'),
        outApplyId?: string(name='out_apply_id'),
        personalRefundTicketFee?: double(name='personal_refund_ticket_fee'),
        refundOrderId?: long(name='refund_order_id', example='43667'),
        refundReason?: string(name='refund_reason'),
        refundTicketFee?: double(name='refund_ticket_fee', example='100'),
        refundType?: int32(name='refund_type', example='0'),
        segmentIndex?: int32(name='segment_index'),
        ticketNo?: string(name='ticket_no', example='000-13232'),
      }
    ](name='flight_refund_ticket_info_list'),
    flightTicketInfoList?: [ 
      {
        arrAirport?: string(name='arr_airport'),
        arrAirportCode?: string(name='arr_airport_code'),
        arrCity?: string(name='arr_city'),
        arrCityCode?: string(name='arr_city_code'),
        buildPrice?: double(name='build_price', example='100'),
        changed?: boolean(name='changed', example='false'),
        depAirport?: string(name='dep_airport'),
        depAirportCode?: string(name='dep_airport_code'),
        depCity?: string(name='dep_city'),
        depCityCode?: string(name='dep_city_code'),
        discount?: int32(name='discount', example='10'),
        flightNo?: string(name='flight_no'),
        gmtCreate?: string(name='gmt_create', example='2022-07-20T10:40Z'),
        gmtModify?: string(name='gmt_modify', example='2022-07-20T10:40Z'),
        journeyIndex?: int32(name='journey_index'),
        oilPrice?: double(name='oil_price', example='100'),
        payType?: int32(name='pay_type', example='1'),
        personalPrice?: double(name='personal_price'),
        segmentIndex?: int32(name='segment_index'),
        settlePrice?: double(name='settle_price', example='100'),
        ticketNo?: string(name='ticket_no', example='000-123'),
        ticketPrice?: double(name='ticket_price', example='100'),
        ticketStatus?: string(name='ticket_status', example='OPEN'),
        ticketStatusCode?: int32(name='ticket_status_code', example='1'),
        userId?: string(name='user_id'),
      }
    ](name='flight_ticket_info_list'),
    insuranceInfoList?: [ 
      {
        amount?: double(name='amount', example='100'),
        insuranceNo?: string(name='insurance_no', example='345-987-098'),
        name?: string(name='name'),
        status?: int32(name='status', example='1'),
        type?: string(name='type'),
      }
    ](name='insurance_info_list'),
    invoiceInfo?: {
      id?: long(name='id', example='43316'),
      title?: string(name='title'),
    }(name='invoice_info'),
    orderBaseInfo?: {
      applyId?: string(name='apply_id', example='175634'),
      btripTitle?: string(name='btrip_title'),
      contactName?: string(name='contact_name'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      exceedApplyId?: string(name='exceed_apply_id'),
      exceedThirdPartApplyId?: string(name='exceed_third_part_apply_id'),
      gmtCreate?: string(name='gmt_create', example='2022-07-20T10:40Z'),
      gmtModify?: string(name='gmt_modify', example='2022-07-20T10:40Z'),
      itineraryId?: string(name='itinerary_id', example='13628'),
      orderId?: long(name='order_id', example='146178'),
      orderStatus?: int32(name='order_status', example='5'),
      supplier?: string(name='supplier'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', example='CS-FLIGHT'),
      thirdpartBusinessId?: string(name='thirdpart_business_id'),
      thirdpartCorpId?: string(name='thirdpart_corp_id'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', example='CS-FLIGHT'),
      tripType?: int32(name='trip_type', example='0'),
      userId?: string(name='user_id'),
    }(name='order_base_info'),
    passengerInfoList?: [ 
      {
        costCenterId?: long(name='cost_center_id', example='13446'),
        costCenterName?: string(name='cost_center_name'),
        costCenterNumber?: string(name='cost_center_number', example='CS-3345'),
        projectCode?: string(name='project_code', example='CS-PROJECT'),
        projectId?: long(name='project_id', example='133576'),
        projectTitle?: string(name='project_title'),
        thirdpartProjectId?: string(name='thirdpart_project_id', example='CS-THIRDPROJECT'),
        userId?: string(name='user_id'),
        userName?: string(name='user_name'),
        userType?: int32(name='user_type', example='0'),
      }
    ](name='passenger_info_list'),
    priceInfoList?: [ 
      {
        categoryCode?: int32(name='category_code', example='1'),
        gmtCreate?: string(name='gmt_create', example='2022-07-20T10:40Z'),
        passengerName?: string(name='passenger_name'),
        payType?: int32(name='pay_type', example='4'),
        price?: double(name='price', example='100'),
        tradeId?: string(name='trade_id', example='CS73290'),
        type?: int32(name='type', example='1'),
      }
    ](name='price_info_list'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightOrderQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightOrderQueryResponseBody(name='body'),
}

/**
 * @summary 查询机票订单详情（含票信息）
 *
 * @param request FlightOrderQueryRequest
 * @param headers FlightOrderQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightOrderQueryResponse
 */
async function flightOrderQueryWithOptions(request: FlightOrderQueryRequest, headers: FlightOrderQueryHeaders, runtime: Util.RuntimeOptions): FlightOrderQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightOrderQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/flight/v1/order`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询机票订单详情（含票信息）
 *
 * @param request FlightOrderQueryRequest
 * @return FlightOrderQueryResponse
 */
async function flightOrderQuery(request: FlightOrderQueryRequest): FlightOrderQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightOrderQueryHeaders{};
  return flightOrderQueryWithOptions(request, headers, runtime);
}

model FlightOtaItemDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='Dj2laAwE00'),
}

model FlightOtaItemDetailRequest {
  isvName?: string(name='isv_name', description='This parameter is required.', example='cheshi'),
  otaItemId?: string(name='ota_item_id', description='This parameter is required.', example='68cdc6b37c87484c98b479b49306ffbb_0'),
}

model FlightOtaItemDetailResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    baggageRule?: [ 
      {
        baggageSubItems?: [ 
          {
            baggageSubContentVisualizes?: [ 
              {
                baggageDesc?: [ string ](name='baggage_desc', description='baggage_desc'),
                baggageSubContentType?: int32(name='baggage_sub_content_type', example='0'),
                description?: {
                  desc?: string(name='desc'),
                  icon?: string(name='icon', example='https://gw.alicdn.com/imgextra/i4/O1CN01UynXG31pjsEtA3tMF_!!6000000005397-2-tps-36-36.png'),
                  image?: string(name='image', example='https://gw.alicdn.com/imgextra/i1/O1CN01qe7wL21gJ0SmEXXL7_!!6000000004120-2-tps-1206-768.png'),
                  title?: string(name='title'),
                }(name='description'),
                imageDO?: {
                  image?: string(name='image', example='https://gw.alicdn.com/imgextra/i3/O1CN01kLt3m923XsUs6WVif_!!6000000007266-2-tps-280-300.png'),
                  largest?: string(name='largest', example='55'),
                  middle?: string(name='middle', example='40'),
                  smallest?: string(name='smallest', example='20'),
                }(name='image_d_o'),
                isHighlight?: boolean(name='is_highlight', example='false'),
                subTitle?: string(name='sub_title'),
              }
            ](name='baggage_sub_content_visualizes'),
            extraContentVisualizes?: [ any ](name='extra_content_visualizes'),
            isStruct?: boolean(name='is_struct', example='false'),
            ptc?: string(name='ptc', example='ADT'),
            title?: string(name='title'),
          }
        ](name='baggage_sub_items'),
        index?: int32(name='index', example='0'),
        tableHead?: string(name='table_head', example='tableHead'),
        tips?: {
          logo?: string(name='logo', example='https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png'),
          tipsDesc?: string(name='tips_desc'),
          tipsImage?: string(name='tips_image', example='https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png'),
        }(name='tips'),
        title?: string(name='title'),
        type?: int32(name='type', example='2'),
      }
    ](name='baggage_rule'),
    changeRule?: [ 
      {
        extraContents?: [ 
          {
            content?: string(name='content'),
            title?: string(name='title'),
          }
        ](name='extra_contents'),
        flightNo?: string(name='flight_no', example='HO3925'),
        freeBaggage?: int32(name='free_baggage', example='0'),
        index?: int32(name='index', example='0'),
        level?: int32(name='level', example='0'),
        refundSubItems?: [ 
          {
            isStruct?: boolean(name='is_struct', example='false'),
            ptc?: string(name='ptc', example='ADT'),
            refundSubContents?: [ 
              {
                feeDesc?: string(name='fee_desc'),
                feeRange?: string(name='fee_range'),
                style?: int32(name='style', example='1'),
              }
            ](name='refund_sub_contents'),
            title?: string(name='title'),
          }
        ](name='refund_sub_items'),
        subTableHead?: [ string ](name='sub_table_head', description='subTableHead'),
        tableHead?: string(name='table_head', example='tableHead'),
        title?: string(name='title'),
        type?: int32(name='type', example='1'),
      }
    ](name='change_rule'),
    refundRule?: [ 
      {
        extraContents?: [ 
          {
            content?: string(name='content'),
            title?: string(name='title'),
          }
        ](name='extra_contents'),
        flightNo?: string(name='flight_no', example='HO3925'),
        freeBaggage?: int32(name='free_baggage', example='0'),
        index?: int32(name='index', example='0'),
        level?: int32(name='level', example='0'),
        refundSubItems?: [ 
          {
            isStruct?: boolean(name='is_struct', example='false'),
            ptc?: string(name='ptc', example='ADT'),
            refundSubContents?: [ 
              {
                feeDesc?: string(name='fee_desc'),
                feeRange?: string(name='fee_range'),
                style?: int32(name='style', example='1'),
              }
            ](name='refund_sub_contents'),
            title?: string(name='title'),
          }
        ](name='refund_sub_items'),
        subTableHead?: [ string ](name='sub_table_head', description='subTableHead'),
        tableHead?: string(name='table_head', example='tableHead'),
        title?: string(name='title'),
        type?: int32(name='type', example='0'),
      }
    ](name='refund_rule'),
    sellPrice?: int32(name='sell_price', example='1830'),
    sellPriceList?: [ int32 ](name='sell_price_list'),
    tripType?: int32(name='trip_type', example='1'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', description='requestId', example='92359A00-85D8-16C4-AED0-249618DEEC17'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210bc60a16916374201706365d2a16'),
}

model FlightOtaItemDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightOtaItemDetailResponseBody(name='body'),
}

/**
 * @summary 查询退改规则行李额
 *
 * @param request FlightOtaItemDetailRequest
 * @param headers FlightOtaItemDetailHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightOtaItemDetailResponse
 */
async function flightOtaItemDetailWithOptions(request: FlightOtaItemDetailRequest, headers: FlightOtaItemDetailHeaders, runtime: Util.RuntimeOptions): FlightOtaItemDetailResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.otaItemId)) {
    query['ota_item_id'] = request.otaItemId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightOtaItemDetail',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/flight/action/ota-item-detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询退改规则行李额
 *
 * @param request FlightOtaItemDetailRequest
 * @return FlightOtaItemDetailResponse
 */
async function flightOtaItemDetail(request: FlightOtaItemDetailRequest): FlightOtaItemDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightOtaItemDetailHeaders{};
  return flightOtaItemDetailWithOptions(request, headers, runtime);
}

model FlightOtaSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightOtaSearchRequest {
  airlineCode?: string(name='airline_code', example='CA'),
  arrCityCode?: string(name='arr_city_code', description='This parameter is required.', example='BJS'),
  cabinClass?: string(name='cabin_class', example='Y'),
  carrierFlightNo?: string(name='carrier_flight_no', example='CA2324'),
  depCityCode?: string(name='dep_city_code', description='This parameter is required.', example='HGH'),
  depDate?: string(name='dep_date', description='This parameter is required.', example='2023-08-15 19:30:00'),
  flightNo?: string(name='flight_no', description='This parameter is required.', example='CA2323'),
}

model FlightOtaSearchResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    flightList?: [ 
      {
        airlineInfo?: {
          airlineCode?: string(name='airline_code', example='CA'),
          airlineName?: string(name='airline_name'),
          airlineSimpleName?: string(name='airline_simple_name'),
        }(name='airline_info'),
        arrAirportInfo?: {
          airportCode?: string(name='airport_code', example='HGH'),
          airportName?: string(name='airport_name'),
          cityCode?: string(name='city_code', example='HGH'),
          cityName?: string(name='city_name'),
          terminal?: string(name='terminal', example='T3'),
        }(name='arr_airport_info'),
        arrDate?: string(name='arr_date', example='yyyy-MM-dd HH:mm:ss'),
        buildPrice?: int32(name='build_price', example='100'),
        cabin?: string(name='cabin', example='Y'),
        cabinClass?: string(name='cabin_class', example='2'),
        cabinInfoList?: [ 
          {
            agentId?: long(name='agent_id'),
            basicCabinPrice?: int32(name='basic_cabin_price', example='12456'),
            buildPrice?: int32(name='build_price', example='100'),
            cabin?: string(name='cabin', example='G'),
            cabinClass?: string(name='cabin_class', example='Y'),
            cabinClassName?: string(name='cabin_class_name'),
            childCabin?: string(name='child_cabin', example='G'),
            className?: string(name='class_name'),
            classRule?: string(name='class_rule', example='demo'),
            discount?: string(name='discount', example='10'),
            flightRuleList?: [ 
              {
                baggageInfo?: string(name='baggage_info', example='demo'),
                baggageItem?: {
                  baggageSubItems?: [ 
                    {
                      baggageSubContentVisualizes?: [ 
                        {
                          baggageDesc?: [ string ](name='baggage_desc'),
                          baggageSubContentType?: int32(name='baggage_sub_content_type', example='0'),
                          description?: {
                            desc?: string(name='desc'),
                            icon?: string(name='icon', example='https://gw.alicdn.com/imgextra/i4/O1CN01UynXG31pjsEtA3tMF_!!6000000005397-2-tps-36-36.png'),
                            image?: string(name='image', example='https://gw.alicdn.com/imgextra/i1/O1CN01qe7wL21gJ0SmEXXL7_!!6000000004120-2-tps-1206-768.png'),
                            title?: string(name='title'),
                          }(name='description'),
                          imageDO?: {
                            image?: string(name='image', example='demo'),
                            largest?: string(name='largest', example='50'),
                            middle?: string(name='middle', example='40'),
                            smallest?: string(name='smallest', example='20'),
                          }(name='image_d_o'),
                          isHighlight?: boolean(name='is_highlight', example='true'),
                          subTitle?: string(name='sub_title'),
                        }
                      ](name='baggage_sub_content_visualizes'),
                      extraContentVisualizes?: [ any ](name='extra_content_visualizes'),
                      isStruct?: boolean(name='is_struct', example='true'),
                      ptc?: string(name='ptc', description='PTC', example='ADT'),
                      title?: string(name='title'),
                    }
                  ](name='baggage_sub_items'),
                  index?: int32(name='index', example='1'),
                  tableHead?: string(name='table_head'),
                  tips?: {
                    logo?: string(name='logo', example='https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png'),
                    tipsDesc?: string(name='tips_desc'),
                    tipsImage?: string(name='tips_image', example='https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png'),
                  }(name='tips'),
                  title?: string(name='title'),
                  type?: int32(name='type', example='1'),
                }(name='baggage_item'),
                changeRule?: {
                  able?: boolean(name='able', example='true'),
                  info?: [ 
                    {
                      content?: string(name='content'),
                      cost?: int32(name='cost', example='100'),
                      costPercent?: int32(name='cost_percent', example='10'),
                      timeStamp?: int32(name='time_stamp', example='1675036500000'),
                      timeType?: string(name='time_type', example='demo'),
                      title?: string(name='title'),
                    }
                  ](name='info'),
                }(name='change_rule'),
                changeRuleItem?: {
                  extraContents?: [ 
                    {
                      content?: string(name='content', example='demo'),
                      title?: string(name='title', example='demo'),
                    }
                  ](name='extra_contents'),
                  index?: int32(name='index', example='0'),
                  refundSubItems?: [ 
                    {
                      isStruct?: boolean(name='is_struct', example='true'),
                      ptc?: string(name='ptc', description='PTC', example='ADT'),
                      refundSubContents?: [ 
                        {
                          feeDesc?: string(name='fee_desc'),
                          feeRange?: string(name='fee_range'),
                          style?: int32(name='style', example='1'),
                        }
                      ](name='refund_sub_contents'),
                      title?: string(name='title'),
                    }
                  ](name='refund_sub_items'),
                  subTableHead?: [ string ](name='sub_table_head'),
                  tableHead?: string(name='table_head'),
                  title?: string(name='title'),
                  type?: int32(name='type', example='0'),
                }(name='change_rule_item'),
                extra?: string(name='extra', example='{}'),
                refundRule?: {
                  able?: boolean(name='able', example='true'),
                  info?: [ 
                    {
                      content?: string(name='content'),
                      cost?: int32(name='cost', example='100'),
                      costPercent?: int32(name='cost_percent', example='10'),
                      timeStamp?: int32(name='time_stamp', example='1675036500000'),
                      timeType?: string(name='time_type', example='demo'),
                      title?: string(name='title'),
                    }
                  ](name='info'),
                }(name='refund_rule'),
                refundRuleItem?: {
                  extraContents?: [ 
                    {
                      content?: string(name='content', example='demo'),
                      title?: string(name='title', example='demo'),
                    }
                  ](name='extra_contents'),
                  index?: int32(name='index', example='1'),
                  refundSubItems?: [ 
                    {
                      isStruct?: boolean(name='is_struct', example='true'),
                      ptc?: string(name='ptc', description='PTC', example='ADT'),
                      refundSubContents?: [ 
                        {
                          feeDesc?: string(name='fee_desc'),
                          feeRange?: string(name='fee_range'),
                          style?: int32(name='style', example='1'),
                        }
                      ](name='refund_sub_contents'),
                      title?: string(name='title'),
                    }
                  ](name='refund_sub_items'),
                  subTableHead?: [ string ](name='sub_table_head'),
                  tableHead?: string(name='table_head'),
                  title?: string(name='title', example='demo'),
                  type?: int32(name='type', example='1'),
                }(name='refund_rule_item'),
                signRule?: {
                  able?: boolean(name='able', example='true'),
                  info?: [ 
                    {
                      content?: string(name='content'),
                      cost?: int32(name='cost', example='100'),
                      costPercent?: int32(name='cost_percent', example='10'),
                      timeStamp?: int32(name='time_stamp', example='1675036500000'),
                      timeType?: string(name='time_type', example='demo'),
                      title?: string(name='title'),
                    }
                  ](name='info'),
                }(name='sign_rule'),
                tuigaiqianInfo?: string(name='tuigaiqian_info'),
                upgradeRule?: {
                  able?: boolean(name='able', example='true'),
                  info?: [ 
                    {
                      content?: string(name='content'),
                      cost?: int32(name='cost', example='100'),
                      costPercent?: int32(name='cost_percent', example='10'),
                      timeStamp?: int32(name='time_stamp', example='1675036500000'),
                      timeType?: string(name='time_type', example='demo'),
                      title?: string(name='title'),
                    }
                  ](name='info'),
                }(name='upgrade_rule'),
              }
            ](name='flight_rule_list'),
            flightRuleListStr?: string(name='flight_rule_list_str', example='demo'),
            invoiceType?: int32(name='invoice_type', example='1'),
            isProtocol?: boolean(name='is_protocol', example='true'),
            oilPrice?: int32(name='oil_price', example='100'),
            orderParams?: string(name='order_params', example='1000_1_0'),
            otaItemId?: string(name='ota_item_id', example='97f64e2d6f61408a827dd523817fefd6_0'),
            price?: int32(name='price', example='100'),
            productType?: long(name='product_type', example='1'),
            productTypeDesc?: string(name='product_type_desc', example='demo'),
            promotionPrice?: string(name='promotion_price', example='100'),
            remainedSeatCount?: string(name='remained_seat_count', example='1'),
            ticketPrice?: int32(name='ticket_price', example='100'),
            totalPrice?: int32(name='total_price', example='100'),
          }
        ](name='cabin_info_list'),
        carrierAirline?: string(name='carrier_airline', example='FM'),
        carrierNo?: string(name='carrier_no', example='FM9152'),
        depAirportInfo?: {
          airportCode?: string(name='airport_code', example='PEK'),
          airportName?: string(name='airport_name'),
          cityCode?: string(name='city_code', example='BJS'),
          cityName?: string(name='city_name'),
          terminal?: string(name='terminal', example='T3'),
        }(name='dep_airport_info'),
        depCityCode?: string(name='dep_city_code', example='BJS'),
        depDate?: string(name='dep_date', example='yyyy-MM-dd HH:mm:ss'),
        discount?: int32(name='discount', example='1'),
        flightNo?: string(name='flight_no', example='CA1234'),
        flightRuleList?: [ 
          {
            baggageInfo?: string(name='baggage_info', example='demo'),
            baggageItem?: {
              baggageSubItems?: [ 
                {
                  baggageSubContentVisualizes?: [ 
                    {
                      baggageDesc?: [ string ](name='baggage_desc'),
                      baggageSubContentType?: int32(name='baggage_sub_content_type', example='1'),
                      description?: {
                        desc?: string(name='desc'),
                        icon?: string(name='icon', example='https://gw.alicdn.com/imgextra/i4/O1CN01UynXG31pjsEtA3tMF_!!6000000005397-2-tps-36-36.png'),
                        image?: string(name='image', example='https://gw.alicdn.com/imgextra/i1/O1CN01qe7wL21gJ0SmEXXL7_!!6000000004120-2-tps-1206-768.png'),
                        title?: string(name='title'),
                      }(name='description'),
                      imageDO?: {
                        image?: string(name='image', example='demo'),
                        largest?: string(name='largest', example='50'),
                        middle?: string(name='middle', example='40'),
                        smallest?: string(name='smallest', example='20'),
                      }(name='image_d_o'),
                      isHighlight?: boolean(name='is_highlight', example='true'),
                      subTitle?: string(name='sub_title'),
                    }
                  ](name='baggage_sub_content_visualizes'),
                  extraContentVisualizes?: [ any ](name='extra_content_visualizes'),
                  isStruct?: boolean(name='is_struct', example='true'),
                  ptc?: string(name='ptc', description='PTC', example='ADT'),
                  title?: string(name='title'),
                }
              ](name='baggage_sub_items'),
              index?: int32(name='index', example='1'),
              tableHead?: string(name='table_head'),
              tips?: {
                logo?: string(name='logo', example='https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png'),
                tipsDesc?: string(name='tips_desc'),
                tipsImage?: string(name='tips_image', example='https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png'),
              }(name='tips'),
              title?: string(name='title'),
              type?: int32(name='type', example='1'),
            }(name='baggage_item'),
            changeRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='change_rule'),
            changeRuleItem?: {
              extraContents?: [ 
                {
                  content?: string(name='content'),
                  title?: string(name='title'),
                }
              ](name='extra_contents'),
              index?: int32(name='index', example='0'),
              refundSubItems?: [ 
                {
                  isStruct?: boolean(name='is_struct', description='isStruct : true', example='true'),
                  ptc?: string(name='ptc', description='PTC', example='ADT'),
                  refundSubContents?: [ 
                    {
                      feeDesc?: string(name='fee_desc'),
                      feeRange?: string(name='fee_range'),
                      style?: int32(name='style', example='1'),
                    }
                  ](name='refund_sub_contents'),
                  title?: string(name='title'),
                }
              ](name='refund_sub_items'),
              subTableHead?: [ string ](name='sub_table_head'),
              tableHead?: string(name='table_head'),
              title?: string(name='title'),
              type?: int32(name='type', example='1'),
            }(name='change_rule_item'),
            extra?: string(name='extra', example='{}'),
            refundRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='refund_rule'),
            refundRuleItem?: {
              extraContents?: [ 
                {
                  content?: string(name='content', example='demo'),
                  title?: string(name='title', example='demo'),
                }
              ](name='extra_contents'),
              index?: int32(name='index', example='1'),
              refundSubItems?: [ 
                {
                  isStruct?: boolean(name='is_struct', example='true'),
                  ptc?: string(name='ptc', description='PTC', example='ADT'),
                  refundSubContents?: [ 
                    {
                      feeDesc?: string(name='fee_desc'),
                      feeRange?: string(name='fee_range'),
                      style?: int32(name='style', example='1'),
                    }
                  ](name='refund_sub_contents'),
                  title?: string(name='title'),
                }
              ](name='refund_sub_items'),
              subTableHead?: [ string ](name='sub_table_head'),
              tableHead?: string(name='table_head'),
              title?: string(name='title'),
              type?: int32(name='type', example='1'),
            }(name='refund_rule_item'),
            signRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='sign_rule'),
            tuigaiqianInfo?: string(name='tuigaiqian_info'),
            upgradeRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='upgrade_rule'),
          }
        ](name='flight_rule_list'),
        flightRuleListStr?: string(name='flight_rule_list_str', example='demo'),
        flightSize?: string(name='flight_size'),
        flightType?: string(name='flight_type', example='demo'),
        invoiceType?: int32(name='invoice_type', example='1'),
        isProtocol?: boolean(name='is_protocol', example='true'),
        isShare?: boolean(name='is_share', example='false'),
        isStop?: boolean(name='is_stop', example='false'),
        isTransfer?: boolean(name='is_transfer', example='false'),
        mealDesc?: string(name='meal_desc'),
        oilPrice?: int32(name='oil_price', example='100'),
        otaItemId?: string(name='ota_item_id', example='6669c8e53b684105b8687bad0331988a_41'),
        price?: int32(name='price', example='100'),
        productType?: long(name='product_type', example='1'),
        productTypeDesc?: string(name='product_type_desc'),
        promotionPrice?: string(name='promotion_price', example='100'),
        remainedSeatCount?: string(name='remained_seat_count', example='1'),
        secretParams?: string(name='secret_params', example='1000_1_0'),
        segmentNumber?: string(name='segment_number', example='1'),
        stopArrTime?: string(name='stop_arr_time', example='yyyy-MM-dd HH:mm:ss'),
        stopCity?: string(name='stop_city', example='HGH'),
        stopDepTime?: string(name='stop_dep_time', example='yyyy-MM-dd HH:mm:ss'),
        ticketPrice?: int32(name='ticket_price', example='100'),
        totalPrice?: string(name='total_price', example='100'),
        tripType?: int32(name='trip_type', example='1'),
      }
    ](name='flight_list'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightOtaSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightOtaSearchResponseBody(name='body'),
}

/**
 * @summary 航班最低价搜索
 *
 * @param request FlightOtaSearchRequest
 * @param headers FlightOtaSearchHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightOtaSearchResponse
 */
async function flightOtaSearchWithOptions(request: FlightOtaSearchRequest, headers: FlightOtaSearchHeaders, runtime: Util.RuntimeOptions): FlightOtaSearchResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.airlineCode)) {
    query['airline_code'] = request.airlineCode;
  }
  if (!Util.isUnset(request.arrCityCode)) {
    query['arr_city_code'] = request.arrCityCode;
  }
  if (!Util.isUnset(request.cabinClass)) {
    query['cabin_class'] = request.cabinClass;
  }
  if (!Util.isUnset(request.carrierFlightNo)) {
    query['carrier_flight_no'] = request.carrierFlightNo;
  }
  if (!Util.isUnset(request.depCityCode)) {
    query['dep_city_code'] = request.depCityCode;
  }
  if (!Util.isUnset(request.depDate)) {
    query['dep_date'] = request.depDate;
  }
  if (!Util.isUnset(request.flightNo)) {
    query['flight_no'] = request.flightNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightOtaSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/flight/action/ota-search`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 航班最低价搜索
 *
 * @param request FlightOtaSearchRequest
 * @return FlightOtaSearchResponse
 */
async function flightOtaSearch(request: FlightOtaSearchRequest): FlightOtaSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightOtaSearchHeaders{};
  return flightOtaSearchWithOptions(request, headers, runtime);
}

model FlightOtaSearchV2Headers {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='Dj2laAwE00'),
}

model FlightOtaSearchV2Request {
  cabinTypeList?: [ int32 ](name='cabin_type_list'),
  directOnly?: boolean(name='direct_only', example='true'),
  isvName?: string(name='isv_name', description='This parameter is required.', example='cheshi'),
  needShareFlight?: boolean(name='need_share_flight', example='true'),
  searchJourneys?: [ 
    {
      arrCityCode?: string(name='arr_city_code', description='This parameter is required.', example='HGH'),
      depCityCode?: string(name='dep_city_code', description='This parameter is required.', example='BJS'),
      depDate?: string(name='dep_date', description='This parameter is required.', example='2023-09-01'),
      selectedFlights?: [ 
        {
          arrAirportCode?: string(name='arr_airport_code', example='HGH'),
          arrCityCode?: string(name='arr_city_code', example='HGH'),
          depAirportCode?: string(name='dep_airport_code', example='PKX'),
          depCityCode?: string(name='dep_city_code', example='BJS'),
          flightTime?: string(name='flight_time', example='2023-09-01 07:10:00'),
          marketFlightNo?: string(name='market_flight_no', description='This parameter is required.', example='HO3925'),
          operateFlightNo?: string(name='operate_flight_no', example='CX601'),
        }
      ](name='selected_flights', description='This parameter is required.'),
    }
  ](name='search_journeys', description='This parameter is required.'),
  searchMode?: int32(name='search_mode', description='This parameter is required.', example='0'),
  tripType?: int32(name='trip_type', description='This parameter is required.', example='1'),
}

model FlightOtaSearchV2ShrinkRequest {
  cabinTypeListShrink?: string(name='cabin_type_list'),
  directOnly?: boolean(name='direct_only', example='true'),
  isvName?: string(name='isv_name', description='This parameter is required.', example='cheshi'),
  needShareFlight?: boolean(name='need_share_flight', example='true'),
  searchJourneysShrink?: string(name='search_journeys', description='This parameter is required.'),
  searchMode?: int32(name='search_mode', description='This parameter is required.', example='0'),
  tripType?: int32(name='trip_type', description='This parameter is required.', example='1'),
}

model FlightOtaSearchV2ResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    flightJourneyInfos?: [ 
      {
        arrCityCode?: string(name='arr_city_code', example='HGH'),
        arrCityName?: string(name='arr_city_name'),
        arrTime?: string(name='arr_time', example='2023-08-13 09:45'),
        depCityCode?: string(name='dep_city_code', example='BJS'),
        depCityName?: string(name='dep_city_name'),
        depTime?: string(name='dep_time', example='2023-08-13 07:25'),
        duration?: int32(name='duration', example='140'),
        extensions?: map[string]string(name='extensions'),
        flightSegmentInfos?: [ 
          {
            airlineInfo?: {
              airlineChineseName?: string(name='airline_chinese_name'),
              airlineChineseShortName?: string(name='airline_chinese_short_name'),
              airlineCode?: string(name='airline_code', example='MU'),
              airlineIcon?: string(name='airline_icon', example='https://gw.alicdn.com/tfs/TB15EXDFHY1gK0jSZTEXXXDQVXa-450-450.png_80x80.jpg'),
              cheapFlight?: boolean(name='cheap_flight', example='false'),
            }(name='airline_info'),
            arrAirportInfo?: {
              airportCode?: string(name='airport_code', example='PKX'),
              airportName?: string(name='airport_name'),
              airportNameColor?: string(name='airport_name_color', example='#FF7300'),
              airportShortName?: string(name='airport_short_name'),
              terminal?: string(name='terminal', example='--'),
            }(name='arr_airport_info'),
            arrCityCode?: string(name='arr_city_code', example='BJS'),
            arrCityName?: string(name='arr_city_name'),
            arrTime?: string(name='arr_time', example='2023-08-13 09:45'),
            baggageDesc?: string(name='baggage_desc'),
            depAirportInfo?: {
              airportCode?: string(name='airport_code', example='HGH'),
              airportName?: string(name='airport_name'),
              airportNameColor?: string(name='airport_name_color', example='#FF7300'),
              airportShortName?: string(name='airport_short_name'),
              terminal?: string(name='terminal', example='T3'),
            }(name='dep_airport_info'),
            depCityCode?: string(name='dep_city_code', example='HGH'),
            depCityName?: string(name='dep_city_name'),
            depTime?: string(name='dep_time', example='2023-08-13 07:25'),
            duration?: int32(name='duration', description='duration', example='140'),
            extraInfo?: map[string]any(name='extra_info'),
            flightNo?: string(name='flight_no', example='MU5131'),
            flightShareInfo?: {
              operatingAirlineInfo?: {
                airlineChineseName?: string(name='airline_chinese_name'),
                airlineChineseShortName?: string(name='airline_chinese_short_name'),
                airlineCode?: string(name='airline_code', example='DR'),
                airlineIcon?: string(name='airline_icon', example='https://gw.alicdn.com/tfs/TB1gSXBFUT1gK0jSZFhXXaAtVXa-450-450.png_80x80.jpg'),
                cheapFlight?: boolean(name='cheap_flight', example='false'),
              }(name='operating_airline_info'),
              operatingFlightNo?: string(name='operating_flight_no', example='CX601'),
            }(name='flight_share_info'),
            flightSize?: string(name='flight_size'),
            flightStopInfo?: {
              stopAirport?: string(name='stop_airport', example='HGH'),
              stopAirportName?: string(name='stop_airport_name'),
              stopArrTerm?: string(name='stop_arr_term', example='T3'),
              stopArrTime?: string(name='stop_arr_time', example='BJS'),
              stopCityCode?: string(name='stop_city_code', example='HGH'),
              stopCityName?: string(name='stop_city_name', example='HGH'),
              stopCityNames?: [ string ](name='stop_city_names'),
              stopDepTerm?: string(name='stop_dep_term', example='T4'),
              stopDepTime?: string(name='stop_dep_time', example='2023-08-13 07:25'),
              stopTime?: string(name='stop_time'),
            }(name='flight_stop_info'),
            flightType?: string(name='flight_type', example='320'),
            manufacturer?: string(name='manufacturer'),
            mealDesc?: string(name='meal_desc'),
            miles?: int32(name='miles'),
            onTimeRate?: string(name='on_time_rate'),
            oneMore?: int32(name='one_more', example='0'),
            oneMoreShow?: string(name='one_more_show'),
            segmentIndex?: int32(name='segment_index', example='0'),
            share?: boolean(name='share', example='false'),
            shortFlightSize?: string(name='short_flight_size'),
            stop?: boolean(name='stop', example='false'),
            totalTime?: string(name='total_time'),
            transferTime?: string(name='transfer_time'),
            transferTimeNumber?: int32(name='transfer_time_number'),
          }
        ](name='flight_segment_infos'),
        journeyIndex?: int32(name='journey_index', example='0'),
        transferTime?: int32(name='transfer_time', example='0'),
      }
    ](name='flight_journey_infos'),
    itemList?: [ 
      {
        flightRuleInfos?: map[string]ModuleItemListFlightRuleInfosValue(name='flight_rule_infos'),
        itemId?: string(name='item_id', example='e50d380fc05942cc8ac57af8ae02f448_0'),
        shoppingItemMap?: map[string]ModuleItemListShoppingItemMapValue(name='shopping_item_map'),
        subItemPositionMap?: map[string][ ModuleItemListSubItemPositionMapValue         ](name='sub_item_position_map'),
        subItems?: [ 
          {
            shoppingItemMap?: map[string]ModuleItemListSubItemsShoppingItemMapValue(name='shopping_item_map'),
            tag?: string(name='tag'),
            uniqKey?: string(name='uniq_key', example='07df0bd9-f803-4a50-8449-f4bd675d9939'),
          }
        ](name='sub_items'),
      }
    ](name='item_list'),
    searchMode?: int32(name='search_mode', example='2'),
    tripType?: int32(name='trip_type', example='1'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', description='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210e842b16611337974412836dae27'),
}

model FlightOtaSearchV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightOtaSearchV2ResponseBody(name='body'),
}

/**
 * @summary 单航班报价搜索
 *
 * @param tmpReq FlightOtaSearchV2Request
 * @param headers FlightOtaSearchV2Headers
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightOtaSearchV2Response
 */
async function flightOtaSearchV2WithOptions(tmpReq: FlightOtaSearchV2Request, headers: FlightOtaSearchV2Headers, runtime: Util.RuntimeOptions): FlightOtaSearchV2Response {
  Util.validateModel(tmpReq);
  var request = new FlightOtaSearchV2ShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.cabinTypeList)) {
    request.cabinTypeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.cabinTypeList, 'cabin_type_list', 'json');
  }
  if (!Util.isUnset(tmpReq.searchJourneys)) {
    request.searchJourneysShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.searchJourneys, 'search_journeys', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.cabinTypeListShrink)) {
    query['cabin_type_list'] = request.cabinTypeListShrink;
  }
  if (!Util.isUnset(request.directOnly)) {
    query['direct_only'] = request.directOnly;
  }
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.needShareFlight)) {
    query['need_share_flight'] = request.needShareFlight;
  }
  if (!Util.isUnset(request.searchJourneysShrink)) {
    query['search_journeys'] = request.searchJourneysShrink;
  }
  if (!Util.isUnset(request.searchMode)) {
    query['search_mode'] = request.searchMode;
  }
  if (!Util.isUnset(request.tripType)) {
    query['trip_type'] = request.tripType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightOtaSearchV2',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v2/flight/action/ota-search`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 单航班报价搜索
 *
 * @param request FlightOtaSearchV2Request
 * @return FlightOtaSearchV2Response
 */
async function flightOtaSearchV2(request: FlightOtaSearchV2Request): FlightOtaSearchV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightOtaSearchV2Headers{};
  return flightOtaSearchV2WithOptions(request, headers, runtime);
}

model FlightPayOrderHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightPayOrderRequest {
  corpPayPrice?: long(name='corp_pay_price', description='This parameter is required.', example='100'),
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='dis123'),
  extra?: map[string]string(name='extra'),
  personalPayPrice?: long(name='personal_pay_price', description='This parameter is required.', example='100'),
  totalPayPrice?: long(name='total_pay_price', description='This parameter is required.', example='100'),
}

model FlightPayOrderShrinkRequest {
  corpPayPrice?: long(name='corp_pay_price', description='This parameter is required.', example='100'),
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='dis123'),
  extraShrink?: string(name='extra'),
  personalPayPrice?: long(name='personal_pay_price', description='This parameter is required.', example='100'),
  totalPayPrice?: long(name='total_pay_price', description='This parameter is required.', example='100'),
}

model FlightPayOrderResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    actualPayPrice?: long(name='actual_pay_price', example='1000'),
    alipayTradeNo?: string(name='alipay_trade_no', example='12989127316726531726'),
    lastPayTime?: string(name='last_pay_time', example='0000-00-00 00:00:00'),
    payStatus?: int32(name='pay_status', example='0'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210e842b16611337974412836dae27'),
}

model FlightPayOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightPayOrderResponseBody(name='body'),
}

/**
 * @summary 航班订单支付
 *
 * @param tmpReq FlightPayOrderRequest
 * @param headers FlightPayOrderHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightPayOrderResponse
 */
async function flightPayOrderWithOptions(tmpReq: FlightPayOrderRequest, headers: FlightPayOrderHeaders, runtime: Util.RuntimeOptions): FlightPayOrderResponse {
  Util.validateModel(tmpReq);
  var request = new FlightPayOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extra)) {
    request.extraShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extra, 'extra', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.corpPayPrice)) {
    body['corp_pay_price'] = request.corpPayPrice;
  }
  if (!Util.isUnset(request.disOrderId)) {
    body['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.extraShrink)) {
    body['extra'] = request.extraShrink;
  }
  if (!Util.isUnset(request.personalPayPrice)) {
    body['personal_pay_price'] = request.personalPayPrice;
  }
  if (!Util.isUnset(request.totalPayPrice)) {
    body['total_pay_price'] = request.totalPayPrice;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FlightPayOrder',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/order/action/pay`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 航班订单支付
 *
 * @param request FlightPayOrderRequest
 * @return FlightPayOrderResponse
 */
async function flightPayOrder(request: FlightPayOrderRequest): FlightPayOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightPayOrderHeaders{};
  return flightPayOrderWithOptions(request, headers, runtime);
}

model FlightPayOrderV2Headers {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightPayOrderV2Request {
  isvName?: string(name='isv_name', example='cheshiapi'),
  orderId?: string(name='order_id', example='cheshiapi002kwl'),
  outOrderId?: string(name='out_order_id', example='1017002195798359400'),
  totalPrice?: long(name='total_price', example='5100'),
  totalServiceFeePrice?: long(name='total_service_fee_price', example='10'),
}

model FlightPayOrderV2ResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    price?: long(name='price', example='51000'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', description='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightPayOrderV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightPayOrderV2ResponseBody(name='body'),
}

/**
 * @summary 机票订单支付
 *
 * @param request FlightPayOrderV2Request
 * @param headers FlightPayOrderV2Headers
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightPayOrderV2Response
 */
async function flightPayOrderV2WithOptions(request: FlightPayOrderV2Request, headers: FlightPayOrderV2Headers, runtime: Util.RuntimeOptions): FlightPayOrderV2Response {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.isvName)) {
    body['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.totalPrice)) {
    body['total_price'] = request.totalPrice;
  }
  if (!Util.isUnset(request.totalServiceFeePrice)) {
    body['total_service_fee_price'] = request.totalServiceFeePrice;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FlightPayOrderV2',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v2/order/action/pay`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票订单支付
 *
 * @param request FlightPayOrderV2Request
 * @return FlightPayOrderV2Response
 */
async function flightPayOrderV2(request: FlightPayOrderV2Request): FlightPayOrderV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightPayOrderV2Headers{};
  return flightPayOrderV2WithOptions(request, headers, runtime);
}

model FlightRefundApplyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightRefundApplyRequest {
  corpRefundPrice?: long(name='corp_refund_price', example='100'),
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='dis123'),
  disSubOrderId?: string(name='dis_sub_order_id', description='This parameter is required.', example='refu123'),
  displayRefundMoney?: string(name='display_refund_money', description='This parameter is required.', example='100'),
  extra?: map[string]string(name='extra'),
  isVoluntary?: int32(name='is_voluntary', description='This parameter is required.', example='0'),
  itemUnitIds?: string(name='item_unit_ids', description='This parameter is required.', example='FlightItem_9966772382'),
  passengerSegmentInfoList?: [ 
    {
      flightNo?: string(name='flight_no'),
      passengerName?: string(name='passenger_name'),
      userId?: string(name='user_id', example='1245'),
    }
  ](name='passenger_segment_info_list'),
  personalRefundPrice?: long(name='personal_refund_price', example='100'),
  reasonDetail?: string(name='reason_detail'),
  reasonType?: int32(name='reason_type', description='This parameter is required.', example='1'),
  refundVoucherInfo?: [ string ](name='refund_voucher_info'),
  sessionId?: string(name='session_id', description='This parameter is required.', example='0f9418cd2ce34af49ab0de16fea166d1'),
  totalRefundPrice?: long(name='total_refund_price', example='100'),
}

model FlightRefundApplyShrinkRequest {
  corpRefundPrice?: long(name='corp_refund_price', example='100'),
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='dis123'),
  disSubOrderId?: string(name='dis_sub_order_id', description='This parameter is required.', example='refu123'),
  displayRefundMoney?: string(name='display_refund_money', description='This parameter is required.', example='100'),
  extraShrink?: string(name='extra'),
  isVoluntary?: int32(name='is_voluntary', description='This parameter is required.', example='0'),
  itemUnitIds?: string(name='item_unit_ids', description='This parameter is required.', example='FlightItem_9966772382'),
  passengerSegmentInfoListShrink?: string(name='passenger_segment_info_list'),
  personalRefundPrice?: long(name='personal_refund_price', example='100'),
  reasonDetail?: string(name='reason_detail'),
  reasonType?: int32(name='reason_type', description='This parameter is required.', example='1'),
  refundVoucherInfoShrink?: string(name='refund_voucher_info'),
  sessionId?: string(name='session_id', description='This parameter is required.', example='0f9418cd2ce34af49ab0de16fea166d1'),
  totalRefundPrice?: long(name='total_refund_price', example='100'),
}

model FlightRefundApplyResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    disOrderId?: string(name='dis_order_id', example='dis123'),
    disSubOrderId?: string(name='dis_sub_order_id', example='refun1234'),
    refundApplyId?: long(name='refund_apply_id', example='1231231'),
    refundFee?: long(name='refund_fee', example='1000'),
    refundMoney?: long(name='refund_money', example='100'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightRefundApplyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightRefundApplyResponseBody(name='body'),
}

/**
 * @summary 航班退票申请
 *
 * @param tmpReq FlightRefundApplyRequest
 * @param headers FlightRefundApplyHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightRefundApplyResponse
 */
async function flightRefundApplyWithOptions(tmpReq: FlightRefundApplyRequest, headers: FlightRefundApplyHeaders, runtime: Util.RuntimeOptions): FlightRefundApplyResponse {
  Util.validateModel(tmpReq);
  var request = new FlightRefundApplyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extra)) {
    request.extraShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extra, 'extra', 'json');
  }
  if (!Util.isUnset(tmpReq.passengerSegmentInfoList)) {
    request.passengerSegmentInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerSegmentInfoList, 'passenger_segment_info_list', 'json');
  }
  if (!Util.isUnset(tmpReq.refundVoucherInfo)) {
    request.refundVoucherInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.refundVoucherInfo, 'refund_voucher_info', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.corpRefundPrice)) {
    body['corp_refund_price'] = request.corpRefundPrice;
  }
  if (!Util.isUnset(request.disOrderId)) {
    body['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.disSubOrderId)) {
    body['dis_sub_order_id'] = request.disSubOrderId;
  }
  if (!Util.isUnset(request.displayRefundMoney)) {
    body['display_refund_money'] = request.displayRefundMoney;
  }
  if (!Util.isUnset(request.extraShrink)) {
    body['extra'] = request.extraShrink;
  }
  if (!Util.isUnset(request.isVoluntary)) {
    body['is_voluntary'] = request.isVoluntary;
  }
  if (!Util.isUnset(request.itemUnitIds)) {
    body['item_unit_ids'] = request.itemUnitIds;
  }
  if (!Util.isUnset(request.passengerSegmentInfoListShrink)) {
    body['passenger_segment_info_list'] = request.passengerSegmentInfoListShrink;
  }
  if (!Util.isUnset(request.personalRefundPrice)) {
    body['personal_refund_price'] = request.personalRefundPrice;
  }
  if (!Util.isUnset(request.reasonDetail)) {
    body['reason_detail'] = request.reasonDetail;
  }
  if (!Util.isUnset(request.reasonType)) {
    body['reason_type'] = request.reasonType;
  }
  if (!Util.isUnset(request.refundVoucherInfoShrink)) {
    body['refund_voucher_info'] = request.refundVoucherInfoShrink;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['session_id'] = request.sessionId;
  }
  if (!Util.isUnset(request.totalRefundPrice)) {
    body['total_refund_price'] = request.totalRefundPrice;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FlightRefundApply',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/refund/action/apply`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 航班退票申请
 *
 * @param request FlightRefundApplyRequest
 * @return FlightRefundApplyResponse
 */
async function flightRefundApply(request: FlightRefundApplyRequest): FlightRefundApplyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightRefundApplyHeaders{};
  return flightRefundApplyWithOptions(request, headers, runtime);
}

model FlightRefundApplyV2Headers {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightRefundApplyV2Request {
  isvName?: string(name='isv_name', example='cheshiapi'),
  orderId?: string(name='order_id', example='1683901850297448082'),
  outOrderId?: string(name='out_order_id', example='1017002195370467137'),
  outSubOrderId?: string(name='out_sub_order_id', example='1019195836916039'),
  passengerSegmentRelations?: [ 
    {
      passengerId?: string(name='passenger_id', example='1075004'),
      segmentIdList?: [ string ](name='segment_id_list'),
    }
  ](name='passenger_segment_relations'),
  preCalType?: int32(name='pre_cal_type', example='2'),
  refundReason?: string(name='refund_reason'),
  refundReasonType?: int32(name='refund_reason_type', example='2'),
  ticketNos?: [ string ](name='ticket_nos'),
  totalRefundPrice?: long(name='total_refund_price', example='10000'),
  uploadPictUrls?: string(name='upload_pict_urls'),
  voluntary?: boolean(name='voluntary', example='true'),
}

model FlightRefundApplyV2ShrinkRequest {
  isvName?: string(name='isv_name', example='cheshiapi'),
  orderId?: string(name='order_id', example='1683901850297448082'),
  outOrderId?: string(name='out_order_id', example='1017002195370467137'),
  outSubOrderId?: string(name='out_sub_order_id', example='1019195836916039'),
  passengerSegmentRelationsShrink?: string(name='passenger_segment_relations'),
  preCalType?: int32(name='pre_cal_type', example='2'),
  refundReason?: string(name='refund_reason'),
  refundReasonType?: int32(name='refund_reason_type', example='2'),
  ticketNosShrink?: string(name='ticket_nos'),
  totalRefundPrice?: long(name='total_refund_price', example='10000'),
  uploadPictUrls?: string(name='upload_pict_urls'),
  voluntary?: boolean(name='voluntary', example='true'),
}

model FlightRefundApplyV2ResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    orderId?: string(name='order_id', example='1683901850297448200'),
    outOrderId?: string(name='out_order_id', example='1017002195370467200'),
    outSubOrderId?: string(name='out_sub_order_id', example='1019195836916039'),
    subOrderId?: string(name='sub_order_id', example='1000000000297003'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightRefundApplyV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightRefundApplyV2ResponseBody(name='body'),
}

/**
 * @summary 机票退票申请
 *
 * @param tmpReq FlightRefundApplyV2Request
 * @param headers FlightRefundApplyV2Headers
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightRefundApplyV2Response
 */
async function flightRefundApplyV2WithOptions(tmpReq: FlightRefundApplyV2Request, headers: FlightRefundApplyV2Headers, runtime: Util.RuntimeOptions): FlightRefundApplyV2Response {
  Util.validateModel(tmpReq);
  var request = new FlightRefundApplyV2ShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.passengerSegmentRelations)) {
    request.passengerSegmentRelationsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerSegmentRelations, 'passenger_segment_relations', 'json');
  }
  if (!Util.isUnset(tmpReq.ticketNos)) {
    request.ticketNosShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ticketNos, 'ticket_nos', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.isvName)) {
    body['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.outSubOrderId)) {
    body['out_sub_order_id'] = request.outSubOrderId;
  }
  if (!Util.isUnset(request.passengerSegmentRelationsShrink)) {
    body['passenger_segment_relations'] = request.passengerSegmentRelationsShrink;
  }
  if (!Util.isUnset(request.preCalType)) {
    body['pre_cal_type'] = request.preCalType;
  }
  if (!Util.isUnset(request.refundReason)) {
    body['refund_reason'] = request.refundReason;
  }
  if (!Util.isUnset(request.refundReasonType)) {
    body['refund_reason_type'] = request.refundReasonType;
  }
  if (!Util.isUnset(request.ticketNosShrink)) {
    body['ticket_nos'] = request.ticketNosShrink;
  }
  if (!Util.isUnset(request.totalRefundPrice)) {
    body['total_refund_price'] = request.totalRefundPrice;
  }
  if (!Util.isUnset(request.uploadPictUrls)) {
    body['upload_pict_urls'] = request.uploadPictUrls;
  }
  if (!Util.isUnset(request.voluntary)) {
    body['voluntary'] = request.voluntary;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FlightRefundApplyV2',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v2/refund/action/apply`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票退票申请
 *
 * @param request FlightRefundApplyV2Request
 * @return FlightRefundApplyV2Response
 */
async function flightRefundApplyV2(request: FlightRefundApplyV2Request): FlightRefundApplyV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightRefundApplyV2Headers{};
  return flightRefundApplyV2WithOptions(request, headers, runtime);
}

model FlightRefundDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightRefundDetailRequest {
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='dis123'),
  disSubOrderId?: string(name='dis_sub_order_id', description='This parameter is required.', example='refun123'),
}

model FlightRefundDetailResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    btripOrderId?: long(name='btrip_order_id', example='123'),
    btripSubOrderId?: long(name='btrip_sub_order_id', example='123'),
    disOrderId?: string(name='dis_order_id', example='dis1234'),
    disSubOrderId?: string(name='dis_sub_order_id', example='refun123'),
    isVoluntary?: int32(name='is_voluntary', example='1'),
    reason?: string(name='reason'),
    refundFee?: long(name='refund_fee', example='100'),
    refundFeeList?: [ 
      {
        alipayTradeNo?: string(name='alipay_trade_no', example='293982882881999'),
        refundFee?: long(name='refund_fee', example='100'),
        refundPrice?: long(name='refund_price', example='100'),
        status?: string(name='status'),
      }
    ](name='refund_fee_list'),
    refundPrice?: long(name='refund_price', example='100'),
    status?: string(name='status', example='0'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightRefundDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightRefundDetailResponseBody(name='body'),
}

/**
 * @summary 航班退票详情
 *
 * @param request FlightRefundDetailRequest
 * @param headers FlightRefundDetailHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightRefundDetailResponse
 */
async function flightRefundDetailWithOptions(request: FlightRefundDetailRequest, headers: FlightRefundDetailHeaders, runtime: Util.RuntimeOptions): FlightRefundDetailResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.disOrderId)) {
    query['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.disSubOrderId)) {
    query['dis_sub_order_id'] = request.disSubOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightRefundDetail',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/refund/action/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 航班退票详情
 *
 * @param request FlightRefundDetailRequest
 * @return FlightRefundDetailResponse
 */
async function flightRefundDetail(request: FlightRefundDetailRequest): FlightRefundDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightRefundDetailHeaders{};
  return flightRefundDetailWithOptions(request, headers, runtime);
}

model FlightRefundDetailV2Headers {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightRefundDetailV2Request {
  isvName?: string(name='isv_name', example='cheshiapi'),
  orderId?: string(name='order_id', example='1002039195025156784'),
  outOrderId?: string(name='out_order_id'),
  outRefundApplyId?: string(name='out_refund_apply_id'),
  refundApplyId?: string(name='refund_apply_id', example='1002039195025156700'),
}

model FlightRefundDetailV2ResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    applyTime?: string(name='apply_time', example='2023-08-19 17:18:19'),
    contactInfoDTO?: {
      contactEmail?: string(name='contact_email', example='17685764353@163.com'),
      contactName?: string(name='contact_name'),
      contactPhone?: string(name='contact_phone', example='17685764353'),
      sendMsgToPassenger?: boolean(name='send_msg_to_passenger', example='true'),
    }(name='contact_info_d_t_o'),
    flightInfoDTOS?: [ 
      {
        airlineCode?: string(name='airline_code', example='MU'),
        airlineIconUrl?: string(name='airline_icon_url'),
        airlineName?: string(name='airline_name'),
        arrAirportCode?: string(name='arr_airport_code', example='HGH'),
        arrAirportName?: string(name='arr_airport_name'),
        arrCityCode?: string(name='arr_city_code', example='HGH'),
        arrCityName?: string(name='arr_city_name'),
        arrTerminal?: string(name='arr_terminal'),
        arrTime?: string(name='arr_time', example='2023-10-03 09:30:00'),
        cabin?: string(name='cabin', example='Y'),
        cabinClass?: string(name='cabin_class', example='Y'),
        cabinClassName?: string(name='cabin_class_name'),
        cabinDiscount?: long(name='cabin_discount', example='10'),
        carrierAirlineCode?: string(name='carrier_airline_code'),
        carrierAirlineIconUrl?: string(name='carrier_airline_icon_url'),
        carrierAirlineName?: string(name='carrier_airline_name'),
        carrierFlightNo?: string(name='carrier_flight_no'),
        depAirportCode?: string(name='dep_airport_code', example='PKX'),
        depAirportName?: string(name='dep_airport_name'),
        depCityCode?: string(name='dep_city_code', example='BJS'),
        depCityName?: string(name='dep_city_name'),
        depTerminal?: string(name='dep_terminal'),
        depTime?: string(name='dep_time', example='2023-10-03 07:30:00'),
        flightNo?: string(name='flight_no', example='MU5193'),
        flightType?: string(name='flight_type'),
        mealDesc?: string(name='meal_desc'),
        segmentId?: string(name='segment_id', example='1194012'),
        segmentPosition?: {
          journeyIndex?: int32(name='journey_index', example='0'),
          segmentIndex?: int32(name='segment_index', example='0'),
        }(name='segment_position'),
        stopArrTime?: string(name='stop_arr_time'),
        stopCity?: string(name='stop_city'),
        stopDepTime?: string(name='stop_dep_time'),
      }
    ](name='flight_info_d_t_o_s'),
    nonRefundableChangeServicePrice?: long(name='non_refundable_change_service_price'),
    nonRefundableChangeUpgradePrice?: long(name='non_refundable_change_upgrade_price'),
    orderId?: long(name='order_id', example='1002039195025156700'),
    outOrderId?: string(name='out_order_id', example='1002039195025156700'),
    outSubOrderId?: string(name='out_sub_order_id', example='1019195836916039'),
    reason?: string(name='reason'),
    reasonCode?: string(name='reason_code', example='1'),
    refundFailReason?: string(name='refund_fail_reason'),
    refundHandlingFee?: long(name='refund_handling_fee', example='100'),
    refundMoney?: long(name='refund_money', example='10000'),
    status?: int32(name='status', example='1'),
    subOrderId?: long(name='sub_order_id', example='1000000000297003'),
    travelerInfoDTOS?: [ 
      {
        birthDate?: string(name='birth_date', example='2000-08-19'),
        certNo?: string(name='cert_no', example='430131413423435353'),
        certType?: int32(name='cert_type', example='0'),
        gender?: int32(name='gender', example='1'),
        originTicketNos?: [ string ](name='origin_ticket_nos'),
        passengerId?: string(name='passenger_id', example='12172819047252004460056'),
        passengerName?: string(name='passenger_name'),
        passengerType?: int32(name='passenger_type', example='0'),
        phone?: string(name='phone', example='17635462345'),
        pid?: long(name='pid', example='3243028'),
        ticketNos?: [ string ](name='ticket_nos'),
      }
    ](name='traveler_info_d_t_o_s'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', description='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210e845f16785007404904300ddc92'),
}

model FlightRefundDetailV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightRefundDetailV2ResponseBody(name='body'),
}

/**
 * @summary 机票退票详情
 *
 * @param request FlightRefundDetailV2Request
 * @param headers FlightRefundDetailV2Headers
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightRefundDetailV2Response
 */
async function flightRefundDetailV2WithOptions(request: FlightRefundDetailV2Request, headers: FlightRefundDetailV2Headers, runtime: Util.RuntimeOptions): FlightRefundDetailV2Response {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    query['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.outRefundApplyId)) {
    query['out_refund_apply_id'] = request.outRefundApplyId;
  }
  if (!Util.isUnset(request.refundApplyId)) {
    query['refund_apply_id'] = request.refundApplyId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightRefundDetailV2',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v2/refund/action/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票退票详情
 *
 * @param request FlightRefundDetailV2Request
 * @return FlightRefundDetailV2Response
 */
async function flightRefundDetailV2(request: FlightRefundDetailV2Request): FlightRefundDetailV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightRefundDetailV2Headers{};
  return flightRefundDetailV2WithOptions(request, headers, runtime);
}

model FlightRefundPreCalHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightRefundPreCalRequest {
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='dis123'),
  isVoluntary?: string(name='is_voluntary', example='1'),
  passengerSegmentInfoList?: [ 
    {
      flightNo?: string(name='flight_no', description='This parameter is required.', example='CA1982'),
      passengerName?: string(name='passenger_name', description='This parameter is required.'),
      userId?: string(name='user_id', description='This parameter is required.', example='23112'),
    }
  ](name='passenger_segment_info_list', description='This parameter is required.'),
}

model FlightRefundPreCalShrinkRequest {
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='dis123'),
  isVoluntary?: string(name='is_voluntary', example='1'),
  passengerSegmentInfoListShrink?: string(name='passenger_segment_info_list', description='This parameter is required.'),
}

model FlightRefundPreCalResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    flightChange?: boolean(name='flight_change', example='false'),
    itemUnitId?: string(name='item_unit_id', example='FlightItem_996677504'),
    multiRefundCalList?: [ 
      {
        canApplyRefund?: boolean(name='can_apply_refund', example='true'),
        name?: string(name='name'),
        preRefundMoney?: long(name='pre_refund_money', example='1000'),
        refundFee?: long(name='refund_fee', example='1000'),
        userId?: string(name='user_id', example='124'),
      }
    ](name='multi_refund_cal_list'),
    preRefundMoney?: long(name='pre_refund_money', example='1000'),
    refundFee?: long(name='refund_fee', example='1000'),
    returnReason?: [ 
      {
        extendDesc?: string(name='extend_desc'),
        person?: int32(name='person', example='0'),
        reasonCode?: int32(name='reason_code', example='0'),
        reasonShow?: string(name='reason_show'),
        reasonType?: int32(name='reason_type', example='1'),
        volunteer?: int32(name='volunteer', example='0'),
      }
    ](name='return_reason'),
    sessionId?: string(name='session_id', example='882sudu23s923j9d2'),
    tips?: string(name='tips'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightRefundPreCalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightRefundPreCalResponseBody(name='body'),
}

/**
 * @summary 机票退票预计算
 *
 * @param tmpReq FlightRefundPreCalRequest
 * @param headers FlightRefundPreCalHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightRefundPreCalResponse
 */
async function flightRefundPreCalWithOptions(tmpReq: FlightRefundPreCalRequest, headers: FlightRefundPreCalHeaders, runtime: Util.RuntimeOptions): FlightRefundPreCalResponse {
  Util.validateModel(tmpReq);
  var request = new FlightRefundPreCalShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.passengerSegmentInfoList)) {
    request.passengerSegmentInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerSegmentInfoList, 'passenger_segment_info_list', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.disOrderId)) {
    query['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.isVoluntary)) {
    query['is_voluntary'] = request.isVoluntary;
  }
  if (!Util.isUnset(request.passengerSegmentInfoListShrink)) {
    query['passenger_segment_info_list'] = request.passengerSegmentInfoListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightRefundPreCal',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/refund/action/pre-cal`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票退票预计算
 *
 * @param request FlightRefundPreCalRequest
 * @return FlightRefundPreCalResponse
 */
async function flightRefundPreCal(request: FlightRefundPreCalRequest): FlightRefundPreCalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightRefundPreCalHeaders{};
  return flightRefundPreCalWithOptions(request, headers, runtime);
}

model FlightRefundPreCalV2Headers {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightRefundPreCalV2Request {
  isvName?: string(name='isv_name', example='cheshiapi'),
  orderId?: string(name='order_id', example='3454043907950204159'),
  outOrderId?: string(name='out_order_id', example='1017002195370467137'),
  passengerSegmentRelations?: [ 
    {
      passengerId?: string(name='passenger_id', example='3243028'),
      segmentIdList?: [ string ](name='segment_id_list'),
    }
  ](name='passenger_segment_relations'),
  preCalType?: int32(name='pre_cal_type', example='2'),
  ticketNos?: [ string ](name='ticket_nos'),
  voluntary?: boolean(name='voluntary', example='true'),
}

model FlightRefundPreCalV2ShrinkRequest {
  isvName?: string(name='isv_name', example='cheshiapi'),
  orderId?: string(name='order_id', example='3454043907950204159'),
  outOrderId?: string(name='out_order_id', example='1017002195370467137'),
  passengerSegmentRelationsShrink?: string(name='passenger_segment_relations'),
  preCalType?: int32(name='pre_cal_type', example='2'),
  ticketNosShrink?: string(name='ticket_nos'),
  voluntary?: boolean(name='voluntary', example='true'),
}

model FlightRefundPreCalV2ResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    multiRefundFeeDTOS?: [ 
      {
        passengerId?: string(name='passenger_id', example='3243028'),
        passengerName?: string(name='passenger_name'),
        preRefundMoney?: long(name='pre_refund_money', example='10000'),
        refundChargeFee?: long(name='refund_charge_fee', example='100'),
      }
    ](name='multi_refund_fee_d_t_o_s'),
    preRefundMoney?: long(name='pre_refund_money', example='10000'),
    refundChargeFee?: long(name='refund_charge_fee', example='100'),
    refundReasonOptionDTOS?: [ 
      {
        reason?: string(name='reason'),
        reasonType?: int32(name='reason_type', example='2'),
        volunteer?: boolean(name='volunteer', example='true'),
      }
    ](name='refund_reason_option_d_t_o_s'),
    serviceChargeFee?: long(name='service_charge_fee', example='100'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', description='requestId', example='92359A00-85D8-16C4-AED0-249618DEEC17'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightRefundPreCalV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightRefundPreCalV2ResponseBody(name='body'),
}

/**
 * @summary 机票退票费用预计算
 *
 * @param tmpReq FlightRefundPreCalV2Request
 * @param headers FlightRefundPreCalV2Headers
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightRefundPreCalV2Response
 */
async function flightRefundPreCalV2WithOptions(tmpReq: FlightRefundPreCalV2Request, headers: FlightRefundPreCalV2Headers, runtime: Util.RuntimeOptions): FlightRefundPreCalV2Response {
  Util.validateModel(tmpReq);
  var request = new FlightRefundPreCalV2ShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.passengerSegmentRelations)) {
    request.passengerSegmentRelationsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerSegmentRelations, 'passenger_segment_relations', 'json');
  }
  if (!Util.isUnset(tmpReq.ticketNos)) {
    request.ticketNosShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ticketNos, 'ticket_nos', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    query['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.passengerSegmentRelationsShrink)) {
    query['passenger_segment_relations'] = request.passengerSegmentRelationsShrink;
  }
  if (!Util.isUnset(request.preCalType)) {
    query['pre_cal_type'] = request.preCalType;
  }
  if (!Util.isUnset(request.ticketNosShrink)) {
    query['ticket_nos'] = request.ticketNosShrink;
  }
  if (!Util.isUnset(request.voluntary)) {
    query['voluntary'] = request.voluntary;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightRefundPreCalV2',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v2/refund/action/pre-cal`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票退票费用预计算
 *
 * @param request FlightRefundPreCalV2Request
 * @return FlightRefundPreCalV2Response
 */
async function flightRefundPreCalV2(request: FlightRefundPreCalV2Request): FlightRefundPreCalV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightRefundPreCalV2Headers{};
  return flightRefundPreCalV2WithOptions(request, headers, runtime);
}

model FlightSearchListHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightSearchListRequest {
  airlineCode?: string(name='airline_code', example='CA'),
  arrCityCode?: string(name='arr_city_code', description='This parameter is required.', example='HGH'),
  arrCityName?: string(name='arr_city_name', example='BJS'),
  arrDate?: string(name='arr_date', example='2000-00-00 00:00:00'),
  cabinClass?: string(name='cabin_class', example='Y'),
  depCityCode?: string(name='dep_city_code', description='This parameter is required.', example='HGH'),
  depCityName?: string(name='dep_city_name', example='HGH'),
  depDate?: string(name='dep_date', description='This parameter is required.', example='2000-00-00 00:00:00'),
  flightNo?: string(name='flight_no', example='CA2323'),
  needMultiClassPrice?: boolean(name='need_multi_class_price', example='false'),
  transferCityCode?: string(name='transfer_city_code', example='HGH'),
  transferFlightNo?: string(name='transfer_flight_no', example='CA2323'),
  transferLeaveDate?: string(name='transfer_leave_date', example='BJS'),
  tripType?: string(name='trip_type', description='This parameter is required.', example='0'),
}

model FlightSearchListResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    flightList?: [ 
      {
        airlineInfo?: {
          airlineCode?: string(name='airline_code', example='CA'),
          airlineName?: string(name='airline_name'),
          airlineSimpleName?: string(name='airline_simple_name'),
        }(name='airline_info'),
        arrAirportInfo?: {
          airportCode?: string(name='airport_code', example='HGH'),
          airportName?: string(name='airport_name'),
          cityCode?: string(name='city_code', example='HGH'),
          cityName?: string(name='city_name'),
          terminal?: string(name='terminal', example='T3'),
        }(name='arr_airport_info'),
        arrDate?: string(name='arr_date', example='yyyy-MM-dd HH:mm:ss'),
        basicCabinPrice?: int32(name='basic_cabin_price'),
        buildPrice?: int32(name='build_price', example='100'),
        cabin?: string(name='cabin', example='Y'),
        cabinClass?: string(name='cabin_class', example='2'),
        cabinInfoList?: [ 
          {
            agentId?: long(name='agent_id'),
            basicCabinPrice?: int32(name='basic_cabin_price'),
            buildPrice?: int32(name='build_price', example='100'),
            cabin?: string(name='cabin', example='G'),
            cabinClass?: string(name='cabin_class', example='Y'),
            cabinClassName?: string(name='cabin_class_name'),
            childCabin?: string(name='child_cabin', example='G'),
            className?: string(name='class_name'),
            classRule?: string(name='class_rule', example='demo'),
            discount?: string(name='discount', example='10'),
            flightRuleList?: [ 
              {
                baggageInfo?: string(name='baggage_info', example='demo'),
                baggageItem?: {
                  baggageSubItems?: [ 
                    {
                      baggageSubContentVisualizes?: [ 
                        {
                          baggageDesc?: [ string ](name='baggage_desc'),
                          baggageSubContentType?: int32(name='baggage_sub_content_type', example='0'),
                          description?: {
                            desc?: string(name='desc'),
                            icon?: string(name='icon', example='https://gw.alicdn.com/imgextra/i4/O1CN01UynXG31pjsEtA3tMF_!!6000000005397-2-tps-36-36.png'),
                            image?: string(name='image', example='https://gw.alicdn.com/imgextra/i1/O1CN01qe7wL21gJ0SmEXXL7_!!6000000004120-2-tps-1206-768.png'),
                            title?: string(name='title'),
                          }(name='description'),
                          imageDO?: {
                            image?: string(name='image', example='demo'),
                            largest?: string(name='largest', example='50'),
                            middle?: string(name='middle', example='40'),
                            smallest?: string(name='smallest', example='20'),
                          }(name='image_d_o'),
                          isHighlight?: boolean(name='is_highlight', example='true'),
                          subTitle?: string(name='sub_title'),
                        }
                      ](name='baggage_sub_content_visualizes'),
                      extraContentVisualizes?: [ any ](name='extra_content_visualizes'),
                      isStruct?: boolean(name='is_struct', example='true'),
                      ptc?: string(name='ptc', description='PTC', example='ADT'),
                      title?: string(name='title'),
                    }
                  ](name='baggage_sub_items'),
                  index?: int32(name='index', example='1'),
                  tableHead?: string(name='table_head'),
                  tips?: {
                    logo?: string(name='logo', example='https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png'),
                    tipsDesc?: string(name='tips_desc'),
                    tipsImage?: string(name='tips_image', example='https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png'),
                  }(name='tips'),
                  title?: string(name='title'),
                  type?: int32(name='type', example='1'),
                }(name='baggage_item'),
                changeRule?: {
                  able?: boolean(name='able', example='true'),
                  info?: [ 
                    {
                      content?: string(name='content'),
                      cost?: int32(name='cost', example='100'),
                      costPercent?: int32(name='cost_percent', example='10'),
                      timeStamp?: int32(name='time_stamp', example='1675036500000'),
                      timeType?: string(name='time_type', example='demo'),
                      title?: string(name='title'),
                    }
                  ](name='info'),
                }(name='change_rule'),
                changeRuleItem?: {
                  extraContents?: [ 
                    {
                      content?: string(name='content', example='demo'),
                      title?: string(name='title', example='demo'),
                    }
                  ](name='extra_contents'),
                  index?: int32(name='index', example='0'),
                  refundSubItems?: [ 
                    {
                      isStruct?: boolean(name='is_struct', example='true'),
                      ptc?: string(name='ptc', description='PTC', example='ADT'),
                      refundSubContents?: [ 
                        {
                          feeDesc?: string(name='fee_desc'),
                          feeRange?: string(name='fee_range'),
                          style?: int32(name='style', example='1'),
                        }
                      ](name='refund_sub_contents'),
                      title?: string(name='title'),
                    }
                  ](name='refund_sub_items'),
                  subTableHead?: [ string ](name='sub_table_head'),
                  tableHead?: string(name='table_head'),
                  title?: string(name='title'),
                  type?: int32(name='type', example='0'),
                }(name='change_rule_item'),
                extra?: string(name='extra', example='{}'),
                refundRule?: {
                  able?: boolean(name='able', example='true'),
                  info?: [ 
                    {
                      content?: string(name='content'),
                      cost?: int32(name='cost', example='100'),
                      costPercent?: int32(name='cost_percent', example='10'),
                      timeStamp?: int32(name='time_stamp', example='1675036500000'),
                      timeType?: string(name='time_type', example='demo'),
                      title?: string(name='title'),
                    }
                  ](name='info'),
                }(name='refund_rule'),
                refundRuleItem?: {
                  extraContents?: [ 
                    {
                      content?: string(name='content', example='demo'),
                      title?: string(name='title', example='demo'),
                    }
                  ](name='extra_contents'),
                  index?: int32(name='index', example='1'),
                  refundSubItems?: [ 
                    {
                      isStruct?: boolean(name='is_struct', example='true'),
                      ptc?: string(name='ptc', description='PTC', example='ADT'),
                      refundSubContents?: [ 
                        {
                          feeDesc?: string(name='fee_desc'),
                          feeRange?: string(name='fee_range'),
                          style?: int32(name='style', example='1'),
                        }
                      ](name='refund_sub_contents'),
                      title?: string(name='title'),
                    }
                  ](name='refund_sub_items'),
                  subTableHead?: [ string ](name='sub_table_head'),
                  tableHead?: string(name='table_head'),
                  title?: string(name='title', example='demo'),
                  type?: int32(name='type', example='1'),
                }(name='refund_rule_item'),
                signRule?: {
                  able?: boolean(name='able', example='true'),
                  info?: [ 
                    {
                      content?: string(name='content'),
                      cost?: int32(name='cost', example='100'),
                      costPercent?: int32(name='cost_percent', example='10'),
                      timeStamp?: int32(name='time_stamp', example='1675036500000'),
                      timeType?: string(name='time_type', example='demo'),
                      title?: string(name='title'),
                    }
                  ](name='info'),
                }(name='sign_rule'),
                tuigaiqianInfo?: string(name='tuigaiqian_info'),
                upgradeRule?: {
                  able?: boolean(name='able', example='true'),
                  info?: [ 
                    {
                      content?: string(name='content'),
                      cost?: int32(name='cost', example='100'),
                      costPercent?: int32(name='cost_percent', example='10'),
                      timeStamp?: int32(name='time_stamp', example='1675036500000'),
                      timeType?: string(name='time_type', example='demo'),
                      title?: string(name='title'),
                    }
                  ](name='info'),
                }(name='upgrade_rule'),
              }
            ](name='flight_rule_list'),
            flightRuleListStr?: string(name='flight_rule_list_str', example='demo'),
            invoiceType?: int32(name='invoice_type', example='1'),
            isProtocol?: boolean(name='is_protocol', example='true'),
            memo?: string(name='memo', example='{"key":"value"}'),
            oilPrice?: int32(name='oil_price', example='100'),
            orderParams?: string(name='order_params', example='1000_1_0'),
            otaItemId?: string(name='ota_item_id', example='wisdiii2ii22ii2'),
            price?: int32(name='price', example='100'),
            productType?: long(name='product_type', example='1'),
            productTypeDesc?: string(name='product_type_desc', example='demo'),
            promotionPrice?: string(name='promotion_price', example='100'),
            remainedSeatCount?: string(name='remained_seat_count', example='1'),
            ticketPrice?: int32(name='ticket_price', example='100'),
            totalPrice?: int32(name='total_price', example='100'),
          }
        ](name='cabin_info_list'),
        carrierAirline?: string(name='carrier_airline', example='FM'),
        carrierNo?: string(name='carrier_no', example='FM9152'),
        classRule?: string(name='class_rule'),
        depAirportInfo?: {
          airportCode?: string(name='airport_code', example='PEK'),
          airportName?: string(name='airport_name'),
          cityCode?: string(name='city_code', example='BJS'),
          cityName?: string(name='city_name'),
          terminal?: string(name='terminal', example='T3'),
        }(name='dep_airport_info'),
        depCityCode?: string(name='dep_city_code', example='BJS'),
        depDate?: string(name='dep_date', example='yyyy-MM-dd HH:mm:ss'),
        discount?: int32(name='discount', example='1'),
        flightNo?: string(name='flight_no', example='CA1234'),
        flightRuleList?: [ 
          {
            baggageInfo?: string(name='baggage_info', example='demo'),
            baggageItem?: {
              baggageSubItems?: [ 
                {
                  baggageSubContentVisualizes?: [ 
                    {
                      baggageDesc?: [ string ](name='baggage_desc'),
                      baggageSubContentType?: int32(name='baggage_sub_content_type', example='1'),
                      description?: {
                        desc?: string(name='desc'),
                        icon?: string(name='icon', example='https://gw.alicdn.com/imgextra/i4/O1CN01UynXG31pjsEtA3tMF_!!6000000005397-2-tps-36-36.png'),
                        image?: string(name='image', example='https://gw.alicdn.com/imgextra/i1/O1CN01qe7wL21gJ0SmEXXL7_!!6000000004120-2-tps-1206-768.png'),
                        title?: string(name='title'),
                      }(name='description'),
                      imageDO?: {
                        image?: string(name='image', example='demo'),
                        largest?: string(name='largest', example='50'),
                        middle?: string(name='middle', example='40'),
                        smallest?: string(name='smallest', example='20'),
                      }(name='image_d_o'),
                      isHighlight?: boolean(name='is_highlight', example='true'),
                      subTitle?: string(name='sub_title'),
                    }
                  ](name='baggage_sub_content_visualizes'),
                  extraContentVisualizes?: [ any ](name='extra_content_visualizes'),
                  isStruct?: boolean(name='is_struct', example='true'),
                  ptc?: string(name='ptc', description='PTC', example='ADT'),
                  title?: string(name='title'),
                }
              ](name='baggage_sub_items'),
              index?: int32(name='index', example='1'),
              tableHead?: string(name='table_head'),
              tips?: {
                logo?: string(name='logo', example='https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png'),
                tipsDesc?: string(name='tips_desc'),
                tipsImage?: string(name='tips_image', example='https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png'),
              }(name='tips'),
              title?: string(name='title'),
              type?: int32(name='type', example='1'),
            }(name='baggage_item'),
            changeRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='change_rule'),
            changeRuleItem?: {
              extraContents?: [ 
                {
                  content?: string(name='content'),
                  title?: string(name='title'),
                }
              ](name='extra_contents'),
              index?: int32(name='index', example='0'),
              refundSubItems?: [ 
                {
                  isStruct?: boolean(name='is_struct', example='true'),
                  ptc?: string(name='ptc', description='PTC', example='ADT'),
                  refundSubContents?: [ 
                    {
                      feeDesc?: string(name='fee_desc'),
                      feeRange?: string(name='fee_range'),
                      style?: int32(name='style', example='1'),
                    }
                  ](name='refund_sub_contents'),
                  title?: string(name='title'),
                }
              ](name='refund_sub_items'),
              subTableHead?: [ string ](name='sub_table_head'),
              tableHead?: string(name='table_head'),
              title?: string(name='title'),
              type?: int32(name='type', example='1'),
            }(name='change_rule_item'),
            extra?: string(name='extra', example='{}'),
            refundRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='refund_rule'),
            refundRuleItem?: {
              extraContents?: [ 
                {
                  content?: string(name='content', example='demo'),
                  title?: string(name='title', example='demo'),
                }
              ](name='extra_contents'),
              index?: int32(name='index', example='1'),
              refundSubItems?: [ 
                {
                  isStruct?: boolean(name='is_struct', example='true'),
                  ptc?: string(name='ptc', description='PTC', example='ADT'),
                  refundSubContents?: [ 
                    {
                      feeDesc?: string(name='fee_desc'),
                      feeRange?: string(name='fee_range'),
                      style?: int32(name='style', example='1'),
                    }
                  ](name='refund_sub_contents'),
                  title?: string(name='title'),
                }
              ](name='refund_sub_items'),
              subTableHead?: [ string ](name='sub_table_head'),
              tableHead?: string(name='table_head'),
              title?: string(name='title'),
              type?: int32(name='type', example='1'),
            }(name='refund_rule_item'),
            signRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='sign_rule'),
            tuigaiqianInfo?: string(name='tuigaiqian_info'),
            upgradeRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='upgrade_rule'),
          }
        ](name='flight_rule_list'),
        flightRuleListStr?: string(name='flight_rule_list_str', example='demo'),
        flightSize?: string(name='flight_size'),
        flightType?: string(name='flight_type', example='demo'),
        invoiceType?: int32(name='invoice_type', example='1'),
        isProtocol?: boolean(name='is_protocol', example='true'),
        isShare?: boolean(name='is_share', example='false'),
        isStop?: boolean(name='is_stop', example='false'),
        isTransfer?: boolean(name='is_transfer', example='false'),
        mealDesc?: string(name='meal_desc'),
        memo?: string(name='memo', example='{"key":"value"}'),
        oilPrice?: int32(name='oil_price', example='100'),
        otaItemId?: string(name='ota_item_id', example='wisdiii2ii22ii2'),
        price?: int32(name='price', example='100'),
        productType?: long(name='product_type', example='1'),
        productTypeDesc?: string(name='product_type_desc'),
        promotionPrice?: string(name='promotion_price', example='100'),
        remainedSeatCount?: string(name='remained_seat_count', example='1'),
        secretParams?: string(name='secret_params', example='1000_1_0'),
        segmentNumber?: string(name='segment_number', example='1'),
        stopArrTime?: string(name='stop_arr_time', example='yyyy-MM-dd HH:mm:ss'),
        stopCity?: string(name='stop_city', example='HGH'),
        stopDepTime?: string(name='stop_dep_time', example='yyyy-MM-dd HH:mm:ss'),
        ticketPrice?: int32(name='ticket_price', example='100'),
        totalPrice?: string(name='total_price', example='100'),
        transferInfo?: {
          flightSize?: string(name='flight_size'),
          flightType?: string(name='flight_type', example='demo'),
          transferAirlineInfo?: {
            airlineCode?: string(name='airline_code', example='ZH'),
            airlineName?: string(name='airline_name'),
            airlineSimpleName?: string(name='airline_simple_name'),
          }(name='transfer_airline_info'),
          transferArrAirportInfo?: {
            airportCode?: string(name='airport_code', example='HGH'),
            airportName?: string(name='airport_name'),
            cityCode?: string(name='city_code', example='HGH'),
            cityName?: string(name='city_name'),
            terminal?: string(name='terminal', example='T4'),
          }(name='transfer_arr_airport_info'),
          transferArrDate?: string(name='transfer_arr_date', example='yyyy-MM-dd HH:mm:ss'),
          transferDepAirportInfo?: {
            airportCode?: string(name='airport_code', example='PEK'),
            airportName?: string(name='airport_name'),
            cityCode?: string(name='city_code', example='BJS'),
            cityName?: string(name='city_name'),
            terminal?: string(name='terminal', example='T3'),
          }(name='transfer_dep_airport_info'),
          transferDepDate?: string(name='transfer_dep_date', example='yyyy-MM-dd HH:mm:ss'),
          transferFlightNo?: string(name='transfer_flight_no', example='CA1234'),
          transferFlightRuleList?: [ 
            {
              baggageInfo?: string(name='baggage_info', example='demo'),
              baggageItem?: {
                baggageSubItems?: [ 
                  {
                    baggageSubContentVisualizes?: [ 
                      {
                        baggageDesc?: [ string ](name='baggage_desc'),
                        baggageSubContentType?: int32(name='baggage_sub_content_type', example='1'),
                        description?: {
                          desc?: string(name='desc'),
                          icon?: string(name='icon', example='https://gw.alicdn.com/imgextra/i4/O1CN01UynXG31pjsEtA3tMF_!!6000000005397-2-tps-36-36.png'),
                          image?: string(name='image', example='https://gw.alicdn.com/imgextra/i1/O1CN01qe7wL21gJ0SmEXXL7_!!6000000004120-2-tps-1206-768.png'),
                          title?: string(name='title'),
                        }(name='description'),
                        imageDO?: {
                          image?: string(name='image', example='demo'),
                          largest?: string(name='largest', example='50'),
                          middle?: string(name='middle', example='40'),
                          smallest?: string(name='smallest', example='20'),
                        }(name='image_d_o'),
                        isHighlight?: boolean(name='is_highlight', example='true'),
                        subTitle?: string(name='sub_title'),
                      }
                    ](name='baggage_sub_content_visualizes'),
                    extraContentVisualizes?: [ any ](name='extra_content_visualizes'),
                    isStruct?: boolean(name='is_struct', example='true'),
                    ptc?: string(name='ptc', description='PTC', example='ADT'),
                    title?: string(name='title', example='1'),
                  }
                ](name='baggage_sub_items'),
                index?: int32(name='index', example='1'),
                tableHead?: string(name='table_head'),
                tips?: {
                  logo?: string(name='logo', example='https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png'),
                  tipsDesc?: string(name='tips_desc'),
                  tipsImage?: string(name='tips_image', example='https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png'),
                }(name='tips'),
                title?: string(name='title'),
                type?: int32(name='type', example='1'),
              }(name='baggage_item'),
              changeRule?: {
                able?: boolean(name='able', example='true'),
                info?: [ 
                  {
                    content?: string(name='content'),
                    cost?: int32(name='cost', example='100'),
                    costPercent?: int32(name='cost_percent', example='100'),
                    timeStamp?: int32(name='time_stamp', example='1675036500000'),
                    timeType?: string(name='time_type', example='demo'),
                    title?: string(name='title'),
                  }
                ](name='info'),
              }(name='change_rule'),
              changeRuleItem?: {
                extraContents?: [ 
                  {
                    content?: string(name='content', example='demo'),
                    title?: string(name='title', example='demo'),
                  }
                ](name='extra_contents'),
                index?: int32(name='index', example='0'),
                refundSubItems?: [ 
                  {
                    isStruct?: boolean(name='is_struct', example='true'),
                    ptc?: string(name='ptc', description='PTC', example='ADT'),
                    refundSubContents?: [ 
                      {
                        feeDesc?: string(name='fee_desc'),
                        feeRange?: string(name='fee_range'),
                        style?: int32(name='style', example='1'),
                      }
                    ](name='refund_sub_contents'),
                    title?: string(name='title'),
                  }
                ](name='refund_sub_items'),
                subTableHead?: [ string ](name='sub_table_head'),
                tableHead?: string(name='table_head'),
                title?: string(name='title'),
                type?: int32(name='type', example='0'),
              }(name='change_rule_item'),
              extra?: string(name='extra', example='{}'),
              refundRule?: {
                able?: boolean(name='able', example='true'),
                info?: [ 
                  {
                    content?: string(name='content'),
                    cost?: int32(name='cost', example='100'),
                    costPercent?: int32(name='cost_percent', example='100'),
                    timeStamp?: int32(name='time_stamp', example='1675036500000'),
                    timeType?: string(name='time_type', example='demo'),
                    title?: string(name='title'),
                  }
                ](name='info'),
              }(name='refund_rule'),
              refundRuleItem?: {
                extraContents?: [ 
                  {
                    content?: string(name='content', example='demo'),
                    title?: string(name='title', example='demo'),
                  }
                ](name='extra_contents'),
                index?: int32(name='index', example='1'),
                refundSubItems?: [ 
                  {
                    isStruct?: boolean(name='is_struct', example='true'),
                    ptc?: string(name='ptc', description='PTC', example='ADT'),
                    refundSubContents?: [ 
                      {
                        feeDesc?: string(name='fee_desc'),
                        feeRange?: string(name='fee_range'),
                        style?: int32(name='style', example='1'),
                      }
                    ](name='refund_sub_contents'),
                    title?: string(name='title'),
                  }
                ](name='refund_sub_items'),
                subTableHead?: [ string ](name='sub_table_head'),
                tableHead?: string(name='table_head'),
                title?: string(name='title', example='demo'),
                type?: int32(name='type', example='1'),
              }(name='refund_rule_item'),
              signRule?: {
                able?: boolean(name='able', example='true'),
                info?: [ 
                  {
                    content?: string(name='content'),
                    cost?: int32(name='cost', example='100'),
                    costPercent?: int32(name='cost_percent', example='10'),
                    timeStamp?: int32(name='time_stamp', example='1675036500000'),
                    timeType?: string(name='time_type', example='demo'),
                    title?: string(name='title'),
                  }
                ](name='info'),
              }(name='sign_rule'),
              tuigaiqianInfo?: string(name='tuigaiqian_info', example='demo'),
              upgradeRule?: {
                able?: boolean(name='able', example='true'),
                info?: [ 
                  {
                    content?: string(name='content'),
                    cost?: int32(name='cost', example='100'),
                    costPercent?: int32(name='cost_percent', example='10'),
                    timeStamp?: int32(name='time_stamp', example='1675036500000'),
                    timeType?: string(name='time_type', example='demo'),
                    title?: string(name='title'),
                  }
                ](name='info'),
              }(name='upgrade_rule'),
            }
          ](name='transfer_flight_rule_list'),
        }(name='transfer_info'),
        tripType?: int32(name='trip_type', example='1'),
      }
    ](name='flight_list'),
    isReplacePnr?: boolean(name='is_replace_pnr', example='false'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightSearchListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightSearchListResponseBody(name='body'),
}

/**
 * @summary 航班列表搜索
 *
 * @param request FlightSearchListRequest
 * @param headers FlightSearchListHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightSearchListResponse
 */
async function flightSearchListWithOptions(request: FlightSearchListRequest, headers: FlightSearchListHeaders, runtime: Util.RuntimeOptions): FlightSearchListResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.airlineCode)) {
    query['airline_code'] = request.airlineCode;
  }
  if (!Util.isUnset(request.arrCityCode)) {
    query['arr_city_code'] = request.arrCityCode;
  }
  if (!Util.isUnset(request.arrCityName)) {
    query['arr_city_name'] = request.arrCityName;
  }
  if (!Util.isUnset(request.arrDate)) {
    query['arr_date'] = request.arrDate;
  }
  if (!Util.isUnset(request.cabinClass)) {
    query['cabin_class'] = request.cabinClass;
  }
  if (!Util.isUnset(request.depCityCode)) {
    query['dep_city_code'] = request.depCityCode;
  }
  if (!Util.isUnset(request.depCityName)) {
    query['dep_city_name'] = request.depCityName;
  }
  if (!Util.isUnset(request.depDate)) {
    query['dep_date'] = request.depDate;
  }
  if (!Util.isUnset(request.flightNo)) {
    query['flight_no'] = request.flightNo;
  }
  if (!Util.isUnset(request.needMultiClassPrice)) {
    query['need_multi_class_price'] = request.needMultiClassPrice;
  }
  if (!Util.isUnset(request.transferCityCode)) {
    query['transfer_city_code'] = request.transferCityCode;
  }
  if (!Util.isUnset(request.transferFlightNo)) {
    query['transfer_flight_no'] = request.transferFlightNo;
  }
  if (!Util.isUnset(request.transferLeaveDate)) {
    query['transfer_leave_date'] = request.transferLeaveDate;
  }
  if (!Util.isUnset(request.tripType)) {
    query['trip_type'] = request.tripType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightSearchList',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/huge/dtb-flight/v1/flight/action/search-list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 航班列表搜索
 *
 * @param request FlightSearchListRequest
 * @return FlightSearchListResponse
 */
async function flightSearchList(request: FlightSearchListRequest): FlightSearchListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightSearchListHeaders{};
  return flightSearchListWithOptions(request, headers, runtime);
}

model FuPointBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FuPointBillSettlementQueryRequest {
  billBatch?: string(name='bill_batch', example='20240101'),
  cooperatorId?: string(name='cooperator_id', example='cooperator_alibtrip'),
  orderId?: long(name='order_id'),
  pageNo?: int32(name='page_no', description='This parameter is required.', example='1'),
  pageSize?: int32(name='page_size', description='This parameter is required.', example='100'),
  periodEnd?: string(name='period_end', example='2021-10-02'),
  periodStart?: string(name='period_start', example='2021-10-01'),
  scrollId?: string(name='scroll_id', example='1qwe'),
  scrollMod?: boolean(name='scroll_mod', example='true'),
}

model FuPointBillSettlementQueryResponseBody = {
  code?: int32(name='code', example='SUCCESS'),
  module?: {
    category?: int32(name='category', example='10'),
    corpId?: string(name='corp_id', example='corpid'),
    items?: [ 
      {
        adjustTime?: string(name='adjust_time'),
        alipayId?: string(name='alipay_id', example='123aaa'),
        alipayTradeNo?: string(name='alipay_trade_no', example='124'),
        applyArrCityCode?: string(name='apply_arr_city_code', example='CD'),
        applyArrCityName?: string(name='apply_arr_city_name'),
        applyDepCityCode?: string(name='apply_dep_city_code', example='123'),
        applyDepCityName?: string(name='apply_dep_city_name'),
        applyExtendField?: string(name='apply_extend_field'),
        applyId?: string(name='apply_id', example='1424041616244499302'),
        approverEmail?: string(name='approver_email', example='123@qq.com'),
        approverId?: string(name='approver_id', example='11'),
        approverName?: string(name='approver_name'),
        awardNum?: double(name='award_num', example='10.5'),
        basisAmount?: string(name='basis_amount', example='100.12'),
        billRecordTime?: string(name='bill_record_time', example='2023-01-01 00:00:00'),
        billingEntity?: string(name='billing_entity'),
        bookMode?: string(name='book_mode'),
        bookTime?: string(name='book_time', example='2023-01-01 00:00:00'),
        bookerId?: string(name='booker_id', example='1234'),
        bookerJobNo?: string(name='booker_job_no', example='zs123'),
        bookerName?: string(name='booker_name'),
        capitalDirection?: string(name='capital_direction'),
        cascadeDepartment?: string(name='cascade_department'),
        categoryDesc?: string(name='category_desc'),
        categoryOrderSettlePrice?: string(name='category_order_settle_price', example='100.32'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number', example='cs1'),
        costDepartment?: string(name='cost_department'),
        deductibleTax?: double(name='deductible_tax', example='0.11'),
        department?: string(name='department'),
        departmentId?: string(name='department_id', example='1112'),
        feeType?: string(name='fee_type'),
        feeTypeDesc?: string(name='fee_type_desc'),
        foreignersTag?: string(name='foreigners_tag'),
        grantNum?: double(name='grant_num', example='10'),
        index?: string(name='index', example='1'),
        invoiceTitle?: string(name='invoice_title'),
        location?: string(name='location', description='Location'),
        makeInvoice?: string(name='make_invoice'),
        mappingCompanyCode?: string(name='mapping_company_code'),
        orderId?: string(name='order_id', example='4801105714092'),
        orderStatusDesc?: string(name='order_status_desc'),
        originCategory?: string(name='origin_category'),
        originOrderId?: string(name='origin_order_id', example='111234'),
        overApplyId?: string(name='over_apply_id', example='123'),
        paymentDepartmentId?: string(name='payment_department_id', example='123'),
        paymentDepartmentName?: string(name='payment_department_name'),
        primaryId?: long(name='primary_id', example='93746933'),
        processorOaCode?: string(name='processor_oa_code'),
        projectCode?: string(name='project_code', example='acs'),
        projectName?: string(name='project_name'),
        purchaseOrderId?: string(name='purchase_order_id', example='111224324'),
        remark?: string(name='remark'),
        saveAmount?: double(name='save_amount', example='10.45'),
        sceneId?: string(name='scene_id', example='1'),
        sceneName?: string(name='scene_name'),
        settleTypeDesc?: string(name='settle_type_desc'),
        settlementFee?: double(name='settlement_fee', example='110.0'),
        settlementGrantFee?: double(name='settlement_grant_fee', example='0.0'),
        settlementTime?: string(name='settlement_time', example='2023-01-01 00:00:00'),
        settlementType?: string(name='settlement_type'),
        showSubOrderId?: string(name='show_sub_order_id', example='166564408'),
        sio?: string(name='sio', description='SIO', example='SIO'),
        status?: int32(name='status', example='2'),
        statusDesc?: string(name='status_desc'),
        subOrderId?: string(name='sub_order_id', example='1019199938284381'),
        taxRate?: string(name='tax_rate', example='9%'),
        thirdInvoiceId?: string(name='third_invoice_id', example='cs2'),
        thirdItineraryId?: string(name='third_itinerary_id', example='11'),
        tradeActionDesc?: string(name='trade_action_desc'),
        tradeReason?: string(name='trade_reason'),
        travelerEmail?: string(name='traveler_email', example='123@qq.com'),
        travelerId?: string(name='traveler_id', example='1234'),
        travelerJobNo?: string(name='traveler_job_no', example='A1234'),
        travelerMemberType?: string(name='traveler_member_type'),
        travelerMemberTypeName?: string(name='traveler_member_type_name'),
        travelerName?: string(name='traveler_name'),
        voucherType?: int32(name='voucher_type', example='11'),
        voucherTypeDesc?: string(name='voucher_type_desc'),
      }
    ](name='items'),
    periodEnd?: string(name='period_end', example='2022-07-02'),
    periodStart?: string(name='period_start', example='2021-10-13'),
    scrollId?: string(name='scroll_id', example='1qwe'),
    totalSize?: long(name='total_size', example='30'),
  }(name='module', description='module。'),
  morePage?: boolean(name='more_page', example='true'),
  requestId?: string(name='requestId', example='210bc22017109867047728291dd406'),
  resultMsg?: string(name='result_msg'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='trace_id', example='213e382517240341253056547e41fc'),
}

model FuPointBillSettlementQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FuPointBillSettlementQueryResponseBody(name='body'),
}

/**
 * @summary 查询福豆记账数据
 *
 * @param request FuPointBillSettlementQueryRequest
 * @param headers FuPointBillSettlementQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return FuPointBillSettlementQueryResponse
 */
async function fuPointBillSettlementQueryWithOptions(request: FuPointBillSettlementQueryRequest, headers: FuPointBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): FuPointBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billBatch)) {
    query['bill_batch'] = request.billBatch;
  }
  if (!Util.isUnset(request.cooperatorId)) {
    query['cooperator_id'] = request.cooperatorId;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }
  if (!Util.isUnset(request.scrollId)) {
    query['scroll_id'] = request.scrollId;
  }
  if (!Util.isUnset(request.scrollMod)) {
    query['scroll_mod'] = request.scrollMod;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FuPointBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/fupoint/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询福豆记账数据
 *
 * @param request FuPointBillSettlementQueryRequest
 * @return FuPointBillSettlementQueryResponse
 */
async function fuPointBillSettlementQuery(request: FuPointBillSettlementQueryRequest): FuPointBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FuPointBillSettlementQueryHeaders{};
  return fuPointBillSettlementQueryWithOptions(request, headers, runtime);
}

model GroupCorpTokenHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripAccessToken?: string(name='x-acs-btrip-access-token', example='feth00jqwls'),
}

model GroupCorpTokenRequest {
  appSecret?: string(name='app_secret', description='This parameter is required.', example='ZzljczY5dnFjNDAwVlNofiwoWX5ZWCxlcjVTKnVoZS0'),
  corpId?: string(name='corp_id', description='This parameter is required.', example='open12g9sfbmm5i07v10wDzRSK9w00'),
  subCorpId?: string(name='sub_corp_id', description='This parameter is required.', example='btripuyxmbg3cs286734u_mow6q'),
}

model GroupCorpTokenResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    expire?: long(name='expire', example='70000'),
    start?: long(name='start', example='1652410740914'),
    token?: string(name='token', example='*0*37j76df'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: string(name='success'),
  traceId?: string(name='traceId', description='traceId', example='210f079e16603757182131635d866a'),
}

model GroupCorpTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GroupCorpTokenResponseBody(name='body'),
}

/**
 * @summary 换取GroupCorpToken接口
 *
 * @param request GroupCorpTokenRequest
 * @param headers GroupCorpTokenHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GroupCorpTokenResponse
 */
async function groupCorpTokenWithOptions(request: GroupCorpTokenRequest, headers: GroupCorpTokenHeaders, runtime: Util.RuntimeOptions): GroupCorpTokenResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.appSecret)) {
    query['app_secret'] = request.appSecret;
  }
  if (!Util.isUnset(request.corpId)) {
    query['corp_id'] = request.corpId;
  }
  if (!Util.isUnset(request.subCorpId)) {
    query['sub_corp_id'] = request.subCorpId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripAccessToken)) {
    realHeaders['x-acs-btrip-access-token'] = Util.toJSONString(headers.xAcsBtripAccessToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GroupCorpToken',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/btrip-open-auth/v1/group-corp-token/action/take`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 换取GroupCorpToken接口
 *
 * @param request GroupCorpTokenRequest
 * @return GroupCorpTokenResponse
 */
async function groupCorpToken(request: GroupCorpTokenRequest): GroupCorpTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GroupCorpTokenHeaders{};
  return groupCorpTokenWithOptions(request, headers, runtime);
}

model GroupDepartSaveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model GroupDepartSaveRequest {
  deptName?: string(name='dept_name', description='This parameter is required.'),
  managerIds?: string(name='manager_ids'),
  outerDeptId?: string(name='outer_dept_id', description='This parameter is required.', example='001'),
  outerDeptPid?: string(name='outer_dept_pid', example='002'),
  status?: int32(name='status', description='This parameter is required.', example='0'),
  subCorpIdList?: [ string ](name='sub_corp_id_list'),
  syncGroup?: boolean(name='sync_group'),
}

model GroupDepartSaveShrinkRequest {
  deptName?: string(name='dept_name', description='This parameter is required.'),
  managerIds?: string(name='manager_ids'),
  outerDeptId?: string(name='outer_dept_id', description='This parameter is required.', example='001'),
  outerDeptPid?: string(name='outer_dept_pid', example='002'),
  status?: int32(name='status', description='This parameter is required.', example='0'),
  subCorpIdListShrink?: string(name='sub_corp_id_list'),
  syncGroup?: boolean(name='sync_group'),
}

model GroupDepartSaveResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210e847f16611516748613869de4f6'),
}

model GroupDepartSaveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GroupDepartSaveResponseBody(name='body'),
}

/**
 * @summary 集团部门同步
 *
 * @param tmpReq GroupDepartSaveRequest
 * @param headers GroupDepartSaveHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GroupDepartSaveResponse
 */
async function groupDepartSaveWithOptions(tmpReq: GroupDepartSaveRequest, headers: GroupDepartSaveHeaders, runtime: Util.RuntimeOptions): GroupDepartSaveResponse {
  Util.validateModel(tmpReq);
  var request = new GroupDepartSaveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.subCorpIdList)) {
    request.subCorpIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.subCorpIdList, 'sub_corp_id_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deptName)) {
    body['dept_name'] = request.deptName;
  }
  if (!Util.isUnset(request.managerIds)) {
    body['manager_ids'] = request.managerIds;
  }
  if (!Util.isUnset(request.outerDeptId)) {
    body['outer_dept_id'] = request.outerDeptId;
  }
  if (!Util.isUnset(request.outerDeptPid)) {
    body['outer_dept_pid'] = request.outerDeptPid;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.subCorpIdListShrink)) {
    body['sub_corp_id_list'] = request.subCorpIdListShrink;
  }
  if (!Util.isUnset(request.syncGroup)) {
    body['sync_group'] = request.syncGroup;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GroupDepartSave',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/sub_corps/v1/departs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 集团部门同步
 *
 * @param request GroupDepartSaveRequest
 * @return GroupDepartSaveResponse
 */
async function groupDepartSave(request: GroupDepartSaveRequest): GroupDepartSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GroupDepartSaveHeaders{};
  return groupDepartSaveWithOptions(request, headers, runtime);
}

model GroupUserSaveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model GroupUserSaveRequest {
  baseCityCode?: string(name='base_city_code'),
  birthday?: string(name='birthday'),
  certList?: [ 
    {
      certExpiredTime?: string(name='cert_expired_time'),
      certNation?: string(name='cert_nation'),
      certNo?: string(name='cert_no'),
      certType?: int32(name='cert_type'),
      nationality?: string(name='nationality'),
    }
  ](name='cert_list'),
  gender?: string(name='gender'),
  jobNo?: string(name='job_no', example='1001'),
  phone?: string(name='phone', example='18000000000'),
  realNameEn?: string(name='real_name_en', example='ce/shi'),
  subCorpIdList?: [ 
    {
      departIds?: [ string ](name='depart_ids'),
      email?: string(name='email'),
      leaveStatus?: int32(name='leave_status', description='This parameter is required.', example='0'),
      managerUserId?: string(name='manager_user_id', example='123'),
      positionLevel?: string(name='position_level', example='10'),
      subCorpId?: string(name='sub_corp_id', description='This parameter is required.', example='btrip123'),
    }
  ](name='sub_corp_id_list', description='This parameter is required.'),
  userId?: string(name='user_id', description='This parameter is required.', example='123'),
  userName?: string(name='user_name', description='This parameter is required.'),
}

model GroupUserSaveShrinkRequest {
  baseCityCode?: string(name='base_city_code'),
  birthday?: string(name='birthday'),
  certListShrink?: string(name='cert_list'),
  gender?: string(name='gender'),
  jobNo?: string(name='job_no', example='1001'),
  phone?: string(name='phone', example='18000000000'),
  realNameEn?: string(name='real_name_en', example='ce/shi'),
  subCorpIdListShrink?: string(name='sub_corp_id_list', description='This parameter is required.'),
  userId?: string(name='user_id', description='This parameter is required.', example='123'),
  userName?: string(name='user_name', description='This parameter is required.'),
}

model GroupUserSaveResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model GroupUserSaveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GroupUserSaveResponseBody(name='body'),
}

/**
 * @summary 集团人员同步
 *
 * @param tmpReq GroupUserSaveRequest
 * @param headers GroupUserSaveHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GroupUserSaveResponse
 */
async function groupUserSaveWithOptions(tmpReq: GroupUserSaveRequest, headers: GroupUserSaveHeaders, runtime: Util.RuntimeOptions): GroupUserSaveResponse {
  Util.validateModel(tmpReq);
  var request = new GroupUserSaveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.certList)) {
    request.certListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.certList, 'cert_list', 'json');
  }
  if (!Util.isUnset(tmpReq.subCorpIdList)) {
    request.subCorpIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.subCorpIdList, 'sub_corp_id_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.baseCityCode)) {
    body['base_city_code'] = request.baseCityCode;
  }
  if (!Util.isUnset(request.birthday)) {
    body['birthday'] = request.birthday;
  }
  if (!Util.isUnset(request.certListShrink)) {
    body['cert_list'] = request.certListShrink;
  }
  if (!Util.isUnset(request.gender)) {
    body['gender'] = request.gender;
  }
  if (!Util.isUnset(request.jobNo)) {
    body['job_no'] = request.jobNo;
  }
  if (!Util.isUnset(request.phone)) {
    body['phone'] = request.phone;
  }
  if (!Util.isUnset(request.realNameEn)) {
    body['real_name_en'] = request.realNameEn;
  }
  if (!Util.isUnset(request.subCorpIdListShrink)) {
    body['sub_corp_id_list'] = request.subCorpIdListShrink;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    body['user_name'] = request.userName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GroupUserSave',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/sub_corps/v1/users`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 集团人员同步
 *
 * @param request GroupUserSaveRequest
 * @return GroupUserSaveResponse
 */
async function groupUserSave(request: GroupUserSaveRequest): GroupUserSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GroupUserSaveHeaders{};
  return groupUserSaveWithOptions(request, headers, runtime);
}

model HotelAskingPriceHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelAskingPriceRequest {
  adultNum?: string(name='adult_num', example='1'),
  btripUserId?: string(name='btrip_user_id', example='1000'),
  checkInDate?: string(name='check_in_date', description='This parameter is required.', example='2023-02-22 00:00:00'),
  checkOutDate?: string(name='check_out_date', description='This parameter is required.', example='2023-02-22 00:00:00'),
  cityCode?: string(name='city_code', example='330100'),
  cityName?: string(name='city_name'),
  dir?: int32(name='dir', example='1'),
  hotelStar?: string(name='hotel_star', example='1'),
  isProtocol?: boolean(name='is_protocol', example='true'),
  paymentType?: int32(name='payment_type', example='0'),
  shids?: [ long ](name='shids', description='This parameter is required.'),
  sortCode?: int32(name='sort_code', example='0'),
}

model HotelAskingPriceShrinkRequest {
  adultNum?: string(name='adult_num', example='1'),
  btripUserId?: string(name='btrip_user_id', example='1000'),
  checkInDate?: string(name='check_in_date', description='This parameter is required.', example='2023-02-22 00:00:00'),
  checkOutDate?: string(name='check_out_date', description='This parameter is required.', example='2023-02-22 00:00:00'),
  cityCode?: string(name='city_code', example='330100'),
  cityName?: string(name='city_name'),
  dir?: int32(name='dir', example='1'),
  hotelStar?: string(name='hotel_star', example='1'),
  isProtocol?: boolean(name='is_protocol', example='true'),
  paymentType?: int32(name='payment_type', example='0'),
  shidsShrink?: string(name='shids', description='This parameter is required.'),
  sortCode?: int32(name='sort_code', example='0'),
}

model HotelAskingPriceResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='None'),
  module?: {
    hotelAskingPriceDetails?: [ 
      {
        cityCode?: string(name='city_code', example='652302'),
        hotelAddress?: string(name='hotel_address'),
        hotelCode?: string(name='hotel_code', example='55335212'),
        hotelName?: string(name='hotel_name'),
        isProtocol?: boolean(name='is_protocol', example='true'),
        minPrice?: double(name='min_price', example='100'),
        originalMinPrice?: double(name='original_min_price', example='100'),
      }
    ](name='hotel_asking_price_details'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210bcc3a16583004579056128d33d7'),
}

model HotelAskingPriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelAskingPriceResponseBody(name='body'),
}

/**
 * @summary 酒店起价
 *
 * @param tmpReq HotelAskingPriceRequest
 * @param headers HotelAskingPriceHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelAskingPriceResponse
 */
async function hotelAskingPriceWithOptions(tmpReq: HotelAskingPriceRequest, headers: HotelAskingPriceHeaders, runtime: Util.RuntimeOptions): HotelAskingPriceResponse {
  Util.validateModel(tmpReq);
  var request = new HotelAskingPriceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.shids)) {
    request.shidsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shids, 'shids', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.adultNum)) {
    query['adult_num'] = request.adultNum;
  }
  if (!Util.isUnset(request.btripUserId)) {
    query['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.checkInDate)) {
    query['check_in_date'] = request.checkInDate;
  }
  if (!Util.isUnset(request.checkOutDate)) {
    query['check_out_date'] = request.checkOutDate;
  }
  if (!Util.isUnset(request.cityCode)) {
    query['city_code'] = request.cityCode;
  }
  if (!Util.isUnset(request.cityName)) {
    query['city_name'] = request.cityName;
  }
  if (!Util.isUnset(request.dir)) {
    query['dir'] = request.dir;
  }
  if (!Util.isUnset(request.hotelStar)) {
    query['hotel_star'] = request.hotelStar;
  }
  if (!Util.isUnset(request.isProtocol)) {
    query['is_protocol'] = request.isProtocol;
  }
  if (!Util.isUnset(request.paymentType)) {
    query['payment_type'] = request.paymentType;
  }
  if (!Util.isUnset(request.shidsShrink)) {
    query['shids'] = request.shidsShrink;
  }
  if (!Util.isUnset(request.sortCode)) {
    query['sort_code'] = request.sortCode;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelAskingPrice',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/hotels/action/asking-price`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 酒店起价
 *
 * @param request HotelAskingPriceRequest
 * @return HotelAskingPriceResponse
 */
async function hotelAskingPrice(request: HotelAskingPriceRequest): HotelAskingPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelAskingPriceHeaders{};
  return hotelAskingPriceWithOptions(request, headers, runtime);
}

model HotelBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model HotelBillSettlementQueryRequest {
  billBatch?: string(name='bill_batch'),
  orderId?: long(name='order_id'),
  pageNo?: int32(name='page_no', description='This parameter is required.', example='1'),
  pageSize?: int32(name='page_size', description='This parameter is required.', example='50'),
  periodEnd?: string(name='period_end', example='2021-10-02'),
  periodStart?: string(name='period_start', example='2021-10-01'),
  scrollId?: string(name='scroll_id'),
  scrollMod?: boolean(name='scroll_mod'),
}

model HotelBillSettlementQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category', example='2'),
    corpId?: string(name='corp_id'),
    dataList?: [ 
      {
        adjustTime?: string(name='adjust_time'),
        agreementPromotionFee?: double(name='agreement_promotion_fee'),
        alipayTradeNo?: string(name='alipay_trade_no', example='234432432'),
        applyArrCityCode?: string(name='apply_arr_city_code'),
        applyArrCityName?: string(name='apply_arr_city_name'),
        applyDepCityCode?: string(name='apply_dep_city_code'),
        applyDepCityName?: string(name='apply_dep_city_name'),
        applyExtendField?: string(name='apply_extend_field', description='审批扩展自定义字段'),
        applyId?: string(name='apply_id', example='103208648'),
        approverEmail?: string(name='approver_email'),
        approverId?: string(name='approver_id'),
        approverName?: string(name='approver_name'),
        averageNights?: string(name='average_nights'),
        baseLocation?: string(name='base_location'),
        billRecordTime?: string(name='bill_record_time', example='2022-07-20T10:40Z'),
        billingEntity?: string(name='billing_entity'),
        bookChannel?: string(name='book_channel'),
        bookMode?: string(name='book_mode'),
        bookReason?: string(name='book_reason'),
        bookTime?: string(name='book_time', example='2021-10-12 23:58:48'),
        bookerId?: string(name='booker_id'),
        bookerJobNo?: string(name='booker_job_no'),
        bookerName?: string(name='booker_name'),
        brandGroup?: string(name='brand_group'),
        brandName?: string(name='brand_name'),
        businessTripResult?: string(name='business_trip_result'),
        cancelOrModifyReason?: string(name='cancel_or_modify_reason'),
        cancelOrModifyScene?: string(name='cancel_or_modify_scene'),
        capitalDirection?: string(name='capital_direction', example='1'),
        cascadeDepartment?: string(name='cascade_department'),
        categoryDesc?: string(name='category_desc'),
        checkInDate?: string(name='check_in_date', example='2021-10-14 00:00:00'),
        checkoutDate?: string(name='checkout_date', example='2021-10-16 00:00:00'),
        city?: string(name='city'),
        cityCode?: string(name='city_code', example='110100'),
        cityCounty?: string(name='city_county'),
        cityCountyCode?: string(name='city_county_code'),
        corpRefundFee?: double(name='corp_refund_fee', example='12'),
        corpTotalFee?: double(name='corp_total_fee', example='1000'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number', example='8b7f3cd-24324-097'),
        costDepartment?: string(name='cost_department'),
        customContent?: string(name='custom_content'),
        deductibleTax?: double(name='deductible_tax'),
        department?: string(name='department'),
        departmentId?: string(name='department_id'),
        exceedReason?: string(name='exceed_reason'),
        feeType?: string(name='fee_type', example='20101'),
        feeTypeDesc?: string(name='fee_type_desc'),
        fees?: double(name='fees', example='0'),
        fines?: double(name='fines'),
        foreignersTag?: string(name='foreigners_tag'),
        fuPointFee?: double(name='fu_point_fee', example='12'),
        hotelName?: string(name='hotel_name'),
        index?: string(name='index', example='5038018'),
        insOrderId?: string(name='ins_order_id'),
        insuranceNumber?: string(name='insurance_number'),
        insurancePrice?: double(name='insurance_price'),
        insuranceProductName?: string(name='insurance_product_name'),
        invoiceTitle?: string(name='invoice_title'),
        isEarlyDeparture?: string(name='is_early_departure'),
        isNegotiation?: string(name='is_negotiation'),
        isShareStr?: string(name='is_share_str'),
        location?: string(name='location'),
        mappingCompanyCode?: string(name='mapping_company_code'),
        nights?: int32(name='nights', example='2'),
        noAdvanceBookingReason?: string(name='no_advance_booking_reason'),
        orderId?: string(name='order_id', example='223423423432422'),
        orderPrice?: double(name='order_price', example='1088.96'),
        orderType?: string(name='order_type'),
        originalReserveRule?: string(name='original_reserve_rule'),
        overApplyId?: string(name='over_apply_id', example='4234324'),
        paymentDepartmentId?: string(name='payment_department_id'),
        paymentDepartmentName?: string(name='payment_department_name'),
        personRefundFee?: double(name='person_refund_fee', example='34'),
        personSettlePrice?: double(name='person_settle_price', example='88.96'),
        position?: string(name='position'),
        positionLevel?: string(name='position_level'),
        primaryId?: long(name='primary_id', example='5038018'),
        processorOaCode?: string(name='processor_oa_code'),
        projectCode?: string(name='project_code', example='223423432'),
        projectName?: string(name='project_name'),
        promotionFee?: double(name='promotion_fee', example='113.02'),
        recoverMoneyReceiptAmt?: double(name='recover_money_receipt_amt'),
        remark?: string(name='remark'),
        reserveRule?: string(name='reserve_rule'),
        roomNo?: string(name='room_no'),
        roomNumber?: int32(name='room_number', example='1'),
        roomPrice?: double(name='room_price', example='1201.98'),
        roomType?: string(name='room_type'),
        sceneId?: string(name='scene_id'),
        sceneName?: string(name='scene_name'),
        serviceFee?: double(name='service_fee', example='0'),
        settleTypeDesc?: string(name='settle_type_desc'),
        settlementFee?: double(name='settlement_fee', example='1000'),
        settlementGrantFee?: double(name='settlement_grant_fee', example='5.68'),
        settlementTime?: string(name='settlement_time', example='2021-10-12 23:58:56'),
        settlementType?: string(name='settlement_type', example='4'),
        sio?: string(name='sio'),
        star?: string(name='star'),
        status?: int32(name='status', example='1'),
        statusDesc?: string(name='status_desc'),
        taxRate?: string(name='tax_rate', description='税率', example='6%'),
        thirdItineraryId?: string(name='third_itinerary_id'),
        totalNights?: int32(name='total_nights', example='2'),
        tradeActionDesc?: string(name='trade_action_desc'),
        travelerEmail?: string(name='traveler_email'),
        travelerId?: string(name='traveler_id'),
        travelerJobNo?: string(name='traveler_job_no', example='326246'),
        travelerMemberType?: string(name='traveler_member_type'),
        travelerMemberTypeName?: string(name='traveler_member_type_name'),
        travelerName?: string(name='traveler_name'),
        unbookedLowestPriceReason?: string(name='unbooked_lowest_price_reason'),
        voucherType?: int32(name='voucher_type', example='11'),
        voucherTypeDesc?: string(name='voucher_type_desc'),
      }
    ](name='data_list'),
    periodEnd?: string(name='period_end', example='2021-10-14'),
    periodStart?: string(name='period_start', example='2021-10-13'),
    scrollId?: string(name='scroll_id'),
    totalNum?: long(name='total_num', example='1402'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelBillSettlementQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelBillSettlementQueryResponseBody(name='body'),
}

/**
 * @summary 查询酒店记账数据
 *
 * @param request HotelBillSettlementQueryRequest
 * @param headers HotelBillSettlementQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelBillSettlementQueryResponse
 */
async function hotelBillSettlementQueryWithOptions(request: HotelBillSettlementQueryRequest, headers: HotelBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): HotelBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billBatch)) {
    query['bill_batch'] = request.billBatch;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }
  if (!Util.isUnset(request.scrollId)) {
    query['scroll_id'] = request.scrollId;
  }
  if (!Util.isUnset(request.scrollMod)) {
    query['scroll_mod'] = request.scrollMod;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/hotel/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询酒店记账数据
 *
 * @param request HotelBillSettlementQueryRequest
 * @return HotelBillSettlementQueryResponse
 */
async function hotelBillSettlementQuery(request: HotelBillSettlementQueryRequest): HotelBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelBillSettlementQueryHeaders{};
  return hotelBillSettlementQueryWithOptions(request, headers, runtime);
}

model HotelCityCodeListHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelCityCodeListRequest {
  countryCode?: string(name='country_code', example='1'),
}

model HotelCityCodeListResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='response is empty.'),
  module?: [ 
    {
      citys?: [ 
        {
          cityCode?: string(name='city_code', example='445222'),
          cityName?: string(name='city_name'),
          districts?: [ 
            {
              districtCode?: string(name='district_code', example='330000'),
              districtName?: string(name='district_name'),
            }
          ](name='districts'),
        }
      ](name='citys'),
      proviceCode?: string(name='provice_code', example='108800'),
      provinceName?: string(name='province_name'),
    }
  ](name='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelCityCodeListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelCityCodeListResponseBody(name='body'),
}

/**
 * @summary 酒店城市列表
 *
 * @param request HotelCityCodeListRequest
 * @param headers HotelCityCodeListHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelCityCodeListResponse
 */
async function hotelCityCodeListWithOptions(request: HotelCityCodeListRequest, headers: HotelCityCodeListHeaders, runtime: Util.RuntimeOptions): HotelCityCodeListResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.countryCode)) {
    query['country_code'] = request.countryCode;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelCityCodeList',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/city-codes/action/search`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 酒店城市列表
 *
 * @param request HotelCityCodeListRequest
 * @return HotelCityCodeListResponse
 */
async function hotelCityCodeList(request: HotelCityCodeListRequest): HotelCityCodeListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelCityCodeListHeaders{};
  return hotelCityCodeListWithOptions(request, headers, runtime);
}

model HotelExceedApplyQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model HotelExceedApplyQueryRequest {
  applyId?: long(name='apply_id', example='1287123'),
  businessInstanceId?: string(name='business_instance_id'),
}

model HotelExceedApplyQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id', example='27238197'),
    applyIntentionInfoDo?: {
      checkIn?: string(name='check_in', example='2021-07-08'),
      checkOut?: string(name='check_out', example='2021-07-08'),
      cityCode?: string(name='city_code', example='SHA'),
      cityName?: string(name='city_name'),
      price?: long(name='price', example='10000'),
      together?: boolean(name='together', example='true'),
      type?: int32(name='type', example='16'),
    }(name='apply_intention_info_do'),
    btripCause?: string(name='btrip_cause'),
    corpId?: string(name='corp_id', example='corp1'),
    exceedReason?: string(name='exceed_reason'),
    exceedType?: int32(name='exceed_type', example='16'),
    originStandard?: string(name='origin_standard', example='10000'),
    status?: int32(name='status', example='1'),
    submitTime?: string(name='submit_time', example='2022-02-11T16:25Z'),
    thirdpartApplyId?: string(name='thirdpart_apply_id', example='0001A1100000007EX08O'),
    thirdpartCorpId?: string(name='thirdpart_corp_id', example='test_corp'),
    userId?: string(name='user_id', example='user1'),
    userName?: string(name='user_name'),
  }(name='module'),
  requestId?: string(name='requestId', example='E03779E6-71C2-5082-ABE3-6315B8247EE8'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelExceedApplyQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelExceedApplyQueryResponseBody(name='body'),
}

/**
 * @summary 查询酒店超标审批详情
 *
 * @param request HotelExceedApplyQueryRequest
 * @param headers HotelExceedApplyQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelExceedApplyQueryResponse
 */
async function hotelExceedApplyQueryWithOptions(request: HotelExceedApplyQueryRequest, headers: HotelExceedApplyQueryHeaders, runtime: Util.RuntimeOptions): HotelExceedApplyQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.businessInstanceId)) {
    query['business_instance_id'] = request.businessInstanceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelExceedApplyQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/hotel-exceed`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询酒店超标审批详情
 *
 * @param request HotelExceedApplyQueryRequest
 * @return HotelExceedApplyQueryResponse
 */
async function hotelExceedApplyQuery(request: HotelExceedApplyQueryRequest): HotelExceedApplyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelExceedApplyQueryHeaders{};
  return hotelExceedApplyQueryWithOptions(request, headers, runtime);
}

model HotelGoodsQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelGoodsQueryRequest {
  adultNum?: string(name='adult_num', example='1'),
  agreementPrice?: boolean(name='agreement_price', example='false'),
  beginDate?: string(name='begin_date', description='This parameter is required.', example='2023-02-27'),
  breakfastIncluded?: boolean(name='breakfast_included', example='false'),
  btripUserId?: string(name='btrip_user_id', description='This parameter is required.', example='100'),
  cityCode?: string(name='city_code', example='330100'),
  endDate?: string(name='end_date', description='This parameter is required.', example='2023-02-28'),
  hotelId?: string(name='hotel_id', description='This parameter is required.', example='182873'),
  payOverType?: int32(name='pay_over_type', example='0'),
  paymentType?: int32(name='payment_type', example='0'),
  specialInvoice?: boolean(name='special_invoice', example='false'),
  superMan?: int32(name='super_man', example='0'),
}

model HotelGoodsQueryResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='None'),
  module?: {
    address?: string(name='address'),
    bookingInstructions?: map[string]string(name='booking_instructions'),
    canForeigner?: boolean(name='can_foreigner', example='true'),
    checkIn?: string(name='check_in', example='2022-05-15'),
    checkOut?: string(name='check_out', example='2022-05-15'),
    descriptions?: [ string ](name='descriptions'),
    dinamicBannerPicUrls?: [ string ](name='dinamic_banner_pic_urls'),
    earlyArrivalTime?: string(name='early_arrival_time', example='17:00'),
    hotelId?: long(name='hotel_id', example='29382'),
    hotelName?: string(name='hotel_name'),
    lateArrivalTime?: string(name='late_arrival_time', example='12:00'),
    rooms?: [ 
      {
        area?: string(name='area', example='27'),
        bedTypeString?: string(name='bed_type_string'),
        extraBed?: boolean(name='extra_bed', example='true'),
        facility?: string(name='facility'),
        floor?: string(name='floor', example='1,2,3,4,5,6'),
        maxOccupancy?: int32(name='max_occupancy', example='1'),
        name?: string(name='name'),
        networkService?: string(name='network_service', example='0'),
        pics?: string(name='pics'),
        rates?: [ 
          {
            bedDesc?: string(name='bed_desc'),
            bedType?: string(name='bed_type'),
            breakfast?: string(name='breakfast'),
            btripCancelRule?: {
              btripHotelCancelPolicyDTO?: {
                btripHotelCancelPolicyInfoDTOList?: [ 
                  {
                    hour?: long(name='hour', example='1'),
                    value?: long(name='value', example='20'),
                  }
                ](name='btrip_hotel_cancel_policy_info_d_t_o_list'),
                cancelPolicyType?: int32(name='cancel_policy_type', example='1'),
              }(name='btrip_hotel_cancel_policy_d_t_o'),
              cancelPolicyTitle?: string(name='cancel_policy_title'),
              checkIn?: string(name='check_in', example='2023-02-27'),
            }(name='btrip_cancel_rule'),
            btripHotelCancelDesc?: [ 
              {
                desc?: string(name='desc'),
                title?: string(name='title'),
              }
            ](name='btrip_hotel_cancel_desc'),
            canSmoking?: boolean(name='can_smoking', example='true'),
            cancelPolicyDesc?: string(name='cancel_policy_desc'),
            cancelPolicyType?: int32(name='cancel_policy_type', example='1'),
            companyAassist?: string(name='company_aassist', example='0'),
            confirmType?: int32(name='confirm_type', example='0'),
            currencyCode?: string(name='currency_code', example='cny'),
            dailyPriceFormatYuan?: string(name='daily_price_format_yuan', example='demo'),
            dailyPriceView?: string(name='daily_price_view', example='400'),
            discountDesc?: {
              cashReduceTotal?: string(name='cash_reduce_total'),
              dinamicLabel?: string(name='dinamic_label'),
              discountDetail?: [ 
                {
                  labelName?: [ string ](name='label_name'),
                  moneyDesc?: string(name='money_desc'),
                }
              ](name='discount_detail'),
              subTitle?: string(name='sub_title'),
              title?: string(name='title'),
            }(name='discount_desc'),
            endTimeDaily?: string(name='end_time_daily', example='demo'),
            hotelDetailRatePriceDTO?: [ 
              {
                beforeDiscountPrice?: long(name='before_discount_price', example='100'),
                breakfast?: string(name='breakfast', example='demo'),
                discountPrice?: long(name='discount_price', example='1000'),
                lastDiscountsPrice?: long(name='last_discounts_price', example='100'),
                lastDiscountsRoundingPrice?: long(name='last_discounts_rounding_price'),
                lastNum?: int32(name='last_num', example='1'),
                rateStartTime?: string(name='rate_start_time', example='2023-03-25'),
                status?: int32(name='status', example='1'),
              }
            ](name='hotel_detail_rate_price_d_t_o'),
            instantConfirm?: boolean(name='instant_confirm', example='true'),
            inventoryDesc?: string(name='inventory_desc'),
            inventoryPrice?: string(name='inventory_price', example='100'),
            isBusinessPay4Goods?: boolean(name='is_business_pay4_goods', example='true'),
            isGuarantee?: int32(name='is_guarantee'),
            isNeedEmail?: boolean(name='is_need_email', example='true'),
            itemId?: long(name='item_id', example='612673015638'),
            lastCancelTime?: string(name='last_cancel_time', example='demo'),
            maxOccupancy?: int32(name='max_occupancy', example='2'),
            minAdvHours?: int32(name='min_adv_hours', example='2'),
            minDays?: int32(name='min_days', example='3'),
            nod?: int32(name='nod', example='1'),
            nop?: int32(name='nop', example='2'),
            orderShipTime?: int32(name='order_ship_time', example='0'),
            paymentType?: int32(name='payment_type', example='1'),
            priceType?: int32(name='price_type', example='0'),
            promotionInfo?: string(name='promotion_info', example='demo'),
            rateId?: long(name='rate_id', example='4509447432148'),
            ratePlanName?: string(name='rate_plan_name'),
            rpId?: long(name='rp_id', example='4509447432148'),
            sellerId?: long(name='seller_id', example='4011822148'),
            startTimeDaily?: string(name='start_time_daily', example='demo'),
            status?: int32(name='status', example='1'),
            supplierCode?: string(name='supplier_code', example='2321'),
            supplierName?: string(name='supplier_name', example='demo'),
            supportSpecialInvoice?: boolean(name='support_special_invoice', example='true'),
            unroundingDailyPriceFormatYuan?: string(name='unrounding_daily_price_format_yuan', example='40000'),
          }
        ](name='rates'),
        roomDasc?: string(name='room_dasc', example='demo'),
        roomFacility?: [ string ](name='room_facility'),
        roomService?: [ 
          {
            color?: string(name='color', example='#000000'),
            desc?: string(name='desc'),
            highlightColorColor?: string(name='highlight_color_color', example='#4AA900'),
            title?: string(name='title'),
          }
        ](name='room_service'),
        srid?: long(name='srid', example='100929'),
        status?: int32(name='status', example='1'),
        windowType?: string(name='window_type'),
      }
    ](name='rooms'),
    searchId?: string(name='search_id', example='demo'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210e847f16611516748613869de4f6'),
}

model HotelGoodsQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelGoodsQueryResponseBody(name='body'),
}

/**
 * @summary 酒店详情页报价接口(直连)
 *
 * @param request HotelGoodsQueryRequest
 * @param headers HotelGoodsQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelGoodsQueryResponse
 */
async function hotelGoodsQueryWithOptions(request: HotelGoodsQueryRequest, headers: HotelGoodsQueryHeaders, runtime: Util.RuntimeOptions): HotelGoodsQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.adultNum)) {
    query['adult_num'] = request.adultNum;
  }
  if (!Util.isUnset(request.agreementPrice)) {
    query['agreement_price'] = request.agreementPrice;
  }
  if (!Util.isUnset(request.beginDate)) {
    query['begin_date'] = request.beginDate;
  }
  if (!Util.isUnset(request.breakfastIncluded)) {
    query['breakfast_included'] = request.breakfastIncluded;
  }
  if (!Util.isUnset(request.btripUserId)) {
    query['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.cityCode)) {
    query['city_code'] = request.cityCode;
  }
  if (!Util.isUnset(request.endDate)) {
    query['end_date'] = request.endDate;
  }
  if (!Util.isUnset(request.hotelId)) {
    query['hotel_id'] = request.hotelId;
  }
  if (!Util.isUnset(request.payOverType)) {
    query['pay_over_type'] = request.payOverType;
  }
  if (!Util.isUnset(request.paymentType)) {
    query['payment_type'] = request.paymentType;
  }
  if (!Util.isUnset(request.specialInvoice)) {
    query['special_invoice'] = request.specialInvoice;
  }
  if (!Util.isUnset(request.superMan)) {
    query['super_man'] = request.superMan;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelGoodsQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/hotel-goods`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 酒店详情页报价接口(直连)
 *
 * @param request HotelGoodsQueryRequest
 * @return HotelGoodsQueryResponse
 */
async function hotelGoodsQuery(request: HotelGoodsQueryRequest): HotelGoodsQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelGoodsQueryHeaders{};
  return hotelGoodsQueryWithOptions(request, headers, runtime);
}

model HotelIndexInfoHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelIndexInfoRequest {
  cityCode?: string(name='city_code', example='330000'),
  hotelStatus?: int32(name='hotel_status', example='0'),
  pageSize?: int32(name='page_size', description='This parameter is required.', example='20'),
  pageToken?: string(name='page_token', example='1038882'),
}

model HotelIndexInfoResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='operation success.'),
  module?: {
    items?: [ 
      {
        hotelId?: string(name='hotel_id', example='182873'),
        hotelStatus?: string(name='hotel_status', example='0'),
      }
    ](name='items'),
    pageSize?: int32(name='page_size', example='20'),
    pageToken?: string(name='page_token', example='182873'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelIndexInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelIndexInfoResponseBody(name='body'),
}

/**
 * @summary 获取酒店清单
 *
 * @param request HotelIndexInfoRequest
 * @param headers HotelIndexInfoHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelIndexInfoResponse
 */
async function hotelIndexInfoWithOptions(request: HotelIndexInfoRequest, headers: HotelIndexInfoHeaders, runtime: Util.RuntimeOptions): HotelIndexInfoResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.cityCode)) {
    query['city_code'] = request.cityCode;
  }
  if (!Util.isUnset(request.hotelStatus)) {
    query['hotel_status'] = request.hotelStatus;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.pageToken)) {
    query['page_token'] = request.pageToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelIndexInfo',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/index-infos`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取酒店清单
 *
 * @param request HotelIndexInfoRequest
 * @return HotelIndexInfoResponse
 */
async function hotelIndexInfo(request: HotelIndexInfoRequest): HotelIndexInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelIndexInfoHeaders{};
  return hotelIndexInfoWithOptions(request, headers, runtime);
}

model HotelOrderCancelHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelOrderCancelRequest {
  btripOrderId?: string(name='btrip_order_id'),
  disOrderId?: string(name='dis_order_id', example='dis123'),
}

model HotelOrderCancelResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message', example='noPermission'),
  module?: {
    cancelSuccess?: boolean(name='cancel_success', example='true'),
    code?: string(name='code'),
    desc?: string(name='desc'),
    forfeitFee?: long(name='forfeit_fee', example='100'),
  }(name='module', description='module。'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelOrderCancelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelOrderCancelResponseBody(name='body'),
}

/**
 * @summary 酒店订单取消
 *
 * @param request HotelOrderCancelRequest
 * @param headers HotelOrderCancelHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelOrderCancelResponse
 */
async function hotelOrderCancelWithOptions(request: HotelOrderCancelRequest, headers: HotelOrderCancelHeaders, runtime: Util.RuntimeOptions): HotelOrderCancelResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.btripOrderId)) {
    query['btrip_order_id'] = request.btripOrderId;
  }
  if (!Util.isUnset(request.disOrderId)) {
    query['dis_order_id'] = request.disOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelOrderCancel',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/orders/action/cancel`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 酒店订单取消
 *
 * @param request HotelOrderCancelRequest
 * @return HotelOrderCancelResponse
 */
async function hotelOrderCancel(request: HotelOrderCancelRequest): HotelOrderCancelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelOrderCancelHeaders{};
  return hotelOrderCancelWithOptions(request, headers, runtime);
}

model HotelOrderChangeApplyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelOrderChangeApplyRequest {
  btripUserId?: string(name='btrip_user_id', example='123122'),
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='3685792244476194816'),
  reason?: string(name='reason', description='This parameter is required.'),
  roomInfoList?: [ 
    {
      cancelDate?: [ string ](name='cancel_date', description='This parameter is required.'),
      roomNo?: int32(name='room_no', description='This parameter is required.', example='112'),
    }
  ](name='room_info_list', description='This parameter is required.'),
  saleOrderId?: string(name='sale_order_id', description='This parameter is required.', example='1402002197440511306'),
}

model HotelOrderChangeApplyShrinkRequest {
  btripUserId?: string(name='btrip_user_id', example='123122'),
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='3685792244476194816'),
  reason?: string(name='reason', description='This parameter is required.'),
  roomInfoListShrink?: string(name='room_info_list', description='This parameter is required.'),
  saleOrderId?: string(name='sale_order_id', description='This parameter is required.', example='1402002197440511306'),
}

model HotelOrderChangeApplyResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    changeOrderId?: string(name='change_order_id', example='123445443444'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', example='6E9ABA14-5135-58FB-9DFC-C751B5855605'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='215045ec17018285034106091e8ba9'),
}

model HotelOrderChangeApplyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelOrderChangeApplyResponseBody(name='body'),
}

/**
 * @summary 酒店订单修改申请
 *
 * @param tmpReq HotelOrderChangeApplyRequest
 * @param headers HotelOrderChangeApplyHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelOrderChangeApplyResponse
 */
async function hotelOrderChangeApplyWithOptions(tmpReq: HotelOrderChangeApplyRequest, headers: HotelOrderChangeApplyHeaders, runtime: Util.RuntimeOptions): HotelOrderChangeApplyResponse {
  Util.validateModel(tmpReq);
  var request = new HotelOrderChangeApplyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.roomInfoList)) {
    request.roomInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roomInfoList, 'room_info_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    body['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.disOrderId)) {
    body['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.reason)) {
    body['reason'] = request.reason;
  }
  if (!Util.isUnset(request.roomInfoListShrink)) {
    body['room_info_list'] = request.roomInfoListShrink;
  }
  if (!Util.isUnset(request.saleOrderId)) {
    body['sale_order_id'] = request.saleOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'HotelOrderChangeApply',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/orders/action/change/apply`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 酒店订单修改申请
 *
 * @param request HotelOrderChangeApplyRequest
 * @return HotelOrderChangeApplyResponse
 */
async function hotelOrderChangeApply(request: HotelOrderChangeApplyRequest): HotelOrderChangeApplyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelOrderChangeApplyHeaders{};
  return hotelOrderChangeApplyWithOptions(request, headers, runtime);
}

model HotelOrderChangeDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelOrderChangeDetailRequest {
  btripUserId?: string(name='btrip_user_id', example='123455'),
  changeOrderId?: string(name='change_order_id', example='21351235134'),
  disOrderId?: string(name='dis_order_id', example='dis123'),
  saleOrderId?: string(name='sale_order_id', example='1402002197440511306'),
}

model HotelOrderChangeDetailResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message', example='operation success'),
  module?: {
    changeOrderId?: string(name='change_order_id', example='1234'),
    changeType?: int32(name='change_type', example='0'),
    corpId?: string(name='corp_id', example='open12ih3c8jb8o47v10B4r4josN00'),
    disOrderId?: string(name='dis_order_id', example='dis1234'),
    gmtCreate?: string(name='gmt_create', example='2024-07-07 13:42:49'),
    gmtModified?: string(name='gmt_modified', example='2024-07-07 13:42:49'),
    reason?: string(name='reason'),
    remarks?: string(name='remarks'),
    roomInfoList?: [ 
      {
        cancelDate?: [ string ](name='cancel_date'),
        roomDailyRefundInfos?: [ 
          {
            checkInDate?: string(name='check_in_date', example='2024-02-10'),
            penaltyPrice?: long(name='penalty_price', example='71000'),
            price?: long(name='price', example='71000'),
            refundPrice?: long(name='refund_price', example='71000'),
          }
        ](name='room_daily_refund_infos'),
        roomNo?: int32(name='room_no', example='1'),
      }
    ](name='room_info_list'),
    saleOrderId?: string(name='sale_order_id', example='1402002197440511306'),
    source?: int32(name='source', example='0'),
    status?: int32(name='status', example='1'),
    workOrderId?: string(name='work_order_id', example='2505048378320666'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelOrderChangeDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelOrderChangeDetailResponseBody(name='body'),
}

/**
 * @summary 酒店订单修改详情
 *
 * @param request HotelOrderChangeDetailRequest
 * @param headers HotelOrderChangeDetailHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelOrderChangeDetailResponse
 */
async function hotelOrderChangeDetailWithOptions(request: HotelOrderChangeDetailRequest, headers: HotelOrderChangeDetailHeaders, runtime: Util.RuntimeOptions): HotelOrderChangeDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    body['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.changeOrderId)) {
    body['change_order_id'] = request.changeOrderId;
  }
  if (!Util.isUnset(request.disOrderId)) {
    body['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.saleOrderId)) {
    body['sale_order_id'] = request.saleOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'HotelOrderChangeDetail',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/orders/action/change/detail`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 酒店订单修改详情
 *
 * @param request HotelOrderChangeDetailRequest
 * @return HotelOrderChangeDetailResponse
 */
async function hotelOrderChangeDetail(request: HotelOrderChangeDetailRequest): HotelOrderChangeDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelOrderChangeDetailHeaders{};
  return hotelOrderChangeDetailWithOptions(request, headers, runtime);
}

model HotelOrderCreateHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelOrderCreateRequest {
  btripUserId?: string(name='btrip_user_id', description='This parameter is required.', example='123122'),
  checkIn?: string(name='check_in', description='This parameter is required.', example='2020-10-20'),
  checkOut?: string(name='check_out', description='This parameter is required.', example='2020-10-20'),
  contractEmail?: string(name='contract_email', example='demo'),
  contractName?: string(name='contract_name'),
  contractPhone?: string(name='contract_phone', description='This parameter is required.', example='19281772123'),
  corpPayPrice?: long(name='corp_pay_price', description='This parameter is required.', example='100'),
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='dis123'),
  extra?: string(name='extra'),
  invoiceInfo?: {
    buyerAdd?: string(name='buyer_add', example='demo'),
    buyerBankAcc?: string(name='buyer_bank_acc', example='demo'),
    buyerBankAdd?: string(name='buyer_bank_add', example='demo'),
    buyerPhone?: string(name='buyer_phone', example='0571-82321777'),
    buyerTaxNum?: string(name='buyer_tax_num', example='1'),
    deliveryAddress?: string(name='delivery_address'),
    deliveryArea?: string(name='delivery_area'),
    deliveryCity?: string(name='delivery_city'),
    deliveryProvince?: string(name='delivery_province'),
    deliveryStreet?: string(name='delivery_street'),
    email?: string(name='email', example='demo'),
    invoiceMaterial?: int32(name='invoice_material', example='1'),
    invoiceTitle?: string(name='invoice_title', example='demo'),
    invoiceType?: int32(name='invoice_type', example='1'),
    receiverName?: string(name='receiver_name'),
    receiverPhone?: string(name='receiver_phone', example='0571-82321777'),
    remark?: string(name='remark', example='demo'),
  }(name='invoice_info'),
  itemId?: long(name='item_id', description='This parameter is required.', example='671570615157'),
  itineraryNo?: string(name='itinerary_no', description='This parameter is required.', example='fb5e1abf33924b6c912bd6d80deec0eb-1'),
  occupantInfoList?: [ 
    {
      cardNo?: string(name='card_no', example='124231213'),
      cardType?: int32(name='card_type', example='1'),
      customerType?: int32(name='customer_type', example='1'),
      departmentId?: string(name='department_id', example='123112'),
      departmentName?: string(name='department_name'),
      email?: string(name='email', example='demo'),
      employeeType?: int32(name='employee_type', example='1'),
      firstName?: string(name='first_name', example='san'),
      lastName?: string(name='last_name', example='zhang'),
      name?: string(name='name', description='This parameter is required.'),
      phone?: string(name='phone', description='This parameter is required.', example='18277123451'),
      roomNo?: int32(name='room_no'),
      staffNo?: string(name='staff_no', example='87817182'),
      userType?: int32(name='user_type', example='1'),
    }
  ](name='occupant_info_list', description='This parameter is required.'),
  personPayPrice?: long(name='person_pay_price', description='This parameter is required.', example='1000'),
  promotionInfo?: {
    promotionDetailInfoList?: [ 
      {
        checkStatus?: boolean(name='check_status', example='true'),
        needCheck?: boolean(name='need_check', example='true'),
        promotionCode?: string(name='promotion_code'),
        promotionId?: string(name='promotion_id', example='23778127'),
        promotionName?: string(name='promotion_name'),
        promotionPrice?: long(name='promotion_price', example='100'),
        promotionType?: string(name='promotion_type', example='1'),
      }
    ](name='promotion_detail_info_list'),
    promotionTotalPrice?: long(name='promotion_total_price', example='100'),
  }(name='promotion_info'),
  ratePlanId?: long(name='rate_plan_id', description='This parameter is required.', example='1399417428510'),
  roomId?: long(name='room_id', description='This parameter is required.', example='187211'),
  roomNum?: int32(name='room_num', description='This parameter is required.', example='1'),
  sellerId?: long(name='seller_id', description='This parameter is required.', example='2088441675613762'),
  shid?: long(name='shid', description='This parameter is required.', example='2198781'),
  totalOrderPrice?: long(name='total_order_price', description='This parameter is required.', example='100'),
  validateResKey?: string(name='validate_res_key', description='This parameter is required.', example='nonUltron_1673575241156_d91ea8ad16735752359161037bf6cf_c54d3768312a4b249b719f126377bf82'),
}

model HotelOrderCreateShrinkRequest {
  btripUserId?: string(name='btrip_user_id', description='This parameter is required.', example='123122'),
  checkIn?: string(name='check_in', description='This parameter is required.', example='2020-10-20'),
  checkOut?: string(name='check_out', description='This parameter is required.', example='2020-10-20'),
  contractEmail?: string(name='contract_email', example='demo'),
  contractName?: string(name='contract_name'),
  contractPhone?: string(name='contract_phone', description='This parameter is required.', example='19281772123'),
  corpPayPrice?: long(name='corp_pay_price', description='This parameter is required.', example='100'),
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='dis123'),
  extra?: string(name='extra'),
  invoiceInfoShrink?: string(name='invoice_info'),
  itemId?: long(name='item_id', description='This parameter is required.', example='671570615157'),
  itineraryNo?: string(name='itinerary_no', description='This parameter is required.', example='fb5e1abf33924b6c912bd6d80deec0eb-1'),
  occupantInfoListShrink?: string(name='occupant_info_list', description='This parameter is required.'),
  personPayPrice?: long(name='person_pay_price', description='This parameter is required.', example='1000'),
  promotionInfoShrink?: string(name='promotion_info'),
  ratePlanId?: long(name='rate_plan_id', description='This parameter is required.', example='1399417428510'),
  roomId?: long(name='room_id', description='This parameter is required.', example='187211'),
  roomNum?: int32(name='room_num', description='This parameter is required.', example='1'),
  sellerId?: long(name='seller_id', description='This parameter is required.', example='2088441675613762'),
  shid?: long(name='shid', description='This parameter is required.', example='2198781'),
  totalOrderPrice?: long(name='total_order_price', description='This parameter is required.', example='100'),
  validateResKey?: string(name='validate_res_key', description='This parameter is required.', example='nonUltron_1673575241156_d91ea8ad16735752359161037bf6cf_c54d3768312a4b249b719f126377bf82'),
}

model HotelOrderCreateResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message', example='operation success.'),
  module?: {
    btripOrderId?: long(name='btrip_order_id', example='123'),
    paymentNo?: string(name='payment_no'),
    totalPrice?: long(name='total_price', example='100'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelOrderCreateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelOrderCreateResponseBody(name='body'),
}

/**
 * @summary 酒店订单创建
 *
 * @param tmpReq HotelOrderCreateRequest
 * @param headers HotelOrderCreateHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelOrderCreateResponse
 */
async function hotelOrderCreateWithOptions(tmpReq: HotelOrderCreateRequest, headers: HotelOrderCreateHeaders, runtime: Util.RuntimeOptions): HotelOrderCreateResponse {
  Util.validateModel(tmpReq);
  var request = new HotelOrderCreateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.invoiceInfo)) {
    request.invoiceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.invoiceInfo, 'invoice_info', 'json');
  }
  if (!Util.isUnset(tmpReq.occupantInfoList)) {
    request.occupantInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.occupantInfoList, 'occupant_info_list', 'json');
  }
  if (!Util.isUnset(tmpReq.promotionInfo)) {
    request.promotionInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.promotionInfo, 'promotion_info', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    body['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.checkIn)) {
    body['check_in'] = request.checkIn;
  }
  if (!Util.isUnset(request.checkOut)) {
    body['check_out'] = request.checkOut;
  }
  if (!Util.isUnset(request.contractEmail)) {
    body['contract_email'] = request.contractEmail;
  }
  if (!Util.isUnset(request.contractName)) {
    body['contract_name'] = request.contractName;
  }
  if (!Util.isUnset(request.contractPhone)) {
    body['contract_phone'] = request.contractPhone;
  }
  if (!Util.isUnset(request.corpPayPrice)) {
    body['corp_pay_price'] = request.corpPayPrice;
  }
  if (!Util.isUnset(request.disOrderId)) {
    body['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.extra)) {
    body['extra'] = request.extra;
  }
  if (!Util.isUnset(request.invoiceInfoShrink)) {
    body['invoice_info'] = request.invoiceInfoShrink;
  }
  if (!Util.isUnset(request.itemId)) {
    body['item_id'] = request.itemId;
  }
  if (!Util.isUnset(request.itineraryNo)) {
    body['itinerary_no'] = request.itineraryNo;
  }
  if (!Util.isUnset(request.occupantInfoListShrink)) {
    body['occupant_info_list'] = request.occupantInfoListShrink;
  }
  if (!Util.isUnset(request.personPayPrice)) {
    body['person_pay_price'] = request.personPayPrice;
  }
  if (!Util.isUnset(request.promotionInfoShrink)) {
    body['promotion_info'] = request.promotionInfoShrink;
  }
  if (!Util.isUnset(request.ratePlanId)) {
    body['rate_plan_id'] = request.ratePlanId;
  }
  if (!Util.isUnset(request.roomId)) {
    body['room_id'] = request.roomId;
  }
  if (!Util.isUnset(request.roomNum)) {
    body['room_num'] = request.roomNum;
  }
  if (!Util.isUnset(request.sellerId)) {
    body['seller_id'] = request.sellerId;
  }
  if (!Util.isUnset(request.shid)) {
    body['shid'] = request.shid;
  }
  if (!Util.isUnset(request.totalOrderPrice)) {
    body['total_order_price'] = request.totalOrderPrice;
  }
  if (!Util.isUnset(request.validateResKey)) {
    body['validate_res_key'] = request.validateResKey;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'HotelOrderCreate',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/orders/action/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 酒店订单创建
 *
 * @param request HotelOrderCreateRequest
 * @return HotelOrderCreateResponse
 */
async function hotelOrderCreate(request: HotelOrderCreateRequest): HotelOrderCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelOrderCreateHeaders{};
  return hotelOrderCreateWithOptions(request, headers, runtime);
}

model HotelOrderDetailInfoHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelOrderDetailInfoRequest {
  btripOrderId?: string(name='btrip_order_id'),
  disOrderId?: string(name='dis_order_id', example='dis123'),
}

model HotelOrderDetailInfoResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message', example='succeed in handling request'),
  module?: {
    actualCheckInTime?: string(name='actual_check_in_time', example='2022-01-29'),
    actualCheckOutTime?: string(name='actual_check_out_time', example='2022-01-29'),
    btripHotelCancelPolicyDTO?: {
      btripHotelCancelPolicyInfoDTOList?: [ 
        {
          hour?: long(name='hour', example='1'),
          value?: long(name='value', example='1'),
        }
      ](name='btrip_hotel_cancel_policy_info_d_t_o_list'),
      cancelPolicyType?: int32(name='cancel_policy_type'),
    }(name='btrip_hotel_cancel_policy_d_t_o'),
    btripOrderId?: string(name='btrip_order_id', example='123'),
    cancelFine?: long(name='cancel_fine', example='100'),
    cancelInfo?: {
      cancelEndTime?: string(name='cancel_end_time', example='2022-01-29'),
      cancelStartTime?: string(name='cancel_start_time', example='2022-01-29'),
    }(name='cancel_info'),
    checkIn?: string(name='check_in', example='2022-05-15T22:27Z'),
    checkOut?: string(name='check_out', example='2022-05-15T22:27Z'),
    confirmOrderTime?: string(name='confirm_order_time', example='2000-00-00 00:00:00'),
    contractName?: string(name='contract_name'),
    contractTel?: string(name='contract_tel', example='12316261873'),
    createOrderTime?: string(name='create_order_time', example='2020-01-21'),
    earlyArrivalTime?: string(name='early_arrival_time', example='2000-00-00 00:00:00'),
    earlyDeparture?: boolean(name='early_departure', example='true'),
    guestCount?: int32(name='guest_count', example='2'),
    hotelDetailInfo?: {
      address?: string(name='address'),
      cityName?: string(name='city_name'),
      hotelName?: string(name='hotel_name'),
      hotelTel?: string(name='hotel_tel', example='0571-87217'),
      shid?: long(name='shid', example='2198781'),
    }(name='hotel_detail_info'),
    hotelSaleOrderRoomInfos?: [ 
      {
        checkinDate?: string(name='checkin_date'),
        checkoutDate?: string(name='checkout_date'),
        penalSum?: long(name='penal_sum'),
        realCheckoutDate?: string(name='real_checkout_date'),
        refundStatus?: int32(name='refund_status'),
        roomNo?: int32(name='room_no'),
        roomPrice?: long(name='room_price'),
        roomRefundPrice?: long(name='room_refund_price'),
        travelerId?: string(name='traveler_id'),
        travelerName?: string(name='traveler_name'),
      }
    ](name='hotel_sale_order_room_infos'),
    invoiceInfo?: {
      billingMoney?: long(name='billing_money', example='100'),
      buyerAdd?: string(name='buyer_add', example='demo'),
      buyerBankAcc?: string(name='buyer_bank_acc', example='demo'),
      buyerBankAdd?: string(name='buyer_bank_add', example='demo'),
      buyerPhone?: string(name='buyer_phone', example='0571-82321777'),
      buyerTaxNum?: string(name='buyer_tax_num', example='1'),
      deliveryAddress?: string(name='delivery_address'),
      deliveryArea?: string(name='delivery_area'),
      deliveryCity?: string(name='delivery_city'),
      deliveryProvince?: string(name='delivery_province'),
      deliveryStreet?: string(name='delivery_street'),
      email?: string(name='email', example='demo'),
      invoiceMaterial?: int32(name='invoice_material', example='1'),
      invoiceTitle?: string(name='invoice_title', example='demo'),
      invoiceType?: int32(name='invoice_type', example='1'),
      postage?: long(name='postage', example='100'),
      receiverName?: string(name='receiver_name'),
      receiverPhone?: string(name='receiver_phone', example='0571-82321777'),
      remark?: string(name='remark', example='tmf closeCloneTask'),
    }(name='invoice_info'),
    itemId?: string(name='item_id', example='1289918'),
    lastArrivalTime?: string(name='last_arrival_time', example='2000-00-00 00:00:00'),
    occupantInfoList?: [ 
      {
        cardNo?: string(name='card_no', example='1235615612424222'),
        cardType?: int32(name='card_type', example='1'),
        costCenterInfoList?: [ 
          {
            costCenterId?: string(name='cost_center_id', example='demo'),
            costCenterName?: string(name='cost_center_name', example='demo'),
            costCenterNo?: string(name='cost_center_no', example='demo'),
            costCenterPrices?: long(name='cost_center_prices', example='demo'),
            costCenterRatios?: long(name='cost_center_ratios', example='demo'),
            costCenterSubjectCode?: string(name='cost_center_subject_code', example='demo'),
            costCenterSubjectName?: string(name='cost_center_subject_name', example='demo'),
            settleSubjectId?: string(name='settle_subject_id', example='demo'),
            settleSubjectName?: string(name='settle_subject_name', example='demo'),
            settleSubjectNo?: string(name='settle_subject_no', example='demo'),
          }
        ](name='cost_center_info_list'),
        customerType?: int32(name='customer_type', example='1'),
        departmentId?: string(name='department_id', example='123112'),
        departmentName?: string(name='department_name', example='demo'),
        email?: string(name='email', example='demo'),
        employeeType?: int32(name='employee_type', example='1'),
        firstName?: string(name='first_name', example='zhangsan'),
        isBooker?: boolean(name='is_booker', example='true'),
        lastName?: string(name='last_name', example='zhang'),
        name?: string(name='name'),
        phone?: string(name='phone', example='0571-872237'),
        roomNo?: int32(name='room_no'),
        selected?: boolean(name='selected', example='true'),
        staffNo?: string(name='staff_no', example='12817218'),
        userType?: int32(name='user_type', example='1'),
      }
    ](name='occupant_info_list'),
    orderStatus?: int32(name='order_status', example='1'),
    orderStatusDesc?: string(name='order_status_desc'),
    outConfirmCode?: string(name='out_confirm_code'),
    payTime?: string(name='pay_time', example='2000-00-00 00:00:00'),
    productType?: int32(name='product_type', example='1'),
    purchaseOrderId?: string(name='purchase_order_id', example='100328718728171'),
    refundPrice?: long(name='refund_price', example='100'),
    refundReason?: string(name='refund_reason', example='demo'),
    refundServiceFee?: long(name='refund_service_fee', example='100'),
    roomNightPriceInfoList?: [ 
      {
        board?: string(name='board'),
        boardNum?: int32(name='board_num', example='2'),
        checkIn?: string(name='check_in', example='1677600000000'),
        ratePlanId?: string(name='rate_plan_id', example='1399417428510'),
        ratePlanName?: string(name='rate_plan_name'),
        roomId?: string(name='room_id', example='545993154510'),
        roomName?: string(name='room_name'),
        roomPrice?: long(name='room_price', example='50000'),
      }
    ](name='room_night_price_info_list'),
    roomNumber?: int32(name='room_number', example='1'),
    roomTypeName?: string(name='room_type_name'),
    sellerId?: string(name='seller_id', example='2088441675613762'),
    sellerName?: string(name='seller_name', example='taobao'),
    serviceFee?: long(name='service_fee', example='1.02'),
    settleType?: string(name='settle_type', example='0'),
    supplierOrderId?: string(name='supplier_order_id', example='dis123'),
    totalPrice?: long(name='total_price', example='100'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelOrderDetailInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelOrderDetailInfoResponseBody(name='body'),
}

/**
 * @summary 酒店订单明细信息
 *
 * @param request HotelOrderDetailInfoRequest
 * @param headers HotelOrderDetailInfoHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelOrderDetailInfoResponse
 */
async function hotelOrderDetailInfoWithOptions(request: HotelOrderDetailInfoRequest, headers: HotelOrderDetailInfoHeaders, runtime: Util.RuntimeOptions): HotelOrderDetailInfoResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.btripOrderId)) {
    query['btrip_order_id'] = request.btripOrderId;
  }
  if (!Util.isUnset(request.disOrderId)) {
    query['dis_order_id'] = request.disOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelOrderDetailInfo',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/orders/action/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 酒店订单明细信息
 *
 * @param request HotelOrderDetailInfoRequest
 * @return HotelOrderDetailInfoResponse
 */
async function hotelOrderDetailInfo(request: HotelOrderDetailInfoRequest): HotelOrderDetailInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelOrderDetailInfoHeaders{};
  return hotelOrderDetailInfoWithOptions(request, headers, runtime);
}

model HotelOrderInfoQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelOrderInfoQueryResponseBody = {
  code?: string(name='code', example='success'),
  message?: string(name='message'),
  module?: {
    baseOrderInfo?: {
      bookMode?: string(name='book_mode', example='0'),
      bookerId?: string(name='booker_id', example='1430378'),
      bookerName?: string(name='booker_name'),
      btripCorpId?: string(name='btrip_corp_id', example='btripkvxtn1321g49wtul'),
      category?: int32(name='category', example='2'),
      checkInTime?: long(name='check_in_time', example='1721145600000'),
      checkOutTime?: long(name='check_out_time', example='1721145600000'),
      isAgreementPrice?: boolean(name='is_agreement_price', example='true'),
      nights?: int32(name='nights', example='4'),
      orderCreateTime?: long(name='order_create_time', example='1721145600000'),
      orderId?: long(name='order_id', example='1012053198307958626'),
      orderStatus?: int32(name='order_status', example='2'),
      orderStatusDesc?: string(name='order_status_desc'),
      payStatus?: int32(name='pay_status', example='1'),
      payTime?: long(name='pay_time', example='1721145600000'),
      roomNum?: int32(name='room_num', example='2'),
      settleType?: int32(name='settle_type', example='4'),
      tripMode?: int32(name='trip_mode', example='1'),
    }(name='base_order_info'),
    bookerInfo?: {
      bookerRole?: string(name='booker_role', example='UN_APPLY'),
      contactEmail?: string(name='contact_email', example='13311112222@qq.com'),
      contactPhone?: string(name='contact_phone', example='13311112222'),
      corpId?: string(name='corp_id', example='open12gddn2kn1i47v10wRJNkMFx00'),
      department?: {
        cascadeDeptMask?: string(name='cascade_dept_mask', example='0rCUI20hjOsk0sTwlu'),
        cascadeDeptName?: string(name='cascade_dept_name'),
        departId?: string(name='depart_id', example='35'),
        departName?: string(name='depart_name'),
        outDepartId?: string(name='out_depart_id', example='330000001815'),
      }(name='department'),
      enName?: string(name='en_name', example='Tom'),
      jobNo?: string(name='job_no', example='1001'),
      needApply?: boolean(name='need_apply', example='true'),
      realName?: string(name='real_name'),
      userId?: string(name='user_id', example='1430378'),
    }(name='booker_info'),
    hotelInfo?: {
      cityCode?: string(name='city_code', example='330100'),
      cityName?: string(name='city_name'),
      countryCode?: string(name='country_code', example='1'),
      countryName?: string(name='country_name'),
      districtCode?: string(name='district_code', example='330183'),
      districtName?: string(name='district_name'),
      hotelAddress?: string(name='hotel_address'),
      hotelBrandCode?: string(name='hotel_brand_code', example='3'),
      hotelBrandName?: string(name='hotel_brand_name'),
      hotelGroup?: string(name='hotel_group', example='huazhu'),
      hotelId?: string(name='hotel_id', example='55335212'),
      hotelName?: string(name='hotel_name'),
      hotelNameEn?: string(name='hotel_name_en', example='Test Hotel Name'),
      star?: string(name='star', example='5'),
    }(name='hotel_info'),
    hotelOrderFeeInfo?: {
      orderAmount?: long(name='order_amount', example='35000'),
      otherFee?: long(name='other_fee', example='0'),
      payAmount?: long(name='pay_amount', example='35000'),
      promotionAmount?: long(name='promotion_amount', example='5000'),
      totalRoomAmount?: long(name='total_room_amount', example='35000'),
    }(name='hotel_order_fee_info'),
    hotelOrderRefundInfo?: [ 
      {
        cancelFine?: long(name='cancel_fine', example='1000'),
        refundApplyId?: long(name='refund_apply_id', example='1000000002578096'),
        refundEndTime?: long(name='refund_end_time', example='1721702353700'),
        refundPrice?: long(name='refund_price', example='34000'),
        refundReason?: string(name='refund_reason'),
        refundStartTime?: long(name='refund_start_time', example='1721702353700'),
        refundType?: int32(name='refund_type', example='5'),
      }
    ](name='hotel_order_refund_info'),
    roomTraverInfo?: [ 
      {
        liveRoomNo?: string(name='live_room_no', example='1'),
        roomTypeName?: string(name='room_type_name'),
        traverInfos?: [ 
          {
            applyInfo?: {
              applyBusinessId?: string(name='apply_business_id', example='1001'),
              applyBusinessName?: string(name='apply_business_name'),
              applyId?: string(name='apply_id', example='1424031910085891196'),
              exceedApply?: [ 
                {
                  exceedReason?: string(name='exceed_reason'),
                  exceedType?: int32(name='exceed_type', example='16'),
                  flowNo?: long(name='flow_no', example='3321'),
                  id?: long(name='id', example='60853'),
                }
              ](name='exceed_apply'),
              itineraryNo?: string(name='itinerary_no', example='ef5e74dc1f1640b08858fb043f64e477-8'),
            }(name='apply_info'),
            certNo?: string(name='cert_no', example='342229200801010023'),
            certType?: int32(name='cert_type', example='0'),
            department?: {
              cascadeDeptMask?: string(name='cascade_dept_mask', example='0rCUI20hjOsk0sTwlu'),
              cascadeDeptName?: string(name='cascade_dept_name'),
              departId?: string(name='depart_id', example='35'),
              departName?: string(name='depart_name'),
              outDepartId?: string(name='out_depart_id', example='330000001815'),
            }(name='department'),
            jobNo?: string(name='job_no', example='1001'),
            telephone?: string(name='telephone', example='13311112222'),
            travelerId?: string(name='traveler_id', example='1430378'),
            travelerName?: string(name='traveler_name'),
            travelerType?: int32(name='traveler_type', example='1'),
            tripCostCenter?: {
              costCenterCode?: string(name='cost_center_code', example='323431'),
              costCenterId?: string(name='cost_center_id', example='2312'),
              costCenterName?: string(name='cost_center_name'),
              externalExtField?: string(name='external_ext_field', example='{"extraKey":"extraVal"}'),
              feeType?: int32(name='fee_type', example='1'),
              invoiceId?: long(name='invoice_id', example='123332'),
              invoiceTitle?: string(name='invoice_title'),
              projectCode?: string(name='project_code', example='1002'),
              projectTitle?: string(name='project_title'),
            }(name='trip_cost_center'),
            userType?: int32(name='user_type', example='0'),
          }
        ](name='traver_infos'),
      }
    ](name='room_traver_info'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210f079e16603757182131635d866a'),
}

model HotelOrderInfoQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelOrderInfoQueryResponseBody(name='body'),
}

/**
 * @summary 自营酒店订单查询
 *
 * @param headers HotelOrderInfoQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelOrderInfoQueryResponse
 */
async function hotelOrderInfoQueryWithOptions(orderId: string, headers: HotelOrderInfoQueryHeaders, runtime: Util.RuntimeOptions): HotelOrderInfoQueryResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'HotelOrderInfoQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/order/v1/hotelOrders/${OpenApiUtil.getEncodeParam(orderId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 自营酒店订单查询
 *
 * @return HotelOrderInfoQueryResponse
 */
async function hotelOrderInfoQuery(orderId: string): HotelOrderInfoQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelOrderInfoQueryHeaders{};
  return hotelOrderInfoQueryWithOptions(orderId, headers, runtime);
}

model HotelOrderListQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model HotelOrderListQueryRequest {
  allApply?: boolean(name='all_apply', example='false'),
  applyId?: long(name='apply_id', example='165782'),
  category?: int32(name='category'),
  departId?: string(name='depart_id'),
  endTime?: string(name='end_time', example='2022-07-01 00:00:00'),
  page?: int32(name='page', example='1'),
  pageSize?: int32(name='page_size', example='50'),
  startTime?: string(name='start_time', example='2022-07-01 00:00:00'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', example='CS154JKOI'),
  updateEndTime?: string(name='update_end_time', example='2022-07-01 00:00:00'),
  updateStartTime?: string(name='update_start_time', example='2022-07-01 00:00:00'),
  userId?: string(name='user_id'),
}

model HotelOrderListQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: [ 
    {
      applyId?: long(name='apply_id', example='22678'),
      btripTitle?: string(name='btrip_title'),
      category?: int32(name='category'),
      checkIn?: string(name='check_in', example='2022-05-15T22:27Z'),
      checkOut?: string(name='check_out', example='2022-05-15T22:27Z'),
      city?: string(name='city'),
      cityAdCode?: string(name='city_ad_code'),
      contactName?: string(name='contact_name'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      costCenter?: {
        corpId?: string(name='corp_id'),
        id?: long(name='id', example='14668'),
        name?: string(name='name'),
        number?: string(name='number', example='CS-PNUY'),
      }(name='cost_center'),
      countryCode?: string(name='country_code'),
      countryName?: string(name='country_name'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      extendField?: string(name='extend_field'),
      gmtCreate?: string(name='gmt_create', example='2022-05-15T22:27Z'),
      gmtModified?: string(name='gmt_modified', example='2022-05-15T22:27Z'),
      guest?: string(name='guest'),
      hotelName?: string(name='hotel_name'),
      hotelSupportVatInvoiceType?: int32(name='hotel_support_vat_invoice_type', example='11'),
      id?: long(name='id', example='13764'),
      invoice?: {
        id?: long(name='id', example='133568'),
        invoiceType?: int32(name='invoice_type', example='1'),
        title?: string(name='title'),
      }(name='invoice'),
      night?: int32(name='night', example='4'),
      orderStatus?: int32(name='order_status', example='1'),
      orderStatusDesc?: string(name='order_status_desc'),
      orderType?: int32(name='order_type', example='1'),
      orderTypeDesc?: string(name='order_type_desc'),
      priceInfoList?: [ 
        {
          category?: string(name='category'),
          categoryCode?: int32(name='category_code', example='1'),
          categoryType?: int32(name='category_type', example='1'),
          gmtCreate?: string(name='gmt_create', example='2022-05-15T22:27Z'),
          passengerName?: string(name='passenger_name'),
          payType?: int32(name='pay_type', example='1'),
          price?: double(name='price', example='100'),
          tradeId?: string(name='trade_id', example='cs1546728'),
          type?: int32(name='type', example='1'),
        }
      ](name='price_info_list'),
      projectCode?: string(name='project_code', example='CS-PROJECTCODE'),
      projectId?: long(name='project_id', example='13631'),
      projectTitle?: string(name='project_title'),
      roomNum?: int32(name='room_num', example='4'),
      roomType?: string(name='room_type'),
      supplier?: string(name='supplier'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', example='CS-THIRDAPPLY'),
      thirdpartBusinessId?: string(name='thirdpart_business_id'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', example='CS-ITINEARY'),
      thirdpartProjectId?: string(name='thirdpart_project_id', example='CS-THIRDPROJECT'),
      userAffiliateList?: [ 
        {
          userId?: string(name='user_id'),
          userName?: string(name='user_name'),
        }
      ](name='user_affiliate_list'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='module'),
  pageInfo?: {
    page?: int32(name='page', example='1'),
    pageSize?: int32(name='page_size', example='20'),
    totalNumber?: int32(name='total_number', example='50'),
  }(name='page_info'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelOrderListQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelOrderListQueryResponseBody(name='body'),
}

/**
 * @summary 查询酒店订单列表
 *
 * @param request HotelOrderListQueryRequest
 * @param headers HotelOrderListQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelOrderListQueryResponse
 */
async function hotelOrderListQueryWithOptions(request: HotelOrderListQueryRequest, headers: HotelOrderListQueryHeaders, runtime: Util.RuntimeOptions): HotelOrderListQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.allApply)) {
    query['all_apply'] = request.allApply;
  }
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.category)) {
    query['category'] = request.category;
  }
  if (!Util.isUnset(request.departId)) {
    query['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['end_time'] = request.endTime;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['start_time'] = request.startTime;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    query['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.updateEndTime)) {
    query['update_end_time'] = request.updateEndTime;
  }
  if (!Util.isUnset(request.updateStartTime)) {
    query['update_start_time'] = request.updateStartTime;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelOrderListQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/hotel/v1/order-list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询酒店订单列表
 *
 * @param request HotelOrderListQueryRequest
 * @return HotelOrderListQueryResponse
 */
async function hotelOrderListQuery(request: HotelOrderListQueryRequest): HotelOrderListQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelOrderListQueryHeaders{};
  return hotelOrderListQueryWithOptions(request, headers, runtime);
}

model HotelOrderPayHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelOrderPayRequest {
  btripOrderId?: long(name='btrip_order_id', description='供应商订单号（取自创单返回的订单号）

This parameter is required.', example='1002202194207077022'),
  btripUserId?: string(name='btrip_user_id', description='This parameter is required.', example='23918781'),
  companyPayFee?: long(name='company_pay_fee', description='This parameter is required.', example='100'),
  personPayFee?: long(name='person_pay_fee', description='This parameter is required.', example='100'),
  thirdPayAccount?: string(name='third_pay_account', example='demo'),
  thirdTradeNo?: string(name='third_trade_no', example='demo'),
  totalPrice?: long(name='total_price', description='This parameter is required.', example='100'),
}

model HotelOrderPayResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message', example='successful'),
  module?: boolean(name='module', example='true'),
  requestId?: string(name='requestId', description='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210e842b16611337974412836dae27'),
}

model HotelOrderPayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelOrderPayResponseBody(name='body'),
}

/**
 * @summary 酒店订单支付
 *
 * @param request HotelOrderPayRequest
 * @param headers HotelOrderPayHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelOrderPayResponse
 */
async function hotelOrderPayWithOptions(request: HotelOrderPayRequest, headers: HotelOrderPayHeaders, runtime: Util.RuntimeOptions): HotelOrderPayResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.btripOrderId)) {
    body['btrip_order_id'] = request.btripOrderId;
  }
  if (!Util.isUnset(request.btripUserId)) {
    body['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.companyPayFee)) {
    body['company_pay_fee'] = request.companyPayFee;
  }
  if (!Util.isUnset(request.personPayFee)) {
    body['person_pay_fee'] = request.personPayFee;
  }
  if (!Util.isUnset(request.thirdPayAccount)) {
    body['third_pay_account'] = request.thirdPayAccount;
  }
  if (!Util.isUnset(request.thirdTradeNo)) {
    body['third_trade_no'] = request.thirdTradeNo;
  }
  if (!Util.isUnset(request.totalPrice)) {
    body['total_price'] = request.totalPrice;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'HotelOrderPay',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/orders/action/pay`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 酒店订单支付
 *
 * @param request HotelOrderPayRequest
 * @return HotelOrderPayResponse
 */
async function hotelOrderPay(request: HotelOrderPayRequest): HotelOrderPayResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelOrderPayHeaders{};
  return hotelOrderPayWithOptions(request, headers, runtime);
}

model HotelOrderPreValidateHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelOrderPreValidateRequest {
  btripUserId?: string(name='btrip_user_id', description='This parameter is required.', example='23141'),
  checkIn?: string(name='check_in', description='This parameter is required.', example='2022-05-15'),
  checkOut?: string(name='check_out', description='This parameter is required.', example='2022-05-15'),
  dailyList?: [ 
    {
      board?: string(name='board', example='1'),
      price?: long(name='price', example='100'),
      rateStartTime?: string(name='rate_start_time', example='2022-05-15'),
      roomCount?: int32(name='room_count', example='10'),
    }
  ](name='daily_list', description='This parameter is required.'),
  itemId?: long(name='item_id', description='This parameter is required.', example='612673015638'),
  numberOfAdultsPerRoom?: int32(name='number_of_adults_per_room', example='1'),
  occupantInfoList?: [ 
    {
      cardNo?: string(name='card_no', example='232871871822'),
      cardType?: int32(name='card_type', example='1'),
      name?: string(name='name'),
      phone?: string(name='phone', example='12392827121'),
      staffNo?: string(name='staff_no', example='128918'),
      userType?: int32(name='user_type', example='1'),
    }
  ](name='occupant_info_list'),
  ratePlanId?: long(name='rate_plan_id', description='This parameter is required.', example='239872781'),
  roomId?: long(name='room_id', description='This parameter is required.', example='71652158'),
  roomNum?: int32(name='room_num', description='This parameter is required.', example='1'),
  searchRoomPrice?: long(name='search_room_price', description='This parameter is required.', example='1000'),
  sellerId?: long(name='seller_id', description='This parameter is required.', example='2088441675613762'),
  shid?: long(name='shid', description='This parameter is required.', example='52302073'),
}

model HotelOrderPreValidateShrinkRequest {
  btripUserId?: string(name='btrip_user_id', description='This parameter is required.', example='23141'),
  checkIn?: string(name='check_in', description='This parameter is required.', example='2022-05-15'),
  checkOut?: string(name='check_out', description='This parameter is required.', example='2022-05-15'),
  dailyListShrink?: string(name='daily_list', description='This parameter is required.'),
  itemId?: long(name='item_id', description='This parameter is required.', example='612673015638'),
  numberOfAdultsPerRoom?: int32(name='number_of_adults_per_room', example='1'),
  occupantInfoListShrink?: string(name='occupant_info_list'),
  ratePlanId?: long(name='rate_plan_id', description='This parameter is required.', example='239872781'),
  roomId?: long(name='room_id', description='This parameter is required.', example='71652158'),
  roomNum?: int32(name='room_num', description='This parameter is required.', example='1'),
  searchRoomPrice?: long(name='search_room_price', description='This parameter is required.', example='1000'),
  sellerId?: long(name='seller_id', description='This parameter is required.', example='2088441675613762'),
  shid?: long(name='shid', description='This parameter is required.', example='52302073'),
}

model HotelOrderPreValidateResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    extendInfo?: string(name='extend_info', example='demo'),
    itemInvoice?: {
      supportSpecial?: boolean(name='support_special'),
    }(name='item_invoice'),
    itineraryNo?: string(name='itinerary_no', example='fb5e1abf33924b6c912bd6d80deec0eb-4'),
    promotionInfo?: {
      extAttrMap?: map[string]string(name='ext_attr_map'),
      promotionDetailInfoList?: [ 
        {
          checkStatus?: boolean(name='check_status', example='true'),
          needCheck?: boolean(name='need_check', example='true'),
          promotionCode?: string(name='promotion_code'),
          promotionId?: string(name='promotion_id', example='12893'),
          promotionName?: string(name='promotion_name', example='demo'),
          promotionPrice?: long(name='promotion_price', example='100'),
          promotionType?: string(name='promotion_type', example='1'),
        }
      ](name='promotion_detail_info_list'),
      promotionTotalPrice?: long(name='promotion_total_price', example='100'),
    }(name='promotion_info'),
    ratePlanDaily?: [ 
      {
        board?: string(name='board'),
        discountPrice?: string(name='discount_price'),
        maxBookingNum?: int32(name='max_booking_num'),
        price?: long(name='price', example='100'),
        rateStartTime?: string(name='rate_start_time', example='2023-01-19'),
        roomCount?: int32(name='room_count', example='1'),
        roundingDiscountPrice?: string(name='rounding_discount_price'),
        roundingPrice?: string(name='rounding_price'),
        serviceFee?: long(name='service_fee', example='100'),
      }
    ](name='rate_plan_daily'),
    ratePlanId?: long(name='rate_plan_id', example='5314280514218'),
    ratePlanInfo?: {
      bedDesc?: string(name='bed_desc'),
      btripHotelCancelPolicyDTO?: {
        btripHotelCancelPolicyInfoDTOList?: [ 
          {
            hour?: long(name='hour', example='1'),
            value?: long(name='value', example='1'),
          }
        ](name='btrip_hotel_cancel_policy_info_d_t_o_list'),
        cancelPolicyType?: int32(name='cancel_policy_type'),
        content?: string(name='content'),
        shortDesc?: string(name='short_desc'),
      }(name='btrip_hotel_cancel_policy_d_t_o'),
      earliestCheckInTime?: string(name='earliest_check_in_time', example='12:00'),
      latestCheckOutTime?: string(name='latest_check_out_time', example='17:00'),
      maxBookingNum?: int32(name='max_booking_num'),
      maxOccupancyNum?: int32(name='max_occupancy_num', example='1'),
      needCertificate?: boolean(name='need_certificate', example='false'),
      needEmail?: boolean(name='need_email', example='false'),
      needEnglishName?: boolean(name='need_english_name', example='false'),
      totalOrderPrice?: long(name='total_order_price', example='100'),
      totalRoomPrice?: long(name='total_room_price', example='100'),
    }(name='rate_plan_info'),
    validateResKey?: string(name='validate_res_key', example='nonUltron_1673575241156_d91ea8ad16735752359161037bf6cf_c54d3768312a4b249b719f126377bf82'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelOrderPreValidateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelOrderPreValidateResponseBody(name='body'),
}

/**
 * @summary 酒店下单前校验
 *
 * @param tmpReq HotelOrderPreValidateRequest
 * @param headers HotelOrderPreValidateHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelOrderPreValidateResponse
 */
async function hotelOrderPreValidateWithOptions(tmpReq: HotelOrderPreValidateRequest, headers: HotelOrderPreValidateHeaders, runtime: Util.RuntimeOptions): HotelOrderPreValidateResponse {
  Util.validateModel(tmpReq);
  var request = new HotelOrderPreValidateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dailyList)) {
    request.dailyListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dailyList, 'daily_list', 'json');
  }
  if (!Util.isUnset(tmpReq.occupantInfoList)) {
    request.occupantInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.occupantInfoList, 'occupant_info_list', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    query['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.checkIn)) {
    query['check_in'] = request.checkIn;
  }
  if (!Util.isUnset(request.checkOut)) {
    query['check_out'] = request.checkOut;
  }
  if (!Util.isUnset(request.dailyListShrink)) {
    query['daily_list'] = request.dailyListShrink;
  }
  if (!Util.isUnset(request.itemId)) {
    query['item_id'] = request.itemId;
  }
  if (!Util.isUnset(request.numberOfAdultsPerRoom)) {
    query['number_of_adults_per_room'] = request.numberOfAdultsPerRoom;
  }
  if (!Util.isUnset(request.occupantInfoListShrink)) {
    query['occupant_info_list'] = request.occupantInfoListShrink;
  }
  if (!Util.isUnset(request.ratePlanId)) {
    query['rate_plan_id'] = request.ratePlanId;
  }
  if (!Util.isUnset(request.roomId)) {
    query['room_id'] = request.roomId;
  }
  if (!Util.isUnset(request.roomNum)) {
    query['room_num'] = request.roomNum;
  }
  if (!Util.isUnset(request.searchRoomPrice)) {
    query['search_room_price'] = request.searchRoomPrice;
  }
  if (!Util.isUnset(request.sellerId)) {
    query['seller_id'] = request.sellerId;
  }
  if (!Util.isUnset(request.shid)) {
    query['shid'] = request.shid;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelOrderPreValidate',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/orders/action/pre-validate`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 酒店下单前校验
 *
 * @param request HotelOrderPreValidateRequest
 * @return HotelOrderPreValidateResponse
 */
async function hotelOrderPreValidate(request: HotelOrderPreValidateRequest): HotelOrderPreValidateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelOrderPreValidateHeaders{};
  return hotelOrderPreValidateWithOptions(request, headers, runtime);
}

model HotelOrderQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model HotelOrderQueryRequest {
  orderId?: long(name='order_id', description='This parameter is required.', example='1002145190081005400'),
}

model HotelOrderQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    hotelInfo?: {
      brandCode?: string(name='brand_code'),
      brandGroup?: string(name='brand_group'),
      brandName?: string(name='brand_name'),
      checkIn?: long(name='check_in', example='1669344020'),
      checkOut?: long(name='check_out', example='1669344020'),
      city?: string(name='city'),
      cityAdCode?: string(name='city_ad_code'),
      countryCode?: string(name='country_code'),
      countryName?: string(name='country_name'),
      hotelAddress?: string(name='hotel_address'),
      hotelName?: string(name='hotel_name'),
      hotelPhone?: string(name='hotel_phone'),
      hotelSupportVatInvoiceType?: int32(name='hotel_support_vat_invoice_type', example='11'),
      night?: int32(name='night', example='1'),
      roomNum?: int32(name='room_num', example='1'),
      roomType?: string(name='room_type'),
    }(name='hotel_info'),
    invoiceInfo?: {
      id?: long(name='id', example='12345678'),
      title?: string(name='title'),
    }(name='invoice_info'),
    orderBaseInfo?: {
      applyId?: string(name='apply_id', example='12345678'),
      btripTitle?: string(name='btrip_title'),
      category?: int32(name='category'),
      corpId?: string(name='corp_id', example='iscorpId'),
      corpName?: string(name='corp_name'),
      departId?: string(name='depart_id', example='12345678'),
      departName?: string(name='depart_name'),
      exceedApplyNos?: [ string ](name='exceed_apply_nos'),
      extendField?: string(name='extend_field'),
      gmtCreate?: long(name='gmt_create', example='1669344020'),
      gmtModified?: long(name='gmt_modified', example='1669344020'),
      id?: long(name='id', example='1002145190081005400'),
      itineraryId?: string(name='itinerary_id', example='12345678'),
      orderStatus?: int32(name='order_status', example='1'),
      orderType?: int32(name='order_type', example='1'),
      supplier?: string(name='supplier'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', example='12345678'),
      thirdpartBusinessId?: string(name='thirdpart_business_id'),
      thirdpartDepartId?: string(name='thirdpart_depart_id', example='12345678'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', example='12345678'),
      userId?: string(name='user_id', example='12345678'),
      userName?: string(name='user_name'),
    }(name='order_base_info'),
    passengerList?: [ 
      {
        applyId?: string(name='apply_id'),
        costCenterId?: long(name='cost_center_id', example='12345678'),
        costCenterName?: string(name='cost_center_name'),
        costCenterNumber?: string(name='cost_center_number', example='12345678'),
        itineraryId?: string(name='itinerary_id'),
        occupantType?: int32(name='occupant_type'),
        projectCode?: string(name='project_code'),
        projectId?: long(name='project_id', example='12345678'),
        projectTitle?: string(name='project_title'),
        thirdpartApplyId?: string(name='thirdpart_apply_id'),
        thirdpartCostCenterId?: string(name='thirdpart_cost_center_id', example='12345678'),
        thirdpartProjectId?: string(name='thirdpart_project_id', example='12345678'),
        userId?: string(name='user_id', example='12345678'),
        userName?: string(name='user_name'),
        userType?: int32(name='user_type', example='0'),
      }
    ](name='passenger_list'),
    priceInfoList?: [ 
      {
        categoryCode?: int32(name='category_code', example='1'),
        gmtCreate?: long(name='gmt_create', example='1669344020'),
        payType?: int32(name='pay_type', example='1'),
        price?: double(name='price', example='200'),
        tradeId?: string(name='trade_id', example='12345678910987654321'),
        type?: int32(name='type', example='1'),
      }
    ](name='price_info_list'),
  }(name='module', description='module。'),
  requestId?: string(name='requestId', description='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelOrderQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelOrderQueryResponseBody(name='body'),
}

/**
 * @summary 酒店订单查询
 *
 * @param request HotelOrderQueryRequest
 * @param headers HotelOrderQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelOrderQueryResponse
 */
async function hotelOrderQueryWithOptions(request: HotelOrderQueryRequest, headers: HotelOrderQueryHeaders, runtime: Util.RuntimeOptions): HotelOrderQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelOrderQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/hotel/v1/order`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 酒店订单查询
 *
 * @param request HotelOrderQueryRequest
 * @return HotelOrderQueryResponse
 */
async function hotelOrderQuery(request: HotelOrderQueryRequest): HotelOrderQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelOrderQueryHeaders{};
  return hotelOrderQueryWithOptions(request, headers, runtime);
}

model HotelPricePullHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelPricePullRequest {
  btripUserId?: string(name='btrip_user_id', example='1000'),
  checkIn?: string(name='check_in', example='2022-05-15'),
  checkOut?: string(name='check_out', example='2022-05-15'),
  cityCode?: int32(name='city_code', example='330100'),
  hotelIds?: [ string ](name='hotel_ids'),
  paymentType?: int32(name='payment_type', example='0'),
}

model HotelPricePullShrinkRequest {
  btripUserId?: string(name='btrip_user_id', example='1000'),
  checkIn?: string(name='check_in', example='2022-05-15'),
  checkOut?: string(name='check_out', example='2022-05-15'),
  cityCode?: int32(name='city_code', example='330100'),
  hotelIdsShrink?: string(name='hotel_ids'),
  paymentType?: int32(name='payment_type', example='0'),
}

model HotelPricePullResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message', example='None'),
  module?: {
    hotelPriceInfos?: [ 
      {
        address?: string(name='address'),
        hotelId?: string(name='hotel_id', example='64389015'),
        hotelName?: string(name='hotel_name'),
        rooms?: [ 
          {
            area?: string(name='area', example='32'),
            bed?: string(name='bed'),
            bedTypeString?: string(name='bed_type_string'),
            facility?: string(name='facility', example='{\\\\"bathtub\\\\":true}'),
            floor?: string(name='floor', example='1,2,3,4,5,6'),
            maxOccupancy?: int32(name='max_occupancy', example='2'),
            networkService?: string(name='network_service', example='0'),
            pics?: [ string ](name='pics'),
            rates?: [ 
              {
                breakfast?: string(name='breakfast', example='demo'),
                breakfastCount?: int32(name='breakfast_count', example='1'),
                btripHotelCancelPolicy?: {
                  btripHotelCancelPolicyInfoDTOList?: [ 
                    {
                      hour?: long(name='hour', example='1'),
                      value?: long(name='value', example='20'),
                    }
                  ](name='btrip_hotel_cancel_policy_info_d_t_o_list'),
                  cancelPolicyType?: int32(name='cancel_policy_type', example='1'),
                }(name='btrip_hotel_cancel_policy'),
                cancelPolicyDesc?: string(name='cancel_policy_desc'),
                companyAassist?: string(name='company_aassist', example='1'),
                currencyCode?: string(name='currency_code', example='CNY'),
                instantConfirm?: boolean(name='instant_confirm', example='true'),
                itemId?: string(name='item_id', example='721700504622'),
                maxAdvHours?: int32(name='max_adv_hours', example='4'),
                maxDays?: int32(name='max_days', example='4344'),
                minAdvHours?: int32(name='min_adv_hours', example='0'),
                minDays?: int32(name='min_days', example='0'),
                nod?: int32(name='nod', example='0'),
                nop?: int32(name='nop', example='1'),
                paymentType?: int32(name='payment_type', example='1'),
                price?: long(name='price', example='30000'),
                promotionInfo?: string(name='promotion_info', example='demo'),
                quota?: int32(name='quota', example='4'),
                rateDailys?: [ 
                  {
                    discountPrice?: long(name='discount_price', example='30000'),
                    lastDiscountsPrice?: long(name='last_discounts_price', example='62800'),
                    price?: long(name='price', example='62800'),
                    startDate?: string(name='start_date', example='2023-10-17'),
                  }
                ](name='rate_dailys'),
                rateId?: string(name='rate_id', example='4509447432148'),
                ratePlanName?: string(name='rate_plan_name'),
                rpId?: string(name='rp_id', example='4509447432148'),
                sellerId?: string(name='seller_id', example='2829486701'),
                supportSpecialInvoice?: boolean(name='support_special_invoice', example='true'),
              }
            ](name='rates'),
            roomId?: string(name='room_id', example='64681618'),
            roomName?: string(name='room_name'),
            status?: int32(name='status', example='0'),
            windowType?: string(name='window_type', example='1'),
          }
        ](name='rooms'),
        searchId?: string(name='search_id', example='9BCDD5DE-E6CB-5C25-93B9-9BE178A0AA56'),
      }
    ](name='hotel_price_infos'),
  }(name='module'),
  requestId?: string(name='request_id', example='9BCDD5DE-E6CB-5C25-93B9-9BE178A0AA56'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210f079e16603757182131635d866a'),
}

model HotelPricePullResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelPricePullResponseBody(name='body'),
}

/**
 * @summary 酒店拉动态拉取价格接口(落地)
 *
 * @param tmpReq HotelPricePullRequest
 * @param headers HotelPricePullHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelPricePullResponse
 */
async function hotelPricePullWithOptions(tmpReq: HotelPricePullRequest, headers: HotelPricePullHeaders, runtime: Util.RuntimeOptions): HotelPricePullResponse {
  Util.validateModel(tmpReq);
  var request = new HotelPricePullShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.hotelIds)) {
    request.hotelIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hotelIds, 'hotel_ids', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    query['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.checkIn)) {
    query['check_in'] = request.checkIn;
  }
  if (!Util.isUnset(request.checkOut)) {
    query['check_out'] = request.checkOut;
  }
  if (!Util.isUnset(request.cityCode)) {
    query['city_code'] = request.cityCode;
  }
  if (!Util.isUnset(request.hotelIdsShrink)) {
    query['hotel_ids'] = request.hotelIdsShrink;
  }
  if (!Util.isUnset(request.paymentType)) {
    query['payment_type'] = request.paymentType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelPricePull',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/prices/action/pull`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 酒店拉动态拉取价格接口(落地)
 *
 * @param request HotelPricePullRequest
 * @return HotelPricePullResponse
 */
async function hotelPricePull(request: HotelPricePullRequest): HotelPricePullResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelPricePullHeaders{};
  return hotelPricePullWithOptions(request, headers, runtime);
}

model HotelRoomInfoHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelRoomInfoRequest {
  roomIds?: [ long ](name='room_ids', description='This parameter is required.'),
}

model HotelRoomInfoShrinkRequest {
  roomIdsShrink?: string(name='room_ids', description='This parameter is required.'),
}

model HotelRoomInfoResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message', example='operation success.'),
  module?: [ 
    {
      bedInfoGroupList?: [ 
        {
          bedInfos?: [ 
            {
              bedDesc?: string(name='bed_desc'),
              bedNum?: int32(name='bed_num'),
              bedSize?: string(name='bed_size'),
              bedType?: string(name='bed_type'),
              length?: string(name='length'),
              width?: string(name='width'),
            }
          ](name='bed_infos'),
        }
      ](name='bed_info_group_list'),
      bedInfos?: [ 
        {
          bedDesc?: string(name='bed_desc'),
          bedNum?: int32(name='bed_num', example='2'),
          bedSize?: string(name='bed_size', example='1.8*2.0m'),
          bedType?: string(name='bed_type', example='1'),
          length?: string(name='length'),
          width?: string(name='width'),
        }
      ](name='bed_infos'),
      extraBed?: int32(name='extra_bed', example='1'),
      extraBedDesc?: string(name='extra_bed_desc', example='demo'),
      floor?: string(name='floor', example='2'),
      internetWay?: string(name='internet_way', example='0'),
      maxOccupancy?: int32(name='max_occupancy', example='3'),
      roomDesc?: string(name='room_desc'),
      roomFacilities?: string(name='room_facilities'),
      roomFacilityList?: [ string ](name='room_facility_list'),
      roomId?: string(name='room_id', example='84536009'),
      roomImage?: string(name='room_image', example='//img.alicdn.com/imgextra/i2/6000000007493/O1CN010Vmxaz25DqUblX82A_!!6000000007493-2-hotel.png'),
      roomImages?: [ 
        {
          bedInfos2?: string(name='bed_infos2'),
          tag?: int32(name='tag'),
          url?: string(name='url', example='https://img.alicdn.com/imgextra/i3/6000000000003/O1CN01xkZQR41BtPxK1PQCb_!!6000000000003-0-hotel.jpg'),
        }
      ](name='room_images'),
      roomName?: string(name='room_name'),
      roomType?: int32(name='room_type'),
      roomarea?: string(name='roomarea'),
      rooms?: int32(name='rooms', example='3'),
      smoke?: string(name='smoke'),
      window?: string(name='window', example='2'),
      windowBad?: string(name='window_bad', example='0'),
      windowView?: string(name='window_view', example='demo'),
    }
  ](name='module'),
  requestId?: string(name='requestId', description='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelRoomInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelRoomInfoResponseBody(name='body'),
}

/**
 * @summary 获取酒店静态房型详情
 *
 * @param tmpReq HotelRoomInfoRequest
 * @param headers HotelRoomInfoHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelRoomInfoResponse
 */
async function hotelRoomInfoWithOptions(tmpReq: HotelRoomInfoRequest, headers: HotelRoomInfoHeaders, runtime: Util.RuntimeOptions): HotelRoomInfoResponse {
  Util.validateModel(tmpReq);
  var request = new HotelRoomInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.roomIds)) {
    request.roomIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roomIds, 'room_ids', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.roomIdsShrink)) {
    query['room_ids'] = request.roomIdsShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelRoomInfo',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/room-infos`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取酒店静态房型详情
 *
 * @param request HotelRoomInfoRequest
 * @return HotelRoomInfoResponse
 */
async function hotelRoomInfo(request: HotelRoomInfoRequest): HotelRoomInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelRoomInfoHeaders{};
  return hotelRoomInfoWithOptions(request, headers, runtime);
}

model HotelSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelSearchRequest {
  adultNum?: string(name='adult_num', example='1'),
  brandCode?: [ string ](name='brand_code'),
  btripUserId?: string(name='btrip_user_id', example='1000'),
  checkInDate?: string(name='check_in_date', description='This parameter is required.', example='2023-02-22'),
  checkOutDate?: string(name='check_out_date', description='This parameter is required.', example='2023-02-22'),
  cityCode?: string(name='city_code', example='330100'),
  dir?: int32(name='dir', example='1'),
  distance?: int32(name='distance', example='100'),
  districtCode?: string(name='district_code', example='330000'),
  hotelStar?: string(name='hotel_star', example='0'),
  isProtocol?: boolean(name='is_protocol', example='true'),
  keyWords?: string(name='key_words'),
  location?: string(name='location', example='120.010059, 30.284666'),
  maxPrice?: double(name='max_price', example='1000'),
  minPrice?: double(name='min_price', example='100'),
  pageNo?: int32(name='page_no', description='This parameter is required.', example='1'),
  pageSize?: int32(name='page_size', description='This parameter is required.', example='20'),
  payOverType?: int32(name='pay_over_type', example='1'),
  paymentType?: int32(name='payment_type', example='0'),
  shids?: [ long ](name='shids'),
  sortCode?: int32(name='sort_code', description='This parameter is required.', example='0'),
  superMan?: int32(name='super_man', example='0'),
}

model HotelSearchShrinkRequest {
  adultNum?: string(name='adult_num', example='1'),
  brandCodeShrink?: string(name='brand_code'),
  btripUserId?: string(name='btrip_user_id', example='1000'),
  checkInDate?: string(name='check_in_date', description='This parameter is required.', example='2023-02-22'),
  checkOutDate?: string(name='check_out_date', description='This parameter is required.', example='2023-02-22'),
  cityCode?: string(name='city_code', example='330100'),
  dir?: int32(name='dir', example='1'),
  distance?: int32(name='distance', example='100'),
  districtCode?: string(name='district_code', example='330000'),
  hotelStar?: string(name='hotel_star', example='0'),
  isProtocol?: boolean(name='is_protocol', example='true'),
  keyWords?: string(name='key_words'),
  location?: string(name='location', example='120.010059, 30.284666'),
  maxPrice?: double(name='max_price', example='1000'),
  minPrice?: double(name='min_price', example='100'),
  pageNo?: int32(name='page_no', description='This parameter is required.', example='1'),
  pageSize?: int32(name='page_size', description='This parameter is required.', example='20'),
  payOverType?: int32(name='pay_over_type', example='1'),
  paymentType?: int32(name='payment_type', example='0'),
  shidsShrink?: string(name='shids'),
  sortCode?: int32(name='sort_code', description='This parameter is required.', example='0'),
  superMan?: int32(name='super_man', example='0'),
}

model HotelSearchResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message', example='None'),
  module?: {
    count?: int32(name='count'),
    items?: [ 
      {
        brandName?: string(name='brand_name'),
        btandCode?: string(name='btand_code', example='1902'),
        cityCode?: string(name='city_code', example='330100'),
        discountDesc?: {
          cashReduceTotal?: string(name='cash_reduce_total'),
          dinamicLabel?: string(name='dinamic_label'),
          discountDetail?: [ 
            {
              labelName?: [ string ](name='label_name'),
              moneyDesc?: string(name='money_desc'),
            }
          ](name='discount_detail'),
          subTitle?: string(name='sub_title'),
          title?: string(name='title'),
        }(name='discount_desc'),
        distance?: int32(name='distance', example='100'),
        districtCode?: string(name='district_code', example='330100'),
        hotelAddress?: string(name='hotel_address'),
        hotelCode?: string(name='hotel_code', example='55335212'),
        hotelEnName?: string(name='hotel_en_name', example='Business travel hotel'),
        hotelName?: string(name='hotel_name'),
        hotelStar?: string(name='hotel_star', example='3'),
        imageUrl?: string(name='image_url', example='https://img.alicdn.com/imgextra/i3/6000000000003/O1CN01xkZQR41BtPxK1PQCb_!!6000000000003-0-hotel.jpg'),
        isProtocol?: boolean(name='is_protocol', example='true'),
        location?: string(name='location', example='119.844005,30.054384'),
        minPrice?: double(name='min_price', example='100'),
        originalMinPrice?: double(name='original_min_price'),
        score?: string(name='score', example='3.2'),
        status?: int32(name='status', example='0'),
        tel?: string(name='tel', example='0571-88886784-8888'),
      }
    ](name='items'),
  }(name='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelSearchResponseBody(name='body'),
}

/**
 * @summary 酒店列表搜索接口(直连)
 *
 * @param tmpReq HotelSearchRequest
 * @param headers HotelSearchHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelSearchResponse
 */
async function hotelSearchWithOptions(tmpReq: HotelSearchRequest, headers: HotelSearchHeaders, runtime: Util.RuntimeOptions): HotelSearchResponse {
  Util.validateModel(tmpReq);
  var request = new HotelSearchShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.brandCode)) {
    request.brandCodeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.brandCode, 'brand_code', 'json');
  }
  if (!Util.isUnset(tmpReq.shids)) {
    request.shidsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shids, 'shids', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.adultNum)) {
    query['adult_num'] = request.adultNum;
  }
  if (!Util.isUnset(request.brandCodeShrink)) {
    query['brand_code'] = request.brandCodeShrink;
  }
  if (!Util.isUnset(request.btripUserId)) {
    query['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.checkInDate)) {
    query['check_in_date'] = request.checkInDate;
  }
  if (!Util.isUnset(request.checkOutDate)) {
    query['check_out_date'] = request.checkOutDate;
  }
  if (!Util.isUnset(request.cityCode)) {
    query['city_code'] = request.cityCode;
  }
  if (!Util.isUnset(request.dir)) {
    query['dir'] = request.dir;
  }
  if (!Util.isUnset(request.distance)) {
    query['distance'] = request.distance;
  }
  if (!Util.isUnset(request.districtCode)) {
    query['district_code'] = request.districtCode;
  }
  if (!Util.isUnset(request.hotelStar)) {
    query['hotel_star'] = request.hotelStar;
  }
  if (!Util.isUnset(request.isProtocol)) {
    query['is_protocol'] = request.isProtocol;
  }
  if (!Util.isUnset(request.keyWords)) {
    query['key_words'] = request.keyWords;
  }
  if (!Util.isUnset(request.location)) {
    query['location'] = request.location;
  }
  if (!Util.isUnset(request.maxPrice)) {
    query['max_price'] = request.maxPrice;
  }
  if (!Util.isUnset(request.minPrice)) {
    query['min_price'] = request.minPrice;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.payOverType)) {
    query['pay_over_type'] = request.payOverType;
  }
  if (!Util.isUnset(request.paymentType)) {
    query['payment_type'] = request.paymentType;
  }
  if (!Util.isUnset(request.shidsShrink)) {
    query['shids'] = request.shidsShrink;
  }
  if (!Util.isUnset(request.sortCode)) {
    query['sort_code'] = request.sortCode;
  }
  if (!Util.isUnset(request.superMan)) {
    query['super_man'] = request.superMan;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/hotels/action/search`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 酒店列表搜索接口(直连)
 *
 * @param request HotelSearchRequest
 * @return HotelSearchResponse
 */
async function hotelSearch(request: HotelSearchRequest): HotelSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelSearchHeaders{};
  return hotelSearchWithOptions(request, headers, runtime);
}

model HotelStaticInfoHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelStaticInfoRequest {
  hotelIds?: [ string ](name='hotel_ids', description='This parameter is required.'),
}

model HotelStaticInfoShrinkRequest {
  hotelIdsShrink?: string(name='hotel_ids', description='This parameter is required.'),
}

model HotelStaticInfoResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='operation success.'),
  module?: {
    hotelStaticInfos?: [ 
      {
        blockRoomTypeInformation?: map[string]string(name='block_room_type_information'),
        brand?: string(name='brand', example='19039'),
        brandName?: string(name='brand_name'),
        cityCode?: string(name='city_code', example='330100'),
        cityName?: string(name='city_name'),
        country?: string(name='country', example='CN'),
        countryCode?: string(name='country_code', example='CN'),
        description?: string(name='description'),
        district?: string(name='district', example='330183'),
        districtName?: string(name='district_name'),
        expandInfo?: {
          checkIn?: string(name='check_in', example='17:00'),
          checkOut?: string(name='check_out', example='12:00'),
          decorateTime?: string(name='decorate_time', example='2020'),
          floors?: string(name='floors'),
          hotelFacilities?: [ string ](name='hotel_facilities'),
          hotelType?: int32(name='hotel_type', example='0'),
          openingTime?: string(name='opening_time', example='2020'),
          roomFacilities?: [ string ](name='room_facilities'),
          rooms?: int32(name='rooms', example='1'),
          service?: [ string ](name='service'),
          themeTag?: string(name='theme_tag', example='1'),
        }(name='expand_info'),
        hotelAddress?: string(name='hotel_address'),
        hotelEnAddress?: string(name='hotel_en_address', example='Building 5, Haichuang Building, 998 Wenyi West Road'),
        hotelEnName?: string(name='hotel_en_name', example='Business travel hotel'),
        hotelId?: string(name='hotel_id', example='55335212'),
        hotelName?: string(name='hotel_name'),
        hotelOpenTime?: string(name='hotel_open_time', example='2020'),
        hotelPhones?: string(name='hotel_phones', example='0086#0571#28350117'),
        hotelPolicies?: string(name='hotel_policies', example='demo'),
        hotelfax?: string(name='hotelfax', example='0086#0571#28350117'),
        hotelpics?: string(name='hotelpics'),
        imageinfos?: [ 
          {
            desc?: string(name='desc'),
            tag?: int32(name='tag'),
            url?: string(name='url', example='https://img.alicdn.com/imgextra/i3/6000000000003/O1CN01xkZQR41BtPxK1PQCb_!!6000000000003-0-hotel.jpg'),
          }
        ](name='imageinfos'),
        invoiceProviderMethod?: string(name='invoice_provider_method', example='1'),
        invoiceTypes?: [ int32 ](name='invoice_types'),
        location?: string(name='location', example='119.844005,30.054384'),
        province?: string(name='province', example='330000'),
        provinceName?: string(name='province_name'),
        ratingAverage?: string(name='rating_average', example='2'),
        roomInfos?: [ 
          {
            bedInfoGroupList?: [ 
              {
                bedInfos?: [ 
                  {
                    bedDesc?: string(name='bed_desc'),
                    bedNum?: int32(name='bed_num'),
                    bedSize?: string(name='bed_size'),
                    bedType?: string(name='bed_type'),
                    length?: string(name='length'),
                    width?: string(name='width'),
                  }
                ](name='bed_Infos'),
              }
            ](name='bed_info_group_list'),
            bedInfos?: [ 
              {
                bedDesc?: string(name='bed_desc'),
                bedNum?: int32(name='bed_num', example='1'),
                bedSize?: string(name='bed_size', example='1.8m'),
                bedType?: string(name='bed_type', example='0'),
                length?: string(name='length'),
                width?: string(name='width'),
              }
            ](name='bed_infos'),
            extraBed?: int32(name='extra_bed', example='1'),
            extraBedDesc?: string(name='extra_bed_desc', example='demo'),
            floor?: string(name='floor', example='1,2,3,4,5,6'),
            internetWay?: string(name='internet_way', example='0'),
            maxOccupancy?: int32(name='max_occupancy', example='1'),
            roomFacilities?: string(name='room_facilities'),
            roomFacilityList?: [ string ](name='room_facility_list'),
            roomId?: string(name='room_id', example='71652158'),
            roomImage?: string(name='room_image', example='//img.alicdn.com/imgextra/i3/6000000000003/O1CN01xkZQR41BtPxK1PQCb_!!6000000000003-0-hotel.jpg'),
            roomImages?: [ string ](name='room_images'),
            roomName?: string(name='room_name'),
            roomType?: int32(name='room_type'),
            roomarea?: string(name='roomarea'),
            rooms?: int32(name='rooms', example='1'),
            window?: string(name='window', example='0'),
            windowBad?: string(name='window_bad'),
            windowView?: string(name='window_view'),
          }
        ](name='room_infos'),
        star?: string(name='star', example='0'),
        starRate?: string(name='star_rate', example='2'),
        status?: string(name='status', example='1'),
        themes?: string(name='themes', example='demo'),
        visaReminding?: boolean(name='visa_reminding', example='demo'),
      }
    ](name='hotel_static_infos'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelStaticInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelStaticInfoResponseBody(name='body'),
}

/**
 * @summary 查询酒店静态详情
 *
 * @param tmpReq HotelStaticInfoRequest
 * @param headers HotelStaticInfoHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelStaticInfoResponse
 */
async function hotelStaticInfoWithOptions(tmpReq: HotelStaticInfoRequest, headers: HotelStaticInfoHeaders, runtime: Util.RuntimeOptions): HotelStaticInfoResponse {
  Util.validateModel(tmpReq);
  var request = new HotelStaticInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.hotelIds)) {
    request.hotelIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hotelIds, 'hotel_ids', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.hotelIdsShrink)) {
    query['hotel_ids'] = request.hotelIdsShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelStaticInfo',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/static-infos`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询酒店静态详情
 *
 * @param request HotelStaticInfoRequest
 * @return HotelStaticInfoResponse
 */
async function hotelStaticInfo(request: HotelStaticInfoRequest): HotelStaticInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelStaticInfoHeaders{};
  return hotelStaticInfoWithOptions(request, headers, runtime);
}

model HotelSuggestV2Headers {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelSuggestV2Request {
  btripUserId?: string(name='btrip_user_id', example='1000'),
  checkIn?: string(name='check_in', example='2024-05-15'),
  checkOut?: string(name='check_out', example='2024-06-04'),
  cityCode?: string(name='city_code', example='330100'),
  keyword?: string(name='keyword'),
  searchType?: int32(name='search_type', description='This parameter is required.', example='1'),
}

model HotelSuggestV2ResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='None'),
  module?: {
    guessSuggestInfos?: [ 
      {
        address?: string(name='address'),
        cityCode?: int32(name='city_code', example='300100'),
        cityName?: string(name='city_name'),
        displayName?: string(name='display_name'),
        hotelId?: string(name='hotel_id', example='53853318'),
        icon?: string(name='icon', example='https://gw.alicdn.com/imgextra/i3/O1CN01qKg25r1rKLOKxT3vB_!!6000000005612-2-tps-32-32.png'),
        point?: string(name='point'),
        price?: string(name='price', example='524'),
        region?: int32(name='region', example='0'),
        type?: int32(name='type', example='10'),
        typeDesc?: string(name='type_desc'),
      }
    ](name='guess_suggest_infos'),
    keywordSuggestInfos?: [ 
      {
        address?: string(name='address'),
        businessAreaWithCity?: [ 
          {
            address?: string(name='address'),
            cityCode?: int32(name='city_code', example='300100'),
            cityName?: string(name='city_name'),
            displayName?: string(name='display_name'),
            hotelId?: string(name='hotel_id', example='57140953'),
            icon?: string(name='icon', example='https://gw.alicdn.com/imgextra/i3/O1CN01qKg25r1rKLOKxT3vB_!!6000000005612-2-tps-32-32.png'),
            point?: string(name='point'),
            price?: string(name='price', example='524'),
            region?: int32(name='region', example='0'),
            type?: int32(name='type', example='5'),
            typeDesc?: string(name='type_desc'),
          }
        ](name='business_area_with_city'),
        cityCode?: int32(name='city_code', example='300100'),
        cityName?: string(name='city_name'),
        displayName?: string(name='display_name'),
        hotelId?: string(name='hotel_id', example='53853318'),
        icon?: string(name='icon', example='https://gw.alicdn.com/imgextra/i3/O1CN01qKg25r1rKLOKxT3vB_!!6000000005612-2-tps-32-32.png'),
        point?: string(name='point'),
        price?: string(name='price', example='524'),
        region?: int32(name='region', example='0'),
        type?: int32(name='type', example='10'),
        typeDesc?: string(name='type_desc'),
      }
    ](name='keyword_suggest_infos'),
    popularSuggestInfos?: [ 
      {
        icon?: string(name='icon', example='https://gw.alicdn.com/imgextra/i1/O1CN01x0q19E1QZSqLHVVNh_!!6000000001990-2-tps-54-54.png'),
        popularInfos?: [ 
          {
            displayName?: string(name='display_name'),
          }
        ](name='popular_infos'),
        title?: string(name='title'),
      }
    ](name='popular_suggest_infos'),
    tips?: string(name='tips'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelSuggestV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelSuggestV2ResponseBody(name='body'),
}

/**
 * @summary 酒店关键词搜索
 *
 * @param request HotelSuggestV2Request
 * @param headers HotelSuggestV2Headers
 * @param runtime runtime options for this request RuntimeOptions
 * @return HotelSuggestV2Response
 */
async function hotelSuggestV2WithOptions(request: HotelSuggestV2Request, headers: HotelSuggestV2Headers, runtime: Util.RuntimeOptions): HotelSuggestV2Response {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    query['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.checkIn)) {
    query['check_in'] = request.checkIn;
  }
  if (!Util.isUnset(request.checkOut)) {
    query['check_out'] = request.checkOut;
  }
  if (!Util.isUnset(request.cityCode)) {
    query['city_code'] = request.cityCode;
  }
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.searchType)) {
    query['search_type'] = request.searchType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelSuggestV2',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v2/suggest-infos`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 酒店关键词搜索
 *
 * @param request HotelSuggestV2Request
 * @return HotelSuggestV2Response
 */
async function hotelSuggestV2(request: HotelSuggestV2Request): HotelSuggestV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelSuggestV2Headers{};
  return hotelSuggestV2WithOptions(request, headers, runtime);
}

model IFlightOrderDetailQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model IFlightOrderDetailQueryRequest {
  orderId?: long(name='order_id', description='This parameter is required.', example='1017035199702438072'),
}

model IFlightOrderDetailQueryResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    flightModifyOrderList?: [ 
      {
        corpPayPrice?: int32(name='corp_pay_price'),
        flightModifySegmentList?: [ 
          {
            airlineCode?: string(name='airline_code', example='MU'),
            airlineName?: string(name='airline_name'),
            arrApt?: string(name='arr_apt'),
            arrAptCode?: string(name='arr_apt_code', example='HGH'),
            arrCity?: string(name='arr_city'),
            arrCityCode?: string(name='arr_city_code', example='HKG'),
            arrTerminal?: string(name='arr_terminal', example='T2'),
            arrTime?: string(name='arr_time', example='2024-10-28 14:26:00'),
            carrierAirlineCode?: string(name='carrier_airline_code', example='CA'),
            carrierAirlineName?: string(name='carrier_airline_name'),
            depApt?: string(name='dep_apt'),
            depAptCode?: string(name='dep_apt_code', example='HGH'),
            depCity?: string(name='dep_city'),
            depCityCode?: string(name='dep_city_code', example='HGH'),
            depTerminal?: string(name='dep_terminal', example='T1'),
            depTime?: string(name='dep_time', example='2024-10-25 12:25:00'),
            flightNo?: string(name='flight_no', example='MU7384'),
            journeyIndex?: int32(name='journey_index', example='0'),
            segmentIndex?: int32(name='segment_index', example='0'),
            share?: boolean(name='share'),
            stopAptCode?: string(name='stop_apt_code', example='KIX'),
            stopArrTime?: string(name='stop_arr_time', example='2024-10-26 11:25:00'),
            stopCity?: string(name='stop_city'),
            stopCityCode?: string(name='stop_city_code', example='OSA'),
            stopDepTime?: string(name='stop_dep_time', example='2024-10-27 11:26:00'),
          }
        ](name='flight_modify_segment_list'),
        flightOrderModifyTicketList?: [ 
          {
            cabinClass?: [ 
              {
                cabin?: string(name='cabin', example='V'),
                cabinClass?: string(name='cabin_class', example='Y'),
                flightNo?: string(name='flight_no', example='MU5236'),
              }
            ](name='cabin_class'),
            flightNo?: string(name='flight_no', example='MU5236'),
            ticketNo?: string(name='ticket_no', example='781-6605285563'),
            userId?: string(name='user_id', example='0132'),
          }
        ](name='flight_order_modify_ticket_list'),
        modifyApplyId?: long(name='modify_apply_id', example='1005200138736000'),
        modifyFee?: [ 
          {
            modifyHandFee?: long(name='modify_hand_fee'),
            modifyUpgradeFee?: long(name='modify_upgrade_fee'),
            taxGap?: long(name='tax_gap'),
            userId?: string(name='user_id', example='0132'),
          }
        ](name='modify_fee'),
        modifyOrderStatus?: int32(name='modify_order_status', example='1'),
        modifyTotalFee?: int32(name='modify_total_fee'),
        passengerList?: [ string ](name='passenger_list'),
        personPayPrice?: int32(name='person_pay_price'),
        relateModifyApplyId?: long(name='relate_modify_apply_id', example='1005200138736028'),
        serviceFee?: long(name='service_fee'),
        submitModifyTime?: string(name='submit_modify_time', example='2024-10-26 11:25:00'),
        voluntary?: boolean(name='voluntary'),
      }
    ](name='flight_modify_order_list'),
    flightRefundOrderList?: [ 
      {
        corpRefundAmount?: int32(name='corp_refund_Amount'),
        flightOrderRefundTicketList?: [ 
          {
            cabinClass?: [ 
              {
                cabin?: string(name='cabin', example='V'),
                cabinClass?: string(name='cabin_class', example='Y'),
                flightNo?: string(name='flight_no', example='MU5236'),
              }
            ](name='cabin_class'),
            flightNo?: string(name='flight_no', example='MU5236'),
            ticketNo?: string(name='ticket_no', example='018-6605785754'),
            userId?: string(name='user_id', example='0132'),
          }
        ](name='flight_order_refund_ticket_list'),
        flightPassengerFee?: [ 
          {
            noRefundModifyHandFee?: long(name='no_refund_modify_hand_fee'),
            noRefundModifyUpgradeFee?: long(name='no_refund_modify_upgrade_fee'),
            refundAmount?: long(name='refund_amount'),
            refundHandFee?: long(name='refund_hand_fee'),
            refundModifyAmount?: long(name='refund_modify_amount'),
            refundModifyHandAmount?: long(name='refund_modify_hand_amount'),
            refundModifyUpgradeAmount?: long(name='refund_modify_upgrade_amount'),
            refundTaxHandFee?: long(name='refund_tax_hand_fee'),
            userId?: string(name='user_id', example='0132'),
          }
        ](name='flight_passenger_fee'),
        flightRefundSegmentList?: [ 
          {
            airlineCode?: string(name='airline_code', example='MU'),
            airlineName?: string(name='airline_name'),
            arrApt?: string(name='arr_apt'),
            arrAptCode?: string(name='arr_apt_code', example='HKG'),
            arrCity?: string(name='arr_city'),
            arrCityCode?: string(name='arr_city_code', example='HKG'),
            arrTerminal?: string(name='arr_terminal', example='T1'),
            arrTime?: string(name='arr_time', example='2024-10-28 14:26:00'),
            carrierAirlineCode?: string(name='carrier_airline_code', example='CA'),
            carrierAirlineName?: string(name='carrier_airline_name'),
            depApt?: string(name='dep_apt'),
            depAptCode?: string(name='dep_apt_code', example='HGH'),
            depCity?: string(name='dep_city'),
            depCityCode?: string(name='dep_city_code', example='HGH'),
            depTerminal?: string(name='dep_terminal', example='T1'),
            depTime?: string(name='dep_time', example='2024-10-25 11:24:00'),
            flightNo?: string(name='flight_no', example='MU5334'),
            journeyIndex?: int32(name='journey_index', example='0'),
            segmentIndex?: int32(name='segment_index', example='0'),
            share?: boolean(name='share'),
            stopAptCode?: string(name='stop_apt_code', example='KIX'),
            stopArrTime?: string(name='stop_arr_time', example='2024-10-26 11:25:00'),
            stopCity?: string(name='stop_city'),
            stopCityCode?: string(name='stop_city_code', example='OSA'),
            stopDepTime?: string(name='stop_dep_time', example='2024-10-27 11:26:00'),
          }
        ](name='flight_refund_segment_list'),
        passengerList?: [ string ](name='passenger_list'),
        personRefundAmount?: int32(name='person_refund_Amount'),
        refundApplyId?: long(name='refund_apply_id', example='1006200138737069'),
        refundHandFee?: int32(name='refund_hand_fee'),
        refundOrderStatus?: int32(name='refund_order_status', example='3'),
        refundServiceFee?: long(name='refund_service_fee'),
        refundTotalAmount?: int32(name='refund_total_Amount'),
        relateModifyApplyId?: [ long ](name='relate_modify_apply_id'),
        relateRefundApplyId?: long(name='relate_refund_apply_id', example='10062001387370'),
        repeatRefund?: boolean(name='repeat_refund'),
        submitRefundTime?: string(name='submit_refund_time', example='2024-10-26 11:25:00'),
        voluntary?: boolean(name='voluntary'),
      }
    ](name='flight_refund_order_list'),
    flightSaleOrder?: {
      applyId?: long(name='apply_id', example='82587500'),
      bookType?: int32(name='book_type', example='0'),
      bookerInfo?: {
        userId?: string(name='user_id', example='01323'),
        userName?: string(name='user_name'),
      }(name='booker_info'),
      corpPayPrice?: long(name='corp_pay_price'),
      exceedApplyId?: string(name='exceed_apply_id', example='123'),
      flightOrderInsureList?: [ 
        {
          insOrderId?: string(name='ins_order_id', example='17060573244016310'),
          insPayType?: string(name='ins_pay_type'),
          insTotalPrice?: int32(name='ins_total_price'),
          tradeAction?: string(name='trade_action', example='1'),
        }
      ](name='flight_order_insure_list'),
      flightOrderTicketList?: [ 
        {
          cabinClass?: [ 
            {
              cabin?: string(name='cabin', example='V'),
              cabinClass?: string(name='cabin_class', example='Y'),
              flightNo?: string(name='flight_no', example='MF8765'),
            }
          ](name='cabin_class'),
          tax?: int32(name='tax'),
          ticketNo?: string(name='ticket_no', example='018-6605785754'),
          ticketPrice?: int32(name='ticket_price'),
          userId?: string(name='user_id', example='01323'),
        }
      ](name='flight_order_ticket_list'),
      flightSegmentList?: [ 
        {
          airlineCode?: string(name='airline_code', example='MU'),
          airlineName?: string(name='airline_name'),
          arrApt?: string(name='arr_apt'),
          arrAptCode?: string(name='arr_apt_code', example='HKG'),
          arrCity?: string(name='arr_city'),
          arrCityCode?: string(name='arr_city_code', example='HKG'),
          arrTerminal?: string(name='arr_terminal', example='T2'),
          arrTime?: string(name='arr_time', example='2024-10-25 15:26:00'),
          carrierAirlineCode?: string(name='carrier_airline_code', example='CA'),
          carrierAirlineName?: string(name='carrier_airline_name'),
          depApt?: string(name='dep_apt'),
          depAptCode?: string(name='dep_apt_code', example='HGH'),
          depCity?: string(name='dep_city'),
          depCityCode?: string(name='dep_city_code', example='HGH'),
          depTerminal?: string(name='dep_terminal', example='T1'),
          depTime?: string(name='dep_time', example='2024-10-24 15:26:00'),
          flightNo?: string(name='flight_no', example='MU5925'),
          journeyIndex?: int32(name='journey_index', example='0'),
          segmentIndex?: int32(name='segment_index', example='0'),
          share?: boolean(name='share'),
          stopAptCode?: string(name='stop_apt_code', example='KIX'),
          stopArrTime?: string(name='stop_arr_time', example='2024-10-26 11:25:00'),
          stopCity?: string(name='stop_city'),
          stopCityCode?: string(name='stop_city_code', example='OSA'),
          stopDepTime?: string(name='stop_dep_time', example='2024-10-27 11:26:00'),
        }
      ](name='flight_segment_list'),
      mixPay?: boolean(name='mix_pay'),
      orderCreateTime?: string(name='order_create_time', example='yyyy-MM-dd HH:mm:ss'),
      orderId?: string(name='order_id', example='1003038200110661039'),
      orderPayTime?: string(name='order_pay_time', example='yyyy-MM-dd HH:mm:ss'),
      orderReservePrice?: long(name='order_reserve_price'),
      orderStatus?: int32(name='order_status', example='5'),
      orderStatusDesc?: string(name='order_status_desc'),
      orderType?: int32(name='order_type', example='1'),
      passengerList?: [ 
        {
          costCenterId?: string(name='cost_center_id', example='0111'),
          costCenterName?: string(name='cost_center_name'),
          departmentId?: string(name='department_id', example='1002'),
          departmentName?: string(name='department_name'),
          invoiceId?: string(name='invoice_id', example='01112'),
          invoiceTitle?: string(name='invoice_title'),
          jobNo?: string(name='job_no', example='100757'),
          passengerType?: int32(name='passenger_type', example='0'),
          projectCode?: string(name='project_code', example='1111'),
          projectTitle?: string(name='project_title'),
          userId?: string(name='user_id', example='01323'),
          userName?: string(name='user_name'),
        }
      ](name='passenger_list'),
      payType?: int32(name='pay_type', example='2'),
      personPayPrice?: long(name='person_pay_price'),
      serviceFee?: long(name='service_fee'),
      thirdPartApplyId?: string(name='third_part_apply_id', example='business_trip_api_000001'),
      tripType?: int32(name='trip_type', example='1'),
    }(name='flight_sale_order'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model IFlightOrderDetailQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IFlightOrderDetailQueryResponseBody(name='body'),
}

/**
 * @summary 国际机票订单详情
 *
 * @param request IFlightOrderDetailQueryRequest
 * @param headers IFlightOrderDetailQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IFlightOrderDetailQueryResponse
 */
async function iFlightOrderDetailQueryWithOptions(request: IFlightOrderDetailQueryRequest, headers: IFlightOrderDetailQueryHeaders, runtime: Util.RuntimeOptions): IFlightOrderDetailQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IFlightOrderDetailQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/open/v1/intlFlight-order-detail-query`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际机票订单详情
 *
 * @param request IFlightOrderDetailQueryRequest
 * @return IFlightOrderDetailQueryResponse
 */
async function iFlightOrderDetailQuery(request: IFlightOrderDetailQueryRequest): IFlightOrderDetailQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IFlightOrderDetailQueryHeaders{};
  return iFlightOrderDetailQueryWithOptions(request, headers, runtime);
}

model IFlightOrderListQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model IFlightOrderListQueryRequest {
  applyIdList?: [ string ](name='apply_id_list'),
  bookTypeList?: [ int32 ](name='book_type_list'),
  bookerId?: [ string ](name='booker_id'),
  endDate?: string(name='end_date', example='yyyy-MM-dd HH:mm:ss'),
  pageSize?: int32(name='page_size', example='10'),
  scrollId?: string(name='scroll_id', example='CAESBgoEIgIIABgAIhkKFwMSAAAAMUw4ZGViODFlYmM3MYzM4'),
  startDate?: string(name='start_date', example='yyyy-MM-dd HH:mm:ss'),
  thirdPartApplyIdList?: [ string ](name='third_part_apply_id_list'),
}

model IFlightOrderListQueryShrinkRequest {
  applyIdListShrink?: string(name='apply_id_list'),
  bookTypeListShrink?: string(name='book_type_list'),
  bookerIdShrink?: string(name='booker_id'),
  endDate?: string(name='end_date', example='yyyy-MM-dd HH:mm:ss'),
  pageSize?: int32(name='page_size', example='10'),
  scrollId?: string(name='scroll_id', example='CAESBgoEIgIIABgAIhkKFwMSAAAAMUw4ZGViODFlYmM3MYzM4'),
  startDate?: string(name='start_date', example='yyyy-MM-dd HH:mm:ss'),
  thirdPartApplyIdListShrink?: string(name='third_part_apply_id_list'),
}

model IFlightOrderListQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: [ 
    {
      flightModifyOrderList?: [ 
        {
          corpPayPrice?: int32(name='corp_pay_price'),
          flightModifySegmentList?: [ 
            {
              airlineCode?: string(name='airline_code', example='MU'),
              airlineName?: string(name='airline_name'),
              arrApt?: string(name='arr_apt'),
              arrAptCode?: string(name='arr_apt_code', example='HGH'),
              arrCity?: string(name='arr_city'),
              arrCityCode?: string(name='arr_city_code', example='HKG'),
              arrTerminal?: string(name='arr_terminal', example='T2'),
              arrTime?: string(name='arr_time', example='2024-10-28 14:26:00'),
              carrierAirlineCode?: string(name='carrier_airline_code', example='CA'),
              carrierAirlineName?: string(name='carrier_airline_name'),
              depApt?: string(name='dep_apt'),
              depAptCode?: string(name='dep_apt_code', example='HGH'),
              depCity?: string(name='dep_city'),
              depCityCode?: string(name='dep_city_code', example='HGH'),
              depTerminal?: string(name='dep_terminal', example='T1'),
              depTime?: string(name='dep_time', example='2024-10-25 12:25:00'),
              flightNo?: string(name='flight_no', example='MU7384'),
              journeyIndex?: int32(name='journey_index', example='0'),
              segmentIndex?: int32(name='segment_index', example='0'),
              share?: boolean(name='share'),
              stopAptCode?: string(name='stop_apt_code', example='KIX'),
              stopArrTime?: string(name='stop_arr_time', example='2024-10-26 11:25:00'),
              stopCity?: string(name='stop_city'),
              stopCityCode?: string(name='stop_city_code', example='OSA'),
              stopDepTime?: string(name='stop_dep_time', example='2024-10-27 11:26:00'),
            }
          ](name='flight_modify_segment_list'),
          flightOrderModifyTicketList?: [ 
            {
              cabinClass?: [ 
                {
                  cabin?: string(name='cabin', example='V'),
                  cabinClass?: string(name='cabin_class', example='Y'),
                  flightNo?: string(name='flight_no', example='MU5236'),
                }
              ](name='cabin_class'),
              flightNo?: string(name='flight_no', example='MU5236'),
              ticketNo?: string(name='ticket_no', example='781-6605714721'),
              userId?: string(name='user_id', example='01332'),
            }
          ](name='flight_order_modify_ticket_list'),
          modifyApplyId?: long(name='modify_apply_id', example='1005200138736000'),
          passengerFee?: [ 
            {
              modifyHandFee?: long(name='modify_hand_fee'),
              modifyUpgradeFee?: long(name='modify_upgrade_fee'),
              taxGap?: long(name='tax_gap'),
              userId?: string(name='user_id', example='01332'),
            }
          ](name='passenger_fee'),
          passengerList?: [ string ](name='passenger_list'),
          personPayPrice?: int32(name='person_pay_price'),
          relateModifyApplyId?: long(name='relate_modify_apply_id', example='1005200138736028'),
          serviceFee?: long(name='service_fee'),
          totalFee?: long(name='total_fee'),
        }
      ](name='flight_modify_order_list'),
      flightRefundOrderList?: [ 
        {
          corpRefundAmount?: int32(name='corp_refund_Amount'),
          flightOrderRefundTicketList?: [ 
            {
              cabinClass?: [ 
                {
                  cabin?: string(name='cabin', example='V'),
                  cabinClass?: string(name='cabin_class', example='Y'),
                  flightNo?: string(name='flight_no', example='BK3162'),
                }
              ](name='cabin_class'),
              flightNo?: string(name='flight_no', example='BK3162'),
              ticketNo?: string(name='ticket_no', example='999-6605133193'),
              userId?: string(name='user_id', example='01332'),
            }
          ](name='flight_order_refund_ticket_list'),
          flightRefundSegmentList?: [ 
            {
              airlineCode?: string(name='airline_code', example='MU'),
              airlineName?: string(name='airline_name'),
              arrApt?: string(name='arr_apt'),
              arrAptCode?: string(name='arr_apt_code', example='HKG'),
              arrCity?: string(name='arr_city'),
              arrCityCode?: string(name='arr_city_code', example='HKG'),
              arrTerminal?: string(name='arr_terminal', example='T1'),
              arrTime?: string(name='arr_time', example='2024-10-28 14:26:00'),
              carrierAirlineCode?: string(name='carrier_airline_code', example='CA'),
              carrierAirlineName?: string(name='carrier_airline_name'),
              depApt?: string(name='dep_apt'),
              depAptCode?: string(name='dep_apt_code', example='HGH'),
              depCity?: string(name='dep_city'),
              depCityCode?: string(name='dep_city_code', example='HGH'),
              depTerminal?: string(name='dep_terminal', example='T1'),
              depTime?: string(name='dep_time', example='2024-10-25 11:24:00'),
              flightNo?: string(name='flight_no', example='MU5334'),
              journeyIndex?: int32(name='journey_index', example='0'),
              segmentIndex?: int32(name='segment_index', example='0'),
              share?: boolean(name='share'),
              stopAptCode?: string(name='stop_apt_code', example='KIX'),
              stopArrTime?: string(name='stop_arr_time', example='2024-10-26 11:25:00'),
              stopCity?: string(name='stop_city'),
              stopCityCode?: string(name='stop_city_code', example='OSA'),
              stopDepTime?: string(name='stop_dep_time', example='2024-10-27 11:26:00'),
            }
          ](name='flight_refund_segment_list'),
          passengerFee?: [ 
            {
              noRefundModifyHandFee?: long(name='no_refund_modify_hand_fee'),
              noRefundModifyUpgradeFee?: long(name='no_refund_modify_upgrade_fee'),
              refundAmount?: long(name='refund_amount'),
              refundHandFee?: long(name='refund_hand_fee'),
              refundModifyAmount?: long(name='refund_modify_amount'),
              refundModifyHandAmount?: long(name='refund_modify_hand_amount'),
              refundModifyUpgradeAmount?: long(name='refund_modify_upgrade_amount'),
              refundTaxHandFee?: long(name='refund_tax_hand_fee'),
              userId?: string(name='user_id', example='01332'),
            }
          ](name='passenger_fee'),
          passengerInfo?: [ string ](name='passenger_info'),
          personRefundAmount?: int32(name='person_refund_Amount'),
          refundAmount?: int32(name='refund_Amount'),
          refundApplyId?: long(name='refund_apply_id', example='1006200138737069'),
          refundHandFee?: int32(name='refund_hand_fee'),
          serviceFee?: long(name='service_fee'),
        }
      ](name='flight_refund_order_list'),
      flightSaleOrder?: {
        applyId?: long(name='apply_id', example='82587500'),
        bookType?: int32(name='book_type', example='0'),
        bookerInfo?: {
          userId?: string(name='user_id', example='01323'),
          userName?: string(name='user_name'),
        }(name='booker_info'),
        corpPayPrice?: long(name='corp_pay_price'),
        exceedApplyId?: string(name='exceed_apply_id', example='123'),
        flightOrderInsureList?: [ 
          {
            insOrderId?: string(name='ins_order_id', example='17060573244016310'),
            insPayType?: string(name='ins_pay_type'),
            insTotalPrice?: int32(name='ins_total_price'),
            tradeAction?: string(name='trade_action', example='1'),
          }
        ](name='flight_order_insure_list'),
        flightOrderTicketList?: [ 
          {
            cabinClass?: [ 
              {
                cabin?: string(name='cabin', example='V'),
                cabinClass?: string(name='cabin_class', example='Y'),
                flightNo?: string(name='flight_no', example='MF8765'),
              }
            ](name='cabin_class'),
            tax?: int32(name='tax'),
            ticketNo?: string(name='ticket_no', example='018-6605785754'),
            ticketPrice?: int32(name='ticket_price'),
            userId?: string(name='user_id', example='01323'),
          }
        ](name='flight_order_ticket_list'),
        flightSegmentList?: [ 
          {
            airlineCode?: string(name='airline_code', example='MU'),
            airlineName?: string(name='airline_name'),
            arrApt?: string(name='arr_apt'),
            arrAptCode?: string(name='arr_apt_code', example='HKG'),
            arrCity?: string(name='arr_city'),
            arrCityCode?: string(name='arr_city_code', example='HKG'),
            arrTerminal?: string(name='arr_terminal', example='T2'),
            arrTime?: string(name='arr_time', example='2024-10-25 15:26:00'),
            carrierAirlineCode?: string(name='carrier_airline_code', example='CA'),
            carrierAirlineName?: string(name='carrier_airline_name'),
            depApt?: string(name='dep_apt'),
            depAptCode?: string(name='dep_apt_code', example='HGH'),
            depCity?: string(name='dep_city'),
            depCityCode?: string(name='dep_city_code', example='HGH'),
            depTerminal?: string(name='dep_terminal', example='T1'),
            depTime?: string(name='dep_time', example='2024-10-24 15:26:00'),
            flightNo?: string(name='flight_no', example='MU5925'),
            journeyIndex?: int32(name='journey_index', example='0'),
            segmentIndex?: int32(name='segment_index', example='0'),
            share?: boolean(name='share'),
            stopAptCode?: string(name='stop_apt_code', example='KIX'),
            stopArrTime?: string(name='stop_arr_time', example='2024-10-26 11:25:00'),
            stopCity?: string(name='stop_city'),
            stopCityCode?: string(name='stop_city_code', example='OSA'),
            stopDepTime?: string(name='stop_dep_time', example='2024-10-27 11:26:00'),
          }
        ](name='flight_segment_list'),
        mixPay?: boolean(name='mix_pay'),
        orderCreateTime?: string(name='order_create_time', example='yyyy-MM-dd HH:mm:ss'),
        orderId?: string(name='order_id', example='1003038200110661039'),
        orderPayTime?: string(name='order_pay_time', example='yyyy-MM-dd HH:mm:ss'),
        orderReservePrice?: long(name='order_reserve_price'),
        orderStatus?: int32(name='order_status', example='5'),
        orderStatusDesc?: string(name='order_status_desc'),
        orderType?: int32(name='order_type', example='1'),
        passengerList?: [ 
          {
            costCenterId?: string(name='cost_center_id', example='0111'),
            costCenterName?: string(name='cost_center_name'),
            departmentId?: string(name='department_id', example='1002'),
            departmentName?: string(name='department_name'),
            invoiceId?: string(name='invoice_id', example='01112'),
            invoiceTitle?: string(name='invoice_title'),
            jobNo?: string(name='job_no', example='100757'),
            passengerType?: int32(name='passenger_type', example='0'),
            projectCode?: string(name='project_code', example='1111'),
            projectTitle?: string(name='project_title'),
            userId?: string(name='user_id', example='01323'),
            userName?: string(name='user_name'),
          }
        ](name='passenger_list'),
        payType?: int32(name='pay_type', example='2'),
        personPayPrice?: long(name='person_pay_price'),
        serviceFee?: long(name='service_fee'),
        thirdPartApplyId?: string(name='third_part_apply_id', example='business_trip_api_000001'),
        tripType?: int32(name='trip_type', example='1'),
      }(name='flight_sale_order'),
    }
  ](name='module'),
  pageInfo?: {
    number?: int32(name='number'),
    scrollId?: string(name='scroll_id', example='CAESBgoEIgIIABgAIhkKFwMSAAAAMUw4ZGViODFlYmM3MYzM4'),
    totalNumber?: int32(name='total_number', example='100'),
  }(name='pageInfo'),
  requestId?: string(name='requestId', example='C61ECFF6-****-****-****-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce********056433edbb2'),
}

model IFlightOrderListQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IFlightOrderListQueryResponseBody(name='body'),
}

/**
 * @summary 国际机票订单列表
 *
 * @param tmpReq IFlightOrderListQueryRequest
 * @param headers IFlightOrderListQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IFlightOrderListQueryResponse
 */
async function iFlightOrderListQueryWithOptions(tmpReq: IFlightOrderListQueryRequest, headers: IFlightOrderListQueryHeaders, runtime: Util.RuntimeOptions): IFlightOrderListQueryResponse {
  Util.validateModel(tmpReq);
  var request = new IFlightOrderListQueryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.applyIdList)) {
    request.applyIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.applyIdList, 'apply_id_list', 'json');
  }
  if (!Util.isUnset(tmpReq.bookTypeList)) {
    request.bookTypeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bookTypeList, 'book_type_list', 'json');
  }
  if (!Util.isUnset(tmpReq.bookerId)) {
    request.bookerIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bookerId, 'booker_id', 'json');
  }
  if (!Util.isUnset(tmpReq.thirdPartApplyIdList)) {
    request.thirdPartApplyIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.thirdPartApplyIdList, 'third_part_apply_id_list', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyIdListShrink)) {
    query['apply_id_list'] = request.applyIdListShrink;
  }
  if (!Util.isUnset(request.bookTypeListShrink)) {
    query['book_type_list'] = request.bookTypeListShrink;
  }
  if (!Util.isUnset(request.bookerIdShrink)) {
    query['booker_id'] = request.bookerIdShrink;
  }
  if (!Util.isUnset(request.endDate)) {
    query['end_date'] = request.endDate;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.scrollId)) {
    query['scroll_id'] = request.scrollId;
  }
  if (!Util.isUnset(request.startDate)) {
    query['start_date'] = request.startDate;
  }
  if (!Util.isUnset(request.thirdPartApplyIdListShrink)) {
    query['third_part_apply_id_list'] = request.thirdPartApplyIdListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IFlightOrderListQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/open/v1/intlFlight-order-list-query`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际机票订单列表
 *
 * @param request IFlightOrderListQueryRequest
 * @return IFlightOrderListQueryResponse
 */
async function iFlightOrderListQuery(request: IFlightOrderListQueryRequest): IFlightOrderListQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IFlightOrderListQueryHeaders{};
  return iFlightOrderListQueryWithOptions(request, headers, runtime);
}

model IeFlightBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model IeFlightBillSettlementQueryRequest {
  billBatch?: string(name='bill_batch'),
  orderId?: long(name='order_id'),
  pageNo?: int32(name='page_no', description='This parameter is required.', example='1'),
  pageSize?: int32(name='page_size', description='This parameter is required.', example='100'),
  periodEnd?: string(name='period_end', example='2021-10-02'),
  periodStart?: string(name='period_start', example='2021-10-01'),
  scrollId?: string(name='scroll_id'),
  scrollMod?: boolean(name='scroll_mod'),
}

model IeFlightBillSettlementQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category', example='11'),
    corpId?: string(name='corp_id', example='corp1'),
    dataList?: [ 
      {
        adjustTime?: string(name='adjust_time'),
        advanceDay?: int32(name='advance_day', example='1'),
        airlineCorpCode?: string(name='airline_corp_code', example='MU'),
        airlineCorpName?: string(name='airline_corp_name'),
        alipayTradeNo?: string(name='alipay_trade_no', example='2021123432260'),
        applyArrCityCode?: string(name='apply_arr_city_code'),
        applyArrCityName?: string(name='apply_arr_city_name'),
        applyDepCityCode?: string(name='apply_dep_city_code'),
        applyDepCityName?: string(name='apply_dep_city_name'),
        applyExtendField?: string(name='apply_extend_field', description='审批扩展自定义字段'),
        applyId?: string(name='apply_id', example='103189557'),
        approverEmail?: string(name='approver_email'),
        approverId?: string(name='approver_id'),
        approverName?: string(name='approver_name'),
        arrAirportCode?: string(name='arr_airport_code', example='CAN'),
        arrCity?: string(name='arr_city'),
        arrCityCode?: string(name='arr_city_code'),
        arrCountry?: string(name='arr_country'),
        arrCountryCode?: string(name='arr_country_code'),
        arrDate?: string(name='arr_date', example='2021-10-02'),
        arrStation?: string(name='arr_station'),
        arrTime?: string(name='arr_time', example='13:30:00'),
        baseLocation?: string(name='base_location'),
        billRecordTime?: string(name='bill_record_time', example='2020-12-23T20:18Z'),
        bookMode?: string(name='book_mode'),
        bookTime?: string(name='book_time', example='2021-10-01 00:17:05'),
        bookerId?: string(name='booker_id', example='al_xinuan.zsy'),
        bookerJobNo?: string(name='booker_job_no', example='70022164'),
        bookerName?: string(name='booker_name'),
        btripCouponFee?: double(name='btrip_coupon_fee', example='23.9'),
        businessTripResult?: string(name='business_trip_result'),
        cabin?: string(name='cabin', example='R'),
        cabinClass?: string(name='cabin_class'),
        capitalDirection?: string(name='capital_direction', example='1'),
        cascadeDepartment?: string(name='cascade_department'),
        categoryDesc?: string(name='category_desc'),
        changeFee?: double(name='change_fee', example='23.0'),
        changeResult?: string(name='change_result'),
        corpPayOrderFee?: double(name='corp_pay_order_fee', example='460'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number', example='8b7f3cd-24324-097'),
        costDepartment?: string(name='cost_department'),
        coupon?: double(name='coupon', example='1'),
        customContent?: string(name='custom_content'),
        deductibleTax?: double(name='deductible_tax'),
        depAirportCode?: string(name='dep_airport_code', example='KHN'),
        depCityCode?: string(name='dep_city_code'),
        depCountry?: string(name='dep_country'),
        depCountryCode?: string(name='dep_country_code'),
        department?: string(name='department'),
        departmentId?: string(name='department_id', example='2345866'),
        deptCity?: string(name='dept_city'),
        deptDate?: string(name='dept_date', example='2021-10-02'),
        deptStation?: string(name='dept_station'),
        deptTime?: string(name='dept_time', example='12:00:00'),
        discount?: string(name='discount', example='51%'),
        exceedReason?: string(name='exceed_reason'),
        feeType?: string(name='fee_type', example='20101'),
        feeTypeDesc?: string(name='fee_type_desc'),
        flightNo?: string(name='flight_no', example='MU9684'),
        foreignersTag?: string(name='foreigners_tag'),
        index?: string(name='index', example='4564547'),
        insOrderId?: string(name='ins_order_id'),
        insuranceFee?: double(name='insurance_fee', example='23.9'),
        insuranceNumber?: string(name='insurance_number', example='15548214852'),
        insuranceProductName?: string(name='insurance_product_name'),
        invoiceTitle?: string(name='invoice_title'),
        location?: string(name='location'),
        mappingCompanyCode?: string(name='mapping_company_code'),
        mostDifferenceDeptTime?: string(name='most_difference_dept_time', example='2021-10-01 00:17:13'),
        mostDifferenceDiscount?: string(name='most_difference_discount', example='23%'),
        mostDifferenceFlightNo?: string(name='most_difference_flight_no', example='MU9684'),
        mostDifferencePrice?: double(name='most_difference_price', example='23.9'),
        mostDifferenceReason?: string(name='most_difference_reason'),
        mostPrice?: double(name='most_price', example='23.9'),
        negotiationCouponFee?: double(name='negotiation_coupon_fee', example='23.9'),
        orderId?: string(name='order_id', example='234223423423'),
        orderStatusDesc?: string(name='order_status_desc', example='null'),
        overApplyId?: string(name='over_apply_id', example='234324324423'),
        paymentDepartmentId?: string(name='payment_department_id'),
        paymentDepartmentName?: string(name='payment_department_name'),
        position?: string(name='position'),
        positionLevel?: string(name='position_level'),
        primaryId?: long(name='primary_id', example='4564547'),
        processorOaCode?: string(name='processor_oa_code'),
        projectCode?: string(name='project_code', example='23423432423'),
        projectName?: string(name='project_name'),
        refundChangeCost?: double(name='refund_change_cost'),
        refundFee?: double(name='refund_fee', example='23.9'),
        refundResult?: string(name='refund_result'),
        remark?: string(name='remark'),
        repeatRefund?: string(name='repeat_refund'),
        sealPrice?: double(name='seal_price', example='410'),
        segmentType?: string(name='segment_type'),
        serviceFee?: double(name='service_fee', example='23.9'),
        settleTypeDesc?: string(name='settle_type_desc'),
        settlementFee?: double(name='settlement_fee', example='350'),
        settlementGrantFee?: double(name='settlement_grant_fee', example='6.11'),
        settlementTime?: string(name='settlement_time', example='2021-10-08 23:39:01'),
        settlementType?: string(name='settlement_type', example='4'),
        sio?: string(name='sio'),
        status?: int32(name='status', example='1'),
        statusDesc?: string(name='status_desc'),
        subOrderId?: string(name='sub_order_id', example='123123232'),
        taxFee?: double(name='tax_fee', example='125.6'),
        taxRate?: string(name='tax_rate', description='税率', example='6%'),
        thirdItineraryId?: string(name='third_itinerary_id'),
        ticketId?: string(name='ticket_id', example='781-6586234234324'),
        trade?: string(name='trade', example='CAN-KUL-BKK'),
        tradeActionDesc?: string(name='trade_action_desc'),
        travelerEmail?: string(name='traveler_email'),
        travelerId?: string(name='traveler_id', example='54463464'),
        travelerJobNo?: string(name='traveler_job_no', example='326246'),
        travelerMemberType?: string(name='traveler_member_type'),
        travelerMemberTypeName?: string(name='traveler_member_type_name'),
        travelerName?: string(name='traveler_name'),
        tripType?: int32(name='trip_type'),
        voucherType?: int32(name='voucher_type', example='11'),
        voucherTypeDesc?: string(name='voucher_type_desc'),
        voyageName?: string(name='voyage_name'),
      }
    ](name='data_list'),
    periodEnd?: string(name='period_end', example='2021-10-14'),
    periodStart?: string(name='period_start', example='2021-10-13'),
    scrollId?: string(name='scroll_id'),
    totalNum?: long(name='total_num', example='1402'),
  }(name='module'),
  morePage?: boolean(name='more_page', example='true'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210e842b16611337974412836dae27'),
}

model IeFlightBillSettlementQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IeFlightBillSettlementQueryResponseBody(name='body'),
}

/**
 * @summary 查询国际机票记账数据
 *
 * @param request IeFlightBillSettlementQueryRequest
 * @param headers IeFlightBillSettlementQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IeFlightBillSettlementQueryResponse
 */
async function ieFlightBillSettlementQueryWithOptions(request: IeFlightBillSettlementQueryRequest, headers: IeFlightBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): IeFlightBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billBatch)) {
    query['bill_batch'] = request.billBatch;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }
  if (!Util.isUnset(request.scrollId)) {
    query['scroll_id'] = request.scrollId;
  }
  if (!Util.isUnset(request.scrollMod)) {
    query['scroll_mod'] = request.scrollMod;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IeFlightBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/ie-flight/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询国际机票记账数据
 *
 * @param request IeFlightBillSettlementQueryRequest
 * @return IeFlightBillSettlementQueryResponse
 */
async function ieFlightBillSettlementQuery(request: IeFlightBillSettlementQueryRequest): IeFlightBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IeFlightBillSettlementQueryHeaders{};
  return ieFlightBillSettlementQueryWithOptions(request, headers, runtime);
}

model IeHotelBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model IeHotelBillSettlementQueryRequest {
  billBatch?: string(name='bill_batch'),
  category?: int32(name='category', example='12'),
  orderId?: long(name='order_id'),
  pageNo?: int32(name='page_no', description='This parameter is required.', example='1'),
  pageSize?: int32(name='page_size', example='100'),
  periodEnd?: string(name='period_end', example='2021-10-02'),
  periodStart?: string(name='period_start', example='2021-10-01'),
  scrollId?: string(name='scroll_id'),
  scrollMod?: boolean(name='scroll_mod'),
}

model IeHotelBillSettlementQueryResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category', example='12'),
    corpId?: string(name='corp_id', example='corp1'),
    dataList?: [ 
      {
        adjustTime?: string(name='adjust_time'),
        alipayTradeNo?: string(name='alipay_trade_no', example='2021123432260'),
        amountCurrency?: string(name='amount_currency', example='AUD'),
        applyArrCityCode?: string(name='apply_arr_city_code', example='MDG'),
        applyArrCityName?: string(name='apply_arr_city_name'),
        applyDepCityCode?: string(name='apply_dep_city_code', example='HRB'),
        applyDepCityName?: string(name='apply_dep_city_name'),
        applyExtendField?: string(name='apply_extend_field'),
        applyId?: string(name='apply_id', example='103189557'),
        approverEmail?: string(name='approver_email'),
        approverId?: string(name='approver_id'),
        approverName?: string(name='approver_name'),
        averageNights?: double(name='average_nights', example='1.0'),
        baseLocation?: string(name='base_location'),
        billRecordTime?: string(name='bill_record_time', example='2022-07-20T10:40Z'),
        bookMode?: string(name='book_mode'),
        bookReason?: string(name='book_reason'),
        bookTime?: string(name='book_time', example='2021-10-08 23:38:55'),
        bookerId?: string(name='booker_id', example='al_xinuan.zsy'),
        bookerJobNo?: string(name='booker_job_no', example='70022164'),
        bookerName?: string(name='booker_name'),
        brandGroup?: string(name='brand_group'),
        brandName?: string(name='brand_name', example='XXX'),
        businessExpense?: long(name='business_expense', example='1345'),
        businessTripResult?: string(name='business_trip_result'),
        capitalDirection?: string(name='capital_direction', example='1'),
        cascadeDepartment?: string(name='cascade_department'),
        categoryDesc?: string(name='category_desc'),
        checkInDate?: string(name='check_in_date', example='2021-10-14 00:00:00'),
        checkoutDate?: string(name='checkout_date', example='2021-10-16 00:00:00'),
        city?: string(name='city'),
        cityCode?: string(name='city_code', example='110100'),
        corpRefundFee?: double(name='corp_refund_fee', example='12'),
        corpTotalFee?: double(name='corp_total_fee', example='1000'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number', example='8b7f3cd-24324-097'),
        costDepartment?: string(name='cost_department'),
        country?: string(name='country'),
        countryCode?: string(name='country_code', example='1454567'),
        customContent?: string(name='custom_content'),
        deductibleTax?: double(name='deductible_tax'),
        department?: string(name='department'),
        departmentId?: string(name='department_id'),
        exceedReason?: string(name='exceed_reason'),
        feeType?: string(name='fee_type', example='20101'),
        feeTypeDesc?: string(name='fee_type_desc'),
        fines?: double(name='fines', example='10.1'),
        foreignBusinessExpense?: long(name='foreign_business_expense', example='345'),
        foreignersTag?: string(name='foreigners_tag'),
        hotelName?: string(name='hotel_name'),
        hotelStar?: string(name='hotel_star', example='5'),
        index?: string(name='index', example='4564547'),
        invoiceTitle?: string(name='invoice_title'),
        isEarlyDeparture?: string(name='is_early_departure'),
        isNegotiation?: string(name='is_negotiation'),
        isShareStr?: string(name='is_share_str'),
        location?: string(name='location'),
        mainApplyId?: string(name='main_apply_id', example='132143534543'),
        mappingCompanyCode?: string(name='mapping_company_code'),
        nights?: int32(name='nights', example='2'),
        orderId?: string(name='order_id', example='110285961234324'),
        orderPrice?: double(name='order_price', example='1088.96'),
        orderStatusDesc?: string(name='order_status_desc', example='null'),
        orderType?: string(name='order_type'),
        originalReserveRule?: string(name='original_reserve_rule'),
        overApplyId?: string(name='over_apply_id', example='534545345'),
        paymentDepartmentId?: string(name='payment_department_id'),
        paymentDepartmentName?: string(name='payment_department_name'),
        personRefundFee?: double(name='person_refund_fee', example='34'),
        personSettlePrice?: double(name='person_settle_price', example='88.96'),
        position?: string(name='position'),
        positionLevel?: string(name='position_level'),
        primaryId?: long(name='primary_id', example='4564547'),
        processorOaCode?: string(name='processor_oa_code'),
        projectCode?: string(name='project_code', example='2345235435'),
        projectName?: string(name='project_name'),
        promotionFee?: double(name='promotion_fee', example='113.02'),
        rate?: string(name='rate', example='1.0d'),
        remark?: string(name='remark'),
        reserveRule?: int32(name='reserve_rule', example='1'),
        roomNo?: string(name='room_no'),
        roomNumber?: int32(name='room_number', example='1'),
        roomPrice?: double(name='room_price', example='1201.98'),
        roomType?: string(name='room_type'),
        serviceFee?: double(name='service_fee', example='23.9'),
        settleTypeDesc?: string(name='settle_type_desc'),
        settlementFee?: double(name='settlement_fee', example='350'),
        settlementGrantFee?: double(name='settlement_grant_fee', example='6.11'),
        settlementTime?: string(name='settlement_time', example='2022-05-15T22:27Z'),
        settlementType?: string(name='settlement_type', example='4'),
        sio?: string(name='sio'),
        status?: int32(name='status', example='1'),
        statusDesc?: string(name='status_desc'),
        subOrderId?: string(name='sub_order_id', example='123123232'),
        taxRate?: string(name='tax_rate', example='6%'),
        thirdInvoiceId?: string(name='third_invoice_id', example='1321445511345'),
        thirdItineraryId?: string(name='third_itinerary_id', example='AB0-CDE-1-F-1234567891011'),
        thirdPartBusinessId?: string(name='third_part_business_id', example='202311081011000348578'),
        thirdpartApplyId?: string(name='thirdpart_apply_id', example='MGI18000230221072483'),
        totalNights?: int32(name='total_nights', example='2'),
        tradeActionDesc?: string(name='trade_action_desc'),
        travelerEmail?: string(name='traveler_email'),
        travelerId?: string(name='traveler_id', example='al_xinuan.zsy'),
        travelerJobNo?: string(name='traveler_job_no', example='345345'),
        travelerMemberType?: string(name='traveler_member_type'),
        travelerName?: string(name='traveler_name'),
        voucherType?: int32(name='voucher_type', example='11'),
        voucherTypeDesc?: string(name='voucher_type_desc'),
      }
    ](name='data_list'),
    orderId?: string(name='order_id', example='1012039195340093034'),
    periodEnd?: string(name='period_end', example='2022-11-02'),
    periodStart?: string(name='period_start', example='2022-11-01'),
    scrollId?: string(name='scroll_id'),
    totalSize?: long(name='total_size', example='30'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', example='210e877f16763560074236874d5268'),
  success?: boolean(name='success', example='True'),
  traceId?: string(name='traceId', example='2103a08a16861217249785276d5a87'),
}

model IeHotelBillSettlementQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IeHotelBillSettlementQueryResponseBody(name='body'),
}

/**
 * @summary 查询国际/中国港澳台酒店记账数据
 *
 * @param request IeHotelBillSettlementQueryRequest
 * @param headers IeHotelBillSettlementQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IeHotelBillSettlementQueryResponse
 */
async function ieHotelBillSettlementQueryWithOptions(request: IeHotelBillSettlementQueryRequest, headers: IeHotelBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): IeHotelBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billBatch)) {
    query['bill_batch'] = request.billBatch;
  }
  if (!Util.isUnset(request.category)) {
    query['category'] = request.category;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }
  if (!Util.isUnset(request.scrollId)) {
    query['scroll_id'] = request.scrollId;
  }
  if (!Util.isUnset(request.scrollMod)) {
    query['scroll_mod'] = request.scrollMod;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IeHotelBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/ie-hotel/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询国际/中国港澳台酒店记账数据
 *
 * @param request IeHotelBillSettlementQueryRequest
 * @return IeHotelBillSettlementQueryResponse
 */
async function ieHotelBillSettlementQuery(request: IeHotelBillSettlementQueryRequest): IeHotelBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IeHotelBillSettlementQueryHeaders{};
  return ieHotelBillSettlementQueryWithOptions(request, headers, runtime);
}

model InsInvoiceScanQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model InsInvoiceScanQueryRequest {
  billDate?: string(name='bill_date', example='2022-12-01'),
  billId?: long(name='bill_id', example='123'),
  invoiceSubTaskId?: long(name='invoice_sub_task_id', example='456'),
  pageNo?: int32(name='page_no', example='1'),
  pageSize?: int32(name='page_size', example='20'),
}

model InsInvoiceScanQueryResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    items?: [ 
      {
        amountWithTax?: string(name='amount_with_tax', example='20'),
        amountWithoutTax?: string(name='amount_without_tax', example='18.87'),
        billDate?: string(name='bill_date', example='2022-12-01'),
        category?: int32(name='category'),
        checkCode?: string(name='check_code', description='校验码', example='07122942791187744475'),
        costCenter?: string(name='cost_center'),
        department?: string(name='department'),
        drawer?: string(name='drawer', description='开票人'),
        id?: string(name='id', description='应用ID', example='566'),
        insuranceCompany?: string(name='insurance_company'),
        insuranceOrderId?: string(name='insurance_order_id', example='T123343234242323232'),
        insuranceType?: string(name='insurance_type'),
        invoiceCode?: string(name='invoice_code', example='3300111303'),
        invoiceDay?: string(name='invoice_day', example='2022-12-01'),
        invoiceDetails?: [ 
          {
            amount?: string(name='amount', description='金额', example='75.21'),
            index?: string(name='index', description='行号', example='0'),
            itemName?: string(name='item_name', description='货物或应税劳务、服务名称'),
            quantity?: string(name='quantity', description='数量', example='1'),
            specification?: string(name='specification', description='规格型号', example='66PT11230069'),
            tax?: string(name='tax', description='税额', example='12.79'),
            taxRate?: string(name='tax_rate', description='税率', example='17%'),
            unit?: string(name='unit', description='单位'),
            unitPrice?: string(name='unit_price', description='单价', example='75.21'),
          }
        ](name='invoice_details', description='发票明细'),
        invoiceLocation?: string(name='invoice_location', description='发票地区'),
        invoiceNo?: string(name='invoice_no', example='24021111'),
        invoiceTitle?: string(name='invoice_title', description='发票抬头'),
        invoiceType?: int32(name='invoice_type'),
        machineCode?: string(name='machine_code', description='机器码', example='661619906841'),
        ofdOssUrl?: string(name='ofd_oss_url'),
        orderId?: long(name='order_id', example='3137168772101111000'),
        ossUrl?: string(name='oss_url', example='https://www.testurl.com'),
        passenger?: string(name='passenger'),
        passwordArea?: string(name='password_area', description='密码区', example='<87*>>53>5023>-446>/4+83/5* *>5/81<75/1931>4>>'),
        project?: string(name='project'),
        purchaserBankAccountInfo?: string(name='purchaser_bank_account_info', description='购方银行信息'),
        purchaserContactInfo?: string(name='purchaser_contact_info', description='购方联系方式'),
        purchaserName?: string(name='purchaser_name'),
        purchaserTaxNo?: string(name='purchaser_tax_no', example='91441111111111111S'),
        recipient?: string(name='recipient', description='收款人'),
        remarks?: string(name='remarks', description='备注'),
        reviewer?: string(name='reviewer', description='复核人'),
        sellerBankAccountInfo?: string(name='seller_bank_account_info', description='销售方银行信息'),
        sellerContactInfo?: string(name='seller_contact_info', description='销售方联系方式'),
        sellerName?: string(name='seller_name'),
        sellerTaxNo?: string(name='seller_tax_no', example='91441111111111111N'),
        smartCheckCode?: string(name='smart_check_code', description='校验码', example='4475'),
        taxAmount?: string(name='tax_amount', example='1.13'),
        taxRate?: string(name='tax_rate', example='6%'),
        totalAmountInWords?: string(name='total_amount_in_words', description='大写金额'),
        xmlOssUrl?: string(name='xml_oss_url'),
      }
    ](name='items'),
    pageNo?: int32(name='page_no', example='1'),
    pageSize?: int32(name='page_size', example='20'),
    totalPage?: int32(name='total_page', example='2'),
    totalSize?: int32(name='total_size', example='30'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210e847f16611516748613869de4f6'),
}

model InsInvoiceScanQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsInvoiceScanQueryResponseBody(name='body'),
}

/**
 * @summary 查询保险电子发票
 *
 * @param request InsInvoiceScanQueryRequest
 * @param headers InsInvoiceScanQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InsInvoiceScanQueryResponse
 */
async function insInvoiceScanQueryWithOptions(request: InsInvoiceScanQueryRequest, headers: InsInvoiceScanQueryHeaders, runtime: Util.RuntimeOptions): InsInvoiceScanQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billDate)) {
    query['bill_date'] = request.billDate;
  }
  if (!Util.isUnset(request.billId)) {
    query['bill_id'] = request.billId;
  }
  if (!Util.isUnset(request.invoiceSubTaskId)) {
    query['invoice_sub_task_id'] = request.invoiceSubTaskId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InsInvoiceScanQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/scan/v1/ins-invoice`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询保险电子发票
 *
 * @param request InsInvoiceScanQueryRequest
 * @return InsInvoiceScanQueryResponse
 */
async function insInvoiceScanQuery(request: InsInvoiceScanQueryRequest): InsInvoiceScanQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InsInvoiceScanQueryHeaders{};
  return insInvoiceScanQueryWithOptions(request, headers, runtime);
}

model InsureOrderApplyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model InsureOrderApplyRequest {
  btripUserId?: string(name='btrip_user_id', description='This parameter is required.', example='100000102'),
  buyerName?: string(name='buyer_name'),
  insOrderId?: string(name='ins_order_id', description='This parameter is required.', example='1000003000000490'),
  isvName?: string(name='isv_name', example='PostalSavingsBank'),
  outOrderId?: string(name='out_order_id', example='202310101026030'),
  outSubOrderId?: string(name='out_sub_order_id', example='1020030003332000'),
  supplierCode?: string(name='supplier_code', example='fliggy'),
}

model InsureOrderApplyResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    insOrderId?: string(name='ins_order_id', example='1021000196500370003'),
    insOrderPolicyList?: [ 
      {
        outSubInsOrderId?: string(name='out_sub_ins_order_id', example='1022196500378006'),
        policyNo?: string(name='policy_no', example='po10002300201'),
        status?: string(name='status', example='INIT'),
        subInsOrderId?: string(name='sub_ins_order_id', example='1022196500378003'),
      }
    ](name='ins_order_policy_list'),
  }(name='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210e800316781571635951548d1e9d'),
}

model InsureOrderApplyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsureOrderApplyResponseBody(name='body'),
}

/**
 * @summary 保险订单申请
 *
 * @param request InsureOrderApplyRequest
 * @param headers InsureOrderApplyHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InsureOrderApplyResponse
 */
async function insureOrderApplyWithOptions(request: InsureOrderApplyRequest, headers: InsureOrderApplyHeaders, runtime: Util.RuntimeOptions): InsureOrderApplyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    body['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.buyerName)) {
    body['buyer_name'] = request.buyerName;
  }
  if (!Util.isUnset(request.insOrderId)) {
    body['ins_order_id'] = request.insOrderId;
  }
  if (!Util.isUnset(request.isvName)) {
    body['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.outSubOrderId)) {
    body['out_sub_order_id'] = request.outSubOrderId;
  }
  if (!Util.isUnset(request.supplierCode)) {
    body['supplier_code'] = request.supplierCode;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InsureOrderApply',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/insurances/action/apply`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 保险订单申请
 *
 * @param request InsureOrderApplyRequest
 * @return InsureOrderApplyResponse
 */
async function insureOrderApply(request: InsureOrderApplyRequest): InsureOrderApplyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InsureOrderApplyHeaders{};
  return insureOrderApplyWithOptions(request, headers, runtime);
}

model InsureOrderCancelHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model InsureOrderCancelRequest {
  btripUserId?: string(name='btrip_user_id', description='This parameter is required.', example='2000310301'),
  buyerName?: string(name='buyer_name'),
  isvName?: string(name='isv_name', example='open12igetbis4o07v10B1TlOWcM00'),
  supplierCode?: string(name='supplier_code', example='fliggy'),
}

model InsureOrderCancelResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='210bc41416861901778051918d1942'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model InsureOrderCancelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsureOrderCancelResponseBody(name='body'),
}

/**
 * @summary 保险订单取消
 *
 * @param request InsureOrderCancelRequest
 * @param headers InsureOrderCancelHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InsureOrderCancelResponse
 */
async function insureOrderCancelWithOptions(insOrderId: string, request: InsureOrderCancelRequest, headers: InsureOrderCancelHeaders, runtime: Util.RuntimeOptions): InsureOrderCancelResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    query['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.buyerName)) {
    query['buyer_name'] = request.buyerName;
  }
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.supplierCode)) {
    query['supplier_code'] = request.supplierCode;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InsureOrderCancel',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/insurances/${OpenApiUtil.getEncodeParam(insOrderId)}/action/cancel`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 保险订单取消
 *
 * @param request InsureOrderCancelRequest
 * @return InsureOrderCancelResponse
 */
async function insureOrderCancel(insOrderId: string, request: InsureOrderCancelRequest): InsureOrderCancelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InsureOrderCancelHeaders{};
  return insureOrderCancelWithOptions(insOrderId, request, headers, runtime);
}

model InsureOrderCreateHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model InsureOrderCreateRequest {
  applicant?: {
    birthday?: string(name='birthday', example='2000-11-01'),
    btripUserId?: string(name='btrip_user_id', example='20202109390122'),
    certName?: string(name='cert_name'),
    certNo?: string(name='cert_no', example='110102200011018872'),
    certType?: string(name='cert_type', example='100'),
    gender?: string(name='gender', example='F'),
    phone?: string(name='phone', example='1000000'),
  }(name='applicant', description='This parameter is required.'),
  btripUserId?: string(name='btrip_user_id', example='20202109390122'),
  buyerName?: string(name='buyer_name'),
  insPersonAndSegmentList?: [ 
    {
      insureSegment?: {
        arrAirportCode?: string(name='arr_airport_code', example='YNT'),
        arrCity?: string(name='arr_city', example='CKG'),
        arrCityCode?: string(name='arr_city_code', example='HGH'),
        arrTime?: string(name='arr_time', example='2023-10-31 13:10:00'),
        depAirportCode?: string(name='dep_airport_code', example='HGH'),
        depCity?: string(name='dep_city', example='HGH'),
        depCityCode?: string(name='dep_city_code', example='CAN'),
        depTime?: string(name='dep_time', example='2023-10-31 10:55:00'),
        flightNo?: string(name='flight_no', example='ZH9891'),
      }(name='insure_segment'),
      insured?: {
        birthday?: string(name='birthday', example='2000-11-01'),
        btripUserId?: string(name='btrip_user_id', example='20202109390122'),
        certName?: string(name='cert_name'),
        certNo?: string(name='cert_no', example='110102200011018872'),
        certType?: string(name='cert_type', example='100'),
        gender?: string(name='gender', example='F'),
        phone?: string(name='phone', example='1000000'),
      }(name='insured'),
      outSubInsOrderId?: string(name='out_sub_ins_order_id', example='12399992002002010'),
    }
  ](name='ins_person_and_segment_list', description='This parameter is required.'),
  isvName?: string(name='isv_name', description='This parameter is required.', example='PostalSavingsBank'),
  outInsOrderId?: string(name='out_ins_order_id', example='100000320302020'),
  outOrderId?: string(name='out_order_id', description='This parameter is required.', example='202310101026030'),
  outSubOrderId?: string(name='out_sub_order_id', example='1020030003332000'),
  supplierCode?: string(name='supplier_code', example='fliggy'),
}

model InsureOrderCreateShrinkRequest {
  applicantShrink?: string(name='applicant', description='This parameter is required.'),
  btripUserId?: string(name='btrip_user_id', example='20202109390122'),
  buyerName?: string(name='buyer_name'),
  insPersonAndSegmentListShrink?: string(name='ins_person_and_segment_list', description='This parameter is required.'),
  isvName?: string(name='isv_name', description='This parameter is required.', example='PostalSavingsBank'),
  outInsOrderId?: string(name='out_ins_order_id', example='100000320302020'),
  outOrderId?: string(name='out_order_id', description='This parameter is required.', example='202310101026030'),
  outSubOrderId?: string(name='out_sub_order_id', example='1020030003332000'),
  supplierCode?: string(name='supplier_code', example='fliggy'),
}

model InsureOrderCreateResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    copies?: int32(name='copies', example='1'),
    insureOrderDetailList?: [ 
      {
        outSubInsOrderId?: string(name='out_sub_ins_order_id', example='1992939412431231'),
        policyNo?: string(name='policy_no', example='121234444'),
        status?: string(name='status', example='INIT'),
        subInsOrderId?: string(name='sub_ins_order_id', example='1022196500378001'),
      }
    ](name='insure_order_detail_list'),
    insureOrderId?: string(name='insure_order_id', example='1021000196500370001'),
    premium?: long(name='premium', example='3000'),
  }(name='module'),
  requestId?: string(name='requestId', example='C6055EA5-C566-511D-9FC4-5E4D45182711'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210f079916782711059363565d6be1'),
}

model InsureOrderCreateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsureOrderCreateResponseBody(name='body'),
}

/**
 * @summary 保险订单创建
 *
 * @param tmpReq InsureOrderCreateRequest
 * @param headers InsureOrderCreateHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InsureOrderCreateResponse
 */
async function insureOrderCreateWithOptions(tmpReq: InsureOrderCreateRequest, headers: InsureOrderCreateHeaders, runtime: Util.RuntimeOptions): InsureOrderCreateResponse {
  Util.validateModel(tmpReq);
  var request = new InsureOrderCreateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.applicant)) {
    request.applicantShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.applicant, 'applicant', 'json');
  }
  if (!Util.isUnset(tmpReq.insPersonAndSegmentList)) {
    request.insPersonAndSegmentListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.insPersonAndSegmentList, 'ins_person_and_segment_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.applicantShrink)) {
    body['applicant'] = request.applicantShrink;
  }
  if (!Util.isUnset(request.btripUserId)) {
    body['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.buyerName)) {
    body['buyer_name'] = request.buyerName;
  }
  if (!Util.isUnset(request.insPersonAndSegmentListShrink)) {
    body['ins_person_and_segment_list'] = request.insPersonAndSegmentListShrink;
  }
  if (!Util.isUnset(request.isvName)) {
    body['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.outInsOrderId)) {
    body['out_ins_order_id'] = request.outInsOrderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.outSubOrderId)) {
    body['out_sub_order_id'] = request.outSubOrderId;
  }
  if (!Util.isUnset(request.supplierCode)) {
    body['supplier_code'] = request.supplierCode;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InsureOrderCreate',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/insurances/action/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 保险订单创建
 *
 * @param request InsureOrderCreateRequest
 * @return InsureOrderCreateResponse
 */
async function insureOrderCreate(request: InsureOrderCreateRequest): InsureOrderCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InsureOrderCreateHeaders{};
  return insureOrderCreateWithOptions(request, headers, runtime);
}

model InsureOrderDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model InsureOrderDetailRequest {
  btripUserId?: string(name='btrip_user_id', description='This parameter is required.', example='10000001'),
  buyerName?: string(name='buyer_name'),
  insOrderId?: string(name='ins_order_id', description='This parameter is required.', example='1021000196440356901'),
  isvName?: string(name='isv_name', example='PostalSavingsBank'),
  supplierCode?: string(name='supplier_code', example='fliggy'),
}

model InsureOrderDetailResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    applicant?: {
      certName?: string(name='cert_name'),
      certNo?: string(name='cert_no', example='3300000000000'),
      certType?: string(name='cert_type', example='100'),
      phone?: string(name='phone', example='13000000000'),
    }(name='applicant'),
    insOrderId?: string(name='ins_order_id', example='1021000196440356901'),
    insureOrderDetailList?: [ 
      {
        effectiveEndTime?: string(name='effective_end_time', example='2023-10-12 10:00:00'),
        effectiveStartTime?: string(name='effective_start_time', example='2023-10-11 10:00:00'),
        insureSegment?: {
          arrAirportCode?: string(name='arr_airport_code', example='TYN'),
          arrCity?: string(name='arr_city', example='HYN'),
          arrCityCode?: string(name='arr_city_code', example='SYX'),
          arrTime?: string(name='arr_time', example='2023-10-11 11:30:00'),
          depAirportCode?: string(name='dep_airport_code', example='TYN'),
          depCity?: string(name='dep_city', example='CTU'),
          depCityCode?: string(name='dep_city_code', example='LXA'),
          depTime?: string(name='dep_time', example='2023-10-11 11:30:00'),
          flightNo?: string(name='flight_no', example='CZ3501'),
        }(name='insure_segment'),
        insureTime?: string(name='insure_time', example='2023-10-11 11:30:00'),
        insured?: {
          birthday?: string(name='birthday', example='1983-11-25'),
          btripUserId?: string(name='btrip_user_id', example='100001'),
          certName?: string(name='cert_name'),
          certNo?: string(name='cert_no', example='30000000000'),
          certType?: string(name='cert_type', example='100'),
          gender?: string(name='gender', example='F'),
          phone?: string(name='phone', example='130000000'),
        }(name='insured'),
        outSubInsOrderId?: string(name='out_sub_ins_order_id', example='1021000196440356922'),
        policyNo?: string(name='policy_no', example='22222222222'),
        price?: long(name='price', example='30'),
        productName?: string(name='product_name'),
        productNo?: string(name='product_no', example='008801.accident.flight.104000'),
        status?: string(name='status', example='CLOSED'),
        subInsOrderId?: string(name='sub_ins_order_id', example='1021000196440356901'),
      }
    ](name='insure_order_detail_list'),
    status?: string(name='status', example='CLOSED'),
  }(name='module'),
  requestId?: string(name='requestId', example='4498BDAB-2AAF-5B6F-942A-3C1C935345C9'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model InsureOrderDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsureOrderDetailResponseBody(name='body'),
}

/**
 * @summary 保险订单查询
 *
 * @param request InsureOrderDetailRequest
 * @param headers InsureOrderDetailHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InsureOrderDetailResponse
 */
async function insureOrderDetailWithOptions(request: InsureOrderDetailRequest, headers: InsureOrderDetailHeaders, runtime: Util.RuntimeOptions): InsureOrderDetailResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    query['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.buyerName)) {
    query['buyer_name'] = request.buyerName;
  }
  if (!Util.isUnset(request.insOrderId)) {
    query['ins_order_id'] = request.insOrderId;
  }
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.supplierCode)) {
    query['supplier_code'] = request.supplierCode;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InsureOrderDetail',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/insurances/action/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 保险订单查询
 *
 * @param request InsureOrderDetailRequest
 * @return InsureOrderDetailResponse
 */
async function insureOrderDetail(request: InsureOrderDetailRequest): InsureOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InsureOrderDetailHeaders{};
  return insureOrderDetailWithOptions(request, headers, runtime);
}

model InsureOrderPayHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model InsureOrderPayRequest {
  btripUserId?: string(name='btrip_user_id', description='This parameter is required.', example='100000001'),
  buyerName?: string(name='buyer_name'),
  isvName?: string(name='isv_name', example='PostalSavingsBank'),
  outOrderId?: string(name='out_order_id', example='202310101026030'),
  outSubOrderId?: string(name='out_sub_order_id', example='1020030003332000'),
  paymentAmount?: long(name='payment_amount', description='This parameter is required.', example='3000'),
  supplierCode?: string(name='supplier_code', example='fliggy'),
}

model InsureOrderPayResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='210bc4ba16799697693368683dbafc'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model InsureOrderPayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsureOrderPayResponseBody(name='body'),
}

/**
 * @summary 保险订单支付
 *
 * @param request InsureOrderPayRequest
 * @param headers InsureOrderPayHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InsureOrderPayResponse
 */
async function insureOrderPayWithOptions(insOrderId: string, request: InsureOrderPayRequest, headers: InsureOrderPayHeaders, runtime: Util.RuntimeOptions): InsureOrderPayResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    body['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.buyerName)) {
    body['buyer_name'] = request.buyerName;
  }
  if (!Util.isUnset(request.isvName)) {
    body['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.outSubOrderId)) {
    body['out_sub_order_id'] = request.outSubOrderId;
  }
  if (!Util.isUnset(request.paymentAmount)) {
    body['payment_amount'] = request.paymentAmount;
  }
  if (!Util.isUnset(request.supplierCode)) {
    body['supplier_code'] = request.supplierCode;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InsureOrderPay',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/insurances/${OpenApiUtil.getEncodeParam(insOrderId)}/action/pay`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 保险订单支付
 *
 * @param request InsureOrderPayRequest
 * @return InsureOrderPayResponse
 */
async function insureOrderPay(insOrderId: string, request: InsureOrderPayRequest): InsureOrderPayResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InsureOrderPayHeaders{};
  return insureOrderPayWithOptions(insOrderId, request, headers, runtime);
}

model InsureOrderRefundHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model InsureOrderRefundRequest {
  btripUserId?: string(name='btrip_user_id', example='1000001'),
  buyerName?: string(name='buyer_name'),
  isvName?: string(name='isv_name', example='PostalSavingsBank'),
  outApplyId?: string(name='out_apply_id', example='1021000196440356908'),
  policyNoList?: [ string ](name='policy_no_list'),
  subInsOrderIds?: [ string ](name='sub_ins_order_ids'),
  supplierCode?: string(name='supplier_code', example='fliggy'),
}

model InsureOrderRefundShrinkRequest {
  btripUserId?: string(name='btrip_user_id', example='1000001'),
  buyerName?: string(name='buyer_name'),
  isvName?: string(name='isv_name', example='PostalSavingsBank'),
  outApplyId?: string(name='out_apply_id', example='1021000196440356908'),
  policyNoListShrink?: string(name='policy_no_list'),
  subInsOrderIdsShrink?: string(name='sub_ins_order_ids'),
  supplierCode?: string(name='supplier_code', example='fliggy'),
}

model InsureOrderRefundResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    applyId?: string(name='apply_id', example='118526587'),
    insOrderId?: string(name='ins_order_id', example='1423041410342678003'),
    insRefundList?: [ 
      {
        policyRefundNo?: string(name='policy_refund_no', example='po102000399221'),
        refundStatus?: string(name='refund_status', example='REFUND_SUCCESS'),
        subInsOrderId?: string(name='sub_ins_order_id', example='1230012499921'),
      }
    ](name='ins_refund_list'),
    outApplyId?: string(name='out_apply_id', example='1423041410342678022'),
  }(name='module'),
  requestId?: string(name='requestId', example='2103ad3116824902540648188de7ac'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210e846c16726306481681232d441f'),
}

model InsureOrderRefundResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsureOrderRefundResponseBody(name='body'),
}

/**
 * @summary 保险订单退保
 *
 * @param tmpReq InsureOrderRefundRequest
 * @param headers InsureOrderRefundHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InsureOrderRefundResponse
 */
async function insureOrderRefundWithOptions(insOrderId: string, tmpReq: InsureOrderRefundRequest, headers: InsureOrderRefundHeaders, runtime: Util.RuntimeOptions): InsureOrderRefundResponse {
  Util.validateModel(tmpReq);
  var request = new InsureOrderRefundShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.policyNoList)) {
    request.policyNoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.policyNoList, 'policy_no_list', 'json');
  }
  if (!Util.isUnset(tmpReq.subInsOrderIds)) {
    request.subInsOrderIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.subInsOrderIds, 'sub_ins_order_ids', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    body['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.buyerName)) {
    body['buyer_name'] = request.buyerName;
  }
  if (!Util.isUnset(request.isvName)) {
    body['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.outApplyId)) {
    body['out_apply_id'] = request.outApplyId;
  }
  if (!Util.isUnset(request.policyNoListShrink)) {
    body['policy_no_list'] = request.policyNoListShrink;
  }
  if (!Util.isUnset(request.subInsOrderIdsShrink)) {
    body['sub_ins_order_ids'] = request.subInsOrderIdsShrink;
  }
  if (!Util.isUnset(request.supplierCode)) {
    body['supplier_code'] = request.supplierCode;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InsureOrderRefund',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/insurances/${OpenApiUtil.getEncodeParam(insOrderId)}/action/refund`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 保险订单退保
 *
 * @param request InsureOrderRefundRequest
 * @return InsureOrderRefundResponse
 */
async function insureOrderRefund(insOrderId: string, request: InsureOrderRefundRequest): InsureOrderRefundResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InsureOrderRefundHeaders{};
  return insureOrderRefundWithOptions(insOrderId, request, headers, runtime);
}

model InsureOrderUrlDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model InsureOrderUrlDetailResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: string(name='module', example='https://siopuat.mingya.com.cn/siop-fliggy/index.html#/list?token=fR4iOOZWgG'),
  requestId?: string(name='requestId', example='210bc59616861088185764700d7589'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='213e212c16975080875814628effac'),
}

model InsureOrderUrlDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsureOrderUrlDetailResponseBody(name='body'),
}

/**
 * @summary 查询保单详情链接
 *
 * @param headers InsureOrderUrlDetailHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InsureOrderUrlDetailResponse
 */
async function insureOrderUrlDetailWithOptions(insOrderId: string, headers: InsureOrderUrlDetailHeaders, runtime: Util.RuntimeOptions): InsureOrderUrlDetailResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'InsureOrderUrlDetail',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/insurances/${OpenApiUtil.getEncodeParam(insOrderId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询保单详情链接
 *
 * @return InsureOrderUrlDetailResponse
 */
async function insureOrderUrlDetail(insOrderId: string): InsureOrderUrlDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InsureOrderUrlDetailHeaders{};
  return insureOrderUrlDetailWithOptions(insOrderId, headers, runtime);
}

model InsureRefundDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model InsureRefundDetailRequest {
  applyId?: string(name='apply_id', example='1423052318072952023'),
  btripUserId?: string(name='btrip_user_id', example='1000000001'),
  buyerName?: string(name='buyer_name'),
  insOrderId?: string(name='ins_order_id', example='1000003000000490'),
  isvName?: string(name='isv_name', example='PostalSavingsBank'),
  outApplyId?: string(name='out_apply_id', example='1021000196440356908'),
  supplierCode?: string(name='supplier_code', example='fliggy'),
}

model InsureRefundDetailResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    applyId?: string(name='apply_id', example='1423050918202760437'),
    gmtCreate?: string(name='gmt_create', example='2022-07-20T10:40Z'),
    gmtModified?: string(name='gmt_modified', example='2022-07-04T16:13Z'),
    insOrderId?: string(name='ins_order_id', example='100000000001'),
    insureOrder?: {
      applicant?: {
        certName?: string(name='cert_name'),
        certNo?: string(name='cert_no', example='300000000000000001'),
        certType?: string(name='cert_type', example='102'),
        phone?: string(name='phone', example='10000000'),
      }(name='applicant'),
      bizOrderId?: string(name='biz_order_id', example='5142701029379'),
      bizType?: int32(name='biz_type', example='1'),
      closeTime?: string(name='close_time', example='2023-04-11T21:21Z'),
      insOrderId?: string(name='ins_order_id', example='100000000001'),
      outInsOrderId?: string(name='out_ins_order_id', example='200300333333'),
      payTime?: string(name='pay_time', example='2023-04-11T21:21Z'),
      price?: long(name='price', example='83000'),
      settleType?: int32(name='settle_type', example='4'),
      status?: string(name='status', example='PAID'),
    }(name='insure_order'),
    outApplyId?: string(name='out_apply_id', example='23102301010'),
    subOrderRefundList?: [ 
      {
        effectiveEndTime?: string(name='effective_end_time', example='2023-04-17T20:25Z'),
        effectiveStartTime?: string(name='effective_start_time', example='2023-04-17T20:25Z'),
        insureSegment?: {
          arrAirportCode?: string(name='arr_airport_code', example='WHA'),
          arrCity?: string(name='arr_city'),
          arrCityCode?: string(name='arr_city_code', example='YTY'),
          arrTime?: string(name='arr_time', example='2023-05-27 23:00:00'),
          depAirportCode?: string(name='dep_airport_code', example='NGB'),
          depCity?: string(name='dep_city'),
          depCityCode?: string(name='dep_city_code', example='NGB'),
          depTime?: string(name='dep_time', example='2023-05-27 20:30:00'),
          flightNo?: string(name='flight_no', example='CZ3501'),
        }(name='insure_segment'),
        insureTime?: string(name='insure_time', example='2023-04-17T20:07Z'),
        insured?: {
          birthday?: string(name='birthday', example='1996-07-25'),
          btripUserId?: string(name='btrip_user_id', example='10000001'),
          certName?: string(name='cert_name'),
          certNo?: string(name='cert_no', example='300000000000000000'),
          certType?: string(name='cert_type', example='102'),
          gender?: string(name='gender', example='F'),
          phone?: string(name='phone', example='1000000'),
        }(name='insured'),
        outSubInsOrderId?: string(name='out_sub_ins_order_id', example='OUT123333444'),
        policyNo?: string(name='policy_no', example='T230411000000140183629'),
        policyRefundNo?: string(name='policy_refund_no', example='1024194640018002'),
        price?: long(name='price', example='73000'),
        productName?: string(name='product_name'),
        productNo?: string(name='product_no', example='008801.accident.flight.104000'),
        refundStatus?: string(name='refund_status', example='REFUND_SUCCESS'),
        refundTime?: string(name='refund_time', example='2023-04-17T20:25Z'),
        status?: string(name='status', example='REFUND_SUCCESS'),
        subInsOrderId?: string(name='sub_ins_order_id', example='s1231231344'),
      }
    ](name='sub_order_refund_list'),
  }(name='module'),
  requestId?: string(name='requestId', example='2103a75b16843756660655464d56a9'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210bc44e16818128994413918de6c1'),
}

model InsureRefundDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsureRefundDetailResponseBody(name='body'),
}

/**
 * @summary 退保详情查询
 *
 * @param request InsureRefundDetailRequest
 * @param headers InsureRefundDetailHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InsureRefundDetailResponse
 */
async function insureRefundDetailWithOptions(request: InsureRefundDetailRequest, headers: InsureRefundDetailHeaders, runtime: Util.RuntimeOptions): InsureRefundDetailResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.btripUserId)) {
    query['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.buyerName)) {
    query['buyer_name'] = request.buyerName;
  }
  if (!Util.isUnset(request.insOrderId)) {
    query['ins_order_id'] = request.insOrderId;
  }
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.outApplyId)) {
    query['out_apply_id'] = request.outApplyId;
  }
  if (!Util.isUnset(request.supplierCode)) {
    query['supplier_code'] = request.supplierCode;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InsureRefundDetail',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/insurances/action/refund-detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 退保详情查询
 *
 * @param request InsureRefundDetailRequest
 * @return InsureRefundDetailResponse
 */
async function insureRefundDetail(request: InsureRefundDetailRequest): InsureRefundDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InsureRefundDetailHeaders{};
  return insureRefundDetailWithOptions(request, headers, runtime);
}

model IntlFlightCreateOrderHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model IntlFlightCreateOrderRequest {
  asyncCreateOrderKey?: string(name='async_create_order_key'),
  asyncCreateOrderMode?: boolean(name='async_create_order_mode'),
  btripUserId?: string(name='btrip_user_id', description='This parameter is required.', example='10001'),
  buyerName?: string(name='buyer_name', description='This parameter is required.', example='ZHANG/SAN'),
  contactInfo?: {
    contactEmail?: string(name='contact_email', description='This parameter is required.'),
    contactName?: string(name='contact_name', description='This parameter is required.'),
    contactPhone?: string(name='contact_phone', description='This parameter is required.'),
  }(name='contact_info', description='This parameter is required.'),
  extraInfo?: map[string]string(name='extra_info'),
  isvName?: string(name='isv_name'),
  orderPrice?: long(name='order_price'),
  otaItemId?: string(name='ota_item_id', description='This parameter is required.'),
  outOrderId?: string(name='out_order_id'),
  passengerList?: [ 
    {
      birthday?: string(name='birthday', description='This parameter is required.', example='1998-12-28'),
      certInfo?: {
        certNo?: string(name='cert_no', description='This parameter is required.', example='E1234567'),
        certType?: int32(name='cert_type', description='This parameter is required.', example='1'),
        certValidDate?: string(name='cert_valid_date', description='This parameter is required.', example='2029-12-31'),
        issuePlace?: string(name='issue_place', description='This parameter is required.', example='中国大陆'),
      }(name='cert_info', description='This parameter is required.'),
      fullName?: string(name='full_name', description='This parameter is required.', example='ZHANG/SAN'),
      gender?: int32(name='gender', description='This parameter is required.', example='0'),
      jobNo?: string(name='job_no', example='L5000924'),
      nationality?: string(name='nationality', description='This parameter is required.', example='中国大陆'),
      nationalityCode?: string(name='nationality_code', description='This parameter is required.'),
      phone?: string(name='phone', description='This parameter is required.', example='13100008888'),
      type?: int32(name='type', description='This parameter is required.', example='0'),
      userId?: string(name='user_id', description='This parameter is required.', example='12292812036903456'),
      userType?: int32(name='user_type', example='0'),
    }
  ](name='passenger_list', description='This parameter is required.'),
  renderKey?: string(name='render_key'),
}

model IntlFlightCreateOrderShrinkRequest {
  asyncCreateOrderKey?: string(name='async_create_order_key'),
  asyncCreateOrderMode?: boolean(name='async_create_order_mode'),
  btripUserId?: string(name='btrip_user_id', description='This parameter is required.', example='10001'),
  buyerName?: string(name='buyer_name', description='This parameter is required.', example='ZHANG/SAN'),
  contactInfoShrink?: string(name='contact_info', description='This parameter is required.'),
  extraInfoShrink?: string(name='extra_info'),
  isvName?: string(name='isv_name'),
  orderPrice?: long(name='order_price'),
  otaItemId?: string(name='ota_item_id', description='This parameter is required.'),
  outOrderId?: string(name='out_order_id'),
  passengerListShrink?: string(name='passenger_list', description='This parameter is required.'),
  renderKey?: string(name='render_key'),
}

model IntlFlightCreateOrderResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message', example='成功'),
  module?: {
    asyncCreateOrderKey?: string(name='async_create_order_key', example='deb6372db8194f1c94c23bc4fadc508d'),
    orderId?: string(name='order_id', example='1003038197806523003'),
    outOrderId?: string(name='out_order_id', example='F11378244642107293696'),
    payLatestTime?: string(name='pay_latest_time'),
    payStatus?: int32(name='pay_status', example='0'),
    status?: int32(name='status', example='-1'),
    totalPrice?: long(name='total_price', example='22300'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='2103ad1116826479016562032da98c'),
}

model IntlFlightCreateOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IntlFlightCreateOrderResponseBody(name='body'),
}

/**
 * @summary 国际机票创建订单
 *
 * @param tmpReq IntlFlightCreateOrderRequest
 * @param headers IntlFlightCreateOrderHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IntlFlightCreateOrderResponse
 */
async function intlFlightCreateOrderWithOptions(tmpReq: IntlFlightCreateOrderRequest, headers: IntlFlightCreateOrderHeaders, runtime: Util.RuntimeOptions): IntlFlightCreateOrderResponse {
  Util.validateModel(tmpReq);
  var request = new IntlFlightCreateOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.contactInfo)) {
    request.contactInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contactInfo, 'contact_info', 'json');
  }
  if (!Util.isUnset(tmpReq.extraInfo)) {
    request.extraInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extraInfo, 'extra_info', 'json');
  }
  if (!Util.isUnset(tmpReq.passengerList)) {
    request.passengerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerList, 'passenger_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.asyncCreateOrderKey)) {
    body['async_create_order_key'] = request.asyncCreateOrderKey;
  }
  if (!Util.isUnset(request.asyncCreateOrderMode)) {
    body['async_create_order_mode'] = request.asyncCreateOrderMode;
  }
  if (!Util.isUnset(request.btripUserId)) {
    body['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.buyerName)) {
    body['buyer_name'] = request.buyerName;
  }
  if (!Util.isUnset(request.contactInfoShrink)) {
    body['contact_info'] = request.contactInfoShrink;
  }
  if (!Util.isUnset(request.extraInfoShrink)) {
    body['extra_info'] = request.extraInfoShrink;
  }
  if (!Util.isUnset(request.isvName)) {
    body['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.orderPrice)) {
    body['order_price'] = request.orderPrice;
  }
  if (!Util.isUnset(request.otaItemId)) {
    body['ota_item_id'] = request.otaItemId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.passengerListShrink)) {
    body['passenger_list'] = request.passengerListShrink;
  }
  if (!Util.isUnset(request.renderKey)) {
    body['render_key'] = request.renderKey;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'IntlFlightCreateOrder',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/intl-flight/v1/order/action/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际机票创建订单
 *
 * @param request IntlFlightCreateOrderRequest
 * @return IntlFlightCreateOrderResponse
 */
async function intlFlightCreateOrder(request: IntlFlightCreateOrderRequest): IntlFlightCreateOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IntlFlightCreateOrderHeaders{};
  return intlFlightCreateOrderWithOptions(request, headers, runtime);
}

model IntlFlightInventoryPriceCheckHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model IntlFlightInventoryPriceCheckRequest {
  btripUserId?: string(name='btrip_user_id', description='This parameter is required.', example='10001'),
  buyerName?: string(name='buyer_name', example='ZHANG/SAN'),
  isvName?: string(name='isv_name', example='ZJTD'),
  orderPrice?: long(name='order_price', example='102000'),
  otaItemId?: string(name='ota_item_id', description='This parameter is required.', example='22111acaf9ea47c09ed0db6abc45be2d_0'),
  passengerList?: [ 
    {
      birthday?: string(name='birthday', description='This parameter is required.', example='2020-01-01'),
      certInfo?: {
        certNo?: string(name='cert_no', description='This parameter is required.', example='H123456'),
        certType?: int32(name='cert_type', description='This parameter is required.', example='1'),
        certValidDate?: string(name='cert_valid_date', example='2033-01-09'),
        issuePlace?: string(name='issue_place', example='中国大陆'),
      }(name='cert_info', description='This parameter is required.'),
      fullName?: string(name='full_name', description='This parameter is required.', example='ZHANG/SAN'),
      gender?: int32(name='gender', description='This parameter is required.', example='0'),
      jobNo?: string(name='job_no', example='L5000924'),
      nationality?: string(name='nationality', description='This parameter is required.', example='中国大陆'),
      nationalityCode?: string(name='nationality_code', example='CN'),
      phone?: string(name='phone', description='This parameter is required.', example='18012341234'),
      type?: int32(name='type', description='This parameter is required.', example='0'),
      userId?: string(name='user_id', description='This parameter is required.', example='10001'),
      userType?: int32(name='user_type', example='0'),
    }
  ](name='passenger_list', description='This parameter is required.'),
}

model IntlFlightInventoryPriceCheckShrinkRequest {
  btripUserId?: string(name='btrip_user_id', description='This parameter is required.', example='10001'),
  buyerName?: string(name='buyer_name', example='ZHANG/SAN'),
  isvName?: string(name='isv_name', example='ZJTD'),
  orderPrice?: long(name='order_price', example='102000'),
  otaItemId?: string(name='ota_item_id', description='This parameter is required.', example='22111acaf9ea47c09ed0db6abc45be2d_0'),
  passengerListShrink?: string(name='passenger_list', description='This parameter is required.'),
}

model IntlFlightInventoryPriceCheckResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message', example='成功'),
  module?: {
    checkSuccess?: boolean(name='check_success', example='true'),
    failType?: int32(name='fail_type', example='0'),
    passengerChangedPriceInfoList?: [ 
      {
        changed?: boolean(name='changed', example='false'),
        changedPrice?: {
          taxPrice?: long(name='tax_price', example='12000'),
          ticketPrice?: long(name='ticket_price', example='90000'),
        }(name='changed_price'),
        originalPrice?: {
          taxPrice?: long(name='tax_price', example='12000'),
          ticketPrice?: long(name='ticket_price', example='80000'),
        }(name='original_price'),
        passengerType?: int32(name='passenger_type', example='0'),
      }
    ](name='passenger_changed_price_info_list'),
    renderKey?: string(name='render_key', example='fcoid_deb6372db8194f1c94c23bc4fadc508d'),
  }(name='module'),
  requestId?: string(name='requestId', example='92359A00-85D8-16C4-AED0-249618DEEC17'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='2103ad1516839612078738332dea5c'),
}

model IntlFlightInventoryPriceCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IntlFlightInventoryPriceCheckResponseBody(name='body'),
}

/**
 * @summary 国际机票验舱验价
 *
 * @param tmpReq IntlFlightInventoryPriceCheckRequest
 * @param headers IntlFlightInventoryPriceCheckHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IntlFlightInventoryPriceCheckResponse
 */
async function intlFlightInventoryPriceCheckWithOptions(tmpReq: IntlFlightInventoryPriceCheckRequest, headers: IntlFlightInventoryPriceCheckHeaders, runtime: Util.RuntimeOptions): IntlFlightInventoryPriceCheckResponse {
  Util.validateModel(tmpReq);
  var request = new IntlFlightInventoryPriceCheckShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.passengerList)) {
    request.passengerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerList, 'passenger_list', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    query['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.buyerName)) {
    query['buyer_name'] = request.buyerName;
  }
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.orderPrice)) {
    query['order_price'] = request.orderPrice;
  }
  if (!Util.isUnset(request.otaItemId)) {
    query['ota_item_id'] = request.otaItemId;
  }
  if (!Util.isUnset(request.passengerListShrink)) {
    query['passenger_list'] = request.passengerListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IntlFlightInventoryPriceCheck',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/intl-flight/v1/flights/action/inventory-price-check`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际机票验舱验价
 *
 * @param request IntlFlightInventoryPriceCheckRequest
 * @return IntlFlightInventoryPriceCheckResponse
 */
async function intlFlightInventoryPriceCheck(request: IntlFlightInventoryPriceCheckRequest): IntlFlightInventoryPriceCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IntlFlightInventoryPriceCheckHeaders{};
  return intlFlightInventoryPriceCheckWithOptions(request, headers, runtime);
}

model IntlFlightListingSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model IntlFlightListingSearchRequest {
  btripUserId?: string(name='btrip_user_id', example='10001'),
  buyerName?: string(name='buyer_name', example='ZHANGSAN'),
  cabinType?: int32(name='cabin_type', description='This parameter is required.', example='0'),
  isvName?: string(name='isv_name', description='This parameter is required.', example='TEST'),
  outWheelSearch?: boolean(name='out_wheel_search', description='This parameter is required.', example='false'),
  queryRecordId?: string(name='query_record_id', example='60b412-cc05-4d10-b570-'),
  searchJourneys?: [ 
    {
      arrCityCode?: string(name='arr_city_code', description='This parameter is required.', example='MEL'),
      depCityCode?: string(name='dep_city_code', description='This parameter is required.', example='HKG'),
      depDate?: string(name='dep_date', description='This parameter is required.', example='2023-12-28'),
      selectedFlights?: [ 
        {
          arrAirportCode?: string(name='arr_airport_code', example='HNY'),
          arrCityCode?: string(name='arr_city_code', description='This parameter is required.', example='MEL'),
          depAirportCode?: string(name='dep_airport_code', example='SZX'),
          depCityCode?: string(name='dep_city_code', description='This parameter is required.', example='HKG'),
          flightTime?: string(name='flight_time', description='This parameter is required.', example='2023-12-28 12:00:00'),
          marketFlightNo?: string(name='market_flight_no', description='This parameter is required.', example='KA5809'),
          operateFlightNo?: string(name='operate_flight_no', example='CX601'),
        }
      ](name='selected_flights'),
    }
  ](name='search_journeys', description='This parameter is required.'),
  searchMode?: int32(name='search_mode', description='This parameter is required.', example='0'),
  searchPassengerList?: [ 
    {
      certNo?: string(name='cert_no', description='This parameter is required.', example='10012301201'),
      certType?: int32(name='cert_type', description='This parameter is required.', example='0'),
      fullName?: string(name='full_name', description='This parameter is required.', example='ZHANGSAN'),
      type?: int32(name='type', description='This parameter is required.', example='0'),
    }
  ](name='search_passenger_list'),
  token?: string(name='token', example='9960b412-cc05-4d10-b570-93372d816807'),
  tripType?: int32(name='trip_type', description='This parameter is required.', example='1'),
}

model IntlFlightListingSearchShrinkRequest {
  btripUserId?: string(name='btrip_user_id', example='10001'),
  buyerName?: string(name='buyer_name', example='ZHANGSAN'),
  cabinType?: int32(name='cabin_type', description='This parameter is required.', example='0'),
  isvName?: string(name='isv_name', description='This parameter is required.', example='TEST'),
  outWheelSearch?: boolean(name='out_wheel_search', description='This parameter is required.', example='false'),
  queryRecordId?: string(name='query_record_id', example='60b412-cc05-4d10-b570-'),
  searchJourneysShrink?: string(name='search_journeys', description='This parameter is required.'),
  searchMode?: int32(name='search_mode', description='This parameter is required.', example='0'),
  searchPassengerListShrink?: string(name='search_passenger_list'),
  token?: string(name='token', example='9960b412-cc05-4d10-b570-93372d816807'),
  tripType?: int32(name='trip_type', description='This parameter is required.', example='1'),
}

model IntlFlightListingSearchResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    flightItemList?: [ 
      {
        bestPriceItem?: {
          agreementPriceCodes?: [ 
            {
              code?: string(name='code'),
              type?: string(name='type'),
            }
          ](name='agreement_price_codes'),
          itemType?: string(name='item_type'),
          labelList?: [ 
            {
              labelCode?: int32(name='labelCode'),
              labelName?: string(name='labelName'),
            }
          ](name='label_list'),
          shoppingItemMap?: map[string]ModuleFlightItemListBestPriceItemShoppingItemMapValue(name='shopping_item_map'),
        }(name='best_price_item'),
        flightJourneyInfos?: [ 
          {
            arrCityCode?: string(name='arr_city_code', example='HGH'),
            arrCityName?: string(name='arr_city_name'),
            arrTime?: string(name='arr_time', example='2023-08-13 09:45'),
            depCityCode?: string(name='dep_city_code', example='BJS'),
            depCityName?: string(name='dep_city_name'),
            depTime?: string(name='dep_time', example='2023-08-13 07:25'),
            duration?: int32(name='duration', example='60'),
            flightSegmentInfos?: [ 
              {
                airlineInfo?: {
                  airlineCode?: string(name='airline_code', example='9H'),
                  airlineName?: string(name='airline_name'),
                  shortName?: string(name='short_name'),
                }(name='airline_info'),
                arrAirportInfo?: {
                  airportCode?: string(name='airport_code', example='PKX'),
                  airportName?: string(name='airport_name'),
                  airportShortName?: string(name='airport_short_name'),
                  terminal?: string(name='terminal', example='--'),
                }(name='arr_airport_info'),
                arrCityCode?: string(name='arr_city_code', example='BJS'),
                arrCityName?: string(name='arr_city_name'),
                arrTime?: string(name='arr_time', example='2023-08-13 09:45'),
                depAirportInfo?: {
                  airportCode?: string(name='airport_code', example='HGH'),
                  airportName?: string(name='airport_name'),
                  airportShortName?: string(name='airport_short_name'),
                  terminal?: string(name='terminal', example='T3'),
                }(name='dep_airport_info'),
                depCityCode?: string(name='dep_city_code', example='HGH'),
                depCityName?: string(name='dep_city_name'),
                depTime?: string(name='dep_time', example='2023-08-13 07:25'),
                duration?: int32(name='duration', description='duration', example='140'),
                flightNo?: string(name='flight_no', example='HO1116'),
                flightShareInfo?: {
                  operatingAirlineInfo?: {
                    airlineCode?: string(name='airline_code', example='DR'),
                    airlineName?: string(name='airline_name'),
                    shortName?: string(name='short_name'),
                  }(name='operating_airline_info'),
                  operatingFlightNo?: string(name='operating_flight_no', example='CX601'),
                }(name='flight_share_info'),
                flightSize?: string(name='flight_size'),
                flightStopInfoList?: [ 
                  {
                    stopAirport?: string(name='stop_airport'),
                    stopAirportName?: string(name='stop_airport_name'),
                    stopArrTerm?: string(name='stop_arr_term'),
                    stopArrTime?: string(name='stop_arr_time'),
                    stopCityCode?: string(name='stop_city_code'),
                    stopCityName?: string(name='stop_city_name'),
                    stopDepTerm?: string(name='stop_dep_term'),
                    stopDepTime?: string(name='stop_dep_time'),
                    stopTime?: string(name='stop_time'),
                  }
                ](name='flight_stop_info_list'),
                flightType?: string(name='flight_type', example='320'),
                manufacturer?: string(name='manufacturer'),
                mealDesc?: string(name='meal_desc'),
                oneMore?: int32(name='one_more', example='0'),
                oneMoreShow?: string(name='one_more_show'),
                segmentIndex?: int32(name='segment_index', example='0'),
                segmentKey?: string(name='segment_key', example='KN6728HGHPKX0725'),
                share?: boolean(name='share', example='false'),
                shortFlightSize?: string(name='short_flight_size'),
                stop?: boolean(name='stop', example='false'),
                totalTime?: string(name='total_time'),
              }
            ](name='flight_segment_infos'),
            journeyIndex?: int32(name='journey_index', example='0'),
            transferTime?: int32(name='transfer_time', example='0'),
          }
        ](name='flight_journey_infos'),
      }
    ](name='flight_item_list'),
    needContinue?: boolean(name='need_continue', example='false'),
    queryRecordId?: string(name='query_record_id', example='ASDFASDFASDFASDFASDF'),
    token?: string(name='token', example='ee229f2d-1835-4199-bfe6-fd14afe8645e'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210bc4b116835992457938931db4de'),
}

model IntlFlightListingSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IntlFlightListingSearchResponseBody(name='body'),
}

/**
 * @summary 国际机票航班搜索
 *
 * @param tmpReq IntlFlightListingSearchRequest
 * @param headers IntlFlightListingSearchHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IntlFlightListingSearchResponse
 */
async function intlFlightListingSearchWithOptions(tmpReq: IntlFlightListingSearchRequest, headers: IntlFlightListingSearchHeaders, runtime: Util.RuntimeOptions): IntlFlightListingSearchResponse {
  Util.validateModel(tmpReq);
  var request = new IntlFlightListingSearchShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.searchJourneys)) {
    request.searchJourneysShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.searchJourneys, 'search_journeys', 'json');
  }
  if (!Util.isUnset(tmpReq.searchPassengerList)) {
    request.searchPassengerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.searchPassengerList, 'search_passenger_list', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    query['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.buyerName)) {
    query['buyer_name'] = request.buyerName;
  }
  if (!Util.isUnset(request.cabinType)) {
    query['cabin_type'] = request.cabinType;
  }
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.outWheelSearch)) {
    query['out_wheel_search'] = request.outWheelSearch;
  }
  if (!Util.isUnset(request.queryRecordId)) {
    query['query_record_id'] = request.queryRecordId;
  }
  if (!Util.isUnset(request.searchJourneysShrink)) {
    query['search_journeys'] = request.searchJourneysShrink;
  }
  if (!Util.isUnset(request.searchMode)) {
    query['search_mode'] = request.searchMode;
  }
  if (!Util.isUnset(request.searchPassengerListShrink)) {
    query['search_passenger_list'] = request.searchPassengerListShrink;
  }
  if (!Util.isUnset(request.token)) {
    query['token'] = request.token;
  }
  if (!Util.isUnset(request.tripType)) {
    query['trip_type'] = request.tripType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IntlFlightListingSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/intl-flight/v1/flights/action/listing-search`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际机票航班搜索
 *
 * @param request IntlFlightListingSearchRequest
 * @return IntlFlightListingSearchResponse
 */
async function intlFlightListingSearch(request: IntlFlightListingSearchRequest): IntlFlightListingSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IntlFlightListingSearchHeaders{};
  return intlFlightListingSearchWithOptions(request, headers, runtime);
}

model IntlFlightOrderCancelHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model IntlFlightOrderCancelRequest {
  btripUserId?: string(name='btrip_user_id', example='10001'),
  buyerName?: string(name='buyer_name', example='ZHANG/SAN'),
  isvName?: string(name='isv_name'),
  orderId?: string(name='order_id', description='This parameter is required.'),
  outOrderId?: string(name='out_order_id'),
}

model IntlFlightOrderCancelResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message', example='成功'),
  module?: {
    cancelTime?: string(name='cancel_time', example='2023-08-10 17:45:32'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210bc4b116835992457938931db4de'),
}

model IntlFlightOrderCancelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IntlFlightOrderCancelResponseBody(name='body'),
}

/**
 * @summary 国际机票订单取消
 *
 * @param request IntlFlightOrderCancelRequest
 * @param headers IntlFlightOrderCancelHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IntlFlightOrderCancelResponse
 */
async function intlFlightOrderCancelWithOptions(request: IntlFlightOrderCancelRequest, headers: IntlFlightOrderCancelHeaders, runtime: Util.RuntimeOptions): IntlFlightOrderCancelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    body['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.buyerName)) {
    body['buyer_name'] = request.buyerName;
  }
  if (!Util.isUnset(request.isvName)) {
    body['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'IntlFlightOrderCancel',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/intl-flight/v1/order/action/cancel`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际机票订单取消
 *
 * @param request IntlFlightOrderCancelRequest
 * @return IntlFlightOrderCancelResponse
 */
async function intlFlightOrderCancel(request: IntlFlightOrderCancelRequest): IntlFlightOrderCancelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IntlFlightOrderCancelHeaders{};
  return intlFlightOrderCancelWithOptions(request, headers, runtime);
}

model IntlFlightOrderDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model IntlFlightOrderDetailRequest {
  btripUserId?: string(name='btrip_user_id', example='10001'),
  buyerName?: string(name='buyer_name', example='ZHANG/SAN'),
  isvName?: string(name='isv_name', example='TRAVEL'),
  orderId?: string(name='order_id', description='This parameter is required.', example='1012000000000000'),
  outOrderId?: string(name='out_order_id', example='F11374007131319304192'),
}

model IntlFlightOrderDetailResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message', example='成功'),
  module?: {
    bookerUserId?: string(name='booker_user_id'),
    bookerUserName?: string(name='booker_user_name'),
    closeReason?: string(name='close_reason'),
    closeTime?: string(name='close_time', example='1709708165000'),
    contactInfo?: {
      contactName?: string(name='contact_name'),
    }(name='contact_info'),
    journeyList?: [ 
      {
        arrCityCode?: string(name='arr_city_code', example='HKG'),
        arrCityName?: string(name='arr_city_name'),
        arrTime?: string(name='arr_time'),
        depCityCode?: string(name='dep_city_code', example='SHA'),
        depCityName?: string(name='dep_city_name'),
        depTime?: string(name='dep_time'),
        duration?: int32(name='duration'),
        flightSegmentInfos?: [ 
          {
            airlineInfo?: {
              airlineCode?: string(name='airline_code'),
              airlineName?: string(name='airline_name'),
              shortName?: string(name='short_name'),
            }(name='airline_info'),
            arrAirportInfo?: {
              airportCode?: string(name='airport_code'),
              airportName?: string(name='airport_name'),
              airportShortName?: string(name='airport_short_name'),
              terminal?: string(name='terminal'),
            }(name='arr_airport_info'),
            arrCityCode?: string(name='arr_city_code'),
            arrCityName?: string(name='arr_city_name'),
            arrTime?: string(name='arr_time'),
            depAirportInfo?: {
              airportCode?: string(name='airport_code'),
              airportName?: string(name='airport_name'),
              airportShortName?: string(name='airport_short_name'),
              terminal?: string(name='terminal'),
            }(name='dep_airport_info'),
            depCityCode?: string(name='dep_city_code'),
            depCityName?: string(name='dep_city_name'),
            depTime?: string(name='dep_time'),
            duration?: int32(name='duration'),
            flightNo?: string(name='flight_no'),
            flightShareInfo?: {
              operatingAirlineInfo?: {
                airlineCode?: string(name='airline_code'),
                airlineName?: string(name='airline_name'),
                shortName?: string(name='short_name'),
              }(name='operating_airline_info'),
              operatingFlightNo?: string(name='operating_flight_no'),
            }(name='flight_share_info'),
            flightSize?: string(name='flight_size'),
            flightStopInfoList?: [ 
              {
                stopAirport?: string(name='stop_airport'),
                stopAirportName?: string(name='stop_airport_name'),
                stopArrTerm?: string(name='stop_arr_term'),
                stopArrTime?: string(name='stop_arr_time'),
                stopCityCode?: string(name='stop_city_code'),
                stopCityName?: string(name='stop_city_name'),
                stopDepTerm?: string(name='stop_dep_term'),
                stopDepTime?: string(name='stop_dep_time'),
                stopTime?: string(name='stop_time'),
              }
            ](name='flight_stop_info_list'),
            flightType?: string(name='flight_type'),
            luggageDirectInfo?: {
              depCityLuggageDirect?: int32(name='dep_city_luggage_direct'),
              stopCityLuggageDirect?: int32(name='stop_city_luggage_direct'),
            }(name='luggage_direct_info'),
            manufacturer?: string(name='manufacturer'),
            mealDesc?: string(name='meal_desc'),
            oneMore?: int32(name='one_more'),
            oneMoreShow?: string(name='one_more_show'),
            segmentIndex?: int32(name='segment_index'),
            segmentKey?: string(name='segment_key'),
            segmentVisaRemark?: {
              depCityVisaRemark?: string(name='dep_city_visa_remark'),
              depCityVisaType?: int32(name='dep_city_visa_type'),
              stopCityVisaRemarks?: [ string ](name='stop_city_visa_remarks'),
              stopCityVisaTypes?: [ int32 ](name='stop_city_visa_types'),
            }(name='segment_visa_remark'),
            share?: boolean(name='share'),
            shortFlightSize?: string(name='short_flight_size'),
            stop?: boolean(name='stop'),
            totalTime?: string(name='total_time'),
          }
        ](name='flight_segment_infos'),
        journeyIndex?: int32(name='journey_index', example='0'),
        transferTime?: int32(name='transfer_time', example='0'),
      }
    ](name='journey_list'),
    orderId?: string(name='order_id', example='1012000000000000'),
    orderItemList?: [ 
      {
        baggageRule?: {
          baggageDigest?: string(name='baggage_digest'),
          offerBaggageInfoMap?: map[string][ ModuleOrderItemListBaggageRuleOfferBaggageInfoMapValue           ](name='offer_baggage_info_map'),
          structuredBaggage?: boolean(name='structured_baggage', example='true'),
        }(name='baggage_rule'),
        passengerPriceList?: [ 
          {
            passengerType?: int32(name='passenger_type', example='0'),
            sellPrice?: int32(name='sell_price', example='21300'),
            tax?: int32(name='tax', example='19300'),
            ticketPrice?: int32(name='ticket_price', example='2000'),
          }
        ](name='passenger_price_list'),
        refundChangeRule?: {
          cancelFeeInd?: boolean(name='cancel_fee_ind', example='false'),
          changeFeeInd?: boolean(name='change_fee_ind', example='false'),
          changeRuleDesc?: string(name='change_rule_desc'),
          offerPenaltyInfoMap?: map[string][ ModuleOrderItemListRefundChangeRuleOfferPenaltyInfoMapValue           ](name='offer_penalty_info_map'),
          refundChangeDigest?: string(name='refund_change_digest'),
          refundRuleDesc?: string(name='refund_rule_desc'),
          structuredRefund?: boolean(name='structured_refund', example='true'),
        }(name='refund_change_rule'),
        segmentKeyList?: [ string ](name='segment_key_list'),
      }
    ](name='order_item_list'),
    orderStatus?: int32(name='order_status'),
    outOrderId?: string(name='out_order_id', example='F11374007131319304192'),
    passengerList?: [ 
      {
        fullName?: string(name='full_name', example='ZHANG/SAN'),
        gender?: int32(name='gender', example='0'),
        jobNo?: string(name='job_no', example='1001101'),
        nationality?: string(name='nationality'),
        nationalityCode?: string(name='nationality_code', example='CN'),
        passengerId?: long(name='passenger_id', example='8432002'),
        type?: int32(name='type', example='0'),
        userId?: string(name='user_id', example='12292812036903456'),
        userType?: int32(name='user_type', example='0'),
      }
    ](name='passenger_list'),
    passengerTicketList?: [ 
      {
        passengerId?: long(name='passenger_id'),
        ticketList?: [ 
          {
            issueTime?: string(name='issue_time'),
            pnrNo?: string(name='pnr_no'),
            priceInfo?: {
              sellPrice?: int32(name='sell_price'),
              tax?: int32(name='tax'),
              ticketPrice?: int32(name='ticket_price'),
            }(name='price_info'),
            segmentKeyList?: [ string ](name='segment_key_list'),
            ticketNo?: string(name='ticket_no'),
            ticketSegmentList?: [ 
              {
                cabin?: string(name='cabin'),
                cabinClass?: string(name='cabin_class'),
                modified?: boolean(name='modified'),
                openTicketStatus?: string(name='open_ticket_status'),
                refunded?: boolean(name='refunded'),
                segmentKey?: string(name='segment_key'),
              }
            ](name='ticket_segment_list'),
          }
        ](name='ticket_list'),
      }
    ](name='passenger_ticket_list'),
    payLatestTime?: string(name='pay_latest_time'),
    payStatus?: int32(name='pay_status', example='1'),
    payTime?: string(name='pay_time', example='2024-03-06 15:00:35'),
    payType?: int32(name='pay_type', example='8'),
    successTime?: string(name='success_time'),
    totalPrice?: long(name='total_price', example='21300'),
    totalTaxPrice?: long(name='total_tax_price'),
    totalTicketPrice?: long(name='total_ticket_price'),
    tripType?: int32(name='trip_type', example='0'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210bc4b116835992457938931db4de'),
}

model IntlFlightOrderDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IntlFlightOrderDetailResponseBody(name='body'),
}

/**
 * @summary 国际机票订单详情
 *
 * @param request IntlFlightOrderDetailRequest
 * @param headers IntlFlightOrderDetailHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IntlFlightOrderDetailResponse
 */
async function intlFlightOrderDetailWithOptions(request: IntlFlightOrderDetailRequest, headers: IntlFlightOrderDetailHeaders, runtime: Util.RuntimeOptions): IntlFlightOrderDetailResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    query['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.buyerName)) {
    query['buyer_name'] = request.buyerName;
  }
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    query['out_order_id'] = request.outOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IntlFlightOrderDetail',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/intl-flight/v1/order/action/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际机票订单详情
 *
 * @param request IntlFlightOrderDetailRequest
 * @return IntlFlightOrderDetailResponse
 */
async function intlFlightOrderDetail(request: IntlFlightOrderDetailRequest): IntlFlightOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IntlFlightOrderDetailHeaders{};
  return intlFlightOrderDetailWithOptions(request, headers, runtime);
}

model IntlFlightOrderPayHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model IntlFlightOrderPayRequest {
  btripUserId?: string(name='btrip_user_id', example='10001'),
  buyerName?: string(name='buyer_name', example='ZHANG/SAN'),
  isvName?: string(name='isv_name'),
  orderId?: string(name='order_id', description='This parameter is required.'),
  orderPrice?: long(name='order_price'),
  outOrderId?: string(name='out_order_id'),
}

model IntlFlightOrderPayResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message', example='成功'),
  module?: {
    actualPayPrice?: long(name='actual_pay_price'),
    payStatus?: int32(name='pay_status'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210bc4b116835992457938931db4de'),
}

model IntlFlightOrderPayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IntlFlightOrderPayResponseBody(name='body'),
}

/**
 * @summary 国际机票订单支付
 *
 * @param request IntlFlightOrderPayRequest
 * @param headers IntlFlightOrderPayHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IntlFlightOrderPayResponse
 */
async function intlFlightOrderPayWithOptions(request: IntlFlightOrderPayRequest, headers: IntlFlightOrderPayHeaders, runtime: Util.RuntimeOptions): IntlFlightOrderPayResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    body['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.buyerName)) {
    body['buyer_name'] = request.buyerName;
  }
  if (!Util.isUnset(request.isvName)) {
    body['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.orderPrice)) {
    body['order_price'] = request.orderPrice;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'IntlFlightOrderPay',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/intl-flight/v1/order/action/pay`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际机票订单支付
 *
 * @param request IntlFlightOrderPayRequest
 * @return IntlFlightOrderPayResponse
 */
async function intlFlightOrderPay(request: IntlFlightOrderPayRequest): IntlFlightOrderPayResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IntlFlightOrderPayHeaders{};
  return intlFlightOrderPayWithOptions(request, headers, runtime);
}

model IntlFlightOrderPayCheckHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwis'),
}

model IntlFlightOrderPayCheckRequest {
  btripUserId?: string(name='btrip_user_id', example='10001'),
  buyerName?: string(name='buyer_name', example='ZHANG/SAN'),
  isvName?: string(name='isv_name', example='TRAVEL'),
  orderId?: string(name='order_id', description='This parameter is required.', example='1002094194679957528'),
  outOrderId?: string(name='out_order_id', example='F11374007131319304192'),
}

model IntlFlightOrderPayCheckResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message', example='成功'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210bc4b116835992457938931db4de'),
}

model IntlFlightOrderPayCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IntlFlightOrderPayCheckResponseBody(name='body'),
}

/**
 * @summary 国际机票订单支付前校验
 *
 * @param request IntlFlightOrderPayCheckRequest
 * @param headers IntlFlightOrderPayCheckHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IntlFlightOrderPayCheckResponse
 */
async function intlFlightOrderPayCheckWithOptions(request: IntlFlightOrderPayCheckRequest, headers: IntlFlightOrderPayCheckHeaders, runtime: Util.RuntimeOptions): IntlFlightOrderPayCheckResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    query['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.buyerName)) {
    query['buyer_name'] = request.buyerName;
  }
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    query['out_order_id'] = request.outOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IntlFlightOrderPayCheck',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/intl-flight/v1/order/action/pay-check`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际机票订单支付前校验
 *
 * @param request IntlFlightOrderPayCheckRequest
 * @return IntlFlightOrderPayCheckResponse
 */
async function intlFlightOrderPayCheck(request: IntlFlightOrderPayCheckRequest): IntlFlightOrderPayCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IntlFlightOrderPayCheckHeaders{};
  return intlFlightOrderPayCheckWithOptions(request, headers, runtime);
}

model IntlFlightOtaItemDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model IntlFlightOtaItemDetailRequest {
  btripUserId?: string(name='btrip_user_id', example='10001'),
  buyerName?: string(name='buyer_name'),
  isvName?: string(name='isv_name', example='open12igetbis4o07v10B1TlOWcM00'),
  language?: string(name='language'),
  supplierCode?: string(name='supplier_code', example='JIANHANG'),
}

model IntlFlightOtaItemDetailResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    flightJourneyInfos?: [ 
      {
        arrCityCode?: string(name='arr_city_code', example='HGH'),
        arrCityName?: string(name='arr_city_name'),
        arrTime?: string(name='arr_time', example='2023-08-13 09:45'),
        depCityCode?: string(name='dep_city_code', example='BJS'),
        depCityName?: string(name='dep_city_name'),
        depTime?: string(name='dep_time', example='2023-08-13 07:25'),
        duration?: int32(name='duration', example='140'),
        extensions?: map[string]string(name='extensions'),
        flightSegmentInfos?: [ 
          {
            airlineInfo?: {
              airlineChineseName?: string(name='airline_chinese_name'),
              airlineChineseShortName?: string(name='airline_chinese_short_name'),
              airlineCode?: string(name='airline_code', example='MU'),
              airlineIcon?: string(name='airline_icon', example='https://gw.alicdn.com/tfs/TB15EXDFHY1gK0jSZTEXXXDQVXa-450-450.png_80x80.jpg'),
              cheapFlight?: boolean(name='cheap_flight', example='false'),
            }(name='airline_info'),
            arrAirportInfo?: {
              airportCode?: string(name='airport_code', example='PKX'),
              airportName?: string(name='airport_name'),
              airportShortName?: string(name='airport_short_name'),
              terminal?: string(name='terminal', example='--'),
            }(name='arr_airport_info'),
            arrCityCode?: string(name='arr_city_code', example='BJS'),
            arrCityName?: string(name='arr_city_name'),
            arrTime?: string(name='arr_time', example='2023-08-13 09:45'),
            baggageDesc?: string(name='baggage_desc'),
            depAirportInfo?: {
              airportCode?: string(name='airport_code', example='HGH'),
              airportName?: string(name='airport_name'),
              airportShortName?: string(name='airport_short_name'),
              terminal?: string(name='terminal', example='T3'),
            }(name='dep_airport_info'),
            depCityCode?: string(name='dep_city_code', example='HGH'),
            depCityName?: string(name='dep_city_name'),
            depTime?: string(name='dep_time', example='2023-08-13 07:25'),
            duration?: int32(name='duration', example='140'),
            flightNo?: string(name='flight_no', example='MU5131'),
            flightShareInfo?: {
              operatingAirlineInfo?: {
                airlineChineseName?: string(name='airline_chinese_name'),
                airlineChineseShortName?: string(name='airline_chinese_short_name'),
                airlineCode?: string(name='airline_code', example='KN'),
                airlineIcon?: string(name='airline_icon', example='https://gw.alicdn.com/tfs/TB1gSXBFUT1gK0jSZFhXXaAtVXa-450-450.png_80x80.jpg'),
                cheapFlight?: boolean(name='cheap_flight', example='false'),
              }(name='operating_airline_info'),
              operatingFlightNo?: string(name='operating_flight_no', example='CX601'),
            }(name='flight_share_info'),
            flightSize?: string(name='flight_size'),
            flightStopInfo?: {
              stopAirport?: string(name='stop_airport', example='HGH'),
              stopAirportName?: string(name='stop_airport_name'),
              stopArrTerm?: string(name='stop_arr_term', example='T3'),
              stopArrTime?: string(name='stop_arr_time', example='BJS'),
              stopCityCode?: string(name='stop_city_code', example='HGH'),
              stopCityName?: string(name='stop_city_name', example='HGH'),
              stopCityNames?: [ string ](name='stop_city_names'),
              stopDepTerm?: string(name='stop_dep_term', example='T4'),
              stopDepTime?: string(name='stop_dep_time', example='2023-08-13 07:25'),
              stopTime?: string(name='stop_time'),
            }(name='flight_stop_info'),
            flightType?: string(name='flight_type', example='320'),
            luggageDirectInfo?: {
              depCityLuggageDirect?: int32(name='dep_city_luggage_direct', example='1'),
              stopCityLuggageDirect?: int32(name='stop_city_luggage_direct', example='0'),
            }(name='luggage_direct_info'),
            manufacturer?: string(name='manufacturer'),
            mealDesc?: string(name='meal_desc'),
            onTimeRate?: string(name='on_time_rate', example='80%'),
            oneMore?: int32(name='one_more', example='0'),
            oneMoreShow?: string(name='one_more_show'),
            segmentIndex?: int32(name='segment_index', example='0'),
            segmentKey?: string(name='segment_key', example='KN6728HGHPKX0725'),
            segmentVisaRemark?: {
              depCityVisaRemark?: string(name='dep_city_visa_remark'),
              depCityVisaType?: int32(name='dep_city_visa_type', example='1'),
              stopCityVisaRemarks?: [ string ](name='stop_city_visa_remarks'),
              stopCityVisaTypes?: [ int32 ](name='stop_city_visa_types'),
            }(name='segment_visa_remark'),
            share?: boolean(name='share', example='false'),
            shortFlightSize?: string(name='short_flight_size'),
            stop?: boolean(name='stop', example='false'),
            totalTime?: string(name='total_time'),
            transferTime?: string(name='transfer_time'),
            transferTimeNumber?: int32(name='transfer_time_number', example='80'),
          }
        ](name='flight_segment_infos'),
        journeyIndex?: int32(name='journey_index', example='0'),
        transferTime?: int32(name='transfer_time', example='0'),
      }
    ](name='flight_journey_infos'),
    groupItem?: {
      agreementPriceCodes?: [ string ](name='agreement_price_codes'),
      flightRuleInfoList?: [ 
        {
          flightRuleInfo?: {
            baggageDesc?: string(name='baggage_desc'),
            refundChangeRuleDesc?: string(name='refund_change_rule_desc'),
          }(name='flight_rule_info'),
          segmentPosition?: {
            journeyIndex?: int32(name='journey_index'),
            segmentIndex?: int32(name='segment_index'),
          }(name='segment_position'),
        }
      ](name='flight_rule_info_list'),
      itemId?: string(name='item_id', example='669845158418'),
      itemType?: string(name='item_type'),
      shoppingItemMap?: map[string]ModuleGroupItemShoppingItemMapValue(name='shopping_item_map'),
      subItemPositionMap?: map[string][ ModuleGroupItemSubItemPositionMapValue       ](name='sub_item_position_map'),
      subItems?: [ 
        {
          baggageRule?: {
            baggageDigest?: string(name='baggage_digest'),
            baggageInfoMap?: map[string][ ModuleGroupItemSubItemsBaggageRuleBaggageInfoMapValue             ](name='baggage_info_map'),
            structuredBaggage?: boolean(name='structured_baggage', example='true'),
          }(name='baggage_rule'),
          refundChangeRule?: {
            cancelFeeInd?: boolean(name='cancel_fee_ind', example='false'),
            changeFeeInd?: boolean(name='change_fee_ind', example='false'),
            offerPenaltyInfoMap?: map[string][ ModuleGroupItemSubItemsRefundChangeRuleOfferPenaltyInfoMapValue             ](name='offer_penalty_info_map'),
            refundChangeDigest?: string(name='refund_change_digest'),
            structuredRefund?: boolean(name='structured_refund', example='false'),
          }(name='refund_change_rule'),
          segmentKeys?: [ string ](name='segment_keys'),
          shoppingItemMap?: map[string]ModuleGroupItemSubItemsShoppingItemMapValue(name='shopping_item_map'),
          uniqKey?: string(name='uniq_key', example='23412341234124'),
        }
      ](name='sub_items'),
    }(name='group_item'),
    shutterDocs?: [ 
      {
        contents?: [ string ](name='contents'),
        mainTitle?: string(name='main_title'),
      }
    ](name='shutter_docs'),
    tripType?: int32(name='trip_type', example='1'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model IntlFlightOtaItemDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IntlFlightOtaItemDetailResponseBody(name='body'),
}

/**
 * @summary 国际机票报价商品详情
 *
 * @param request IntlFlightOtaItemDetailRequest
 * @param headers IntlFlightOtaItemDetailHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IntlFlightOtaItemDetailResponse
 */
async function intlFlightOtaItemDetailWithOptions(otaItemId: string, request: IntlFlightOtaItemDetailRequest, headers: IntlFlightOtaItemDetailHeaders, runtime: Util.RuntimeOptions): IntlFlightOtaItemDetailResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    query['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.buyerName)) {
    query['buyer_name'] = request.buyerName;
  }
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.language)) {
    query['language'] = request.language;
  }
  if (!Util.isUnset(request.supplierCode)) {
    query['supplier_code'] = request.supplierCode;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IntlFlightOtaItemDetail',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/intl-flight/v1/items/${OpenApiUtil.getEncodeParam(otaItemId)}/action/ota-get`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际机票报价商品详情
 *
 * @param request IntlFlightOtaItemDetailRequest
 * @return IntlFlightOtaItemDetailResponse
 */
async function intlFlightOtaItemDetail(otaItemId: string, request: IntlFlightOtaItemDetailRequest): IntlFlightOtaItemDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IntlFlightOtaItemDetailHeaders{};
  return intlFlightOtaItemDetailWithOptions(otaItemId, request, headers, runtime);
}

model IntlFlightOtaSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model IntlFlightOtaSearchRequest {
  btripUserId?: string(name='btrip_user_id', example='10023'),
  buyerName?: string(name='buyer_name'),
  cabinType?: int32(name='cabin_type', example='0'),
  isvName?: string(name='isv_name', example='open12igetbis4o07v10B1TlOWcM00'),
  searchJourneys?: [ 
    {
      arrCityCode?: string(name='arr_city_code', description='This parameter is required.', example='ZQZ'),
      depCityCode?: string(name='dep_city_code', description='This parameter is required.', example='HGH'),
      depDate?: string(name='dep_date', description='This parameter is required.', example='2023-08-15'),
      selectedFlights?: [ 
        {
          arrAirportCode?: string(name='arr_airport_code', example='HGH'),
          arrCityCode?: string(name='arr_city_code', description='This parameter is required.', example='NNG'),
          depAirportCode?: string(name='dep_airport_code', example='KOW'),
          depCityCode?: string(name='dep_city_code', description='This parameter is required.', example='CTU'),
          flightTime?: string(name='flight_time', description='This parameter is required.', example='2023-08-15 12:00:00'),
          marketFlightNo?: string(name='market_flight_no', description='This parameter is required.', example='KA5809'),
          operateFlightNo?: string(name='operate_flight_no', example='CX601'),
        }
      ](name='selected_flights', description='This parameter is required.'),
    }
  ](name='search_journeys', description='This parameter is required.'),
  searchPassengerList?: [ 
    {
      certNo?: string(name='cert_no', description='This parameter is required.', example='13412341234'),
      certType?: int32(name='cert_type', description='This parameter is required.', example='0'),
      fullName?: string(name='full_name', description='This parameter is required.', example='ZHANGSAN'),
      type?: int32(name='type', description='This parameter is required.', example='0'),
    }
  ](name='search_passenger_list'),
  tripType?: int32(name='trip_type', description='This parameter is required.', example='1'),
}

model IntlFlightOtaSearchShrinkRequest {
  btripUserId?: string(name='btrip_user_id', example='10023'),
  buyerName?: string(name='buyer_name'),
  cabinType?: int32(name='cabin_type', example='0'),
  isvName?: string(name='isv_name', example='open12igetbis4o07v10B1TlOWcM00'),
  searchJourneysShrink?: string(name='search_journeys', description='This parameter is required.'),
  searchPassengerListShrink?: string(name='search_passenger_list'),
  tripType?: int32(name='trip_type', description='This parameter is required.', example='1'),
}

model IntlFlightOtaSearchResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    flightJourneyInfos?: [ 
      {
        arrCityCode?: string(name='arr_city_code', example='HGH'),
        arrCityName?: string(name='arr_city_name'),
        arrTime?: string(name='arr_time', example='2023-08-13 09:45'),
        depCityCode?: string(name='dep_city_code', example='BJS'),
        depCityName?: string(name='dep_city_name'),
        depTime?: string(name='dep_time', example='2023-08-13 07:25'),
        duration?: int32(name='duration', example='140'),
        flightSegmentInfos?: [ 
          {
            airlineInfo?: {
              airlineCode?: string(name='airline_code', example='MU'),
              airlineName?: string(name='airline_name'),
              shortName?: string(name='short_name'),
            }(name='airline_info'),
            arrAirportInfo?: {
              airportCode?: string(name='airport_code', example='PKX'),
              airportName?: string(name='airport_name'),
              airportShortName?: string(name='airport_short_name'),
              terminal?: string(name='terminal', example='--'),
            }(name='arr_airport_info'),
            arrCityCode?: string(name='arr_city_code', example='BJS'),
            arrCityName?: string(name='arr_city_name'),
            arrTime?: string(name='arr_time', example='2023-08-13 09:45'),
            depAirportInfo?: {
              airportCode?: string(name='airport_code', example='HGH'),
              airportName?: string(name='airport_name'),
              airportShortName?: string(name='airport_short_name'),
              terminal?: string(name='terminal', example='T3'),
            }(name='dep_airport_info'),
            depCityCode?: string(name='dep_city_code', example='HGH'),
            depCityName?: string(name='dep_city_name'),
            depTime?: string(name='dep_time', example='2023-08-13 07:25'),
            duration?: int32(name='duration', example='140'),
            flightNo?: string(name='flight_no', example='MU5131'),
            flightShareInfo?: {
              operatingAirlineInfo?: {
                airlineCode?: string(name='airline_code', example='DR'),
                airlineName?: string(name='airline_name'),
                shortName?: string(name='short_name'),
              }(name='operating_airline_info'),
              operatingFlightNo?: string(name='operating_flight_no', example='CX601'),
            }(name='flight_share_info'),
            flightSize?: string(name='flight_size'),
            flightStopInfoList?: [ 
              {
                stopAirport?: string(name='stop_airport'),
                stopAirportName?: string(name='stop_airport_name'),
                stopArrTerm?: string(name='stop_arr_term'),
                stopArrTime?: string(name='stop_arr_time'),
                stopCityCode?: string(name='stop_city_code'),
                stopCityName?: string(name='stop_city_name'),
                stopDepTerm?: string(name='stop_dep_term'),
                stopDepTime?: string(name='stop_dep_time'),
                stopTime?: string(name='stop_time'),
              }
            ](name='flight_stop_info_list'),
            flightType?: string(name='flight_type', example='320'),
            luggageDirectInfo?: {
              depCityLuggageDirect?: int32(name='dep_city_luggage_direct', example='1'),
              stopCityLuggageDirect?: int32(name='stop_city_luggage_direct', example='0'),
            }(name='luggage_direct_info'),
            manufacturer?: string(name='manufacturer'),
            mealDesc?: string(name='meal_desc'),
            oneMore?: int32(name='one_more', example='0'),
            oneMoreShow?: string(name='one_more_show'),
            segmentIndex?: int32(name='segment_index', example='0'),
            segmentKey?: string(name='segment_key', example='KN6728HGHPKX0725'),
            segmentVisaRemark?: {
              depCityVisaRemark?: string(name='dep_city_visa_remark'),
              depCityVisaType?: int32(name='dep_city_visa_type', example='1'),
              stopCityVisaRemarks?: [ string ](name='stop_city_visa_remarks'),
              stopCityVisaTypes?: [ int32 ](name='stop_city_visa_types'),
            }(name='segment_visa_remark'),
            share?: boolean(name='share', example='false'),
            shortFlightSize?: string(name='short_flight_size'),
            stop?: boolean(name='stop', example='false'),
            totalTime?: string(name='total_time'),
          }
        ](name='flight_segment_infos'),
        journeyIndex?: int32(name='journey_index', example='0'),
        transferTime?: int32(name='transfer_time', example='0'),
      }
    ](name='flight_journey_infos'),
    itemList?: [ 
      {
        agreementPriceCodes?: [ 
          {
            code?: string(name='code'),
            type?: int32(name='type'),
          }
        ](name='agreement_price_codes'),
        itemId?: string(name='item_id', example='e50d380fc05942cc8ac57af8ae02f448_0'),
        itemType?: string(name='item_type'),
        labelList?: [ 
          {
            labelCode?: int32(name='labelCode'),
            labelName?: string(name='labelName'),
          }
        ](name='label_list'),
        shoppingItemMap?: map[string]ModuleItemListShoppingItemMapValue(name='shopping_item_map'),
        subItems?: [ 
          {
            baggageRule?: {
              baggageDigest?: string(name='baggage_digest'),
              offerBaggageInfoMap?: map[string][ ModuleItemListSubItemsBaggageRuleOfferBaggageInfoMapValue               ](name='offer_baggage_info_map'),
              structuredBaggage?: boolean(name='structured_baggage', example='true'),
            }(name='baggage_rule'),
            refundChangeRule?: {
              cancelFeeInd?: boolean(name='cancel_fee_ind', example='true'),
              changeFeeInd?: boolean(name='change_fee_ind', example='true'),
              changeRuleDesc?: string(name='change_rule_desc'),
              offerPenaltyInfoMap?: map[string][ ModuleItemListSubItemsRefundChangeRuleOfferPenaltyInfoMapValue               ](name='offer_penalty_info_map'),
              refundChangeDigest?: string(name='refund_change_digest'),
              refundRuleDesc?: string(name='refund_rule_desc'),
              structuredRefund?: boolean(name='structured_refund', example='false'),
            }(name='refund_change_rule'),
            segmentKeys?: [ string ](name='segment_keys'),
            segmentPositionList?: [ 
              {
                journeyIndex?: int32(name='journey_index'),
                segmentIndex?: int32(name='segment_index'),
              }
            ](name='segment_position_list'),
            shoppingItemMap?: map[string]ModuleItemListSubItemsShoppingItemMapValue(name='shopping_item_map'),
            uniqKey?: string(name='uniq_key', example='07df0bd9-f803-4a50-8449-f4bd675d9939'),
          }
        ](name='sub_items'),
      }
    ](name='item_list'),
  }(name='module', description='module。'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='2150435016896473589786246e03e9'),
}

model IntlFlightOtaSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IntlFlightOtaSearchResponseBody(name='body'),
}

/**
 * @summary 国际机票航班报价查询
 *
 * @param tmpReq IntlFlightOtaSearchRequest
 * @param headers IntlFlightOtaSearchHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IntlFlightOtaSearchResponse
 */
async function intlFlightOtaSearchWithOptions(tmpReq: IntlFlightOtaSearchRequest, headers: IntlFlightOtaSearchHeaders, runtime: Util.RuntimeOptions): IntlFlightOtaSearchResponse {
  Util.validateModel(tmpReq);
  var request = new IntlFlightOtaSearchShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.searchJourneys)) {
    request.searchJourneysShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.searchJourneys, 'search_journeys', 'json');
  }
  if (!Util.isUnset(tmpReq.searchPassengerList)) {
    request.searchPassengerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.searchPassengerList, 'search_passenger_list', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    query['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.buyerName)) {
    query['buyer_name'] = request.buyerName;
  }
  if (!Util.isUnset(request.cabinType)) {
    query['cabin_type'] = request.cabinType;
  }
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.searchJourneysShrink)) {
    query['search_journeys'] = request.searchJourneysShrink;
  }
  if (!Util.isUnset(request.searchPassengerListShrink)) {
    query['search_passenger_list'] = request.searchPassengerListShrink;
  }
  if (!Util.isUnset(request.tripType)) {
    query['trip_type'] = request.tripType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IntlFlightOtaSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/intl-flight/v1/flights/action/ota-search`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际机票航班报价查询
 *
 * @param request IntlFlightOtaSearchRequest
 * @return IntlFlightOtaSearchResponse
 */
async function intlFlightOtaSearch(request: IntlFlightOtaSearchRequest): IntlFlightOtaSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IntlFlightOtaSearchHeaders{};
  return intlFlightOtaSearchWithOptions(request, headers, runtime);
}

model IntlFlightReShopApplyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model IntlFlightReShopApplyRequest {
  asyncApplyKey?: string(name='async_apply_key', example='asyncKey_2390u230slgw023'),
  asyncApplyMode?: boolean(name='async_apply_mode', example='true'),
  orderId?: string(name='order_id', description='This parameter is required.', example='1017035199907040165'),
  outOrderId?: string(name='out_order_id', example='D1736316966048SC4877'),
  outReShopApplyId?: string(name='out_re_shop_apply_id', example='JPM20241024354'),
  passengerJourneyGroupKey?: string(name='passenger_journey_group_key', description='This parameter is required.', example='edcac4f4c79d40ccb141ddb6da567e65'),
  reShopReasonCode?: string(name='re_shop_reason_code', description='This parameter is required.', example='0'),
  selectedJourneys?: [ 
    {
      arrCityCode?: string(name='arr_city_code', description='This parameter is required.', example='DLC'),
      depCityCode?: string(name='dep_city_code', description='This parameter is required.', example='TSN'),
      intentDate?: string(name='intent_date', description='This parameter is required.', example='2023-10-10'),
      selectedFlights?: [ 
        {
          arrCityCode?: string(name='arr_city_code', description='This parameter is required.', example='HKG'),
          depCityCode?: string(name='dep_city_code', description='This parameter is required.', example='BJS'),
          segmentKey?: string(name='segment_key', description='This parameter is required.', example='KN6728HGHPKX0725'),
        }
      ](name='selected_flights', description='This parameter is required.'),
    }
  ](name='selected_journeys', description='This parameter is required.'),
  selectedPassengers?: [ 
    {
      fullName?: string(name='full_name', example='ZHANG/SAN'),
      passengerId?: long(name='passenger_id', description='This parameter is required.', example='100001'),
    }
  ](name='selected_passengers', description='This parameter is required.'),
  userIntentionMemo?: string(name='user_intention_memo'),
}

model IntlFlightReShopApplyShrinkRequest {
  asyncApplyKey?: string(name='async_apply_key', example='asyncKey_2390u230slgw023'),
  asyncApplyMode?: boolean(name='async_apply_mode', example='true'),
  orderId?: string(name='order_id', description='This parameter is required.', example='1017035199907040165'),
  outOrderId?: string(name='out_order_id', example='D1736316966048SC4877'),
  outReShopApplyId?: string(name='out_re_shop_apply_id', example='JPM20241024354'),
  passengerJourneyGroupKey?: string(name='passenger_journey_group_key', description='This parameter is required.', example='edcac4f4c79d40ccb141ddb6da567e65'),
  reShopReasonCode?: string(name='re_shop_reason_code', description='This parameter is required.', example='0'),
  selectedJourneysShrink?: string(name='selected_journeys', description='This parameter is required.'),
  selectedPassengersShrink?: string(name='selected_passengers', description='This parameter is required.'),
  userIntentionMemo?: string(name='user_intention_memo'),
}

model IntlFlightReShopApplyResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message', example='成功'),
  module?: {
    asyncApplyKey?: string(name='async_apply_key', example='asyncKey_2390u230slgw023'),
    outReShopApplyId?: string(name='out_re_shop_apply_id', example='JPM20241024354'),
    reShopApplyId?: string(name='re_shop_apply_id', example='1009035199432'),
  }(name='module'),
  requestId?: string(name='requestId', example='88BA5020-561C-51F5-8E73-6659729913F0'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210bc4b116835992457938931db4de'),
}

model IntlFlightReShopApplyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IntlFlightReShopApplyResponseBody(name='body'),
}

/**
 * @summary 国际机票改签申请
 *
 * @param tmpReq IntlFlightReShopApplyRequest
 * @param headers IntlFlightReShopApplyHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IntlFlightReShopApplyResponse
 */
async function intlFlightReShopApplyWithOptions(tmpReq: IntlFlightReShopApplyRequest, headers: IntlFlightReShopApplyHeaders, runtime: Util.RuntimeOptions): IntlFlightReShopApplyResponse {
  Util.validateModel(tmpReq);
  var request = new IntlFlightReShopApplyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.selectedJourneys)) {
    request.selectedJourneysShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.selectedJourneys, 'selected_journeys', 'json');
  }
  if (!Util.isUnset(tmpReq.selectedPassengers)) {
    request.selectedPassengersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.selectedPassengers, 'selected_passengers', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.asyncApplyKey)) {
    body['async_apply_key'] = request.asyncApplyKey;
  }
  if (!Util.isUnset(request.asyncApplyMode)) {
    body['async_apply_mode'] = request.asyncApplyMode;
  }
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.outReShopApplyId)) {
    body['out_re_shop_apply_id'] = request.outReShopApplyId;
  }
  if (!Util.isUnset(request.passengerJourneyGroupKey)) {
    body['passenger_journey_group_key'] = request.passengerJourneyGroupKey;
  }
  if (!Util.isUnset(request.reShopReasonCode)) {
    body['re_shop_reason_code'] = request.reShopReasonCode;
  }
  if (!Util.isUnset(request.selectedJourneysShrink)) {
    body['selected_journeys'] = request.selectedJourneysShrink;
  }
  if (!Util.isUnset(request.selectedPassengersShrink)) {
    body['selected_passengers'] = request.selectedPassengersShrink;
  }
  if (!Util.isUnset(request.userIntentionMemo)) {
    body['user_intention_memo'] = request.userIntentionMemo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'IntlFlightReShopApply',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/intl-flight/v1/flights/action/reshop/apply`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际机票改签申请
 *
 * @param request IntlFlightReShopApplyRequest
 * @return IntlFlightReShopApplyResponse
 */
async function intlFlightReShopApply(request: IntlFlightReShopApplyRequest): IntlFlightReShopApplyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IntlFlightReShopApplyHeaders{};
  return intlFlightReShopApplyWithOptions(request, headers, runtime);
}

model IntlFlightReShopCancelHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model IntlFlightReShopCancelRequest {
  orderId?: string(name='order_id', description='This parameter is required.', example='1017035199763856322'),
  outOrderId?: string(name='out_order_id', example='JPT2025032400000001'),
  outReShopApplyId?: string(name='out_re_shop_apply_id', example='JPM20241024354'),
  reShopApplyId?: string(name='re_shop_apply_id', description='This parameter is required.', example='1019202345889633'),
}

model IntlFlightReShopCancelResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message', example='成功'),
  module?: {
    cancelTime?: string(name='cancel_time', example='2023-08-10 17:45:32'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210bc4b116835992457938931db4de'),
}

model IntlFlightReShopCancelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IntlFlightReShopCancelResponseBody(name='body'),
}

/**
 * @summary 国际机票改签取消
 *
 * @param request IntlFlightReShopCancelRequest
 * @param headers IntlFlightReShopCancelHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IntlFlightReShopCancelResponse
 */
async function intlFlightReShopCancelWithOptions(request: IntlFlightReShopCancelRequest, headers: IntlFlightReShopCancelHeaders, runtime: Util.RuntimeOptions): IntlFlightReShopCancelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.outReShopApplyId)) {
    body['out_re_shop_apply_id'] = request.outReShopApplyId;
  }
  if (!Util.isUnset(request.reShopApplyId)) {
    body['re_shop_apply_id'] = request.reShopApplyId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'IntlFlightReShopCancel',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/intl-flight/v1/flights/action/reshop/cancel`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际机票改签取消
 *
 * @param request IntlFlightReShopCancelRequest
 * @return IntlFlightReShopCancelResponse
 */
async function intlFlightReShopCancel(request: IntlFlightReShopCancelRequest): IntlFlightReShopCancelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IntlFlightReShopCancelHeaders{};
  return intlFlightReShopCancelWithOptions(request, headers, runtime);
}

model IntlFlightReShopConsultHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model IntlFlightReShopConsultRequest {
  orderId?: string(name='order_id', description='This parameter is required.', example='1003038202430742196'),
  outOrderId?: string(name='out_order_id', example='JP2024072600000006'),
}

model IntlFlightReShopConsultResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message', example='成功'),
  module?: {
    passengerJourneyGroupInfoList?: [ 
      {
        passengerJourneyGroupKey?: string(name='passenger_journey_group_key'),
        passengerList?: [ 
          {
            fullName?: string(name='full_name'),
            passengerId?: long(name='passenger_id'),
          }
        ](name='passenger_list'),
        passengerSegmentStatusInfoList?: [ 
          {
            canReShop?: boolean(name='can_re_shop'),
            passengerId?: long(name='passenger_id'),
            segmentKey?: string(name='segment_key'),
            unReShopReason?: string(name='un_re_shop_reason'),
            unReShopReasonCode?: string(name='un_re_shop_reason_code'),
          }
        ](name='passenger_segment_status_info_list'),
        reShopReasonInfoList?: [ 
          {
            reasonCode?: string(name='reason_code'),
            reasonDesc?: string(name='reason_desc'),
            voluntary?: boolean(name='voluntary'),
          }
        ](name='re_shop_reason_info_list'),
        segmentList?: [ 
          {
            arrCityCode?: string(name='arr_city_code'),
            depCityCode?: string(name='dep_city_code'),
            depTime?: string(name='dep_time'),
            flightNo?: string(name='flight_no'),
            journeyIndex?: int32(name='journey_index'),
            segmentIndex?: int32(name='segment_index'),
            segmentKey?: string(name='segment_key'),
          }
        ](name='segment_list'),
      }
    ](name='passenger_journey_group_info_list'),
  }(name='module', example='true'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210bc4b116835992457938931db4de'),
}

model IntlFlightReShopConsultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IntlFlightReShopConsultResponseBody(name='body'),
}

/**
 * @summary 国际机票改签咨询
 *
 * @param request IntlFlightReShopConsultRequest
 * @param headers IntlFlightReShopConsultHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IntlFlightReShopConsultResponse
 */
async function intlFlightReShopConsultWithOptions(request: IntlFlightReShopConsultRequest, headers: IntlFlightReShopConsultHeaders, runtime: Util.RuntimeOptions): IntlFlightReShopConsultResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    query['out_order_id'] = request.outOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IntlFlightReShopConsult',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/intl-flight/v1/flights/action/reshop/consult`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际机票改签咨询
 *
 * @param request IntlFlightReShopConsultRequest
 * @return IntlFlightReShopConsultResponse
 */
async function intlFlightReShopConsult(request: IntlFlightReShopConsultRequest): IntlFlightReShopConsultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IntlFlightReShopConsultHeaders{};
  return intlFlightReShopConsultWithOptions(request, headers, runtime);
}

model IntlFlightReShopDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model IntlFlightReShopDetailRequest {
  orderId?: string(name='order_id', description='This parameter is required.', example='1017035200254689390'),
  outOrderId?: string(name='out_order_id', example='F11494210548838170624'),
  outReShopApplyId?: string(name='out_re_shop_apply_id', example='M132492719472'),
  reShopApplyId?: string(name='re_shop_apply_id', description='This parameter is required.', example='10002612002'),
}

model IntlFlightReShopDetailResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message', example='成功'),
  module?: {
    baggageRule?: {
      baggageRuleDesc?: string(name='baggage_rule_desc'),
    }(name='baggage_rule'),
    closeReason?: string(name='close_reason'),
    closeTime?: string(name='close_time', example='2024-03-06 15:00:35'),
    closeType?: int32(name='close_type', example='1'),
    journeyList?: [ 
      {
        arrCityCode?: string(name='arr_city_code', example='HKG'),
        arrCityName?: string(name='arr_city_name'),
        arrTime?: string(name='arr_time', example='2025-01-01 02:00'),
        depCityCode?: string(name='dep_city_code', example='BJS'),
        depCityName?: string(name='dep_city_name'),
        depTime?: string(name='dep_time', example='2025-01-01 01:00'),
        duration?: int32(name='duration', example='60'),
        flightSegmentInfos?: [ 
          {
            airlineInfo?: {
              airlineCode?: string(name='airline_code', example='NS'),
              airlineName?: string(name='airline_name'),
              shortName?: string(name='short_name'),
            }(name='airline_info'),
            arrAirportInfo?: {
              airportCode?: string(name='airport_code', example='DLC'),
              airportName?: string(name='airport_name'),
              airportShortName?: string(name='airport_short_name'),
              terminal?: string(name='terminal', example='T1'),
            }(name='arr_airport_info'),
            arrCityCode?: string(name='arr_city_code', example='HKG'),
            arrCityName?: string(name='arr_city_name'),
            arrTime?: string(name='arr_time', example='2025-01-01 02:00'),
            depAirportInfo?: {
              airportCode?: string(name='airport_code', example='PEK'),
              airportName?: string(name='airport_name'),
              airportShortName?: string(name='airport_short_name'),
              terminal?: string(name='terminal', example='T1'),
            }(name='dep_airport_info'),
            depCityCode?: string(name='dep_city_code', example='BJS'),
            depCityName?: string(name='dep_city_name'),
            depTime?: string(name='dep_time', example='2025-01-01 01:00'),
            duration?: int32(name='duration', example='130'),
            flightNo?: string(name='flight_no', example='NS8210'),
            flightShareInfo?: {
              operatingAirlineInfo?: {
                airlineCode?: string(name='airline_code', example='CA'),
                airlineName?: string(name='airline_name'),
                shortName?: string(name='short_name'),
              }(name='operating_airline_info'),
              operatingFlightNo?: string(name='operating_flight_no', example='CA1234'),
            }(name='flight_share_info'),
            flightSize?: string(name='flight_size'),
            flightStopInfoList?: [ 
              {
                stopAirport?: string(name='stop_airport', example='PEK'),
                stopAirportName?: string(name='stop_airport_name'),
                stopArrTerm?: string(name='stop_arr_term', example='T3'),
                stopArrTime?: string(name='stop_arr_time', example='2024-01-01 05:00'),
                stopCityCode?: string(name='stop_city_code', example='BJS'),
                stopCityName?: string(name='stop_city_name'),
                stopDepTerm?: string(name='stop_dep_term', example='T2'),
                stopDepTime?: string(name='stop_dep_time', example='2024-01-01 07:00'),
                stopTime?: string(name='stop_time', example='120'),
              }
            ](name='flight_stop_info_list'),
            flightType?: string(name='flight_type', example='737'),
            journeyIndex?: int32(name='journey_index', example='0'),
            luggageDirectInfo?: {
              depCityLuggageDirect?: int32(name='dep_city_luggage_direct', example='1'),
              stopCityLuggageDirect?: int32(name='stop_city_luggage_direct', example='1'),
            }(name='luggage_direct_info'),
            manufacturer?: string(name='manufacturer'),
            mealDesc?: string(name='meal_desc'),
            oneMore?: int32(name='one_more', example='0'),
            oneMoreShow?: string(name='one_more_show', example='-'),
            segmentIndex?: int32(name='segment_index', example='0'),
            segmentKey?: string(name='segment_key', example='NS8210XIYHGH0501'),
            segmentVisaRemark?: {
              depCityVisaRemark?: string(name='dep_city_visa_remark'),
              depCityVisaType?: int32(name='dep_city_visa_type', example='1'),
              stopCityVisaRemarks?: [ string ](name='stop_city_visa_remarks'),
              stopCityVisaTypes?: [ int32 ](name='stop_city_visa_types'),
            }(name='segment_visa_remark'),
            share?: boolean(name='share', example='true'),
            shortFlightSize?: string(name='short_flight_size'),
            stop?: boolean(name='stop', example='true'),
            totalTime?: string(name='total_time'),
          }
        ](name='flight_segment_infos'),
        journeyIndex?: int32(name='journey_index', example='0'),
        transferTime?: int32(name='transfer_time', example='0'),
      }
    ](name='journey_list'),
    orderId?: long(name='order_id', example='1017124195788186048'),
    originJourneyList?: [ 
      {
        arrCityCode?: string(name='arr_city_code', example='HKG'),
        arrCityName?: string(name='arr_city_name'),
        arrTime?: string(name='arr_time', example='2025-01-01 02:00'),
        depCityCode?: string(name='dep_city_code', example='BJS'),
        depCityName?: string(name='dep_city_name'),
        depTime?: string(name='dep_time', example='2025-01-01 01:00'),
        duration?: int32(name='duration', example='60'),
        flightSegmentInfos?: [ 
          {
            airlineInfo?: {
              airlineCode?: string(name='airline_code', example='CA'),
              airlineName?: string(name='airline_name'),
              shortName?: string(name='short_name'),
            }(name='airline_info'),
            arrAirportInfo?: {
              airportCode?: string(name='airport_code', example='HKG'),
              airportName?: string(name='airport_name'),
              airportShortName?: string(name='airport_short_name'),
              terminal?: string(name='terminal', example='T3'),
            }(name='arr_airport_info'),
            arrCityCode?: string(name='arr_city_code', example='HKG'),
            arrCityName?: string(name='arr_city_name'),
            arrTime?: string(name='arr_time', example='2023-08-13 09:25'),
            depAirportInfo?: {
              airportCode?: string(name='airport_code', example='PEK'),
              airportName?: string(name='airport_name'),
              airportShortName?: string(name='airport_short_name'),
              terminal?: string(name='terminal', example='T1'),
            }(name='dep_airport_info'),
            depCityCode?: string(name='dep_city_code', example='BJS'),
            depCityName?: string(name='dep_city_name'),
            depTime?: string(name='dep_time', example='2023-08-13 07:25'),
            duration?: int32(name='duration', example='120'),
            flightNo?: string(name='flight_no', example='NS8210'),
            flightShareInfo?: {
              operatingAirlineInfo?: {
                airlineCode?: string(name='airline_code', example='MU'),
                airlineName?: string(name='airline_name'),
                shortName?: string(name='short_name'),
              }(name='operating_airline_info'),
              operatingFlightNo?: string(name='operating_flight_no', example='CA0001'),
            }(name='flight_share_info'),
            flightSize?: string(name='flight_size'),
            flightStopInfoList?: [ 
              {
                stopAirport?: string(name='stop_airport', example='HGH'),
                stopAirportName?: string(name='stop_airport_name'),
                stopArrTerm?: string(name='stop_arr_term', example='T1'),
                stopArrTime?: string(name='stop_arr_time', example='2023-08-13 07:25'),
                stopCityCode?: string(name='stop_city_code', example='HGH'),
                stopCityName?: string(name='stop_city_name'),
                stopDepTerm?: string(name='stop_dep_term', example='T1'),
                stopDepTime?: string(name='stop_dep_time', example='2023-08-13 09:25'),
                stopTime?: string(name='stop_time', example='20'),
              }
            ](name='flight_stop_info_list'),
            flightType?: string(name='flight_type', example='738'),
            journeyIndex?: int32(name='journey_index', example='0'),
            luggageDirectInfo?: {
              depCityLuggageDirect?: int32(name='dep_city_luggage_direct', example='1'),
              stopCityLuggageDirect?: int32(name='stop_city_luggage_direct', example='1'),
            }(name='luggage_direct_info'),
            manufacturer?: string(name='manufacturer'),
            mealDesc?: string(name='meal_desc'),
            oneMore?: int32(name='one_more', example='1'),
            oneMoreShow?: string(name='one_more_show'),
            segmentIndex?: int32(name='segment_index', example='0'),
            segmentKey?: string(name='segment_key', example='NS8210XIYHGH0501'),
            segmentVisaRemark?: {
              depCityVisaRemark?: string(name='dep_city_visa_remark'),
              depCityVisaType?: int32(name='dep_city_visa_type', example='1'),
              stopCityVisaRemarks?: [ string ](name='stop_city_visa_remarks'),
              stopCityVisaTypes?: [ int32 ](name='stop_city_visa_types'),
            }(name='segment_visa_remark'),
            share?: boolean(name='share', example='true'),
            shortFlightSize?: string(name='short_flight_size'),
            stop?: boolean(name='stop', example='true'),
            totalTime?: string(name='total_time'),
          }
        ](name='flight_segment_infos'),
        journeyIndex?: int32(name='journey_index', example='0'),
        transferTime?: int32(name='transfer_time', example='0'),
      }
    ](name='origin_journey_list'),
    outOrderId?: string(name='out_order_id', example='F11552194294228713472'),
    outReShopApplyId?: string(name='out_re_shop_apply_id', example='JPM20241024354'),
    passengerList?: [ 
      {
        fullName?: string(name='full_name', example='ZHANG/SAN'),
        gender?: int32(name='gender', example='0'),
        jobNo?: string(name='job_no', example='76230022'),
        nationality?: string(name='nationality'),
        nationalityCode?: string(name='nationality_code', example='CN'),
        passengerId?: long(name='passenger_id', example='8432002'),
        type?: int32(name='type', example='0'),
        userId?: string(name='user_id', example='btrip8432002'),
        userType?: int32(name='user_type', example='0'),
      }
    ](name='passenger_list'),
    passengerPriceInfoList?: [ 
      {
        passengerId?: long(name='passenger_id', example='100001'),
        priceInfo?: {
          handlingAmount?: long(name='handling_amount', example='4000'),
          taxDiffAmount?: long(name='tax_diff_amount', example='0'),
          totalAmount?: long(name='total_amount', example='125000'),
          upgradeAmount?: long(name='upgrade_amount', example='2000'),
        }(name='price_info'),
      }
    ](name='passenger_price_info_list'),
    passengerTicketList?: [ 
      {
        passengerId?: long(name='passenger_id', example='2345678'),
        ticketList?: [ 
          {
            issueTime?: string(name='issue_time', example='2025-01-01 00:00:09'),
            pnrNo?: string(name='pnr_no', example='P123456'),
            segmentKeyList?: [ string ](name='segment_key_list'),
            ticketNo?: string(name='ticket_no', example='781-9574833593'),
            ticketSegmentList?: [ 
              {
                cabin?: string(name='cabin', example='G'),
                cabinClass?: string(name='cabin_class', example='Y'),
                modified?: boolean(name='modified', example='false'),
                openTicketStatus?: string(name='open_ticket_status', example='OPEN_FOR_USE'),
                refunded?: boolean(name='refunded', example='false'),
                segmentKey?: string(name='segment_key', example='HX236HKGPVG0509'),
              }
            ](name='ticket_segment_list'),
          }
        ](name='ticket_list'),
      }
    ](name='passenger_ticket_list'),
    payLatestTime?: string(name='pay_latest_time', example='2024-03-06 15:35:00'),
    payStatus?: int32(name='pay_status', example='0'),
    priceInfo?: {
      handlingAmount?: long(name='handling_amount', example='4000'),
      taxDiffAmount?: long(name='tax_diff_amount', example='0'),
      totalAmount?: long(name='total_amount', example='125000'),
      upgradeAmount?: long(name='upgrade_amount', example='2000'),
    }(name='price_info'),
    reShopApplyId?: long(name='re_shop_apply_id', example='1017035199374643191'),
    reShopReasonCode?: string(name='re_shop_reason_code', example='0'),
    reShopReasonDesc?: string(name='re_shop_reason_desc'),
    refundChangeRule?: {
      refundChangeRuleDesc?: string(name='refund_change_rule_desc'),
    }(name='refund_change_rule'),
    status?: int32(name='status', example='1'),
    successTime?: string(name='success_time', example='2024-03-06 15:01:35'),
    userIntentionMemo?: string(name='user_intention_memo'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210bc4b116835992457938931db4de'),
}

model IntlFlightReShopDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IntlFlightReShopDetailResponseBody(name='body'),
}

/**
 * @summary 国际机票改签详情
 *
 * @param request IntlFlightReShopDetailRequest
 * @param headers IntlFlightReShopDetailHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IntlFlightReShopDetailResponse
 */
async function intlFlightReShopDetailWithOptions(request: IntlFlightReShopDetailRequest, headers: IntlFlightReShopDetailHeaders, runtime: Util.RuntimeOptions): IntlFlightReShopDetailResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    query['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.outReShopApplyId)) {
    query['out_re_shop_apply_id'] = request.outReShopApplyId;
  }
  if (!Util.isUnset(request.reShopApplyId)) {
    query['re_shop_apply_id'] = request.reShopApplyId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IntlFlightReShopDetail',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/intl-flight/v1/flights/action/reshop/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际机票改签详情
 *
 * @param request IntlFlightReShopDetailRequest
 * @return IntlFlightReShopDetailResponse
 */
async function intlFlightReShopDetail(request: IntlFlightReShopDetailRequest): IntlFlightReShopDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IntlFlightReShopDetailHeaders{};
  return intlFlightReShopDetailWithOptions(request, headers, runtime);
}

model IntlFlightReShopPayHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model IntlFlightReShopPayRequest {
  orderId?: string(name='order_id', description='This parameter is required.', example='1017035200059399795'),
  outOrderId?: string(name='out_order_id', example='JPT2025032400000001'),
  outReShopApplyId?: string(name='out_re_shop_apply_id', example='JPM20241024354'),
  reShopApplyId?: string(name='re_shop_apply_id', description='This parameter is required.', example='1019202345889633'),
}

model IntlFlightReShopPayResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message', example='成功'),
  module?: {
    actualPayPrice?: long(name='actual_pay_price', example='100000'),
    payStatus?: int32(name='pay_status', example='0'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210bc4b116835992457938931db4de'),
}

model IntlFlightReShopPayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IntlFlightReShopPayResponseBody(name='body'),
}

/**
 * @summary 国际机票改签支付
 *
 * @param request IntlFlightReShopPayRequest
 * @param headers IntlFlightReShopPayHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IntlFlightReShopPayResponse
 */
async function intlFlightReShopPayWithOptions(request: IntlFlightReShopPayRequest, headers: IntlFlightReShopPayHeaders, runtime: Util.RuntimeOptions): IntlFlightReShopPayResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.outReShopApplyId)) {
    body['out_re_shop_apply_id'] = request.outReShopApplyId;
  }
  if (!Util.isUnset(request.reShopApplyId)) {
    body['re_shop_apply_id'] = request.reShopApplyId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'IntlFlightReShopPay',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/intl-flight/v1/flights/action/reshop/pay`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际机票改签支付
 *
 * @param request IntlFlightReShopPayRequest
 * @return IntlFlightReShopPayResponse
 */
async function intlFlightReShopPay(request: IntlFlightReShopPayRequest): IntlFlightReShopPayResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IntlFlightReShopPayHeaders{};
  return intlFlightReShopPayWithOptions(request, headers, runtime);
}

model IntlFlightRefundApplyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model IntlFlightRefundApplyRequest {
  orderId?: string(name='order_id', description='This parameter is required.', example='1002145190081005400'),
  outOrderId?: string(name='out_order_id', example='3750656668336001024'),
  outRefundApplyId?: string(name='out_refund_apply_id', example='202503251022170001'),
  passengerJourneyGroupKey?: string(name='passenger_journey_group_key', description='This parameter is required.', example='edcac4f4c79d40ccb141ddb6da567e65'),
  refundReasonCode?: string(name='refund_reason_code', description='This parameter is required.', example='0'),
  refundSegmentList?: [ 
    {
      segmentKey?: string(name='segment_key', description='This parameter is required.', example='CZ5009PKXHKG0616'),
    }
  ](name='refund_segment_list', description='This parameter is required.'),
  selectedPassengers?: [ 
    {
      fullName?: string(name='full_name', example='ZHANG/SAN'),
      passengerId?: long(name='passenger_id', description='This parameter is required.', example='1000001'),
    }
  ](name='selected_passengers', description='This parameter is required.'),
}

model IntlFlightRefundApplyShrinkRequest {
  orderId?: string(name='order_id', description='This parameter is required.', example='1002145190081005400'),
  outOrderId?: string(name='out_order_id', example='3750656668336001024'),
  outRefundApplyId?: string(name='out_refund_apply_id', example='202503251022170001'),
  passengerJourneyGroupKey?: string(name='passenger_journey_group_key', description='This parameter is required.', example='edcac4f4c79d40ccb141ddb6da567e65'),
  refundReasonCode?: string(name='refund_reason_code', description='This parameter is required.', example='0'),
  refundSegmentListShrink?: string(name='refund_segment_list', description='This parameter is required.'),
  selectedPassengersShrink?: string(name='selected_passengers', description='This parameter is required.'),
}

model IntlFlightRefundApplyResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message', example='成功'),
  module?: {
    outRefundApplyId?: string(name='out_refund_apply_id', example='2025011317110900006'),
    refundApplyId?: string(name='refund_apply_id', example='1000000005186043'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210bc4b116835992457938931db4de'),
}

model IntlFlightRefundApplyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IntlFlightRefundApplyResponseBody(name='body'),
}

/**
 * @summary 国际机票退票申请
 *
 * @param tmpReq IntlFlightRefundApplyRequest
 * @param headers IntlFlightRefundApplyHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IntlFlightRefundApplyResponse
 */
async function intlFlightRefundApplyWithOptions(tmpReq: IntlFlightRefundApplyRequest, headers: IntlFlightRefundApplyHeaders, runtime: Util.RuntimeOptions): IntlFlightRefundApplyResponse {
  Util.validateModel(tmpReq);
  var request = new IntlFlightRefundApplyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.refundSegmentList)) {
    request.refundSegmentListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.refundSegmentList, 'refund_segment_list', 'json');
  }
  if (!Util.isUnset(tmpReq.selectedPassengers)) {
    request.selectedPassengersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.selectedPassengers, 'selected_passengers', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.outRefundApplyId)) {
    body['out_refund_apply_id'] = request.outRefundApplyId;
  }
  if (!Util.isUnset(request.passengerJourneyGroupKey)) {
    body['passenger_journey_group_key'] = request.passengerJourneyGroupKey;
  }
  if (!Util.isUnset(request.refundReasonCode)) {
    body['refund_reason_code'] = request.refundReasonCode;
  }
  if (!Util.isUnset(request.refundSegmentListShrink)) {
    body['refund_segment_list'] = request.refundSegmentListShrink;
  }
  if (!Util.isUnset(request.selectedPassengersShrink)) {
    body['selected_passengers'] = request.selectedPassengersShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'IntlFlightRefundApply',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/intl-flight/v1/flights/action/refund/apply`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际机票退票申请
 *
 * @param request IntlFlightRefundApplyRequest
 * @return IntlFlightRefundApplyResponse
 */
async function intlFlightRefundApply(request: IntlFlightRefundApplyRequest): IntlFlightRefundApplyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IntlFlightRefundApplyHeaders{};
  return intlFlightRefundApplyWithOptions(request, headers, runtime);
}

model IntlFlightRefundConsultHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model IntlFlightRefundConsultRequest {
  orderId?: string(name='order_id', description='This parameter is required.', example='1002145190081005400'),
  outOrderId?: string(name='out_order_id', example='3753197470069161984'),
}

model IntlFlightRefundConsultResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message', example='成功'),
  module?: {
    passengerJourneyGroupInfoList?: [ 
      {
        passengerJourneyGroupKey?: string(name='passenger_journey_group_key', example='edcac4f4c79d40ccb141ddb6da567e65'),
        passengerList?: [ 
          {
            fullName?: string(name='full_name', example='ZHANG/SAN'),
            passengerId?: long(name='passenger_id', example='1000001'),
          }
        ](name='passenger_list'),
        passengerSegmentStatusInfoList?: [ 
          {
            canRefund?: boolean(name='can_refund', example='true'),
            passengerId?: long(name='passenger_id', example='1000001'),
            segmentKey?: string(name='segment_key', example='CZ5009PKXHKG0616'),
            unRefundReason?: string(name='un_refund_reason'),
            unRefundReasonCode?: string(name='un_refund_reason_code', example='3'),
          }
        ](name='passenger_segment_status_info_list'),
        refundReasonInfoList?: [ 
          {
            reasonCode?: string(name='reason_code', example='0'),
            reasonDesc?: string(name='reason_desc'),
            voluntary?: boolean(name='voluntary', example='true'),
          }
        ](name='refund_reason_info_list'),
        segmentList?: [ 
          {
            arrCityCode?: string(name='arr_city_code', example='HKG'),
            depCityCode?: string(name='dep_city_code', example='BJS'),
            depTime?: string(name='dep_time', example='2025-06-16 19:20'),
            flightNo?: string(name='flight_no', example='CZ5009'),
            journeyIndex?: int32(name='journey_index', example='0'),
            segmentIndex?: int32(name='segment_index', example='0'),
            segmentKey?: string(name='segment_key', example='CZ5009PKXHKG0616'),
          }
        ](name='segment_list'),
      }
    ](name='passenger_journey_group_info_list'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210bc4b116835992457938931db4de'),
}

model IntlFlightRefundConsultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IntlFlightRefundConsultResponseBody(name='body'),
}

/**
 * @summary 国际机票退票咨询
 *
 * @param request IntlFlightRefundConsultRequest
 * @param headers IntlFlightRefundConsultHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IntlFlightRefundConsultResponse
 */
async function intlFlightRefundConsultWithOptions(request: IntlFlightRefundConsultRequest, headers: IntlFlightRefundConsultHeaders, runtime: Util.RuntimeOptions): IntlFlightRefundConsultResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    query['out_order_id'] = request.outOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IntlFlightRefundConsult',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/intl-flight/v1/flights/action/refund/consult`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际机票退票咨询
 *
 * @param request IntlFlightRefundConsultRequest
 * @return IntlFlightRefundConsultResponse
 */
async function intlFlightRefundConsult(request: IntlFlightRefundConsultRequest): IntlFlightRefundConsultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IntlFlightRefundConsultHeaders{};
  return intlFlightRefundConsultWithOptions(request, headers, runtime);
}

model IntlFlightRefundDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model IntlFlightRefundDetailRequest {
  orderId?: string(name='order_id', description='This parameter is required.', example='1002145190081005400'),
  outOrderId?: string(name='out_order_id', example='40820102379649052'),
  outRefundApplyId?: string(name='out_refund_apply_id'),
  refundApplyId?: string(name='refund_apply_id', description='This parameter is required.'),
}

model IntlFlightRefundDetailResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message', example='成功'),
  module?: {
    passengeRefundFeeDetailList?: [ 
      {
        passengerId?: long(name='passenger_id', example='100001'),
        refundFeeDetail?: {
          alreadyUsedTotalAmount?: long(name='already_used_total_amount', example='12400'),
          nonRefundableReShopHandlingFee?: long(name='non_refundable_re_shop_handling_fee', example='21000'),
          nonRefundableReShopUpgradeFee?: long(name='non_refundable_re_shop_upgrade_fee', example='0'),
          nonRefundableTaxDiffFee?: long(name='non_refundable_tax_diff_fee', example='0'),
          reShopRefundAmount?: long(name='re_shop_refund_amount', example='14000'),
          reShopServiceRefundAmount?: long(name='re_shop_service_refund_amount', example='14000'),
          reShopUpgradeRefundAmount?: long(name='re_shop_upgrade_refund_amount', example='0'),
          refundReShopFeeDetailList?: [ 
            {
              nonRefundableReShopHandlingFee?: long(name='non_refundable_re_shop_handling_fee', example='21000'),
              nonRefundableReShopUpgradeFee?: long(name='non_refundable_re_shop_upgrade_fee', example='0'),
              nonRefundableTaxDiffFee?: long(name='non_refundable_tax_diff_fee', example='0'),
              reShopApplyId?: string(name='re_shop_apply_id', example='10002340021'),
              reShopRefundAmount?: long(name='re_shop_refund_amount', example='14000'),
              reShopServiceRefundAmount?: long(name='re_shop_service_refund_amount', example='14000'),
              reShopUpgradeRefundAmount?: long(name='re_shop_upgrade_refund_amount', example='0'),
              refundTaxDiffAmount?: long(name='refund_tax_diff_amount', example='0'),
            }
          ](name='refund_re_shop_fee_detail_list'),
          refundTaxDiffAmount?: long(name='refund_tax_diff_amount', example='0'),
          refundTaxFee?: long(name='refund_tax_fee', example='45000'),
          refundTicketFee?: long(name='refund_ticket_fee', example='2000'),
          taxRefundAmount?: long(name='tax_refund_amount'),
          ticketRefundAmount?: long(name='ticket_refund_amount'),
          totalRefundAmount?: long(name='total_refund_amount'),
        }(name='refund_fee_detail'),
        ticketList?: [ 
          {
            segmentKeyList?: [ string ](name='segment_key_list'),
            ticketNo?: string(name='ticket_no', example='784-3553845201'),
          }
        ](name='ticket_list'),
      }
    ](name='passenge_refund_fee_detail_list'),
    passengerList?: [ 
      {
        birthday?: string(name='birthday', example='1996-09-13'),
        fullName?: string(name='full_name', example='ZHANG/SAN'),
        gender?: int32(name='gender', example='1'),
        jobNo?: string(name='job_no', example='1001101'),
        nationality?: string(name='nationality'),
        nationalityCode?: string(name='nationality_code', example='CN'),
        passengerId?: long(name='passenger_id', example='8432002'),
        type?: int32(name='type', example='0'),
        userId?: string(name='user_id', example='btrip8432002'),
        userType?: int32(name='user_type', example='0'),
      }
    ](name='passenger_list'),
    refundOrderInfo?: {
      applyTime?: string(name='apply_time', example='2025-06-16 19:20:00'),
      closeReason?: string(name='close_reason'),
      handingAmount?: long(name='handing_amount', example='4000'),
      outRefundApplyId?: string(name='out_refund_apply_id', example='2025011317110900006'),
      reasonCode?: string(name='reason_code', example='0'),
      reasonDesc?: string(name='reason_desc'),
      refundAmount?: long(name='refund_amount', example='10200'),
      refundApplyId?: string(name='refund_apply_id', example='1000000003437017'),
      relationRefundApplyId?: long(name='relation_refund_apply_id', example='1000000003437020'),
      status?: int32(name='status', example='9'),
      successTime?: string(name='success_time', example='2025-06-16 20:20:00'),
      voluntary?: boolean(name='voluntary', example='true'),
    }(name='refund_order_info'),
    segmentList?: [ 
      {
        airlineInfo?: {
          airlineCode?: string(name='airline_code', example='MU'),
          airlineName?: string(name='airline_name'),
          shortName?: string(name='short_name'),
        }(name='airline_info'),
        arrAirportInfo?: {
          airportCode?: string(name='airport_code', example='HKG'),
          airportName?: string(name='airport_name'),
          airportShortName?: string(name='airport_short_name'),
          terminal?: string(name='terminal', example='T3'),
        }(name='arr_airport_info'),
        arrCityCode?: string(name='arr_city_code', example='HKG'),
        arrCityName?: string(name='arr_city_name'),
        arrTime?: string(name='arr_time', example='2023-08-13 09:25'),
        depAirportInfo?: {
          airportCode?: string(name='airport_code', example='PEK'),
          airportName?: string(name='airport_name'),
          airportShortName?: string(name='airport_short_name'),
          terminal?: string(name='terminal', example='T1'),
        }(name='dep_airport_info'),
        depCityCode?: string(name='dep_city_code', example='370100'),
        depCityName?: string(name='dep_city_name'),
        depTime?: string(name='dep_time', example='2023-08-13 07:25'),
        duration?: int32(name='duration', example='120'),
        flightNo?: string(name='flight_no', example='NS8210'),
        flightShareInfo?: {
          operatingAirlineInfo?: {
            airlineCode?: string(name='airline_code', example='CA'),
            airlineName?: string(name='airline_name'),
            shortName?: string(name='short_name'),
          }(name='operating_airline_info'),
          operatingFlightNo?: string(name='operating_flight_no', example='CA0001'),
        }(name='flight_share_info'),
        flightSize?: string(name='flight_size'),
        flightStopInfoList?: [ 
          {
            stopAirport?: string(name='stop_airport', example='HGH'),
            stopAirportName?: string(name='stop_airport_name'),
            stopArrTerm?: string(name='stop_arr_term', example='T1'),
            stopArrTime?: string(name='stop_arr_time', example='2023-08-13 07:25'),
            stopCityCode?: string(name='stop_city_code', example='HGH'),
            stopCityName?: string(name='stop_city_name'),
            stopDepTerm?: string(name='stop_dep_term', example='T1'),
            stopDepTime?: string(name='stop_dep_time', example='2023-08-13 07:45'),
            stopTime?: string(name='stop_time', example='20'),
          }
        ](name='flight_stop_info_list'),
        flightType?: string(name='flight_type', example='787'),
        journeyIndex?: int32(name='journey_index', example='0'),
        luggageDirectInfo?: {
          depCityLuggageDirect?: int32(name='dep_city_luggage_direct', example='1'),
          stopCityLuggageDirect?: int32(name='stop_city_luggage_direct', example='1'),
        }(name='luggage_direct_info'),
        manufacturer?: string(name='manufacturer'),
        mealDesc?: string(name='meal_desc'),
        oneMore?: int32(name='one_more', example='1'),
        oneMoreShow?: string(name='one_more_show'),
        segmentIndex?: int32(name='segment_index', example='0'),
        segmentKey?: string(name='segment_key', example='CZ5009PKXHKG0616'),
        segmentVisaRemark?: {
          depCityVisaRemark?: string(name='dep_city_visa_remark'),
          depCityVisaType?: int32(name='dep_city_visa_type', example='1'),
          stopCityVisaRemarks?: [ string ](name='stop_city_visa_remarks'),
          stopCityVisaTypes?: [ int32 ](name='stop_city_visa_types'),
        }(name='segment_visa_remark'),
        share?: boolean(name='share', example='true'),
        shortFlightSize?: string(name='short_flight_size'),
        stop?: boolean(name='stop', example='true'),
        totalTime?: string(name='total_time'),
      }
    ](name='segment_list'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210bc4b116835992457938931db4de'),
}

model IntlFlightRefundDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IntlFlightRefundDetailResponseBody(name='body'),
}

/**
 * @summary 国际机票退票详情
 *
 * @param request IntlFlightRefundDetailRequest
 * @param headers IntlFlightRefundDetailHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IntlFlightRefundDetailResponse
 */
async function intlFlightRefundDetailWithOptions(request: IntlFlightRefundDetailRequest, headers: IntlFlightRefundDetailHeaders, runtime: Util.RuntimeOptions): IntlFlightRefundDetailResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    query['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.outRefundApplyId)) {
    query['out_refund_apply_id'] = request.outRefundApplyId;
  }
  if (!Util.isUnset(request.refundApplyId)) {
    query['refund_apply_id'] = request.refundApplyId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IntlFlightRefundDetail',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/intl-flight/v1/flights/action/refund/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际机票退票详情
 *
 * @param request IntlFlightRefundDetailRequest
 * @return IntlFlightRefundDetailResponse
 */
async function intlFlightRefundDetail(request: IntlFlightRefundDetailRequest): IntlFlightRefundDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IntlFlightRefundDetailHeaders{};
  return intlFlightRefundDetailWithOptions(request, headers, runtime);
}

model IntlFlightSegmentAvailableCertHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model IntlFlightSegmentAvailableCertRequest {
  isvName?: string(name='isv_name', example='ZJTD'),
  language?: string(name='language', example='chinese'),
  userId?: string(name='user_id', example='21341234'),
  userName?: string(name='user_name'),
}

model IntlFlightSegmentAvailableCertResponseBody = {
  module?: {
    segmentAvailableCertList?: [ 
      {
        certTypes?: [ int32 ](name='cert_types'),
        segmentPosition?: {
          journeyIndex?: int32(name='journey_index', example='0'),
          segmentIndex?: int32(name='segment_index', example='0'),
        }(name='segment_position'),
      }
    ](name='segment_available_cert_list'),
  }(name='module'),
  requestId?: string(name='requestId', example='210bc81a17090871660176894d008c'),
  resultCode?: string(name='result_code', example='0'),
  resultMsg?: string(name='result_msg'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='213e1ea516895592036143147e5864'),
}

model IntlFlightSegmentAvailableCertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IntlFlightSegmentAvailableCertResponseBody(name='body'),
}

/**
 * @summary 国际机票航班可用证件查询
 *
 * @param request IntlFlightSegmentAvailableCertRequest
 * @param headers IntlFlightSegmentAvailableCertHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IntlFlightSegmentAvailableCertResponse
 */
async function intlFlightSegmentAvailableCertWithOptions(otaItemId: string, request: IntlFlightSegmentAvailableCertRequest, headers: IntlFlightSegmentAvailableCertHeaders, runtime: Util.RuntimeOptions): IntlFlightSegmentAvailableCertResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.isvName)) {
    query['isv_name'] = request.isvName;
  }
  if (!Util.isUnset(request.language)) {
    query['language'] = request.language;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    query['user_name'] = request.userName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IntlFlightSegmentAvailableCert',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/intl-flight/v1/items/${OpenApiUtil.getEncodeParam(otaItemId)}/action/segment-available-cert`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 国际机票航班可用证件查询
 *
 * @param request IntlFlightSegmentAvailableCertRequest
 * @return IntlFlightSegmentAvailableCertResponse
 */
async function intlFlightSegmentAvailableCert(otaItemId: string, request: IntlFlightSegmentAvailableCertRequest): IntlFlightSegmentAvailableCertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IntlFlightSegmentAvailableCertHeaders{};
  return intlFlightSegmentAvailableCertWithOptions(otaItemId, request, headers, runtime);
}

model InvoiceAddHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model InvoiceAddRequest {
  address?: string(name='address', example='xxx'),
  bankName?: string(name='bank_name'),
  bankNo?: string(name='bank_no', example='123456'),
  taxNo?: string(name='tax_no', example='12345'),
  tel?: string(name='tel', example='123'),
  thirdPartId?: string(name='third_part_id', description='This parameter is required.', example='340049'),
  title?: string(name='title', description='This parameter is required.'),
  type?: int32(name='type', description='This parameter is required.', example='1'),
  unitType?: int32(name='unit_type'),
}

model InvoiceAddResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model InvoiceAddResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InvoiceAddResponseBody(name='body'),
}

/**
 * @summary 新增发票配置
 *
 * @param request InvoiceAddRequest
 * @param headers InvoiceAddHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InvoiceAddResponse
 */
async function invoiceAddWithOptions(request: InvoiceAddRequest, headers: InvoiceAddHeaders, runtime: Util.RuntimeOptions): InvoiceAddResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.address)) {
    body['address'] = request.address;
  }
  if (!Util.isUnset(request.bankName)) {
    body['bank_name'] = request.bankName;
  }
  if (!Util.isUnset(request.bankNo)) {
    body['bank_no'] = request.bankNo;
  }
  if (!Util.isUnset(request.taxNo)) {
    body['tax_no'] = request.taxNo;
  }
  if (!Util.isUnset(request.tel)) {
    body['tel'] = request.tel;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    body['third_part_id'] = request.thirdPartId;
  }
  if (!Util.isUnset(request.title)) {
    body['title'] = request.title;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }
  if (!Util.isUnset(request.unitType)) {
    body['unit_type'] = request.unitType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InvoiceAdd',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/add-invoice`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新增发票配置
 *
 * @param request InvoiceAddRequest
 * @return InvoiceAddResponse
 */
async function invoiceAdd(request: InvoiceAddRequest): InvoiceAddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvoiceAddHeaders{};
  return invoiceAddWithOptions(request, headers, runtime);
}

model InvoiceDeleteHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model InvoiceDeleteRequest {
  thirdPartId?: string(name='third_part_id', description='This parameter is required.', example='340049'),
}

model InvoiceDeleteResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model InvoiceDeleteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InvoiceDeleteResponseBody(name='body'),
}

/**
 * @summary 删除发票抬头
 *
 * @param request InvoiceDeleteRequest
 * @param headers InvoiceDeleteHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InvoiceDeleteResponse
 */
async function invoiceDeleteWithOptions(request: InvoiceDeleteRequest, headers: InvoiceDeleteHeaders, runtime: Util.RuntimeOptions): InvoiceDeleteResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.thirdPartId)) {
    query['third_part_id'] = request.thirdPartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InvoiceDelete',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/invoice`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除发票抬头
 *
 * @param request InvoiceDeleteRequest
 * @return InvoiceDeleteResponse
 */
async function invoiceDelete(request: InvoiceDeleteRequest): InvoiceDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvoiceDeleteHeaders{};
  return invoiceDeleteWithOptions(request, headers, runtime);
}

model InvoiceModifyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model InvoiceModifyRequest {
  address?: string(name='address'),
  bankName?: string(name='bank_name', example='12345678'),
  bankNo?: string(name='bank_no', example='2222'),
  taxNo?: string(name='tax_no', example='122333121'),
  tel?: string(name='tel', example='12345678'),
  thirdPartId?: string(name='third_part_id', description='This parameter is required.', example='340049'),
  title?: string(name='title', description='This parameter is required.'),
  type?: int32(name='type', description='This parameter is required.', example='1'),
  unitType?: int32(name='unit_type'),
}

model InvoiceModifyResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model InvoiceModifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InvoiceModifyResponseBody(name='body'),
}

/**
 * @summary 修改发票配置
 *
 * @param request InvoiceModifyRequest
 * @param headers InvoiceModifyHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InvoiceModifyResponse
 */
async function invoiceModifyWithOptions(request: InvoiceModifyRequest, headers: InvoiceModifyHeaders, runtime: Util.RuntimeOptions): InvoiceModifyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.address)) {
    body['address'] = request.address;
  }
  if (!Util.isUnset(request.bankName)) {
    body['bank_name'] = request.bankName;
  }
  if (!Util.isUnset(request.bankNo)) {
    body['bank_no'] = request.bankNo;
  }
  if (!Util.isUnset(request.taxNo)) {
    body['tax_no'] = request.taxNo;
  }
  if (!Util.isUnset(request.tel)) {
    body['tel'] = request.tel;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    body['third_part_id'] = request.thirdPartId;
  }
  if (!Util.isUnset(request.title)) {
    body['title'] = request.title;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }
  if (!Util.isUnset(request.unitType)) {
    body['unit_type'] = request.unitType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InvoiceModify',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/invoice`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改发票配置
 *
 * @param request InvoiceModifyRequest
 * @return InvoiceModifyResponse
 */
async function invoiceModify(request: InvoiceModifyRequest): InvoiceModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvoiceModifyHeaders{};
  return invoiceModifyWithOptions(request, headers, runtime);
}

model InvoiceRuleAddHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model InvoiceRuleAddRequest {
  entities?: [ 
    {
      entityId?: string(name='entity_id', description='This parameter is required.', example='12345'),
      entityName?: string(name='entity_name', description='This parameter is required.'),
      entityType?: string(name='entity_type', description='This parameter is required.', example='1'),
    }
  ](name='entities', description='This parameter is required.'),
  thirdPartId?: string(name='third_part_id', description='This parameter is required.', example='4854821'),
}

model InvoiceRuleAddShrinkRequest {
  entitiesShrink?: string(name='entities', description='This parameter is required.'),
  thirdPartId?: string(name='third_part_id', description='This parameter is required.', example='4854821'),
}

model InvoiceRuleAddResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    addNum?: int32(name='add_num', example='1'),
    selectedUserNum?: int32(name='selected_user_num', example='1'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model InvoiceRuleAddResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InvoiceRuleAddResponseBody(name='body'),
}

/**
 * @summary 新增发票抬头可用员工
 *
 * @param tmpReq InvoiceRuleAddRequest
 * @param headers InvoiceRuleAddHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InvoiceRuleAddResponse
 */
async function invoiceRuleAddWithOptions(tmpReq: InvoiceRuleAddRequest, headers: InvoiceRuleAddHeaders, runtime: Util.RuntimeOptions): InvoiceRuleAddResponse {
  Util.validateModel(tmpReq);
  var request = new InvoiceRuleAddShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entities)) {
    request.entitiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entities, 'entities', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.entitiesShrink)) {
    body['entities'] = request.entitiesShrink;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    body['third_part_id'] = request.thirdPartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InvoiceRuleAdd',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/invoice-rule`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新增发票抬头可用员工
 *
 * @param request InvoiceRuleAddRequest
 * @return InvoiceRuleAddResponse
 */
async function invoiceRuleAdd(request: InvoiceRuleAddRequest): InvoiceRuleAddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvoiceRuleAddHeaders{};
  return invoiceRuleAddWithOptions(request, headers, runtime);
}

model InvoiceRuleDeleteHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model InvoiceRuleDeleteRequest {
  delAll?: boolean(name='del_all', example='false'),
  entities?: [ 
    {
      entityId?: string(name='entity_id', example='12345'),
      entityType?: string(name='entity_type', example='1'),
    }
  ](name='entities'),
  thirdPartId?: string(name='third_part_id', description='This parameter is required.', example='340049'),
}

model InvoiceRuleDeleteShrinkRequest {
  delAll?: boolean(name='del_all', example='false'),
  entitiesShrink?: string(name='entities'),
  thirdPartId?: string(name='third_part_id', description='This parameter is required.', example='340049'),
}

model InvoiceRuleDeleteResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    removeNum?: int32(name='remove_num', example='1'),
    selectedUserNum?: int32(name='selected_user_num', example='0'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model InvoiceRuleDeleteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InvoiceRuleDeleteResponseBody(name='body'),
}

/**
 * @summary 删除发票抬头可用员工
 *
 * @param tmpReq InvoiceRuleDeleteRequest
 * @param headers InvoiceRuleDeleteHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InvoiceRuleDeleteResponse
 */
async function invoiceRuleDeleteWithOptions(tmpReq: InvoiceRuleDeleteRequest, headers: InvoiceRuleDeleteHeaders, runtime: Util.RuntimeOptions): InvoiceRuleDeleteResponse {
  Util.validateModel(tmpReq);
  var request = new InvoiceRuleDeleteShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entities)) {
    request.entitiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entities, 'entities', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.delAll)) {
    query['del_all'] = request.delAll;
  }
  if (!Util.isUnset(request.entitiesShrink)) {
    query['entities'] = request.entitiesShrink;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    query['third_part_id'] = request.thirdPartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InvoiceRuleDelete',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/invoice-rule`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除发票抬头可用员工
 *
 * @param request InvoiceRuleDeleteRequest
 * @return InvoiceRuleDeleteResponse
 */
async function invoiceRuleDelete(request: InvoiceRuleDeleteRequest): InvoiceRuleDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvoiceRuleDeleteHeaders{};
  return invoiceRuleDeleteWithOptions(request, headers, runtime);
}

model InvoiceRuleSaveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model InvoiceRuleSaveRequest {
  allEmploye?: boolean(name='all_employe', example='true'),
  entities?: [ 
    {
      id?: string(name='id', example='123'),
      name?: string(name='name'),
      type?: int32(name='type', example='1'),
    }
  ](name='entities'),
  scope?: int32(name='scope'),
  thirdPartId?: string(name='third_part_id', description='This parameter is required.', example='i123'),
}

model InvoiceRuleSaveShrinkRequest {
  allEmploye?: boolean(name='all_employe', example='true'),
  entitiesShrink?: string(name='entities'),
  scope?: int32(name='scope'),
  thirdPartId?: string(name='third_part_id', description='This parameter is required.', example='i123'),
}

model InvoiceRuleSaveResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    addNum?: int32(name='add_num', example='1'),
    removeNum?: int32(name='remove_num', example='1'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='8465F68D-BC97-5C0F-9161-3E65919D9135'),
}

model InvoiceRuleSaveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InvoiceRuleSaveResponseBody(name='body'),
}

/**
 * @summary 保存发票规则
 *
 * @param tmpReq InvoiceRuleSaveRequest
 * @param headers InvoiceRuleSaveHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InvoiceRuleSaveResponse
 */
async function invoiceRuleSaveWithOptions(tmpReq: InvoiceRuleSaveRequest, headers: InvoiceRuleSaveHeaders, runtime: Util.RuntimeOptions): InvoiceRuleSaveResponse {
  Util.validateModel(tmpReq);
  var request = new InvoiceRuleSaveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entities)) {
    request.entitiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entities, 'entities', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.allEmploye)) {
    body['all_employe'] = request.allEmploye;
  }
  if (!Util.isUnset(request.entitiesShrink)) {
    body['entities'] = request.entitiesShrink;
  }
  if (!Util.isUnset(request.scope)) {
    body['scope'] = request.scope;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    body['third_part_id'] = request.thirdPartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InvoiceRuleSave',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/invoice-rule`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 保存发票规则
 *
 * @param request InvoiceRuleSaveRequest
 * @return InvoiceRuleSaveResponse
 */
async function invoiceRuleSave(request: InvoiceRuleSaveRequest): InvoiceRuleSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvoiceRuleSaveHeaders{};
  return invoiceRuleSaveWithOptions(request, headers, runtime);
}

model InvoiceSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model InvoiceSearchRequest {
  thirdPartId?: string(name='third_part_id'),
  title?: string(name='title'),
  userId?: string(name='user_id', example='12345'),
}

model InvoiceSearchResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: [ 
    {
      id?: long(name='id', description='ID', example='1478652'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id', example='405009'),
      title?: string(name='title'),
    }
  ](name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='EB68C364-F9A0-5046-910A-2DD92C277E71'),
}

model InvoiceSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InvoiceSearchResponseBody(name='body'),
}

/**
 * @summary 搜索用户可用发票抬头
 *
 * @param request InvoiceSearchRequest
 * @param headers InvoiceSearchHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return InvoiceSearchResponse
 */
async function invoiceSearchWithOptions(request: InvoiceSearchRequest, headers: InvoiceSearchHeaders, runtime: Util.RuntimeOptions): InvoiceSearchResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.thirdPartId)) {
    query['third_part_id'] = request.thirdPartId;
  }
  if (!Util.isUnset(request.title)) {
    query['title'] = request.title;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InvoiceSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/invoice`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 搜索用户可用发票抬头
 *
 * @param request InvoiceSearchRequest
 * @return InvoiceSearchResponse
 */
async function invoiceSearch(request: InvoiceSearchRequest): InvoiceSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvoiceSearchHeaders{};
  return invoiceSearchWithOptions(request, headers, runtime);
}

model IsvRuleSaveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model IsvRuleSaveRequest {
  applyNeed?: boolean(name='apply_need'),
  bookType?: string(name='book_type', description='This parameter is required.'),
  bookuserList?: [ 
    {
      entityId?: string(name='entity_id', description='This parameter is required.'),
      entityType?: int32(name='entity_type', description='This parameter is required.'),
    }
  ](name='bookuser_list'),
  ruleNeed?: boolean(name='rule_need'),
  status?: int32(name='status', description='This parameter is required.', example='1'),
  userId?: string(name='user_id', description='This parameter is required.', example='123'),
}

model IsvRuleSaveShrinkRequest {
  applyNeed?: boolean(name='apply_need'),
  bookType?: string(name='book_type', description='This parameter is required.'),
  bookuserListShrink?: string(name='bookuser_list'),
  ruleNeed?: boolean(name='rule_need'),
  status?: int32(name='status', description='This parameter is required.', example='1'),
  userId?: string(name='user_id', description='This parameter is required.', example='123'),
}

model IsvRuleSaveResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: string(name='module', description='module', example='null'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210f079e16603757182131635d866a'),
}

model IsvRuleSaveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IsvRuleSaveResponseBody(name='body'),
}

/**
 * @summary 员工特殊角色修改
 *
 * @param tmpReq IsvRuleSaveRequest
 * @param headers IsvRuleSaveHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IsvRuleSaveResponse
 */
async function isvRuleSaveWithOptions(tmpReq: IsvRuleSaveRequest, headers: IsvRuleSaveHeaders, runtime: Util.RuntimeOptions): IsvRuleSaveResponse {
  Util.validateModel(tmpReq);
  var request = new IsvRuleSaveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bookuserList)) {
    request.bookuserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bookuserList, 'bookuser_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.applyNeed)) {
    body['apply_need'] = request.applyNeed;
  }
  if (!Util.isUnset(request.bookType)) {
    body['book_type'] = request.bookType;
  }
  if (!Util.isUnset(request.bookuserListShrink)) {
    body['bookuser_list'] = request.bookuserListShrink;
  }
  if (!Util.isUnset(request.ruleNeed)) {
    body['rule_need'] = request.ruleNeed;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'IsvRuleSave',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/user/v1/rule`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 员工特殊角色修改
 *
 * @param request IsvRuleSaveRequest
 * @return IsvRuleSaveResponse
 */
async function isvRuleSave(request: IsvRuleSaveRequest): IsvRuleSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IsvRuleSaveHeaders{};
  return isvRuleSaveWithOptions(request, headers, runtime);
}

model IsvUserSaveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model IsvUserSaveRequest {
  userList?: [ 
    {
      baseCityCode?: string(name='base_city_code'),
      birthday?: string(name='birthday'),
      certList?: [ 
        {
          certExpiredTime?: string(name='cert_expired_time'),
          certNation?: string(name='cert_nation'),
          certNo?: string(name='cert_no'),
          certType?: int32(name='cert_type'),
          nationality?: string(name='nationality'),
        }
      ](name='cert_list'),
      departId?: long(name='depart_id', example='10'),
      email?: string(name='email', example='123@163.com'),
      gender?: string(name='gender'),
      isAdmin?: boolean(name='is_admin'),
      jobNo?: string(name='job_no', example='8797'),
      leaveStatus?: int32(name='leave_status', example='0'),
      managerUserId?: string(name='manager_user_id', example='123456'),
      phone?: string(name='phone', example='15364762829'),
      position?: string(name='position'),
      positionLevel?: string(name='position_level', example='20'),
      realNameEn?: string(name='real_name_en', example='ceshi'),
      roleIdList?: [ string ](name='role_id_list'),
      thirdDepartId?: string(name='third_depart_id', example='123'),
      thirdDepartIdList?: [ string ](name='third_depart_id_list'),
      userId?: string(name='user_id', description='This parameter is required.', example='123'),
      userName?: string(name='user_name', description='This parameter is required.'),
      userNick?: string(name='user_nick'),
    }
  ](name='user_list'),
}

model IsvUserSaveShrinkRequest {
  userListShrink?: string(name='user_list'),
}

model IsvUserSaveResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: string(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='707c9fd116393792883244141e4e7d'),
}

model IsvUserSaveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IsvUserSaveResponseBody(name='body'),
}

/**
 * @summary 用户同步
 *
 * @param tmpReq IsvUserSaveRequest
 * @param headers IsvUserSaveHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return IsvUserSaveResponse
 */
async function isvUserSaveWithOptions(tmpReq: IsvUserSaveRequest, headers: IsvUserSaveHeaders, runtime: Util.RuntimeOptions): IsvUserSaveResponse {
  Util.validateModel(tmpReq);
  var request = new IsvUserSaveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userList)) {
    request.userListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userList, 'user_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.userListShrink)) {
    body['user_list'] = request.userListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'IsvUserSave',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/isvuser/v1/isvuser`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 用户同步
 *
 * @param request IsvUserSaveRequest
 * @return IsvUserSaveResponse
 */
async function isvUserSave(request: IsvUserSaveRequest): IsvUserSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IsvUserSaveHeaders{};
  return isvUserSaveWithOptions(request, headers, runtime);
}

model MealApplyAddHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model MealApplyAddRequest {
  applyUser?: {
    userId?: string(name='user_id', description='This parameter is required.', example='userId1'),
  }(name='apply_user', description='This parameter is required.'),
  costCenterId?: long(name='cost_center_id', example='23'),
  invoiceId?: long(name='invoice_id', example='123'),
  itineraryList?: [ 
    {
      cities?: [ 
        {
          cityCode?: string(name='city_code', example='330702'),
          cityName?: string(name='city_name'),
        }
      ](name='cities', description='This parameter is required.'),
      endDate?: string(name='end_date', description='This parameter is required.', example='2025-02-05 00:00:00'),
      startDate?: string(name='start_date', description='This parameter is required.', example='2025-02-05 00:00:00'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', example='2134'),
    }
  ](name='itinerary_list', description='This parameter is required.'),
  mealAmount?: long(name='meal_amount', example='1'),
  mealCause?: string(name='meal_cause', description='This parameter is required.'),
  projectCode?: string(name='project_code', example='project123'),
  projectTitle?: string(name='project_title'),
  status?: int32(name='status', description='This parameter is required.', example='0'),
  thirdPartApplyId?: string(name='third_part_apply_id', description='This parameter is required.', example='1234'),
  thirdPartCostCenterId?: string(name='third_part_cost_center_id', example='1200F00010'),
  thirdPartInvoiceId?: string(name='third_part_invoice_id', example='GA15131'),
}

model MealApplyAddShrinkRequest {
  applyUserShrink?: string(name='apply_user', description='This parameter is required.'),
  costCenterId?: long(name='cost_center_id', example='23'),
  invoiceId?: long(name='invoice_id', example='123'),
  itineraryListShrink?: string(name='itinerary_list', description='This parameter is required.'),
  mealAmount?: long(name='meal_amount', example='1'),
  mealCause?: string(name='meal_cause', description='This parameter is required.'),
  projectCode?: string(name='project_code', example='project123'),
  projectTitle?: string(name='project_title'),
  status?: int32(name='status', description='This parameter is required.', example='0'),
  thirdPartApplyId?: string(name='third_part_apply_id', description='This parameter is required.', example='1234'),
  thirdPartCostCenterId?: string(name='third_part_cost_center_id', example='1200F00010'),
  thirdPartInvoiceId?: string(name='third_part_invoice_id', example='GA15131'),
}

model MealApplyAddResponseBody = {
  code?: int32(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    thirdPartApplyId?: string(name='third_part_apply_id', example='2024073128454753'),
  }(name='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210e842b16611337974412836dae27'),
}

model MealApplyAddResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MealApplyAddResponseBody(name='body'),
}

/**
 * @summary 新增用餐申请单
 *
 * @param tmpReq MealApplyAddRequest
 * @param headers MealApplyAddHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return MealApplyAddResponse
 */
async function mealApplyAddWithOptions(tmpReq: MealApplyAddRequest, headers: MealApplyAddHeaders, runtime: Util.RuntimeOptions): MealApplyAddResponse {
  Util.validateModel(tmpReq);
  var request = new MealApplyAddShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.applyUser)) {
    request.applyUserShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.applyUser, 'apply_user', 'json');
  }
  if (!Util.isUnset(tmpReq.itineraryList)) {
    request.itineraryListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itineraryList, 'itinerary_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.applyUserShrink)) {
    body['apply_user'] = request.applyUserShrink;
  }
  if (!Util.isUnset(request.costCenterId)) {
    body['cost_center_id'] = request.costCenterId;
  }
  if (!Util.isUnset(request.invoiceId)) {
    body['invoice_id'] = request.invoiceId;
  }
  if (!Util.isUnset(request.itineraryListShrink)) {
    body['itinerary_list'] = request.itineraryListShrink;
  }
  if (!Util.isUnset(request.mealAmount)) {
    body['meal_amount'] = request.mealAmount;
  }
  if (!Util.isUnset(request.mealCause)) {
    body['meal_cause'] = request.mealCause;
  }
  if (!Util.isUnset(request.projectCode)) {
    body['project_code'] = request.projectCode;
  }
  if (!Util.isUnset(request.projectTitle)) {
    body['project_title'] = request.projectTitle;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.thirdPartApplyId)) {
    body['third_part_apply_id'] = request.thirdPartApplyId;
  }
  if (!Util.isUnset(request.thirdPartCostCenterId)) {
    body['third_part_cost_center_id'] = request.thirdPartCostCenterId;
  }
  if (!Util.isUnset(request.thirdPartInvoiceId)) {
    body['third_part_invoice_id'] = request.thirdPartInvoiceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MealApplyAdd',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/meal`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新增用餐申请单
 *
 * @param request MealApplyAddRequest
 * @return MealApplyAddResponse
 */
async function mealApplyAdd(request: MealApplyAddRequest): MealApplyAddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new MealApplyAddHeaders{};
  return mealApplyAddWithOptions(request, headers, runtime);
}

model MealApplyApproveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwis'),
}

model MealApplyApproveRequest {
  operateTime?: string(name='operate_time', example='2022-07-12 16:12:53'),
  remark?: string(name='remark'),
  status?: int32(name='status', description='This parameter is required.', example='1'),
  thirdPartApplyId?: string(name='third_part_apply_id', description='This parameter is required.', example='1234'),
  userId?: string(name='user_id', description='This parameter is required.', example='62141'),
}

model MealApplyApproveResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210e847f16611516748613869de4f6'),
}

model MealApplyApproveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MealApplyApproveResponseBody(name='body'),
}

/**
 * @summary 更新用餐申请单状态
 *
 * @param request MealApplyApproveRequest
 * @param headers MealApplyApproveHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return MealApplyApproveResponse
 */
async function mealApplyApproveWithOptions(request: MealApplyApproveRequest, headers: MealApplyApproveHeaders, runtime: Util.RuntimeOptions): MealApplyApproveResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.operateTime)) {
    body['operate_time'] = request.operateTime;
  }
  if (!Util.isUnset(request.remark)) {
    body['remark'] = request.remark;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.thirdPartApplyId)) {
    body['third_part_apply_id'] = request.thirdPartApplyId;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MealApplyApprove',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/meal`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新用餐申请单状态
 *
 * @param request MealApplyApproveRequest
 * @return MealApplyApproveResponse
 */
async function mealApplyApprove(request: MealApplyApproveRequest): MealApplyApproveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new MealApplyApproveHeaders{};
  return mealApplyApproveWithOptions(request, headers, runtime);
}

model MealApplyQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model MealApplyQueryRequest {
  thirdPartApplyId?: string(name='third_part_apply_id', description='This parameter is required.', example='1234'),
}

model MealApplyQueryResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    applyUser?: {
      userId?: string(name='user_id', example='2123'),
      userName?: string(name='user_name'),
    }(name='apply_user'),
    costCenterId?: long(name='cost_center_id', example='11376'),
    gmtCreate?: string(name='gmt_create', example='2022-07-04T16:13Z'),
    invoiceId?: long(name='invoice_id', example='11876'),
    itineraryList?: [ 
      {
        cities?: [ 
          {
            cityCode?: string(name='city_code'),
            cityName?: string(name='city_name'),
          }
        ](name='cities'),
        endDate?: string(name='end_date'),
        startDate?: string(name='start_date'),
        thirdpartItineraryId?: string(name='thirdpart_itinerary_id'),
      }
    ](name='itinerary_list'),
    mealAmount?: long(name='meal_amount'),
    mealCause?: string(name='meal_cause'),
    projectId?: long(name='project_id', example='11546'),
    status?: int32(name='status', example='0'),
    thirdPartApplyId?: string(name='third_part_apply_id', example='2024073128454753'),
    thirdPartCostCenterId?: string(name='third_part_cost_center_id', example='330000303010292572'),
    thirdPartInvoiceId?: string(name='third_part_invoice_id', example='405009'),
    thirdPartProjectId?: string(name='third_part_project_id', example='CS-PROJECT'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210f07f316603757445272547d959f'),
}

model MealApplyQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MealApplyQueryResponseBody(name='body'),
}

/**
 * @summary 查询用餐申请单
 *
 * @param request MealApplyQueryRequest
 * @param headers MealApplyQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return MealApplyQueryResponse
 */
async function mealApplyQueryWithOptions(request: MealApplyQueryRequest, headers: MealApplyQueryHeaders, runtime: Util.RuntimeOptions): MealApplyQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.thirdPartApplyId)) {
    query['third_part_apply_id'] = request.thirdPartApplyId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MealApplyQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/meal`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询用餐申请单
 *
 * @param request MealApplyQueryRequest
 * @return MealApplyQueryResponse
 */
async function mealApplyQuery(request: MealApplyQueryRequest): MealApplyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new MealApplyQueryHeaders{};
  return mealApplyQueryWithOptions(request, headers, runtime);
}

model MealBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model MealBillSettlementQueryRequest {
  billBatch?: string(name='bill_batch'),
  orderId?: long(name='order_id'),
  pageNo?: int32(name='page_no', description='This parameter is required.', example='1'),
  pageSize?: int32(name='page_size', description='This parameter is required.', example='100'),
  periodEnd?: string(name='period_end', example='2022-07-02'),
  periodStart?: string(name='period_start', example='2022-07-01'),
  scrollId?: string(name='scroll_id'),
  scrollMod?: boolean(name='scroll_mod'),
}

model MealBillSettlementQueryResponseBody = {
  code?: int32(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category', example='7'),
    corpId?: string(name='corp_id'),
    items?: [ 
      {
        adjustTime?: string(name='adjust_time'),
        applyExtendField?: string(name='apply_extend_field'),
        applyId?: string(name='apply_id', example='1004430880'),
        billRecordTime?: string(name='bill_record_time', example='2023-01-01 00:00:00'),
        bookTime?: string(name='book_time', example='2023-01-01 00:00:00'),
        bookerId?: string(name='booker_id', example='1234'),
        bookerJobNo?: string(name='booker_job_no', example='A1234'),
        bookerName?: string(name='booker_name'),
        capitalDirection?: string(name='capital_direction', example='1'),
        cascadeDepartment?: string(name='cascade_department'),
        categoryDesc?: string(name='category_desc'),
        consumeReportAddress?: string(name='consume_report_address'),
        consumeReportCity?: string(name='consume_report_city'),
        consumeReportCityCode?: string(name='consume_report_city_code'),
        consumerScene?: string(name='consumer_scene'),
        corpSettleFee?: double(name='corp_settle_fee', example='100.0'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number', example='cs1'),
        costDepartment?: string(name='cost_department'),
        department?: string(name='department'),
        departmentId?: string(name='department_id', example='1112'),
        feeType?: string(name='fee_type', example='70101'),
        feeTypeDesc?: string(name='fee_type_desc'),
        index?: string(name='index', example='1'),
        invoiceTitle?: string(name='invoice_title'),
        mainApplyId?: string(name='main_apply_id', example='123'),
        mappingCompanyCode?: string(name='mapping_company_code'),
        mealAddress?: string(name='meal_address', example='XXXX'),
        mealCity?: string(name='meal_city'),
        mealCityCode?: string(name='meal_city_code', example='XXX'),
        mealReason?: string(name='meal_reason'),
        mealRule?: string(name='meal_rule'),
        mealScene?: string(name='meal_scene'),
        merchantCategory?: string(name='merchant_category', example='MEAL'),
        merchantName?: string(name='merchant_name', example='XXXX'),
        orderId?: string(name='order_id', example='1002039196909288346'),
        orderPrice?: double(name='order_price', example='100.0'),
        orderStatusDesc?: string(name='order_status_desc'),
        personSettlePrice?: double(name='person_settle_price', example='0.0'),
        primaryId?: long(name='primary_id', example='60698599'),
        processorOaCode?: string(name='processor_oa_code'),
        projectCode?: string(name='project_code', example='acs'),
        projectName?: string(name='project_name'),
        remark?: string(name='remark'),
        serviceFee?: double(name='service_fee', example='5.0'),
        settleTypeDesc?: string(name='settle_type_desc'),
        settlementFee?: double(name='settlement_fee', example='110.0'),
        settlementTime?: string(name='settlement_time', example='2023-01-01 00:00:00'),
        settlementType?: string(name='settlement_type', example='4'),
        shareDinner?: string(name='share_dinner'),
        status?: int32(name='status', example='0'),
        statusDesc?: string(name='status_desc'),
        storeAddress?: string(name='store_address', example='XXXX'),
        taxRate?: string(name='tax_rate', example='6%'),
        thirdInvoiceId?: string(name='third_invoice_id', example='cs2'),
        thirdPartBusinessId?: string(name='third_part_business_id', example='123'),
        thirdpartApplyId?: string(name='thirdpart_apply_id', example='7244-1968'),
        tradeActionDesc?: string(name='trade_action_desc'),
        travelerId?: string(name='traveler_id', example='1234'),
        travelerJobNo?: string(name='traveler_job_no', example='A1234'),
        travelerMemberType?: string(name='traveler_member_type'),
        travelerMemberTypeName?: string(name='traveler_member_type_name'),
        travelerName?: string(name='traveler_name'),
        voucherType?: int32(name='voucher_type', example='1'),
        voucherTypeDesc?: string(name='voucher_type_desc'),
      }
    ](name='items'),
    orderId?: string(name='order_id', example='1002039195025156700'),
    periodEnd?: string(name='period_end', example='2022-07-02'),
    periodStart?: string(name='period_start', example='2022-07-01'),
    scrollId?: string(name='scroll_id'),
    totalNum?: long(name='total_num', example='2695'),
    totalSize?: long(name='total_size', example='30'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210f079e16603757182131635d866a'),
}

model MealBillSettlementQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MealBillSettlementQueryResponseBody(name='body'),
}

/**
 * @summary 查询因公用餐记账数据
 *
 * @param request MealBillSettlementQueryRequest
 * @param headers MealBillSettlementQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return MealBillSettlementQueryResponse
 */
async function mealBillSettlementQueryWithOptions(request: MealBillSettlementQueryRequest, headers: MealBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): MealBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billBatch)) {
    query['bill_batch'] = request.billBatch;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }
  if (!Util.isUnset(request.scrollId)) {
    query['scroll_id'] = request.scrollId;
  }
  if (!Util.isUnset(request.scrollMod)) {
    query['scroll_mod'] = request.scrollMod;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MealBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/meal/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询因公用餐记账数据
 *
 * @param request MealBillSettlementQueryRequest
 * @return MealBillSettlementQueryResponse
 */
async function mealBillSettlementQuery(request: MealBillSettlementQueryRequest): MealBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new MealBillSettlementQueryHeaders{};
  return mealBillSettlementQueryWithOptions(request, headers, runtime);
}

model MealOrderDetailQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model MealOrderDetailQueryRequest {
  userId?: string(name='user_id', example='1000'),
}

model MealOrderDetailQueryResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message', example='None'),
  module?: {
    applyId?: long(name='apply_id'),
    corpCodeOrderId?: string(name='corp_code_order_id', example='2024032522001423601409393178'),
    corpId?: string(name='corp_id', example='dingaa15ca45cba9ee744a5'),
    corpPayAmount?: long(name='corp_pay_amount', example='100'),
    corpRefundAmount?: long(name='corp_refund_amount', example='100'),
    mealReason?: string(name='meal_reason'),
    merchantName?: string(name='merchant_name'),
    orderId?: string(name='order_id', example='1034088398073015303'),
    orderStatus?: int32(name='order_status', example='1'),
    orderSubStatus?: int32(name='order_sub_status', example='1'),
    orderType?: string(name='order_type'),
    payAmount?: long(name='pay_amount', example='100'),
    payType?: int32(name='pay_type', example='1'),
    personPayAmount?: long(name='person_pay_amount', example='100'),
    personRefundAmount?: long(name='person_refund_amount', example='100'),
    refundAmount?: long(name='refund_amount', example='100'),
    sceneName?: string(name='scene_name'),
    settleTime?: string(name='settle_time', example='1711702782'),
    thirdPartApplyId?: string(name='third_part_apply_id'),
    userAlipayId?: string(name='user_alipay_id', example='17509140000'),
    userId?: string(name='user_id', example='014134681304653773'),
  }(name='module'),
  requestId?: string(name='requestId', example='9BCDD5DE-E6CB-5C25-93B9-9BE178A0AA56'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210f079e16603757182131635d866a'),
}

model MealOrderDetailQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MealOrderDetailQueryResponseBody(name='body'),
}

/**
 * @summary 获取用餐订单详情
 *
 * @param request MealOrderDetailQueryRequest
 * @param headers MealOrderDetailQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return MealOrderDetailQueryResponse
 */
async function mealOrderDetailQueryWithOptions(orderId: string, request: MealOrderDetailQueryRequest, headers: MealOrderDetailQueryHeaders, runtime: Util.RuntimeOptions): MealOrderDetailQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MealOrderDetailQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/meal/v1/orders/${OpenApiUtil.getEncodeParam(orderId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用餐订单详情
 *
 * @param request MealOrderDetailQueryRequest
 * @return MealOrderDetailQueryResponse
 */
async function mealOrderDetailQuery(orderId: string, request: MealOrderDetailQueryRequest): MealOrderDetailQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new MealOrderDetailQueryHeaders{};
  return mealOrderDetailQueryWithOptions(orderId, request, headers, runtime);
}

model MealOrderListQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model MealOrderListQueryRequest {
  userId?: string(name='user_id', example='1000'),
}

model MealOrderListQueryResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message', example='noPermission'),
  module?: {
    orderList?: [ 
      {
        corpPayAmount?: long(name='corp_pay_amount', example='100'),
        merchantName?: string(name='merchant_name'),
        orderId?: string(name='order_id', example='1034124198083211043'),
        orderStatus?: int32(name='order_status', example='1'),
        orderType?: string(name='order_type'),
        payAmount?: long(name='pay_amount', example='100'),
        personPayAmount?: long(name='person_pay_amount', example='100'),
        settleTime?: string(name='settle_time', example='1711705057'),
      }
    ](name='order_list'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model MealOrderListQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MealOrderListQueryResponseBody(name='body'),
}

/**
 * @summary 获取用餐订单列表
 *
 * @param request MealOrderListQueryRequest
 * @param headers MealOrderListQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return MealOrderListQueryResponse
 */
async function mealOrderListQueryWithOptions(request: MealOrderListQueryRequest, headers: MealOrderListQueryHeaders, runtime: Util.RuntimeOptions): MealOrderListQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MealOrderListQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/meal/v1/orders`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用餐订单列表
 *
 * @param request MealOrderListQueryRequest
 * @return MealOrderListQueryResponse
 */
async function mealOrderListQuery(request: MealOrderListQueryRequest): MealOrderListQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new MealOrderListQueryHeaders{};
  return mealOrderListQueryWithOptions(request, headers, runtime);
}

model MonthBillConfirmHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwis'),
}

model MonthBillConfirmRequest {
  mailBillDate?: int32(name='mail_bill_date', description='This parameter is required.', example='20221001'),
  userId?: string(name='user_id', example='12345'),
}

model MonthBillConfirmResponseBody = {
  code?: string(name='code', example='success'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model MonthBillConfirmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MonthBillConfirmResponseBody(name='body'),
}

/**
 * @summary 月账单确认
 *
 * @param request MonthBillConfirmRequest
 * @param headers MonthBillConfirmHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return MonthBillConfirmResponse
 */
async function monthBillConfirmWithOptions(request: MonthBillConfirmRequest, headers: MonthBillConfirmHeaders, runtime: Util.RuntimeOptions): MonthBillConfirmResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.mailBillDate)) {
    body['mail_bill_date'] = request.mailBillDate;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MonthBillConfirm',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/bill/v1/status/action/confirm`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 月账单确认
 *
 * @param request MonthBillConfirmRequest
 * @return MonthBillConfirmResponse
 */
async function monthBillConfirm(request: MonthBillConfirmRequest): MonthBillConfirmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new MonthBillConfirmHeaders{};
  return monthBillConfirmWithOptions(request, headers, runtime);
}

model MonthBillGetHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model MonthBillGetRequest {
  billBatch?: string(name='bill_batch'),
  billMonth?: string(name='bill_month', example='202207'),
}

model MonthBillGetResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: [ 
    {
      endDate?: string(name='end_date'),
      monthAccountBillDetail?: {
        billConfirmed?: int32(name='billConfirmed'),
        carAmount?: double(name='carAmount', description='用车金额（单位：元）', example='xx.xx'),
        damageAmount?: double(name='damageAmount', description='违约金金额（单位：元）', example='xx.xx'),
        flightAmount?: double(name='flightAmount', description='机票金额（单位：元）', example='xx.xx'),
        fuPoint?: double(name='fuPoint', description='福豆金额（单位：元）', example='xx.xx'),
        hotelAmount?: double(name='hotelAmount', description='酒店金额（单位：元）', example='xx.xx'),
        ieFlightAmount?: double(name='ieFlightAmount', description='国际机票金额（单位：元）', example='xx.xx'),
        ieHotelAmount?: double(name='ieHotelAmount'),
        mailBillDate?: long(name='mailBillDate', description='账期日：YYYYMMDD', example='20200501'),
        mealAmount?: double(name='mealAmount'),
        serviceAmount?: double(name='serviceAmount', description='服务费金额（单位：元）', example='xx.xx'),
        trainAmount?: double(name='trainAmount', description='火车票金额（单位：元）', example='xx.xx'),
        vasAmount?: double(name='vasAmount'),
      }(name='monthAccountBillDetail', description='CorpMonthAccountBillFeeDetail'),
      startDate?: string(name='start_date'),
      url?: string(name='url', example='https://xxx'),
    }
  ](name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model MonthBillGetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MonthBillGetResponseBody(name='body'),
}

/**
 * @summary 查询企业月账单
 *
 * @param request MonthBillGetRequest
 * @param headers MonthBillGetHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return MonthBillGetResponse
 */
async function monthBillGetWithOptions(request: MonthBillGetRequest, headers: MonthBillGetHeaders, runtime: Util.RuntimeOptions): MonthBillGetResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billBatch)) {
    query['bill_batch'] = request.billBatch;
  }
  if (!Util.isUnset(request.billMonth)) {
    query['bill_month'] = request.billMonth;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MonthBillGet',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/open/v1/month-bill`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询企业月账单
 *
 * @param request MonthBillGetRequest
 * @return MonthBillGetResponse
 */
async function monthBillGet(request: MonthBillGetRequest): MonthBillGetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new MonthBillGetHeaders{};
  return monthBillGetWithOptions(request, headers, runtime);
}

model MonthBillSplitGetHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth****wls'),
}

model MonthBillSplitGetRequest {
  billBatch?: string(name='bill_batch', example='20240101'),
  billMonth?: string(name='bill_month', example='202401'),
  billSplitKeyList?: [ string ](name='bill_split_key_list'),
  billSplitMode?: string(name='bill_split_mode', description='This parameter is required.', example='by_invoice_third_part_id'),
}

model MonthBillSplitGetShrinkRequest {
  billBatch?: string(name='bill_batch', example='20240101'),
  billMonth?: string(name='bill_month', example='202401'),
  billSplitKeyListShrink?: string(name='bill_split_key_list'),
  billSplitMode?: string(name='bill_split_mode', description='This parameter is required.', example='by_invoice_third_part_id'),
}

model MonthBillSplitGetResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: [ 
    {
      billSplitKey?: string(name='bill_split_key', example='invoice_third_part_id123'),
      endDate?: string(name='end_date', example='2023-12-31'),
      startDate?: string(name='start_date', example='2023-12-01'),
      url?: string(name='url', example='https://alibtrip-oss.oss-cn-hangzhou.aliyuncs.com/********'),
    }
  ](name='module'),
  requestId?: string(name='requestId', example='407543AF-****-****-****-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce********056433edbb2'),
}

model MonthBillSplitGetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MonthBillSplitGetResponseBody(name='body'),
}

/**
 * @summary 查询拆分版企业月账单
 *
 * @param tmpReq MonthBillSplitGetRequest
 * @param headers MonthBillSplitGetHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return MonthBillSplitGetResponse
 */
async function monthBillSplitGetWithOptions(tmpReq: MonthBillSplitGetRequest, headers: MonthBillSplitGetHeaders, runtime: Util.RuntimeOptions): MonthBillSplitGetResponse {
  Util.validateModel(tmpReq);
  var request = new MonthBillSplitGetShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.billSplitKeyList)) {
    request.billSplitKeyListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.billSplitKeyList, 'bill_split_key_list', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.billBatch)) {
    query['bill_batch'] = request.billBatch;
  }
  if (!Util.isUnset(request.billMonth)) {
    query['bill_month'] = request.billMonth;
  }
  if (!Util.isUnset(request.billSplitKeyListShrink)) {
    query['bill_split_key_list'] = request.billSplitKeyListShrink;
  }
  if (!Util.isUnset(request.billSplitMode)) {
    query['bill_split_mode'] = request.billSplitMode;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MonthBillSplitGet',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/open/v1/month-bill-split`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询拆分版企业月账单
 *
 * @param request MonthBillSplitGetRequest
 * @return MonthBillSplitGetResponse
 */
async function monthBillSplitGet(request: MonthBillSplitGetRequest): MonthBillSplitGetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new MonthBillSplitGetHeaders{};
  return monthBillSplitGetWithOptions(request, headers, runtime);
}

model OrderRefundDetailQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model OrderRefundDetailQueryRequest {
  cooperatorOrderId?: string(name='cooperator_order_id', description='This parameter is required.', example='ZLJD12241231000002'),
  orderId?: string(name='order_id', description='This parameter is required.', example='1012000000000000'),
}

model OrderRefundDetailQueryResponseBody = {
  requestId?: string(name='RequestId', example='8CA36096-1FEE-5756-86DD-D195FEDE080E'),
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message', example='true'),
  module?: {
    orderId?: string(name='order_id', example='1017002195370467138'),
    refundDetails?: [ 
      {
        personPayChannel?: string(name='person_pay_channel', example='ALIPAY'),
        personRefundId?: string(name='person_refund_id', example='2025010223001423691442474885'),
        refundAmount?: long(name='refund_amount', example='5000'),
        refundAmountCorp?: long(name='refund_amount_corp', example='4800'),
        refundAmountPerson?: long(name='refund_amount_person', example='200'),
        supplierRefundId?: string(name='supplier_refund_id', example='ZLJD12241231000002'),
      }
    ](name='refund_details'),
    totalAmount?: long(name='total_amount', example='10000'),
  }(name='module'),
  success?: boolean(name='success', example='true'),
}

model OrderRefundDetailQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OrderRefundDetailQueryResponseBody(name='body'),
}

/**
 * @summary 查询订单退款明细
 *
 * @param request OrderRefundDetailQueryRequest
 * @param headers OrderRefundDetailQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return OrderRefundDetailQueryResponse
 */
async function orderRefundDetailQueryWithOptions(request: OrderRefundDetailQueryRequest, headers: OrderRefundDetailQueryHeaders, runtime: Util.RuntimeOptions): OrderRefundDetailQueryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cooperatorOrderId)) {
    body['cooperator_order_id'] = request.cooperatorOrderId;
  }
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'OrderRefundDetailQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/coop-hotel/v1/refund/action/detail`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询订单退款明细
 *
 * @param request OrderRefundDetailQueryRequest
 * @return OrderRefundDetailQueryResponse
 */
async function orderRefundDetailQuery(request: OrderRefundDetailQueryRequest): OrderRefundDetailQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new OrderRefundDetailQueryHeaders{};
  return orderRefundDetailQueryWithOptions(request, headers, runtime);
}

model ProjectAddHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ProjectAddRequest {
  code?: string(name='code', description='This parameter is required.', example='pro_code'),
  projectName?: string(name='project_name', description='This parameter is required.'),
  thirdPartCostCenterId?: string(name='third_part_cost_center_id', example='234'),
  thirdPartId?: string(name='third_part_id', description='This parameter is required.', example='1'),
  thirdPartInvoiceId?: string(name='third_part_invoice_id', example='123'),
}

model ProjectAddResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: long(name='module', example='530404'),
  morePage?: boolean(name='more_page', example='true'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model ProjectAddResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ProjectAddResponseBody(name='body'),
}

/**
 * @summary 添加项目
 *
 * @param request ProjectAddRequest
 * @param headers ProjectAddHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ProjectAddResponse
 */
async function projectAddWithOptions(request: ProjectAddRequest, headers: ProjectAddHeaders, runtime: Util.RuntimeOptions): ProjectAddResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.projectName)) {
    body['project_name'] = request.projectName;
  }
  if (!Util.isUnset(request.thirdPartCostCenterId)) {
    body['third_part_cost_center_id'] = request.thirdPartCostCenterId;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    body['third_part_id'] = request.thirdPartId;
  }
  if (!Util.isUnset(request.thirdPartInvoiceId)) {
    body['third_part_invoice_id'] = request.thirdPartInvoiceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ProjectAdd',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/cost/v1/project`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 添加项目
 *
 * @param request ProjectAddRequest
 * @return ProjectAddResponse
 */
async function projectAdd(request: ProjectAddRequest): ProjectAddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ProjectAddHeaders{};
  return projectAddWithOptions(request, headers, runtime);
}

model ProjectDeleteHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ProjectDeleteRequest {
  thirdPartId?: string(name='third_part_id', description='This parameter is required.', example='12345'),
}

model ProjectDeleteResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: boolean(name='module', example='true'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model ProjectDeleteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ProjectDeleteResponseBody(name='body'),
}

/**
 * @summary 删除项目
 *
 * @param request ProjectDeleteRequest
 * @param headers ProjectDeleteHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ProjectDeleteResponse
 */
async function projectDeleteWithOptions(request: ProjectDeleteRequest, headers: ProjectDeleteHeaders, runtime: Util.RuntimeOptions): ProjectDeleteResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.thirdPartId)) {
    query['third_part_id'] = request.thirdPartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ProjectDelete',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/cost/v1/project`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除项目
 *
 * @param request ProjectDeleteRequest
 * @return ProjectDeleteResponse
 */
async function projectDelete(request: ProjectDeleteRequest): ProjectDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ProjectDeleteHeaders{};
  return projectDeleteWithOptions(request, headers, runtime);
}

model ProjectModifyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ProjectModifyRequest {
  code?: string(name='code', example='pro_code'),
  projectName?: string(name='project_name', description='This parameter is required.'),
  thirdPartCostCenterId?: string(name='third_part_cost_center_id', example='234'),
  thirdPartId?: string(name='third_part_id', description='This parameter is required.', example='340049'),
  thirdPartInvoiceId?: string(name='third_part_invoice_id', example='123'),
}

model ProjectModifyResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: boolean(name='module', example='true'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model ProjectModifyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ProjectModifyResponseBody(name='body'),
}

/**
 * @summary 变更项目
 *
 * @param request ProjectModifyRequest
 * @param headers ProjectModifyHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ProjectModifyResponse
 */
async function projectModifyWithOptions(request: ProjectModifyRequest, headers: ProjectModifyHeaders, runtime: Util.RuntimeOptions): ProjectModifyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.projectName)) {
    body['project_name'] = request.projectName;
  }
  if (!Util.isUnset(request.thirdPartCostCenterId)) {
    body['third_part_cost_center_id'] = request.thirdPartCostCenterId;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    body['third_part_id'] = request.thirdPartId;
  }
  if (!Util.isUnset(request.thirdPartInvoiceId)) {
    body['third_part_invoice_id'] = request.thirdPartInvoiceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ProjectModify',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/cost/v1/project`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 变更项目
 *
 * @param request ProjectModifyRequest
 * @return ProjectModifyResponse
 */
async function projectModify(request: ProjectModifyRequest): ProjectModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ProjectModifyHeaders{};
  return projectModifyWithOptions(request, headers, runtime);
}

model QueryCorpDetailInfoHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='aqfr****21'),
}

model QueryCorpDetailInfoRequest {
  accountId?: string(name='account_id'),
  targetCorpId?: string(name='target_corp_id', example='btripxxxxxx'),
  targetThirdCorpId?: string(name='target_third_corp_id'),
}

model QueryCorpDetailInfoResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    corpId?: string(name='corp_id', example='btrip5txxxxxxx'),
    corpName?: string(name='corp_name'),
    openAgentId?: string(name='open_agent_id', example='open12********012jq'),
    superAdminName?: string(name='super_admin_name'),
    superAdminPhone?: string(name='super_admin_phone', example='138xxxx0001'),
    userId?: string(name='user_id', example='user1234'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-****-****-****-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce********056433edbb2'),
}

model QueryCorpDetailInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCorpDetailInfoResponseBody(name='body'),
}

/**
 * @summary 查询企业信息详情
 *
 * @param request QueryCorpDetailInfoRequest
 * @param headers QueryCorpDetailInfoHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryCorpDetailInfoResponse
 */
async function queryCorpDetailInfoWithOptions(request: QueryCorpDetailInfoRequest, headers: QueryCorpDetailInfoHeaders, runtime: Util.RuntimeOptions): QueryCorpDetailInfoResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.accountId)) {
    query['account_id'] = request.accountId;
  }
  if (!Util.isUnset(request.targetCorpId)) {
    query['target_corp_id'] = request.targetCorpId;
  }
  if (!Util.isUnset(request.targetThirdCorpId)) {
    query['target_third_corp_id'] = request.targetThirdCorpId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCorpDetailInfo',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/corps/v1/corps/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询企业信息详情
 *
 * @param request QueryCorpDetailInfoRequest
 * @return QueryCorpDetailInfoResponse
 */
async function queryCorpDetailInfo(request: QueryCorpDetailInfoRequest): QueryCorpDetailInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryCorpDetailInfoHeaders{};
  return queryCorpDetailInfoWithOptions(request, headers, runtime);
}

model QueryEmployeeDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwis'),
}

model QueryEmployeeDetailRequest {
  outEmployeeId?: string(name='out_employee_id', description='This parameter is required.', example='abc12138'),
}

model QueryEmployeeDetailResponseBody = {
  code?: string(name='code', example='200'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message', example='None'),
  module?: {
    email?: string(name='email'),
    isLeave?: boolean(name='is_leave', example='false'),
    jobNumber?: string(name='job_number', example='"12138"'),
    nickName?: string(name='nick_name'),
    outDeptId?: string(name='out_dept_id', example='"123456"'),
    outDeptIdList?: [ string ](name='out_dept_id_list'),
    outEmployeeId?: string(name='out_employee_id', example='"abc12138"'),
    phoneNo?: string(name='phone_no'),
    realName?: string(name='real_name'),
    realNameEn?: string(name='real_name_en', example='"zhang/san"'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model QueryEmployeeDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryEmployeeDetailResponseBody(name='body'),
}

/**
 * @summary 获取单个员工信息
 *
 * @param request QueryEmployeeDetailRequest
 * @param headers QueryEmployeeDetailHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryEmployeeDetailResponse
 */
async function queryEmployeeDetailWithOptions(request: QueryEmployeeDetailRequest, headers: QueryEmployeeDetailHeaders, runtime: Util.RuntimeOptions): QueryEmployeeDetailResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.outEmployeeId)) {
    query['out_employee_id'] = request.outEmployeeId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEmployeeDetail',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/user/v1/employeeDetail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取单个员工信息
 *
 * @param request QueryEmployeeDetailRequest
 * @return QueryEmployeeDetailResponse
 */
async function queryEmployeeDetail(request: QueryEmployeeDetailRequest): QueryEmployeeDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryEmployeeDetailHeaders{};
  return queryEmployeeDetailWithOptions(request, headers, runtime);
}

model QueryGroupCorpListHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model QueryGroupCorpListRequest {
  userId?: string(name='user_id', example='123'),
}

model QueryGroupCorpListResponseBody = {
  requestId?: string(name='RequestId', example='A3F8DCAB-8301-5770-BD9F-71B0BF9E1A6E'),
  code?: int32(name='code', example='0'),
  message?: string(name='message'),
  module?: [ 
    {
      corpId?: string(name='corp_id', example='corp1'),
      corpName?: string(name='corp_name'),
    }
  ](name='module'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='trace_id', example='21041ce316577904808056433edbb2'),
}

model QueryGroupCorpListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryGroupCorpListResponseBody(name='body'),
}

/**
 * @summary 查询子企业列表
 *
 * @param request QueryGroupCorpListRequest
 * @param headers QueryGroupCorpListHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryGroupCorpListResponse
 */
async function queryGroupCorpListWithOptions(request: QueryGroupCorpListRequest, headers: QueryGroupCorpListHeaders, runtime: Util.RuntimeOptions): QueryGroupCorpListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryGroupCorpList',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/sub_corps/v1/corps/action/corpList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询子企业列表
 *
 * @param request QueryGroupCorpListRequest
 * @return QueryGroupCorpListResponse
 */
async function queryGroupCorpList(request: QueryGroupCorpListRequest): QueryGroupCorpListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryGroupCorpListHeaders{};
  return queryGroupCorpListWithOptions(request, headers, runtime);
}

model QueryReimbursementOrderHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model QueryReimbursementOrderRequest {
  reimbOrderNo?: string(name='reimb_order_no', description='This parameter is required.', example='RT204396'),
  subCorpId?: string(name='sub_corp_id', example='ding123'),
}

model QueryReimbursementOrderResponseBody = {
  code?: string(name='code', example='PARAM_ERROR'),
  message?: string(name='message'),
  module?: {
    companyAmount?: string(name='company_amount', example='10.00'),
    companyPayAmount?: string(name='company_pay_amount', example='20.00'),
    corpId?: string(name='corp_id', example='dinga809ed71b9201f35'),
    costCenterCode?: string(name='cost_center_code'),
    costCenterName?: string(name='cost_center_name'),
    expenses?: [ 
      {
        amount?: string(name='amount', example='20'),
        currency?: string(name='currency'),
        expenseCity?: string(name='expense_city'),
        expenseCompositions?: [ 
          {
            billSettlementId?: long(name='bill_settlement_id'),
            capitalDirection?: string(name='capital_direction'),
            feeType?: string(name='fee_type'),
            orderId?: string(name='order_id'),
            remark?: string(name='remark'),
            remindTagList?: [ string ](name='remind_tag_list'),
            settlementAmount?: string(name='settlement_amount'),
            settlementTime?: string(name='settlement_time'),
            voucherType?: int32(name='voucher_type'),
          }
        ](name='expense_compositions'),
        expenseTime?: string(name='expense_time', example='2022-05-15T22:27Z'),
        expenseType?: string(name='expense_type'),
        expenseTypeCode?: string(name='expense_type_code', example='code'),
        invoiceInfos?: [ 
          {
            amount?: string(name='amount'),
            invoiceCode?: string(name='invoice_code'),
            invoiceData?: string(name='invoice_data'),
            invoiceDate?: string(name='invoice_date'),
            invoiceNumber?: string(name='invoice_number'),
            invoiceType?: string(name='invoice_type'),
          }
        ](name='invoice_infos'),
        reimbExpenseId?: long(name='reimb_expense_id'),
        remark?: string(name='remark'),
        settlementType?: string(name='settlement_type'),
      }
    ](name='expenses'),
    expensesCoverDeptId?: string(name='expenses_cover_dept_id'),
    expensesCoverDeptName?: string(name='expenses_cover_dept_name'),
    expensesCoverInvoiceTitle?: string(name='expenses_cover_invoice_title'),
    gmtCreate?: string(name='gmt_create', example='2022-05-15T22:27Z'),
    gmtModified?: string(name='gmt_modified', example='2022-07-20T10:40Z'),
    isDeleted?: string(name='is_deleted'),
    itineraries?: [ 
      {
        arrCity?: string(name='arr_city'),
        arrDate?: string(name='arr_date', example='2022-05-15T22:27Z'),
        depCity?: string(name='dep_city', example='CTU'),
        depDate?: string(name='dep_date', example='2022-05-15T22:27Z'),
        trafficWay?: string(name='traffic_way'),
        tripWay?: string(name='trip_way'),
      }
    ](name='itineraries'),
    paymentFinishTime?: string(name='payment_finish_time'),
    paymentInfos?: [ 
      {
        amount?: string(name='amount', example='20.00'),
        payeeUserId?: string(name='payee_user_id', example='userId'),
      }
    ](name='payment_infos'),
    personalAmount?: string(name='personal_amount', example='10.00'),
    processEndTime?: string(name='process_end_time'),
    projectCode?: string(name='project_code'),
    projectName?: string(name='project_name'),
    reason?: string(name='reason'),
    reimbursementNo?: string(name='reimbursement_no', example='RT203956'),
    remark?: string(name='remark'),
    status?: string(name='status'),
    travelThirdApplyId?: string(name='travel_third_apply_id'),
    userId?: string(name='user_id', example='userId'),
    userName?: string(name='user_name'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model QueryReimbursementOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryReimbursementOrderResponseBody(name='body'),
}

/**
 * @summary 报销单查询
 *
 * @param request QueryReimbursementOrderRequest
 * @param headers QueryReimbursementOrderHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryReimbursementOrderResponse
 */
async function queryReimbursementOrderWithOptions(request: QueryReimbursementOrderRequest, headers: QueryReimbursementOrderHeaders, runtime: Util.RuntimeOptions): QueryReimbursementOrderResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.reimbOrderNo)) {
    query['reimb_order_no'] = request.reimbOrderNo;
  }
  if (!Util.isUnset(request.subCorpId)) {
    query['sub_corp_id'] = request.subCorpId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryReimbursementOrder',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/reimbursement/v1/order`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 报销单查询
 *
 * @param request QueryReimbursementOrderRequest
 * @return QueryReimbursementOrderResponse
 */
async function queryReimbursementOrder(request: QueryReimbursementOrderRequest): QueryReimbursementOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryReimbursementOrderHeaders{};
  return queryReimbursementOrderWithOptions(request, headers, runtime);
}

model SyncSingleUserHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model SyncSingleUserRequest {
  email?: string(name='email'),
  jobNo?: string(name='job_no', example='1001'),
  leaveStatus?: int32(name='leave_status', example='0'),
  managerUserId?: string(name='manager_user_id', example='72369'),
  phone?: string(name='phone', example='16392740204'),
  position?: string(name='position'),
  positionLevel?: string(name='position_level', example='1'),
  realNameEn?: string(name='real_name_en', example='ce/shi'),
  thirdDepartIdList?: [ string ](name='third_depart_id_list'),
  userId?: string(name='user_id', description='This parameter is required.', example='573263'),
  userName?: string(name='user_name', description='This parameter is required.'),
}

model SyncSingleUserShrinkRequest {
  email?: string(name='email'),
  jobNo?: string(name='job_no', example='1001'),
  leaveStatus?: int32(name='leave_status', example='0'),
  managerUserId?: string(name='manager_user_id', example='72369'),
  phone?: string(name='phone', example='16392740204'),
  position?: string(name='position'),
  positionLevel?: string(name='position_level', example='1'),
  realNameEn?: string(name='real_name_en', example='ce/shi'),
  thirdDepartIdListShrink?: string(name='third_depart_id_list'),
  userId?: string(name='user_id', description='This parameter is required.', example='573263'),
  userName?: string(name='user_name', description='This parameter is required.'),
}

model SyncSingleUserResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: string(name='module', example='success'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210f079e16603757182131635d866a'),
}

model SyncSingleUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncSingleUserResponseBody(name='body'),
}

/**
 * @summary 单个人员同步
 *
 * @param tmpReq SyncSingleUserRequest
 * @param headers SyncSingleUserHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SyncSingleUserResponse
 */
async function syncSingleUserWithOptions(tmpReq: SyncSingleUserRequest, headers: SyncSingleUserHeaders, runtime: Util.RuntimeOptions): SyncSingleUserResponse {
  Util.validateModel(tmpReq);
  var request = new SyncSingleUserShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.thirdDepartIdList)) {
    request.thirdDepartIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.thirdDepartIdList, 'third_depart_id_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.email)) {
    body['email'] = request.email;
  }
  if (!Util.isUnset(request.jobNo)) {
    body['job_no'] = request.jobNo;
  }
  if (!Util.isUnset(request.leaveStatus)) {
    body['leave_status'] = request.leaveStatus;
  }
  if (!Util.isUnset(request.managerUserId)) {
    body['manager_user_id'] = request.managerUserId;
  }
  if (!Util.isUnset(request.phone)) {
    body['phone'] = request.phone;
  }
  if (!Util.isUnset(request.position)) {
    body['position'] = request.position;
  }
  if (!Util.isUnset(request.positionLevel)) {
    body['position_level'] = request.positionLevel;
  }
  if (!Util.isUnset(request.realNameEn)) {
    body['real_name_en'] = request.realNameEn;
  }
  if (!Util.isUnset(request.thirdDepartIdListShrink)) {
    body['third_depart_id_list'] = request.thirdDepartIdListShrink;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    body['user_name'] = request.userName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SyncSingleUser',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/user/v1/single-user/action/sync`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 单个人员同步
 *
 * @param request SyncSingleUserRequest
 * @return SyncSingleUserResponse
 */
async function syncSingleUser(request: SyncSingleUserRequest): SyncSingleUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SyncSingleUserHeaders{};
  return syncSingleUserWithOptions(request, headers, runtime);
}

model SyncThirdUserMappingHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model SyncThirdUserMappingRequest {
  status?: int32(name='status', description='This parameter is required.', example='0'),
  thirdChannelType?: string(name='third_channel_type', description='This parameter is required.', example='weCom'),
  thirdUserId?: string(name='third_user_id', description='This parameter is required.', example='123'),
  userId?: string(name='user_id', description='This parameter is required.', example='123'),
}

model SyncThirdUserMappingResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='8465F68D-BC97-5C0F-9161-3E65919D9135'),
}

model SyncThirdUserMappingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncThirdUserMappingResponseBody(name='body'),
}

/**
 * @summary 同步三方用户映射关系
 *
 * @param request SyncThirdUserMappingRequest
 * @param headers SyncThirdUserMappingHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SyncThirdUserMappingResponse
 */
async function syncThirdUserMappingWithOptions(request: SyncThirdUserMappingRequest, headers: SyncThirdUserMappingHeaders, runtime: Util.RuntimeOptions): SyncThirdUserMappingResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.thirdChannelType)) {
    body['third_channel_type'] = request.thirdChannelType;
  }
  if (!Util.isUnset(request.thirdUserId)) {
    body['third_user_id'] = request.thirdUserId;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SyncThirdUserMapping',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/user/v1/third-users/action/mapping`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 同步三方用户映射关系
 *
 * @param request SyncThirdUserMappingRequest
 * @return SyncThirdUserMappingResponse
 */
async function syncThirdUserMapping(request: SyncThirdUserMappingRequest): SyncThirdUserMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SyncThirdUserMappingHeaders{};
  return syncThirdUserMappingWithOptions(request, headers, runtime);
}

model TBAccountInfoQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TBAccountInfoQueryResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    tbAccount?: string(name='tb_account'),
    tbBond?: boolean(name='tb_bond', example='true'),
  }(name='module'),
  requestId?: string(name='requestId', example='456456575656757'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210f07f316603757445272547d959f'),
}

model TBAccountInfoQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TBAccountInfoQueryResponseBody(name='body'),
}

/**
 * @summary 查询淘宝账号信息
 *
 * @param headers TBAccountInfoQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TBAccountInfoQueryResponse
 */
async function tBAccountInfoQueryWithOptions(userId: string, headers: TBAccountInfoQueryHeaders, runtime: Util.RuntimeOptions): TBAccountInfoQueryResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'TBAccountInfoQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/account/v1/tb-accounts/${OpenApiUtil.getEncodeParam(userId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询淘宝账号信息
 *
 * @return TBAccountInfoQueryResponse
 */
async function tBAccountInfoQuery(userId: string): TBAccountInfoQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TBAccountInfoQueryHeaders{};
  return tBAccountInfoQueryWithOptions(userId, headers, runtime);
}

model TBAccountUnbindHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TBAccountUnbindResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: boolean(name='module', example='true'),
  requestId?: string(name='requestId', example='456456575656757'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model TBAccountUnbindResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TBAccountUnbindResponseBody(name='body'),
}

/**
 * @summary 解绑淘宝账号
 *
 * @param headers TBAccountUnbindHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TBAccountUnbindResponse
 */
async function tBAccountUnbindWithOptions(userId: string, headers: TBAccountUnbindHeaders, runtime: Util.RuntimeOptions): TBAccountUnbindResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'TBAccountUnbind',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/account/v1/tb-accounts/${OpenApiUtil.getEncodeParam(userId)}/action/unbind`,
    method = 'PATCH',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 解绑淘宝账号
 *
 * @return TBAccountUnbindResponse
 */
async function tBAccountUnbind(userId: string): TBAccountUnbindResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TBAccountUnbindHeaders{};
  return tBAccountUnbindWithOptions(userId, headers, runtime);
}

model TicketChangingApplyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TicketChangingApplyRequest {
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='dis1234'),
  disSubOrderId?: string(name='dis_sub_order_id', description='This parameter is required.', example='mid1243'),
  isVoluntary?: int32(name='is_voluntary'),
  modifyFlightInfoList?: [ 
    {
      arrCity?: string(name='arr_city', description='This parameter is required.', example='BJS'),
      cabin?: string(name='cabin', example='Y'),
      depCity?: string(name='dep_city', description='This parameter is required.', example='HGH'),
      depDate?: string(name='dep_date', description='This parameter is required.', example='0000-00-00 00:00:00'),
      flightNo?: string(name='flight_no', description='This parameter is required.', example='CA1704'),
      passengerInfoList?: [ 
        {
          originFlightNo?: string(name='origin_flight_no', description='This parameter is required.', example='CA1703'),
          outUserId?: string(name='out_user_id', description='This parameter is required.', example='1234'),
          passengerName?: string(name='passenger_name', description='This parameter is required.'),
        }
      ](name='passenger_info_list', description='This parameter is required.'),
    }
  ](name='modify_flight_info_list', description='This parameter is required.'),
  otaItemId?: string(name='ota_item_id', description='This parameter is required.', example='1s8837sh991hsj92h'),
  reason?: string(name='reason'),
  sessionId?: string(name='session_id', description='This parameter is required.', example='us88s2bsbin22hjusd8i'),
  whetherRetry?: boolean(name='whether_retry', example='true'),
}

model TicketChangingApplyShrinkRequest {
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='dis1234'),
  disSubOrderId?: string(name='dis_sub_order_id', description='This parameter is required.', example='mid1243'),
  isVoluntary?: int32(name='is_voluntary'),
  modifyFlightInfoListShrink?: string(name='modify_flight_info_list', description='This parameter is required.'),
  otaItemId?: string(name='ota_item_id', description='This parameter is required.', example='1s8837sh991hsj92h'),
  reason?: string(name='reason'),
  sessionId?: string(name='session_id', description='This parameter is required.', example='us88s2bsbin22hjusd8i'),
  whetherRetry?: boolean(name='whether_retry', example='true'),
}

model TicketChangingApplyResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    bookingChangedTotalFee?: int32(name='booking_changed_total_fee', example='1000'),
    bookingOriginTotalFee?: int32(name='booking_origin_total_fee', example='1000'),
    bookingPriceChanged?: boolean(name='booking_price_changed', example='true'),
    btripOrderId?: long(name='btrip_order_id', example='1234'),
    btripSubOrderId?: long(name='btrip_sub_order_id', example='1234'),
    canPay?: boolean(name='can_pay', example='true'),
    changeFee?: long(name='change_fee', example='1000'),
    deadlineTime?: string(name='deadline_time', example='0000-00-00 00:00:00'),
    disOrderId?: string(name='dis_order_id', example='dis123'),
    disSubOrderId?: string(name='dis_sub_order_id', example='mid112'),
    maxRetryTimes?: int32(name='max_retry_times', example='1'),
    nextRetryInterval?: long(name='next_retry_interval', example='1000'),
    retry?: boolean(name='retry', example='true'),
    retryClientTips?: string(name='retry_client_tips'),
    status?: int32(name='status', example='0'),
    upgradeFee?: long(name='upgrade_fee', example='1000'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model TicketChangingApplyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TicketChangingApplyResponseBody(name='body'),
}

/**
 * @summary 机票改签申请
 *
 * @param tmpReq TicketChangingApplyRequest
 * @param headers TicketChangingApplyHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TicketChangingApplyResponse
 */
async function ticketChangingApplyWithOptions(tmpReq: TicketChangingApplyRequest, headers: TicketChangingApplyHeaders, runtime: Util.RuntimeOptions): TicketChangingApplyResponse {
  Util.validateModel(tmpReq);
  var request = new TicketChangingApplyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.modifyFlightInfoList)) {
    request.modifyFlightInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.modifyFlightInfoList, 'modify_flight_info_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.disOrderId)) {
    body['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.disSubOrderId)) {
    body['dis_sub_order_id'] = request.disSubOrderId;
  }
  if (!Util.isUnset(request.isVoluntary)) {
    body['is_voluntary'] = request.isVoluntary;
  }
  if (!Util.isUnset(request.modifyFlightInfoListShrink)) {
    body['modify_flight_info_list'] = request.modifyFlightInfoListShrink;
  }
  if (!Util.isUnset(request.otaItemId)) {
    body['ota_item_id'] = request.otaItemId;
  }
  if (!Util.isUnset(request.reason)) {
    body['reason'] = request.reason;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['session_id'] = request.sessionId;
  }
  if (!Util.isUnset(request.whetherRetry)) {
    body['whether_retry'] = request.whetherRetry;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TicketChangingApply',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/ticket-changing/action/apply`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票改签申请
 *
 * @param request TicketChangingApplyRequest
 * @return TicketChangingApplyResponse
 */
async function ticketChangingApply(request: TicketChangingApplyRequest): TicketChangingApplyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TicketChangingApplyHeaders{};
  return ticketChangingApplyWithOptions(request, headers, runtime);
}

model TicketChangingCancelHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TicketChangingCancelRequest {
  disOrderId?: string(name='dis_order_id', example='dis123'),
  disSubOrderId?: string(name='dis_sub_order_id', example='refun123'),
}

model TicketChangingCancelResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    cancelTime?: string(name='cancel_time', example='0000-00-00 00:00:00'),
    disSubOrderId?: string(name='dis_sub_order_id', example='mid1243'),
    status?: string(name='status'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210f079e16603757182131635d866a'),
}

model TicketChangingCancelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TicketChangingCancelResponseBody(name='body'),
}

/**
 * @summary 机票改签取消
 *
 * @param request TicketChangingCancelRequest
 * @param headers TicketChangingCancelHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TicketChangingCancelResponse
 */
async function ticketChangingCancelWithOptions(request: TicketChangingCancelRequest, headers: TicketChangingCancelHeaders, runtime: Util.RuntimeOptions): TicketChangingCancelResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.disOrderId)) {
    query['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.disSubOrderId)) {
    query['dis_sub_order_id'] = request.disSubOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TicketChangingCancel',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/ticket-changing/action/cancel`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票改签取消
 *
 * @param request TicketChangingCancelRequest
 * @return TicketChangingCancelResponse
 */
async function ticketChangingCancel(request: TicketChangingCancelRequest): TicketChangingCancelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TicketChangingCancelHeaders{};
  return ticketChangingCancelWithOptions(request, headers, runtime);
}

model TicketChangingDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwis'),
}

model TicketChangingDetailRequest {
  disOrderId?: string(name='dis_order_id', example='dis123'),
  disSubOrderId?: string(name='dis_sub_order_id', example='chang123'),
}

model TicketChangingDetailResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    alipayTradeNo?: string(name='alipay_trade_no'),
    btripOrderId?: long(name='btrip_order_id', example='1002'),
    btripSubOrderId?: long(name='btrip_sub_order_id', example='37772'),
    disOrderId?: string(name='dis_order_id', example='dis123'),
    disSubOrderId?: string(name='dis_sub_order_id', example='chang123'),
    extra?: string(name='extra', example='{}'),
    flightInfoList?: [ 
      {
        airlineCode?: string(name='airline_code', example='MU'),
        airlineName?: string(name='airline_name'),
        airlineSimpleName?: string(name='airline_simple_name'),
        arrAirport?: string(name='arr_airport'),
        arrAirportCode?: string(name='arr_airport_code', example='HGH'),
        arrAirportCodeName?: string(name='arr_airport_code_name'),
        arrCity?: string(name='arr_city', example='HGH'),
        arrCityCode?: string(name='arr_city_code', example='LHW'),
        arrTerminal?: string(name='arr_terminal', example='T3'),
        arrTime?: string(name='arr_time', example='2000-00-00 00:00:00'),
        baggage?: string(name='baggage'),
        buildPrice?: long(name='build_price', example='100'),
        cabin?: string(name='cabin', example='V'),
        cabinClass?: string(name='cabin_class'),
        carrier?: string(name='carrier', example='MU3849'),
        depAirport?: string(name='dep_airport'),
        depAirportCode?: string(name='dep_airport_code', example='NGB'),
        depAirportCodeName?: string(name='dep_airport_code_name'),
        depCity?: string(name='dep_city', example='BJS'),
        depCityCode?: string(name='dep_city_code', example='NGB'),
        depTerminal?: string(name='dep_terminal', example='T4'),
        depTime?: string(name='dep_time', example='2000-01-01 00:00:00'),
        flightNo?: string(name='flight_no', example='MU3849'),
        lastCabin?: string(name='last_cabin', example='Y'),
        lastFlightNo?: string(name='last_flight_no', example='CA1982'),
        meal?: string(name='meal', example='3'),
        oilPrice?: long(name='oil_price', example='100'),
        segmentType?: int32(name='segment_type'),
        stopArrTime?: string(name='stop_arr_time', example='2000-00-00 00:00:00'),
        stopCity?: string(name='stop_city', example='NGB'),
        stopDepTime?: string(name='stop_dep_time', example='2000-00-00 00:00:00'),
        ticketPrice?: long(name='ticket_price', example='100'),
        tuigaiqianInfo?: string(name='tuigaiqian_info'),
      }
    ](name='flight_info_list'),
    lastPayTime?: string(name='last_pay_time', example='2022-12-30 11:30:00'),
    payStatus?: int32(name='pay_status', example='0'),
    payTime?: string(name='pay_time', example='2022-12-30 11:30:00'),
    settlePrice?: long(name='settle_price', example='100'),
    settleType?: int32(name='settle_type'),
    status?: int32(name='status'),
    totalChangePrice?: long(name='total_change_price', example='100'),
    totalPrice?: long(name='total_price', example='100'),
    totalUpgradePrice?: long(name='total_upgrade_price', example='100'),
    travelerInfoList?: [ 
      {
        birthDate?: string(name='birth_date', example='2000-01-01'),
        certNo?: string(name='cert_no', example='12345'),
        certType?: string(name='cert_type', example='0'),
        openTicketStatus?: int32(name='open_ticket_status', example='0'),
        passengerName?: string(name='passenger_name'),
        passengerType?: string(name='passenger_type', example='0'),
        phone?: string(name='phone', example='12345678909'),
        ticketNo?: string(name='ticket_no', example='444-000000000'),
        userId?: string(name='user_id', example='012992'),
      }
    ](name='traveler_info_list'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210f079e16603757182131635d866a'),
}

model TicketChangingDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TicketChangingDetailResponseBody(name='body'),
}

/**
 * @summary 机票改签详情
 *
 * @param request TicketChangingDetailRequest
 * @param headers TicketChangingDetailHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TicketChangingDetailResponse
 */
async function ticketChangingDetailWithOptions(request: TicketChangingDetailRequest, headers: TicketChangingDetailHeaders, runtime: Util.RuntimeOptions): TicketChangingDetailResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.disOrderId)) {
    query['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.disSubOrderId)) {
    query['dis_sub_order_id'] = request.disSubOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TicketChangingDetail',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/ticket-changing/action/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票改签详情
 *
 * @param request TicketChangingDetailRequest
 * @return TicketChangingDetailResponse
 */
async function ticketChangingDetail(request: TicketChangingDetailRequest): TicketChangingDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TicketChangingDetailHeaders{};
  return ticketChangingDetailWithOptions(request, headers, runtime);
}

model TicketChangingEnquiryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TicketChangingEnquiryRequest {
  arrCity?: string(name='arr_city', description='This parameter is required.', example='BJS'),
  depCity?: string(name='dep_city', description='This parameter is required.', example='HGH'),
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='dis123'),
  isVoluntary?: int32(name='is_voluntary', description='This parameter is required.', example='1'),
  modifyDepartDate?: string(name='modify_depart_date', description='This parameter is required.', example='2000-00-00 00:00:00'),
  modifyFlightNo?: string(name='modify_flight_no', description='This parameter is required.', example='CA1704'),
  sessionId?: string(name='session_id', description='This parameter is required.', example='ece19e8b1047898a5a98b6487348c2'),
}

model TicketChangingEnquiryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    flightInfoList?: [ 
      {
        airlineInfo?: {
          airlineCode?: string(name='airline_code', example='CA'),
          airlineName?: string(name='airline_name'),
          airlineSimpleName?: string(name='airline_simple_name'),
        }(name='airline_info'),
        arrAirportInfo?: {
          airportCode?: string(name='airport_code', example='HGH'),
          airportName?: string(name='airport_name'),
          cityCode?: string(name='city_code', example='HGH'),
          cityName?: string(name='city_name'),
          terminal?: string(name='terminal', example='T4'),
        }(name='arr_airport_info'),
        cabinList?: [ 
          {
            cabin?: string(name='cabin', example='G'),
            cabinClass?: string(name='cabin_class', example='Y'),
            cabinDesc?: string(name='cabin_desc'),
            cabinDiscount?: int32(name='cabin_discount', example='80'),
            changeOtaItemRuleRq?: {
              baggageDetails?: [ 
                {
                  baggageSubItems?: [ 
                    {
                      attributes?: map[string]any(name='attributes', description='attributes'),
                      baggageSubContentVisualizes?: [ 
                        {
                          baggageDesc?: [ string ](name='baggage_desc'),
                          baggageSubContentType?: int32(name='baggage_sub_content_type', example='1'),
                          description?: {
                            desc?: string(name='desc'),
                            icon?: string(name='icon', example='demo'),
                            image?: string(name='image', example='demo'),
                            title?: string(name='title'),
                          }(name='description'),
                          imageDO?: {
                            image?: string(name='image', example='https://gw.alicdn.com/imgextra/i3/O1CN01kLt3m923XsUs6WVif_!!6000000007266-2-tps-280-300.png'),
                            largest?: string(name='largest', example='50'),
                            middle?: string(name='middle', example='40'),
                            smallest?: string(name='smallest', example='20'),
                          }(name='imageDO'),
                          isHighlight?: boolean(name='is_highlight', example='true'),
                          subTitle?: string(name='subTitle'),
                        }
                      ](name='baggage_sub_content_visualizes'),
                      baggageSubContents?: [ 
                        {
                          baggageDesc?: string(name='baggage_desc'),
                          icon?: string(name='icon'),
                          style?: int32(name='style', example='0'),
                          subTitle?: string(name='sub_title'),
                        }
                      ](name='baggage_sub_contents'),
                      content?: string(name='content', example='demo'),
                      isStruct?: boolean(name='is_struct', example='true'),
                      ptc?: string(name='ptc', example='ADT'),
                      title?: string(name='title'),
                    }
                  ](name='baggage_sub_items'),
                  index?: int32(name='index', example='0'),
                  tableHead?: string(name='table_head'),
                  tips?: {
                    logo?: string(name='logo', example='https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png'),
                    tipsDesc?: string(name='tips_desc'),
                    tipsImage?: string(name='tips_image', example='https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png'),
                  }(name='tips'),
                  title?: string(name='title'),
                  type?: int32(name='type', example='1'),
                }
              ](name='baggage_details'),
              changeDetails?: [ 
                {
                  extraContents?: [ 
                    {
                      content?: string(name='content', example='xxx'),
                      icon?: string(name='icon'),
                      title?: string(name='title'),
                    }
                  ](name='extra_contents'),
                  index?: int32(name='index', example='0'),
                  refundSubItems?: [ 
                    {
                      content?: string(name='content', example='demo'),
                      isStruct?: boolean(name='is_struct', example='true'),
                      ptc?: string(name='ptc', example='ADT'),
                      refundSubContents?: [ 
                        {
                          feeDesc?: string(name='fee_desc'),
                          feeRange?: string(name='fee_range'),
                          style?: string(name='style', example='0'),
                        }
                      ](name='refund_sub_contents'),
                      title?: string(name='title'),
                    }
                  ](name='refund_sub_items'),
                  tableHead?: string(name='table_head'),
                  title?: string(name='title'),
                  type?: int32(name='type', example='1'),
                }
              ](name='change_details'),
              refundDetails?: [ 
                {
                  extraContents?: [ 
                    {
                      content?: string(name='content', example='xxx'),
                      icon?: string(name='icon'),
                      title?: string(name='title'),
                    }
                  ](name='extra_contents'),
                  index?: int32(name='index', example='0'),
                  refundSubItems?: [ 
                    {
                      content?: string(name='content', example='demo'),
                      isStruct?: boolean(name='is_struct', example='true'),
                      ptc?: string(name='ptc', example='ADT'),
                      refundSubContents?: [ 
                        {
                          feeDesc?: string(name='fee_desc'),
                          feeRange?: string(name='fee_range'),
                          style?: string(name='style', example='0'),
                        }
                      ](name='refund_sub_contents'),
                      title?: string(name='title'),
                    }
                  ](name='refund_sub_items'),
                  tableHead?: string(name='table_head'),
                  title?: string(name='title'),
                  type?: int32(name='type', example='1'),
                }
              ](name='refund_details'),
            }(name='change_ota_item_rule_rq'),
            childCabin?: string(name='child_cabin', example='G'),
            leftNum?: string(name='left_num', example='0'),
            modifyPriceList?: [ 
              {
                passengerType?: int32(name='passenger_type', example='0'),
                ticketPrice?: int32(name='ticket_price', example='100'),
                upgradeFee?: int32(name='upgrade_fee', example='100'),
                upgradePrice?: int32(name='upgrade_price', example='100'),
              }
            ](name='modify_price_list'),
            otaItemid?: string(name='ota_itemid', example='360379a11ee84e9aa011baa41b758fe6'),
          }
        ](name='cabin_list'),
        carrierAirline?: string(name='carrier_airline', example='CA1704'),
        carrierNo?: string(name='carrier_no', example='CA1704'),
        depAirportInfo?: {
          airportCode?: string(name='airport_code', example='PEK'),
          airportName?: string(name='airport_name'),
          cityCode?: string(name='city_code', example='BJS'),
          cityName?: string(name='city_name'),
          terminal?: string(name='terminal', example='T3'),
        }(name='dep_airport_info'),
        depCityCode?: string(name='dep_city_code', example='HGH'),
        flightNo?: string(name='flight_no', example='CA1351'),
        isShare?: boolean(name='is_share', example='false'),
        lowestCabin?: string(name='lowest_cabin', example='Y'),
        lowestCabinClass?: string(name='lowest_cabin_class', example='Y'),
        lowestCabinDesc?: string(name='lowest_cabin_desc'),
        lowestCabinNum?: string(name='lowest_cabin_num', example='0'),
        lowestCabinPrice?: [ 
          {
            passengerType?: int32(name='passenger_type', example='0'),
            ticketPrice?: int32(name='ticket_price', example='100'),
            upgradeFee?: int32(name='upgrade_fee', example='100'),
            upgradePrice?: int32(name='upgrade_price', example='100'),
          }
        ](name='lowest_cabin_price'),
        modifyFlightArrTime?: string(name='modify_flight_arr_time', example='2000-00-00 00:00:00'),
        modifyFlightDepDate?: string(name='modify_flight_dep_date', example='2000-00-00 00:00:00'),
        modifyFlightDepTime?: string(name='modify_flight_dep_time', example='2000-00-00 00:00:00'),
        sessionId?: string(name='session_id', example='d1fb9e0a794f45e1b762d36ff1d17zz'),
      }
    ](name='flight_info_list'),
  }(name='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model TicketChangingEnquiryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TicketChangingEnquiryResponseBody(name='body'),
}

/**
 * @summary 机票改签询价
 *
 * @param request TicketChangingEnquiryRequest
 * @param headers TicketChangingEnquiryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TicketChangingEnquiryResponse
 */
async function ticketChangingEnquiryWithOptions(request: TicketChangingEnquiryRequest, headers: TicketChangingEnquiryHeaders, runtime: Util.RuntimeOptions): TicketChangingEnquiryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.arrCity)) {
    query['arr_city'] = request.arrCity;
  }
  if (!Util.isUnset(request.depCity)) {
    query['dep_city'] = request.depCity;
  }
  if (!Util.isUnset(request.disOrderId)) {
    query['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.isVoluntary)) {
    query['is_voluntary'] = request.isVoluntary;
  }
  if (!Util.isUnset(request.modifyDepartDate)) {
    query['modify_depart_date'] = request.modifyDepartDate;
  }
  if (!Util.isUnset(request.modifyFlightNo)) {
    query['modify_flight_no'] = request.modifyFlightNo;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['session_id'] = request.sessionId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TicketChangingEnquiry',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/ticket-changing/action/enquiry`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票改签询价
 *
 * @param request TicketChangingEnquiryRequest
 * @return TicketChangingEnquiryResponse
 */
async function ticketChangingEnquiry(request: TicketChangingEnquiryRequest): TicketChangingEnquiryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TicketChangingEnquiryHeaders{};
  return ticketChangingEnquiryWithOptions(request, headers, runtime);
}

model TicketChangingFlightListHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TicketChangingFlightListRequest {
  arrCity?: string(name='arr_city', example='BJS'),
  depCity?: string(name='dep_city', example='HGH'),
  depDate?: string(name='dep_date', description='This parameter is required.', example='2000-00-00 00:00:00'),
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='dis123'),
  isVoluntary?: int32(name='is_voluntary'),
  travelerInfoList?: [ 
    {
      arrCity?: string(name='arr_city', description='This parameter is required.', example='BJS'),
      depCity?: string(name='dep_city', description='This parameter is required.', example='HGH'),
      name?: string(name='name'),
      type?: string(name='type', example='ADULT'),
      userId?: string(name='user_id', description='This parameter is required.', example='23231'),
    }
  ](name='traveler_info_list'),
}

model TicketChangingFlightListShrinkRequest {
  arrCity?: string(name='arr_city', example='BJS'),
  depCity?: string(name='dep_city', example='HGH'),
  depDate?: string(name='dep_date', description='This parameter is required.', example='2000-00-00 00:00:00'),
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='dis123'),
  isVoluntary?: int32(name='is_voluntary'),
  travelerInfoListShrink?: string(name='traveler_info_list'),
}

model TicketChangingFlightListResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    flightInfoList?: [ 
      {
        airlineInfo?: {
          airlineCode?: string(name='airline_code', example='CA'),
          airlineName?: string(name='airline_name'),
          airlineSimpleName?: string(name='airline_simple_name'),
        }(name='airline_info'),
        arrAirportInfo?: {
          airportCode?: string(name='airport_code', example='HGH'),
          airportName?: string(name='airport_name'),
          cityCode?: string(name='city_code', example='HGH'),
          cityName?: string(name='city_name'),
          terminal?: string(name='terminal', example='T4'),
        }(name='arr_airport_info'),
        cabinList?: [ 
          {
            cabin?: string(name='cabin', example='G'),
            cabinClass?: string(name='cabin_class', example='Y'),
            cabinDesc?: string(name='cabin_desc'),
            cabinDiscount?: int32(name='cabin_discount', example='80'),
            childCabin?: string(name='child_cabin', example='G'),
            leftNum?: string(name='left_num', example='A'),
            modifyPriceList?: [ 
              {
                passengerType?: int32(name='passenger_type', example='0'),
                ticketPrice?: int32(name='ticket_price', example='100'),
                upgradeFee?: int32(name='upgrade_fee', example='100'),
                upgradePrice?: int32(name='upgrade_price', example='100'),
              }
            ](name='modify_price_list'),
            otaItemid?: string(name='ota_itemid', example='"360379a11ee84e9aa011baa41b758fe6"'),
          }
        ](name='cabin_list'),
        carrierAirline?: string(name='carrier_airline', example='CA1704'),
        carrierNo?: string(name='carrier_no', example='CA1704'),
        depAirportInfo?: {
          airportCode?: string(name='airport_code', example='PEK'),
          airportName?: string(name='airport_name'),
          cityCode?: string(name='city_code', example='BJS'),
          cityName?: string(name='city_name'),
          terminal?: string(name='terminal', example='T3'),
        }(name='dep_airport_info'),
        flightNo?: string(name='flight_no', example='CA1704'),
        flightSize?: string(name='flight_size'),
        flightType?: string(name='flight_type'),
        isProtocol?: boolean(name='is_protocol', example='true'),
        isShare?: boolean(name='is_share', example='false'),
        isStop?: boolean(name='is_stop', example='false'),
        lowestCabin?: string(name='lowest_cabin', example='Y'),
        lowestCabinClass?: string(name='lowest_cabin_class', example='Y'),
        lowestCabinDesc?: string(name='lowest_cabin_desc'),
        lowestCabinNum?: string(name='lowest_cabin_num'),
        lowestCabinPrice?: [ 
          {
            passengerType?: int32(name='passenger_type', example='0'),
            ticketPrice?: int32(name='ticket_price', example='100'),
            upgradeFee?: int32(name='upgrade_fee', example='100'),
            upgradePrice?: int32(name='upgrade_price', example='100'),
          }
        ](name='lowest_cabin_price'),
        mealDesc?: string(name='meal_desc'),
        modifyFlightArrTime?: string(name='modify_flight_arr_time', example='2000-00-00 00:00:00'),
        modifyFlightDepDate?: string(name='modify_flight_dep_date', example='2000-00-00 00:00:00'),
        modifyFlightDepTime?: string(name='modify_flight_dep_time', example='2000-00-00 00:00:00'),
        sessionId?: string(name='session_id', example='d1fb9e0a794f45e1b762d36ff1d17zz'),
        stopArrTime?: string(name='stop_arr_time', example='2000-00-00 00:00:00'),
        stopCity?: string(name='stop_city', example='HGH'),
        stopDepTime?: string(name='stop_dep_time', example='2000-00-00 00:00:00'),
      }
    ](name='flight_info_list'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model TicketChangingFlightListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TicketChangingFlightListResponseBody(name='body'),
}

/**
 * @summary 机票改签可改签航班列表
 *
 * @param tmpReq TicketChangingFlightListRequest
 * @param headers TicketChangingFlightListHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TicketChangingFlightListResponse
 */
async function ticketChangingFlightListWithOptions(tmpReq: TicketChangingFlightListRequest, headers: TicketChangingFlightListHeaders, runtime: Util.RuntimeOptions): TicketChangingFlightListResponse {
  Util.validateModel(tmpReq);
  var request = new TicketChangingFlightListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.travelerInfoList)) {
    request.travelerInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerInfoList, 'traveler_info_list', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.arrCity)) {
    query['arr_city'] = request.arrCity;
  }
  if (!Util.isUnset(request.depCity)) {
    query['dep_city'] = request.depCity;
  }
  if (!Util.isUnset(request.depDate)) {
    query['dep_date'] = request.depDate;
  }
  if (!Util.isUnset(request.disOrderId)) {
    query['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.isVoluntary)) {
    query['is_voluntary'] = request.isVoluntary;
  }
  if (!Util.isUnset(request.travelerInfoListShrink)) {
    query['traveler_info_list'] = request.travelerInfoListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TicketChangingFlightList',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/huge/dtb-flight/v1/ticket-changing-flight/action/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票改签可改签航班列表
 *
 * @param request TicketChangingFlightListRequest
 * @return TicketChangingFlightListResponse
 */
async function ticketChangingFlightList(request: TicketChangingFlightListRequest): TicketChangingFlightListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TicketChangingFlightListHeaders{};
  return ticketChangingFlightListWithOptions(request, headers, runtime);
}

model TicketChangingPayHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TicketChangingPayRequest {
  corpPayPrice?: long(name='corp_pay_price', example='100'),
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='dis123'),
  disSubOrderId?: string(name='dis_sub_order_id', description='This parameter is required.', example='refun123'),
  extra?: map[string]string(name='extra'),
  personalPayPrice?: long(name='personal_pay_price', example='100'),
  totalPayPrice?: long(name='total_pay_price', description='This parameter is required.', example='100'),
}

model TicketChangingPayShrinkRequest {
  corpPayPrice?: long(name='corp_pay_price', example='100'),
  disOrderId?: string(name='dis_order_id', description='This parameter is required.', example='dis123'),
  disSubOrderId?: string(name='dis_sub_order_id', description='This parameter is required.', example='refun123'),
  extraShrink?: string(name='extra'),
  personalPayPrice?: long(name='personal_pay_price', example='100'),
  totalPayPrice?: long(name='total_pay_price', description='This parameter is required.', example='100'),
}

model TicketChangingPayResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    canRetry?: boolean(name='can_retry', example='true'),
    payPrice?: long(name='pay_price', example='1000'),
    payStatus?: int32(name='pay_status'),
    payTime?: string(name='pay_time', example='0000-00-00 00:00:00'),
    tradeNo?: string(name='trade_no', example='23098276578908765'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model TicketChangingPayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TicketChangingPayResponseBody(name='body'),
}

/**
 * @summary 机票改签航班支付
 *
 * @param tmpReq TicketChangingPayRequest
 * @param headers TicketChangingPayHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TicketChangingPayResponse
 */
async function ticketChangingPayWithOptions(tmpReq: TicketChangingPayRequest, headers: TicketChangingPayHeaders, runtime: Util.RuntimeOptions): TicketChangingPayResponse {
  Util.validateModel(tmpReq);
  var request = new TicketChangingPayShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extra)) {
    request.extraShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extra, 'extra', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.corpPayPrice)) {
    body['corp_pay_price'] = request.corpPayPrice;
  }
  if (!Util.isUnset(request.disOrderId)) {
    body['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.disSubOrderId)) {
    body['dis_sub_order_id'] = request.disSubOrderId;
  }
  if (!Util.isUnset(request.extraShrink)) {
    body['extra'] = request.extraShrink;
  }
  if (!Util.isUnset(request.personalPayPrice)) {
    body['personal_pay_price'] = request.personalPayPrice;
  }
  if (!Util.isUnset(request.totalPayPrice)) {
    body['total_pay_price'] = request.totalPayPrice;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TicketChangingPay',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/ticket-changing/action/pay`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 机票改签航班支付
 *
 * @param request TicketChangingPayRequest
 * @return TicketChangingPayResponse
 */
async function ticketChangingPay(request: TicketChangingPayRequest): TicketChangingPayResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TicketChangingPayHeaders{};
  return ticketChangingPayWithOptions(request, headers, runtime);
}

model TrainApplyChangeHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TrainApplyChangeRequest {
  acceptNoSeat?: string(name='accept_no_seat', example='0'),
  changeTrainInfoS?: [ 
    {
      arrStationCode?: string(name='arr_station_code', description='This parameter is required.', example='BTC'),
      changeTicketInfoS?: [ 
        {
          passengerInfo?: {
            passengerCertNo?: string(name='passenger_cert_no', description='This parameter is required.', example='291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c'),
            passengerCertType?: string(name='passenger_cert_type', description='This parameter is required.', example='170d9ac6f8807f9ec603c688f45f78a41'),
            passengerId?: string(name='passenger_id', description='This parameter is required.', example='123456'),
            passengerName?: string(name='passenger_name', description='This parameter is required.', example='949c9f34f677a0e5d249dfc94f5e62cc7'),
          }(name='passenger_info', description='This parameter is required.'),
          seatType?: string(name='seat_type', description='This parameter is required.', example='14'),
          ticketPrice?: string(name='ticket_price', description='This parameter is required.', example='100'),
          ticketType?: string(name='ticket_type', description='This parameter is required.', example='0'),
        }
      ](name='change_ticket_info_s', description='This parameter is required.'),
      chooseBedS?: string(name='choose_bed_s', example='null'),
      chooseSeatS?: string(name='choose_seat_s', example='1T'),
      depStationCode?: string(name='dep_station_code', description='This parameter is required.', example='BDC'),
      depTime?: string(name='dep_time', description='This parameter is required.', example='2024-05-06 15:19:01'),
      originalDepTime?: string(name='original_dep_time', description='This parameter is required.', example='2024-05-06 15:19:01'),
      originalTrainNo?: string(name='original_train_no', description='This parameter is required.', example='K234'),
      trainNo?: string(name='train_no', description='This parameter is required.', example='K2345'),
    }
  ](name='change_train_info_s', description='This parameter is required.'),
  forceMatch?: string(name='force_match', example='0'),
  isPayNow?: boolean(name='is_pay_now', example='false'),
  orderId?: string(name='order_id', description='This parameter is required.', example='1017028198411054446'),
  outChangeApplyId?: string(name='out_change_apply_id', description='This parameter is required.', example='12345'),
  outOrderId?: string(name='out_order_id', description='This parameter is required.', example='123456'),
}

model TrainApplyChangeShrinkRequest {
  acceptNoSeat?: string(name='accept_no_seat', example='0'),
  changeTrainInfoSShrink?: string(name='change_train_info_s', description='This parameter is required.'),
  forceMatch?: string(name='force_match', example='0'),
  isPayNow?: boolean(name='is_pay_now', example='false'),
  orderId?: string(name='order_id', description='This parameter is required.', example='1017028198411054446'),
  outChangeApplyId?: string(name='out_change_apply_id', description='This parameter is required.', example='12345'),
  outOrderId?: string(name='out_order_id', description='This parameter is required.', example='123456'),
}

model TrainApplyChangeResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    changeOrderId?: string(name='change_order_id', example='1234'),
    orderId?: string(name='order_id', example='116019444'),
    outOrderId?: string(name='out_order_id', example='1017124195788186048'),
    payStatus?: string(name='pay_status', example='1'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='2103ad0216854277618591626db2b6'),
}

model TrainApplyChangeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TrainApplyChangeResponseBody(name='body'),
}

/**
 * @summary 火车票改签申请
 *
 * @param tmpReq TrainApplyChangeRequest
 * @param headers TrainApplyChangeHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TrainApplyChangeResponse
 */
async function trainApplyChangeWithOptions(tmpReq: TrainApplyChangeRequest, headers: TrainApplyChangeHeaders, runtime: Util.RuntimeOptions): TrainApplyChangeResponse {
  Util.validateModel(tmpReq);
  var request = new TrainApplyChangeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.changeTrainInfoS)) {
    request.changeTrainInfoSShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.changeTrainInfoS, 'change_train_info_s', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.changeTrainInfoSShrink)) {
    query['change_train_info_s'] = request.changeTrainInfoSShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.acceptNoSeat)) {
    body['accept_no_seat'] = request.acceptNoSeat;
  }
  if (!Util.isUnset(request.forceMatch)) {
    body['force_match'] = request.forceMatch;
  }
  if (!Util.isUnset(request.isPayNow)) {
    body['is_pay_now'] = request.isPayNow;
  }
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outChangeApplyId)) {
    body['out_change_apply_id'] = request.outChangeApplyId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TrainApplyChange',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/change/apply`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 火车票改签申请
 *
 * @param request TrainApplyChangeRequest
 * @return TrainApplyChangeResponse
 */
async function trainApplyChange(request: TrainApplyChangeRequest): TrainApplyChangeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainApplyChangeHeaders{};
  return trainApplyChangeWithOptions(request, headers, runtime);
}

model TrainApplyRefundHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwis'),
}

model TrainApplyRefundRequest {
  orderId?: string(name='order_id', description='This parameter is required.', example='1002145190081005400'),
  outOrderId?: string(name='out_order_id', description='This parameter is required.', example='123456'),
  outRefundId?: string(name='out_refund_id', description='This parameter is required.', example='123456778'),
  refundTrainInfos?: [ 
    {
      depTime?: string(name='dep_time', description='This parameter is required.', example='2024-05-06 15:19:01'),
      refundPassengerInfos?: [ 
        {
          passengerCertNo?: string(name='passenger_cert_no', description='This parameter is required.', example='291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c'),
          passengerCertType?: string(name='passenger_cert_type', description='This parameter is required.', example='170d9ac6f8807f9ec603c688f45f78a41'),
          passengerId?: string(name='passenger_id', description='This parameter is required.', example='12334'),
          passengerName?: string(name='passenger_name', description='This parameter is required.', example='949c9f34f677a0e5d249dfc94f5e62cc7'),
        }
      ](name='refund_passenger_infos', description='This parameter is required.'),
      trainNo?: string(name='train_no', description='This parameter is required.', example='K234'),
    }
  ](name='refund_train_infos', description='This parameter is required.'),
}

model TrainApplyRefundShrinkRequest {
  orderId?: string(name='order_id', description='This parameter is required.', example='1002145190081005400'),
  outOrderId?: string(name='out_order_id', description='This parameter is required.', example='123456'),
  outRefundId?: string(name='out_refund_id', description='This parameter is required.', example='123456778'),
  refundTrainInfosShrink?: string(name='refund_train_infos', description='This parameter is required.'),
}

model TrainApplyRefundResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    orderId?: string(name='order_id', example='116019444'),
    outOrderId?: string(name='out_order_id', example='1017002195370467200'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', description='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model TrainApplyRefundResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TrainApplyRefundResponseBody(name='body'),
}

/**
 * @summary 火车票退票申请
 *
 * @param tmpReq TrainApplyRefundRequest
 * @param headers TrainApplyRefundHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TrainApplyRefundResponse
 */
async function trainApplyRefundWithOptions(tmpReq: TrainApplyRefundRequest, headers: TrainApplyRefundHeaders, runtime: Util.RuntimeOptions): TrainApplyRefundResponse {
  Util.validateModel(tmpReq);
  var request = new TrainApplyRefundShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.refundTrainInfos)) {
    request.refundTrainInfosShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.refundTrainInfos, 'refund_train_infos', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.outRefundId)) {
    body['out_refund_id'] = request.outRefundId;
  }
  if (!Util.isUnset(request.refundTrainInfosShrink)) {
    body['refund_train_infos'] = request.refundTrainInfosShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TrainApplyRefund',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/refund/apply`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 火车票退票申请
 *
 * @param request TrainApplyRefundRequest
 * @return TrainApplyRefundResponse
 */
async function trainApplyRefund(request: TrainApplyRefundRequest): TrainApplyRefundResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainApplyRefundHeaders{};
  return trainApplyRefundWithOptions(request, headers, runtime);
}

model TrainBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model TrainBillSettlementQueryRequest {
  billBatch?: string(name='bill_batch'),
  orderId?: long(name='order_id'),
  pageNo?: int32(name='page_no', description='This parameter is required.', example='1'),
  pageSize?: int32(name='page_size', description='This parameter is required.', example='20'),
  periodEnd?: string(name='period_end', example='2021-10-02'),
  periodStart?: string(name='period_start', example='2021-10-01'),
  scrollId?: string(name='scroll_id'),
  scrollMod?: boolean(name='scroll_mod'),
}

model TrainBillSettlementQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category', example='6'),
    corpId?: string(name='corp_id'),
    dataList?: [ 
      {
        adjustTime?: string(name='adjust_time'),
        alipayTradeNo?: string(name='alipay_trade_no', example='2021123432260'),
        applyArrCityCode?: string(name='apply_arr_city_code'),
        applyArrCityName?: string(name='apply_arr_city_name'),
        applyDepCityCode?: string(name='apply_dep_city_code'),
        applyDepCityName?: string(name='apply_dep_city_name'),
        applyExtendField?: string(name='apply_extend_field', description='审批扩展自定义字段'),
        applyId?: string(name='apply_id', example='103189557'),
        approverEmail?: string(name='approver_email'),
        approverId?: string(name='approver_id'),
        approverName?: string(name='approver_name'),
        arrCityCode?: string(name='arr_city_code'),
        arrCityName?: string(name='arr_city_name'),
        arrDate?: string(name='arr_date', example='2021-10-13'),
        arrStation?: string(name='arr_station'),
        arrStationLocation?: string(name='arr_station_location'),
        arrStationLocationCode?: string(name='arr_station_location_code'),
        arrTime?: string(name='arr_time', example='12:30'),
        baseLocation?: string(name='base_location'),
        billRecordTime?: string(name='bill_record_time', example='2022-05-15T22:27Z'),
        bookTime?: string(name='book_time', example='2021-10-08 23:38:55'),
        bookerId?: string(name='booker_id', example='al_xinuan.zsy'),
        bookerJobNo?: string(name='booker_job_no'),
        bookerName?: string(name='booker_name'),
        businessTripResult?: string(name='business_trip_result'),
        cabinMaxPrice?: double(name='cabin_max_price'),
        capitalDirection?: string(name='capital_direction', example='1'),
        cascadeDepartment?: string(name='cascade_department'),
        categoryDesc?: string(name='category_desc'),
        changeAffiliateNo?: string(name='change_affiliate_no'),
        changeApplyId?: string(name='change_apply_id'),
        changeFee?: double(name='change_fee', example='23.0'),
        changeResult?: string(name='change_result'),
        coachNo?: string(name='coach_no'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number', example='T85'),
        costDepartment?: string(name='cost_department'),
        coupon?: double(name='coupon', example='0'),
        customContent?: string(name='custom_content'),
        deductibleTax?: double(name='deductible_tax'),
        depCityCode?: string(name='dep_city_code'),
        depCityName?: string(name='dep_city_name'),
        depStationLocation?: string(name='dep_station_location'),
        depStationLocationCode?: string(name='dep_station_location_code'),
        department?: string(name='department'),
        departmentId?: string(name='department_id'),
        deptDate?: string(name='dept_date', example='2021-10-14'),
        deptStation?: string(name='dept_station'),
        deptTime?: string(name='dept_time', example='09:44'),
        exceedReason?: string(name='exceed_reason'),
        feeType?: string(name='fee_type', example='6001'),
        feeTypeDesc?: string(name='fee_type_desc'),
        foreignersTag?: string(name='foreigners_tag'),
        index?: string(name='index', example='4740293'),
        invoiceTitle?: string(name='invoice_title'),
        isTransferOrder?: string(name='is_transfer_order'),
        location?: string(name='location'),
        longTicketNo?: string(name='long_ticket_no'),
        mappingCompanyCode?: string(name='mapping_company_code'),
        maxCabin?: string(name='max_cabin'),
        orderId?: string(name='order_id', example='23432692343243432'),
        orderPrice?: double(name='order_price', example='350'),
        orderTicketNo?: string(name='order_ticket_no'),
        overApplyId?: string(name='over_apply_id', example='534545345'),
        paymentDepartmentId?: string(name='payment_department_id'),
        paymentDepartmentName?: string(name='payment_department_name'),
        position?: string(name='position'),
        positionLevel?: string(name='position_level'),
        primaryId?: long(name='primary_id', example='4740293'),
        printTicketPrice?: double(name='print_ticket_price'),
        processorOaCode?: string(name='processor_oa_code'),
        projectCode?: string(name='project_code', example='2345235435'),
        projectName?: string(name='project_name'),
        refundAffiliateNo?: string(name='refund_affiliate_no'),
        refundApplyId?: string(name='refund_apply_id'),
        refundFee?: double(name='refund_fee', example='0'),
        refundReason?: string(name='refund_reason'),
        remark?: string(name='remark'),
        reserveMode?: string(name='reserve_mode'),
        runTime?: string(name='run_time'),
        sceneId?: string(name='scene_id'),
        sceneName?: string(name='scene_name'),
        seatNo?: string(name='seat_no', example='004F'),
        seatType?: string(name='seat_type'),
        serviceFee?: double(name='service_fee', example='23.0'),
        settleTypeDesc?: string(name='settle_type_desc'),
        settlementFee?: double(name='settlement_fee', example='350'),
        settlementGrantFee?: double(name='settlement_grant_fee', example='4.56'),
        settlementTime?: string(name='settlement_time', example='2021-10-08 23:39:01'),
        settlementType?: string(name='settlement_type', example='2'),
        shortTicketNo?: string(name='short_ticket_no'),
        sio?: string(name='sio'),
        speedPackageFee?: double(name='speed_package_fee'),
        status?: int32(name='status', example='1'),
        statusDesc?: string(name='status_desc'),
        taxRate?: string(name='tax_rate', description='税率', example='6%'),
        thirdItineraryId?: string(name='third_itinerary_id'),
        ticketCorpPayPrice?: string(name='ticket_corp_pay_price'),
        ticketNo?: string(name='ticket_no', example='2115242342342424067354'),
        ticketPersonPayPrice?: string(name='ticket_person_pay_price'),
        ticketPrice?: double(name='ticket_price', example='350'),
        tradeActionDesc?: string(name='trade_action_desc'),
        trainNo?: string(name='train_no', example='G906'),
        trainType?: string(name='train_type'),
        travelerEmail?: string(name='traveler_email'),
        travelerId?: string(name='traveler_id'),
        travelerJobNo?: string(name='traveler_job_no'),
        travelerMemberType?: string(name='traveler_member_type'),
        travelerMemberTypeName?: string(name='traveler_member_type_name'),
        travelerName?: string(name='traveler_name'),
        verifyFailedReason?: string(name='verify_failed_reason'),
        verifyStatus?: int32(name='verify_status'),
        voucherType?: int32(name='voucher_type', example='11'),
        voucherTypeDesc?: string(name='voucher_type_desc'),
      }
    ](name='data_list'),
    periodEnd?: string(name='period_end', example='2021-10-14'),
    periodStart?: string(name='period_start', example='2021-10-13'),
    scrollId?: string(name='scroll_id'),
    totalNum?: long(name='total_num', example='2694'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model TrainBillSettlementQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TrainBillSettlementQueryResponseBody(name='body'),
}

/**
 * @summary 查询火车票记账数据
 *
 * @param request TrainBillSettlementQueryRequest
 * @param headers TrainBillSettlementQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TrainBillSettlementQueryResponse
 */
async function trainBillSettlementQueryWithOptions(request: TrainBillSettlementQueryRequest, headers: TrainBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): TrainBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billBatch)) {
    query['bill_batch'] = request.billBatch;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }
  if (!Util.isUnset(request.scrollId)) {
    query['scroll_id'] = request.scrollId;
  }
  if (!Util.isUnset(request.scrollMod)) {
    query['scroll_mod'] = request.scrollMod;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TrainBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询火车票记账数据
 *
 * @param request TrainBillSettlementQueryRequest
 * @return TrainBillSettlementQueryResponse
 */
async function trainBillSettlementQuery(request: TrainBillSettlementQueryRequest): TrainBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainBillSettlementQueryHeaders{};
  return trainBillSettlementQueryWithOptions(request, headers, runtime);
}

model TrainExceedApplyQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model TrainExceedApplyQueryRequest {
  applyId?: long(name='apply_id', example='349720'),
  businessInstanceId?: string(name='business_instance_id'),
}

model TrainExceedApplyQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id', example='apply1'),
    applyIntentionInfoDO?: {
      arrCity?: string(name='arr_city', example='BJS'),
      arrCityName?: string(name='arr_city_name'),
      arrStation?: string(name='arr_station'),
      arrTime?: string(name='arr_time', example='2022-02-24T09:55Z'),
      depCity?: string(name='dep_city', example='SHA'),
      depCityName?: string(name='dep_city_name'),
      depStation?: string(name='dep_station'),
      depTime?: string(name='dep_time', example='2022-02-24T09:55Z'),
      price?: long(name='price', example='1000'),
      seatName?: string(name='seat_name'),
      trainNo?: string(name='train_no', example='G39'),
      trainTypeDesc?: string(name='train_type_desc'),
      type?: int32(name='type', example='32'),
    }(name='apply_intention_info_d_o'),
    btripCause?: string(name='btrip_cause'),
    corpId?: string(name='corp_id', example='corp1'),
    exceedReason?: string(name='exceed_reason'),
    exceedType?: int32(name='exceed_type', example='32'),
    originStandard?: string(name='origin_standard', example='10000'),
    status?: int32(name='status', example='1'),
    submitTime?: string(name='submit_time', example='2022-02-24T09:55Z'),
    thirdpartApplyId?: string(name='thirdpart_apply_id', example='0001A1100000007EX08O'),
    thirdpartCorpId?: string(name='thirdpart_corp_id', example='testcorp1'),
    userId?: string(name='user_id', example='user1'),
    userName?: string(name='user_name'),
  }(name='module'),
  requestId?: string(name='requestId', example='BE3FBA15-C5E1-5B99-8120-9FB84A04FB81'),
  success?: boolean(name='success', example='True'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model TrainExceedApplyQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TrainExceedApplyQueryResponseBody(name='body'),
}

/**
 * @summary 查询火车超标审批详情
 *
 * @param request TrainExceedApplyQueryRequest
 * @param headers TrainExceedApplyQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TrainExceedApplyQueryResponse
 */
async function trainExceedApplyQueryWithOptions(request: TrainExceedApplyQueryRequest, headers: TrainExceedApplyQueryHeaders, runtime: Util.RuntimeOptions): TrainExceedApplyQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.businessInstanceId)) {
    query['business_instance_id'] = request.businessInstanceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TrainExceedApplyQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/train-exceed`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询火车超标审批详情
 *
 * @param request TrainExceedApplyQueryRequest
 * @return TrainExceedApplyQueryResponse
 */
async function trainExceedApplyQuery(request: TrainExceedApplyQueryRequest): TrainExceedApplyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainExceedApplyQueryHeaders{};
  return trainExceedApplyQueryWithOptions(request, headers, runtime);
}

model TrainFeeCalculateChangeHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TrainFeeCalculateChangeRequest {
  changeTrainDetails?: [ 
    {
      arrStationCode?: string(name='arr_station_code', description='This parameter is required.', example='BDC'),
      depStationCode?: string(name='dep_station_code', description='This parameter is required.', example='BTC'),
      depTime?: string(name='dep_time', description='This parameter is required.', example='2024-05-06 15:19:01'),
      originalDepTime?: string(name='original_dep_time', description='This parameter is required.', example='2024-05-06 15:19:01'),
      originalTrainNo?: string(name='original_train_no', description='This parameter is required.', example='K234'),
      passengerInfo?: {
        passengerCertNo?: string(name='passenger_cert_no', description='This parameter is required.', example='949c9f34f677a0e5d249dfc94f5e62cc7'),
        passengerCertType?: string(name='passenger_cert_type', description='This parameter is required.', example='170d9ac6f8807f9ec603c688f45f78a41'),
        passengerName?: string(name='passenger_name', description='This parameter is required.', example='291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c'),
      }(name='passenger_info', description='This parameter is required.'),
      seatType?: string(name='seat_type', description='This parameter is required.', example='14'),
      trainNo?: string(name='train_no', description='This parameter is required.', example='K2345'),
    }
  ](name='change_train_details', description='This parameter is required.'),
  distributeOrderId?: string(name='distribute_order_id', description='This parameter is required.', example='12345'),
  orderId?: string(name='order_id', description='This parameter is required.', example='2627694109810885616'),
}

model TrainFeeCalculateChangeShrinkRequest {
  changeTrainDetailsShrink?: string(name='change_train_details', description='This parameter is required.'),
  distributeOrderId?: string(name='distribute_order_id', description='This parameter is required.', example='12345'),
  orderId?: string(name='order_id', description='This parameter is required.', example='2627694109810885616'),
}

model TrainFeeCalculateChangeResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    changeTrainDetails?: [ 
      {
        arrStationCode?: string(name='arr_station_code', example='BTC'),
        changeTicketDetails?: [ 
          {
            changeFee?: long(name='change_fee', example='0'),
            changeRate?: long(name='change_rate', example='5'),
            changeRefundFee?: long(name='change_refund_fee', example='10000'),
            changeRefundRate?: long(name='change_refund_rate', example='10'),
            passengerInfo?: {
              passengerCertNo?: string(name='passenger_cert_no', example='291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c'),
              passengerCertType?: string(name='passenger_cert_type', example='170d9ac6f8807f9ec603c688f45f78a41'),
              passengerId?: string(name='passenger_id', example='123'),
              passengerName?: string(name='passenger_name', example='949c9f34f677a0e5d249dfc94f5e62cc7'),
            }(name='passenger_info'),
            seatType?: string(name='seat_type', example='14'),
            ticketPrice?: long(name='ticket_price', example='100'),
          }
        ](name='change_ticket_details'),
        depStationCode?: string(name='dep_station_code', example='BDC'),
        depTime?: string(name='dep_time', example='2024-05-06 15:19:01'),
        trainNo?: string(name='train_no', example='K2345'),
      }
    ](name='change_train_details'),
    distributeOrderId?: string(name='distribute_order_id', example='123456'),
    orderId?: string(name='order_id', example='1683901850297448200'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model TrainFeeCalculateChangeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TrainFeeCalculateChangeResponseBody(name='body'),
}

/**
 * @summary 火车票改签费用预估
 *
 * @param tmpReq TrainFeeCalculateChangeRequest
 * @param headers TrainFeeCalculateChangeHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TrainFeeCalculateChangeResponse
 */
async function trainFeeCalculateChangeWithOptions(tmpReq: TrainFeeCalculateChangeRequest, headers: TrainFeeCalculateChangeHeaders, runtime: Util.RuntimeOptions): TrainFeeCalculateChangeResponse {
  Util.validateModel(tmpReq);
  var request = new TrainFeeCalculateChangeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.changeTrainDetails)) {
    request.changeTrainDetailsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.changeTrainDetails, 'change_train_details', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.changeTrainDetailsShrink)) {
    body['change_train_details'] = request.changeTrainDetailsShrink;
  }
  if (!Util.isUnset(request.distributeOrderId)) {
    body['distribute_order_id'] = request.distributeOrderId;
  }
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TrainFeeCalculateChange',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/change/fee`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 火车票改签费用预估
 *
 * @param request TrainFeeCalculateChangeRequest
 * @return TrainFeeCalculateChangeResponse
 */
async function trainFeeCalculateChange(request: TrainFeeCalculateChangeRequest): TrainFeeCalculateChangeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainFeeCalculateChangeHeaders{};
  return trainFeeCalculateChangeWithOptions(request, headers, runtime);
}

model TrainFeeCalculateRefundHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TrainFeeCalculateRefundRequest {
  distributeOrderId?: string(name='distribute_order_id', description='This parameter is required.', example='12345'),
  orderId?: string(name='order_id', description='This parameter is required.', example='1002145190081005400'),
  refundTrainInfos?: [ 
    {
      arrStationCode?: string(name='arr_station_code', description='This parameter is required.', example='BDC'),
      depStationCode?: string(name='dep_station_code', description='This parameter is required.', example='BTC'),
      depTime?: string(name='dep_time', description='This parameter is required.', example='2024-05-06 15:19:01'),
      refundPassengerInfos?: [ 
        {
          passengerCertNo?: string(name='passenger_cert_no', description='This parameter is required.', example='291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c'),
          passengerCertType?: string(name='passenger_cert_type', description='This parameter is required.', example='170d9ac6f8807f9ec603c688f45f78a41'),
          passengerId?: string(name='passenger_id', description='This parameter is required.', example='123456'),
          passengerName?: string(name='passenger_name', description='This parameter is required.', example='949c9f34f677a0e5d249dfc94f5e62cc7'),
        }
      ](name='refund_passenger_infos', description='This parameter is required.'),
      trainNo?: string(name='train_no', description='This parameter is required.', example='K1234'),
    }
  ](name='refund_train_infos', description='This parameter is required.'),
}

model TrainFeeCalculateRefundShrinkRequest {
  distributeOrderId?: string(name='distribute_order_id', description='This parameter is required.', example='12345'),
  orderId?: string(name='order_id', description='This parameter is required.', example='1002145190081005400'),
  refundTrainInfosShrink?: string(name='refund_train_infos', description='This parameter is required.'),
}

model TrainFeeCalculateRefundResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    distributeOrderId?: string(name='distribute_order_id', example='123445'),
    orderId?: string(name='order_id', example='1017002195370467200'),
    refundTrainDetails?: [ 
      {
        arrStationCode?: string(name='arr_station_code', example='BTC'),
        depStationCode?: string(name='dep_station_code', example='BDC'),
        depTime?: string(name='dep_time', example='2024-05-06 15:19:01'),
        refundTicketDetails?: [ 
          {
            canRefund?: boolean(name='can_refund', example='true'),
            passengerInfo?: {
              passengerCertNo?: string(name='passenger_cert_no', example='291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c'),
              passengerCertType?: string(name='passenger_cert_type', example='170d9ac6f8807f9ec603c688f45f78a41'),
              passengerId?: string(name='passenger_id', example='123456'),
              passengerName?: string(name='passenger_name', example='949c9f34f677a0e5d249dfc94f5e62cc7'),
            }(name='passenger_info'),
            refundCostFee?: long(name='refund_cost_fee', example='90'),
            refundPrice?: long(name='refund_price', example='10'),
            refundRate?: long(name='refund_rate', example='90'),
            ticketPrice?: long(name='ticket_price', example='100'),
          }
        ](name='refund_ticket_details'),
        trainNo?: string(name='train_no', example='K1234'),
      }
    ](name='refund_train_details'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', example='210bc4c416859457407135025d509c'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model TrainFeeCalculateRefundResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TrainFeeCalculateRefundResponseBody(name='body'),
}

/**
 * @summary 火车票退票费用预估
 *
 * @param tmpReq TrainFeeCalculateRefundRequest
 * @param headers TrainFeeCalculateRefundHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TrainFeeCalculateRefundResponse
 */
async function trainFeeCalculateRefundWithOptions(tmpReq: TrainFeeCalculateRefundRequest, headers: TrainFeeCalculateRefundHeaders, runtime: Util.RuntimeOptions): TrainFeeCalculateRefundResponse {
  Util.validateModel(tmpReq);
  var request = new TrainFeeCalculateRefundShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.refundTrainInfos)) {
    request.refundTrainInfosShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.refundTrainInfos, 'refund_train_infos', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.distributeOrderId)) {
    body['distribute_order_id'] = request.distributeOrderId;
  }
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.refundTrainInfosShrink)) {
    body['refund_train_infos'] = request.refundTrainInfosShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TrainFeeCalculateRefund',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/refund/fee`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 火车票退票费用预估
 *
 * @param request TrainFeeCalculateRefundRequest
 * @return TrainFeeCalculateRefundResponse
 */
async function trainFeeCalculateRefund(request: TrainFeeCalculateRefundRequest): TrainFeeCalculateRefundResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainFeeCalculateRefundHeaders{};
  return trainFeeCalculateRefundWithOptions(request, headers, runtime);
}

model TrainNoInfoSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwis'),
}

model TrainNoInfoSearchRequest {
  arrLocation?: string(name='arr_location', description='This parameter is required.'),
  depDate?: string(name='dep_date', description='This parameter is required.', example='2023-08-15'),
  depLocation?: string(name='dep_location', description='This parameter is required.'),
  lineKey?: string(name='line_key', example='qwwweqswxxa'),
  middleDate?: string(name='middle_date', example='2023-08-15'),
  middleStation?: string(name='middle_station'),
  orderId?: string(name='order_id', example='12342123212'),
  trainNo?: string(name='train_no', example='K2345'),
}

model TrainNoInfoSearchResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    trainStationSearchVO?: {
      arrDayTag?: string(name='arr_day_tag', example='0'),
      arrStationCode?: string(name='arr_station_code', example='BDC'),
      arrStationName?: string(name='arr_station_name'),
      arrTime?: string(name='arr_time', example='2024-05-07 15:19:01'),
      costTime?: string(name='cost_time', example='31'),
      depStationCode?: string(name='dep_station_code', example='BTC'),
      depStationName?: string(name='dep_station_name'),
      depTime?: string(name='dep_time', example='2024-05-06 15:19:01'),
      isEndStation?: int32(name='is_end_station', example='1'),
      isStartStation?: int32(name='is_start_station', example='0'),
      price?: string(name='price', example='54000'),
      saleFlag?: string(name='sale_flag', example='0'),
      seatInfos?: [ 
        {
          price?: long(name='price', example='10000'),
          seatName?: string(name='seat_name'),
          seatType?: string(name='seat_type', example='14'),
          stock?: string(name='stock'),
        }
      ](name='seat_infos'),
      trainNo?: string(name='train_no', example='k2345'),
      trainType?: string(name='train_type', example='1'),
    }(name='train_station_search_v_o'),
    trainTransferStationSearchVO?: {
      transferDetailList?: [ 
        {
          arrDayTag?: string(name='arr_day_tag', example='1'),
          arrStationCode?: string(name='arr_station_code', example='BDC'),
          arrStationName?: string(name='arr_station_name'),
          arrTime?: string(name='arr_time', example='2024-05-06 15:19:01'),
          costTime?: string(name='cost_time', example='111'),
          depStationCode?: string(name='dep_station_code', example='BTC'),
          depStationName?: string(name='dep_station_name'),
          depTime?: string(name='dep_time', example='2024-05-06 15:19:01'),
          isEndStation?: int32(name='is_end_station', example='1'),
          isStartStation?: int32(name='is_start_station', example='1'),
          price?: string(name='price', example='54000'),
          saleFlag?: string(name='sale_flag', example='1'),
          seatInfos?: [ 
            {
              price?: long(name='price', example='67000'),
              seatName?: string(name='seat_name'),
              seatType?: string(name='seat_type', example='14'),
              stock?: string(name='stock'),
            }
          ](name='seat_infos'),
          trainNo?: string(name='train_no', example='D1234'),
          trainType?: string(name='train_type', example='1'),
        }
      ](name='transfer_detail_list'),
      transferType?: string(name='transfer_type', example='1'),
    }(name='train_transfer_station_search_v_o'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', description='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='requestId', example='2136019116915615924561621e06ee'),
}

model TrainNoInfoSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TrainNoInfoSearchResponseBody(name='body'),
}

/**
 * @summary 火车票车次详情查询
 *
 * @param request TrainNoInfoSearchRequest
 * @param headers TrainNoInfoSearchHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TrainNoInfoSearchResponse
 */
async function trainNoInfoSearchWithOptions(request: TrainNoInfoSearchRequest, headers: TrainNoInfoSearchHeaders, runtime: Util.RuntimeOptions): TrainNoInfoSearchResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.arrLocation)) {
    body['arr_location'] = request.arrLocation;
  }
  if (!Util.isUnset(request.depDate)) {
    body['dep_date'] = request.depDate;
  }
  if (!Util.isUnset(request.depLocation)) {
    body['dep_location'] = request.depLocation;
  }
  if (!Util.isUnset(request.lineKey)) {
    body['line_key'] = request.lineKey;
  }
  if (!Util.isUnset(request.middleDate)) {
    body['middle_date'] = request.middleDate;
  }
  if (!Util.isUnset(request.middleStation)) {
    body['middle_station'] = request.middleStation;
  }
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.trainNo)) {
    body['train_no'] = request.trainNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TrainNoInfoSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/search/info`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 火车票车次详情查询
 *
 * @param request TrainNoInfoSearchRequest
 * @return TrainNoInfoSearchResponse
 */
async function trainNoInfoSearch(request: TrainNoInfoSearchRequest): TrainNoInfoSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainNoInfoSearchHeaders{};
  return trainNoInfoSearchWithOptions(request, headers, runtime);
}

model TrainNoListSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TrainNoListSearchRequest {
  arrLocation?: string(name='arr_location', description='This parameter is required.'),
  depDate?: string(name='dep_date', description='This parameter is required.', example='2024-05-16'),
  depLocation?: string(name='dep_location', description='This parameter is required.'),
  option?: {
    needTransfer?: boolean(name='need_transfer', example='false'),
  }(name='option', description='This parameter is required.'),
  orderId?: string(name='order_id', example='null'),
}

model TrainNoListSearchShrinkRequest {
  arrLocation?: string(name='arr_location', description='This parameter is required.'),
  depDate?: string(name='dep_date', description='This parameter is required.', example='2024-05-16'),
  depLocation?: string(name='dep_location', description='This parameter is required.'),
  optionShrink?: string(name='option', description='This parameter is required.'),
  orderId?: string(name='order_id', example='null'),
}

model TrainNoListSearchResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    trainStationSearchVOS?: [ 
      {
        arrDayTag?: string(name='arr_day_tag', example='0'),
        arrStationCode?: string(name='arr_station_code', example='BDC'),
        arrStationName?: string(name='arr_station_name'),
        arrTime?: string(name='arr_time', example='2024-05-07 14:46:06'),
        costTime?: string(name='cost_time', example='30'),
        depStationCode?: string(name='dep_station_code', example='BTC'),
        depStationName?: string(name='dep_station_name'),
        depTime?: string(name='dep_time', example='2024-05-06 14:46:06'),
        isEndStation?: int32(name='is_end_station', example='1'),
        isStartStation?: int32(name='is_start_station', example='1'),
        price?: string(name='price', example='54000'),
        saleFlag?: string(name='sale_flag', example='1'),
        saleFlagMsg?: string(name='sale_flag_msg'),
        seagmentIndex?: string(name='seagment_index', example='0'),
        seatInfos?: [ 
          {
            price?: long(name='price', example='40900'),
            seatName?: string(name='seat_name'),
            seatType?: string(name='seat_type', example='14'),
            stock?: string(name='stock'),
          }
        ](name='seat_infos'),
        trainNo?: string(name='train_no', example='D2345'),
        trainType?: string(name='train_type', example='1'),
      }
    ](name='train_station_search_v_o_s'),
    trainTransferStationSearchVOs?: [ 
      {
        arrStation?: string(name='arr_station'),
        depStation?: string(name='dep_station'),
        lineKey?: string(name='line_key'),
        middleStation?: string(name='middle_station'),
        transferDetailList?: [ 
          {
            arrDayTag?: string(name='arr_day_tag', example='1'),
            arrStationCode?: string(name='arr_station_code', example='123344'),
            arrStationName?: string(name='arr_station_name'),
            arrTime?: string(name='arr_time', example='2024-05-07 14:46:06'),
            costTime?: string(name='cost_time', example='234567'),
            depStationCode?: string(name='dep_station_code', example='12334'),
            depStationName?: string(name='dep_station_name'),
            depTime?: string(name='dep_time', example='2024-05-06 14:46:06'),
            isEndStation?: int32(name='is_end_station', example='1'),
            isStartStation?: int32(name='is_start_station', example='0'),
            price?: string(name='price', example='105000'),
            saleFlag?: string(name='sale_flag', example='1'),
            saleFlagMsg?: string(name='sale_flag_msg'),
            seatInfos?: [ 
              {
                price?: long(name='price', example='40900'),
                seatName?: string(name='seat_name'),
                seatType?: string(name='seat_type', example='14'),
                stock?: string(name='stock', example='33'),
              }
            ](name='seat_infos'),
            segmentIndex?: string(name='segment_index', example='0'),
            trainNo?: string(name='train_no', example='K2345'),
            trainType?: string(name='train_type', example='1'),
          }
        ](name='transfer_detail_list'),
        transferType?: string(name='transfer_type', example='1'),
      }
    ](name='train_transfer_station_search_v_os'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', example='210bc81a17090871660176894d008c'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model TrainNoListSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TrainNoListSearchResponseBody(name='body'),
}

/**
 * @summary 火车票车次列表查询
 *
 * @param tmpReq TrainNoListSearchRequest
 * @param headers TrainNoListSearchHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TrainNoListSearchResponse
 */
async function trainNoListSearchWithOptions(tmpReq: TrainNoListSearchRequest, headers: TrainNoListSearchHeaders, runtime: Util.RuntimeOptions): TrainNoListSearchResponse {
  Util.validateModel(tmpReq);
  var request = new TrainNoListSearchShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.option)) {
    request.optionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.option, 'option', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.arrLocation)) {
    body['arr_location'] = request.arrLocation;
  }
  if (!Util.isUnset(request.depDate)) {
    body['dep_date'] = request.depDate;
  }
  if (!Util.isUnset(request.depLocation)) {
    body['dep_location'] = request.depLocation;
  }
  if (!Util.isUnset(request.optionShrink)) {
    body['option'] = request.optionShrink;
  }
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TrainNoListSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/search/list`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 火车票车次列表查询
 *
 * @param request TrainNoListSearchRequest
 * @return TrainNoListSearchResponse
 */
async function trainNoListSearch(request: TrainNoListSearchRequest): TrainNoListSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainNoListSearchHeaders{};
  return trainNoListSearchWithOptions(request, headers, runtime);
}

model TrainOrderCancelHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TrainOrderCancelRequest {
  changeOrderId?: string(name='change_order_id', example='1234223'),
  orderId?: string(name='order_id', description='This parameter is required.', example='1002145190081005400'),
  outChangeOrderId?: string(name='out_change_order_id', example='123321245534'),
  outOrderId?: string(name='out_order_id', description='This parameter is required.', example='123456'),
}

model TrainOrderCancelResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    changeOrderId?: string(name='change_order_id', example='11127278782'),
    orderId?: string(name='order_id', example='116019444'),
    outChangeOrderId?: string(name='out_change_order_id', example='43534345'),
    outOrderId?: string(name='out_order_id', example='3702553342926024704'),
    status?: boolean(name='status', example='true'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model TrainOrderCancelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TrainOrderCancelResponseBody(name='body'),
}

/**
 * @summary 火车票订单取消
 *
 * @param request TrainOrderCancelRequest
 * @param headers TrainOrderCancelHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TrainOrderCancelResponse
 */
async function trainOrderCancelWithOptions(request: TrainOrderCancelRequest, headers: TrainOrderCancelHeaders, runtime: Util.RuntimeOptions): TrainOrderCancelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.changeOrderId)) {
    body['change_order_id'] = request.changeOrderId;
  }
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outChangeOrderId)) {
    body['out_change_order_id'] = request.outChangeOrderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TrainOrderCancel',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/order/cancel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 火车票订单取消
 *
 * @param request TrainOrderCancelRequest
 * @return TrainOrderCancelResponse
 */
async function trainOrderCancel(request: TrainOrderCancelRequest): TrainOrderCancelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainOrderCancelHeaders{};
  return trainOrderCancelWithOptions(request, headers, runtime);
}

model TrainOrderChangeConfirmHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TrainOrderChangeConfirmRequest {
  changeApplyId?: string(name='change_apply_id', description='This parameter is required.', example='1234567890'),
  changeSettleAmount?: long(name='change_settle_amount', description='This parameter is required.', example='0'),
  orderId?: string(name='order_id', description='This parameter is required.', example='1002145190081005400'),
  outChangeApplyId?: string(name='out_change_apply_id', description='This parameter is required.', example='12345'),
  outOrderId?: string(name='out_order_id', description='This parameter is required.', example='123456'),
}

model TrainOrderChangeConfirmResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    changeOrderId?: string(name='change_order_id', example='123445443444'),
    orderId?: string(name='order_id', example='116019444'),
    outOrderId?: string(name='out_order_id', example='1234232'),
    status?: boolean(name='status', example='0'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model TrainOrderChangeConfirmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TrainOrderChangeConfirmResponseBody(name='body'),
}

/**
 * @summary 火车票改签确认
 *
 * @param request TrainOrderChangeConfirmRequest
 * @param headers TrainOrderChangeConfirmHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TrainOrderChangeConfirmResponse
 */
async function trainOrderChangeConfirmWithOptions(request: TrainOrderChangeConfirmRequest, headers: TrainOrderChangeConfirmHeaders, runtime: Util.RuntimeOptions): TrainOrderChangeConfirmResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.changeApplyId)) {
    body['change_apply_id'] = request.changeApplyId;
  }
  if (!Util.isUnset(request.changeSettleAmount)) {
    body['change_settle_amount'] = request.changeSettleAmount;
  }
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outChangeApplyId)) {
    body['out_change_apply_id'] = request.outChangeApplyId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TrainOrderChangeConfirm',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/change/confirm`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 火车票改签确认
 *
 * @param request TrainOrderChangeConfirmRequest
 * @return TrainOrderChangeConfirmResponse
 */
async function trainOrderChangeConfirm(request: TrainOrderChangeConfirmRequest): TrainOrderChangeConfirmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainOrderChangeConfirmHeaders{};
  return trainOrderChangeConfirmWithOptions(request, headers, runtime);
}

model TrainOrderCreateHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwis'),
}

model TrainOrderCreateRequest {
  acceptNoSeat?: string(name='accept_no_seat', example='0'),
  bookTrainInfos?: [ 
    {
      arrStationCode?: string(name='arr_station_code', description='This parameter is required.', example='BDC'),
      bookTicketInfos?: [ 
        {
          passengerId?: string(name='passenger_id', description='This parameter is required.', example='123456'),
          seatType?: string(name='seat_type', description='This parameter is required.', example='14'),
          ticketPrice?: long(name='ticket_price', description='This parameter is required.', example='100'),
          ticketType?: string(name='ticket_type', description='This parameter is required.', example='0'),
        }
      ](name='book_ticket_infos', description='This parameter is required.'),
      chooseBeds?: string(name='choose_beds', example='1T'),
      chooseSeats?: string(name='choose_seats', example='1T'),
      depStationCode?: string(name='dep_station_code', description='This parameter is required.', example='BTC'),
      depTime?: string(name='dep_time', description='This parameter is required.', example='2024-05-06 15:19:01'),
      trainNo?: string(name='train_no', description='This parameter is required.', example='K123456'),
    }
  ](name='book_train_infos', description='This parameter is required.'),
  btripUserId?: string(name='btrip_user_id', description='This parameter is required.', example='12344321'),
  btripUserName?: string(name='btrip_user_name', description='This parameter is required.'),
  businessInfo?: {
    customerApplyId?: string(name='customer_apply_id', example='4321'),
    customerItineraryId?: string(name='customer_itinerary_id', example='1234'),
  }(name='business_info'),
  contactInfo?: {
    passengerId?: string(name='passenger_id', description='This parameter is required.', example='123456'),
    passengerMobile?: string(name='passenger_mobile', description='This parameter is required.', example='b6a6fc1bdf1ba60e25c2e132b612c8819'),
    passengerName?: string(name='passenger_name', description='This parameter is required.', example='949c9f34f677a0e5d249dfc94f5e62cc7'),
  }(name='contact_info', description='This parameter is required.'),
  forceMatch?: string(name='force_match', example='0'),
  isPayNow?: boolean(name='is_pay_now', example='false'),
  outOrderId?: string(name='out_order_id', description='This parameter is required.', example='123456'),
  passengerOpenInfoS?: [ 
    {
      costCenterInfo?: {
        cascadeDeptName?: string(name='cascade_dept_name'),
        costCenterId?: string(name='cost_center_id', example='123321'),
        costCenterName?: string(name='cost_center_name'),
        costCenterNo?: string(name='cost_center_no', example='12332112344'),
        departId?: string(name='depart_id', example='010000009'),
        departName?: string(name='depart_name'),
        invoiceId?: string(name='invoice_id', example='111111'),
        invoiceTitle?: string(name='invoice_title'),
        projectCode?: string(name='project_code', example='acs'),
        projectTitle?: string(name='project_title'),
      }(name='cost_center_info'),
      countryCode?: string(name='country_code', example='291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c'),
      passengerCertNo?: string(name='passenger_cert_no', description='This parameter is required.', example='291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c'),
      passengerCertType?: string(name='passenger_cert_type', description='This parameter is required.', example='949c9f34f677a0e5d249dfc94f5e62cc7'),
      passengerId?: string(name='passenger_id', description='This parameter is required.', example='123456'),
      passengerMobile?: string(name='passenger_mobile', example='b6a6fc1bdf1ba60e25c2e132b612c8819'),
      passengerName?: string(name='passenger_name', description='This parameter is required.', example='949c9f34f677a0e5d249dfc94f5e62cc7'),
      validDateEnd?: string(name='valid_date_end', example='291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c'),
    }
  ](name='passenger_open_info_s', description='This parameter is required.'),
}

model TrainOrderCreateShrinkRequest {
  acceptNoSeat?: string(name='accept_no_seat', example='0'),
  bookTrainInfosShrink?: string(name='book_train_infos', description='This parameter is required.'),
  btripUserId?: string(name='btrip_user_id', description='This parameter is required.', example='12344321'),
  btripUserName?: string(name='btrip_user_name', description='This parameter is required.'),
  businessInfoShrink?: string(name='business_info'),
  contactInfoShrink?: string(name='contact_info', description='This parameter is required.'),
  forceMatch?: string(name='force_match', example='0'),
  isPayNow?: boolean(name='is_pay_now', example='false'),
  outOrderId?: string(name='out_order_id', description='This parameter is required.', example='123456'),
  passengerOpenInfoSShrink?: string(name='passenger_open_info_s', description='This parameter is required.'),
}

model TrainOrderCreateResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    orderId?: string(name='order_id', example='1017002195798359369'),
    outOrderId?: string(name='out_order_id', example='1233333'),
    payStatus?: string(name='pay_status', example='9'),
    serviceFee?: long(name='service_fee', example='5'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model TrainOrderCreateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TrainOrderCreateResponseBody(name='body'),
}

/**
 * @summary 火车票正向预订
 *
 * @param tmpReq TrainOrderCreateRequest
 * @param headers TrainOrderCreateHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TrainOrderCreateResponse
 */
async function trainOrderCreateWithOptions(tmpReq: TrainOrderCreateRequest, headers: TrainOrderCreateHeaders, runtime: Util.RuntimeOptions): TrainOrderCreateResponse {
  Util.validateModel(tmpReq);
  var request = new TrainOrderCreateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bookTrainInfos)) {
    request.bookTrainInfosShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bookTrainInfos, 'book_train_infos', 'json');
  }
  if (!Util.isUnset(tmpReq.businessInfo)) {
    request.businessInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.businessInfo, 'business_info', 'json');
  }
  if (!Util.isUnset(tmpReq.contactInfo)) {
    request.contactInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contactInfo, 'contact_info', 'json');
  }
  if (!Util.isUnset(tmpReq.passengerOpenInfoS)) {
    request.passengerOpenInfoSShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerOpenInfoS, 'passenger_open_info_s', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.acceptNoSeat)) {
    body['accept_no_seat'] = request.acceptNoSeat;
  }
  if (!Util.isUnset(request.bookTrainInfosShrink)) {
    body['book_train_infos'] = request.bookTrainInfosShrink;
  }
  if (!Util.isUnset(request.btripUserId)) {
    body['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.btripUserName)) {
    body['btrip_user_name'] = request.btripUserName;
  }
  if (!Util.isUnset(request.businessInfoShrink)) {
    body['business_info'] = request.businessInfoShrink;
  }
  if (!Util.isUnset(request.contactInfoShrink)) {
    body['contact_info'] = request.contactInfoShrink;
  }
  if (!Util.isUnset(request.forceMatch)) {
    body['force_match'] = request.forceMatch;
  }
  if (!Util.isUnset(request.isPayNow)) {
    body['is_pay_now'] = request.isPayNow;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.passengerOpenInfoSShrink)) {
    body['passenger_open_info_s'] = request.passengerOpenInfoSShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TrainOrderCreate',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/order/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 火车票正向预订
 *
 * @param request TrainOrderCreateRequest
 * @return TrainOrderCreateResponse
 */
async function trainOrderCreate(request: TrainOrderCreateRequest): TrainOrderCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainOrderCreateHeaders{};
  return trainOrderCreateWithOptions(request, headers, runtime);
}

model TrainOrderDetailQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TrainOrderDetailQueryRequest {
  orderId?: string(name='order_id', description='This parameter is required.', example='2083528200659337994'),
  outOrderId?: string(name='out_order_id', description='This parameter is required.', example='3703190607180169216'),
}

model TrainOrderDetailQueryResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    bookInfos?: {
      bookTrainInfos?: [ 
        {
          arrStationCode?: string(name='arr_station_code', example='BTC'),
          arrStationName?: string(name='arr_station_name'),
          arriveTime?: string(name='arrive_time', example='2024-05-07 15:19:01'),
          bookTicketInfos?: [ 
            {
              coachNo?: string(name='coach_no', example='04'),
              failCode?: string(name='fail_code', example='1111'),
              failReason?: string(name='fail_reason'),
              passengerId?: string(name='passenger_id', example='123456'),
              realTicketPrice?: long(name='real_ticket_price', example='10000'),
              seatNo?: string(name='seat_no', example='1A'),
              seatType?: string(name='seat_type', example='14'),
              ticketEntrance?: string(name='ticket_entrance', example='null'),
              ticketPrice?: long(name='ticket_price', example='100'),
              ticketStatus?: int32(name='ticket_status', example='11'),
              ticketType?: string(name='ticket_type', example='0'),
            }
          ](name='book_ticket_infos'),
          depStationCode?: string(name='dep_station_code', example='BDC'),
          depStationName?: string(name='dep_station_name'),
          depTime?: string(name='dep_time', example='2024-05-06 15:19:01'),
          trainNo?: string(name='train_no', example='D1234'),
        }
      ](name='book_train_infos'),
      failCode?: string(name='fail_code', example='1111'),
      failMsg?: string(name='fail_msg'),
      lastPayTime?: string(name='last_pay_time', example='2024-05-06 15:19:01'),
      status?: int32(name='status', example='1'),
      ticketNo?: string(name='ticket_no', example='GW123456'),
    }(name='book_infos'),
    changeInfos?: [ 
      {
        changeApplyId?: string(name='change_apply_id', example='1234567890'),
        changeTrainInfos?: [ 
          {
            arrStationCode?: string(name='arr_station_code', example='BDC'),
            arrStationName?: string(name='arr_station_name'),
            arriveTime?: string(name='arrive_time', example='2024-05-06 15:19:01'),
            changeTicketInfos?: [ 
              {
                changeCost?: long(name='change_cost', example='0'),
                changeDiff?: long(name='change_diff', example='0'),
                changeGapHandingFee?: long(name='change_gap_handing_fee', example='0'),
                changeMinTicketAmountHandingFee?: long(name='change_min_ticket_amount_handing_fee', example='0'),
                coachNo?: string(name='coach_no', example='04'),
                failCode?: string(name='fail_code', example='4000'),
                failReason?: string(name='fail_reason'),
                passengerId?: string(name='passenger_id', example='123456'),
                realTicketPrice?: long(name='real_ticket_price', example='10000'),
                seatNo?: string(name='seat_no', example='1A'),
                seatType?: string(name='seat_type', example='14'),
                ticketEntrance?: string(name='ticket_entrance', example='null'),
                ticketPrice?: long(name='ticket_price', example='1234'),
                ticketStatus?: string(name='ticket_status', example='11'),
              }
            ](name='change_ticket_infos'),
            depStationCode?: string(name='dep_station_code', example='BTC'),
            depStationName?: string(name='dep_station_name'),
            depTime?: string(name='dep_time', example='2024-05-06 15:19:01'),
            trainNo?: string(name='train_no', example='D1234'),
          }
        ](name='change_train_infos'),
        limitPayTime?: string(name='limit_pay_time', example='2024-05-06 15:19:01'),
        outChangeApplyId?: string(name='out_change_apply_id', example='12345'),
        status?: string(name='status', example='1'),
      }
    ](name='change_infos'),
    offlineRefundDetails?: [ 
      {
        offlineRefundId?: string(name='offline_refund_id', example='123456'),
        offlineRefundInfos?: [ 
          {
            passengerId?: string(name='passenger_id', example='123456'),
            refundPrice?: long(name='refund_price', example='111'),
          }
        ](name='offline_refund_infos'),
        offlineRefundType?: string(name='offline_refund_type', example='1'),
        refundTotalPrice?: long(name='refund_total_price', example='10000'),
      }
    ](name='offlineRefundDetails'),
    orderId?: string(name='order_id', example='1017028198411054446'),
    outOrderId?: string(name='out_order_id', example='3703184209587306496'),
    passengerInfoS?: [ 
      {
        costCenterInfo?: {
          cascadeDeptName?: string(name='cascade_dept_name'),
          costCenterId?: string(name='cost_center_id', example='111111'),
          costCenterName?: string(name='cost_center_name'),
          costCenterNo?: string(name='cost_center_no', example='123456'),
          departId?: string(name='depart_id', example='582000002311'),
          departName?: string(name='depart_name'),
          invoiceId?: string(name='invoice_id', example='11111'),
          invoiceTitle?: string(name='invoice_title'),
          passengerId?: string(name='passenger_id', example='123456'),
          projectCode?: string(name='project_code', example='1234'),
          projectTitle?: string(name='project_title'),
        }(name='cost_center_info'),
        countryCode?: string(name='country_code', example='291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c'),
        passengerCertNo?: string(name='passenger_cert_no', example='291487e553c5abde3b611aae283e2526f0d733ab55094aadc0b5ba587222a233c'),
        passengerCertType?: string(name='passenger_cert_type', example='170d9ac6f8807f9ec603c688f45f78a41'),
        passengerId?: string(name='passenger_id', example='123456'),
        passengerMobile?: string(name='passenger_mobile', example='b6a6fc1bdf1ba60e25c2e132b612c8819'),
        passengerName?: string(name='passenger_name', example='949c9f34f677a0e5d249dfc94f5e62cc7'),
        validDateEnd?: string(name='valid_date_end', example='b6a6fc1bdf1ba60e25c2e132b612c8819'),
      }
    ](name='passenger_info_s'),
    refundInfos?: [ 
      {
        failCode?: string(name='fail_code', example='1111'),
        failMsg?: string(name='fail_msg'),
        outRefundId?: string(name='out_refund_id', example='123456778'),
        refundId?: string(name='refund_id', description='String', example='123456'),
        refundTrainInfo?: [ 
          {
            arrStationName?: string(name='arr_station_name'),
            arrTime?: string(name='arr_time', example='2024-05-06 15:19:01'),
            depStationCode?: string(name='dep_station_code', example='BTC'),
            depStationName?: string(name='dep_station_name'),
            depTime?: string(name='dep_time', example='2024-05-06 15:19:01'),
            refundTicketInfos?: [ 
              {
                passengerId?: string(name='passenger_id', example='123456'),
                refundCost?: long(name='refund_cost', example='0'),
                refundPrice?: long(name='refund_price', example='10000'),
                ticketPrice?: long(name='ticket_price', example='10000'),
              }
            ](name='refund_ticket_infos'),
            trainNo?: string(name='train_no', example='K1234'),
          }
        ](name='refund_train_info'),
        status?: string(name='status', example='1'),
      }
    ](name='refund_infos'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', example='210bc81a17090871660176894d008c'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='2103a05c16872420814992343d8a09'),
}

model TrainOrderDetailQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TrainOrderDetailQueryResponseBody(name='body'),
}

/**
 * @summary 火车票订单详情
 *
 * @param request TrainOrderDetailQueryRequest
 * @param headers TrainOrderDetailQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TrainOrderDetailQueryResponse
 */
async function trainOrderDetailQueryWithOptions(request: TrainOrderDetailQueryRequest, headers: TrainOrderDetailQueryHeaders, runtime: Util.RuntimeOptions): TrainOrderDetailQueryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TrainOrderDetailQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/order/query`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 火车票订单详情
 *
 * @param request TrainOrderDetailQueryRequest
 * @return TrainOrderDetailQueryResponse
 */
async function trainOrderDetailQuery(request: TrainOrderDetailQueryRequest): TrainOrderDetailQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainOrderDetailQueryHeaders{};
  return trainOrderDetailQueryWithOptions(request, headers, runtime);
}

model TrainOrderListQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model TrainOrderListQueryRequest {
  allApply?: boolean(name='all_apply', example='false'),
  applyId?: long(name='apply_id', example='11657'),
  departId?: string(name='depart_id'),
  endTime?: string(name='end_time', example='2022-05-15 22:27:00'),
  page?: int32(name='page', example='3'),
  pageSize?: int32(name='page_size', example='25'),
  startTime?: string(name='start_time', example='2022-05-15 22:27:00'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', example='CS-EDES9898'),
  updateEndTime?: string(name='update_end_time', example='2022-05-15 22:27:00'),
  updateStartTime?: string(name='update_start_time', example='2022-05-15 22:27:00'),
  userId?: string(name='user_id'),
}

model TrainOrderListQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: [ 
    {
      applyId?: long(name='apply_id', example='11367'),
      arrCity?: string(name='arr_city'),
      arrCityAdCode?: string(name='arr_city_ad_code'),
      arrStation?: string(name='arr_station'),
      arrTime?: string(name='arr_time', example='2022-05-15T22:27Z'),
      btripTitle?: string(name='btrip_title'),
      contactName?: string(name='contact_name'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      costCenter?: {
        corpId?: string(name='corp_id'),
        id?: long(name='id', example='11643'),
        name?: string(name='name'),
        number?: string(name='number', example='CS112234'),
      }(name='cost_center'),
      depCity?: string(name='dep_city'),
      depCityAdCode?: string(name='dep_city_ad_code'),
      depStation?: string(name='dep_station'),
      depTime?: string(name='dep_time', example='2022-05-15T22:27Z'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      gmtCreate?: string(name='gmt_create', example='2022-05-15T22:27Z'),
      gmtModified?: string(name='gmt_modified', example='2022-05-15T22:27Z'),
      id?: long(name='id', example='1478652'),
      invoice?: {
        id?: long(name='id', example='11324'),
        title?: string(name='title'),
      }(name='invoice'),
      priceInfoList?: [ 
        {
          categoryCode?: int32(name='category_code', example='1'),
          categoryType?: int32(name='category_type', example='1'),
          endCity?: string(name='end_city'),
          endTime?: string(name='end_time', example='2022-05-15T22:27Z'),
          gmtCreate?: string(name='gmt_create', example='2022-05-15T22:27Z'),
          originalTrainNo?: string(name='original_train_no', example='CS-663'),
          passengerName?: string(name='passenger_name'),
          payType?: int32(name='pay_type', example='1'),
          price?: double(name='price', example='100'),
          seatType?: string(name='seat_type'),
          startCity?: string(name='start_city'),
          startTime?: string(name='start_time', example='2022-05-15T22:27Z'),
          tradeId?: string(name='trade_id', example='cs1165734212'),
          trainNo?: string(name='train_no', example='Z1521'),
          type?: int32(name='type', example='1'),
        }
      ](name='price_info_list'),
      projectCode?: string(name='project_code', example='PCXIDF'),
      projectId?: long(name='project_id', example='12425'),
      projectTitle?: string(name='project_title'),
      riderName?: string(name='rider_name'),
      runTime?: string(name='run_time', example='100'),
      seatType?: string(name='seat_type'),
      status?: int32(name='status', example='0'),
      thirdPartBusinessId?: string(name='thirdPart_business_id'),
      thirdPartProjectId?: string(name='third_part_project_id', example='CS-SKPFDS'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', example='CSIODJUSN'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', example='CS-IT89D'),
      ticketCount?: int32(name='ticket_count', example='1'),
      ticketNo12306?: string(name='ticket_no12306', example='CS-663'),
      trainNumber?: string(name='train_number', example='CS-663'),
      trainType?: string(name='train_type'),
      userAffiliateList?: [ 
        {
          userId?: string(name='user_id'),
          userName?: string(name='user_name'),
        }
      ](name='user_affiliate_list'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='module'),
  pageInfo?: {
    page?: int32(name='page', example='1'),
    pageSize?: int32(name='page_size', example='50'),
    totalNumber?: int32(name='total_number', example='100'),
  }(name='page_info'),
  requestId?: string(name='requestId', example='F93C3EBD-17BE-5FE6-BF06-96A6F1AC8DC5'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model TrainOrderListQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TrainOrderListQueryResponseBody(name='body'),
}

/**
 * @summary 查询火车票订单列表
 *
 * @param request TrainOrderListQueryRequest
 * @param headers TrainOrderListQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TrainOrderListQueryResponse
 */
async function trainOrderListQueryWithOptions(request: TrainOrderListQueryRequest, headers: TrainOrderListQueryHeaders, runtime: Util.RuntimeOptions): TrainOrderListQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.allApply)) {
    query['all_apply'] = request.allApply;
  }
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.departId)) {
    query['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['end_time'] = request.endTime;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['start_time'] = request.startTime;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    query['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.updateEndTime)) {
    query['update_end_time'] = request.updateEndTime;
  }
  if (!Util.isUnset(request.updateStartTime)) {
    query['update_start_time'] = request.updateStartTime;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TrainOrderListQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/order-list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询火车票订单列表
 *
 * @param request TrainOrderListQueryRequest
 * @return TrainOrderListQueryResponse
 */
async function trainOrderListQuery(request: TrainOrderListQueryRequest): TrainOrderListQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainOrderListQueryHeaders{};
  return trainOrderListQueryWithOptions(request, headers, runtime);
}

model TrainOrderPayHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TrainOrderPayRequest {
  orderId?: string(name='order_id', description='This parameter is required.', example='1379598062646'),
  outOrderId?: string(name='out_order_id', description='This parameter is required.', example='123456'),
  payAmount?: long(name='pay_amount', description='This parameter is required.', example='100'),
}

model TrainOrderPayResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    orderId?: string(name='order_id', example='1017124195788186048'),
    outOrderId?: string(name='out_order_id', example='1017002195370467137'),
    status?: boolean(name='status', example='true'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model TrainOrderPayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TrainOrderPayResponseBody(name='body'),
}

/**
 * @summary 火车票订单支付
 *
 * @param request TrainOrderPayRequest
 * @param headers TrainOrderPayHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TrainOrderPayResponse
 */
async function trainOrderPayWithOptions(request: TrainOrderPayRequest, headers: TrainOrderPayHeaders, runtime: Util.RuntimeOptions): TrainOrderPayResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    body['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.outOrderId)) {
    body['out_order_id'] = request.outOrderId;
  }
  if (!Util.isUnset(request.payAmount)) {
    body['pay_amount'] = request.payAmount;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TrainOrderPay',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/order/pay`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 火车票订单支付
 *
 * @param request TrainOrderPayRequest
 * @return TrainOrderPayResponse
 */
async function trainOrderPay(request: TrainOrderPayRequest): TrainOrderPayResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainOrderPayHeaders{};
  return trainOrderPayWithOptions(request, headers, runtime);
}

model TrainOrderQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model TrainOrderQueryRequest {
  orderId?: long(name='order_id', description='This parameter is required.', example='2627694109810885616'),
  userId?: string(name='user_id'),
}

model TrainOrderQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    changeTicketInfoList?: [ 
      {
        changeCoachNo?: string(name='change_coach_no', example='03'),
        changeGapFee?: double(name='change_gap_fee', example='100'),
        changeHandlingFee?: double(name='change_handling_fee', example='100'),
        changeSeatNo?: string(name='change_seat_no', example='004C'),
        changeSeatTypeName?: string(name='change_seat_type_name'),
        changeServiceFee?: double(name='change_service_fee', example='100'),
        changeTrainNo?: string(name='change_train_no', example='D103'),
        changeTrainTypeName?: string(name='change_train_type_name'),
        checkInTime?: string(name='check_in_time', example='2022-05-15T22:27Z'),
        checkOutTime?: string(name='check_out_time', example='2022-05-15T22:27Z'),
        endTime?: string(name='end_time', example='2022-05-15T22:27Z'),
        fromStationName?: string(name='from_station_name'),
        gmtCreate?: string(name='gmt_create', example='2022-05-15T22:27Z'),
        gmtModify?: string(name='gmt_modify', example='2022-05-15T22:27Z'),
        originTicketNo?: string(name='origin_ticket_no', example='CS987JKDF'),
        outTicketStatus?: string(name='out_ticket_status', example='m'),
        startTime?: string(name='start_time', example='2022-05-15T22:27Z'),
        ticketNo?: string(name='ticket_no', example='CS987JKDF'),
        toStationName?: string(name='to_station_name'),
      }
    ](name='change_ticket_info_list'),
    invoiceInfo?: {
      id?: long(name='id', example='11754'),
      title?: string(name='title'),
    }(name='invoice_info'),
    orderBaseInfo?: {
      applyId?: string(name='apply_id', example='11657'),
      btripTitle?: string(name='btrip_title'),
      contactName?: string(name='contact_name'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      exceedApplyId?: string(name='exceed_apply_id', description='火车票超标审批id', example='1422113021033961000'),
      exceedThirdPartApplyId?: string(name='exceed_third_part_apply_id', description='火车票超标审批三方id', example='2022113021030003600001715'),
      gmtCreate?: string(name='gmt_create', example='2022-05-15T22:27Z'),
      gmtModify?: string(name='gmt_modify', example='2022-05-15T22:27Z'),
      itineraryId?: string(name='itinerary_id', example='kaxasevesguikxn123kixnghid'),
      orderId?: long(name='order_id', example='2627694109810885616'),
      orderStatus?: int32(name='order_status', example='4'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', example='CS-EDES9898'),
      thirdpartCorpId?: string(name='thirdpart_corp_id'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', example='kaxasevesguikxn123kixnghid'),
      tripType?: int32(name='trip_type', example='0'),
      userId?: string(name='user_id'),
    }(name='order_base_info'),
    passengerInfoList?: [ 
      {
        costCenterId?: long(name='cost_center_id', example='11564'),
        costCenterName?: string(name='cost_center_name'),
        costCenterNumber?: string(name='cost_center_number', example='01'),
        projectCode?: string(name='project_code', example='CSP-01'),
        projectId?: long(name='project_id', example='22562'),
        projectTitle?: string(name='project_title'),
        thirdpartProjectId?: string(name='thirdpart_project_id', example='CS-22562'),
        userId?: string(name='user_id'),
        userName?: string(name='user_name'),
        userType?: int32(name='user_type', example='0'),
      }
    ](name='passenger_info_list'),
    priceInfoList?: [ 
      {
        categoryCode?: int32(name='category_code', example='1'),
        gmtCreate?: string(name='gmt_create', example='2022-05-15T22:27Z'),
        passengerName?: string(name='passenger_name'),
        payType?: int32(name='pay_type', example='1'),
        price?: double(name='price', example='0'),
        tradeId?: string(name='trade_id', example='12312312001'),
        type?: int32(name='type', example='1'),
      }
    ](name='price_info_list'),
    refundTicketInfoList?: [ 
      {
        gmtCreate?: string(name='gmt_create', example='2022-05-15T22:27Z'),
        gmtModify?: string(name='gmt_modify', example='2022-05-15T22:27Z'),
        refundFee?: double(name='refund_fee', example='10'),
        refundServiceFee?: double(name='refund_service_fee', example='10'),
        ticketNo?: string(name='ticket_no', example='CS987JKDF'),
      }
    ](name='refund_ticket_info_list'),
    ticketInfoList?: [ 
      {
        changed?: boolean(name='changed', example='false'),
        checkInTime?: string(name='check_in_time', example='2022-05-15T22:27Z'),
        checkOutTime?: string(name='check_out_time', example='2022-05-15T22:27Z'),
        coachNo?: string(name='coach_no', example='01'),
        endTime?: string(name='end_time', example='2022-05-15T22:27Z'),
        gmtCreate?: string(name='gmt_create', example='2022-05-15T22:27Z'),
        gmtModify?: string(name='gmt_modify', example='2022-05-15T22:27Z'),
        outTicketStatus?: string(name='out_ticket_status', example='m'),
        payType?: int32(name='pay_type', example='1'),
        seatNo?: string(name='seat_no', example='A001'),
        seatTypeName?: string(name='seat_type_name'),
        serviceFee?: double(name='service_fee', example='10'),
        startTime?: string(name='start_time', example='2022-05-15T22:27Z'),
        ticketNo?: string(name='ticket_no', example='CS987JKDF'),
        ticketPrice?: double(name='ticket_price', example='100'),
        ticketStatus?: int32(name='ticket_status', example='1'),
        trainTypeName?: string(name='train_type_name'),
        userId?: string(name='user_id'),
      }
    ](name='ticket_info_list'),
    trainInfo?: {
      arrTime?: string(name='arr_time', example='2022-05-15T22:27Z'),
      depTime?: string(name='dep_time', example='2022-05-15T22:27Z'),
      fromCityAdCode?: string(name='from_city_ad_code'),
      fromStationName?: string(name='from_station_name'),
      runTime?: long(name='run_time', example='100'),
      toCityAdCode?: string(name='to_city_ad_code'),
      toStationName?: string(name='to_station_name'),
      trainNo?: string(name='train_no', example='CS-150'),
    }(name='train_info'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model TrainOrderQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TrainOrderQueryResponseBody(name='body'),
}

/**
 * @summary 查询火车票订单详情（含票信息）
 *
 * @param request TrainOrderQueryRequest
 * @param headers TrainOrderQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TrainOrderQueryResponse
 */
async function trainOrderQueryWithOptions(request: TrainOrderQueryRequest, headers: TrainOrderQueryHeaders, runtime: Util.RuntimeOptions): TrainOrderQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TrainOrderQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/order`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询火车票订单详情（含票信息）
 *
 * @param request TrainOrderQueryRequest
 * @return TrainOrderQueryResponse
 */
async function trainOrderQuery(request: TrainOrderQueryRequest): TrainOrderQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainOrderQueryHeaders{};
  return trainOrderQueryWithOptions(request, headers, runtime);
}

model TrainOrderQueryV2Headers {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='112dcasca'),
}

model TrainOrderQueryV2Request {
  orderId?: long(name='order_id', description='This parameter is required.', example='12342123212'),
  userId?: string(name='user_id', example='123121112'),
}

model TrainOrderQueryV2ResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    changeTicketInfoList?: [ 
      {
        changeCoachNo?: string(name='change_coach_no', example='03'),
        changeGapFee?: double(name='change_gap_fee', example='100'),
        changeHandlingFee?: double(name='change_handling_fee', example='100'),
        changeOrderId?: string(name='change_order_id'),
        changeSeatNo?: string(name='change_seat_no', example='004C'),
        changeSeatTypeName?: string(name='change_seat_type_name'),
        changeServiceFee?: double(name='change_service_fee', example='100'),
        changeTrainNo?: string(name='change_train_no', example='D103'),
        changeTrainTypeName?: string(name='change_train_type_name'),
        checkInTime?: string(name='check_in_time'),
        checkOutTime?: string(name='check_out_time'),
        endTime?: string(name='end_time'),
        fromCityName?: string(name='from_city_name'),
        fromStationName?: string(name='from_station_name'),
        gmtCreate?: string(name='gmt_create'),
        gmtModify?: string(name='gmt_modify'),
        originTicketNo?: string(name='origin_ticket_no', example='CS987JKDF'),
        outTicketStatus?: string(name='out_ticket_status', example='m'),
        segmentIndex?: int32(name='segment_index', example='0'),
        shortTicketNo?: string(name='short_ticket_no'),
        startTime?: string(name='start_time', example='2022-05-15T22:27Z'),
        ticketEntrance?: string(name='ticket_entrance'),
        ticketNo?: string(name='ticket_no', example='CS987JKDF'),
        ticketStatus?: int32(name='ticket_status'),
        toCityName?: string(name='to_city_name'),
        toStationName?: string(name='to_station_name'),
        useTicket?: string(name='use_ticket', example='0'),
        userId?: string(name='user_id', example='12312'),
      }
    ](name='change_ticket_info_list'),
    invoiceInfo?: {
      id?: long(name='id', example='3815504'),
      title?: string(name='title'),
    }(name='invoice_info'),
    orderBaseInfo?: {
      applyId?: string(name='apply_id', example='1003784135'),
      btripTitle?: string(name='btrip_title'),
      contactName?: string(name='contact_name'),
      contactPhone?: string(name='contact_phone', example='12110002222'),
      corpId?: string(name='corp_id', example='btripsy4yd7v0gdpdntpp'),
      corpName?: string(name='corp_name'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      exceedApplyId?: string(name='exceed_apply_id', example='1422113021033961000'),
      exceedThirdpartApplyId?: string(name='exceed_thirdpart_apply_id', example='1422113021033961000'),
      gmtCreate?: string(name='gmt_create'),
      gmtModify?: string(name='gmt_modify'),
      itineraryId?: string(name='itinerary_id', example='42942924'),
      orderId?: long(name='order_id', example='2849819724653209258'),
      orderStatus?: int32(name='order_status', example='4'),
      thirdPartBusinessId?: string(name='thirdPart_business_id'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', example='01-2023-01214'),
      thirdpartDepartId?: string(name='thirdpart_depart_id', example='DHDI2209141OEGHWRN'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', example='CS-FLIGHT'),
      tripType?: int32(name='trip_type', example='0'),
      userId?: string(name='user_id', example='1231212'),
      userNick?: string(name='user_nick'),
    }(name='order_base_info'),
    passengerInfoList?: [ 
      {
        costCenterId?: long(name='cost_center_id', example='11564'),
        costCenterName?: string(name='cost_center_name'),
        costCenterNumber?: string(name='cost_center_number', example='CS-3345'),
        projectCode?: string(name='project_code', example='CS-PROJECT'),
        projectId?: long(name='project_id', example='133576'),
        projectTitle?: string(name='project_title'),
        thirdpartCostCenterId?: string(name='thirdpart_cost_center_id', example='CS-KDISL'),
        thirdpartProjectId?: string(name='thirdpart_project_id', example='CS-22562'),
        userId?: string(name='user_id', example='1231231'),
        userName?: string(name='user_name'),
        userType?: int32(name='user_type', example='0'),
      }
    ](name='passenger_info_list'),
    priceInfoList?: [ 
      {
        categoryCode?: int32(name='category_code'),
        gmtCreate?: string(name='gmt_create', example='1669344020'),
        passengerName?: string(name='passenger_name'),
        payType?: int32(name='pay_type', example='4'),
        price?: double(name='price', example='176000'),
        tradeId?: string(name='trade_id', example='12345678910987654321'),
        type?: int32(name='type'),
      }
    ](name='price_info_list'),
    refundTicketInfoList?: [ 
      {
        gmtCreate?: string(name='gmt_create'),
        gmtModify?: string(name='gmt_modify'),
        refundApplyId?: string(name='refund_apply_id'),
        refundFee?: double(name='refund_fee', example='10'),
        refundServiceFee?: double(name='refund_service_fee', example='10'),
        ticketNo?: string(name='ticket_no', example='CS987JKDF'),
        userId?: string(name='user_id', example='1231231'),
      }
    ](name='refund_ticket_info_list'),
    trainOrderInfo?: {
      trainInfoList?: [ 
        {
          arrTime?: string(name='arr_time'),
          depTime?: string(name='dep_time'),
          fromCityAdCode?: string(name='from_city_ad_code'),
          fromCityName?: string(name='from_city_name'),
          fromStationName?: string(name='from_station_name'),
          itemId?: long(name='item_id', description='itemId', example='12312'),
          runTime?: long(name='run_time', example='120'),
          subFromCityAdCode?: string(name='sub_from_city_ad_code'),
          subFromCityAdName?: string(name='sub_from_city_ad_name'),
          subToCityCode?: string(name='sub_to_city_code'),
          subToCityName?: string(name='sub_to_city_name'),
          toCityAdCode?: string(name='to_city_ad_code'),
          toCityName?: string(name='to_city_name'),
          toStationName?: string(name='to_station_name'),
          trainNo?: string(name='train_no', example='D11'),
          trainTicketInfos?: [ 
            {
              changed?: boolean(name='changed', example='false'),
              checkInTime?: string(name='check_in_time'),
              checkOutTime?: string(name='check_out_time'),
              coachNo?: string(name='coach_no', example='01'),
              endTime?: string(name='end_time'),
              gmtCreate?: string(name='gmt_create'),
              gmtModify?: string(name='gmt_modify'),
              outTicketStatus?: string(name='out_ticket_status', example='1'),
              payType?: int32(name='pay_type', example='2'),
              seatNo?: string(name='seat_no', example='02A'),
              seatTypeName?: string(name='seat_type_name'),
              segmentIndex?: int32(name='segment_index', example='0'),
              serviceFee?: double(name='service_fee', example='100'),
              shortTicketNo?: string(name='short_ticket_no'),
              startTime?: string(name='start_time'),
              ticketEntrance?: string(name='ticket_entrance'),
              ticketNo?: string(name='ticket_no', example='ew123121'),
              ticketPrice?: double(name='ticket_price', example='400'),
              ticketStatus?: int32(name='ticket_status', example='1'),
              trainTypeName?: string(name='train_type_name'),
              useTicket?: string(name='use_ticket', example='0'),
              userId?: string(name='user_id', example='231212'),
            }
          ](name='train_ticket_infos'),
        }
      ](name='train_info_list'),
      trainTransferInfo?: {
        costTime?: string(name='cost_time', example='200'),
        endTime?: string(name='end_time', example='2022-11-15 00:00:00'),
        fromCityAdCode?: string(name='from_city_ad_code'),
        fromCityName?: string(name='from_city_name'),
        fromStationName?: string(name='from_station_name'),
        middleCity?: string(name='middle_city'),
        middleCityAdCode?: string(name='middle_city_ad_code'),
        middleDate?: string(name='middle_date', example='2023-01-29 18:10:00'),
        middleStation?: string(name='middle_station'),
        middleType?: string(name='middle_type'),
        startTime?: string(name='start_time', example='2022-11-01 00:00:00'),
        subFromCityAdCode?: string(name='sub_from_city_ad_code'),
        subFromCityAdName?: string(name='sub_from_city_ad_name'),
        subMiddleCityCode?: string(name='sub_middle_city_code'),
        subMiddleCityName?: string(name='sub_middle_city_name'),
        subToCityCode?: string(name='sub_to_city_code'),
        subToCityName?: string(name='sub_to_city_name'),
        toCityAdCode?: string(name='to_city_ad_code'),
        toCityName?: string(name='to_city_name'),
        toStationName?: string(name='to_station_name'),
        waitTime?: string(name='wait_time', example='60'),
      }(name='train_transfer_info'),
    }(name='train_order_info'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='1213ds1d'),
  success?: boolean(name='success', example='True'),
  traceId?: string(name='traceId', description='traceId', example='123412dcdsac sd'),
}

model TrainOrderQueryV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TrainOrderQueryV2ResponseBody(name='body'),
}

/**
 * @summary 火车票订单查询V2
 *
 * @param request TrainOrderQueryV2Request
 * @param headers TrainOrderQueryV2Headers
 * @param runtime runtime options for this request RuntimeOptions
 * @return TrainOrderQueryV2Response
 */
async function trainOrderQueryV2WithOptions(request: TrainOrderQueryV2Request, headers: TrainOrderQueryV2Headers, runtime: Util.RuntimeOptions): TrainOrderQueryV2Response {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TrainOrderQueryV2',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v2/order`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 火车票订单查询V2
 *
 * @param request TrainOrderQueryV2Request
 * @return TrainOrderQueryV2Response
 */
async function trainOrderQueryV2(request: TrainOrderQueryV2Request): TrainOrderQueryV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainOrderQueryV2Headers{};
  return trainOrderQueryV2WithOptions(request, headers, runtime);
}

model TrainStationSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model TrainStationSearchRequest {
  keyword?: string(name='keyword', description='This parameter is required.'),
}

model TrainStationSearchResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    cities?: [ 
      {
        code?: string(name='code', example='hz'),
        name?: string(name='name'),
      }
    ](name='cities'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210e847f16611516748613869de4f6'),
}

model TrainStationSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TrainStationSearchResponseBody(name='body'),
}

/**
 * @summary 查询火车站数据
 *
 * @param request TrainStationSearchRequest
 * @param headers TrainStationSearchHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TrainStationSearchResponse
 */
async function trainStationSearchWithOptions(request: TrainStationSearchRequest, headers: TrainStationSearchHeaders, runtime: Util.RuntimeOptions): TrainStationSearchResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TrainStationSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/city/v1/train`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询火车站数据
 *
 * @param request TrainStationSearchRequest
 * @return TrainStationSearchResponse
 */
async function trainStationSearch(request: TrainStationSearchRequest): TrainStationSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainStationSearchHeaders{};
  return trainStationSearchWithOptions(request, headers, runtime);
}

model TrainStopoverSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TrainStopoverSearchRequest {
  arrStation?: string(name='arr_station', description='This parameter is required.'),
  depStation?: string(name='dep_station', description='This parameter is required.'),
  trainDate?: string(name='train_date', description='This parameter is required.', example='2024-05-08'),
  trainNo?: string(name='train_no', description='This parameter is required.', example='k2345'),
}

model TrainStopoverSearchResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: [ 
    {
      arrTime?: string(name='arr_time', example='2024-05-06 15:19:01'),
      depTime?: string(name='dep_time', example='2024-05-06 15:19:01'),
      stationName?: string(name='station_name'),
      stationNo?: string(name='station_no', example='0'),
      stationType?: string(name='station_type', example='0'),
      stopOverTime?: string(name='stop_over_time', example='22'),
    }
  ](name='module', description='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model TrainStopoverSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TrainStopoverSearchResponseBody(name='body'),
}

/**
 * @summary 火车票经停站查询
 *
 * @param request TrainStopoverSearchRequest
 * @param headers TrainStopoverSearchHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TrainStopoverSearchResponse
 */
async function trainStopoverSearchWithOptions(request: TrainStopoverSearchRequest, headers: TrainStopoverSearchHeaders, runtime: Util.RuntimeOptions): TrainStopoverSearchResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.arrStation)) {
    body['arr_station'] = request.arrStation;
  }
  if (!Util.isUnset(request.depStation)) {
    body['dep_station'] = request.depStation;
  }
  if (!Util.isUnset(request.trainDate)) {
    body['train_date'] = request.trainDate;
  }
  if (!Util.isUnset(request.trainNo)) {
    body['train_no'] = request.trainNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TrainStopoverSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/search/stopover`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 火车票经停站查询
 *
 * @param request TrainStopoverSearchRequest
 * @return TrainStopoverSearchResponse
 */
async function trainStopoverSearch(request: TrainStopoverSearchRequest): TrainStopoverSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainStopoverSearchHeaders{};
  return trainStopoverSearchWithOptions(request, headers, runtime);
}

model TrainTicketScanQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model TrainTicketScanQueryRequest {
  billDate?: string(name='bill_date', description='This parameter is required.', example='2022-12-01'),
  billId?: long(name='bill_id', example='123'),
  invoiceSubTaskId?: long(name='invoice_sub_task_id', example='456'),
  pageNo?: int32(name='page_no', example='1'),
  pageSize?: int32(name='page_size', example='20'),
  serialNumber?: string(name='serial_number'),
  ticketNo?: string(name='ticket_no'),
}

model TrainTicketScanQueryResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    items?: [ 
      {
        applyId?: string(name='apply_id'),
        arrStation?: string(name='arr_station'),
        billDate?: string(name='bill_date', example='2022-12-01'),
        coachName?: string(name='coach_name'),
        costCenter?: string(name='cost_center'),
        depStation?: string(name='dep_station'),
        depTime?: string(name='dep_time', example='2023-01-12 10:00:00'),
        department?: string(name='department'),
        feeTypeShowCode?: int32(name='fee_type_show_code'),
        id?: string(name='id', example='71'),
        invoiceDate?: string(name='invoice_date'),
        invoiceMaterial?: int32(name='invoice_material'),
        invoiceTitle?: string(name='invoice_title'),
        ofdUrl?: string(name='ofd_url'),
        orderId?: long(name='order_id', example='3137168772101111000'),
        ossUrl?: string(name='oss_url', example='https://www.testurl.com'),
        passenger?: string(name='passenger'),
        pdfUrl?: string(name='pdf_url'),
        price?: string(name='price', example='100'),
        project?: string(name='project'),
        purchaserName?: string(name='purchaser_name'),
        purchaserTaxNo?: string(name='purchaser_tax_no'),
        seat?: string(name='seat'),
        seatNo?: string(name='seat_no'),
        serialNumber?: string(name='serial_number', example='30671211200127U123456'),
        taxAmount?: string(name='tax_amount', example='8.26'),
        taxRate?: string(name='tax_rate', example='9%'),
        ticketNo?: string(name='ticket_no', description='取票号', example='784-1111111111'),
        trainNo?: string(name='train_no', description='车次', example='G99'),
      }
    ](name='items'),
    pageNo?: int32(name='page_no', example='1'),
    pageSize?: int32(name='page_size', example='20'),
    totalPage?: int32(name='total_page', example='2'),
    totalSize?: int32(name='total_size', example='30'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model TrainTicketScanQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TrainTicketScanQueryResponseBody(name='body'),
}

/**
 * @summary 查询火车票凭证扫描件
 *
 * @param request TrainTicketScanQueryRequest
 * @param headers TrainTicketScanQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TrainTicketScanQueryResponse
 */
async function trainTicketScanQueryWithOptions(request: TrainTicketScanQueryRequest, headers: TrainTicketScanQueryHeaders, runtime: Util.RuntimeOptions): TrainTicketScanQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billDate)) {
    query['bill_date'] = request.billDate;
  }
  if (!Util.isUnset(request.billId)) {
    query['bill_id'] = request.billId;
  }
  if (!Util.isUnset(request.invoiceSubTaskId)) {
    query['invoice_sub_task_id'] = request.invoiceSubTaskId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.serialNumber)) {
    query['serial_number'] = request.serialNumber;
  }
  if (!Util.isUnset(request.ticketNo)) {
    query['ticket_no'] = request.ticketNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TrainTicketScanQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/scan/v1/train-ticket`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询火车票凭证扫描件
 *
 * @param request TrainTicketScanQueryRequest
 * @return TrainTicketScanQueryResponse
 */
async function trainTicketScanQuery(request: TrainTicketScanQueryRequest): TrainTicketScanQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainTicketScanQueryHeaders{};
  return trainTicketScanQueryWithOptions(request, headers, runtime);
}

model TravelStandardListQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', description='This parameter is required.', example='feth00jqwls'),
}

model TravelStandardListQueryRequest {
  fromGroup?: boolean(name='from_group', example='false'),
  pageNo?: int32(name='page_no', description='This parameter is required.', example='1'),
  pageSize?: int32(name='page_size', description='This parameter is required.', example='10'),
  ruleName?: string(name='rule_name'),
}

model TravelStandardListQueryResponseBody = {
  code?: int32(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    items?: [ 
      {
        mainReserveRule?: {
          openServiceTypeList?: [ string ](name='open_service_type_list'),
          ruleCode?: long(name='rule_code', example='2006516571'),
          ruleDesc?: string(name='rule_desc'),
          ruleId?: long(name='rule_id', example='6516571'),
          ruleName?: string(name='rule_name'),
        }(name='main_reserve_rule'),
        reserveRuleDesc?: [ 
          {
            dataList?: [ 
              {
                key?: string(name='key'),
                value?: string(name='value'),
              }
            ](name='data_list'),
            title?: string(name='title'),
            type?: string(name='type', example='flight'),
          }
        ](name='reserve_rule_desc'),
        scope?: int32(name='scope', example='1'),
      }
    ](name='items'),
    totalSize?: int32(name='total_size', example='30'),
  }(name='module'),
  requestId?: string(name='requestId', example='05F9C201-1B53-5905-94AB-0D7444D8466A'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041aa317070996148671005d0a0b'),
}

model TravelStandardListQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TravelStandardListQueryResponseBody(name='body'),
}

/**
 * @summary 查询差标列表
 *
 * @param request TravelStandardListQueryRequest
 * @param headers TravelStandardListQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TravelStandardListQueryResponse
 */
async function travelStandardListQueryWithOptions(request: TravelStandardListQueryRequest, headers: TravelStandardListQueryHeaders, runtime: Util.RuntimeOptions): TravelStandardListQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.fromGroup)) {
    query['from_group'] = request.fromGroup;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['rule_name'] = request.ruleName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TravelStandardListQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/travel-manage/v1/standards/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询差标列表
 *
 * @param request TravelStandardListQueryRequest
 * @return TravelStandardListQueryResponse
 */
async function travelStandardListQuery(request: TravelStandardListQueryRequest): TravelStandardListQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TravelStandardListQueryHeaders{};
  return travelStandardListQueryWithOptions(request, headers, runtime);
}

model TravelStandardQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TravelStandardQueryRequest {
  fromGroup?: boolean(name='from_group', description='This parameter is required.', example='false'),
  ruleCode?: long(name='rule_code', description='This parameter is required.', example='2006523763'),
  serviceTypeList?: [ string ](name='service_type_list', description='This parameter is required.'),
}

model TravelStandardQueryShrinkRequest {
  fromGroup?: boolean(name='from_group', description='This parameter is required.', example='false'),
  ruleCode?: long(name='rule_code', description='This parameter is required.', example='2006523763'),
  serviceTypeListShrink?: string(name='service_type_list', description='This parameter is required.'),
}

model TravelStandardQueryResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    activatedServiceTypeList?: [ string ](name='activated_service_type_list'),
    reserveRule?: {
      mainReserveRule?: {
        openServiceTypeList?: [ string ](name='open_service_type_list'),
        ruleCode?: long(name='rule_code', example='2006517149'),
        ruleDesc?: string(name='rule_desc'),
        ruleId?: long(name='rule_id', example='6517149'),
        ruleName?: string(name='rule_name'),
      }(name='main_reserve_rule'),
      moduleConfigList?: [ 
        {
          code?: string(name='code', example='FLIGHT_ADVANCE_BUY_DAY'),
          value?: string(name='value', example='3'),
        }
      ](name='module_config_list'),
    }(name='reserve_rule'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210bcc3a16583004579056128d33d7'),
}

model TravelStandardQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TravelStandardQueryResponseBody(name='body'),
}

/**
 * @summary 查询差标详情
 *
 * @param tmpReq TravelStandardQueryRequest
 * @param headers TravelStandardQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TravelStandardQueryResponse
 */
async function travelStandardQueryWithOptions(tmpReq: TravelStandardQueryRequest, headers: TravelStandardQueryHeaders, runtime: Util.RuntimeOptions): TravelStandardQueryResponse {
  Util.validateModel(tmpReq);
  var request = new TravelStandardQueryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.serviceTypeList)) {
    request.serviceTypeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.serviceTypeList, 'service_type_list', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.fromGroup)) {
    query['from_group'] = request.fromGroup;
  }
  if (!Util.isUnset(request.ruleCode)) {
    query['rule_code'] = request.ruleCode;
  }
  if (!Util.isUnset(request.serviceTypeListShrink)) {
    query['service_type_list'] = request.serviceTypeListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TravelStandardQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/travel-manage/v1/standards/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询差标详情
 *
 * @param request TravelStandardQueryRequest
 * @return TravelStandardQueryResponse
 */
async function travelStandardQuery(request: TravelStandardQueryRequest): TravelStandardQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TravelStandardQueryHeaders{};
  return travelStandardQueryWithOptions(request, headers, runtime);
}

model TravelStandardRelateAddHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', description='This parameter is required.', example='feth00jqwls'),
}

model TravelStandardRelateAddRequest {
  addList?: [ 
    {
      entityId?: string(name='entity_id', description='This parameter is required.', example='667104628'),
      entityType?: string(name='entity_type', description='This parameter is required.', example='3'),
    }
  ](name='add_list'),
  fromGroup?: boolean(name='from_group', example='false'),
  ruleId?: long(name='rule_id', description='This parameter is required.', example='6516571'),
}

model TravelStandardRelateAddShrinkRequest {
  addListShrink?: string(name='add_list'),
  fromGroup?: boolean(name='from_group', example='false'),
  ruleId?: long(name='rule_id', description='This parameter is required.', example='6516571'),
}

model TravelStandardRelateAddResponseBody = {
  message?: string(name='message'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  resultCode?: int32(name='resultCode', example='0'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210bcc3a16583004579056128d33d7'),
}

model TravelStandardRelateAddResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TravelStandardRelateAddResponseBody(name='body'),
}

/**
 * @summary 新增差旅标准关联人员实体
 *
 * @param tmpReq TravelStandardRelateAddRequest
 * @param headers TravelStandardRelateAddHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TravelStandardRelateAddResponse
 */
async function travelStandardRelateAddWithOptions(tmpReq: TravelStandardRelateAddRequest, headers: TravelStandardRelateAddHeaders, runtime: Util.RuntimeOptions): TravelStandardRelateAddResponse {
  Util.validateModel(tmpReq);
  var request = new TravelStandardRelateAddShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.addList)) {
    request.addListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.addList, 'add_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.addListShrink)) {
    body['add_list'] = request.addListShrink;
  }
  if (!Util.isUnset(request.fromGroup)) {
    body['from_group'] = request.fromGroup;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['rule_id'] = request.ruleId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TravelStandardRelateAdd',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/travel-manage/v1/standards/add-relate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 新增差旅标准关联人员实体
 *
 * @param request TravelStandardRelateAddRequest
 * @return TravelStandardRelateAddResponse
 */
async function travelStandardRelateAdd(request: TravelStandardRelateAddRequest): TravelStandardRelateAddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TravelStandardRelateAddHeaders{};
  return travelStandardRelateAddWithOptions(request, headers, runtime);
}

model TravelStandardRelateDeleteHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwis'),
}

model TravelStandardRelateDeleteRequest {
  fromGroup?: boolean(name='from_group', example='false'),
  removeList?: [ 
    {
      entityId?: string(name='entity_id', description='This parameter is required.', example='667104628'),
      entityType?: string(name='entity_type', description='This parameter is required.', example='3'),
    }
  ](name='remove_list'),
  ruleId?: long(name='rule_id', description='This parameter is required.', example='6523763'),
}

model TravelStandardRelateDeleteShrinkRequest {
  fromGroup?: boolean(name='from_group', example='false'),
  removeListShrink?: string(name='remove_list'),
  ruleId?: long(name='rule_id', description='This parameter is required.', example='6523763'),
}

model TravelStandardRelateDeleteResponseBody = {
  message?: string(name='message'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  resultCode?: int32(name='resultCode', example='0'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210bcc3a16583004579056128d33d7'),
}

model TravelStandardRelateDeleteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TravelStandardRelateDeleteResponseBody(name='body'),
}

/**
 * @summary 删除差旅标准关联人员实体
 *
 * @param tmpReq TravelStandardRelateDeleteRequest
 * @param headers TravelStandardRelateDeleteHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TravelStandardRelateDeleteResponse
 */
async function travelStandardRelateDeleteWithOptions(tmpReq: TravelStandardRelateDeleteRequest, headers: TravelStandardRelateDeleteHeaders, runtime: Util.RuntimeOptions): TravelStandardRelateDeleteResponse {
  Util.validateModel(tmpReq);
  var request = new TravelStandardRelateDeleteShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.removeList)) {
    request.removeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.removeList, 'remove_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.fromGroup)) {
    body['from_group'] = request.fromGroup;
  }
  if (!Util.isUnset(request.removeListShrink)) {
    body['remove_list'] = request.removeListShrink;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['rule_id'] = request.ruleId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TravelStandardRelateDelete',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/travel-manage/v1/standards/delete-relate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除差旅标准关联人员实体
 *
 * @param request TravelStandardRelateDeleteRequest
 * @return TravelStandardRelateDeleteResponse
 */
async function travelStandardRelateDelete(request: TravelStandardRelateDeleteRequest): TravelStandardRelateDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TravelStandardRelateDeleteHeaders{};
  return travelStandardRelateDeleteWithOptions(request, headers, runtime);
}

model TravelStandardRelateQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', description='This parameter is required.', example='feth00jqwls'),
}

model TravelStandardRelateQueryRequest {
  fromGroup?: boolean(name='from_group', example='false'),
  ruleId?: long(name='rule_id', description='This parameter is required.', example='6516571'),
}

model TravelStandardRelateQueryResponseBody = {
  message?: string(name='message'),
  module?: {
    reserveBindEntityList?: [ 
      {
        entityId?: string(name='entity_id', example='667104628'),
        entityName?: string(name='entity_name'),
        entityType?: string(name='entity_type', example='3'),
      }
    ](name='reserve_bind_entity_list'),
    total?: int32(name='total', example='10'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  resultCode?: int32(name='resultCode', example='0'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210bcc3a16583004579056128d33d7'),
}

model TravelStandardRelateQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TravelStandardRelateQueryResponseBody(name='body'),
}

/**
 * @summary 查询差旅标准关联人员实体
 *
 * @param request TravelStandardRelateQueryRequest
 * @param headers TravelStandardRelateQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TravelStandardRelateQueryResponse
 */
async function travelStandardRelateQueryWithOptions(request: TravelStandardRelateQueryRequest, headers: TravelStandardRelateQueryHeaders, runtime: Util.RuntimeOptions): TravelStandardRelateQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.fromGroup)) {
    query['from_group'] = request.fromGroup;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['rule_id'] = request.ruleId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TravelStandardRelateQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/travel-manage/v1/standards/query-relate`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询差旅标准关联人员实体
 *
 * @param request TravelStandardRelateQueryRequest
 * @return TravelStandardRelateQueryResponse
 */
async function travelStandardRelateQuery(request: TravelStandardRelateQueryRequest): TravelStandardRelateQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TravelStandardRelateQueryHeaders{};
  return travelStandardRelateQueryWithOptions(request, headers, runtime);
}

model TravelStandardScopeSaveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', description='This parameter is required.', example='feth00jqwls'),
}

model TravelStandardScopeSaveRequest {
  fromGroup?: boolean(name='from_group', example='false'),
  ruleId?: long(name='rule_id', description='This parameter is required.', example='6516571'),
  scope?: int32(name='scope', description='This parameter is required.', example='1'),
}

model TravelStandardScopeSaveResponseBody = {
  message?: string(name='message'),
  requestId?: string(name='requestId', example='05F9C201-1B53-5905-94AB-0D7444D8466A'),
  resultCode?: int32(name='resultCode', example='0'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041aa317070996148671005d0a0b'),
}

model TravelStandardScopeSaveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TravelStandardScopeSaveResponseBody(name='body'),
}

/**
 * @summary 更新差旅标准绑定员工类型
 *
 * @param request TravelStandardScopeSaveRequest
 * @param headers TravelStandardScopeSaveHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TravelStandardScopeSaveResponse
 */
async function travelStandardScopeSaveWithOptions(request: TravelStandardScopeSaveRequest, headers: TravelStandardScopeSaveHeaders, runtime: Util.RuntimeOptions): TravelStandardScopeSaveResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.fromGroup)) {
    query['from_group'] = request.fromGroup;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['rule_id'] = request.ruleId;
  }
  if (!Util.isUnset(request.scope)) {
    query['scope'] = request.scope;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TravelStandardScopeSave',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/travel-manage/v1/standards/save-scope`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新差旅标准绑定员工类型
 *
 * @param request TravelStandardScopeSaveRequest
 * @return TravelStandardScopeSaveResponse
 */
async function travelStandardScopeSave(request: TravelStandardScopeSaveRequest): TravelStandardScopeSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TravelStandardScopeSaveHeaders{};
  return travelStandardScopeSaveWithOptions(request, headers, runtime);
}

model TripBusinessInstanceQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model TripBusinessInstanceQueryRequest {
  businessInstanceId?: string(name='business_instance_id', example='12345'),
  thirdBusinessId?: string(name='third_business_id', example='12345'),
  userId?: string(name='user_id', example='thirdpart12138'),
  userName?: string(name='user_name'),
}

model TripBusinessInstanceQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    creator?: string(name='creator'),
    gmtCreate?: long(name='gmt_create', example='1525104000'),
    gmtModified?: long(name='gmt_modified', example='1525104000'),
    status?: string(name='status', example='RUNNING'),
  }(name='module', description='module。'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210bc44416869853114684533da3c2'),
}

model TripBusinessInstanceQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TripBusinessInstanceQueryResponseBody(name='body'),
}

/**
 * @summary 查询业务流程
 *
 * @param request TripBusinessInstanceQueryRequest
 * @param headers TripBusinessInstanceQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TripBusinessInstanceQueryResponse
 */
async function tripBusinessInstanceQueryWithOptions(request: TripBusinessInstanceQueryRequest, headers: TripBusinessInstanceQueryHeaders, runtime: Util.RuntimeOptions): TripBusinessInstanceQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.businessInstanceId)) {
    query['business_instance_id'] = request.businessInstanceId;
  }
  if (!Util.isUnset(request.thirdBusinessId)) {
    query['third_business_id'] = request.thirdBusinessId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    query['user_name'] = request.userName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TripBusinessInstanceQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/business`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询业务流程
 *
 * @param request TripBusinessInstanceQueryRequest
 * @return TripBusinessInstanceQueryResponse
 */
async function tripBusinessInstanceQuery(request: TripBusinessInstanceQueryRequest): TripBusinessInstanceQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TripBusinessInstanceQueryHeaders{};
  return tripBusinessInstanceQueryWithOptions(request, headers, runtime);
}

model TripCCInfoQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TripCCInfoQueryRequest {
  businessInstanceId?: string(name='business_instance_id', example='2024060710160003300008684'),
  nodeId?: string(name='node_id', example='458003'),
  thirdBusinessId?: string(name='third_business_id', example='2024060710160003300008684'),
}

model TripCCInfoQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: [ 
    {
      notifier?: string(name='notifier', example='user_12138'),
      notifyStartTime?: long(name='notify_start_time', example='1525104000'),
    }
  ](name='module', description='module。'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model TripCCInfoQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TripCCInfoQueryResponseBody(name='body'),
}

/**
 * @summary 查询抄送信息
 *
 * @param request TripCCInfoQueryRequest
 * @param headers TripCCInfoQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TripCCInfoQueryResponse
 */
async function tripCCInfoQueryWithOptions(request: TripCCInfoQueryRequest, headers: TripCCInfoQueryHeaders, runtime: Util.RuntimeOptions): TripCCInfoQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.businessInstanceId)) {
    query['business_instance_id'] = request.businessInstanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['node_id'] = request.nodeId;
  }
  if (!Util.isUnset(request.thirdBusinessId)) {
    query['third_business_id'] = request.thirdBusinessId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TripCCInfoQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/cc`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询抄送信息
 *
 * @param request TripCCInfoQueryRequest
 * @return TripCCInfoQueryResponse
 */
async function tripCCInfoQuery(request: TripCCInfoQueryRequest): TripCCInfoQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TripCCInfoQueryHeaders{};
  return tripCCInfoQueryWithOptions(request, headers, runtime);
}

model TripTaskQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TripTaskQueryRequest {
  businessInstanceId?: string(name='business_instance_id', example='12345'),
  thirdBusinessId?: string(name='third_business_id', example='12345'),
  userId?: string(name='user_id', example='thirdpart12138'),
  userName?: string(name='user_name'),
}

model TripTaskQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    needRefresh?: boolean(name='needRefresh', example='true'),
    recordTasks?: [ 
      {
        actioner?: string(name='actioner', example='123'),
        attributes?: string(name='attributes'),
        gmtCreate?: long(name='gmt_create', example='1525104000'),
        gmtFinished?: long(name='gmt_finished', example='1525104000'),
        id?: long(name='id', example='34360'),
        nodeId?: string(name='node_id', example='575003'),
        outResult?: string(name='out_result', example='agree'),
        owner?: string(name='owner', example='123'),
        status?: string(name='status', example='RUNNING'),
      }
    ](name='record_tasks'),
    runningTasks?: [ 
      {
        actioner?: string(name='actioner', example='123'),
        attributes?: string(name='attributes'),
        gmtCreate?: long(name='gmt_create', example='1525104000'),
        gmtFinished?: long(name='gmt_finished', example='1525104000'),
        id?: long(name='id', example='34360'),
        nodeId?: string(name='node_id', example='575003'),
        outResult?: string(name='out_result', example='agree'),
        owner?: string(name='owner', example='123'),
        status?: string(name='status', example='RUNNING'),
      }
    ](name='running_tasks'),
  }(name='module', description='module。'),
  requestId?: string(name='requestId', example='2FB0D7A8-BA41-5D04-BEFC-CADA5481AC53'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model TripTaskQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TripTaskQueryResponseBody(name='body'),
}

/**
 * @summary 查询审批任务列表
 *
 * @param request TripTaskQueryRequest
 * @param headers TripTaskQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TripTaskQueryResponse
 */
async function tripTaskQueryWithOptions(request: TripTaskQueryRequest, headers: TripTaskQueryHeaders, runtime: Util.RuntimeOptions): TripTaskQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.businessInstanceId)) {
    query['business_instance_id'] = request.businessInstanceId;
  }
  if (!Util.isUnset(request.thirdBusinessId)) {
    query['third_business_id'] = request.thirdBusinessId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    query['user_name'] = request.userName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TripTaskQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/tasks`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询审批任务列表
 *
 * @param request TripTaskQueryRequest
 * @return TripTaskQueryResponse
 */
async function tripTaskQuery(request: TripTaskQueryRequest): TripTaskQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TripTaskQueryHeaders{};
  return tripTaskQueryWithOptions(request, headers, runtime);
}

model UpdateCustomRoleHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwis'),
}

model UpdateCustomRoleRequest {
  roleId?: string(name='role_id', description='This parameter is required.', example='12345'),
  roleName?: string(name='role_name', description='This parameter is required.'),
}

model UpdateCustomRoleResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210bcc3a16583004579056128d33d7'),
}

model UpdateCustomRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCustomRoleResponseBody(name='body'),
}

/**
 * @summary 更新企业自定义角色
 *
 * @param request UpdateCustomRoleRequest
 * @param headers UpdateCustomRoleHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateCustomRoleResponse
 */
async function updateCustomRoleWithOptions(request: UpdateCustomRoleRequest, headers: UpdateCustomRoleHeaders, runtime: Util.RuntimeOptions): UpdateCustomRoleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.roleId)) {
    body['role_id'] = request.roleId;
  }
  if (!Util.isUnset(request.roleName)) {
    body['role_name'] = request.roleName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCustomRole',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/role/v1/customRoles/update`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新企业自定义角色
 *
 * @param request UpdateCustomRoleRequest
 * @return UpdateCustomRoleResponse
 */
async function updateCustomRole(request: UpdateCustomRoleRequest): UpdateCustomRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateCustomRoleHeaders{};
  return updateCustomRoleWithOptions(request, headers, runtime);
}

model UpdateDepartmentHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwis'),
}

model UpdateDepartmentRequest {
  deptName?: string(name='dept_name', description='This parameter is required.'),
  managerEmployeeIdList?: [ string ](name='manager_employee_id_list'),
  outDeptId?: string(name='out_dept_id', description='This parameter is required.', example='dept123'),
  outDeptPid?: string(name='out_dept_pid', example='dept456'),
}

model UpdateDepartmentShrinkRequest {
  deptName?: string(name='dept_name', description='This parameter is required.'),
  managerEmployeeIdListShrink?: string(name='manager_employee_id_list'),
  outDeptId?: string(name='out_dept_id', description='This parameter is required.', example='dept123'),
  outDeptPid?: string(name='out_dept_pid', example='dept456'),
}

model UpdateDepartmentResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model UpdateDepartmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDepartmentResponseBody(name='body'),
}

/**
 * @summary 修改企业部门
 *
 * @param tmpReq UpdateDepartmentRequest
 * @param headers UpdateDepartmentHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDepartmentResponse
 */
async function updateDepartmentWithOptions(tmpReq: UpdateDepartmentRequest, headers: UpdateDepartmentHeaders, runtime: Util.RuntimeOptions): UpdateDepartmentResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDepartmentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.managerEmployeeIdList)) {
    request.managerEmployeeIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.managerEmployeeIdList, 'manager_employee_id_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deptName)) {
    body['dept_name'] = request.deptName;
  }
  if (!Util.isUnset(request.managerEmployeeIdListShrink)) {
    body['manager_employee_id_list'] = request.managerEmployeeIdListShrink;
  }
  if (!Util.isUnset(request.outDeptId)) {
    body['out_dept_id'] = request.outDeptId;
  }
  if (!Util.isUnset(request.outDeptPid)) {
    body['out_dept_pid'] = request.outDeptPid;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDepartment',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/department/v2/update`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改企业部门
 *
 * @param request UpdateDepartmentRequest
 * @return UpdateDepartmentResponse
 */
async function updateDepartment(request: UpdateDepartmentRequest): UpdateDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateDepartmentHeaders{};
  return updateDepartmentWithOptions(request, headers, runtime);
}

model UpdateEmployeeHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model UpdateEmployeeRequest {
  accountEmail?: string(name='account_email'),
  accountPhone?: string(name='account_phone'),
  attribute?: string(name='attribute'),
  avatar?: string(name='avatar', example='https://static-legacy.dingtalk.com/media/lADPF8XMoxJeUkbNA2LNA5s_923_866.jpg'),
  baseCityCodeList?: [ string ](name='base_city_code_list'),
  baseLocationList?: [ 
    {
      code?: string(name='code'),
      level?: string(name='level'),
    }
  ](name='base_location_list'),
  birthday?: string(name='birthday', example='2000-01-02'),
  certList?: [ 
    {
      birthday?: string(name='birthday', example='2000-01-02'),
      certExpiredTime?: string(name='cert_expired_time', example='2099-03-12'),
      certNation?: string(name='cert_nation', example='CN'),
      certNo?: string(name='cert_no', example='123'),
      certType?: int32(name='cert_type', example='0'),
      gender?: string(name='gender', example='F'),
      nationality?: string(name='nationality', example='CN'),
      phone?: string(name='phone', example='13111111111'),
      realName?: string(name='real_name'),
      realNameEn?: string(name='real_name_en', example='John/Wilson'),
    }
  ](name='cert_list'),
  customRoleCodeList?: [ string ](name='custom_role_code_list'),
  email?: string(name='email', example='123@163.com'),
  gender?: string(name='gender', example='F'),
  isAdmin?: boolean(name='is_admin', example='false'),
  isBoss?: boolean(name='is_boss', example='false'),
  isDeptLeader?: boolean(name='is_dept_leader', example='false'),
  jobNo?: string(name='job_no', example='1001'),
  managerUserId?: string(name='manager_user_id', example='user456'),
  outDeptIdList?: [ string ](name='out_dept_id_list'),
  phone?: string(name='phone', example='13111111111'),
  positionLevel?: string(name='position_level', example='M4'),
  realName?: string(name='real_name'),
  realNameEn?: string(name='real_name_en', example='John/Wilson'),
  userId?: string(name='user_id', description='This parameter is required.', example='user123'),
  userNick?: string(name='user_nick'),
}

model UpdateEmployeeShrinkRequest {
  accountEmail?: string(name='account_email'),
  accountPhone?: string(name='account_phone'),
  attribute?: string(name='attribute'),
  avatar?: string(name='avatar', example='https://static-legacy.dingtalk.com/media/lADPF8XMoxJeUkbNA2LNA5s_923_866.jpg'),
  baseCityCodeListShrink?: string(name='base_city_code_list'),
  baseLocationListShrink?: string(name='base_location_list'),
  birthday?: string(name='birthday', example='2000-01-02'),
  certListShrink?: string(name='cert_list'),
  customRoleCodeListShrink?: string(name='custom_role_code_list'),
  email?: string(name='email', example='123@163.com'),
  gender?: string(name='gender', example='F'),
  isAdmin?: boolean(name='is_admin', example='false'),
  isBoss?: boolean(name='is_boss', example='false'),
  isDeptLeader?: boolean(name='is_dept_leader', example='false'),
  jobNo?: string(name='job_no', example='1001'),
  managerUserId?: string(name='manager_user_id', example='user456'),
  outDeptIdListShrink?: string(name='out_dept_id_list'),
  phone?: string(name='phone', example='13111111111'),
  positionLevel?: string(name='position_level', example='M4'),
  realName?: string(name='real_name'),
  realNameEn?: string(name='real_name_en', example='John/Wilson'),
  userId?: string(name='user_id', description='This parameter is required.', example='user123'),
  userNick?: string(name='user_nick'),
}

model UpdateEmployeeResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model UpdateEmployeeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEmployeeResponseBody(name='body'),
}

/**
 * @summary 更新员工信息
 *
 * @param tmpReq UpdateEmployeeRequest
 * @param headers UpdateEmployeeHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateEmployeeResponse
 */
async function updateEmployeeWithOptions(tmpReq: UpdateEmployeeRequest, headers: UpdateEmployeeHeaders, runtime: Util.RuntimeOptions): UpdateEmployeeResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateEmployeeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.baseCityCodeList)) {
    request.baseCityCodeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.baseCityCodeList, 'base_city_code_list', 'json');
  }
  if (!Util.isUnset(tmpReq.baseLocationList)) {
    request.baseLocationListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.baseLocationList, 'base_location_list', 'json');
  }
  if (!Util.isUnset(tmpReq.certList)) {
    request.certListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.certList, 'cert_list', 'json');
  }
  if (!Util.isUnset(tmpReq.customRoleCodeList)) {
    request.customRoleCodeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.customRoleCodeList, 'custom_role_code_list', 'json');
  }
  if (!Util.isUnset(tmpReq.outDeptIdList)) {
    request.outDeptIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.outDeptIdList, 'out_dept_id_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.accountEmail)) {
    body['account_email'] = request.accountEmail;
  }
  if (!Util.isUnset(request.accountPhone)) {
    body['account_phone'] = request.accountPhone;
  }
  if (!Util.isUnset(request.attribute)) {
    body['attribute'] = request.attribute;
  }
  if (!Util.isUnset(request.avatar)) {
    body['avatar'] = request.avatar;
  }
  if (!Util.isUnset(request.baseCityCodeListShrink)) {
    body['base_city_code_list'] = request.baseCityCodeListShrink;
  }
  if (!Util.isUnset(request.baseLocationListShrink)) {
    body['base_location_list'] = request.baseLocationListShrink;
  }
  if (!Util.isUnset(request.birthday)) {
    body['birthday'] = request.birthday;
  }
  if (!Util.isUnset(request.certListShrink)) {
    body['cert_list'] = request.certListShrink;
  }
  if (!Util.isUnset(request.customRoleCodeListShrink)) {
    body['custom_role_code_list'] = request.customRoleCodeListShrink;
  }
  if (!Util.isUnset(request.email)) {
    body['email'] = request.email;
  }
  if (!Util.isUnset(request.gender)) {
    body['gender'] = request.gender;
  }
  if (!Util.isUnset(request.isAdmin)) {
    body['is_admin'] = request.isAdmin;
  }
  if (!Util.isUnset(request.isBoss)) {
    body['is_boss'] = request.isBoss;
  }
  if (!Util.isUnset(request.isDeptLeader)) {
    body['is_dept_leader'] = request.isDeptLeader;
  }
  if (!Util.isUnset(request.jobNo)) {
    body['job_no'] = request.jobNo;
  }
  if (!Util.isUnset(request.managerUserId)) {
    body['manager_user_id'] = request.managerUserId;
  }
  if (!Util.isUnset(request.outDeptIdListShrink)) {
    body['out_dept_id_list'] = request.outDeptIdListShrink;
  }
  if (!Util.isUnset(request.phone)) {
    body['phone'] = request.phone;
  }
  if (!Util.isUnset(request.positionLevel)) {
    body['position_level'] = request.positionLevel;
  }
  if (!Util.isUnset(request.realName)) {
    body['real_name'] = request.realName;
  }
  if (!Util.isUnset(request.realNameEn)) {
    body['real_name_en'] = request.realNameEn;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userNick)) {
    body['user_nick'] = request.userNick;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEmployee',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/employee/v2/update`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新员工信息
 *
 * @param request UpdateEmployeeRequest
 * @return UpdateEmployeeResponse
 */
async function updateEmployee(request: UpdateEmployeeRequest): UpdateEmployeeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateEmployeeHeaders{};
  return updateEmployeeWithOptions(request, headers, runtime);
}

model UpdateEmployeeLeaveStatusHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model UpdateEmployeeLeaveStatusRequest {
  isLeave?: boolean(name='is_leave', description='This parameter is required.', example='true'),
  userId?: string(name='user_id', description='This parameter is required.', example='user123'),
}

model UpdateEmployeeLeaveStatusResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model UpdateEmployeeLeaveStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEmployeeLeaveStatusResponseBody(name='body'),
}

/**
 * @summary 更新员工在职状态
 *
 * @param request UpdateEmployeeLeaveStatusRequest
 * @param headers UpdateEmployeeLeaveStatusHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateEmployeeLeaveStatusResponse
 */
async function updateEmployeeLeaveStatusWithOptions(request: UpdateEmployeeLeaveStatusRequest, headers: UpdateEmployeeLeaveStatusHeaders, runtime: Util.RuntimeOptions): UpdateEmployeeLeaveStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.isLeave)) {
    body['is_leave'] = request.isLeave;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEmployeeLeaveStatus',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/employee/v2/updateLeaveStatus`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新员工在职状态
 *
 * @param request UpdateEmployeeLeaveStatusRequest
 * @return UpdateEmployeeLeaveStatusResponse
 */
async function updateEmployeeLeaveStatus(request: UpdateEmployeeLeaveStatusRequest): UpdateEmployeeLeaveStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateEmployeeLeaveStatusHeaders{};
  return updateEmployeeLeaveStatusWithOptions(request, headers, runtime);
}

model UserQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model UserQueryRequest {
  modifiedTimeGreaterOrEqualThan?: string(name='modified_time_greater_or_equal_than', example='2021-06-02 00:00:00'),
  pageSize?: int32(name='page_size', example='10'),
  pageToken?: string(name='page_token', example='9YN+jxa7PcxbNUTISeKjEw=='),
  thirdPartJobNo?: string(name='third_part_job_no', example='12345'),
}

model UserQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    hasMore?: boolean(name='has_more', example='true'),
    items?: [ 
      {
        employeeNick?: string(name='employee_nick'),
        leaveStatus?: int32(name='leave_status', example='0'),
        thirdPartEmployeeId?: string(name='third_part_employee_id', example='123'),
        thirdPartJobNo?: string(name='third_part_job_no', example='001'),
      }
    ](name='items'),
    pageToken?: string(name='page_token', example='9YN+jxa7PcxbNUTISeKjEw=='),
    total?: long(name='total', example='0'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='2f624a6316366024344424669e3279'),
}

model UserQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UserQueryResponseBody(name='body'),
}

/**
 * @summary 人员查询
 *
 * @param request UserQueryRequest
 * @param headers UserQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UserQueryResponse
 */
async function userQueryWithOptions(request: UserQueryRequest, headers: UserQueryHeaders, runtime: Util.RuntimeOptions): UserQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.modifiedTimeGreaterOrEqualThan)) {
    query['modified_time_greater_or_equal_than'] = request.modifiedTimeGreaterOrEqualThan;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.pageToken)) {
    query['page_token'] = request.pageToken;
  }
  if (!Util.isUnset(request.thirdPartJobNo)) {
    query['third_part_job_no'] = request.thirdPartJobNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UserQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/user/v1/user`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 人员查询
 *
 * @param request UserQueryRequest
 * @return UserQueryResponse
 */
async function userQuery(request: UserQueryRequest): UserQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UserQueryHeaders{};
  return userQueryWithOptions(request, headers, runtime);
}

model VasBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model VasBillSettlementQueryRequest {
  billBatch?: string(name='bill_batch', example='20250501'),
  cooperatorId?: string(name='cooperator_id', example='cooperator_alibtrip'),
  orderId?: long(name='order_id', example='12345'),
  pageNo?: int32(name='page_no', description='This parameter is required.', example='1'),
  pageSize?: int32(name='page_size', description='This parameter is required.', example='30'),
  periodEnd?: string(name='period_end', example='2022-07-01'),
  periodStart?: string(name='period_start', example='2021-10-01'),
  scrollId?: string(name='scroll_id', example='CAESBgoEIgIIABgAIhkKFwMSAAAAMUw4MDAwMDAwMDA3MjdkMzgw'),
  scrollMod?: boolean(name='scroll_mod', example='true'),
}

model VasBillSettlementQueryResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='ok'),
  module?: {
    category?: int32(name='category', example='21'),
    corpId?: string(name='corp_id'),
    items?: [ 
      {
        adjustTime?: string(name='adjust_time', example='2025-01-01 00:00:00'),
        alipayId?: string(name='alipay_id', example='123aaa'),
        alipayTradeNo?: string(name='alipay_trade_no', example='124'),
        applyArrCityCode?: string(name='apply_arr_city_code', example='123'),
        applyArrCityName?: string(name='apply_arr_city_name'),
        applyDepCityCode?: string(name='apply_dep_city_code', example='123'),
        applyDepCityName?: string(name='apply_dep_city_name'),
        applyExtendField?: string(name='apply_extend_field'),
        applyId?: string(name='apply_id', example='1424070910031252025'),
        belongBusiness?: string(name='belong_business'),
        billRecordTime?: string(name='bill_record_time', example='2023-01-01 00:00:00'),
        billingEntity?: string(name='billing_entity'),
        bookMode?: string(name='book_mode'),
        bookTime?: string(name='book_time', example='2023-01-01 00:00:00'),
        bookerId?: string(name='booker_id', example='123'),
        bookerJobNo?: string(name='booker_job_no', example='zs123'),
        bookerName?: string(name='booker_name'),
        capitalDirection?: string(name='capital_direction'),
        cascadeDepartment?: string(name='cascade_department'),
        categoryDesc?: string(name='category_desc'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number', example='cs1'),
        costDepartment?: string(name='cost_department', example='code1'),
        department?: string(name='department'),
        departmentId?: string(name='department_id', example='1112'),
        feeType?: string(name='fee_type'),
        feeTypeDesc?: string(name='fee_type_desc'),
        index?: string(name='index', example='1'),
        invoiceTitle?: string(name='invoice_title'),
        mappingCompanyCode?: string(name='mapping_company_code', example='q1'),
        orderId?: string(name='order_id', example='1007025201876066223'),
        orderPrice?: double(name='order_price', example='100.0'),
        orderStatusDesc?: string(name='order_status_desc'),
        overApplyId?: string(name='over_apply_id', example='123'),
        paymentDepartmentId?: string(name='payment_department_id', example='123'),
        paymentDepartmentName?: string(name='payment_department_name'),
        primaryId?: long(name='primary_id', example='87687788'),
        processorOaCode?: string(name='processor_oa_code', example='www123'),
        productCount?: int32(name='product_count', example='1'),
        productId?: string(name='product_id', example='111'),
        productName?: string(name='product_name'),
        projectCode?: string(name='project_code', example='acs'),
        projectName?: string(name='project_name'),
        promotionFee?: double(name='promotion_fee', example='0.0'),
        purchaseOrderId?: string(name='purchase_order_id', example='111224324'),
        remark?: string(name='remark'),
        settleTypeDesc?: string(name='settle_type_desc'),
        settlementFee?: double(name='settlement_fee', example='110.0'),
        settlementGrantFee?: double(name='settlement_grant_fee', example='0.0'),
        settlementTime?: string(name='settlement_time', example='2023-01-01 00:00:00'),
        settlementType?: string(name='settlement_type'),
        specification?: string(name='specification'),
        status?: int32(name='status', example='2'),
        statusDesc?: string(name='status_desc'),
        subOrderId?: string(name='sub_order_id', example='185025497'),
        taxRate?: string(name='tax_rate', example='9%'),
        thirdInvoiceId?: string(name='third_invoice_id', example='cs2'),
        thirdItineraryId?: string(name='third_itinerary_id', example='11'),
        tradeActionDesc?: string(name='trade_action_desc'),
        tradeRemark?: string(name='trade_remark'),
        travelerId?: string(name='traveler_id', example='254'),
        travelerJobNo?: string(name='traveler_job_no', example='A1234'),
        travelerMemberType?: string(name='traveler_member_type'),
        travelerMemberTypeName?: string(name='traveler_member_type_name'),
        travelerName?: string(name='traveler_name'),
        voucherType?: int32(name='voucher_type', example='1'),
        voucherTypeDesc?: string(name='voucher_type_desc'),
      }
    ](name='items'),
    periodEnd?: string(name='period_end', example='2022-07-02'),
    periodStart?: string(name='period_start', example='2022-07-01'),
    scrollId?: string(name='scroll_id', example='CAESBgoEIgIIABgAIhkKFwMSAAAAMUw4MDAwMDAwMDA2ZTFjZTNi'),
    totalSize?: long(name='total_size', example='30'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='trace_id', example='3b52152017470153218107062d0096'),
}

model VasBillSettlementQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VasBillSettlementQueryResponseBody(name='body'),
}

/**
 * @summary 查询增值服务记账数据
 *
 * @param request VasBillSettlementQueryRequest
 * @param headers VasBillSettlementQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return VasBillSettlementQueryResponse
 */
async function vasBillSettlementQueryWithOptions(request: VasBillSettlementQueryRequest, headers: VasBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): VasBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billBatch)) {
    query['bill_batch'] = request.billBatch;
  }
  if (!Util.isUnset(request.cooperatorId)) {
    query['cooperator_id'] = request.cooperatorId;
  }
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }
  if (!Util.isUnset(request.scrollId)) {
    query['scroll_id'] = request.scrollId;
  }
  if (!Util.isUnset(request.scrollMod)) {
    query['scroll_mod'] = request.scrollMod;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VasBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/vas/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询增值服务记账数据
 *
 * @param request VasBillSettlementQueryRequest
 * @return VasBillSettlementQueryResponse
 */
async function vasBillSettlementQuery(request: VasBillSettlementQueryRequest): VasBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new VasBillSettlementQueryHeaders{};
  return vasBillSettlementQueryWithOptions(request, headers, runtime);
}

model VatInvoiceScanQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model VatInvoiceScanQueryRequest {
  billDate?: string(name='bill_date', description='This parameter is required.', example='2022-12-01'),
  billId?: long(name='bill_id', example='123'),
  invoiceSubTaskId?: long(name='invoice_sub_task_id', example='456'),
  pageNo?: int32(name='page_no', example='1'),
  pageSize?: int32(name='page_size', example='20'),
}

model VatInvoiceScanQueryResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    items?: [ 
      {
        amountWithTax?: string(name='amount_with_tax', example='20'),
        amountWithoutTax?: string(name='amount_without_tax', example='18.87'),
        billDate?: string(name='bill_date', example='2022-12-01'),
        checkCode?: string(name='check_code', example='07122942791187744475'),
        drawer?: string(name='drawer'),
        id?: string(name='id', example='60'),
        invoiceCode?: string(name='invoice_code', example='3300111303'),
        invoiceDay?: string(name='invoice_day', example='2022-12-01'),
        invoiceDetail?: string(name='invoice_detail'),
        invoiceDetails?: [ 
          {
            amount?: string(name='amount', example='75.21'),
            index?: string(name='index', description='行号', example='0'),
            itemName?: string(name='item_name'),
            quantity?: string(name='quantity', example='1'),
            specification?: string(name='specification', example='66PT11230069'),
            tax?: string(name='tax', example='12.79'),
            taxRate?: string(name='tax_rate', example='17%'),
            unit?: string(name='unit'),
            unitPrice?: string(name='unit_price', example='75.21'),
          }
        ](name='invoice_details'),
        invoiceLocation?: string(name='invoice_location'),
        invoiceNo?: string(name='invoice_no', example='24021111'),
        invoiceSubTaskId?: long(name='invoice_sub_task_id', example='123'),
        invoiceType?: int32(name='invoice_type', example='2'),
        invoiceTypeDesc?: string(name='invoice_type_desc'),
        machineCode?: string(name='machine_code', description='机器码', example='661619906841'),
        ofdOssUrl?: string(name='ofd_oss_url'),
        ossUrl?: string(name='oss_url', example='https://www.testurl.com'),
        passwordArea?: string(name='password_area', example='<87*>>53>5023>-446>/4+83/5* *>5/81<75/1931>4>>'),
        pdfOssUrl?: string(name='pdf_oss_url'),
        purchaserBankAccountInfo?: string(name='purchaser_bank_account_info'),
        purchaserContactInfo?: string(name='purchaser_contact_info'),
        purchaserName?: string(name='purchaser_name'),
        purchaserTaxNo?: string(name='purchaser_tax_no', example='91441111111111111S'),
        recipient?: string(name='recipient'),
        remarks?: string(name='remarks'),
        reviewer?: string(name='reviewer'),
        sellerBankAccountInfo?: string(name='seller_bank_account_info'),
        sellerContactInfo?: string(name='seller_contact_info'),
        sellerName?: string(name='seller_name'),
        sellerTaxNo?: string(name='seller_tax_no', example='91441111111111111N'),
        smartCheckCode?: string(name='smart_check_code', example='4475'),
        taxAmount?: string(name='tax_amount', example='1.13'),
        taxRate?: string(name='tax_rate', example='6%'),
        totalAmountInWords?: string(name='total_amount_in_words'),
        xmlOssUrl?: string(name='xml_oss_url'),
      }
    ](name='items'),
    pageNo?: int32(name='page_no', example='1'),
    pageSize?: int32(name='page_size', example='20'),
    totalPage?: int32(name='total_page', example='2'),
    totalSize?: int32(name='total_size', example='30'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210e842b16611337974412836dae27'),
}

model VatInvoiceScanQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VatInvoiceScanQueryResponseBody(name='body'),
}

/**
 * @summary 查询增值税发票扫描件
 *
 * @param request VatInvoiceScanQueryRequest
 * @param headers VatInvoiceScanQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return VatInvoiceScanQueryResponse
 */
async function vatInvoiceScanQueryWithOptions(request: VatInvoiceScanQueryRequest, headers: VatInvoiceScanQueryHeaders, runtime: Util.RuntimeOptions): VatInvoiceScanQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billDate)) {
    query['bill_date'] = request.billDate;
  }
  if (!Util.isUnset(request.billId)) {
    query['bill_id'] = request.billId;
  }
  if (!Util.isUnset(request.invoiceSubTaskId)) {
    query['invoice_sub_task_id'] = request.invoiceSubTaskId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VatInvoiceScanQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/scan/v1/vat-invoice`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询增值税发票扫描件
 *
 * @param request VatInvoiceScanQueryRequest
 * @return VatInvoiceScanQueryResponse
 */
async function vatInvoiceScanQuery(request: VatInvoiceScanQueryRequest): VatInvoiceScanQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new VatInvoiceScanQueryHeaders{};
  return vatInvoiceScanQueryWithOptions(request, headers, runtime);
}

model WaitApplyInvoiceTaskDetailQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model WaitApplyInvoiceTaskDetailQueryRequest {
  billDate?: string(name='bill_date', description='This parameter is required.', example='2022-12-01'),
}

model WaitApplyInvoiceTaskDetailQueryResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: [ 
    {
      contact?: string(name='contact'),
      email?: string(name='email'),
      flightInvoiceFee?: string(name='flight_invoice_fee', example='0'),
      fuPointInvoiceFee?: string(name='fu_point_invoice_fee', example='3.12'),
      hotelNormalInvoiceFee?: string(name='hotel_normal_invoice_fee', example='0'),
      hotelSpecialInvoiceFee?: string(name='hotel_special_invoice_fee', example='100'),
      internationalFlightInvoiceFee?: string(name='international_flight_invoice_fee', example='0'),
      internationalHotelInvoiceFee?: string(name='international_hotel_invoice_fee'),
      invoiceThirdPartId?: string(name='invoice_third_part_id', example='123'),
      invoiceTitle?: string(name='invoice_title'),
      mailAddress?: string(name='mail_address'),
      mailCity?: string(name='mail_city'),
      mailFullAddress?: string(name='mail_full_address'),
      mailProvince?: string(name='mail_province'),
      mealNormalInvoiceFee?: string(name='meal_normal_invoice_fee'),
      penaltyFee?: string(name='penalty_fee', example='0'),
      remark?: string(name='remark'),
      serviceFee?: string(name='service_fee', example='1.02'),
      telephone?: string(name='telephone', example='1234567890'),
      trainAccelerationPackageInvoiceFee?: string(name='train_acceleration_package_invoice_fee'),
      trainInvoiceFee?: string(name='train_invoice_fee', example='0'),
      vacationNormalInvoiceFee?: string(name='vacation_normal_invoice_fee'),
      vasMallSpecialInvoiceFee?: string(name='vas_mall_special_invoice_fee'),
      vehicleInvoiceFee?: string(name='vehicle_invoice_fee', example='100'),
      vehicleNormalInvoiceFee?: string(name='vehicle_normal_invoice_fee'),
    }
  ](name='module'),
  requestId?: string(name='requestId', description='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210f079e16603757182131635d866a'),
}

model WaitApplyInvoiceTaskDetailQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: WaitApplyInvoiceTaskDetailQueryResponseBody(name='body'),
}

/**
 * @summary 查询账期待申请的发票数据
 *
 * @param request WaitApplyInvoiceTaskDetailQueryRequest
 * @param headers WaitApplyInvoiceTaskDetailQueryHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return WaitApplyInvoiceTaskDetailQueryResponse
 */
async function waitApplyInvoiceTaskDetailQueryWithOptions(request: WaitApplyInvoiceTaskDetailQueryRequest, headers: WaitApplyInvoiceTaskDetailQueryHeaders, runtime: Util.RuntimeOptions): WaitApplyInvoiceTaskDetailQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billDate)) {
    query['bill_date'] = request.billDate;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'WaitApplyInvoiceTaskDetailQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/wait-apply-task`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询账期待申请的发票数据
 *
 * @param request WaitApplyInvoiceTaskDetailQueryRequest
 * @return WaitApplyInvoiceTaskDetailQueryResponse
 */
async function waitApplyInvoiceTaskDetailQuery(request: WaitApplyInvoiceTaskDetailQueryRequest): WaitApplyInvoiceTaskDetailQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new WaitApplyInvoiceTaskDetailQueryHeaders{};
  return waitApplyInvoiceTaskDetailQueryWithOptions(request, headers, runtime);
}

