/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('btripopen', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AccessTokenRequest {
  appKey?: string(name='app_key'),
  appSecret?: string(name='app_secret'),
}

model AccessTokenResponseBody = {
  code?: string(name='code'),
  data?: {
    expire?: long(name='expire'),
    token?: string(name='token'),
  }(name='data'),
  message?: string(name='message'),
  module?: {
    expire?: long(name='expire'),
    start?: long(name='start'),
    token?: string(name='token'),
  }(name='module'),
  requestId?: string(name='requestId'),
  traceId?: string(name='traceId'),
}

model AccessTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AccessTokenResponseBody(name='body'),
}

async function accessToken(request: AccessTokenRequest): AccessTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return accessTokenWithOptions(request, headers, runtime);
}

async function accessTokenWithOptions(request: AccessTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AccessTokenResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.appKey)) {
    query['app_key'] = request.appKey;
  }
  if (!Util.isUnset(request.appSecret)) {
    query['app_secret'] = request.appSecret;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AccessToken',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/btrip-open-auth/v1/access-token/action/take`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model AddressGetHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model AddressGetRequest {
  actionType?: int32(name='action_type'),
  itineraryId?: string(name='itinerary_id'),
  phone?: string(name='phone'),
  type?: int32(name='type'),
  userId?: string(name='user_id'),
}

model AddressGetResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    url?: string(name='url'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model AddressGetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddressGetResponseBody(name='body'),
}

async function addressGet(request: AddressGetRequest): AddressGetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddressGetHeaders{};
  return addressGetWithOptions(request, headers, runtime);
}

async function addressGetWithOptions(request: AddressGetRequest, headers: AddressGetHeaders, runtime: Util.RuntimeOptions): AddressGetResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.actionType)) {
    query['action_type'] = request.actionType;
  }
  if (!Util.isUnset(request.itineraryId)) {
    query['itinerary_id'] = request.itineraryId;
  }
  if (!Util.isUnset(request.phone)) {
    query['phone'] = request.phone;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddressGet',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/open/v1/address`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model AirportSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model AirportSearchRequest {
  keyword?: string(name='keyword'),
  type?: int32(name='type'),
}

model AirportSearchResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    cities?: [ 
      {
        code?: string(name='code'),
        distance?: int32(name='distance'),
        name?: string(name='name'),
        travelName?: string(name='travel_name'),
      }
    ](name='cities'),
    nearby?: boolean(name='nearby'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model AirportSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AirportSearchResponseBody(name='body'),
}

async function airportSearch(request: AirportSearchRequest): AirportSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AirportSearchHeaders{};
  return airportSearchWithOptions(request, headers, runtime);
}

async function airportSearchWithOptions(request: AirportSearchRequest, headers: AirportSearchHeaders, runtime: Util.RuntimeOptions): AirportSearchResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AirportSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/city/v1/airport`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model AllBaseCityInfoQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripAccessToken?: string(name='x-acs-btrip-access-token'),
}

model AllBaseCityInfoQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    allCityBaseInfoList?: [ 
      {
        adcode?: string(name='adcode'),
        cityCode?: string(name='city_code'),
        cityLevel?: string(name='city_level'),
        cityName?: string(name='city_name'),
        cnNameTree?: string(name='cn_name_tree'),
        id?: long(name='id'),
        otherNameList?: [ string ](name='other_name_list'),
      }
    ](name='all_city_base_info_list'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model AllBaseCityInfoQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllBaseCityInfoQueryResponseBody(name='body'),
}

async function allBaseCityInfoQuery(): AllBaseCityInfoQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AllBaseCityInfoQueryHeaders{};
  return allBaseCityInfoQueryWithOptions(headers, runtime);
}

async function allBaseCityInfoQueryWithOptions(headers: AllBaseCityInfoQueryHeaders, runtime: Util.RuntimeOptions): AllBaseCityInfoQueryResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripAccessToken)) {
    realHeaders['x-acs-btrip-access-token'] = Util.toJSONString(headers.xAcsBtripAccessToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'AllBaseCityInfoQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/city/v1/code`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ApplyAddHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model ApplyAddRequest {
  budget?: long(name='budget'),
  budgetMerge?: int32(name='budget_merge'),
  corpName?: string(name='corp_name'),
  departId?: string(name='depart_id'),
  departName?: string(name='depart_name'),
  externalTravelerList?: [ 
    {
      userName?: string(name='user_name'),
    }
  ](name='external_traveler_list'),
  externalTravelerStandard?: {
    businessDiscount?: int32(name='business_discount'),
    economyDiscount?: int32(name='economy_discount'),
    firstDiscount?: int32(name='first_discount'),
    flightCabins?: string(name='flight_cabins'),
    hotelCitys?: [ 
      {
        cityCode?: string(name='city_code'),
        cityName?: string(name='city_name'),
        fee?: long(name='fee'),
      }
    ](name='hotel_citys'),
    reserveType?: int32(name='reserve_type'),
    trainSeats?: string(name='train_seats'),
  }(name='external_traveler_standard'),
  flightBudget?: long(name='flight_budget'),
  hotelBudget?: long(name='hotel_budget'),
  hotelShare?: {
    param?: string(name='param'),
    type?: string(name='type'),
  }(name='hotel_share'),
  internationalFlightCabins?: string(name='international_flight_cabins'),
  itineraryList?: [ 
    {
      arrCity?: string(name='arr_city'),
      arrCityCode?: string(name='arr_city_code'),
      arrDate?: string(name='arr_date'),
      costCenterId?: long(name='cost_center_id'),
      depCity?: string(name='dep_city'),
      depCityCode?: string(name='dep_city_code'),
      depDate?: string(name='dep_date'),
      invoiceId?: long(name='invoice_id'),
      itineraryId?: string(name='itinerary_id'),
      needHotel?: boolean(name='need_hotel'),
      needTraffic?: boolean(name='need_traffic'),
      projectCode?: string(name='project_code'),
      projectTitle?: string(name='project_title'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id'),
      thirdpartCostCenterId?: string(name='thirdpart_cost_center_id'),
      trafficType?: int32(name='traffic_type'),
      tripWay?: int32(name='trip_way'),
    }
  ](name='itinerary_list'),
  itineraryRule?: int32(name='itinerary_rule'),
  itinerarySetList?: [ 
    {
      arrDate?: string(name='arr_date'),
      cityCodeSet?: string(name='city_code_set'),
      citySet?: string(name='city_set'),
      costCenterId?: long(name='cost_center_id'),
      depDate?: string(name='dep_date'),
      invoiceId?: long(name='invoice_id'),
      itineraryId?: string(name='itinerary_id'),
      projectCode?: string(name='project_code'),
      projectTitle?: string(name='project_title'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id'),
      thirdpartCostCenterId?: string(name='thirdpart_cost_center_id'),
      trafficType?: int32(name='traffic_type'),
    }
  ](name='itinerary_set_list'),
  limitTraveler?: int32(name='limit_traveler'),
  status?: int32(name='status'),
  thirdpartApplyId?: string(name='thirdpart_apply_id'),
  thirdpartBusinessId?: string(name='thirdpart_business_id'),
  thirdpartDepartId?: string(name='thirdpart_depart_id'),
  togetherBookRule?: int32(name='together_book_rule'),
  trainBudget?: long(name='train_budget'),
  travelerList?: [ 
    {
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='traveler_list'),
  travelerStandard?: [ 
    {
      businessDiscount?: int32(name='business_discount'),
      economyDiscount?: int32(name='economy_discount'),
      firstDiscount?: int32(name='first_discount'),
      flightCabins?: string(name='flight_cabins'),
      hotelCitys?: [ 
        {
          cityCode?: string(name='city_code'),
          cityName?: string(name='city_name'),
          fee?: long(name='fee'),
        }
      ](name='hotel_citys'),
      reserveType?: int32(name='reserve_type'),
      trainSeats?: string(name='train_seats'),
      userId?: string(name='user_id'),
    }
  ](name='traveler_standard'),
  tripCause?: string(name='trip_cause'),
  tripDay?: int32(name='trip_day'),
  tripTitle?: string(name='trip_title'),
  type?: int32(name='type'),
  unionNo?: string(name='union_no'),
  userId?: string(name='user_id'),
  userName?: string(name='user_name'),
  vehicleBudget?: long(name='vehicle_budget'),
}

model ApplyAddShrinkRequest {
  budget?: long(name='budget'),
  budgetMerge?: int32(name='budget_merge'),
  corpName?: string(name='corp_name'),
  departId?: string(name='depart_id'),
  departName?: string(name='depart_name'),
  externalTravelerListShrink?: string(name='external_traveler_list'),
  externalTravelerStandardShrink?: string(name='external_traveler_standard'),
  flightBudget?: long(name='flight_budget'),
  hotelBudget?: long(name='hotel_budget'),
  hotelShareShrink?: string(name='hotel_share'),
  internationalFlightCabins?: string(name='international_flight_cabins'),
  itineraryListShrink?: string(name='itinerary_list'),
  itineraryRule?: int32(name='itinerary_rule'),
  itinerarySetListShrink?: string(name='itinerary_set_list'),
  limitTraveler?: int32(name='limit_traveler'),
  status?: int32(name='status'),
  thirdpartApplyId?: string(name='thirdpart_apply_id'),
  thirdpartBusinessId?: string(name='thirdpart_business_id'),
  thirdpartDepartId?: string(name='thirdpart_depart_id'),
  togetherBookRule?: int32(name='together_book_rule'),
  trainBudget?: long(name='train_budget'),
  travelerListShrink?: string(name='traveler_list'),
  travelerStandardShrink?: string(name='traveler_standard'),
  tripCause?: string(name='trip_cause'),
  tripDay?: int32(name='trip_day'),
  tripTitle?: string(name='trip_title'),
  type?: int32(name='type'),
  unionNo?: string(name='union_no'),
  userId?: string(name='user_id'),
  userName?: string(name='user_name'),
  vehicleBudget?: long(name='vehicle_budget'),
}

model ApplyAddResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id'),
    thirdpartApplyId?: string(name='thirdpart_apply_id'),
    thirdpartBusinessId?: string(name='thirdpart_business_id'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model ApplyAddResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyAddResponseBody(name='body'),
}

async function applyAdd(request: ApplyAddRequest): ApplyAddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ApplyAddHeaders{};
  return applyAddWithOptions(request, headers, runtime);
}

async function applyAddWithOptions(tmpReq: ApplyAddRequest, headers: ApplyAddHeaders, runtime: Util.RuntimeOptions): ApplyAddResponse {
  Util.validateModel(tmpReq);
  var request = new ApplyAddShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.externalTravelerList)) {
    request.externalTravelerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.externalTravelerList, 'external_traveler_list', 'json');
  }
  if (!Util.isUnset(tmpReq.externalTravelerStandard)) {
    request.externalTravelerStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.externalTravelerStandard, 'external_traveler_standard', 'json');
  }
  if (!Util.isUnset(tmpReq.hotelShare)) {
    request.hotelShareShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hotelShare, 'hotel_share', 'json');
  }
  if (!Util.isUnset(tmpReq.itineraryList)) {
    request.itineraryListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itineraryList, 'itinerary_list', 'json');
  }
  if (!Util.isUnset(tmpReq.itinerarySetList)) {
    request.itinerarySetListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itinerarySetList, 'itinerary_set_list', 'json');
  }
  if (!Util.isUnset(tmpReq.travelerList)) {
    request.travelerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerList, 'traveler_list', 'json');
  }
  if (!Util.isUnset(tmpReq.travelerStandard)) {
    request.travelerStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerStandard, 'traveler_standard', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.internationalFlightCabins)) {
    query['international_flight_cabins'] = request.internationalFlightCabins;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.budget)) {
    body['budget'] = request.budget;
  }
  if (!Util.isUnset(request.budgetMerge)) {
    body['budget_merge'] = request.budgetMerge;
  }
  if (!Util.isUnset(request.corpName)) {
    body['corp_name'] = request.corpName;
  }
  if (!Util.isUnset(request.departId)) {
    body['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.departName)) {
    body['depart_name'] = request.departName;
  }
  if (!Util.isUnset(request.externalTravelerListShrink)) {
    body['external_traveler_list'] = request.externalTravelerListShrink;
  }
  if (!Util.isUnset(request.externalTravelerStandardShrink)) {
    body['external_traveler_standard'] = request.externalTravelerStandardShrink;
  }
  if (!Util.isUnset(request.flightBudget)) {
    body['flight_budget'] = request.flightBudget;
  }
  if (!Util.isUnset(request.hotelBudget)) {
    body['hotel_budget'] = request.hotelBudget;
  }
  if (!Util.isUnset(request.hotelShareShrink)) {
    body['hotel_share'] = request.hotelShareShrink;
  }
  if (!Util.isUnset(request.itineraryListShrink)) {
    body['itinerary_list'] = request.itineraryListShrink;
  }
  if (!Util.isUnset(request.itineraryRule)) {
    body['itinerary_rule'] = request.itineraryRule;
  }
  if (!Util.isUnset(request.itinerarySetListShrink)) {
    body['itinerary_set_list'] = request.itinerarySetListShrink;
  }
  if (!Util.isUnset(request.limitTraveler)) {
    body['limit_traveler'] = request.limitTraveler;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    body['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.thirdpartBusinessId)) {
    body['thirdpart_business_id'] = request.thirdpartBusinessId;
  }
  if (!Util.isUnset(request.thirdpartDepartId)) {
    body['thirdpart_depart_id'] = request.thirdpartDepartId;
  }
  if (!Util.isUnset(request.togetherBookRule)) {
    body['together_book_rule'] = request.togetherBookRule;
  }
  if (!Util.isUnset(request.trainBudget)) {
    body['train_budget'] = request.trainBudget;
  }
  if (!Util.isUnset(request.travelerListShrink)) {
    body['traveler_list'] = request.travelerListShrink;
  }
  if (!Util.isUnset(request.travelerStandardShrink)) {
    body['traveler_standard'] = request.travelerStandardShrink;
  }
  if (!Util.isUnset(request.tripCause)) {
    body['trip_cause'] = request.tripCause;
  }
  if (!Util.isUnset(request.tripDay)) {
    body['trip_day'] = request.tripDay;
  }
  if (!Util.isUnset(request.tripTitle)) {
    body['trip_title'] = request.tripTitle;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }
  if (!Util.isUnset(request.unionNo)) {
    body['union_no'] = request.unionNo;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    body['user_name'] = request.userName;
  }
  if (!Util.isUnset(request.vehicleBudget)) {
    body['vehicle_budget'] = request.vehicleBudget;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyAdd',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/biz-trip`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ApplyApproveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model ApplyApproveRequest {
  applyId?: string(name='apply_id'),
  note?: string(name='note'),
  operateTime?: string(name='operate_time'),
  status?: int32(name='status'),
  userId?: string(name='user_id'),
  userName?: string(name='user_name'),
}

model ApplyApproveResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: string(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model ApplyApproveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyApproveResponseBody(name='body'),
}

async function applyApprove(request: ApplyApproveRequest): ApplyApproveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ApplyApproveHeaders{};
  return applyApproveWithOptions(request, headers, runtime);
}

async function applyApproveWithOptions(request: ApplyApproveRequest, headers: ApplyApproveHeaders, runtime: Util.RuntimeOptions): ApplyApproveResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    body['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.note)) {
    body['note'] = request.note;
  }
  if (!Util.isUnset(request.operateTime)) {
    body['operate_time'] = request.operateTime;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    body['user_name'] = request.userName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyApprove',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/biz-trip/action/approve`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ApplyListQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model ApplyListQueryRequest {
  allApply?: boolean(name='all_apply'),
  departId?: string(name='depart_id'),
  endTime?: string(name='end_time'),
  gmtModified?: string(name='gmt_modified'),
  onlyShangLvApply?: boolean(name='only_shang_lv_apply'),
  page?: int32(name='page'),
  pageSize?: int32(name='page_size'),
  startTime?: string(name='start_time'),
  type?: int32(name='type'),
  unionNo?: string(name='union_no'),
  userId?: string(name='user_id'),
}

model ApplyListQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  moduleList?: [ 
    {
      applyShowId?: string(name='apply_show_id'),
      approverList?: [ 
        {
          note?: string(name='note'),
          operateTime?: string(name='operate_time'),
          order?: int32(name='order'),
          status?: int32(name='status'),
          statusDesc?: string(name='status_desc'),
          userId?: string(name='user_id'),
          userName?: string(name='user_name'),
        }
      ](name='approver_list'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      externalTravelerList?: [ 
        {
          userName?: string(name='user_name'),
        }
      ](name='external_traveler_list'),
      flowCode?: string(name='flow_code'),
      gmtCreate?: string(name='gmt_create'),
      gmtModified?: string(name='gmt_modified'),
      id?: long(name='id'),
      itineraryList?: [ 
        {
          arrCity?: string(name='arr_city'),
          arrDate?: string(name='arr_date'),
          costCenterName?: string(name='cost_center_name'),
          depCity?: string(name='dep_city'),
          depDate?: string(name='dep_date'),
          invoiceName?: string(name='invoice_name'),
          itineraryId?: string(name='itinerary_id'),
          projectCode?: string(name='project_code'),
          projectTitle?: string(name='project_title'),
          trafficType?: int32(name='traffic_type'),
          tripWay?: int32(name='trip_way'),
        }
      ](name='itinerary_list'),
      itineraryRule?: int32(name='itinerary_rule'),
      itinerarySetList?: [ 
        {
          arrDate?: string(name='arr_date'),
          cityCodeSet?: string(name='city_code_set'),
          citySet?: string(name='city_set'),
          costCenterName?: string(name='cost_center_name'),
          depDate?: string(name='dep_date'),
          invoiceName?: string(name='invoice_name'),
          itineraryId?: string(name='itinerary_id'),
          projectCode?: string(name='project_code'),
          projectTitle?: string(name='project_title'),
          trafficType?: int32(name='traffic_type'),
        }
      ](name='itinerary_set_list'),
      status?: int32(name='status'),
      statusDesc?: string(name='status_desc'),
      thirdpartBusinessId?: string(name='thirdpart_business_id'),
      thirdpartId?: string(name='thirdpart_id'),
      travelerList?: [ 
        {
          userId?: string(name='user_id'),
          userName?: string(name='user_name'),
        }
      ](name='traveler_list'),
      tripCause?: string(name='trip_cause'),
      tripDay?: int32(name='trip_day'),
      tripTitle?: string(name='trip_title'),
      type?: int32(name='type'),
      unionNo?: string(name='union_no'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='module_list'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model ApplyListQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyListQueryResponseBody(name='body'),
}

async function applyListQuery(request: ApplyListQueryRequest): ApplyListQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ApplyListQueryHeaders{};
  return applyListQueryWithOptions(request, headers, runtime);
}

async function applyListQueryWithOptions(request: ApplyListQueryRequest, headers: ApplyListQueryHeaders, runtime: Util.RuntimeOptions): ApplyListQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.allApply)) {
    query['all_apply'] = request.allApply;
  }
  if (!Util.isUnset(request.departId)) {
    query['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['end_time'] = request.endTime;
  }
  if (!Util.isUnset(request.gmtModified)) {
    query['gmt_modified'] = request.gmtModified;
  }
  if (!Util.isUnset(request.onlyShangLvApply)) {
    query['only_shang_lv_apply'] = request.onlyShangLvApply;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['start_time'] = request.startTime;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }
  if (!Util.isUnset(request.unionNo)) {
    query['union_no'] = request.unionNo;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyListQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/biz-trips`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ApplyModifyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model ApplyModifyRequest {
  budget?: long(name='budget'),
  budgetMerge?: int32(name='budget_merge'),
  corpName?: string(name='corp_name'),
  departId?: string(name='depart_id'),
  departName?: string(name='depart_name'),
  externalTravelerList?: [ 
    {
      userName?: string(name='user_name'),
    }
  ](name='external_traveler_list'),
  externalTravelerStandard?: {
    businessDiscount?: int32(name='business_discount'),
    economyDiscount?: int32(name='economy_discount'),
    firstDiscount?: int32(name='first_discount'),
    flightCabins?: string(name='flight_cabins'),
    hotelCitys?: [ 
      {
        cityCode?: string(name='city_code'),
        cityName?: string(name='city_name'),
        fee?: long(name='fee'),
      }
    ](name='hotel_citys'),
    reserveType?: int32(name='reserve_type'),
    trainSeats?: string(name='train_seats'),
  }(name='external_traveler_standard'),
  flightBudget?: long(name='flight_budget'),
  hotelBudget?: long(name='hotel_budget'),
  hotelShare?: {
    param?: string(name='param'),
    type?: string(name='type'),
  }(name='hotel_share'),
  itineraryList?: [ 
    {
      arrCity?: string(name='arr_city'),
      arrCityCode?: string(name='arr_city_code'),
      arrDate?: string(name='arr_date'),
      costCenterId?: long(name='cost_center_id'),
      depCity?: string(name='dep_city'),
      depCityCode?: string(name='dep_city_code'),
      depDate?: string(name='dep_date'),
      invoiceId?: long(name='invoice_id'),
      itineraryId?: string(name='itinerary_id'),
      needHotel?: boolean(name='need_hotel'),
      needTraffic?: boolean(name='need_traffic'),
      projectCode?: string(name='project_code'),
      projectTitle?: string(name='project_title'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id'),
      thirdpartCostCenterId?: string(name='thirdpart_cost_center_id'),
      trafficType?: int32(name='traffic_type'),
      tripWay?: int32(name='trip_way'),
    }
  ](name='itinerary_list'),
  itineraryRule?: int32(name='itinerary_rule'),
  itinerarySetList?: [ 
    {
      arrDate?: string(name='arr_date'),
      cityCodeSet?: string(name='city_code_set'),
      citySet?: string(name='city_set'),
      costCenterId?: long(name='cost_center_id'),
      depDate?: string(name='dep_date'),
      invoiceId?: long(name='invoice_id'),
      itineraryId?: string(name='itinerary_id'),
      projectCode?: string(name='project_code'),
      projectTitle?: string(name='project_title'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id'),
      thirdpartCostCenterId?: string(name='thirdpart_cost_center_id'),
      trafficType?: int32(name='traffic_type'),
    }
  ](name='itinerary_set_list'),
  limitTraveler?: int32(name='limit_traveler'),
  status?: int32(name='status'),
  thirdpartApplyId?: string(name='thirdpart_apply_id'),
  thirdpartBusinessId?: string(name='thirdpart_business_id'),
  thirdpartDepartId?: string(name='thirdpart_depart_id'),
  togetherBookRule?: int32(name='together_book_rule'),
  trainBudget?: long(name='train_budget'),
  travelerList?: [ 
    {
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='traveler_list'),
  travelerStandard?: [ 
    {
      businessDiscount?: int32(name='business_discount'),
      economyDiscount?: int32(name='economy_discount'),
      firstDiscount?: int32(name='first_discount'),
      flightCabins?: string(name='flight_cabins'),
      hotelCitys?: [ 
        {
          cityCode?: string(name='city_code'),
          cityName?: string(name='city_name'),
          fee?: long(name='fee'),
        }
      ](name='hotel_citys'),
      reserveType?: int32(name='reserve_type'),
      trainSeats?: string(name='train_seats'),
      userId?: string(name='user_id'),
    }
  ](name='traveler_standard'),
  tripCause?: string(name='trip_cause'),
  tripDay?: int32(name='trip_day'),
  tripTitle?: string(name='trip_title'),
  unionNo?: string(name='union_no'),
  userId?: string(name='user_id'),
  userName?: string(name='user_name'),
  vehicleBudget?: long(name='vehicle_budget'),
}

model ApplyModifyShrinkRequest {
  budget?: long(name='budget'),
  budgetMerge?: int32(name='budget_merge'),
  corpName?: string(name='corp_name'),
  departId?: string(name='depart_id'),
  departName?: string(name='depart_name'),
  externalTravelerListShrink?: string(name='external_traveler_list'),
  externalTravelerStandardShrink?: string(name='external_traveler_standard'),
  flightBudget?: long(name='flight_budget'),
  hotelBudget?: long(name='hotel_budget'),
  hotelShareShrink?: string(name='hotel_share'),
  itineraryListShrink?: string(name='itinerary_list'),
  itineraryRule?: int32(name='itinerary_rule'),
  itinerarySetListShrink?: string(name='itinerary_set_list'),
  limitTraveler?: int32(name='limit_traveler'),
  status?: int32(name='status'),
  thirdpartApplyId?: string(name='thirdpart_apply_id'),
  thirdpartBusinessId?: string(name='thirdpart_business_id'),
  thirdpartDepartId?: string(name='thirdpart_depart_id'),
  togetherBookRule?: int32(name='together_book_rule'),
  trainBudget?: long(name='train_budget'),
  travelerListShrink?: string(name='traveler_list'),
  travelerStandardShrink?: string(name='traveler_standard'),
  tripCause?: string(name='trip_cause'),
  tripDay?: int32(name='trip_day'),
  tripTitle?: string(name='trip_title'),
  unionNo?: string(name='union_no'),
  userId?: string(name='user_id'),
  userName?: string(name='user_name'),
  vehicleBudget?: long(name='vehicle_budget'),
}

model ApplyModifyResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id'),
    thirdpartApplyId?: string(name='thirdpart_apply_id'),
    thirdpartBusinessId?: string(name='thirdpart_business_id'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model ApplyModifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyModifyResponseBody(name='body'),
}

async function applyModify(request: ApplyModifyRequest): ApplyModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ApplyModifyHeaders{};
  return applyModifyWithOptions(request, headers, runtime);
}

async function applyModifyWithOptions(tmpReq: ApplyModifyRequest, headers: ApplyModifyHeaders, runtime: Util.RuntimeOptions): ApplyModifyResponse {
  Util.validateModel(tmpReq);
  var request = new ApplyModifyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.externalTravelerList)) {
    request.externalTravelerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.externalTravelerList, 'external_traveler_list', 'json');
  }
  if (!Util.isUnset(tmpReq.externalTravelerStandard)) {
    request.externalTravelerStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.externalTravelerStandard, 'external_traveler_standard', 'json');
  }
  if (!Util.isUnset(tmpReq.hotelShare)) {
    request.hotelShareShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hotelShare, 'hotel_share', 'json');
  }
  if (!Util.isUnset(tmpReq.itineraryList)) {
    request.itineraryListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itineraryList, 'itinerary_list', 'json');
  }
  if (!Util.isUnset(tmpReq.itinerarySetList)) {
    request.itinerarySetListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itinerarySetList, 'itinerary_set_list', 'json');
  }
  if (!Util.isUnset(tmpReq.travelerList)) {
    request.travelerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerList, 'traveler_list', 'json');
  }
  if (!Util.isUnset(tmpReq.travelerStandard)) {
    request.travelerStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerStandard, 'traveler_standard', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.budget)) {
    body['budget'] = request.budget;
  }
  if (!Util.isUnset(request.budgetMerge)) {
    body['budget_merge'] = request.budgetMerge;
  }
  if (!Util.isUnset(request.corpName)) {
    body['corp_name'] = request.corpName;
  }
  if (!Util.isUnset(request.departId)) {
    body['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.departName)) {
    body['depart_name'] = request.departName;
  }
  if (!Util.isUnset(request.externalTravelerListShrink)) {
    body['external_traveler_list'] = request.externalTravelerListShrink;
  }
  if (!Util.isUnset(request.externalTravelerStandardShrink)) {
    body['external_traveler_standard'] = request.externalTravelerStandardShrink;
  }
  if (!Util.isUnset(request.flightBudget)) {
    body['flight_budget'] = request.flightBudget;
  }
  if (!Util.isUnset(request.hotelBudget)) {
    body['hotel_budget'] = request.hotelBudget;
  }
  if (!Util.isUnset(request.hotelShareShrink)) {
    body['hotel_share'] = request.hotelShareShrink;
  }
  if (!Util.isUnset(request.itineraryListShrink)) {
    body['itinerary_list'] = request.itineraryListShrink;
  }
  if (!Util.isUnset(request.itineraryRule)) {
    body['itinerary_rule'] = request.itineraryRule;
  }
  if (!Util.isUnset(request.itinerarySetListShrink)) {
    body['itinerary_set_list'] = request.itinerarySetListShrink;
  }
  if (!Util.isUnset(request.limitTraveler)) {
    body['limit_traveler'] = request.limitTraveler;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    body['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.thirdpartBusinessId)) {
    body['thirdpart_business_id'] = request.thirdpartBusinessId;
  }
  if (!Util.isUnset(request.thirdpartDepartId)) {
    body['thirdpart_depart_id'] = request.thirdpartDepartId;
  }
  if (!Util.isUnset(request.togetherBookRule)) {
    body['together_book_rule'] = request.togetherBookRule;
  }
  if (!Util.isUnset(request.trainBudget)) {
    body['train_budget'] = request.trainBudget;
  }
  if (!Util.isUnset(request.travelerListShrink)) {
    body['traveler_list'] = request.travelerListShrink;
  }
  if (!Util.isUnset(request.travelerStandardShrink)) {
    body['traveler_standard'] = request.travelerStandardShrink;
  }
  if (!Util.isUnset(request.tripCause)) {
    body['trip_cause'] = request.tripCause;
  }
  if (!Util.isUnset(request.tripDay)) {
    body['trip_day'] = request.tripDay;
  }
  if (!Util.isUnset(request.tripTitle)) {
    body['trip_title'] = request.tripTitle;
  }
  if (!Util.isUnset(request.unionNo)) {
    body['union_no'] = request.unionNo;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    body['user_name'] = request.userName;
  }
  if (!Util.isUnset(request.vehicleBudget)) {
    body['vehicle_budget'] = request.vehicleBudget;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyModify',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/biz-trip`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ApplyQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model ApplyQueryRequest {
  applyId?: int32(name='apply_id'),
  applyShowId?: string(name='apply_show_id'),
  thirdpartApplyId?: string(name='thirdpart_apply_id'),
  type?: int32(name='type'),
}

model ApplyQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    applyShowId?: string(name='apply_show_id'),
    approverList?: [ 
      {
        note?: string(name='note'),
        operateTime?: string(name='operate_time'),
        order?: int32(name='order'),
        status?: int32(name='status'),
        statusDesc?: string(name='status_desc'),
        userId?: string(name='user_id'),
        userName?: string(name='user_name'),
      }
    ](name='approver_list'),
    budget?: long(name='budget'),
    budgetMerge?: int32(name='budget_merge'),
    corpId?: string(name='corp_id'),
    corpName?: string(name='corp_name'),
    departId?: string(name='depart_id'),
    departName?: string(name='depart_name'),
    externalTravelerList?: [ 
      {
        businessDiscount?: int32(name='business_discount'),
        economyDiscount?: int32(name='economy_discount'),
        firstDiscount?: int32(name='first_discount'),
        flightCabins?: string(name='flight_cabins'),
        hotelCitys?: [ 
          {
            cityCode?: string(name='city_code'),
            cityName?: string(name='city_name'),
            fee?: long(name='fee'),
          }
        ](name='hotel_citys'),
        reserveType?: int32(name='reserve_type'),
        trainSeats?: string(name='train_seats'),
        userName?: string(name='user_name'),
      }
    ](name='external_traveler_list'),
    flightBudget?: long(name='flight_budget'),
    gmtCreate?: string(name='gmt_create'),
    gmtModified?: string(name='gmt_modified'),
    hotelBudget?: long(name='hotel_budget'),
    hotelShare?: {
      param?: string(name='param'),
      type?: string(name='type'),
    }(name='hotel_share'),
    id?: long(name='id'),
    itineraryList?: [ 
      {
        arrCity?: string(name='arr_city'),
        arrCityCode?: string(name='arr_city_code'),
        arrDate?: string(name='arr_date'),
        costCenterName?: string(name='cost_center_name'),
        depCity?: string(name='dep_city'),
        depCityCode?: string(name='dep_city_code'),
        depDate?: string(name='dep_date'),
        invoiceName?: string(name='invoice_name'),
        itineraryId?: string(name='itinerary_id'),
        projectCode?: string(name='project_code'),
        projectTitle?: string(name='project_title'),
        trafficType?: int32(name='traffic_type'),
        tripWay?: int32(name='trip_way'),
      }
    ](name='itinerary_list'),
    itineraryRule?: int32(name='itinerary_rule'),
    itinerarySetList?: [ 
      {
        arrDate?: string(name='arr_date'),
        cityCodeSet?: string(name='city_code_set'),
        citySet?: string(name='city_set'),
        costCenterName?: string(name='cost_center_name'),
        depDate?: string(name='dep_date'),
        invoiceName?: string(name='invoice_name'),
        itineraryId?: string(name='itinerary_id'),
        projectCode?: string(name='project_code'),
        projectTitle?: string(name='project_title'),
        trafficType?: int32(name='traffic_type'),
      }
    ](name='itinerary_set_list'),
    limitTraveler?: int32(name='limit_traveler'),
    status?: int32(name='status'),
    statusDesc?: string(name='status_desc'),
    thirdpartBusinessId?: string(name='thirdpart_business_id'),
    thirdpartId?: string(name='thirdpart_id'),
    togetherBookRule?: int32(name='together_book_rule'),
    trainBudget?: long(name='train_budget'),
    travelerList?: [ 
      {
        businessDiscount?: int32(name='business_discount'),
        economyDiscount?: int32(name='economy_discount'),
        firstDiscount?: int32(name='first_discount'),
        flightCabins?: string(name='flight_cabins'),
        hotelCitys?: [ 
          {
            cityCode?: string(name='city_code'),
            cityName?: string(name='city_name'),
            fee?: long(name='fee'),
          }
        ](name='hotel_citys'),
        reserveType?: int32(name='reserve_type'),
        trainSeats?: string(name='train_seats'),
        userId?: string(name='user_id'),
        userName?: string(name='user_name'),
      }
    ](name='traveler_list'),
    tripCause?: string(name='trip_cause'),
    tripDay?: int32(name='trip_day'),
    tripTitle?: string(name='trip_title'),
    type?: int32(name='type'),
    unionNo?: string(name='union_no'),
    userId?: string(name='user_id'),
    userName?: string(name='user_name'),
    vehicleBudget?: long(name='vehicle_budget'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model ApplyQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyQueryResponseBody(name='body'),
}

async function applyQuery(request: ApplyQueryRequest): ApplyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ApplyQueryHeaders{};
  return applyQueryWithOptions(request, headers, runtime);
}

async function applyQueryWithOptions(request: ApplyQueryRequest, headers: ApplyQueryHeaders, runtime: Util.RuntimeOptions): ApplyQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.applyShowId)) {
    query['apply_show_id'] = request.applyShowId;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    query['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/biz-trip`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CarApplyAddHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model CarApplyAddRequest {
  cause?: string(name='cause'),
  city?: string(name='city'),
  date?: string(name='date'),
  finishedDate?: string(name='finished_date'),
  projectCode?: string(name='project_code'),
  projectName?: string(name='project_name'),
  status?: int32(name='status'),
  thirdPartApplyId?: string(name='third_part_apply_id'),
  thirdPartCostCenterId?: string(name='third_part_cost_center_id'),
  thirdPartInvoiceId?: string(name='third_part_invoice_id'),
  timesTotal?: int32(name='times_total'),
  timesType?: int32(name='times_type'),
  timesUsed?: int32(name='times_used'),
  title?: string(name='title'),
  userId?: string(name='user_id'),
}

model CarApplyAddResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: long(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model CarApplyAddResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CarApplyAddResponseBody(name='body'),
}

async function carApplyAdd(request: CarApplyAddRequest): CarApplyAddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CarApplyAddHeaders{};
  return carApplyAddWithOptions(request, headers, runtime);
}

async function carApplyAddWithOptions(request: CarApplyAddRequest, headers: CarApplyAddHeaders, runtime: Util.RuntimeOptions): CarApplyAddResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cause)) {
    body['cause'] = request.cause;
  }
  if (!Util.isUnset(request.city)) {
    body['city'] = request.city;
  }
  if (!Util.isUnset(request.date)) {
    body['date'] = request.date;
  }
  if (!Util.isUnset(request.finishedDate)) {
    body['finished_date'] = request.finishedDate;
  }
  if (!Util.isUnset(request.projectCode)) {
    body['project_code'] = request.projectCode;
  }
  if (!Util.isUnset(request.projectName)) {
    body['project_name'] = request.projectName;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.thirdPartApplyId)) {
    body['third_part_apply_id'] = request.thirdPartApplyId;
  }
  if (!Util.isUnset(request.thirdPartCostCenterId)) {
    body['third_part_cost_center_id'] = request.thirdPartCostCenterId;
  }
  if (!Util.isUnset(request.thirdPartInvoiceId)) {
    body['third_part_invoice_id'] = request.thirdPartInvoiceId;
  }
  if (!Util.isUnset(request.timesTotal)) {
    body['times_total'] = request.timesTotal;
  }
  if (!Util.isUnset(request.timesType)) {
    body['times_type'] = request.timesType;
  }
  if (!Util.isUnset(request.timesUsed)) {
    body['times_used'] = request.timesUsed;
  }
  if (!Util.isUnset(request.title)) {
    body['title'] = request.title;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CarApplyAdd',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/car`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CarApplyModifyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model CarApplyModifyRequest {
  operateTime?: string(name='operate_time'),
  remark?: string(name='remark'),
  status?: int32(name='status'),
  thirdPartApplyId?: string(name='third_part_apply_id'),
  userId?: string(name='user_id'),
}

model CarApplyModifyResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: boolean(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model CarApplyModifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CarApplyModifyResponseBody(name='body'),
}

async function carApplyModify(request: CarApplyModifyRequest): CarApplyModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CarApplyModifyHeaders{};
  return carApplyModifyWithOptions(request, headers, runtime);
}

async function carApplyModifyWithOptions(request: CarApplyModifyRequest, headers: CarApplyModifyHeaders, runtime: Util.RuntimeOptions): CarApplyModifyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.operateTime)) {
    body['operate_time'] = request.operateTime;
  }
  if (!Util.isUnset(request.remark)) {
    body['remark'] = request.remark;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.thirdPartApplyId)) {
    body['third_part_apply_id'] = request.thirdPartApplyId;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CarApplyModify',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/car`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CarApplyQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model CarApplyQueryRequest {
  createdEndAt?: string(name='created_end_at'),
  createdStartAt?: string(name='created_start_at'),
  pageNumber?: int32(name='page_number'),
  pageSize?: int32(name='page_size'),
  thirdPartApplyId?: string(name='third_part_apply_id'),
  userId?: string(name='user_id'),
}

model CarApplyQueryResponseBody = {
  applyList?: [ 
    {
      approverList?: [ 
        {
          note?: string(name='note'),
          operateTime?: string(name='operate_time'),
          order?: int32(name='order'),
          status?: int32(name='status'),
          statusDesc?: string(name='status_desc'),
          userId?: string(name='user_id'),
          userName?: string(name='user_name'),
        }
      ](name='approver_list'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      gmtCreate?: string(name='gmt_create'),
      gmtModified?: string(name='gmt_modified'),
      itineraryList?: [ 
        {
          arrCity?: string(name='arr_city'),
          arrCityCode?: string(name='arr_city_code'),
          arrDate?: string(name='arr_date'),
          costCenterId?: long(name='cost_center_id'),
          costCenterName?: string(name='cost_center_name'),
          depCity?: string(name='dep_city'),
          depCityCode?: string(name='dep_city_code'),
          depDate?: string(name='dep_date'),
          invoiceId?: long(name='invoice_id'),
          invoiceName?: string(name='invoice_name'),
          itineraryId?: string(name='itinerary_id'),
          projectCode?: string(name='project_code'),
          projectTitle?: string(name='project_title'),
          trafficType?: int32(name='traffic_type'),
        }
      ](name='itinerary_list'),
      status?: int32(name='status'),
      statusDesc?: string(name='status_desc'),
      thirdpartId?: string(name='thirdpart_id'),
      tripCause?: string(name='trip_cause'),
      tripTitle?: string(name='trip_title'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='apply_list'),
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  total?: int32(name='total'),
  traceId?: string(name='traceId'),
}

model CarApplyQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CarApplyQueryResponseBody(name='body'),
}

async function carApplyQuery(request: CarApplyQueryRequest): CarApplyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CarApplyQueryHeaders{};
  return carApplyQueryWithOptions(request, headers, runtime);
}

async function carApplyQueryWithOptions(request: CarApplyQueryRequest, headers: CarApplyQueryHeaders, runtime: Util.RuntimeOptions): CarApplyQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.createdEndAt)) {
    query['created_end_at'] = request.createdEndAt;
  }
  if (!Util.isUnset(request.createdStartAt)) {
    query['created_start_at'] = request.createdStartAt;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['page_number'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.thirdPartApplyId)) {
    query['third_part_apply_id'] = request.thirdPartApplyId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CarApplyQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/car`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CarBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model CarBillSettlementQueryRequest {
  pageNo?: int32(name='page_no'),
  pageSize?: int32(name='page_size'),
  periodEnd?: string(name='period_end'),
  periodStart?: string(name='period_start'),
}

model CarBillSettlementQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category'),
    corpId?: string(name='corp_id'),
    dataList?: [ 
      {
        alipayTradeNo?: string(name='alipay_trade_no'),
        applyId?: string(name='apply_id'),
        arrCity?: string(name='arr_city'),
        arrDate?: string(name='arr_date'),
        arrLocation?: string(name='arr_location'),
        arrTime?: string(name='arr_time'),
        billRecordTime?: string(name='bill_record_time'),
        bookTime?: string(name='book_time'),
        bookerId?: string(name='booker_id'),
        bookerJobNo?: string(name='booker_job_no'),
        bookerName?: string(name='booker_name'),
        businessCategory?: string(name='business_category'),
        capitalDirection?: string(name='capital_direction'),
        carLevel?: string(name='car_level'),
        cascadeDepartment?: string(name='cascade_department'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number'),
        coupon?: double(name='coupon'),
        couponPrice?: double(name='coupon_price'),
        department?: string(name='department'),
        departmentId?: string(name='department_id'),
        deptCity?: string(name='dept_city'),
        deptDate?: string(name='dept_date'),
        deptLocation?: string(name='dept_location'),
        deptTime?: string(name='dept_time'),
        estimateDriveDistance?: string(name='estimate_drive_distance'),
        estimatePrice?: double(name='estimate_price'),
        feeType?: string(name='fee_type'),
        index?: string(name='index'),
        invoiceTitle?: string(name='invoice_title'),
        memo?: string(name='memo'),
        orderId?: string(name='order_id'),
        orderPrice?: double(name='order_price'),
        overApplyId?: string(name='over_apply_id'),
        personSettleFee?: double(name='person_settle_fee'),
        primaryId?: long(name='primary_id'),
        projectCode?: string(name='project_code'),
        projectName?: string(name='project_name'),
        providerName?: string(name='provider_name'),
        realDriveDistance?: string(name='real_drive_distance'),
        realFromAddr?: string(name='real_from_addr'),
        realToAddr?: string(name='real_to_addr'),
        remark?: string(name='remark'),
        serviceFee?: double(name='service_fee'),
        settlementFee?: double(name='settlement_fee'),
        settlementGrantFee?: double(name='settlement_grant_fee'),
        settlementTime?: string(name='settlement_time'),
        settlementType?: string(name='settlement_type'),
        specialOrder?: string(name='special_order'),
        specialReason?: string(name='special_reason'),
        status?: int32(name='status'),
        subOrderId?: string(name='sub_order_id'),
        travelerId?: string(name='traveler_id'),
        travelerJobNo?: string(name='traveler_job_no'),
        travelerName?: string(name='traveler_name'),
        userConfirmDesc?: string(name='user_confirm_desc'),
        voucherType?: int32(name='voucher_type'),
      }
    ](name='data_list'),
    periodEnd?: string(name='period_end'),
    periodStart?: string(name='period_start'),
    totalNum?: long(name='total_num'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model CarBillSettlementQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CarBillSettlementQueryResponseBody(name='body'),
}

async function carBillSettlementQuery(request: CarBillSettlementQueryRequest): CarBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CarBillSettlementQueryHeaders{};
  return carBillSettlementQueryWithOptions(request, headers, runtime);
}

async function carBillSettlementQueryWithOptions(request: CarBillSettlementQueryRequest, headers: CarBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): CarBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CarBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/car/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CarOrderListQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model CarOrderListQueryRequest {
  allApply?: boolean(name='all_apply'),
  applyId?: long(name='apply_id'),
  departId?: string(name='depart_id'),
  endTime?: string(name='end_time'),
  page?: int32(name='page'),
  pageSize?: int32(name='page_size'),
  startTime?: string(name='start_time'),
  thirdpartApplyId?: string(name='thirdpart_apply_id'),
  updateEndTime?: string(name='update_end_time'),
  updateStartTime?: string(name='update_start_time'),
  userId?: string(name='user_id'),
}

model CarOrderListQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: [ 
    {
      applyId?: long(name='apply_id'),
      applyShowId?: string(name='apply_show_id'),
      btripTitle?: string(name='btrip_title'),
      businessCategory?: string(name='business_category'),
      cancelTime?: string(name='cancel_time'),
      carInfo?: string(name='car_info'),
      carLevel?: int32(name='car_level'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      costCenterId?: long(name='cost_center_id'),
      costCenterName?: string(name='cost_center_name'),
      costCenterNumber?: string(name='cost_center_number'),
      deptId?: long(name='dept_id'),
      deptName?: string(name='dept_name'),
      driverConfirmTime?: string(name='driver_confirm_time'),
      estimatePrice?: double(name='estimate_price'),
      fromAddress?: string(name='from_address'),
      fromCityName?: string(name='from_city_name'),
      gmtCreate?: string(name='gmt_create'),
      gmtModified?: string(name='gmt_modified'),
      id?: long(name='id'),
      invoiceId?: long(name='invoice_id'),
      invoiceTitle?: string(name='invoice_title'),
      isSpecial?: boolean(name='is_special'),
      memo?: string(name='memo'),
      orderStatus?: int32(name='order_status'),
      passengerName?: string(name='passenger_name'),
      payTime?: string(name='pay_time'),
      priceInfoList?: [ 
        {
          categoryCode?: int32(name='category_code'),
          categoryType?: int32(name='category_type'),
          gmtCreate?: string(name='gmt_create'),
          passengerName?: string(name='passenger_name'),
          payType?: int32(name='pay_type'),
          personPrice?: double(name='person_price'),
          price?: double(name='price'),
          tradeId?: string(name='trade_id'),
          type?: int32(name='type'),
        }
      ](name='price_info_list'),
      projectCode?: string(name='project_code'),
      projectId?: long(name='project_id'),
      projectTitle?: string(name='project_title'),
      provider?: int32(name='provider'),
      publishTime?: string(name='publish_time'),
      realFromAddress?: string(name='real_from_address'),
      realFromCityName?: string(name='real_from_city_name'),
      realToAddress?: string(name='real_to_address'),
      realToCityName?: string(name='real_to_city_name'),
      serviceType?: int32(name='service_type'),
      specialTypes?: [ string ](name='special_types'),
      takenTime?: string(name='taken_time'),
      thirdpartApplyId?: string(name='thirdpart_apply_id'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id'),
      toAddress?: string(name='to_address'),
      toCityName?: string(name='to_city_name'),
      travelDistance?: double(name='travel_distance'),
      userAffiliateList?: [ 
        {
          userId?: string(name='user_id'),
          userName?: string(name='user_name'),
        }
      ](name='user_affiliate_list'),
      userConfirm?: int32(name='user_confirm'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='module'),
  pageInfo?: {
    page?: int32(name='page'),
    pageSize?: int32(name='page_size'),
    totalNumber?: int32(name='total_number'),
  }(name='page_info'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model CarOrderListQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CarOrderListQueryResponseBody(name='body'),
}

async function carOrderListQuery(request: CarOrderListQueryRequest): CarOrderListQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CarOrderListQueryHeaders{};
  return carOrderListQueryWithOptions(request, headers, runtime);
}

async function carOrderListQueryWithOptions(request: CarOrderListQueryRequest, headers: CarOrderListQueryHeaders, runtime: Util.RuntimeOptions): CarOrderListQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.allApply)) {
    query['all_apply'] = request.allApply;
  }
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.departId)) {
    query['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['end_time'] = request.endTime;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['start_time'] = request.startTime;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    query['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.updateEndTime)) {
    query['update_end_time'] = request.updateEndTime;
  }
  if (!Util.isUnset(request.updateStartTime)) {
    query['update_start_time'] = request.updateStartTime;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CarOrderListQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/car/v1/order-list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CarOrderQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model CarOrderQueryRequest {
  orderId?: long(name='order_id'),
  subOrderId?: long(name='sub_order_id'),
}

model CarOrderQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    carInfo?: {
      businessCategory?: string(name='business_category'),
      cancelTime?: long(name='cancel_time'),
      carInfo?: string(name='car_info'),
      carLevel?: int32(name='car_level'),
      driverConfirmTime?: long(name='driver_confirm_time'),
      estimatePrice?: long(name='estimate_price'),
      fromAddress?: string(name='from_address'),
      fromCityName?: string(name='from_city_name'),
      isSpecial?: boolean(name='is_special'),
      memo?: string(name='memo'),
      payTime?: long(name='pay_time'),
      publishTime?: long(name='publish_time'),
      realFromAddress?: string(name='real_from_address'),
      realFromCityName?: string(name='real_from_city_name'),
      realToAddress?: string(name='real_to_address'),
      realToCityName?: string(name='real_to_city_name'),
      serviceType?: int32(name='service_type'),
      specialTypes?: string(name='special_types'),
      takenTime?: long(name='taken_time'),
      toAddress?: string(name='to_address'),
      toCityName?: string(name='to_city_name'),
      travelDistance?: string(name='travel_distance'),
    }(name='car_info'),
    invoiceInfo?: {
      id?: long(name='id'),
      title?: string(name='title'),
    }(name='invoice_info'),
    orderBaseInfo?: {
      applyId?: string(name='apply_id'),
      btripCause?: string(name='btrip_cause'),
      btripTitle?: string(name='btrip_title'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      gmtCreate?: long(name='gmt_create'),
      gmtModified?: long(name='gmt_modified'),
      itineraryId?: string(name='itinerary_id'),
      orderId?: long(name='order_id'),
      orderStatus?: int32(name='order_status'),
      subOrderId?: long(name='sub_order_id'),
      thirdDepartId?: string(name='third_depart_id'),
      thirdpartApplyId?: string(name='thirdpart_apply_id'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }(name='order_base_info'),
    passengerList?: [ 
      {
        costCenterId?: long(name='cost_center_id'),
        costCenterName?: string(name='cost_center_name'),
        costCenterNumber?: string(name='cost_center_number'),
        projectCode?: string(name='project_code'),
        projectId?: long(name='project_id'),
        projectTitle?: string(name='project_title'),
        thirdpartCostCenterId?: string(name='thirdpart_cost_center_id'),
        thirdpartProjectId?: string(name='thirdpart_project_id'),
        userId?: string(name='user_id'),
        userName?: string(name='user_name'),
        userType?: int32(name='user_type'),
      }
    ](name='passenger_list'),
    priceInfoList?: [ 
      {
        categoryCode?: int32(name='category_code'),
        gmtCreate?: long(name='gmt_create'),
        payType?: int32(name='pay_type'),
        personPrice?: long(name='person_price'),
        price?: long(name='price'),
        tradeId?: string(name='trade_id'),
        type?: int32(name='type'),
      }
    ](name='price_info_list'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model CarOrderQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CarOrderQueryResponseBody(name='body'),
}

async function carOrderQuery(request: CarOrderQueryRequest): CarOrderQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CarOrderQueryHeaders{};
  return carOrderQueryWithOptions(request, headers, runtime);
}

async function carOrderQueryWithOptions(request: CarOrderQueryRequest, headers: CarOrderQueryHeaders, runtime: Util.RuntimeOptions): CarOrderQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.subOrderId)) {
    query['sub_order_id'] = request.subOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CarOrderQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/car/v1/order`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CitySearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model CitySearchRequest {
  keyword?: string(name='keyword'),
}

model CitySearchResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    cities?: [ 
      {
        code?: string(name='code'),
        name?: string(name='name'),
        region?: int32(name='region'),
      }
    ](name='cities'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model CitySearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CitySearchResponseBody(name='body'),
}

async function citySearch(request: CitySearchRequest): CitySearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CitySearchHeaders{};
  return citySearchWithOptions(request, headers, runtime);
}

async function citySearchWithOptions(request: CitySearchRequest, headers: CitySearchHeaders, runtime: Util.RuntimeOptions): CitySearchResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CitySearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/city/v1/city`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CommonApplyQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model CommonApplyQueryRequest {
  applyId?: long(name='apply_id'),
  bizCategory?: int32(name='biz_category'),
  userId?: string(name='user_id'),
}

model CommonApplyQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id'),
    bizCategory?: int32(name='biz_category'),
    cause?: string(name='cause'),
    corpId?: string(name='corp_id'),
    extendValue?: string(name='extend_value'),
    gmtCreate?: string(name='gmt_create'),
    status?: int32(name='status'),
    thirdpartCorpId?: string(name='thirdpart_corp_id'),
    thirdpartId?: string(name='thirdpart_id'),
    tripCause?: string(name='trip_cause'),
    userId?: string(name='user_id'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model CommonApplyQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CommonApplyQueryResponseBody(name='body'),
}

async function commonApplyQuery(request: CommonApplyQueryRequest): CommonApplyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CommonApplyQueryHeaders{};
  return commonApplyQueryWithOptions(request, headers, runtime);
}

async function commonApplyQueryWithOptions(request: CommonApplyQueryRequest, headers: CommonApplyQueryHeaders, runtime: Util.RuntimeOptions): CommonApplyQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.bizCategory)) {
    query['biz_category'] = request.bizCategory;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CommonApplyQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/common`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CommonApplySyncHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model CommonApplySyncRequest {
  applyId?: long(name='apply_id'),
  bizCategory?: int32(name='biz_category'),
  remark?: string(name='remark'),
  status?: int32(name='status'),
  thirdpartyFlowId?: string(name='thirdparty_flow_id'),
  userId?: string(name='user_id'),
}

model CommonApplySyncResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: boolean(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model CommonApplySyncResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CommonApplySyncResponseBody(name='body'),
}

async function commonApplySync(request: CommonApplySyncRequest): CommonApplySyncResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CommonApplySyncHeaders{};
  return commonApplySyncWithOptions(request, headers, runtime);
}

async function commonApplySyncWithOptions(request: CommonApplySyncRequest, headers: CommonApplySyncHeaders, runtime: Util.RuntimeOptions): CommonApplySyncResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.bizCategory)) {
    query['biz_category'] = request.bizCategory;
  }
  if (!Util.isUnset(request.remark)) {
    query['remark'] = request.remark;
  }
  if (!Util.isUnset(request.status)) {
    query['status'] = request.status;
  }
  if (!Util.isUnset(request.thirdpartyFlowId)) {
    query['thirdparty_flow_id'] = request.thirdpartyFlowId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CommonApplySync',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/syn-common`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CorpTokenHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripAccessToken?: string(name='x-acs-btrip-access-token'),
}

model CorpTokenRequest {
  appSecret?: string(name='app_secret'),
  corpId?: string(name='corp_id'),
  type?: int32(name='type'),
}

model CorpTokenResponseBody = {
  code?: string(name='code'),
  data?: {
    expire?: long(name='expire'),
    token?: string(name='token'),
  }(name='data'),
  message?: string(name='message'),
  module?: {
    expire?: long(name='expire'),
    start?: long(name='start'),
    token?: string(name='token'),
  }(name='module'),
  requestId?: string(name='requestId'),
  traceId?: string(name='traceId'),
}

model CorpTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CorpTokenResponseBody(name='body'),
}

async function corpToken(request: CorpTokenRequest): CorpTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CorpTokenHeaders{};
  return corpTokenWithOptions(request, headers, runtime);
}

async function corpTokenWithOptions(request: CorpTokenRequest, headers: CorpTokenHeaders, runtime: Util.RuntimeOptions): CorpTokenResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.appSecret)) {
    query['app_secret'] = request.appSecret;
  }
  if (!Util.isUnset(request.corpId)) {
    query['corp_id'] = request.corpId;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripAccessToken)) {
    realHeaders['x-acs-btrip-access-token'] = Util.toJSONString(headers.xAcsBtripAccessToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CorpToken',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/btrip-open-auth/v1/corp-token/action/take`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CostCenterDeleteHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model CostCenterDeleteRequest {
  thirdpartId?: string(name='thirdpart_id'),
}

model CostCenterDeleteResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model CostCenterDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CostCenterDeleteResponseBody(name='body'),
}

async function costCenterDelete(request: CostCenterDeleteRequest): CostCenterDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CostCenterDeleteHeaders{};
  return costCenterDeleteWithOptions(request, headers, runtime);
}

async function costCenterDeleteWithOptions(request: CostCenterDeleteRequest, headers: CostCenterDeleteHeaders, runtime: Util.RuntimeOptions): CostCenterDeleteResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.thirdpartId)) {
    query['thirdpart_id'] = request.thirdpartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CostCenterDelete',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/delete-costcenter`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CostCenterModifyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model CostCenterModifyRequest {
  alipayNo?: string(name='alipay_no'),
  number?: string(name='number'),
  scope?: long(name='scope'),
  thirdpartId?: string(name='thirdpart_id'),
  title?: string(name='title'),
}

model CostCenterModifyResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model CostCenterModifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CostCenterModifyResponseBody(name='body'),
}

async function costCenterModify(request: CostCenterModifyRequest): CostCenterModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CostCenterModifyHeaders{};
  return costCenterModifyWithOptions(request, headers, runtime);
}

async function costCenterModifyWithOptions(request: CostCenterModifyRequest, headers: CostCenterModifyHeaders, runtime: Util.RuntimeOptions): CostCenterModifyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alipayNo)) {
    body['alipay_no'] = request.alipayNo;
  }
  if (!Util.isUnset(request.number)) {
    body['number'] = request.number;
  }
  if (!Util.isUnset(request.scope)) {
    body['scope'] = request.scope;
  }
  if (!Util.isUnset(request.thirdpartId)) {
    body['thirdpart_id'] = request.thirdpartId;
  }
  if (!Util.isUnset(request.title)) {
    body['title'] = request.title;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CostCenterModify',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/modify-costcenter`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CostCenterQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model CostCenterQueryRequest {
  needOrgEntity?: boolean(name='need_org_entity'),
  thirdpartId?: string(name='thirdpart_id'),
  title?: string(name='title'),
  userId?: string(name='user_id'),
}

model CostCenterQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: [ 
    {
      alipayNo?: string(name='alipay_no'),
      corpId?: string(name='corp_id'),
      entityDOS?: [ 
        {
          corpId?: string(name='corp_id'),
          entityId?: string(name='entity_id'),
          entityType?: string(name='entity_type'),
          name?: string(name='name'),
          userNum?: int32(name='user_num'),
        }
      ](name='entity_d_o_s'),
      id?: long(name='id'),
      number?: string(name='number'),
      ruleCode?: long(name='rule_code'),
      scope?: long(name='scope'),
      thirdpartId?: string(name='thirdpart_id'),
      title?: string(name='title'),
    }
  ](name='module'),
  morePage?: boolean(name='more_page'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model CostCenterQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CostCenterQueryResponseBody(name='body'),
}

async function costCenterQuery(request: CostCenterQueryRequest): CostCenterQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CostCenterQueryHeaders{};
  return costCenterQueryWithOptions(request, headers, runtime);
}

async function costCenterQueryWithOptions(request: CostCenterQueryRequest, headers: CostCenterQueryHeaders, runtime: Util.RuntimeOptions): CostCenterQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.needOrgEntity)) {
    query['need_org_entity'] = request.needOrgEntity;
  }
  if (!Util.isUnset(request.thirdpartId)) {
    query['thirdpart_id'] = request.thirdpartId;
  }
  if (!Util.isUnset(request.title)) {
    query['title'] = request.title;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CostCenterQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/costcenter`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CostCenterSaveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model CostCenterSaveRequest {
  alipayNo?: string(name='alipay_no'),
  number?: string(name='number'),
  scope?: long(name='scope'),
  thirdpartId?: string(name='thirdpart_id'),
  title?: string(name='title'),
}

model CostCenterSaveResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    id?: long(name='id'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model CostCenterSaveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CostCenterSaveResponseBody(name='body'),
}

async function costCenterSave(request: CostCenterSaveRequest): CostCenterSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CostCenterSaveHeaders{};
  return costCenterSaveWithOptions(request, headers, runtime);
}

async function costCenterSaveWithOptions(request: CostCenterSaveRequest, headers: CostCenterSaveHeaders, runtime: Util.RuntimeOptions): CostCenterSaveResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alipayNo)) {
    body['alipay_no'] = request.alipayNo;
  }
  if (!Util.isUnset(request.number)) {
    body['number'] = request.number;
  }
  if (!Util.isUnset(request.scope)) {
    body['scope'] = request.scope;
  }
  if (!Util.isUnset(request.thirdpartId)) {
    body['thirdpart_id'] = request.thirdpartId;
  }
  if (!Util.isUnset(request.title)) {
    body['title'] = request.title;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CostCenterSave',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/save-costcenter`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DepartmentSaveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model DepartmentSaveRequest {
  departList?: [ 
    {
      departId?: long(name='depart_id'),
      departName?: string(name='depart_name'),
      departPid?: long(name='depart_pid'),
      managerIds?: string(name='manager_ids'),
      status?: int32(name='status'),
      thirdDepartId?: string(name='third_depart_id'),
      thirdDepartPid?: string(name='third_depart_pid'),
    }
  ](name='depart_list'),
}

model DepartmentSaveShrinkRequest {
  departListShrink?: string(name='depart_list'),
}

model DepartmentSaveResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: string(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model DepartmentSaveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DepartmentSaveResponseBody(name='body'),
}

async function departmentSave(request: DepartmentSaveRequest): DepartmentSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DepartmentSaveHeaders{};
  return departmentSaveWithOptions(request, headers, runtime);
}

async function departmentSaveWithOptions(tmpReq: DepartmentSaveRequest, headers: DepartmentSaveHeaders, runtime: Util.RuntimeOptions): DepartmentSaveResponse {
  Util.validateModel(tmpReq);
  var request = new DepartmentSaveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.departList)) {
    request.departListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.departList, 'depart_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.departListShrink)) {
    body['depart_list'] = request.departListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DepartmentSave',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/department/v1/department`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model EntityAddHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model EntityAddRequest {
  entityDOList?: [ 
    {
      entityId?: string(name='entity_id'),
      entityType?: string(name='entity_type'),
    }
  ](name='entity_d_o_list'),
  thirdpartId?: string(name='thirdpart_id'),
}

model EntityAddShrinkRequest {
  entityDOListShrink?: string(name='entity_d_o_list'),
  thirdpartId?: string(name='thirdpart_id'),
}

model EntityAddResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    addNum?: int32(name='add_num'),
    selectedUserNum?: int32(name='selected_user_num'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model EntityAddResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EntityAddResponseBody(name='body'),
}

async function entityAdd(request: EntityAddRequest): EntityAddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new EntityAddHeaders{};
  return entityAddWithOptions(request, headers, runtime);
}

async function entityAddWithOptions(tmpReq: EntityAddRequest, headers: EntityAddHeaders, runtime: Util.RuntimeOptions): EntityAddResponse {
  Util.validateModel(tmpReq);
  var request = new EntityAddShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entityDOList)) {
    request.entityDOListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entityDOList, 'entity_d_o_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityDOListShrink)) {
    body['entity_d_o_list'] = request.entityDOListShrink;
  }
  if (!Util.isUnset(request.thirdpartId)) {
    body['thirdpart_id'] = request.thirdpartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EntityAdd',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/add-entity`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model EntityDeleteHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model EntityDeleteRequest {
  delAll?: boolean(name='del_all'),
  entityDOList?: [ 
    {
      entityId?: string(name='entity_id'),
      entityType?: string(name='entity_type'),
    }
  ](name='entity_d_o_list'),
  thirdpartId?: string(name='thirdpart_id'),
}

model EntityDeleteShrinkRequest {
  delAll?: boolean(name='del_all'),
  entityDOListShrink?: string(name='entity_d_o_list'),
  thirdpartId?: string(name='thirdpart_id'),
}

model EntityDeleteResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    removeNum?: int32(name='remove_num'),
    selectedUserNum?: int32(name='selected_user_num'),
  }(name='module'),
  morePage?: boolean(name='more_page'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model EntityDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EntityDeleteResponseBody(name='body'),
}

async function entityDelete(request: EntityDeleteRequest): EntityDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new EntityDeleteHeaders{};
  return entityDeleteWithOptions(request, headers, runtime);
}

async function entityDeleteWithOptions(tmpReq: EntityDeleteRequest, headers: EntityDeleteHeaders, runtime: Util.RuntimeOptions): EntityDeleteResponse {
  Util.validateModel(tmpReq);
  var request = new EntityDeleteShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entityDOList)) {
    request.entityDOListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entityDOList, 'entity_d_o_list', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.delAll)) {
    query['del_all'] = request.delAll;
  }
  if (!Util.isUnset(request.thirdpartId)) {
    query['thirdpart_id'] = request.thirdpartId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.entityDOListShrink)) {
    body['entity_d_o_list'] = request.entityDOListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EntityDelete',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/entity/action/delete`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model EntitySetHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model EntitySetRequest {
  entityDOList?: [ 
    {
      entityId?: string(name='entity_id'),
      entityType?: string(name='entity_type'),
    }
  ](name='entity_d_o_list'),
  thirdpartId?: string(name='thirdpart_id'),
}

model EntitySetShrinkRequest {
  entityDOListShrink?: string(name='entity_d_o_list'),
  thirdpartId?: string(name='thirdpart_id'),
}

model EntitySetResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    addNum?: int32(name='add_num'),
    removeNum?: int32(name='remove_num'),
    selectedUserNum?: int32(name='selected_user_num'),
  }(name='module'),
  morePage?: boolean(name='more_page'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model EntitySetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EntitySetResponseBody(name='body'),
}

async function entitySet(request: EntitySetRequest): EntitySetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new EntitySetHeaders{};
  return entitySetWithOptions(request, headers, runtime);
}

async function entitySetWithOptions(tmpReq: EntitySetRequest, headers: EntitySetHeaders, runtime: Util.RuntimeOptions): EntitySetResponse {
  Util.validateModel(tmpReq);
  var request = new EntitySetShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entityDOList)) {
    request.entityDOListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entityDOList, 'entity_d_o_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityDOListShrink)) {
    body['entity_d_o_list'] = request.entityDOListShrink;
  }
  if (!Util.isUnset(request.thirdpartId)) {
    body['thirdpart_id'] = request.thirdpartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EntitySet',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/set-entity`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model EstimatedPriceQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model EstimatedPriceQueryRequest {
  arrCity?: string(name='arr_city'),
  category?: string(name='category'),
  depCity?: string(name='dep_city'),
  endTime?: long(name='end_time'),
  itineraryId?: string(name='itinerary_id'),
  startTime?: long(name='start_time'),
  userId?: string(name='user_id'),
}

model EstimatedPriceQueryResponseBody = {
  code?: int32(name='code'),
  message?: string(name='message'),
  module?: {
    hotelFeeDetail?: [ 
      {
        city?: string(name='city'),
        criterion?: long(name='criterion'),
        itineraryId?: string(name='itinerary_id'),
        total?: long(name='total'),
        tripDays?: int32(name='trip_days'),
      }
    ](name='hotel_fee_detail'),
    trafficFee?: {
      btripRoutes?: [ 
        {
          arrDate?: long(name='arr_date'),
          btripType?: int32(name='btrip_type'),
          cheapest?: {
            arrTime?: string(name='arr_time'),
            depTime?: string(name='dep_time'),
            fee?: long(name='fee'),
            seatGrade?: string(name='seat_grade'),
            vehicleNo?: string(name='vehicle_no'),
          }(name='cheapest'),
          depDate?: long(name='dep_date'),
          destCity?: string(name='dest_city'),
          errMsg?: string(name='err_msg'),
          itineraryId?: string(name='itinerary_id'),
          itineraryIndex?: int32(name='itinerary_index'),
          mostExpensive?: {
            arrTime?: string(name='arr_time'),
            depTime?: string(name='dep_time'),
            fee?: long(name='fee'),
            seatGrade?: string(name='seat_grade'),
            vehicleNo?: string(name='vehicle_no'),
          }(name='most_expensive'),
          orgCity?: string(name='org_city'),
          success?: boolean(name='success'),
        }
      ](name='btrip_routes'),
      errMsg?: string(name='err_msg'),
      maxFee?: long(name='max_fee'),
      minFee?: long(name='min_fee'),
      success?: boolean(name='success'),
    }(name='traffic_fee'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model EstimatedPriceQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EstimatedPriceQueryResponseBody(name='body'),
}

async function estimatedPriceQuery(request: EstimatedPriceQueryRequest): EstimatedPriceQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new EstimatedPriceQueryHeaders{};
  return estimatedPriceQueryWithOptions(request, headers, runtime);
}

async function estimatedPriceQueryWithOptions(request: EstimatedPriceQueryRequest, headers: EstimatedPriceQueryHeaders, runtime: Util.RuntimeOptions): EstimatedPriceQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.arrCity)) {
    query['arr_city'] = request.arrCity;
  }
  if (!Util.isUnset(request.category)) {
    query['category'] = request.category;
  }
  if (!Util.isUnset(request.depCity)) {
    query['dep_city'] = request.depCity;
  }
  if (!Util.isUnset(request.endTime)) {
    query['end_time'] = request.endTime;
  }
  if (!Util.isUnset(request.itineraryId)) {
    query['itinerary_id'] = request.itineraryId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['start_time'] = request.startTime;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EstimatedPriceQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/estimated-price`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ExceedApplySyncHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model ExceedApplySyncRequest {
  applyId?: long(name='apply_id'),
  bizCategory?: int32(name='biz_category'),
  remark?: string(name='remark'),
  status?: int32(name='status'),
  thirdpartyFlowId?: string(name='thirdparty_flow_id'),
  userId?: string(name='user_id'),
}

model ExceedApplySyncResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: boolean(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model ExceedApplySyncResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExceedApplySyncResponseBody(name='body'),
}

async function exceedApplySync(request: ExceedApplySyncRequest): ExceedApplySyncResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ExceedApplySyncHeaders{};
  return exceedApplySyncWithOptions(request, headers, runtime);
}

async function exceedApplySyncWithOptions(request: ExceedApplySyncRequest, headers: ExceedApplySyncHeaders, runtime: Util.RuntimeOptions): ExceedApplySyncResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.bizCategory)) {
    query['biz_category'] = request.bizCategory;
  }
  if (!Util.isUnset(request.remark)) {
    query['remark'] = request.remark;
  }
  if (!Util.isUnset(request.status)) {
    query['status'] = request.status;
  }
  if (!Util.isUnset(request.thirdpartyFlowId)) {
    query['thirdparty_flow_id'] = request.thirdpartyFlowId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExceedApplySync',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/syn-exceed`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model FlightBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model FlightBillSettlementQueryRequest {
  pageNo?: int32(name='page_no'),
  pageSize?: int32(name='page_size'),
  periodEnd?: string(name='period_end'),
  periodStart?: string(name='period_start'),
}

model FlightBillSettlementQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category'),
    corpId?: string(name='corp_id'),
    dataList?: [ 
      {
        advanceDay?: int32(name='advance_day'),
        airlineCorpCode?: string(name='airline_corp_code'),
        airlineCorpName?: string(name='airline_corp_name'),
        alipayTradeNo?: string(name='alipay_trade_no'),
        applyId?: string(name='apply_id'),
        arrAirportCode?: string(name='arr_airport_code'),
        arrCity?: string(name='arr_city'),
        arrDate?: string(name='arr_date'),
        arrStation?: string(name='arr_station'),
        arrTime?: string(name='arr_time'),
        billRecordTime?: string(name='bill_record_time'),
        bookTime?: string(name='book_time'),
        bookerId?: string(name='booker_id'),
        bookerJobNo?: string(name='booker_job_no'),
        bookerName?: string(name='booker_name'),
        btripCouponFee?: double(name='btrip_coupon_fee'),
        buildFee?: double(name='build_fee'),
        cabin?: string(name='cabin'),
        cabinClass?: string(name='cabin_class'),
        capitalDirection?: string(name='capital_direction'),
        cascadeDepartment?: string(name='cascade_department'),
        changeFee?: double(name='change_fee'),
        corpPayOrderFee?: double(name='corp_pay_order_fee'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number'),
        coupon?: double(name='coupon'),
        depAirportCode?: string(name='dep_airport_code'),
        department?: string(name='department'),
        departmentId?: string(name='department_id'),
        deptCity?: string(name='dept_city'),
        deptDate?: string(name='dept_date'),
        deptStation?: string(name='dept_station'),
        deptTime?: string(name='dept_time'),
        discount?: string(name='discount'),
        feeType?: string(name='fee_type'),
        flightNo?: string(name='flight_no'),
        index?: string(name='index'),
        insuranceFee?: double(name='insurance_fee'),
        invoiceTitle?: string(name='invoice_title'),
        itineraryNum?: string(name='itinerary_num'),
        itineraryPrice?: double(name='itinerary_price'),
        mostDifferenceDeptTime?: string(name='most_difference_dept_time'),
        mostDifferenceDiscount?: string(name='most_difference_discount'),
        mostDifferenceFlightNo?: string(name='most_difference_flight_no'),
        mostDifferencePrice?: double(name='most_difference_price'),
        mostDifferenceReason?: string(name='most_difference_reason'),
        mostPrice?: double(name='most_price'),
        negotiationCouponFee?: double(name='negotiation_coupon_fee'),
        oilFee?: double(name='oil_fee'),
        orderId?: string(name='order_id'),
        overApplyId?: string(name='over_apply_id'),
        primaryId?: long(name='primary_id'),
        projectCode?: string(name='project_code'),
        projectName?: string(name='project_name'),
        refundFee?: double(name='refund_fee'),
        refundUpgradeCost?: double(name='refund_upgrade_cost'),
        remark?: string(name='remark'),
        repeatRefund?: string(name='repeat_refund'),
        sealPrice?: double(name='seal_price'),
        serviceFee?: double(name='service_fee'),
        settlementFee?: double(name='settlement_fee'),
        settlementGrantFee?: double(name='settlement_grant_fee'),
        settlementTime?: string(name='settlement_time'),
        settlementType?: string(name='settlement_type'),
        status?: int32(name='status'),
        ticketId?: string(name='ticket_id'),
        travelerId?: string(name='traveler_id'),
        travelerJobNo?: string(name='traveler_job_no'),
        travelerName?: string(name='traveler_name'),
        upgradeCost?: double(name='upgrade_cost'),
        voucherType?: int32(name='voucher_type'),
      }
    ](name='data_list'),
    periodEnd?: string(name='period_end'),
    periodStart?: string(name='period_start'),
    totalNum?: long(name='total_num'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model FlightBillSettlementQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlightBillSettlementQueryResponseBody(name='body'),
}

async function flightBillSettlementQuery(request: FlightBillSettlementQueryRequest): FlightBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightBillSettlementQueryHeaders{};
  return flightBillSettlementQueryWithOptions(request, headers, runtime);
}

async function flightBillSettlementQueryWithOptions(request: FlightBillSettlementQueryRequest, headers: FlightBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): FlightBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/flight/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model FlightExceedApplyQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model FlightExceedApplyQueryRequest {
  applyId?: long(name='apply_id'),
}

model FlightExceedApplyQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id'),
    applyIntentionInfoDo?: {
      arrCity?: string(name='arr_city'),
      arrCityName?: string(name='arr_city_name'),
      arrTime?: string(name='arr_time'),
      cabin?: string(name='cabin'),
      cabinClass?: int32(name='cabin_class'),
      cabinClassStr?: string(name='cabin_class_str'),
      depCity?: string(name='dep_city'),
      depCityName?: string(name='dep_city_name'),
      depTime?: string(name='dep_time'),
      discount?: string(name='discount'),
      flightNo?: string(name='flight_no'),
      price?: long(name='price'),
      type?: int32(name='type'),
    }(name='apply_intention_info_do'),
    btripCause?: string(name='btrip_cause'),
    corpId?: string(name='corp_id'),
    exceedReason?: string(name='exceed_reason'),
    exceedType?: int32(name='exceed_type'),
    originStandard?: string(name='origin_standard'),
    status?: int32(name='status'),
    submitTime?: string(name='submit_time'),
    thirdpartApplyId?: string(name='thirdpart_apply_id'),
    thirdpartCorpId?: string(name='thirdpart_corp_id'),
    userId?: string(name='user_id'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model FlightExceedApplyQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlightExceedApplyQueryResponseBody(name='body'),
}

async function flightExceedApplyQuery(request: FlightExceedApplyQueryRequest): FlightExceedApplyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightExceedApplyQueryHeaders{};
  return flightExceedApplyQueryWithOptions(request, headers, runtime);
}

async function flightExceedApplyQueryWithOptions(request: FlightExceedApplyQueryRequest, headers: FlightExceedApplyQueryHeaders, runtime: Util.RuntimeOptions): FlightExceedApplyQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightExceedApplyQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/flight-exceed`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model FlightOrderListQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model FlightOrderListQueryRequest {
  allApply?: boolean(name='all_apply'),
  applyId?: long(name='apply_id'),
  departId?: string(name='depart_id'),
  endTime?: string(name='end_time'),
  page?: int32(name='page'),
  pageSize?: int32(name='page_size'),
  startTime?: string(name='start_time'),
  thirdpartApplyId?: string(name='thirdpart_apply_id'),
  updateEndTime?: string(name='update_end_time'),
  updateStartTime?: string(name='update_start_time'),
  userId?: string(name='user_id'),
}

model FlightOrderListQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: [ 
    {
      applyId?: long(name='apply_id'),
      arrAirport?: string(name='arr_airport'),
      arrCity?: string(name='arr_city'),
      btripTitle?: string(name='btrip_title'),
      cabinClass?: string(name='cabin_class'),
      contactName?: string(name='contact_name'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      costCenter?: {
        corpId?: string(name='corp_id'),
        id?: long(name='id'),
        name?: string(name='name'),
        number?: string(name='number'),
      }(name='cost_center'),
      depAirport?: string(name='dep_airport'),
      depCity?: string(name='dep_city'),
      depDate?: string(name='dep_date'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      discount?: string(name='discount'),
      flightNo?: string(name='flight_no'),
      gmtCreate?: string(name='gmt_create'),
      gmtModified?: string(name='gmt_modified'),
      id?: long(name='id'),
      insureInfoList?: [ 
        {
          insureNo?: string(name='insure_no'),
          name?: string(name='name'),
          status?: int32(name='status'),
        }
      ](name='insure_info_list'),
      invoice?: {
        id?: long(name='id'),
        title?: string(name='title'),
      }(name='invoice'),
      passengerCount?: int32(name='passenger_count'),
      passengerName?: string(name='passenger_name'),
      priceInfoList?: [ 
        {
          categoryCode?: int32(name='category_code'),
          categoryType?: int32(name='category_type'),
          changeFlightNo?: string(name='change_flight_no'),
          discount?: string(name='discount'),
          endTime?: string(name='end_time'),
          gmtCreate?: string(name='gmt_create'),
          originalTicketNo?: string(name='original_ticket_no'),
          passengerName?: string(name='passenger_name'),
          payType?: int32(name='pay_type'),
          price?: double(name='price'),
          startTime?: string(name='start_time'),
          ticketNo?: string(name='ticket_no'),
          tradeId?: string(name='trade_id'),
          type?: int32(name='type'),
        }
      ](name='price_info_list'),
      projectCode?: string(name='project_code'),
      projectId?: long(name='project_id'),
      projectTitle?: string(name='project_title'),
      retDate?: string(name='ret_date'),
      status?: int32(name='status'),
      thirdPartProjectId?: string(name='third_part_project_id'),
      thirdpartApplyId?: string(name='thirdpart_apply_id'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id'),
      tripType?: int32(name='trip_type'),
      userAffiliateList?: [ 
        {
          userId?: string(name='user_id'),
          userName?: string(name='user_name'),
        }
      ](name='user_affiliate_list'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='module'),
  pageInfo?: {
    page?: int32(name='page'),
    pageSize?: int32(name='page_size'),
    totalNumber?: int32(name='total_number'),
  }(name='page_info'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model FlightOrderListQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlightOrderListQueryResponseBody(name='body'),
}

async function flightOrderListQuery(request: FlightOrderListQueryRequest): FlightOrderListQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightOrderListQueryHeaders{};
  return flightOrderListQueryWithOptions(request, headers, runtime);
}

async function flightOrderListQueryWithOptions(request: FlightOrderListQueryRequest, headers: FlightOrderListQueryHeaders, runtime: Util.RuntimeOptions): FlightOrderListQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.allApply)) {
    query['all_apply'] = request.allApply;
  }
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.departId)) {
    query['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['end_time'] = request.endTime;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['start_time'] = request.startTime;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    query['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.updateEndTime)) {
    query['update_end_time'] = request.updateEndTime;
  }
  if (!Util.isUnset(request.updateStartTime)) {
    query['update_start_time'] = request.updateStartTime;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightOrderListQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/flight/v1/order-list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model FlightOrderQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model FlightOrderQueryRequest {
  orderId?: long(name='order_id'),
  userId?: string(name='user_id'),
}

model FlightOrderQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    flightChangeTicketInfoList?: [ 
      {
        arrTime?: string(name='arr_time'),
        changeCabin?: string(name='change_cabin'),
        changeCabinLevel?: string(name='change_cabin_level'),
        changeFee?: double(name='change_fee'),
        changeFlightNo?: string(name='change_flight_no'),
        changeOrderId?: long(name='change_order_id'),
        changeReason?: string(name='change_reason'),
        changeType?: int32(name='change_type'),
        depTime?: string(name='dep_time'),
        gmtCreate?: string(name='gmt_create'),
        gmtModify?: string(name='gmt_modify'),
        originTicketNo?: string(name='origin_ticket_no'),
        ticketNo?: string(name='ticket_no'),
        upgradeFee?: double(name='upgrade_fee'),
      }
    ](name='flight_change_ticket_info_list'),
    flightInfoList?: [ 
      {
        airlineCode?: string(name='airline_code'),
        airlineName?: string(name='airline_name'),
        arrAirportCode?: string(name='arr_airport_code'),
        arrAirportName?: string(name='arr_airport_name'),
        arrCityCode?: string(name='arr_city_code'),
        arrCityName?: string(name='arr_city_name'),
        arrTime?: string(name='arr_time'),
        cabin?: string(name='cabin'),
        cabinLevel?: string(name='cabin_level'),
        depAirportCode?: string(name='dep_airport_code'),
        depAirportName?: string(name='dep_airport_name'),
        depCityCode?: string(name='dep_city_code'),
        depCityName?: string(name='dep_city_name'),
        depTime?: string(name='dep_time'),
        flightMile?: int32(name='flight_mile'),
        flightNo?: string(name='flight_no'),
      }
    ](name='flight_info_list'),
    flightRefundTicketInfoList?: [ 
      {
        gmtCreate?: string(name='gmt_create'),
        gmtModify?: string(name='gmt_modify'),
        refundOrderId?: long(name='refund_order_id'),
        refundReason?: string(name='refund_reason'),
        refundTicketFee?: double(name='refund_ticket_fee'),
        refundType?: int32(name='refund_type'),
        ticketNo?: string(name='ticket_no'),
      }
    ](name='flight_refund_ticket_info_list'),
    flightTicketInfoList?: [ 
      {
        buildPrice?: double(name='build_price'),
        changed?: boolean(name='changed'),
        discount?: int32(name='discount'),
        gmtCreate?: string(name='gmt_create'),
        gmtModify?: string(name='gmt_modify'),
        oilPrice?: double(name='oil_price'),
        payType?: int32(name='pay_type'),
        settlePrice?: double(name='settle_price'),
        ticketNo?: string(name='ticket_no'),
        ticketPrice?: double(name='ticket_price'),
        ticketStatus?: string(name='ticket_status'),
        ticketStatusCode?: int32(name='ticket_status_code'),
        userId?: string(name='user_id'),
      }
    ](name='flight_ticket_info_list'),
    insuranceInfoList?: [ 
      {
        amount?: double(name='amount'),
        insuranceNo?: string(name='insurance_no'),
        status?: int32(name='status'),
        type?: string(name='type'),
      }
    ](name='insurance_info_list'),
    invoiceInfo?: {
      id?: long(name='id'),
      title?: string(name='title'),
    }(name='invoice_info'),
    orderBaseInfo?: {
      applyId?: string(name='apply_id'),
      btripTitle?: string(name='btrip_title'),
      contactName?: string(name='contact_name'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      gmtCreate?: string(name='gmt_create'),
      gmtModify?: string(name='gmt_modify'),
      itineraryId?: string(name='itinerary_id'),
      orderId?: long(name='order_id'),
      orderStatus?: int32(name='order_status'),
      thirdpartApplyId?: string(name='thirdpart_apply_id'),
      thirdpartCorpId?: string(name='thirdpart_corp_id'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id'),
      tripType?: int32(name='trip_type'),
      userId?: string(name='user_id'),
    }(name='order_base_info'),
    passengerInfoList?: [ 
      {
        costCenterId?: long(name='cost_center_id'),
        costCenterName?: string(name='cost_center_name'),
        costCenterNumber?: string(name='cost_center_number'),
        projectCode?: string(name='project_code'),
        projectId?: long(name='project_id'),
        projectTitle?: string(name='project_title'),
        thirdpartProjectId?: string(name='thirdpart_project_id'),
        userId?: string(name='user_id'),
        userName?: string(name='user_name'),
        userType?: int32(name='user_type'),
      }
    ](name='passenger_info_list'),
    priceInfoList?: [ 
      {
        categoryCode?: int32(name='category_code'),
        gmtCreate?: string(name='gmt_create'),
        passengerName?: string(name='passenger_name'),
        payType?: int32(name='pay_type'),
        price?: double(name='price'),
        tradeId?: string(name='trade_id'),
        type?: int32(name='type'),
      }
    ](name='price_info_list'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model FlightOrderQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlightOrderQueryResponseBody(name='body'),
}

async function flightOrderQuery(request: FlightOrderQueryRequest): FlightOrderQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightOrderQueryHeaders{};
  return flightOrderQueryWithOptions(request, headers, runtime);
}

async function flightOrderQueryWithOptions(request: FlightOrderQueryRequest, headers: FlightOrderQueryHeaders, runtime: Util.RuntimeOptions): FlightOrderQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightOrderQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/flight/v1/order`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model HotelBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model HotelBillSettlementQueryRequest {
  pageNo?: int32(name='page_no'),
  pageSize?: int32(name='page_size'),
  periodEnd?: string(name='period_end'),
  periodStart?: string(name='period_start'),
}

model HotelBillSettlementQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category'),
    corpId?: string(name='corp_id'),
    dataList?: [ 
      {
        alipayTradeNo?: string(name='alipay_trade_no'),
        applyId?: string(name='apply_id'),
        billRecordTime?: string(name='bill_record_time'),
        bookTime?: string(name='book_time'),
        bookerId?: string(name='booker_id'),
        bookerJobNo?: string(name='booker_job_no'),
        bookerName?: string(name='booker_name'),
        capitalDirection?: string(name='capital_direction'),
        cascadeDepartment?: string(name='cascade_department'),
        checkInDate?: string(name='check_in_date'),
        checkoutDate?: string(name='checkout_date'),
        city?: string(name='city'),
        cityCode?: string(name='city_code'),
        corpRefundFee?: double(name='corp_refund_fee'),
        corpTotalFee?: double(name='corp_total_fee'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number'),
        department?: string(name='department'),
        departmentId?: string(name='department_id'),
        feeType?: string(name='fee_type'),
        fees?: double(name='fees'),
        fuPointFee?: double(name='fu_point_fee'),
        hotelName?: string(name='hotel_name'),
        index?: string(name='index'),
        invoiceTitle?: string(name='invoice_title'),
        isNegotiation?: string(name='is_negotiation'),
        isShareStr?: string(name='is_share_str'),
        nights?: int32(name='nights'),
        orderId?: string(name='order_id'),
        orderPrice?: double(name='order_price'),
        orderType?: string(name='order_type'),
        overApplyId?: string(name='over_apply_id'),
        personRefundFee?: double(name='person_refund_fee'),
        personSettlePrice?: double(name='person_settle_price'),
        primaryId?: long(name='primary_id'),
        projectCode?: string(name='project_code'),
        projectName?: string(name='project_name'),
        promotionFee?: double(name='promotion_fee'),
        remark?: string(name='remark'),
        roomNumber?: int32(name='room_number'),
        roomPrice?: double(name='room_price'),
        roomType?: string(name='room_type'),
        serviceFee?: double(name='service_fee'),
        settlementFee?: double(name='settlement_fee'),
        settlementGrantFee?: double(name='settlement_grant_fee'),
        settlementTime?: string(name='settlement_time'),
        settlementType?: string(name='settlement_type'),
        status?: int32(name='status'),
        totalNights?: int32(name='total_nights'),
        travelerId?: string(name='traveler_id'),
        travelerJobNo?: string(name='traveler_job_no'),
        travelerName?: string(name='traveler_name'),
        voucherType?: int32(name='voucher_type'),
      }
    ](name='data_list'),
    periodEnd?: string(name='period_end'),
    periodStart?: string(name='period_start'),
    totalNum?: long(name='total_num'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model HotelBillSettlementQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelBillSettlementQueryResponseBody(name='body'),
}

async function hotelBillSettlementQuery(request: HotelBillSettlementQueryRequest): HotelBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelBillSettlementQueryHeaders{};
  return hotelBillSettlementQueryWithOptions(request, headers, runtime);
}

async function hotelBillSettlementQueryWithOptions(request: HotelBillSettlementQueryRequest, headers: HotelBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): HotelBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/hotel/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model HotelExceedApplyQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model HotelExceedApplyQueryRequest {
  applyId?: long(name='apply_id'),
}

model HotelExceedApplyQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id'),
    applyIntentionInfoDo?: {
      checkIn?: string(name='check_in'),
      checkOut?: string(name='check_out'),
      cityCode?: string(name='city_code'),
      cityName?: string(name='city_name'),
      price?: long(name='price'),
      together?: boolean(name='together'),
      type?: int32(name='type'),
    }(name='apply_intention_info_do'),
    btripCause?: string(name='btrip_cause'),
    corpId?: string(name='corp_id'),
    exceedReason?: string(name='exceed_reason'),
    exceedType?: int32(name='exceed_type'),
    originStandard?: string(name='origin_standard'),
    status?: int32(name='status'),
    submitTime?: string(name='submit_time'),
    thirdpartApplyId?: string(name='thirdpart_apply_id'),
    thirdpartCorpId?: string(name='thirdpart_corp_id'),
    userId?: string(name='user_id'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model HotelExceedApplyQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelExceedApplyQueryResponseBody(name='body'),
}

async function hotelExceedApplyQuery(request: HotelExceedApplyQueryRequest): HotelExceedApplyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelExceedApplyQueryHeaders{};
  return hotelExceedApplyQueryWithOptions(request, headers, runtime);
}

async function hotelExceedApplyQueryWithOptions(request: HotelExceedApplyQueryRequest, headers: HotelExceedApplyQueryHeaders, runtime: Util.RuntimeOptions): HotelExceedApplyQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelExceedApplyQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/hotel-exceed`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model HotelOrderListQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model HotelOrderListQueryRequest {
  allApply?: boolean(name='all_apply'),
  applyId?: long(name='apply_id'),
  departId?: string(name='depart_id'),
  endTime?: string(name='end_time'),
  page?: int32(name='page'),
  pageSize?: int32(name='page_size'),
  startTime?: string(name='start_time'),
  thirdpartApplyId?: string(name='thirdpart_apply_id'),
  updateEndTime?: string(name='update_end_time'),
  updateStartTime?: string(name='update_start_time'),
  userId?: string(name='user_id'),
}

model HotelOrderListQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: [ 
    {
      applyId?: long(name='apply_id'),
      btripTitle?: string(name='btrip_title'),
      checkIn?: string(name='check_in'),
      checkOut?: string(name='check_out'),
      city?: string(name='city'),
      contactName?: string(name='contact_name'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      costCenter?: {
        corpId?: string(name='corp_id'),
        id?: long(name='id'),
        name?: string(name='name'),
        number?: string(name='number'),
      }(name='cost_center'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      gmtCreate?: string(name='gmt_create'),
      gmtModified?: string(name='gmt_modified'),
      guest?: string(name='guest'),
      hotelName?: string(name='hotel_name'),
      hotelSupportVatInvoiceType?: int32(name='hotel_support_vat_invoice_type'),
      id?: long(name='id'),
      invoice?: {
        id?: long(name='id'),
        invoiceType?: int32(name='invoice_type'),
        title?: string(name='title'),
      }(name='invoice'),
      night?: int32(name='night'),
      orderStatus?: int32(name='order_status'),
      orderStatusDesc?: string(name='order_status_desc'),
      orderType?: int32(name='order_type'),
      orderTypeDesc?: string(name='order_type_desc'),
      priceInfoList?: [ 
        {
          categoryCode?: int32(name='category_code'),
          categoryType?: int32(name='category_type'),
          gmtCreate?: string(name='gmt_create'),
          passengerName?: string(name='passenger_name'),
          payType?: int32(name='pay_type'),
          price?: double(name='price'),
          tradeId?: string(name='trade_id'),
          type?: int32(name='type'),
        }
      ](name='price_info_list'),
      projectCode?: string(name='project_code'),
      projectId?: long(name='project_id'),
      projectTitle?: string(name='project_title'),
      roomNum?: int32(name='room_num'),
      roomType?: string(name='room_type'),
      thirdpartApplyId?: string(name='thirdpart_apply_id'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id'),
      thirdpartProjectId?: string(name='thirdpart_project_id'),
      userAffiliateList?: [ 
        {
          userId?: string(name='user_id'),
          userName?: string(name='user_name'),
        }
      ](name='user_affiliate_list'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='module'),
  pageInfo?: {
    page?: int32(name='page'),
    pageSize?: int32(name='page_size'),
    totalNumber?: int32(name='total_number'),
  }(name='page_info'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model HotelOrderListQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelOrderListQueryResponseBody(name='body'),
}

async function hotelOrderListQuery(request: HotelOrderListQueryRequest): HotelOrderListQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelOrderListQueryHeaders{};
  return hotelOrderListQueryWithOptions(request, headers, runtime);
}

async function hotelOrderListQueryWithOptions(request: HotelOrderListQueryRequest, headers: HotelOrderListQueryHeaders, runtime: Util.RuntimeOptions): HotelOrderListQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.allApply)) {
    query['all_apply'] = request.allApply;
  }
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.departId)) {
    query['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['end_time'] = request.endTime;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['start_time'] = request.startTime;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    query['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.updateEndTime)) {
    query['update_end_time'] = request.updateEndTime;
  }
  if (!Util.isUnset(request.updateStartTime)) {
    query['update_start_time'] = request.updateStartTime;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelOrderListQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/hotel/v1/order-list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model HotelOrderQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model HotelOrderQueryRequest {
  orderId?: long(name='order_id'),
}

model HotelOrderQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    hotelInfo?: {
      checkIn?: long(name='check_in'),
      checkOut?: long(name='check_out'),
      city?: string(name='city'),
      hotelName?: string(name='hotel_name'),
      hotelSupportVatInvoiceType?: int32(name='hotel_support_vat_invoice_type'),
      night?: int32(name='night'),
      roomNum?: int32(name='room_num'),
      roomType?: string(name='room_type'),
    }(name='hotel_info'),
    invoiceInfo?: {
      id?: long(name='id'),
      title?: string(name='title'),
    }(name='invoice_info'),
    orderBaseInfo?: {
      applyId?: string(name='apply_id'),
      btripTitle?: string(name='btrip_title'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      gmtCreate?: long(name='gmt_create'),
      gmtModified?: long(name='gmt_modified'),
      id?: long(name='id'),
      itineraryId?: string(name='itinerary_id'),
      orderStatus?: int32(name='order_status'),
      orderType?: int32(name='order_type'),
      thirdpartApplyId?: string(name='thirdpart_apply_id'),
      thirdpartDepartId?: string(name='thirdpart_depart_id'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }(name='order_base_info'),
    passengerList?: [ 
      {
        costCenterId?: long(name='cost_center_id'),
        costCenterName?: string(name='cost_center_name'),
        costCenterNumber?: string(name='cost_center_number'),
        projectCode?: string(name='project_code'),
        projectId?: long(name='project_id'),
        projectTitle?: string(name='project_title'),
        thirdpartCostCenterId?: string(name='thirdpart_cost_center_id'),
        thirdpartProjectId?: string(name='thirdpart_project_id'),
        userId?: string(name='user_id'),
        userName?: string(name='user_name'),
        userType?: int32(name='user_type'),
      }
    ](name='passenger_list'),
    priceInfoList?: [ 
      {
        categoryCode?: int32(name='category_code'),
        gmtCreate?: long(name='gmt_create'),
        payType?: int32(name='pay_type'),
        price?: double(name='price'),
        tradeId?: string(name='trade_id'),
        type?: int32(name='type'),
      }
    ](name='price_info_list'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model HotelOrderQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelOrderQueryResponseBody(name='body'),
}

async function hotelOrderQuery(request: HotelOrderQueryRequest): HotelOrderQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelOrderQueryHeaders{};
  return hotelOrderQueryWithOptions(request, headers, runtime);
}

async function hotelOrderQueryWithOptions(request: HotelOrderQueryRequest, headers: HotelOrderQueryHeaders, runtime: Util.RuntimeOptions): HotelOrderQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelOrderQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/hotel/v1/order`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model IeFlightBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model IeFlightBillSettlementQueryRequest {
  pageNo?: int32(name='page_no'),
  pageSize?: int32(name='page_size'),
  periodEnd?: string(name='period_end'),
  periodStart?: string(name='period_start'),
}

model IeFlightBillSettlementQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category'),
    corpId?: string(name='corp_id'),
    dataList?: [ 
      {
        advanceDay?: int32(name='advance_day'),
        airlineCorpCode?: string(name='airline_corp_code'),
        airlineCorpName?: string(name='airline_corp_name'),
        alipayTradeNo?: string(name='alipay_trade_no'),
        applyId?: string(name='apply_id'),
        arrAirportCode?: string(name='arr_airport_code'),
        arrCity?: string(name='arr_city'),
        arrDate?: string(name='arr_date'),
        arrStation?: string(name='arr_station'),
        arrTime?: string(name='arr_time'),
        billRecordTime?: string(name='bill_record_time'),
        bookMode?: string(name='book_mode'),
        bookTime?: string(name='book_time'),
        bookerId?: string(name='booker_id'),
        bookerJobNo?: string(name='booker_job_no'),
        bookerName?: string(name='booker_name'),
        btripCouponFee?: double(name='btrip_coupon_fee'),
        cabin?: string(name='cabin'),
        cabinClass?: string(name='cabin_class'),
        capitalDirection?: string(name='capital_direction'),
        cascadeDepartment?: string(name='cascade_department'),
        changeFee?: double(name='change_fee'),
        corpPayOrderFee?: double(name='corp_pay_order_fee'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number'),
        coupon?: double(name='coupon'),
        depAirportCode?: string(name='dep_airport_code'),
        department?: string(name='department'),
        departmentId?: string(name='department_id'),
        deptCity?: string(name='dept_city'),
        deptDate?: string(name='dept_date'),
        deptStation?: string(name='dept_station'),
        deptTime?: string(name='dept_time'),
        discount?: string(name='discount'),
        feeType?: string(name='fee_type'),
        flightNo?: string(name='flight_no'),
        index?: string(name='index'),
        insuranceFee?: double(name='insurance_fee'),
        insuranceNumber?: string(name='insurance_number'),
        invoiceTitle?: string(name='invoice_title'),
        mostDifferenceDeptTime?: string(name='most_difference_dept_time'),
        mostDifferenceDiscount?: string(name='most_difference_discount'),
        mostDifferenceFlightNo?: string(name='most_difference_flight_no'),
        mostDifferencePrice?: double(name='most_difference_price'),
        mostDifferenceReason?: string(name='most_difference_reason'),
        mostPrice?: double(name='most_price'),
        negotiationCouponFee?: double(name='negotiation_coupon_fee'),
        orderId?: string(name='order_id'),
        orderStatusDesc?: string(name='order_status_desc'),
        overApplyId?: string(name='over_apply_id'),
        primaryId?: long(name='primary_id'),
        projectCode?: string(name='project_code'),
        projectName?: string(name='project_name'),
        refundFee?: double(name='refund_fee'),
        remark?: string(name='remark'),
        repeatRefund?: string(name='repeat_refund'),
        sealPrice?: double(name='seal_price'),
        segmentType?: string(name='segment_type'),
        serviceFee?: double(name='service_fee'),
        settlementFee?: double(name='settlement_fee'),
        settlementGrantFee?: double(name='settlement_grant_fee'),
        settlementTime?: string(name='settlement_time'),
        settlementType?: string(name='settlement_type'),
        status?: int32(name='status'),
        subOrderId?: string(name='sub_order_id'),
        taxFee?: double(name='tax_fee'),
        ticketId?: string(name='ticket_id'),
        trade?: string(name='trade'),
        travelerId?: string(name='traveler_id'),
        travelerJobNo?: string(name='traveler_job_no'),
        travelerName?: string(name='traveler_name'),
        voucherType?: int32(name='voucher_type'),
      }
    ](name='data_list'),
    periodEnd?: string(name='period_end'),
    periodStart?: string(name='period_start'),
    totalNum?: long(name='total_num'),
  }(name='module'),
  morePage?: boolean(name='more_page'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model IeFlightBillSettlementQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IeFlightBillSettlementQueryResponseBody(name='body'),
}

async function ieFlightBillSettlementQuery(request: IeFlightBillSettlementQueryRequest): IeFlightBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IeFlightBillSettlementQueryHeaders{};
  return ieFlightBillSettlementQueryWithOptions(request, headers, runtime);
}

async function ieFlightBillSettlementQueryWithOptions(request: IeFlightBillSettlementQueryRequest, headers: IeFlightBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): IeFlightBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IeFlightBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/ie-flight/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model InvoiceAddHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model InvoiceAddRequest {
  address?: string(name='address'),
  bankName?: string(name='bank_name'),
  bankNo?: string(name='bank_no'),
  taxNo?: string(name='tax_no'),
  tel?: string(name='tel'),
  thirdPartId?: string(name='third_part_id'),
  title?: string(name='title'),
  type?: int32(name='type'),
}

model InvoiceAddResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model InvoiceAddResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvoiceAddResponseBody(name='body'),
}

async function invoiceAdd(request: InvoiceAddRequest): InvoiceAddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvoiceAddHeaders{};
  return invoiceAddWithOptions(request, headers, runtime);
}

async function invoiceAddWithOptions(request: InvoiceAddRequest, headers: InvoiceAddHeaders, runtime: Util.RuntimeOptions): InvoiceAddResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.address)) {
    body['address'] = request.address;
  }
  if (!Util.isUnset(request.bankName)) {
    body['bank_name'] = request.bankName;
  }
  if (!Util.isUnset(request.bankNo)) {
    body['bank_no'] = request.bankNo;
  }
  if (!Util.isUnset(request.taxNo)) {
    body['tax_no'] = request.taxNo;
  }
  if (!Util.isUnset(request.tel)) {
    body['tel'] = request.tel;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    body['third_part_id'] = request.thirdPartId;
  }
  if (!Util.isUnset(request.title)) {
    body['title'] = request.title;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InvoiceAdd',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/add-invoice`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model InvoiceDeleteHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model InvoiceDeleteRequest {
  thirdPartId?: string(name='third_part_id'),
}

model InvoiceDeleteResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model InvoiceDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvoiceDeleteResponseBody(name='body'),
}

async function invoiceDelete(request: InvoiceDeleteRequest): InvoiceDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvoiceDeleteHeaders{};
  return invoiceDeleteWithOptions(request, headers, runtime);
}

async function invoiceDeleteWithOptions(request: InvoiceDeleteRequest, headers: InvoiceDeleteHeaders, runtime: Util.RuntimeOptions): InvoiceDeleteResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.thirdPartId)) {
    query['third_part_id'] = request.thirdPartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InvoiceDelete',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/invoice`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model InvoiceModifyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model InvoiceModifyRequest {
  address?: string(name='address'),
  bankName?: string(name='bank_name'),
  bankNo?: string(name='bank_no'),
  taxNo?: string(name='tax_no'),
  tel?: string(name='tel'),
  thirdPartId?: string(name='third_part_id'),
  title?: string(name='title'),
  type?: int32(name='type'),
}

model InvoiceModifyResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model InvoiceModifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvoiceModifyResponseBody(name='body'),
}

async function invoiceModify(request: InvoiceModifyRequest): InvoiceModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvoiceModifyHeaders{};
  return invoiceModifyWithOptions(request, headers, runtime);
}

async function invoiceModifyWithOptions(request: InvoiceModifyRequest, headers: InvoiceModifyHeaders, runtime: Util.RuntimeOptions): InvoiceModifyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.address)) {
    body['address'] = request.address;
  }
  if (!Util.isUnset(request.bankName)) {
    body['bank_name'] = request.bankName;
  }
  if (!Util.isUnset(request.bankNo)) {
    body['bank_no'] = request.bankNo;
  }
  if (!Util.isUnset(request.taxNo)) {
    body['tax_no'] = request.taxNo;
  }
  if (!Util.isUnset(request.tel)) {
    body['tel'] = request.tel;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    body['third_part_id'] = request.thirdPartId;
  }
  if (!Util.isUnset(request.title)) {
    body['title'] = request.title;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InvoiceModify',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/invoice`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model InvoiceRuleSaveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model InvoiceRuleSaveRequest {
  allEmploye?: boolean(name='all_employe'),
  entities?: [ 
    {
      id?: string(name='id'),
      name?: string(name='name'),
      type?: int32(name='type'),
    }
  ](name='entities'),
  thirdPartId?: string(name='third_part_id'),
}

model InvoiceRuleSaveShrinkRequest {
  allEmploye?: boolean(name='all_employe'),
  entitiesShrink?: string(name='entities'),
  thirdPartId?: string(name='third_part_id'),
}

model InvoiceRuleSaveResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    addNum?: int32(name='add_num'),
    removeNum?: int32(name='remove_num'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model InvoiceRuleSaveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvoiceRuleSaveResponseBody(name='body'),
}

async function invoiceRuleSave(request: InvoiceRuleSaveRequest): InvoiceRuleSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvoiceRuleSaveHeaders{};
  return invoiceRuleSaveWithOptions(request, headers, runtime);
}

async function invoiceRuleSaveWithOptions(tmpReq: InvoiceRuleSaveRequest, headers: InvoiceRuleSaveHeaders, runtime: Util.RuntimeOptions): InvoiceRuleSaveResponse {
  Util.validateModel(tmpReq);
  var request = new InvoiceRuleSaveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entities)) {
    request.entitiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entities, 'entities', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.allEmploye)) {
    body['all_employe'] = request.allEmploye;
  }
  if (!Util.isUnset(request.entitiesShrink)) {
    body['entities'] = request.entitiesShrink;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    body['third_part_id'] = request.thirdPartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InvoiceRuleSave',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/invoice-rule`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model InvoiceSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model InvoiceSearchRequest {
  title?: string(name='title'),
  userId?: string(name='user_id'),
}

model InvoiceSearchResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: [ 
    {
      id?: long(name='id'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id'),
      title?: string(name='title'),
    }
  ](name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model InvoiceSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvoiceSearchResponseBody(name='body'),
}

async function invoiceSearch(request: InvoiceSearchRequest): InvoiceSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvoiceSearchHeaders{};
  return invoiceSearchWithOptions(request, headers, runtime);
}

async function invoiceSearchWithOptions(request: InvoiceSearchRequest, headers: InvoiceSearchHeaders, runtime: Util.RuntimeOptions): InvoiceSearchResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.title)) {
    query['title'] = request.title;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InvoiceSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/invoice`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model IsvUserSaveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model IsvUserSaveRequest {
  userList?: [ 
    {
      departId?: long(name='depart_id'),
      email?: string(name='email'),
      jobNo?: string(name='job_no'),
      leaveStatus?: int32(name='leave_status'),
      managerUserId?: string(name='manager_user_id'),
      phone?: string(name='phone'),
      position?: string(name='position'),
      positionLevel?: string(name='position_level'),
      realNameEn?: string(name='real_name_en'),
      thirdDepartId?: string(name='third_depart_id'),
      thirdDepartIdList?: [ string ](name='third_depart_id_list'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='user_list'),
}

model IsvUserSaveShrinkRequest {
  userListShrink?: string(name='user_list'),
}

model IsvUserSaveResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: string(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model IsvUserSaveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IsvUserSaveResponseBody(name='body'),
}

async function isvUserSave(request: IsvUserSaveRequest): IsvUserSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IsvUserSaveHeaders{};
  return isvUserSaveWithOptions(request, headers, runtime);
}

async function isvUserSaveWithOptions(tmpReq: IsvUserSaveRequest, headers: IsvUserSaveHeaders, runtime: Util.RuntimeOptions): IsvUserSaveResponse {
  Util.validateModel(tmpReq);
  var request = new IsvUserSaveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userList)) {
    request.userListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userList, 'user_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.userListShrink)) {
    body['user_list'] = request.userListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'IsvUserSave',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/isvuser/v1/isvuser`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model MonthBillGetHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model MonthBillGetRequest {
  billMonth?: string(name='bill_month'),
}

model MonthBillGetResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: [ 
    {
      endDate?: string(name='end_date'),
      startDate?: string(name='start_date'),
      url?: string(name='url'),
    }
  ](name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model MonthBillGetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MonthBillGetResponseBody(name='body'),
}

async function monthBillGet(request: MonthBillGetRequest): MonthBillGetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new MonthBillGetHeaders{};
  return monthBillGetWithOptions(request, headers, runtime);
}

async function monthBillGetWithOptions(request: MonthBillGetRequest, headers: MonthBillGetHeaders, runtime: Util.RuntimeOptions): MonthBillGetResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billMonth)) {
    query['bill_month'] = request.billMonth;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MonthBillGet',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/open/v1/month-bill`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ProjectAddHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model ProjectAddRequest {
  code?: string(name='code'),
  projectName?: string(name='project_name'),
  thirdPartCostCenterId?: string(name='third_part_cost_center_id'),
  thirdPartId?: string(name='third_part_id'),
  thirdPartInvoiceId?: string(name='third_part_invoice_id'),
}

model ProjectAddResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: long(name='module'),
  morePage?: boolean(name='more_page'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model ProjectAddResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ProjectAddResponseBody(name='body'),
}

async function projectAdd(request: ProjectAddRequest): ProjectAddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ProjectAddHeaders{};
  return projectAddWithOptions(request, headers, runtime);
}

async function projectAddWithOptions(request: ProjectAddRequest, headers: ProjectAddHeaders, runtime: Util.RuntimeOptions): ProjectAddResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.projectName)) {
    body['project_name'] = request.projectName;
  }
  if (!Util.isUnset(request.thirdPartCostCenterId)) {
    body['third_part_cost_center_id'] = request.thirdPartCostCenterId;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    body['third_part_id'] = request.thirdPartId;
  }
  if (!Util.isUnset(request.thirdPartInvoiceId)) {
    body['third_part_invoice_id'] = request.thirdPartInvoiceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ProjectAdd',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/cost/v1/project`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ProjectDeleteHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model ProjectDeleteRequest {
  thirdPartId?: string(name='third_part_id'),
}

model ProjectDeleteResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: boolean(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model ProjectDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ProjectDeleteResponseBody(name='body'),
}

async function projectDelete(request: ProjectDeleteRequest): ProjectDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ProjectDeleteHeaders{};
  return projectDeleteWithOptions(request, headers, runtime);
}

async function projectDeleteWithOptions(request: ProjectDeleteRequest, headers: ProjectDeleteHeaders, runtime: Util.RuntimeOptions): ProjectDeleteResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.thirdPartId)) {
    query['third_part_id'] = request.thirdPartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ProjectDelete',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/cost/v1/project`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ProjectModifyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model ProjectModifyRequest {
  code?: string(name='code'),
  projectName?: string(name='project_name'),
  thirdPartCostCenterId?: string(name='third_part_cost_center_id'),
  thirdPartId?: string(name='third_part_id'),
  thirdPartInvoiceId?: string(name='third_part_invoice_id'),
}

model ProjectModifyResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: boolean(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model ProjectModifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ProjectModifyResponseBody(name='body'),
}

async function projectModify(request: ProjectModifyRequest): ProjectModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ProjectModifyHeaders{};
  return projectModifyWithOptions(request, headers, runtime);
}

async function projectModifyWithOptions(request: ProjectModifyRequest, headers: ProjectModifyHeaders, runtime: Util.RuntimeOptions): ProjectModifyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.projectName)) {
    body['project_name'] = request.projectName;
  }
  if (!Util.isUnset(request.thirdPartCostCenterId)) {
    body['third_part_cost_center_id'] = request.thirdPartCostCenterId;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    body['third_part_id'] = request.thirdPartId;
  }
  if (!Util.isUnset(request.thirdPartInvoiceId)) {
    body['third_part_invoice_id'] = request.thirdPartInvoiceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ProjectModify',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/cost/v1/project`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SyncSingleUserHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model SyncSingleUserRequest {
  email?: string(name='email'),
  jobNo?: string(name='job_no'),
  leaveStatus?: int32(name='leave_status'),
  managerUserId?: string(name='manager_user_id'),
  phone?: string(name='phone'),
  position?: string(name='position'),
  positionLevel?: string(name='position_level'),
  realNameEn?: string(name='real_name_en'),
  thirdDepartIdList?: [ string ](name='third_depart_id_list'),
  userId?: string(name='user_id'),
  userName?: string(name='user_name'),
}

model SyncSingleUserShrinkRequest {
  email?: string(name='email'),
  jobNo?: string(name='job_no'),
  leaveStatus?: int32(name='leave_status'),
  managerUserId?: string(name='manager_user_id'),
  phone?: string(name='phone'),
  position?: string(name='position'),
  positionLevel?: string(name='position_level'),
  realNameEn?: string(name='real_name_en'),
  thirdDepartIdListShrink?: string(name='third_depart_id_list'),
  userId?: string(name='user_id'),
  userName?: string(name='user_name'),
}

model SyncSingleUserResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: string(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model SyncSingleUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncSingleUserResponseBody(name='body'),
}

async function syncSingleUser(request: SyncSingleUserRequest): SyncSingleUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SyncSingleUserHeaders{};
  return syncSingleUserWithOptions(request, headers, runtime);
}

async function syncSingleUserWithOptions(tmpReq: SyncSingleUserRequest, headers: SyncSingleUserHeaders, runtime: Util.RuntimeOptions): SyncSingleUserResponse {
  Util.validateModel(tmpReq);
  var request = new SyncSingleUserShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.thirdDepartIdList)) {
    request.thirdDepartIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.thirdDepartIdList, 'third_depart_id_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.email)) {
    body['email'] = request.email;
  }
  if (!Util.isUnset(request.jobNo)) {
    body['job_no'] = request.jobNo;
  }
  if (!Util.isUnset(request.leaveStatus)) {
    body['leave_status'] = request.leaveStatus;
  }
  if (!Util.isUnset(request.managerUserId)) {
    body['manager_user_id'] = request.managerUserId;
  }
  if (!Util.isUnset(request.phone)) {
    body['phone'] = request.phone;
  }
  if (!Util.isUnset(request.position)) {
    body['position'] = request.position;
  }
  if (!Util.isUnset(request.positionLevel)) {
    body['position_level'] = request.positionLevel;
  }
  if (!Util.isUnset(request.realNameEn)) {
    body['real_name_en'] = request.realNameEn;
  }
  if (!Util.isUnset(request.thirdDepartIdListShrink)) {
    body['third_depart_id_list'] = request.thirdDepartIdListShrink;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    body['user_name'] = request.userName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SyncSingleUser',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/user/v1/single-user/action/sync`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model TrainBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model TrainBillSettlementQueryRequest {
  pageNo?: int32(name='page_no'),
  pageSize?: int32(name='page_size'),
  periodEnd?: string(name='period_end'),
  periodStart?: string(name='period_start'),
}

model TrainBillSettlementQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category'),
    corpId?: string(name='corp_id'),
    dataList?: [ 
      {
        alipayTradeNo?: string(name='alipay_trade_no'),
        applyId?: string(name='apply_id'),
        arrDate?: string(name='arr_date'),
        arrStation?: string(name='arr_station'),
        arrTime?: string(name='arr_time'),
        billRecordTime?: string(name='bill_record_time'),
        bookTime?: string(name='book_time'),
        bookerId?: string(name='booker_id'),
        bookerJobNo?: string(name='booker_job_no'),
        bookerName?: string(name='booker_name'),
        capitalDirection?: string(name='capital_direction'),
        cascadeDepartment?: string(name='cascade_department'),
        changeFee?: double(name='change_fee'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number'),
        coupon?: double(name='coupon'),
        department?: string(name='department'),
        departmentId?: string(name='department_id'),
        deptDate?: string(name='dept_date'),
        deptStation?: string(name='dept_station'),
        deptTime?: string(name='dept_time'),
        feeType?: string(name='fee_type'),
        index?: string(name='index'),
        invoiceTitle?: string(name='invoice_title'),
        orderId?: string(name='order_id'),
        orderPrice?: double(name='order_price'),
        overApplyId?: string(name='over_apply_id'),
        primaryId?: long(name='primary_id'),
        projectCode?: string(name='project_code'),
        projectName?: string(name='project_name'),
        refundFee?: double(name='refund_fee'),
        remark?: string(name='remark'),
        runTime?: string(name='run_time'),
        seatNo?: string(name='seat_no'),
        seatType?: string(name='seat_type'),
        serviceFee?: double(name='service_fee'),
        settlementFee?: double(name='settlement_fee'),
        settlementGrantFee?: double(name='settlement_grant_fee'),
        settlementTime?: string(name='settlement_time'),
        settlementType?: string(name='settlement_type'),
        status?: int32(name='status'),
        ticketNo?: string(name='ticket_no'),
        ticketPrice?: double(name='ticket_price'),
        trainNo?: string(name='train_no'),
        trainType?: string(name='train_type'),
        travelerId?: string(name='traveler_id'),
        travelerJobNo?: string(name='traveler_job_no'),
        travelerName?: string(name='traveler_name'),
        voucherType?: int32(name='voucher_type'),
      }
    ](name='data_list'),
    periodEnd?: string(name='period_end'),
    periodStart?: string(name='period_start'),
    totalNum?: long(name='total_num'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model TrainBillSettlementQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TrainBillSettlementQueryResponseBody(name='body'),
}

async function trainBillSettlementQuery(request: TrainBillSettlementQueryRequest): TrainBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainBillSettlementQueryHeaders{};
  return trainBillSettlementQueryWithOptions(request, headers, runtime);
}

async function trainBillSettlementQueryWithOptions(request: TrainBillSettlementQueryRequest, headers: TrainBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): TrainBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TrainBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model TrainExceedApplyQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model TrainExceedApplyQueryRequest {
  applyId?: long(name='apply_id'),
}

model TrainExceedApplyQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id'),
    applyIntentionInfoDO?: {
      arrCity?: string(name='arr_city'),
      arrCityName?: string(name='arr_city_name'),
      arrStation?: string(name='arr_station'),
      arrTime?: string(name='arr_time'),
      depCity?: string(name='dep_city'),
      depCityName?: string(name='dep_city_name'),
      depStation?: string(name='dep_station'),
      depTime?: string(name='dep_time'),
      price?: long(name='price'),
      seatName?: string(name='seat_name'),
      trainNo?: string(name='train_no'),
      trainTypeDesc?: string(name='train_type_desc'),
      type?: int32(name='type'),
    }(name='apply_intention_info_d_o'),
    btripCause?: string(name='btrip_cause'),
    corpId?: string(name='corp_id'),
    exceedReason?: string(name='exceed_reason'),
    exceedType?: int32(name='exceed_type'),
    originStandard?: string(name='origin_standard'),
    status?: int32(name='status'),
    submitTime?: string(name='submit_time'),
    thirdpartApplyId?: string(name='thirdpart_apply_id'),
    thirdpartCorpId?: string(name='thirdpart_corp_id'),
    userId?: string(name='user_id'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model TrainExceedApplyQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TrainExceedApplyQueryResponseBody(name='body'),
}

async function trainExceedApplyQuery(request: TrainExceedApplyQueryRequest): TrainExceedApplyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainExceedApplyQueryHeaders{};
  return trainExceedApplyQueryWithOptions(request, headers, runtime);
}

async function trainExceedApplyQueryWithOptions(request: TrainExceedApplyQueryRequest, headers: TrainExceedApplyQueryHeaders, runtime: Util.RuntimeOptions): TrainExceedApplyQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TrainExceedApplyQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/train-exceed`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model TrainOrderListQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model TrainOrderListQueryRequest {
  allApply?: boolean(name='all_apply'),
  applyId?: long(name='apply_id'),
  departId?: string(name='depart_id'),
  endTime?: string(name='end_time'),
  page?: int32(name='page'),
  pageSize?: int32(name='page_size'),
  startTime?: string(name='start_time'),
  thirdpartApplyId?: string(name='thirdpart_apply_id'),
  updateEndTime?: string(name='update_end_time'),
  updateStartTime?: string(name='update_start_time'),
  userId?: string(name='user_id'),
}

model TrainOrderListQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: [ 
    {
      applyId?: long(name='apply_id'),
      arrCity?: string(name='arr_city'),
      arrStation?: string(name='arr_station'),
      arrTime?: string(name='arr_time'),
      btripTitle?: string(name='btrip_title'),
      contactName?: string(name='contact_name'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      costCenter?: {
        corpId?: string(name='corp_id'),
        id?: long(name='id'),
        name?: string(name='name'),
        number?: string(name='number'),
      }(name='cost_center'),
      depCity?: string(name='dep_city'),
      depStation?: string(name='dep_station'),
      depTime?: string(name='dep_time'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      gmtCreate?: string(name='gmt_create'),
      gmtModified?: string(name='gmt_modified'),
      id?: long(name='id'),
      invoice?: {
        id?: long(name='id'),
        title?: string(name='title'),
      }(name='invoice'),
      priceInfoList?: [ 
        {
          categoryCode?: int32(name='category_code'),
          categoryType?: int32(name='category_type'),
          endCity?: string(name='end_city'),
          endTime?: string(name='end_time'),
          gmtCreate?: string(name='gmt_create'),
          originalTrainNo?: string(name='original_train_no'),
          passengerName?: string(name='passenger_name'),
          payType?: int32(name='pay_type'),
          price?: double(name='price'),
          seatType?: string(name='seat_type'),
          startCity?: string(name='start_city'),
          startTime?: string(name='start_time'),
          tradeId?: string(name='trade_id'),
          trainNo?: string(name='train_no'),
          type?: int32(name='type'),
        }
      ](name='price_info_list'),
      projectCode?: string(name='project_code'),
      projectId?: long(name='project_id'),
      projectTitle?: string(name='project_title'),
      riderName?: string(name='rider_name'),
      runTime?: string(name='run_time'),
      seatType?: string(name='seat_type'),
      status?: int32(name='status'),
      thirdPartProjectId?: string(name='third_part_project_id'),
      thirdpartApplyId?: string(name='thirdpart_apply_id'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id'),
      ticketCount?: int32(name='ticket_count'),
      ticketNo12306?: string(name='ticket_no12306'),
      trainNumber?: string(name='train_number'),
      trainType?: string(name='train_type'),
      userAffiliateList?: [ 
        {
          userId?: string(name='user_id'),
          userName?: string(name='user_name'),
        }
      ](name='user_affiliate_list'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='module'),
  pageInfo?: {
    page?: int32(name='page'),
    pageSize?: int32(name='page_size'),
    totalNumber?: int32(name='total_number'),
  }(name='page_info'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model TrainOrderListQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TrainOrderListQueryResponseBody(name='body'),
}

async function trainOrderListQuery(request: TrainOrderListQueryRequest): TrainOrderListQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainOrderListQueryHeaders{};
  return trainOrderListQueryWithOptions(request, headers, runtime);
}

async function trainOrderListQueryWithOptions(request: TrainOrderListQueryRequest, headers: TrainOrderListQueryHeaders, runtime: Util.RuntimeOptions): TrainOrderListQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.allApply)) {
    query['all_apply'] = request.allApply;
  }
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.departId)) {
    query['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['end_time'] = request.endTime;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['start_time'] = request.startTime;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    query['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.updateEndTime)) {
    query['update_end_time'] = request.updateEndTime;
  }
  if (!Util.isUnset(request.updateStartTime)) {
    query['update_start_time'] = request.updateStartTime;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TrainOrderListQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/order-list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model TrainOrderQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model TrainOrderQueryRequest {
  orderId?: long(name='order_id'),
  userId?: string(name='user_id'),
}

model TrainOrderQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    changeTicketInfoList?: [ 
      {
        changeCoachNo?: string(name='change_coach_no'),
        changeGapFee?: double(name='change_gap_fee'),
        changeHandlingFee?: double(name='change_handling_fee'),
        changeSeatNo?: string(name='change_seat_no'),
        changeSeatTypeName?: string(name='change_seat_type_name'),
        changeServiceFee?: double(name='change_service_fee'),
        changeTrainNo?: string(name='change_train_no'),
        changeTrainTypeName?: string(name='change_train_type_name'),
        checkInTime?: string(name='check_in_time'),
        checkOutTime?: string(name='check_out_time'),
        endTime?: string(name='end_time'),
        fromStationName?: string(name='from_station_name'),
        gmtCreate?: string(name='gmt_create'),
        gmtModify?: string(name='gmt_modify'),
        originTicketNo?: string(name='origin_ticket_no'),
        outTicketStatus?: string(name='out_ticket_status'),
        startTime?: string(name='start_time'),
        ticketNo?: string(name='ticket_no'),
        toStationName?: string(name='to_station_name'),
      }
    ](name='change_ticket_info_list'),
    invoiceInfo?: {
      id?: long(name='id'),
      title?: string(name='title'),
    }(name='invoice_info'),
    orderBaseInfo?: {
      applyId?: string(name='apply_id'),
      btripTitle?: string(name='btrip_title'),
      contactName?: string(name='contact_name'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      exceedApplyId?: string(name='exceed_apply_id'),
      exceedThirdPartApplyId?: string(name='exceed_third_part_apply_id'),
      gmtCreate?: string(name='gmt_create'),
      gmtModify?: string(name='gmt_modify'),
      itineraryId?: string(name='itinerary_id'),
      orderId?: long(name='order_id'),
      orderStatus?: int32(name='order_status'),
      thirdpartApplyId?: string(name='thirdpart_apply_id'),
      thirdpartCorpId?: string(name='thirdpart_corp_id'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id'),
      tripType?: int32(name='trip_type'),
      userId?: string(name='user_id'),
    }(name='order_base_info'),
    passengerInfoList?: [ 
      {
        costCenterId?: long(name='cost_center_id'),
        costCenterName?: string(name='cost_center_name'),
        costCenterNumber?: string(name='cost_center_number'),
        projectCode?: string(name='project_code'),
        projectId?: long(name='project_id'),
        projectTitle?: string(name='project_title'),
        thirdpartProjectId?: string(name='thirdpart_project_id'),
        userId?: string(name='user_id'),
        userName?: string(name='user_name'),
        userType?: int32(name='user_type'),
      }
    ](name='passenger_info_list'),
    priceInfoList?: [ 
      {
        categoryCode?: int32(name='category_code'),
        gmtCreate?: string(name='gmt_create'),
        passengerName?: string(name='passenger_name'),
        payType?: int32(name='pay_type'),
        price?: double(name='price'),
        tradeId?: string(name='trade_id'),
        type?: int32(name='type'),
      }
    ](name='price_info_list'),
    refundTicketInfoList?: [ 
      {
        gmtCreate?: string(name='gmt_create'),
        gmtModify?: string(name='gmt_modify'),
        refundFee?: double(name='refund_fee'),
        refundServiceFee?: double(name='refund_service_fee'),
        ticketNo?: string(name='ticket_no'),
      }
    ](name='refund_ticket_info_list'),
    ticketInfoList?: [ 
      {
        changed?: boolean(name='changed'),
        checkInTime?: string(name='check_in_time'),
        checkOutTime?: string(name='check_out_time'),
        coachNo?: string(name='coach_no'),
        endTime?: string(name='end_time'),
        gmtCreate?: string(name='gmt_create'),
        gmtModify?: string(name='gmt_modify'),
        outTicketStatus?: string(name='out_ticket_status'),
        payType?: int32(name='pay_type'),
        seatNo?: string(name='seat_no'),
        seatTypeName?: string(name='seat_type_name'),
        serviceFee?: double(name='service_fee'),
        startTime?: string(name='start_time'),
        ticketNo?: string(name='ticket_no'),
        ticketPrice?: double(name='ticket_price'),
        ticketStatus?: int32(name='ticket_status'),
        trainTypeName?: string(name='train_type_name'),
        userId?: string(name='user_id'),
      }
    ](name='ticket_info_list'),
    trainInfo?: {
      arrTime?: string(name='arr_time'),
      depTime?: string(name='dep_time'),
      fromStationName?: string(name='from_station_name'),
      runTime?: long(name='run_time'),
      toStationName?: string(name='to_station_name'),
      trainNo?: string(name='train_no'),
    }(name='train_info'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model TrainOrderQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TrainOrderQueryResponseBody(name='body'),
}

async function trainOrderQuery(request: TrainOrderQueryRequest): TrainOrderQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainOrderQueryHeaders{};
  return trainOrderQueryWithOptions(request, headers, runtime);
}

async function trainOrderQueryWithOptions(request: TrainOrderQueryRequest, headers: TrainOrderQueryHeaders, runtime: Util.RuntimeOptions): TrainOrderQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TrainOrderQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/order`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model TrainStationSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model TrainStationSearchRequest {
  keyword?: string(name='keyword'),
}

model TrainStationSearchResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    cities?: [ 
      {
        code?: string(name='code'),
        name?: string(name='name'),
      }
    ](name='cities'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model TrainStationSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TrainStationSearchResponseBody(name='body'),
}

async function trainStationSearch(request: TrainStationSearchRequest): TrainStationSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainStationSearchHeaders{};
  return trainStationSearchWithOptions(request, headers, runtime);
}

async function trainStationSearchWithOptions(request: TrainStationSearchRequest, headers: TrainStationSearchHeaders, runtime: Util.RuntimeOptions): TrainStationSearchResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TrainStationSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/city/v1/train`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UserQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token'),
}

model UserQueryRequest {
  modifiedTimeGreaterOrEqualThan?: string(name='modified_time_greater_or_equal_than'),
  pageSize?: int32(name='page_size'),
  pageToken?: string(name='page_token'),
  thirdPartJobNo?: string(name='third_part_job_no'),
}

model UserQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    hasMore?: boolean(name='has_more'),
    items?: [ 
      {
        employeeNick?: string(name='employee_nick'),
        thirdPartEmployeeId?: string(name='third_part_employee_id'),
        thirdPartJobNo?: string(name='third_part_job_no'),
      }
    ](name='items'),
    pageToken?: string(name='page_token'),
    total?: long(name='total'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model UserQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UserQueryResponseBody(name='body'),
}

async function userQuery(request: UserQueryRequest): UserQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UserQueryHeaders{};
  return userQueryWithOptions(request, headers, runtime);
}

async function userQueryWithOptions(request: UserQueryRequest, headers: UserQueryHeaders, runtime: Util.RuntimeOptions): UserQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.modifiedTimeGreaterOrEqualThan)) {
    query['modified_time_greater_or_equal_than'] = request.modifiedTimeGreaterOrEqualThan;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.pageToken)) {
    query['page_token'] = request.pageToken;
  }
  if (!Util.isUnset(request.thirdPartJobNo)) {
    query['third_part_job_no'] = request.thirdPartJobNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UserQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/user/v1/user`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

