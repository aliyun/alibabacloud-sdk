/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('btripopen', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AccessTokenRequest {
  appSecret?: string(name='app_secret', example='ggZADkghsadgogeDxdaD'),
}

model AccessTokenResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  data?: {
    expire?: long(name='expire', example='70000'),
    token?: string(name='token', example='37j76df'),
  }(name='data'),
  message?: string(name='message'),
  module?: {
    expire?: long(name='expire', example='70000'),
    start?: long(name='start', example='1652410740914'),
    token?: string(name='token', example='37j76df'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', description='成功标识', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model AccessTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AccessTokenResponseBody(name='body'),
}

async function accessTokenWithOptions(request: AccessTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AccessTokenResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.appSecret)) {
    query['app_secret'] = request.appSecret;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AccessToken',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/btrip-open-auth/v1/access-token/action/take`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function accessToken(request: AccessTokenRequest): AccessTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return accessTokenWithOptions(request, headers, runtime);
}

model AddInvoiceEntityHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model AddInvoiceEntityRequest {
  entities?: [ 
    {
      entityId?: string(name='entity_id', example='12345'),
      entityName?: string(name='entity_name'),
      entityType?: string(name='entity_type', example='1'),
    }
  ](name='entities'),
  thirdPartId?: string(name='third_part_id', example='4854821'),
}

model AddInvoiceEntityShrinkRequest {
  entitiesShrink?: string(name='entities'),
  thirdPartId?: string(name='third_part_id', example='4854821'),
}

model AddInvoiceEntityResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    addNum?: int32(name='add_num', example='1'),
    selectedUserNum?: int32(name='selected_user_num', example='2'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210f079e16603757182131635d866a'),
}

model AddInvoiceEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddInvoiceEntityResponseBody(name='body'),
}

async function addInvoiceEntityWithOptions(tmpReq: AddInvoiceEntityRequest, headers: AddInvoiceEntityHeaders, runtime: Util.RuntimeOptions): AddInvoiceEntityResponse {
  Util.validateModel(tmpReq);
  var request = new AddInvoiceEntityShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entities)) {
    request.entitiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entities, 'entities', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.entitiesShrink)) {
    body['entities'] = request.entitiesShrink;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    body['third_part_id'] = request.thirdPartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddInvoiceEntity',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/entities`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addInvoiceEntity(request: AddInvoiceEntityRequest): AddInvoiceEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddInvoiceEntityHeaders{};
  return addInvoiceEntityWithOptions(request, headers, runtime);
}

model AddressGetHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model AddressGetRequest {
  actionType?: int32(name='action_type', example='1'),
  carScenesCode?: string(name='car_scenes_code'),
  itineraryId?: string(name='itinerary_id', example='460e254b5a5b4bd0801744a2790e5d78'),
  phone?: string(name='phone'),
  subCorpId?: string(name='sub_corp_id'),
  taobaoCallbackUrl?: string(name='taobao_callback_url', example='https://alibtrip.open.com'),
  type?: int32(name='type', example='1'),
  userId?: string(name='user_id'),
}

model AddressGetResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    url?: string(name='url', example='https://trip-hisv.taobao.com/ding/trustLogin.htm?redirectUrl=https%3A%2F%2Fmarket.m.taobao.com%2Fapp%2Fbtrip-fe%2Frx-alitrip-main%2Fhome.html%3Ffpt%3DbIdentify%2528dingtalk.isv.h5.home%2529%26corpId%3Dding3f9797e277423f14a1320dcb25e91351%26dingUserId%3Dmanager9302%26dingAppId%3D1692%26fit%3Dtrue&token=b73e0b9e-d25a-40f0-aff8-2c2e58da659b'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210bcc3a16583004579056128d33d7'),
}

model AddressGetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddressGetResponseBody(name='body'),
}

async function addressGetWithOptions(request: AddressGetRequest, headers: AddressGetHeaders, runtime: Util.RuntimeOptions): AddressGetResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.actionType)) {
    query['action_type'] = request.actionType;
  }
  if (!Util.isUnset(request.carScenesCode)) {
    query['car_scenes_code'] = request.carScenesCode;
  }
  if (!Util.isUnset(request.itineraryId)) {
    query['itinerary_id'] = request.itineraryId;
  }
  if (!Util.isUnset(request.phone)) {
    query['phone'] = request.phone;
  }
  if (!Util.isUnset(request.subCorpId)) {
    query['sub_corp_id'] = request.subCorpId;
  }
  if (!Util.isUnset(request.taobaoCallbackUrl)) {
    query['taobao_callback_url'] = request.taobaoCallbackUrl;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddressGet',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/open/v1/address`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addressGet(request: AddressGetRequest): AddressGetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddressGetHeaders{};
  return addressGetWithOptions(request, headers, runtime);
}

model AirportSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model AirportSearchRequest {
  keyword?: string(name='keyword'),
  type?: int32(name='type', example='0'),
}

model AirportSearchResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    cities?: [ 
      {
        code?: string(name='code', example='HGH'),
        distance?: int32(name='distance', example='100'),
        name?: string(name='name'),
        travelName?: string(name='travel_name', example='上海'),
      }
    ](name='cities'),
    nearby?: boolean(name='nearby', example='false'),
  }(name='module', description='module。'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210f07f316603757445272547d959f'),
}

model AirportSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AirportSearchResponseBody(name='body'),
}

async function airportSearchWithOptions(request: AirportSearchRequest, headers: AirportSearchHeaders, runtime: Util.RuntimeOptions): AirportSearchResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AirportSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/city/v1/airport`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function airportSearch(request: AirportSearchRequest): AirportSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AirportSearchHeaders{};
  return airportSearchWithOptions(request, headers, runtime);
}

model AllBaseCityInfoQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripAccessToken?: string(name='x-acs-btrip-access-token', example='feth00jqwls'),
}

model AllBaseCityInfoQueryResponseBody = {
  code?: string(name='code', example='success'),
  message?: string(name='message', example='demo'),
  module?: {
    allCityBaseInfoList?: [ 
      {
        adcode?: string(name='adcode', example='330122'),
        cityCode?: string(name='city_code', example='0571'),
        cityLevel?: string(name='city_level', example='3'),
        cityName?: string(name='city_name', example='桐庐'),
        cnNameTree?: string(name='cn_name_tree', example='中国，浙江省，杭州市，桐庐'),
        id?: long(name='id', example='1'),
        otherNameList?: [ string ](name='other_name_list'),
      }
    ](name='all_city_base_info_list'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210f079e16603757182131635d866a'),
}

model AllBaseCityInfoQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllBaseCityInfoQueryResponseBody(name='body'),
}

async function allBaseCityInfoQueryWithOptions(headers: AllBaseCityInfoQueryHeaders, runtime: Util.RuntimeOptions): AllBaseCityInfoQueryResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripAccessToken)) {
    realHeaders['x-acs-btrip-access-token'] = Util.toJSONString(headers.xAcsBtripAccessToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'AllBaseCityInfoQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/city/v1/code`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allBaseCityInfoQuery(): AllBaseCityInfoQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AllBaseCityInfoQueryHeaders{};
  return allBaseCityInfoQueryWithOptions(headers, runtime);
}

model ApplyAddHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ApplyAddRequest {
  budget?: long(name='budget', example='4000'),
  budgetMerge?: int32(name='budget_merge', example='1'),
  corpName?: string(name='corp_name'),
  departId?: string(name='depart_id', example='departId01'),
  departName?: string(name='depart_name'),
  extendField?: string(name='extend_field', description='可将补充描述传入此字段，账单中将会体现此字段的值。可以用于企业的统计和对账', example='{"cost_center":"成本中心"}'),
  externalTravelerList?: [ 
    {
      userName?: string(name='user_name'),
    }
  ](name='external_traveler_list'),
  externalTravelerStandard?: {
    businessDiscount?: int32(name='business_discount', example='1'),
    economyDiscount?: int32(name='economy_discount', example='1'),
    firstDiscount?: int32(name='first_discount', example='1'),
    flightCabins?: string(name='flight_cabins', example='F'),
    hotelCitys?: [ 
      {
        cityCode?: string(name='city_code', example='0'),
        cityName?: string(name='city_name'),
        fee?: long(name='fee', example='1009'),
      }
    ](name='hotel_citys'),
    premiumEconomyDiscount?: int32(name='premium_economy_discount', example='1'),
    reserveType?: int32(name='reserve_type', example='0'),
    trainSeats?: string(name='train_seats', example='0'),
  }(name='external_traveler_standard'),
  flightBudget?: long(name='flight_budget', example='1000'),
  hotelBudget?: long(name='hotel_budget', example='1000'),
  hotelShare?: {
    param?: string(name='param', example='70'),
    type?: string(name='type', example='1'),
  }(name='hotel_share'),
  internationalFlightCabins?: string(name='international_flight_cabins', example='Y'),
  itineraryList?: [ 
    {
      arrCity?: string(name='arr_city'),
      arrCityCode?: string(name='arr_city_code', example='HGH'),
      arrDate?: string(name='arr_date'),
      costCenterId?: long(name='cost_center_id', example='12138'),
      depCity?: string(name='dep_city'),
      depCityCode?: string(name='dep_city_code', example='BJS'),
      depDate?: string(name='dep_date', example='2017-01-01 00:00:00'),
      invoiceId?: long(name='invoice_id', example='34711'),
      itineraryId?: string(name='itinerary_id', example='123456'),
      needHotel?: boolean(name='need_hotel', example='true'),
      needTraffic?: boolean(name='need_traffic', example='true'),
      projectCode?: string(name='project_code', example='projecttow'),
      projectTitle?: string(name='project_title'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id', example='thirdpart34711'),
      thirdpartCostCenterId?: string(name='thirdpart_cost_center_id', example='thridpart12138'),
      trafficType?: int32(name='traffic_type', example='0'),
      tripWay?: int32(name='trip_way', example='0'),
    }
  ](name='itinerary_list'),
  itineraryRule?: int32(name='itinerary_rule', example='0'),
  itinerarySetList?: [ 
    {
      arrDate?: string(name='arr_date', example='2017-01-01 00:00:00'),
      cityCodeSet?: string(name='city_code_set', example='BJS,HGH'),
      citySet?: string(name='city_set'),
      costCenterId?: long(name='cost_center_id', example='12345'),
      depDate?: string(name='dep_date', example='2017-01-01 00:00:00'),
      invoiceId?: long(name='invoice_id', example='12345'),
      itineraryId?: string(name='itinerary_id', example='123'),
      projectCode?: string(name='project_code', example='projecttow'),
      projectTitle?: string(name='project_title'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id', example='thridpart12138'),
      thirdpartCostCenterId?: string(name='thirdpart_cost_center_id', example='thridpart12138'),
      trafficType?: int32(name='traffic_type', example='0'),
    }
  ](name='itinerary_set_list'),
  limitTraveler?: int32(name='limit_traveler', example='1'),
  status?: int32(name='status', example='0'),
  subCorpId?: string(name='sub_corp_id'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', example='12345'),
  thirdpartBusinessId?: string(name='thirdpart_business_id', example='00714131'),
  thirdpartDepartId?: string(name='thirdpart_depart_id'),
  togetherBookRule?: int32(name='together_book_rule', example='1'),
  trainBudget?: long(name='train_budget', example='1000'),
  travelerList?: [ 
    {
      userId?: string(name='user_id', example='wu51531'),
      userName?: string(name='user_name'),
    }
  ](name='traveler_list'),
  travelerStandard?: [ 
    {
      businessDiscount?: int32(name='business_discount', example='1'),
      economyDiscount?: int32(name='economy_discount', example='1'),
      firstDiscount?: int32(name='first_discount', example='1'),
      flightCabins?: string(name='flight_cabins', example='Y'),
      hotelCitys?: [ 
        {
          cityCode?: string(name='city_code', example='0'),
          cityName?: string(name='city_name'),
          fee?: long(name='fee', example='1009'),
        }
      ](name='hotel_citys'),
      premiumEconomyDiscount?: int32(name='premium_economy_discount', example='1'),
      reserveType?: int32(name='reserve_type', example='0'),
      trainSeats?: string(name='train_seats', example='1'),
      userId?: string(name='user_id', example='wfffeng'),
    }
  ](name='traveler_standard'),
  tripCause?: string(name='trip_cause'),
  tripDay?: int32(name='trip_day', example='1'),
  tripTitle?: string(name='trip_title'),
  type?: int32(name='type', example='1'),
  unionNo?: string(name='union_no', example='union001'),
  userId?: string(name='user_id', example='thridpart12138'),
  userName?: string(name='user_name'),
  vehicleBudget?: long(name='vehicle_budget', example='1000'),
}

model ApplyAddShrinkRequest {
  budget?: long(name='budget', example='4000'),
  budgetMerge?: int32(name='budget_merge', example='1'),
  corpName?: string(name='corp_name'),
  departId?: string(name='depart_id', example='departId01'),
  departName?: string(name='depart_name'),
  extendField?: string(name='extend_field', description='可将补充描述传入此字段，账单中将会体现此字段的值。可以用于企业的统计和对账', example='{"cost_center":"成本中心"}'),
  externalTravelerListShrink?: string(name='external_traveler_list'),
  externalTravelerStandardShrink?: string(name='external_traveler_standard'),
  flightBudget?: long(name='flight_budget', example='1000'),
  hotelBudget?: long(name='hotel_budget', example='1000'),
  hotelShareShrink?: string(name='hotel_share'),
  internationalFlightCabins?: string(name='international_flight_cabins', example='Y'),
  itineraryListShrink?: string(name='itinerary_list'),
  itineraryRule?: int32(name='itinerary_rule', example='0'),
  itinerarySetListShrink?: string(name='itinerary_set_list'),
  limitTraveler?: int32(name='limit_traveler', example='1'),
  status?: int32(name='status', example='0'),
  subCorpId?: string(name='sub_corp_id'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', example='12345'),
  thirdpartBusinessId?: string(name='thirdpart_business_id', example='00714131'),
  thirdpartDepartId?: string(name='thirdpart_depart_id'),
  togetherBookRule?: int32(name='together_book_rule', example='1'),
  trainBudget?: long(name='train_budget', example='1000'),
  travelerListShrink?: string(name='traveler_list'),
  travelerStandardShrink?: string(name='traveler_standard'),
  tripCause?: string(name='trip_cause'),
  tripDay?: int32(name='trip_day', example='1'),
  tripTitle?: string(name='trip_title'),
  type?: int32(name='type', example='1'),
  unionNo?: string(name='union_no', example='union001'),
  userId?: string(name='user_id', example='thridpart12138'),
  userName?: string(name='user_name'),
  vehicleBudget?: long(name='vehicle_budget', example='1000'),
}

model ApplyAddResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id', example='thirdpart12132'),
    thirdpartApplyId?: string(name='thirdpart_apply_id', example='thirdpart12132'),
    thirdpartBusinessId?: string(name='thirdpart_business_id', example='20220702001'),
  }(name='module', description='module。'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model ApplyAddResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyAddResponseBody(name='body'),
}

async function applyAddWithOptions(tmpReq: ApplyAddRequest, headers: ApplyAddHeaders, runtime: Util.RuntimeOptions): ApplyAddResponse {
  Util.validateModel(tmpReq);
  var request = new ApplyAddShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.externalTravelerList)) {
    request.externalTravelerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.externalTravelerList, 'external_traveler_list', 'json');
  }
  if (!Util.isUnset(tmpReq.externalTravelerStandard)) {
    request.externalTravelerStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.externalTravelerStandard, 'external_traveler_standard', 'json');
  }
  if (!Util.isUnset(tmpReq.hotelShare)) {
    request.hotelShareShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hotelShare, 'hotel_share', 'json');
  }
  if (!Util.isUnset(tmpReq.itineraryList)) {
    request.itineraryListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itineraryList, 'itinerary_list', 'json');
  }
  if (!Util.isUnset(tmpReq.itinerarySetList)) {
    request.itinerarySetListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itinerarySetList, 'itinerary_set_list', 'json');
  }
  if (!Util.isUnset(tmpReq.travelerList)) {
    request.travelerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerList, 'traveler_list', 'json');
  }
  if (!Util.isUnset(tmpReq.travelerStandard)) {
    request.travelerStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerStandard, 'traveler_standard', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.internationalFlightCabins)) {
    query['international_flight_cabins'] = request.internationalFlightCabins;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.budget)) {
    body['budget'] = request.budget;
  }
  if (!Util.isUnset(request.budgetMerge)) {
    body['budget_merge'] = request.budgetMerge;
  }
  if (!Util.isUnset(request.corpName)) {
    body['corp_name'] = request.corpName;
  }
  if (!Util.isUnset(request.departId)) {
    body['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.departName)) {
    body['depart_name'] = request.departName;
  }
  if (!Util.isUnset(request.extendField)) {
    body['extend_field'] = request.extendField;
  }
  if (!Util.isUnset(request.externalTravelerListShrink)) {
    body['external_traveler_list'] = request.externalTravelerListShrink;
  }
  if (!Util.isUnset(request.externalTravelerStandardShrink)) {
    body['external_traveler_standard'] = request.externalTravelerStandardShrink;
  }
  if (!Util.isUnset(request.flightBudget)) {
    body['flight_budget'] = request.flightBudget;
  }
  if (!Util.isUnset(request.hotelBudget)) {
    body['hotel_budget'] = request.hotelBudget;
  }
  if (!Util.isUnset(request.hotelShareShrink)) {
    body['hotel_share'] = request.hotelShareShrink;
  }
  if (!Util.isUnset(request.itineraryListShrink)) {
    body['itinerary_list'] = request.itineraryListShrink;
  }
  if (!Util.isUnset(request.itineraryRule)) {
    body['itinerary_rule'] = request.itineraryRule;
  }
  if (!Util.isUnset(request.itinerarySetListShrink)) {
    body['itinerary_set_list'] = request.itinerarySetListShrink;
  }
  if (!Util.isUnset(request.limitTraveler)) {
    body['limit_traveler'] = request.limitTraveler;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.subCorpId)) {
    body['sub_corp_id'] = request.subCorpId;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    body['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.thirdpartBusinessId)) {
    body['thirdpart_business_id'] = request.thirdpartBusinessId;
  }
  if (!Util.isUnset(request.thirdpartDepartId)) {
    body['thirdpart_depart_id'] = request.thirdpartDepartId;
  }
  if (!Util.isUnset(request.togetherBookRule)) {
    body['together_book_rule'] = request.togetherBookRule;
  }
  if (!Util.isUnset(request.trainBudget)) {
    body['train_budget'] = request.trainBudget;
  }
  if (!Util.isUnset(request.travelerListShrink)) {
    body['traveler_list'] = request.travelerListShrink;
  }
  if (!Util.isUnset(request.travelerStandardShrink)) {
    body['traveler_standard'] = request.travelerStandardShrink;
  }
  if (!Util.isUnset(request.tripCause)) {
    body['trip_cause'] = request.tripCause;
  }
  if (!Util.isUnset(request.tripDay)) {
    body['trip_day'] = request.tripDay;
  }
  if (!Util.isUnset(request.tripTitle)) {
    body['trip_title'] = request.tripTitle;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }
  if (!Util.isUnset(request.unionNo)) {
    body['union_no'] = request.unionNo;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    body['user_name'] = request.userName;
  }
  if (!Util.isUnset(request.vehicleBudget)) {
    body['vehicle_budget'] = request.vehicleBudget;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyAdd',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/biz-trip`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyAdd(request: ApplyAddRequest): ApplyAddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ApplyAddHeaders{};
  return applyAddWithOptions(request, headers, runtime);
}

model ApplyApproveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ApplyApproveRequest {
  applyId?: string(name='apply_id', example='sdfg'),
  note?: string(name='note'),
  operateTime?: string(name='operate_time', example='2022-07-12 16:12:53'),
  status?: int32(name='status', example='1'),
  subCorpId?: string(name='sub_corp_id', example='btrip123'),
  userId?: string(name='user_id', example='thirdpart12138'),
  userName?: string(name='user_name'),
}

model ApplyApproveResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: string(name='module', description='module。', example='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model ApplyApproveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyApproveResponseBody(name='body'),
}

async function applyApproveWithOptions(request: ApplyApproveRequest, headers: ApplyApproveHeaders, runtime: Util.RuntimeOptions): ApplyApproveResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    body['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.note)) {
    body['note'] = request.note;
  }
  if (!Util.isUnset(request.operateTime)) {
    body['operate_time'] = request.operateTime;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.subCorpId)) {
    body['sub_corp_id'] = request.subCorpId;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    body['user_name'] = request.userName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyApprove',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/biz-trip/action/approve`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyApprove(request: ApplyApproveRequest): ApplyApproveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ApplyApproveHeaders{};
  return applyApproveWithOptions(request, headers, runtime);
}

model ApplyInvoiceTaskHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ApplyInvoiceTaskRequest {
  billDate?: string(name='bill_date', example='2022-12-01'),
  invoiceTaskList?: [ 
    {
      contact?: string(name='contact'),
      email?: string(name='email'),
      flightInvoiceFee?: string(name='flight_invoice_fee', example='0'),
      fuPointInvoiceFee?: string(name='fu_point_invoice_fee', example='3.12'),
      hotelNormalInvoiceFee?: string(name='hotel_normal_invoice_fee', example='0'),
      hotelSpecialInvoiceFee?: string(name='hotel_special_invoice_fee', example='100'),
      internationalFlightInvoiceFee?: string(name='international_flight_invoice_fee', example='0'),
      invoiceThirdPartId?: string(name='invoice_third_part_id', example='123'),
      mailAddress?: string(name='mail_address'),
      mailCity?: string(name='mail_city'),
      mailFullAddress?: string(name='mail_full_address'),
      mailProvince?: string(name='mail_province'),
      penaltyFee?: string(name='penalty_fee', example='0'),
      remark?: string(name='remark'),
      serviceFee?: string(name='service_fee', example='1.02'),
      telephone?: string(name='telephone', example='1234567890'),
      trainInvoiceFee?: string(name='train_invoice_fee', example='0'),
      vehicleInvoiceFee?: string(name='vehicle_invoice_fee', example='100'),
    }
  ](name='invoice_task_list'),
}

model ApplyInvoiceTaskShrinkRequest {
  billDate?: string(name='bill_date', example='2022-12-01'),
  invoiceTaskListShrink?: string(name='invoice_task_list'),
}

model ApplyInvoiceTaskResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  requestId?: string(name='requestId', description='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model ApplyInvoiceTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyInvoiceTaskResponseBody(name='body'),
}

async function applyInvoiceTaskWithOptions(tmpReq: ApplyInvoiceTaskRequest, headers: ApplyInvoiceTaskHeaders, runtime: Util.RuntimeOptions): ApplyInvoiceTaskResponse {
  Util.validateModel(tmpReq);
  var request = new ApplyInvoiceTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.invoiceTaskList)) {
    request.invoiceTaskListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.invoiceTaskList, 'invoice_task_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.billDate)) {
    body['bill_date'] = request.billDate;
  }
  if (!Util.isUnset(request.invoiceTaskListShrink)) {
    body['invoice_task_list'] = request.invoiceTaskListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyInvoiceTask',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/apply-invoice-task`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyInvoiceTask(request: ApplyInvoiceTaskRequest): ApplyInvoiceTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ApplyInvoiceTaskHeaders{};
  return applyInvoiceTaskWithOptions(request, headers, runtime);
}

model ApplyListQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ApplyListQueryRequest {
  allApply?: boolean(name='all_apply', example='true'),
  departId?: string(name='depart_id', example='dept1'),
  endTime?: string(name='end_time', example='2017-05-01 00:00:00'),
  gmtModified?: string(name='gmt_modified', example='2018-05-01 00:00:00'),
  onlyShangLvApply?: boolean(name='only_shang_lv_apply', example='false'),
  page?: int32(name='page', example='1'),
  pageSize?: int32(name='page_size', example='10'),
  startTime?: string(name='start_time', example='2017-05-01 00:00:00'),
  subCorpId?: string(name='sub_corp_id', example='btrip123'),
  type?: int32(name='type', example='2'),
  unionNo?: string(name='union_no', example='abs123'),
  userId?: string(name='user_id', example='user1'),
}

model ApplyListQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  moduleList?: [ 
    {
      applyShowId?: string(name='apply_show_id', example='201710111505000464651'),
      approverList?: [ 
        {
          note?: string(name='note'),
          operateTime?: string(name='operate_time', example='2018-09-19T14:03Z'),
          order?: int32(name='order', example='1'),
          status?: int32(name='status', example='1'),
          statusDesc?: string(name='status_desc'),
          userId?: string(name='user_id', example='user1'),
          userName?: string(name='user_name'),
        }
      ](name='approver_list'),
      corpId?: string(name='corp_id', example='corp1'),
      corpName?: string(name='corp_name', example='abc'),
      departId?: string(name='depart_id', example='depart1'),
      departName?: string(name='depart_name'),
      externalTravelerList?: [ 
        {
          userName?: string(name='user_name'),
        }
      ](name='external_traveler_list'),
      flowCode?: string(name='flow_code', example='abc1234'),
      gmtCreate?: string(name='gmt_create', example='2018-09-19T14:03Z'),
      gmtModified?: string(name='gmt_modified', example='2018-09-19T14:03Z'),
      id?: long(name='id', example='1476'),
      itineraryList?: [ 
        {
          arrCity?: string(name='arr_city'),
          arrDate?: string(name='arr_date', example='2018-09-19T14:03Z'),
          costCenterName?: string(name='cost_center_name'),
          depCity?: string(name='dep_city'),
          depDate?: string(name='dep_date', example='2018-09-19T14:03Z'),
          invoiceName?: string(name='invoice_name'),
          itineraryId?: string(name='itinerary_id', example='abcd'),
          projectCode?: string(name='project_code', example='xm1'),
          projectTitle?: string(name='project_title'),
          trafficType?: int32(name='traffic_type', example='0'),
          tripWay?: int32(name='trip_way', example='1'),
        }
      ](name='itinerary_list'),
      itineraryRule?: int32(name='itinerary_rule', example='0'),
      itinerarySetList?: [ 
        {
          arrDate?: string(name='arr_date', example='2018-09-19T14:03Z'),
          cityCodeSet?: string(name='city_code_set', example='BJS，HGH'),
          citySet?: string(name='city_set'),
          costCenterName?: string(name='cost_center_name'),
          depDate?: string(name='dep_date', example='2018-09-19T14:03Z'),
          invoiceName?: string(name='invoice_name'),
          itineraryId?: string(name='itinerary_id', example='abcd'),
          projectCode?: string(name='project_code', example='12345'),
          projectTitle?: string(name='project_title'),
          trafficType?: int32(name='traffic_type', example='0'),
        }
      ](name='itinerary_set_list'),
      status?: int32(name='status', example='1'),
      statusDesc?: string(name='status_desc'),
      thirdpartBusinessId?: string(name='thirdpart_business_id', example='abc'),
      thirdpartId?: string(name='thirdpart_id', example='abc'),
      travelerList?: [ 
        {
          userId?: string(name='user_id', example='user1'),
          userName?: string(name='user_name'),
        }
      ](name='traveler_list'),
      tripCause?: string(name='trip_cause'),
      tripDay?: int32(name='trip_day', example='1'),
      tripTitle?: string(name='trip_title'),
      type?: int32(name='type', example='2'),
      unionNo?: string(name='union_no', example='abc'),
      userId?: string(name='user_id', example='user1'),
      userName?: string(name='user_name'),
    }
  ](name='module_list'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model ApplyListQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyListQueryResponseBody(name='body'),
}

async function applyListQueryWithOptions(request: ApplyListQueryRequest, headers: ApplyListQueryHeaders, runtime: Util.RuntimeOptions): ApplyListQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.allApply)) {
    query['all_apply'] = request.allApply;
  }
  if (!Util.isUnset(request.departId)) {
    query['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['end_time'] = request.endTime;
  }
  if (!Util.isUnset(request.gmtModified)) {
    query['gmt_modified'] = request.gmtModified;
  }
  if (!Util.isUnset(request.onlyShangLvApply)) {
    query['only_shang_lv_apply'] = request.onlyShangLvApply;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['start_time'] = request.startTime;
  }
  if (!Util.isUnset(request.subCorpId)) {
    query['sub_corp_id'] = request.subCorpId;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }
  if (!Util.isUnset(request.unionNo)) {
    query['union_no'] = request.unionNo;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyListQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/biz-trips`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyListQuery(request: ApplyListQueryRequest): ApplyListQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ApplyListQueryHeaders{};
  return applyListQueryWithOptions(request, headers, runtime);
}

model ApplyModifyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ApplyModifyRequest {
  budget?: long(name='budget', example='4000'),
  budgetMerge?: int32(name='budget_merge', example='1'),
  corpName?: string(name='corp_name'),
  departId?: string(name='depart_id', example='001'),
  departName?: string(name='depart_name'),
  extendField?: string(name='extend_field', description='可将补充描述传入此字段，账单中将会体现此字段的值。可以用于企业的统计和对账', example='{"cost_center":"成本中心"}'),
  externalTravelerList?: [ 
    {
      userName?: string(name='user_name'),
    }
  ](name='external_traveler_list'),
  externalTravelerStandard?: {
    businessDiscount?: int32(name='business_discount', example='1'),
    economyDiscount?: int32(name='economy_discount', example='1'),
    firstDiscount?: int32(name='first_discount', example='1'),
    flightCabins?: string(name='flight_cabins', example='Y'),
    hotelCitys?: [ 
      {
        cityCode?: string(name='city_code', example='0'),
        cityName?: string(name='city_name'),
        fee?: long(name='fee', example='1001'),
      }
    ](name='hotel_citys'),
    premiumEconomyDiscount?: int32(name='premium_economy_discount', description='超级经济舱折扣。1到10的整数', example='1'),
    reserveType?: int32(name='reserve_type', example='0'),
    trainSeats?: string(name='train_seats', example='1'),
  }(name='external_traveler_standard'),
  flightBudget?: long(name='flight_budget', example='1000'),
  hotelBudget?: long(name='hotel_budget', example='1000'),
  hotelShare?: {
    param?: string(name='param', example='70'),
    type?: string(name='type', example='1'),
  }(name='hotel_share'),
  itineraryList?: [ 
    {
      arrCity?: string(name='arr_city'),
      arrCityCode?: string(name='arr_city_code', example='HGH'),
      arrDate?: string(name='arr_date', example='2022-07-12 00:00:00'),
      costCenterId?: long(name='cost_center_id', example='2021413'),
      depCity?: string(name='dep_city'),
      depCityCode?: string(name='dep_city_code', example='BJS'),
      depDate?: string(name='dep_date', example='2022-07-12 00:00:00'),
      invoiceId?: long(name='invoice_id', example='614141'),
      itineraryId?: string(name='itinerary_id', example='2000131'),
      needHotel?: boolean(name='need_hotel', example='true'),
      needTraffic?: boolean(name='need_traffic', example='true'),
      projectCode?: string(name='project_code', example='projectone'),
      projectTitle?: string(name='project_title'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id', example='ZG14131'),
      thirdpartCostCenterId?: string(name='thirdpart_cost_center_id', example='thirdpart5151'),
      trafficType?: int32(name='traffic_type', example='0'),
      tripWay?: int32(name='trip_way', example='0'),
    }
  ](name='itinerary_list', example='0'),
  itineraryRule?: int32(name='itinerary_rule', example='0'),
  itinerarySetList?: [ 
    {
      arrDate?: string(name='arr_date', example='2017-01-01 00:00:00'),
      cityCodeSet?: string(name='city_code_set', example='BJS,SHA'),
      citySet?: string(name='city_set'),
      costCenterId?: long(name='cost_center_id', example='123455'),
      depDate?: string(name='dep_date', example='2017-01-01 00:00:00'),
      invoiceId?: long(name='invoice_id', example='12344'),
      itineraryId?: string(name='itinerary_id', example='20220722001'),
      projectCode?: string(name='project_code', example='projecttow'),
      projectTitle?: string(name='project_title'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id', example='thridpart12138'),
      thirdpartCostCenterId?: string(name='thirdpart_cost_center_id', example='thridpart12138'),
      trafficType?: int32(name='traffic_type', example='0'),
    }
  ](name='itinerary_set_list'),
  limitTraveler?: int32(name='limit_traveler', example='0'),
  status?: int32(name='status', example='1'),
  subCorpId?: string(name='sub_corp_id', description='子企业Id', example='btrip123'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', example='0001A1100000007EX08O'),
  thirdpartBusinessId?: string(name='thirdpart_business_id', example='202201413141'),
  thirdpartDepartId?: string(name='thirdpart_depart_id'),
  togetherBookRule?: int32(name='together_book_rule', example='1'),
  trainBudget?: long(name='train_budget', example='1000'),
  travelerList?: [ 
    {
      userId?: string(name='user_id', example='GS641312'),
      userName?: string(name='user_name'),
    }
  ](name='traveler_list'),
  travelerStandard?: [ 
    {
      businessDiscount?: int32(name='business_discount', example='1'),
      economyDiscount?: int32(name='economy_discount', example='1'),
      firstDiscount?: int32(name='first_discount', example='1'),
      flightCabins?: string(name='flight_cabins', example='Y'),
      hotelCitys?: [ 
        {
          cityCode?: string(name='city_code', example='0'),
          cityName?: string(name='city_name'),
          fee?: long(name='fee', example='1014'),
        }
      ](name='hotel_citys'),
      premiumEconomyDiscount?: int32(name='premium_economy_discount', description='超级经济舱折扣。1到10的整数', example='1'),
      reserveType?: int32(name='reserve_type', example='0'),
      trainSeats?: string(name='train_seats', example='1'),
      userId?: string(name='user_id', example='thirdpart12138'),
    }
  ](name='traveler_standard'),
  tripCause?: string(name='trip_cause'),
  tripDay?: int32(name='trip_day', example='1'),
  tripTitle?: string(name='trip_title'),
  unionNo?: string(name='union_no', example='union51415'),
  userId?: string(name='user_id', example='thirdpart12138'),
  userName?: string(name='user_name'),
  vehicleBudget?: long(name='vehicle_budget', example='1000'),
}

model ApplyModifyShrinkRequest {
  budget?: long(name='budget', example='4000'),
  budgetMerge?: int32(name='budget_merge', example='1'),
  corpName?: string(name='corp_name'),
  departId?: string(name='depart_id', example='001'),
  departName?: string(name='depart_name'),
  extendField?: string(name='extend_field', description='可将补充描述传入此字段，账单中将会体现此字段的值。可以用于企业的统计和对账', example='{"cost_center":"成本中心"}'),
  externalTravelerListShrink?: string(name='external_traveler_list'),
  externalTravelerStandardShrink?: string(name='external_traveler_standard'),
  flightBudget?: long(name='flight_budget', example='1000'),
  hotelBudget?: long(name='hotel_budget', example='1000'),
  hotelShareShrink?: string(name='hotel_share'),
  itineraryListShrink?: string(name='itinerary_list', example='0'),
  itineraryRule?: int32(name='itinerary_rule', example='0'),
  itinerarySetListShrink?: string(name='itinerary_set_list'),
  limitTraveler?: int32(name='limit_traveler', example='0'),
  status?: int32(name='status', example='1'),
  subCorpId?: string(name='sub_corp_id', description='子企业Id', example='btrip123'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', example='0001A1100000007EX08O'),
  thirdpartBusinessId?: string(name='thirdpart_business_id', example='202201413141'),
  thirdpartDepartId?: string(name='thirdpart_depart_id'),
  togetherBookRule?: int32(name='together_book_rule', example='1'),
  trainBudget?: long(name='train_budget', example='1000'),
  travelerListShrink?: string(name='traveler_list'),
  travelerStandardShrink?: string(name='traveler_standard'),
  tripCause?: string(name='trip_cause'),
  tripDay?: int32(name='trip_day', example='1'),
  tripTitle?: string(name='trip_title'),
  unionNo?: string(name='union_no', example='union51415'),
  userId?: string(name='user_id', example='thirdpart12138'),
  userName?: string(name='user_name'),
  vehicleBudget?: long(name='vehicle_budget', example='1000'),
}

model ApplyModifyResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id', example='118526587'),
    thirdpartApplyId?: string(name='thirdpart_apply_id', example='thirdpart12132'),
    thirdpartBusinessId?: string(name='thirdpart_business_id', example='20220702001'),
  }(name='module', description='module。'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model ApplyModifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyModifyResponseBody(name='body'),
}

async function applyModifyWithOptions(tmpReq: ApplyModifyRequest, headers: ApplyModifyHeaders, runtime: Util.RuntimeOptions): ApplyModifyResponse {
  Util.validateModel(tmpReq);
  var request = new ApplyModifyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.externalTravelerList)) {
    request.externalTravelerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.externalTravelerList, 'external_traveler_list', 'json');
  }
  if (!Util.isUnset(tmpReq.externalTravelerStandard)) {
    request.externalTravelerStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.externalTravelerStandard, 'external_traveler_standard', 'json');
  }
  if (!Util.isUnset(tmpReq.hotelShare)) {
    request.hotelShareShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hotelShare, 'hotel_share', 'json');
  }
  if (!Util.isUnset(tmpReq.itineraryList)) {
    request.itineraryListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itineraryList, 'itinerary_list', 'json');
  }
  if (!Util.isUnset(tmpReq.itinerarySetList)) {
    request.itinerarySetListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itinerarySetList, 'itinerary_set_list', 'json');
  }
  if (!Util.isUnset(tmpReq.travelerList)) {
    request.travelerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerList, 'traveler_list', 'json');
  }
  if (!Util.isUnset(tmpReq.travelerStandard)) {
    request.travelerStandardShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerStandard, 'traveler_standard', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.budget)) {
    body['budget'] = request.budget;
  }
  if (!Util.isUnset(request.budgetMerge)) {
    body['budget_merge'] = request.budgetMerge;
  }
  if (!Util.isUnset(request.corpName)) {
    body['corp_name'] = request.corpName;
  }
  if (!Util.isUnset(request.departId)) {
    body['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.departName)) {
    body['depart_name'] = request.departName;
  }
  if (!Util.isUnset(request.extendField)) {
    body['extend_field'] = request.extendField;
  }
  if (!Util.isUnset(request.externalTravelerListShrink)) {
    body['external_traveler_list'] = request.externalTravelerListShrink;
  }
  if (!Util.isUnset(request.externalTravelerStandardShrink)) {
    body['external_traveler_standard'] = request.externalTravelerStandardShrink;
  }
  if (!Util.isUnset(request.flightBudget)) {
    body['flight_budget'] = request.flightBudget;
  }
  if (!Util.isUnset(request.hotelBudget)) {
    body['hotel_budget'] = request.hotelBudget;
  }
  if (!Util.isUnset(request.hotelShareShrink)) {
    body['hotel_share'] = request.hotelShareShrink;
  }
  if (!Util.isUnset(request.itineraryListShrink)) {
    body['itinerary_list'] = request.itineraryListShrink;
  }
  if (!Util.isUnset(request.itineraryRule)) {
    body['itinerary_rule'] = request.itineraryRule;
  }
  if (!Util.isUnset(request.itinerarySetListShrink)) {
    body['itinerary_set_list'] = request.itinerarySetListShrink;
  }
  if (!Util.isUnset(request.limitTraveler)) {
    body['limit_traveler'] = request.limitTraveler;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.subCorpId)) {
    body['sub_corp_id'] = request.subCorpId;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    body['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.thirdpartBusinessId)) {
    body['thirdpart_business_id'] = request.thirdpartBusinessId;
  }
  if (!Util.isUnset(request.thirdpartDepartId)) {
    body['thirdpart_depart_id'] = request.thirdpartDepartId;
  }
  if (!Util.isUnset(request.togetherBookRule)) {
    body['together_book_rule'] = request.togetherBookRule;
  }
  if (!Util.isUnset(request.trainBudget)) {
    body['train_budget'] = request.trainBudget;
  }
  if (!Util.isUnset(request.travelerListShrink)) {
    body['traveler_list'] = request.travelerListShrink;
  }
  if (!Util.isUnset(request.travelerStandardShrink)) {
    body['traveler_standard'] = request.travelerStandardShrink;
  }
  if (!Util.isUnset(request.tripCause)) {
    body['trip_cause'] = request.tripCause;
  }
  if (!Util.isUnset(request.tripDay)) {
    body['trip_day'] = request.tripDay;
  }
  if (!Util.isUnset(request.tripTitle)) {
    body['trip_title'] = request.tripTitle;
  }
  if (!Util.isUnset(request.unionNo)) {
    body['union_no'] = request.unionNo;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    body['user_name'] = request.userName;
  }
  if (!Util.isUnset(request.vehicleBudget)) {
    body['vehicle_budget'] = request.vehicleBudget;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApplyModify',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/biz-trip`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyModify(request: ApplyModifyRequest): ApplyModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ApplyModifyHeaders{};
  return applyModifyWithOptions(request, headers, runtime);
}

model ApplyQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ApplyQueryRequest {
  applyId?: int32(name='apply_id', example='123'),
  applyShowId?: string(name='apply_show_id', example='201710111505000464651'),
  subCorpId?: string(name='sub_corp_id', example='btrip123'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', example='adczd'),
  type?: int32(name='type', example='1'),
}

model ApplyQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    applyShowId?: string(name='apply_show_id', example='201710111505000464651'),
    approverList?: [ 
      {
        note?: string(name='note'),
        operateTime?: string(name='operate_time', example='2018-09-19T14:03Z'),
        order?: int32(name='order', example='1'),
        status?: int32(name='status', example='0'),
        statusDesc?: string(name='status_desc'),
        userId?: string(name='user_id', example='user1'),
        userName?: string(name='user_name'),
      }
    ](name='approver_list'),
    budget?: long(name='budget', example='100000'),
    budgetMerge?: int32(name='budget_merge', example='1'),
    corpId?: string(name='corp_id', example='corpid'),
    corpName?: string(name='corp_name'),
    departId?: string(name='depart_id', example='dept1'),
    departName?: string(name='depart_name', example='adv'),
    extendField?: string(name='extend_field', description='补充描述，账单中将会体现此字段的值。可以用于企业的统计和对账', example='{"cost_center":"成本中心"}'),
    externalTravelerList?: [ 
      {
        businessDiscount?: int32(name='business_discount', example='1'),
        economyDiscount?: int32(name='economy_discount', example='1'),
        firstDiscount?: int32(name='first_discount', example='1'),
        flightCabins?: string(name='flight_cabins', example='F'),
        hotelCitys?: [ 
          {
            cityCode?: string(name='city_code', example='0'),
            cityName?: string(name='city_name'),
            fee?: long(name='fee', example='100000'),
          }
        ](name='hotel_citys'),
        premiumEconomyDiscount?: int32(name='premium_economy_discount', example='1'),
        reserveType?: int32(name='reserve_type', example='1'),
        trainSeats?: string(name='train_seats', example='1'),
        userName?: string(name='user_name'),
      }
    ](name='external_traveler_list'),
    flightBudget?: long(name='flight_budget', example='10000'),
    gmtCreate?: string(name='gmt_create', example='2018-09-19T14:03Z'),
    gmtModified?: string(name='gmt_modified', example='2018-09-19T14:03Z'),
    hotelBudget?: long(name='hotel_budget', example='100000'),
    hotelShare?: {
      param?: string(name='param', example='70'),
      type?: string(name='type', example='1'),
    }(name='hotel_share'),
    id?: long(name='id', example='3298'),
    itineraryList?: [ 
      {
        arrCity?: string(name='arr_city'),
        arrCityCode?: string(name='arr_city_code', example='330100'),
        arrDate?: string(name='arr_date', example='2018-09-19T14:03Z'),
        costCenterName?: string(name='cost_center_name', example='accac'),
        depCity?: string(name='dep_city'),
        depCityCode?: string(name='dep_city_code', example='330100'),
        depDate?: string(name='dep_date', example='2018-09-19T14:03Z'),
        invoiceName?: string(name='invoice_name'),
        itineraryId?: string(name='itinerary_id'),
        projectCode?: string(name='project_code', example='xm1'),
        projectTitle?: string(name='project_title'),
        trafficType?: int32(name='traffic_type', example='1'),
        tripWay?: int32(name='trip_way', example='1'),
      }
    ](name='itinerary_list'),
    itineraryRule?: int32(name='itinerary_rule', example='0'),
    itinerarySetList?: [ 
      {
        arrDate?: string(name='arr_date', example='2018-09-19T14:03Z'),
        cityCodeSet?: string(name='city_code_set', example='BJS，HGH'),
        citySet?: string(name='city_set'),
        costCenterName?: string(name='cost_center_name'),
        depDate?: string(name='dep_date', example='2018-09-19T14:03Z'),
        invoiceName?: string(name='invoice_name'),
        itineraryId?: string(name='itinerary_id', example='12345'),
        projectCode?: string(name='project_code', example='projecttow'),
        projectTitle?: string(name='project_title'),
        trafficType?: int32(name='traffic_type', example='0'),
      }
    ](name='itinerary_set_list'),
    limitTraveler?: int32(name='limit_traveler', example='0'),
    status?: int32(name='status', example='1'),
    statusDesc?: string(name='status_desc'),
    thirdpartBusinessId?: string(name='thirdpart_business_id', example='1213'),
    thirdpartId?: string(name='thirdpart_id', example='1214254'),
    togetherBookRule?: int32(name='together_book_rule', example='1'),
    trainBudget?: long(name='train_budget', example='10000'),
    travelerList?: [ 
      {
        businessDiscount?: int32(name='business_discount', example='1'),
        economyDiscount?: int32(name='economy_discount', example='1'),
        firstDiscount?: int32(name='first_discount', example='1'),
        flightCabins?: string(name='flight_cabins', example='F'),
        hotelCitys?: [ 
          {
            cityCode?: string(name='city_code', example='0'),
            cityName?: string(name='city_name'),
            fee?: long(name='fee', example='100000'),
          }
        ](name='hotel_citys'),
        premiumEconomyDiscount?: int32(name='premium_economy_discount', example='1'),
        reserveType?: int32(name='reserve_type', example='1'),
        trainSeats?: string(name='train_seats', example='1'),
        userId?: string(name='user_id', example='3423'),
        userName?: string(name='user_name'),
      }
    ](name='traveler_list'),
    tripCause?: string(name='trip_cause'),
    tripDay?: int32(name='trip_day', example='2'),
    tripTitle?: string(name='trip_title'),
    type?: int32(name='type', example='2'),
    unionNo?: string(name='union_no', example='abd123'),
    userId?: string(name='user_id', example='user1'),
    userName?: string(name='user_name'),
    vehicleBudget?: long(name='vehicle_budget', example='10000'),
  }(name='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model ApplyQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyQueryResponseBody(name='body'),
}

async function applyQueryWithOptions(request: ApplyQueryRequest, headers: ApplyQueryHeaders, runtime: Util.RuntimeOptions): ApplyQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.applyShowId)) {
    query['apply_show_id'] = request.applyShowId;
  }
  if (!Util.isUnset(request.subCorpId)) {
    query['sub_corp_id'] = request.subCorpId;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    query['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/biz-trip`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyQuery(request: ApplyQueryRequest): ApplyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ApplyQueryHeaders{};
  return applyQueryWithOptions(request, headers, runtime);
}

model BtripBillInfoAdjustHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model BtripBillInfoAdjustRequest {
  primaryId?: long(name='primary_id', example='123456'),
  thirdPartCostCenterId?: string(name='third_part_cost_center_id', example='GA15131'),
  thirdPartDepartmentId?: string(name='third_part_department_id', example='GA15131'),
  thirdPartInvoiceId?: string(name='third_part_invoice_id', example='GA15131'),
  thirdPartProjectId?: string(name='third_part_project_id', example='GA15131'),
  userId?: string(name='user_id', example='123'),
}

model BtripBillInfoAdjustResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model BtripBillInfoAdjustResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BtripBillInfoAdjustResponseBody(name='body'),
}

async function btripBillInfoAdjustWithOptions(request: BtripBillInfoAdjustRequest, headers: BtripBillInfoAdjustHeaders, runtime: Util.RuntimeOptions): BtripBillInfoAdjustResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.primaryId)) {
    body['primary_id'] = request.primaryId;
  }
  if (!Util.isUnset(request.thirdPartCostCenterId)) {
    body['third_part_cost_center_id'] = request.thirdPartCostCenterId;
  }
  if (!Util.isUnset(request.thirdPartDepartmentId)) {
    body['third_part_department_id'] = request.thirdPartDepartmentId;
  }
  if (!Util.isUnset(request.thirdPartInvoiceId)) {
    body['third_part_invoice_id'] = request.thirdPartInvoiceId;
  }
  if (!Util.isUnset(request.thirdPartProjectId)) {
    body['third_part_project_id'] = request.thirdPartProjectId;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BtripBillInfoAdjust',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/bill/v1/info/action/adjust`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function btripBillInfoAdjust(request: BtripBillInfoAdjustRequest): BtripBillInfoAdjustResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new BtripBillInfoAdjustHeaders{};
  return btripBillInfoAdjustWithOptions(request, headers, runtime);
}

model CarApplyAddHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CarApplyAddRequest {
  cause?: string(name='cause'),
  city?: string(name='city'),
  date?: string(name='date', example='2022-07-12 14:52:52'),
  finishedDate?: string(name='finished_date', example='2022-07-12 18:51:25'),
  projectCode?: string(name='project_code', example='project1413'),
  projectName?: string(name='project_name'),
  status?: int32(name='status', example='0'),
  thirdPartApplyId?: string(name='third_part_apply_id', example='IRGS1413'),
  thirdPartCostCenterId?: string(name='third_part_cost_center_id', example='QA1411'),
  thirdPartInvoiceId?: string(name='third_part_invoice_id', example='GA15131'),
  timesTotal?: int32(name='times_total', example='1'),
  timesType?: int32(name='times_type', example='1'),
  timesUsed?: int32(name='times_used', example='1'),
  title?: string(name='title'),
  userId?: string(name='user_id', example='OPEN1415614'),
}

model CarApplyAddResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: long(name='module', example='1002923002'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model CarApplyAddResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CarApplyAddResponseBody(name='body'),
}

async function carApplyAddWithOptions(request: CarApplyAddRequest, headers: CarApplyAddHeaders, runtime: Util.RuntimeOptions): CarApplyAddResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cause)) {
    body['cause'] = request.cause;
  }
  if (!Util.isUnset(request.city)) {
    body['city'] = request.city;
  }
  if (!Util.isUnset(request.date)) {
    body['date'] = request.date;
  }
  if (!Util.isUnset(request.finishedDate)) {
    body['finished_date'] = request.finishedDate;
  }
  if (!Util.isUnset(request.projectCode)) {
    body['project_code'] = request.projectCode;
  }
  if (!Util.isUnset(request.projectName)) {
    body['project_name'] = request.projectName;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.thirdPartApplyId)) {
    body['third_part_apply_id'] = request.thirdPartApplyId;
  }
  if (!Util.isUnset(request.thirdPartCostCenterId)) {
    body['third_part_cost_center_id'] = request.thirdPartCostCenterId;
  }
  if (!Util.isUnset(request.thirdPartInvoiceId)) {
    body['third_part_invoice_id'] = request.thirdPartInvoiceId;
  }
  if (!Util.isUnset(request.timesTotal)) {
    body['times_total'] = request.timesTotal;
  }
  if (!Util.isUnset(request.timesType)) {
    body['times_type'] = request.timesType;
  }
  if (!Util.isUnset(request.timesUsed)) {
    body['times_used'] = request.timesUsed;
  }
  if (!Util.isUnset(request.title)) {
    body['title'] = request.title;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CarApplyAdd',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/car`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function carApplyAdd(request: CarApplyAddRequest): CarApplyAddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CarApplyAddHeaders{};
  return carApplyAddWithOptions(request, headers, runtime);
}

model CarApplyModifyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CarApplyModifyRequest {
  operateTime?: string(name='operate_time', example='2022-07-12 16:12:53'),
  remark?: string(name='remark'),
  status?: int32(name='status', example='1'),
  thirdPartApplyId?: string(name='third_part_apply_id', example='IRGS1413'),
  userId?: string(name='user_id', example='open62141'),
}

model CarApplyModifyResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: boolean(name='module', description='module。', example='{\\"list\\": [], \\"pageSize\\": 20, \\"pageNo\\": 1}'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model CarApplyModifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CarApplyModifyResponseBody(name='body'),
}

async function carApplyModifyWithOptions(request: CarApplyModifyRequest, headers: CarApplyModifyHeaders, runtime: Util.RuntimeOptions): CarApplyModifyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.operateTime)) {
    body['operate_time'] = request.operateTime;
  }
  if (!Util.isUnset(request.remark)) {
    body['remark'] = request.remark;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.thirdPartApplyId)) {
    body['third_part_apply_id'] = request.thirdPartApplyId;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CarApplyModify',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/car`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function carApplyModify(request: CarApplyModifyRequest): CarApplyModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CarApplyModifyHeaders{};
  return carApplyModifyWithOptions(request, headers, runtime);
}

model CarApplyQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CarApplyQueryRequest {
  createdEndAt?: string(name='created_end_at', example='2021-03-18 20:26:56'),
  createdStartAt?: string(name='created_start_at', example='2021-03-18 20:26:56'),
  pageNumber?: int32(name='page_number', example='1'),
  pageSize?: int32(name='page_size', example='20'),
  thirdPartApplyId?: string(name='third_part_apply_id', example='apply1'),
  userId?: string(name='user_id', example='userid'),
}

model CarApplyQueryResponseBody = {
  applyList?: [ 
    {
      approverList?: [ 
        {
          note?: string(name='note'),
          operateTime?: string(name='operate_time', example='2021-03-18T20:26Z'),
          order?: int32(name='order', example='1'),
          status?: int32(name='status', example='1'),
          statusDesc?: string(name='status_desc'),
          userId?: string(name='user_id', example='user1'),
          userName?: string(name='user_name'),
        }
      ](name='approver_list'),
      departId?: string(name='depart_id', example='depart1'),
      departName?: string(name='depart_name'),
      gmtCreate?: string(name='gmt_create', example='2021-03-18T20:26Z'),
      gmtModified?: string(name='gmt_modified', example='2021-03-18T20:26Z'),
      itineraryList?: [ 
        {
          arrCity?: string(name='arr_city'),
          arrCityCode?: string(name='arr_city_code', example='HGH'),
          arrDate?: string(name='arr_date', example='2021-03-18T20:26Z'),
          costCenterId?: long(name='cost_center_id', example='1'),
          costCenterName?: string(name='cost_center_name'),
          depCity?: string(name='dep_city'),
          depCityCode?: string(name='dep_city_code', example='HGH'),
          depDate?: string(name='dep_date', example='2021-03-18T20:26Z'),
          invoiceId?: long(name='invoice_id', example='1'),
          invoiceName?: string(name='invoice_name'),
          itineraryId?: string(name='itinerary_id', example='1'),
          projectCode?: string(name='project_code', example='xm1'),
          projectTitle?: string(name='project_title'),
          trafficType?: int32(name='traffic_type', example='4'),
        }
      ](name='itinerary_list'),
      status?: int32(name='status', example='2'),
      statusDesc?: string(name='status_desc'),
      thirdpartId?: string(name='thirdpart_id', example='1'),
      tripCause?: string(name='trip_cause'),
      tripTitle?: string(name='trip_title'),
      userId?: string(name='user_id', example='user1'),
      userName?: string(name='user_name'),
    }
  ](name='apply_list'),
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='True'),
  total?: int32(name='total', example='6'),
  traceId?: string(name='traceId', example='210bcc3a16583004579056128d33d7'),
}

model CarApplyQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CarApplyQueryResponseBody(name='body'),
}

async function carApplyQueryWithOptions(request: CarApplyQueryRequest, headers: CarApplyQueryHeaders, runtime: Util.RuntimeOptions): CarApplyQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.createdEndAt)) {
    query['created_end_at'] = request.createdEndAt;
  }
  if (!Util.isUnset(request.createdStartAt)) {
    query['created_start_at'] = request.createdStartAt;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['page_number'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.thirdPartApplyId)) {
    query['third_part_apply_id'] = request.thirdPartApplyId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CarApplyQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/car`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function carApplyQuery(request: CarApplyQueryRequest): CarApplyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CarApplyQueryHeaders{};
  return carApplyQueryWithOptions(request, headers, runtime);
}

model CarBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CarBillSettlementQueryRequest {
  pageNo?: int32(name='page_no', example='1'),
  pageSize?: int32(name='page_size', example='30'),
  periodEnd?: string(name='period_end', example='2022-07-01'),
  periodStart?: string(name='period_start', example='2022-07-01'),
}

model CarBillSettlementQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category', example='4'),
    corpId?: string(name='corp_id'),
    dataList?: [ 
      {
        alipayTradeNo?: string(name='alipay_trade_no', example='34534543545345'),
        applyExtendField?: string(name='apply_extend_field', description='审批扩展自定义字段'),
        applyId?: string(name='apply_id'),
        arrCity?: string(name='arr_city'),
        arrDate?: string(name='arr_date', example='2022-07-02'),
        arrLocation?: string(name='arr_location'),
        arrTime?: string(name='arr_time', example='13:51:43'),
        billRecordTime?: string(name='bill_record_time', example='2022-05-15T22:27Z'),
        bookTime?: string(name='book_time', example='2022-05-15 22:27:00'),
        bookerId?: string(name='booker_id'),
        bookerJobNo?: string(name='booker_job_no', example='70022164'),
        bookerName?: string(name='booker_name'),
        businessCategory?: string(name='business_category'),
        capitalDirection?: string(name='capital_direction', example='1'),
        carLevel?: string(name='car_level'),
        cascadeDepartment?: string(name='cascade_department'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number', example='2391-CN90.150'),
        coupon?: double(name='coupon', example='1'),
        couponPrice?: double(name='coupon_price', example='12.7'),
        department?: string(name='department'),
        departmentId?: string(name='department_id'),
        deptCity?: string(name='dept_city'),
        deptDate?: string(name='dept_date', example='2021-10-13'),
        deptLocation?: string(name='dept_location'),
        deptTime?: string(name='dept_time', example='13:46:05'),
        estimateDriveDistance?: string(name='estimate_drive_distance', example='29.07'),
        estimatePrice?: double(name='estimate_price', example='69'),
        feeType?: string(name='fee_type', example='40107'),
        index?: string(name='index', example='4988580'),
        invoiceTitle?: string(name='invoice_title'),
        memo?: string(name='memo'),
        orderId?: string(name='order_id', example='110285961234324'),
        orderPrice?: double(name='order_price', example='12.7'),
        overApplyId?: string(name='over_apply_id', example='34535465346'),
        personSettleFee?: double(name='person_settle_fee', example='0'),
        primaryId?: long(name='primary_id', example='4988580'),
        projectCode?: string(name='project_code', example='23423432423'),
        projectName?: string(name='project_name'),
        providerName?: string(name='provider_name'),
        realDriveDistance?: string(name='real_drive_distance', example='0.00'),
        realFromAddr?: string(name='real_from_addr'),
        realToAddr?: string(name='real_to_addr'),
        remark?: string(name='remark'),
        serviceFee?: double(name='service_fee', example='12.7'),
        settlementFee?: double(name='settlement_fee', example='5'),
        settlementGrantFee?: double(name='settlement_grant_fee', example='6.11'),
        settlementTime?: string(name='settlement_time', example='2022-05-15 22:27:00'),
        settlementType?: string(name='settlement_type', example='4'),
        specialOrder?: string(name='special_order'),
        specialReason?: string(name='special_reason'),
        status?: int32(name='status', example='1'),
        subOrderId?: string(name='sub_order_id', example='123123232'),
        taxRate?: string(name='tax_rate', description='税率', example='6%'),
        travelerId?: string(name='traveler_id'),
        travelerJobNo?: string(name='traveler_job_no', example='70022164'),
        travelerName?: string(name='traveler_name'),
        userConfirmDesc?: string(name='user_confirm_desc'),
        voucherType?: int32(name='voucher_type', example='11'),
      }
    ](name='data_list'),
    periodEnd?: string(name='period_end', example='2021-10-14'),
    periodStart?: string(name='period_start', example='2021-10-13'),
    totalNum?: long(name='total_num', example='2695'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model CarBillSettlementQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CarBillSettlementQueryResponseBody(name='body'),
}

async function carBillSettlementQueryWithOptions(request: CarBillSettlementQueryRequest, headers: CarBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): CarBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CarBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/car/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function carBillSettlementQuery(request: CarBillSettlementQueryRequest): CarBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CarBillSettlementQueryHeaders{};
  return carBillSettlementQueryWithOptions(request, headers, runtime);
}

model CarOrderListQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CarOrderListQueryRequest {
  allApply?: boolean(name='all_apply', example='false'),
  applyId?: long(name='apply_id', example='117429516'),
  departId?: string(name='depart_id', example='departId'),
  endTime?: string(name='end_time', example='2022-07-01 00:00:00'),
  page?: int32(name='page', example='1'),
  pageSize?: int32(name='page_size', example='10'),
  startTime?: string(name='start_time', example='2022-07-01 00:00:00'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', example='cs2NH_n1QTC3R6hB9m-BAQ08221658314273'),
  updateEndTime?: string(name='update_end_time', example='2022-07-01 00:00:00'),
  updateStartTime?: string(name='update_start_time', example='2022-07-01 00:00:00'),
  userId?: string(name='user_id', example='userId'),
}

model CarOrderListQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: [ 
    {
      applyId?: long(name='apply_id', example='117429516'),
      applyShowId?: string(name='apply_show_id', example='201802031353000525653'),
      btripTitle?: string(name='btrip_title'),
      businessCategory?: string(name='business_category', example='TRAVEL'),
      cancelTime?: string(name='cancel_time', example='2022-07-04T16:13Z'),
      carInfo?: string(name='car_info'),
      carLevel?: int32(name='car_level', example='1'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      costCenterId?: long(name='cost_center_id', example='11376'),
      costCenterName?: string(name='cost_center_name'),
      costCenterNumber?: string(name='cost_center_number', example='CT-134JHK'),
      deptId?: long(name='dept_id'),
      deptName?: string(name='dept_name'),
      driverConfirmTime?: string(name='driver_confirm_time', example='2022-07-04T16:13Z'),
      estimatePrice?: double(name='estimate_price', example='100'),
      fromAddress?: string(name='from_address'),
      fromCityName?: string(name='from_city_name'),
      gmtCreate?: string(name='gmt_create', example='2022-07-04T16:13Z'),
      gmtModified?: string(name='gmt_modified', example='2022-07-04T16:13Z'),
      id?: long(name='id', example='3615085'),
      invoiceId?: long(name='invoice_id', example='11876'),
      invoiceTitle?: string(name='invoice_title'),
      isSpecial?: boolean(name='is_special', example='true'),
      memo?: string(name='memo'),
      orderStatus?: int32(name='order_status'),
      passengerName?: string(name='passenger_name'),
      payTime?: string(name='pay_time', example='2022-07-04T16:13Z'),
      priceInfoList?: [ 
        {
          categoryCode?: int32(name='category_code', example='1'),
          categoryType?: int32(name='category_type', example='1'),
          gmtCreate?: string(name='gmt_create', example='2022-07-04T16:13Z'),
          passengerName?: string(name='passenger_name'),
          payType?: int32(name='pay_type', example='1'),
          personPrice?: double(name='person_price', example='100'),
          price?: double(name='price', example='100'),
          tradeId?: string(name='trade_id', example='8908076767'),
          type?: int32(name='type', example='1'),
        }
      ](name='price_info_list'),
      projectCode?: string(name='project_code', example='P- JI87KK'),
      projectId?: long(name='project_id', example='11546'),
      projectTitle?: string(name='project_title'),
      provider?: int32(name='provider', example='2'),
      publishTime?: string(name='publish_time', example='2022-07-04T16:13Z'),
      realFromAddress?: string(name='real_from_address'),
      realFromCityName?: string(name='real_from_city_name'),
      realToAddress?: string(name='real_to_address'),
      realToCityName?: string(name='real_to_city_name'),
      serviceType?: int32(name='service_type', example='1'),
      specialTypes?: [ string ](name='special_types'),
      takenTime?: string(name='taken_time', example='2022-07-04T16:13Z'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', example='CS-OIPK34H'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', example='CS-112JKDF'),
      toAddress?: string(name='to_address'),
      toCityName?: string(name='to_city_name'),
      travelDistance?: double(name='travel_distance', example='1.2'),
      userAffiliateList?: [ 
        {
          userId?: string(name='user_id', example='11342'),
          userName?: string(name='user_name'),
        }
      ](name='user_affiliate_list'),
      userConfirm?: int32(name='user_confirm', example='1'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='module'),
  pageInfo?: {
    page?: int32(name='page', example='1'),
    pageSize?: int32(name='page_size', example='10'),
    totalNumber?: int32(name='total_number', example='1000'),
  }(name='page_info'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model CarOrderListQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CarOrderListQueryResponseBody(name='body'),
}

async function carOrderListQueryWithOptions(request: CarOrderListQueryRequest, headers: CarOrderListQueryHeaders, runtime: Util.RuntimeOptions): CarOrderListQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.allApply)) {
    query['all_apply'] = request.allApply;
  }
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.departId)) {
    query['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['end_time'] = request.endTime;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['start_time'] = request.startTime;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    query['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.updateEndTime)) {
    query['update_end_time'] = request.updateEndTime;
  }
  if (!Util.isUnset(request.updateStartTime)) {
    query['update_start_time'] = request.updateStartTime;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CarOrderListQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/car/v1/order-list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function carOrderListQuery(request: CarOrderListQueryRequest): CarOrderListQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CarOrderListQueryHeaders{};
  return carOrderListQueryWithOptions(request, headers, runtime);
}

model CarOrderQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CarOrderQueryRequest {
  orderId?: long(name='order_id', example='1012000000000000'),
  subOrderId?: long(name='sub_order_id', example='1000000'),
}

model CarOrderQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    carInfo?: {
      businessCategory?: string(name='business_category', example='TRAVEL'),
      cancelTime?: long(name='cancel_time', example='1669274251000'),
      carInfo?: string(name='car_info'),
      carLevel?: int32(name='car_level', example='601'),
      driverCard?: string(name='driver_card'),
      driverConfirmTime?: long(name='driver_confirm_time', example='1669274251000'),
      driverName?: string(name='driver_name'),
      estimatePrice?: long(name='estimate_price', example='2900'),
      fromAddress?: string(name='from_address'),
      fromCityName?: string(name='from_city_name'),
      isSpecial?: boolean(name='is_special', example='true'),
      memo?: string(name='memo'),
      payTime?: long(name='pay_time', example='1669274251000'),
      publishTime?: long(name='publish_time', example='1669274251000'),
      realFromAddress?: string(name='real_from_address'),
      realFromCityName?: string(name='real_from_city_name'),
      realToAddress?: string(name='real_to_address'),
      realToCityName?: string(name='real_to_city_name'),
      serviceType?: int32(name='service_type', example='3'),
      specialTypes?: string(name='special_types', example='v_sp_t_1,v_sp_t_2,v_sp_t_3,v_sp_t_4,v_sp_t_5'),
      takenTime?: long(name='taken_time', example='1669274251000'),
      toAddress?: string(name='to_address'),
      toCityName?: string(name='to_city_name'),
      travelDistance?: string(name='travel_distance', example='12'),
    }(name='car_info'),
    invoiceInfo?: {
      id?: long(name='id', example='1'),
      title?: string(name='title', example='xxxx'),
    }(name='invoice_info'),
    orderBaseInfo?: {
      applyId?: string(name='apply_id', example='xxxxx'),
      btripCause?: string(name='btrip_cause'),
      btripTitle?: string(name='btrip_title'),
      corpId?: string(name='corp_id', example='xxxxxxxx'),
      corpName?: string(name='corp_name'),
      departId?: string(name='depart_id', example='10101010'),
      departName?: string(name='depart_name'),
      gmtCreate?: long(name='gmt_create', example='1669274251000'),
      gmtModified?: long(name='gmt_modified', example='1669274251000'),
      itineraryId?: string(name='itinerary_id', example='xxxxx'),
      orderId?: long(name='order_id', example='1012000000000000'),
      orderStatus?: int32(name='order_status', example='5'),
      subOrderId?: long(name='sub_order_id', example='100000'),
      thirdDepartId?: string(name='third_depart_id', example='thirdpart_1010101010'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', example='xxxxx'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', example='xxxxx'),
      userId?: string(name='user_id', example='xxxxxxxx'),
      userName?: string(name='user_name'),
    }(name='order_base_info'),
    passengerList?: [ 
      {
        costCenterId?: long(name='cost_center_id', example='costId'),
        costCenterName?: string(name='cost_center_name', example='costName'),
        costCenterNumber?: string(name='cost_center_number', example='costNumber'),
        projectCode?: string(name='project_code', example='projectCode1'),
        projectId?: long(name='project_id', example='projectId'),
        projectTitle?: string(name='project_title'),
        thirdpartCostCenterId?: string(name='thirdpart_cost_center_id', example='thirdpartCostId'),
        thirdpartProjectId?: string(name='thirdpart_project_id', example='thirdpartProjectId'),
        userId?: string(name='user_id', example='userId'),
        userName?: string(name='user_name'),
        userType?: int32(name='user_type', example='1'),
      }
    ](name='passenger_list'),
    priceInfoList?: [ 
      {
        categoryCode?: int32(name='category_code', example='1'),
        gmtCreate?: long(name='gmt_create', example='1669274251000'),
        payType?: int32(name='pay_type', example='4'),
        personPrice?: long(name='person_price', example='1000'),
        price?: long(name='price', example='2000'),
        tradeId?: string(name='trade_id', example='1012000000001'),
        type?: int32(name='type', example='1'),
      }
    ](name='price_info_list'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model CarOrderQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CarOrderQueryResponseBody(name='body'),
}

async function carOrderQueryWithOptions(request: CarOrderQueryRequest, headers: CarOrderQueryHeaders, runtime: Util.RuntimeOptions): CarOrderQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.subOrderId)) {
    query['sub_order_id'] = request.subOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CarOrderQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/car/v1/order`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function carOrderQuery(request: CarOrderQueryRequest): CarOrderQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CarOrderQueryHeaders{};
  return carOrderQueryWithOptions(request, headers, runtime);
}

model CarSceneQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwis'),
}

model CarSceneQueryResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: [ 
    {
      scenarioTemplateId?: string(name='scenarioTemplateId', example='travel'),
      scenarioTemplateName?: string(name='scenarioTemplateName'),
      state?: string(name='state', example='ACTIVATE'),
    }
  ](name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model CarSceneQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CarSceneQueryResponseBody(name='body'),
}

async function carSceneQueryWithOptions(headers: CarSceneQueryHeaders, runtime: Util.RuntimeOptions): CarSceneQueryResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'CarSceneQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/car/v1/scenes`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function carSceneQuery(): CarSceneQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CarSceneQueryHeaders{};
  return carSceneQueryWithOptions(headers, runtime);
}

model CitySearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CitySearchRequest {
  keyword?: string(name='keyword'),
}

model CitySearchResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    cities?: [ 
      {
        code?: string(name='code', example='330100'),
        name?: string(name='name'),
        region?: int32(name='region', example='0'),
      }
    ](name='cities'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210f079e16603757182131635d866a'),
}

model CitySearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CitySearchResponseBody(name='body'),
}

async function citySearchWithOptions(request: CitySearchRequest, headers: CitySearchHeaders, runtime: Util.RuntimeOptions): CitySearchResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CitySearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/city/v1/city`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function citySearch(request: CitySearchRequest): CitySearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CitySearchHeaders{};
  return citySearchWithOptions(request, headers, runtime);
}

model CommonApplyQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CommonApplyQueryRequest {
  applyId?: long(name='apply_id', example='1003366164'),
  bizCategory?: int32(name='biz_category', example='3'),
  userId?: string(name='user_id'),
}

model CommonApplyQueryResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id', example='123'),
    bizCategory?: int32(name='biz_category', example='5'),
    cause?: string(name='cause'),
    corpId?: string(name='corp_id', example='0001A1100000007EX08O'),
    extendValue?: string(name='extend_value'),
    gmtCreate?: string(name='gmt_create', example='2021-03-18T20:26Z'),
    status?: int32(name='status', example='0'),
    thirdpartCorpId?: string(name='thirdpart_corp_id', example='1233'),
    thirdpartId?: string(name='thirdpart_id', example='12344'),
    tripCause?: string(name='trip_cause'),
    userId?: string(name='user_id', example='user1'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model CommonApplyQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CommonApplyQueryResponseBody(name='body'),
}

async function commonApplyQueryWithOptions(request: CommonApplyQueryRequest, headers: CommonApplyQueryHeaders, runtime: Util.RuntimeOptions): CommonApplyQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.bizCategory)) {
    query['biz_category'] = request.bizCategory;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CommonApplyQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/common`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function commonApplyQuery(request: CommonApplyQueryRequest): CommonApplyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CommonApplyQueryHeaders{};
  return commonApplyQueryWithOptions(request, headers, runtime);
}

model CommonApplySyncHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CommonApplySyncRequest {
  applyId?: long(name='apply_id', example='1003366164'),
  bizCategory?: int32(name='biz_category', example='3'),
  remark?: string(name='remark'),
  status?: int32(name='status', example='1'),
  thirdpartyFlowId?: string(name='thirdparty_flow_id', example='asfa'),
  userId?: string(name='user_id'),
}

model CommonApplySyncResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: boolean(name='module', description='module。', example='{\\"list\\": [], \\"pageSize\\": 20, \\"pageNo\\": 1}'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model CommonApplySyncResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CommonApplySyncResponseBody(name='body'),
}

async function commonApplySyncWithOptions(request: CommonApplySyncRequest, headers: CommonApplySyncHeaders, runtime: Util.RuntimeOptions): CommonApplySyncResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.bizCategory)) {
    query['biz_category'] = request.bizCategory;
  }
  if (!Util.isUnset(request.remark)) {
    query['remark'] = request.remark;
  }
  if (!Util.isUnset(request.status)) {
    query['status'] = request.status;
  }
  if (!Util.isUnset(request.thirdpartyFlowId)) {
    query['thirdparty_flow_id'] = request.thirdpartyFlowId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CommonApplySync',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/syn-common`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function commonApplySync(request: CommonApplySyncRequest): CommonApplySyncResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CommonApplySyncHeaders{};
  return commonApplySyncWithOptions(request, headers, runtime);
}

model CorpAuthLinkInfoQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    linkCorps?: [ 
      {
        corpName?: string(name='corp_name'),
        openCorpId?: string(name='open_corp_id'),
        trueCorpId?: string(name='true_corp_id'),
      }
    ](name='link_corps'),
    orgCorp?: {
      corpName?: string(name='corp_name'),
      openCorpId?: string(name='open_corp_id'),
      trueCorpId?: string(name='true_corp_id'),
    }(name='org_corp'),
  }(name='module'),
  requestId?: string(name='requestId'),
  traceId?: string(name='traceId'),
}

model CorpAuthLinkInfoQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CorpAuthLinkInfoQueryResponseBody(name='body'),
}

async function corpAuthLinkInfoQueryWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): CorpAuthLinkInfoQueryResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CorpAuthLinkInfoQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/corp-authority-link/v1/info`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function corpAuthLinkInfoQuery(): CorpAuthLinkInfoQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return corpAuthLinkInfoQueryWithOptions(headers, runtime);
}

model CorpTokenHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripAccessToken?: string(name='x-acs-btrip-access-token', example='vf9_bvla0qs'),
}

model CorpTokenRequest {
  appSecret?: string(name='app_secret', example='Z2FyYmE1YTZjMDAwTixJU1M5LnZlLXtMO3FKbiYqJSM'),
  corpId?: string(name='corp_id', example='open324dfsdafsgcxvxv'),
  type?: int32(name='type', example='0'),
}

model CorpTokenResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  data?: {
    expire?: long(name='expire', example='70000'),
    token?: string(name='token', example='37j76df'),
  }(name='data'),
  message?: string(name='message'),
  module?: {
    expire?: long(name='expire', example='70000'),
    start?: long(name='start', example='1635744378301'),
    token?: string(name='token', example='37j76df'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', description='是否成功', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model CorpTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CorpTokenResponseBody(name='body'),
}

async function corpTokenWithOptions(request: CorpTokenRequest, headers: CorpTokenHeaders, runtime: Util.RuntimeOptions): CorpTokenResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.appSecret)) {
    query['app_secret'] = request.appSecret;
  }
  if (!Util.isUnset(request.corpId)) {
    query['corp_id'] = request.corpId;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripAccessToken)) {
    realHeaders['x-acs-btrip-access-token'] = Util.toJSONString(headers.xAcsBtripAccessToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CorpToken',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/btrip-open-auth/v1/corp-token/action/take`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function corpToken(request: CorpTokenRequest): CorpTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CorpTokenHeaders{};
  return corpTokenWithOptions(request, headers, runtime);
}

model CostCenterDeleteHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CostCenterDeleteRequest {
  thirdpartId?: string(name='thirdpart_id', example='340049'),
}

model CostCenterDeleteResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model CostCenterDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CostCenterDeleteResponseBody(name='body'),
}

async function costCenterDeleteWithOptions(request: CostCenterDeleteRequest, headers: CostCenterDeleteHeaders, runtime: Util.RuntimeOptions): CostCenterDeleteResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.thirdpartId)) {
    query['thirdpart_id'] = request.thirdpartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CostCenterDelete',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/delete-costcenter`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function costCenterDelete(request: CostCenterDeleteRequest): CostCenterDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CostCenterDeleteHeaders{};
  return costCenterDeleteWithOptions(request, headers, runtime);
}

model CostCenterModifyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CostCenterModifyRequest {
  alipayNo?: string(name='alipay_no', example='a@alipay.com'),
  number?: string(name='number', example='12345'),
  scope?: long(name='scope', example='1'),
  thirdpartId?: string(name='thirdpart_id', example='340049'),
  title?: string(name='title'),
}

model CostCenterModifyResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model CostCenterModifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CostCenterModifyResponseBody(name='body'),
}

async function costCenterModifyWithOptions(request: CostCenterModifyRequest, headers: CostCenterModifyHeaders, runtime: Util.RuntimeOptions): CostCenterModifyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alipayNo)) {
    body['alipay_no'] = request.alipayNo;
  }
  if (!Util.isUnset(request.number)) {
    body['number'] = request.number;
  }
  if (!Util.isUnset(request.scope)) {
    body['scope'] = request.scope;
  }
  if (!Util.isUnset(request.thirdpartId)) {
    body['thirdpart_id'] = request.thirdpartId;
  }
  if (!Util.isUnset(request.title)) {
    body['title'] = request.title;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CostCenterModify',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/modify-costcenter`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function costCenterModify(request: CostCenterModifyRequest): CostCenterModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CostCenterModifyHeaders{};
  return costCenterModifyWithOptions(request, headers, runtime);
}

model CostCenterQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CostCenterQueryRequest {
  needOrgEntity?: boolean(name='need_org_entity', example='false'),
  thirdpartId?: string(name='thirdpart_id', example='cost1'),
  title?: string(name='title'),
  userId?: string(name='user_id', example='user1'),
}

model CostCenterQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: [ 
    {
      alipayNo?: string(name='alipay_no', example='a@alipay.com'),
      corpId?: string(name='corp_id', example='ding12345678'),
      entityDOS?: [ 
        {
          corpId?: string(name='corp_id', example='ding1234567'),
          entityId?: string(name='entity_id', example='12345'),
          entityType?: string(name='entity_type', example='1'),
          name?: string(name='name', example='default_bus'),
          userNum?: int32(name='user_num', example='10'),
        }
      ](name='entity_d_o_s'),
      id?: long(name='id', example='7232'),
      number?: string(name='number', example='123456'),
      ruleCode?: long(name='rule_code', description='rule code', example='500578154'),
      scope?: long(name='scope', example='1'),
      thirdpartId?: string(name='thirdpart_id', example='1'),
      title?: string(name='title'),
    }
  ](name='module'),
  morePage?: boolean(name='more_page', example='true'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model CostCenterQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CostCenterQueryResponseBody(name='body'),
}

async function costCenterQueryWithOptions(request: CostCenterQueryRequest, headers: CostCenterQueryHeaders, runtime: Util.RuntimeOptions): CostCenterQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.needOrgEntity)) {
    query['need_org_entity'] = request.needOrgEntity;
  }
  if (!Util.isUnset(request.thirdpartId)) {
    query['thirdpart_id'] = request.thirdpartId;
  }
  if (!Util.isUnset(request.title)) {
    query['title'] = request.title;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CostCenterQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/costcenter`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function costCenterQuery(request: CostCenterQueryRequest): CostCenterQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CostCenterQueryHeaders{};
  return costCenterQueryWithOptions(request, headers, runtime);
}

model CostCenterSaveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model CostCenterSaveRequest {
  alipayNo?: string(name='alipay_no', example='a@alipay.com'),
  number?: string(name='number', example='12345'),
  scope?: long(name='scope', example='1'),
  thirdpartId?: string(name='thirdpart_id', example='340049'),
  title?: string(name='title'),
}

model CostCenterSaveResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    id?: long(name='id', example='17690'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model CostCenterSaveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CostCenterSaveResponseBody(name='body'),
}

async function costCenterSaveWithOptions(request: CostCenterSaveRequest, headers: CostCenterSaveHeaders, runtime: Util.RuntimeOptions): CostCenterSaveResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alipayNo)) {
    body['alipay_no'] = request.alipayNo;
  }
  if (!Util.isUnset(request.number)) {
    body['number'] = request.number;
  }
  if (!Util.isUnset(request.scope)) {
    body['scope'] = request.scope;
  }
  if (!Util.isUnset(request.thirdpartId)) {
    body['thirdpart_id'] = request.thirdpartId;
  }
  if (!Util.isUnset(request.title)) {
    body['title'] = request.title;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CostCenterSave',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/save-costcenter`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function costCenterSave(request: CostCenterSaveRequest): CostCenterSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CostCenterSaveHeaders{};
  return costCenterSaveWithOptions(request, headers, runtime);
}

model CreateSubCorpHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model CreateSubCorpRequest {
  outerCorpId?: string(name='outer_corp_id', example='corp123'),
  outerCorpName?: string(name='outer_corp_name'),
  userId?: string(name='user_id', example='123'),
}

model CreateSubCorpResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    subCorpId?: string(name='sub_corp_id', example='btrip123'),
  }(name='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model CreateSubCorpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSubCorpResponseBody(name='body'),
}

async function createSubCorpWithOptions(request: CreateSubCorpRequest, headers: CreateSubCorpHeaders, runtime: Util.RuntimeOptions): CreateSubCorpResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.outerCorpId)) {
    body['outer_corp_id'] = request.outerCorpId;
  }
  if (!Util.isUnset(request.outerCorpName)) {
    body['outer_corp_name'] = request.outerCorpName;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSubCorp',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/sub_corps/v1/corps`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSubCorp(request: CreateSubCorpRequest): CreateSubCorpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateSubCorpHeaders{};
  return createSubCorpWithOptions(request, headers, runtime);
}

model DeleteInvoiceEntityHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model DeleteInvoiceEntityRequest {
  delAll?: boolean(name='del_all', example='false'),
  entities?: [ 
    {
      entityId?: string(name='entity_id', example='12345'),
      entityType?: string(name='entity_type', example='1'),
    }
  ](name='entities'),
  thirdPartId?: string(name='third_part_id', example='340049'),
}

model DeleteInvoiceEntityShrinkRequest {
  delAll?: boolean(name='del_all', example='false'),
  entitiesShrink?: string(name='entities'),
  thirdPartId?: string(name='third_part_id', example='340049'),
}

model DeleteInvoiceEntityResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    removeNum?: int32(name='remove_num', example='1'),
    selectedUserNum?: int32(name='selected_user_num', example='2'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model DeleteInvoiceEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInvoiceEntityResponseBody(name='body'),
}

async function deleteInvoiceEntityWithOptions(tmpReq: DeleteInvoiceEntityRequest, headers: DeleteInvoiceEntityHeaders, runtime: Util.RuntimeOptions): DeleteInvoiceEntityResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteInvoiceEntityShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entities)) {
    request.entitiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entities, 'entities', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.delAll)) {
    query['del_all'] = request.delAll;
  }
  if (!Util.isUnset(request.entitiesShrink)) {
    query['entities'] = request.entitiesShrink;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    query['third_part_id'] = request.thirdPartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInvoiceEntity',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/entities`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteInvoiceEntity(request: DeleteInvoiceEntityRequest): DeleteInvoiceEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteInvoiceEntityHeaders{};
  return deleteInvoiceEntityWithOptions(request, headers, runtime);
}

model DepartmentSaveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model DepartmentSaveRequest {
  departList?: [ 
    {
      departId?: long(name='depart_id', example='10'),
      departName?: string(name='depart_name'),
      departPid?: long(name='depart_pid', example='10'),
      managerIds?: string(name='manager_ids', example='001|002|003'),
      status?: int32(name='status', example='1'),
      thirdDepartId?: string(name='third_depart_id', example='testdepartid001'),
      thirdDepartPid?: string(name='third_depart_pid', example='testdepartpid001'),
    }
  ](name='depart_list'),
}

model DepartmentSaveShrinkRequest {
  departListShrink?: string(name='depart_list'),
}

model DepartmentSaveResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: string(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210e847516614936690356047dde07'),
}

model DepartmentSaveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DepartmentSaveResponseBody(name='body'),
}

async function departmentSaveWithOptions(tmpReq: DepartmentSaveRequest, headers: DepartmentSaveHeaders, runtime: Util.RuntimeOptions): DepartmentSaveResponse {
  Util.validateModel(tmpReq);
  var request = new DepartmentSaveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.departList)) {
    request.departListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.departList, 'depart_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.departListShrink)) {
    body['depart_list'] = request.departListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DepartmentSave',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/department/v1/department`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function departmentSave(request: DepartmentSaveRequest): DepartmentSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DepartmentSaveHeaders{};
  return departmentSaveWithOptions(request, headers, runtime);
}

model EntityAddHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model EntityAddRequest {
  entityDOList?: [ 
    {
      entityId?: string(name='entity_id', example='12345'),
      entityType?: string(name='entity_type', example='1'),
    }
  ](name='entity_d_o_list'),
  thirdpartId?: string(name='thirdpart_id', example='340049'),
}

model EntityAddShrinkRequest {
  entityDOListShrink?: string(name='entity_d_o_list'),
  thirdpartId?: string(name='thirdpart_id', example='340049'),
}

model EntityAddResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    addNum?: int32(name='add_num', example='1'),
    selectedUserNum?: int32(name='selected_user_num', example='2'),
  }(name='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model EntityAddResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EntityAddResponseBody(name='body'),
}

async function entityAddWithOptions(tmpReq: EntityAddRequest, headers: EntityAddHeaders, runtime: Util.RuntimeOptions): EntityAddResponse {
  Util.validateModel(tmpReq);
  var request = new EntityAddShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entityDOList)) {
    request.entityDOListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entityDOList, 'entity_d_o_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityDOListShrink)) {
    body['entity_d_o_list'] = request.entityDOListShrink;
  }
  if (!Util.isUnset(request.thirdpartId)) {
    body['thirdpart_id'] = request.thirdpartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EntityAdd',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/add-entity`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function entityAdd(request: EntityAddRequest): EntityAddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new EntityAddHeaders{};
  return entityAddWithOptions(request, headers, runtime);
}

model EntityDeleteHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model EntityDeleteRequest {
  delAll?: boolean(name='del_all', example='true'),
  entityDOList?: [ 
    {
      entityId?: string(name='entity_id', example='123'),
      entityType?: string(name='entity_type', example='1'),
    }
  ](name='entity_d_o_list'),
  thirdpartId?: string(name='thirdpart_id', example='12345'),
}

model EntityDeleteShrinkRequest {
  delAll?: boolean(name='del_all', example='true'),
  entityDOListShrink?: string(name='entity_d_o_list'),
  thirdpartId?: string(name='thirdpart_id', example='12345'),
}

model EntityDeleteResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    removeNum?: int32(name='remove_num', example='1'),
    selectedUserNum?: int32(name='selected_user_num', example='1'),
  }(name='module'),
  morePage?: boolean(name='more_page', example='true'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model EntityDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EntityDeleteResponseBody(name='body'),
}

async function entityDeleteWithOptions(tmpReq: EntityDeleteRequest, headers: EntityDeleteHeaders, runtime: Util.RuntimeOptions): EntityDeleteResponse {
  Util.validateModel(tmpReq);
  var request = new EntityDeleteShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entityDOList)) {
    request.entityDOListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entityDOList, 'entity_d_o_list', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.delAll)) {
    query['del_all'] = request.delAll;
  }
  if (!Util.isUnset(request.thirdpartId)) {
    query['thirdpart_id'] = request.thirdpartId;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.entityDOListShrink)) {
    body['entity_d_o_list'] = request.entityDOListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EntityDelete',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/entity/action/delete`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function entityDelete(request: EntityDeleteRequest): EntityDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new EntityDeleteHeaders{};
  return entityDeleteWithOptions(request, headers, runtime);
}

model EntitySetHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model EntitySetRequest {
  entityDOList?: [ 
    {
      entityId?: string(name='entity_id', example='123'),
      entityType?: string(name='entity_type', example='1'),
    }
  ](name='entity_d_o_list'),
  thirdpartId?: string(name='thirdpart_id', example='340049'),
}

model EntitySetShrinkRequest {
  entityDOListShrink?: string(name='entity_d_o_list'),
  thirdpartId?: string(name='thirdpart_id', example='340049'),
}

model EntitySetResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    addNum?: int32(name='add_num', example='1'),
    removeNum?: int32(name='remove_num', example='1'),
    selectedUserNum?: int32(name='selected_user_num', example='1'),
  }(name='module'),
  morePage?: boolean(name='more_page', example='true'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model EntitySetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EntitySetResponseBody(name='body'),
}

async function entitySetWithOptions(tmpReq: EntitySetRequest, headers: EntitySetHeaders, runtime: Util.RuntimeOptions): EntitySetResponse {
  Util.validateModel(tmpReq);
  var request = new EntitySetShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entityDOList)) {
    request.entityDOListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entityDOList, 'entity_d_o_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.entityDOListShrink)) {
    body['entity_d_o_list'] = request.entityDOListShrink;
  }
  if (!Util.isUnset(request.thirdpartId)) {
    body['thirdpart_id'] = request.thirdpartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EntitySet',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/set-entity`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function entitySet(request: EntitySetRequest): EntitySetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new EntitySetHeaders{};
  return entitySetWithOptions(request, headers, runtime);
}

model EstimatedPriceQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model EstimatedPriceQueryRequest {
  arrCity?: string(name='arr_city'),
  category?: string(name='category', example='flight'),
  depCity?: string(name='dep_city'),
  endTime?: long(name='end_time', example='1670601600000'),
  itineraryId?: string(name='itinerary_id', example='1245'),
  startTime?: long(name='start_time', example='1670428800000'),
  subCorpId?: string(name='sub_corp_id', example='btrip123'),
  userId?: string(name='user_id', example='12345678910'),
}

model EstimatedPriceQueryResponseBody = {
  code?: int32(name='code', example='0'),
  message?: string(name='message', example='demo'),
  module?: {
    hotelFeeDetail?: [ 
      {
        city?: string(name='city'),
        criterion?: long(name='criterion', example='6'),
        itineraryId?: string(name='itinerary_id', example='1245'),
        total?: long(name='total', example='6'),
        tripDays?: int32(name='trip_days', example='1'),
      }
    ](name='hotel_fee_detail'),
    totalHotelFee?: long(name='total_hotel_fee', description='酒店费用总额，单位为元', example='500'),
    trafficFee?: {
      btripRoutes?: [ 
        {
          arrCity?: string(name='arr_city'),
          arrDate?: long(name='arr_date'),
          cheapest?: {
            arrTime?: string(name='arr_time', example='00:40'),
            depTime?: string(name='dep_time', example='22:20'),
            fee?: long(name='fee', example='30100'),
            seatGrade?: string(name='seat_grade'),
            vehicleNo?: string(name='vehicle_no', example='MU9668'),
          }(name='cheapest'),
          depCity?: string(name='dep_city'),
          depDate?: long(name='dep_date'),
          errMsg?: string(name='err_msg', example='demo'),
          itineraryId?: string(name='itinerary_id', example='1245'),
          mostExpensive?: {
            arrTime?: string(name='arr_time', example='19:20'),
            depTime?: string(name='dep_time', example='17:00'),
            fee?: long(name='fee', example='265000'),
            seatGrade?: string(name='seat_grade'),
            vehicleNo?: string(name='vehicle_no', example='CA1721'),
          }(name='most_expensive'),
          success?: boolean(name='success', example='true'),
        }
      ](name='btrip_routes'),
      errMsg?: string(name='err_msg', example='demo'),
      maxFee?: long(name='max_fee', example='265000'),
      minFee?: long(name='min_fee', example='30100'),
      success?: boolean(name='success', example='true'),
    }(name='traffic_fee'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model EstimatedPriceQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EstimatedPriceQueryResponseBody(name='body'),
}

async function estimatedPriceQueryWithOptions(request: EstimatedPriceQueryRequest, headers: EstimatedPriceQueryHeaders, runtime: Util.RuntimeOptions): EstimatedPriceQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.arrCity)) {
    query['arr_city'] = request.arrCity;
  }
  if (!Util.isUnset(request.category)) {
    query['category'] = request.category;
  }
  if (!Util.isUnset(request.depCity)) {
    query['dep_city'] = request.depCity;
  }
  if (!Util.isUnset(request.endTime)) {
    query['end_time'] = request.endTime;
  }
  if (!Util.isUnset(request.itineraryId)) {
    query['itinerary_id'] = request.itineraryId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['start_time'] = request.startTime;
  }
  if (!Util.isUnset(request.subCorpId)) {
    query['sub_corp_id'] = request.subCorpId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EstimatedPriceQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/costcenter/v1/estimated-price`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function estimatedPriceQuery(request: EstimatedPriceQueryRequest): EstimatedPriceQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new EstimatedPriceQueryHeaders{};
  return estimatedPriceQueryWithOptions(request, headers, runtime);
}

model ExceedApplySyncHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ExceedApplySyncRequest {
  applyId?: long(name='apply_id', example='823744'),
  bizCategory?: int32(name='biz_category', example='3'),
  remark?: string(name='remark'),
  status?: int32(name='status', example='1'),
  thirdpartyFlowId?: string(name='thirdparty_flow_id', example='123421'),
  userId?: string(name='user_id', example='open5145141'),
}

model ExceedApplySyncResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: boolean(name='module', description='module。', example='{\\"list\\": [], \\"pageSize\\": 20, \\"pageNo\\": 1}'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model ExceedApplySyncResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExceedApplySyncResponseBody(name='body'),
}

async function exceedApplySyncWithOptions(request: ExceedApplySyncRequest, headers: ExceedApplySyncHeaders, runtime: Util.RuntimeOptions): ExceedApplySyncResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.bizCategory)) {
    query['biz_category'] = request.bizCategory;
  }
  if (!Util.isUnset(request.remark)) {
    query['remark'] = request.remark;
  }
  if (!Util.isUnset(request.status)) {
    query['status'] = request.status;
  }
  if (!Util.isUnset(request.thirdpartyFlowId)) {
    query['thirdparty_flow_id'] = request.thirdpartyFlowId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExceedApplySync',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/syn-exceed`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function exceedApplySync(request: ExceedApplySyncRequest): ExceedApplySyncResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ExceedApplySyncHeaders{};
  return exceedApplySyncWithOptions(request, headers, runtime);
}

model FlightBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model FlightBillSettlementQueryRequest {
  pageNo?: int32(name='page_no', example='1'),
  pageSize?: int32(name='page_size', example='50'),
  periodEnd?: string(name='period_end', example='2021-10-01'),
  periodStart?: string(name='period_start', example='2021-10-01'),
}

model FlightBillSettlementQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category', example='1'),
    corpId?: string(name='corp_id'),
    dataList?: [ 
      {
        advanceDay?: int32(name='advance_day', example='1'),
        airlineCorpCode?: string(name='airline_corp_code', example='MU'),
        airlineCorpName?: string(name='airline_corp_name'),
        alipayTradeNo?: string(name='alipay_trade_no', example='2021100122001138061456080520'),
        applyExtendField?: string(name='apply_extend_field', description='审批扩展自定义字段'),
        applyId?: string(name='apply_id', example='103177854'),
        arrAirportCode?: string(name='arr_airport_code', example='CAN'),
        arrCity?: string(name='arr_city'),
        arrDate?: string(name='arr_date', example='2021-10-02'),
        arrStation?: string(name='arr_station'),
        arrTime?: string(name='arr_time', example='13:30:00'),
        billRecordTime?: string(name='bill_record_time', example='2020-12-23T20:18Z'),
        bookTime?: string(name='book_time', example='2021-10-01 00:17:05'),
        bookerId?: string(name='booker_id'),
        bookerJobNo?: string(name='booker_job_no', example='2342432'),
        bookerName?: string(name='booker_name'),
        btripCouponFee?: double(name='btrip_coupon_fee', example='23.9'),
        buildFee?: double(name='build_fee', example='50'),
        cabin?: string(name='cabin', example='R'),
        cabinClass?: string(name='cabin_class'),
        capitalDirection?: string(name='capital_direction', example='1'),
        cascadeDepartment?: string(name='cascade_department'),
        changeFee?: double(name='change_fee', example='23.9'),
        corpPayOrderFee?: double(name='corp_pay_order_fee', example='460'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number', example='48b7f3cd-8a4f-4df9-ae2c-883e008cf097'),
        coupon?: double(name='coupon', example='1'),
        depAirportCode?: string(name='dep_airport_code', example='KHN'),
        department?: string(name='department'),
        departmentId?: string(name='department_id'),
        deptCity?: string(name='dept_city'),
        deptDate?: string(name='dept_date', example='2021-10-02'),
        deptStation?: string(name='dept_station'),
        deptTime?: string(name='dept_time', example='12:00:00'),
        discount?: string(name='discount', example='51%'),
        feeType?: string(name='fee_type', example='10101'),
        flightNo?: string(name='flight_no', example='MU9684'),
        index?: string(name='index', example='4564547'),
        insuranceFee?: double(name='insurance_fee', example='23.9'),
        invoiceTitle?: string(name='invoice_title'),
        itineraryNum?: string(name='itinerary_num', example='5334916421'),
        itineraryPrice?: double(name='itinerary_price', example='460'),
        mostDifferenceDeptTime?: string(name='most_difference_dept_time', example='2021-10-01 00:17:13'),
        mostDifferenceDiscount?: string(name='most_difference_discount', example='23%'),
        mostDifferenceFlightNo?: string(name='most_difference_flight_no', example='MU9684'),
        mostDifferencePrice?: double(name='most_difference_price', example='23.9'),
        mostDifferenceReason?: string(name='most_difference_reason'),
        mostPrice?: double(name='most_price', example='23.9'),
        negotiationCouponFee?: double(name='negotiation_coupon_fee', example='23.9'),
        oilFee?: double(name='oil_fee', example='0'),
        orderId?: string(name='order_id', example='234223423423'),
        overApplyId?: string(name='over_apply_id', example='234324324423'),
        primaryId?: long(name='primary_id', example='4564547'),
        projectCode?: string(name='project_code', example='45623234'),
        projectName?: string(name='project_name'),
        refundFee?: double(name='refund_fee', example='23.9'),
        refundUpgradeCost?: double(name='refund_upgrade_cost', example='23.9'),
        remark?: string(name='remark'),
        repeatRefund?: string(name='repeat_refund'),
        sealPrice?: double(name='seal_price', example='410'),
        serviceFee?: double(name='service_fee', example='23.9'),
        settlementFee?: double(name='settlement_fee', example='460'),
        settlementGrantFee?: double(name='settlement_grant_fee', example='5.67'),
        settlementTime?: string(name='settlement_time', example='2021-10-01 00:17:13'),
        settlementType?: string(name='settlement_type', example='2'),
        status?: int32(name='status', example='1'),
        taxRate?: string(name='tax_rate', description='税率', example='6%'),
        ticketId?: string(name='ticket_id', example='781-6586234234324'),
        travelerId?: string(name='traveler_id'),
        travelerJobNo?: string(name='traveler_job_no', example='345345'),
        travelerName?: string(name='traveler_name'),
        upgradeCost?: double(name='upgrade_cost', example='23.9'),
        voucherType?: int32(name='voucher_type', example='11'),
      }
    ](name='data_list'),
    periodEnd?: string(name='period_end', example='2021-10-14'),
    periodStart?: string(name='period_start', example='2021-10-13'),
    totalNum?: long(name='total_num', example='5180'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightBillSettlementQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlightBillSettlementQueryResponseBody(name='body'),
}

async function flightBillSettlementQueryWithOptions(request: FlightBillSettlementQueryRequest, headers: FlightBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): FlightBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/flight/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function flightBillSettlementQuery(request: FlightBillSettlementQueryRequest): FlightBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightBillSettlementQueryHeaders{};
  return flightBillSettlementQueryWithOptions(request, headers, runtime);
}

model FlightCancelOrderHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightCancelOrderRequest {
  disOrderId?: string(name='dis_order_id', example='dis123'),
}

model FlightCancelOrderResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    cancelTime?: string(name='cancel_time', example='2022-07-04T16:13Z'),
    failCode?: string(name='fail_code'),
    failReason?: string(name='fail_reason'),
    orderStatus?: string(name='order_status', example='0'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightCancelOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlightCancelOrderResponseBody(name='body'),
}

async function flightCancelOrderWithOptions(request: FlightCancelOrderRequest, headers: FlightCancelOrderHeaders, runtime: Util.RuntimeOptions): FlightCancelOrderResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.disOrderId)) {
    query['dis_order_id'] = request.disOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightCancelOrder',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/order/action/cancel`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function flightCancelOrder(request: FlightCancelOrderRequest): FlightCancelOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightCancelOrderHeaders{};
  return flightCancelOrderWithOptions(request, headers, runtime);
}

model FlightCreateOrderHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightCreateOrderRequest {
  arrAirportCode?: string(name='arr_airport_code', example='HGH'),
  arrCityCode?: string(name='arr_city_code', example='HGH'),
  autoPay?: int32(name='auto_pay', example='0'),
  buyerName?: string(name='buyer_name'),
  buyerUniqueKey?: string(name='buyer_unique_key', example='123'),
  contactInfo?: {
    contactEmail?: string(name='contact_email', example='******@alibaba-inc.com'),
    contactName?: string(name='contact_name'),
    contactPhone?: string(name='contact_phone', example='12312345211'),
  }(name='contact_info'),
  depAirportCode?: string(name='dep_airport_code', example='PEK'),
  depCityCode?: string(name='dep_city_code', example='BJS'),
  depDate?: string(name='dep_date', example='2000-00-00 00:00:00'),
  disOrderId?: string(name='dis_order_id', example='dis123'),
  orderAttr?: map[string]any(name='order_attr'),
  orderParams?: string(name='order_params', example='1000_1_0'),
  otaItemId?: string(name='ota_item_id', example='7fb731deeb4510b86c17e8c8c25740_11'),
  price?: long(name='price', example='1000'),
  receiptAddress?: string(name='receipt_address'),
  receiptTarget?: int32(name='receipt_target', example='1'),
  receiptTitle?: string(name='receipt_title'),
  travelerInfoList?: [ 
    {
      birthday?: string(name='birthday', example='2000-00-00'),
      certNation?: string(name='cert_nation'),
      certNo?: string(name='cert_no', example='1262651555151'),
      certType?: string(name='cert_type', example='1'),
      certValidDate?: string(name='cert_valid_date', example='2000-00-00'),
      name?: string(name='name'),
      nationality?: string(name='nationality', description='国籍', example='中国大陆'),
      nationalityCode?: string(name='nationality_code', description='国籍二字码', example='CN'),
      outUserId?: string(name='out_user_id', example='1234'),
      phone?: string(name='phone', example='12341231232'),
      sex?: int32(name='sex', example='0'),
      type?: string(name='type', example='1'),
    }
  ](name='traveler_info_list'),
  tripType?: int32(name='trip_type', example='0'),
}

model FlightCreateOrderShrinkRequest {
  arrAirportCode?: string(name='arr_airport_code', example='HGH'),
  arrCityCode?: string(name='arr_city_code', example='HGH'),
  autoPay?: int32(name='auto_pay', example='0'),
  buyerName?: string(name='buyer_name'),
  buyerUniqueKey?: string(name='buyer_unique_key', example='123'),
  contactInfoShrink?: string(name='contact_info'),
  depAirportCode?: string(name='dep_airport_code', example='PEK'),
  depCityCode?: string(name='dep_city_code', example='BJS'),
  depDate?: string(name='dep_date', example='2000-00-00 00:00:00'),
  disOrderId?: string(name='dis_order_id', example='dis123'),
  orderAttrShrink?: string(name='order_attr'),
  orderParams?: string(name='order_params', example='1000_1_0'),
  otaItemId?: string(name='ota_item_id', example='7fb731deeb4510b86c17e8c8c25740_11'),
  price?: long(name='price', example='1000'),
  receiptAddress?: string(name='receipt_address'),
  receiptTarget?: int32(name='receipt_target', example='1'),
  receiptTitle?: string(name='receipt_title'),
  travelerInfoListShrink?: string(name='traveler_info_list'),
  tripType?: int32(name='trip_type', example='0'),
}

model FlightCreateOrderResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    alipayTradeNo?: string(name='alipay_trade_no', example='3287177727711'),
    btripOrderId?: long(name='btrip_order_id', example='123'),
    disOrderId?: string(name='dis_order_id', example='dis123'),
    lastPayTime?: string(name='last_pay_time', example='2000-00-00 00:00:00'),
    orderStatus?: int32(name='order_status', example='1'),
    payStatus?: int32(name='pay_status', example='1'),
    paymentPrice?: long(name='payment_price', example='100'),
    totalPrice?: long(name='total_price', example='100'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightCreateOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlightCreateOrderResponseBody(name='body'),
}

async function flightCreateOrderWithOptions(tmpReq: FlightCreateOrderRequest, headers: FlightCreateOrderHeaders, runtime: Util.RuntimeOptions): FlightCreateOrderResponse {
  Util.validateModel(tmpReq);
  var request = new FlightCreateOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.contactInfo)) {
    request.contactInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contactInfo, 'contact_info', 'json');
  }
  if (!Util.isUnset(tmpReq.orderAttr)) {
    request.orderAttrShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.orderAttr, 'order_attr', 'json');
  }
  if (!Util.isUnset(tmpReq.travelerInfoList)) {
    request.travelerInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerInfoList, 'traveler_info_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.arrAirportCode)) {
    body['arr_airport_code'] = request.arrAirportCode;
  }
  if (!Util.isUnset(request.arrCityCode)) {
    body['arr_city_code'] = request.arrCityCode;
  }
  if (!Util.isUnset(request.autoPay)) {
    body['auto_pay'] = request.autoPay;
  }
  if (!Util.isUnset(request.buyerName)) {
    body['buyer_name'] = request.buyerName;
  }
  if (!Util.isUnset(request.buyerUniqueKey)) {
    body['buyer_unique_key'] = request.buyerUniqueKey;
  }
  if (!Util.isUnset(request.contactInfoShrink)) {
    body['contact_info'] = request.contactInfoShrink;
  }
  if (!Util.isUnset(request.depAirportCode)) {
    body['dep_airport_code'] = request.depAirportCode;
  }
  if (!Util.isUnset(request.depCityCode)) {
    body['dep_city_code'] = request.depCityCode;
  }
  if (!Util.isUnset(request.depDate)) {
    body['dep_date'] = request.depDate;
  }
  if (!Util.isUnset(request.disOrderId)) {
    body['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.orderAttrShrink)) {
    body['order_attr'] = request.orderAttrShrink;
  }
  if (!Util.isUnset(request.orderParams)) {
    body['order_params'] = request.orderParams;
  }
  if (!Util.isUnset(request.otaItemId)) {
    body['ota_item_id'] = request.otaItemId;
  }
  if (!Util.isUnset(request.price)) {
    body['price'] = request.price;
  }
  if (!Util.isUnset(request.receiptAddress)) {
    body['receipt_address'] = request.receiptAddress;
  }
  if (!Util.isUnset(request.receiptTarget)) {
    body['receipt_target'] = request.receiptTarget;
  }
  if (!Util.isUnset(request.receiptTitle)) {
    body['receipt_title'] = request.receiptTitle;
  }
  if (!Util.isUnset(request.travelerInfoListShrink)) {
    body['traveler_info_list'] = request.travelerInfoListShrink;
  }
  if (!Util.isUnset(request.tripType)) {
    body['trip_type'] = request.tripType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FlightCreateOrder',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/order/action/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function flightCreateOrder(request: FlightCreateOrderRequest): FlightCreateOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightCreateOrderHeaders{};
  return flightCreateOrderWithOptions(request, headers, runtime);
}

model FlightExceedApplyQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model FlightExceedApplyQueryRequest {
  applyId?: long(name='apply_id', example='175634'),
}

model FlightExceedApplyQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id', example='1231'),
    applyIntentionInfoDo?: {
      arrCity?: string(name='arr_city', example='SHA'),
      arrCityName?: string(name='arr_city_name'),
      arrTime?: string(name='arr_time', example='2022-01-12T16:47Z'),
      cabin?: string(name='cabin', example='F'),
      cabinClass?: int32(name='cabin_class', example='1'),
      cabinClassStr?: string(name='cabin_class_str'),
      depCity?: string(name='dep_city', example='SHA'),
      depCityName?: string(name='dep_city_name'),
      depTime?: string(name='dep_time', example='2022-01-12T16:47Z'),
      discount?: string(name='discount', example='4'),
      flightNo?: string(name='flight_no', example='MU2759'),
      price?: long(name='price', example='300'),
      type?: int32(name='type', example='1'),
    }(name='apply_intention_info_do'),
    btripCause?: string(name='btrip_cause'),
    corpId?: string(name='corp_id', example='123'),
    exceedReason?: string(name='exceed_reason'),
    exceedType?: int32(name='exceed_type', example='1'),
    originStandard?: string(name='origin_standard'),
    status?: int32(name='status', example='1'),
    submitTime?: string(name='submit_time', example='2022-01-12T16:47Z'),
    thirdpartApplyId?: string(name='thirdpart_apply_id', example='0001A1100000007EX08O'),
    thirdpartCorpId?: string(name='thirdpart_corp_id', example='test_corp'),
    userId?: string(name='user_id', example='user1'),
  }(name='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightExceedApplyQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlightExceedApplyQueryResponseBody(name='body'),
}

async function flightExceedApplyQueryWithOptions(request: FlightExceedApplyQueryRequest, headers: FlightExceedApplyQueryHeaders, runtime: Util.RuntimeOptions): FlightExceedApplyQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightExceedApplyQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/flight-exceed`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function flightExceedApplyQuery(request: FlightExceedApplyQueryRequest): FlightExceedApplyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightExceedApplyQueryHeaders{};
  return flightExceedApplyQueryWithOptions(request, headers, runtime);
}

model FlightItineraryScanQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model FlightItineraryScanQueryRequest {
  billDate?: string(name='bill_date', example='2022-12-01'),
  billId?: long(name='bill_id', example='123'),
  invoiceSubTaskId?: long(name='invoice_sub_task_id', example='456'),
  pageNo?: int32(name='page_no', example='1'),
  pageSize?: int32(name='page_size', example='20'),
}

model FlightItineraryScanQueryResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    items?: [ 
      {
        agentCode?: string(name='agent_code', description='销售单位代号', example='SIA25608336893'),
        billDate?: string(name='bill_date', example='2022-12-01'),
        build?: string(name='build', example='50'),
        costCenter?: string(name='cost_center'),
        department?: string(name='department'),
        flights?: [ 
          {
            arrivalStation?: string(name='arrival_station', description='航班至'),
            cabinClass?: string(name='cabin_class', description='座位等级', example='M'),
            carrier?: string(name='carrier', description='承运人'),
            departureStation?: string(name='departure_station', description='航班从'),
            flightDate?: string(name='flight_date', description='日期', example='2018-11-18'),
            flightNumber?: string(name='flight_number', description='航班号', example='MU2271'),
            flightTime?: string(name='flight_time', description='时间', example='18:25'),
            freeBaggageAllowance?: string(name='free_baggage_allowance', description='免费行李', example='20K'),
            index?: string(name='index', description='行号', example='1'),
            seatClass?: string(name='seat_class', description='客票级别', example='M'),
            validFromDate?: string(name='valid_from_date', description='客票生效日期', example='2023-01-01'),
            validToDate?: string(name='valid_to_date', description='有效截止日期', example='2023-01-01'),
          }
        ](name='flights', description='机票行程明细'),
        fuelSurcharge?: string(name='fuel_surcharge', example='120'),
        id?: string(name='id', description='UK', example='30'),
        insurance?: string(name='insurance', example='0'),
        invoiceTitle?: string(name='invoice_title'),
        issueCompany?: string(name='issue_company', description='填开单位'),
        issueDate?: string(name='issue_date', description='填开日期', example='2019-02-28'),
        itineraryNum?: string(name='itinerary_num', example='6666666666'),
        orderId?: long(name='order_id', example='4801105714092'),
        ossUrl?: string(name='oss_url', example='https://www.testurl.com'),
        passengerName?: string(name='passenger_name'),
        project?: string(name='project'),
        promptMessage?: string(name='prompt_message', description='提示信息'),
        taxAmount?: string(name='tax_amount', example='108.17'),
        taxRate?: string(name='tax_rate', example='9%'),
        ticketNo?: string(name='ticket_no', example='784-1111111111'),
        ticketPrice?: string(name='ticket_price', example='1190'),
        totalPrice?: string(name='total_price', example='1360'),
        validationCode?: string(name='validation_code', description='验证码', example='9817'),
      }
    ](name='items'),
    pageNo?: int32(name='page_no', example='1'),
    pageSize?: int32(name='page_size', example='20'),
    totalPage?: int32(name='total_page', example='2'),
    totalSize?: int32(name='total_size', example='30'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightItineraryScanQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlightItineraryScanQueryResponseBody(name='body'),
}

async function flightItineraryScanQueryWithOptions(request: FlightItineraryScanQueryRequest, headers: FlightItineraryScanQueryHeaders, runtime: Util.RuntimeOptions): FlightItineraryScanQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billDate)) {
    query['bill_date'] = request.billDate;
  }
  if (!Util.isUnset(request.billId)) {
    query['bill_id'] = request.billId;
  }
  if (!Util.isUnset(request.invoiceSubTaskId)) {
    query['invoice_sub_task_id'] = request.invoiceSubTaskId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightItineraryScanQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/scan/v1/flight-itinerary`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function flightItineraryScanQuery(request: FlightItineraryScanQueryRequest): FlightItineraryScanQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightItineraryScanQueryHeaders{};
  return flightItineraryScanQueryWithOptions(request, headers, runtime);
}

model FlightListingSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightListingSearchRequest {
  airlineCode?: string(name='airline_code', example='MU'),
  arrCityCode?: string(name='arr_city_code', example='HGH'),
  cabinClass?: string(name='cabin_class', example='Y'),
  depCityCode?: string(name='dep_city_code', example='BJS'),
  depDate?: string(name='dep_date', example='2023-02-26'),
}

model FlightListingSearchResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    flightList?: [ 
      {
        airlineInfo?: {
          airlineCode?: string(name='airline_code', example='CA'),
          airlineName?: string(name='airline_name'),
          airlineSimpleName?: string(name='airline_simple_name'),
        }(name='airline_info'),
        arrAirportInfo?: {
          airportCode?: string(name='airport_code', example='HGH'),
          airportName?: string(name='airport_name'),
          cityCode?: string(name='city_code', example='HGH'),
          cityName?: string(name='city_name'),
          terminal?: string(name='terminal', example='T3'),
        }(name='arr_airport_info'),
        arrDate?: string(name='arr_date', example='yyyy-MM-dd HH:mm:ss'),
        basicCabinPrice?: int32(name='basic_cabin_price', example='12456'),
        buildPrice?: int32(name='build_price', example='100'),
        cabin?: string(name='cabin', example='Y'),
        cabinClass?: string(name='cabin_class', example='2'),
        carrierAirline?: string(name='carrier_airline', example='FM'),
        carrierNo?: string(name='carrier_no', example='FM9152'),
        depAirportInfo?: {
          airportCode?: string(name='airport_code', example='PEK'),
          airportName?: string(name='airport_name'),
          cityCode?: string(name='city_code', example='BJS'),
          cityName?: string(name='city_name'),
          terminal?: string(name='terminal', example='T3'),
        }(name='dep_airport_info'),
        depCityCode?: string(name='dep_city_code', example='BJS'),
        depDate?: string(name='dep_date', example='yyyy-MM-dd HH:mm:ss'),
        discount?: int32(name='discount', example='1'),
        flightNo?: string(name='flight_no', example='CA1234'),
        flightRuleList?: [ 
          {
            baggageInfo?: string(name='baggage_info', example='demo'),
            baggageItem?: {
              baggageSubItems?: [ 
                {
                  baggageSubContentVisualizes?: [ 
                    {
                      baggageDesc?: [ string ](name='baggage_desc'),
                      baggageSubContentType?: int32(name='baggage_sub_content_type', example='1'),
                      description?: {
                        desc?: string(name='desc'),
                        icon?: string(name='icon', example='https://gw.alicdn.com/imgextra/i4/O1CN01UynXG31pjsEtA3tMF_!!6000000005397-2-tps-36-36.png'),
                        image?: string(name='image', example='https://gw.alicdn.com/imgextra/i1/O1CN01qe7wL21gJ0SmEXXL7_!!6000000004120-2-tps-1206-768.png'),
                        title?: string(name='title'),
                      }(name='description'),
                      imageDO?: {
                        image?: string(name='image', example='demo'),
                        largest?: string(name='largest', example='50'),
                        middle?: string(name='middle', example='40'),
                        smallest?: string(name='smallest', example='20'),
                      }(name='image_d_o'),
                      isHighlight?: boolean(name='is_highlight', example='true'),
                      subTitle?: string(name='sub_title'),
                    }
                  ](name='baggage_sub_content_visualizes'),
                  extraContentVisualizes?: [ any ](name='extra_content_visualizes'),
                  isStruct?: boolean(name='is_struct', example='true'),
                  ptc?: string(name='ptc', description='PTC', example='ADT'),
                  title?: string(name='title'),
                }
              ](name='baggage_sub_items'),
              index?: int32(name='index', example='1'),
              tableHead?: string(name='table_head'),
              tips?: {
                logo?: string(name='logo', example='https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png'),
                tipsDesc?: string(name='tips_desc'),
                tipsImage?: string(name='tips_image', example='https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png'),
              }(name='tips'),
              title?: string(name='title'),
              type?: int32(name='type', example='1'),
            }(name='baggage_item'),
            changeRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='change_rule'),
            changeRuleItem?: {
              extraContents?: [ 
                {
                  content?: string(name='content'),
                  title?: string(name='title'),
                }
              ](name='extra_contents'),
              index?: int32(name='index', example='0'),
              refundSubItems?: [ 
                {
                  isStruct?: boolean(name='is_struct', description='isStruct : true', example='true'),
                  ptc?: string(name='ptc', description='PTC', example='ADT'),
                  refundSubContents?: [ 
                    {
                      feeDesc?: string(name='fee_desc'),
                      feeRange?: string(name='fee_range'),
                      style?: int32(name='style', example='1'),
                    }
                  ](name='refund_sub_contents'),
                  title?: string(name='title'),
                }
              ](name='refund_sub_items'),
              subTableHead?: [ string ](name='sub_table_head'),
              tableHead?: string(name='table_head'),
              title?: string(name='title'),
              type?: int32(name='type', example='1'),
            }(name='change_rule_item'),
            extra?: string(name='extra', example='{}'),
            refundRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='refund_rule'),
            refundRuleItem?: {
              extraContents?: [ 
                {
                  content?: string(name='content', example='demo'),
                  title?: string(name='title', example='demo'),
                }
              ](name='extra_contents'),
              index?: int32(name='index', example='1'),
              refundSubItems?: [ 
                {
                  isStruct?: boolean(name='is_struct', example='true'),
                  ptc?: string(name='ptc', description='PTC', example='ADT'),
                  refundSubContents?: [ 
                    {
                      feeDesc?: string(name='fee_desc'),
                      feeRange?: string(name='fee_range'),
                      style?: int32(name='style', example='1'),
                    }
                  ](name='refund_sub_contents'),
                  title?: string(name='title'),
                }
              ](name='refund_sub_items'),
              subTableHead?: [ string ](name='sub_table_head'),
              tableHead?: string(name='table_head'),
              title?: string(name='title'),
              type?: int32(name='type', example='1'),
            }(name='refund_rule_item'),
            signRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='sign_rule'),
            tuigaiqianInfo?: string(name='tuigaiqian_info'),
            upgradeRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='upgrade_rule'),
          }
        ](name='flight_rule_list'),
        flightRuleListStr?: string(name='flight_rule_list_str', example='demo'),
        flightSize?: string(name='flight_size'),
        flightType?: string(name='flight_type', example='demo'),
        invoiceType?: int32(name='invoice_type', example='1'),
        isProtocol?: boolean(name='is_protocol', example='true'),
        isShare?: boolean(name='is_share', example='false'),
        isStop?: boolean(name='is_stop', example='false'),
        isTransfer?: boolean(name='is_transfer', example='false'),
        mealDesc?: string(name='meal_desc'),
        oilPrice?: int32(name='oil_price', example='100'),
        otaItemId?: string(name='ota_item_id', example='4ec61b13fc9746f99c072a16bfc265af_0'),
        price?: int32(name='price', example='100'),
        productType?: long(name='product_type', example='1'),
        productTypeDesc?: string(name='product_type_desc'),
        promotionPrice?: string(name='promotion_price', example='100'),
        remainedSeatCount?: string(name='remained_seat_count', example='1'),
        secretParams?: string(name='secret_params', example='1000_1_0'),
        segmentNumber?: string(name='segment_number', example='1'),
        stopArrTime?: string(name='stop_arr_time', example='yyyy-MM-dd HH:mm:ss'),
        stopCity?: string(name='stop_city', example='HGH'),
        stopDepTime?: string(name='stop_dep_time', example='yyyy-MM-dd HH:mm:ss'),
        ticketPrice?: int32(name='ticket_price', example='100'),
        totalPrice?: string(name='total_price', example='100'),
        tripType?: int32(name='trip_type', example='1'),
      }
    ](name='flight_list'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightListingSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlightListingSearchResponseBody(name='body'),
}

async function flightListingSearchWithOptions(request: FlightListingSearchRequest, headers: FlightListingSearchHeaders, runtime: Util.RuntimeOptions): FlightListingSearchResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.airlineCode)) {
    query['airline_code'] = request.airlineCode;
  }
  if (!Util.isUnset(request.arrCityCode)) {
    query['arr_city_code'] = request.arrCityCode;
  }
  if (!Util.isUnset(request.cabinClass)) {
    query['cabin_class'] = request.cabinClass;
  }
  if (!Util.isUnset(request.depCityCode)) {
    query['dep_city_code'] = request.depCityCode;
  }
  if (!Util.isUnset(request.depDate)) {
    query['dep_date'] = request.depDate;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightListingSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/flight/action/listing-search`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function flightListingSearch(request: FlightListingSearchRequest): FlightListingSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightListingSearchHeaders{};
  return flightListingSearchWithOptions(request, headers, runtime);
}

model FlightOrderDetailInfoHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightOrderDetailInfoRequest {
  disOrderId?: string(name='dis_order_id', example='dis123'),
}

model FlightOrderDetailInfoResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    alipayTradeNo?: string(name='alipay_trade_no', example='2389927372772'),
    bookUserId?: string(name='book_user_id', example='1223'),
    btripOrderId?: long(name='btrip_order_id', example='123'),
    contactName?: string(name='contact_name'),
    contactPhone?: string(name='contact_phone', example='12345678909'),
    disOrderId?: string(name='dis_order_id', example='dis123'),
    extra?: string(name='extra', example='{}'),
    flightInfoList?: [ 
      {
        airlineCode?: string(name='airline_code', example='CA'),
        airlineName?: string(name='airline_name'),
        airlineSimpleName?: string(name='airline_simple_name'),
        arrAirport?: string(name='arr_airport'),
        arrAirportCode?: string(name='arr_airport_code', example='LHW'),
        arrAirportCodeName?: string(name='arr_airport_code_name'),
        arrCity?: string(name='arr_city', example='HGH'),
        arrCityCode?: string(name='arr_city_code', example='LHW'),
        arrTerminal?: string(name='arr_terminal'),
        arrTime?: string(name='arr_time', example='2000-00-00 00:00:00'),
        baggage?: string(name='baggage', example='“”'),
        buildPrice?: long(name='build_price', example='100'),
        cabin?: string(name='cabin'),
        cabinClass?: string(name='cabin_class'),
        carrier?: string(name='carrier', example='"CA1351_PEK_CAN_2000-00-00 08:00'),
        depAirport?: string(name='dep_airport'),
        depAirportCode?: string(name='dep_airport_code', example='NGB'),
        depAirportCodeName?: string(name='dep_airport_code_name'),
        depCity?: string(name='dep_city', example='BJS'),
        depCityCode?: string(name='dep_city_code', example='NGB'),
        depTerminal?: string(name='dep_terminal'),
        depTime?: string(name='dep_time', example='2000-01-01 00:00:00'),
        flightNo?: string(name='flight_no', example='CA1351'),
        lastCabin?: string(name='last_cabin', example='Y'),
        lastFlightNo?: string(name='last_flight_no', example='CA1351'),
        meal?: string(name='meal'),
        oilPrice?: long(name='oil_price', example='100'),
        segmentType?: int32(name='segment_type', example='0'),
        stopArrTime?: string(name='stop_arr_time', example='2000-00-00 00:00:00'),
        stopCity?: string(name='stop_city', example='CAN'),
        stopDepTime?: string(name='stop_dep_time', example='2000-00-00 00:00:00'),
        ticketPrice?: long(name='ticket_price', example='100'),
        tuigaiqianInfo?: string(name='tuigaiqian_info', example='“”'),
      }
    ](name='flight_info_list'),
    lastPayTime?: string(name='last_pay_time', example='2000-00-00 00:00:00'),
    payStatus?: int32(name='pay_status', example='0'),
    payTime?: string(name='pay_time', example='2000-00-00 00:00:00'),
    promotionPrice?: long(name='promotion_price', example='1000'),
    settleAmount?: long(name='settle_amount', example='100'),
    settleType?: int32(name='settle_type', example='0'),
    status?: int32(name='status', example='1'),
    ticketInfoList?: [ 
      {
        openTicketStatus?: string(name='open_ticket_status', example='0'),
        pnrCode?: string(name='pnr_code', example='KF0528'),
        ticketNo?: string(name='ticket_no', example='444-000000000'),
        ticketStatus?: string(name='ticket_status', example='1'),
      }
    ](name='ticket_info_list'),
    totalBuildPrice?: long(name='total_build_price', example='1000'),
    totalOilPrice?: long(name='total_oil_price', example='1000'),
    totalOrderPrice?: long(name='total_order_price', example='1000'),
    travelerInfoList?: [ 
      {
        birthDate?: string(name='birth_date', example='2000-01-01'),
        certNo?: string(name='cert_no', example='1234'),
        certType?: string(name='cert_type', example='0'),
        openTicketStatus?: int32(name='open_ticket_status', example='0'),
        passengerName?: string(name='passenger_name'),
        passengerType?: string(name='passenger_type', example='0'),
        phone?: string(name='phone', example='12345678909'),
        ticketNo?: string(name='ticket_no', example='444-000000000'),
        userId?: string(name='user_id', example='123'),
      }
    ](name='traveler_info_list'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightOrderDetailInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlightOrderDetailInfoResponseBody(name='body'),
}

async function flightOrderDetailInfoWithOptions(request: FlightOrderDetailInfoRequest, headers: FlightOrderDetailInfoHeaders, runtime: Util.RuntimeOptions): FlightOrderDetailInfoResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.disOrderId)) {
    query['dis_order_id'] = request.disOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightOrderDetailInfo',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/order/action/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function flightOrderDetailInfo(request: FlightOrderDetailInfoRequest): FlightOrderDetailInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightOrderDetailInfoHeaders{};
  return flightOrderDetailInfoWithOptions(request, headers, runtime);
}

model FlightOrderListQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model FlightOrderListQueryRequest {
  allApply?: boolean(name='all_apply', example='false'),
  applyId?: long(name='apply_id', example='175634'),
  departId?: string(name='depart_id'),
  endTime?: string(name='end_time', example='2022-07-01 00:00:00'),
  page?: int32(name='page', example='1'),
  pageSize?: int32(name='page_size', example='10'),
  startTime?: string(name='start_time', example='2022-07-01 00:00:00'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', example='CS-FLIGHT'),
  updateEndTime?: string(name='update_end_time', example='2022-07-01 00:00:00'),
  updateStartTime?: string(name='update_start_time', example='2022-07-01 00:00:00'),
  userId?: string(name='user_id'),
}

model FlightOrderListQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: [ 
    {
      applyId?: long(name='apply_id', example='11774'),
      arrAirport?: string(name='arr_airport'),
      arrCity?: string(name='arr_city'),
      btripTitle?: string(name='btrip_title'),
      cabinClass?: string(name='cabin_class', example='Y'),
      contactName?: string(name='contact_name'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      costCenter?: {
        corpId?: string(name='corp_id'),
        id?: long(name='id', example='44632'),
        name?: string(name='name'),
        number?: string(name='number', example='NM98767'),
      }(name='cost_center'),
      depAirport?: string(name='dep_airport'),
      depCity?: string(name='dep_city'),
      depDate?: string(name='dep_date', example='2022-07-20T10:40Z'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      discount?: string(name='discount', example='30.12%'),
      flightNo?: string(name='flight_no', example='MU7854'),
      gmtCreate?: string(name='gmt_create', example='2022-07-20T10:40Z'),
      gmtModified?: string(name='gmt_modified', example='2022-07-20T10:40Z'),
      id?: long(name='id', example='200042'),
      insureInfoList?: [ 
        {
          insureNo?: string(name='insure_no', example='KJ-879657'),
          name?: string(name='name'),
          status?: int32(name='status', example='1'),
        }
      ](name='insure_info_list'),
      invoice?: {
        id?: long(name='id', example='7304'),
        title?: string(name='title'),
      }(name='invoice'),
      passengerCount?: int32(name='passenger_count', example='4'),
      passengerName?: string(name='passenger_name'),
      priceInfoList?: [ 
        {
          categoryCode?: int32(name='category_code', example='1'),
          categoryType?: int32(name='category_type', example='1'),
          changeFlightNo?: string(name='change_flight_no', example='MU5354'),
          discount?: string(name='discount', example='12%'),
          endTime?: string(name='end_time', example='2022-07-20T10:40Z'),
          gmtCreate?: string(name='gmt_create', example='2022-07-20T10:40Z'),
          originalTicketNo?: string(name='original_ticket_no', example='00-7687'),
          passengerName?: string(name='passenger_name'),
          payType?: int32(name='pay_type', example='1'),
          price?: double(name='price', example='100'),
          startTime?: string(name='start_time', example='2022-07-20T10:40Z'),
          ticketNo?: string(name='ticket_no', example='A-135767'),
          tradeId?: string(name='trade_id', example='f98236773'),
          type?: int32(name='type', example='1'),
        }
      ](name='price_info_list'),
      projectCode?: string(name='project_code', example='CS-PROJECT'),
      projectId?: long(name='project_id', example='CS-PROJECT'),
      projectTitle?: string(name='project_title'),
      retDate?: string(name='ret_date', example='2022-07-20T10:40Z'),
      status?: int32(name='status', example='0'),
      thirdPartProjectId?: string(name='third_part_project_id', example='CS-PROJECT'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', example='CS-UMN98989'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', example='cs9897766'),
      tripType?: int32(name='trip_type', example='0'),
      userAffiliateList?: [ 
        {
          userId?: string(name='user_id'),
          userName?: string(name='user_name'),
        }
      ](name='user_affiliate_list'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='module'),
  pageInfo?: {
    page?: int32(name='page', example='1'),
    pageSize?: int32(name='page_size', example='20'),
    totalNumber?: int32(name='total_number', example='100'),
  }(name='page_info'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightOrderListQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlightOrderListQueryResponseBody(name='body'),
}

async function flightOrderListQueryWithOptions(request: FlightOrderListQueryRequest, headers: FlightOrderListQueryHeaders, runtime: Util.RuntimeOptions): FlightOrderListQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.allApply)) {
    query['all_apply'] = request.allApply;
  }
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.departId)) {
    query['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['end_time'] = request.endTime;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['start_time'] = request.startTime;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    query['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.updateEndTime)) {
    query['update_end_time'] = request.updateEndTime;
  }
  if (!Util.isUnset(request.updateStartTime)) {
    query['update_start_time'] = request.updateStartTime;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightOrderListQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/flight/v1/order-list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function flightOrderListQuery(request: FlightOrderListQueryRequest): FlightOrderListQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightOrderListQueryHeaders{};
  return flightOrderListQueryWithOptions(request, headers, runtime);
}

model FlightOrderQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model FlightOrderQueryRequest {
  orderId?: long(name='order_id', example='246584390'),
  userId?: string(name='user_id'),
}

model FlightOrderQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    flightChangeTicketInfoList?: [ 
      {
        arrTime?: string(name='arr_time', example='2022-07-20T10:40Z'),
        changeCabin?: string(name='change_cabin', example='V'),
        changeCabinLevel?: string(name='change_cabin_level', example='Y'),
        changeFee?: double(name='change_fee', example='100'),
        changeFlightNo?: string(name='change_flight_no', example='MU7767'),
        changeOrderId?: long(name='change_order_id', example='33576'),
        changeReason?: string(name='change_reason'),
        changeType?: int32(name='change_type', example='0'),
        depTime?: string(name='dep_time', example='2022-07-20T10:40Z'),
        gmtCreate?: string(name='gmt_create', example='2022-07-20T10:40Z'),
        gmtModify?: string(name='gmt_modify', example='2022-07-20T10:40Z'),
        originTicketNo?: string(name='origin_ticket_no', example='00-123123'),
        ticketNo?: string(name='ticket_no', example='000-123123'),
        upgradeFee?: double(name='upgrade_fee', example='100'),
      }
    ](name='flight_change_ticket_info_list'),
    flightInfoList?: [ 
      {
        airlineCode?: string(name='airline_code', example='MU'),
        airlineName?: string(name='airline_name'),
        arrAirportCode?: string(name='arr_airport_code', example='LHW'),
        arrAirportName?: string(name='arr_airport_name'),
        arrCityCode?: string(name='arr_city_code', example='LHW'),
        arrCityName?: string(name='arr_city_name'),
        arrTime?: string(name='arr_time', example='2022-07-20T10:40Z'),
        cabin?: string(name='cabin', example='V'),
        cabinLevel?: string(name='cabin_level', example='Y'),
        depAirportCode?: string(name='dep_airport_code', example='NGB'),
        depAirportName?: string(name='dep_airport_name'),
        depCityCode?: string(name='dep_city_code', example='NGB'),
        depCityName?: string(name='dep_city_name'),
        depTime?: string(name='dep_time', example='2022-07-20T10:40Z'),
        flightMile?: int32(name='flight_mile', example='900'),
        flightNo?: string(name='flight_no', example='MU3849'),
      }
    ](name='flight_info_list'),
    flightRefundTicketInfoList?: [ 
      {
        gmtCreate?: string(name='gmt_create', example='2022-07-20T10:40Z'),
        gmtModify?: string(name='gmt_modify', example='2022-07-20T10:40Z'),
        refundOrderId?: long(name='refund_order_id', example='43667'),
        refundReason?: string(name='refund_reason'),
        refundTicketFee?: double(name='refund_ticket_fee', example='100'),
        refundType?: int32(name='refund_type', example='0'),
        ticketNo?: string(name='ticket_no', example='000-13232'),
      }
    ](name='flight_refund_ticket_info_list'),
    flightTicketInfoList?: [ 
      {
        buildPrice?: double(name='build_price', example='100'),
        changed?: boolean(name='changed', example='false'),
        discount?: int32(name='discount', example='10'),
        gmtCreate?: string(name='gmt_create', example='2022-07-20T10:40Z'),
        gmtModify?: string(name='gmt_modify', example='2022-07-20T10:40Z'),
        oilPrice?: double(name='oil_price', example='100'),
        payType?: int32(name='pay_type', example='1'),
        settlePrice?: double(name='settle_price', example='100'),
        ticketNo?: string(name='ticket_no', example='000-123'),
        ticketPrice?: double(name='ticket_price', example='100'),
        ticketStatus?: string(name='ticket_status', example='OPEN'),
        ticketStatusCode?: int32(name='ticket_status_code', example='1'),
        userId?: string(name='user_id'),
      }
    ](name='flight_ticket_info_list'),
    insuranceInfoList?: [ 
      {
        amount?: double(name='amount', example='100'),
        insuranceNo?: string(name='insurance_no', example='345-987-098'),
        status?: int32(name='status', example='1'),
        type?: string(name='type'),
      }
    ](name='insurance_info_list'),
    invoiceInfo?: {
      id?: long(name='id', example='43316'),
      title?: string(name='title'),
    }(name='invoice_info'),
    orderBaseInfo?: {
      applyId?: string(name='apply_id', example='175634'),
      btripTitle?: string(name='btrip_title'),
      contactName?: string(name='contact_name'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      gmtCreate?: string(name='gmt_create', example='2022-07-20T10:40Z'),
      gmtModify?: string(name='gmt_modify', example='2022-07-20T10:40Z'),
      itineraryId?: string(name='itinerary_id', example='13628'),
      orderId?: long(name='order_id', example='146178'),
      orderStatus?: int32(name='order_status', example='5'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', example='CS-FLIGHT'),
      thirdpartCorpId?: string(name='thirdpart_corp_id'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', example='CS-FLIGHT'),
      tripType?: int32(name='trip_type', example='0'),
      userId?: string(name='user_id'),
    }(name='order_base_info'),
    passengerInfoList?: [ 
      {
        costCenterId?: long(name='cost_center_id', example='13446'),
        costCenterName?: string(name='cost_center_name'),
        costCenterNumber?: string(name='cost_center_number', example='CS-3345'),
        projectCode?: string(name='project_code', example='CS-PROJECT'),
        projectId?: long(name='project_id', example='133576'),
        projectTitle?: string(name='project_title'),
        thirdpartProjectId?: string(name='thirdpart_project_id', example='CS-THIRDPROJECT'),
        userId?: string(name='user_id'),
        userName?: string(name='user_name'),
        userType?: int32(name='user_type', example='0'),
      }
    ](name='passenger_info_list'),
    priceInfoList?: [ 
      {
        categoryCode?: int32(name='category_code', example='1'),
        gmtCreate?: string(name='gmt_create', example='2022-07-20T10:40Z'),
        passengerName?: string(name='passenger_name'),
        payType?: int32(name='pay_type', example='4'),
        price?: double(name='price', example='100'),
        tradeId?: string(name='trade_id', example='CS73290'),
        type?: int32(name='type', example='1'),
      }
    ](name='price_info_list'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightOrderQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlightOrderQueryResponseBody(name='body'),
}

async function flightOrderQueryWithOptions(request: FlightOrderQueryRequest, headers: FlightOrderQueryHeaders, runtime: Util.RuntimeOptions): FlightOrderQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightOrderQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/flight/v1/order`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function flightOrderQuery(request: FlightOrderQueryRequest): FlightOrderQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightOrderQueryHeaders{};
  return flightOrderQueryWithOptions(request, headers, runtime);
}

model FlightOtaSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightOtaSearchRequest {
  airlineCode?: string(name='airline_code', example='CA'),
  arrCityCode?: string(name='arr_city_code', example='BJS'),
  cabinClass?: string(name='cabin_class', example='Y'),
  carrierFlightNo?: string(name='carrier_flight_no', example='CA2324'),
  depCityCode?: string(name='dep_city_code', example='HGH'),
  depDate?: string(name='dep_date', example='2023-08-15 19:30:00'),
  flightNo?: string(name='flight_no', example='CA2323'),
}

model FlightOtaSearchResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    flightList?: [ 
      {
        airlineInfo?: {
          airlineCode?: string(name='airline_code', example='CA'),
          airlineName?: string(name='airline_name'),
          airlineSimpleName?: string(name='airline_simple_name'),
        }(name='airline_info'),
        arrAirportInfo?: {
          airportCode?: string(name='airport_code', example='HGH'),
          airportName?: string(name='airport_name'),
          cityCode?: string(name='city_code', example='HGH'),
          cityName?: string(name='city_name'),
          terminal?: string(name='terminal', example='T3'),
        }(name='arr_airport_info'),
        arrDate?: string(name='arr_date', example='yyyy-MM-dd HH:mm:ss'),
        buildPrice?: int32(name='build_price', example='100'),
        cabin?: string(name='cabin', example='Y'),
        cabinClass?: string(name='cabin_class', example='2'),
        cabinInfoList?: [ 
          {
            agentId?: long(name='agent_id'),
            basicCabinPrice?: int32(name='basic_cabin_price', example='12456'),
            buildPrice?: int32(name='build_price', example='100'),
            cabin?: string(name='cabin', example='G'),
            cabinClass?: string(name='cabin_class', example='Y'),
            cabinClassName?: string(name='cabin_class_name'),
            childCabin?: string(name='child_cabin', example='G'),
            className?: string(name='class_name'),
            classRule?: string(name='class_rule', example='demo'),
            discount?: string(name='discount', example='10'),
            flightRuleList?: [ 
              {
                baggageInfo?: string(name='baggage_info', example='demo'),
                baggageItem?: {
                  baggageSubItems?: [ 
                    {
                      baggageSubContentVisualizes?: [ 
                        {
                          baggageDesc?: [ string ](name='baggage_desc'),
                          baggageSubContentType?: int32(name='baggage_sub_content_type', example='0'),
                          description?: {
                            desc?: string(name='desc'),
                            icon?: string(name='icon', example='https://gw.alicdn.com/imgextra/i4/O1CN01UynXG31pjsEtA3tMF_!!6000000005397-2-tps-36-36.png'),
                            image?: string(name='image', example='https://gw.alicdn.com/imgextra/i1/O1CN01qe7wL21gJ0SmEXXL7_!!6000000004120-2-tps-1206-768.png'),
                            title?: string(name='title'),
                          }(name='description'),
                          imageDO?: {
                            image?: string(name='image', example='demo'),
                            largest?: string(name='largest', example='50'),
                            middle?: string(name='middle', example='40'),
                            smallest?: string(name='smallest', example='20'),
                          }(name='image_d_o'),
                          isHighlight?: boolean(name='is_highlight', example='true'),
                          subTitle?: string(name='sub_title'),
                        }
                      ](name='baggage_sub_content_visualizes'),
                      extraContentVisualizes?: [ any ](name='extra_content_visualizes'),
                      isStruct?: boolean(name='is_struct', example='true'),
                      ptc?: string(name='ptc', description='PTC', example='ADT'),
                      title?: string(name='title'),
                    }
                  ](name='baggage_sub_items'),
                  index?: int32(name='index', example='1'),
                  tableHead?: string(name='table_head'),
                  tips?: {
                    logo?: string(name='logo', example='https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png'),
                    tipsDesc?: string(name='tips_desc'),
                    tipsImage?: string(name='tips_image', example='https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png'),
                  }(name='tips'),
                  title?: string(name='title'),
                  type?: int32(name='type', example='1'),
                }(name='baggage_item'),
                changeRule?: {
                  able?: boolean(name='able', example='true'),
                  info?: [ 
                    {
                      content?: string(name='content'),
                      cost?: int32(name='cost', example='100'),
                      costPercent?: int32(name='cost_percent', example='10'),
                      timeStamp?: int32(name='time_stamp', example='1675036500000'),
                      timeType?: string(name='time_type', example='demo'),
                      title?: string(name='title'),
                    }
                  ](name='info'),
                }(name='change_rule'),
                changeRuleItem?: {
                  extraContents?: [ 
                    {
                      content?: string(name='content', example='demo'),
                      title?: string(name='title', example='demo'),
                    }
                  ](name='extra_contents'),
                  index?: int32(name='index', example='0'),
                  refundSubItems?: [ 
                    {
                      isStruct?: boolean(name='is_struct', example='true'),
                      ptc?: string(name='ptc', description='PTC', example='ADT'),
                      refundSubContents?: [ 
                        {
                          feeDesc?: string(name='fee_desc'),
                          feeRange?: string(name='fee_range'),
                          style?: int32(name='style', example='1'),
                        }
                      ](name='refund_sub_contents'),
                      title?: string(name='title'),
                    }
                  ](name='refund_sub_items'),
                  subTableHead?: [ string ](name='sub_table_head'),
                  tableHead?: string(name='table_head'),
                  title?: string(name='title'),
                  type?: int32(name='type', example='0'),
                }(name='change_rule_item'),
                extra?: string(name='extra', example='{}'),
                refundRule?: {
                  able?: boolean(name='able', example='true'),
                  info?: [ 
                    {
                      content?: string(name='content'),
                      cost?: int32(name='cost', example='100'),
                      costPercent?: int32(name='cost_percent', example='10'),
                      timeStamp?: int32(name='time_stamp', example='1675036500000'),
                      timeType?: string(name='time_type', example='demo'),
                      title?: string(name='title'),
                    }
                  ](name='info'),
                }(name='refund_rule'),
                refundRuleItem?: {
                  extraContents?: [ 
                    {
                      content?: string(name='content', example='demo'),
                      title?: string(name='title', example='demo'),
                    }
                  ](name='extra_contents'),
                  index?: int32(name='index', example='1'),
                  refundSubItems?: [ 
                    {
                      isStruct?: boolean(name='is_struct', example='true'),
                      ptc?: string(name='ptc', description='PTC', example='ADT'),
                      refundSubContents?: [ 
                        {
                          feeDesc?: string(name='fee_desc'),
                          feeRange?: string(name='fee_range'),
                          style?: int32(name='style', example='1'),
                        }
                      ](name='refund_sub_contents'),
                      title?: string(name='title'),
                    }
                  ](name='refund_sub_items'),
                  subTableHead?: [ string ](name='sub_table_head'),
                  tableHead?: string(name='table_head'),
                  title?: string(name='title', example='demo'),
                  type?: int32(name='type', example='1'),
                }(name='refund_rule_item'),
                signRule?: {
                  able?: boolean(name='able', example='true'),
                  info?: [ 
                    {
                      content?: string(name='content'),
                      cost?: int32(name='cost', example='100'),
                      costPercent?: int32(name='cost_percent', example='10'),
                      timeStamp?: int32(name='time_stamp', example='1675036500000'),
                      timeType?: string(name='time_type', example='demo'),
                      title?: string(name='title'),
                    }
                  ](name='info'),
                }(name='sign_rule'),
                tuigaiqianInfo?: string(name='tuigaiqian_info'),
                upgradeRule?: {
                  able?: boolean(name='able', example='true'),
                  info?: [ 
                    {
                      content?: string(name='content'),
                      cost?: int32(name='cost', example='100'),
                      costPercent?: int32(name='cost_percent', example='10'),
                      timeStamp?: int32(name='time_stamp', example='1675036500000'),
                      timeType?: string(name='time_type', example='demo'),
                      title?: string(name='title'),
                    }
                  ](name='info'),
                }(name='upgrade_rule'),
              }
            ](name='flight_rule_list'),
            flightRuleListStr?: string(name='flight_rule_list_str', example='demo'),
            invoiceType?: int32(name='invoice_type', example='1'),
            isProtocol?: boolean(name='is_protocol', example='true'),
            oilPrice?: int32(name='oil_price', example='100'),
            orderParams?: string(name='order_params', example='1000_1_0'),
            otaItemId?: string(name='ota_item_id', example='97f64e2d6f61408a827dd523817fefd6_0'),
            price?: int32(name='price', example='100'),
            productType?: long(name='product_type', example='1'),
            productTypeDesc?: string(name='product_type_desc', example='demo'),
            promotionPrice?: string(name='promotion_price', example='100'),
            remainedSeatCount?: string(name='remained_seat_count', example='1'),
            ticketPrice?: int32(name='ticket_price', example='100'),
            totalPrice?: int32(name='total_price', example='100'),
          }
        ](name='cabin_info_list'),
        carrierAirline?: string(name='carrier_airline', example='FM'),
        carrierNo?: string(name='carrier_no', example='FM9152'),
        depAirportInfo?: {
          airportCode?: string(name='airport_code', example='PEK'),
          airportName?: string(name='airport_name'),
          cityCode?: string(name='city_code', example='BJS'),
          cityName?: string(name='city_name'),
          terminal?: string(name='terminal', example='T3'),
        }(name='dep_airport_info'),
        depCityCode?: string(name='dep_city_code', example='BJS'),
        depDate?: string(name='dep_date', example='yyyy-MM-dd HH:mm:ss'),
        discount?: int32(name='discount', example='1'),
        flightNo?: string(name='flight_no', example='CA1234'),
        flightRuleList?: [ 
          {
            baggageInfo?: string(name='baggage_info', example='demo'),
            baggageItem?: {
              baggageSubItems?: [ 
                {
                  baggageSubContentVisualizes?: [ 
                    {
                      baggageDesc?: [ string ](name='baggage_desc'),
                      baggageSubContentType?: int32(name='baggage_sub_content_type', example='1'),
                      description?: {
                        desc?: string(name='desc'),
                        icon?: string(name='icon', example='https://gw.alicdn.com/imgextra/i4/O1CN01UynXG31pjsEtA3tMF_!!6000000005397-2-tps-36-36.png'),
                        image?: string(name='image', example='https://gw.alicdn.com/imgextra/i1/O1CN01qe7wL21gJ0SmEXXL7_!!6000000004120-2-tps-1206-768.png'),
                        title?: string(name='title'),
                      }(name='description'),
                      imageDO?: {
                        image?: string(name='image', example='demo'),
                        largest?: string(name='largest', example='50'),
                        middle?: string(name='middle', example='40'),
                        smallest?: string(name='smallest', example='20'),
                      }(name='image_d_o'),
                      isHighlight?: boolean(name='is_highlight', example='true'),
                      subTitle?: string(name='sub_title'),
                    }
                  ](name='baggage_sub_content_visualizes'),
                  extraContentVisualizes?: [ any ](name='extra_content_visualizes'),
                  isStruct?: boolean(name='is_struct', example='true'),
                  ptc?: string(name='ptc', description='PTC', example='ADT'),
                  title?: string(name='title'),
                }
              ](name='baggage_sub_items'),
              index?: int32(name='index', example='1'),
              tableHead?: string(name='table_head'),
              tips?: {
                logo?: string(name='logo', example='https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png'),
                tipsDesc?: string(name='tips_desc'),
                tipsImage?: string(name='tips_image', example='https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png'),
              }(name='tips'),
              title?: string(name='title'),
              type?: int32(name='type', example='1'),
            }(name='baggage_item'),
            changeRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='change_rule'),
            changeRuleItem?: {
              extraContents?: [ 
                {
                  content?: string(name='content'),
                  title?: string(name='title'),
                }
              ](name='extra_contents'),
              index?: int32(name='index', example='0'),
              refundSubItems?: [ 
                {
                  isStruct?: boolean(name='is_struct', description='isStruct : true', example='true'),
                  ptc?: string(name='ptc', description='PTC', example='ADT'),
                  refundSubContents?: [ 
                    {
                      feeDesc?: string(name='fee_desc'),
                      feeRange?: string(name='fee_range'),
                      style?: int32(name='style', example='1'),
                    }
                  ](name='refund_sub_contents'),
                  title?: string(name='title'),
                }
              ](name='refund_sub_items'),
              subTableHead?: [ string ](name='sub_table_head'),
              tableHead?: string(name='table_head'),
              title?: string(name='title'),
              type?: int32(name='type', example='1'),
            }(name='change_rule_item'),
            extra?: string(name='extra', example='{}'),
            refundRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='refund_rule'),
            refundRuleItem?: {
              extraContents?: [ 
                {
                  content?: string(name='content', example='demo'),
                  title?: string(name='title', example='demo'),
                }
              ](name='extra_contents'),
              index?: int32(name='index', example='1'),
              refundSubItems?: [ 
                {
                  isStruct?: boolean(name='is_struct', example='true'),
                  ptc?: string(name='ptc', description='PTC', example='ADT'),
                  refundSubContents?: [ 
                    {
                      feeDesc?: string(name='fee_desc'),
                      feeRange?: string(name='fee_range'),
                      style?: int32(name='style', example='1'),
                    }
                  ](name='refund_sub_contents'),
                  title?: string(name='title'),
                }
              ](name='refund_sub_items'),
              subTableHead?: [ string ](name='sub_table_head'),
              tableHead?: string(name='table_head'),
              title?: string(name='title'),
              type?: int32(name='type', example='1'),
            }(name='refund_rule_item'),
            signRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='sign_rule'),
            tuigaiqianInfo?: string(name='tuigaiqian_info'),
            upgradeRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='upgrade_rule'),
          }
        ](name='flight_rule_list'),
        flightRuleListStr?: string(name='flight_rule_list_str', example='demo'),
        flightSize?: string(name='flight_size'),
        flightType?: string(name='flight_type', example='demo'),
        invoiceType?: int32(name='invoice_type', example='1'),
        isProtocol?: boolean(name='is_protocol', example='true'),
        isShare?: boolean(name='is_share', example='false'),
        isStop?: boolean(name='is_stop', example='false'),
        isTransfer?: boolean(name='is_transfer', example='false'),
        mealDesc?: string(name='meal_desc'),
        oilPrice?: int32(name='oil_price', example='100'),
        otaItemId?: string(name='ota_item_id', example='6669c8e53b684105b8687bad0331988a_41'),
        price?: int32(name='price', example='100'),
        productType?: long(name='product_type', example='1'),
        productTypeDesc?: string(name='product_type_desc'),
        promotionPrice?: string(name='promotion_price', example='100'),
        remainedSeatCount?: string(name='remained_seat_count', example='1'),
        secretParams?: string(name='secret_params', example='1000_1_0'),
        segmentNumber?: string(name='segment_number', example='1'),
        stopArrTime?: string(name='stop_arr_time', example='yyyy-MM-dd HH:mm:ss'),
        stopCity?: string(name='stop_city', example='HGH'),
        stopDepTime?: string(name='stop_dep_time', example='yyyy-MM-dd HH:mm:ss'),
        ticketPrice?: int32(name='ticket_price', example='100'),
        totalPrice?: string(name='total_price', example='100'),
        tripType?: int32(name='trip_type', example='1'),
      }
    ](name='flight_list'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightOtaSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlightOtaSearchResponseBody(name='body'),
}

async function flightOtaSearchWithOptions(request: FlightOtaSearchRequest, headers: FlightOtaSearchHeaders, runtime: Util.RuntimeOptions): FlightOtaSearchResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.airlineCode)) {
    query['airline_code'] = request.airlineCode;
  }
  if (!Util.isUnset(request.arrCityCode)) {
    query['arr_city_code'] = request.arrCityCode;
  }
  if (!Util.isUnset(request.cabinClass)) {
    query['cabin_class'] = request.cabinClass;
  }
  if (!Util.isUnset(request.carrierFlightNo)) {
    query['carrier_flight_no'] = request.carrierFlightNo;
  }
  if (!Util.isUnset(request.depCityCode)) {
    query['dep_city_code'] = request.depCityCode;
  }
  if (!Util.isUnset(request.depDate)) {
    query['dep_date'] = request.depDate;
  }
  if (!Util.isUnset(request.flightNo)) {
    query['flight_no'] = request.flightNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightOtaSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/flight/action/ota-search`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function flightOtaSearch(request: FlightOtaSearchRequest): FlightOtaSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightOtaSearchHeaders{};
  return flightOtaSearchWithOptions(request, headers, runtime);
}

model FlightPayOrderHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightPayOrderRequest {
  corpPayPrice?: long(name='corp_pay_price', example='100'),
  disOrderId?: string(name='dis_order_id', example='dis123'),
  extra?: map[string]string(name='extra'),
  personalPayPrice?: long(name='personal_pay_price', example='100'),
  totalPayPrice?: long(name='total_pay_price', example='100'),
}

model FlightPayOrderShrinkRequest {
  corpPayPrice?: long(name='corp_pay_price', example='100'),
  disOrderId?: string(name='dis_order_id', example='dis123'),
  extraShrink?: string(name='extra'),
  personalPayPrice?: long(name='personal_pay_price', example='100'),
  totalPayPrice?: long(name='total_pay_price', example='100'),
}

model FlightPayOrderResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    actualPayPrice?: long(name='actual_pay_price', example='1000'),
    alipayTradeNo?: string(name='alipay_trade_no', example='12989127316726531726'),
    lastPayTime?: string(name='last_pay_time', example='0000-00-00 00:00:00'),
    payStatus?: int32(name='pay_status', example='0'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210e842b16611337974412836dae27'),
}

model FlightPayOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlightPayOrderResponseBody(name='body'),
}

async function flightPayOrderWithOptions(tmpReq: FlightPayOrderRequest, headers: FlightPayOrderHeaders, runtime: Util.RuntimeOptions): FlightPayOrderResponse {
  Util.validateModel(tmpReq);
  var request = new FlightPayOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extra)) {
    request.extraShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extra, 'extra', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.corpPayPrice)) {
    body['corp_pay_price'] = request.corpPayPrice;
  }
  if (!Util.isUnset(request.disOrderId)) {
    body['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.extraShrink)) {
    body['extra'] = request.extraShrink;
  }
  if (!Util.isUnset(request.personalPayPrice)) {
    body['personal_pay_price'] = request.personalPayPrice;
  }
  if (!Util.isUnset(request.totalPayPrice)) {
    body['total_pay_price'] = request.totalPayPrice;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FlightPayOrder',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/order/action/pay`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function flightPayOrder(request: FlightPayOrderRequest): FlightPayOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightPayOrderHeaders{};
  return flightPayOrderWithOptions(request, headers, runtime);
}

model FlightRefundApplyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightRefundApplyRequest {
  corpRefundPrice?: long(name='corp_refund_price', example='100'),
  disOrderId?: string(name='dis_order_id', example='dis123'),
  disSubOrderId?: string(name='dis_sub_order_id', example='refu123'),
  displayRefundMoney?: string(name='display_refund_money', example='100'),
  extra?: map[string]string(name='extra'),
  isVoluntary?: int32(name='is_voluntary', example='0'),
  itemUnitIds?: string(name='item_unit_ids', example='FlightItem_9966772382'),
  passengerSegmentInfoList?: [ 
    {
      flightNo?: string(name='flight_no'),
      passengerName?: string(name='passenger_name'),
      userId?: string(name='user_id', example='1245'),
    }
  ](name='passenger_segment_info_list'),
  personalRefundPrice?: long(name='personal_refund_price', example='100'),
  reasonDetail?: string(name='reason_detail'),
  reasonType?: int32(name='reason_type', example='1'),
  refundVoucherInfo?: [ string ](name='refund_voucher_info'),
  sessionId?: string(name='session_id', example='0f9418cd2ce34af49ab0de16fea166d1'),
  totalRefundPrice?: long(name='total_refund_price', example='100'),
}

model FlightRefundApplyShrinkRequest {
  corpRefundPrice?: long(name='corp_refund_price', example='100'),
  disOrderId?: string(name='dis_order_id', example='dis123'),
  disSubOrderId?: string(name='dis_sub_order_id', example='refu123'),
  displayRefundMoney?: string(name='display_refund_money', example='100'),
  extraShrink?: string(name='extra'),
  isVoluntary?: int32(name='is_voluntary', example='0'),
  itemUnitIds?: string(name='item_unit_ids', example='FlightItem_9966772382'),
  passengerSegmentInfoListShrink?: string(name='passenger_segment_info_list'),
  personalRefundPrice?: long(name='personal_refund_price', example='100'),
  reasonDetail?: string(name='reason_detail'),
  reasonType?: int32(name='reason_type', example='1'),
  refundVoucherInfoShrink?: string(name='refund_voucher_info'),
  sessionId?: string(name='session_id', example='0f9418cd2ce34af49ab0de16fea166d1'),
  totalRefundPrice?: long(name='total_refund_price', example='100'),
}

model FlightRefundApplyResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    disOrderId?: string(name='dis_order_id', example='dis123'),
    disSubOrderId?: string(name='dis_sub_order_id', example='refun1234'),
    refundApplyId?: long(name='refund_apply_id', example='1231231'),
    refundFee?: long(name='refund_fee', example='1000'),
    refundMoney?: long(name='refund_money', example='100'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightRefundApplyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlightRefundApplyResponseBody(name='body'),
}

async function flightRefundApplyWithOptions(tmpReq: FlightRefundApplyRequest, headers: FlightRefundApplyHeaders, runtime: Util.RuntimeOptions): FlightRefundApplyResponse {
  Util.validateModel(tmpReq);
  var request = new FlightRefundApplyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extra)) {
    request.extraShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extra, 'extra', 'json');
  }
  if (!Util.isUnset(tmpReq.passengerSegmentInfoList)) {
    request.passengerSegmentInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerSegmentInfoList, 'passenger_segment_info_list', 'json');
  }
  if (!Util.isUnset(tmpReq.refundVoucherInfo)) {
    request.refundVoucherInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.refundVoucherInfo, 'refund_voucher_info', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.corpRefundPrice)) {
    body['corp_refund_price'] = request.corpRefundPrice;
  }
  if (!Util.isUnset(request.disOrderId)) {
    body['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.disSubOrderId)) {
    body['dis_sub_order_id'] = request.disSubOrderId;
  }
  if (!Util.isUnset(request.displayRefundMoney)) {
    body['display_refund_money'] = request.displayRefundMoney;
  }
  if (!Util.isUnset(request.extraShrink)) {
    body['extra'] = request.extraShrink;
  }
  if (!Util.isUnset(request.isVoluntary)) {
    body['is_voluntary'] = request.isVoluntary;
  }
  if (!Util.isUnset(request.itemUnitIds)) {
    body['item_unit_ids'] = request.itemUnitIds;
  }
  if (!Util.isUnset(request.passengerSegmentInfoListShrink)) {
    body['passenger_segment_info_list'] = request.passengerSegmentInfoListShrink;
  }
  if (!Util.isUnset(request.personalRefundPrice)) {
    body['personal_refund_price'] = request.personalRefundPrice;
  }
  if (!Util.isUnset(request.reasonDetail)) {
    body['reason_detail'] = request.reasonDetail;
  }
  if (!Util.isUnset(request.reasonType)) {
    body['reason_type'] = request.reasonType;
  }
  if (!Util.isUnset(request.refundVoucherInfoShrink)) {
    body['refund_voucher_info'] = request.refundVoucherInfoShrink;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['session_id'] = request.sessionId;
  }
  if (!Util.isUnset(request.totalRefundPrice)) {
    body['total_refund_price'] = request.totalRefundPrice;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FlightRefundApply',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/refund/action/apply`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function flightRefundApply(request: FlightRefundApplyRequest): FlightRefundApplyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightRefundApplyHeaders{};
  return flightRefundApplyWithOptions(request, headers, runtime);
}

model FlightRefundDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightRefundDetailRequest {
  disOrderId?: string(name='dis_order_id', example='dis123'),
  disSubOrderId?: string(name='dis_sub_order_id', example='refun123'),
}

model FlightRefundDetailResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    btripOrderId?: long(name='btrip_order_id', example='123'),
    btripSubOrderId?: long(name='btrip_sub_order_id', example='123'),
    disOrderId?: string(name='dis_order_id', example='dis1234'),
    disSubOrderId?: string(name='dis_sub_order_id', example='refun123'),
    isVoluntary?: int32(name='is_voluntary', example='1'),
    reason?: string(name='reason'),
    refundFee?: long(name='refund_fee', example='100'),
    refundFeeList?: [ 
      {
        alipayTradeNo?: string(name='alipay_trade_no', example='293982882881999'),
        refundFee?: long(name='refund_fee', example='100'),
        refundPrice?: long(name='refund_price', example='100'),
        status?: string(name='status'),
      }
    ](name='refund_fee_list'),
    refundPrice?: long(name='refund_price', example='100'),
    status?: string(name='status', example='0'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightRefundDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlightRefundDetailResponseBody(name='body'),
}

async function flightRefundDetailWithOptions(request: FlightRefundDetailRequest, headers: FlightRefundDetailHeaders, runtime: Util.RuntimeOptions): FlightRefundDetailResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.disOrderId)) {
    query['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.disSubOrderId)) {
    query['dis_sub_order_id'] = request.disSubOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightRefundDetail',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/refund/action/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function flightRefundDetail(request: FlightRefundDetailRequest): FlightRefundDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightRefundDetailHeaders{};
  return flightRefundDetailWithOptions(request, headers, runtime);
}

model FlightRefundPreCalHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightRefundPreCalRequest {
  disOrderId?: string(name='dis_order_id', example='dis123'),
  isVoluntary?: string(name='is_voluntary', example='1'),
  passengerSegmentInfoList?: [ 
    {
      flightNo?: string(name='flight_no', example='CA1982'),
      passengerName?: string(name='passenger_name'),
      userId?: string(name='user_id', example='23112'),
    }
  ](name='passenger_segment_info_list'),
}

model FlightRefundPreCalShrinkRequest {
  disOrderId?: string(name='dis_order_id', example='dis123'),
  isVoluntary?: string(name='is_voluntary', example='1'),
  passengerSegmentInfoListShrink?: string(name='passenger_segment_info_list'),
}

model FlightRefundPreCalResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    flightChange?: boolean(name='flight_change', example='false'),
    itemUnitId?: string(name='item_unit_id', example='FlightItem_996677504'),
    multiRefundCalList?: [ 
      {
        canApplyRefund?: boolean(name='can_apply_refund', example='true'),
        name?: string(name='name'),
        preRefundMoney?: long(name='pre_refund_money', example='1000'),
        refundFee?: long(name='refund_fee', example='1000'),
        userId?: string(name='user_id', example='124'),
      }
    ](name='multi_refund_cal_list'),
    preRefundMoney?: long(name='pre_refund_money', example='1000'),
    refundFee?: long(name='refund_fee', example='1000'),
    returnReason?: [ 
      {
        extendDesc?: string(name='extend_desc'),
        person?: int32(name='person', example='0'),
        reasonCode?: int32(name='reason_code', example='0'),
        reasonShow?: string(name='reason_show'),
        reasonType?: int32(name='reason_type', example='1'),
        volunteer?: int32(name='volunteer', example='0'),
      }
    ](name='return_reason'),
    sessionId?: string(name='session_id', example='882sudu23s923j9d2'),
    tips?: string(name='tips'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightRefundPreCalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlightRefundPreCalResponseBody(name='body'),
}

async function flightRefundPreCalWithOptions(tmpReq: FlightRefundPreCalRequest, headers: FlightRefundPreCalHeaders, runtime: Util.RuntimeOptions): FlightRefundPreCalResponse {
  Util.validateModel(tmpReq);
  var request = new FlightRefundPreCalShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.passengerSegmentInfoList)) {
    request.passengerSegmentInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerSegmentInfoList, 'passenger_segment_info_list', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.disOrderId)) {
    query['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.isVoluntary)) {
    query['is_voluntary'] = request.isVoluntary;
  }
  if (!Util.isUnset(request.passengerSegmentInfoListShrink)) {
    query['passenger_segment_info_list'] = request.passengerSegmentInfoListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightRefundPreCal',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/refund/action/pre-cal`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function flightRefundPreCal(request: FlightRefundPreCalRequest): FlightRefundPreCalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightRefundPreCalHeaders{};
  return flightRefundPreCalWithOptions(request, headers, runtime);
}

model FlightSearchListHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model FlightSearchListRequest {
  airlineCode?: string(name='airline_code', example='CA'),
  arrCityCode?: string(name='arr_city_code', example='HGH'),
  arrCityName?: string(name='arr_city_name', example='BJS'),
  arrDate?: string(name='arr_date', example='2000-00-00 00:00:00'),
  cabinClass?: string(name='cabin_class', example='Y'),
  depCityCode?: string(name='dep_city_code', example='HGH'),
  depCityName?: string(name='dep_city_name', example='HGH'),
  depDate?: string(name='dep_date', example='2000-00-00 00:00:00'),
  flightNo?: string(name='flight_no', example='CA2323'),
  needMultiClassPrice?: boolean(name='need_multi_class_price', example='false'),
  transferCityCode?: string(name='transfer_city_code', example='HGH'),
  transferFlightNo?: string(name='transfer_flight_no', example='CA2323'),
  transferLeaveDate?: string(name='transfer_leave_date', example='BJS'),
  tripType?: string(name='trip_type', example='0'),
}

model FlightSearchListResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    flightList?: [ 
      {
        airlineInfo?: {
          airlineCode?: string(name='airline_code', example='CA'),
          airlineName?: string(name='airline_name'),
          airlineSimpleName?: string(name='airline_simple_name'),
        }(name='airline_info'),
        arrAirportInfo?: {
          airportCode?: string(name='airport_code', example='HGH'),
          airportName?: string(name='airport_name'),
          cityCode?: string(name='city_code', example='HGH'),
          cityName?: string(name='city_name'),
          terminal?: string(name='terminal', example='T3'),
        }(name='arr_airport_info'),
        arrDate?: string(name='arr_date', example='yyyy-MM-dd HH:mm:ss'),
        basicCabinPrice?: int32(name='basic_cabin_price'),
        buildPrice?: int32(name='build_price', example='100'),
        cabin?: string(name='cabin', example='Y'),
        cabinClass?: string(name='cabin_class', example='2'),
        cabinInfoList?: [ 
          {
            agentId?: long(name='agent_id'),
            basicCabinPrice?: int32(name='basic_cabin_price'),
            buildPrice?: int32(name='build_price', example='100'),
            cabin?: string(name='cabin', example='G'),
            cabinClass?: string(name='cabin_class', example='Y'),
            cabinClassName?: string(name='cabin_class_name'),
            childCabin?: string(name='child_cabin', example='G'),
            className?: string(name='class_name'),
            classRule?: string(name='class_rule', example='demo'),
            discount?: string(name='discount', example='10'),
            flightRuleList?: [ 
              {
                baggageInfo?: string(name='baggage_info', example='demo'),
                baggageItem?: {
                  baggageSubItems?: [ 
                    {
                      baggageSubContentVisualizes?: [ 
                        {
                          baggageDesc?: [ string ](name='baggage_desc'),
                          baggageSubContentType?: int32(name='baggage_sub_content_type', example='0'),
                          description?: {
                            desc?: string(name='desc'),
                            icon?: string(name='icon', example='https://gw.alicdn.com/imgextra/i4/O1CN01UynXG31pjsEtA3tMF_!!6000000005397-2-tps-36-36.png'),
                            image?: string(name='image', example='https://gw.alicdn.com/imgextra/i1/O1CN01qe7wL21gJ0SmEXXL7_!!6000000004120-2-tps-1206-768.png'),
                            title?: string(name='title'),
                          }(name='description'),
                          imageDO?: {
                            image?: string(name='image', example='demo'),
                            largest?: string(name='largest', example='50'),
                            middle?: string(name='middle', example='40'),
                            smallest?: string(name='smallest', example='20'),
                          }(name='image_d_o'),
                          isHighlight?: boolean(name='is_highlight', example='true'),
                          subTitle?: string(name='sub_title'),
                        }
                      ](name='baggage_sub_content_visualizes'),
                      extraContentVisualizes?: [ any ](name='extra_content_visualizes'),
                      isStruct?: boolean(name='is_struct', example='true'),
                      ptc?: string(name='ptc', description='PTC', example='ADT'),
                      title?: string(name='title'),
                    }
                  ](name='baggage_sub_items'),
                  index?: int32(name='index', example='1'),
                  tableHead?: string(name='table_head'),
                  tips?: {
                    logo?: string(name='logo', example='https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png'),
                    tipsDesc?: string(name='tips_desc'),
                    tipsImage?: string(name='tips_image', example='https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png'),
                  }(name='tips'),
                  title?: string(name='title'),
                  type?: int32(name='type', example='1'),
                }(name='baggage_item'),
                changeRule?: {
                  able?: boolean(name='able', example='true'),
                  info?: [ 
                    {
                      content?: string(name='content'),
                      cost?: int32(name='cost', example='100'),
                      costPercent?: int32(name='cost_percent', example='10'),
                      timeStamp?: int32(name='time_stamp', example='1675036500000'),
                      timeType?: string(name='time_type', example='demo'),
                      title?: string(name='title'),
                    }
                  ](name='info'),
                }(name='change_rule'),
                changeRuleItem?: {
                  extraContents?: [ 
                    {
                      content?: string(name='content', example='demo'),
                      title?: string(name='title', example='demo'),
                    }
                  ](name='extra_contents'),
                  index?: int32(name='index', example='0'),
                  refundSubItems?: [ 
                    {
                      isStruct?: boolean(name='is_struct', example='true'),
                      ptc?: string(name='ptc', description='PTC', example='ADT'),
                      refundSubContents?: [ 
                        {
                          feeDesc?: string(name='fee_desc'),
                          feeRange?: string(name='fee_range'),
                          style?: int32(name='style', example='1'),
                        }
                      ](name='refund_sub_contents'),
                      title?: string(name='title'),
                    }
                  ](name='refund_sub_items'),
                  subTableHead?: [ string ](name='sub_table_head'),
                  tableHead?: string(name='table_head'),
                  title?: string(name='title'),
                  type?: int32(name='type', example='0'),
                }(name='change_rule_item'),
                extra?: string(name='extra', example='{}'),
                refundRule?: {
                  able?: boolean(name='able', example='true'),
                  info?: [ 
                    {
                      content?: string(name='content'),
                      cost?: int32(name='cost', example='100'),
                      costPercent?: int32(name='cost_percent', example='10'),
                      timeStamp?: int32(name='time_stamp', example='1675036500000'),
                      timeType?: string(name='time_type', example='demo'),
                      title?: string(name='title'),
                    }
                  ](name='info'),
                }(name='refund_rule'),
                refundRuleItem?: {
                  extraContents?: [ 
                    {
                      content?: string(name='content', example='demo'),
                      title?: string(name='title', example='demo'),
                    }
                  ](name='extra_contents'),
                  index?: int32(name='index', example='1'),
                  refundSubItems?: [ 
                    {
                      isStruct?: boolean(name='is_struct', example='true'),
                      ptc?: string(name='ptc', description='PTC', example='ADT'),
                      refundSubContents?: [ 
                        {
                          feeDesc?: string(name='fee_desc'),
                          feeRange?: string(name='fee_range'),
                          style?: int32(name='style', example='1'),
                        }
                      ](name='refund_sub_contents'),
                      title?: string(name='title'),
                    }
                  ](name='refund_sub_items'),
                  subTableHead?: [ string ](name='sub_table_head'),
                  tableHead?: string(name='table_head'),
                  title?: string(name='title', example='demo'),
                  type?: int32(name='type', example='1'),
                }(name='refund_rule_item'),
                signRule?: {
                  able?: boolean(name='able', example='true'),
                  info?: [ 
                    {
                      content?: string(name='content'),
                      cost?: int32(name='cost', example='100'),
                      costPercent?: int32(name='cost_percent', example='10'),
                      timeStamp?: int32(name='time_stamp', example='1675036500000'),
                      timeType?: string(name='time_type', example='demo'),
                      title?: string(name='title'),
                    }
                  ](name='info'),
                }(name='sign_rule'),
                tuigaiqianInfo?: string(name='tuigaiqian_info'),
                upgradeRule?: {
                  able?: boolean(name='able', example='true'),
                  info?: [ 
                    {
                      content?: string(name='content'),
                      cost?: int32(name='cost', example='100'),
                      costPercent?: int32(name='cost_percent', example='10'),
                      timeStamp?: int32(name='time_stamp', example='1675036500000'),
                      timeType?: string(name='time_type', example='demo'),
                      title?: string(name='title'),
                    }
                  ](name='info'),
                }(name='upgrade_rule'),
              }
            ](name='flight_rule_list'),
            flightRuleListStr?: string(name='flight_rule_list_str', example='demo'),
            invoiceType?: int32(name='invoice_type', example='1'),
            isProtocol?: boolean(name='is_protocol', example='true'),
            memo?: string(name='memo', example='{"key":"value"}'),
            oilPrice?: int32(name='oil_price', example='100'),
            orderParams?: string(name='order_params', example='1000_1_0'),
            otaItemId?: string(name='ota_item_id', example='wisdiii2ii22ii2'),
            price?: int32(name='price', example='100'),
            productType?: long(name='product_type', example='1'),
            productTypeDesc?: string(name='product_type_desc', example='demo'),
            promotionPrice?: string(name='promotion_price', example='100'),
            remainedSeatCount?: string(name='remained_seat_count', example='1'),
            ticketPrice?: int32(name='ticket_price', example='100'),
            totalPrice?: int32(name='total_price', example='100'),
          }
        ](name='cabin_info_list'),
        carrierAirline?: string(name='carrier_airline', example='FM'),
        carrierNo?: string(name='carrier_no', example='FM9152'),
        classRule?: string(name='class_rule'),
        depAirportInfo?: {
          airportCode?: string(name='airport_code', example='PEK'),
          airportName?: string(name='airport_name'),
          cityCode?: string(name='city_code', example='BJS'),
          cityName?: string(name='city_name'),
          terminal?: string(name='terminal', example='T3'),
        }(name='dep_airport_info'),
        depCityCode?: string(name='dep_city_code', example='BJS'),
        depDate?: string(name='dep_date', example='yyyy-MM-dd HH:mm:ss'),
        discount?: int32(name='discount', example='1'),
        flightNo?: string(name='flight_no', example='CA1234'),
        flightRuleList?: [ 
          {
            baggageInfo?: string(name='baggage_info', example='demo'),
            baggageItem?: {
              baggageSubItems?: [ 
                {
                  baggageSubContentVisualizes?: [ 
                    {
                      baggageDesc?: [ string ](name='baggage_desc'),
                      baggageSubContentType?: int32(name='baggage_sub_content_type', example='1'),
                      description?: {
                        desc?: string(name='desc'),
                        icon?: string(name='icon', example='https://gw.alicdn.com/imgextra/i4/O1CN01UynXG31pjsEtA3tMF_!!6000000005397-2-tps-36-36.png'),
                        image?: string(name='image', example='https://gw.alicdn.com/imgextra/i1/O1CN01qe7wL21gJ0SmEXXL7_!!6000000004120-2-tps-1206-768.png'),
                        title?: string(name='title'),
                      }(name='description'),
                      imageDO?: {
                        image?: string(name='image', example='demo'),
                        largest?: string(name='largest', example='50'),
                        middle?: string(name='middle', example='40'),
                        smallest?: string(name='smallest', example='20'),
                      }(name='image_d_o'),
                      isHighlight?: boolean(name='is_highlight', example='true'),
                      subTitle?: string(name='sub_title'),
                    }
                  ](name='baggage_sub_content_visualizes'),
                  extraContentVisualizes?: [ any ](name='extra_content_visualizes'),
                  isStruct?: boolean(name='is_struct', example='true'),
                  ptc?: string(name='ptc', description='PTC', example='ADT'),
                  title?: string(name='title'),
                }
              ](name='baggage_sub_items'),
              index?: int32(name='index', example='1'),
              tableHead?: string(name='table_head'),
              tips?: {
                logo?: string(name='logo', example='https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png'),
                tipsDesc?: string(name='tips_desc'),
                tipsImage?: string(name='tips_image', example='https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png'),
              }(name='tips'),
              title?: string(name='title'),
              type?: int32(name='type', example='1'),
            }(name='baggage_item'),
            changeRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='change_rule'),
            changeRuleItem?: {
              extraContents?: [ 
                {
                  content?: string(name='content'),
                  title?: string(name='title'),
                }
              ](name='extra_contents'),
              index?: int32(name='index', example='0'),
              refundSubItems?: [ 
                {
                  isStruct?: boolean(name='is_struct', example='true'),
                  ptc?: string(name='ptc', description='PTC', example='ADT'),
                  refundSubContents?: [ 
                    {
                      feeDesc?: string(name='fee_desc'),
                      feeRange?: string(name='fee_range'),
                      style?: int32(name='style', example='1'),
                    }
                  ](name='refund_sub_contents'),
                  title?: string(name='title'),
                }
              ](name='refund_sub_items'),
              subTableHead?: [ string ](name='sub_table_head'),
              tableHead?: string(name='table_head'),
              title?: string(name='title'),
              type?: int32(name='type', example='1'),
            }(name='change_rule_item'),
            extra?: string(name='extra', example='{}'),
            refundRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='refund_rule'),
            refundRuleItem?: {
              extraContents?: [ 
                {
                  content?: string(name='content', example='demo'),
                  title?: string(name='title', example='demo'),
                }
              ](name='extra_contents'),
              index?: int32(name='index', example='1'),
              refundSubItems?: [ 
                {
                  isStruct?: boolean(name='is_struct', example='true'),
                  ptc?: string(name='ptc', description='PTC', example='ADT'),
                  refundSubContents?: [ 
                    {
                      feeDesc?: string(name='fee_desc'),
                      feeRange?: string(name='fee_range'),
                      style?: int32(name='style', example='1'),
                    }
                  ](name='refund_sub_contents'),
                  title?: string(name='title'),
                }
              ](name='refund_sub_items'),
              subTableHead?: [ string ](name='sub_table_head'),
              tableHead?: string(name='table_head'),
              title?: string(name='title'),
              type?: int32(name='type', example='1'),
            }(name='refund_rule_item'),
            signRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='sign_rule'),
            tuigaiqianInfo?: string(name='tuigaiqian_info'),
            upgradeRule?: {
              able?: boolean(name='able', example='false'),
              info?: [ 
                {
                  content?: string(name='content'),
                  cost?: int32(name='cost', example='100'),
                  costPercent?: int32(name='cost_percent', example='10'),
                  timeStamp?: int32(name='time_stamp', example='1675036500000'),
                  timeType?: string(name='time_type', example='demo'),
                  title?: string(name='title'),
                }
              ](name='info'),
            }(name='upgrade_rule'),
          }
        ](name='flight_rule_list'),
        flightRuleListStr?: string(name='flight_rule_list_str', example='demo'),
        flightSize?: string(name='flight_size'),
        flightType?: string(name='flight_type', example='demo'),
        invoiceType?: int32(name='invoice_type', example='1'),
        isProtocol?: boolean(name='is_protocol', example='true'),
        isShare?: boolean(name='is_share', example='false'),
        isStop?: boolean(name='is_stop', example='false'),
        isTransfer?: boolean(name='is_transfer', example='false'),
        mealDesc?: string(name='meal_desc'),
        memo?: string(name='memo', example='{"key":"value"}'),
        oilPrice?: int32(name='oil_price', example='100'),
        otaItemId?: string(name='ota_item_id', example='wisdiii2ii22ii2'),
        price?: int32(name='price', example='100'),
        productType?: long(name='product_type', example='1'),
        productTypeDesc?: string(name='product_type_desc'),
        promotionPrice?: string(name='promotion_price', example='100'),
        remainedSeatCount?: string(name='remained_seat_count', example='1'),
        secretParams?: string(name='secret_params', example='1000_1_0'),
        segmentNumber?: string(name='segment_number', example='1'),
        stopArrTime?: string(name='stop_arr_time', example='yyyy-MM-dd HH:mm:ss'),
        stopCity?: string(name='stop_city', example='HGH'),
        stopDepTime?: string(name='stop_dep_time', example='yyyy-MM-dd HH:mm:ss'),
        ticketPrice?: int32(name='ticket_price', example='100'),
        totalPrice?: string(name='total_price', example='100'),
        transferInfo?: {
          flightSize?: string(name='flight_size'),
          flightType?: string(name='flight_type', example='demo'),
          transferAirlineInfo?: {
            airlineCode?: string(name='airline_code', example='ZH'),
            airlineName?: string(name='airline_name'),
            airlineSimpleName?: string(name='airline_simple_name'),
          }(name='transfer_airline_info'),
          transferArrAirportInfo?: {
            airportCode?: string(name='airport_code', example='HGH'),
            airportName?: string(name='airport_name'),
            cityCode?: string(name='city_code', example='HGH'),
            cityName?: string(name='city_name'),
            terminal?: string(name='terminal', example='T4'),
          }(name='transfer_arr_airport_info'),
          transferArrDate?: string(name='transfer_arr_date', example='yyyy-MM-dd HH:mm:ss'),
          transferDepAirportInfo?: {
            airportCode?: string(name='airport_code', example='PEK'),
            airportName?: string(name='airport_name'),
            cityCode?: string(name='city_code', example='BJS'),
            cityName?: string(name='city_name'),
            terminal?: string(name='terminal', example='T3'),
          }(name='transfer_dep_airport_info'),
          transferDepDate?: string(name='transfer_dep_date', example='yyyy-MM-dd HH:mm:ss'),
          transferFlightNo?: string(name='transfer_flight_no', example='CA1234'),
          transferFlightRuleList?: [ 
            {
              baggageInfo?: string(name='baggage_info', example='demo'),
              baggageItem?: {
                baggageSubItems?: [ 
                  {
                    baggageSubContentVisualizes?: [ 
                      {
                        baggageDesc?: [ string ](name='baggage_desc'),
                        baggageSubContentType?: int32(name='baggage_sub_content_type', example='1'),
                        description?: {
                          desc?: string(name='desc'),
                          icon?: string(name='icon', example='https://gw.alicdn.com/imgextra/i4/O1CN01UynXG31pjsEtA3tMF_!!6000000005397-2-tps-36-36.png'),
                          image?: string(name='image', example='https://gw.alicdn.com/imgextra/i1/O1CN01qe7wL21gJ0SmEXXL7_!!6000000004120-2-tps-1206-768.png'),
                          title?: string(name='title'),
                        }(name='description'),
                        imageDO?: {
                          image?: string(name='image', example='demo'),
                          largest?: string(name='largest', example='50'),
                          middle?: string(name='middle', example='40'),
                          smallest?: string(name='smallest', example='20'),
                        }(name='image_d_o'),
                        isHighlight?: boolean(name='is_highlight', example='true'),
                        subTitle?: string(name='sub_title'),
                      }
                    ](name='baggage_sub_content_visualizes'),
                    extraContentVisualizes?: [ any ](name='extra_content_visualizes'),
                    isStruct?: boolean(name='is_struct', example='true'),
                    ptc?: string(name='ptc', description='PTC', example='ADT'),
                    title?: string(name='title', example='1'),
                  }
                ](name='baggage_sub_items'),
                index?: int32(name='index', example='1'),
                tableHead?: string(name='table_head'),
                tips?: {
                  logo?: string(name='logo', example='https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png'),
                  tipsDesc?: string(name='tips_desc'),
                  tipsImage?: string(name='tips_image', example='https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png'),
                }(name='tips'),
                title?: string(name='title'),
                type?: int32(name='type', example='1'),
              }(name='baggage_item'),
              changeRule?: {
                able?: boolean(name='able', example='true'),
                info?: [ 
                  {
                    content?: string(name='content'),
                    cost?: int32(name='cost', example='100'),
                    costPercent?: int32(name='cost_percent', example='100'),
                    timeStamp?: int32(name='time_stamp', example='1675036500000'),
                    timeType?: string(name='time_type', example='demo'),
                    title?: string(name='title'),
                  }
                ](name='info'),
              }(name='change_rule'),
              changeRuleItem?: {
                extraContents?: [ 
                  {
                    content?: string(name='content', example='demo'),
                    title?: string(name='title', example='demo'),
                  }
                ](name='extra_contents'),
                index?: int32(name='index', example='0'),
                refundSubItems?: [ 
                  {
                    isStruct?: boolean(name='is_struct', example='true'),
                    ptc?: string(name='ptc', description='PTC', example='ADT'),
                    refundSubContents?: [ 
                      {
                        feeDesc?: string(name='fee_desc'),
                        feeRange?: string(name='fee_range'),
                        style?: int32(name='style', example='1'),
                      }
                    ](name='refund_sub_contents'),
                    title?: string(name='title'),
                  }
                ](name='refund_sub_items'),
                subTableHead?: [ string ](name='sub_table_head'),
                tableHead?: string(name='table_head'),
                title?: string(name='title'),
                type?: int32(name='type', example='0'),
              }(name='change_rule_item'),
              extra?: string(name='extra', example='{}'),
              refundRule?: {
                able?: boolean(name='able', example='true'),
                info?: [ 
                  {
                    content?: string(name='content'),
                    cost?: int32(name='cost', example='100'),
                    costPercent?: int32(name='cost_percent', example='100'),
                    timeStamp?: int32(name='time_stamp', example='1675036500000'),
                    timeType?: string(name='time_type', example='demo'),
                    title?: string(name='title'),
                  }
                ](name='info'),
              }(name='refund_rule'),
              refundRuleItem?: {
                extraContents?: [ 
                  {
                    content?: string(name='content', example='demo'),
                    title?: string(name='title', example='demo'),
                  }
                ](name='extra_contents'),
                index?: int32(name='index', example='1'),
                refundSubItems?: [ 
                  {
                    isStruct?: boolean(name='is_struct', example='true'),
                    ptc?: string(name='ptc', description='PTC', example='ADT'),
                    refundSubContents?: [ 
                      {
                        feeDesc?: string(name='fee_desc'),
                        feeRange?: string(name='fee_range'),
                        style?: int32(name='style', example='1'),
                      }
                    ](name='refund_sub_contents'),
                    title?: string(name='title'),
                  }
                ](name='refund_sub_items'),
                subTableHead?: [ string ](name='sub_table_head'),
                tableHead?: string(name='table_head'),
                title?: string(name='title', example='demo'),
                type?: int32(name='type', example='1'),
              }(name='refund_rule_item'),
              signRule?: {
                able?: boolean(name='able', example='true'),
                info?: [ 
                  {
                    content?: string(name='content'),
                    cost?: int32(name='cost', example='100'),
                    costPercent?: int32(name='cost_percent', example='10'),
                    timeStamp?: int32(name='time_stamp', example='1675036500000'),
                    timeType?: string(name='time_type', example='demo'),
                    title?: string(name='title'),
                  }
                ](name='info'),
              }(name='sign_rule'),
              tuigaiqianInfo?: string(name='tuigaiqian_info', example='demo'),
              upgradeRule?: {
                able?: boolean(name='able', example='true'),
                info?: [ 
                  {
                    content?: string(name='content'),
                    cost?: int32(name='cost', example='100'),
                    costPercent?: int32(name='cost_percent', example='10'),
                    timeStamp?: int32(name='time_stamp', example='1675036500000'),
                    timeType?: string(name='time_type', example='demo'),
                    title?: string(name='title'),
                  }
                ](name='info'),
              }(name='upgrade_rule'),
            }
          ](name='transfer_flight_rule_list'),
        }(name='transfer_info'),
        tripType?: int32(name='trip_type', example='1'),
      }
    ](name='flight_list'),
    isReplacePnr?: boolean(name='is_replace_pnr', example='false'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model FlightSearchListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlightSearchListResponseBody(name='body'),
}

async function flightSearchListWithOptions(request: FlightSearchListRequest, headers: FlightSearchListHeaders, runtime: Util.RuntimeOptions): FlightSearchListResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.airlineCode)) {
    query['airline_code'] = request.airlineCode;
  }
  if (!Util.isUnset(request.arrCityCode)) {
    query['arr_city_code'] = request.arrCityCode;
  }
  if (!Util.isUnset(request.arrCityName)) {
    query['arr_city_name'] = request.arrCityName;
  }
  if (!Util.isUnset(request.arrDate)) {
    query['arr_date'] = request.arrDate;
  }
  if (!Util.isUnset(request.cabinClass)) {
    query['cabin_class'] = request.cabinClass;
  }
  if (!Util.isUnset(request.depCityCode)) {
    query['dep_city_code'] = request.depCityCode;
  }
  if (!Util.isUnset(request.depCityName)) {
    query['dep_city_name'] = request.depCityName;
  }
  if (!Util.isUnset(request.depDate)) {
    query['dep_date'] = request.depDate;
  }
  if (!Util.isUnset(request.flightNo)) {
    query['flight_no'] = request.flightNo;
  }
  if (!Util.isUnset(request.needMultiClassPrice)) {
    query['need_multi_class_price'] = request.needMultiClassPrice;
  }
  if (!Util.isUnset(request.transferCityCode)) {
    query['transfer_city_code'] = request.transferCityCode;
  }
  if (!Util.isUnset(request.transferFlightNo)) {
    query['transfer_flight_no'] = request.transferFlightNo;
  }
  if (!Util.isUnset(request.transferLeaveDate)) {
    query['transfer_leave_date'] = request.transferLeaveDate;
  }
  if (!Util.isUnset(request.tripType)) {
    query['trip_type'] = request.tripType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightSearchList',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/huge/dtb-flight/v1/flight/action/search-list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function flightSearchList(request: FlightSearchListRequest): FlightSearchListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightSearchListHeaders{};
  return flightSearchListWithOptions(request, headers, runtime);
}

model GroupCorpTokenHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripAccessToken?: string(name='x-acs-btrip-access-token', example='feth00jqwls'),
}

model GroupCorpTokenRequest {
  appSecret?: string(name='app_secret', example='ZzljczY5dnFjNDAwVlNofiwoWX5ZWCxlcjVTKnVoZS0'),
  corpId?: string(name='corp_id', example='open12g9sfbmm5i07v10wDzRSK9w00'),
  subCorpId?: string(name='sub_corp_id', example='btripuyxmbg3cs286734u_mow6q'),
}

model GroupCorpTokenResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    expire?: long(name='expire', example='70000'),
    start?: long(name='start', example='1652410740914'),
    token?: string(name='token', example='*0*37j76df'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  traceId?: string(name='traceId', description='traceId', example='210f079e16603757182131635d866a'),
}

model GroupCorpTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GroupCorpTokenResponseBody(name='body'),
}

async function groupCorpTokenWithOptions(request: GroupCorpTokenRequest, headers: GroupCorpTokenHeaders, runtime: Util.RuntimeOptions): GroupCorpTokenResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.appSecret)) {
    query['app_secret'] = request.appSecret;
  }
  if (!Util.isUnset(request.corpId)) {
    query['corp_id'] = request.corpId;
  }
  if (!Util.isUnset(request.subCorpId)) {
    query['sub_corp_id'] = request.subCorpId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripAccessToken)) {
    realHeaders['x-acs-btrip-access-token'] = Util.toJSONString(headers.xAcsBtripAccessToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GroupCorpToken',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/btrip-open-auth/v1/group-corp-token/action/take`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function groupCorpToken(request: GroupCorpTokenRequest): GroupCorpTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GroupCorpTokenHeaders{};
  return groupCorpTokenWithOptions(request, headers, runtime);
}

model GroupDepartSaveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model GroupDepartSaveRequest {
  deptName?: string(name='dept_name'),
  managerIds?: string(name='manager_ids'),
  outerDeptId?: string(name='outer_dept_id', example='001'),
  outerDeptPid?: string(name='outer_dept_pid', example='002'),
  status?: int32(name='status', example='0'),
  subCorpIdList?: [ string ](name='sub_corp_id_list'),
  syncGroup?: boolean(name='sync_group'),
}

model GroupDepartSaveShrinkRequest {
  deptName?: string(name='dept_name'),
  managerIds?: string(name='manager_ids'),
  outerDeptId?: string(name='outer_dept_id', example='001'),
  outerDeptPid?: string(name='outer_dept_pid', example='002'),
  status?: int32(name='status', example='0'),
  subCorpIdListShrink?: string(name='sub_corp_id_list'),
  syncGroup?: boolean(name='sync_group'),
}

model GroupDepartSaveResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210e847f16611516748613869de4f6'),
}

model GroupDepartSaveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GroupDepartSaveResponseBody(name='body'),
}

async function groupDepartSaveWithOptions(tmpReq: GroupDepartSaveRequest, headers: GroupDepartSaveHeaders, runtime: Util.RuntimeOptions): GroupDepartSaveResponse {
  Util.validateModel(tmpReq);
  var request = new GroupDepartSaveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.subCorpIdList)) {
    request.subCorpIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.subCorpIdList, 'sub_corp_id_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deptName)) {
    body['dept_name'] = request.deptName;
  }
  if (!Util.isUnset(request.managerIds)) {
    body['manager_ids'] = request.managerIds;
  }
  if (!Util.isUnset(request.outerDeptId)) {
    body['outer_dept_id'] = request.outerDeptId;
  }
  if (!Util.isUnset(request.outerDeptPid)) {
    body['outer_dept_pid'] = request.outerDeptPid;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.subCorpIdListShrink)) {
    body['sub_corp_id_list'] = request.subCorpIdListShrink;
  }
  if (!Util.isUnset(request.syncGroup)) {
    body['sync_group'] = request.syncGroup;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GroupDepartSave',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/sub_corps/v1/departs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function groupDepartSave(request: GroupDepartSaveRequest): GroupDepartSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GroupDepartSaveHeaders{};
  return groupDepartSaveWithOptions(request, headers, runtime);
}

model GroupUserSaveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model GroupUserSaveRequest {
  jobNo?: string(name='job_no', example='1001'),
  phone?: string(name='phone', example='18000000000'),
  realNameEn?: string(name='real_name_en', example='ce/shi'),
  subCorpIdList?: [ 
    {
      departIds?: [ string ](name='depart_ids'),
      leaveStatus?: int32(name='leave_status', example='0'),
      managerUserId?: string(name='manager_user_id', example='123'),
      positionLevel?: string(name='position_level', example='10'),
      subCorpId?: string(name='sub_corp_id', example='btrip123'),
    }
  ](name='sub_corp_id_list'),
  userId?: string(name='user_id', example='123'),
  userName?: string(name='user_name'),
}

model GroupUserSaveShrinkRequest {
  jobNo?: string(name='job_no', example='1001'),
  phone?: string(name='phone', example='18000000000'),
  realNameEn?: string(name='real_name_en', example='ce/shi'),
  subCorpIdListShrink?: string(name='sub_corp_id_list'),
  userId?: string(name='user_id', example='123'),
  userName?: string(name='user_name'),
}

model GroupUserSaveResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model GroupUserSaveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GroupUserSaveResponseBody(name='body'),
}

async function groupUserSaveWithOptions(tmpReq: GroupUserSaveRequest, headers: GroupUserSaveHeaders, runtime: Util.RuntimeOptions): GroupUserSaveResponse {
  Util.validateModel(tmpReq);
  var request = new GroupUserSaveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.subCorpIdList)) {
    request.subCorpIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.subCorpIdList, 'sub_corp_id_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobNo)) {
    body['job_no'] = request.jobNo;
  }
  if (!Util.isUnset(request.phone)) {
    body['phone'] = request.phone;
  }
  if (!Util.isUnset(request.realNameEn)) {
    body['real_name_en'] = request.realNameEn;
  }
  if (!Util.isUnset(request.subCorpIdListShrink)) {
    body['sub_corp_id_list'] = request.subCorpIdListShrink;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    body['user_name'] = request.userName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GroupUserSave',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/sub_corps/v1/users`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function groupUserSave(request: GroupUserSaveRequest): GroupUserSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GroupUserSaveHeaders{};
  return groupUserSaveWithOptions(request, headers, runtime);
}

model HotelAskingPriceHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelAskingPriceRequest {
  adultNum?: string(name='adult_num', example='1'),
  btripUserId?: string(name='btrip_user_id', example='1000'),
  checkInDate?: string(name='check_in_date', example='2023-02-22 00:00:00'),
  checkOutDate?: string(name='check_out_date', example='2023-02-22 00:00:00'),
  cityCode?: string(name='city_code', example='330100'),
  cityName?: string(name='city_name'),
  dir?: int32(name='dir', example='1'),
  hotelStar?: string(name='hotel_star', example='1'),
  isProtocol?: boolean(name='is_protocol', example='true'),
  paymentType?: int32(name='payment_type', example='0'),
  shids?: [ long ](name='shids'),
  sortCode?: int32(name='sort_code', example='0'),
}

model HotelAskingPriceShrinkRequest {
  adultNum?: string(name='adult_num', example='1'),
  btripUserId?: string(name='btrip_user_id', example='1000'),
  checkInDate?: string(name='check_in_date', example='2023-02-22 00:00:00'),
  checkOutDate?: string(name='check_out_date', example='2023-02-22 00:00:00'),
  cityCode?: string(name='city_code', example='330100'),
  cityName?: string(name='city_name'),
  dir?: int32(name='dir', example='1'),
  hotelStar?: string(name='hotel_star', example='1'),
  isProtocol?: boolean(name='is_protocol', example='true'),
  paymentType?: int32(name='payment_type', example='0'),
  shidsShrink?: string(name='shids'),
  sortCode?: int32(name='sort_code', example='0'),
}

model HotelAskingPriceResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='None'),
  module?: {
    hotelAskingPriceDetails?: [ 
      {
        cityCode?: string(name='city_code', example='652302'),
        hotelAddress?: string(name='hotel_address'),
        hotelCode?: string(name='hotel_code', example='55335212'),
        hotelName?: string(name='hotel_name'),
        isProtocol?: boolean(name='is_protocol', example='true'),
        minPrice?: double(name='min_price', example='100'),
        originalMinPrice?: double(name='original_min_price', example='100'),
      }
    ](name='hotel_asking_price_details'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210bcc3a16583004579056128d33d7'),
}

model HotelAskingPriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelAskingPriceResponseBody(name='body'),
}

async function hotelAskingPriceWithOptions(tmpReq: HotelAskingPriceRequest, headers: HotelAskingPriceHeaders, runtime: Util.RuntimeOptions): HotelAskingPriceResponse {
  Util.validateModel(tmpReq);
  var request = new HotelAskingPriceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.shids)) {
    request.shidsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shids, 'shids', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.adultNum)) {
    query['adult_num'] = request.adultNum;
  }
  if (!Util.isUnset(request.btripUserId)) {
    query['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.checkInDate)) {
    query['check_in_date'] = request.checkInDate;
  }
  if (!Util.isUnset(request.checkOutDate)) {
    query['check_out_date'] = request.checkOutDate;
  }
  if (!Util.isUnset(request.cityCode)) {
    query['city_code'] = request.cityCode;
  }
  if (!Util.isUnset(request.cityName)) {
    query['city_name'] = request.cityName;
  }
  if (!Util.isUnset(request.dir)) {
    query['dir'] = request.dir;
  }
  if (!Util.isUnset(request.hotelStar)) {
    query['hotel_star'] = request.hotelStar;
  }
  if (!Util.isUnset(request.isProtocol)) {
    query['is_protocol'] = request.isProtocol;
  }
  if (!Util.isUnset(request.paymentType)) {
    query['payment_type'] = request.paymentType;
  }
  if (!Util.isUnset(request.shidsShrink)) {
    query['shids'] = request.shidsShrink;
  }
  if (!Util.isUnset(request.sortCode)) {
    query['sort_code'] = request.sortCode;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelAskingPrice',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/hotels/action/asking-price`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hotelAskingPrice(request: HotelAskingPriceRequest): HotelAskingPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelAskingPriceHeaders{};
  return hotelAskingPriceWithOptions(request, headers, runtime);
}

model HotelBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model HotelBillSettlementQueryRequest {
  pageNo?: int32(name='page_no', example='1'),
  pageSize?: int32(name='page_size', example='50'),
  periodEnd?: string(name='period_end', example='2021-10-02'),
  periodStart?: string(name='period_start', example='2021-10-01'),
}

model HotelBillSettlementQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category', example='2'),
    corpId?: string(name='corp_id'),
    dataList?: [ 
      {
        alipayTradeNo?: string(name='alipay_trade_no', example='234432432'),
        applyExtendField?: string(name='apply_extend_field', description='审批扩展自定义字段'),
        applyId?: string(name='apply_id', example='103208648'),
        billRecordTime?: string(name='bill_record_time', example='2022-07-20T10:40Z'),
        bookTime?: string(name='book_time', example='2021-10-12 23:58:48'),
        bookerId?: string(name='booker_id'),
        bookerJobNo?: string(name='booker_job_no'),
        bookerName?: string(name='booker_name'),
        capitalDirection?: string(name='capital_direction', example='1'),
        cascadeDepartment?: string(name='cascade_department'),
        checkInDate?: string(name='check_in_date', example='2021-10-14 00:00:00'),
        checkoutDate?: string(name='checkout_date', example='2021-10-16 00:00:00'),
        city?: string(name='city'),
        cityCode?: string(name='city_code', example='110100'),
        corpRefundFee?: double(name='corp_refund_fee', example='12'),
        corpTotalFee?: double(name='corp_total_fee', example='1000'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number', example='8b7f3cd-24324-097'),
        department?: string(name='department'),
        departmentId?: string(name='department_id'),
        feeType?: string(name='fee_type', example='20101'),
        fees?: double(name='fees', example='0'),
        fuPointFee?: double(name='fu_point_fee', example='12'),
        hotelName?: string(name='hotel_name'),
        index?: string(name='index', example='5038018'),
        invoiceTitle?: string(name='invoice_title'),
        isNegotiation?: string(name='is_negotiation'),
        isShareStr?: string(name='is_share_str'),
        nights?: int32(name='nights', example='2'),
        orderId?: string(name='order_id', example='223423423432422'),
        orderPrice?: double(name='order_price', example='1088.96'),
        orderType?: string(name='order_type'),
        overApplyId?: string(name='over_apply_id', example='4234324'),
        personRefundFee?: double(name='person_refund_fee', example='34'),
        personSettlePrice?: double(name='person_settle_price', example='88.96'),
        primaryId?: long(name='primary_id', example='5038018'),
        projectCode?: string(name='project_code', example='223423432'),
        projectName?: string(name='project_name'),
        promotionFee?: double(name='promotion_fee', example='113.02'),
        remark?: string(name='remark'),
        roomNumber?: int32(name='room_number', example='1'),
        roomPrice?: double(name='room_price', example='1201.98'),
        roomType?: string(name='room_type'),
        serviceFee?: double(name='service_fee', example='0'),
        settlementFee?: double(name='settlement_fee', example='1000'),
        settlementGrantFee?: double(name='settlement_grant_fee', example='5.68'),
        settlementTime?: string(name='settlement_time', example='2021-10-12 23:58:56'),
        settlementType?: string(name='settlement_type', example='4'),
        status?: int32(name='status', example='1'),
        taxRate?: string(name='tax_rate', description='税率', example='6%'),
        totalNights?: int32(name='total_nights', example='2'),
        travelerId?: string(name='traveler_id'),
        travelerJobNo?: string(name='traveler_job_no', example='326246'),
        travelerName?: string(name='traveler_name'),
        voucherType?: int32(name='voucher_type', example='11'),
      }
    ](name='data_list'),
    periodEnd?: string(name='period_end', example='2021-10-14'),
    periodStart?: string(name='period_start', example='2021-10-13'),
    totalNum?: long(name='total_num', example='1402'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelBillSettlementQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelBillSettlementQueryResponseBody(name='body'),
}

async function hotelBillSettlementQueryWithOptions(request: HotelBillSettlementQueryRequest, headers: HotelBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): HotelBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/hotel/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hotelBillSettlementQuery(request: HotelBillSettlementQueryRequest): HotelBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelBillSettlementQueryHeaders{};
  return hotelBillSettlementQueryWithOptions(request, headers, runtime);
}

model HotelCityCodeListHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelCityCodeListRequest {
  countryCode?: string(name='country_code', example='1'),
}

model HotelCityCodeListResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='response is empty.'),
  module?: [ 
    {
      citys?: [ 
        {
          cityCode?: string(name='city_code', example='445222'),
          cityName?: string(name='city_name'),
          districts?: [ 
            {
              districtCode?: string(name='district_code', example='330000'),
              districtName?: string(name='district_name'),
            }
          ](name='districts'),
        }
      ](name='citys'),
      proviceCode?: string(name='provice_code', example='108800'),
      provinceName?: string(name='province_name'),
    }
  ](name='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelCityCodeListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelCityCodeListResponseBody(name='body'),
}

async function hotelCityCodeListWithOptions(request: HotelCityCodeListRequest, headers: HotelCityCodeListHeaders, runtime: Util.RuntimeOptions): HotelCityCodeListResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.countryCode)) {
    query['country_code'] = request.countryCode;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelCityCodeList',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/city-codes/action/search`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hotelCityCodeList(request: HotelCityCodeListRequest): HotelCityCodeListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelCityCodeListHeaders{};
  return hotelCityCodeListWithOptions(request, headers, runtime);
}

model HotelExceedApplyQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model HotelExceedApplyQueryRequest {
  applyId?: long(name='apply_id', example='1287123'),
}

model HotelExceedApplyQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id', example='27238197'),
    applyIntentionInfoDo?: {
      checkIn?: string(name='check_in', example='2021-07-08'),
      checkOut?: string(name='check_out', example='2021-07-08'),
      cityCode?: string(name='city_code', example='SHA'),
      cityName?: string(name='city_name'),
      price?: long(name='price', example='10000'),
      together?: boolean(name='together', example='true'),
      type?: int32(name='type', example='16'),
    }(name='apply_intention_info_do'),
    btripCause?: string(name='btrip_cause'),
    corpId?: string(name='corp_id', example='corp1'),
    exceedReason?: string(name='exceed_reason'),
    exceedType?: int32(name='exceed_type', example='16'),
    originStandard?: string(name='origin_standard', example='10000'),
    status?: int32(name='status', example='1'),
    submitTime?: string(name='submit_time', example='2022-02-11T16:25Z'),
    thirdpartApplyId?: string(name='thirdpart_apply_id', example='0001A1100000007EX08O'),
    thirdpartCorpId?: string(name='thirdpart_corp_id', example='test_corp'),
    userId?: string(name='user_id', example='user1'),
  }(name='module'),
  requestId?: string(name='requestId', example='E03779E6-71C2-5082-ABE3-6315B8247EE8'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelExceedApplyQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelExceedApplyQueryResponseBody(name='body'),
}

async function hotelExceedApplyQueryWithOptions(request: HotelExceedApplyQueryRequest, headers: HotelExceedApplyQueryHeaders, runtime: Util.RuntimeOptions): HotelExceedApplyQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelExceedApplyQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/hotel-exceed`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hotelExceedApplyQuery(request: HotelExceedApplyQueryRequest): HotelExceedApplyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelExceedApplyQueryHeaders{};
  return hotelExceedApplyQueryWithOptions(request, headers, runtime);
}

model HotelGoodsQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelGoodsQueryRequest {
  adultNum?: string(name='adult_num', example='1'),
  agreementPrice?: boolean(name='agreement_price', example='false'),
  beginDate?: string(name='begin_date', example='2023-02-27'),
  breakfastIncluded?: boolean(name='breakfast_included', example='false'),
  btripUserId?: string(name='btrip_user_id', example='100'),
  cityCode?: string(name='city_code', example='330100'),
  endDate?: string(name='end_date', example='2023-02-28'),
  hotelId?: string(name='hotel_id', example='182873'),
  payOverType?: int32(name='pay_over_type', example='0'),
  paymentType?: int32(name='payment_type', example='0'),
  specialInvoice?: boolean(name='special_invoice', example='false'),
  superMan?: int32(name='super_man', example='0'),
}

model HotelGoodsQueryResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='None'),
  module?: {
    address?: string(name='address'),
    bookingInstructions?: map[string]string(name='booking_instructions'),
    canForeigner?: boolean(name='can_foreigner', example='true'),
    checkIn?: string(name='check_in', example='2022-05-15'),
    checkOut?: string(name='check_out', example='2022-05-15'),
    descriptions?: [ string ](name='descriptions'),
    dinamicBannerPicUrls?: [ string ](name='dinamic_banner_pic_urls'),
    earlyArrivalTime?: string(name='early_arrival_time', example='17:00'),
    hotelId?: long(name='hotel_id', example='29382'),
    hotelName?: string(name='hotel_name'),
    lateArrivalTime?: string(name='late_arrival_time', example='12:00'),
    rooms?: [ 
      {
        area?: string(name='area', example='27'),
        bedTypeString?: string(name='bed_type_string'),
        extraBed?: boolean(name='extra_bed', example='true'),
        facility?: string(name='facility'),
        floor?: string(name='floor', example='1,2,3,4,5,6'),
        maxOccupancy?: int32(name='max_occupancy', example='1'),
        name?: string(name='name'),
        networkService?: string(name='network_service', example='0'),
        pics?: string(name='pics'),
        rates?: [ 
          {
            bedDesc?: string(name='bed_desc'),
            bedType?: string(name='bed_type'),
            breakfast?: string(name='breakfast'),
            btripCancelRule?: {
              btripHotelCancelPolicyDTO?: {
                btripHotelCancelPolicyInfoDTOList?: [ 
                  {
                    hour?: long(name='hour', example='1'),
                    value?: long(name='value', example='20'),
                  }
                ](name='btrip_hotel_cancel_policy_info_d_t_o_list'),
                cancelPolicyType?: int32(name='cancel_policy_type', example='1'),
              }(name='btrip_hotel_cancel_policy_d_t_o'),
              cancelPolicyTitle?: string(name='cancel_policy_title'),
              checkIn?: string(name='check_in', example='2023-02-27'),
            }(name='btrip_cancel_rule'),
            btripHotelCancelDesc?: [ 
              {
                desc?: string(name='desc'),
                title?: string(name='title'),
              }
            ](name='btrip_hotel_cancel_desc'),
            canSmoking?: boolean(name='can_smoking', example='true'),
            cancelPolicyDesc?: string(name='cancel_policy_desc'),
            cancelPolicyType?: int32(name='cancel_policy_type', example='1'),
            companyAassist?: string(name='company_aassist', example='0'),
            confirmType?: int32(name='confirm_type', example='0'),
            currencyCode?: string(name='currency_code', example='cny'),
            dailyPriceFormatYuan?: string(name='daily_price_format_yuan', example='demo'),
            dailyPriceView?: string(name='daily_price_view', example='400'),
            endTimeDaily?: string(name='end_time_daily', example='demo'),
            hotelDetailRatePriceDTO?: [ 
              {
                beforeDiscountPrice?: long(name='before_discount_price', example='100'),
                breakfast?: string(name='breakfast', example='demo'),
                discountPrice?: long(name='discount_price', example='1000'),
                lastDiscountsPrice?: long(name='last_discounts_price', example='100'),
                lastDiscountsRoundingPrice?: long(name='last_discounts_rounding_price'),
                lastNum?: int32(name='last_num', example='1'),
                rateStartTime?: string(name='rate_start_time', example='2023-03-25'),
                status?: int32(name='status', example='1'),
              }
            ](name='hotel_detail_rate_price_d_t_o'),
            instantConfirm?: boolean(name='instant_confirm', example='true'),
            inventoryPrice?: string(name='inventory_price', example='100'),
            isBusinessPay4Goods?: boolean(name='is_business_pay4_goods', example='true'),
            isGuarantee?: int32(name='is_guarantee'),
            isNeedEmail?: boolean(name='is_need_email', example='true'),
            itemId?: long(name='item_id', example='612673015638'),
            lastCancelTime?: string(name='last_cancel_time', example='demo'),
            maxOccupancy?: int32(name='max_occupancy', example='2'),
            minAdvHours?: int32(name='min_adv_hours', example='2'),
            minDays?: int32(name='min_days', example='3'),
            nod?: int32(name='nod', example='1'),
            nop?: int32(name='nop', example='2'),
            orderShipTime?: int32(name='order_ship_time', example='0'),
            paymentType?: int32(name='payment_type', example='1'),
            priceType?: int32(name='price_type', example='0'),
            promotionInfo?: string(name='promotion_info', example='demo'),
            rateId?: long(name='rate_id', example='4509447432148'),
            ratePlanName?: string(name='rate_plan_name'),
            rpId?: long(name='rp_id', example='4509447432148'),
            sellerId?: long(name='seller_id', example='4011822148'),
            startTimeDaily?: string(name='start_time_daily', example='demo'),
            status?: int32(name='status', example='1'),
            supplierCode?: string(name='supplier_code', example='2321'),
            supplierName?: string(name='supplier_name', example='demo'),
            supportSpecialInvoice?: boolean(name='support_special_invoice', example='true'),
            unroundingDailyPriceFormatYuan?: string(name='unrounding_daily_price_format_yuan', example='40000'),
          }
        ](name='rates'),
        roomDasc?: string(name='room_dasc', example='demo'),
        roomFacility?: [ string ](name='room_facility'),
        roomService?: [ 
          {
            color?: string(name='color', example='#000000'),
            desc?: string(name='desc'),
            highlightColorColor?: string(name='highlight_color_color', example='#4AA900'),
            title?: string(name='title'),
          }
        ](name='room_service'),
        srid?: long(name='srid', example='100929'),
        status?: int32(name='status', example='1'),
        windowType?: string(name='window_type'),
      }
    ](name='rooms'),
    searchId?: string(name='search_id', example='demo'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210e847f16611516748613869de4f6'),
}

model HotelGoodsQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelGoodsQueryResponseBody(name='body'),
}

async function hotelGoodsQueryWithOptions(request: HotelGoodsQueryRequest, headers: HotelGoodsQueryHeaders, runtime: Util.RuntimeOptions): HotelGoodsQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.adultNum)) {
    query['adult_num'] = request.adultNum;
  }
  if (!Util.isUnset(request.agreementPrice)) {
    query['agreement_price'] = request.agreementPrice;
  }
  if (!Util.isUnset(request.beginDate)) {
    query['begin_date'] = request.beginDate;
  }
  if (!Util.isUnset(request.breakfastIncluded)) {
    query['breakfast_included'] = request.breakfastIncluded;
  }
  if (!Util.isUnset(request.btripUserId)) {
    query['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.cityCode)) {
    query['city_code'] = request.cityCode;
  }
  if (!Util.isUnset(request.endDate)) {
    query['end_date'] = request.endDate;
  }
  if (!Util.isUnset(request.hotelId)) {
    query['hotel_id'] = request.hotelId;
  }
  if (!Util.isUnset(request.payOverType)) {
    query['pay_over_type'] = request.payOverType;
  }
  if (!Util.isUnset(request.paymentType)) {
    query['payment_type'] = request.paymentType;
  }
  if (!Util.isUnset(request.specialInvoice)) {
    query['special_invoice'] = request.specialInvoice;
  }
  if (!Util.isUnset(request.superMan)) {
    query['super_man'] = request.superMan;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelGoodsQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/hotel-goods`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hotelGoodsQuery(request: HotelGoodsQueryRequest): HotelGoodsQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelGoodsQueryHeaders{};
  return hotelGoodsQueryWithOptions(request, headers, runtime);
}

model HotelIndexInfoHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelIndexInfoRequest {
  cityCode?: string(name='city_code', example='330000'),
  hotelStatus?: int32(name='hotel_status', example='0'),
  pageSize?: int32(name='page_size', example='20'),
  pageToken?: string(name='page_token', example='1038882'),
}

model HotelIndexInfoResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='operation success.'),
  module?: {
    items?: [ 
      {
        hotelId?: string(name='hotel_id', example='182873'),
        hotelStatus?: string(name='hotel_status', example='0'),
      }
    ](name='items'),
    pageSize?: int32(name='page_size', example='20'),
    pageToken?: string(name='page_token', example='182873'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelIndexInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelIndexInfoResponseBody(name='body'),
}

async function hotelIndexInfoWithOptions(request: HotelIndexInfoRequest, headers: HotelIndexInfoHeaders, runtime: Util.RuntimeOptions): HotelIndexInfoResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.cityCode)) {
    query['city_code'] = request.cityCode;
  }
  if (!Util.isUnset(request.hotelStatus)) {
    query['hotel_status'] = request.hotelStatus;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.pageToken)) {
    query['page_token'] = request.pageToken;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelIndexInfo',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/index-infos`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hotelIndexInfo(request: HotelIndexInfoRequest): HotelIndexInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelIndexInfoHeaders{};
  return hotelIndexInfoWithOptions(request, headers, runtime);
}

model HotelOrderCancelHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelOrderCancelRequest {
  disOrderId?: string(name='dis_order_id', example='dis123'),
}

model HotelOrderCancelResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message', example='noPermission'),
  module?: {
    cancelSuccess?: boolean(name='cancel_success', example='true'),
    code?: string(name='code'),
    desc?: string(name='desc'),
    forfeitFee?: long(name='forfeit_fee', example='100'),
  }(name='module', description='module。'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelOrderCancelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelOrderCancelResponseBody(name='body'),
}

async function hotelOrderCancelWithOptions(request: HotelOrderCancelRequest, headers: HotelOrderCancelHeaders, runtime: Util.RuntimeOptions): HotelOrderCancelResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.disOrderId)) {
    query['dis_order_id'] = request.disOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelOrderCancel',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/orders/action/cancel`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hotelOrderCancel(request: HotelOrderCancelRequest): HotelOrderCancelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelOrderCancelHeaders{};
  return hotelOrderCancelWithOptions(request, headers, runtime);
}

model HotelOrderCreateHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelOrderCreateRequest {
  btripUserId?: string(name='btrip_user_id', example='123122'),
  checkIn?: string(name='check_in', example='2020-10-20'),
  checkOut?: string(name='check_out', example='2020-10-20'),
  contractEmail?: string(name='contract_email', example='demo'),
  contractName?: string(name='contract_name'),
  contractPhone?: string(name='contract_phone', example='19281772123'),
  corpPayPrice?: long(name='corp_pay_price', example='100'),
  disOrderId?: string(name='dis_order_id', example='dis123'),
  extra?: string(name='extra'),
  invoiceInfo?: {
    buyerAdd?: string(name='buyer_add', example='demo'),
    buyerBankAcc?: string(name='buyer_bank_acc', example='demo'),
    buyerBankAdd?: string(name='buyer_bank_add', example='demo'),
    buyerPhone?: string(name='buyer_phone', example='0571-82321777'),
    buyerTaxNum?: string(name='buyer_tax_num', example='1'),
    deliveryAddress?: string(name='delivery_address'),
    deliveryArea?: string(name='delivery_area'),
    deliveryCity?: string(name='delivery_city'),
    deliveryProvince?: string(name='delivery_province'),
    deliveryStreet?: string(name='delivery_street'),
    email?: string(name='email', example='demo'),
    invoiceMaterial?: int32(name='invoice_material', example='1'),
    invoiceTitle?: string(name='invoice_title', example='demo'),
    invoiceType?: int32(name='invoice_type', example='1'),
    receiverName?: string(name='receiver_name'),
    receiverPhone?: string(name='receiver_phone', example='0571-82321777'),
    remark?: string(name='remark', example='demo'),
  }(name='invoice_info'),
  itemId?: long(name='item_id', example='671570615157'),
  itineraryNo?: string(name='itinerary_no', example='fb5e1abf33924b6c912bd6d80deec0eb-1'),
  occupantInfoList?: [ 
    {
      cardNo?: string(name='card_no', example='124231213'),
      cardType?: int32(name='card_type', example='1'),
      customerType?: int32(name='customer_type', example='1'),
      departmentId?: string(name='department_id', example='123112'),
      departmentName?: string(name='department_name'),
      email?: string(name='email', example='demo'),
      employeeType?: int32(name='employee_type', example='1'),
      firstName?: string(name='first_name', example='san'),
      lastName?: string(name='last_name', example='zhang'),
      name?: string(name='name'),
      phone?: string(name='phone', example='18277123451'),
      roomNo?: int32(name='room_no'),
      staffNo?: string(name='staff_no', example='87817182'),
      userType?: int32(name='user_type', example='1'),
    }
  ](name='occupant_info_list'),
  personPayPrice?: long(name='person_pay_price', example='1000'),
  promotionInfo?: {
    promotionDetailInfoList?: [ 
      {
        checkStatus?: boolean(name='check_status', example='true'),
        needCheck?: boolean(name='need_check', example='true'),
        promotionCode?: string(name='promotion_code'),
        promotionId?: string(name='promotion_id', example='23778127'),
        promotionName?: string(name='promotion_name'),
        promotionPrice?: long(name='promotion_price', example='100'),
        promotionType?: string(name='promotion_type', example='1'),
      }
    ](name='promotion_detail_info_list'),
    promotionTotalPrice?: long(name='promotion_total_price', example='100'),
  }(name='promotion_info'),
  ratePlanId?: long(name='rate_plan_id', example='1399417428510'),
  roomId?: long(name='room_id', example='187211'),
  roomNum?: int32(name='room_num', example='1'),
  sellerId?: long(name='seller_id', example='2088441675613762'),
  shid?: long(name='shid', example='2198781'),
  totalOrderPrice?: long(name='total_order_price', example='100'),
  validateResKey?: string(name='validate_res_key', example='nonUltron_1673575241156_d91ea8ad16735752359161037bf6cf_c54d3768312a4b249b719f126377bf82'),
}

model HotelOrderCreateShrinkRequest {
  btripUserId?: string(name='btrip_user_id', example='123122'),
  checkIn?: string(name='check_in', example='2020-10-20'),
  checkOut?: string(name='check_out', example='2020-10-20'),
  contractEmail?: string(name='contract_email', example='demo'),
  contractName?: string(name='contract_name'),
  contractPhone?: string(name='contract_phone', example='19281772123'),
  corpPayPrice?: long(name='corp_pay_price', example='100'),
  disOrderId?: string(name='dis_order_id', example='dis123'),
  extra?: string(name='extra'),
  invoiceInfoShrink?: string(name='invoice_info'),
  itemId?: long(name='item_id', example='671570615157'),
  itineraryNo?: string(name='itinerary_no', example='fb5e1abf33924b6c912bd6d80deec0eb-1'),
  occupantInfoListShrink?: string(name='occupant_info_list'),
  personPayPrice?: long(name='person_pay_price', example='1000'),
  promotionInfoShrink?: string(name='promotion_info'),
  ratePlanId?: long(name='rate_plan_id', example='1399417428510'),
  roomId?: long(name='room_id', example='187211'),
  roomNum?: int32(name='room_num', example='1'),
  sellerId?: long(name='seller_id', example='2088441675613762'),
  shid?: long(name='shid', example='2198781'),
  totalOrderPrice?: long(name='total_order_price', example='100'),
  validateResKey?: string(name='validate_res_key', example='nonUltron_1673575241156_d91ea8ad16735752359161037bf6cf_c54d3768312a4b249b719f126377bf82'),
}

model HotelOrderCreateResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message', example='operation success.'),
  module?: {
    btripOrderId?: long(name='btrip_order_id', example='123'),
    totalPrice?: long(name='total_price', example='100'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelOrderCreateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelOrderCreateResponseBody(name='body'),
}

async function hotelOrderCreateWithOptions(tmpReq: HotelOrderCreateRequest, headers: HotelOrderCreateHeaders, runtime: Util.RuntimeOptions): HotelOrderCreateResponse {
  Util.validateModel(tmpReq);
  var request = new HotelOrderCreateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.invoiceInfo)) {
    request.invoiceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.invoiceInfo, 'invoice_info', 'json');
  }
  if (!Util.isUnset(tmpReq.occupantInfoList)) {
    request.occupantInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.occupantInfoList, 'occupant_info_list', 'json');
  }
  if (!Util.isUnset(tmpReq.promotionInfo)) {
    request.promotionInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.promotionInfo, 'promotion_info', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    body['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.checkIn)) {
    body['check_in'] = request.checkIn;
  }
  if (!Util.isUnset(request.checkOut)) {
    body['check_out'] = request.checkOut;
  }
  if (!Util.isUnset(request.contractEmail)) {
    body['contract_email'] = request.contractEmail;
  }
  if (!Util.isUnset(request.contractName)) {
    body['contract_name'] = request.contractName;
  }
  if (!Util.isUnset(request.contractPhone)) {
    body['contract_phone'] = request.contractPhone;
  }
  if (!Util.isUnset(request.corpPayPrice)) {
    body['corp_pay_price'] = request.corpPayPrice;
  }
  if (!Util.isUnset(request.disOrderId)) {
    body['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.extra)) {
    body['extra'] = request.extra;
  }
  if (!Util.isUnset(request.invoiceInfoShrink)) {
    body['invoice_info'] = request.invoiceInfoShrink;
  }
  if (!Util.isUnset(request.itemId)) {
    body['item_id'] = request.itemId;
  }
  if (!Util.isUnset(request.itineraryNo)) {
    body['itinerary_no'] = request.itineraryNo;
  }
  if (!Util.isUnset(request.occupantInfoListShrink)) {
    body['occupant_info_list'] = request.occupantInfoListShrink;
  }
  if (!Util.isUnset(request.personPayPrice)) {
    body['person_pay_price'] = request.personPayPrice;
  }
  if (!Util.isUnset(request.promotionInfoShrink)) {
    body['promotion_info'] = request.promotionInfoShrink;
  }
  if (!Util.isUnset(request.ratePlanId)) {
    body['rate_plan_id'] = request.ratePlanId;
  }
  if (!Util.isUnset(request.roomId)) {
    body['room_id'] = request.roomId;
  }
  if (!Util.isUnset(request.roomNum)) {
    body['room_num'] = request.roomNum;
  }
  if (!Util.isUnset(request.sellerId)) {
    body['seller_id'] = request.sellerId;
  }
  if (!Util.isUnset(request.shid)) {
    body['shid'] = request.shid;
  }
  if (!Util.isUnset(request.totalOrderPrice)) {
    body['total_order_price'] = request.totalOrderPrice;
  }
  if (!Util.isUnset(request.validateResKey)) {
    body['validate_res_key'] = request.validateResKey;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'HotelOrderCreate',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/orders/action/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hotelOrderCreate(request: HotelOrderCreateRequest): HotelOrderCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelOrderCreateHeaders{};
  return hotelOrderCreateWithOptions(request, headers, runtime);
}

model HotelOrderDetailInfoHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelOrderDetailInfoRequest {
  disOrderId?: string(name='dis_order_id', example='dis123'),
}

model HotelOrderDetailInfoResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message', example='succeed in handling request'),
  module?: {
    actualCheckInTime?: string(name='actual_check_in_time', example='2022-01-29'),
    actualCheckOutTime?: string(name='actual_check_out_time', example='2022-01-29'),
    btripHotelCancelPolicyDTO?: {
      btripHotelCancelPolicyInfoDTOList?: [ 
        {
          hour?: long(name='hour', example='1'),
          value?: long(name='value', example='1'),
        }
      ](name='btrip_hotel_cancel_policy_info_d_t_o_list'),
      cancelPolicyType?: int32(name='cancel_policy_type'),
    }(name='btrip_hotel_cancel_policy_d_t_o'),
    btripOrderId?: string(name='btrip_order_id', example='123'),
    cancelFine?: long(name='cancel_fine', example='100'),
    cancelInfo?: {
      cancelEndTime?: string(name='cancel_end_time', example='2022-01-29'),
      cancelStartTime?: string(name='cancel_start_time', example='2022-01-29'),
    }(name='cancel_info'),
    checkIn?: string(name='check_in', example='2022-05-15T22:27Z'),
    checkOut?: string(name='check_out', example='2022-05-15T22:27Z'),
    confirmOrderTime?: string(name='confirm_order_time', example='2000-00-00 00:00:00'),
    contractName?: string(name='contract_name'),
    contractTel?: string(name='contract_tel', example='12316261873'),
    createOrderTime?: string(name='create_order_time', example='2020-01-21'),
    earlyArrivalTime?: string(name='early_arrival_time', example='2000-00-00 00:00:00'),
    earlyDeparture?: boolean(name='early_departure', example='true'),
    guestCount?: int32(name='guest_count', example='2'),
    hotelDetailInfo?: {
      address?: string(name='address'),
      cityName?: string(name='city_name'),
      hotelName?: string(name='hotel_name'),
      hotelTel?: string(name='hotel_tel', example='0571-87217'),
      shid?: long(name='shid', example='2198781'),
    }(name='hotel_detail_info'),
    invoiceInfo?: {
      billingMoney?: long(name='billing_money', example='100'),
      buyerAdd?: string(name='buyer_add', example='demo'),
      buyerBankAcc?: string(name='buyer_bank_acc', example='demo'),
      buyerBankAdd?: string(name='buyer_bank_add', example='demo'),
      buyerPhone?: string(name='buyer_phone', example='0571-82321777'),
      buyerTaxNum?: string(name='buyer_tax_num', example='1'),
      deliveryAddress?: string(name='delivery_address'),
      deliveryArea?: string(name='delivery_area'),
      deliveryCity?: string(name='delivery_city'),
      deliveryProvince?: string(name='delivery_province'),
      deliveryStreet?: string(name='delivery_street'),
      email?: string(name='email', example='demo'),
      invoiceMaterial?: int32(name='invoice_material', example='1'),
      invoiceTitle?: string(name='invoice_title', example='demo'),
      invoiceType?: int32(name='invoice_type', example='1'),
      postage?: long(name='postage', example='100'),
      receiverName?: string(name='receiver_name'),
      receiverPhone?: string(name='receiver_phone', example='0571-82321777'),
      remark?: string(name='remark', example='tmf closeCloneTask'),
    }(name='invoice_info'),
    itemId?: string(name='item_id', example='1289918'),
    lastArrivalTime?: string(name='last_arrival_time', example='2000-00-00 00:00:00'),
    occupantInfoList?: [ 
      {
        cardNo?: string(name='card_no', example='1235615612424222'),
        cardType?: int32(name='card_type', example='1'),
        costCenterInfoList?: [ 
          {
            costCenterId?: string(name='cost_center_id', example='demo'),
            costCenterName?: string(name='cost_center_name', example='demo'),
            costCenterNo?: string(name='cost_center_no', example='demo'),
            costCenterPrices?: long(name='cost_center_prices', example='demo'),
            costCenterRatios?: long(name='cost_center_ratios', example='demo'),
            costCenterSubjectCode?: string(name='cost_center_subject_code', example='demo'),
            costCenterSubjectName?: string(name='cost_center_subject_name', example='demo'),
            settleSubjectId?: string(name='settle_subject_id', example='demo'),
            settleSubjectName?: string(name='settle_subject_name', example='demo'),
            settleSubjectNo?: string(name='settle_subject_no', example='demo'),
          }
        ](name='cost_center_info_list'),
        customerType?: int32(name='customer_type', example='1'),
        departmentId?: string(name='department_id', example='123112'),
        departmentName?: string(name='department_name', example='demo'),
        email?: string(name='email', example='demo'),
        employeeType?: int32(name='employee_type', example='1'),
        firstName?: string(name='first_name', example='zhangsan'),
        isBooker?: boolean(name='is_booker', example='true'),
        lastName?: string(name='last_name', example='zhang'),
        name?: string(name='name'),
        phone?: string(name='phone', example='0571-872237'),
        roomNo?: int32(name='room_no'),
        selected?: boolean(name='selected', example='true'),
        staffNo?: string(name='staff_no', example='12817218'),
        userType?: int32(name='user_type', example='1'),
      }
    ](name='occupant_info_list'),
    orderStatus?: int32(name='order_status', example='1'),
    orderStatusDesc?: string(name='order_status_desc'),
    payTime?: string(name='pay_time', example='2000-00-00 00:00:00'),
    productType?: int32(name='product_type', example='1'),
    purchaseOrderId?: string(name='purchase_order_id', example='100328718728171'),
    refundPrice?: long(name='refund_price', example='100'),
    refundReason?: string(name='refund_reason', example='demo'),
    refundServiceFee?: long(name='refund_service_fee', example='100'),
    roomNightPriceInfoList?: [ 
      {
        board?: string(name='board'),
        boardNum?: int32(name='board_num', example='2'),
        checkIn?: string(name='check_in', example='1677600000000'),
        ratePlanId?: string(name='rate_plan_id', example='1399417428510'),
        ratePlanName?: string(name='rate_plan_name'),
        roomId?: string(name='room_id', example='545993154510'),
        roomName?: string(name='room_name'),
        roomPrice?: long(name='room_price', example='50000'),
      }
    ](name='room_night_price_info_list'),
    roomNumber?: int32(name='room_number', example='1'),
    roomTypeName?: string(name='room_type_name'),
    sellerId?: string(name='seller_id', example='2088441675613762'),
    sellerName?: string(name='seller_name', example='taobao'),
    serviceFee?: long(name='service_fee', example='1.02'),
    settleType?: string(name='settle_type', example='0'),
    supplierOrderId?: string(name='supplier_order_id', example='dis123'),
    totalPrice?: long(name='total_price', example='100'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelOrderDetailInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelOrderDetailInfoResponseBody(name='body'),
}

async function hotelOrderDetailInfoWithOptions(request: HotelOrderDetailInfoRequest, headers: HotelOrderDetailInfoHeaders, runtime: Util.RuntimeOptions): HotelOrderDetailInfoResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.disOrderId)) {
    query['dis_order_id'] = request.disOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelOrderDetailInfo',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/orders/action/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hotelOrderDetailInfo(request: HotelOrderDetailInfoRequest): HotelOrderDetailInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelOrderDetailInfoHeaders{};
  return hotelOrderDetailInfoWithOptions(request, headers, runtime);
}

model HotelOrderListQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model HotelOrderListQueryRequest {
  allApply?: boolean(name='all_apply', example='false'),
  applyId?: long(name='apply_id', example='165782'),
  departId?: string(name='depart_id'),
  endTime?: string(name='end_time', example='2022-07-01 00:00:00'),
  page?: int32(name='page', example='1'),
  pageSize?: int32(name='page_size', example='50'),
  startTime?: string(name='start_time', example='2022-07-01 00:00:00'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', example='CS154JKOI'),
  updateEndTime?: string(name='update_end_time', example='2022-07-01 00:00:00'),
  updateStartTime?: string(name='update_start_time', example='2022-07-01 00:00:00'),
  userId?: string(name='user_id'),
}

model HotelOrderListQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: [ 
    {
      applyId?: long(name='apply_id', example='22678'),
      btripTitle?: string(name='btrip_title'),
      checkIn?: string(name='check_in', example='2022-05-15T22:27Z'),
      checkOut?: string(name='check_out', example='2022-05-15T22:27Z'),
      city?: string(name='city'),
      contactName?: string(name='contact_name'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      costCenter?: {
        corpId?: string(name='corp_id'),
        id?: long(name='id', example='14668'),
        name?: string(name='name'),
        number?: string(name='number', example='CS-PNUY'),
      }(name='cost_center'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      extendField?: string(name='extend_field'),
      gmtCreate?: string(name='gmt_create', example='2022-05-15T22:27Z'),
      gmtModified?: string(name='gmt_modified', example='2022-05-15T22:27Z'),
      guest?: string(name='guest'),
      hotelName?: string(name='hotel_name'),
      hotelSupportVatInvoiceType?: int32(name='hotel_support_vat_invoice_type', example='11'),
      id?: long(name='id', example='13764'),
      invoice?: {
        id?: long(name='id', example='133568'),
        invoiceType?: int32(name='invoice_type', example='1'),
        title?: string(name='title'),
      }(name='invoice'),
      night?: int32(name='night', example='4'),
      orderStatus?: int32(name='order_status', example='1'),
      orderStatusDesc?: string(name='order_status_desc'),
      orderType?: int32(name='order_type', example='1'),
      orderTypeDesc?: string(name='order_type_desc'),
      priceInfoList?: [ 
        {
          categoryCode?: int32(name='category_code', example='1'),
          categoryType?: int32(name='category_type', example='1'),
          gmtCreate?: string(name='gmt_create', example='2022-05-15T22:27Z'),
          passengerName?: string(name='passenger_name'),
          payType?: int32(name='pay_type', example='1'),
          price?: double(name='price', example='100'),
          tradeId?: string(name='trade_id', example='cs1546728'),
          type?: int32(name='type', example='1'),
        }
      ](name='price_info_list'),
      projectCode?: string(name='project_code', example='CS-PROJECTCODE'),
      projectId?: long(name='project_id', example='13631'),
      projectTitle?: string(name='project_title'),
      roomNum?: int32(name='room_num', example='4'),
      roomType?: string(name='room_type'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', example='CS-THIRDAPPLY'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', example='CS-ITINEARY'),
      thirdpartProjectId?: string(name='thirdpart_project_id', example='CS-THIRDPROJECT'),
      userAffiliateList?: [ 
        {
          userId?: string(name='user_id'),
          userName?: string(name='user_name'),
        }
      ](name='user_affiliate_list'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='module'),
  pageInfo?: {
    page?: int32(name='page', example='1'),
    pageSize?: int32(name='page_size', example='20'),
    totalNumber?: int32(name='total_number', example='50'),
  }(name='page_info'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelOrderListQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelOrderListQueryResponseBody(name='body'),
}

async function hotelOrderListQueryWithOptions(request: HotelOrderListQueryRequest, headers: HotelOrderListQueryHeaders, runtime: Util.RuntimeOptions): HotelOrderListQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.allApply)) {
    query['all_apply'] = request.allApply;
  }
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.departId)) {
    query['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['end_time'] = request.endTime;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['start_time'] = request.startTime;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    query['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.updateEndTime)) {
    query['update_end_time'] = request.updateEndTime;
  }
  if (!Util.isUnset(request.updateStartTime)) {
    query['update_start_time'] = request.updateStartTime;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelOrderListQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/hotel/v1/order-list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hotelOrderListQuery(request: HotelOrderListQueryRequest): HotelOrderListQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelOrderListQueryHeaders{};
  return hotelOrderListQueryWithOptions(request, headers, runtime);
}

model HotelOrderPayHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelOrderPayRequest {
  btripOrderId?: long(name='btrip_order_id', description='供应商订单号（取自创单返回的订单号）', example='1002202194207077022'),
  btripUserId?: string(name='btrip_user_id', example='23918781'),
  companyPayFee?: long(name='company_pay_fee', example='100'),
  personPayFee?: long(name='person_pay_fee', example='100'),
  thirdPayAccount?: string(name='third_pay_account', example='demo'),
  thirdTradeNo?: string(name='third_trade_no', example='demo'),
  totalPrice?: long(name='total_price', example='100'),
}

model HotelOrderPayResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message', example='successful'),
  module?: boolean(name='module', example='true'),
  requestId?: string(name='requestId', description='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210e842b16611337974412836dae27'),
}

model HotelOrderPayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelOrderPayResponseBody(name='body'),
}

async function hotelOrderPayWithOptions(request: HotelOrderPayRequest, headers: HotelOrderPayHeaders, runtime: Util.RuntimeOptions): HotelOrderPayResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.btripOrderId)) {
    body['btrip_order_id'] = request.btripOrderId;
  }
  if (!Util.isUnset(request.btripUserId)) {
    body['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.companyPayFee)) {
    body['company_pay_fee'] = request.companyPayFee;
  }
  if (!Util.isUnset(request.personPayFee)) {
    body['person_pay_fee'] = request.personPayFee;
  }
  if (!Util.isUnset(request.thirdPayAccount)) {
    body['third_pay_account'] = request.thirdPayAccount;
  }
  if (!Util.isUnset(request.thirdTradeNo)) {
    body['third_trade_no'] = request.thirdTradeNo;
  }
  if (!Util.isUnset(request.totalPrice)) {
    body['total_price'] = request.totalPrice;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'HotelOrderPay',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/orders/action/pay`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hotelOrderPay(request: HotelOrderPayRequest): HotelOrderPayResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelOrderPayHeaders{};
  return hotelOrderPayWithOptions(request, headers, runtime);
}

model HotelOrderPreValidateHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelOrderPreValidateRequest {
  btripUserId?: string(name='btrip_user_id', example='23141'),
  checkIn?: string(name='check_in', example='2022-05-15'),
  checkOut?: string(name='check_out', example='2022-05-15'),
  dailyList?: [ 
    {
      board?: string(name='board', example='1'),
      price?: long(name='price', example='100'),
      rateStartTime?: string(name='rate_start_time', example='2022-05-15'),
      roomCount?: int32(name='room_count', example='10'),
    }
  ](name='daily_list'),
  itemId?: long(name='item_id', example='612673015638'),
  numberOfAdultsPerRoom?: int32(name='number_of_adults_per_room', example='1'),
  occupantInfoList?: [ 
    {
      cardNo?: string(name='card_no', example='232871871822'),
      cardType?: int32(name='card_type', example='1'),
      name?: string(name='name'),
      phone?: string(name='phone', example='12392827121'),
      staffNo?: string(name='staff_no', example='128918'),
      userType?: int32(name='user_type', example='1'),
    }
  ](name='occupant_info_list'),
  ratePlanId?: long(name='rate_plan_id', example='239872781'),
  roomId?: long(name='room_id', example='71652158'),
  roomNum?: int32(name='room_num', example='1'),
  searchRoomPrice?: long(name='search_room_price', example='1000'),
  sellerId?: long(name='seller_id', example='2088441675613762'),
  shid?: long(name='shid', example='52302073'),
}

model HotelOrderPreValidateShrinkRequest {
  btripUserId?: string(name='btrip_user_id', example='23141'),
  checkIn?: string(name='check_in', example='2022-05-15'),
  checkOut?: string(name='check_out', example='2022-05-15'),
  dailyListShrink?: string(name='daily_list'),
  itemId?: long(name='item_id', example='612673015638'),
  numberOfAdultsPerRoom?: int32(name='number_of_adults_per_room', example='1'),
  occupantInfoListShrink?: string(name='occupant_info_list'),
  ratePlanId?: long(name='rate_plan_id', example='239872781'),
  roomId?: long(name='room_id', example='71652158'),
  roomNum?: int32(name='room_num', example='1'),
  searchRoomPrice?: long(name='search_room_price', example='1000'),
  sellerId?: long(name='seller_id', example='2088441675613762'),
  shid?: long(name='shid', example='52302073'),
}

model HotelOrderPreValidateResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    extendInfo?: string(name='extend_info', example='demo'),
    itineraryNo?: string(name='itinerary_no', example='fb5e1abf33924b6c912bd6d80deec0eb-4'),
    promotionInfo?: {
      extAttrMap?: map[string]string(name='ext_attr_map'),
      promotionDetailInfoList?: [ 
        {
          checkStatus?: boolean(name='check_status', example='true'),
          needCheck?: boolean(name='need_check', example='true'),
          promotionCode?: string(name='promotion_code'),
          promotionId?: string(name='promotion_id', example='12893'),
          promotionName?: string(name='promotion_name', example='demo'),
          promotionPrice?: long(name='promotion_price', example='100'),
          promotionType?: string(name='promotion_type', example='1'),
        }
      ](name='promotion_detail_info_list'),
      promotionTotalPrice?: long(name='promotion_total_price', example='100'),
    }(name='promotion_info'),
    ratePlanDaily?: [ 
      {
        board?: string(name='board'),
        discountPrice?: string(name='discount_price'),
        maxBookingNum?: int32(name='max_booking_num'),
        price?: long(name='price', example='100'),
        rateStartTime?: string(name='rate_start_time', example='2023-01-19'),
        roomCount?: int32(name='room_count', example='1'),
        roundingDiscountPrice?: string(name='rounding_discount_price'),
        roundingPrice?: string(name='rounding_price'),
        serviceFee?: long(name='service_fee', example='100'),
      }
    ](name='rate_plan_daily'),
    ratePlanId?: long(name='rate_plan_id', example='5314280514218'),
    ratePlanInfo?: {
      bedDesc?: string(name='bed_desc'),
      btripHotelCancelPolicyDTO?: {
        btripHotelCancelPolicyInfoDTOList?: [ 
          {
            hour?: long(name='hour', example='1'),
            value?: long(name='value', example='1'),
          }
        ](name='btrip_hotel_cancel_policy_info_d_t_o_list'),
        cancelPolicyType?: int32(name='cancel_policy_type'),
      }(name='btrip_hotel_cancel_policy_d_t_o'),
      earliestCheckInTime?: string(name='earliest_check_in_time', example='12:00'),
      latestCheckOutTime?: string(name='latest_check_out_time', example='17:00'),
      maxBookingNum?: int32(name='max_booking_num'),
      maxOccupancyNum?: int32(name='max_occupancy_num', example='1'),
      needCertificate?: boolean(name='need_certificate', example='false'),
      needEmail?: boolean(name='need_email', example='false'),
      needEnglishName?: boolean(name='need_english_name', example='false'),
      totalOrderPrice?: long(name='total_order_price', example='100'),
      totalRoomPrice?: long(name='total_room_price', example='100'),
    }(name='rate_plan_info'),
    validateResKey?: string(name='validate_res_key', example='nonUltron_1673575241156_d91ea8ad16735752359161037bf6cf_c54d3768312a4b249b719f126377bf82'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelOrderPreValidateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelOrderPreValidateResponseBody(name='body'),
}

async function hotelOrderPreValidateWithOptions(tmpReq: HotelOrderPreValidateRequest, headers: HotelOrderPreValidateHeaders, runtime: Util.RuntimeOptions): HotelOrderPreValidateResponse {
  Util.validateModel(tmpReq);
  var request = new HotelOrderPreValidateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dailyList)) {
    request.dailyListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dailyList, 'daily_list', 'json');
  }
  if (!Util.isUnset(tmpReq.occupantInfoList)) {
    request.occupantInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.occupantInfoList, 'occupant_info_list', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.btripUserId)) {
    query['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.checkIn)) {
    query['check_in'] = request.checkIn;
  }
  if (!Util.isUnset(request.checkOut)) {
    query['check_out'] = request.checkOut;
  }
  if (!Util.isUnset(request.dailyListShrink)) {
    query['daily_list'] = request.dailyListShrink;
  }
  if (!Util.isUnset(request.itemId)) {
    query['item_id'] = request.itemId;
  }
  if (!Util.isUnset(request.numberOfAdultsPerRoom)) {
    query['number_of_adults_per_room'] = request.numberOfAdultsPerRoom;
  }
  if (!Util.isUnset(request.occupantInfoListShrink)) {
    query['occupant_info_list'] = request.occupantInfoListShrink;
  }
  if (!Util.isUnset(request.ratePlanId)) {
    query['rate_plan_id'] = request.ratePlanId;
  }
  if (!Util.isUnset(request.roomId)) {
    query['room_id'] = request.roomId;
  }
  if (!Util.isUnset(request.roomNum)) {
    query['room_num'] = request.roomNum;
  }
  if (!Util.isUnset(request.searchRoomPrice)) {
    query['search_room_price'] = request.searchRoomPrice;
  }
  if (!Util.isUnset(request.sellerId)) {
    query['seller_id'] = request.sellerId;
  }
  if (!Util.isUnset(request.shid)) {
    query['shid'] = request.shid;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelOrderPreValidate',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/orders/action/pre-validate`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hotelOrderPreValidate(request: HotelOrderPreValidateRequest): HotelOrderPreValidateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelOrderPreValidateHeaders{};
  return hotelOrderPreValidateWithOptions(request, headers, runtime);
}

model HotelOrderQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model HotelOrderQueryRequest {
  orderId?: long(name='order_id', example='1002145190081005400'),
}

model HotelOrderQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    hotelInfo?: {
      checkIn?: long(name='check_in', example='1669344020'),
      checkOut?: long(name='check_out', example='1669344020'),
      city?: string(name='city'),
      hotelName?: string(name='hotel_name'),
      hotelSupportVatInvoiceType?: int32(name='hotel_support_vat_invoice_type', example='11'),
      night?: int32(name='night', example='1'),
      roomNum?: int32(name='room_num', example='1'),
      roomType?: string(name='room_type'),
    }(name='hotel_info'),
    invoiceInfo?: {
      id?: long(name='id', example='12345678'),
      title?: string(name='title'),
    }(name='invoice_info'),
    orderBaseInfo?: {
      applyId?: string(name='apply_id', example='12345678'),
      btripTitle?: string(name='btrip_title'),
      corpId?: string(name='corp_id', example='iscorpId'),
      corpName?: string(name='corp_name'),
      departId?: string(name='depart_id', example='12345678'),
      departName?: string(name='depart_name'),
      extendField?: string(name='extend_field'),
      gmtCreate?: long(name='gmt_create', example='1669344020'),
      gmtModified?: long(name='gmt_modified', example='1669344020'),
      id?: long(name='id', example='1002145190081005400'),
      itineraryId?: string(name='itinerary_id', example='12345678'),
      orderStatus?: int32(name='order_status', example='1'),
      orderType?: int32(name='order_type', example='1'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', example='12345678'),
      thirdpartDepartId?: string(name='thirdpart_depart_id', example='12345678'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', example='12345678'),
      userId?: string(name='user_id', example='12345678'),
      userName?: string(name='user_name'),
    }(name='order_base_info'),
    passengerList?: [ 
      {
        costCenterId?: long(name='cost_center_id', example='12345678'),
        costCenterName?: string(name='cost_center_name'),
        costCenterNumber?: string(name='cost_center_number', example='12345678'),
        projectCode?: string(name='project_code'),
        projectId?: long(name='project_id', example='12345678'),
        projectTitle?: string(name='project_title'),
        thirdpartCostCenterId?: string(name='thirdpart_cost_center_id', example='12345678'),
        thirdpartProjectId?: string(name='thirdpart_project_id', example='12345678'),
        userId?: string(name='user_id', example='12345678'),
        userName?: string(name='user_name'),
        userType?: int32(name='user_type', example='0'),
      }
    ](name='passenger_list'),
    priceInfoList?: [ 
      {
        categoryCode?: int32(name='category_code', example='1'),
        gmtCreate?: long(name='gmt_create', example='1669344020'),
        payType?: int32(name='pay_type', example='1'),
        price?: double(name='price', example='200'),
        tradeId?: string(name='trade_id', example='12345678910987654321'),
        type?: int32(name='type', example='1'),
      }
    ](name='price_info_list'),
  }(name='module', description='module。'),
  requestId?: string(name='requestId', description='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelOrderQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelOrderQueryResponseBody(name='body'),
}

async function hotelOrderQueryWithOptions(request: HotelOrderQueryRequest, headers: HotelOrderQueryHeaders, runtime: Util.RuntimeOptions): HotelOrderQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelOrderQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/hotel/v1/order`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hotelOrderQuery(request: HotelOrderQueryRequest): HotelOrderQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelOrderQueryHeaders{};
  return hotelOrderQueryWithOptions(request, headers, runtime);
}

model HotelRoomInfoHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelRoomInfoRequest {
  roomIds?: [ long ](name='room_ids'),
}

model HotelRoomInfoShrinkRequest {
  roomIdsShrink?: string(name='room_ids'),
}

model HotelRoomInfoResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message', example='operation success.'),
  module?: [ 
    {
      bedInfos?: [ 
        {
          bedDesc?: string(name='bed_desc'),
          bedNum?: int32(name='bed_num', example='2'),
          bedSize?: string(name='bed_size', example='1.8*2.0m'),
          bedType?: string(name='bed_type', example='1'),
        }
      ](name='bed_infos'),
      extraBed?: int32(name='extra_bed', example='1'),
      extraBedDesc?: string(name='extra_bed_desc', example='demo'),
      floor?: string(name='floor', example='2'),
      internetWay?: string(name='internet_way', example='0'),
      maxOccupancy?: int32(name='max_occupancy', example='3'),
      roomDesc?: string(name='room_desc'),
      roomFacilities?: string(name='room_facilities'),
      roomFacilityList?: [ string ](name='room_facility_list'),
      roomId?: string(name='room_id', example='84536009'),
      roomImage?: string(name='room_image', example='//img.alicdn.com/imgextra/i2/6000000007493/O1CN010Vmxaz25DqUblX82A_!!6000000007493-2-hotel.png'),
      roomImages?: [ 
        {
          bedInfos2?: string(name='bed_infos2'),
          tag?: int32(name='tag'),
          url?: string(name='url', example='https://img.alicdn.com/imgextra/i3/6000000000003/O1CN01xkZQR41BtPxK1PQCb_!!6000000000003-0-hotel.jpg'),
        }
      ](name='room_images'),
      roomName?: string(name='room_name'),
      roomType?: int32(name='room_type'),
      roomarea?: string(name='roomarea'),
      rooms?: int32(name='rooms', example='3'),
      window?: string(name='window', example='2'),
      windowBad?: string(name='window_bad', example='0'),
      windowView?: string(name='window_view', example='demo'),
    }
  ](name='module'),
  requestId?: string(name='requestId', description='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelRoomInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelRoomInfoResponseBody(name='body'),
}

async function hotelRoomInfoWithOptions(tmpReq: HotelRoomInfoRequest, headers: HotelRoomInfoHeaders, runtime: Util.RuntimeOptions): HotelRoomInfoResponse {
  Util.validateModel(tmpReq);
  var request = new HotelRoomInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.roomIds)) {
    request.roomIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roomIds, 'room_ids', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.roomIdsShrink)) {
    query['room_ids'] = request.roomIdsShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelRoomInfo',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/room-infos`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hotelRoomInfo(request: HotelRoomInfoRequest): HotelRoomInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelRoomInfoHeaders{};
  return hotelRoomInfoWithOptions(request, headers, runtime);
}

model HotelSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelSearchRequest {
  adultNum?: string(name='adult_num', example='1'),
  brandCode?: [ string ](name='brand_code'),
  btripUserId?: string(name='btrip_user_id', example='1000'),
  checkInDate?: string(name='check_in_date', example='2023-02-22'),
  checkOutDate?: string(name='check_out_date', example='2023-02-22'),
  cityCode?: string(name='city_code', example='330100'),
  dir?: int32(name='dir', example='1'),
  distance?: int32(name='distance', example='100'),
  districtCode?: string(name='district_code', example='330000'),
  hotelStar?: string(name='hotel_star', example='0'),
  isProtocol?: boolean(name='is_protocol', example='true'),
  keyWords?: string(name='key_words'),
  location?: string(name='location', example='120.010059, 30.284666'),
  maxPrice?: double(name='max_price', example='1000'),
  minPrice?: double(name='min_price', example='100'),
  pageNo?: int32(name='page_no', example='1'),
  pageSize?: int32(name='page_size', example='20'),
  payOverType?: int32(name='pay_over_type', example='1'),
  paymentType?: int32(name='payment_type', example='0'),
  shids?: [ long ](name='shids'),
  sortCode?: int32(name='sort_code', example='0'),
  superMan?: int32(name='super_man', example='0'),
}

model HotelSearchShrinkRequest {
  adultNum?: string(name='adult_num', example='1'),
  brandCodeShrink?: string(name='brand_code'),
  btripUserId?: string(name='btrip_user_id', example='1000'),
  checkInDate?: string(name='check_in_date', example='2023-02-22'),
  checkOutDate?: string(name='check_out_date', example='2023-02-22'),
  cityCode?: string(name='city_code', example='330100'),
  dir?: int32(name='dir', example='1'),
  distance?: int32(name='distance', example='100'),
  districtCode?: string(name='district_code', example='330000'),
  hotelStar?: string(name='hotel_star', example='0'),
  isProtocol?: boolean(name='is_protocol', example='true'),
  keyWords?: string(name='key_words'),
  location?: string(name='location', example='120.010059, 30.284666'),
  maxPrice?: double(name='max_price', example='1000'),
  minPrice?: double(name='min_price', example='100'),
  pageNo?: int32(name='page_no', example='1'),
  pageSize?: int32(name='page_size', example='20'),
  payOverType?: int32(name='pay_over_type', example='1'),
  paymentType?: int32(name='payment_type', example='0'),
  shidsShrink?: string(name='shids'),
  sortCode?: int32(name='sort_code', example='0'),
  superMan?: int32(name='super_man', example='0'),
}

model HotelSearchResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message', example='None'),
  module?: {
    items?: [ 
      {
        brandName?: string(name='brand_name'),
        btandCode?: string(name='btand_code', example='1902'),
        cityCode?: string(name='city_code', example='330100'),
        distance?: int32(name='distance', example='100'),
        districtCode?: string(name='district_code', example='330100'),
        hotelAddress?: string(name='hotel_address'),
        hotelCode?: string(name='hotel_code', example='55335212'),
        hotelEnName?: string(name='hotel_en_name', example='Business travel hotel'),
        hotelName?: string(name='hotel_name'),
        hotelStar?: string(name='hotel_star', example='3'),
        imageUrl?: string(name='image_url', example='https://img.alicdn.com/imgextra/i3/6000000000003/O1CN01xkZQR41BtPxK1PQCb_!!6000000000003-0-hotel.jpg'),
        isProtocol?: boolean(name='is_protocol', example='true'),
        location?: string(name='location', example='119.844005,30.054384'),
        minPrice?: double(name='min_price', example='100'),
        originalMinPrice?: double(name='original_min_price'),
        score?: string(name='score', example='3.2'),
        status?: int32(name='status', example='0'),
        tel?: string(name='tel', example='0571-88886784-8888'),
      }
    ](name='items'),
  }(name='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelSearchResponseBody(name='body'),
}

async function hotelSearchWithOptions(tmpReq: HotelSearchRequest, headers: HotelSearchHeaders, runtime: Util.RuntimeOptions): HotelSearchResponse {
  Util.validateModel(tmpReq);
  var request = new HotelSearchShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.brandCode)) {
    request.brandCodeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.brandCode, 'brand_code', 'json');
  }
  if (!Util.isUnset(tmpReq.shids)) {
    request.shidsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shids, 'shids', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.adultNum)) {
    query['adult_num'] = request.adultNum;
  }
  if (!Util.isUnset(request.brandCodeShrink)) {
    query['brand_code'] = request.brandCodeShrink;
  }
  if (!Util.isUnset(request.btripUserId)) {
    query['btrip_user_id'] = request.btripUserId;
  }
  if (!Util.isUnset(request.checkInDate)) {
    query['check_in_date'] = request.checkInDate;
  }
  if (!Util.isUnset(request.checkOutDate)) {
    query['check_out_date'] = request.checkOutDate;
  }
  if (!Util.isUnset(request.cityCode)) {
    query['city_code'] = request.cityCode;
  }
  if (!Util.isUnset(request.dir)) {
    query['dir'] = request.dir;
  }
  if (!Util.isUnset(request.distance)) {
    query['distance'] = request.distance;
  }
  if (!Util.isUnset(request.districtCode)) {
    query['district_code'] = request.districtCode;
  }
  if (!Util.isUnset(request.hotelStar)) {
    query['hotel_star'] = request.hotelStar;
  }
  if (!Util.isUnset(request.isProtocol)) {
    query['is_protocol'] = request.isProtocol;
  }
  if (!Util.isUnset(request.keyWords)) {
    query['key_words'] = request.keyWords;
  }
  if (!Util.isUnset(request.location)) {
    query['location'] = request.location;
  }
  if (!Util.isUnset(request.maxPrice)) {
    query['max_price'] = request.maxPrice;
  }
  if (!Util.isUnset(request.minPrice)) {
    query['min_price'] = request.minPrice;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.payOverType)) {
    query['pay_over_type'] = request.payOverType;
  }
  if (!Util.isUnset(request.paymentType)) {
    query['payment_type'] = request.paymentType;
  }
  if (!Util.isUnset(request.shidsShrink)) {
    query['shids'] = request.shidsShrink;
  }
  if (!Util.isUnset(request.sortCode)) {
    query['sort_code'] = request.sortCode;
  }
  if (!Util.isUnset(request.superMan)) {
    query['super_man'] = request.superMan;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/hotels/action/search`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hotelSearch(request: HotelSearchRequest): HotelSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelSearchHeaders{};
  return hotelSearchWithOptions(request, headers, runtime);
}

model HotelStaticInfoHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model HotelStaticInfoRequest {
  hotelIds?: [ string ](name='hotel_ids'),
}

model HotelStaticInfoShrinkRequest {
  hotelIdsShrink?: string(name='hotel_ids'),
}

model HotelStaticInfoResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='operation success.'),
  module?: {
    hotelStaticInfos?: [ 
      {
        blockRoomTypeInformation?: map[string]string(name='block_room_type_information'),
        brand?: string(name='brand', example='19039'),
        brandName?: string(name='brand_name'),
        cityCode?: string(name='city_code', example='330100'),
        cityName?: string(name='city_name'),
        country?: string(name='country', example='CN'),
        countryCode?: string(name='country_code', example='CN'),
        description?: string(name='description'),
        district?: string(name='district', example='330183'),
        districtName?: string(name='district_name'),
        expandInfo?: {
          checkIn?: string(name='check_in', example='17:00'),
          checkOut?: string(name='check_out', example='12:00'),
          decorateTime?: string(name='decorate_time', example='2020'),
          floors?: string(name='floors'),
          hotelFacilities?: [ string ](name='hotel_facilities'),
          hotelType?: int32(name='hotel_type', example='0'),
          openingTime?: string(name='opening_time', example='2020'),
          roomFacilities?: [ string ](name='room_facilities'),
          rooms?: int32(name='rooms', example='1'),
          service?: [ string ](name='service'),
          themeTag?: string(name='theme_tag', example='1'),
        }(name='expand_info'),
        hotelAddress?: string(name='hotel_address'),
        hotelEnAddress?: string(name='hotel_en_address', example='Building 5, Haichuang Building, 998 Wenyi West Road'),
        hotelEnName?: string(name='hotel_en_name', example='Business travel hotel'),
        hotelId?: string(name='hotel_id', example='55335212'),
        hotelName?: string(name='hotel_name'),
        hotelOpenTime?: string(name='hotel_open_time', example='2020'),
        hotelPhones?: string(name='hotel_phones', example='0086#0571#28350117'),
        hotelPolicies?: string(name='hotel_policies', example='demo'),
        hotelfax?: string(name='hotelfax', example='0086#0571#28350117'),
        hotelpics?: string(name='hotelpics'),
        imageinfos?: [ 
          {
            desc?: string(name='desc'),
            tag?: int32(name='tag'),
            url?: string(name='url', example='https://img.alicdn.com/imgextra/i3/6000000000003/O1CN01xkZQR41BtPxK1PQCb_!!6000000000003-0-hotel.jpg'),
          }
        ](name='imageinfos'),
        invoiceProviderMethod?: string(name='invoice_provider_method', example='1'),
        invoiceTypes?: [ int32 ](name='invoice_types'),
        location?: string(name='location', example='119.844005,30.054384'),
        province?: string(name='province', example='330000'),
        provinceName?: string(name='province_name'),
        ratingAverage?: string(name='rating_average', example='2'),
        roomInfos?: [ 
          {
            bedInfos?: [ 
              {
                bedDesc?: string(name='bed_desc'),
                bedNum?: int32(name='bed_num', example='1'),
                bedSize?: string(name='bed_size', example='1.8m'),
                bedType?: string(name='bed_type', example='0'),
              }
            ](name='bed_infos'),
            extraBed?: int32(name='extra_bed', example='1'),
            extraBedDesc?: string(name='extra_bed_desc', example='demo'),
            floor?: string(name='floor', example='1,2,3,4,5,6'),
            internetWay?: string(name='internet_way', example='0'),
            maxOccupancy?: int32(name='max_occupancy', example='1'),
            roomFacilities?: string(name='room_facilities'),
            roomFacilityList?: [ string ](name='room_facility_list'),
            roomId?: string(name='room_id', example='71652158'),
            roomImage?: string(name='room_image', example='//img.alicdn.com/imgextra/i3/6000000000003/O1CN01xkZQR41BtPxK1PQCb_!!6000000000003-0-hotel.jpg'),
            roomImages?: [ string ](name='room_images'),
            roomName?: string(name='room_name'),
            roomType?: int32(name='room_type'),
            roomarea?: string(name='roomarea'),
            rooms?: int32(name='rooms', example='1'),
            window?: string(name='window', example='0'),
            windowBad?: string(name='window_bad'),
            windowView?: string(name='window_view'),
          }
        ](name='room_infos'),
        star?: string(name='star', example='0'),
        starRate?: string(name='star_rate', example='2'),
        status?: string(name='status', example='1'),
        themes?: string(name='themes', example='demo'),
        visaReminding?: boolean(name='visa_reminding', example='demo'),
      }
    ](name='hotel_static_infos'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model HotelStaticInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelStaticInfoResponseBody(name='body'),
}

async function hotelStaticInfoWithOptions(tmpReq: HotelStaticInfoRequest, headers: HotelStaticInfoHeaders, runtime: Util.RuntimeOptions): HotelStaticInfoResponse {
  Util.validateModel(tmpReq);
  var request = new HotelStaticInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.hotelIds)) {
    request.hotelIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hotelIds, 'hotel_ids', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.hotelIdsShrink)) {
    query['hotel_ids'] = request.hotelIdsShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HotelStaticInfo',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-hotel/v1/static-infos`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hotelStaticInfo(request: HotelStaticInfoRequest): HotelStaticInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelStaticInfoHeaders{};
  return hotelStaticInfoWithOptions(request, headers, runtime);
}

model IeFlightBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model IeFlightBillSettlementQueryRequest {
  pageNo?: int32(name='page_no', example='1'),
  pageSize?: int32(name='page_size', example='100'),
  periodEnd?: string(name='period_end', example='2021-10-02'),
  periodStart?: string(name='period_start', example='2021-10-01'),
}

model IeFlightBillSettlementQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category', example='11'),
    corpId?: string(name='corp_id', example='corp1'),
    dataList?: [ 
      {
        advanceDay?: int32(name='advance_day', example='1'),
        airlineCorpCode?: string(name='airline_corp_code', example='MU'),
        airlineCorpName?: string(name='airline_corp_name'),
        alipayTradeNo?: string(name='alipay_trade_no', example='2021123432260'),
        applyExtendField?: string(name='apply_extend_field', description='审批扩展自定义字段'),
        applyId?: string(name='apply_id', example='103189557'),
        arrAirportCode?: string(name='arr_airport_code', example='CAN'),
        arrCity?: string(name='arr_city'),
        arrDate?: string(name='arr_date', example='2021-10-02'),
        arrStation?: string(name='arr_station'),
        arrTime?: string(name='arr_time', example='13:30:00'),
        billRecordTime?: string(name='bill_record_time', example='2020-12-23T20:18Z'),
        bookMode?: string(name='book_mode'),
        bookTime?: string(name='book_time', example='2021-10-01 00:17:05'),
        bookerId?: string(name='booker_id', example='al_xinuan.zsy'),
        bookerJobNo?: string(name='booker_job_no', example='70022164'),
        bookerName?: string(name='booker_name'),
        btripCouponFee?: double(name='btrip_coupon_fee', example='23.9'),
        cabin?: string(name='cabin', example='R'),
        cabinClass?: string(name='cabin_class'),
        capitalDirection?: string(name='capital_direction', example='1'),
        cascadeDepartment?: string(name='cascade_department'),
        changeFee?: double(name='change_fee', example='23.0'),
        corpPayOrderFee?: double(name='corp_pay_order_fee', example='460'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number', example='8b7f3cd-24324-097'),
        coupon?: double(name='coupon', example='1'),
        depAirportCode?: string(name='dep_airport_code', example='KHN'),
        department?: string(name='department'),
        departmentId?: string(name='department_id', example='2345866'),
        deptCity?: string(name='dept_city'),
        deptDate?: string(name='dept_date', example='2021-10-02'),
        deptStation?: string(name='dept_station'),
        deptTime?: string(name='dept_time', example='12:00:00'),
        discount?: string(name='discount', example='51%'),
        feeType?: string(name='fee_type', example='20101'),
        flightNo?: string(name='flight_no', example='MU9684'),
        index?: string(name='index', example='4564547'),
        insuranceFee?: double(name='insurance_fee', example='23.9'),
        insuranceNumber?: string(name='insurance_number', example='15548214852'),
        invoiceTitle?: string(name='invoice_title'),
        mostDifferenceDeptTime?: string(name='most_difference_dept_time', example='2021-10-01 00:17:13'),
        mostDifferenceDiscount?: string(name='most_difference_discount', example='23%'),
        mostDifferenceFlightNo?: string(name='most_difference_flight_no', example='MU9684'),
        mostDifferencePrice?: double(name='most_difference_price', example='23.9'),
        mostDifferenceReason?: string(name='most_difference_reason'),
        mostPrice?: double(name='most_price', example='23.9'),
        negotiationCouponFee?: double(name='negotiation_coupon_fee', example='23.9'),
        orderId?: string(name='order_id', example='234223423423'),
        orderStatusDesc?: string(name='order_status_desc', example='null'),
        overApplyId?: string(name='over_apply_id', example='234324324423'),
        primaryId?: long(name='primary_id', example='4564547'),
        projectCode?: string(name='project_code', example='23423432423'),
        projectName?: string(name='project_name'),
        refundFee?: double(name='refund_fee', example='23.9'),
        remark?: string(name='remark'),
        repeatRefund?: string(name='repeat_refund'),
        sealPrice?: double(name='seal_price', example='410'),
        segmentType?: string(name='segment_type'),
        serviceFee?: double(name='service_fee', example='23.9'),
        settlementFee?: double(name='settlement_fee', example='350'),
        settlementGrantFee?: double(name='settlement_grant_fee', example='6.11'),
        settlementTime?: string(name='settlement_time', example='2021-10-08 23:39:01'),
        settlementType?: string(name='settlement_type', example='4'),
        status?: int32(name='status', example='1'),
        subOrderId?: string(name='sub_order_id', example='123123232'),
        taxFee?: double(name='tax_fee', example='125.6'),
        taxRate?: string(name='tax_rate', description='税率', example='6%'),
        ticketId?: string(name='ticket_id', example='781-6586234234324'),
        trade?: string(name='trade', example='CAN-KUL-BKK'),
        travelerId?: string(name='traveler_id', example='54463464'),
        travelerJobNo?: string(name='traveler_job_no', example='326246'),
        travelerName?: string(name='traveler_name'),
        voucherType?: int32(name='voucher_type', example='11'),
      }
    ](name='data_list'),
    periodEnd?: string(name='period_end', example='2021-10-14'),
    periodStart?: string(name='period_start', example='2021-10-13'),
    totalNum?: long(name='total_num', example='1402'),
  }(name='module'),
  morePage?: boolean(name='more_page', example='true'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210e842b16611337974412836dae27'),
}

model IeFlightBillSettlementQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IeFlightBillSettlementQueryResponseBody(name='body'),
}

async function ieFlightBillSettlementQueryWithOptions(request: IeFlightBillSettlementQueryRequest, headers: IeFlightBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): IeFlightBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IeFlightBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/ie-flight/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ieFlightBillSettlementQuery(request: IeFlightBillSettlementQueryRequest): IeFlightBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IeFlightBillSettlementQueryHeaders{};
  return ieFlightBillSettlementQueryWithOptions(request, headers, runtime);
}

model InsInvoiceScanQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model InsInvoiceScanQueryRequest {
  billDate?: string(name='bill_date', example='2022-12-01'),
  billId?: long(name='bill_id', example='123'),
  invoiceSubTaskId?: long(name='invoice_sub_task_id', example='456'),
  pageNo?: int32(name='page_no', example='1'),
  pageSize?: int32(name='page_size', example='20'),
}

model InsInvoiceScanQueryResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    items?: [ 
      {
        amountWithTax?: string(name='amount_with_tax', example='20'),
        amountWithoutTax?: string(name='amount_without_tax', example='18.87'),
        billDate?: string(name='bill_date', example='2022-12-01'),
        checkCode?: string(name='check_code', description='校验码', example='07122942791187744475'),
        costCenter?: string(name='cost_center'),
        department?: string(name='department'),
        drawer?: string(name='drawer', description='开票人'),
        id?: string(name='id', description='应用ID', example='566'),
        insuranceCompany?: string(name='insurance_company'),
        insuranceOrderId?: string(name='insurance_order_id', example='T123343234242323232'),
        insuranceType?: string(name='insurance_type'),
        invoiceCode?: string(name='invoice_code', example='3300111303'),
        invoiceDay?: string(name='invoice_day', example='2022-12-01'),
        invoiceDetails?: [ 
          {
            amount?: string(name='amount', description='金额', example='75.21'),
            index?: string(name='index', description='行号', example='0'),
            itemName?: string(name='item_name', description='货物或应税劳务、服务名称'),
            quantity?: string(name='quantity', description='数量', example='1'),
            specification?: string(name='specification', description='规格型号', example='66PT11230069'),
            tax?: string(name='tax', description='税额', example='12.79'),
            taxRate?: string(name='tax_rate', description='税率', example='17%'),
            unit?: string(name='unit', description='单位'),
            unitPrice?: string(name='unit_price', description='单价', example='75.21'),
          }
        ](name='invoice_details', description='发票明细'),
        invoiceLocation?: string(name='invoice_location', description='发票地区'),
        invoiceNo?: string(name='invoice_no', example='24021111'),
        invoiceTitle?: string(name='invoice_title', description='发票抬头'),
        machineCode?: string(name='machine_code', description='机器码', example='661619906841'),
        orderId?: long(name='order_id', example='3137168772101111000'),
        ossUrl?: string(name='oss_url', example='https://www.testurl.com'),
        passenger?: string(name='passenger'),
        passwordArea?: string(name='password_area', description='密码区', example='<87*>>53>5023>-446>/4+83/5* *>5/81<75/1931>4>>'),
        project?: string(name='project'),
        purchaserBankAccountInfo?: string(name='purchaser_bank_account_info', description='购方银行信息'),
        purchaserContactInfo?: string(name='purchaser_contact_info', description='购方联系方式'),
        purchaserName?: string(name='purchaser_name'),
        purchaserTaxNo?: string(name='purchaser_tax_no', example='91441111111111111S'),
        recipient?: string(name='recipient', description='收款人'),
        remarks?: string(name='remarks', description='备注'),
        reviewer?: string(name='reviewer', description='复核人'),
        sellerBankAccountInfo?: string(name='seller_bank_account_info', description='销售方银行信息'),
        sellerContactInfo?: string(name='seller_contact_info', description='销售方联系方式'),
        sellerName?: string(name='seller_name'),
        sellerTaxNo?: string(name='seller_tax_no', example='91441111111111111N'),
        smartCheckCode?: string(name='smart_check_code', description='校验码', example='4475'),
        taxAmount?: string(name='tax_amount', example='1.13'),
        taxRate?: string(name='tax_rate', example='6%'),
        totalAmountInWords?: string(name='total_amount_in_words', description='大写金额'),
      }
    ](name='items'),
    pageNo?: int32(name='page_no', example='1'),
    pageSize?: int32(name='page_size', example='20'),
    totalPage?: int32(name='total_page', example='2'),
    totalSize?: int32(name='total_size', example='30'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210e847f16611516748613869de4f6'),
}

model InsInvoiceScanQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InsInvoiceScanQueryResponseBody(name='body'),
}

async function insInvoiceScanQueryWithOptions(request: InsInvoiceScanQueryRequest, headers: InsInvoiceScanQueryHeaders, runtime: Util.RuntimeOptions): InsInvoiceScanQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billDate)) {
    query['bill_date'] = request.billDate;
  }
  if (!Util.isUnset(request.billId)) {
    query['bill_id'] = request.billId;
  }
  if (!Util.isUnset(request.invoiceSubTaskId)) {
    query['invoice_sub_task_id'] = request.invoiceSubTaskId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InsInvoiceScanQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/scan/v1/ins-invoice`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function insInvoiceScanQuery(request: InsInvoiceScanQueryRequest): InsInvoiceScanQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InsInvoiceScanQueryHeaders{};
  return insInvoiceScanQueryWithOptions(request, headers, runtime);
}

model InvoiceAddHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model InvoiceAddRequest {
  address?: string(name='address', example='xxx'),
  bankName?: string(name='bank_name'),
  bankNo?: string(name='bank_no', example='123456'),
  taxNo?: string(name='tax_no', example='12345'),
  tel?: string(name='tel', example='123'),
  thirdPartId?: string(name='third_part_id', example='340049'),
  title?: string(name='title'),
  type?: int32(name='type', example='1'),
  unitType?: int32(name='unit_type'),
}

model InvoiceAddResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model InvoiceAddResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvoiceAddResponseBody(name='body'),
}

async function invoiceAddWithOptions(request: InvoiceAddRequest, headers: InvoiceAddHeaders, runtime: Util.RuntimeOptions): InvoiceAddResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.address)) {
    body['address'] = request.address;
  }
  if (!Util.isUnset(request.bankName)) {
    body['bank_name'] = request.bankName;
  }
  if (!Util.isUnset(request.bankNo)) {
    body['bank_no'] = request.bankNo;
  }
  if (!Util.isUnset(request.taxNo)) {
    body['tax_no'] = request.taxNo;
  }
  if (!Util.isUnset(request.tel)) {
    body['tel'] = request.tel;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    body['third_part_id'] = request.thirdPartId;
  }
  if (!Util.isUnset(request.title)) {
    body['title'] = request.title;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }
  if (!Util.isUnset(request.unitType)) {
    body['unit_type'] = request.unitType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InvoiceAdd',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/add-invoice`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function invoiceAdd(request: InvoiceAddRequest): InvoiceAddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvoiceAddHeaders{};
  return invoiceAddWithOptions(request, headers, runtime);
}

model InvoiceDeleteHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model InvoiceDeleteRequest {
  thirdPartId?: string(name='third_part_id', example='340049'),
}

model InvoiceDeleteResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model InvoiceDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvoiceDeleteResponseBody(name='body'),
}

async function invoiceDeleteWithOptions(request: InvoiceDeleteRequest, headers: InvoiceDeleteHeaders, runtime: Util.RuntimeOptions): InvoiceDeleteResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.thirdPartId)) {
    query['third_part_id'] = request.thirdPartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InvoiceDelete',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/invoice`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function invoiceDelete(request: InvoiceDeleteRequest): InvoiceDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvoiceDeleteHeaders{};
  return invoiceDeleteWithOptions(request, headers, runtime);
}

model InvoiceModifyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model InvoiceModifyRequest {
  address?: string(name='address'),
  bankName?: string(name='bank_name', example='12345678'),
  bankNo?: string(name='bank_no', example='2222'),
  taxNo?: string(name='tax_no', example='122333121'),
  tel?: string(name='tel', example='12345678'),
  thirdPartId?: string(name='third_part_id', example='340049'),
  title?: string(name='title'),
  type?: int32(name='type', example='1'),
  unitType?: int32(name='unit_type'),
}

model InvoiceModifyResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model InvoiceModifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvoiceModifyResponseBody(name='body'),
}

async function invoiceModifyWithOptions(request: InvoiceModifyRequest, headers: InvoiceModifyHeaders, runtime: Util.RuntimeOptions): InvoiceModifyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.address)) {
    body['address'] = request.address;
  }
  if (!Util.isUnset(request.bankName)) {
    body['bank_name'] = request.bankName;
  }
  if (!Util.isUnset(request.bankNo)) {
    body['bank_no'] = request.bankNo;
  }
  if (!Util.isUnset(request.taxNo)) {
    body['tax_no'] = request.taxNo;
  }
  if (!Util.isUnset(request.tel)) {
    body['tel'] = request.tel;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    body['third_part_id'] = request.thirdPartId;
  }
  if (!Util.isUnset(request.title)) {
    body['title'] = request.title;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }
  if (!Util.isUnset(request.unitType)) {
    body['unit_type'] = request.unitType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InvoiceModify',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/invoice`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function invoiceModify(request: InvoiceModifyRequest): InvoiceModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvoiceModifyHeaders{};
  return invoiceModifyWithOptions(request, headers, runtime);
}

model InvoiceRuleAddHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model InvoiceRuleAddRequest {
  entities?: [ 
    {
      entityId?: string(name='entity_id', example='12345'),
      entityName?: string(name='entity_name'),
      entityType?: string(name='entity_type', example='1'),
    }
  ](name='entities'),
  thirdPartId?: string(name='third_part_id', example='4854821'),
}

model InvoiceRuleAddShrinkRequest {
  entitiesShrink?: string(name='entities'),
  thirdPartId?: string(name='third_part_id', example='4854821'),
}

model InvoiceRuleAddResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    addNum?: int32(name='add_num', example='1'),
    selectedUserNum?: int32(name='selected_user_num', example='1'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model InvoiceRuleAddResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvoiceRuleAddResponseBody(name='body'),
}

async function invoiceRuleAddWithOptions(tmpReq: InvoiceRuleAddRequest, headers: InvoiceRuleAddHeaders, runtime: Util.RuntimeOptions): InvoiceRuleAddResponse {
  Util.validateModel(tmpReq);
  var request = new InvoiceRuleAddShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entities)) {
    request.entitiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entities, 'entities', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.entitiesShrink)) {
    body['entities'] = request.entitiesShrink;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    body['third_part_id'] = request.thirdPartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InvoiceRuleAdd',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/invoice-rule`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function invoiceRuleAdd(request: InvoiceRuleAddRequest): InvoiceRuleAddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvoiceRuleAddHeaders{};
  return invoiceRuleAddWithOptions(request, headers, runtime);
}

model InvoiceRuleDeleteHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model InvoiceRuleDeleteRequest {
  delAll?: boolean(name='del_all', example='false'),
  entities?: [ 
    {
      entityId?: string(name='entity_id', example='12345'),
      entityType?: string(name='entity_type', example='1'),
    }
  ](name='entities'),
  thirdPartId?: string(name='third_part_id', example='340049'),
}

model InvoiceRuleDeleteShrinkRequest {
  delAll?: boolean(name='del_all', example='false'),
  entitiesShrink?: string(name='entities'),
  thirdPartId?: string(name='third_part_id', example='340049'),
}

model InvoiceRuleDeleteResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    removeNum?: int32(name='remove_num', example='1'),
    selectedUserNum?: int32(name='selected_user_num', example='0'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model InvoiceRuleDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvoiceRuleDeleteResponseBody(name='body'),
}

async function invoiceRuleDeleteWithOptions(tmpReq: InvoiceRuleDeleteRequest, headers: InvoiceRuleDeleteHeaders, runtime: Util.RuntimeOptions): InvoiceRuleDeleteResponse {
  Util.validateModel(tmpReq);
  var request = new InvoiceRuleDeleteShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entities)) {
    request.entitiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entities, 'entities', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.delAll)) {
    query['del_all'] = request.delAll;
  }
  if (!Util.isUnset(request.entitiesShrink)) {
    query['entities'] = request.entitiesShrink;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    query['third_part_id'] = request.thirdPartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InvoiceRuleDelete',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/invoice-rule`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function invoiceRuleDelete(request: InvoiceRuleDeleteRequest): InvoiceRuleDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvoiceRuleDeleteHeaders{};
  return invoiceRuleDeleteWithOptions(request, headers, runtime);
}

model InvoiceRuleSaveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model InvoiceRuleSaveRequest {
  allEmploye?: boolean(name='all_employe', example='true'),
  entities?: [ 
    {
      id?: string(name='id', example='123'),
      name?: string(name='name'),
      type?: int32(name='type', example='1'),
    }
  ](name='entities'),
  thirdPartId?: string(name='third_part_id', example='i123'),
}

model InvoiceRuleSaveShrinkRequest {
  allEmploye?: boolean(name='all_employe', example='true'),
  entitiesShrink?: string(name='entities'),
  thirdPartId?: string(name='third_part_id', example='i123'),
}

model InvoiceRuleSaveResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    addNum?: int32(name='add_num', example='1'),
    removeNum?: int32(name='remove_num', example='1'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='8465F68D-BC97-5C0F-9161-3E65919D9135'),
}

model InvoiceRuleSaveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvoiceRuleSaveResponseBody(name='body'),
}

async function invoiceRuleSaveWithOptions(tmpReq: InvoiceRuleSaveRequest, headers: InvoiceRuleSaveHeaders, runtime: Util.RuntimeOptions): InvoiceRuleSaveResponse {
  Util.validateModel(tmpReq);
  var request = new InvoiceRuleSaveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entities)) {
    request.entitiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entities, 'entities', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.allEmploye)) {
    body['all_employe'] = request.allEmploye;
  }
  if (!Util.isUnset(request.entitiesShrink)) {
    body['entities'] = request.entitiesShrink;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    body['third_part_id'] = request.thirdPartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InvoiceRuleSave',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/invoice-rule`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function invoiceRuleSave(request: InvoiceRuleSaveRequest): InvoiceRuleSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvoiceRuleSaveHeaders{};
  return invoiceRuleSaveWithOptions(request, headers, runtime);
}

model InvoiceSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model InvoiceSearchRequest {
  title?: string(name='title'),
  userId?: string(name='user_id', example='12345'),
}

model InvoiceSearchResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: [ 
    {
      id?: long(name='id', description='ID', example='1478652'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id', example='405009'),
      title?: string(name='title'),
    }
  ](name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='EB68C364-F9A0-5046-910A-2DD92C277E71'),
}

model InvoiceSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvoiceSearchResponseBody(name='body'),
}

async function invoiceSearchWithOptions(request: InvoiceSearchRequest, headers: InvoiceSearchHeaders, runtime: Util.RuntimeOptions): InvoiceSearchResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.title)) {
    query['title'] = request.title;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InvoiceSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/invoice`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function invoiceSearch(request: InvoiceSearchRequest): InvoiceSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvoiceSearchHeaders{};
  return invoiceSearchWithOptions(request, headers, runtime);
}

model IsvRuleSaveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model IsvRuleSaveRequest {
  bookType?: string(name='book_type'),
  bookuserList?: [ 
    {
      entityId?: string(name='entity_id'),
      entityType?: int32(name='entity_type'),
    }
  ](name='bookuser_list'),
  status?: int32(name='status', example='1'),
  userId?: string(name='user_id', example='123'),
}

model IsvRuleSaveShrinkRequest {
  bookType?: string(name='book_type'),
  bookuserListShrink?: string(name='bookuser_list'),
  status?: int32(name='status', example='1'),
  userId?: string(name='user_id', example='123'),
}

model IsvRuleSaveResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: string(name='module', description='module', example='null'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210f079e16603757182131635d866a'),
}

model IsvRuleSaveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IsvRuleSaveResponseBody(name='body'),
}

async function isvRuleSaveWithOptions(tmpReq: IsvRuleSaveRequest, headers: IsvRuleSaveHeaders, runtime: Util.RuntimeOptions): IsvRuleSaveResponse {
  Util.validateModel(tmpReq);
  var request = new IsvRuleSaveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bookuserList)) {
    request.bookuserListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bookuserList, 'bookuser_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.bookType)) {
    body['book_type'] = request.bookType;
  }
  if (!Util.isUnset(request.bookuserListShrink)) {
    body['bookuser_list'] = request.bookuserListShrink;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'IsvRuleSave',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/user/v1/rule`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function isvRuleSave(request: IsvRuleSaveRequest): IsvRuleSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IsvRuleSaveHeaders{};
  return isvRuleSaveWithOptions(request, headers, runtime);
}

model IsvUserSaveHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model IsvUserSaveRequest {
  userList?: [ 
    {
      departId?: long(name='depart_id', example='10'),
      email?: string(name='email', example='123@163.com'),
      jobNo?: string(name='job_no', example='8797'),
      leaveStatus?: int32(name='leave_status', example='0'),
      managerUserId?: string(name='manager_user_id', example='123456'),
      phone?: string(name='phone', example='15364762829'),
      position?: string(name='position'),
      positionLevel?: string(name='position_level', example='20'),
      realNameEn?: string(name='real_name_en', example='ceshi'),
      thirdDepartId?: string(name='third_depart_id', example='123'),
      thirdDepartIdList?: [ string ](name='third_depart_id_list'),
      userId?: string(name='user_id', example='123'),
      userName?: string(name='user_name'),
    }
  ](name='user_list'),
}

model IsvUserSaveShrinkRequest {
  userListShrink?: string(name='user_list'),
}

model IsvUserSaveResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: string(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='707c9fd116393792883244141e4e7d'),
}

model IsvUserSaveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IsvUserSaveResponseBody(name='body'),
}

async function isvUserSaveWithOptions(tmpReq: IsvUserSaveRequest, headers: IsvUserSaveHeaders, runtime: Util.RuntimeOptions): IsvUserSaveResponse {
  Util.validateModel(tmpReq);
  var request = new IsvUserSaveShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userList)) {
    request.userListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userList, 'user_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.userListShrink)) {
    body['user_list'] = request.userListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'IsvUserSave',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/isvuser/v1/isvuser`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function isvUserSave(request: IsvUserSaveRequest): IsvUserSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IsvUserSaveHeaders{};
  return isvUserSaveWithOptions(request, headers, runtime);
}

model MonthBillConfirmHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwis'),
}

model MonthBillConfirmRequest {
  mailBillDate?: int32(name='mail_bill_date', example='20221001'),
  userId?: string(name='user_id', example='12345'),
}

model MonthBillConfirmResponseBody = {
  code?: string(name='code', example='success'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model MonthBillConfirmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MonthBillConfirmResponseBody(name='body'),
}

async function monthBillConfirmWithOptions(request: MonthBillConfirmRequest, headers: MonthBillConfirmHeaders, runtime: Util.RuntimeOptions): MonthBillConfirmResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.mailBillDate)) {
    body['mail_bill_date'] = request.mailBillDate;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MonthBillConfirm',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/bill/v1/status/action/confirm`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function monthBillConfirm(request: MonthBillConfirmRequest): MonthBillConfirmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new MonthBillConfirmHeaders{};
  return monthBillConfirmWithOptions(request, headers, runtime);
}

model MonthBillGetHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model MonthBillGetRequest {
  billMonth?: string(name='bill_month', example='202207'),
}

model MonthBillGetResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: [ 
    {
      endDate?: string(name='end_date'),
      monthAccountBillDetail?: {
        billConfirmed?: int32(name='billConfirmed'),
        carAmount?: double(name='carAmount', description='用车金额（单位：元）', example='xx.xx'),
        damageAmount?: double(name='damageAmount', description='违约金金额（单位：元）', example='xx.xx'),
        flightAmount?: double(name='flightAmount', description='机票金额（单位：元）', example='xx.xx'),
        fuPoint?: double(name='fuPoint', description='福豆金额（单位：元）', example='xx.xx'),
        hotelAmount?: double(name='hotelAmount', description='酒店金额（单位：元）', example='xx.xx'),
        ieFlightAmount?: double(name='ieFlightAmount', description='国际机票金额（单位：元）', example='xx.xx'),
        mailBillDate?: long(name='mailBillDate', description='账期日：YYYYMMDD', example='20200501'),
        serviceAmount?: double(name='serviceAmount', description='服务费金额（单位：元）', example='xx.xx'),
        trainAmount?: double(name='trainAmount', description='火车票金额（单位：元）', example='xx.xx'),
      }(name='monthAccountBillDetail', description='CorpMonthAccountBillFeeDetail'),
      startDate?: string(name='start_date'),
      url?: string(name='url', example='https://xxx'),
    }
  ](name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model MonthBillGetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MonthBillGetResponseBody(name='body'),
}

async function monthBillGetWithOptions(request: MonthBillGetRequest, headers: MonthBillGetHeaders, runtime: Util.RuntimeOptions): MonthBillGetResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billMonth)) {
    query['bill_month'] = request.billMonth;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MonthBillGet',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/open/v1/month-bill`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function monthBillGet(request: MonthBillGetRequest): MonthBillGetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new MonthBillGetHeaders{};
  return monthBillGetWithOptions(request, headers, runtime);
}

model ProjectAddHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ProjectAddRequest {
  code?: string(name='code', example='pro_code'),
  projectName?: string(name='project_name'),
  thirdPartCostCenterId?: string(name='third_part_cost_center_id', example='234'),
  thirdPartId?: string(name='third_part_id', example='1'),
  thirdPartInvoiceId?: string(name='third_part_invoice_id', example='123'),
}

model ProjectAddResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: long(name='module', example='530404'),
  morePage?: boolean(name='more_page', example='true'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model ProjectAddResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ProjectAddResponseBody(name='body'),
}

async function projectAddWithOptions(request: ProjectAddRequest, headers: ProjectAddHeaders, runtime: Util.RuntimeOptions): ProjectAddResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.projectName)) {
    body['project_name'] = request.projectName;
  }
  if (!Util.isUnset(request.thirdPartCostCenterId)) {
    body['third_part_cost_center_id'] = request.thirdPartCostCenterId;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    body['third_part_id'] = request.thirdPartId;
  }
  if (!Util.isUnset(request.thirdPartInvoiceId)) {
    body['third_part_invoice_id'] = request.thirdPartInvoiceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ProjectAdd',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/cost/v1/project`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function projectAdd(request: ProjectAddRequest): ProjectAddResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ProjectAddHeaders{};
  return projectAddWithOptions(request, headers, runtime);
}

model ProjectDeleteHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ProjectDeleteRequest {
  thirdPartId?: string(name='third_part_id', example='12345'),
}

model ProjectDeleteResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: boolean(name='module', example='true'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model ProjectDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ProjectDeleteResponseBody(name='body'),
}

async function projectDeleteWithOptions(request: ProjectDeleteRequest, headers: ProjectDeleteHeaders, runtime: Util.RuntimeOptions): ProjectDeleteResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.thirdPartId)) {
    query['third_part_id'] = request.thirdPartId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ProjectDelete',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/cost/v1/project`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function projectDelete(request: ProjectDeleteRequest): ProjectDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ProjectDeleteHeaders{};
  return projectDeleteWithOptions(request, headers, runtime);
}

model ProjectModifyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model ProjectModifyRequest {
  code?: string(name='code', example='pro_code'),
  projectName?: string(name='project_name'),
  thirdPartCostCenterId?: string(name='third_part_cost_center_id', example='234'),
  thirdPartId?: string(name='third_part_id', example='340049'),
  thirdPartInvoiceId?: string(name='third_part_invoice_id', example='123'),
}

model ProjectModifyResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: boolean(name='module', example='true'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model ProjectModifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ProjectModifyResponseBody(name='body'),
}

async function projectModifyWithOptions(request: ProjectModifyRequest, headers: ProjectModifyHeaders, runtime: Util.RuntimeOptions): ProjectModifyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.projectName)) {
    body['project_name'] = request.projectName;
  }
  if (!Util.isUnset(request.thirdPartCostCenterId)) {
    body['third_part_cost_center_id'] = request.thirdPartCostCenterId;
  }
  if (!Util.isUnset(request.thirdPartId)) {
    body['third_part_id'] = request.thirdPartId;
  }
  if (!Util.isUnset(request.thirdPartInvoiceId)) {
    body['third_part_invoice_id'] = request.thirdPartInvoiceId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ProjectModify',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/cost/v1/project`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function projectModify(request: ProjectModifyRequest): ProjectModifyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ProjectModifyHeaders{};
  return projectModifyWithOptions(request, headers, runtime);
}

model QueryReimbursementOrderHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model QueryReimbursementOrderRequest {
  reimbOrderNo?: string(name='reimb_order_no', example='RT204396'),
  subCorpId?: string(name='sub_corp_id', example='ding123'),
}

model QueryReimbursementOrderResponseBody = {
  code?: string(name='code', example='PARAM_ERROR'),
  message?: string(name='message'),
  module?: {
    companyAmount?: string(name='company_amount', example='10.00'),
    companyPayAmount?: string(name='company_pay_amount', example='20.00'),
    corpId?: string(name='corp_id', example='dinga809ed71b9201f35'),
    expenses?: [ 
      {
        amount?: string(name='amount', example='20'),
        currency?: string(name='currency'),
        expenseCity?: string(name='expense_city'),
        expenseCompositions?: [ 
          {
            billSettlementId?: long(name='bill_settlement_id'),
            capitalDirection?: string(name='capital_direction'),
            feeType?: string(name='fee_type'),
            remark?: string(name='remark'),
            remindTagList?: [ string ](name='remind_tag_list'),
            settlementAmount?: string(name='settlement_amount'),
            settlementTime?: string(name='settlement_time'),
            voucherType?: int32(name='voucher_type'),
          }
        ](name='expense_compositions'),
        expenseTime?: string(name='expense_time', example='2022-05-15T22:27Z'),
        expenseType?: string(name='expense_type'),
        expenseTypeCode?: string(name='expense_type_code', example='code'),
        reimbExpenseId?: long(name='reimb_expense_id'),
        remark?: string(name='remark'),
        settlementType?: string(name='settlement_type'),
      }
    ](name='expenses'),
    gmtCreate?: string(name='gmt_create', example='2022-05-15T22:27Z'),
    gmtModified?: string(name='gmt_modified', example='2022-07-20T10:40Z'),
    itineraries?: [ 
      {
        arrCity?: string(name='arr_city'),
        arrDate?: string(name='arr_date', example='2022-05-15T22:27Z'),
        depCity?: string(name='dep_city', example='CTU'),
        depDate?: string(name='dep_date', example='2022-05-15T22:27Z'),
        trafficWay?: string(name='traffic_way'),
        tripWay?: string(name='trip_way'),
      }
    ](name='itineraries'),
    paymentInfos?: [ 
      {
        amount?: string(name='amount', example='20.00'),
        payeeUserId?: string(name='payee_user_id', example='userId'),
      }
    ](name='payment_infos'),
    personalAmount?: string(name='personal_amount', example='10.00'),
    reason?: string(name='reason'),
    reimbursementNo?: string(name='reimbursement_no', example='RT203956'),
    remark?: string(name='remark'),
    status?: string(name='status'),
    travelThirdApplyId?: string(name='travel_third_apply_id'),
    userId?: string(name='user_id', example='userId'),
    userName?: string(name='user_name'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model QueryReimbursementOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryReimbursementOrderResponseBody(name='body'),
}

async function queryReimbursementOrderWithOptions(request: QueryReimbursementOrderRequest, headers: QueryReimbursementOrderHeaders, runtime: Util.RuntimeOptions): QueryReimbursementOrderResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.reimbOrderNo)) {
    query['reimb_order_no'] = request.reimbOrderNo;
  }
  if (!Util.isUnset(request.subCorpId)) {
    query['sub_corp_id'] = request.subCorpId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryReimbursementOrder',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/reimbursement/v1/order`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryReimbursementOrder(request: QueryReimbursementOrderRequest): QueryReimbursementOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryReimbursementOrderHeaders{};
  return queryReimbursementOrderWithOptions(request, headers, runtime);
}

model SyncSingleUserHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model SyncSingleUserRequest {
  email?: string(name='email'),
  jobNo?: string(name='job_no', example='1001'),
  leaveStatus?: int32(name='leave_status', example='0'),
  managerUserId?: string(name='manager_user_id', example='72369'),
  phone?: string(name='phone', example='16392740204'),
  position?: string(name='position'),
  positionLevel?: string(name='position_level', example='1'),
  realNameEn?: string(name='real_name_en', example='ce/shi'),
  thirdDepartIdList?: [ string ](name='third_depart_id_list'),
  userId?: string(name='user_id', example='573263'),
  userName?: string(name='user_name'),
}

model SyncSingleUserShrinkRequest {
  email?: string(name='email'),
  jobNo?: string(name='job_no', example='1001'),
  leaveStatus?: int32(name='leave_status', example='0'),
  managerUserId?: string(name='manager_user_id', example='72369'),
  phone?: string(name='phone', example='16392740204'),
  position?: string(name='position'),
  positionLevel?: string(name='position_level', example='1'),
  realNameEn?: string(name='real_name_en', example='ce/shi'),
  thirdDepartIdListShrink?: string(name='third_depart_id_list'),
  userId?: string(name='user_id', example='573263'),
  userName?: string(name='user_name'),
}

model SyncSingleUserResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: string(name='module', example='success'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210f079e16603757182131635d866a'),
}

model SyncSingleUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncSingleUserResponseBody(name='body'),
}

async function syncSingleUserWithOptions(tmpReq: SyncSingleUserRequest, headers: SyncSingleUserHeaders, runtime: Util.RuntimeOptions): SyncSingleUserResponse {
  Util.validateModel(tmpReq);
  var request = new SyncSingleUserShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.thirdDepartIdList)) {
    request.thirdDepartIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.thirdDepartIdList, 'third_depart_id_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.email)) {
    body['email'] = request.email;
  }
  if (!Util.isUnset(request.jobNo)) {
    body['job_no'] = request.jobNo;
  }
  if (!Util.isUnset(request.leaveStatus)) {
    body['leave_status'] = request.leaveStatus;
  }
  if (!Util.isUnset(request.managerUserId)) {
    body['manager_user_id'] = request.managerUserId;
  }
  if (!Util.isUnset(request.phone)) {
    body['phone'] = request.phone;
  }
  if (!Util.isUnset(request.position)) {
    body['position'] = request.position;
  }
  if (!Util.isUnset(request.positionLevel)) {
    body['position_level'] = request.positionLevel;
  }
  if (!Util.isUnset(request.realNameEn)) {
    body['real_name_en'] = request.realNameEn;
  }
  if (!Util.isUnset(request.thirdDepartIdListShrink)) {
    body['third_depart_id_list'] = request.thirdDepartIdListShrink;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    body['user_name'] = request.userName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SyncSingleUser',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/user/v1/single-user/action/sync`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function syncSingleUser(request: SyncSingleUserRequest): SyncSingleUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SyncSingleUserHeaders{};
  return syncSingleUserWithOptions(request, headers, runtime);
}

model SyncThirdUserMappingHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model SyncThirdUserMappingRequest {
  status?: int32(name='status', example='0'),
  thirdChannelType?: string(name='third_channel_type', example='weCom'),
  thirdUserId?: string(name='third_user_id', example='123'),
  userId?: string(name='user_id', example='123'),
}

model SyncThirdUserMappingResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='8465F68D-BC97-5C0F-9161-3E65919D9135'),
}

model SyncThirdUserMappingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncThirdUserMappingResponseBody(name='body'),
}

async function syncThirdUserMappingWithOptions(request: SyncThirdUserMappingRequest, headers: SyncThirdUserMappingHeaders, runtime: Util.RuntimeOptions): SyncThirdUserMappingResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.thirdChannelType)) {
    body['third_channel_type'] = request.thirdChannelType;
  }
  if (!Util.isUnset(request.thirdUserId)) {
    body['third_user_id'] = request.thirdUserId;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SyncThirdUserMapping',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/user/v1/third-users/action/mapping`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function syncThirdUserMapping(request: SyncThirdUserMappingRequest): SyncThirdUserMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SyncThirdUserMappingHeaders{};
  return syncThirdUserMappingWithOptions(request, headers, runtime);
}

model TBAccountInfoQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TBAccountInfoQueryResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    tbAccount?: string(name='tb_account'),
    tbBond?: boolean(name='tb_bond', example='true'),
  }(name='module'),
  requestId?: string(name='requestId', example='456456575656757'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210f07f316603757445272547d959f'),
}

model TBAccountInfoQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TBAccountInfoQueryResponseBody(name='body'),
}

async function tBAccountInfoQueryWithOptions(userId: string, headers: TBAccountInfoQueryHeaders, runtime: Util.RuntimeOptions): TBAccountInfoQueryResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'TBAccountInfoQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/account/v1/tb-accounts/${OpenApiUtil.getEncodeParam(userId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tBAccountInfoQuery(userId: string): TBAccountInfoQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TBAccountInfoQueryHeaders{};
  return tBAccountInfoQueryWithOptions(userId, headers, runtime);
}

model TBAccountUnbindHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TBAccountUnbindResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: boolean(name='module', example='true'),
  requestId?: string(name='requestId', example='456456575656757'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model TBAccountUnbindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TBAccountUnbindResponseBody(name='body'),
}

async function tBAccountUnbindWithOptions(userId: string, headers: TBAccountUnbindHeaders, runtime: Util.RuntimeOptions): TBAccountUnbindResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'TBAccountUnbind',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/account/v1/tb-accounts/${OpenApiUtil.getEncodeParam(userId)}/action/unbind`,
    method = 'PATCH',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tBAccountUnbind(userId: string): TBAccountUnbindResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TBAccountUnbindHeaders{};
  return tBAccountUnbindWithOptions(userId, headers, runtime);
}

model TicketChangingApplyHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TicketChangingApplyRequest {
  disOrderId?: string(name='dis_order_id', example='dis1234'),
  disSubOrderId?: string(name='dis_sub_order_id', example='mid1243'),
  isVoluntary?: int32(name='is_voluntary'),
  modifyFlightInfoList?: [ 
    {
      arrCity?: string(name='arr_city', example='BJS'),
      cabin?: string(name='cabin', example='Y'),
      depCity?: string(name='dep_city', example='HGH'),
      depDate?: string(name='dep_date', example='0000-00-00 00:00:00'),
      flightNo?: string(name='flight_no', example='CA1704'),
      passengerInfoList?: [ 
        {
          originFlightNo?: string(name='origin_flight_no', example='CA1703'),
          outUserId?: string(name='out_user_id', example='1234'),
          passengerName?: string(name='passenger_name'),
        }
      ](name='passenger_info_list'),
    }
  ](name='modify_flight_info_list'),
  otaItemId?: string(name='ota_item_id', example='1s8837sh991hsj92h'),
  reason?: string(name='reason'),
  sessionId?: string(name='session_id', example='us88s2bsbin22hjusd8i'),
  whetherRetry?: boolean(name='whether_retry', example='true'),
}

model TicketChangingApplyShrinkRequest {
  disOrderId?: string(name='dis_order_id', example='dis1234'),
  disSubOrderId?: string(name='dis_sub_order_id', example='mid1243'),
  isVoluntary?: int32(name='is_voluntary'),
  modifyFlightInfoListShrink?: string(name='modify_flight_info_list'),
  otaItemId?: string(name='ota_item_id', example='1s8837sh991hsj92h'),
  reason?: string(name='reason'),
  sessionId?: string(name='session_id', example='us88s2bsbin22hjusd8i'),
  whetherRetry?: boolean(name='whether_retry', example='true'),
}

model TicketChangingApplyResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    bookingChangedTotalFee?: int32(name='booking_changed_total_fee', example='1000'),
    bookingOriginTotalFee?: int32(name='booking_origin_total_fee', example='1000'),
    bookingPriceChanged?: boolean(name='booking_price_changed', example='true'),
    btripOrderId?: long(name='btrip_order_id', example='1234'),
    btripSubOrderId?: long(name='btrip_sub_order_id', example='1234'),
    canPay?: boolean(name='can_pay', example='true'),
    changeFee?: long(name='change_fee', example='1000'),
    deadlineTime?: string(name='deadline_time', example='0000-00-00 00:00:00'),
    disOrderId?: string(name='dis_order_id', example='dis123'),
    disSubOrderId?: string(name='dis_sub_order_id', example='mid112'),
    maxRetryTimes?: int32(name='max_retry_times', example='1'),
    nextRetryInterval?: long(name='next_retry_interval', example='1000'),
    retry?: boolean(name='retry', example='true'),
    retryClientTips?: string(name='retry_client_tips'),
    status?: int32(name='status', example='0'),
    upgradeFee?: long(name='upgrade_fee', example='1000'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model TicketChangingApplyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TicketChangingApplyResponseBody(name='body'),
}

async function ticketChangingApplyWithOptions(tmpReq: TicketChangingApplyRequest, headers: TicketChangingApplyHeaders, runtime: Util.RuntimeOptions): TicketChangingApplyResponse {
  Util.validateModel(tmpReq);
  var request = new TicketChangingApplyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.modifyFlightInfoList)) {
    request.modifyFlightInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.modifyFlightInfoList, 'modify_flight_info_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.disOrderId)) {
    body['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.disSubOrderId)) {
    body['dis_sub_order_id'] = request.disSubOrderId;
  }
  if (!Util.isUnset(request.isVoluntary)) {
    body['is_voluntary'] = request.isVoluntary;
  }
  if (!Util.isUnset(request.modifyFlightInfoListShrink)) {
    body['modify_flight_info_list'] = request.modifyFlightInfoListShrink;
  }
  if (!Util.isUnset(request.otaItemId)) {
    body['ota_item_id'] = request.otaItemId;
  }
  if (!Util.isUnset(request.reason)) {
    body['reason'] = request.reason;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['session_id'] = request.sessionId;
  }
  if (!Util.isUnset(request.whetherRetry)) {
    body['whether_retry'] = request.whetherRetry;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TicketChangingApply',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/ticket-changing/action/apply`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ticketChangingApply(request: TicketChangingApplyRequest): TicketChangingApplyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TicketChangingApplyHeaders{};
  return ticketChangingApplyWithOptions(request, headers, runtime);
}

model TicketChangingCancelHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TicketChangingCancelRequest {
  disOrderId?: string(name='dis_order_id', example='dis123'),
  disSubOrderId?: string(name='dis_sub_order_id', example='refun123'),
}

model TicketChangingCancelResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    cancelTime?: string(name='cancel_time', example='0000-00-00 00:00:00'),
    disSubOrderId?: string(name='dis_sub_order_id', example='mid1243'),
    status?: string(name='status'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210f079e16603757182131635d866a'),
}

model TicketChangingCancelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TicketChangingCancelResponseBody(name='body'),
}

async function ticketChangingCancelWithOptions(request: TicketChangingCancelRequest, headers: TicketChangingCancelHeaders, runtime: Util.RuntimeOptions): TicketChangingCancelResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.disOrderId)) {
    query['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.disSubOrderId)) {
    query['dis_sub_order_id'] = request.disSubOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TicketChangingCancel',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/ticket-changing/action/cancel`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ticketChangingCancel(request: TicketChangingCancelRequest): TicketChangingCancelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TicketChangingCancelHeaders{};
  return ticketChangingCancelWithOptions(request, headers, runtime);
}

model TicketChangingDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwis'),
}

model TicketChangingDetailRequest {
  disOrderId?: string(name='dis_order_id', example='dis123'),
  disSubOrderId?: string(name='dis_sub_order_id', example='chang123'),
}

model TicketChangingDetailResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    alipayTradeNo?: string(name='alipay_trade_no'),
    btripOrderId?: long(name='btrip_order_id', example='1002'),
    btripSubOrderId?: long(name='btrip_sub_order_id', example='37772'),
    disOrderId?: string(name='dis_order_id', example='dis123'),
    disSubOrderId?: string(name='dis_sub_order_id', example='chang123'),
    extra?: string(name='extra', example='{}'),
    flightInfoList?: [ 
      {
        airlineCode?: string(name='airline_code', example='MU'),
        airlineName?: string(name='airline_name'),
        airlineSimpleName?: string(name='airline_simple_name'),
        arrAirport?: string(name='arr_airport'),
        arrAirportCode?: string(name='arr_airport_code', example='HGH'),
        arrAirportCodeName?: string(name='arr_airport_code_name'),
        arrCity?: string(name='arr_city', example='HGH'),
        arrCityCode?: string(name='arr_city_code', example='LHW'),
        arrTerminal?: string(name='arr_terminal', example='T3'),
        arrTime?: string(name='arr_time', example='2000-00-00 00:00:00'),
        baggage?: string(name='baggage'),
        buildPrice?: long(name='build_price', example='100'),
        cabin?: string(name='cabin', example='V'),
        cabinClass?: string(name='cabin_class'),
        carrier?: string(name='carrier', example='MU3849'),
        depAirport?: string(name='dep_airport'),
        depAirportCode?: string(name='dep_airport_code', example='NGB'),
        depAirportCodeName?: string(name='dep_airport_code_name'),
        depCity?: string(name='dep_city', example='BJS'),
        depCityCode?: string(name='dep_city_code', example='NGB'),
        depTerminal?: string(name='dep_terminal', example='T4'),
        depTime?: string(name='dep_time', example='2000-01-01 00:00:00'),
        flightNo?: string(name='flight_no', example='MU3849'),
        lastCabin?: string(name='last_cabin', example='Y'),
        lastFlightNo?: string(name='last_flight_no', example='CA1982'),
        meal?: string(name='meal', example='3'),
        oilPrice?: long(name='oil_price', example='100'),
        segmentType?: int32(name='segment_type'),
        stopArrTime?: string(name='stop_arr_time', example='2000-00-00 00:00:00'),
        stopCity?: string(name='stop_city', example='NGB'),
        stopDepTime?: string(name='stop_dep_time', example='2000-00-00 00:00:00'),
        ticketPrice?: long(name='ticket_price', example='100'),
        tuigaiqianInfo?: string(name='tuigaiqian_info'),
      }
    ](name='flight_info_list'),
    lastPayTime?: string(name='last_pay_time', example='2022-12-30 11:30:00'),
    payStatus?: int32(name='pay_status', example='0'),
    payTime?: string(name='pay_time', example='2022-12-30 11:30:00'),
    settlePrice?: long(name='settle_price', example='100'),
    settleType?: int32(name='settle_type'),
    status?: int32(name='status'),
    totalChangePrice?: long(name='total_change_price', example='100'),
    totalPrice?: long(name='total_price', example='100'),
    totalUpgradePrice?: long(name='total_upgrade_price', example='100'),
    travelerInfoList?: [ 
      {
        birthDate?: string(name='birth_date', example='2000-01-01'),
        certNo?: string(name='cert_no', example='12345'),
        certType?: string(name='cert_type', example='0'),
        openTicketStatus?: int32(name='open_ticket_status', example='0'),
        passengerName?: string(name='passenger_name'),
        passengerType?: string(name='passenger_type', example='0'),
        phone?: string(name='phone', example='12345678909'),
        ticketNo?: string(name='ticket_no', example='444-000000000'),
        userId?: string(name='user_id', example='012992'),
      }
    ](name='traveler_info_list'),
  }(name='module'),
  requestId?: string(name='requestId', example='A5009956-1077-52FB-B520-EA8C7E91D722'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210f079e16603757182131635d866a'),
}

model TicketChangingDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TicketChangingDetailResponseBody(name='body'),
}

async function ticketChangingDetailWithOptions(request: TicketChangingDetailRequest, headers: TicketChangingDetailHeaders, runtime: Util.RuntimeOptions): TicketChangingDetailResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.disOrderId)) {
    query['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.disSubOrderId)) {
    query['dis_sub_order_id'] = request.disSubOrderId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TicketChangingDetail',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/ticket-changing/action/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ticketChangingDetail(request: TicketChangingDetailRequest): TicketChangingDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TicketChangingDetailHeaders{};
  return ticketChangingDetailWithOptions(request, headers, runtime);
}

model TicketChangingEnquiryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TicketChangingEnquiryRequest {
  arrCity?: string(name='arr_city', example='BJS'),
  depCity?: string(name='dep_city', example='HGH'),
  disOrderId?: string(name='dis_order_id', example='dis123'),
  isVoluntary?: int32(name='is_voluntary', example='1'),
  modifyDepartDate?: string(name='modify_depart_date', example='2000-00-00 00:00:00'),
  modifyFlightNo?: string(name='modify_flight_no', example='CA1704'),
  sessionId?: string(name='session_id', example='ece19e8b1047898a5a98b6487348c2'),
}

model TicketChangingEnquiryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    flightInfoList?: [ 
      {
        airlineInfo?: {
          airlineCode?: string(name='airline_code', example='CA'),
          airlineName?: string(name='airline_name'),
          airlineSimpleName?: string(name='airline_simple_name'),
        }(name='airline_info'),
        arrAirportInfo?: {
          airportCode?: string(name='airport_code', example='HGH'),
          airportName?: string(name='airport_name'),
          cityCode?: string(name='city_code', example='HGH'),
          cityName?: string(name='city_name'),
          terminal?: string(name='terminal', example='T4'),
        }(name='arr_airport_info'),
        cabinList?: [ 
          {
            cabin?: string(name='cabin', example='G'),
            cabinClass?: string(name='cabin_class', example='Y'),
            cabinDesc?: string(name='cabin_desc'),
            cabinDiscount?: int32(name='cabin_discount', example='80'),
            changeOtaItemRuleRq?: {
              baggageDetails?: [ 
                {
                  baggageSubItems?: [ 
                    {
                      attributes?: map[string]any(name='attributes', description='attributes'),
                      baggageSubContentVisualizes?: [ 
                        {
                          baggageDesc?: [ string ](name='baggage_desc'),
                          baggageSubContentType?: int32(name='baggage_sub_content_type', example='1'),
                          description?: {
                            desc?: string(name='desc'),
                            icon?: string(name='icon', example='demo'),
                            image?: string(name='image', example='demo'),
                            title?: string(name='title'),
                          }(name='description'),
                          imageDO?: {
                            image?: string(name='image', example='https://gw.alicdn.com/imgextra/i3/O1CN01kLt3m923XsUs6WVif_!!6000000007266-2-tps-280-300.png'),
                            largest?: string(name='largest', example='50'),
                            middle?: string(name='middle', example='40'),
                            smallest?: string(name='smallest', example='20'),
                          }(name='imageDO'),
                          isHighlight?: boolean(name='is_highlight', example='true'),
                          subTitle?: string(name='subTitle'),
                        }
                      ](name='baggage_sub_content_visualizes'),
                      baggageSubContents?: [ 
                        {
                          baggageDesc?: string(name='baggage_desc'),
                          icon?: string(name='icon'),
                          style?: int32(name='style', example='0'),
                          subTitle?: string(name='sub_title'),
                        }
                      ](name='baggage_sub_contents'),
                      content?: string(name='content', example='demo'),
                      isStruct?: boolean(name='is_struct', example='true'),
                      ptc?: string(name='ptc', example='ADT'),
                      title?: string(name='title'),
                    }
                  ](name='baggage_sub_items'),
                  index?: int32(name='index', example='0'),
                  tableHead?: string(name='table_head'),
                  tips?: {
                    logo?: string(name='logo', example='https://gw.alicdn.com/imgextra/i1/O1CN019zl3WZ22fNLxzx2cR_!!6000000007147-2-tps-125-45.png'),
                    tipsDesc?: string(name='tips_desc'),
                    tipsImage?: string(name='tips_image', example='https://gw.alicdn.com/imgextra/i3/O1CN01rJxjw61f3bXNHAmlk_!!6000000003951-2-tps-1050-675.png'),
                  }(name='tips'),
                  title?: string(name='title'),
                  type?: int32(name='type', example='1'),
                }
              ](name='baggage_details'),
              changeDetails?: [ 
                {
                  extraContents?: [ 
                    {
                      content?: string(name='content', example='xxx'),
                      icon?: string(name='icon'),
                      title?: string(name='title'),
                    }
                  ](name='extra_contents'),
                  index?: int32(name='index', example='0'),
                  refundSubItems?: [ 
                    {
                      content?: string(name='content', example='demo'),
                      isStruct?: boolean(name='is_struct', example='true'),
                      ptc?: string(name='ptc', example='ADT'),
                      refundSubContents?: [ 
                        {
                          feeDesc?: string(name='fee_desc'),
                          feeRange?: string(name='fee_range'),
                          style?: string(name='style', example='0'),
                        }
                      ](name='refund_sub_contents'),
                      title?: string(name='title'),
                    }
                  ](name='refund_sub_items'),
                  tableHead?: string(name='table_head'),
                  title?: string(name='title'),
                  type?: int32(name='type', example='1'),
                }
              ](name='change_details'),
              refundDetails?: [ 
                {
                  extraContents?: [ 
                    {
                      content?: string(name='content', example='xxx'),
                      icon?: string(name='icon'),
                      title?: string(name='title'),
                    }
                  ](name='extra_contents'),
                  index?: int32(name='index', example='0'),
                  refundSubItems?: [ 
                    {
                      content?: string(name='content', example='demo'),
                      isStruct?: boolean(name='is_struct', example='true'),
                      ptc?: string(name='ptc', example='ADT'),
                      refundSubContents?: [ 
                        {
                          feeDesc?: string(name='fee_desc'),
                          feeRange?: string(name='fee_range'),
                          style?: string(name='style', example='0'),
                        }
                      ](name='refund_sub_contents'),
                      title?: string(name='title'),
                    }
                  ](name='refund_sub_items'),
                  tableHead?: string(name='table_head'),
                  title?: string(name='title'),
                  type?: int32(name='type', example='1'),
                }
              ](name='refund_details'),
            }(name='change_ota_item_rule_rq'),
            childCabin?: string(name='child_cabin', example='G'),
            leftNum?: string(name='left_num', example='0'),
            modifyPriceList?: [ 
              {
                passengerType?: int32(name='passenger_type', example='0'),
                ticketPrice?: int32(name='ticket_price', example='100'),
                upgradeFee?: int32(name='upgrade_fee', example='100'),
                upgradePrice?: int32(name='upgrade_price', example='100'),
              }
            ](name='modify_price_list'),
            otaItemid?: string(name='ota_itemid', example='360379a11ee84e9aa011baa41b758fe6'),
          }
        ](name='cabin_list'),
        carrierAirline?: string(name='carrier_airline', example='CA1704'),
        carrierNo?: string(name='carrier_no', example='CA1704'),
        depAirportInfo?: {
          airportCode?: string(name='airport_code', example='PEK'),
          airportName?: string(name='airport_name'),
          cityCode?: string(name='city_code', example='BJS'),
          cityName?: string(name='city_name'),
          terminal?: string(name='terminal', example='T3'),
        }(name='dep_airport_info'),
        depCityCode?: string(name='dep_city_code', example='HGH'),
        flightNo?: string(name='flight_no', example='CA1351'),
        isShare?: boolean(name='is_share', example='false'),
        lowestCabin?: string(name='lowest_cabin', example='Y'),
        lowestCabinClass?: string(name='lowest_cabin_class', example='Y'),
        lowestCabinDesc?: string(name='lowest_cabin_desc'),
        lowestCabinNum?: string(name='lowest_cabin_num', example='0'),
        lowestCabinPrice?: [ 
          {
            passengerType?: int32(name='passenger_type', example='0'),
            ticketPrice?: int32(name='ticket_price', example='100'),
            upgradeFee?: int32(name='upgrade_fee', example='100'),
            upgradePrice?: int32(name='upgrade_price', example='100'),
          }
        ](name='lowest_cabin_price'),
        modifyFlightArrTime?: string(name='modify_flight_arr_time', example='2000-00-00 00:00:00'),
        modifyFlightDepDate?: string(name='modify_flight_dep_date', example='2000-00-00 00:00:00'),
        modifyFlightDepTime?: string(name='modify_flight_dep_time', example='2000-00-00 00:00:00'),
        sessionId?: string(name='session_id', example='d1fb9e0a794f45e1b762d36ff1d17zz'),
      }
    ](name='flight_info_list'),
  }(name='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model TicketChangingEnquiryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TicketChangingEnquiryResponseBody(name='body'),
}

async function ticketChangingEnquiryWithOptions(request: TicketChangingEnquiryRequest, headers: TicketChangingEnquiryHeaders, runtime: Util.RuntimeOptions): TicketChangingEnquiryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.arrCity)) {
    query['arr_city'] = request.arrCity;
  }
  if (!Util.isUnset(request.depCity)) {
    query['dep_city'] = request.depCity;
  }
  if (!Util.isUnset(request.disOrderId)) {
    query['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.isVoluntary)) {
    query['is_voluntary'] = request.isVoluntary;
  }
  if (!Util.isUnset(request.modifyDepartDate)) {
    query['modify_depart_date'] = request.modifyDepartDate;
  }
  if (!Util.isUnset(request.modifyFlightNo)) {
    query['modify_flight_no'] = request.modifyFlightNo;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['session_id'] = request.sessionId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TicketChangingEnquiry',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/ticket-changing/action/enquiry`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ticketChangingEnquiry(request: TicketChangingEnquiryRequest): TicketChangingEnquiryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TicketChangingEnquiryHeaders{};
  return ticketChangingEnquiryWithOptions(request, headers, runtime);
}

model TicketChangingFlightListHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TicketChangingFlightListRequest {
  arrCity?: string(name='arr_city', example='BJS'),
  depCity?: string(name='dep_city', example='HGH'),
  depDate?: string(name='dep_date', example='2000-00-00 00:00:00'),
  disOrderId?: string(name='dis_order_id', example='dis123'),
  isVoluntary?: int32(name='is_voluntary'),
  travelerInfoList?: [ 
    {
      arrCity?: string(name='arr_city', example='BJS'),
      depCity?: string(name='dep_city', example='HGH'),
      name?: string(name='name'),
      type?: string(name='type', example='ADULT'),
      userId?: string(name='user_id', example='23231'),
    }
  ](name='traveler_info_list'),
}

model TicketChangingFlightListShrinkRequest {
  arrCity?: string(name='arr_city', example='BJS'),
  depCity?: string(name='dep_city', example='HGH'),
  depDate?: string(name='dep_date', example='2000-00-00 00:00:00'),
  disOrderId?: string(name='dis_order_id', example='dis123'),
  isVoluntary?: int32(name='is_voluntary'),
  travelerInfoListShrink?: string(name='traveler_info_list'),
}

model TicketChangingFlightListResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    flightInfoList?: [ 
      {
        airlineInfo?: {
          airlineCode?: string(name='airline_code', example='CA'),
          airlineName?: string(name='airline_name'),
          airlineSimpleName?: string(name='airline_simple_name'),
        }(name='airline_info'),
        arrAirportInfo?: {
          airportCode?: string(name='airport_code', example='HGH'),
          airportName?: string(name='airport_name'),
          cityCode?: string(name='city_code', example='HGH'),
          cityName?: string(name='city_name'),
          terminal?: string(name='terminal', example='T4'),
        }(name='arr_airport_info'),
        cabinList?: [ 
          {
            cabin?: string(name='cabin', example='G'),
            cabinClass?: string(name='cabin_class', example='Y'),
            cabinDesc?: string(name='cabin_desc'),
            cabinDiscount?: int32(name='cabin_discount', example='80'),
            childCabin?: string(name='child_cabin', example='G'),
            leftNum?: string(name='left_num', example='A'),
            modifyPriceList?: [ 
              {
                passengerType?: int32(name='passenger_type', example='0'),
                ticketPrice?: int32(name='ticket_price', example='100'),
                upgradeFee?: int32(name='upgrade_fee', example='100'),
                upgradePrice?: int32(name='upgrade_price', example='100'),
              }
            ](name='modify_price_list'),
            otaItemid?: string(name='ota_itemid', example='"360379a11ee84e9aa011baa41b758fe6"'),
          }
        ](name='cabin_list'),
        carrierAirline?: string(name='carrier_airline', example='CA1704'),
        carrierNo?: string(name='carrier_no', example='CA1704'),
        depAirportInfo?: {
          airportCode?: string(name='airport_code', example='PEK'),
          airportName?: string(name='airport_name'),
          cityCode?: string(name='city_code', example='BJS'),
          cityName?: string(name='city_name'),
          terminal?: string(name='terminal', example='T3'),
        }(name='dep_airport_info'),
        flightNo?: string(name='flight_no', example='CA1704'),
        flightSize?: string(name='flight_size'),
        flightType?: string(name='flight_type'),
        isProtocol?: boolean(name='is_protocol', example='true'),
        isShare?: boolean(name='is_share', example='false'),
        isStop?: boolean(name='is_stop', example='false'),
        lowestCabin?: string(name='lowest_cabin', example='Y'),
        lowestCabinClass?: string(name='lowest_cabin_class', example='Y'),
        lowestCabinDesc?: string(name='lowest_cabin_desc'),
        lowestCabinNum?: string(name='lowest_cabin_num'),
        lowestCabinPrice?: [ 
          {
            passengerType?: int32(name='passenger_type', example='0'),
            ticketPrice?: int32(name='ticket_price', example='100'),
            upgradeFee?: int32(name='upgrade_fee', example='100'),
            upgradePrice?: int32(name='upgrade_price', example='100'),
          }
        ](name='lowest_cabin_price'),
        mealDesc?: string(name='meal_desc'),
        modifyFlightArrTime?: string(name='modify_flight_arr_time', example='2000-00-00 00:00:00'),
        modifyFlightDepDate?: string(name='modify_flight_dep_date', example='2000-00-00 00:00:00'),
        modifyFlightDepTime?: string(name='modify_flight_dep_time', example='2000-00-00 00:00:00'),
        sessionId?: string(name='session_id', example='d1fb9e0a794f45e1b762d36ff1d17zz'),
        stopArrTime?: string(name='stop_arr_time', example='2000-00-00 00:00:00'),
        stopCity?: string(name='stop_city', example='HGH'),
        stopDepTime?: string(name='stop_dep_time', example='2000-00-00 00:00:00'),
      }
    ](name='flight_info_list'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model TicketChangingFlightListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TicketChangingFlightListResponseBody(name='body'),
}

async function ticketChangingFlightListWithOptions(tmpReq: TicketChangingFlightListRequest, headers: TicketChangingFlightListHeaders, runtime: Util.RuntimeOptions): TicketChangingFlightListResponse {
  Util.validateModel(tmpReq);
  var request = new TicketChangingFlightListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.travelerInfoList)) {
    request.travelerInfoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.travelerInfoList, 'traveler_info_list', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.arrCity)) {
    query['arr_city'] = request.arrCity;
  }
  if (!Util.isUnset(request.depCity)) {
    query['dep_city'] = request.depCity;
  }
  if (!Util.isUnset(request.depDate)) {
    query['dep_date'] = request.depDate;
  }
  if (!Util.isUnset(request.disOrderId)) {
    query['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.isVoluntary)) {
    query['is_voluntary'] = request.isVoluntary;
  }
  if (!Util.isUnset(request.travelerInfoListShrink)) {
    query['traveler_info_list'] = request.travelerInfoListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TicketChangingFlightList',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/huge/dtb-flight/v1/ticket-changing-flight/action/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ticketChangingFlightList(request: TicketChangingFlightListRequest): TicketChangingFlightListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TicketChangingFlightListHeaders{};
  return ticketChangingFlightListWithOptions(request, headers, runtime);
}

model TicketChangingPayHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='feth00jqwls'),
}

model TicketChangingPayRequest {
  corpPayPrice?: long(name='corp_pay_price', example='100'),
  disOrderId?: string(name='dis_order_id', example='dis123'),
  disSubOrderId?: string(name='dis_sub_order_id', example='refun123'),
  extra?: map[string]string(name='extra'),
  personalPayPrice?: long(name='personal_pay_price', example='100'),
  totalPayPrice?: long(name='total_pay_price', example='100'),
}

model TicketChangingPayShrinkRequest {
  corpPayPrice?: long(name='corp_pay_price', example='100'),
  disOrderId?: string(name='dis_order_id', example='dis123'),
  disSubOrderId?: string(name='dis_sub_order_id', example='refun123'),
  extraShrink?: string(name='extra'),
  personalPayPrice?: long(name='personal_pay_price', example='100'),
  totalPayPrice?: long(name='total_pay_price', example='100'),
}

model TicketChangingPayResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    canRetry?: boolean(name='can_retry', example='true'),
    payPrice?: long(name='pay_price', example='1000'),
    payStatus?: int32(name='pay_status'),
    payTime?: string(name='pay_time', example='0000-00-00 00:00:00'),
    tradeNo?: string(name='trade_no', example='23098276578908765'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model TicketChangingPayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TicketChangingPayResponseBody(name='body'),
}

async function ticketChangingPayWithOptions(tmpReq: TicketChangingPayRequest, headers: TicketChangingPayHeaders, runtime: Util.RuntimeOptions): TicketChangingPayResponse {
  Util.validateModel(tmpReq);
  var request = new TicketChangingPayShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extra)) {
    request.extraShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extra, 'extra', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.corpPayPrice)) {
    body['corp_pay_price'] = request.corpPayPrice;
  }
  if (!Util.isUnset(request.disOrderId)) {
    body['dis_order_id'] = request.disOrderId;
  }
  if (!Util.isUnset(request.disSubOrderId)) {
    body['dis_sub_order_id'] = request.disSubOrderId;
  }
  if (!Util.isUnset(request.extraShrink)) {
    body['extra'] = request.extraShrink;
  }
  if (!Util.isUnset(request.personalPayPrice)) {
    body['personal_pay_price'] = request.personalPayPrice;
  }
  if (!Util.isUnset(request.totalPayPrice)) {
    body['total_pay_price'] = request.totalPayPrice;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TicketChangingPay',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/dtb-flight/v1/ticket-changing/action/pay`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ticketChangingPay(request: TicketChangingPayRequest): TicketChangingPayResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TicketChangingPayHeaders{};
  return ticketChangingPayWithOptions(request, headers, runtime);
}

model TrainBillSettlementQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model TrainBillSettlementQueryRequest {
  pageNo?: int32(name='page_no', example='1'),
  pageSize?: int32(name='page_size', example='20'),
  periodEnd?: string(name='period_end', example='2021-10-02'),
  periodStart?: string(name='period_start', example='2021-10-01'),
}

model TrainBillSettlementQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category', example='6'),
    corpId?: string(name='corp_id'),
    dataList?: [ 
      {
        alipayTradeNo?: string(name='alipay_trade_no', example='2021123432260'),
        applyExtendField?: string(name='apply_extend_field', description='审批扩展自定义字段'),
        applyId?: string(name='apply_id', example='103189557'),
        arrDate?: string(name='arr_date', example='2021-10-13'),
        arrStation?: string(name='arr_station'),
        arrTime?: string(name='arr_time', example='12:30'),
        billRecordTime?: string(name='bill_record_time', example='2022-05-15T22:27Z'),
        bookTime?: string(name='book_time', example='2021-10-08 23:38:55'),
        bookerId?: string(name='booker_id', example='al_xinuan.zsy'),
        bookerJobNo?: string(name='booker_job_no'),
        bookerName?: string(name='booker_name'),
        capitalDirection?: string(name='capital_direction', example='1'),
        cascadeDepartment?: string(name='cascade_department'),
        changeFee?: double(name='change_fee', example='23.0'),
        costCenter?: string(name='cost_center'),
        costCenterNumber?: string(name='cost_center_number', example='T85'),
        coupon?: double(name='coupon', example='0'),
        department?: string(name='department'),
        departmentId?: string(name='department_id'),
        deptDate?: string(name='dept_date', example='2021-10-14'),
        deptStation?: string(name='dept_station'),
        deptTime?: string(name='dept_time', example='09:44'),
        feeType?: string(name='fee_type', example='6001'),
        index?: string(name='index', example='4740293'),
        invoiceTitle?: string(name='invoice_title'),
        orderId?: string(name='order_id', example='23432692343243432'),
        orderPrice?: double(name='order_price', example='350'),
        overApplyId?: string(name='over_apply_id', example='534545345'),
        primaryId?: long(name='primary_id', example='4740293'),
        projectCode?: string(name='project_code', example='2345235435'),
        projectName?: string(name='project_name'),
        refundFee?: double(name='refund_fee', example='0'),
        remark?: string(name='remark'),
        runTime?: string(name='run_time'),
        seatNo?: string(name='seat_no', example='004F'),
        seatType?: string(name='seat_type'),
        serviceFee?: double(name='service_fee', example='23.0'),
        settlementFee?: double(name='settlement_fee', example='350'),
        settlementGrantFee?: double(name='settlement_grant_fee', example='4.56'),
        settlementTime?: string(name='settlement_time', example='2021-10-08 23:39:01'),
        settlementType?: string(name='settlement_type', example='2'),
        status?: int32(name='status', example='1'),
        taxRate?: string(name='tax_rate', description='税率', example='6%'),
        ticketNo?: string(name='ticket_no', example='2115242342342424067354'),
        ticketPrice?: double(name='ticket_price', example='350'),
        trainNo?: string(name='train_no', example='G906'),
        trainType?: string(name='train_type'),
        travelerId?: string(name='traveler_id'),
        travelerJobNo?: string(name='traveler_job_no'),
        travelerName?: string(name='traveler_name'),
        voucherType?: int32(name='voucher_type', example='11'),
      }
    ](name='data_list'),
    periodEnd?: string(name='period_end', example='2021-10-14'),
    periodStart?: string(name='period_start', example='2021-10-13'),
    totalNum?: long(name='total_num', example='2694'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model TrainBillSettlementQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TrainBillSettlementQueryResponseBody(name='body'),
}

async function trainBillSettlementQueryWithOptions(request: TrainBillSettlementQueryRequest, headers: TrainBillSettlementQueryHeaders, runtime: Util.RuntimeOptions): TrainBillSettlementQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.periodEnd)) {
    query['period_end'] = request.periodEnd;
  }
  if (!Util.isUnset(request.periodStart)) {
    query['period_start'] = request.periodStart;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TrainBillSettlementQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/bill-settlement`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function trainBillSettlementQuery(request: TrainBillSettlementQueryRequest): TrainBillSettlementQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainBillSettlementQueryHeaders{};
  return trainBillSettlementQueryWithOptions(request, headers, runtime);
}

model TrainExceedApplyQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model TrainExceedApplyQueryRequest {
  applyId?: long(name='apply_id', example='349720'),
}

model TrainExceedApplyQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id', example='apply1'),
    applyIntentionInfoDO?: {
      arrCity?: string(name='arr_city', example='BJS'),
      arrCityName?: string(name='arr_city_name'),
      arrStation?: string(name='arr_station'),
      arrTime?: string(name='arr_time', example='2022-02-24T09:55Z'),
      depCity?: string(name='dep_city', example='SHA'),
      depCityName?: string(name='dep_city_name'),
      depStation?: string(name='dep_station'),
      depTime?: string(name='dep_time', example='2022-02-24T09:55Z'),
      price?: long(name='price', example='1000'),
      seatName?: string(name='seat_name'),
      trainNo?: string(name='train_no', example='G39'),
      trainTypeDesc?: string(name='train_type_desc'),
      type?: int32(name='type', example='32'),
    }(name='apply_intention_info_d_o'),
    btripCause?: string(name='btrip_cause'),
    corpId?: string(name='corp_id', example='corp1'),
    exceedReason?: string(name='exceed_reason'),
    exceedType?: int32(name='exceed_type', example='32'),
    originStandard?: string(name='origin_standard', example='10000'),
    status?: int32(name='status', example='1'),
    submitTime?: string(name='submit_time', example='2022-02-24T09:55Z'),
    thirdpartApplyId?: string(name='thirdpart_apply_id', example='0001A1100000007EX08O'),
    thirdpartCorpId?: string(name='thirdpart_corp_id', example='testcorp1'),
    userId?: string(name='user_id', example='user1'),
  }(name='module'),
  requestId?: string(name='requestId', example='BE3FBA15-C5E1-5B99-8120-9FB84A04FB81'),
  success?: boolean(name='success', example='True'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model TrainExceedApplyQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TrainExceedApplyQueryResponseBody(name='body'),
}

async function trainExceedApplyQueryWithOptions(request: TrainExceedApplyQueryRequest, headers: TrainExceedApplyQueryHeaders, runtime: Util.RuntimeOptions): TrainExceedApplyQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TrainExceedApplyQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/apply/v1/train-exceed`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function trainExceedApplyQuery(request: TrainExceedApplyQueryRequest): TrainExceedApplyQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainExceedApplyQueryHeaders{};
  return trainExceedApplyQueryWithOptions(request, headers, runtime);
}

model TrainOrderListQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model TrainOrderListQueryRequest {
  allApply?: boolean(name='all_apply', example='false'),
  applyId?: long(name='apply_id', example='11657'),
  departId?: string(name='depart_id'),
  endTime?: string(name='end_time', example='2022-05-15 22:27:00'),
  page?: int32(name='page', example='3'),
  pageSize?: int32(name='page_size', example='25'),
  startTime?: string(name='start_time', example='2022-05-15 22:27:00'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', example='CS-EDES9898'),
  updateEndTime?: string(name='update_end_time', example='2022-05-15 22:27:00'),
  updateStartTime?: string(name='update_start_time', example='2022-05-15 22:27:00'),
  userId?: string(name='user_id'),
}

model TrainOrderListQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: [ 
    {
      applyId?: long(name='apply_id', example='11367'),
      arrCity?: string(name='arr_city'),
      arrCityAdCode?: string(name='arr_city_ad_code'),
      arrStation?: string(name='arr_station'),
      arrTime?: string(name='arr_time', example='2022-05-15T22:27Z'),
      btripTitle?: string(name='btrip_title'),
      contactName?: string(name='contact_name'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      costCenter?: {
        corpId?: string(name='corp_id'),
        id?: long(name='id', example='11643'),
        name?: string(name='name'),
        number?: string(name='number', example='CS112234'),
      }(name='cost_center'),
      depCity?: string(name='dep_city'),
      depCityAdCode?: string(name='dep_city_ad_code'),
      depStation?: string(name='dep_station'),
      depTime?: string(name='dep_time', example='2022-05-15T22:27Z'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      gmtCreate?: string(name='gmt_create', example='2022-05-15T22:27Z'),
      gmtModified?: string(name='gmt_modified', example='2022-05-15T22:27Z'),
      id?: long(name='id', example='1478652'),
      invoice?: {
        id?: long(name='id', example='11324'),
        title?: string(name='title'),
      }(name='invoice'),
      priceInfoList?: [ 
        {
          categoryCode?: int32(name='category_code', example='1'),
          categoryType?: int32(name='category_type', example='1'),
          endCity?: string(name='end_city'),
          endTime?: string(name='end_time', example='2022-05-15T22:27Z'),
          gmtCreate?: string(name='gmt_create', example='2022-05-15T22:27Z'),
          originalTrainNo?: string(name='original_train_no', example='CS-663'),
          passengerName?: string(name='passenger_name'),
          payType?: int32(name='pay_type', example='1'),
          price?: double(name='price', example='100'),
          seatType?: string(name='seat_type'),
          startCity?: string(name='start_city'),
          startTime?: string(name='start_time', example='2022-05-15T22:27Z'),
          tradeId?: string(name='trade_id', example='cs1165734212'),
          trainNo?: string(name='train_no', example='Z1521'),
          type?: int32(name='type', example='1'),
        }
      ](name='price_info_list'),
      projectCode?: string(name='project_code', example='PCXIDF'),
      projectId?: long(name='project_id', example='12425'),
      projectTitle?: string(name='project_title'),
      riderName?: string(name='rider_name'),
      runTime?: string(name='run_time', example='100'),
      seatType?: string(name='seat_type'),
      status?: int32(name='status', example='0'),
      thirdPartProjectId?: string(name='third_part_project_id', example='CS-SKPFDS'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', example='CSIODJUSN'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', example='CS-IT89D'),
      ticketCount?: int32(name='ticket_count', example='1'),
      ticketNo12306?: string(name='ticket_no12306', example='CS-663'),
      trainNumber?: string(name='train_number', example='CS-663'),
      trainType?: string(name='train_type'),
      userAffiliateList?: [ 
        {
          userId?: string(name='user_id'),
          userName?: string(name='user_name'),
        }
      ](name='user_affiliate_list'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='module'),
  pageInfo?: {
    page?: int32(name='page', example='1'),
    pageSize?: int32(name='page_size', example='50'),
    totalNumber?: int32(name='total_number', example='100'),
  }(name='page_info'),
  requestId?: string(name='requestId', example='F93C3EBD-17BE-5FE6-BF06-96A6F1AC8DC5'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model TrainOrderListQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TrainOrderListQueryResponseBody(name='body'),
}

async function trainOrderListQueryWithOptions(request: TrainOrderListQueryRequest, headers: TrainOrderListQueryHeaders, runtime: Util.RuntimeOptions): TrainOrderListQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.allApply)) {
    query['all_apply'] = request.allApply;
  }
  if (!Util.isUnset(request.applyId)) {
    query['apply_id'] = request.applyId;
  }
  if (!Util.isUnset(request.departId)) {
    query['depart_id'] = request.departId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['end_time'] = request.endTime;
  }
  if (!Util.isUnset(request.page)) {
    query['page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['start_time'] = request.startTime;
  }
  if (!Util.isUnset(request.thirdpartApplyId)) {
    query['thirdpart_apply_id'] = request.thirdpartApplyId;
  }
  if (!Util.isUnset(request.updateEndTime)) {
    query['update_end_time'] = request.updateEndTime;
  }
  if (!Util.isUnset(request.updateStartTime)) {
    query['update_start_time'] = request.updateStartTime;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TrainOrderListQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/order-list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function trainOrderListQuery(request: TrainOrderListQueryRequest): TrainOrderListQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainOrderListQueryHeaders{};
  return trainOrderListQueryWithOptions(request, headers, runtime);
}

model TrainOrderQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model TrainOrderQueryRequest {
  orderId?: long(name='order_id', example='2627694109810885616'),
  userId?: string(name='user_id'),
}

model TrainOrderQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    changeTicketInfoList?: [ 
      {
        changeCoachNo?: string(name='change_coach_no', example='03'),
        changeGapFee?: double(name='change_gap_fee', example='100'),
        changeHandlingFee?: double(name='change_handling_fee', example='100'),
        changeSeatNo?: string(name='change_seat_no', example='004C'),
        changeSeatTypeName?: string(name='change_seat_type_name'),
        changeServiceFee?: double(name='change_service_fee', example='100'),
        changeTrainNo?: string(name='change_train_no', example='D103'),
        changeTrainTypeName?: string(name='change_train_type_name'),
        checkInTime?: string(name='check_in_time', example='2022-05-15T22:27Z'),
        checkOutTime?: string(name='check_out_time', example='2022-05-15T22:27Z'),
        endTime?: string(name='end_time', example='2022-05-15T22:27Z'),
        fromStationName?: string(name='from_station_name'),
        gmtCreate?: string(name='gmt_create', example='2022-05-15T22:27Z'),
        gmtModify?: string(name='gmt_modify', example='2022-05-15T22:27Z'),
        originTicketNo?: string(name='origin_ticket_no', example='CS987JKDF'),
        outTicketStatus?: string(name='out_ticket_status', example='m'),
        startTime?: string(name='start_time', example='2022-05-15T22:27Z'),
        ticketNo?: string(name='ticket_no', example='CS987JKDF'),
        toStationName?: string(name='to_station_name'),
      }
    ](name='change_ticket_info_list'),
    invoiceInfo?: {
      id?: long(name='id', example='11754'),
      title?: string(name='title'),
    }(name='invoice_info'),
    orderBaseInfo?: {
      applyId?: string(name='apply_id', example='11657'),
      btripTitle?: string(name='btrip_title'),
      contactName?: string(name='contact_name'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      exceedApplyId?: string(name='exceed_apply_id', description='火车票超标审批id', example='1422113021033961000'),
      exceedThirdPartApplyId?: string(name='exceed_third_part_apply_id', description='火车票超标审批三方id', example='2022113021030003600001715'),
      gmtCreate?: string(name='gmt_create', example='2022-05-15T22:27Z'),
      gmtModify?: string(name='gmt_modify', example='2022-05-15T22:27Z'),
      itineraryId?: string(name='itinerary_id', example='kaxasevesguikxn123kixnghid'),
      orderId?: long(name='order_id', example='2627694109810885616'),
      orderStatus?: int32(name='order_status', example='4'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', example='CS-EDES9898'),
      thirdpartCorpId?: string(name='thirdpart_corp_id'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', example='kaxasevesguikxn123kixnghid'),
      tripType?: int32(name='trip_type', example='0'),
      userId?: string(name='user_id'),
    }(name='order_base_info'),
    passengerInfoList?: [ 
      {
        costCenterId?: long(name='cost_center_id', example='11564'),
        costCenterName?: string(name='cost_center_name'),
        costCenterNumber?: string(name='cost_center_number', example='01'),
        projectCode?: string(name='project_code', example='CSP-01'),
        projectId?: long(name='project_id', example='22562'),
        projectTitle?: string(name='project_title'),
        thirdpartProjectId?: string(name='thirdpart_project_id', example='CS-22562'),
        userId?: string(name='user_id'),
        userName?: string(name='user_name'),
        userType?: int32(name='user_type', example='0'),
      }
    ](name='passenger_info_list'),
    priceInfoList?: [ 
      {
        categoryCode?: int32(name='category_code', example='1'),
        gmtCreate?: string(name='gmt_create', example='2022-05-15T22:27Z'),
        passengerName?: string(name='passenger_name'),
        payType?: int32(name='pay_type', example='1'),
        price?: double(name='price', example='0'),
        tradeId?: string(name='trade_id', example='12312312001'),
        type?: int32(name='type', example='1'),
      }
    ](name='price_info_list'),
    refundTicketInfoList?: [ 
      {
        gmtCreate?: string(name='gmt_create', example='2022-05-15T22:27Z'),
        gmtModify?: string(name='gmt_modify', example='2022-05-15T22:27Z'),
        refundFee?: double(name='refund_fee', example='10'),
        refundServiceFee?: double(name='refund_service_fee', example='10'),
        ticketNo?: string(name='ticket_no', example='CS987JKDF'),
      }
    ](name='refund_ticket_info_list'),
    ticketInfoList?: [ 
      {
        changed?: boolean(name='changed', example='false'),
        checkInTime?: string(name='check_in_time', example='2022-05-15T22:27Z'),
        checkOutTime?: string(name='check_out_time', example='2022-05-15T22:27Z'),
        coachNo?: string(name='coach_no', example='01'),
        endTime?: string(name='end_time', example='2022-05-15T22:27Z'),
        gmtCreate?: string(name='gmt_create', example='2022-05-15T22:27Z'),
        gmtModify?: string(name='gmt_modify', example='2022-05-15T22:27Z'),
        outTicketStatus?: string(name='out_ticket_status', example='m'),
        payType?: int32(name='pay_type', example='1'),
        seatNo?: string(name='seat_no', example='A001'),
        seatTypeName?: string(name='seat_type_name'),
        serviceFee?: double(name='service_fee', example='10'),
        startTime?: string(name='start_time', example='2022-05-15T22:27Z'),
        ticketNo?: string(name='ticket_no', example='CS987JKDF'),
        ticketPrice?: double(name='ticket_price', example='100'),
        ticketStatus?: int32(name='ticket_status', example='1'),
        trainTypeName?: string(name='train_type_name'),
        userId?: string(name='user_id'),
      }
    ](name='ticket_info_list'),
    trainInfo?: {
      arrTime?: string(name='arr_time', example='2022-05-15T22:27Z'),
      depTime?: string(name='dep_time', example='2022-05-15T22:27Z'),
      fromStationName?: string(name='from_station_name'),
      runTime?: long(name='run_time', example='100'),
      toStationName?: string(name='to_station_name'),
      trainNo?: string(name='train_no', example='CS-150'),
    }(name='train_info'),
  }(name='module'),
  requestId?: string(name='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='21041ce316577904808056433edbb2'),
}

model TrainOrderQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TrainOrderQueryResponseBody(name='body'),
}

async function trainOrderQueryWithOptions(request: TrainOrderQueryRequest, headers: TrainOrderQueryHeaders, runtime: Util.RuntimeOptions): TrainOrderQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TrainOrderQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v1/order`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function trainOrderQuery(request: TrainOrderQueryRequest): TrainOrderQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainOrderQueryHeaders{};
  return trainOrderQueryWithOptions(request, headers, runtime);
}

model TrainOrderQueryV2Headers {
  commonHeaders?: map[string]string,
  xAcsBtripCorpToken?: string(name='x-acs-btrip-corp-token', example='112dcasca'),
}

model TrainOrderQueryV2Request {
  orderId?: long(name='order_id', example='12342123212'),
  userId?: string(name='user_id', example='123121112'),
}

model TrainOrderQueryV2ResponseBody = {
  code?: string(name='code', example='0'),
  message?: string(name='message'),
  module?: {
    changeTicketInfoList?: [ 
      {
        changeCoachNo?: string(name='change_coach_no', example='03'),
        changeGapFee?: double(name='change_gap_fee', example='100'),
        changeHandlingFee?: double(name='change_handling_fee', example='100'),
        changeSeatNo?: string(name='change_seat_no', example='004C'),
        changeSeatTypeName?: string(name='change_seat_type_name'),
        changeServiceFee?: double(name='change_service_fee', example='100'),
        changeTrainNo?: string(name='change_train_no', example='D103'),
        changeTrainTypeName?: string(name='change_train_type_name'),
        checkInTime?: string(name='check_in_time'),
        checkOutTime?: string(name='check_out_time'),
        endTime?: string(name='end_time'),
        fromCityName?: string(name='from_city_name'),
        fromStationName?: string(name='from_station_name'),
        gmtCreate?: string(name='gmt_create'),
        gmtModify?: string(name='gmt_modify'),
        originTicketNo?: string(name='origin_ticket_no', example='CS987JKDF'),
        outTicketStatus?: string(name='out_ticket_status', example='m'),
        segmentIndex?: int32(name='segment_index', example='0'),
        startTime?: string(name='start_time', example='2022-05-15T22:27Z'),
        ticketNo?: string(name='ticket_no', example='CS987JKDF'),
        toCityName?: string(name='to_city_name'),
        toStationName?: string(name='to_station_name'),
        useTicket?: string(name='use_ticket', example='0'),
        userId?: string(name='user_id', example='12312'),
      }
    ](name='change_ticket_info_list'),
    invoiceInfo?: {
      id?: long(name='id', example='3815504'),
      title?: string(name='title'),
    }(name='invoice_info'),
    orderBaseInfo?: {
      applyId?: string(name='apply_id', example='1003784135'),
      btripTitle?: string(name='btrip_title'),
      contactName?: string(name='contact_name'),
      contactPhone?: string(name='contact_phone', example='12110002222'),
      corpId?: string(name='corp_id', example='btripsy4yd7v0gdpdntpp'),
      corpName?: string(name='corp_name'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      exceedApplyId?: string(name='exceed_apply_id', example='1422113021033961000'),
      exceedThirdpartApplyId?: string(name='exceed_thirdpart_apply_id', example='1422113021033961000'),
      gmtCreate?: string(name='gmt_create'),
      gmtModify?: string(name='gmt_modify'),
      itineraryId?: string(name='itinerary_id', example='42942924'),
      orderId?: long(name='order_id', example='2849819724653209258'),
      orderStatus?: int32(name='order_status', example='4'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', example='01-2023-01214'),
      thirdpartDepartId?: string(name='thirdpart_depart_id', example='DHDI2209141OEGHWRN'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', example='CS-FLIGHT'),
      tripType?: int32(name='trip_type', example='0'),
      userId?: string(name='user_id', example='1231212'),
      userNick?: string(name='user_nick'),
    }(name='order_base_info'),
    passengerInfoList?: [ 
      {
        costCenterId?: long(name='cost_center_id', example='11564'),
        costCenterName?: string(name='cost_center_name'),
        costCenterNumber?: string(name='cost_center_number', example='CS-3345'),
        projectCode?: string(name='project_code', example='CS-PROJECT'),
        projectId?: long(name='project_id', example='133576'),
        projectTitle?: string(name='project_title'),
        thirdpartCostCenterId?: string(name='thirdpart_cost_center_id', example='CS-KDISL'),
        thirdpartProjectId?: string(name='thirdpart_project_id', example='CS-22562'),
        userId?: string(name='user_id', example='1231231'),
        userName?: string(name='user_name'),
        userType?: int32(name='user_type', example='0'),
      }
    ](name='passenger_info_list'),
    priceInfoList?: [ 
      {
        categoryCode?: int32(name='category_code'),
        gmtCreate?: string(name='gmt_create', example='1669344020'),
        passengerName?: string(name='passenger_name'),
        payType?: int32(name='pay_type', example='4'),
        price?: double(name='price', example='176000'),
        tradeId?: string(name='trade_id', example='12345678910987654321'),
        type?: int32(name='type'),
      }
    ](name='price_info_list'),
    refundTicketInfoList?: [ 
      {
        gmtCreate?: string(name='gmt_create'),
        gmtModify?: string(name='gmt_modify'),
        refundFee?: double(name='refund_fee', example='10'),
        refundServiceFee?: double(name='refund_service_fee', example='10'),
        ticketNo?: string(name='ticket_no', example='CS987JKDF'),
        userId?: string(name='user_id', example='1231231'),
      }
    ](name='refund_ticket_info_list'),
    trainOrderInfo?: {
      trainInfoList?: [ 
        {
          arrTime?: string(name='arr_time'),
          depTime?: string(name='dep_time'),
          fromCityName?: string(name='from_city_name'),
          fromStationName?: string(name='from_station_name'),
          itemId?: long(name='item_id', description='itemId', example='12312'),
          runTime?: long(name='run_time', example='120'),
          toCityName?: string(name='to_city_name'),
          toStationName?: string(name='to_station_name'),
          trainNo?: string(name='train_no', example='D11'),
          trainTicketInfos?: [ 
            {
              changed?: boolean(name='changed', example='false'),
              checkInTime?: string(name='check_in_time'),
              checkOutTime?: string(name='check_out_time'),
              coachNo?: string(name='coach_no', example='01'),
              endTime?: string(name='end_time'),
              gmtCreate?: string(name='gmt_create'),
              gmtModify?: string(name='gmt_modify'),
              outTicketStatus?: string(name='out_ticket_status', example='1'),
              payType?: int32(name='pay_type', example='2'),
              seatNo?: string(name='seat_no', example='02A'),
              seatTypeName?: string(name='seat_type_name'),
              segmentIndex?: int32(name='segment_index', example='0'),
              serviceFee?: double(name='service_fee', example='100'),
              startTime?: string(name='start_time'),
              ticketNo?: string(name='ticket_no', example='ew123121'),
              ticketPrice?: double(name='ticket_price', example='400'),
              ticketStatus?: int32(name='ticket_status', example='1'),
              trainTypeName?: string(name='train_type_name'),
              useTicket?: string(name='use_ticket', example='0'),
              userId?: string(name='user_id', example='231212'),
            }
          ](name='train_ticket_infos'),
        }
      ](name='train_info_list'),
      trainTransferInfo?: {
        costTime?: string(name='cost_time', example='200'),
        endTime?: string(name='end_time', example='2022-11-15 00:00:00'),
        fromCityName?: string(name='from_city_name'),
        fromStationName?: string(name='from_station_name'),
        middleCity?: string(name='middle_city'),
        middleDate?: string(name='middle_date', example='2023-01-29 18:10:00'),
        middleStation?: string(name='middle_station'),
        middleType?: string(name='middle_type'),
        startTime?: string(name='start_time', example='2022-11-01 00:00:00'),
        toCityName?: string(name='to_city_name'),
        toStationName?: string(name='to_station_name'),
        waitTime?: string(name='wait_time', example='60'),
      }(name='train_transfer_info'),
    }(name='train_order_info'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='1213ds1d'),
  success?: boolean(name='success', example='True'),
  traceId?: string(name='traceId', description='traceId', example='123412dcdsac sd'),
}

model TrainOrderQueryV2Response = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TrainOrderQueryV2ResponseBody(name='body'),
}

async function trainOrderQueryV2WithOptions(request: TrainOrderQueryV2Request, headers: TrainOrderQueryV2Headers, runtime: Util.RuntimeOptions): TrainOrderQueryV2Response {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderId)) {
    query['order_id'] = request.orderId;
  }
  if (!Util.isUnset(request.userId)) {
    query['user_id'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripCorpToken)) {
    realHeaders['x-acs-btrip-corp-token'] = Util.toJSONString(headers.xAcsBtripCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TrainOrderQueryV2',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/train/v2/order`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function trainOrderQueryV2(request: TrainOrderQueryV2Request): TrainOrderQueryV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainOrderQueryV2Headers{};
  return trainOrderQueryV2WithOptions(request, headers, runtime);
}

model TrainStationSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model TrainStationSearchRequest {
  keyword?: string(name='keyword'),
}

model TrainStationSearchResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    cities?: [ 
      {
        code?: string(name='code', example='hz'),
        name?: string(name='name'),
      }
    ](name='cities'),
  }(name='module', description='module'),
  requestId?: string(name='requestId', example='B72B39C8-32DE-558D-AD1C-D53F11F6ADFE'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', example='210e847f16611516748613869de4f6'),
}

model TrainStationSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TrainStationSearchResponseBody(name='body'),
}

async function trainStationSearchWithOptions(request: TrainStationSearchRequest, headers: TrainStationSearchHeaders, runtime: Util.RuntimeOptions): TrainStationSearchResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TrainStationSearch',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/city/v1/train`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function trainStationSearch(request: TrainStationSearchRequest): TrainStationSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainStationSearchHeaders{};
  return trainStationSearchWithOptions(request, headers, runtime);
}

model TrainTicketScanQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model TrainTicketScanQueryRequest {
  billDate?: string(name='bill_date', example='2022-12-01'),
  billId?: long(name='bill_id', example='123'),
  invoiceSubTaskId?: long(name='invoice_sub_task_id', example='456'),
  pageNo?: int32(name='page_no', example='1'),
  pageSize?: int32(name='page_size', example='20'),
}

model TrainTicketScanQueryResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    items?: [ 
      {
        arrStation?: string(name='arr_station'),
        billDate?: string(name='bill_date', example='2022-12-01'),
        coachName?: string(name='coach_name'),
        costCenter?: string(name='cost_center'),
        depStation?: string(name='dep_station'),
        depTime?: string(name='dep_time', example='2023-01-12 10:00:00'),
        department?: string(name='department'),
        id?: string(name='id', example='71'),
        invoiceTitle?: string(name='invoice_title'),
        orderId?: long(name='order_id', example='3137168772101111000'),
        ossUrl?: string(name='oss_url', example='https://www.testurl.com'),
        passenger?: string(name='passenger'),
        price?: string(name='price', example='100'),
        project?: string(name='project'),
        seat?: string(name='seat'),
        seatNo?: string(name='seat_no'),
        serialNumber?: string(name='serial_number', example='30671211200127U123456'),
        taxAmount?: string(name='tax_amount', example='8.26'),
        taxRate?: string(name='tax_rate', example='9%'),
        ticketNo?: string(name='ticket_no', description='取票号', example='784-1111111111'),
        trainNo?: string(name='train_no', description='车次', example='G99'),
      }
    ](name='items'),
    pageNo?: int32(name='page_no', example='1'),
    pageSize?: int32(name='page_size', example='20'),
    totalPage?: int32(name='total_page', example='2'),
    totalSize?: int32(name='total_size', example='30'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='21041ce316577904808056433edbb2'),
}

model TrainTicketScanQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TrainTicketScanQueryResponseBody(name='body'),
}

async function trainTicketScanQueryWithOptions(request: TrainTicketScanQueryRequest, headers: TrainTicketScanQueryHeaders, runtime: Util.RuntimeOptions): TrainTicketScanQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billDate)) {
    query['bill_date'] = request.billDate;
  }
  if (!Util.isUnset(request.billId)) {
    query['bill_id'] = request.billId;
  }
  if (!Util.isUnset(request.invoiceSubTaskId)) {
    query['invoice_sub_task_id'] = request.invoiceSubTaskId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TrainTicketScanQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/scan/v1/train-ticket`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function trainTicketScanQuery(request: TrainTicketScanQueryRequest): TrainTicketScanQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TrainTicketScanQueryHeaders{};
  return trainTicketScanQueryWithOptions(request, headers, runtime);
}

model UserQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model UserQueryRequest {
  modifiedTimeGreaterOrEqualThan?: string(name='modified_time_greater_or_equal_than', example='2021-06-02 00:00:00'),
  pageSize?: int32(name='page_size', example='10'),
  pageToken?: string(name='page_token', example='9YN+jxa7PcxbNUTISeKjEw=='),
  thirdPartJobNo?: string(name='third_part_job_no', example='12345'),
}

model UserQueryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  message?: string(name='message'),
  module?: {
    hasMore?: boolean(name='has_more', example='true'),
    items?: [ 
      {
        employeeNick?: string(name='employee_nick'),
        leaveStatus?: int32(name='leave_status', example='0'),
        thirdPartEmployeeId?: string(name='third_part_employee_id', example='123'),
        thirdPartJobNo?: string(name='third_part_job_no', example='001'),
      }
    ](name='items'),
    pageToken?: string(name='page_token', example='9YN+jxa7PcxbNUTISeKjEw=='),
    total?: long(name='total', example='0'),
  }(name='module'),
  requestId?: string(name='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='2f624a6316366024344424669e3279'),
}

model UserQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UserQueryResponseBody(name='body'),
}

async function userQueryWithOptions(request: UserQueryRequest, headers: UserQueryHeaders, runtime: Util.RuntimeOptions): UserQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.modifiedTimeGreaterOrEqualThan)) {
    query['modified_time_greater_or_equal_than'] = request.modifiedTimeGreaterOrEqualThan;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.pageToken)) {
    query['page_token'] = request.pageToken;
  }
  if (!Util.isUnset(request.thirdPartJobNo)) {
    query['third_part_job_no'] = request.thirdPartJobNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UserQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/user/v1/user`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function userQuery(request: UserQueryRequest): UserQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UserQueryHeaders{};
  return userQueryWithOptions(request, headers, runtime);
}

model VatInvoiceScanQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model VatInvoiceScanQueryRequest {
  billDate?: string(name='bill_date', example='2022-12-01'),
  billId?: long(name='bill_id', example='123'),
  invoiceSubTaskId?: long(name='invoice_sub_task_id', example='456'),
  pageNo?: int32(name='page_no', example='1'),
  pageSize?: int32(name='page_size', example='20'),
}

model VatInvoiceScanQueryResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: {
    items?: [ 
      {
        amountWithTax?: string(name='amount_with_tax', example='20'),
        amountWithoutTax?: string(name='amount_without_tax', example='18.87'),
        billDate?: string(name='bill_date', example='2022-12-01'),
        checkCode?: string(name='check_code', example='07122942791187744475'),
        drawer?: string(name='drawer'),
        id?: string(name='id', example='60'),
        invoiceCode?: string(name='invoice_code', example='3300111303'),
        invoiceDay?: string(name='invoice_day', example='2022-12-01'),
        invoiceDetail?: string(name='invoice_detail'),
        invoiceDetails?: [ 
          {
            amount?: string(name='amount', example='75.21'),
            index?: string(name='index', description='行号', example='0'),
            itemName?: string(name='item_name'),
            quantity?: string(name='quantity', example='1'),
            specification?: string(name='specification', example='66PT11230069'),
            tax?: string(name='tax', example='12.79'),
            taxRate?: string(name='tax_rate', example='17%'),
            unit?: string(name='unit'),
            unitPrice?: string(name='unit_price', example='75.21'),
          }
        ](name='invoice_details'),
        invoiceLocation?: string(name='invoice_location'),
        invoiceNo?: string(name='invoice_no', example='24021111'),
        invoiceSubTaskId?: long(name='invoice_sub_task_id', example='123'),
        invoiceType?: int32(name='invoice_type', example='2'),
        invoiceTypeDesc?: string(name='invoice_type_desc'),
        machineCode?: string(name='machine_code', description='机器码', example='661619906841'),
        ossUrl?: string(name='oss_url', example='https://www.testurl.com'),
        passwordArea?: string(name='password_area', example='<87*>>53>5023>-446>/4+83/5* *>5/81<75/1931>4>>'),
        purchaserBankAccountInfo?: string(name='purchaser_bank_account_info'),
        purchaserContactInfo?: string(name='purchaser_contact_info'),
        purchaserName?: string(name='purchaser_name'),
        purchaserTaxNo?: string(name='purchaser_tax_no', example='91441111111111111S'),
        recipient?: string(name='recipient'),
        remarks?: string(name='remarks'),
        reviewer?: string(name='reviewer'),
        sellerBankAccountInfo?: string(name='seller_bank_account_info'),
        sellerContactInfo?: string(name='seller_contact_info'),
        sellerName?: string(name='seller_name'),
        sellerTaxNo?: string(name='seller_tax_no', example='91441111111111111N'),
        smartCheckCode?: string(name='smart_check_code', example='4475'),
        taxAmount?: string(name='tax_amount', example='1.13'),
        taxRate?: string(name='tax_rate', example='6%'),
        totalAmountInWords?: string(name='total_amount_in_words'),
      }
    ](name='items'),
    pageNo?: int32(name='page_no', example='1'),
    pageSize?: int32(name='page_size', example='20'),
    totalPage?: int32(name='total_page', example='2'),
    totalSize?: int32(name='total_size', example='30'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId', example='C61ECFF6-606B-5F66-B81D-D77369043A5F'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210e842b16611337974412836dae27'),
}

model VatInvoiceScanQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VatInvoiceScanQueryResponseBody(name='body'),
}

async function vatInvoiceScanQueryWithOptions(request: VatInvoiceScanQueryRequest, headers: VatInvoiceScanQueryHeaders, runtime: Util.RuntimeOptions): VatInvoiceScanQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billDate)) {
    query['bill_date'] = request.billDate;
  }
  if (!Util.isUnset(request.billId)) {
    query['bill_id'] = request.billId;
  }
  if (!Util.isUnset(request.invoiceSubTaskId)) {
    query['invoice_sub_task_id'] = request.invoiceSubTaskId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['page_no'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VatInvoiceScanQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/scan/v1/vat-invoice`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function vatInvoiceScanQuery(request: VatInvoiceScanQueryRequest): VatInvoiceScanQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new VatInvoiceScanQueryHeaders{};
  return vatInvoiceScanQueryWithOptions(request, headers, runtime);
}

model WaitApplyInvoiceTaskDetailQueryHeaders {
  commonHeaders?: map[string]string,
  xAcsBtripSoCorpToken?: string(name='x-acs-btrip-so-corp-token', example='feth00jqwls'),
}

model WaitApplyInvoiceTaskDetailQueryRequest {
  billDate?: string(name='bill_date', example='2022-12-01'),
}

model WaitApplyInvoiceTaskDetailQueryResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message'),
  module?: [ 
    {
      contact?: string(name='contact'),
      email?: string(name='email'),
      flightInvoiceFee?: string(name='flight_invoice_fee', example='0'),
      fuPointInvoiceFee?: string(name='fu_point_invoice_fee', example='3.12'),
      hotelNormalInvoiceFee?: string(name='hotel_normal_invoice_fee', example='0'),
      hotelSpecialInvoiceFee?: string(name='hotel_special_invoice_fee', example='100'),
      internationalFlightInvoiceFee?: string(name='international_flight_invoice_fee', example='0'),
      invoiceThirdPartId?: string(name='invoice_third_part_id', example='123'),
      invoiceTitle?: string(name='invoice_title'),
      mailAddress?: string(name='mail_address'),
      mailCity?: string(name='mail_city'),
      mailFullAddress?: string(name='mail_full_address'),
      mailProvince?: string(name='mail_province'),
      penaltyFee?: string(name='penalty_fee', example='0'),
      remark?: string(name='remark'),
      serviceFee?: string(name='service_fee', example='1.02'),
      telephone?: string(name='telephone', example='1234567890'),
      trainInvoiceFee?: string(name='train_invoice_fee', example='0'),
      vehicleInvoiceFee?: string(name='vehicle_invoice_fee', example='100'),
    }
  ](name='module'),
  requestId?: string(name='requestId', description='requestId', example='407543AF-2BD9-5890-BD92-9D1AB7218B27'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210f079e16603757182131635d866a'),
}

model WaitApplyInvoiceTaskDetailQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: WaitApplyInvoiceTaskDetailQueryResponseBody(name='body'),
}

async function waitApplyInvoiceTaskDetailQueryWithOptions(request: WaitApplyInvoiceTaskDetailQueryRequest, headers: WaitApplyInvoiceTaskDetailQueryHeaders, runtime: Util.RuntimeOptions): WaitApplyInvoiceTaskDetailQueryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billDate)) {
    query['bill_date'] = request.billDate;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsBtripSoCorpToken)) {
    realHeaders['x-acs-btrip-so-corp-token'] = Util.toJSONString(headers.xAcsBtripSoCorpToken);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'WaitApplyInvoiceTaskDetailQuery',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = `/invoice/v1/wait-apply-task`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function waitApplyInvoiceTaskDetailQuery(request: WaitApplyInvoiceTaskDetailQueryRequest): WaitApplyInvoiceTaskDetailQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new WaitApplyInvoiceTaskDetailQueryHeaders{};
  return waitApplyInvoiceTaskDetailQueryWithOptions(request, headers, runtime);
}

