/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('address-purification', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model GetAddressDivisionCodeRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey?: string(name='AppKey'),
}

model GetAddressDivisionCodeResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model GetAddressDivisionCodeResponse = {
  headers: map[string]string(name='headers'),
  body: GetAddressDivisionCodeResponseBody(name='body'),
}

async function getAddressDivisionCodeWithOptions(request: GetAddressDivisionCodeRequest, runtime: Util.RuntimeOptions): GetAddressDivisionCodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAddressDivisionCode', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAddressDivisionCode(request: GetAddressDivisionCodeRequest): GetAddressDivisionCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAddressDivisionCodeWithOptions(request, runtime);
}

model StructureAddressRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey?: string(name='AppKey'),
}

model StructureAddressResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model StructureAddressResponse = {
  headers: map[string]string(name='headers'),
  body: StructureAddressResponseBody(name='body'),
}

async function structureAddressWithOptions(request: StructureAddressRequest, runtime: Util.RuntimeOptions): StructureAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StructureAddress', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function structureAddress(request: StructureAddressRequest): StructureAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return structureAddressWithOptions(request, runtime);
}

model ExtractExpressRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey?: string(name='AppKey'),
}

model ExtractExpressResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model ExtractExpressResponse = {
  headers: map[string]string(name='headers'),
  body: ExtractExpressResponseBody(name='body'),
}

async function extractExpressWithOptions(request: ExtractExpressRequest, runtime: Util.RuntimeOptions): ExtractExpressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExtractExpress', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function extractExpress(request: ExtractExpressRequest): ExtractExpressResponse {
  var runtime = new Util.RuntimeOptions{};
  return extractExpressWithOptions(request, runtime);
}

model ExtractNameRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey?: string(name='AppKey'),
}

model ExtractNameResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model ExtractNameResponse = {
  headers: map[string]string(name='headers'),
  body: ExtractNameResponseBody(name='body'),
}

async function extractNameWithOptions(request: ExtractNameRequest, runtime: Util.RuntimeOptions): ExtractNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExtractName', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function extractName(request: ExtractNameRequest): ExtractNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return extractNameWithOptions(request, runtime);
}

model GetAddressBlockMappingRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey?: string(name='AppKey'),
}

model GetAddressBlockMappingResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model GetAddressBlockMappingResponse = {
  headers: map[string]string(name='headers'),
  body: GetAddressBlockMappingResponseBody(name='body'),
}

async function getAddressBlockMappingWithOptions(request: GetAddressBlockMappingRequest, runtime: Util.RuntimeOptions): GetAddressBlockMappingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAddressBlockMapping', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAddressBlockMapping(request: GetAddressBlockMappingRequest): GetAddressBlockMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAddressBlockMappingWithOptions(request, runtime);
}

model GetAddressSearchRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey?: string(name='AppKey'),
}

model GetAddressSearchResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model GetAddressSearchResponse = {
  headers: map[string]string(name='headers'),
  body: GetAddressSearchResponseBody(name='body'),
}

async function getAddressSearchWithOptions(request: GetAddressSearchRequest, runtime: Util.RuntimeOptions): GetAddressSearchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAddressSearch', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAddressSearch(request: GetAddressSearchRequest): GetAddressSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAddressSearchWithOptions(request, runtime);
}

model PredictPOIRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey?: string(name='AppKey'),
}

model PredictPOIResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model PredictPOIResponse = {
  headers: map[string]string(name='headers'),
  body: PredictPOIResponseBody(name='body'),
}

async function predictPOIWithOptions(request: PredictPOIRequest, runtime: Util.RuntimeOptions): PredictPOIResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PredictPOI', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function predictPOI(request: PredictPOIRequest): PredictPOIResponse {
  var runtime = new Util.RuntimeOptions{};
  return predictPOIWithOptions(request, runtime);
}

model ClassifyPOIRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey?: string(name='AppKey'),
}

model ClassifyPOIResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model ClassifyPOIResponse = {
  headers: map[string]string(name='headers'),
  body: ClassifyPOIResponseBody(name='body'),
}

async function classifyPOIWithOptions(request: ClassifyPOIRequest, runtime: Util.RuntimeOptions): ClassifyPOIResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ClassifyPOI', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function classifyPOI(request: ClassifyPOIRequest): ClassifyPOIResponse {
  var runtime = new Util.RuntimeOptions{};
  return classifyPOIWithOptions(request, runtime);
}

model CorrectAddressRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey?: string(name='AppKey'),
}

model CorrectAddressResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model CorrectAddressResponse = {
  headers: map[string]string(name='headers'),
  body: CorrectAddressResponseBody(name='body'),
}

async function correctAddressWithOptions(request: CorrectAddressRequest, runtime: Util.RuntimeOptions): CorrectAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CorrectAddress', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function correctAddress(request: CorrectAddressRequest): CorrectAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return correctAddressWithOptions(request, runtime);
}

model GetZipcodeRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey?: string(name='AppKey'),
}

model GetZipcodeResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model GetZipcodeResponse = {
  headers: map[string]string(name='headers'),
  body: GetZipcodeResponseBody(name='body'),
}

async function getZipcodeWithOptions(request: GetZipcodeRequest, runtime: Util.RuntimeOptions): GetZipcodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetZipcode', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getZipcode(request: GetZipcodeRequest): GetZipcodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getZipcodeWithOptions(request, runtime);
}

model CompleteAddressRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey?: string(name='AppKey'),
}

model CompleteAddressResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model CompleteAddressResponse = {
  headers: map[string]string(name='headers'),
  body: CompleteAddressResponseBody(name='body'),
}

async function completeAddressWithOptions(request: CompleteAddressRequest, runtime: Util.RuntimeOptions): CompleteAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CompleteAddress', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function completeAddress(request: CompleteAddressRequest): CompleteAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return completeAddressWithOptions(request, runtime);
}

model GetAddressSimilarityRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey?: string(name='AppKey'),
}

model GetAddressSimilarityResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model GetAddressSimilarityResponse = {
  headers: map[string]string(name='headers'),
  body: GetAddressSimilarityResponseBody(name='body'),
}

async function getAddressSimilarityWithOptions(request: GetAddressSimilarityRequest, runtime: Util.RuntimeOptions): GetAddressSimilarityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAddressSimilarity', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAddressSimilarity(request: GetAddressSimilarityRequest): GetAddressSimilarityResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAddressSimilarityWithOptions(request, runtime);
}

model GetAddressGeocodeRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey?: string(name='AppKey'),
}

model GetAddressGeocodeResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model GetAddressGeocodeResponse = {
  headers: map[string]string(name='headers'),
  body: GetAddressGeocodeResponseBody(name='body'),
}

async function getAddressGeocodeWithOptions(request: GetAddressGeocodeRequest, runtime: Util.RuntimeOptions): GetAddressGeocodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAddressGeocode', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAddressGeocode(request: GetAddressGeocodeRequest): GetAddressGeocodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAddressGeocodeWithOptions(request, runtime);
}

model TransferCoordRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  srcCoord?: string(name='SrcCoord'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey?: string(name='AppKey'),
}

model TransferCoordResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model TransferCoordResponse = {
  headers: map[string]string(name='headers'),
  body: TransferCoordResponseBody(name='body'),
}

async function transferCoordWithOptions(request: TransferCoordRequest, runtime: Util.RuntimeOptions): TransferCoordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TransferCoord', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function transferCoord(request: TransferCoordRequest): TransferCoordResponse {
  var runtime = new Util.RuntimeOptions{};
  return transferCoordWithOptions(request, runtime);
}

model UpdateProjectRequest {
  serviceCode?: string(name='ServiceCode'),
  parameters?: map[string]any(name='Parameters'),
}

model UpdateProjectShrinkRequest {
  serviceCode?: string(name='ServiceCode'),
  parametersShrink?: string(name='Parameters'),
}

model UpdateProjectResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model UpdateProjectResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProjectResponseBody(name='body'),
}

async function updateProjectWithOptions(tmpReq: UpdateProjectRequest, runtime: Util.RuntimeOptions): UpdateProjectResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateProjectShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.parameters)) {
    request.parametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.parameters, 'Parameters', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateProject', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProjectWithOptions(request, runtime);
}

model ExtractPhoneRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey?: string(name='AppKey'),
}

model ExtractPhoneResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model ExtractPhoneResponse = {
  headers: map[string]string(name='headers'),
  body: ExtractPhoneResponseBody(name='body'),
}

async function extractPhoneWithOptions(request: ExtractPhoneRequest, runtime: Util.RuntimeOptions): ExtractPhoneResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExtractPhone', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function extractPhone(request: ExtractPhoneRequest): ExtractPhoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return extractPhoneWithOptions(request, runtime);
}

model GetInputSearchRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey?: string(name='AppKey'),
}

model GetInputSearchResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model GetInputSearchResponse = {
  headers: map[string]string(name='headers'),
  body: GetInputSearchResponseBody(name='body'),
}

async function getInputSearchWithOptions(request: GetInputSearchRequest, runtime: Util.RuntimeOptions): GetInputSearchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetInputSearch', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getInputSearch(request: GetInputSearchRequest): GetInputSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInputSearchWithOptions(request, runtime);
}

model GetAddressEvaluateRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey?: string(name='AppKey'),
}

model GetAddressEvaluateResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model GetAddressEvaluateResponse = {
  headers: map[string]string(name='headers'),
  body: GetAddressEvaluateResponseBody(name='body'),
}

async function getAddressEvaluateWithOptions(request: GetAddressEvaluateRequest, runtime: Util.RuntimeOptions): GetAddressEvaluateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAddressEvaluate', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAddressEvaluate(request: GetAddressEvaluateRequest): GetAddressEvaluateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAddressEvaluateWithOptions(request, runtime);
}

model ExtractAddressRequest {
  serviceCode?: string(name='ServiceCode'),
  text?: string(name='Text'),
  defaultProvince?: string(name='DefaultProvince'),
  defaultCity?: string(name='DefaultCity'),
  defaultDistrict?: string(name='DefaultDistrict'),
  appKey?: string(name='AppKey'),
}

model ExtractAddressResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model ExtractAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ExtractAddressResponseBody(name='body'),
}

async function extractAddressWithOptions(request: ExtractAddressRequest, runtime: Util.RuntimeOptions): ExtractAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExtractAddress', '2019-11-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function extractAddress(request: ExtractAddressRequest): ExtractAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return extractAddressWithOptions(request, runtime);
}

