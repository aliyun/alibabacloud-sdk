/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'address-purification';
  @version = '2019-11-18';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CorrectAddressRequest {
  appKey: string(name='AppKey', position='Body'),
  defaultCity?: string(name='DefaultCity', position='Body'),
  defaultDistrict?: string(name='DefaultDistrict', position='Body'),
  defaultProvince?: string(name='DefaultProvince', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model CorrectAddressResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model CorrectAddressResponse = {
  headers: map[string]string(name='headers'),
  body: CorrectAddressResponseBody(name='body'),
}

async function correctAddress(request: CorrectAddressRequest): CorrectAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CorrectAddress', 'POST', '/', 'json', true, 'form', request);
}

model ExtractAddressRequest {
  appKey: string(name='AppKey', position='Body'),
  defaultCity?: string(name='DefaultCity', position='Body'),
  defaultDistrict?: string(name='DefaultDistrict', position='Body'),
  defaultProvince?: string(name='DefaultProvince', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model ExtractAddressResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model ExtractAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ExtractAddressResponseBody(name='body'),
}

async function extractAddress(request: ExtractAddressRequest): ExtractAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExtractAddress', 'POST', '/', 'json', true, 'form', request);
}

model ExtractNameRequest {
  appKey: string(name='AppKey', position='Body'),
  defaultCity?: string(name='DefaultCity', position='Body'),
  defaultDistrict?: string(name='DefaultDistrict', position='Body'),
  defaultProvince?: string(name='DefaultProvince', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model ExtractNameResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model ExtractNameResponse = {
  headers: map[string]string(name='headers'),
  body: ExtractNameResponseBody(name='body'),
}

async function extractName(request: ExtractNameRequest): ExtractNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExtractName', 'POST', '/', 'json', true, 'form', request);
}

model ExtractPhoneRequest {
  appKey: string(name='AppKey', position='Body'),
  defaultCity?: string(name='DefaultCity', position='Body'),
  defaultDistrict?: string(name='DefaultDistrict', position='Body'),
  defaultProvince?: string(name='DefaultProvince', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model ExtractPhoneResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model ExtractPhoneResponse = {
  headers: map[string]string(name='headers'),
  body: ExtractPhoneResponseBody(name='body'),
}

async function extractPhone(request: ExtractPhoneRequest): ExtractPhoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExtractPhone', 'POST', '/', 'json', true, 'form', request);
}

model GetAddressDivisionCodeRequest {
  appKey: string(name='AppKey', position='Body'),
  defaultCity?: string(name='DefaultCity', position='Body'),
  defaultDistrict?: string(name='DefaultDistrict', position='Body'),
  defaultProvince?: string(name='DefaultProvince', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetAddressDivisionCodeResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetAddressDivisionCodeResponse = {
  headers: map[string]string(name='headers'),
  body: GetAddressDivisionCodeResponseBody(name='body'),
}

async function getAddressDivisionCode(request: GetAddressDivisionCodeRequest): GetAddressDivisionCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAddressDivisionCode', 'POST', '/', 'json', true, 'form', request);
}

model GetAddressSimilarityRequest {
  appKey: string(name='AppKey', position='Body'),
  defaultCity?: string(name='DefaultCity', position='Body'),
  defaultDistrict?: string(name='DefaultDistrict', position='Body'),
  defaultProvince?: string(name='DefaultProvince', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetAddressSimilarityResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetAddressSimilarityResponse = {
  headers: map[string]string(name='headers'),
  body: GetAddressSimilarityResponseBody(name='body'),
}

async function getAddressSimilarity(request: GetAddressSimilarityRequest): GetAddressSimilarityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAddressSimilarity', 'POST', '/', 'json', true, 'form', request);
}

model GetZipcodeRequest {
  appKey: string(name='AppKey', position='Body'),
  defaultCity?: string(name='DefaultCity', position='Body'),
  defaultDistrict?: string(name='DefaultDistrict', position='Body'),
  defaultProvince?: string(name='DefaultProvince', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model GetZipcodeResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetZipcodeResponse = {
  headers: map[string]string(name='headers'),
  body: GetZipcodeResponseBody(name='body'),
}

async function getZipcode(request: GetZipcodeRequest): GetZipcodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetZipcode', 'POST', '/', 'json', true, 'form', request);
}

model StructureAddressRequest {
  appKey: string(name='AppKey', position='Body'),
  defaultCity?: string(name='DefaultCity', position='Body'),
  defaultDistrict?: string(name='DefaultDistrict', position='Body'),
  defaultProvince?: string(name='DefaultProvince', position='Body'),
  serviceCode: string(name='ServiceCode', position='Body'),
  text: string(name='Text', position='Body'),
}

model StructureAddressResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model StructureAddressResponse = {
  headers: map[string]string(name='headers'),
  body: StructureAddressResponseBody(name='body'),
}

async function structureAddress(request: StructureAddressRequest): StructureAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StructureAddress', 'POST', '/', 'json', true, 'form', request);
}

