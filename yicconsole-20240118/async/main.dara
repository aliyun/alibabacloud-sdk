/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'YicConsole';
  @version = '2024-01-18';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model LxPopCmd {
  data: string(name='data'),
}

model BillingProcessMessageRequest {
  body?: LxPopCmd(name='body', position='Body'),
}

model BillingProcessMessageResponseBody = {
  message?: string(name='Message', example='CDR \\"job-347624039496835072\\" doesn\\"t exists.'),
  synchro?: boolean(name='Synchro', example='True'),
  code?: string(name='code', example='200'),
  data?: string(name='data', example='{}'),
  requestId?: string(name='requestId', description='Id of the request', example='63E17775-CA89-59DD-A8C0-FA26753A9556'),
  success?: boolean(name='success', example='True'),
}

model BillingProcessMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BillingProcessMessageResponseBody(name='body'),
}

async function billingProcessMessage(request: BillingProcessMessageRequest): BillingProcessMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BillingProcessMessage', 'POST', '/yic/yic-console/v1/billing/commands/lifecycle', 'json', false, 'json', request);
}

model CheckPayOrderRequest {
  body?: LxPopCmd(name='body', position='Body'),
}

model CheckPayOrderResponseBody = {
  code?: string(name='code', example='200'),
  data?: string(name='data', example='{}'),
  message?: string(name='message', example='error'),
  requestId?: string(name='requestId', description='Id of the request', example='63E17775-CA89-59DD-A8C0-FA26753A9556'),
  success?: boolean(name='success', example='True'),
  synchro?: boolean(name='synchro', example='True'),
}

model CheckPayOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckPayOrderResponseBody(name='body'),
}

async function checkPayOrder(request: CheckPayOrderRequest): CheckPayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckPayOrder', 'POST', '/yic/yic-console/v1/billing/commands/verify', 'json', false, 'json', request);
}

model CheckRefundRequest {
  body?: LxPopCmd(name='body', position='Body'),
}

model CheckRefundResponseBody = {
  message?: string(name='Message', example='CDR \\"job-347624039496835072\\" doesn\\"t exists.'),
  synchro?: boolean(name='Synchro', example='True'),
  code?: string(name='code', example='200'),
  data?: string(name='data', example='{}'),
  requestId?: string(name='requestId', description='Id of the request', example='63E17775-CA89-59DD-A8C0-FA26753A9556'),
  success?: boolean(name='success', example='True'),
}

model CheckRefundResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckRefundResponseBody(name='body'),
}

async function checkRefund(request: CheckRefundRequest): CheckRefundResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckRefund', 'POST', '/yic/yic-console/v1/billing/commands/check-refund', 'json', false, 'json', request);
}

model PayOrderRequest {
  body?: LxPopCmd(name='body', position='Body'),
}

model PayOrderResponseBody = {
  message?: string(name='Message', example='CDR \\"job-347624039496835072\\" doesn\\"t exists.'),
  synchro?: boolean(name='Synchro', example='True'),
  code?: string(name='code', example='200'),
  data?: string(name='data', example='{}'),
  requestId?: string(name='requestId', description='Id of the request', example='63E17775-CA89-59DD-A8C0-FA26753A9556'),
  success?: boolean(name='success', example='True'),
}

model PayOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PayOrderResponseBody(name='body'),
}

async function payOrder(request: PayOrderRequest): PayOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PayOrder', 'POST', '/yic/yic-console/v1/billing/commands/pay', 'json', false, 'json', request);
}

model PrepaidCeaseRequest {
  body?: LxPopCmd(name='body', position='Body'),
}

model PrepaidCeaseResponseBody = {
  message?: string(name='Message', example='AccessDeniedByRamPolicy, ReqId:63FC296B4330433600DD89BC'),
  synchro?: boolean(name='Synchro', example='True'),
  code?: string(name='code', example='200'),
  data?: string(name='data', example='{}'),
  requestId?: string(name='requestId', description='Id of the request', example='63E17775-CA89-59DD-A8C0-FA26753A9556'),
  success?: boolean(name='success', example='True'),
}

model PrepaidCeaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PrepaidCeaseResponseBody(name='body'),
}

async function prepaidCease(request: PrepaidCeaseRequest): PrepaidCeaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PrepaidCease', 'POST', '/yic/yic-console/v1/billing/commands/prepaid-cease', 'json', false, 'json', request);
}

model RefundRequest {
  body?: LxPopCmd(name='body', position='Body'),
}

model RefundResponseBody = {
  message?: string(name='Message', example='AccessDeniedByRamPolicy, ReqId:63FC296B4330433600DD89BC'),
  synchro?: boolean(name='Synchro', example='True'),
  code?: string(name='code', example='200'),
  data?: string(name='data', example='{}'),
  requestId?: string(name='requestId', description='Id of the request', example='63E17775-CA89-59DD-A8C0-FA26753A9556'),
  success?: boolean(name='success', example='True'),
}

model RefundResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefundResponseBody(name='body'),
}

async function refund(request: RefundRequest): RefundResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Refund', 'POST', '/yic/yic-console/v1/billing/commands/refund', 'json', false, 'json', request);
}

