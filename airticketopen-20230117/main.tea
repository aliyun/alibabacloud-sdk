/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('airticketopen', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DataSolutionListSegmentBaggageMappingListPassengerBaggageAllowanceMappingValue = {
  baggageAmount?: int32(name='baggage_amount', example='22'),
  baggageWeight?: int32(name='baggage_weight', example='2'),
  baggageWeightUnit?: string(name='baggage_weight_unit', example='kg'),
  isAllWeight?: boolean(name='is_all_weight', example='true'),
  carryOnAmount?: int32(name='carry_on_amount', example='1'),
  carryOnWeight?: int32(name='carry_on_weight', example='2'),
  carryOnWeightUnit?: string(name='carry_on_weight_unit', example='kg'),
  isAllCarryOnWeight?: boolean(name='is_all_carry_on_weight', example='true'),
}

model DataSolutionListSegmentRefundChangeRuleMappingListRefundChangeRuleMapValue = {
  refundRuleAllUnusedList?: [ 
    {
      type?: int32(name='type', example='0'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canRefund?: boolean(name='can_refund', example='true'),
      refundFee?: double(name='refund_fee', example='20'),
      canReturnAllTax?: boolean(name='can_return_all_tax', example='true'),
      returnPartTaxFee?: double(name='return_part_tax_fee', example='20'),
    }
  ](name='refund_rule_all_unused_list'),
  refundRulePartUnusedList?: [ 
    {
      type?: int32(name='type', example='1'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canRefund?: boolean(name='can_refund', example='true'),
      refundFee?: double(name='refund_fee', example='20'),
      canReturnAllTax?: boolean(name='can_return_all_tax', example='30'),
      returnPartTaxFee?: double(name='return_part_tax_fee', example='20'),
    }
  ](name='refund_rule_part_unused_list'),
  changeRuleInUnusedList?: [ 
    {
      type?: int32(name='type', example='2'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canChange?: boolean(name='can_change', example='true'),
      changeFee?: double(name='change_fee', example='20'),
    }
  ](name='change_rule_in_unused_list'),
  changeRuleOutUnusedList?: [ 
    {
      type?: int32(name='type', example='2'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canChange?: boolean(name='can_change', example='true'),
      changeFee?: double(name='change_fee', example='10'),
    }
  ](name='change_rule_out_unused_list'),
}

model DataBaggageAllowanceMapValue = {
  baggageAmount?: int32(name='baggage_amount', example='1'),
  baggageWeight?: int32(name='baggage_weight', example='10'),
  baggageWeightUnit?: string(name='baggage_weight_unit', example='KG'),
  isAllWeight?: boolean(name='is_all_weight', example='true'),
  carryOnAmount?: int32(name='carry_on_amount', example='1'),
  carryOnWeight?: int32(name='carry_on_weight', example='5'),
  carryOnWeightUnit?: string(name='carry_on_weight_unit', example='KG'),
  isAllCarryOnWeight?: boolean(name='is_all_carry_on_weight', example='true'),
}

model DataRefundChangeRuleMapValue = {
  refundRuleAllUnusedList?: [ 
    {
      type?: int32(name='type', example='0'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canRefund?: boolean(name='can_refund', example='true'),
      refundFee?: double(name='refund_fee', example='200'),
      canReturnAllTax?: boolean(name='can_return_all_tax', example='true'),
      returnPartTaxFee?: double(name='return_part_tax_fee', example='100'),
    }
  ](name='refund_rule_all_unused_list'),
  refundRulePartUnusedList?: [ 
    {
      type?: int32(name='type', example='0'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canRefund?: boolean(name='can_refund', example='true'),
      refundFee?: double(name='refund_fee', example='200'),
      canReturnAllTax?: boolean(name='can_return_all_tax', example='true'),
      returnPartTaxFee?: double(name='return_part_tax_fee', example='100'),
    }
  ](name='refund_rule_part_unused_list'),
  changeRuleInUnusedList?: [ 
    {
      type?: int32(name='type', example='2'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canChange?: boolean(name='can_change', example='true'),
      changeFee?: double(name='change_fee', example='100'),
    }
  ](name='change_rule_in_unused_list'),
  changeRuleOutUnusedList?: [ 
    {
      type?: int32(name='type', example='2'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canChange?: boolean(name='can_change', example='true'),
      changeFee?: double(name='change_fee', example='100'),
    }
  ](name='change_rule_out_unused_list'),
}

model DataSolutionSegmentBaggageMappingListPassengerBaggageAllowanceMappingValue = {
  baggageAmount?: int32(name='baggage_amount', example='1'),
  baggageWeight?: int32(name='baggage_weight', example='10'),
  baggageWeightUnit?: string(name='baggage_weight_unit', example='KG'),
  isAllWeight?: boolean(name='is_all_weight', example='true'),
  carryOnAmount?: int32(name='carry_on_amount', example='1'),
  carryOnWeight?: int32(name='carry_on_weight', example='5'),
  carryOnWeightUnit?: string(name='carry_on_weight_unit', example='KG'),
  isAllCarryOnWeight?: boolean(name='is_all_carry_on_weight', example='true'),
}

model DataSolutionSegmentRefundChangeRuleMappingListRefundChangeRuleMapValue = {
  refundRuleAllUnusedList?: [ 
    {
      type?: int32(name='type', example='0'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canRefund?: boolean(name='can_refund', example='true'),
      refundFee?: double(name='refund_fee', example='200'),
      canReturnAllTax?: boolean(name='can_return_all_tax', example='true'),
      returnPartTaxFee?: double(name='return_part_tax_fee', example='100'),
    }
  ](name='refund_rule_all_unused_list'),
  refundRulePartUnusedList?: [ 
    {
      type?: int32(name='type', example='0'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canRefund?: boolean(name='can_refund', example='true'),
      refundFee?: double(name='refund_fee', example='200'),
      canReturnAllTax?: boolean(name='can_return_all_tax', example='true'),
      returnPartTaxFee?: double(name='return_part_tax_fee', example='100'),
    }
  ](name='refund_rule_part_unused_list'),
  changeRuleInUnusedList?: [ 
    {
      type?: int32(name='type', example='2'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canChange?: boolean(name='can_change', example='true'),
      changeFee?: double(name='change_fee', example='100'),
    }
  ](name='change_rule_in_unused_list'),
  changeRuleOutUnusedList?: [ 
    {
      type?: int32(name='type', example='2'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canChange?: boolean(name='can_change', example='true'),
      changeFee?: double(name='change_fee', example='100'),
    }
  ](name='change_rule_out_unused_list'),
}

model AccountFlowListHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model AccountFlowListRequest {
  dayNum?: int32(name='day_num', description='This parameter is required.', example='0'),
  pageIndex?: int32(name='page_index', example='1'),
  pageSize?: int32(name='page_size', example='20'),
  utcBeginTime?: long(name='utc_begin_time', description='This parameter is required.', example='1677427200000'),
}

model AccountFlowListResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    list?: [ 
      {
        afterAvailableAmount?: double(name='after_available_amount', example='1000'),
        beforeAvailableAmount?: double(name='before_available_amount', example='1950.5'),
        changeOrderNum?: long(name='change_order_num', example='49880***971'),
        flowId?: long(name='flow_id', example='1627239841225842666'),
        gmtCreate?: long(name='gmt_create', example='1676799185000'),
        gmtModified?: long(name='gmt_modified', example='1676966530000'),
        opAmount?: double(name='op_amount', example='950.5'),
        opType?: int32(name='op_type', example='2'),
        orderNum?: long(name='order_num', example='4988430***971'),
        orderType?: int32(name='order_type', example='1'),
        outOrderNum?: string(name='out_order_num', example='4988430***971'),
        refundOrderNum?: long(name='refund_order_num', example='48430***971'),
      }
    ](name='list'),
    pagination?: {
      currentPage?: int32(name='current_page', example='1'),
      pageSize?: int32(name='page_size', example='10'),
      totalCount?: int32(name='total_count', example='5'),
      totalPage?: int32(name='total_page', example='1'),
    }(name='pagination'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model AccountFlowListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AccountFlowListResponseBody(name='body'),
}

/**
 * @summary 账号资金流水
 *
 * @param request AccountFlowListRequest
 * @param headers AccountFlowListHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AccountFlowListResponse
 */
async function accountFlowListWithOptions(request: AccountFlowListRequest, headers: AccountFlowListHeaders, runtime: Util.RuntimeOptions): AccountFlowListResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.dayNum)) {
    query['day_num'] = request.dayNum;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['page_index'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.utcBeginTime)) {
    query['utc_begin_time'] = request.utcBeginTime;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AccountFlowList',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/account/flow-list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 账号资金流水
 *
 * @param request AccountFlowListRequest
 * @return AccountFlowListResponse
 */
async function accountFlowList(request: AccountFlowListRequest): AccountFlowListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AccountFlowListHeaders{};
  return accountFlowListWithOptions(request, headers, runtime);
}

model AncillarySuggestHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model AncillarySuggestRequest {
  solutionId?: string(name='solution_id', description='This parameter is required.', example='eJwz8DeySEo0NjQ01TU3TU7TNTFINNO1SE5O0jVKM0hKNjEwTElLNYwz0A32cNT1dfPVNTIwMjYwNjRQ8/A3NLI01Q0Ic0cRBwBVFxJJ'),
}

model AncillarySuggestResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    segAncillaryMapList?: [ 
      {
        ancillary?: {
          ancillaryId?: string(name='ancillary_id', example='eJwz8DeySEo0NjQ01TU3TU'),
          ancillaryType?: int32(name='ancillary_type', example='4'),
          baggageAncillary?: {
            baggageAmount?: int32(name='baggage_amount', description='行李件数 取值如：3、2、1、0、-2。 -2 表示计重', example='0'),
            baggageWeight?: int32(name='baggage_weight', description='行李重量，0-50。isAllWeght=true 时，表示所有件数总重量。', example='0'),
            baggageWeightUnit?: string(name='baggage_weight_unit', description='行李重量单位', example='KG'),
            isAllWeight?: boolean(name='is_all_weight', description='是否所有行李重量', example='true'),
            price?: double(name='price', description='总价', example='10.0'),
          }(name='baggage_ancillary', description='行李辅营详情'),
        }(name='ancillary'),
        segmentIdList?: [ string ](name='segment_id_list'),
      }
    ](name='seg_ancillary_map_list'),
    solutionId?: string(name='solution_id', example='eJwz8DeySEo0NjQ01TU3TU7TNTFINNO1SE5O0jVKM0hKNjEwTElLNYwz0A32cNT1dfPVNTIwMjYwNjRQ8/A3NLI01Q0Ic0cRBwBVFxJJ'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model AncillarySuggestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AncillarySuggestResponseBody(name='body'),
}

/**
 * @summary 辅营-推荐
 *
 * @param request AncillarySuggestRequest
 * @param headers AncillarySuggestHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AncillarySuggestResponse
 */
async function ancillarySuggestWithOptions(request: AncillarySuggestRequest, headers: AncillarySuggestHeaders, runtime: Util.RuntimeOptions): AncillarySuggestResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.solutionId)) {
    body['solution_id'] = request.solutionId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AncillarySuggest',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/ancillary/action-suggest`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 辅营-推荐
 *
 * @param request AncillarySuggestRequest
 * @return AncillarySuggestResponse
 */
async function ancillarySuggest(request: AncillarySuggestRequest): AncillarySuggestResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AncillarySuggestHeaders{};
  return ancillarySuggestWithOptions(request, headers, runtime);
}

model BookHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model BookRequest {
  contact?: {
    email?: string(name='email', example='gao******@gmail.com'),
    firstName?: string(name='first_name', example='SAN'),
    lastName?: string(name='last_name', example='ZHANG'),
    mobileCountryCode?: string(name='mobile_country_code', example='86'),
    mobilePhoneNum?: string(name='mobile_phone_num', example='183******96'),
  }(name='contact', description='This parameter is required.'),
  outOrderNum?: string(name='out_order_num', description='This parameter is required.', example='x091-2023-0220-j-0001'),
  passengerAncillaryPurchaseMapList?: [ 
    {
      bookAncillaryReqItem?: {
        ancillaryId?: string(name='ancillary_id', example='MDY2NTAxLCJleHAiOjE2NxNzM3MDEsIm5ix'),
        ancillaryType?: int32(name='ancillary_type', example='4'),
      }(name='book_ancillary_req_item'),
      passengerList?: [ 
        {
          birthday?: string(name='birthday', example='20020320'),
          credential?: {
            certIssuePlace?: string(name='cert_issue_place', example='CN'),
            credentialNum?: string(name='credential_num', example='E1***5673'),
            credentialType?: int32(name='credential_type', description='This parameter is required.', example='1'),
            expireDate?: string(name='expire_date', example='20290102'),
          }(name='credential'),
          firstName?: string(name='first_name', description='This parameter is required.', example='SAN'),
          gender?: int32(name='gender', example='1'),
          lastName?: string(name='last_name', description='This parameter is required.', example='ZHANG'),
          mobileCountryCode?: string(name='mobile_country_code', description='This parameter is required.', example='86'),
          mobilePhoneNumber?: string(name='mobile_phone_number', description='This parameter is required.', example='182******92'),
          nationality?: string(name='nationality', example='CN'),
          type?: int32(name='type', description='This parameter is required.', example='0'),
        }
      ](name='passenger_list'),
    }
  ](name='passenger_ancillary_purchase_map_list'),
  passengerList?: [ 
    {
      birthday?: string(name='birthday', example='20200320'),
      credential?: {
        certIssuePlace?: string(name='cert_issue_place', example='CN'),
        credentialNum?: string(name='credential_num', example='E1***5674'),
        credentialType?: int32(name='credential_type', description='This parameter is required.', example='1'),
        expireDate?: string(name='expire_date', example='20290101'),
      }(name='credential'),
      firstName?: string(name='first_name', description='This parameter is required.', example='SAN'),
      gender?: int32(name='gender', example='0'),
      lastName?: string(name='last_name', description='This parameter is required.', example='ZHANG'),
      mobileCountryCode?: string(name='mobile_country_code', description='This parameter is required.', example='86'),
      mobilePhoneNumber?: string(name='mobile_phone_number', description='This parameter is required.', example='183******95'),
      nationality?: string(name='nationality', example='CN'),
      type?: int32(name='type', description='This parameter is required.', example='0'),
    }
  ](name='passenger_list', description='This parameter is required.'),
  solutionId?: string(name='solution_id', description='solution_id

This parameter is required.', example='eJwz8DeySEo0NjQ01TU3TU7TNTFINNO1SE5O0jVKM0hKNjEwTElLNYwz0A32cNT1dfPVNTIwMjYwNjRQ8/A3NLI01Q0Ic0cRBwBVFxJJ'),
}

model BookShrinkRequest {
  contactShrink?: string(name='contact', description='This parameter is required.'),
  outOrderNum?: string(name='out_order_num', description='This parameter is required.', example='x091-2023-0220-j-0001'),
  passengerAncillaryPurchaseMapListShrink?: string(name='passenger_ancillary_purchase_map_list'),
  passengerListShrink?: string(name='passenger_list', description='This parameter is required.'),
  solutionId?: string(name='solution_id', description='solution_id

This parameter is required.', example='eJwz8DeySEo0NjQ01TU3TU7TNTFINNO1SE5O0jVKM0hKNjEwTElLNYwz0A32cNT1dfPVNTIwMjYwNjRQ8/A3NLI01Q0Ic0cRBwBVFxJJ'),
}

model BookResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    orderList?: [ 
      {
        orderNum?: long(name='order_num', example='4966***617111'),
      }
    ](name='order_list'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: {
    orderList?: [ 
      {
        orderNum?: long(name='order_num'),
      }
    ](name='order_list'),
  }(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model BookResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BookResponseBody(name='body'),
}

/**
 * @summary 交易-预定
 *
 * @param tmpReq BookRequest
 * @param headers BookHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return BookResponse
 */
async function bookWithOptions(tmpReq: BookRequest, headers: BookHeaders, runtime: Util.RuntimeOptions): BookResponse {
  Util.validateModel(tmpReq);
  var request = new BookShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.contact)) {
    request.contactShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contact, 'contact', 'json');
  }
  if (!Util.isUnset(tmpReq.passengerAncillaryPurchaseMapList)) {
    request.passengerAncillaryPurchaseMapListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerAncillaryPurchaseMapList, 'passenger_ancillary_purchase_map_list', 'json');
  }
  if (!Util.isUnset(tmpReq.passengerList)) {
    request.passengerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.passengerList, 'passenger_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.contactShrink)) {
    body['contact'] = request.contactShrink;
  }
  if (!Util.isUnset(request.outOrderNum)) {
    body['out_order_num'] = request.outOrderNum;
  }
  if (!Util.isUnset(request.passengerAncillaryPurchaseMapListShrink)) {
    body['passenger_ancillary_purchase_map_list'] = request.passengerAncillaryPurchaseMapListShrink;
  }
  if (!Util.isUnset(request.passengerListShrink)) {
    body['passenger_list'] = request.passengerListShrink;
  }
  if (!Util.isUnset(request.solutionId)) {
    body['solution_id'] = request.solutionId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Book',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/trade/action-book`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 交易-预定
 *
 * @param request BookRequest
 * @return BookResponse
 */
async function book(request: BookRequest): BookResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new BookHeaders{};
  return bookWithOptions(request, headers, runtime);
}

model CancelHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model CancelRequest {
  orderNum?: long(name='order_num', description='This parameter is required.', example='496***2617111'),
}

model CancelResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    orderNum?: long(name='order_num', example='496***2617111'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model CancelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelResponseBody(name='body'),
}

/**
 * @summary 交易-未支付取消
 *
 * @param request CancelRequest
 * @param headers CancelHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CancelResponse
 */
async function cancelWithOptions(request: CancelRequest, headers: CancelHeaders, runtime: Util.RuntimeOptions): CancelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.orderNum)) {
    body['order_num'] = request.orderNum;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Cancel',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/trade/action-cancel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 交易-未支付取消
 *
 * @param request CancelRequest
 * @return CancelResponse
 */
async function cancel(request: CancelRequest): CancelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CancelHeaders{};
  return cancelWithOptions(request, headers, runtime);
}

model ChangeApplyHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model ChangeApplyRequest {
  changePassengerList?: [ 
    {
      document?: string(name='document', example='411***********4411'),
      firstName?: string(name='first_name', description='This parameter is required.', example='SAN'),
      lastName?: string(name='last_name', description='This parameter is required.', example='ZHANG'),
    }
  ](name='change_passenger_list', description='This parameter is required.'),
  changedJourneys?: [ 
    {
      segmentList?: [ 
        {
          arrivalAirport?: string(name='arrival_airport', example='MFM'),
          arrivalCity?: string(name='arrival_city', description='This parameter is required.', example='MFM'),
          arriveTerminal?: string(name='arrive_terminal', example='T1'),
          arriveTime?: long(name='arrive_time', example='1677232999000'),
          codeShare?: boolean(name='code_share', example='false'),
          departureAirport?: string(name='departure_airport', example='PVG'),
          departureCity?: string(name='departure_city', description='This parameter is required.', example='SHA'),
          departureDate?: string(name='departure_date', description='This parameter is required.', example='20230320'),
          departureTerminal?: string(name='departure_terminal', example='T2'),
          departureTime?: long(name='departure_time', example='1677232998000'),
          marketingFlightNo?: string(name='marketing_flight_no', description='This parameter is required.', example='HO1295'),
          operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
        }
      ](name='segment_list'),
    }
  ](name='changed_journeys', description='This parameter is required.'),
  contact?: {
    email?: string(name='email', example='gao******@gmail.com'),
    mobileCountryCode?: string(name='mobile_country_code', example='86'),
    mobilePhoneNum?: string(name='mobile_phone_num', example='183*****92'),
  }(name='contact', description='This parameter is required.'),
  orderNum?: long(name='order_num', description='This parameter is required.', example='4988430***950'),
  remark?: string(name='remark', example='remark desc'),
  type?: int32(name='type', description='This parameter is required.', example='0'),
}

model ChangeApplyShrinkRequest {
  changePassengerListShrink?: string(name='change_passenger_list', description='This parameter is required.'),
  changedJourneysShrink?: string(name='changed_journeys', description='This parameter is required.'),
  contactShrink?: string(name='contact', description='This parameter is required.'),
  orderNum?: long(name='order_num', description='This parameter is required.', example='4988430***950'),
  remark?: string(name='remark', example='remark desc'),
  type?: int32(name='type', description='This parameter is required.', example='0'),
}

model ChangeApplyResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    changeOrders?: [ 
      {
        changeOrderNum?: long(name='change_order_num', example='49884*****950'),
        changeOrderStatus?: int32(name='change_order_status', example='0'),
        failReason?: string(name='fail_reason', example='desc reason'),
        passengers?: [ 
          {
            document?: string(name='document', example='411***********4411'),
            firstName?: string(name='first_name', example='SAN'),
            lastName?: string(name='last_name', example='ZHANG'),
          }
        ](name='passengers'),
      }
    ](name='change_orders'),
    orderNum?: long(name='order_num', example='4988430***950'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model ChangeApplyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeApplyResponseBody(name='body'),
}

/**
 * @summary 改签-Apply
 *
 * @param tmpReq ChangeApplyRequest
 * @param headers ChangeApplyHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ChangeApplyResponse
 */
async function changeApplyWithOptions(tmpReq: ChangeApplyRequest, headers: ChangeApplyHeaders, runtime: Util.RuntimeOptions): ChangeApplyResponse {
  Util.validateModel(tmpReq);
  var request = new ChangeApplyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.changePassengerList)) {
    request.changePassengerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.changePassengerList, 'change_passenger_list', 'json');
  }
  if (!Util.isUnset(tmpReq.changedJourneys)) {
    request.changedJourneysShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.changedJourneys, 'changed_journeys', 'json');
  }
  if (!Util.isUnset(tmpReq.contact)) {
    request.contactShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contact, 'contact', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.changePassengerListShrink)) {
    body['change_passenger_list'] = request.changePassengerListShrink;
  }
  if (!Util.isUnset(request.changedJourneysShrink)) {
    body['changed_journeys'] = request.changedJourneysShrink;
  }
  if (!Util.isUnset(request.contactShrink)) {
    body['contact'] = request.contactShrink;
  }
  if (!Util.isUnset(request.orderNum)) {
    body['order_num'] = request.orderNum;
  }
  if (!Util.isUnset(request.remark)) {
    body['remark'] = request.remark;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChangeApply',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/change/action-apply`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 改签-Apply
 *
 * @param request ChangeApplyRequest
 * @return ChangeApplyResponse
 */
async function changeApply(request: ChangeApplyRequest): ChangeApplyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ChangeApplyHeaders{};
  return changeApplyWithOptions(request, headers, runtime);
}

model ChangeCancelHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model ChangeCancelRequest {
  changeOrderNum?: long(name='change_order_num', description='This parameter is required.', example='4988430***950'),
}

model ChangeCancelResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: any(name='data', example='null'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model ChangeCancelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeCancelResponseBody(name='body'),
}

/**
 * @summary 改签-取消
 *
 * @param request ChangeCancelRequest
 * @param headers ChangeCancelHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ChangeCancelResponse
 */
async function changeCancelWithOptions(request: ChangeCancelRequest, headers: ChangeCancelHeaders, runtime: Util.RuntimeOptions): ChangeCancelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.changeOrderNum)) {
    body['change_order_num'] = request.changeOrderNum;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChangeCancel',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/change/action-cancel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 改签-取消
 *
 * @param request ChangeCancelRequest
 * @return ChangeCancelResponse
 */
async function changeCancel(request: ChangeCancelRequest): ChangeCancelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ChangeCancelHeaders{};
  return changeCancelWithOptions(request, headers, runtime);
}

model ChangeConfirmHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model ChangeConfirmRequest {
  changeOrderNum?: long(name='change_order_num', description='This parameter is required.', example='4988430***950'),
}

model ChangeConfirmResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    payAmount?: double(name='pay_amount', example='30'),
    transactionNo?: string(name='transaction_no', example='hkduendkd-2023-dj0'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model ChangeConfirmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeConfirmResponseBody(name='body'),
}

/**
 * @summary 改签-确认
 *
 * @param request ChangeConfirmRequest
 * @param headers ChangeConfirmHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ChangeConfirmResponse
 */
async function changeConfirmWithOptions(request: ChangeConfirmRequest, headers: ChangeConfirmHeaders, runtime: Util.RuntimeOptions): ChangeConfirmResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.changeOrderNum)) {
    body['change_order_num'] = request.changeOrderNum;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChangeConfirm',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/change/action-confirm`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 改签-确认
 *
 * @param request ChangeConfirmRequest
 * @return ChangeConfirmResponse
 */
async function changeConfirm(request: ChangeConfirmRequest): ChangeConfirmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ChangeConfirmHeaders{};
  return changeConfirmWithOptions(request, headers, runtime);
}

model ChangeDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model ChangeDetailRequest {
  changeOrderNum?: long(name='change_order_num', description='This parameter is required.', example='4988430***950'),
}

model ChangeDetailResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    changeFeeDetails?: [ 
      {
        changeFee?: {
          serviceFee?: double(name='service_fee', example='50'),
          taxFee?: double(name='tax_fee', example='20'),
          upgradeFee?: double(name='upgrade_fee', example='30'),
        }(name='change_fee'),
        passenger?: {
          document?: string(name='document', example='411***********4411'),
          firstName?: string(name='first_name', example='SAN'),
          lastName?: string(name='last_name', example='ZHANG'),
        }(name='passenger'),
      }
    ](name='change_fee_details'),
    changeOrderNum?: long(name='change_order_num', example='4988430***950'),
    changePassengers?: [ 
      {
        document?: string(name='document', example='411***********4411'),
        firstName?: string(name='first_name', example='SAN'),
        lastName?: string(name='last_name', example='ZHANG'),
      }
    ](name='change_passengers'),
    changeReasonType?: int32(name='change_reason_type', example='1'),
    changedJourneys?: [ 
      {
        segmentList?: [ 
          {
            arrivalAirport?: string(name='arrival_airport', example='MFM'),
            arrivalCity?: string(name='arrival_city', example='MFM'),
            arrivalTerminal?: string(name='arrival_terminal', example='T1'),
            arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
            availability?: string(name='availability', example='7'),
            cabin?: string(name='cabin', example='V'),
            cabinClass?: string(name='cabin_class', example='Y'),
            codeShare?: boolean(name='code_share', example='false'),
            departureAirport?: string(name='departure_airport', example='PVG'),
            departureCity?: string(name='departure_city', example='SHA'),
            departureTerminal?: string(name='departure_terminal', example='T2'),
            departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
            equipType?: string(name='equip_type', example='32Q'),
            flightDuration?: int32(name='flight_duration', example='165'),
            marketingAirline?: string(name='marketing_airline', example='HO'),
            marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
            marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1295'),
            operatingAirline?: string(name='operating_airline', example='HO'),
            operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
            segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
            stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
            stopQuantity?: int32(name='stop_quantity', example='0'),
          }
        ](name='segment_list'),
        transferCount?: int32(name='transfer_count', example='0'),
      }
    ](name='changed_journeys'),
    closeReason?: string(name='close_reason', example='reason desc'),
    closeUtcTime?: long(name='close_utc_time', example='1677415244000'),
    contact?: {
      email?: string(name='email', example='gao******@gmail.com'),
      mobileCountryCode?: string(name='mobile_country_code', example='86'),
      mobilePhoneNum?: string(name='mobile_phone_num', example='183*****92'),
    }(name='contact'),
    createUtcTime?: long(name='create_utc_time', example='1677415276000'),
    lastConfirmUtcTime?: long(name='last_confirm_utc_time', example='1677415278000'),
    lastJourneys?: [ 
      {
        segmentList?: [ 
          {
            arrivalAirport?: string(name='arrival_airport', example='MFM'),
            arrivalCity?: string(name='arrival_city', example='MFM'),
            arrivalTerminal?: string(name='arrival_terminal', example='T1'),
            arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
            availability?: string(name='availability', example='7'),
            cabin?: string(name='cabin', example='V'),
            cabinClass?: string(name='cabin_class', example='Y'),
            codeShare?: boolean(name='code_share', example='false'),
            departureAirport?: string(name='departure_airport', example='PVG'),
            departureCity?: string(name='departure_city', example='SHA'),
            departureTerminal?: string(name='departure_terminal', example='T2'),
            departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
            equipType?: string(name='equip_type', example='32Q'),
            flightDuration?: int32(name='flight_duration', example='165'),
            marketingAirline?: string(name='marketing_airline', example='HO'),
            marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
            marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1295'),
            operatingAirline?: string(name='operating_airline', example='HO'),
            operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
            segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
            stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
            stopQuantity?: int32(name='stop_quantity', example='0'),
          }
        ](name='segment_list'),
        transferCount?: int32(name='transfer_count', example='0'),
      }
    ](name='last_journeys'),
    orderNum?: long(name='order_num', example='5988430***541'),
    orderStatus?: int32(name='order_status', example='2'),
    originalJourneys?: [ 
      {
        segmentList?: [ 
          {
            arrivalAirport?: string(name='arrival_airport', example='MFM'),
            arrivalCity?: string(name='arrival_city', example='MFM'),
            arrivalTerminal?: string(name='arrival_terminal', example='T1'),
            arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
            availability?: string(name='availability', example='7'),
            cabin?: string(name='cabin', example='V'),
            cabinClass?: string(name='cabin_class', example='Y'),
            codeShare?: boolean(name='code_share', example='false'),
            departureAirport?: string(name='departure_airport', example='PVG'),
            departureCity?: string(name='departure_city', example='SHA'),
            departureTerminal?: string(name='departure_terminal', example='T2'),
            departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
            equipType?: string(name='equip_type', example='32Q'),
            flightDuration?: int32(name='flight_duration', example='165'),
            marketingAirline?: string(name='marketing_airline', example='HO'),
            marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
            marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1295'),
            operatingAirline?: string(name='operating_airline', example='HO'),
            operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
            segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
            stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
            stopQuantity?: int32(name='stop_quantity', example='0'),
          }
        ](name='segment_list'),
        transferCount?: int32(name='transfer_count', example='0'),
      }
    ](name='original_journeys'),
    payStatus?: int32(name='pay_status', example='2'),
    paySuccessUtcTime?: long(name='pay_success_utc_time', example='1677415255000'),
    totalAmount?: double(name='total_amount', example='300'),
    transactionNo?: string(name='transaction_no', example='hkduendkd-2023-dj0'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model ChangeDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeDetailResponseBody(name='body'),
}

/**
 * @summary 改签-Detail
 *
 * @param request ChangeDetailRequest
 * @param headers ChangeDetailHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ChangeDetailResponse
 */
async function changeDetailWithOptions(request: ChangeDetailRequest, headers: ChangeDetailHeaders, runtime: Util.RuntimeOptions): ChangeDetailResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.changeOrderNum)) {
    query['change_order_num'] = request.changeOrderNum;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeDetail',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/change/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 改签-Detail
 *
 * @param request ChangeDetailRequest
 * @return ChangeDetailResponse
 */
async function changeDetail(request: ChangeDetailRequest): ChangeDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ChangeDetailHeaders{};
  return changeDetailWithOptions(request, headers, runtime);
}

model ChangeDetailListOfBuyerHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model ChangeDetailListOfBuyerRequest {
  pageIndex?: int32(name='page_index', example='1'),
  pageSize?: int32(name='page_size', example='10'),
  utcCreateBegin?: long(name='utc_create_begin', example='1677415276000'),
  utcCreateEnd?: long(name='utc_create_end', example='1677415279000'),
}

model ChangeDetailListOfBuyerResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    list?: [ 
      {
        changeOrderNum?: long(name='change_order_num', example='4988430***950'),
        orderNum?: long(name='order_num', example='4988430***971'),
        orderStatus?: int32(name='order_status', example='2'),
        payStatus?: int32(name='pay_status', example='2'),
        transactionNo?: string(name='transaction_no', example='hkduendkd-2023-dj0'),
        utcCreateTime?: long(name='utc_create_time', example='1677415274000'),
      }
    ](name='list'),
    pagination?: {
      currentPage?: int32(name='current_page', example='1'),
      pageSize?: int32(name='page_size', example='10'),
      totalCount?: int32(name='total_count', example='5'),
      totalPage?: int32(name='total_page', example='1'),
    }(name='pagination'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model ChangeDetailListOfBuyerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeDetailListOfBuyerResponseBody(name='body'),
}

/**
 * @summary 改签单列表-关于买家账号
 *
 * @param request ChangeDetailListOfBuyerRequest
 * @param headers ChangeDetailListOfBuyerHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ChangeDetailListOfBuyerResponse
 */
async function changeDetailListOfBuyerWithOptions(request: ChangeDetailListOfBuyerRequest, headers: ChangeDetailListOfBuyerHeaders, runtime: Util.RuntimeOptions): ChangeDetailListOfBuyerResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageIndex)) {
    query['page_index'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.utcCreateBegin)) {
    query['utc_create_begin'] = request.utcCreateBegin;
  }
  if (!Util.isUnset(request.utcCreateEnd)) {
    query['utc_create_end'] = request.utcCreateEnd;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeDetailListOfBuyer',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/change/buyer/detail-list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 改签单列表-关于买家账号
 *
 * @param request ChangeDetailListOfBuyerRequest
 * @return ChangeDetailListOfBuyerResponse
 */
async function changeDetailListOfBuyer(request: ChangeDetailListOfBuyerRequest): ChangeDetailListOfBuyerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ChangeDetailListOfBuyerHeaders{};
  return changeDetailListOfBuyerWithOptions(request, headers, runtime);
}

model ChangeDetailListOfOrderNumHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model ChangeDetailListOfOrderNumRequest {
  orderNum?: long(name='order_num', description='This parameter is required.', example='4988430***700'),
  pageIndex?: int32(name='page_index', example='1'),
  pageSize?: int32(name='page_size', example='20'),
}

model ChangeDetailListOfOrderNumResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    list?: [ 
      {
        changeFeeDetails?: [ 
          {
            changeFee?: {
              serviceFee?: double(name='service_fee', example='50'),
              taxFee?: double(name='tax_fee', example='20'),
              upgradeFee?: double(name='upgrade_fee', example='30'),
            }(name='change_fee'),
            passenger?: {
              document?: string(name='document', example='411***********4411'),
              firstName?: string(name='first_name', example='SAN'),
              lastName?: string(name='last_name', example='ZHANG'),
            }(name='passenger'),
          }
        ](name='change_fee_details'),
        changeOrderNum?: long(name='change_order_num', example='4988430***950'),
        changePassengers?: [ 
          {
            document?: string(name='document', example='411***********4411'),
            firstName?: string(name='first_name', example='SAN'),
            lastName?: string(name='last_name', example='ZHANG'),
          }
        ](name='change_passengers'),
        changeReasonType?: int32(name='change_reason_type', example='1'),
        changedJourneys?: [ 
          {
            segmentList?: [ 
              {
                arrivalAirport?: string(name='arrival_airport', example='MFM'),
                arrivalCity?: string(name='arrival_city', example='MFM'),
                arrivalTerminal?: string(name='arrival_terminal', example='T1'),
                arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
                availability?: string(name='availability', example='7'),
                cabin?: string(name='cabin', example='V'),
                cabinClass?: string(name='cabin_class', example='Y'),
                codeShare?: boolean(name='code_share', example='false'),
                departureAirport?: string(name='departure_airport', example='PVG'),
                departureCity?: string(name='departure_city', example='SHA'),
                departureTerminal?: string(name='departure_terminal', example='T2'),
                departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
                equipType?: string(name='equip_type', example='32Q'),
                flightDuration?: int32(name='flight_duration', example='165'),
                marketingAirline?: string(name='marketing_airline', example='HO'),
                marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
                marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1295'),
                operatingAirline?: string(name='operating_airline', example='HO'),
                operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
                segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
                stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
                stopQuantity?: int32(name='stop_quantity', example='0'),
              }
            ](name='segment_list'),
            transferCount?: int32(name='transfer_count', example='0'),
          }
        ](name='changed_journeys'),
        closeReason?: string(name='close_reason', example='reason desc'),
        closeUtcTime?: long(name='close_utc_time', example='1677415244000'),
        contact?: {
          email?: string(name='email', example='gao******@gmail.com'),
          mobileCountryCode?: string(name='mobile_country_code', example='86'),
          mobilePhoneNum?: string(name='mobile_phone_num', example='183*****92'),
        }(name='contact'),
        createUtcTime?: long(name='create_utc_time', example='1677415276000'),
        lastConfirmUtcTime?: long(name='last_confirm_utc_time', example='1677415278000'),
        lastJourneys?: [ 
          {
            segmentList?: [ 
              {
                arrivalAirport?: string(name='arrival_airport', example='MFM'),
                arrivalCity?: string(name='arrival_city', example='MFM'),
                arrivalTerminal?: string(name='arrival_terminal', example='T1'),
                arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
                availability?: string(name='availability', example='7'),
                cabin?: string(name='cabin', example='V'),
                cabinClass?: string(name='cabin_class', example='Y'),
                codeShare?: boolean(name='code_share', example='false'),
                departureAirport?: string(name='departure_airport', example='PVG'),
                departureCity?: string(name='departure_city', example='SHA'),
                departureTerminal?: string(name='departure_terminal', example='T2'),
                departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
                equipType?: string(name='equip_type', example='32Q'),
                flightDuration?: int32(name='flight_duration', example='165'),
                marketingAirline?: string(name='marketing_airline', example='HO'),
                marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
                marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1295'),
                operatingAirline?: string(name='operating_airline', example='HO'),
                operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
                segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
                stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
                stopQuantity?: int32(name='stop_quantity', example='0'),
              }
            ](name='segment_list'),
            transferCount?: int32(name='transfer_count', example='0'),
          }
        ](name='last_journeys'),
        orderNum?: long(name='order_num', example='5988430***541'),
        orderStatus?: int32(name='order_status', example='2'),
        originalJourneys?: [ 
          {
            segmentList?: [ 
              {
                arrivalAirport?: string(name='arrival_airport', example='MFM'),
                arrivalCity?: string(name='arrival_city', example='MFM'),
                arrivalTerminal?: string(name='arrival_terminal', example='T1'),
                arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
                availability?: string(name='availability', example='7'),
                cabin?: string(name='cabin', example='V'),
                cabinClass?: string(name='cabin_class', example='Y'),
                codeShare?: boolean(name='code_share', example='false'),
                departureAirport?: string(name='departure_airport', example='PVG'),
                departureCity?: string(name='departure_city', example='SHA'),
                departureTerminal?: string(name='departure_terminal', example='T2'),
                departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
                equipType?: string(name='equip_type', example='32Q'),
                flightDuration?: int32(name='flight_duration', example='165'),
                marketingAirline?: string(name='marketing_airline', example='HO'),
                marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
                marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1295'),
                operatingAirline?: string(name='operating_airline', example='HO'),
                operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
                segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
                stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
                stopQuantity?: int32(name='stop_quantity', example='0'),
              }
            ](name='segment_list'),
            transferCount?: int32(name='transfer_count', example='0'),
          }
        ](name='original_journeys'),
        payStatus?: int32(name='pay_status', example='2'),
        paySuccessUtcTime?: long(name='pay_success_utc_time', example='1677415255000'),
        totalAmount?: double(name='total_amount', example='300'),
        transactionNo?: string(name='transaction_no', example='hkduendkd-2023-dj0'),
      }
    ](name='list'),
    pagination?: {
      currentPage?: int32(name='current_page', example='1'),
      pageSize?: int32(name='page_size', example='10'),
      totalCount?: int32(name='total_count', example='5'),
      totalPage?: int32(name='total_page', example='1'),
    }(name='pagination'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model ChangeDetailListOfOrderNumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeDetailListOfOrderNumResponseBody(name='body'),
}

/**
 * @summary 改签单列表-关于正向订单
 *
 * @param request ChangeDetailListOfOrderNumRequest
 * @param headers ChangeDetailListOfOrderNumHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ChangeDetailListOfOrderNumResponse
 */
async function changeDetailListOfOrderNumWithOptions(request: ChangeDetailListOfOrderNumRequest, headers: ChangeDetailListOfOrderNumHeaders, runtime: Util.RuntimeOptions): ChangeDetailListOfOrderNumResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderNum)) {
    query['order_num'] = request.orderNum;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['page_index'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeDetailListOfOrderNum',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/change/order-num/detail-list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 改签单列表-关于正向订单
 *
 * @param request ChangeDetailListOfOrderNumRequest
 * @return ChangeDetailListOfOrderNumResponse
 */
async function changeDetailListOfOrderNum(request: ChangeDetailListOfOrderNumRequest): ChangeDetailListOfOrderNumResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ChangeDetailListOfOrderNumHeaders{};
  return changeDetailListOfOrderNumWithOptions(request, headers, runtime);
}

model EnrichHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model EnrichRequest {
  adults?: int32(name='adults', example='1'),
  cabinClass?: string(name='cabin_class', example='ALL_CABIN'),
  children?: int32(name='children', example='1'),
  infants?: int32(name='infants', example='1'),
  journeyParamList?: [ 
    {
      arrivalCity?: string(name='arrival_city', description='This parameter is required.', example='MFM'),
      departureCity?: string(name='departure_city', description='This parameter is required.', example='SHA'),
      departureDate?: string(name='departure_date', description='This parameter is required.', example='20230310'),
      segmentParamList?: [ 
        {
          arrivalAirport?: string(name='arrival_airport', description='This parameter is required.', example='MFM'),
          arrivalCity?: string(name='arrival_city', example='MFM'),
          cabin?: string(name='cabin', example='V'),
          childCabin?: string(name='child_cabin', example='E'),
          departureAirport?: string(name='departure_airport', description='This parameter is required.', example='PVG'),
          departureCity?: string(name='departure_city', example='SHA'),
          departureTime?: string(name='departure_time', description='This parameter is required.', example='2023-03-10 07:55:00'),
          marketingFlightNo?: string(name='marketing_flight_no', description='This parameter is required.', example='HO1295'),
        }
      ](name='segment_param_list', description='This parameter is required.'),
    }
  ](name='journey_param_list'),
  solutionId?: string(name='solution_id', example='eJwz8DeySEo0NjQ01TU3TU7TNTFINNO1SE5O0jVKM0hKNjEwTElLNYwz0A32cNT1dfPVNTIwMjYwNjRQ8/A3NLI01Q0Ic0cRBwBVFxJJ'),
}

model EnrichShrinkRequest {
  adults?: int32(name='adults', example='1'),
  cabinClass?: string(name='cabin_class', example='ALL_CABIN'),
  children?: int32(name='children', example='1'),
  infants?: int32(name='infants', example='1'),
  journeyParamListShrink?: string(name='journey_param_list'),
  solutionId?: string(name='solution_id', example='eJwz8DeySEo0NjQ01TU3TU7TNTFINNO1SE5O0jVKM0hKNjEwTElLNYwz0A32cNT1dfPVNTIwMjYwNjRQ8/A3NLI01Q0Ic0cRBwBVFxJJ'),
}

model EnrichResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    solutionList?: [ 
      {
        adultPrice?: double(name='adult_price', example='500'),
        adultTax?: double(name='adult_tax', example='100'),
        childPrice?: double(name='child_price', example='100'),
        childTax?: double(name='child_tax', example='100'),
        infantPrice?: double(name='infant_price', example='500'),
        infantTax?: double(name='infant_tax', example='100'),
        journeyList?: [ 
          {
            segmentList?: [ 
              {
                arrivalAirport?: string(name='arrival_airport', example='MFM'),
                arrivalCity?: string(name='arrival_city', example='MFM'),
                arrivalTerminal?: string(name='arrival_terminal', example='null'),
                arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
                availability?: string(name='availability', example='7'),
                cabin?: string(name='cabin', example='V'),
                cabinClass?: string(name='cabin_class', example='Y'),
                codeShare?: boolean(name='code_share', example='false'),
                departureAirport?: string(name='departure_airport', example='PVG'),
                departureCity?: string(name='departure_city', example='SHA'),
                departureTerminal?: string(name='departure_terminal', example='T2'),
                departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
                equipType?: string(name='equip_type', example='32Q'),
                flightDuration?: int32(name='flight_duration', example='165'),
                marketingAirline?: string(name='marketing_airline', example='HO'),
                marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
                marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1295'),
                operatingAirline?: string(name='operating_airline', example='HO'),
                operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
                segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
                stopCityList?: string(name='stop_city_list', example='""'),
                stopQuantity?: int32(name='stop_quantity', example='0'),
              }
            ](name='segment_list'),
            transferCount?: int32(name='transfer_count', example='0'),
          }
        ](name='journey_list'),
        productTypeDescription?: string(name='product_type_description', example='""'),
        refundTicketCouponDescription?: string(name='refund_ticket_coupon_description', example='""'),
        segmentBaggageCheckInInfoList?: [ 
          {
            luggageDirectInfoType?: int32(name='luggage_direct_info_type', example='1'),
            segmentIdList?: [ string ](name='segment_id_list'),
          }
        ](name='segment_baggage_check_in_info_list'),
        segmentBaggageMappingList?: [ 
          {
            passengerBaggageAllowanceMapping?: map[string]DataSolutionListSegmentBaggageMappingListPassengerBaggageAllowanceMappingValue(name='passenger_baggage_allowance_mapping'),
            segmentIdList?: [ string ](name='segment_id_list'),
          }
        ](name='segment_baggage_mapping_list'),
        segmentRefundChangeRuleMappingList?: [ 
          {
            refundChangeRuleMap?: map[string]DataSolutionListSegmentRefundChangeRuleMappingListRefundChangeRuleMapValue(name='refund_change_rule_map'),
            segmentIdList?: [ string ](name='segment_id_list'),
          }
        ](name='segment_refund_change_rule_mapping_list'),
        solutionId?: string(name='solution_id', description='solution_id', example='eJwz8DeySEo0NjQ01TU3TU7TNTFINNO1SE5O0jVKM0hKNjEwTElLNYwz0A32cNT1dfPVNTIwMjYwNjRQ8/A3NLI01Q0Ic0cRBwBVFxJJ'),
      }
    ](name='solution_list'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model EnrichResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnrichResponseBody(name='body'),
}

/**
 * @summary 搜索-Enrich
 *
 * @param tmpReq EnrichRequest
 * @param headers EnrichHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnrichResponse
 */
async function enrichWithOptions(tmpReq: EnrichRequest, headers: EnrichHeaders, runtime: Util.RuntimeOptions): EnrichResponse {
  Util.validateModel(tmpReq);
  var request = new EnrichShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.journeyParamList)) {
    request.journeyParamListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.journeyParamList, 'journey_param_list', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.adults)) {
    body['adults'] = request.adults;
  }
  if (!Util.isUnset(request.cabinClass)) {
    body['cabin_class'] = request.cabinClass;
  }
  if (!Util.isUnset(request.children)) {
    body['children'] = request.children;
  }
  if (!Util.isUnset(request.infants)) {
    body['infants'] = request.infants;
  }
  if (!Util.isUnset(request.journeyParamListShrink)) {
    body['journey_param_list'] = request.journeyParamListShrink;
  }
  if (!Util.isUnset(request.solutionId)) {
    body['solution_id'] = request.solutionId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Enrich',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/trade/action-enrich`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 搜索-Enrich
 *
 * @param request EnrichRequest
 * @return EnrichResponse
 */
async function enrich(request: EnrichRequest): EnrichResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new EnrichHeaders{};
  return enrichWithOptions(request, headers, runtime);
}

model FileUploadHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model FileUploadRequest {
  fileContent?: string(name='file_content', description='This parameter is required.', example='0r2LSuIsHlxEoGZcnGe34U1njBOR83Q4HNSvMDGrDPK5J71VjcGdRIWz2x3+tFxvQaduwHB46Z9K
dbIoDN8xPQ5PWlky8rKOPmAqSZfIRyPmAwvPvTJFwr8bRgHPPaq2VO8kHJ6jFIpJJ5I7Zqd1BjGS
SR/kULQZHsDDd2zgA9RRTsEQF2OSxFFFx2P/2Q=='),
  orderNum?: long(name='order_num', description='This parameter is required.', example='496***2617111'),
}

model FileUploadResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    uploadedFileUrl?: string(name='uploaded_file_url', example='https://fliggy-flight-jinghang-bucket.oss-cn-zhangjiakou.aliyuncs.com/suez/flight_suez_9a634376****47.jpeg'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model FileUploadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FileUploadResponseBody(name='body'),
}

/**
 * @summary 附件上传
 *
 * @param request FileUploadRequest
 * @param headers FileUploadHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return FileUploadResponse
 */
async function fileUploadWithOptions(request: FileUploadRequest, headers: FileUploadHeaders, runtime: Util.RuntimeOptions): FileUploadResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileContent)) {
    body['file_content'] = request.fileContent;
  }
  if (!Util.isUnset(request.orderNum)) {
    body['order_num'] = request.orderNum;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FileUpload',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/attachment/action-upload`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 附件上传
 *
 * @param request FileUploadRequest
 * @return FileUploadResponse
 */
async function fileUpload(request: FileUploadRequest): FileUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FileUploadHeaders{};
  return fileUploadWithOptions(request, headers, runtime);
}

model FlightChangeOfOrderHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model FlightChangeOfOrderRequest {
  orderNum?: long(name='order_num', description='This parameter is required.', example='4966***617111'),
}

model FlightChangeOfOrderResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: [ 
    {
      flightChangeDetail?: {
        changeReason?: string(name='change_reason', example='天气'),
        changeTime?: string(name='change_time', example='2023-02-01 10:01:00'),
        changeType?: int32(name='change_type', example='1'),
        newArrivalAirport?: string(name='new_arrival_airport', example='MFM'),
        newArrivalTime?: string(name='new_arrival_time', example='2023-02-01 15:01:00'),
        newDepartureAirport?: string(name='new_departure_airport', example='PVG'),
        newDepartureTime?: string(name='new_departure_time', example='2023-02-01 13:01:00'),
        newFlightNo?: string(name='new_flight_no', example='HO1295'),
        oldArrivalAirport?: string(name='old_arrival_airport', example='MFM'),
        oldArrivalTime?: string(name='old_arrival_time', example='023-02-01 14:01:00'),
        oldDepartureAirport?: string(name='old_departure_airport', example='PVG'),
        oldDepartureTime?: string(name='old_departure_time', example='2023-02-01 12:01:00'),
        oldFlightNo?: string(name='old_flight_no', example='HO1295'),
      }(name='flight_change_detail'),
      orderNum?: long(name='order_num', example='4966***617111'),
    }
  ](name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model FlightChangeOfOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlightChangeOfOrderResponseBody(name='body'),
}

/**
 * @summary 航变信息-关于订单
 *
 * @param request FlightChangeOfOrderRequest
 * @param headers FlightChangeOfOrderHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlightChangeOfOrderResponse
 */
async function flightChangeOfOrderWithOptions(request: FlightChangeOfOrderRequest, headers: FlightChangeOfOrderHeaders, runtime: Util.RuntimeOptions): FlightChangeOfOrderResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderNum)) {
    query['order_num'] = request.orderNum;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlightChangeOfOrder',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/flightchange/of-order`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 航变信息-关于订单
 *
 * @param request FlightChangeOfOrderRequest
 * @return FlightChangeOfOrderResponse
 */
async function flightChangeOfOrder(request: FlightChangeOfOrderRequest): FlightChangeOfOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new FlightChangeOfOrderHeaders{};
  return flightChangeOfOrderWithOptions(request, headers, runtime);
}

model GetTokenRequest {
  appKey?: string(name='app_key', description='appKey

This parameter is required.', example='fu1bltcu3400iurywuri'),
  appSecret?: string(name='app_secret', description='appSecret

This parameter is required.', example='ZzQ3MW1mb3E1ODAwI2ldUjYlWUdJn5YI'),
}

model GetTokenResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    expireTime?: long(name='expire_time', example='7200'),
    generateTime?: long(name='generate_time', example='1677055176'),
    token?: string(name='token', description='token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiIyUlRjY0Ezc1puSndpYU11R1ctTkVRIiwiaWF0IjoxNjc3MTU1Njg3LCJleHAiOjE2NzcxNjI4ODcsIm5iZiI6MTY3NzE1NTYyN30.bd8qBedJ7R24NC8VpMtM4Ni5OR-Cc0utPiKSx8fjoj9taalt7zXBF8uIVTETw1N-Fx9reLflwVXrbDHky7ZKqlE5o_B5Bkx-crQKlJL-NzasEmNnuJNb5kmmbCy3mvIrQfo5Q5Y0ZaQ110pXK4qd1shRbklvuQXn8lPueJtNqo8VdIOAPGG_rPwOw2P767I0fyFHcome8FR4ST1UrwxeApNKMB_BkpCsUZLgpm9h9trhKbB-3qtk6UK1GKmfw6qlWpL3PQN7FAObNruS0r0CGh3Muc9PaGsuu8Xu5on21h9WmI7L0-jatZkS55p4PEerU56XpkwJfa35_hltKNTauu'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model GetTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTokenResponseBody(name='body'),
}

/**
 * @summary 获取token
 *
 * @param request GetTokenRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTokenResponse
 */
async function getTokenWithOptions(request: GetTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTokenResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.appKey)) {
    query['app_key'] = request.appKey;
  }
  if (!Util.isUnset(request.appSecret)) {
    query['app_secret'] = request.appSecret;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetToken',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/token`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取token
 *
 * @param request GetTokenRequest
 * @return GetTokenResponse
 */
async function getToken(request: GetTokenRequest): GetTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTokenWithOptions(request, headers, runtime);
}

model LuggageDirectHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model LuggageDirectRequest {
  flightSegmentParamList?: [ 
    {
      arrivalAirport?: string(name='arrival_airport', description='This parameter is required.', example='SIN'),
      arrivalTerminal?: string(name='arrival_terminal', example='T1'),
      arrivalTime?: long(name='arrival_time', description='This parameter is required.', example='1705285430445'),
      codeShare?: boolean(name='code_share', description='This parameter is required.', example='true'),
      departureAirport?: string(name='departure_airport', description='This parameter is required.', example='HGH'),
      departureTerminal?: string(name='departure_terminal', example='T1'),
      departureTime?: long(name='departure_time', description='This parameter is required.', example='1705285430445'),
      marketingAirline?: string(name='marketing_airline', description='This parameter is required.', example='CZ'),
      marketingFlightNo?: string(name='marketing_flight_no', description='This parameter is required.', example='CZ616'),
      operatingAirline?: string(name='operating_airline', example='CZ'),
      stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
      ticketingAirline?: string(name='ticketing_airline', example='CZ'),
    }
  ](name='flight_segment_param_list'),
}

model LuggageDirectShrinkRequest {
  flightSegmentParamListShrink?: string(name='flight_segment_param_list'),
}

model LuggageDirectResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: [ 
    {
      cityCode?: string(name='city_code', example='BJS'),
      directType?: int32(name='direct_type', example='1'),
    }
  ](name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model LuggageDirectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LuggageDirectResponseBody(name='body'),
}

/**
 * @summary 航程行李直挂
 *
 * @param tmpReq LuggageDirectRequest
 * @param headers LuggageDirectHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return LuggageDirectResponse
 */
async function luggageDirectWithOptions(tmpReq: LuggageDirectRequest, headers: LuggageDirectHeaders, runtime: Util.RuntimeOptions): LuggageDirectResponse {
  Util.validateModel(tmpReq);
  var request = new LuggageDirectShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.flightSegmentParamList)) {
    request.flightSegmentParamListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.flightSegmentParamList, 'flight_segment_param_list', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.flightSegmentParamListShrink)) {
    query['flight_segment_param_list'] = request.flightSegmentParamListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'LuggageDirect',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/flight-data/luggage-direct`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 航程行李直挂
 *
 * @param request LuggageDirectRequest
 * @return LuggageDirectResponse
 */
async function luggageDirect(request: LuggageDirectRequest): LuggageDirectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new LuggageDirectHeaders{};
  return luggageDirectWithOptions(request, headers, runtime);
}

model OrderDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model OrderDetailRequest {
  orderNum?: long(name='order_num', example='4966***617111'),
  outOrderNum?: string(name='out_order_num', example='x091-2023-0220-j-0001'),
}

model OrderDetailResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    ancillaryItemDetailList?: [ 
      {
        ancillary?: {
          ancillaryId?: string(name='ancillary_id', example='MDY2NTAxLCJleHAiOjE2NxNzM3MDEsIm5ix'),
          ancillaryType?: int32(name='ancillary_type', example='4'),
          baggageAncillary?: {
            baggageAmount?: int32(name='baggage_amount', example='0'),
            baggageWeight?: int32(name='baggage_weight', example='0'),
            baggageWeightUnit?: string(name='baggage_weight_unit', example='KG'),
            isAllWeight?: boolean(name='is_all_weight'),
            price?: double(name='price', example='10.0'),
          }(name='baggage_ancillary'),
        }(name='ancillary'),
        passenger?: {
          birthday?: string(name='birthday', example='20020301'),
          credential?: {
            certIssuePlace?: string(name='cert_issue_place', example='CN'),
            credentialNum?: string(name='credential_num', example='E1***5674'),
            credentialType?: int32(name='credential_type', example='1'),
            expireDate?: string(name='expire_date', example='20290101'),
          }(name='credential'),
          firstName?: string(name='first_name', example='SAN'),
          gender?: int32(name='gender', example='0'),
          lastName?: string(name='last_name', example='ZHANG'),
          mobileCountryCode?: string(name='mobile_country_code', example='86'),
          mobilePhoneNumber?: string(name='mobile_phone_number', example='183******96'),
          nationality?: string(name='nationality', example='CN'),
          type?: int32(name='type', example='0'),
        }(name='passenger'),
        segmentIdList?: [ string ](name='segment_id_list'),
      }
    ](name='ancillary_item_detail_list'),
    baggageAllowanceMap?: map[string]DataBaggageAllowanceMapValue(name='baggage_allowance_map'),
    bookTime?: long(name='book_time', example='1677210784000'),
    flightItemDetailList?: [ 
      {
        bPnrList?: [ string ](name='b_pnr_list'),
        cPnrList?: [ string ](name='c_pnr_list'),
        flightPrice?: {
          sellPrice?: double(name='sell_price', example='300'),
          tax?: double(name='tax', example='10'),
        }(name='flight_price'),
        flightSegmentCabinRelation?: [ 
          {
            cabin?: string(name='cabin', example='V'),
            cabinClass?: string(name='cabin_class', example='Y'),
            cabinClassName?: string(name='cabin_class_name', example='economy class'),
            cabinQuantity?: string(name='cabin_quantity', example='A'),
            segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
          }
        ](name='flight_segment_cabin_relation'),
        passenger?: {
          birthday?: string(name='birthday', example='20020301'),
          credential?: {
            certIssuePlace?: string(name='cert_issue_place', example='CN'),
            credentialNum?: string(name='credential_num', example='E1***5674'),
            credentialType?: int32(name='credential_type', example='1'),
            expireDate?: string(name='expire_date', example='20290101'),
          }(name='credential'),
          firstName?: string(name='first_name', example='SAN'),
          gender?: int32(name='gender', example='0'),
          lastName?: string(name='last_name', example='ZHANG'),
          mobileCountryCode?: string(name='mobile_country_code', example='86'),
          mobilePhoneNumber?: string(name='mobile_phone_number', example='183******96'),
          nationality?: string(name='nationality', example='CN'),
          type?: int32(name='type', example='0'),
        }(name='passenger'),
        ticketAirLine?: string(name='ticket_air_line', example='HO'),
        ticketNos?: [ string ](name='ticket_nos'),
      }
    ](name='flight_item_detail_list'),
    orderNum?: long(name='order_num', example='4966***617111'),
    orderStatus?: int32(name='order_status', example='4'),
    outOrderNum?: string(name='out_order_num', example='x091-2023-0220-j-0001'),
    passengerList?: [ 
      {
        birthday?: string(name='birthday', example='20020301'),
        credential?: {
          certIssuePlace?: string(name='cert_issue_place', example='CN'),
          credentialNum?: string(name='credential_num', example='E1***5674'),
          credentialType?: int32(name='credential_type', example='1'),
          expireDate?: string(name='expire_date', example='20290101'),
        }(name='credential'),
        firstName?: string(name='first_name', example='SAN'),
        gender?: int32(name='gender', example='0'),
        lastName?: string(name='last_name', example='ZHANG'),
        mobileCountryCode?: string(name='mobile_country_code', example='86'),
        mobilePhoneNumber?: string(name='mobile_phone_number', example='183******96'),
        nationality?: string(name='nationality', example='CN'),
        type?: int32(name='type', example='0'),
      }
    ](name='passenger_list'),
    payStatus?: int32(name='pay_status', example='2'),
    payTime?: long(name='pay_time', example='1677210788000'),
    promotionPrice?: double(name='promotion_price', example='10'),
    realPayPrice?: double(name='real_pay_price', example='3000'),
    refundChangeRuleMap?: map[string]DataRefundChangeRuleMapValue(name='refund_change_rule_map'),
    sessionNick?: string(name='session_nick', example='nick'),
    solution?: {
      adultPrice?: double(name='adult_price', example='300'),
      adultTax?: double(name='adult_tax', example='30'),
      childPrice?: double(name='child_price', example='200'),
      childTax?: double(name='child_tax', example='20'),
      infantPrice?: double(name='infant_price', example='100'),
      infantTax?: double(name='infant_tax', example='10'),
      journeyList?: [ 
        {
          segmentList?: [ 
            {
              arrivalAirport?: string(name='arrival_airport', example='MFM'),
              arrivalCity?: string(name='arrival_city', example='MFM'),
              arrivalTerminal?: string(name='arrival_terminal', example='T1'),
              arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
              availability?: string(name='availability', example='7'),
              cabin?: string(name='cabin', example='V'),
              cabinClass?: string(name='cabin_class', example='Y'),
              codeShare?: boolean(name='code_share', example='false'),
              departureAirport?: string(name='departure_airport', example='PVG'),
              departureCity?: string(name='departure_city', example='SHA'),
              departureTerminal?: string(name='departure_terminal', example='T2'),
              departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
              equipType?: string(name='equip_type', example='32Q'),
              flightDuration?: int32(name='flight_duration', example='165'),
              marketingAirline?: string(name='marketing_airline', example='HO'),
              marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
              marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1295'),
              operatingAirline?: string(name='operating_airline', example='HO'),
              operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
              segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
              stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
              stopQuantity?: int32(name='stop_quantity', example='0'),
            }
          ](name='segment_list'),
          transferCount?: int32(name='transfer_count', example='0'),
        }
      ](name='journey_list'),
      productTypeDescription?: string(name='product_type_description', example='description'),
      refundTicketCouponDescription?: string(name='refund_ticket_coupon_description', example='description'),
      segmentBaggageCheckInInfoList?: [ 
        {
          luggageDirectInfoType?: int32(name='luggage_direct_info_type', example='1'),
          segmentIdList?: [ string ](name='segment_id_list'),
        }
      ](name='segment_baggage_check_in_info_list'),
      segmentBaggageMappingList?: [ 
        {
          passengerBaggageAllowanceMapping?: map[string]DataSolutionSegmentBaggageMappingListPassengerBaggageAllowanceMappingValue(name='passenger_baggage_allowance_mapping'),
          segmentIdList?: [ string ](name='segment_id_list'),
        }
      ](name='segment_baggage_mapping_list'),
      segmentRefundChangeRuleMappingList?: [ 
        {
          refundChangeRuleMap?: map[string]DataSolutionSegmentRefundChangeRuleMappingListRefundChangeRuleMapValue(name='refund_change_rule_map'),
          segmentIdList?: [ string ](name='segment_id_list'),
        }
      ](name='segment_refund_change_rule_mapping_list'),
      solutionId?: string(name='solution_id', description='solution_id', example='eJwz8DeySEo0NjQ01TU3TUxxx'),
    }(name='solution'),
    succeedTime?: long(name='succeed_time', example='1677210786000'),
    totalPrice?: double(name='total_price', example='3000'),
    transactionNo?: string(name='transaction_no', example='hkduendkd-2023-dj0'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model OrderDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OrderDetailResponseBody(name='body'),
}

/**
 * @summary 交易-订单详情
 *
 * @param request OrderDetailRequest
 * @param headers OrderDetailHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return OrderDetailResponse
 */
async function orderDetailWithOptions(request: OrderDetailRequest, headers: OrderDetailHeaders, runtime: Util.RuntimeOptions): OrderDetailResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderNum)) {
    query['order_num'] = request.orderNum;
  }
  if (!Util.isUnset(request.outOrderNum)) {
    query['out_order_num'] = request.outOrderNum;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OrderDetail',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/trade/order-detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 交易-订单详情
 *
 * @param request OrderDetailRequest
 * @return OrderDetailResponse
 */
async function orderDetail(request: OrderDetailRequest): OrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new OrderDetailHeaders{};
  return orderDetailWithOptions(request, headers, runtime);
}

model OrderListHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model OrderListRequest {
  bookTimeEnd?: long(name='book_time_end', description='This parameter is required.', example='1677229006000'),
  bookTimeStart?: long(name='book_time_start', description='This parameter is required.', example='1677229005000'),
  pageIndex?: int32(name='page_index', example='1'),
  pageSize?: int32(name='page_size', example='20'),
  status?: int32(name='status', example='4'),
}

model OrderListResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    list?: [ 
      {
        bookTime?: long(name='book_time', example='1677210784000'),
        orderNum?: long(name='order_num', example='4966***617111'),
        orderStatus?: string(name='order_status', example='4'),
        outOrderNum?: string(name='out_order_num', example='x091-2023-0220-j-0001'),
        passengerList?: [ 
          {
            birthday?: string(name='birthday', example='20020301'),
            credential?: {
              certIssuePlace?: string(name='cert_issue_place', example='CN'),
              credentialNum?: string(name='credential_num', example='E1***5674'),
              credentialType?: int32(name='credential_type', example='1'),
              expireDate?: string(name='expire_date', example='20290101'),
            }(name='credential'),
            firstName?: string(name='first_name', example='SAN'),
            gender?: int32(name='gender', example='0'),
            lastName?: string(name='last_name', example='ZHANG'),
            mobileCountryCode?: string(name='mobile_country_code', example='86'),
            mobilePhoneNumber?: string(name='mobile_phone_number', example='183******96'),
            nationality?: string(name='nationality', example='CN'),
            type?: int32(name='type', example='0'),
          }
        ](name='passenger_list'),
        payStatus?: string(name='pay_status', example='2'),
        payTime?: long(name='pay_time', example='1677210788000'),
        promotionPrice?: double(name='promotion_price', example='10'),
        realPayPrice?: double(name='real_pay_price', example='3000'),
        sessionNick?: string(name='session_nick', example='nick'),
        succeedTime?: long(name='succeed_time', example='1677210786000'),
        totalPrice?: double(name='total_price', example='3000'),
        transactionNo?: string(name='transaction_no', example='hkduendkd-2023-dj0'),
      }
    ](name='list'),
    pagination?: {
      currentPage?: int32(name='current_page', example='1'),
      pageSize?: int32(name='page_size', example='10'),
      totalCount?: int32(name='total_count', example='5'),
      totalPage?: int32(name='total_page', example='1'),
    }(name='pagination'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model OrderListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OrderListResponseBody(name='body'),
}

/**
 * @summary 交易-订单列表
 *
 * @param request OrderListRequest
 * @param headers OrderListHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return OrderListResponse
 */
async function orderListWithOptions(request: OrderListRequest, headers: OrderListHeaders, runtime: Util.RuntimeOptions): OrderListResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.bookTimeEnd)) {
    query['book_time_end'] = request.bookTimeEnd;
  }
  if (!Util.isUnset(request.bookTimeStart)) {
    query['book_time_start'] = request.bookTimeStart;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['page_index'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['status'] = request.status;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OrderList',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/trade/order-list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 交易-订单列表
 *
 * @param request OrderListRequest
 * @return OrderListResponse
 */
async function orderList(request: OrderListRequest): OrderListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new OrderListHeaders{};
  return orderListWithOptions(request, headers, runtime);
}

model PricingHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model PricingRequest {
  solutionId?: string(name='solution_id', description='solution_id

This parameter is required.', example='eJwz8DeySEo0NjQ01TU3TU7TNTFINNO1SE5O0jVKM0hKNjEwTElLNYwz0A32cNT1dfPVNTIwMjYwNjRQ8/A3NLI01Q0Ic0cRBwBVFxJJ'),
}

model PricingResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    changedPriceInfo?: {
      adultPrice?: double(name='adult_price', example='100'),
      adultTax?: double(name='adult_tax', example='10'),
      childPrice?: double(name='child_price', example='100'),
      childTax?: double(name='child_tax', example='10'),
      infantPrice?: double(name='infant_price', example='100'),
      infantTax?: double(name='infant_tax', example='10'),
    }(name='changed_price_info'),
    isChanged?: boolean(name='is_changed', example='true'),
    originalPriceInfo?: {
      adultPrice?: double(name='adult_price', description='成人单价', example='200'),
      adultTax?: double(name='adult_tax', description='成人税', example='20'),
      childPrice?: double(name='child_price', description='儿童单价', example='200'),
      childTax?: double(name='child_tax', description='儿童税', example='20'),
      infantPrice?: double(name='infant_price', description='婴儿单价', example='200'),
      infantTax?: double(name='infant_tax', description='婴儿税', example='20'),
    }(name='original_price_info', description='变价之前价格信息 isChanged = true 时，才有值'),
    remainSeats?: string(name='remain_seats'),
    solution?: {
      adultPrice?: double(name='adult_price', example='300'),
      adultTax?: double(name='adult_tax', example='30'),
      childPrice?: double(name='child_price', example='200'),
      childTax?: double(name='child_tax', example='20'),
      infantPrice?: double(name='infant_price', example='200'),
      infantTax?: double(name='infant_tax', example='10'),
      journeyList?: [ 
        {
          segmentList?: [ 
            {
              arrivalAirport?: string(name='arrival_airport', example='MFM'),
              arrivalCity?: string(name='arrival_city', example='MFM'),
              arrivalTerminal?: string(name='arrival_terminal', example='T1'),
              arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
              availability?: string(name='availability', example='7'),
              cabin?: string(name='cabin', example='V'),
              cabinClass?: string(name='cabin_class', example='ALL_CABIN'),
              codeShare?: boolean(name='code_share', example='false'),
              departureAirport?: string(name='departure_airport', example='PVG'),
              departureCity?: string(name='departure_city', example='SHA'),
              departureTerminal?: string(name='departure_terminal', example='T2'),
              departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
              equipType?: string(name='equip_type', example='32Q'),
              flightDuration?: int32(name='flight_duration', example='165'),
              marketingAirline?: string(name='marketing_airline', example='HO'),
              marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
              marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1295'),
              operatingAirline?: string(name='operating_airline', example='HO'),
              operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
              segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
              stopCityList?: string(name='stop_city_list', example='""'),
              stopQuantity?: int32(name='stop_quantity', example='0'),
            }
          ](name='segment_list'),
          transferCount?: int32(name='transfer_count', example='0'),
        }
      ](name='journey_list'),
      productTypeDescription?: string(name='product_type_description', example='description'),
      refundTicketCouponDescription?: string(name='refund_ticket_coupon_description', example='description'),
      segmentBaggageCheckInInfoList?: [ 
        {
          luggageDirectInfoType?: int32(name='luggage_direct_info_type', example='1'),
          segmentIdList?: [ string ](name='segment_id_list'),
        }
      ](name='segment_baggage_check_in_info_list'),
      segmentBaggageMappingList?: [ 
        {
          passengerBaggageAllowanceMapping?: map[string]DataSolutionSegmentBaggageMappingListPassengerBaggageAllowanceMappingValue(name='passenger_baggage_allowance_mapping'),
          segmentIdList?: [ string ](name='segment_id_list'),
        }
      ](name='segment_baggage_mapping_list'),
      segmentRefundChangeRuleMappingList?: [ 
        {
          refundChangeRuleMap?: map[string]DataSolutionSegmentRefundChangeRuleMappingListRefundChangeRuleMapValue(name='refund_change_rule_map'),
          segmentIdList?: [ string ](name='segment_id_list'),
        }
      ](name='segment_refund_change_rule_mapping_list'),
      solutionId?: string(name='solution_id', description='solution_id', example='eJwz8DeySEo0NjQ01TU3TU7TNTFINNO1SE5O0jVKM0hKNjEwTElLNYwz0A32cNT1dfPVNTIwMjYwNjRQ8/A3NLI01Q0Ic0cRBwBVFxJJ'),
    }(name='solution', description='solution'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model PricingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PricingResponseBody(name='body'),
}

/**
 * @summary Pricing
 *
 * @param request PricingRequest
 * @param headers PricingHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return PricingResponse
 */
async function pricingWithOptions(request: PricingRequest, headers: PricingHeaders, runtime: Util.RuntimeOptions): PricingResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.solutionId)) {
    body['solution_id'] = request.solutionId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Pricing',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/trade/action-pricing`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Pricing
 *
 * @param request PricingRequest
 * @return PricingResponse
 */
async function pricing(request: PricingRequest): PricingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new PricingHeaders{};
  return pricingWithOptions(request, headers, runtime);
}

model RefundApplyHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model RefundApplyRequest {
  orderNum?: long(name='order_num', description='This parameter is required.', example='4966***617111'),
  refundJourneys?: [ 
    {
      segmentList?: [ 
        {
          arrivalAirport?: string(name='arrival_airport', description='This parameter is required.', example='MFM'),
          arrivalCity?: string(name='arrival_city', description='This parameter is required.', example='MFM'),
          departureAirport?: string(name='departure_airport', description='This parameter is required.', example='PVG'),
          departureCity?: string(name='departure_city', description='This parameter is required.', example='SHA'),
        }
      ](name='segment_list', description='This parameter is required.'),
    }
  ](name='refund_journeys', description='This parameter is required.'),
  refundPassengerList?: [ 
    {
      document?: string(name='document', example='411***********4411'),
      firstName?: string(name='first_name', description='This parameter is required.', example='SAN'),
      lastName?: string(name='last_name', description='This parameter is required.', example='ZHANG'),
    }
  ](name='refund_passenger_list', description='This parameter is required.'),
  refundType?: {
    file?: [ string ](name='file', example='[xxx,yyy]'),
    refundTypeId?: int32(name='refund_type_id', description='This parameter is required.', example='0'),
    remark?: string(name='remark', example='remark desc'),
  }(name='refund_type', description='This parameter is required.'),
}

model RefundApplyShrinkRequest {
  orderNum?: long(name='order_num', description='This parameter is required.', example='4966***617111'),
  refundJourneysShrink?: string(name='refund_journeys', description='This parameter is required.'),
  refundPassengerListShrink?: string(name='refund_passenger_list', description='This parameter is required.'),
  refundTypeShrink?: string(name='refund_type', description='This parameter is required.'),
}

model RefundApplyResponseBody = {
  requestId?: string(name='RequestId', description='请求 RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    orderNum?: long(name='order_num', example='4966***617111'),
    refundResults?: [ 
      {
        failReason?: string(name='fail_reason', example='desc reason'),
        refundOrderNum?: long(name='refund_order_num', example='4966***617202'),
        refundPassengers?: [ 
          {
            document?: string(name='document', example='411***********4411'),
            firstName?: string(name='first_name', example='SAN'),
            lastName?: string(name='last_name', example='ZHANG'),
          }
        ](name='refund_passengers'),
        status?: int32(name='status', example='0'),
      }
    ](name='refund_results'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model RefundApplyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefundApplyResponseBody(name='body'),
}

/**
 * @summary 退票-申请
 *
 * @param tmpReq RefundApplyRequest
 * @param headers RefundApplyHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return RefundApplyResponse
 */
async function refundApplyWithOptions(tmpReq: RefundApplyRequest, headers: RefundApplyHeaders, runtime: Util.RuntimeOptions): RefundApplyResponse {
  Util.validateModel(tmpReq);
  var request = new RefundApplyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.refundJourneys)) {
    request.refundJourneysShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.refundJourneys, 'refund_journeys', 'json');
  }
  if (!Util.isUnset(tmpReq.refundPassengerList)) {
    request.refundPassengerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.refundPassengerList, 'refund_passenger_list', 'json');
  }
  if (!Util.isUnset(tmpReq.refundType)) {
    request.refundTypeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.refundType, 'refund_type', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.orderNum)) {
    body['order_num'] = request.orderNum;
  }
  if (!Util.isUnset(request.refundJourneysShrink)) {
    body['refund_journeys'] = request.refundJourneysShrink;
  }
  if (!Util.isUnset(request.refundPassengerListShrink)) {
    body['refund_passenger_list'] = request.refundPassengerListShrink;
  }
  if (!Util.isUnset(request.refundTypeShrink)) {
    body['refund_type'] = request.refundTypeShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RefundApply',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/refund/action-apply`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 退票-申请
 *
 * @param request RefundApplyRequest
 * @return RefundApplyResponse
 */
async function refundApply(request: RefundApplyRequest): RefundApplyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new RefundApplyHeaders{};
  return refundApplyWithOptions(request, headers, runtime);
}

model RefundDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model RefundDetailRequest {
  refundOrderNum?: long(name='refund_order_num', description='This parameter is required.', example='4966***617732'),
}

model RefundDetailResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    containMultiRefund?: boolean(name='contain_multi_refund', example='false'),
    multiRefundDetails?: [ 
      {
        multiRefundOrderNum?: long(name='multi_refund_order_num', example='498843***6950'),
        multiRefundTransactionNo?: string(name='multi_refund_transaction_no', example='498843***6950'),
        passengerMultiRefundDetails?: [ 
          {
            changeOrderRefundFee?: double(name='change_order_refund_fee', example='30'),
            originalOrderRefundFee?: double(name='original_order_refund_fee', example='30'),
            passenger?: {
              document?: string(name='document', example='411***********4411'),
              firstName?: string(name='first_name', example='SAN'),
              lastName?: string(name='last_name', example='ZHANG'),
            }(name='passenger'),
          }
        ](name='passenger_multi_refund_details'),
      }
    ](name='multi_refund_details'),
    orderNum?: long(name='order_num', example='4966***617111'),
    passengerRefundDetails?: [ 
      {
        passenger?: {
          document?: string(name='document', example='411***********4411'),
          firstName?: string(name='first_name', example='SAN'),
          lastName?: string(name='last_name', example='ZHANG'),
        }(name='passenger'),
        refundFee?: {
          alreadyUsedTotalFee?: double(name='already_used_total_fee', example='30'),
          modifyRefundToBuyerMoney?: double(name='modify_refund_to_buyer_money', example='30'),
          nonRefundableChangeServiceFee?: double(name='non_refundable_change_service_fee', example='30'),
          nonRefundableChangeUpgradeFee?: double(name='non_refundable_change_upgrade_fee', example='30'),
          nonRefundableTaxFee?: double(name='non_refundable_tax_fee', example='30'),
          nonRefundableTicketFee?: double(name='non_refundable_ticket_fee', example='30'),
          refundToBuyerMoney?: double(name='refund_to_buyer_money', example='30'),
        }(name='refund_fee'),
      }
    ](name='passenger_refund_details'),
    paySuccessUtcTime?: long(name='pay_success_utc_time', example='1677229005000'),
    refundAttachmentUrls?: [ string ](name='refund_attachment_urls', example='[zzz,yyy]'),
    refundJourneys?: [ 
      {
        segmentList?: [ 
          {
            arrivalAirport?: string(name='arrival_airport', example='MFM'),
            arrivalCity?: string(name='arrival_city', example='MFM'),
            arrivalTerminal?: string(name='arrival_terminal', example='T1'),
            arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
            availability?: string(name='availability', example='7'),
            cabin?: string(name='cabin', example='V'),
            cabinClass?: string(name='cabin_class', example='Y'),
            codeShare?: boolean(name='code_share', example='false'),
            departureAirport?: string(name='departure_airport', example='PVG'),
            departureCity?: string(name='departure_city', example='SHA'),
            departureTerminal?: string(name='departure_terminal', example='T2'),
            departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
            equipType?: string(name='equip_type', example='32Q'),
            flightDuration?: int32(name='flight_duration', example='165'),
            marketingAirline?: string(name='marketing_airline', example='HO'),
            marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
            marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1295'),
            operatingAirline?: string(name='operating_airline', example='HO'),
            operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
            segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
            stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
            stopQuantity?: int32(name='stop_quantity', example='0'),
          }
        ](name='segment_list'),
        transferCount?: int32(name='transfer_count', example='0'),
      }
    ](name='refund_journeys'),
    refundOrderNum?: long(name='refund_order_num', example='4966***617654'),
    refundReason?: string(name='refund_reason', example='desc reason'),
    refundType?: int32(name='refund_type', example='5'),
    refuseReason?: string(name='refuse_reason', example='refuse reason'),
    status?: int32(name='status', example='1'),
    transactionNo?: string(name='transaction_no', example='1677229005000'),
    utcCreateTime?: long(name='utc_create_time', example='1677229002000'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model RefundDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefundDetailResponseBody(name='body'),
}

/**
 * @summary 退票-Detail
 *
 * @param request RefundDetailRequest
 * @param headers RefundDetailHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return RefundDetailResponse
 */
async function refundDetailWithOptions(request: RefundDetailRequest, headers: RefundDetailHeaders, runtime: Util.RuntimeOptions): RefundDetailResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.refundOrderNum)) {
    query['refund_order_num'] = request.refundOrderNum;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefundDetail',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/refund/detail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 退票-Detail
 *
 * @param request RefundDetailRequest
 * @return RefundDetailResponse
 */
async function refundDetail(request: RefundDetailRequest): RefundDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new RefundDetailHeaders{};
  return refundDetailWithOptions(request, headers, runtime);
}

model RefundDetailListHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model RefundDetailListRequest {
  orderNum?: long(name='order_num', example='49884*****950'),
  pageIndex?: int32(name='page_index', example='1'),
  pageSize?: int32(name='page_size', example='20'),
  refundCreateBeginTime?: long(name='refund_create_begin_time', description='This parameter is required.', example='1677229002000'),
  refundCreateEndTime?: long(name='refund_create_end_time', description='This parameter is required.', example='1677229005000'),
}

model RefundDetailListResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    list?: [ 
      {
        isMultiRefund?: boolean(name='is_multi_refund', example='true'),
        orderNum?: long(name='order_num', example='49884*****2345'),
        refundOrderNum?: long(name='refund_order_num', example='49884*****950'),
        refundOrderStatus?: int32(name='refund_order_status', example='1'),
        relatedRefundOrderNum?: string(name='related_refund_order_num', example='49884*****2387'),
        transactionNo?: string(name='transaction_no', example='49884**tde-95za'),
        utcCreateTime?: long(name='utc_create_time', example='1677229002000'),
      }
    ](name='list'),
    pagination?: {
      currentPage?: int32(name='current_page', example='1'),
      pageSize?: int32(name='page_size', example='10'),
      totalCount?: int32(name='total_count', example='5'),
      totalPage?: int32(name='total_page', example='1'),
    }(name='pagination'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model RefundDetailListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefundDetailListResponseBody(name='body'),
}

/**
 * @summary 退票-DetailList
 *
 * @param request RefundDetailListRequest
 * @param headers RefundDetailListHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return RefundDetailListResponse
 */
async function refundDetailListWithOptions(request: RefundDetailListRequest, headers: RefundDetailListHeaders, runtime: Util.RuntimeOptions): RefundDetailListResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.orderNum)) {
    query['order_num'] = request.orderNum;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['page_index'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.refundCreateBeginTime)) {
    query['refund_create_begin_time'] = request.refundCreateBeginTime;
  }
  if (!Util.isUnset(request.refundCreateEndTime)) {
    query['refund_create_end_time'] = request.refundCreateEndTime;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefundDetailList',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/refund/detail-list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 退票-DetailList
 *
 * @param request RefundDetailListRequest
 * @return RefundDetailListResponse
 */
async function refundDetailList(request: RefundDetailListRequest): RefundDetailListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new RefundDetailListHeaders{};
  return refundDetailListWithOptions(request, headers, runtime);
}

model SearchHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model SearchRequest {
  adults?: int32(name='adults', example='2'),
  airLegs?: [ 
    {
      arrivalAirportList?: [ string ](name='arrival_airport_list', example='MFM'),
      arrivalCity?: string(name='arrival_city', description='This parameter is required.', example='MFM'),
      departureAirportList?: [ string ](name='departure_airport_list', example='PVG'),
      departureCity?: string(name='departure_city', description='This parameter is required.', example='SHA'),
      departureDate?: string(name='departure_date', description='This parameter is required.', example='20230310'),
    }
  ](name='air_legs', description='This parameter is required.'),
  cabinClass?: string(name='cabin_class', example='ALL_CABIN'),
  children?: int32(name='children', example='1'),
  infants?: int32(name='infants', example='1'),
  searchControlOptions?: {
    airlineExcludedList?: [ string ](name='airline_excluded_list'),
    airlinePreferList?: [ string ](name='airline_prefer_list'),
  }(name='search_control_options'),
}

model SearchShrinkRequest {
  adults?: int32(name='adults', example='2'),
  airLegsShrink?: string(name='air_legs', description='This parameter is required.'),
  cabinClass?: string(name='cabin_class', example='ALL_CABIN'),
  children?: int32(name='children', example='1'),
  infants?: int32(name='infants', example='1'),
  searchControlOptionsShrink?: string(name='search_control_options'),
}

model SearchResponseBody = {
  requestId?: string(name='RequestId', example='2236993B-7BE7-5F92-B179-21FF08570165'),
  data?: {
    solutionList?: [ 
      {
        adultPrice?: double(name='adult_price', example='600'),
        adultTax?: double(name='adult_tax', example='11'),
        childPrice?: double(name='child_price', example='500'),
        childTax?: double(name='child_tax', example='10'),
        infantPrice?: double(name='infant_price', example='400'),
        infantTax?: double(name='infant_tax', example='9'),
        journeyList?: [ 
          {
            segmentList?: [ 
              {
                arrivalAirport?: string(name='arrival_airport', example='MFM'),
                arrivalCity?: string(name='arrival_city', example='MFM'),
                arrivalTerminal?: string(name='arrival_terminal', example='T1'),
                arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
                availability?: string(name='availability', example='7'),
                cabin?: string(name='cabin', example='V'),
                cabinClass?: string(name='cabin_class', example='Y'),
                codeShare?: boolean(name='code_share', example='false'),
                departureAirport?: string(name='departure_airport', example='PVG'),
                departureCity?: string(name='departure_city', example='SHA'),
                departureTerminal?: string(name='departure_terminal', example='T2'),
                departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
                equipType?: string(name='equip_type', example='32Q'),
                flightDuration?: int32(name='flight_duration', example='165'),
                marketingAirline?: string(name='marketing_airline', example='HO'),
                marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
                marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1259'),
                operatingAirline?: string(name='operating_airline', example='HO'),
                operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
                segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
                stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
                stopQuantity?: int32(name='stop_quantity', example='0'),
              }
            ](name='segment_list'),
            transferCount?: int32(name='transfer_count', example='0'),
          }
        ](name='journey_list'),
        productTypeDescription?: string(name='product_type_description', example='description'),
        refundTicketCouponDescription?: string(name='refund_ticket_coupon_description', example='description'),
        segmentBaggageCheckInInfoList?: [ 
          {
            luggageDirectInfoType?: int32(name='luggage_direct_info_type', example='1'),
            segmentIdList?: [ string ](name='segment_id_list'),
          }
        ](name='segment_baggage_check_in_info_list'),
        segmentBaggageMappingList?: [ 
          {
            passengerBaggageAllowanceMapping?: map[string]DataSolutionListSegmentBaggageMappingListPassengerBaggageAllowanceMappingValue(name='passenger_baggage_allowance_mapping'),
            segmentIdList?: [ string ](name='segment_id_list'),
          }
        ](name='segment_baggage_mapping_list'),
        segmentRefundChangeRuleMappingList?: [ 
          {
            refundChangeRuleMap?: map[string]DataSolutionListSegmentRefundChangeRuleMappingListRefundChangeRuleMapValue(name='refund_change_rule_map'),
            segmentIdList?: [ string ](name='segment_id_list'),
          }
        ](name='segment_refund_change_rule_mapping_list'),
        solutionId?: string(name='solution_id', description='solution_id', example='eJwz8DeySEo0NjQ01TU3TU7TNTFINNO1SE5O0jVKM0hKNjEwTElLNYwz0A32cNT1dfPVNTIwMjYwNjRQ8/A3NLI01Q0Ic0cRBwBVFxJJ'),
      }
    ](name='solution_list'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model SearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchResponseBody(name='body'),
}

/**
 * @summary 搜索
 *
 * @param tmpReq SearchRequest
 * @param headers SearchHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchResponse
 */
async function searchWithOptions(tmpReq: SearchRequest, headers: SearchHeaders, runtime: Util.RuntimeOptions): SearchResponse {
  Util.validateModel(tmpReq);
  var request = new SearchShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.airLegs)) {
    request.airLegsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.airLegs, 'air_legs', 'json');
  }
  if (!Util.isUnset(tmpReq.searchControlOptions)) {
    request.searchControlOptionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.searchControlOptions, 'search_control_options', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.adults)) {
    body['adults'] = request.adults;
  }
  if (!Util.isUnset(request.airLegsShrink)) {
    body['air_legs'] = request.airLegsShrink;
  }
  if (!Util.isUnset(request.cabinClass)) {
    body['cabin_class'] = request.cabinClass;
  }
  if (!Util.isUnset(request.children)) {
    body['children'] = request.children;
  }
  if (!Util.isUnset(request.infants)) {
    body['infants'] = request.infants;
  }
  if (!Util.isUnset(request.searchControlOptionsShrink)) {
    body['search_control_options'] = request.searchControlOptionsShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Search',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/trade/action-search`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 搜索
 *
 * @param request SearchRequest
 * @return SearchResponse
 */
async function search(request: SearchRequest): SearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SearchHeaders{};
  return searchWithOptions(request, headers, runtime);
}

model TicketingHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model TicketingRequest {
  orderNum?: long(name='order_num', description='This parameter is required.', example='496***2617111'),
}

model TicketingResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    orderNum?: long(name='order_num', example='496***2617111'),
    transactionNo?: string(name='transaction_no', example='hkduendkd-2023-dj0'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model TicketingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TicketingResponseBody(name='body'),
}

/**
 * @summary 交易-支付出票
 *
 * @param request TicketingRequest
 * @param headers TicketingHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TicketingResponse
 */
async function ticketingWithOptions(request: TicketingRequest, headers: TicketingHeaders, runtime: Util.RuntimeOptions): TicketingResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.orderNum)) {
    body['order_num'] = request.orderNum;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Ticketing',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/trade/action-ticketing`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 交易-支付出票
 *
 * @param request TicketingRequest
 * @return TicketingResponse
 */
async function ticketing(request: TicketingRequest): TicketingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TicketingHeaders{};
  return ticketingWithOptions(request, headers, runtime);
}

model TicketingCheckHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model TicketingCheckRequest {
  orderNum?: long(name='order_num', description='This parameter is required.', example='496***2617111'),
}

model TicketingCheckResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    orderNum?: long(name='order_num', example='496***2617111'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model TicketingCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TicketingCheckResponseBody(name='body'),
}

/**
 * @summary 交易-支付前校验
 *
 * @param request TicketingCheckRequest
 * @param headers TicketingCheckHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TicketingCheckResponse
 */
async function ticketingCheckWithOptions(request: TicketingCheckRequest, headers: TicketingCheckHeaders, runtime: Util.RuntimeOptions): TicketingCheckResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.orderNum)) {
    body['order_num'] = request.orderNum;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TicketingCheck',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/trade/action-ticketing-check`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 交易-支付前校验
 *
 * @param request TicketingCheckRequest
 * @return TicketingCheckResponse
 */
async function ticketingCheck(request: TicketingCheckRequest): TicketingCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TicketingCheckHeaders{};
  return ticketingCheckWithOptions(request, headers, runtime);
}

model TransitVisaHeaders {
  commonHeaders?: map[string]string,
  xAcsAirticketAccessToken?: string(name='x-acs-airticket-access-token', description='access_token

This parameter is required.', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US'),
}

model TransitVisaRequest {
  flightSegmentParamList?: [ 
    {
      arrivalAirport?: string(name='arrival_airport', description='This parameter is required.', example='SIN'),
      arrivalTerminal?: string(name='arrival_terminal', example='T1'),
      arrivalTime?: long(name='arrival_time', description='This parameter is required.', example='1705285430445'),
      codeShare?: boolean(name='code_share', description='This parameter is required.', example='true'),
      departureAirport?: string(name='departure_airport', description='This parameter is required.', example='HGH'),
      departureTerminal?: string(name='departure_terminal', example='T1'),
      departureTime?: long(name='departure_time', description='This parameter is required.', example='1705285430445'),
      marketingAirline?: string(name='marketing_airline', description='This parameter is required.', example='CZ'),
      marketingFlightNo?: string(name='marketing_flight_no', description='This parameter is required.', example='CZ616'),
      operatingAirline?: string(name='operating_airline', example='CZ'),
      stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
      ticketingAirline?: string(name='ticketing_airline', example='CZ'),
    }
  ](name='flight_segment_param_list'),
}

model TransitVisaShrinkRequest {
  flightSegmentParamListShrink?: string(name='flight_segment_param_list'),
}

model TransitVisaResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: [ 
    {
      cityCode?: string(name='city_code', example='HGH'),
      visaType?: int32(name='visa_type', example='1'),
    }
  ](name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model TransitVisaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TransitVisaResponseBody(name='body'),
}

/**
 * @summary 航程过境签
 *
 * @param tmpReq TransitVisaRequest
 * @param headers TransitVisaHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return TransitVisaResponse
 */
async function transitVisaWithOptions(tmpReq: TransitVisaRequest, headers: TransitVisaHeaders, runtime: Util.RuntimeOptions): TransitVisaResponse {
  Util.validateModel(tmpReq);
  var request = new TransitVisaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.flightSegmentParamList)) {
    request.flightSegmentParamListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.flightSegmentParamList, 'flight_segment_param_list', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.flightSegmentParamListShrink)) {
    query['flight_segment_param_list'] = request.flightSegmentParamListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAirticketAccessToken)) {
    realHeaders['x-acs-airticket-access-token'] = Util.toJSONString(headers.xAcsAirticketAccessToken);
  }
  if (!Util.isUnset(headers.xAcsAirticketLanguage)) {
    realHeaders['x-acs-airticket-language'] = Util.toJSONString(headers.xAcsAirticketLanguage);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TransitVisa',
    version = '2023-01-17',
    protocol = 'HTTPS',
    pathname = `/airticket/v1/flight-data/transit-visa`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 航程过境签
 *
 * @param request TransitVisaRequest
 * @return TransitVisaResponse
 */
async function transitVisa(request: TransitVisaRequest): TransitVisaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new TransitVisaHeaders{};
  return transitVisaWithOptions(request, headers, runtime);
}

