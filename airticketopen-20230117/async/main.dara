/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'airticketOpen';
  @version = '2023-01-17';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AccountFlowListRequest {
  dayNum: int32(name='day_num', example='0', position='Query'),
  pageIndex?: int32(name='page_index', example='1', position='Query'),
  pageSize?: int32(name='page_size', example='20', position='Query'),
  utcBeginTime: long(name='utc_begin_time', example='1677427200000', position='Query'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model AccountFlowListResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    list?: [ 
      {
        afterAvailableAmount?: double(name='after_available_amount', example='1000'),
        beforeAvailableAmount?: double(name='before_available_amount', example='1950.5'),
        changeOrderNum?: long(name='change_order_num', example='49880***971'),
        flowId?: long(name='flow_id', example='1627239841225842666'),
        gmtCreate?: long(name='gmt_create', example='1676799185000'),
        gmtModified?: long(name='gmt_modified', example='1676966530000'),
        opAmount?: double(name='op_amount', example='950.5'),
        opType?: int32(name='op_type', example='2'),
        orderNum?: long(name='order_num', example='4988430***971'),
        orderType?: int32(name='order_type', example='1'),
        outOrderNum?: string(name='out_order_num', example='4988430***971'),
        refundOrderNum?: long(name='refund_order_num', example='48430***971'),
      }
    ](name='list'),
    pagination?: {
      currentPage?: int32(name='current_page', example='1'),
      pageSize?: int32(name='page_size', example='10'),
      totalCount?: int32(name='total_count', example='5'),
      totalPage?: int32(name='total_page', example='1'),
    }(name='pagination'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model AccountFlowListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AccountFlowListResponseBody(name='body'),
}

async function accountFlowList(request: AccountFlowListRequest): AccountFlowListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AccountFlowList', 'GET', '/airticket/v1/account/flow-list', 'json', false, 'json', request);
}

model AncillarySuggestRequest {
  solutionId: string(name='solution_id', example='eJwz8DeySEo0NjQ01TU3TU7TNTFINNO1SE5O0jVKM0hKNjEwTElLNYwz0A32cNT1dfPVNTIwMjYwNjRQ8/A3NLI01Q0Ic0cRBwBVFxJJ', position='Body'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model AncillarySuggestResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    segAncillaryMapList?: [ 
      {
        ancillary?: {
          ancillaryId?: string(name='ancillary_id', example='eJwz8DeySEo0NjQ01TU3TU'),
          ancillaryType?: int32(name='ancillary_type', example='4'),
          baggageAncillary?: {
            baggageAmount?: int32(name='baggage_amount', description='行李件数 取值如：3、2、1、0、-2。 -2 表示计重', example='0'),
            baggageWeight?: int32(name='baggage_weight', description='行李重量，0-50。isAllWeght=true 时，表示所有件数总重量。', example='0'),
            baggageWeightUnit?: string(name='baggage_weight_unit', description='行李重量单位', example='KG'),
            isAllWeight?: boolean(name='is_all_weight', description='是否所有行李重量', example='true'),
            price?: double(name='price', description='总价', example='10.0'),
          }(name='baggage_ancillary', description='行李辅营详情'),
        }(name='ancillary'),
        segmentIdList?: [ string ](name='segment_id_list'),
      }
    ](name='seg_ancillary_map_list'),
    solutionId?: string(name='solution_id', example='eJwz8DeySEo0NjQ01TU3TU7TNTFINNO1SE5O0jVKM0hKNjEwTElLNYwz0A32cNT1dfPVNTIwMjYwNjRQ8/A3NLI01Q0Ic0cRBwBVFxJJ'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model AncillarySuggestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AncillarySuggestResponseBody(name='body'),
}

async function ancillarySuggest(request: AncillarySuggestRequest): AncillarySuggestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AncillarySuggest', 'POST', '/airticket/v1/ancillary/action-suggest', 'json', true, 'form', request);
}

model BookRequest {
  contact: {
    email?: string(name='email', example='gao******@gmail.com'),
    firstName?: string(name='first_name', example='SAN'),
    lastName?: string(name='last_name', example='ZHANG'),
    mobileCountryCode?: string(name='mobile_country_code', example='86'),
    mobilePhoneNum?: string(name='mobile_phone_num', example='183******96'),
  }(name='contact', shrink='json', position='Body'),
  outOrderNum: string(name='out_order_num', example='x091-2023-0220-j-0001', position='Body'),
  passengerAncillaryPurchaseMapList?: [ 
    {
      bookAncillaryReqItem?: {
        ancillaryId?: string(name='ancillary_id', example='MDY2NTAxLCJleHAiOjE2NxNzM3MDEsIm5ix'),
        ancillaryType?: int32(name='ancillary_type', example='4'),
      }(name='book_ancillary_req_item'),
      passengerList?: [ 
        {
          birthday?: string(name='birthday', example='20020320'),
          credential?: {
            certIssuePlace?: string(name='cert_issue_place', example='CN'),
            credentialNum?: string(name='credential_num', example='E1***5673'),
            credentialType: int32(name='credential_type', example='1'),
            expireDate?: string(name='expire_date', example='20290102'),
          }(name='credential'),
          firstName: string(name='first_name', example='SAN'),
          gender?: int32(name='gender', example='1'),
          lastName: string(name='last_name', example='ZHANG'),
          mobileCountryCode: string(name='mobile_country_code', example='86'),
          mobilePhoneNumber: string(name='mobile_phone_number', example='182******92'),
          nationality?: string(name='nationality', example='CN'),
          type: int32(name='type', example='0'),
        }
      ](name='passenger_list'),
    }
  ](name='passenger_ancillary_purchase_map_list', shrink='json', position='Body'),
  passengerList: [ 
    {
      birthday?: string(name='birthday', example='20200320'),
      credential?: {
        certIssuePlace?: string(name='cert_issue_place', example='CN'),
        credentialNum?: string(name='credential_num', example='E1***5674'),
        credentialType: int32(name='credential_type', example='1'),
        expireDate?: string(name='expire_date', example='20290101'),
      }(name='credential'),
      firstName: string(name='first_name', example='SAN'),
      gender?: int32(name='gender', example='0'),
      lastName: string(name='last_name', example='ZHANG'),
      mobileCountryCode: string(name='mobile_country_code', example='86'),
      mobilePhoneNumber: string(name='mobile_phone_number', example='183******95'),
      nationality?: string(name='nationality', example='CN'),
      type: int32(name='type', example='0'),
    }
  ](name='passenger_list', shrink='json', position='Body'),
  solutionId: string(name='solution_id', description='solution_id', example='eJwz8DeySEo0NjQ01TU3TU7TNTFINNO1SE5O0jVKM0hKNjEwTElLNYwz0A32cNT1dfPVNTIwMjYwNjRQ8/A3NLI01Q0Ic0cRBwBVFxJJ', position='Body'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model BookResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    orderList?: [ 
      {
        orderNum?: long(name='order_num', example='4966***617111'),
      }
    ](name='order_list'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: {
    orderList?: [ 
      {
        orderNum?: long(name='order_num'),
      }
    ](name='order_list'),
  }(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model BookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BookResponseBody(name='body'),
}

async function book(request: BookRequest): BookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Book', 'POST', '/airticket/v1/trade/action-book', 'json', true, 'form', request);
}

model CancelRequest {
  orderNum: long(name='order_num', example='496***2617111', position='Body'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model CancelResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    orderNum?: long(name='order_num', example='496***2617111'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model CancelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelResponseBody(name='body'),
}

async function cancel(request: CancelRequest): CancelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Cancel', 'POST', '/airticket/v1/trade/action-cancel', 'json', true, 'form', request);
}

model ChangeApplyRequest {
  changePassengerList: [ 
    {
      document?: string(name='document', example='411***********4411'),
      firstName: string(name='first_name', example='SAN'),
      lastName: string(name='last_name', example='ZHANG'),
    }
  ](name='change_passenger_list', shrink='json', position='Body'),
  changedJourneys: [ 
    {
      segmentList?: [ 
        {
          arrivalAirport?: string(name='arrival_airport', example='MFM'),
          arrivalCity: string(name='arrival_city', example='MFM'),
          arriveTerminal?: string(name='arrive_terminal', example='T1'),
          arriveTime?: long(name='arrive_time', example='1677232999000'),
          codeShare?: boolean(name='code_share', example='false'),
          departureAirport?: string(name='departure_airport', example='PVG'),
          departureCity: string(name='departure_city', example='SHA'),
          departureDate: string(name='departure_date', example='20230320'),
          departureTerminal?: string(name='departure_terminal', example='T2'),
          departureTime?: long(name='departure_time', example='1677232998000'),
          marketingFlightNo: string(name='marketing_flight_no', example='HO1295'),
          operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
        }
      ](name='segment_list'),
    }
  ](name='changed_journeys', shrink='json', position='Body'),
  contact: {
    email?: string(name='email', example='gao******@gmail.com'),
    mobileCountryCode?: string(name='mobile_country_code', example='86'),
    mobilePhoneNum?: string(name='mobile_phone_num', example='183*****92'),
  }(name='contact', shrink='json', position='Body'),
  orderNum: long(name='order_num', example='4988430***950', position='Body'),
  remark?: string(name='remark', example='remark desc', position='Body'),
  type: int32(name='type', example='0', position='Body'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model ChangeApplyResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    changeOrders?: [ 
      {
        changeOrderNum?: long(name='change_order_num', example='49884*****950'),
        changeOrderStatus?: int32(name='change_order_status', example='0'),
        failReason?: string(name='fail_reason', example='desc reason'),
        passengers?: [ 
          {
            document?: string(name='document', example='411***********4411'),
            firstName?: string(name='first_name', example='SAN'),
            lastName?: string(name='last_name', example='ZHANG'),
          }
        ](name='passengers'),
      }
    ](name='change_orders'),
    orderNum?: long(name='order_num', example='4988430***950'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model ChangeApplyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeApplyResponseBody(name='body'),
}

async function changeApply(request: ChangeApplyRequest): ChangeApplyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeApply', 'POST', '/airticket/v1/change/action-apply', 'json', true, 'form', request);
}

model ChangeCancelRequest {
  changeOrderNum: long(name='change_order_num', example='4988430***950', position='Body'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model ChangeCancelResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: any(name='data', example='null'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model ChangeCancelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeCancelResponseBody(name='body'),
}

async function changeCancel(request: ChangeCancelRequest): ChangeCancelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeCancel', 'POST', '/airticket/v1/change/action-cancel', 'json', true, 'form', request);
}

model ChangeConfirmRequest {
  changeOrderNum: long(name='change_order_num', example='4988430***950', position='Body'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model ChangeConfirmResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    payAmount?: double(name='pay_amount', example='30'),
    transactionNo?: string(name='transaction_no', example='hkduendkd-2023-dj0'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model ChangeConfirmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeConfirmResponseBody(name='body'),
}

async function changeConfirm(request: ChangeConfirmRequest): ChangeConfirmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeConfirm', 'POST', '/airticket/v1/change/action-confirm', 'json', true, 'form', request);
}

model ChangeDetailRequest {
  changeOrderNum: long(name='change_order_num', example='4988430***950', position='Query'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model ChangeDetailResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    changeFeeDetails?: [ 
      {
        changeFee?: {
          serviceFee?: double(name='service_fee', example='50'),
          taxFee?: double(name='tax_fee', example='20'),
          upgradeFee?: double(name='upgrade_fee', example='30'),
        }(name='change_fee'),
        passenger?: {
          document?: string(name='document', example='411***********4411'),
          firstName?: string(name='first_name', example='SAN'),
          lastName?: string(name='last_name', example='ZHANG'),
        }(name='passenger'),
      }
    ](name='change_fee_details'),
    changeOrderNum?: long(name='change_order_num', example='4988430***950'),
    changePassengers?: [ 
      {
        document?: string(name='document', example='411***********4411'),
        firstName?: string(name='first_name', example='SAN'),
        lastName?: string(name='last_name', example='ZHANG'),
      }
    ](name='change_passengers'),
    changeReasonType?: int32(name='change_reason_type', example='1'),
    changedJourneys?: [ 
      {
        segmentList?: [ 
          {
            arrivalAirport?: string(name='arrival_airport', example='MFM'),
            arrivalCity?: string(name='arrival_city', example='MFM'),
            arrivalTerminal?: string(name='arrival_terminal', example='T1'),
            arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
            availability?: string(name='availability', example='7'),
            cabin?: string(name='cabin', example='V'),
            cabinClass?: string(name='cabin_class', example='Y'),
            codeShare?: boolean(name='code_share', example='false'),
            departureAirport?: string(name='departure_airport', example='PVG'),
            departureCity?: string(name='departure_city', example='SHA'),
            departureTerminal?: string(name='departure_terminal', example='T2'),
            departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
            equipType?: string(name='equip_type', example='32Q'),
            flightDuration?: int32(name='flight_duration', example='165'),
            marketingAirline?: string(name='marketing_airline', example='HO'),
            marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
            marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1295'),
            operatingAirline?: string(name='operating_airline', example='HO'),
            operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
            segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
            stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
            stopQuantity?: int32(name='stop_quantity', example='0'),
          }
        ](name='segment_list'),
        transferCount?: int32(name='transfer_count', example='0'),
      }
    ](name='changed_journeys'),
    closeReason?: string(name='close_reason', example='reason desc'),
    closeUtcTime?: long(name='close_utc_time', example='1677415244000'),
    contact?: {
      email?: string(name='email', example='gao******@gmail.com'),
      mobileCountryCode?: string(name='mobile_country_code', example='86'),
      mobilePhoneNum?: string(name='mobile_phone_num', example='183*****92'),
    }(name='contact'),
    createUtcTime?: long(name='create_utc_time', example='1677415276000'),
    lastConfirmUtcTime?: long(name='last_confirm_utc_time', example='1677415278000'),
    lastJourneys?: [ 
      {
        segmentList?: [ 
          {
            arrivalAirport?: string(name='arrival_airport', example='MFM'),
            arrivalCity?: string(name='arrival_city', example='MFM'),
            arrivalTerminal?: string(name='arrival_terminal', example='T1'),
            arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
            availability?: string(name='availability', example='7'),
            cabin?: string(name='cabin', example='V'),
            cabinClass?: string(name='cabin_class', example='Y'),
            codeShare?: boolean(name='code_share', example='false'),
            departureAirport?: string(name='departure_airport', example='PVG'),
            departureCity?: string(name='departure_city', example='SHA'),
            departureTerminal?: string(name='departure_terminal', example='T2'),
            departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
            equipType?: string(name='equip_type', example='32Q'),
            flightDuration?: int32(name='flight_duration', example='165'),
            marketingAirline?: string(name='marketing_airline', example='HO'),
            marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
            marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1295'),
            operatingAirline?: string(name='operating_airline', example='HO'),
            operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
            segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
            stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
            stopQuantity?: int32(name='stop_quantity', example='0'),
          }
        ](name='segment_list'),
        transferCount?: int32(name='transfer_count', example='0'),
      }
    ](name='last_journeys'),
    orderNum?: long(name='order_num', example='5988430***541'),
    orderStatus?: int32(name='order_status', example='2'),
    originalJourneys?: [ 
      {
        segmentList?: [ 
          {
            arrivalAirport?: string(name='arrival_airport', example='MFM'),
            arrivalCity?: string(name='arrival_city', example='MFM'),
            arrivalTerminal?: string(name='arrival_terminal', example='T1'),
            arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
            availability?: string(name='availability', example='7'),
            cabin?: string(name='cabin', example='V'),
            cabinClass?: string(name='cabin_class', example='Y'),
            codeShare?: boolean(name='code_share', example='false'),
            departureAirport?: string(name='departure_airport', example='PVG'),
            departureCity?: string(name='departure_city', example='SHA'),
            departureTerminal?: string(name='departure_terminal', example='T2'),
            departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
            equipType?: string(name='equip_type', example='32Q'),
            flightDuration?: int32(name='flight_duration', example='165'),
            marketingAirline?: string(name='marketing_airline', example='HO'),
            marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
            marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1295'),
            operatingAirline?: string(name='operating_airline', example='HO'),
            operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
            segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
            stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
            stopQuantity?: int32(name='stop_quantity', example='0'),
          }
        ](name='segment_list'),
        transferCount?: int32(name='transfer_count', example='0'),
      }
    ](name='original_journeys'),
    payStatus?: int32(name='pay_status', example='2'),
    paySuccessUtcTime?: long(name='pay_success_utc_time', example='1677415255000'),
    totalAmount?: double(name='total_amount', example='300'),
    transactionNo?: string(name='transaction_no', example='hkduendkd-2023-dj0'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model ChangeDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeDetailResponseBody(name='body'),
}

async function changeDetail(request: ChangeDetailRequest): ChangeDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeDetail', 'GET', '/airticket/v1/change/detail', 'json', false, 'json', request);
}

model ChangeDetailListOfBuyerRequest {
  pageIndex?: int32(name='page_index', example='1', position='Query'),
  pageSize?: int32(name='page_size', example='10', position='Query'),
  utcCreateBegin?: long(name='utc_create_begin', example='1677415276000', position='Query'),
  utcCreateEnd?: long(name='utc_create_end', example='1677415279000', position='Query'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model ChangeDetailListOfBuyerResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    list?: [ 
      {
        changeOrderNum?: long(name='change_order_num', example='4988430***950'),
        orderNum?: long(name='order_num', example='4988430***971'),
        orderStatus?: int32(name='order_status', example='2'),
        payStatus?: int32(name='pay_status', example='2'),
        transactionNo?: string(name='transaction_no', example='hkduendkd-2023-dj0'),
        utcCreateTime?: long(name='utc_create_time', example='1677415274000'),
      }
    ](name='list'),
    pagination?: {
      currentPage?: int32(name='current_page', example='1'),
      pageSize?: int32(name='page_size', example='10'),
      totalCount?: int32(name='total_count', example='5'),
      totalPage?: int32(name='total_page', example='1'),
    }(name='pagination'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model ChangeDetailListOfBuyerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeDetailListOfBuyerResponseBody(name='body'),
}

async function changeDetailListOfBuyer(request: ChangeDetailListOfBuyerRequest): ChangeDetailListOfBuyerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeDetailListOfBuyer', 'GET', '/airticket/v1/change/buyer/detail-list', 'json', false, 'json', request);
}

model ChangeDetailListOfOrderNumRequest {
  orderNum: long(name='order_num', example='4988430***700', position='Query'),
  pageIndex?: int32(name='page_index', example='1', position='Query'),
  pageSize?: int32(name='page_size', example='20', position='Query'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model ChangeDetailListOfOrderNumResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    list?: [ 
      {
        changeFeeDetails?: [ 
          {
            changeFee?: {
              serviceFee?: double(name='service_fee', example='50'),
              taxFee?: double(name='tax_fee', example='20'),
              upgradeFee?: double(name='upgrade_fee', example='30'),
            }(name='change_fee'),
            passenger?: {
              document?: string(name='document', example='411***********4411'),
              firstName?: string(name='first_name', example='SAN'),
              lastName?: string(name='last_name', example='ZHANG'),
            }(name='passenger'),
          }
        ](name='change_fee_details'),
        changeOrderNum?: long(name='change_order_num', example='4988430***950'),
        changePassengers?: [ 
          {
            document?: string(name='document', example='411***********4411'),
            firstName?: string(name='first_name', example='SAN'),
            lastName?: string(name='last_name', example='ZHANG'),
          }
        ](name='change_passengers'),
        changeReasonType?: int32(name='change_reason_type', example='1'),
        changedJourneys?: [ 
          {
            segmentList?: [ 
              {
                arrivalAirport?: string(name='arrival_airport', example='MFM'),
                arrivalCity?: string(name='arrival_city', example='MFM'),
                arrivalTerminal?: string(name='arrival_terminal', example='T1'),
                arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
                availability?: string(name='availability', example='7'),
                cabin?: string(name='cabin', example='V'),
                cabinClass?: string(name='cabin_class', example='Y'),
                codeShare?: boolean(name='code_share', example='false'),
                departureAirport?: string(name='departure_airport', example='PVG'),
                departureCity?: string(name='departure_city', example='SHA'),
                departureTerminal?: string(name='departure_terminal', example='T2'),
                departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
                equipType?: string(name='equip_type', example='32Q'),
                flightDuration?: int32(name='flight_duration', example='165'),
                marketingAirline?: string(name='marketing_airline', example='HO'),
                marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
                marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1295'),
                operatingAirline?: string(name='operating_airline', example='HO'),
                operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
                segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
                stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
                stopQuantity?: int32(name='stop_quantity', example='0'),
              }
            ](name='segment_list'),
            transferCount?: int32(name='transfer_count', example='0'),
          }
        ](name='changed_journeys'),
        closeReason?: string(name='close_reason', example='reason desc'),
        closeUtcTime?: long(name='close_utc_time', example='1677415244000'),
        contact?: {
          email?: string(name='email', example='gao******@gmail.com'),
          mobileCountryCode?: string(name='mobile_country_code', example='86'),
          mobilePhoneNum?: string(name='mobile_phone_num', example='183*****92'),
        }(name='contact'),
        createUtcTime?: long(name='create_utc_time', example='1677415276000'),
        lastConfirmUtcTime?: long(name='last_confirm_utc_time', example='1677415278000'),
        lastJourneys?: [ 
          {
            segmentList?: [ 
              {
                arrivalAirport?: string(name='arrival_airport', example='MFM'),
                arrivalCity?: string(name='arrival_city', example='MFM'),
                arrivalTerminal?: string(name='arrival_terminal', example='T1'),
                arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
                availability?: string(name='availability', example='7'),
                cabin?: string(name='cabin', example='V'),
                cabinClass?: string(name='cabin_class', example='Y'),
                codeShare?: boolean(name='code_share', example='false'),
                departureAirport?: string(name='departure_airport', example='PVG'),
                departureCity?: string(name='departure_city', example='SHA'),
                departureTerminal?: string(name='departure_terminal', example='T2'),
                departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
                equipType?: string(name='equip_type', example='32Q'),
                flightDuration?: int32(name='flight_duration', example='165'),
                marketingAirline?: string(name='marketing_airline', example='HO'),
                marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
                marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1295'),
                operatingAirline?: string(name='operating_airline', example='HO'),
                operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
                segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
                stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
                stopQuantity?: int32(name='stop_quantity', example='0'),
              }
            ](name='segment_list'),
            transferCount?: int32(name='transfer_count', example='0'),
          }
        ](name='last_journeys'),
        orderNum?: long(name='order_num', example='5988430***541'),
        orderStatus?: int32(name='order_status', example='2'),
        originalJourneys?: [ 
          {
            segmentList?: [ 
              {
                arrivalAirport?: string(name='arrival_airport', example='MFM'),
                arrivalCity?: string(name='arrival_city', example='MFM'),
                arrivalTerminal?: string(name='arrival_terminal', example='T1'),
                arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
                availability?: string(name='availability', example='7'),
                cabin?: string(name='cabin', example='V'),
                cabinClass?: string(name='cabin_class', example='Y'),
                codeShare?: boolean(name='code_share', example='false'),
                departureAirport?: string(name='departure_airport', example='PVG'),
                departureCity?: string(name='departure_city', example='SHA'),
                departureTerminal?: string(name='departure_terminal', example='T2'),
                departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
                equipType?: string(name='equip_type', example='32Q'),
                flightDuration?: int32(name='flight_duration', example='165'),
                marketingAirline?: string(name='marketing_airline', example='HO'),
                marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
                marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1295'),
                operatingAirline?: string(name='operating_airline', example='HO'),
                operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
                segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
                stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
                stopQuantity?: int32(name='stop_quantity', example='0'),
              }
            ](name='segment_list'),
            transferCount?: int32(name='transfer_count', example='0'),
          }
        ](name='original_journeys'),
        payStatus?: int32(name='pay_status', example='2'),
        paySuccessUtcTime?: long(name='pay_success_utc_time', example='1677415255000'),
        totalAmount?: double(name='total_amount', example='300'),
        transactionNo?: string(name='transaction_no', example='hkduendkd-2023-dj0'),
      }
    ](name='list'),
    pagination?: {
      currentPage?: int32(name='current_page', example='1'),
      pageSize?: int32(name='page_size', example='10'),
      totalCount?: int32(name='total_count', example='5'),
      totalPage?: int32(name='total_page', example='1'),
    }(name='pagination'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model ChangeDetailListOfOrderNumResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeDetailListOfOrderNumResponseBody(name='body'),
}

async function changeDetailListOfOrderNum(request: ChangeDetailListOfOrderNumRequest): ChangeDetailListOfOrderNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeDetailListOfOrderNum', 'GET', '/airticket/v1/change/order-num/detail-list', 'json', false, 'json', request);
}

model EnrichRequest {
  adults?: int32(name='adults', example='1', position='Body'),
  cabinClass?: string(name='cabin_class', example='ALL_CABIN', position='Body'),
  children?: int32(name='children', example='1', position='Body'),
  infants?: int32(name='infants', example='1', position='Body'),
  journeyParamList?: [ 
    {
      arrivalCity: string(name='arrival_city', example='MFM'),
      departureCity: string(name='departure_city', example='SHA'),
      departureDate: string(name='departure_date', example='20230310'),
      segmentParamList: [ 
        {
          arrivalAirport: string(name='arrival_airport', example='MFM'),
          arrivalCity?: string(name='arrival_city', example='MFM'),
          cabin?: string(name='cabin', example='V'),
          childCabin?: string(name='child_cabin', example='E'),
          departureAirport: string(name='departure_airport', example='PVG'),
          departureCity?: string(name='departure_city', example='SHA'),
          departureTime: string(name='departure_time', example='2023-03-10 07:55:00'),
          marketingFlightNo: string(name='marketing_flight_no', example='HO1295'),
        }
      ](name='segment_param_list'),
    }
  ](name='journey_param_list', shrink='json', position='Body'),
  solutionId?: string(name='solution_id', example='eJwz8DeySEo0NjQ01TU3TU7TNTFINNO1SE5O0jVKM0hKNjEwTElLNYwz0A32cNT1dfPVNTIwMjYwNjRQ8/A3NLI01Q0Ic0cRBwBVFxJJ', position='Body'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model EnrichResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    solutionList?: [ 
      {
        adultPrice?: double(name='adult_price', example='500'),
        adultTax?: double(name='adult_tax', example='100'),
        childPrice?: double(name='child_price', example='100'),
        childTax?: double(name='child_tax', example='100'),
        infantPrice?: double(name='infant_price', example='500'),
        infantTax?: double(name='infant_tax', example='100'),
        journeyList?: [ 
          {
            segmentList?: [ 
              {
                arrivalAirport?: string(name='arrival_airport', example='MFM'),
                arrivalCity?: string(name='arrival_city', example='MFM'),
                arrivalTerminal?: string(name='arrival_terminal', example='null'),
                arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
                availability?: string(name='availability', example='7'),
                cabin?: string(name='cabin', example='V'),
                cabinClass?: string(name='cabin_class', example='Y'),
                codeShare?: boolean(name='code_share', example='false'),
                departureAirport?: string(name='departure_airport', example='PVG'),
                departureCity?: string(name='departure_city', example='SHA'),
                departureTerminal?: string(name='departure_terminal', example='T2'),
                departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
                equipType?: string(name='equip_type', example='32Q'),
                flightDuration?: int32(name='flight_duration', example='165'),
                marketingAirline?: string(name='marketing_airline', example='HO'),
                marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
                marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1295'),
                operatingAirline?: string(name='operating_airline', example='HO'),
                operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
                segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
                stopCityList?: string(name='stop_city_list', example='""'),
                stopQuantity?: int32(name='stop_quantity', example='0'),
              }
            ](name='segment_list'),
            transferCount?: int32(name='transfer_count', example='0'),
          }
        ](name='journey_list'),
        productTypeDescription?: string(name='product_type_description', example='""'),
        refundTicketCouponDescription?: string(name='refund_ticket_coupon_description', example='""'),
        segmentBaggageCheckInInfoList?: [ 
          {
            luggageDirectInfoType?: int32(name='luggage_direct_info_type', example='1'),
            segmentIdList?: [ string ](name='segment_id_list'),
          }
        ](name='segment_baggage_check_in_info_list'),
        segmentBaggageMappingList?: [ 
          {
            passengerBaggageAllowanceMapping?: map[string]DataSolutionListSegmentBaggageMappingListPassengerBaggageAllowanceMappingValue(name='passenger_baggage_allowance_mapping'),
            segmentIdList?: [ string ](name='segment_id_list'),
          }
        ](name='segment_baggage_mapping_list'),
        segmentRefundChangeRuleMappingList?: [ 
          {
            refundChangeRuleMap?: map[string]DataSolutionListSegmentRefundChangeRuleMappingListRefundChangeRuleMapValue(name='refund_change_rule_map'),
            segmentIdList?: [ string ](name='segment_id_list'),
          }
        ](name='segment_refund_change_rule_mapping_list'),
        solutionId?: string(name='solution_id', description='solution_id', example='eJwz8DeySEo0NjQ01TU3TU7TNTFINNO1SE5O0jVKM0hKNjEwTElLNYwz0A32cNT1dfPVNTIwMjYwNjRQ8/A3NLI01Q0Ic0cRBwBVFxJJ'),
      }
    ](name='solution_list'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model EnrichResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnrichResponseBody(name='body'),
}

async function enrich(request: EnrichRequest): EnrichResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Enrich', 'POST', '/airticket/v1/trade/action-enrich', 'json', true, 'form', request);
}

model FileUploadRequest {
  fileContent: string(name='file_content', example='0r2LSuIsHlxEoGZcnGe34U1njBOR83Q4HNSvMDGrDPK5J71VjcGdRIWz2x3+tFxvQaduwHB46Z9K
dbIoDN8xPQ5PWlky8rKOPmAqSZfIRyPmAwvPvTJFwr8bRgHPPaq2VO8kHJ6jFIpJJ5I7Zqd1BjGS
SR/kULQZHsDDd2zgA9RRTsEQF2OSxFFFx2P/2Q==', position='Body'),
  orderNum: long(name='order_num', example='496***2617111', position='Body'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model FileUploadResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    uploadedFileUrl?: string(name='uploaded_file_url', example='https://fliggy-flight-jinghang-bucket.oss-cn-zhangjiakou.aliyuncs.com/suez/flight_suez_9a634376****47.jpeg'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model FileUploadResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FileUploadResponseBody(name='body'),
}

async function fileUpload(request: FileUploadRequest): FileUploadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FileUpload', 'POST', '/airticket/v1/attachment/action-upload', 'json', true, 'form', request);
}

model FlightChangeOfOrderRequest {
  orderNum: long(name='order_num', example='4966***617111', position='Query'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model FlightChangeOfOrderResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: [ 
    {
      flightChangeDetail?: {
        changeReason?: string(name='change_reason', example='天气'),
        changeTime?: string(name='change_time', example='2023-02-01 10:01:00'),
        changeType?: int32(name='change_type', example='1'),
        newArrivalAirport?: string(name='new_arrival_airport', example='MFM'),
        newArrivalTime?: string(name='new_arrival_time', example='2023-02-01 15:01:00'),
        newDepartureAirport?: string(name='new_departure_airport', example='PVG'),
        newDepartureTime?: string(name='new_departure_time', example='2023-02-01 13:01:00'),
        newFlightNo?: string(name='new_flight_no', example='HO1295'),
        oldArrivalAirport?: string(name='old_arrival_airport', example='MFM'),
        oldArrivalTime?: string(name='old_arrival_time', example='023-02-01 14:01:00'),
        oldDepartureAirport?: string(name='old_departure_airport', example='PVG'),
        oldDepartureTime?: string(name='old_departure_time', example='2023-02-01 12:01:00'),
        oldFlightNo?: string(name='old_flight_no', example='HO1295'),
      }(name='flight_change_detail'),
      orderNum?: long(name='order_num', example='4966***617111'),
    }
  ](name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model FlightChangeOfOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlightChangeOfOrderResponseBody(name='body'),
}

async function flightChangeOfOrder(request: FlightChangeOfOrderRequest): FlightChangeOfOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FlightChangeOfOrder', 'GET', '/airticket/v1/flightchange/of-order', 'json', false, 'json', request);
}

model GetTokenRequest {
  appKey: string(name='app_key', description='appKey', example='fu1bltcu3400iurywuri', position='Query'),
  appSecret: string(name='app_secret', description='appSecret', example='ZzQ3MW1mb3E1ODAwI2ldUjYlWUdJn5YI', position='Query'),
}

model GetTokenResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    expireTime?: long(name='expire_time', example='7200'),
    generateTime?: long(name='generate_time', example='1677055176'),
    token?: string(name='token', description='token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiIyUlRjY0Ezc1puSndpYU11R1ctTkVRIiwiaWF0IjoxNjc3MTU1Njg3LCJleHAiOjE2NzcxNjI4ODcsIm5iZiI6MTY3NzE1NTYyN30.bd8qBedJ7R24NC8VpMtM4Ni5OR-Cc0utPiKSx8fjoj9taalt7zXBF8uIVTETw1N-Fx9reLflwVXrbDHky7ZKqlE5o_B5Bkx-crQKlJL-NzasEmNnuJNb5kmmbCy3mvIrQfo5Q5Y0ZaQ110pXK4qd1shRbklvuQXn8lPueJtNqo8VdIOAPGG_rPwOw2P767I0fyFHcome8FR4ST1UrwxeApNKMB_BkpCsUZLgpm9h9trhKbB-3qtk6UK1GKmfw6qlWpL3PQN7FAObNruS0r0CGh3Muc9PaGsuu8Xu5on21h9WmI7L0-jatZkS55p4PEerU56XpkwJfa35_hltKNTauu'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model GetTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTokenResponseBody(name='body'),
}

async function getToken(request: GetTokenRequest): GetTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetToken', 'GET', '/airticket/v1/token', 'json', false, 'json', request);
}

model LuggageDirectRequest {
  flightSegmentParamList?: [ 
    {
      arrivalAirport: string(name='arrival_airport', example='SIN'),
      arrivalTerminal?: string(name='arrival_terminal', example='T1'),
      arrivalTime: long(name='arrival_time', example='1705285430445'),
      codeShare: boolean(name='code_share', example='true'),
      departureAirport: string(name='departure_airport', example='HGH'),
      departureTerminal?: string(name='departure_terminal', example='T1'),
      departureTime: long(name='departure_time', example='1705285430445'),
      marketingAirline: string(name='marketing_airline', example='CZ'),
      marketingFlightNo: string(name='marketing_flight_no', example='CZ616'),
      operatingAirline?: string(name='operating_airline', example='CZ'),
      stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
      ticketingAirline?: string(name='ticketing_airline', example='CZ'),
    }
  ](name='flight_segment_param_list', shrink='json', position='Body'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model LuggageDirectResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: [ 
    {
      cityCode?: string(name='city_code', example='BJS'),
      directType?: int32(name='direct_type', example='1'),
    }
  ](name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model LuggageDirectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LuggageDirectResponseBody(name='body'),
}

async function luggageDirect(request: LuggageDirectRequest): LuggageDirectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'LuggageDirect', 'GET', '/airticket/v1/flight-data/luggage-direct', 'json', true, 'form', request);
}

model OrderDetailRequest {
  orderNum?: long(name='order_num', example='4966***617111', position='Query'),
  outOrderNum?: string(name='out_order_num', example='x091-2023-0220-j-0001', position='Query'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model OrderDetailResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    ancillaryItemDetailList?: [ 
      {
        ancillary?: {
          ancillaryId?: string(name='ancillary_id', example='MDY2NTAxLCJleHAiOjE2NxNzM3MDEsIm5ix'),
          ancillaryType?: int32(name='ancillary_type', example='4'),
          baggageAncillary?: {
            baggageAmount?: int32(name='baggage_amount', example='0'),
            baggageWeight?: int32(name='baggage_weight', example='0'),
            baggageWeightUnit?: string(name='baggage_weight_unit', example='KG'),
            isAllWeight?: boolean(name='is_all_weight'),
            price?: double(name='price', example='10.0'),
          }(name='baggage_ancillary'),
        }(name='ancillary'),
        passenger?: {
          birthday?: string(name='birthday', example='20020301'),
          credential?: {
            certIssuePlace?: string(name='cert_issue_place', example='CN'),
            credentialNum?: string(name='credential_num', example='E1***5674'),
            credentialType?: int32(name='credential_type', example='1'),
            expireDate?: string(name='expire_date', example='20290101'),
          }(name='credential'),
          firstName?: string(name='first_name', example='SAN'),
          gender?: int32(name='gender', example='0'),
          lastName?: string(name='last_name', example='ZHANG'),
          mobileCountryCode?: string(name='mobile_country_code', example='86'),
          mobilePhoneNumber?: string(name='mobile_phone_number', example='183******96'),
          nationality?: string(name='nationality', example='CN'),
          type?: int32(name='type', example='0'),
        }(name='passenger'),
        segmentIdList?: [ string ](name='segment_id_list'),
      }
    ](name='ancillary_item_detail_list'),
    baggageAllowanceMap?: map[string]DataBaggageAllowanceMapValue(name='baggage_allowance_map'),
    bookTime?: long(name='book_time', example='1677210784000'),
    flightItemDetailList?: [ 
      {
        bPnrList?: [ string ](name='b_pnr_list'),
        cPnrList?: [ string ](name='c_pnr_list'),
        flightPrice?: {
          sellPrice?: double(name='sell_price', example='300'),
          tax?: double(name='tax', example='10'),
        }(name='flight_price'),
        flightSegmentCabinRelation?: [ 
          {
            cabin?: string(name='cabin', example='V'),
            cabinClass?: string(name='cabin_class', example='Y'),
            cabinClassName?: string(name='cabin_class_name', example='economy class'),
            cabinQuantity?: string(name='cabin_quantity', example='A'),
            segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
          }
        ](name='flight_segment_cabin_relation'),
        passenger?: {
          birthday?: string(name='birthday', example='20020301'),
          credential?: {
            certIssuePlace?: string(name='cert_issue_place', example='CN'),
            credentialNum?: string(name='credential_num', example='E1***5674'),
            credentialType?: int32(name='credential_type', example='1'),
            expireDate?: string(name='expire_date', example='20290101'),
          }(name='credential'),
          firstName?: string(name='first_name', example='SAN'),
          gender?: int32(name='gender', example='0'),
          lastName?: string(name='last_name', example='ZHANG'),
          mobileCountryCode?: string(name='mobile_country_code', example='86'),
          mobilePhoneNumber?: string(name='mobile_phone_number', example='183******96'),
          nationality?: string(name='nationality', example='CN'),
          type?: int32(name='type', example='0'),
        }(name='passenger'),
        ticketAirLine?: string(name='ticket_air_line', example='HO'),
        ticketNos?: [ string ](name='ticket_nos'),
      }
    ](name='flight_item_detail_list'),
    orderNum?: long(name='order_num', example='4966***617111'),
    orderStatus?: int32(name='order_status', example='4'),
    outOrderNum?: string(name='out_order_num', example='x091-2023-0220-j-0001'),
    passengerList?: [ 
      {
        birthday?: string(name='birthday', example='20020301'),
        credential?: {
          certIssuePlace?: string(name='cert_issue_place', example='CN'),
          credentialNum?: string(name='credential_num', example='E1***5674'),
          credentialType?: int32(name='credential_type', example='1'),
          expireDate?: string(name='expire_date', example='20290101'),
        }(name='credential'),
        firstName?: string(name='first_name', example='SAN'),
        gender?: int32(name='gender', example='0'),
        lastName?: string(name='last_name', example='ZHANG'),
        mobileCountryCode?: string(name='mobile_country_code', example='86'),
        mobilePhoneNumber?: string(name='mobile_phone_number', example='183******96'),
        nationality?: string(name='nationality', example='CN'),
        type?: int32(name='type', example='0'),
      }
    ](name='passenger_list'),
    payStatus?: int32(name='pay_status', example='2'),
    payTime?: long(name='pay_time', example='1677210788000'),
    promotionPrice?: double(name='promotion_price', example='10'),
    realPayPrice?: double(name='real_pay_price', example='3000'),
    refundChangeRuleMap?: map[string]DataRefundChangeRuleMapValue(name='refund_change_rule_map'),
    sessionNick?: string(name='session_nick', example='nick'),
    solution?: {
      adultPrice?: double(name='adult_price', example='300'),
      adultTax?: double(name='adult_tax', example='30'),
      childPrice?: double(name='child_price', example='200'),
      childTax?: double(name='child_tax', example='20'),
      infantPrice?: double(name='infant_price', example='100'),
      infantTax?: double(name='infant_tax', example='10'),
      journeyList?: [ 
        {
          segmentList?: [ 
            {
              arrivalAirport?: string(name='arrival_airport', example='MFM'),
              arrivalCity?: string(name='arrival_city', example='MFM'),
              arrivalTerminal?: string(name='arrival_terminal', example='T1'),
              arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
              availability?: string(name='availability', example='7'),
              cabin?: string(name='cabin', example='V'),
              cabinClass?: string(name='cabin_class', example='Y'),
              codeShare?: boolean(name='code_share', example='false'),
              departureAirport?: string(name='departure_airport', example='PVG'),
              departureCity?: string(name='departure_city', example='SHA'),
              departureTerminal?: string(name='departure_terminal', example='T2'),
              departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
              equipType?: string(name='equip_type', example='32Q'),
              flightDuration?: int32(name='flight_duration', example='165'),
              marketingAirline?: string(name='marketing_airline', example='HO'),
              marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
              marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1295'),
              operatingAirline?: string(name='operating_airline', example='HO'),
              operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
              segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
              stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
              stopQuantity?: int32(name='stop_quantity', example='0'),
            }
          ](name='segment_list'),
          transferCount?: int32(name='transfer_count', example='0'),
        }
      ](name='journey_list'),
      productTypeDescription?: string(name='product_type_description', example='description'),
      refundTicketCouponDescription?: string(name='refund_ticket_coupon_description', example='description'),
      segmentBaggageCheckInInfoList?: [ 
        {
          luggageDirectInfoType?: int32(name='luggage_direct_info_type', example='1'),
          segmentIdList?: [ string ](name='segment_id_list'),
        }
      ](name='segment_baggage_check_in_info_list'),
      segmentBaggageMappingList?: [ 
        {
          passengerBaggageAllowanceMapping?: map[string]DataSolutionSegmentBaggageMappingListPassengerBaggageAllowanceMappingValue(name='passenger_baggage_allowance_mapping'),
          segmentIdList?: [ string ](name='segment_id_list'),
        }
      ](name='segment_baggage_mapping_list'),
      segmentRefundChangeRuleMappingList?: [ 
        {
          refundChangeRuleMap?: map[string]DataSolutionSegmentRefundChangeRuleMappingListRefundChangeRuleMapValue(name='refund_change_rule_map'),
          segmentIdList?: [ string ](name='segment_id_list'),
        }
      ](name='segment_refund_change_rule_mapping_list'),
      solutionId?: string(name='solution_id', description='solution_id', example='eJwz8DeySEo0NjQ01TU3TUxxx'),
    }(name='solution'),
    succeedTime?: long(name='succeed_time', example='1677210786000'),
    totalPrice?: double(name='total_price', example='3000'),
    transactionNo?: string(name='transaction_no', example='hkduendkd-2023-dj0'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model OrderDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OrderDetailResponseBody(name='body'),
}

async function orderDetail(request: OrderDetailRequest): OrderDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OrderDetail', 'GET', '/airticket/v1/trade/order-detail', 'json', false, 'json', request);
}

model OrderListRequest {
  bookTimeEnd: long(name='book_time_end', example='1677229006000', position='Query'),
  bookTimeStart: long(name='book_time_start', example='1677229005000', position='Query'),
  pageIndex?: int32(name='page_index', example='1', position='Query'),
  pageSize?: int32(name='page_size', example='20', position='Query'),
  status?: int32(name='status', example='4', position='Query'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model OrderListResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    list?: [ 
      {
        bookTime?: long(name='book_time', example='1677210784000'),
        orderNum?: long(name='order_num', example='4966***617111'),
        orderStatus?: string(name='order_status', example='4'),
        outOrderNum?: string(name='out_order_num', example='x091-2023-0220-j-0001'),
        passengerList?: [ 
          {
            birthday?: string(name='birthday', example='20020301'),
            credential?: {
              certIssuePlace?: string(name='cert_issue_place', example='CN'),
              credentialNum?: string(name='credential_num', example='E1***5674'),
              credentialType?: int32(name='credential_type', example='1'),
              expireDate?: string(name='expire_date', example='20290101'),
            }(name='credential'),
            firstName?: string(name='first_name', example='SAN'),
            gender?: int32(name='gender', example='0'),
            lastName?: string(name='last_name', example='ZHANG'),
            mobileCountryCode?: string(name='mobile_country_code', example='86'),
            mobilePhoneNumber?: string(name='mobile_phone_number', example='183******96'),
            nationality?: string(name='nationality', example='CN'),
            type?: int32(name='type', example='0'),
          }
        ](name='passenger_list'),
        payStatus?: string(name='pay_status', example='2'),
        payTime?: long(name='pay_time', example='1677210788000'),
        promotionPrice?: double(name='promotion_price', example='10'),
        realPayPrice?: double(name='real_pay_price', example='3000'),
        sessionNick?: string(name='session_nick', example='nick'),
        succeedTime?: long(name='succeed_time', example='1677210786000'),
        totalPrice?: double(name='total_price', example='3000'),
        transactionNo?: string(name='transaction_no', example='hkduendkd-2023-dj0'),
      }
    ](name='list'),
    pagination?: {
      currentPage?: int32(name='current_page', example='1'),
      pageSize?: int32(name='page_size', example='10'),
      totalCount?: int32(name='total_count', example='5'),
      totalPage?: int32(name='total_page', example='1'),
    }(name='pagination'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model OrderListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OrderListResponseBody(name='body'),
}

async function orderList(request: OrderListRequest): OrderListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OrderList', 'GET', '/airticket/v1/trade/order-list', 'json', false, 'json', request);
}

model PricingRequest {
  solutionId: string(name='solution_id', description='solution_id', example='eJwz8DeySEo0NjQ01TU3TU7TNTFINNO1SE5O0jVKM0hKNjEwTElLNYwz0A32cNT1dfPVNTIwMjYwNjRQ8/A3NLI01Q0Ic0cRBwBVFxJJ', position='Body'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model PricingResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    changedPriceInfo?: {
      adultPrice?: double(name='adult_price', example='100'),
      adultTax?: double(name='adult_tax', example='10'),
      childPrice?: double(name='child_price', example='100'),
      childTax?: double(name='child_tax', example='10'),
      infantPrice?: double(name='infant_price', example='100'),
      infantTax?: double(name='infant_tax', example='10'),
    }(name='changed_price_info'),
    isChanged?: boolean(name='is_changed', example='true'),
    originalPriceInfo?: {
      adultPrice?: double(name='adult_price', description='成人单价', example='200'),
      adultTax?: double(name='adult_tax', description='成人税', example='20'),
      childPrice?: double(name='child_price', description='儿童单价', example='200'),
      childTax?: double(name='child_tax', description='儿童税', example='20'),
      infantPrice?: double(name='infant_price', description='婴儿单价', example='200'),
      infantTax?: double(name='infant_tax', description='婴儿税', example='20'),
    }(name='original_price_info', description='变价之前价格信息 isChanged = true 时，才有值'),
    remainSeats?: string(name='remain_seats'),
    solution?: {
      adultPrice?: double(name='adult_price', example='300'),
      adultTax?: double(name='adult_tax', example='30'),
      childPrice?: double(name='child_price', example='200'),
      childTax?: double(name='child_tax', example='20'),
      infantPrice?: double(name='infant_price', example='200'),
      infantTax?: double(name='infant_tax', example='10'),
      journeyList?: [ 
        {
          segmentList?: [ 
            {
              arrivalAirport?: string(name='arrival_airport', example='MFM'),
              arrivalCity?: string(name='arrival_city', example='MFM'),
              arrivalTerminal?: string(name='arrival_terminal', example='T1'),
              arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
              availability?: string(name='availability', example='7'),
              cabin?: string(name='cabin', example='V'),
              cabinClass?: string(name='cabin_class', example='ALL_CABIN'),
              codeShare?: boolean(name='code_share', example='false'),
              departureAirport?: string(name='departure_airport', example='PVG'),
              departureCity?: string(name='departure_city', example='SHA'),
              departureTerminal?: string(name='departure_terminal', example='T2'),
              departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
              equipType?: string(name='equip_type', example='32Q'),
              flightDuration?: int32(name='flight_duration', example='165'),
              marketingAirline?: string(name='marketing_airline', example='HO'),
              marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
              marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1295'),
              operatingAirline?: string(name='operating_airline', example='HO'),
              operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
              segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
              stopCityList?: string(name='stop_city_list', example='""'),
              stopQuantity?: int32(name='stop_quantity', example='0'),
            }
          ](name='segment_list'),
          transferCount?: int32(name='transfer_count', example='0'),
        }
      ](name='journey_list'),
      productTypeDescription?: string(name='product_type_description', example='description'),
      refundTicketCouponDescription?: string(name='refund_ticket_coupon_description', example='description'),
      segmentBaggageCheckInInfoList?: [ 
        {
          luggageDirectInfoType?: int32(name='luggage_direct_info_type', example='1'),
          segmentIdList?: [ string ](name='segment_id_list'),
        }
      ](name='segment_baggage_check_in_info_list'),
      segmentBaggageMappingList?: [ 
        {
          passengerBaggageAllowanceMapping?: map[string]DataSolutionSegmentBaggageMappingListPassengerBaggageAllowanceMappingValue(name='passenger_baggage_allowance_mapping'),
          segmentIdList?: [ string ](name='segment_id_list'),
        }
      ](name='segment_baggage_mapping_list'),
      segmentRefundChangeRuleMappingList?: [ 
        {
          refundChangeRuleMap?: map[string]DataSolutionSegmentRefundChangeRuleMappingListRefundChangeRuleMapValue(name='refund_change_rule_map'),
          segmentIdList?: [ string ](name='segment_id_list'),
        }
      ](name='segment_refund_change_rule_mapping_list'),
      solutionId?: string(name='solution_id', description='solution_id', example='eJwz8DeySEo0NjQ01TU3TU7TNTFINNO1SE5O0jVKM0hKNjEwTElLNYwz0A32cNT1dfPVNTIwMjYwNjRQ8/A3NLI01Q0Ic0cRBwBVFxJJ'),
    }(name='solution', description='solution'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model PricingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PricingResponseBody(name='body'),
}

async function pricing(request: PricingRequest): PricingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Pricing', 'POST', '/airticket/v1/trade/action-pricing', 'json', true, 'form', request);
}

model RefundApplyRequest {
  orderNum: long(name='order_num', example='4966***617111', position='Body'),
  refundJourneys: [ 
    {
      segmentList: [ 
        {
          arrivalAirport: string(name='arrival_airport', example='MFM'),
          arrivalCity: string(name='arrival_city', example='MFM'),
          departureAirport: string(name='departure_airport', example='PVG'),
          departureCity: string(name='departure_city', example='SHA'),
        }
      ](name='segment_list'),
    }
  ](name='refund_journeys', shrink='json', position='Body'),
  refundPassengerList: [ 
    {
      document?: string(name='document', example='411***********4411'),
      firstName: string(name='first_name', example='SAN'),
      lastName: string(name='last_name', example='ZHANG'),
    }
  ](name='refund_passenger_list', shrink='json', position='Body'),
  refundType: {
    file?: [ string ](name='file', example='[xxx,yyy]'),
    refundTypeId: int32(name='refund_type_id', example='0'),
    remark?: string(name='remark', example='remark desc'),
  }(name='refund_type', shrink='json', position='Body'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model RefundApplyResponseBody = {
  requestId?: string(name='RequestId', description='请求 RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    orderNum?: long(name='order_num', example='4966***617111'),
    refundResults?: [ 
      {
        failReason?: string(name='fail_reason', example='desc reason'),
        refundOrderNum?: long(name='refund_order_num', example='4966***617202'),
        refundPassengers?: [ 
          {
            document?: string(name='document', example='411***********4411'),
            firstName?: string(name='first_name', example='SAN'),
            lastName?: string(name='last_name', example='ZHANG'),
          }
        ](name='refund_passengers'),
        status?: int32(name='status', example='0'),
      }
    ](name='refund_results'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model RefundApplyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefundApplyResponseBody(name='body'),
}

async function refundApply(request: RefundApplyRequest): RefundApplyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RefundApply', 'POST', '/airticket/v1/refund/action-apply', 'json', true, 'form', request);
}

model RefundDetailRequest {
  refundOrderNum: long(name='refund_order_num', example='4966***617732', position='Query'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model RefundDetailResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    containMultiRefund?: boolean(name='contain_multi_refund', example='false'),
    multiRefundDetails?: [ 
      {
        multiRefundOrderNum?: long(name='multi_refund_order_num', example='498843***6950'),
        multiRefundTransactionNo?: string(name='multi_refund_transaction_no', example='498843***6950'),
        passengerMultiRefundDetails?: [ 
          {
            changeOrderRefundFee?: double(name='change_order_refund_fee', example='30'),
            originalOrderRefundFee?: double(name='original_order_refund_fee', example='30'),
            passenger?: {
              document?: string(name='document', example='411***********4411'),
              firstName?: string(name='first_name', example='SAN'),
              lastName?: string(name='last_name', example='ZHANG'),
            }(name='passenger'),
          }
        ](name='passenger_multi_refund_details'),
      }
    ](name='multi_refund_details'),
    orderNum?: long(name='order_num', example='4966***617111'),
    passengerRefundDetails?: [ 
      {
        passenger?: {
          document?: string(name='document', example='411***********4411'),
          firstName?: string(name='first_name', example='SAN'),
          lastName?: string(name='last_name', example='ZHANG'),
        }(name='passenger'),
        refundFee?: {
          alreadyUsedTotalFee?: double(name='already_used_total_fee', example='30'),
          modifyRefundToBuyerMoney?: double(name='modify_refund_to_buyer_money', example='30'),
          nonRefundableChangeServiceFee?: double(name='non_refundable_change_service_fee', example='30'),
          nonRefundableChangeUpgradeFee?: double(name='non_refundable_change_upgrade_fee', example='30'),
          nonRefundableTaxFee?: double(name='non_refundable_tax_fee', example='30'),
          nonRefundableTicketFee?: double(name='non_refundable_ticket_fee', example='30'),
          refundToBuyerMoney?: double(name='refund_to_buyer_money', example='30'),
        }(name='refund_fee'),
      }
    ](name='passenger_refund_details'),
    paySuccessUtcTime?: long(name='pay_success_utc_time', example='1677229005000'),
    refundAttachmentUrls?: [ string ](name='refund_attachment_urls', example='[zzz,yyy]'),
    refundJourneys?: [ 
      {
        segmentList?: [ 
          {
            arrivalAirport?: string(name='arrival_airport', example='MFM'),
            arrivalCity?: string(name='arrival_city', example='MFM'),
            arrivalTerminal?: string(name='arrival_terminal', example='T1'),
            arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
            availability?: string(name='availability', example='7'),
            cabin?: string(name='cabin', example='V'),
            cabinClass?: string(name='cabin_class', example='Y'),
            codeShare?: boolean(name='code_share', example='false'),
            departureAirport?: string(name='departure_airport', example='PVG'),
            departureCity?: string(name='departure_city', example='SHA'),
            departureTerminal?: string(name='departure_terminal', example='T2'),
            departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
            equipType?: string(name='equip_type', example='32Q'),
            flightDuration?: int32(name='flight_duration', example='165'),
            marketingAirline?: string(name='marketing_airline', example='HO'),
            marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
            marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1295'),
            operatingAirline?: string(name='operating_airline', example='HO'),
            operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
            segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
            stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
            stopQuantity?: int32(name='stop_quantity', example='0'),
          }
        ](name='segment_list'),
        transferCount?: int32(name='transfer_count', example='0'),
      }
    ](name='refund_journeys'),
    refundOrderNum?: long(name='refund_order_num', example='4966***617654'),
    refundReason?: string(name='refund_reason', example='desc reason'),
    refundType?: int32(name='refund_type', example='5'),
    refuseReason?: string(name='refuse_reason', example='refuse reason'),
    status?: int32(name='status', example='1'),
    transactionNo?: string(name='transaction_no', example='1677229005000'),
    utcCreateTime?: long(name='utc_create_time', example='1677229002000'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model RefundDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefundDetailResponseBody(name='body'),
}

async function refundDetail(request: RefundDetailRequest): RefundDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RefundDetail', 'GET', '/airticket/v1/refund/detail', 'json', false, 'json', request);
}

model RefundDetailListRequest {
  orderNum?: long(name='order_num', example='49884*****950', position='Query'),
  pageIndex?: int32(name='page_index', example='1', position='Query'),
  pageSize?: int32(name='page_size', example='20', position='Query'),
  refundCreateBeginTime: long(name='refund_create_begin_time', example='1677229002000', position='Query'),
  refundCreateEndTime: long(name='refund_create_end_time', example='1677229005000', position='Query'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model RefundDetailListResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    list?: [ 
      {
        isMultiRefund?: boolean(name='is_multi_refund', example='true'),
        orderNum?: long(name='order_num', example='49884*****2345'),
        refundOrderNum?: long(name='refund_order_num', example='49884*****950'),
        refundOrderStatus?: int32(name='refund_order_status', example='1'),
        relatedRefundOrderNum?: string(name='related_refund_order_num', example='49884*****2387'),
        transactionNo?: string(name='transaction_no', example='49884**tde-95za'),
        utcCreateTime?: long(name='utc_create_time', example='1677229002000'),
      }
    ](name='list'),
    pagination?: {
      currentPage?: int32(name='current_page', example='1'),
      pageSize?: int32(name='page_size', example='10'),
      totalCount?: int32(name='total_count', example='5'),
      totalPage?: int32(name='total_page', example='1'),
    }(name='pagination'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model RefundDetailListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefundDetailListResponseBody(name='body'),
}

async function refundDetailList(request: RefundDetailListRequest): RefundDetailListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RefundDetailList', 'GET', '/airticket/v1/refund/detail-list', 'json', false, 'json', request);
}

model SearchRequest {
  adults?: int32(name='adults', example='2', position='Body'),
  airLegs: [ 
    {
      arrivalAirportList?: [ string ](name='arrival_airport_list', example='MFM'),
      arrivalCity: string(name='arrival_city', example='MFM'),
      departureAirportList?: [ string ](name='departure_airport_list', example='PVG'),
      departureCity: string(name='departure_city', example='SHA'),
      departureDate: string(name='departure_date', example='20230310'),
    }
  ](name='air_legs', shrink='json', position='Body'),
  cabinClass?: string(name='cabin_class', example='ALL_CABIN', position='Body'),
  children?: int32(name='children', example='1', position='Body'),
  infants?: int32(name='infants', example='1', position='Body'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model SearchResponseBody = {
  requestId?: string(name='RequestId', example='2236993B-7BE7-5F92-B179-21FF08570165'),
  data?: {
    solutionList?: [ 
      {
        adultPrice?: double(name='adult_price', example='600'),
        adultTax?: double(name='adult_tax', example='11'),
        childPrice?: double(name='child_price', example='500'),
        childTax?: double(name='child_tax', example='10'),
        infantPrice?: double(name='infant_price', example='400'),
        infantTax?: double(name='infant_tax', example='9'),
        journeyList?: [ 
          {
            segmentList?: [ 
              {
                arrivalAirport?: string(name='arrival_airport', example='MFM'),
                arrivalCity?: string(name='arrival_city', example='MFM'),
                arrivalTerminal?: string(name='arrival_terminal', example='T1'),
                arrivalTime?: string(name='arrival_time', example='2023-03-10 10:40:00'),
                availability?: string(name='availability', example='7'),
                cabin?: string(name='cabin', example='V'),
                cabinClass?: string(name='cabin_class', example='Y'),
                codeShare?: boolean(name='code_share', example='false'),
                departureAirport?: string(name='departure_airport', example='PVG'),
                departureCity?: string(name='departure_city', example='SHA'),
                departureTerminal?: string(name='departure_terminal', example='T2'),
                departureTime?: string(name='departure_time', example='2023-03-10 07:55:00'),
                equipType?: string(name='equip_type', example='32Q'),
                flightDuration?: int32(name='flight_duration', example='165'),
                marketingAirline?: string(name='marketing_airline', example='HO'),
                marketingFlightNo?: string(name='marketing_flight_no', example='HO1295'),
                marketingFlightNoInt?: int32(name='marketing_flight_no_int', example='1259'),
                operatingAirline?: string(name='operating_airline', example='HO'),
                operatingFlightNo?: string(name='operating_flight_no', example='HO1295'),
                segmentId?: string(name='segment_id', example='HO1295-PVG-MFM-20230310'),
                stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
                stopQuantity?: int32(name='stop_quantity', example='0'),
              }
            ](name='segment_list'),
            transferCount?: int32(name='transfer_count', example='0'),
          }
        ](name='journey_list'),
        productTypeDescription?: string(name='product_type_description', example='description'),
        refundTicketCouponDescription?: string(name='refund_ticket_coupon_description', example='description'),
        segmentBaggageCheckInInfoList?: [ 
          {
            luggageDirectInfoType?: int32(name='luggage_direct_info_type', example='1'),
            segmentIdList?: [ string ](name='segment_id_list'),
          }
        ](name='segment_baggage_check_in_info_list'),
        segmentBaggageMappingList?: [ 
          {
            passengerBaggageAllowanceMapping?: map[string]DataSolutionListSegmentBaggageMappingListPassengerBaggageAllowanceMappingValue(name='passenger_baggage_allowance_mapping'),
            segmentIdList?: [ string ](name='segment_id_list'),
          }
        ](name='segment_baggage_mapping_list'),
        segmentRefundChangeRuleMappingList?: [ 
          {
            refundChangeRuleMap?: map[string]DataSolutionListSegmentRefundChangeRuleMappingListRefundChangeRuleMapValue(name='refund_change_rule_map'),
            segmentIdList?: [ string ](name='segment_id_list'),
          }
        ](name='segment_refund_change_rule_mapping_list'),
        solutionId?: string(name='solution_id', description='solution_id', example='eJwz8DeySEo0NjQ01TU3TU7TNTFINNO1SE5O0jVKM0hKNjEwTElLNYwz0A32cNT1dfPVNTIwMjYwNjRQ8/A3NLI01Q0Ic0cRBwBVFxJJ'),
      }
    ](name='solution_list'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model SearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchResponseBody(name='body'),
}

async function search(request: SearchRequest): SearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Search', 'POST', '/airticket/v1/trade/action-search', 'json', true, 'form', request);
}

model TicketingRequest {
  orderNum: long(name='order_num', example='496***2617111', position='Body'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model TicketingResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    orderNum?: long(name='order_num', example='496***2617111'),
    transactionNo?: string(name='transaction_no', example='hkduendkd-2023-dj0'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model TicketingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TicketingResponseBody(name='body'),
}

async function ticketing(request: TicketingRequest): TicketingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Ticketing', 'POST', '/airticket/v1/trade/action-ticketing', 'json', true, 'form', request);
}

model TicketingCheckRequest {
  orderNum: long(name='order_num', example='496***2617111', position='Body'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model TicketingCheckResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: {
    orderNum?: long(name='order_num', example='496***2617111'),
  }(name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model TicketingCheckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TicketingCheckResponseBody(name='body'),
}

async function ticketingCheck(request: TicketingCheckRequest): TicketingCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TicketingCheck', 'POST', '/airticket/v1/trade/action-ticketing-check', 'json', true, 'form', request);
}

model TransitVisaRequest {
  flightSegmentParamList?: [ 
    {
      arrivalAirport: string(name='arrival_airport', example='SIN'),
      arrivalTerminal?: string(name='arrival_terminal', example='T1'),
      arrivalTime: long(name='arrival_time', example='1705285430445'),
      codeShare: boolean(name='code_share', example='true'),
      departureAirport: string(name='departure_airport', example='HGH'),
      departureTerminal?: string(name='departure_terminal', example='T1'),
      departureTime: long(name='departure_time', example='1705285430445'),
      marketingAirline: string(name='marketing_airline', example='CZ'),
      marketingFlightNo: string(name='marketing_flight_no', example='CZ616'),
      operatingAirline?: string(name='operating_airline', example='CZ'),
      stopCityList?: string(name='stop_city_list', example='SEL,HKG'),
      ticketingAirline?: string(name='ticketing_airline', example='CZ'),
    }
  ](name='flight_segment_param_list', shrink='json', position='Body'),
  xAcsAirticketAccessToken: string(name='x-acs-airticket-access-token', description='access_token', example='eyJhbGciOiJSUzI1NiIsImtpZCI6InN1ZXpfa2V5aWQifQ.eyJqdGkiOiJCQldMaWIzN0VxbC0xMjhhR2N5elJ3IiwiaWF0IjoxNjc3MDY2NTAxLCJleHAiOjE2NzcwNzM3MDEsIm5iZiI6MTY3NzA2NjQ0MX0.AF0DxsZK4Edyg0C6ObRQFUo36R1VYrb5IYmak25TmL1OfR5RkIUc3PpqFuQKNLKXf5fOtVQaKjaexzwodVeWZQDKEG_RPt_Ybb99EnEm6vPKs6e3pWFbKiBq71WleLHhVrdFb4YPowRKjc7bG0jyGUxiQ2iXy0RWDj9tIjfI-KEdzNp5oVnX7j4p3H12DwQrRPmd1nz3BciAQNINvDpzqusuIUw8JXyLFCz838Y0NhwB1_bYZyctxRLSzrGZuI5rrWtItgupqMsOlJ3RNy1QrIbQ2g6nPmzl-atOqcQ4Nw0HeDLR8dhM1OsIcFLbKXBUtwXofflhzAQrkDxhwYiXii', position='Header'),
  xAcsAirticketLanguage?: string(name='x-acs-airticket-language', example='en_US', position='Header'),
}

model TransitVisaResponseBody = {
  requestId?: string(name='RequestId', example='51593418-8C73-5E47-8BA8-3F1D4A00CC0B'),
  data?: [ 
    {
      cityCode?: string(name='city_code', example='HGH'),
      visaType?: int32(name='visa_type', example='1'),
    }
  ](name='data'),
  errorCode?: string(name='error_code', example='null'),
  errorData?: any(name='error_data', example='null'),
  errorMsg?: string(name='error_msg', example='null'),
  status?: int32(name='status', example='200'),
  success?: boolean(name='success', example='true'),
}

model TransitVisaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TransitVisaResponseBody(name='body'),
}

async function transitVisa(request: TransitVisaRequest): TransitVisaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TransitVisa', 'GET', '/airticket/v1/flight-data/transit-visa', 'json', true, 'form', request);
}

model DataSolutionListSegmentBaggageMappingListPassengerBaggageAllowanceMappingValue = {
  baggageAmount?: int32(name='baggage_amount', example='22'),
  baggageWeight?: int32(name='baggage_weight', example='2'),
  baggageWeightUnit?: string(name='baggage_weight_unit', example='kg'),
  isAllWeight?: boolean(name='is_all_weight', example='true'),
  carryOnAmount?: int32(name='carry_on_amount', example='1'),
  carryOnWeight?: int32(name='carry_on_weight', example='2'),
  carryOnWeightUnit?: string(name='carry_on_weight_unit', example='kg'),
  isAllCarryOnWeight?: boolean(name='is_all_carry_on_weight', example='true'),
}

model DataSolutionListSegmentRefundChangeRuleMappingListRefundChangeRuleMapValue = {
  refundRuleAllUnusedList?: [ 
    {
      type?: int32(name='type', example='0'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canRefund?: boolean(name='can_refund', example='true'),
      refundFee?: double(name='refund_fee', example='20'),
      canReturnAllTax?: boolean(name='can_return_all_tax', example='true'),
      returnPartTaxFee?: double(name='return_part_tax_fee', example='20'),
    }
  ](name='refund_rule_all_unused_list'),
  refundRulePartUnusedList?: [ 
    {
      type?: int32(name='type', example='1'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canRefund?: boolean(name='can_refund', example='true'),
      refundFee?: double(name='refund_fee', example='20'),
      canReturnAllTax?: boolean(name='can_return_all_tax', example='30'),
      returnPartTaxFee?: double(name='return_part_tax_fee', example='20'),
    }
  ](name='refund_rule_part_unused_list'),
  changeRuleInUnusedList?: [ 
    {
      type?: int32(name='type', example='2'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canChange?: boolean(name='can_change', example='true'),
      changeFee?: double(name='change_fee', example='20'),
    }
  ](name='change_rule_in_unused_list'),
  changeRuleOutUnusedList?: [ 
    {
      type?: int32(name='type', example='2'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canChange?: boolean(name='can_change', example='true'),
      changeFee?: double(name='change_fee', example='10'),
    }
  ](name='change_rule_out_unused_list'),
}

model DataBaggageAllowanceMapValue = {
  baggageAmount?: int32(name='baggage_amount', example='1'),
  baggageWeight?: int32(name='baggage_weight', example='10'),
  baggageWeightUnit?: string(name='baggage_weight_unit', example='KG'),
  isAllWeight?: boolean(name='is_all_weight', example='true'),
  carryOnAmount?: int32(name='carry_on_amount', example='1'),
  carryOnWeight?: int32(name='carry_on_weight', example='5'),
  carryOnWeightUnit?: string(name='carry_on_weight_unit', example='KG'),
  isAllCarryOnWeight?: boolean(name='is_all_carry_on_weight', example='true'),
}

model DataRefundChangeRuleMapValue = {
  refundRuleAllUnusedList?: [ 
    {
      type?: int32(name='type', example='0'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canRefund?: boolean(name='can_refund', example='true'),
      refundFee?: double(name='refund_fee', example='200'),
      canReturnAllTax?: boolean(name='can_return_all_tax', example='true'),
      returnPartTaxFee?: double(name='return_part_tax_fee', example='100'),
    }
  ](name='refund_rule_all_unused_list'),
  refundRulePartUnusedList?: [ 
    {
      type?: int32(name='type', example='0'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canRefund?: boolean(name='can_refund', example='true'),
      refundFee?: double(name='refund_fee', example='200'),
      canReturnAllTax?: boolean(name='can_return_all_tax', example='true'),
      returnPartTaxFee?: double(name='return_part_tax_fee', example='100'),
    }
  ](name='refund_rule_part_unused_list'),
  changeRuleInUnusedList?: [ 
    {
      type?: int32(name='type', example='2'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canChange?: boolean(name='can_change', example='true'),
      changeFee?: double(name='change_fee', example='100'),
    }
  ](name='change_rule_in_unused_list'),
  changeRuleOutUnusedList?: [ 
    {
      type?: int32(name='type', example='2'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canChange?: boolean(name='can_change', example='true'),
      changeFee?: double(name='change_fee', example='100'),
    }
  ](name='change_rule_out_unused_list'),
}

model DataSolutionSegmentBaggageMappingListPassengerBaggageAllowanceMappingValue = {
  baggageAmount?: int32(name='baggage_amount', example='1'),
  baggageWeight?: int32(name='baggage_weight', example='10'),
  baggageWeightUnit?: string(name='baggage_weight_unit', example='KG'),
  isAllWeight?: boolean(name='is_all_weight', example='true'),
  carryOnAmount?: int32(name='carry_on_amount', example='1'),
  carryOnWeight?: int32(name='carry_on_weight', example='5'),
  carryOnWeightUnit?: string(name='carry_on_weight_unit', example='KG'),
  isAllCarryOnWeight?: boolean(name='is_all_carry_on_weight', example='true'),
}

model DataSolutionSegmentRefundChangeRuleMappingListRefundChangeRuleMapValue = {
  refundRuleAllUnusedList?: [ 
    {
      type?: int32(name='type', example='0'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canRefund?: boolean(name='can_refund', example='true'),
      refundFee?: double(name='refund_fee', example='200'),
      canReturnAllTax?: boolean(name='can_return_all_tax', example='true'),
      returnPartTaxFee?: double(name='return_part_tax_fee', example='100'),
    }
  ](name='refund_rule_all_unused_list'),
  refundRulePartUnusedList?: [ 
    {
      type?: int32(name='type', example='0'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canRefund?: boolean(name='can_refund', example='true'),
      refundFee?: double(name='refund_fee', example='200'),
      canReturnAllTax?: boolean(name='can_return_all_tax', example='true'),
      returnPartTaxFee?: double(name='return_part_tax_fee', example='100'),
    }
  ](name='refund_rule_part_unused_list'),
  changeRuleInUnusedList?: [ 
    {
      type?: int32(name='type', example='2'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canChange?: boolean(name='can_change', example='true'),
      changeFee?: double(name='change_fee', example='100'),
    }
  ](name='change_rule_in_unused_list'),
  changeRuleOutUnusedList?: [ 
    {
      type?: int32(name='type', example='2'),
      timeUnit?: string(name='time_unit', example='hour'),
      ruleStartTime?: int32(name='rule_start_time', example='36'),
      ruleEndTime?: int32(name='rule_end_time', example='12'),
      canChange?: boolean(name='can_change', example='true'),
      changeFee?: double(name='change_fee', example='100'),
    }
  ](name='change_rule_out_unused_list'),
}

