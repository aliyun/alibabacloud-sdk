/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ddoscoo';
  @version = '2017-12-28';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddLayer7CCRuleRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  act: string(name='Act', example='close', position='Query'),
  count: int32(name='Count', example='2', position='Query'),
  domain: string(name='Domain', example='www.aliyun.com', position='Query'),
  interval: int32(name='Interval', example='5', position='Query'),
  mode: string(name='Mode', example='match', position='Query'),
  name: string(name='Name', example='testCcRule1', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  ttl: int32(name='Ttl', example='60', position='Query'),
  uri: string(name='Uri', example='/a/b/c', position='Query'),
}

model AddLayer7CCRuleResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model AddLayer7CCRuleResponse = {
  headers: map[string]string(name='headers'),
  body: AddLayer7CCRuleResponseBody(name='body'),
}

async function addLayer7CCRule(request: AddLayer7CCRuleRequest): AddLayer7CCRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLayer7CCRule', 'POST', '/', 'json', false, 'json', request);
}

model CloseDomainSlsConfigRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  domain: string(name='Domain', example='www.example.com', position='Query'),
  lang?: string(name='Lang', example='cn', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model CloseDomainSlsConfigResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model CloseDomainSlsConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CloseDomainSlsConfigResponseBody(name='body'),
}

async function closeDomainSlsConfig(request: CloseDomainSlsConfigRequest): CloseDomainSlsConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseDomainSlsConfig', 'POST', '/', 'json', false, 'json', request);
}

model ConfigHealthCheckRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  forwardProtocol: string(name='ForwardProtocol', example='tcp', position='Query'),
  frontendPort: int32(name='FrontendPort', example='233', position='Query'),
  healthCheck: string(name='HealthCheck', example='{"Type":"tcp","Timeout":10,"Port":80,"Interval":10,"Up":10,"Down":40}"}', position='Query'),
  instanceId: string(name='InstanceId', example='ddoscoo-cn-XXXXXX', position='Query'),
}

model ConfigHealthCheckResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model ConfigHealthCheckResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigHealthCheckResponseBody(name='body'),
}

async function configHealthCheck(request: ConfigHealthCheckRequest): ConfigHealthCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigHealthCheck', 'POST', '/', 'json', false, 'json', request);
}

model ConfigLayer4RuleRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  listeners: string(name='Listeners', example='[{"InstanceId":"xxxxxx-xxxxxx-xxxxxx-xxxxxxx","Protocol":"tcp","FrontendPort":80,"BackendPort":5,"RealServers":"1.1.1.1","2.2.2.2"}]', position='Query'),
}

model ConfigLayer4RuleResponseBody = {
  requestId?: string(name='RequestId', example='0bcf28g5-d57c-11e7-9bs0-d89d6717dxbc'),
}

model ConfigLayer4RuleResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigLayer4RuleResponseBody(name='body'),
}

async function configLayer4Rule(request: ConfigLayer4RuleRequest): ConfigLayer4RuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigLayer4Rule', 'POST', '/', 'json', false, 'json', request);
}

model ConfigLayer4RuleAttributeRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  config: string(name='Config', example='{"Slimit":{"CpsEnable":1,"MaxconnEnable":1,"Cps":1,"Maxconn":1},"Sla":{"CpsEnable":1,"MaxconnEnable":1,"Cps":100,"Maxconn":1000},"PayloadLen":{"Min":0,"Max":6000}}', position='Query'),
  forwardProtocol: string(name='ForwardProtocol', example='TCP', position='Query'),
  frontendPort: int32(name='FrontendPort', example='233', position='Query'),
  instanceId: string(name='InstanceId', example='ddoscoo-cn-XXXXX', position='Query'),
}

model ConfigLayer4RuleAttributeResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model ConfigLayer4RuleAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigLayer4RuleAttributeResponseBody(name='body'),
}

async function configLayer4RuleAttribute(request: ConfigLayer4RuleAttributeRequest): ConfigLayer4RuleAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigLayer4RuleAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ConfigLayer7BlackWhiteListRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  blackList?: [ string ](name='BlackList', example='1.1.1.1', position='Query'),
  domain: string(name='Domain', example='www.aliyun.com', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  whiteList?: [ string ](name='WhiteList', example='1.1.1.1', position='Query'),
}

model ConfigLayer7BlackWhiteListResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model ConfigLayer7BlackWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigLayer7BlackWhiteListResponseBody(name='body'),
}

async function configLayer7BlackWhiteList(request: ConfigLayer7BlackWhiteListRequest): ConfigLayer7BlackWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigLayer7BlackWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model ConfigLayer7CCRuleRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  act: string(name='Act', example='close', position='Query'),
  count: int32(name='Count', example='2', position='Query'),
  domain: string(name='Domain', example='www.aliyun.com', position='Query'),
  interval: int32(name='Interval', example='5', position='Query'),
  mode: string(name='Mode', example='match', position='Query'),
  name: string(name='Name', example='testCcRule1', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  ttl: int32(name='Ttl', example='60', position='Query'),
  uri: string(name='Uri', example='/a/b/c', position='Query'),
}

model ConfigLayer7CCRuleResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model ConfigLayer7CCRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigLayer7CCRuleResponseBody(name='body'),
}

async function configLayer7CCRule(request: ConfigLayer7CCRuleRequest): ConfigLayer7CCRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigLayer7CCRule', 'POST', '/', 'json', false, 'json', request);
}

model ConfigLayer7CCTemplateRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  domain: string(name='Domain', example='www.aliyun.com', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  template: string(name='Template', example='default', position='Query'),
}

model ConfigLayer7CCTemplateResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model ConfigLayer7CCTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigLayer7CCTemplateResponseBody(name='body'),
}

async function configLayer7CCTemplate(request: ConfigLayer7CCTemplateRequest): ConfigLayer7CCTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigLayer7CCTemplate', 'POST', '/', 'json', false, 'json', request);
}

model ConfigLayer7CertRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  cert?: string(name='Cert', example='xx', position='Query'),
  certId?: int32(name='CertId', example='1234', position='Query'),
  certName?: string(name='CertName', example='testCertName', position='Query'),
  domain: string(name='Domain', example='www.aliyun.com', position='Query'),
  key?: string(name='Key', example='xx', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
}

model ConfigLayer7CertResponseBody = {
  requestId?: string(name='RequestId', example='0bcf28g5-d57c-11e7-9bs0-d89d6717dxbc'),
}

model ConfigLayer7CertResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigLayer7CertResponseBody(name='body'),
}

async function configLayer7Cert(request: ConfigLayer7CertRequest): ConfigLayer7CertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigLayer7Cert', 'POST', '/', 'json', false, 'json', request);
}

model ConfigLayer7RuleRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  domain: string(name='Domain', example='www.aliyun.com', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', example='ddoscoo-cn-XXXXXX', position='Query'),
  proxyTypeList?: string(name='ProxyTypeList', example='[{"ProxyPorts":[80,8080],"ProxyType":"http"},{"ProxyPorts":[443],"ProxyType":"https"}]rts\\":[443],\\"ProxyType\\":\\"https\\"}]', position='Query'),
  proxyTypes?: [ string ](name='ProxyTypes', example='[{"ProxyPorts":[80,8080],"ProxyType":"http"},{"ProxyPorts":[443],"ProxyType":"https"}]rts\\":[443],\\"ProxyType\\":\\"https\\"}]', position='Query'),
  realServers: [ string ](name='RealServers', example='1.1.1.1', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  rsType: int32(name='RsType', example='0', position='Query'),
}

model ConfigLayer7RuleResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model ConfigLayer7RuleResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigLayer7RuleResponseBody(name='body'),
}

async function configLayer7Rule(request: ConfigLayer7RuleRequest): ConfigLayer7RuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigLayer7Rule', 'POST', '/', 'json', false, 'json', request);
}

model CreateAsyncTaskRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  taskParams: string(name='TaskParams', example='{"timestamp": 1530276554, "instanceId": "ddoscoo-woieuroi234"}', position='Query'),
  taskType: int32(name='TaskType', example='1', position='Query'),
}

model CreateAsyncTaskResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model CreateAsyncTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAsyncTaskResponseBody(name='body'),
}

async function createAsyncTask(request: CreateAsyncTaskRequest): CreateAsyncTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAsyncTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateLayer4RuleRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  listeners: string(name='Listeners', example='[{"InstanceId":"xxxxxx-xxxxxx-xxxxxx-xxxxxxx","Protocol":"tcp","FrontendPort":80,"BackendPort":5,"RealServers":"1.1.1.1","2.2.2.2"}]', position='Query'),
}

model CreateLayer4RuleResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model CreateLayer4RuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLayer4RuleResponseBody(name='body'),
}

async function createLayer4Rule(request: CreateLayer4RuleRequest): CreateLayer4RuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLayer4Rule', 'POST', '/', 'json', false, 'json', request);
}

model CreateLayer7RuleRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  domain: string(name='Domain', example='www.aliyun.com', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', example='ddoscoo-cn-XXXXX', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  rsType: int32(name='RsType', example='0', position='Query'),
  rules: string(name='Rules', example='[{"ProxyRules":[{"ProxyPort":443,"RealServers":["1.1.1.1:443"]}],"ProxyType":"https"},{"ProxyRules":[{"ProxyPort":80,"RealServers":["1.1.1.1:80"]}],"ProxyType":"http"}]', position='Query'),
}

model CreateLayer7RuleResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model CreateLayer7RuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLayer7RuleResponseBody(name='body'),
}

async function createLayer7Rule(request: CreateLayer7RuleRequest): CreateLayer7RuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLayer7Rule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAsyncTaskRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  taskId: int32(name='TaskId', example='123', position='Query'),
}

model DeleteAsyncTaskResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DeleteAsyncTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAsyncTaskResponseBody(name='body'),
}

async function deleteAsyncTask(request: DeleteAsyncTaskRequest): DeleteAsyncTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAsyncTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLayer4RuleRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  listeners: string(name='Listeners', example='{"InstanceId":"0bcf28g5-d57c-11e7-9bs0-d89d6717dxbc","Protocol":"tcp","FrontendPort":80}', position='Query'),
}

model DeleteLayer4RuleResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DeleteLayer4RuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLayer4RuleResponseBody(name='body'),
}

async function deleteLayer4Rule(request: DeleteLayer4RuleRequest): DeleteLayer4RuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLayer4Rule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLayer7CCRuleRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  domain: string(name='Domain', example='www.aliyun.com', position='Query'),
  name: string(name='Name', example='testCcRule1', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
}

model DeleteLayer7CCRuleResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DeleteLayer7CCRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLayer7CCRuleResponseBody(name='body'),
}

async function deleteLayer7CCRule(request: DeleteLayer7CCRuleRequest): DeleteLayer7CCRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLayer7CCRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLayer7RuleRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  domain: string(name='Domain', example='www.aliyun.com', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
}

model DeleteLayer7RuleResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DeleteLayer7RuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLayer7RuleResponseBody(name='body'),
}

async function deleteLayer7Rule(request: DeleteLayer7RuleRequest): DeleteLayer7RuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLayer7Rule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackSourceCidrRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  ipVersion?: string(name='IpVersion', position='Query'),
  line?: string(name='Line', example='coop-line-001', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeBackSourceCidrResponseBody = {
  cidrList?: [ string ](name='CidrList'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DescribeBackSourceCidrResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackSourceCidrResponseBody(name='body'),
}

async function describeBackSourceCidr(request: DescribeBackSourceCidrRequest): DescribeBackSourceCidrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackSourceCidr', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBatchSlsDispatchStatusRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  lang?: string(name='Lang', example='cn', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeBatchSlsDispatchStatusResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
  slsConfigStatusList?: [ 
    {
      domain?: string(name='Domain', example='www.example.com'),
      enable?: boolean(name='Enable', example='true'),
    }
  ](name='SlsConfigStatusList'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeBatchSlsDispatchStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBatchSlsDispatchStatusResponseBody(name='body'),
}

async function describeBatchSlsDispatchStatus(request: DescribeBatchSlsDispatchStatusRequest): DescribeBatchSlsDispatchStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBatchSlsDispatchStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDDoSEventsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  eip: string(name='Eip', example='1.1.1.1', position='Query'),
  endTime: long(name='EndTime', example='3289457324', position='Query'),
  offset: int32(name='Offset', example='1', position='Query'),
  pageSize: string(name='PageSize', example='10', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
  startTime: long(name='StartTime', example='3289457398', position='Query'),
}

model DescribeDDoSEventsResponseBody = {
  events?: [ 
    {
      endTime?: long(name='EndTime', example='3289457398'),
      interval?: int32(name='Interval', example='12'),
      startTime?: long(name='StartTime', example='3289457324'),
      status?: string(name='Status', example='blackhole_start'),
    }
  ](name='Events'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
  total?: long(name='Total', example='1'),
}

model DescribeDDoSEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDDoSEventsResponseBody(name='body'),
}

async function describeDDoSEvents(request: DescribeDDoSEventsRequest): DescribeDDoSEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDDoSEvents', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDDoSTrafficRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  eip: string(name='Eip', example='1.1.1.1', position='Query'),
  endTime: long(name='EndTime', example='3289457398', position='Query'),
  interval: int32(name='Interval', example='60', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
  startTime: long(name='StartTime', example='3289457324', position='Query'),
}

model DescribeDDoSTrafficResponseBody = {
  dDoSTrafficPoints?: [ 
    {
      defenseMaxInBps?: long(name='DefenseMaxInBps', example='129867'),
      sourceMaxInBps?: long(name='SourceMaxInBps', example='129867'),
      time?: long(name='Time', example='234082304'),
    }
  ](name='DDoSTrafficPoints'),
  defenseInBytes?: long(name='DefenseInBytes', example='23482234'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
  sourceInBytes?: long(name='SourceInBytes', example='19284762'),
}

model DescribeDDoSTrafficResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDDoSTrafficResponseBody(name='body'),
}

async function describeDDoSTraffic(request: DescribeDDoSTrafficRequest): DescribeDDoSTrafficResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDDoSTraffic', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDefenseCountStatisticsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeDefenseCountStatisticsResponseBody = {
  defenseCountStatistics?: {
    defenseCountTotalUsageOfCurrentMonth?: int32(name='DefenseCountTotalUsageOfCurrentMonth', example='0'),
    flowPackCountRemain?: int32(name='FlowPackCountRemain', example='10'),
    maxUsableDefenseCountCurrentMonth?: int32(name='MaxUsableDefenseCountCurrentMonth', example='0'),
  }(name='DefenseCountStatistics'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DescribeDefenseCountStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDefenseCountStatisticsResponseBody(name='body'),
}

async function describeDefenseCountStatistics(request: DescribeDefenseCountStatisticsRequest): DescribeDefenseCountStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDefenseCountStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainAccessModeRequest {
  domainList: [ string ](name='DomainList', example='www.aliyun.com', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeDomainAccessModeResponseBody = {
  domainModeList?: [ 
    {
      accessMode?: int32(name='AccessMode', example='1'),
      domain?: string(name='Domain', example='www.aliyun.com'),
    }
  ](name='DomainModeList'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DescribeDomainAccessModeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainAccessModeResponseBody(name='body'),
}

async function describeDomainAccessMode(request: DescribeDomainAccessModeRequest): DescribeDomainAccessModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainAccessMode', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainAttackEventListRequest {
  regionId?: string(name='RegionId', position='Host'),
  domain?: string(name='Domain', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  pageNo: int32(name='PageNo', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model DescribeDomainAttackEventListResponseBody = {
  dataList?: [ 
    {
      domain?: string(name='Domain'),
      endTime?: long(name='EndTime'),
      maxQps?: long(name='MaxQps'),
      startTime?: long(name='StartTime'),
    }
  ](name='DataList'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeDomainAttackEventListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainAttackEventListResponseBody(name='body'),
}

async function describeDomainAttackEventList(request: DescribeDomainAttackEventListRequest): DescribeDomainAttackEventListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainAttackEventList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainAttackEventsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  domain: string(name='Domain', example='www.aliyun.com', position='Query'),
  endTime: long(name='EndTime', example='3289457398', position='Query'),
  offset: int32(name='Offset', example='0', position='Query'),
  pageSize: string(name='PageSize', example='50', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
  startTime: long(name='StartTime', example='3289457324', position='Query'),
}

model DescribeDomainAttackEventsResponseBody = {
  events?: [ 
    {
      blockCount?: long(name='BlockCount', example='100'),
      duration?: int32(name='Duration', example='12'),
      endTime?: long(name='EndTime', example='3289457398'),
      finished?: boolean(name='Finished', example='true'),
      maxQps?: int32(name='MaxQps', example='100'),
      startTime?: long(name='StartTime', example='3289457324'),
    }
  ](name='Events'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
  total?: long(name='Total', example='1'),
}

model DescribeDomainAttackEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainAttackEventsResponseBody(name='body'),
}

async function describeDomainAttackEvents(request: DescribeDomainAttackEventsRequest): DescribeDomainAttackEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainAttackEvents', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainAttackMaxQpsRequest {
  regionId?: string(name='RegionId', position='Host'),
  domain?: string(name='Domain', example='example.aliyundoc.com', position='Query'),
  endTime: long(name='EndTime', example='1667801940', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm2pz25js****', position='Query'),
  startTime: long(name='StartTime', example='1657562370', position='Query'),
}

model DescribeDomainAttackMaxQpsResponseBody = {
  qps?: string(name='Qps', example='613'),
  requestId?: string(name='RequestId', example='62F9BD81-8BCA-5B23-A3CB-3FB7CEB7A4CA'),
}

model DescribeDomainAttackMaxQpsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainAttackMaxQpsResponseBody(name='body'),
}

async function describeDomainAttackMaxQps(request: DescribeDomainAttackMaxQpsRequest): DescribeDomainAttackMaxQpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainAttackMaxQps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainOverviewRequest {
  regionId?: string(name='RegionId', position='Host'),
  domain?: string(name='Domain', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model DescribeDomainOverviewResponseBody = {
  maxHttp?: long(name='MaxHttp'),
  maxHttps?: long(name='MaxHttps'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainOverviewResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainOverviewResponseBody(name='body'),
}

async function describeDomainOverview(request: DescribeDomainOverviewRequest): DescribeDomainOverviewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainOverview', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainQpsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  domain: string(name='Domain', example='www.aliyun.com', position='Query'),
  endTime: long(name='EndTime', example='1577721600', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
  startTime: long(name='StartTime', example='1575129600', position='Query'),
}

model DescribeDomainQpsResponseBody = {
  blocks?: [ string ](name='Blocks'),
  cacheHits?: [ string ](name='CacheHits'),
  ccBlockQps?: [ string ](name='CcBlockQps'),
  ccJsQps?: [ string ](name='CcJsQps'),
  interval?: int32(name='Interval', example='60'),
  ipBlockQps?: [ string ](name='IpBlockQps'),
  preciseBlocks?: [ string ](name='PreciseBlocks'),
  preciseJsQps?: [ string ](name='PreciseJsQps'),
  regionBlocks?: [ string ](name='RegionBlocks'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
  startTime?: long(name='StartTime', example='1575129600'),
  totals?: [ string ](name='Totals'),
}

model DescribeDomainQpsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainQpsResponseBody(name='body'),
}

async function describeDomainQps(request: DescribeDomainQpsRequest): DescribeDomainQpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainQps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainQpsListRequest {
  regionId?: string(name='RegionId', position='Host'),
  domain?: string(name='Domain', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  interval: long(name='Interval', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model DescribeDomainQpsListResponseBody = {
  dataList?: [ 
    {
      attackQps?: long(name='AttackQps'),
      cacheHits?: long(name='CacheHits'),
      index?: long(name='Index'),
      maxAttackQps?: long(name='MaxAttackQps'),
      maxNormalQps?: long(name='MaxNormalQps'),
      maxQps?: long(name='MaxQps'),
      totalCount?: long(name='TotalCount'),
      totalQps?: long(name='TotalQps'),
    }
  ](name='DataList'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainQpsListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainQpsListResponseBody(name='body'),
}

async function describeDomainQpsList(request: DescribeDomainQpsListRequest): DescribeDomainQpsListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainQpsList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainQpsWithCacheRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  domain?: string(name='Domain', example='www.example.com', position='Query'),
  endTime: long(name='EndTime', example='1577796336', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
  startTime: long(name='StartTime', example='1577794536', position='Query'),
}

model DescribeDomainQpsWithCacheResponseBody = {
  blocks?: [ string ](name='Blocks'),
  cacheHits?: [ string ](name='CacheHits'),
  ccBlockQps?: [ string ](name='CcBlockQps'),
  ccJsQps?: [ string ](name='CcJsQps'),
  interval?: int32(name='Interval', example='60'),
  ipBlockQps?: [ string ](name='IpBlockQps'),
  preciseBlocks?: [ string ](name='PreciseBlocks'),
  preciseJsQps?: [ string ](name='PreciseJsQps'),
  regionBlocks?: [ string ](name='RegionBlocks'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
  startTime?: long(name='StartTime', example='1577794500'),
  totals?: [ string ](name='Totals'),
}

model DescribeDomainQpsWithCacheResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainQpsWithCacheResponseBody(name='body'),
}

async function describeDomainQpsWithCache(request: DescribeDomainQpsWithCacheRequest): DescribeDomainQpsWithCacheResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainQpsWithCache', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainSlsStatusRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  domain: string(name='Domain', example='www.example.com', position='Query'),
  lang?: string(name='Lang', example='cn', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeDomainSlsStatusResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
  slsLogstore?: string(name='SlsLogstore', example='ddoscoo-logstore'),
  slsProject?: string(name='SlsProject', example='ddoscoo-project-xxxx-cn-hangzhou'),
  slsStatus?: boolean(name='SlsStatus', example='true'),
}

model DescribeDomainSlsStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainSlsStatusResponseBody(name='body'),
}

async function describeDomainSlsStatus(request: DescribeDomainSlsStatusRequest): DescribeDomainSlsStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainSlsStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainStatusCodeListRequest {
  regionId?: string(name='RegionId', position='Host'),
  domain?: string(name='Domain', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  interval?: long(name='Interval', position='Query'),
  queryType: string(name='QueryType', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model DescribeDomainStatusCodeListResponseBody = {
  requestId?: string(name='RequestId'),
  statusCodeList?: [ 
    {
      index?: int32(name='Index'),
      status200?: long(name='Status200'),
      status2XX?: long(name='Status2XX'),
      status3XX?: long(name='Status3XX'),
      status403?: long(name='Status403'),
      status404?: long(name='Status404'),
      status405?: long(name='Status405'),
      status4XX?: long(name='Status4XX'),
      status501?: long(name='Status501'),
      status502?: long(name='Status502'),
      status503?: long(name='Status503'),
      status504?: long(name='Status504'),
      status5XX?: long(name='Status5XX'),
    }
  ](name='StatusCodeList'),
}

model DescribeDomainStatusCodeListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainStatusCodeListResponseBody(name='body'),
}

async function describeDomainStatusCodeList(request: DescribeDomainStatusCodeListRequest): DescribeDomainStatusCodeListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainStatusCodeList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  domain?: string(name='Domain', example='www.aliyun.com', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', example='ddoscoo-cn-XXXXXX', position='Query'),
  offset: int32(name='Offset', example='0', position='Query'),
  pageSize: string(name='PageSize', example='10', position='Query'),
  queryDomainPattern?: string(name='QueryDomainPattern', example='fuzzy', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeDomainsResponseBody = {
  domains?: [ 
    {
      blackList?: [ string ](name='BlackList'),
      ccEnabled?: boolean(name='CcEnabled', example='true'),
      ccRuleEnabled?: boolean(name='CcRuleEnabled', example='true'),
      ccTemplate?: string(name='CcTemplate', example='normal'),
      certName?: string(name='CertName', example='testCertName'),
      cname?: string(name='Cname', example='xxxxxxx.aliyunddos1006.com'),
      domain?: string(name='Domain', example='www.aliyun.com'),
      http2Enable?: boolean(name='Http2Enable', example='true'),
      proxyTypeList?: [ 
        {
          proxyPorts?: [ string ](name='ProxyPorts'),
          proxyType?: string(name='ProxyType', example='http'),
        }
      ](name='ProxyTypeList'),
      realServers?: [ 
        {
          realServer?: string(name='RealServer', example='1.1.1.1'),
          rsType?: int32(name='RsType', example='0'),
        }
      ](name='RealServers'),
      sslCiphers?: string(name='SslCiphers', example='xx'),
      sslProtocols?: string(name='SslProtocols', example='xx'),
      whiteList?: [ string ](name='WhiteList'),
    }
  ](name='Domains'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
  total?: long(name='Total', example='10'),
}

model DescribeDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainsResponseBody(name='body'),
}

async function describeDomains(request: DescribeDomainsRequest): DescribeDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomains', 'POST', '/', 'json', false, 'json', request);
}

model DescribeElasticBandwidthSpecRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', example='ddoscoo-cn-XXXXX', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeElasticBandwidthSpecResponseBody = {
  elasticBandwidthSpec?: [ string ](name='ElasticBandwidthSpec'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DescribeElasticBandwidthSpecResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeElasticBandwidthSpecResponseBody(name='body'),
}

async function describeElasticBandwidthSpec(request: DescribeElasticBandwidthSpecRequest): DescribeElasticBandwidthSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeElasticBandwidthSpec', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHealthCheckListRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  listeners: string(name='Listeners', example='[{"InstanceId":"ddoscoo-cn-XXXXX","Protocol":"tcp","FrontendPort":80}]', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeHealthCheckListResponseBody = {
  listeners?: [ 
    {
      frontendPort?: int32(name='FrontendPort', example='233'),
      healthCheck?: {
        domain?: string(name='Domain', example='www.aliyun.com'),
        down?: int32(name='Down', example='500'),
        interval?: int32(name='Interval', example='15'),
        port?: int32(name='Port', example='233'),
        timeout?: int32(name='Timeout', example='1000'),
        type?: string(name='Type', example='tcp'),
        up?: int32(name='Up', example='1000'),
        uri?: string(name='Uri', example='/a/b/c'),
      }(name='HealthCheck'),
      instanceId?: string(name='InstanceId', example='ddoscoo-cn-XXXXX'),
      protocol?: string(name='Protocol', example='tcp'),
    }
  ](name='Listeners'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DescribeHealthCheckListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHealthCheckListResponseBody(name='body'),
}

async function describeHealthCheckList(request: DescribeHealthCheckListRequest): DescribeHealthCheckListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHealthCheckList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHealthCheckStatusListRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  listeners: string(name='Listeners', example='[{"InstanceId":"ddoscoo-cn-XXXXX","Protocol":"tcp","FrontendPort":80}]', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeHealthCheckStatusListResponseBody = {
  healthCheckStatusList?: [ 
    {
      frontendPort?: int32(name='FrontendPort', example='233'),
      instanceId?: string(name='InstanceId', example='ddoscoo-cn-XXXXX'),
      protocol?: string(name='Protocol', example='tcp'),
      realServerStatusList?: [ 
        {
          address?: string(name='Address', example='1.1.1.1'),
          status?: string(name='Status', example='normal'),
        }
      ](name='RealServerStatusList'),
      status?: string(name='Status', example='normal'),
    }
  ](name='HealthCheckStatusList'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DescribeHealthCheckStatusListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHealthCheckStatusListResponseBody(name='body'),
}

async function describeHealthCheckStatusList(request: DescribeHealthCheckStatusListRequest): DescribeHealthCheckStatusListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHealthCheckStatusList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceDetailsRequest {
  regionId?: string(name='RegionId', example='xx', position='Host'),
  instanceIds: string(name='InstanceIds', example='["ddoscoo-cn-XXXX1", "ddoscoo-cn-XXXX2"]', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeInstanceDetailsResponseBody = {
  instanceDetails?: [ 
    {
      eipInfoList?: [ 
        {
          eip?: string(name='Eip', example='1.1.1.1'),
          status?: string(name='Status', example='normal'),
        }
      ](name='EipInfoList'),
      instanceId?: string(name='InstanceId', example='ddoscoo-cn-XXXXX'),
      line?: string(name='Line', example='coop-line-001'),
    }
  ](name='InstanceDetails'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DescribeInstanceDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceDetailsResponseBody(name='body'),
}

async function describeInstanceDetails(request: DescribeInstanceDetailsRequest): DescribeInstanceDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceDetails', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceSpecsRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  instanceIds: string(name='InstanceIds', example='["ddoscoo-cn-XXXXX"]', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeInstanceSpecsResponseBody = {
  instanceSpecs?: [ 
    {
      bandwidthMbps?: int32(name='BandwidthMbps', example='20000'),
      baseBandwidth?: int32(name='BaseBandwidth', example='20'),
      defenseCount?: int32(name='DefenseCount', example='10'),
      domainLimit?: int32(name='DomainLimit', example='50'),
      elasticBandwidth?: int32(name='ElasticBandwidth', example='20'),
      functionVersion?: string(name='FunctionVersion', example='default'),
      instanceId?: string(name='InstanceId', example='ddoscoo-cn-XXXXX'),
      portLimit?: int32(name='PortLimit', example='50'),
      qpsLimit?: int32(name='QpsLimit', example='1000'),
      siteLimit?: int32(name='SiteLimit', example='10'),
    }
  ](name='InstanceSpecs'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DescribeInstanceSpecsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceSpecsResponseBody(name='body'),
}

async function describeInstanceSpecs(request: DescribeInstanceSpecsRequest): DescribeInstanceSpecsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceSpecs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceStatisticsRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  instanceIds: string(name='InstanceIds', example='[{"InstanceId":"ddoscoo-cn-XXXXX","InstanceId":"ddoscoo-cn-YYYYY"}]', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeInstanceStatisticsResponseBody = {
  instanceStatistics?: [ 
    {
      defenseCountUsage?: int32(name='DefenseCountUsage', example='1'),
      domainUsage?: int32(name='DomainUsage', example='10'),
      instanceId?: string(name='InstanceId', example='ddoscoo-cn-XXXXX'),
      portUsage?: int32(name='PortUsage', example='20'),
      siteUsage?: int32(name='SiteUsage', example='1'),
    }
  ](name='InstanceStatistics'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DescribeInstanceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceStatisticsResponseBody(name='body'),
}

async function describeInstanceStatistics(request: DescribeInstanceStatisticsRequest): DescribeInstanceStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstancesRequest {
  regionId?: string(name='RegionId', example='xx', position='Host'),
  edition?: int32(name='Edition', example='9', position='Query'),
  enabled?: int32(name='Enabled', example='1', position='Query'),
  expireEndTime?: long(name='ExpireEndTime', example='1578931200000', position='Query'),
  expireStartTime?: long(name='ExpireStartTime', example='1578931200000', position='Query'),
  instanceIds?: string(name='InstanceIds', example='["ddoscoo-cn-XXXXX"]', position='Query'),
  ip?: string(name='Ip', example='1.1.1.1', position='Query'),
  pageNo: string(name='PageNo', example='1', position='Query'),
  pageSize: string(name='PageSize', example='10', position='Query'),
  remark?: string(name='Remark', example='testRemark', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
  status?: [ int32 ](name='Status', example='1', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='key'),
      value?: string(name='Value', example='value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeInstancesResponseBody = {
  instances?: [ 
    {
      debtStatus?: int32(name='DebtStatus', example='0'),
      edition?: int32(name='Edition', example='9'),
      enabled?: int32(name='Enabled', example='1'),
      expireTime?: long(name='ExpireTime', example='2308402384'),
      gmtCreate?: long(name='GmtCreate', example='2308402384'),
      instanceId?: string(name='InstanceId', example='ddoscoo-cn-XXXXX'),
      remark?: string(name='Remark', example='testRemark'),
      status?: int32(name='Status', example='1'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
  total?: long(name='Total', example='10'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpTrafficRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  eip: string(name='Eip', example='1.1.1.1', position='Query'),
  endTime: long(name='EndTime', example='1536734120', position='Query'),
  interval: int32(name='Interval', example='60', position='Query'),
  port?: int32(name='Port', example='233', position='Query'),
  queryProtocol?: string(name='QueryProtocol', example='http', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xxx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
  startTime: long(name='StartTime', example='1536734112', position='Query'),
}

model DescribeIpTrafficResponseBody = {
  avgInBps?: long(name='AvgInBps', example='10000'),
  avgOutBps?: long(name='AvgOutBps', example='10000'),
  ipTrafficPoints?: [ 
    {
      actConns?: int32(name='ActConns', example='100'),
      cps?: int32(name='Cps', example='100'),
      inactConns?: int32(name='InactConns', example='100'),
      maxInbps?: long(name='MaxInbps', example='10000'),
      maxOutbps?: long(name='MaxOutbps', example='10000'),
      time?: long(name='Time', example='1536734112'),
    }
  ](name='IpTrafficPoints'),
  maxInBps?: long(name='MaxInBps', example='10000'),
  maxOutBps?: long(name='MaxOutBps', example='10000'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DescribeIpTrafficResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIpTrafficResponseBody(name='body'),
}

async function describeIpTraffic(request: DescribeIpTrafficRequest): DescribeIpTrafficResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpTraffic', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLayer4RuleAttributesRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  listeners: string(name='Listeners', example='[{"InstanceId":"ddoscoo-cn-XXXXX","Protocol":"tcp","FrontendPort":80}]', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeLayer4RuleAttributesResponseBody = {
  listeners?: [ 
    {
      config?: {
        cc?: {
          sblack?: [ 
            {
              cnt?: int32(name='Cnt', example='5'),
              during?: int32(name='During', example='60'),
              expires?: int32(name='Expires', example='1800'),
              type?: int32(name='Type', example='1'),
            }
          ](name='Sblack'),
        }(name='Cc'),
        nodataConn?: string(name='NodataConn', example='on'),
        payloadLen?: {
          max?: int32(name='Max', example='2'),
          min?: int32(name='Min', example='1'),
        }(name='PayloadLen'),
        persistenceTimeout?: int32(name='PersistenceTimeout', example='0'),
        sla?: {
          cps?: int32(name='Cps', example='100'),
          cpsEnable?: int32(name='CpsEnable', example='0'),
          maxconn?: int32(name='Maxconn', example='1000'),
          maxconnEnable?: int32(name='MaxconnEnable', example='0'),
        }(name='Sla'),
        slimit?: {
          bps?: long(name='Bps', example='0'),
          cps?: int32(name='Cps', example='100'),
          cpsEnable?: int32(name='CpsEnable', example='0'),
          cpsMode?: int32(name='CpsMode', example='2'),
          maxconn?: int32(name='Maxconn', example='1000'),
          maxconnEnable?: int32(name='MaxconnEnable', example='0'),
          pps?: long(name='Pps', example='0'),
        }(name='Slimit'),
        synproxy?: string(name='Synproxy', example='on'),
      }(name='Config'),
      frontendPort?: int32(name='FrontendPort', example='233'),
      instanceId?: string(name='InstanceId', example='ddoscoo-cn-XXXXX'),
      protocol?: string(name='Protocol', example='tcp'),
    }
  ](name='Listeners'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DescribeLayer4RuleAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLayer4RuleAttributesResponseBody(name='body'),
}

async function describeLayer4RuleAttributes(request: DescribeLayer4RuleAttributesRequest): DescribeLayer4RuleAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLayer4RuleAttributes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLayer4RulesRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  forwardProtocol?: string(name='ForwardProtocol', example='tcp', position='Query'),
  frontendPort?: int32(name='FrontendPort', example='233', position='Query'),
  instanceId: string(name='InstanceId', example='ddoscoo-cn-zvp2ay9b****', position='Query'),
  offset: int32(name='Offset', example='1', position='Query'),
  pageSize: string(name='PageSize', example='10', position='Query'),
  sourceIp?: string(name='SourceIp', example='192.0.XX.XX', position='Query'),
}

model DescribeLayer4RulesResponseBody = {
  listeners?: [ 
    {
      backendPort?: int32(name='BackendPort', example='233'),
      bakMode?: int32(name='BakMode', example='0'),
      currentIndex?: int32(name='CurrentIndex', example='1'),
      eip?: string(name='Eip', example='203.107.XX.XX'),
      frontendPort?: int32(name='FrontendPort', example='233'),
      instanceId?: string(name='InstanceId', example='ddoscoo-cn-zvp2ay9b****'),
      isAutoCreate?: boolean(name='IsAutoCreate', example='false'),
      protocol?: string(name='Protocol', example='tcp'),
      realServers?: [ string ](name='RealServers'),
      remark?: string(name='Remark', example='test-remark'),
    }
  ](name='Listeners'),
  requestId?: string(name='RequestId', example='949919A2-6636-1444-9213-AB27DD88AAA8'),
  total?: long(name='Total', example='1'),
}

model DescribeLayer4RulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLayer4RulesResponseBody(name='body'),
}

async function describeLayer4Rules(request: DescribeLayer4RulesRequest): DescribeLayer4RulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLayer4Rules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLayer7CCRulesRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  domain: string(name='Domain', example='www.aliyun.com', position='Query'),
  offset: int32(name='Offset', example='0', position='Query'),
  pageSize: string(name='PageSize', example='10', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeLayer7CCRulesResponseBody = {
  layer7CCRules?: [ 
    {
      act?: string(name='Act', example='close'),
      count?: int32(name='Count', example='100'),
      interval?: int32(name='Interval', example='60'),
      mode?: string(name='Mode', example='match'),
      name?: string(name='Name', example='testCcRule1'),
      ttl?: int32(name='Ttl', example='1000'),
      uri?: string(name='Uri', example='/a/b/c'),
    }
  ](name='Layer7CCRules'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
  total?: long(name='Total', example='10'),
}

model DescribeLayer7CCRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLayer7CCRulesResponseBody(name='body'),
}

async function describeLayer7CCRules(request: DescribeLayer7CCRulesRequest): DescribeLayer7CCRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLayer7CCRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLogStoreExistStatusRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  lang?: string(name='Lang', example='cn', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeLogStoreExistStatusResponseBody = {
  existStatus?: boolean(name='ExistStatus', example='true'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DescribeLogStoreExistStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogStoreExistStatusResponseBody(name='body'),
}

async function describeLogStoreExistStatus(request: DescribeLogStoreExistStatusRequest): DescribeLogStoreExistStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogStoreExistStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOpEntitiesRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  endTime: long(name='EndTime', example='1536715558000', position='Query'),
  entityObject?: string(name='EntityObject', example='xx', position='Query'),
  entityType?: int32(name='EntityType', example='1', position='Query'),
  opAction?: int32(name='OpAction', position='Query'),
  pageNo: int32(name='PageNo', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
  startTime: long(name='StartTime', example='1534123558000', position='Query'),
}

model DescribeOpEntitiesResponseBody = {
  opEntities?: [ 
    {
      entityObject?: string(name='EntityObject', example='2.2.2.2'),
      entityType?: int32(name='EntityType', example='1'),
      gmtCreate?: long(name='GmtCreate', example='1536715558000'),
      opAccount?: string(name='OpAccount', example='123'),
      opAction?: int32(name='OpAction', example='1'),
      opDesc?: string(name='OpDesc', example='{"newEntity":{"elasticBandwidth":30},"oldEntity":{"elasticBandwidth":200}}'),
    }
  ](name='OpEntities'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
  total?: long(name='Total', example='10'),
}

model DescribeOpEntitiesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOpEntitiesResponseBody(name='body'),
}

async function describeOpEntities(request: DescribeOpEntitiesRequest): DescribeOpEntitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOpEntities', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSimpleDomainsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceIds?: [ string ](name='InstanceIds', example='ddoscoo-cn-XXXXXX', position='Query'),
  lang?: string(name='Lang', example='cn', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeSimpleDomainsResponseBody = {
  domainList?: [ string ](name='DomainList'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DescribeSimpleDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSimpleDomainsResponseBody(name='body'),
}

async function describeSimpleDomains(request: DescribeSimpleDomainsRequest): DescribeSimpleDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSimpleDomains', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlsAuthStatusRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  lang?: string(name='Lang', example='cn', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeSlsAuthStatusResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
  slsAuthStatus?: boolean(name='SlsAuthStatus', example='true'),
}

model DescribeSlsAuthStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlsAuthStatusResponseBody(name='body'),
}

async function describeSlsAuthStatus(request: DescribeSlsAuthStatusRequest): DescribeSlsAuthStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlsAuthStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlsEmptyCountRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  lang?: string(name='Lang', example='cn', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeSlsEmptyCountResponseBody = {
  availableCount?: int32(name='AvailableCount', example='0'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DescribeSlsEmptyCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlsEmptyCountResponseBody(name='body'),
}

async function describeSlsEmptyCount(request: DescribeSlsEmptyCountRequest): DescribeSlsEmptyCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlsEmptyCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlsLogstoreInfoRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  lang?: string(name='Lang', example='cn', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeSlsLogstoreInfoResponseBody = {
  logStore?: string(name='LogStore', example='ddoscoo-logstore'),
  project?: string(name='Project', example='ddoscoo-project-xxxx-cn-hangzhou'),
  quota?: long(name='Quota', example='5497558138880'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
  ttl?: int32(name='Ttl'),
  used?: long(name='Used', example='0'),
}

model DescribeSlsLogstoreInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlsLogstoreInfoResponseBody(name='body'),
}

async function describeSlsLogstoreInfo(request: DescribeSlsLogstoreInfoRequest): DescribeSlsLogstoreInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlsLogstoreInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlsOpenStatusRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  lang?: string(name='Lang', example='cn', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribeSlsOpenStatusResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
  slsOpenStatus?: boolean(name='SlsOpenStatus', example='true'),
}

model DescribeSlsOpenStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlsOpenStatusResponseBody(name='body'),
}

async function describeSlsOpenStatus(request: DescribeSlsOpenStatusRequest): DescribeSlsOpenStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlsOpenStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribleCertListRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  domain?: string(name='Domain', example='www.aliyun.com', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribleCertListResponseBody = {
  certList?: [ 
    {
      common?: string(name='Common', example='www.aliyun.com'),
      domainRelated?: boolean(name='DomainRelated', example='false'),
      endDate?: string(name='EndDate', example='2020-09-23'),
      id?: int32(name='Id', example='123'),
      issuer?: string(name='Issuer', example='DigiCert Inc'),
      name?: string(name='Name', example='testCertName'),
      startDate?: string(name='StartDate', example='2019-09-24'),
    }
  ](name='CertList'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DescribleCertListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribleCertListResponseBody(name='body'),
}

async function describleCertList(request: DescribleCertListRequest): DescribleCertListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribleCertList', 'POST', '/', 'json', false, 'json', request);
}

model DescribleLayer7InstanceRelationsRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  domainList: [ string ](name='DomainList', example='www.aliyun.com', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DescribleLayer7InstanceRelationsResponseBody = {
  layer7InstanceRelations?: [ 
    {
      domain?: string(name='Domain', example='www.aliyun.com'),
      instanceDetails?: [ 
        {
          eipList?: [ string ](name='EipList'),
          functionVersion?: string(name='FunctionVersion', example='default'),
          instanceId?: string(name='InstanceId', example='ddoscoo-cn-XXXXX'),
          ipMode?: string(name='IpMode'),
          ipVersion?: string(name='IpVersion'),
        }
      ](name='InstanceDetails'),
    }
  ](name='Layer7InstanceRelations'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DescribleLayer7InstanceRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribleLayer7InstanceRelationsResponseBody(name='body'),
}

async function describleLayer7InstanceRelations(request: DescribleLayer7InstanceRelationsRequest): DescribleLayer7InstanceRelationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribleLayer7InstanceRelations', 'POST', '/', 'json', false, 'json', request);
}

model DisableLayer7CCRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  domain: string(name='Domain', example='www.aliyun.com', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DisableLayer7CCResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DisableLayer7CCResponse = {
  headers: map[string]string(name='headers'),
  body: DisableLayer7CCResponseBody(name='body'),
}

async function disableLayer7CC(request: DisableLayer7CCRequest): DisableLayer7CCResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableLayer7CC', 'POST', '/', 'json', false, 'json', request);
}

model DisableLayer7CCRuleRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  domain: string(name='Domain', example='www.aliyun.com', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model DisableLayer7CCRuleResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model DisableLayer7CCRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DisableLayer7CCRuleResponseBody(name='body'),
}

async function disableLayer7CCRule(request: DisableLayer7CCRuleRequest): DisableLayer7CCRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableLayer7CCRule', 'POST', '/', 'json', false, 'json', request);
}

model EmptySlsLogstoreRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  lang?: string(name='Lang', example='cn', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model EmptySlsLogstoreResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model EmptySlsLogstoreResponse = {
  headers: map[string]string(name='headers'),
  body: EmptySlsLogstoreResponseBody(name='body'),
}

async function emptySlsLogstore(request: EmptySlsLogstoreRequest): EmptySlsLogstoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EmptySlsLogstore', 'POST', '/', 'json', false, 'json', request);
}

model EnableLayer7CCRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  domain: string(name='Domain', example='www.aliyun.com', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model EnableLayer7CCResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model EnableLayer7CCResponse = {
  headers: map[string]string(name='headers'),
  body: EnableLayer7CCResponseBody(name='body'),
}

async function enableLayer7CC(request: EnableLayer7CCRequest): EnableLayer7CCResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableLayer7CC', 'POST', '/', 'json', false, 'json', request);
}

model EnableLayer7CCRuleRequest {
  regionId?: string(name='RegionId', example='cn', position='Host'),
  domain: string(name='Domain', example='www.aliyun.com', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model EnableLayer7CCRuleResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model EnableLayer7CCRuleResponse = {
  headers: map[string]string(name='headers'),
  body: EnableLayer7CCRuleResponseBody(name='body'),
}

async function enableLayer7CCRule(request: EnableLayer7CCRuleRequest): EnableLayer7CCRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableLayer7CCRule', 'POST', '/', 'json', false, 'json', request);
}

model ListAsyncTaskRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  lang?: string(name='Lang', example='cn', position='Query'),
  pageNo: int32(name='PageNo', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model ListAsyncTaskResponseBody = {
  asyncTasks?: [ 
    {
      endTime?: long(name='EndTime', example='1533866201000'),
      startTime?: long(name='StartTime', example='1533866201000'),
      taskId?: long(name='TaskId', example='123'),
      taskParams?: string(name='TaskParams', example='{"instanceId": "ddoscoo-1234-qrq2134"}'),
      taskResult?: string(name='TaskResult', example='{"instanceId": "ddoscoo-1234-qrq2134", "url": "https://oss.xxx.xxx"}'),
      taskStatus?: int32(name='TaskStatus', example='1'),
      taskType?: int32(name='TaskType', example='1'),
    }
  ](name='AsyncTasks'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
  total?: int32(name='Total', example='10'),
}

model ListAsyncTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ListAsyncTaskResponseBody(name='body'),
}

async function listAsyncTask(request: ListAsyncTaskRequest): ListAsyncTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAsyncTask', 'POST', '/', 'json', false, 'json', request);
}

model ListLayer7CustomPortsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  lang?: string(name='Lang', example='cn', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model ListLayer7CustomPortsResponseBody = {
  layer7CustomPorts?: [ 
    {
      flag?: string(name='Flag'),
      proxyPorts?: [ string ](name='ProxyPorts'),
      proxyType?: string(name='ProxyType', example='https'),
    }
  ](name='Layer7CustomPorts'),
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model ListLayer7CustomPortsResponse = {
  headers: map[string]string(name='headers'),
  body: ListLayer7CustomPortsResponseBody(name='body'),
}

async function listLayer7CustomPorts(request: ListLayer7CustomPortsRequest): ListLayer7CustomPortsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLayer7CustomPorts', 'POST', '/', 'json', false, 'json', request);
}

model ListTagKeysRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  resourceType: string(name='ResourceType', example='INSTANCE', position='Query'),
}

model ListTagKeysResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='97935DF1-0289-4AA2-9DD1-72377838B16B'),
  tagKeys?: [ 
    {
      tagCount?: int32(name='TagCount', example='1'),
      tagKey?: string(name='TagKey', example='a'),
    }
  ](name='TagKeys'),
  totalCount?: int32(name='TotalCount', example='6'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', example='RGuYpqDdKhzXb8C3.D1BwQgc1tMBsoxdGiEKHHUUCffomr', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  resourceId?: [ string ](name='ResourceId', example='ddoscoo-cn-o4017n9q9004', position='Query'),
  resourceType: string(name='ResourceType', example='INSTANCE', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='testKey1'),
      value?: string(name='Value', example='testValue1'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='RGuYpqDdKhzXb8C3.D1BwQgc1tMBsoxdGiEKHHUUCffomr'),
  requestId?: string(name='RequestId', example='C3F7E6AE-43B2-4730-B6A3-FD17552B8F65'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', example='ddoscoo-cn-o4017n9q9004'),
      resourceType?: string(name='ResourceType', example='INSTANCE'),
      tagKey?: string(name='TagKey', example='testKey1'),
      tagValue?: string(name='TagValue', example='testValue1'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListValueAddedRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model ListValueAddedResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
  valueAddedList?: [ 
    {
      expireTime?: long(name='ExpireTime', example='1580918400000'),
      gmtCreate?: long(name='GmtCreate', example='1575527305000'),
      instanceId?: string(name='InstanceId', example='ddos_fl_pre-cn-xxxx'),
      logSize?: long(name='LogSize', example='5497558138880'),
      status?: int32(name='Status', example='1'),
    }
  ](name='ValueAddedList'),
}

model ListValueAddedResponse = {
  headers: map[string]string(name='headers'),
  body: ListValueAddedResponseBody(name='body'),
}

async function listValueAdded(request: ListValueAddedRequest): ListValueAddedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListValueAdded', 'POST', '/', 'json', false, 'json', request);
}

model ModifyElasticBandWidthRequest {
  regionId?: string(name='RegionId', position='Host'),
  elasticBandwidth: int32(name='ElasticBandwidth', example='30', position='Query'),
  instanceId: string(name='InstanceId', example='ddoscoo-cn-XXXXX', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model ModifyElasticBandWidthResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model ModifyElasticBandWidthResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyElasticBandWidthResponseBody(name='body'),
}

async function modifyElasticBandWidth(request: ModifyElasticBandWidthRequest): ModifyElasticBandWidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyElasticBandWidth', 'POST', '/', 'json', false, 'json', request);
}

model ModifyFullLogTtlRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  lang?: string(name='Lang', example='cn', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
  ttl: int32(name='Ttl', example='30', position='Query'),
}

model ModifyFullLogTtlResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model ModifyFullLogTtlResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyFullLogTtlResponseBody(name='body'),
}

async function modifyFullLogTtl(request: ModifyFullLogTtlRequest): ModifyFullLogTtlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyFullLogTtl', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceRemarkRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  instanceId?: string(name='InstanceId', example='ddoscoo-cn-XXXXX', position='Query'),
  remark?: string(name='Remark', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model ModifyInstanceRemarkResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model ModifyInstanceRemarkResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceRemarkResponseBody(name='body'),
}

async function modifyInstanceRemark(request: ModifyInstanceRemarkRequest): ModifyInstanceRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceRemark', 'POST', '/', 'json', false, 'json', request);
}

model OpenDomainSlsConfigRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  domain: string(name='Domain', example='www.example.com', position='Query'),
  lang?: string(name='Lang', example='cn', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='xx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model OpenDomainSlsConfigResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model OpenDomainSlsConfigResponse = {
  headers: map[string]string(name='headers'),
  body: OpenDomainSlsConfigResponseBody(name='body'),
}

async function openDomainSlsConfig(request: OpenDomainSlsConfigRequest): OpenDomainSlsConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenDomainSlsConfig', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId?: string(name='InstanceId', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model ReleaseInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstanceResponseBody(name='body'),
}

async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstance', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseValueAddedRequest {
  instanceId: string(name='InstanceId', example='ddos_fl_pre-cn-xxxx', position='Query'),
  sourceIp?: string(name='SourceIp', example='1.1.1.1', position='Query'),
}

model ReleaseValueAddedResponseBody = {
  requestId?: string(name='RequestId', example='CF33B4C3-196E-4015-AADD-5CAD00057B80'),
}

model ReleaseValueAddedResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseValueAddedResponseBody(name='body'),
}

async function releaseValueAdded(request: ReleaseValueAddedRequest): ReleaseValueAddedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseValueAdded', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  resourceId: [ string ](name='ResourceId', example='ddoscoo-cn-v0h1fmwbc024', position='Query'),
  resourceType: string(name='ResourceType', example='INSTANCE', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='testKey1'),
      value?: string(name='Value', example='testValue1'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='7078CD1E-F609-47A4-9C39-B288CC27C686'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', example='false', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='test', position='Query'),
  resourceId: [ string ](name='ResourceId', example='ddoscoo-cn-v0h1fmwbc024', position='Query'),
  resourceType: string(name='ResourceType', example='INSTANCE', position='Query'),
  tagKey?: [ string ](name='TagKey', example='testKey1', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='F2D86AED-BA27-4584-BADC-B43BDA7EEBCA'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

