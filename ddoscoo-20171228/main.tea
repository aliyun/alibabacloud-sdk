/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('ddoscoo', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddLayer7CCRuleRequest {
  act?: string(name='Act'),
  count?: int32(name='Count'),
  domain?: string(name='Domain'),
  interval?: int32(name='Interval'),
  mode?: string(name='Mode'),
  name?: string(name='Name'),
  resourceGroupId?: string(name='ResourceGroupId'),
  ttl?: int32(name='Ttl'),
  uri?: string(name='Uri'),
}

model AddLayer7CCRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLayer7CCRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddLayer7CCRuleResponseBody(name='body'),
}

async function addLayer7CCRuleWithOptions(request: AddLayer7CCRuleRequest, runtime: Util.RuntimeOptions): AddLayer7CCRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.act)) {
    query['Act'] = request.act;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.ttl)) {
    query['Ttl'] = request.ttl;
  }
  if (!Util.isUnset(request.uri)) {
    query['Uri'] = request.uri;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddLayer7CCRule',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addLayer7CCRule(request: AddLayer7CCRuleRequest): AddLayer7CCRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLayer7CCRuleWithOptions(request, runtime);
}

model CloseDomainSlsConfigRequest {
  domain?: string(name='Domain'),
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model CloseDomainSlsConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model CloseDomainSlsConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloseDomainSlsConfigResponseBody(name='body'),
}

async function closeDomainSlsConfigWithOptions(request: CloseDomainSlsConfigRequest, runtime: Util.RuntimeOptions): CloseDomainSlsConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CloseDomainSlsConfig',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function closeDomainSlsConfig(request: CloseDomainSlsConfigRequest): CloseDomainSlsConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeDomainSlsConfigWithOptions(request, runtime);
}

model ConfigHealthCheckRequest {
  forwardProtocol?: string(name='ForwardProtocol'),
  frontendPort?: int32(name='FrontendPort'),
  healthCheck?: string(name='HealthCheck'),
  instanceId?: string(name='InstanceId'),
}

model ConfigHealthCheckResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigHealthCheckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigHealthCheckResponseBody(name='body'),
}

async function configHealthCheckWithOptions(request: ConfigHealthCheckRequest, runtime: Util.RuntimeOptions): ConfigHealthCheckResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.forwardProtocol)) {
    query['ForwardProtocol'] = request.forwardProtocol;
  }
  if (!Util.isUnset(request.frontendPort)) {
    query['FrontendPort'] = request.frontendPort;
  }
  if (!Util.isUnset(request.healthCheck)) {
    query['HealthCheck'] = request.healthCheck;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfigHealthCheck',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configHealthCheck(request: ConfigHealthCheckRequest): ConfigHealthCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return configHealthCheckWithOptions(request, runtime);
}

model ConfigLayer4RuleRequest {
  listeners?: string(name='Listeners'),
}

model ConfigLayer4RuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigLayer4RuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigLayer4RuleResponseBody(name='body'),
}

async function configLayer4RuleWithOptions(request: ConfigLayer4RuleRequest, runtime: Util.RuntimeOptions): ConfigLayer4RuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.listeners)) {
    query['Listeners'] = request.listeners;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfigLayer4Rule',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configLayer4Rule(request: ConfigLayer4RuleRequest): ConfigLayer4RuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return configLayer4RuleWithOptions(request, runtime);
}

model ConfigLayer4RuleAttributeRequest {
  config?: string(name='Config'),
  forwardProtocol?: string(name='ForwardProtocol'),
  frontendPort?: int32(name='FrontendPort'),
  instanceId?: string(name='InstanceId'),
}

model ConfigLayer4RuleAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigLayer4RuleAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigLayer4RuleAttributeResponseBody(name='body'),
}

async function configLayer4RuleAttributeWithOptions(request: ConfigLayer4RuleAttributeRequest, runtime: Util.RuntimeOptions): ConfigLayer4RuleAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.forwardProtocol)) {
    query['ForwardProtocol'] = request.forwardProtocol;
  }
  if (!Util.isUnset(request.frontendPort)) {
    query['FrontendPort'] = request.frontendPort;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfigLayer4RuleAttribute',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configLayer4RuleAttribute(request: ConfigLayer4RuleAttributeRequest): ConfigLayer4RuleAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return configLayer4RuleAttributeWithOptions(request, runtime);
}

model ConfigLayer7BlackWhiteListRequest {
  blackList?: [ string ](name='BlackList'),
  domain?: string(name='Domain'),
  resourceGroupId?: string(name='ResourceGroupId'),
  whiteList?: [ string ](name='WhiteList'),
}

model ConfigLayer7BlackWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigLayer7BlackWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigLayer7BlackWhiteListResponseBody(name='body'),
}

async function configLayer7BlackWhiteListWithOptions(request: ConfigLayer7BlackWhiteListRequest, runtime: Util.RuntimeOptions): ConfigLayer7BlackWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blackList)) {
    query['BlackList'] = request.blackList;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.whiteList)) {
    query['WhiteList'] = request.whiteList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfigLayer7BlackWhiteList',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configLayer7BlackWhiteList(request: ConfigLayer7BlackWhiteListRequest): ConfigLayer7BlackWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return configLayer7BlackWhiteListWithOptions(request, runtime);
}

model ConfigLayer7CCRuleRequest {
  act?: string(name='Act'),
  count?: int32(name='Count'),
  domain?: string(name='Domain'),
  interval?: int32(name='Interval'),
  mode?: string(name='Mode'),
  name?: string(name='Name'),
  resourceGroupId?: string(name='ResourceGroupId'),
  ttl?: int32(name='Ttl'),
  uri?: string(name='Uri'),
}

model ConfigLayer7CCRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigLayer7CCRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigLayer7CCRuleResponseBody(name='body'),
}

async function configLayer7CCRuleWithOptions(request: ConfigLayer7CCRuleRequest, runtime: Util.RuntimeOptions): ConfigLayer7CCRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.act)) {
    query['Act'] = request.act;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.ttl)) {
    query['Ttl'] = request.ttl;
  }
  if (!Util.isUnset(request.uri)) {
    query['Uri'] = request.uri;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfigLayer7CCRule',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configLayer7CCRule(request: ConfigLayer7CCRuleRequest): ConfigLayer7CCRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return configLayer7CCRuleWithOptions(request, runtime);
}

model ConfigLayer7CCTemplateRequest {
  domain?: string(name='Domain'),
  resourceGroupId?: string(name='ResourceGroupId'),
  template?: string(name='Template'),
}

model ConfigLayer7CCTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigLayer7CCTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigLayer7CCTemplateResponseBody(name='body'),
}

async function configLayer7CCTemplateWithOptions(request: ConfigLayer7CCTemplateRequest, runtime: Util.RuntimeOptions): ConfigLayer7CCTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.template)) {
    query['Template'] = request.template;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfigLayer7CCTemplate',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configLayer7CCTemplate(request: ConfigLayer7CCTemplateRequest): ConfigLayer7CCTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return configLayer7CCTemplateWithOptions(request, runtime);
}

model ConfigLayer7CertRequest {
  cert?: string(name='Cert'),
  certId?: int32(name='CertId'),
  certName?: string(name='CertName'),
  domain?: string(name='Domain'),
  key?: string(name='Key'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ConfigLayer7CertResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigLayer7CertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigLayer7CertResponseBody(name='body'),
}

async function configLayer7CertWithOptions(request: ConfigLayer7CertRequest, runtime: Util.RuntimeOptions): ConfigLayer7CertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cert)) {
    query['Cert'] = request.cert;
  }
  if (!Util.isUnset(request.certId)) {
    query['CertId'] = request.certId;
  }
  if (!Util.isUnset(request.certName)) {
    query['CertName'] = request.certName;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfigLayer7Cert',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configLayer7Cert(request: ConfigLayer7CertRequest): ConfigLayer7CertResponse {
  var runtime = new Util.RuntimeOptions{};
  return configLayer7CertWithOptions(request, runtime);
}

model ConfigLayer7RuleRequest {
  domain?: string(name='Domain'),
  instanceIds?: [ string ](name='InstanceIds'),
  proxyTypeList?: string(name='ProxyTypeList'),
  proxyTypes?: [ string ](name='ProxyTypes'),
  realServers?: [ string ](name='RealServers'),
  resourceGroupId?: string(name='ResourceGroupId'),
  rsType?: int32(name='RsType'),
}

model ConfigLayer7RuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigLayer7RuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigLayer7RuleResponseBody(name='body'),
}

async function configLayer7RuleWithOptions(request: ConfigLayer7RuleRequest, runtime: Util.RuntimeOptions): ConfigLayer7RuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.proxyTypeList)) {
    query['ProxyTypeList'] = request.proxyTypeList;
  }
  if (!Util.isUnset(request.proxyTypes)) {
    query['ProxyTypes'] = request.proxyTypes;
  }
  if (!Util.isUnset(request.realServers)) {
    query['RealServers'] = request.realServers;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.rsType)) {
    query['RsType'] = request.rsType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfigLayer7Rule',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configLayer7Rule(request: ConfigLayer7RuleRequest): ConfigLayer7RuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return configLayer7RuleWithOptions(request, runtime);
}

model CreateAsyncTaskRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  taskParams?: string(name='TaskParams'),
  taskType?: int32(name='TaskType'),
}

model CreateAsyncTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateAsyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAsyncTaskResponseBody(name='body'),
}

async function createAsyncTaskWithOptions(request: CreateAsyncTaskRequest, runtime: Util.RuntimeOptions): CreateAsyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.taskParams)) {
    query['TaskParams'] = request.taskParams;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAsyncTask',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAsyncTask(request: CreateAsyncTaskRequest): CreateAsyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAsyncTaskWithOptions(request, runtime);
}

model CreateLayer4RuleRequest {
  listeners?: string(name='Listeners'),
}

model CreateLayer4RuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateLayer4RuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLayer4RuleResponseBody(name='body'),
}

async function createLayer4RuleWithOptions(request: CreateLayer4RuleRequest, runtime: Util.RuntimeOptions): CreateLayer4RuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.listeners)) {
    query['Listeners'] = request.listeners;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLayer4Rule',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLayer4Rule(request: CreateLayer4RuleRequest): CreateLayer4RuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLayer4RuleWithOptions(request, runtime);
}

model CreateLayer7RuleRequest {
  domain?: string(name='Domain'),
  instanceIds?: [ string ](name='InstanceIds'),
  resourceGroupId?: string(name='ResourceGroupId'),
  rsType?: int32(name='RsType'),
  rules?: string(name='Rules'),
}

model CreateLayer7RuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateLayer7RuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLayer7RuleResponseBody(name='body'),
}

async function createLayer7RuleWithOptions(request: CreateLayer7RuleRequest, runtime: Util.RuntimeOptions): CreateLayer7RuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.rsType)) {
    query['RsType'] = request.rsType;
  }
  if (!Util.isUnset(request.rules)) {
    query['Rules'] = request.rules;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLayer7Rule',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLayer7Rule(request: CreateLayer7RuleRequest): CreateLayer7RuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLayer7RuleWithOptions(request, runtime);
}

model DeleteAsyncTaskRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  taskId?: int32(name='TaskId'),
}

model DeleteAsyncTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAsyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAsyncTaskResponseBody(name='body'),
}

async function deleteAsyncTaskWithOptions(request: DeleteAsyncTaskRequest, runtime: Util.RuntimeOptions): DeleteAsyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAsyncTask',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAsyncTask(request: DeleteAsyncTaskRequest): DeleteAsyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAsyncTaskWithOptions(request, runtime);
}

model DeleteLayer4RuleRequest {
  listeners?: string(name='Listeners'),
}

model DeleteLayer4RuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLayer4RuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLayer4RuleResponseBody(name='body'),
}

async function deleteLayer4RuleWithOptions(request: DeleteLayer4RuleRequest, runtime: Util.RuntimeOptions): DeleteLayer4RuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.listeners)) {
    query['Listeners'] = request.listeners;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLayer4Rule',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLayer4Rule(request: DeleteLayer4RuleRequest): DeleteLayer4RuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLayer4RuleWithOptions(request, runtime);
}

model DeleteLayer7CCRuleRequest {
  domain?: string(name='Domain'),
  name?: string(name='Name'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DeleteLayer7CCRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLayer7CCRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLayer7CCRuleResponseBody(name='body'),
}

async function deleteLayer7CCRuleWithOptions(request: DeleteLayer7CCRuleRequest, runtime: Util.RuntimeOptions): DeleteLayer7CCRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLayer7CCRule',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLayer7CCRule(request: DeleteLayer7CCRuleRequest): DeleteLayer7CCRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLayer7CCRuleWithOptions(request, runtime);
}

model DeleteLayer7RuleRequest {
  domain?: string(name='Domain'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DeleteLayer7RuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLayer7RuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLayer7RuleResponseBody(name='body'),
}

async function deleteLayer7RuleWithOptions(request: DeleteLayer7RuleRequest, runtime: Util.RuntimeOptions): DeleteLayer7RuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLayer7Rule',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLayer7Rule(request: DeleteLayer7RuleRequest): DeleteLayer7RuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLayer7RuleWithOptions(request, runtime);
}

model DescribeBackSourceCidrRequest {
  line?: string(name='Line'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeBackSourceCidrResponseBody = {
  cidrList?: [ string ](name='CidrList'),
  requestId?: string(name='RequestId'),
}

model DescribeBackSourceCidrResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackSourceCidrResponseBody(name='body'),
}

async function describeBackSourceCidrWithOptions(request: DescribeBackSourceCidrRequest, runtime: Util.RuntimeOptions): DescribeBackSourceCidrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.line)) {
    query['Line'] = request.line;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackSourceCidr',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackSourceCidr(request: DescribeBackSourceCidrRequest): DescribeBackSourceCidrResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackSourceCidrWithOptions(request, runtime);
}

model DescribeBatchSlsDispatchStatusRequest {
  lang?: string(name='Lang'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeBatchSlsDispatchStatusResponseBody = {
  requestId?: string(name='RequestId'),
  slsConfigStatusList?: [ 
    {
      domain?: string(name='Domain'),
      enable?: boolean(name='Enable'),
    }
  ](name='SlsConfigStatusList'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeBatchSlsDispatchStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBatchSlsDispatchStatusResponseBody(name='body'),
}

async function describeBatchSlsDispatchStatusWithOptions(request: DescribeBatchSlsDispatchStatusRequest, runtime: Util.RuntimeOptions): DescribeBatchSlsDispatchStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBatchSlsDispatchStatus',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBatchSlsDispatchStatus(request: DescribeBatchSlsDispatchStatusRequest): DescribeBatchSlsDispatchStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBatchSlsDispatchStatusWithOptions(request, runtime);
}

model DescribeDDoSEventsRequest {
  eip?: string(name='Eip'),
  endTime?: long(name='EndTime'),
  offset?: int32(name='Offset'),
  pageSize?: string(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
  startTime?: long(name='StartTime'),
}

model DescribeDDoSEventsResponseBody = {
  events?: [ 
    {
      endTime?: long(name='EndTime'),
      interval?: int32(name='Interval'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
    }
  ](name='Events'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeDDoSEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDDoSEventsResponseBody(name='body'),
}

async function describeDDoSEventsWithOptions(request: DescribeDDoSEventsRequest, runtime: Util.RuntimeOptions): DescribeDDoSEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eip)) {
    query['Eip'] = request.eip;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.offset)) {
    query['Offset'] = request.offset;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDDoSEvents',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDDoSEvents(request: DescribeDDoSEventsRequest): DescribeDDoSEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDDoSEventsWithOptions(request, runtime);
}

model DescribeDDoSTrafficRequest {
  eip?: string(name='Eip'),
  endTime?: long(name='EndTime'),
  interval?: int32(name='Interval'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
  startTime?: long(name='StartTime'),
}

model DescribeDDoSTrafficResponseBody = {
  DDoSTrafficPoints?: [ 
    {
      defenseMaxInBps?: long(name='DefenseMaxInBps'),
      sourceMaxInBps?: long(name='SourceMaxInBps'),
      time?: long(name='Time'),
    }
  ](name='DDoSTrafficPoints'),
  defenseInBytes?: long(name='DefenseInBytes'),
  requestId?: string(name='RequestId'),
  sourceInBytes?: long(name='SourceInBytes'),
}

model DescribeDDoSTrafficResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDDoSTrafficResponseBody(name='body'),
}

async function describeDDoSTrafficWithOptions(request: DescribeDDoSTrafficRequest, runtime: Util.RuntimeOptions): DescribeDDoSTrafficResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eip)) {
    query['Eip'] = request.eip;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDDoSTraffic',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDDoSTraffic(request: DescribeDDoSTrafficRequest): DescribeDDoSTrafficResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDDoSTrafficWithOptions(request, runtime);
}

model DescribeDefenseCountStatisticsRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeDefenseCountStatisticsResponseBody = {
  defenseCountStatistics?: {
    defenseCountTotalUsageOfCurrentMonth?: int32(name='DefenseCountTotalUsageOfCurrentMonth'),
    flowPackCountRemain?: int32(name='FlowPackCountRemain'),
    maxUsableDefenseCountCurrentMonth?: int32(name='MaxUsableDefenseCountCurrentMonth'),
  }(name='DefenseCountStatistics'),
  requestId?: string(name='RequestId'),
}

model DescribeDefenseCountStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDefenseCountStatisticsResponseBody(name='body'),
}

async function describeDefenseCountStatisticsWithOptions(request: DescribeDefenseCountStatisticsRequest, runtime: Util.RuntimeOptions): DescribeDefenseCountStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDefenseCountStatistics',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDefenseCountStatistics(request: DescribeDefenseCountStatisticsRequest): DescribeDefenseCountStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDefenseCountStatisticsWithOptions(request, runtime);
}

model DescribeDomainAccessModeRequest {
  domainList?: [ string ](name='DomainList'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeDomainAccessModeResponseBody = {
  domainModeList?: [ 
    {
      accessMode?: int32(name='AccessMode'),
      domain?: string(name='Domain'),
    }
  ](name='DomainModeList'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainAccessModeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainAccessModeResponseBody(name='body'),
}

async function describeDomainAccessModeWithOptions(request: DescribeDomainAccessModeRequest, runtime: Util.RuntimeOptions): DescribeDomainAccessModeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainList)) {
    query['DomainList'] = request.domainList;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainAccessMode',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainAccessMode(request: DescribeDomainAccessModeRequest): DescribeDomainAccessModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainAccessModeWithOptions(request, runtime);
}

model DescribeDomainAttackEventsRequest {
  domain?: string(name='Domain'),
  endTime?: long(name='EndTime'),
  offset?: int32(name='Offset'),
  pageSize?: string(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
  startTime?: long(name='StartTime'),
}

model DescribeDomainAttackEventsResponseBody = {
  events?: [ 
    {
      blockCount?: long(name='BlockCount'),
      duration?: int32(name='Duration'),
      endTime?: long(name='EndTime'),
      finished?: boolean(name='Finished'),
      maxQps?: int32(name='MaxQps'),
      startTime?: long(name='StartTime'),
    }
  ](name='Events'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeDomainAttackEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainAttackEventsResponseBody(name='body'),
}

async function describeDomainAttackEventsWithOptions(request: DescribeDomainAttackEventsRequest, runtime: Util.RuntimeOptions): DescribeDomainAttackEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.offset)) {
    query['Offset'] = request.offset;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainAttackEvents',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainAttackEvents(request: DescribeDomainAttackEventsRequest): DescribeDomainAttackEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainAttackEventsWithOptions(request, runtime);
}

model DescribeDomainQpsRequest {
  domain?: string(name='Domain'),
  endTime?: long(name='EndTime'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
  startTime?: long(name='StartTime'),
}

model DescribeDomainQpsResponseBody = {
  blocks?: [ string ](name='Blocks'),
  cacheHits?: [ string ](name='CacheHits'),
  ccBlockQps?: [ string ](name='CcBlockQps'),
  ccJsQps?: [ string ](name='CcJsQps'),
  interval?: int32(name='Interval'),
  ipBlockQps?: [ string ](name='IpBlockQps'),
  preciseBlocks?: [ string ](name='PreciseBlocks'),
  preciseJsQps?: [ string ](name='PreciseJsQps'),
  regionBlocks?: [ string ](name='RegionBlocks'),
  requestId?: string(name='RequestId'),
  startTime?: long(name='StartTime'),
  totals?: [ string ](name='Totals'),
}

model DescribeDomainQpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainQpsResponseBody(name='body'),
}

async function describeDomainQpsWithOptions(request: DescribeDomainQpsRequest, runtime: Util.RuntimeOptions): DescribeDomainQpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainQps',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainQps(request: DescribeDomainQpsRequest): DescribeDomainQpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainQpsWithOptions(request, runtime);
}

model DescribeDomainQpsWithCacheRequest {
  domain?: string(name='Domain'),
  endTime?: long(name='EndTime'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
  startTime?: long(name='StartTime'),
}

model DescribeDomainQpsWithCacheResponseBody = {
  blocks?: [ string ](name='Blocks'),
  cacheHits?: [ string ](name='CacheHits'),
  ccBlockQps?: [ string ](name='CcBlockQps'),
  ccJsQps?: [ string ](name='CcJsQps'),
  interval?: int32(name='Interval'),
  ipBlockQps?: [ string ](name='IpBlockQps'),
  preciseBlocks?: [ string ](name='PreciseBlocks'),
  preciseJsQps?: [ string ](name='PreciseJsQps'),
  regionBlocks?: [ string ](name='RegionBlocks'),
  requestId?: string(name='RequestId'),
  startTime?: long(name='StartTime'),
  totals?: [ string ](name='Totals'),
}

model DescribeDomainQpsWithCacheResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainQpsWithCacheResponseBody(name='body'),
}

async function describeDomainQpsWithCacheWithOptions(request: DescribeDomainQpsWithCacheRequest, runtime: Util.RuntimeOptions): DescribeDomainQpsWithCacheResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainQpsWithCache',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainQpsWithCache(request: DescribeDomainQpsWithCacheRequest): DescribeDomainQpsWithCacheResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainQpsWithCacheWithOptions(request, runtime);
}

model DescribeDomainSlsStatusRequest {
  domain?: string(name='Domain'),
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeDomainSlsStatusResponseBody = {
  requestId?: string(name='RequestId'),
  slsLogstore?: string(name='SlsLogstore'),
  slsProject?: string(name='SlsProject'),
  slsStatus?: boolean(name='SlsStatus'),
}

model DescribeDomainSlsStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainSlsStatusResponseBody(name='body'),
}

async function describeDomainSlsStatusWithOptions(request: DescribeDomainSlsStatusRequest, runtime: Util.RuntimeOptions): DescribeDomainSlsStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainSlsStatus',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainSlsStatus(request: DescribeDomainSlsStatusRequest): DescribeDomainSlsStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainSlsStatusWithOptions(request, runtime);
}

model DescribeDomainsRequest {
  domain?: string(name='Domain'),
  instanceIds?: [ string ](name='InstanceIds'),
  offset?: int32(name='Offset'),
  pageSize?: string(name='PageSize'),
  queryDomainPattern?: string(name='QueryDomainPattern'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeDomainsResponseBody = {
  domains?: [ 
    {
      blackList?: [ string ](name='BlackList'),
      ccEnabled?: boolean(name='CcEnabled'),
      ccRuleEnabled?: boolean(name='CcRuleEnabled'),
      ccTemplate?: string(name='CcTemplate'),
      certName?: string(name='CertName'),
      cname?: string(name='Cname'),
      domain?: string(name='Domain'),
      http2Enable?: boolean(name='Http2Enable'),
      proxyTypeList?: [ 
        {
          proxyPorts?: [ string ](name='ProxyPorts'),
          proxyType?: string(name='ProxyType'),
        }
      ](name='ProxyTypeList'),
      realServers?: [ 
        {
          realServer?: string(name='RealServer'),
          rsType?: int32(name='RsType'),
        }
      ](name='RealServers'),
      sslCiphers?: string(name='SslCiphers'),
      sslProtocols?: string(name='SslProtocols'),
      whiteList?: [ string ](name='WhiteList'),
    }
  ](name='Domains'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainsResponseBody(name='body'),
}

async function describeDomainsWithOptions(request: DescribeDomainsRequest, runtime: Util.RuntimeOptions): DescribeDomainsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.offset)) {
    query['Offset'] = request.offset;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryDomainPattern)) {
    query['QueryDomainPattern'] = request.queryDomainPattern;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomains',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomains(request: DescribeDomainsRequest): DescribeDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainsWithOptions(request, runtime);
}

model DescribeElasticBandwidthSpecRequest {
  instanceId?: string(name='InstanceId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeElasticBandwidthSpecResponseBody = {
  elasticBandwidthSpec?: [ string ](name='ElasticBandwidthSpec'),
  requestId?: string(name='RequestId'),
}

model DescribeElasticBandwidthSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeElasticBandwidthSpecResponseBody(name='body'),
}

async function describeElasticBandwidthSpecWithOptions(request: DescribeElasticBandwidthSpecRequest, runtime: Util.RuntimeOptions): DescribeElasticBandwidthSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeElasticBandwidthSpec',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeElasticBandwidthSpec(request: DescribeElasticBandwidthSpecRequest): DescribeElasticBandwidthSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeElasticBandwidthSpecWithOptions(request, runtime);
}

model DescribeHealthCheckListRequest {
  listeners?: string(name='Listeners'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeHealthCheckListResponseBody = {
  listeners?: [ 
    {
      frontendPort?: int32(name='FrontendPort'),
      healthCheck?: {
        domain?: string(name='Domain'),
        down?: int32(name='Down'),
        interval?: int32(name='Interval'),
        port?: int32(name='Port'),
        timeout?: int32(name='Timeout'),
        type?: string(name='Type'),
        up?: int32(name='Up'),
        uri?: string(name='Uri'),
      }(name='HealthCheck'),
      instanceId?: string(name='InstanceId'),
      protocol?: string(name='Protocol'),
    }
  ](name='Listeners'),
  requestId?: string(name='RequestId'),
}

model DescribeHealthCheckListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHealthCheckListResponseBody(name='body'),
}

async function describeHealthCheckListWithOptions(request: DescribeHealthCheckListRequest, runtime: Util.RuntimeOptions): DescribeHealthCheckListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.listeners)) {
    query['Listeners'] = request.listeners;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHealthCheckList',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHealthCheckList(request: DescribeHealthCheckListRequest): DescribeHealthCheckListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHealthCheckListWithOptions(request, runtime);
}

model DescribeHealthCheckStatusListRequest {
  listeners?: string(name='Listeners'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeHealthCheckStatusListResponseBody = {
  healthCheckStatusList?: [ 
    {
      frontendPort?: int32(name='FrontendPort'),
      instanceId?: string(name='InstanceId'),
      protocol?: string(name='Protocol'),
      realServerStatusList?: [ 
        {
          address?: string(name='Address'),
          status?: string(name='Status'),
        }
      ](name='RealServerStatusList'),
      status?: string(name='Status'),
    }
  ](name='HealthCheckStatusList'),
  requestId?: string(name='RequestId'),
}

model DescribeHealthCheckStatusListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHealthCheckStatusListResponseBody(name='body'),
}

async function describeHealthCheckStatusListWithOptions(request: DescribeHealthCheckStatusListRequest, runtime: Util.RuntimeOptions): DescribeHealthCheckStatusListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.listeners)) {
    query['Listeners'] = request.listeners;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHealthCheckStatusList',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHealthCheckStatusList(request: DescribeHealthCheckStatusListRequest): DescribeHealthCheckStatusListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHealthCheckStatusListWithOptions(request, runtime);
}

model DescribeInstanceDetailsRequest {
  instanceIds?: string(name='InstanceIds'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeInstanceDetailsResponseBody = {
  instanceDetails?: [ 
    {
      eipInfoList?: [ 
        {
          eip?: string(name='Eip'),
          status?: string(name='Status'),
        }
      ](name='EipInfoList'),
      instanceId?: string(name='InstanceId'),
      line?: string(name='Line'),
    }
  ](name='InstanceDetails'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceDetailsResponseBody(name='body'),
}

async function describeInstanceDetailsWithOptions(request: DescribeInstanceDetailsRequest, runtime: Util.RuntimeOptions): DescribeInstanceDetailsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceDetails',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceDetails(request: DescribeInstanceDetailsRequest): DescribeInstanceDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceDetailsWithOptions(request, runtime);
}

model DescribeInstanceSpecsRequest {
  instanceIds?: string(name='InstanceIds'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeInstanceSpecsResponseBody = {
  instanceSpecs?: [ 
    {
      bandwidthMbps?: int32(name='BandwidthMbps'),
      baseBandwidth?: int32(name='BaseBandwidth'),
      defenseCount?: int32(name='DefenseCount'),
      domainLimit?: int32(name='DomainLimit'),
      elasticBandwidth?: int32(name='ElasticBandwidth'),
      functionVersion?: string(name='FunctionVersion'),
      instanceId?: string(name='InstanceId'),
      portLimit?: int32(name='PortLimit'),
      qpsLimit?: int32(name='QpsLimit'),
      siteLimit?: int32(name='SiteLimit'),
    }
  ](name='InstanceSpecs'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceSpecsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceSpecsResponseBody(name='body'),
}

async function describeInstanceSpecsWithOptions(request: DescribeInstanceSpecsRequest, runtime: Util.RuntimeOptions): DescribeInstanceSpecsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceSpecs',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceSpecs(request: DescribeInstanceSpecsRequest): DescribeInstanceSpecsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSpecsWithOptions(request, runtime);
}

model DescribeInstanceStatisticsRequest {
  instanceIds?: string(name='InstanceIds'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeInstanceStatisticsResponseBody = {
  instanceStatistics?: [ 
    {
      defenseCountUsage?: int32(name='DefenseCountUsage'),
      domainUsage?: int32(name='DomainUsage'),
      instanceId?: string(name='InstanceId'),
      portUsage?: int32(name='PortUsage'),
      siteUsage?: int32(name='SiteUsage'),
    }
  ](name='InstanceStatistics'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceStatisticsResponseBody(name='body'),
}

async function describeInstanceStatisticsWithOptions(request: DescribeInstanceStatisticsRequest, runtime: Util.RuntimeOptions): DescribeInstanceStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceStatistics',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceStatistics(request: DescribeInstanceStatisticsRequest): DescribeInstanceStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceStatisticsWithOptions(request, runtime);
}

model DescribeInstancesRequest {
  edition?: int32(name='Edition'),
  enabled?: int32(name='Enabled'),
  expireEndTime?: long(name='ExpireEndTime'),
  expireStartTime?: long(name='ExpireStartTime'),
  instanceIds?: string(name='InstanceIds'),
  ip?: string(name='Ip'),
  pageNo?: string(name='PageNo'),
  pageSize?: string(name='PageSize'),
  remark?: string(name='Remark'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
  status?: [ int32 ](name='Status'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeInstancesResponseBody = {
  instances?: [ 
    {
      debtStatus?: int32(name='DebtStatus'),
      edition?: int32(name='Edition'),
      enabled?: int32(name='Enabled'),
      expireTime?: long(name='ExpireTime'),
      gmtCreate?: long(name='GmtCreate'),
      instanceId?: string(name='InstanceId'),
      remark?: string(name='Remark'),
      status?: int32(name='Status'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstancesWithOptions(request: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.edition)) {
    query['Edition'] = request.edition;
  }
  if (!Util.isUnset(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.expireEndTime)) {
    query['ExpireEndTime'] = request.expireEndTime;
  }
  if (!Util.isUnset(request.expireStartTime)) {
    query['ExpireStartTime'] = request.expireStartTime;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstances',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesWithOptions(request, runtime);
}

model DescribeIpTrafficRequest {
  eip?: string(name='Eip'),
  endTime?: long(name='EndTime'),
  interval?: int32(name='Interval'),
  port?: int32(name='Port'),
  queryProtocol?: string(name='QueryProtocol'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
  startTime?: long(name='StartTime'),
}

model DescribeIpTrafficResponseBody = {
  avgInBps?: long(name='AvgInBps'),
  avgOutBps?: long(name='AvgOutBps'),
  ipTrafficPoints?: [ 
    {
      actConns?: int32(name='ActConns'),
      cps?: int32(name='Cps'),
      inactConns?: int32(name='InactConns'),
      maxInbps?: long(name='MaxInbps'),
      maxOutbps?: long(name='MaxOutbps'),
      time?: long(name='Time'),
    }
  ](name='IpTrafficPoints'),
  maxInBps?: long(name='MaxInBps'),
  maxOutBps?: long(name='MaxOutBps'),
  requestId?: string(name='RequestId'),
}

model DescribeIpTrafficResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIpTrafficResponseBody(name='body'),
}

async function describeIpTrafficWithOptions(request: DescribeIpTrafficRequest, runtime: Util.RuntimeOptions): DescribeIpTrafficResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eip)) {
    query['Eip'] = request.eip;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.queryProtocol)) {
    query['QueryProtocol'] = request.queryProtocol;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIpTraffic',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIpTraffic(request: DescribeIpTrafficRequest): DescribeIpTrafficResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpTrafficWithOptions(request, runtime);
}

model DescribeLayer4RuleAttributesRequest {
  listeners?: string(name='Listeners'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeLayer4RuleAttributesResponseBody = {
  listeners?: [ 
    {
      config?: {
        cc?: {
          sblack?: [ 
            {
              cnt?: int32(name='Cnt'),
              during?: int32(name='During'),
              expires?: int32(name='Expires'),
              type?: int32(name='Type'),
            }
          ](name='Sblack'),
        }(name='Cc'),
        nodataConn?: string(name='NodataConn'),
        payloadLen?: {
          max?: int32(name='Max'),
          min?: int32(name='Min'),
        }(name='PayloadLen'),
        persistenceTimeout?: int32(name='PersistenceTimeout'),
        sla?: {
          cps?: int32(name='Cps'),
          cpsEnable?: int32(name='CpsEnable'),
          maxconn?: int32(name='Maxconn'),
          maxconnEnable?: int32(name='MaxconnEnable'),
        }(name='Sla'),
        slimit?: {
          bps?: long(name='Bps'),
          cps?: int32(name='Cps'),
          cpsEnable?: int32(name='CpsEnable'),
          cpsMode?: int32(name='CpsMode'),
          maxconn?: int32(name='Maxconn'),
          maxconnEnable?: int32(name='MaxconnEnable'),
          pps?: long(name='Pps'),
        }(name='Slimit'),
        synproxy?: string(name='Synproxy'),
      }(name='Config'),
      frontendPort?: int32(name='FrontendPort'),
      instanceId?: string(name='InstanceId'),
      protocol?: string(name='Protocol'),
    }
  ](name='Listeners'),
  requestId?: string(name='RequestId'),
}

model DescribeLayer4RuleAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLayer4RuleAttributesResponseBody(name='body'),
}

async function describeLayer4RuleAttributesWithOptions(request: DescribeLayer4RuleAttributesRequest, runtime: Util.RuntimeOptions): DescribeLayer4RuleAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.listeners)) {
    query['Listeners'] = request.listeners;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLayer4RuleAttributes',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLayer4RuleAttributes(request: DescribeLayer4RuleAttributesRequest): DescribeLayer4RuleAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLayer4RuleAttributesWithOptions(request, runtime);
}

model DescribeLayer4RulesRequest {
  forwardProtocol?: string(name='ForwardProtocol'),
  frontendPort?: int32(name='FrontendPort'),
  instanceId?: string(name='InstanceId'),
  offset?: int32(name='Offset'),
  pageSize?: string(name='PageSize'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeLayer4RulesResponseBody = {
  listeners?: [ 
    {
      backendPort?: int32(name='BackendPort'),
      bakMode?: int32(name='BakMode'),
      currentIndex?: int32(name='CurrentIndex'),
      eip?: string(name='Eip'),
      frontendPort?: int32(name='FrontendPort'),
      instanceId?: string(name='InstanceId'),
      isAutoCreate?: boolean(name='IsAutoCreate'),
      protocol?: string(name='Protocol'),
      realServers?: [ string ](name='RealServers'),
      remark?: string(name='Remark'),
    }
  ](name='Listeners'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeLayer4RulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLayer4RulesResponseBody(name='body'),
}

async function describeLayer4RulesWithOptions(request: DescribeLayer4RulesRequest, runtime: Util.RuntimeOptions): DescribeLayer4RulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.forwardProtocol)) {
    query['ForwardProtocol'] = request.forwardProtocol;
  }
  if (!Util.isUnset(request.frontendPort)) {
    query['FrontendPort'] = request.frontendPort;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.offset)) {
    query['Offset'] = request.offset;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLayer4Rules',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLayer4Rules(request: DescribeLayer4RulesRequest): DescribeLayer4RulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLayer4RulesWithOptions(request, runtime);
}

model DescribeLayer7CCRulesRequest {
  domain?: string(name='Domain'),
  offset?: int32(name='Offset'),
  pageSize?: string(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeLayer7CCRulesResponseBody = {
  layer7CCRules?: [ 
    {
      act?: string(name='Act'),
      count?: int32(name='Count'),
      interval?: int32(name='Interval'),
      mode?: string(name='Mode'),
      name?: string(name='Name'),
      ttl?: int32(name='Ttl'),
      uri?: string(name='Uri'),
    }
  ](name='Layer7CCRules'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeLayer7CCRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLayer7CCRulesResponseBody(name='body'),
}

async function describeLayer7CCRulesWithOptions(request: DescribeLayer7CCRulesRequest, runtime: Util.RuntimeOptions): DescribeLayer7CCRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.offset)) {
    query['Offset'] = request.offset;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLayer7CCRules',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLayer7CCRules(request: DescribeLayer7CCRulesRequest): DescribeLayer7CCRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLayer7CCRulesWithOptions(request, runtime);
}

model DescribeLogStoreExistStatusRequest {
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeLogStoreExistStatusResponseBody = {
  existStatus?: boolean(name='ExistStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeLogStoreExistStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogStoreExistStatusResponseBody(name='body'),
}

async function describeLogStoreExistStatusWithOptions(request: DescribeLogStoreExistStatusRequest, runtime: Util.RuntimeOptions): DescribeLogStoreExistStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogStoreExistStatus',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogStoreExistStatus(request: DescribeLogStoreExistStatusRequest): DescribeLogStoreExistStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogStoreExistStatusWithOptions(request, runtime);
}

model DescribeOpEntitiesRequest {
  endTime?: long(name='EndTime'),
  entityObject?: string(name='EntityObject'),
  entityType?: int32(name='EntityType'),
  opAction?: int32(name='OpAction'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
  startTime?: long(name='StartTime'),
}

model DescribeOpEntitiesResponseBody = {
  opEntities?: [ 
    {
      entityObject?: string(name='EntityObject'),
      entityType?: int32(name='EntityType'),
      gmtCreate?: long(name='GmtCreate'),
      opAccount?: string(name='OpAccount'),
      opAction?: int32(name='OpAction'),
      opDesc?: string(name='OpDesc'),
    }
  ](name='OpEntities'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeOpEntitiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOpEntitiesResponseBody(name='body'),
}

async function describeOpEntitiesWithOptions(request: DescribeOpEntitiesRequest, runtime: Util.RuntimeOptions): DescribeOpEntitiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.entityObject)) {
    query['EntityObject'] = request.entityObject;
  }
  if (!Util.isUnset(request.entityType)) {
    query['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.opAction)) {
    query['OpAction'] = request.opAction;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOpEntities',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOpEntities(request: DescribeOpEntitiesRequest): DescribeOpEntitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOpEntitiesWithOptions(request, runtime);
}

model DescribeSimpleDomainsRequest {
  instanceIds?: [ string ](name='InstanceIds'),
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeSimpleDomainsResponseBody = {
  domainList?: [ string ](name='DomainList'),
  requestId?: string(name='RequestId'),
}

model DescribeSimpleDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSimpleDomainsResponseBody(name='body'),
}

async function describeSimpleDomainsWithOptions(request: DescribeSimpleDomainsRequest, runtime: Util.RuntimeOptions): DescribeSimpleDomainsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSimpleDomains',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSimpleDomains(request: DescribeSimpleDomainsRequest): DescribeSimpleDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSimpleDomainsWithOptions(request, runtime);
}

model DescribeSlsAuthStatusRequest {
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeSlsAuthStatusResponseBody = {
  requestId?: string(name='RequestId'),
  slsAuthStatus?: boolean(name='SlsAuthStatus'),
}

model DescribeSlsAuthStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSlsAuthStatusResponseBody(name='body'),
}

async function describeSlsAuthStatusWithOptions(request: DescribeSlsAuthStatusRequest, runtime: Util.RuntimeOptions): DescribeSlsAuthStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlsAuthStatus',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSlsAuthStatus(request: DescribeSlsAuthStatusRequest): DescribeSlsAuthStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlsAuthStatusWithOptions(request, runtime);
}

model DescribeSlsEmptyCountRequest {
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeSlsEmptyCountResponseBody = {
  availableCount?: int32(name='AvailableCount'),
  requestId?: string(name='RequestId'),
}

model DescribeSlsEmptyCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSlsEmptyCountResponseBody(name='body'),
}

async function describeSlsEmptyCountWithOptions(request: DescribeSlsEmptyCountRequest, runtime: Util.RuntimeOptions): DescribeSlsEmptyCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlsEmptyCount',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSlsEmptyCount(request: DescribeSlsEmptyCountRequest): DescribeSlsEmptyCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlsEmptyCountWithOptions(request, runtime);
}

model DescribeSlsLogstoreInfoRequest {
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeSlsLogstoreInfoResponseBody = {
  logStore?: string(name='LogStore'),
  project?: string(name='Project'),
  quota?: long(name='Quota'),
  requestId?: string(name='RequestId'),
  ttl?: int32(name='Ttl'),
  used?: long(name='Used'),
}

model DescribeSlsLogstoreInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSlsLogstoreInfoResponseBody(name='body'),
}

async function describeSlsLogstoreInfoWithOptions(request: DescribeSlsLogstoreInfoRequest, runtime: Util.RuntimeOptions): DescribeSlsLogstoreInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlsLogstoreInfo',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSlsLogstoreInfo(request: DescribeSlsLogstoreInfoRequest): DescribeSlsLogstoreInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlsLogstoreInfoWithOptions(request, runtime);
}

model DescribeSlsOpenStatusRequest {
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeSlsOpenStatusResponseBody = {
  requestId?: string(name='RequestId'),
  slsOpenStatus?: boolean(name='SlsOpenStatus'),
}

model DescribeSlsOpenStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSlsOpenStatusResponseBody(name='body'),
}

async function describeSlsOpenStatusWithOptions(request: DescribeSlsOpenStatusRequest, runtime: Util.RuntimeOptions): DescribeSlsOpenStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlsOpenStatus',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSlsOpenStatus(request: DescribeSlsOpenStatusRequest): DescribeSlsOpenStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlsOpenStatusWithOptions(request, runtime);
}

model DescribleCertListRequest {
  domain?: string(name='Domain'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribleCertListResponseBody = {
  certList?: [ 
    {
      common?: string(name='Common'),
      domainRelated?: boolean(name='DomainRelated'),
      endDate?: string(name='EndDate'),
      id?: int32(name='Id'),
      issuer?: string(name='Issuer'),
      name?: string(name='Name'),
      startDate?: string(name='StartDate'),
    }
  ](name='CertList'),
  requestId?: string(name='RequestId'),
}

model DescribleCertListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribleCertListResponseBody(name='body'),
}

async function describleCertListWithOptions(request: DescribleCertListRequest, runtime: Util.RuntimeOptions): DescribleCertListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribleCertList',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describleCertList(request: DescribleCertListRequest): DescribleCertListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describleCertListWithOptions(request, runtime);
}

model DescribleLayer7InstanceRelationsRequest {
  domainList?: [ string ](name='DomainList'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribleLayer7InstanceRelationsResponseBody = {
  layer7InstanceRelations?: [ 
    {
      domain?: string(name='Domain'),
      instanceDetails?: [ 
        {
          eipList?: [ string ](name='EipList'),
          functionVersion?: string(name='FunctionVersion'),
          instanceId?: string(name='InstanceId'),
          ipMode?: string(name='IpMode'),
          ipVersion?: string(name='IpVersion'),
        }
      ](name='InstanceDetails'),
    }
  ](name='Layer7InstanceRelations'),
  requestId?: string(name='RequestId'),
}

model DescribleLayer7InstanceRelationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribleLayer7InstanceRelationsResponseBody(name='body'),
}

async function describleLayer7InstanceRelationsWithOptions(request: DescribleLayer7InstanceRelationsRequest, runtime: Util.RuntimeOptions): DescribleLayer7InstanceRelationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainList)) {
    query['DomainList'] = request.domainList;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribleLayer7InstanceRelations',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describleLayer7InstanceRelations(request: DescribleLayer7InstanceRelationsRequest): DescribleLayer7InstanceRelationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describleLayer7InstanceRelationsWithOptions(request, runtime);
}

model DisableLayer7CCRequest {
  domain?: string(name='Domain'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model DisableLayer7CCResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableLayer7CCResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableLayer7CCResponseBody(name='body'),
}

async function disableLayer7CCWithOptions(request: DisableLayer7CCRequest, runtime: Util.RuntimeOptions): DisableLayer7CCResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableLayer7CC',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableLayer7CC(request: DisableLayer7CCRequest): DisableLayer7CCResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableLayer7CCWithOptions(request, runtime);
}

model DisableLayer7CCRuleRequest {
  domain?: string(name='Domain'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model DisableLayer7CCRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableLayer7CCRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableLayer7CCRuleResponseBody(name='body'),
}

async function disableLayer7CCRuleWithOptions(request: DisableLayer7CCRuleRequest, runtime: Util.RuntimeOptions): DisableLayer7CCRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableLayer7CCRule',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableLayer7CCRule(request: DisableLayer7CCRuleRequest): DisableLayer7CCRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableLayer7CCRuleWithOptions(request, runtime);
}

model EmptySlsLogstoreRequest {
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model EmptySlsLogstoreResponseBody = {
  requestId?: string(name='RequestId'),
}

model EmptySlsLogstoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EmptySlsLogstoreResponseBody(name='body'),
}

async function emptySlsLogstoreWithOptions(request: EmptySlsLogstoreRequest, runtime: Util.RuntimeOptions): EmptySlsLogstoreResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EmptySlsLogstore',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function emptySlsLogstore(request: EmptySlsLogstoreRequest): EmptySlsLogstoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return emptySlsLogstoreWithOptions(request, runtime);
}

model EnableLayer7CCRequest {
  domain?: string(name='Domain'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model EnableLayer7CCResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableLayer7CCResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableLayer7CCResponseBody(name='body'),
}

async function enableLayer7CCWithOptions(request: EnableLayer7CCRequest, runtime: Util.RuntimeOptions): EnableLayer7CCResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableLayer7CC',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableLayer7CC(request: EnableLayer7CCRequest): EnableLayer7CCResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableLayer7CCWithOptions(request, runtime);
}

model EnableLayer7CCRuleRequest {
  domain?: string(name='Domain'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model EnableLayer7CCRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableLayer7CCRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableLayer7CCRuleResponseBody(name='body'),
}

async function enableLayer7CCRuleWithOptions(request: EnableLayer7CCRuleRequest, runtime: Util.RuntimeOptions): EnableLayer7CCRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableLayer7CCRule',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableLayer7CCRule(request: EnableLayer7CCRuleRequest): EnableLayer7CCRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableLayer7CCRuleWithOptions(request, runtime);
}

model ListAsyncTaskRequest {
  lang?: string(name='Lang'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model ListAsyncTaskResponseBody = {
  asyncTasks?: [ 
    {
      endTime?: long(name='EndTime'),
      startTime?: long(name='StartTime'),
      taskId?: long(name='TaskId'),
      taskParams?: string(name='TaskParams'),
      taskResult?: string(name='TaskResult'),
      taskStatus?: int32(name='TaskStatus'),
      taskType?: int32(name='TaskType'),
    }
  ](name='AsyncTasks'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model ListAsyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAsyncTaskResponseBody(name='body'),
}

async function listAsyncTaskWithOptions(request: ListAsyncTaskRequest, runtime: Util.RuntimeOptions): ListAsyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAsyncTask',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAsyncTask(request: ListAsyncTaskRequest): ListAsyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAsyncTaskWithOptions(request, runtime);
}

model ListLayer7CustomPortsRequest {
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model ListLayer7CustomPortsResponseBody = {
  layer7CustomPorts?: [ 
    {
      flag?: string(name='Flag'),
      proxyPorts?: [ string ](name='ProxyPorts'),
      proxyType?: string(name='ProxyType'),
    }
  ](name='Layer7CustomPorts'),
  requestId?: string(name='RequestId'),
}

model ListLayer7CustomPortsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLayer7CustomPortsResponseBody(name='body'),
}

async function listLayer7CustomPortsWithOptions(request: ListLayer7CustomPortsRequest, runtime: Util.RuntimeOptions): ListLayer7CustomPortsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLayer7CustomPorts',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLayer7CustomPorts(request: ListLayer7CustomPortsRequest): ListLayer7CustomPortsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLayer7CustomPortsWithOptions(request, runtime);
}

model ListTagKeysRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceType?: string(name='ResourceType'),
}

model ListTagKeysResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  tagKeys?: [ 
    {
      tagCount?: int32(name='TagCount'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagKeys'),
  totalCount?: int32(name='TotalCount'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeysWithOptions(request: ListTagKeysRequest, runtime: Util.RuntimeOptions): ListTagKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagKeys',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagKeysWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListValueAddedRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model ListValueAddedResponseBody = {
  requestId?: string(name='RequestId'),
  valueAddedList?: [ 
    {
      expireTime?: long(name='ExpireTime'),
      gmtCreate?: long(name='GmtCreate'),
      instanceId?: string(name='InstanceId'),
      logSize?: long(name='LogSize'),
      status?: int32(name='Status'),
    }
  ](name='ValueAddedList'),
}

model ListValueAddedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListValueAddedResponseBody(name='body'),
}

async function listValueAddedWithOptions(request: ListValueAddedRequest, runtime: Util.RuntimeOptions): ListValueAddedResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListValueAdded',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listValueAdded(request: ListValueAddedRequest): ListValueAddedResponse {
  var runtime = new Util.RuntimeOptions{};
  return listValueAddedWithOptions(request, runtime);
}

model ModifyElasticBandWidthRequest {
  elasticBandwidth?: int32(name='ElasticBandwidth'),
  instanceId?: string(name='InstanceId'),
  sourceIp?: string(name='SourceIp'),
}

model ModifyElasticBandWidthResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyElasticBandWidthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyElasticBandWidthResponseBody(name='body'),
}

async function modifyElasticBandWidthWithOptions(request: ModifyElasticBandWidthRequest, runtime: Util.RuntimeOptions): ModifyElasticBandWidthResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.elasticBandwidth)) {
    query['ElasticBandwidth'] = request.elasticBandwidth;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyElasticBandWidth',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyElasticBandWidth(request: ModifyElasticBandWidthRequest): ModifyElasticBandWidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyElasticBandWidthWithOptions(request, runtime);
}

model ModifyFullLogTtlRequest {
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
  ttl?: int32(name='Ttl'),
}

model ModifyFullLogTtlResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyFullLogTtlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyFullLogTtlResponseBody(name='body'),
}

async function modifyFullLogTtlWithOptions(request: ModifyFullLogTtlRequest, runtime: Util.RuntimeOptions): ModifyFullLogTtlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.ttl)) {
    query['Ttl'] = request.ttl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyFullLogTtl',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyFullLogTtl(request: ModifyFullLogTtlRequest): ModifyFullLogTtlResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyFullLogTtlWithOptions(request, runtime);
}

model ModifyInstanceRemarkRequest {
  instanceId?: string(name='InstanceId'),
  remark?: string(name='Remark'),
  sourceIp?: string(name='SourceIp'),
}

model ModifyInstanceRemarkResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceRemarkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceRemarkResponseBody(name='body'),
}

async function modifyInstanceRemarkWithOptions(request: ModifyInstanceRemarkRequest, runtime: Util.RuntimeOptions): ModifyInstanceRemarkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceRemark',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstanceRemark(request: ModifyInstanceRemarkRequest): ModifyInstanceRemarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceRemarkWithOptions(request, runtime);
}

model OpenDomainSlsConfigRequest {
  domain?: string(name='Domain'),
  lang?: string(name='Lang'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceIp?: string(name='SourceIp'),
}

model OpenDomainSlsConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model OpenDomainSlsConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenDomainSlsConfigResponseBody(name='body'),
}

async function openDomainSlsConfigWithOptions(request: OpenDomainSlsConfigRequest, runtime: Util.RuntimeOptions): OpenDomainSlsConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenDomainSlsConfig',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openDomainSlsConfig(request: OpenDomainSlsConfigRequest): OpenDomainSlsConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return openDomainSlsConfigWithOptions(request, runtime);
}

model ReleaseInstanceRequest {
  instanceId?: string(name='InstanceId'),
  sourceIp?: string(name='SourceIp'),
}

model ReleaseInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseInstanceResponseBody(name='body'),
}

async function releaseInstanceWithOptions(request: ReleaseInstanceRequest, runtime: Util.RuntimeOptions): ReleaseInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseInstance',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstanceWithOptions(request, runtime);
}

model ReleaseValueAddedRequest {
  instanceId?: string(name='InstanceId'),
  sourceIp?: string(name='SourceIp'),
}

model ReleaseValueAddedResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseValueAddedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseValueAddedResponseBody(name='body'),
}

async function releaseValueAddedWithOptions(request: ReleaseValueAddedRequest, runtime: Util.RuntimeOptions): ReleaseValueAddedResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseValueAdded',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseValueAdded(request: ReleaseValueAddedRequest): ReleaseValueAddedResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseValueAddedWithOptions(request, runtime);
}

model TagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2017-12-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

