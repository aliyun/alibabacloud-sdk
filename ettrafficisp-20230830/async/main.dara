/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ettrafficIsp';
  @version = '2023-08-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AkDisableRequest {
  accessKeyId?: string(name='accessKeyId', position='Body'),
  accessKeyName?: string(name='accessKeyName', example='akName', position='Body'),
  permissions?: [ string ](name='permissions', position='Body'),
}

model AkDisableResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='The specified region of cn-zhengzhou-jva is not authorized.'),
  requestId?: string(name='requestId', example='ECF1C255-DA3D-52E5-BBE5-4F0F86793CBA'),
}

model AkDisableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AkDisableResponseBody(name='body'),
}

async function akDisable(request: AkDisableRequest): AkDisableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AkDisable', 'POST', '/console/ak/disable', 'json', false, 'json', request);
}

model AkEnableRequest {
  accessKeyId?: string(name='accessKeyId', position='Body'),
  accessKeyName?: string(name='accessKeyName', example='akName', position='Body'),
  permissions?: [ string ](name='permissions', position='Body'),
}

model AkEnableResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='succeed in handling request'),
  requestId?: string(name='requestId', example='BBDB95BE-4CE7-599B-B306-4D5CBB073BF2'),
}

model AkEnableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AkEnableResponseBody(name='body'),
}

async function akEnable(request: AkEnableRequest): AkEnableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AkEnable', 'POST', '/console/ak/enable', 'json', false, 'json', request);
}

model AkGenerateRequest {
  accessKeyName?: string(name='accessKeyName', example='AKName', position='Body'),
  permissions?: [ string ](name='permissions', position='Body'),
  userId?: long(name='userId', example='userId', position='Body'),
}

model AkGenerateResponseBody = {
  code?: string(name='code', example='200'),
  data?: {
    accessKeyId?: string(name='accessKeyId', description='Access Key ID', example='bmqFUwnIDteQcXLoPTk4CsE3'),
    accessKeyName?: string(name='accessKeyName'),
    accessKeySecret?: string(name='accessKeySecret', example='xxxx'),
    userId?: string(name='userId'),
  }(name='data'),
  message?: string(name='message', example='noPermission'),
  requestId?: string(name='requestId', example='429FFF64-261A-5039-A375-253780D7F536'),
}

model AkGenerateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AkGenerateResponseBody(name='body'),
}

async function akGenerate(request: AkGenerateRequest): AkGenerateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AkGenerate', 'POST', '/console/ak/generate', 'json', false, 'json', request);
}

model AkListPageRequest {
  page?: int32(name='page', example='3', position='Query'),
  size?: int32(name='size', example='20', position='Query'),
  start?: int32(name='start', example='50', position='Query'),
}

model AkListPageResponseBody = {
  code?: string(name='code', example='200'),
  data?: {
    count?: int32(name='count', example='300'),
    currentPage?: int32(name='currentPage', example='1'),
    dataList?: [ 
      {
        accessKeyId?: string(name='accessKeyId', example='LuQGonyPCRxv793AE6N0rTza'),
        accessKeyName?: string(name='accessKeyName', example='AKName'),
        accessKeySecret?: string(name='accessKeySecret', example='xxx'),
        active?: int32(name='active', example='0'),
        gmtCreate?: string(name='gmtCreate', example='2023-09-21 17:55:21'),
        gmtModify?: string(name='gmtModify', example='2023-09-21 17:55:21'),
        lastCallTime?: string(name='lastCallTime', example='2023-09-21 17:55:21'),
        permissions?: [ 
          {
            authTime?: string(name='authTime', example='2023-09-21 17:55:21'),
            description?: string(name='description'),
            group?: string(name='group', example='module'),
            permissionCode?: string(name='permissionCode', example='eta'),
            permissionName?: string(name='permissionName'),
          }
        ](name='permissions'),
      }
    ](name='dataList'),
    totalPage?: int32(name='totalPage', example='32'),
  }(name='data'),
  message?: string(name='message', example='Sorry, there have been some accidents, please contact us'),
  requestId?: string(name='requestId', example='0065DB42-1564-5805-9732-FF681A27AEAB'),
}

model AkListPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AkListPageResponseBody(name='body'),
}

async function akListPage(request: AkListPageRequest): AkListPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AkListPage', 'GET', '/console/ak/listPage', 'json', false, 'json', request);
}

model AkUpdateRequest {
  accessKeyId?: string(name='accessKeyId', position='Body'),
  accessKeyName?: string(name='accessKeyName', example='AKname', position='Body'),
  permissions?: [ string ](name='permissions', position='Body'),
}

model AkUpdateResponseBody = {
  code?: string(name='code', example='200'),
  message?: string(name='message', example='502 Bad Gateway'),
  requestId?: string(name='requestId', example='3C57ACC1-D644-5A57-9F6D-DD98F2ABFF07'),
}

model AkUpdateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AkUpdateResponseBody(name='body'),
}

async function akUpdate(request: AkUpdateRequest): AkUpdateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AkUpdate', 'POST', '/console/ak/update', 'json', false, 'json', request);
}

model DimGroupRequest {
}

model DimGroupResponseBody = {
  code?: string(name='code', example='200'),
  data?: any(name='data', example='success'),
  message?: string(name='message', example='noPermission'),
  requestId?: string(name='requestId', example='0065DB42-1564-5805-9732-FF681A27AEAB'),
}

model DimGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DimGroupResponseBody(name='body'),
}

async function dimGroup(request: DimGroupRequest): DimGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DimGroup', 'GET', '/console/dim/group', 'json', false, 'json', request);
}

