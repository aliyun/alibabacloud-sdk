/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'foasconsole';
  @version = '2021-10-28';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ConvertHybridInstanceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='sc_flinkserverless_public_cn-7e22ae5sess', position='Query'),
  region: string(name='Region', description='This parameter is required.', example='cn-shenzhen', position='Query'),
  resourceSpec: {
    cpu: int32(name='Cpu', description='This parameter is required.', example='10'),
    memoryGB: int32(name='MemoryGB', description='This parameter is required.', example='40GB'),
  }(name='ResourceSpec', description='This parameter is required.', shrink='json', position='Query'),
}

model ConvertHybridInstanceResponseBody = {
  errCode?: string(name='ErrCode', example='000000'),
  orderInfo?: {
    elasticInstanceId?: string(name='ElasticInstanceId'),
    instanceId?: string(name='InstanceId', example='f-cn-zvp2q0zik06'),
    orderId?: long(name='OrderId', example='210406354694567'),
  }(name='OrderInfo'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model ConvertHybridInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConvertHybridInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConvertHybridInstance  ConvertHybridInstanceRequest
  * @return ConvertHybridInstanceResponse
 */
async function convertHybridInstance(request: ConvertHybridInstanceRequest): ConvertHybridInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConvertHybridInstance', 'POST', '/', 'json', false, 'json', request);
}

model ConvertInstanceRequest {
  duration: int32(name='Duration', description='This parameter is required.', example='1', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='f-cn-wwo36qj4g06', position='Body'),
  isAutoRenew: boolean(name='IsAutoRenew', description='This parameter is required.', example='true', position='Body'),
  namespaceResourceSpecs: [ 
    {
      namespace: string(name='Namespace', description='This parameter is required.', example='ns-1'),
      resourceSpec: {
        cpu: int32(name='Cpu', description='This parameter is required.', example='1'),
        memoryGB: int32(name='MemoryGB', description='This parameter is required.', example='4'),
      }(name='ResourceSpec', description='This parameter is required.'),
    }
  ](name='NamespaceResourceSpecs', description='This parameter is required.', shrink='json', position='Body'),
  pricingCycle: string(name='PricingCycle', description='This parameter is required.', example='Month', position='Body'),
  region: string(name='Region', description='This parameter is required.', example='cn-beijing', position='Body'),
}

model ConvertInstanceResponseBody = {
  orderId?: long(name='OrderId', example='211473228320700'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model ConvertInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConvertInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConvertInstance  ConvertInstanceRequest
  * @return ConvertInstanceResponse
 */
async function convertInstance(request: ConvertInstanceRequest): ConvertInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConvertInstance', 'POST', '/', 'json', true, 'form', request);
}

model ConvertPrepayInstanceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='f-cn-wwo36qj4g06', position='Body'),
  region: string(name='Region', description='This parameter is required.', example='cn-beijing', position='Body'),
}

model ConvertPrepayInstanceResponseBody = {
  orderId?: long(name='OrderId', example='210406354690749'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model ConvertPrepayInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConvertPrepayInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConvertPrepayInstance  ConvertPrepayInstanceRequest
  * @return ConvertPrepayInstanceResponse
 */
async function convertPrepayInstance(request: ConvertPrepayInstanceRequest): ConvertPrepayInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConvertPrepayInstance', 'POST', '/', 'json', true, 'form', request);
}

model CreateInstanceRequest {
  architectureType?: string(name='ArchitectureType', position='Body'),
  autoRenew?: boolean(name='AutoRenew', example='true', position='Body'),
  chargeType: string(name='ChargeType', description='This parameter is required.', example='PRE', position='Body'),
  duration?: int32(name='Duration', example='1', position='Body'),
  extra?: string(name='Extra', position='Body'),
  ha?: boolean(name='Ha', position='Body'),
  haResourceSpec?: {
    cpu?: int32(name='Cpu'),
    memoryGB?: int32(name='MemoryGB'),
  }(name='HaResourceSpec', shrink='json', position='Body'),
  haVSwitchIds?: [ string ](name='HaVSwitchIds', shrink='json', position='Body'),
  instanceName: string(name='InstanceName', description='This parameter is required.', example='rtc-e2e-test-pre', position='Body'),
  monitorType?: string(name='MonitorType', position='Body'),
  pricingCycle?: string(name='PricingCycle', example='Month', position='Body'),
  promotionCode?: string(name='PromotionCode', example='500043499350689', position='Body'),
  region: string(name='Region', description='This parameter is required.', example='cn-beijing', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', position='Body'),
  resourceSpec?: {
    cpu?: int32(name='Cpu', example='30'),
    memoryGB?: int32(name='MemoryGB', example='120'),
  }(name='ResourceSpec', shrink='json', position='Body'),
  storage: {
    fullyManaged?: boolean(name='FullyManaged'),
    oss?: {
      bucket?: string(name='Bucket', example='oss-flink-cn-shanghai-260343971602724445'),
    }(name='Oss'),
  }(name='Storage', description='This parameter is required.', shrink='json', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', shrink='json', position='Body'),
  usePromotionCode?: boolean(name='UsePromotionCode', position='Body'),
  vSwitchIds: [ string ](name='VSwitchIds', description='This parameter is required.', shrink='json', position='Body'),
  vpcId: string(name='VpcId', description='This parameter is required.', example='vpc-2ze9xoh8qyt1rnxfmfcdi', position='Body'),
}

model CreateInstanceResponseBody = {
  orderInfo?: {
    instanceId?: string(name='InstanceId', example='f-cn-zvp2q0zik06'),
    orderId?: long(name='OrderId', example='210406354694567'),
    storageInstanceId?: string(name='StorageInstanceId'),
    storageOrderId?: long(name='StorageOrderId'),
  }(name='OrderInfo'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateInstance  CreateInstanceRequest
  * @return CreateInstanceResponse
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', true, 'form', request);
}

model CreateNamespaceRequest {
  ha?: boolean(name='Ha', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='f-cn-wwo36qj4g06', position='Body'),
  namespace: string(name='Namespace', description='This parameter is required.', example='di-593440390152545', position='Body'),
  region: string(name='Region', description='This parameter is required.', example='cn-shenzhen', position='Body'),
  resourceSpec?: {
    cpu?: int32(name='Cpu', example='30'),
    memoryGB?: int32(name='MemoryGB', example='120'),
  }(name='ResourceSpec', shrink='json', position='Body'),
}

model CreateNamespaceResponseBody = {
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='是否成功'),
}

model CreateNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNamespaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateNamespace  CreateNamespaceRequest
  * @return CreateNamespaceResponse
 */
async function createNamespace(request: CreateNamespaceRequest): CreateNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNamespace', 'POST', '/', 'json', true, 'form', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='f-cn-wwo36qj4g06', position='Body'),
  region: string(name='Region', description='This parameter is required.', example='cn-beijing', position='Body'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='True'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteInstance  DeleteInstanceRequest
  * @return DeleteInstanceResponse
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', true, 'form', request);
}

model DeleteNamespaceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='f-cn-wwo36qj4g06', position='Body'),
  namespace: string(name='Namespace', description='This parameter is required.', example='di-593439443804417', position='Body'),
  region: string(name='Region', description='This parameter is required.', example='cn-beijing', position='Body'),
}

model DeleteNamespaceResponseBody = {
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='是否成功'),
}

model DeleteNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNamespaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteNamespace  DeleteNamespaceRequest
  * @return DeleteNamespaceResponse
 */
async function deleteNamespace(request: DeleteNamespaceRequest): DeleteNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNamespace', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstancesRequest {
  architectureType?: string(name='ArchitectureType', position='Query'),
  chargeType?: string(name='ChargeType', example='PRE', position='Query'),
  instanceId?: string(name='InstanceId', example='f-cn-wwo36qj4g06', position='Query'),
  pageIndex?: int32(name='PageIndex', example='2', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  region: string(name='Region', description='This parameter is required.', example='cn-shenzhen', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', example='test'),
      value?: string(name='Value', example='ys'),
    }
  ](name='Tags', shrink='json', position='Query'),
}

model DescribeInstancesResponseBody = {
  instances?: [ 
    {
      ansm?: boolean(name='Ansm'),
      architectureType?: string(name='ArchitectureType'),
      askClusterId?: string(name='AskClusterId'),
      chargeType?: string(name='ChargeType', example='PRE'),
      clusterState?: {
        clusterId?: string(name='ClusterId'),
        clusterStage?: {
          clusterId?: string(name='ClusterId'),
          currentStage?: int32(name='CurrentStage'),
          message?: string(name='Message'),
          status?: string(name='Status'),
          totalStageWithWeight?: [ 
            {
              stepIndex?: int32(name='StepIndex'),
              stepName?: string(name='StepName'),
              weight?: int32(name='Weight'),
            }
          ](name='TotalStageWithWeight'),
        }(name='ClusterStage'),
        createTimeout?: boolean(name='CreateTimeout'),
        status?: string(name='Status'),
        subStatus?: string(name='SubStatus'),
        url?: string(name='Url'),
        userSlbDto?: {
          existSlb?: boolean(name='ExistSlb'),
          slbId?: string(name='SlbId'),
          slbIp?: string(name='SlbIp'),
          slbStatus?: string(name='SlbStatus'),
          userSlbListeners?: [ 
            {
              listenersStatus?: string(name='ListenersStatus'),
              port?: string(name='Port'),
            }
          ](name='UserSlbListeners'),
        }(name='UserSlbDto'),
        vpcCidr?: string(name='VpcCidr'),
      }(name='ClusterState'),
      clusterStatus?: string(name='ClusterStatus', example='RUNNING'),
      clusterUsedResources?: {
        clusterId?: string(name='ClusterId'),
        elasticUsedCpu?: float(name='ElasticUsedCpu'),
        elasticUsedMemory?: float(name='ElasticUsedMemory'),
        elasticUsedResource?: float(name='ElasticUsedResource'),
        guaranteedUsedCpu?: float(name='GuaranteedUsedCpu'),
        guaranteedUsedMemory?: float(name='GuaranteedUsedMemory'),
        guaranteedUsedResource?: float(name='GuaranteedUsedResource'),
        ha?: boolean(name='Ha'),
        haUsedCpu?: float(name='HaUsedCpu'),
        haUsedMemory?: float(name='HaUsedMemory'),
        haUsedResource?: float(name='HaUsedResource'),
        usedCpu?: float(name='UsedCpu'),
        usedMemory?: float(name='UsedMemory'),
        usedResource?: float(name='UsedResource'),
      }(name='ClusterUsedResources'),
      clusterUsedStorage?: {
        clusterId?: string(name='ClusterId'),
        usedStorage?: float(name='UsedStorage'),
      }(name='ClusterUsedStorage'),
      elastic?: boolean(name='Elastic'),
      elasticOrderState?: string(name='ElasticOrderState'),
      elasticResourceSpec?: {
        cpu?: int32(name='Cpu'),
        memoryGB?: int32(name='MemoryGB'),
      }(name='ElasticResourceSpec'),
      ha?: boolean(name='Ha'),
      haResourceSpec?: {
        cpu?: int32(name='Cpu'),
        memoryGB?: int32(name='MemoryGB'),
      }(name='HaResourceSpec'),
      haVSwitchIds?: [ string ](name='HaVSwitchIds'),
      haVSwitchInfo?: [ 
        {
          availableIpAddressCount?: long(name='AvailableIpAddressCount'),
          description?: string(name='Description'),
          regionId?: string(name='RegionId'),
          vSwitchCidr?: string(name='VSwitchCidr'),
          vSwitchId?: string(name='VSwitchId'),
          vSwitchName?: string(name='VSwitchName'),
          vpcId?: string(name='VpcId'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='HaVSwitchInfo'),
      haZoneId?: string(name='HaZoneId'),
      hostAliases: [ 
        {
          hostNames: [ string ](name='HostNames', description='This parameter is required.'),
          ip: string(name='Ip', description='This parameter is required.'),
        }
      ](name='HostAliases', description='This parameter is required.'),
      instanceId?: string(name='InstanceId', example='f-cn-zvp2q0zik06'),
      instanceName?: string(name='InstanceName', example='vvp1'),
      monitorType?: string(name='MonitorType'),
      orderState?: string(name='OrderState', example='NORMAL'),
      ossInfo?: {
        accessId?: string(name='AccessId'),
        accessKey?: string(name='AccessKey'),
        bucket?: string(name='Bucket'),
        bucketVersioningStatus?: string(name='BucketVersioningStatus'),
        endpoint?: string(name='Endpoint'),
      }(name='OssInfo'),
      region?: string(name='Region', example='cn-beijing'),
      resourceCreateTime?: long(name='ResourceCreateTime', example='1629879567394'),
      resourceExpiredTime?: long(name='ResourceExpiredTime', example='1637337600000'),
      resourceGroupId?: string(name='ResourceGroupId'),
      resourceId?: string(name='ResourceId', example='b3690a1655da47'),
      resourceSpec?: {
        cpu?: int32(name='Cpu', example='10'),
        memoryGB?: int32(name='MemoryGB', example='40'),
      }(name='ResourceSpec'),
      storage?: {
        fullyManaged?: boolean(name='FullyManaged'),
        orderState?: string(name='OrderState'),
        oss?: {
          bucket?: string(name='Bucket', example='oss_flink'),
        }(name='Oss'),
      }(name='Storage'),
      tags?: [ 
        {
          key?: string(name='Key', example='flink'),
          value?: string(name='Value', example='test'),
        }
      ](name='Tags'),
      uid?: string(name='Uid', example='1838996687368452'),
      vSwitchIds?: [ string ](name='VSwitchIds'),
      vSwitchInfo?: [ 
        {
          availableIpAddressCount?: string(name='AvailableIpAddressCount'),
          description?: string(name='Description'),
          regionId?: string(name='RegionId'),
          vSwitchCidr?: string(name='VSwitchCidr'),
          vSwitchId?: string(name='VSwitchId'),
          vSwitchName?: string(name='VSwitchName'),
          vpcId?: string(name='VpcId'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='VSwitchInfo'),
      vpcId?: string(name='VpcId', example='vpc-2ze9*******nxfmfcdi'),
      vpcInfo?: {
        cidrBlock?: string(name='CidrBlock'),
        description?: string(name='Description'),
        regionId?: string(name='RegionId'),
        status?: string(name='Status'),
        vpcId?: string(name='VpcId'),
        vpcName?: string(name='VpcName'),
      }(name='VpcInfo'),
      zoneId?: string(name='ZoneId', example='cn-beijing-g'),
    }
  ](name='Instances'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='C8DF2A5B-6FBA-5651-A3D4-960F36640E6B'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='15'),
  totalPage?: int32(name='TotalPage', example='2'),
}

model DescribeInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeInstances  DescribeInstancesRequest
  * @return DescribeInstancesResponse
 */
async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstances', 'GET', '/', 'json', false, 'json', request);
}

model DescribeNamespacesRequest {
  ha?: boolean(name='Ha', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='f-cn-wwo36qj4g06', position='Query'),
  namespace?: string(name='Namespace', example='di-590843445844225', position='Query'),
  pageIndex?: int32(name='PageIndex', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  region: string(name='Region', description='This parameter is required.', example='cn-beijing', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', example='FLink'),
      value?: string(name='Value', example='test'),
    }
  ](name='Tags', shrink='json', position='Query'),
}

model DescribeNamespacesResponseBody = {
  namespaces?: [ 
    {
      elasticResourceSpec?: {
        cpu?: int32(name='Cpu'),
        memoryGB?: int32(name='MemoryGB'),
      }(name='ElasticResourceSpec'),
      gmtCreate?: long(name='GmtCreate', example='1629879567394'),
      gmtModified?: long(name='GmtModified', example='1629879567394'),
      guaranteedResourceSpec?: {
        cpu?: int32(name='Cpu'),
        memoryGB?: int32(name='MemoryGB'),
      }(name='GuaranteedResourceSpec'),
      ha?: boolean(name='Ha'),
      namespace?: string(name='Namespace', example='ns-1'),
      resourceSpec?: {
        cpu?: int32(name='Cpu', example='10'),
        memoryGB?: int32(name='MemoryGB', example='40'),
      }(name='ResourceSpec'),
      resourceUsed?: {
        cpu?: float(name='Cpu', example='2'),
        cu?: float(name='Cu'),
        memoryGB?: float(name='MemoryGB', example='4'),
      }(name='ResourceUsed'),
      status?: string(name='Status', example='SUCCESS'),
      tags?: [ 
        {
          key?: string(name='Key', example='flink'),
          value?: string(name='Value', example='test'),
        }
      ](name='Tags'),
    }
  ](name='Namespaces'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='5'),
  totalPage?: int32(name='TotalPage', example='2'),
}

model DescribeNamespacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNamespacesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeNamespaces  DescribeNamespacesRequest
  * @return DescribeNamespacesResponse
 */
async function describeNamespaces(request: DescribeNamespacesRequest): DescribeNamespacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNamespaces', 'GET', '/', 'json', false, 'json', request);
}

model DescribeSupportedRegionsRequest {
}

model DescribeSupportedRegionsResponseBody = {
  pageIndex?: int32(name='PageIndex', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regions?: [ 
    {
      description?: string(name='Description'),
      extra?: string(name='Extra'),
      region?: string(name='Region', example='cn-beijing'),
      regionName?: string(name='RegionName', example='华北2 (北京)'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='B21DC47E-8928-199A-9F32-36D45E4693B4'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='10'),
  totalPage?: int32(name='TotalPage', example='2'),
}

model DescribeSupportedRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSupportedRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSupportedRegions  DescribeSupportedRegionsRequest
  * @return DescribeSupportedRegionsResponse
 */
async function describeSupportedRegions(request: DescribeSupportedRegionsRequest): DescribeSupportedRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSupportedRegions', 'GET', '/', 'json', false, 'json', request);
}

model DescribeSupportedZonesRequest {
  architectureType?: string(name='ArchitectureType', position='Query'),
  region?: string(name='Region', example='cn-beijing', position='Query'),
}

model DescribeSupportedZonesResponseBody = {
  pageIndex?: int32(name='PageIndex', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='23A9C718-DDAB-1696-B025-18FBC830F7C5'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='8'),
  totalPage?: int32(name='TotalPage', example='1'),
  zoneIds?: [ string ](name='ZoneIds'),
}

model DescribeSupportedZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSupportedZonesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSupportedZones  DescribeSupportedZonesRequest
  * @return DescribeSupportedZonesResponse
 */
async function describeSupportedZones(request: DescribeSupportedZonesRequest): DescribeSupportedZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSupportedZones', 'GET', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', example='27AE00', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-beijing', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='vvpinstance', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='test'),
      value?: string(name='Value', example='tag'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='27AE00'),
  requestId?: string(name='RequestId', example='0E5D17CE-BD83-5DC9-8CD2-3C40C2F7A135'),
  success?: boolean(name='Success', example='true'),
  tagReponseId?: string(name='TagReponseId', example='87AE00'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', example='f-cn-tyts'),
      resourceType?: string(name='ResourceType', example='vvpinstance'),
      tagKey?: string(name='TagKey', example='test'),
      tagValue?: string(name='TagValue', example='tag'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyElasticResourceSpecRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='sc_flinkserverless_public_cn-7e22ae5sess', position='Body'),
  region: string(name='Region', description='This parameter is required.', example='cn-beijing', position='Body'),
  resourceSpec: {
    cpu: int32(name='Cpu', description='This parameter is required.', example='10'),
    memoryGB: int32(name='MemoryGB', description='This parameter is required.', example='40'),
  }(name='ResourceSpec', description='This parameter is required.', shrink='json', position='Body'),
}

model ModifyElasticResourceSpecResponseBody = {
  orderId?: long(name='OrderId', example='211473228320700'),
  requestId?: string(name='RequestId', example='B21DC47E-8928-199A-9F32-36D45E4693B4'),
  success?: boolean(name='Success', example='true'),
}

model ModifyElasticResourceSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyElasticResourceSpecResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyElasticResourceSpec  ModifyElasticResourceSpecRequest
  * @return ModifyElasticResourceSpecResponse
 */
async function modifyElasticResourceSpec(request: ModifyElasticResourceSpecRequest): ModifyElasticResourceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyElasticResourceSpec', 'POST', '/', 'json', true, 'form', request);
}

model ModifyInstanceVswitchRequest {
  haVSwitchIds?: [ string ](name='HaVSwitchIds', shrink='json', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='sc_flinkserverless_public_cn-7e22ae****', position='Body'),
  vSwitchIds?: [ string ](name='VSwitchIds', shrink='json', position='Body'),
}

model ModifyInstanceVswitchResponseBody = {
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426****'),
  result?: string(name='Result', example='F2C5B6A8-DD04-51F5-AAD5-BA2FE6FD****'),
  success?: boolean(name='Success', example='true'),
}

model ModifyInstanceVswitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceVswitchResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyInstanceVswitch  ModifyInstanceVswitchRequest
  * @return ModifyInstanceVswitchResponse
 */
async function modifyInstanceVswitch(request: ModifyInstanceVswitchRequest): ModifyInstanceVswitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceVswitch', 'POST', '/', 'json', true, 'form', request);
}

model ModifyNamespaceSpecV2Request {
  elasticResourceSpec?: {
    cpu: int32(name='Cpu', description='This parameter is required.', example='6'),
    memoryGB: int32(name='MemoryGB', description='This parameter is required.', example='52'),
  }(name='ElasticResourceSpec', shrink='json', position='Body'),
  guaranteedResourceSpec?: {
    cpu: int32(name='Cpu', description='This parameter is required.', example='10'),
    memoryGB: int32(name='MemoryGB', description='This parameter is required.', example='40'),
  }(name='GuaranteedResourceSpec', shrink='json', position='Body'),
  ha: boolean(name='Ha', description='This parameter is required.', example='false', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='f-cn-wwo36qj4g06', position='Body'),
  namespace: string(name='Namespace', description='This parameter is required.', example='di-593439443804417', position='Body'),
  region: string(name='Region', description='This parameter is required.', example='cn-beijing', position='Body'),
}

model ModifyNamespaceSpecV2ResponseBody = {
  requestId?: string(name='RequestId', example='23A9C718-DDAB-1696-B025-18FBC830F7C5'),
  success?: boolean(name='Success', example='true'),
}

model ModifyNamespaceSpecV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNamespaceSpecV2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyNamespaceSpecV2  ModifyNamespaceSpecV2Request
  * @return ModifyNamespaceSpecV2Response
 */
async function modifyNamespaceSpecV2(request: ModifyNamespaceSpecV2Request): ModifyNamespaceSpecV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNamespaceSpecV2', 'POST', '/', 'json', true, 'form', request);
}

model ModifyPrepayInstanceSpecRequest {
  ha?: boolean(name='Ha', position='Body'),
  haResourceSpec?: {
    cpu?: int32(name='Cpu'),
    memoryGB?: int32(name='MemoryGB'),
  }(name='HaResourceSpec', shrink='json', position='Body'),
  haVSwitchIds?: [ string ](name='HaVSwitchIds', shrink='json', position='Body'),
  haZoneId?: string(name='HaZoneId', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='f-cn-wwo36qj4g06', position='Body'),
  region: string(name='Region', description='This parameter is required.', example='cn-beijing', position='Body'),
  resourceSpec: {
    cpu: int32(name='Cpu', description='This parameter is required.', example='1'),
    memoryGB: int32(name='MemoryGB', description='This parameter is required.', example='4'),
  }(name='ResourceSpec', description='This parameter is required.', shrink='json', position='Body'),
}

model ModifyPrepayInstanceSpecResponseBody = {
  orderId?: long(name='OrderId', example='210406354690749'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model ModifyPrepayInstanceSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPrepayInstanceSpecResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI ModifyPrepayInstanceSpec is deprecated, please use foasconsole::2021-10-28::ModifyInstanceSpec instead.  * @param request  the request parameters of ModifyPrepayInstanceSpec  ModifyPrepayInstanceSpecRequest
  * @return ModifyPrepayInstanceSpecResponse
 */
// Deprecated
async function modifyPrepayInstanceSpec(request: ModifyPrepayInstanceSpecRequest): ModifyPrepayInstanceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPrepayInstanceSpec', 'POST', '/', 'json', true, 'form', request);
}

model ModifyPrepayNamespaceSpecRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='f-cn-wwo36qj4g06', position='Body'),
  namespace: string(name='Namespace', description='This parameter is required.', example='di-593440219799842', position='Body'),
  region: string(name='Region', description='This parameter is required.', example='cn-shenzhen', position='Body'),
  resourceSpec: {
    cpu: int32(name='Cpu', description='This parameter is required.', example='1'),
    memoryGB: int32(name='MemoryGB', description='This parameter is required.', example='4'),
  }(name='ResourceSpec', description='This parameter is required.', shrink='json', position='Body'),
}

model ModifyPrepayNamespaceSpecResponseBody = {
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model ModifyPrepayNamespaceSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPrepayNamespaceSpecResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI ModifyPrepayNamespaceSpec is deprecated, please use foasconsole::2021-10-28::ModifyNamespaceSpec instead.  * @param request  the request parameters of ModifyPrepayNamespaceSpec  ModifyPrepayNamespaceSpecRequest
  * @return ModifyPrepayNamespaceSpecResponse
 */
// Deprecated
async function modifyPrepayNamespaceSpec(request: ModifyPrepayNamespaceSpecRequest): ModifyPrepayNamespaceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPrepayNamespaceSpec', 'POST', '/', 'json', true, 'form', request);
}

model QueryConvertInstancePriceRequest {
  duration: int32(name='Duration', description='This parameter is required.', example='1', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='f-cn-wwo36qj4g06', position='Body'),
  isAutoRenew: boolean(name='IsAutoRenew', description='This parameter is required.', example='true', position='Body'),
  namespaceResourceSpecs: [ 
    {
      namespace: string(name='Namespace', description='This parameter is required.', example='lm-test-default'),
      resourceSpec: {
        cpu: int32(name='Cpu', description='This parameter is required.', example='6'),
        memoryGB: int32(name='MemoryGB', description='This parameter is required.', example='24'),
      }(name='ResourceSpec', description='This parameter is required.'),
    }
  ](name='NamespaceResourceSpecs', description='This parameter is required.', shrink='json', position='Body'),
  pricingCycle: string(name='PricingCycle', description='This parameter is required.', example='Month', position='Body'),
  region: string(name='Region', description='This parameter is required.', example='cn-beijing', position='Body'),
}

model QueryConvertInstancePriceResponseBody = {
  priceInfo?: {
    code?: string(name='Code', example='ORDER.INST_HAS_UNPAID_ORDER'),
    currency?: string(name='Currency', example='CNY'),
    depreciateInfo?: {
      cheapRate?: string(name='CheapRate'),
      cheapStandAmount?: string(name='CheapStandAmount'),
      isShow?: boolean(name='IsShow'),
      monthPrice?: string(name='MonthPrice'),
      originalStandAmount?: string(name='OriginalStandAmount'),
      startTime?: string(name='StartTime'),
    }(name='DepreciateInfo'),
    discountAmount?: float(name='DiscountAmount', example='655.2'),
    isContractActivity?: boolean(name='IsContractActivity'),
    message?: string(name='Message', example='存在未支付订单，请先支付或取消原有订单'),
    optionalPromotions?: [ 
      {
        promotionDesc?: string(name='PromotionDesc', example='￥1,391.5 优惠券 (有效期至 03/23/2022)'),
        promotionName?: string(name='PromotionName', example='￥1,391.5 优惠券'),
        promotionOptionNo?: string(name='PromotionOptionNo', example='500011220010099'),
        selected?: boolean(name='Selected', example='true'),
      }
    ](name='OptionalPromotions'),
    originalAmount?: float(name='OriginalAmount', example='4368'),
    rules?: [ 
      {
        description?: string(name='Description', example='买满1年，立享官网价格8.5折优惠。'),
        ruleId?: long(name='RuleId', example='587'),
      }
    ](name='Rules'),
    standDiscountPrice?: string(name='StandDiscountPrice'),
    standPrice?: string(name='StandPrice'),
    tradeAmount?: float(name='TradeAmount', example='3712.8'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model QueryConvertInstancePriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryConvertInstancePriceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryConvertInstancePrice  QueryConvertInstancePriceRequest
  * @return QueryConvertInstancePriceResponse
 */
async function queryConvertInstancePrice(request: QueryConvertInstancePriceRequest): QueryConvertInstancePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryConvertInstancePrice', 'POST', '/', 'json', true, 'form', request);
}

model QueryConvertPrepayInstancePriceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='f-cn-wwo36qj4g06', position='Body'),
  region: string(name='Region', description='This parameter is required.', example='cn-beijing', position='Body'),
}

model QueryConvertPrepayInstancePriceResponseBody = {
  priceInfo?: {
    code?: string(name='Code', example='ORDER.INST_HAS_UNPAID_ORDER'),
    currency?: string(name='Currency', example='CNY'),
    depreciateInfo?: {
      cheapRate?: string(name='CheapRate', example='20%'),
      cheapStandAmount?: string(name='CheapStandAmount', example='8000'),
      isShow?: boolean(name='IsShow', example='true'),
      monthPrice?: string(name='MonthPrice', example='4000'),
      originalStandAmount?: string(name='OriginalStandAmount', example='10000'),
      startTime?: string(name='StartTime', example='2023-03-31T16:00:00Z'),
    }(name='DepreciateInfo'),
    discountAmount?: float(name='DiscountAmount', example='655.2'),
    isContractActivity?: boolean(name='IsContractActivity', example='true'),
    message?: string(name='Message', example='存在未支付订单，请先支付或取消原有订单'),
    optionalPromotions?: [ 
      {
        promotionDesc?: string(name='PromotionDesc', example='￥1,391.5 优惠券 (有效期至 03/23/2022)'),
        promotionName?: string(name='PromotionName', example='￥1,391.5 优惠券'),
        promotionOptionNo?: string(name='PromotionOptionNo', example='500011220010099'),
        selected?: boolean(name='Selected', example='true'),
      }
    ](name='OptionalPromotions'),
    originalAmount?: float(name='OriginalAmount', example='4368'),
    rules?: [ 
      {
        description?: string(name='Description', example='买满1年，立享官网价格8.5折优惠。'),
        ruleId?: long(name='RuleId', example='587'),
      }
    ](name='Rules'),
    standDiscountPrice?: string(name='StandDiscountPrice', example='21321'),
    standPrice?: string(name='StandPrice', example='32432'),
    tradeAmount?: float(name='TradeAmount', example='3712.8'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model QueryConvertPrepayInstancePriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryConvertPrepayInstancePriceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryConvertPrepayInstancePrice  QueryConvertPrepayInstancePriceRequest
  * @return QueryConvertPrepayInstancePriceResponse
 */
async function queryConvertPrepayInstancePrice(request: QueryConvertPrepayInstancePriceRequest): QueryConvertPrepayInstancePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryConvertPrepayInstancePrice', 'POST', '/', 'json', true, 'form', request);
}

model QueryCreateInstancePriceRequest {
  architectureType?: string(name='ArchitectureType', position='Body'),
  autoRenew?: boolean(name='AutoRenew', example='true', position='Body'),
  chargeType: string(name='ChargeType', description='This parameter is required.', example='PRE', position='Body'),
  duration?: int32(name='Duration', example='1', position='Body'),
  extra?: string(name='Extra', position='Body'),
  ha?: boolean(name='Ha', position='Body'),
  haResourceSpec?: {
    cpu?: int32(name='Cpu'),
    memoryGB?: int32(name='MemoryGB'),
  }(name='HaResourceSpec', shrink='json', position='Body'),
  instanceName?: string(name='InstanceName', example='rtc-e2e-test-post', position='Body'),
  pricingCycle?: string(name='PricingCycle', example='Month', position='Body'),
  promotionCode?: string(name='PromotionCode', example='500041860100636', position='Body'),
  region: string(name='Region', description='This parameter is required.', example='cn-beijing', position='Body'),
  resourceSpec?: {
    cpu?: int32(name='Cpu', example='4'),
    memoryGB?: int32(name='MemoryGB', example='16'),
  }(name='ResourceSpec', shrink='json', position='Body'),
  storage?: {
    oss?: {
      bucket?: string(name='Bucket', example='quicktracing'),
    }(name='Oss'),
  }(name='Storage', shrink='json', position='Body'),
  usePromotionCode?: boolean(name='UsePromotionCode', position='Body'),
  vSwitchIds?: [ string ](name='VSwitchIds', shrink='json', position='Body'),
  vpcId?: string(name='VpcId', example='vpc-2ze9xoh8qyt1rnxfmfcdi', position='Body'),
}

model QueryCreateInstancePriceResponseBody = {
  priceInfo?: {
    code?: string(name='Code', example='ORDER.INST_HAS_UNPAID_ORDER'),
    currency?: string(name='Currency', example='CNY'),
    depreciateInfo?: {
      cheapRate?: string(name='CheapRate'),
      cheapStandAmount?: string(name='CheapStandAmount'),
      isShow?: boolean(name='IsShow'),
      monthPrice?: string(name='MonthPrice'),
      originalStandAmount?: string(name='OriginalStandAmount'),
      startTime?: string(name='StartTime'),
    }(name='DepreciateInfo'),
    discountAmount?: float(name='DiscountAmount', example='655.2'),
    isContractActivity?: boolean(name='IsContractActivity'),
    message?: string(name='Message', example='存在未支付订单，请先支付或取消原有订单'),
    optionalPromotions?: [ 
      {
        promotionDesc?: string(name='PromotionDesc', example='￥1,391.5 优惠券 (有效期至 03/23/2022)'),
        promotionName?: string(name='PromotionName', example='￥1,391.5 优惠券'),
        promotionOptionNo?: string(name='PromotionOptionNo', example='500011220010099'),
        selected?: boolean(name='Selected', example='true'),
      }
    ](name='OptionalPromotions'),
    originalAmount?: float(name='OriginalAmount', example='4368'),
    rules?: [ 
      {
        description?: string(name='Description', example='买满1年，立享官网价格8.5折优惠。'),
        ruleId?: long(name='RuleId', example='587'),
      }
    ](name='Rules'),
    standDiscountPrice?: string(name='StandDiscountPrice'),
    standPrice?: string(name='StandPrice'),
    tradeAmount?: float(name='TradeAmount', example='3712.8'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success'),
}

model QueryCreateInstancePriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCreateInstancePriceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCreateInstancePrice  QueryCreateInstancePriceRequest
  * @return QueryCreateInstancePriceResponse
 */
async function queryCreateInstancePrice(request: QueryCreateInstancePriceRequest): QueryCreateInstancePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCreateInstancePrice', 'POST', '/', 'json', true, 'form', request);
}

model QueryModifyInstancePriceRequest {
  ha?: boolean(name='Ha', position='Body'),
  haResourceSpec?: {
    cpu?: int32(name='Cpu'),
    memoryGB?: int32(name='MemoryGB'),
  }(name='HaResourceSpec', shrink='json', position='Body'),
  haVSwitchIds?: [ string ](name='HaVSwitchIds', shrink='json', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='f-cn-wwo36qj4g06', position='Body'),
  promotionCode?: string(name='PromotionCode', position='Body'),
  region: string(name='Region', description='This parameter is required.', example='cn-beijing', position='Body'),
  resourceSpec: {
    cpu: int32(name='Cpu', description='This parameter is required.', example='10'),
    memoryGB: int32(name='MemoryGB', description='This parameter is required.', example='40'),
  }(name='ResourceSpec', description='This parameter is required.', shrink='json', position='Body'),
  usePromotionCode?: boolean(name='UsePromotionCode', position='Body'),
}

model QueryModifyInstancePriceResponseBody = {
  priceInfo?: {
    code?: string(name='Code', example='ORDER.INST_HAS_UNPAID_ORDER'),
    currency?: string(name='Currency', example='CNY'),
    depreciateInfo?: {
      cheapRate?: string(name='CheapRate'),
      cheapStandAmount?: string(name='CheapStandAmount'),
      isShow?: boolean(name='IsShow'),
      monthPrice?: string(name='MonthPrice'),
      originalStandAmount?: string(name='OriginalStandAmount'),
      startTime?: string(name='StartTime'),
    }(name='DepreciateInfo'),
    discountAmount?: float(name='DiscountAmount', example='655.2'),
    isContractActivity?: boolean(name='IsContractActivity'),
    message?: string(name='Message', example='存在未支付订单，请先支付或取消原有订单'),
    optionalPromotions?: [ 
      {
        promotionDesc?: string(name='PromotionDesc', example='￥1,391.5 优惠券 (有效期至 03/23/2022)'),
        promotionName?: string(name='PromotionName', example='￥1,391.5 优惠券'),
        promotionOptionNo?: string(name='PromotionOptionNo', example='500011220010099'),
        selected?: boolean(name='Selected', example='true'),
      }
    ](name='OptionalPromotions'),
    originalAmount?: float(name='OriginalAmount', example='4368'),
    rules?: [ 
      {
        description?: string(name='Description', example='买满1年，立享官网价格8.5折优惠。'),
        ruleId?: long(name='RuleId', example='587'),
      }
    ](name='Rules'),
    standDiscountPrice?: string(name='StandDiscountPrice'),
    standPrice?: string(name='StandPrice'),
    tradeAmount?: float(name='TradeAmount', example='3712.8'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model QueryModifyInstancePriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryModifyInstancePriceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryModifyInstancePrice  QueryModifyInstancePriceRequest
  * @return QueryModifyInstancePriceResponse
 */
async function queryModifyInstancePrice(request: QueryModifyInstancePriceRequest): QueryModifyInstancePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryModifyInstancePrice', 'POST', '/', 'json', true, 'form', request);
}

model QueryRenewInstancePriceRequest {
  duration: int32(name='Duration', description='This parameter is required.', example='1', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='sc_flinkserverless_public_cn-7e22ae5sess', position='Body'),
  pricingCycle: string(name='PricingCycle', description='This parameter is required.', example='Month', position='Body'),
  region: string(name='Region', description='This parameter is required.', example='cn-beijing', position='Body'),
}

model QueryRenewInstancePriceResponseBody = {
  priceInfo?: {
    code?: string(name='Code', example='ORDER.INST_HAS_UNPAID_ORDER'),
    currency?: string(name='Currency', example='CNY'),
    depreciateInfo?: {
      cheapRate?: string(name='CheapRate'),
      cheapStandAmount?: string(name='CheapStandAmount'),
      isShow?: boolean(name='IsShow'),
      monthPrice?: string(name='MonthPrice'),
      originalStandAmount?: string(name='OriginalStandAmount'),
      startTime?: string(name='StartTime'),
    }(name='DepreciateInfo'),
    discountAmount?: float(name='DiscountAmount', example='655.2'),
    isContractActivity?: boolean(name='IsContractActivity'),
    message?: string(name='Message', example='存在未支付订单，请先支付或取消原有订单'),
    optionalPromotions?: [ 
      {
        promotionDesc?: string(name='PromotionDesc', example='￥1,391.5 优惠券 (有效期至 03/23/2022)'),
        promotionName?: string(name='PromotionName', example='￥1,391.5 优惠券'),
        promotionOptionNo?: string(name='PromotionOptionNo', example='500011220010099'),
        selected?: boolean(name='Selected', example='true'),
      }
    ](name='OptionalPromotions'),
    originalAmount?: float(name='OriginalAmount', example='4368'),
    rules?: [ 
      {
        description?: string(name='Description', example='买满1年，立享官网价格8.5折优惠。'),
        ruleId?: long(name='RuleId', example='587'),
      }
    ](name='Rules'),
    standDiscountPrice?: string(name='StandDiscountPrice'),
    standPrice?: string(name='StandPrice'),
    tradeAmount?: float(name='TradeAmount', example='3712.8'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model QueryRenewInstancePriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRenewInstancePriceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryRenewInstancePrice  QueryRenewInstancePriceRequest
  * @return QueryRenewInstancePriceResponse
 */
async function queryRenewInstancePrice(request: QueryRenewInstancePriceRequest): QueryRenewInstancePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRenewInstancePrice', 'POST', '/', 'json', true, 'form', request);
}

model RenewInstanceRequest {
  duration: int32(name='Duration', description='This parameter is required.', example='1', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='sc_flinkserverless_public_cn-7e22ae5sess', position='Body'),
  pricingCycle: string(name='PricingCycle', description='This parameter is required.', example='Month', position='Body'),
  region: string(name='Region', description='This parameter is required.', example='cn-beijing', position='Body'),
}

model RenewInstanceResponseBody = {
  orderId?: long(name='OrderId', description='orderId', example='210406354690749'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model RenewInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenewInstance  RenewInstanceRequest
  * @return RenewInstanceResponse
 */
async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewInstance', 'POST', '/', 'json', true, 'form', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-beijing', position='Query'),
  resourceId: [ string ](name='ResourceId', description='This parameter is required.', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='vvpinstance', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', example='test'),
      value?: string(name='Value', example='tag'),
    }
  ](name='Tag', description='This parameter is required.', position='Query'),
}

model TagResourcesResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
  tagResponseId?: string(name='TagResponseId', example='154FT'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TagResources  TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', example='false', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-beijing', position='Query'),
  resourceId: [ string ](name='ResourceId', description='This parameter is required.', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='vvpinstance', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='F59597FC-CD05-536D-B75B-6F45B8CC8539'),
  success?: boolean(name='Success', example='true'),
  tagResponseId?: string(name='TagResponseId', example='154FT'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UntagResources  UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

