/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('foasconsole', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ConvertInstanceRequest {
  duration?: int32(name='Duration'),
  instanceId?: string(name='InstanceId'),
  isAutoRenew?: boolean(name='IsAutoRenew'),
  namespaceResourceSpecs?: [ 
    {
      namespace?: string(name='Namespace'),
      resourceSpec?: {
        cpu?: int32(name='Cpu'),
        memoryGB?: int32(name='MemoryGB'),
      }(name='ResourceSpec'),
    }
  ](name='NamespaceResourceSpecs'),
  pricingCycle?: string(name='PricingCycle'),
  region?: string(name='Region'),
}

model ConvertInstanceShrinkRequest {
  duration?: int32(name='Duration'),
  instanceId?: string(name='InstanceId'),
  isAutoRenew?: boolean(name='IsAutoRenew'),
  namespaceResourceSpecsShrink?: string(name='NamespaceResourceSpecs'),
  pricingCycle?: string(name='PricingCycle'),
  region?: string(name='Region'),
}

model ConvertInstanceResponseBody = {
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ConvertInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConvertInstanceResponseBody(name='body'),
}

async function convertInstanceWithOptions(tmpReq: ConvertInstanceRequest, runtime: Util.RuntimeOptions): ConvertInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new ConvertInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.namespaceResourceSpecs)) {
    request.namespaceResourceSpecsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.namespaceResourceSpecs, 'NamespaceResourceSpecs', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.duration)) {
    body['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.isAutoRenew)) {
    body['IsAutoRenew'] = request.isAutoRenew;
  }
  if (!Util.isUnset(request.namespaceResourceSpecsShrink)) {
    body['NamespaceResourceSpecs'] = request.namespaceResourceSpecsShrink;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    body['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ConvertInstance',
    version = '2021-10-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function convertInstance(request: ConvertInstanceRequest): ConvertInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return convertInstanceWithOptions(request, runtime);
}

model CreateInstanceRequest {
  autoRenew?: boolean(name='AutoRenew'),
  chargeType?: string(name='ChargeType'),
  duration?: int32(name='Duration'),
  instanceName?: string(name='InstanceName'),
  pricingCycle?: string(name='PricingCycle'),
  promotionCode?: string(name='PromotionCode'),
  region?: string(name='Region'),
  resourceSpec?: {
    cpu?: int32(name='Cpu'),
    memoryGB?: int32(name='MemoryGB'),
  }(name='ResourceSpec'),
  storage?: {
    oss?: {
      bucket?: string(name='Bucket'),
    }(name='Oss'),
  }(name='Storage'),
  vSwitchIds?: [ string ](name='VSwitchIds'),
  vpcId?: string(name='VpcId'),
  zoneId?: string(name='ZoneId'),
}

model CreateInstanceShrinkRequest {
  autoRenew?: boolean(name='AutoRenew'),
  chargeType?: string(name='ChargeType'),
  duration?: int32(name='Duration'),
  instanceName?: string(name='InstanceName'),
  pricingCycle?: string(name='PricingCycle'),
  promotionCode?: string(name='PromotionCode'),
  region?: string(name='Region'),
  resourceSpecShrink?: string(name='ResourceSpec'),
  storageShrink?: string(name='Storage'),
  vSwitchIdsShrink?: string(name='VSwitchIds'),
  vpcId?: string(name='VpcId'),
  zoneId?: string(name='ZoneId'),
}

model CreateInstanceResponseBody = {
  orderInfo?: {
    instanceId?: string(name='InstanceId'),
    orderId?: long(name='OrderId'),
  }(name='OrderInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(tmpReq: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new CreateInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resourceSpec)) {
    request.resourceSpecShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceSpec, 'ResourceSpec', 'json');
  }
  if (!Util.isUnset(tmpReq.storage)) {
    request.storageShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.storage, 'Storage', 'json');
  }
  if (!Util.isUnset(tmpReq.vSwitchIds)) {
    request.vSwitchIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.vSwitchIds, 'VSwitchIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoRenew)) {
    body['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.chargeType)) {
    body['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.duration)) {
    body['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    body['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.promotionCode)) {
    body['PromotionCode'] = request.promotionCode;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.resourceSpecShrink)) {
    body['ResourceSpec'] = request.resourceSpecShrink;
  }
  if (!Util.isUnset(request.storageShrink)) {
    body['Storage'] = request.storageShrink;
  }
  if (!Util.isUnset(request.vSwitchIdsShrink)) {
    body['VSwitchIds'] = request.vSwitchIdsShrink;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    body['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2021-10-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model CreateNamespaceRequest {
  instanceId?: string(name='InstanceId'),
  namespace?: string(name='Namespace'),
  region?: string(name='Region'),
  resourceSpec?: {
    cpu?: int32(name='Cpu'),
    memoryGB?: int32(name='MemoryGB'),
  }(name='ResourceSpec'),
}

model CreateNamespaceShrinkRequest {
  instanceId?: string(name='InstanceId'),
  namespace?: string(name='Namespace'),
  region?: string(name='Region'),
  resourceSpecShrink?: string(name='ResourceSpec'),
}

model CreateNamespaceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNamespaceResponseBody(name='body'),
}

async function createNamespaceWithOptions(tmpReq: CreateNamespaceRequest, runtime: Util.RuntimeOptions): CreateNamespaceResponse {
  Util.validateModel(tmpReq);
  var request = new CreateNamespaceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resourceSpec)) {
    request.resourceSpecShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceSpec, 'ResourceSpec', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespace)) {
    body['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.resourceSpecShrink)) {
    body['ResourceSpec'] = request.resourceSpecShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateNamespace',
    version = '2021-10-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createNamespace(request: CreateNamespaceRequest): CreateNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNamespaceWithOptions(request, runtime);
}

model DeleteInstanceRequest {
  instanceId?: string(name='InstanceId'),
  region?: string(name='Region'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstance',
    version = '2021-10-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model DeleteNamespaceRequest {
  instanceId?: string(name='InstanceId'),
  namespace?: string(name='Namespace'),
  region?: string(name='Region'),
}

model DeleteNamespaceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNamespaceResponseBody(name='body'),
}

async function deleteNamespaceWithOptions(request: DeleteNamespaceRequest, runtime: Util.RuntimeOptions): DeleteNamespaceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespace)) {
    body['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNamespace',
    version = '2021-10-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteNamespace(request: DeleteNamespaceRequest): DeleteNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNamespaceWithOptions(request, runtime);
}

model DescribeInstancesRequest {
  chargeType?: string(name='ChargeType'),
  instanceId?: string(name='InstanceId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  region?: string(name='Region'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
}

model DescribeInstancesShrinkRequest {
  chargeType?: string(name='ChargeType'),
  instanceId?: string(name='InstanceId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  region?: string(name='Region'),
  tagsShrink?: string(name='Tags'),
}

model DescribeInstancesResponseBody = {
  instances?: [ 
    {
      chargeType?: string(name='ChargeType'),
      clusterStatus?: string(name='ClusterStatus'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      orderState?: string(name='OrderState'),
      region?: string(name='Region'),
      resourceCreateTime?: long(name='ResourceCreateTime'),
      resourceExpiredTime?: long(name='ResourceExpiredTime'),
      resourceId?: string(name='ResourceId'),
      resourceSpec?: {
        cpu?: int32(name='Cpu'),
        memoryGB?: int32(name='MemoryGB'),
      }(name='ResourceSpec'),
      storage?: {
        oss?: {
          bucket?: string(name='Bucket'),
        }(name='Oss'),
      }(name='Storage'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      uid?: string(name='Uid'),
      vSwitchIds?: [ string ](name='VSwitchIds'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Instances'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
  totalPage?: int32(name='TotalPage'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstancesWithOptions(tmpReq: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstances',
    version = '2021-10-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesWithOptions(request, runtime);
}

model DescribeNamespacesRequest {
  instanceId?: string(name='InstanceId'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  region?: string(name='Region'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
}

model DescribeNamespacesShrinkRequest {
  instanceId?: string(name='InstanceId'),
  namespace?: string(name='Namespace'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  region?: string(name='Region'),
  tagsShrink?: string(name='Tags'),
}

model DescribeNamespacesResponseBody = {
  namespaces?: [ 
    {
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      namespace?: string(name='Namespace'),
      resourceSpec?: {
        cpu?: int32(name='Cpu'),
        memoryGB?: int32(name='MemoryGB'),
      }(name='ResourceSpec'),
      resourceUsed?: {
        cpu?: float(name='Cpu'),
        memoryGB?: float(name='MemoryGB'),
      }(name='ResourceUsed'),
      status?: string(name='Status'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='Namespaces'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
  totalPage?: int32(name='TotalPage'),
}

model DescribeNamespacesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNamespacesResponseBody(name='body'),
}

async function describeNamespacesWithOptions(tmpReq: DescribeNamespacesRequest, runtime: Util.RuntimeOptions): DescribeNamespacesResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeNamespacesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNamespaces',
    version = '2021-10-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNamespaces(request: DescribeNamespacesRequest): DescribeNamespacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNamespacesWithOptions(request, runtime);
}

model DescribeSupportedRegionsResponseBody = {
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  regions?: [ 
    {
      region?: string(name='Region'),
      regionName?: string(name='RegionName'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
  totalPage?: int32(name='TotalPage'),
}

model DescribeSupportedRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSupportedRegionsResponseBody(name='body'),
}

async function describeSupportedRegionsWithOptions(runtime: Util.RuntimeOptions): DescribeSupportedRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeSupportedRegions',
    version = '2021-10-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSupportedRegions(): DescribeSupportedRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSupportedRegionsWithOptions(runtime);
}

model DescribeSupportedZonesRequest {
  region?: string(name='Region'),
}

model DescribeSupportedZonesResponseBody = {
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
  totalPage?: int32(name='TotalPage'),
  zoneIds?: [ string ](name='ZoneIds'),
}

model DescribeSupportedZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSupportedZonesResponseBody(name='body'),
}

async function describeSupportedZonesWithOptions(request: DescribeSupportedZonesRequest, runtime: Util.RuntimeOptions): DescribeSupportedZonesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSupportedZones',
    version = '2021-10-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSupportedZones(request: DescribeSupportedZonesRequest): DescribeSupportedZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSupportedZonesWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tagReponseId?: string(name='TagReponseId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2021-10-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyPrepayInstanceSpecRequest {
  instanceId?: string(name='InstanceId'),
  region?: string(name='Region'),
  resourceSpec?: {
    cpu?: int32(name='Cpu'),
    memoryGB?: int32(name='MemoryGB'),
  }(name='ResourceSpec'),
}

model ModifyPrepayInstanceSpecShrinkRequest {
  instanceId?: string(name='InstanceId'),
  region?: string(name='Region'),
  resourceSpecShrink?: string(name='ResourceSpec'),
}

model ModifyPrepayInstanceSpecResponseBody = {
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyPrepayInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPrepayInstanceSpecResponseBody(name='body'),
}

async function modifyPrepayInstanceSpecWithOptions(tmpReq: ModifyPrepayInstanceSpecRequest, runtime: Util.RuntimeOptions): ModifyPrepayInstanceSpecResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyPrepayInstanceSpecShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resourceSpec)) {
    request.resourceSpecShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceSpec, 'ResourceSpec', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.resourceSpecShrink)) {
    body['ResourceSpec'] = request.resourceSpecShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPrepayInstanceSpec',
    version = '2021-10-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyPrepayInstanceSpec(request: ModifyPrepayInstanceSpecRequest): ModifyPrepayInstanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPrepayInstanceSpecWithOptions(request, runtime);
}

model ModifyPrepayNamespaceSpecRequest {
  instanceId?: string(name='InstanceId'),
  namespace?: string(name='Namespace'),
  region?: string(name='Region'),
  resourceSpec?: {
    cpu?: int32(name='Cpu'),
    memoryGB?: int32(name='MemoryGB'),
  }(name='ResourceSpec'),
}

model ModifyPrepayNamespaceSpecShrinkRequest {
  instanceId?: string(name='InstanceId'),
  namespace?: string(name='Namespace'),
  region?: string(name='Region'),
  resourceSpecShrink?: string(name='ResourceSpec'),
}

model ModifyPrepayNamespaceSpecResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyPrepayNamespaceSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPrepayNamespaceSpecResponseBody(name='body'),
}

async function modifyPrepayNamespaceSpecWithOptions(tmpReq: ModifyPrepayNamespaceSpecRequest, runtime: Util.RuntimeOptions): ModifyPrepayNamespaceSpecResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyPrepayNamespaceSpecShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resourceSpec)) {
    request.resourceSpecShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceSpec, 'ResourceSpec', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespace)) {
    body['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.resourceSpecShrink)) {
    body['ResourceSpec'] = request.resourceSpecShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPrepayNamespaceSpec',
    version = '2021-10-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyPrepayNamespaceSpec(request: ModifyPrepayNamespaceSpecRequest): ModifyPrepayNamespaceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPrepayNamespaceSpecWithOptions(request, runtime);
}

model QueryConvertInstancePriceRequest {
  duration?: int32(name='Duration'),
  instanceId?: string(name='InstanceId'),
  isAutoRenew?: boolean(name='IsAutoRenew'),
  namespaceResourceSpecs?: [ 
    {
      namespace?: string(name='Namespace'),
      resourceSpec?: {
        cpu?: int32(name='Cpu'),
        memoryGB?: int32(name='MemoryGB'),
      }(name='ResourceSpec'),
    }
  ](name='NamespaceResourceSpecs'),
  pricingCycle?: string(name='PricingCycle'),
  region?: string(name='Region'),
}

model QueryConvertInstancePriceShrinkRequest {
  duration?: int32(name='Duration'),
  instanceId?: string(name='InstanceId'),
  isAutoRenew?: boolean(name='IsAutoRenew'),
  namespaceResourceSpecsShrink?: string(name='NamespaceResourceSpecs'),
  pricingCycle?: string(name='PricingCycle'),
  region?: string(name='Region'),
}

model QueryConvertInstancePriceResponseBody = {
  priceInfo?: {
    code?: string(name='Code'),
    currency?: string(name='Currency'),
    discountAmount?: float(name='DiscountAmount'),
    message?: string(name='Message'),
    optionalPromotions?: [ 
      {
        promotionDesc?: string(name='PromotionDesc'),
        promotionName?: string(name='PromotionName'),
        promotionOptionNo?: string(name='PromotionOptionNo'),
        selected?: boolean(name='Selected'),
      }
    ](name='OptionalPromotions'),
    originalAmount?: float(name='OriginalAmount'),
    rules?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId'),
      }
    ](name='Rules'),
    tradeAmount?: float(name='TradeAmount'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryConvertInstancePriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryConvertInstancePriceResponseBody(name='body'),
}

async function queryConvertInstancePriceWithOptions(tmpReq: QueryConvertInstancePriceRequest, runtime: Util.RuntimeOptions): QueryConvertInstancePriceResponse {
  Util.validateModel(tmpReq);
  var request = new QueryConvertInstancePriceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.namespaceResourceSpecs)) {
    request.namespaceResourceSpecsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.namespaceResourceSpecs, 'NamespaceResourceSpecs', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.duration)) {
    body['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.isAutoRenew)) {
    body['IsAutoRenew'] = request.isAutoRenew;
  }
  if (!Util.isUnset(request.namespaceResourceSpecsShrink)) {
    body['NamespaceResourceSpecs'] = request.namespaceResourceSpecsShrink;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    body['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryConvertInstancePrice',
    version = '2021-10-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryConvertInstancePrice(request: QueryConvertInstancePriceRequest): QueryConvertInstancePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryConvertInstancePriceWithOptions(request, runtime);
}

model QueryCreateInstancePriceRequest {
  autoRenew?: boolean(name='AutoRenew'),
  chargeType?: string(name='ChargeType'),
  duration?: int32(name='Duration'),
  instanceName?: string(name='InstanceName'),
  pricingCycle?: string(name='PricingCycle'),
  promotionCode?: string(name='PromotionCode'),
  region?: string(name='Region'),
  resourceSpec?: {
    cpu?: int32(name='Cpu'),
    memoryGB?: int32(name='MemoryGB'),
  }(name='ResourceSpec'),
  storage?: {
    oss?: {
      bucket?: string(name='Bucket'),
    }(name='Oss'),
  }(name='Storage'),
  vSwitchIds?: [ string ](name='VSwitchIds'),
  vpcId?: string(name='VpcId'),
  zoneId?: string(name='ZoneId'),
}

model QueryCreateInstancePriceShrinkRequest {
  autoRenew?: boolean(name='AutoRenew'),
  chargeType?: string(name='ChargeType'),
  duration?: int32(name='Duration'),
  instanceName?: string(name='InstanceName'),
  pricingCycle?: string(name='PricingCycle'),
  promotionCode?: string(name='PromotionCode'),
  region?: string(name='Region'),
  resourceSpecShrink?: string(name='ResourceSpec'),
  storageShrink?: string(name='Storage'),
  vSwitchIdsShrink?: string(name='VSwitchIds'),
  vpcId?: string(name='VpcId'),
  zoneId?: string(name='ZoneId'),
}

model QueryCreateInstancePriceResponseBody = {
  priceInfo?: {
    code?: string(name='Code'),
    currency?: string(name='Currency'),
    discountAmount?: float(name='DiscountAmount'),
    message?: string(name='Message'),
    optionalPromotions?: [ 
      {
        promotionDesc?: string(name='PromotionDesc'),
        promotionName?: string(name='PromotionName'),
        promotionOptionNo?: string(name='PromotionOptionNo'),
        selected?: boolean(name='Selected'),
      }
    ](name='OptionalPromotions'),
    originalAmount?: float(name='OriginalAmount'),
    rules?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId'),
      }
    ](name='Rules'),
    tradeAmount?: float(name='TradeAmount'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCreateInstancePriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCreateInstancePriceResponseBody(name='body'),
}

async function queryCreateInstancePriceWithOptions(tmpReq: QueryCreateInstancePriceRequest, runtime: Util.RuntimeOptions): QueryCreateInstancePriceResponse {
  Util.validateModel(tmpReq);
  var request = new QueryCreateInstancePriceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resourceSpec)) {
    request.resourceSpecShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceSpec, 'ResourceSpec', 'json');
  }
  if (!Util.isUnset(tmpReq.storage)) {
    request.storageShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.storage, 'Storage', 'json');
  }
  if (!Util.isUnset(tmpReq.vSwitchIds)) {
    request.vSwitchIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.vSwitchIds, 'VSwitchIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoRenew)) {
    body['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.chargeType)) {
    body['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.duration)) {
    body['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    body['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.promotionCode)) {
    body['PromotionCode'] = request.promotionCode;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.resourceSpecShrink)) {
    body['ResourceSpec'] = request.resourceSpecShrink;
  }
  if (!Util.isUnset(request.storageShrink)) {
    body['Storage'] = request.storageShrink;
  }
  if (!Util.isUnset(request.vSwitchIdsShrink)) {
    body['VSwitchIds'] = request.vSwitchIdsShrink;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    body['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryCreateInstancePrice',
    version = '2021-10-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCreateInstancePrice(request: QueryCreateInstancePriceRequest): QueryCreateInstancePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCreateInstancePriceWithOptions(request, runtime);
}

model QueryModifyInstancePriceRequest {
  instanceId?: string(name='InstanceId'),
  region?: string(name='Region'),
  resourceSpec?: {
    cpu?: int32(name='Cpu'),
    memoryGB?: int32(name='MemoryGB'),
  }(name='ResourceSpec'),
}

model QueryModifyInstancePriceShrinkRequest {
  instanceId?: string(name='InstanceId'),
  region?: string(name='Region'),
  resourceSpecShrink?: string(name='ResourceSpec'),
}

model QueryModifyInstancePriceResponseBody = {
  priceInfo?: {
    code?: string(name='Code'),
    currency?: string(name='Currency'),
    discountAmount?: float(name='DiscountAmount'),
    message?: string(name='Message'),
    optionalPromotions?: [ 
      {
        promotionDesc?: string(name='PromotionDesc'),
        promotionName?: string(name='PromotionName'),
        promotionOptionNo?: string(name='PromotionOptionNo'),
        selected?: boolean(name='Selected'),
      }
    ](name='OptionalPromotions'),
    originalAmount?: float(name='OriginalAmount'),
    rules?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId'),
      }
    ](name='Rules'),
    tradeAmount?: float(name='TradeAmount'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryModifyInstancePriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryModifyInstancePriceResponseBody(name='body'),
}

async function queryModifyInstancePriceWithOptions(tmpReq: QueryModifyInstancePriceRequest, runtime: Util.RuntimeOptions): QueryModifyInstancePriceResponse {
  Util.validateModel(tmpReq);
  var request = new QueryModifyInstancePriceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resourceSpec)) {
    request.resourceSpecShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceSpec, 'ResourceSpec', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.resourceSpecShrink)) {
    body['ResourceSpec'] = request.resourceSpecShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryModifyInstancePrice',
    version = '2021-10-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryModifyInstancePrice(request: QueryModifyInstancePriceRequest): QueryModifyInstancePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryModifyInstancePriceWithOptions(request, runtime);
}

model QueryRenewInstancePriceRequest {
  duration?: int32(name='Duration'),
  instanceId?: string(name='InstanceId'),
  pricingCycle?: string(name='PricingCycle'),
  region?: string(name='Region'),
}

model QueryRenewInstancePriceResponseBody = {
  priceInfo?: {
    code?: string(name='Code'),
    currency?: string(name='Currency'),
    discountAmount?: float(name='DiscountAmount'),
    message?: string(name='Message'),
    optionalPromotions?: [ 
      {
        promotionDesc?: string(name='PromotionDesc'),
        promotionName?: string(name='PromotionName'),
        promotionOptionNo?: string(name='PromotionOptionNo'),
        selected?: boolean(name='Selected'),
      }
    ](name='OptionalPromotions'),
    originalAmount?: float(name='OriginalAmount'),
    rules?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId'),
      }
    ](name='Rules'),
    tradeAmount?: float(name='TradeAmount'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRenewInstancePriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRenewInstancePriceResponseBody(name='body'),
}

async function queryRenewInstancePriceWithOptions(request: QueryRenewInstancePriceRequest, runtime: Util.RuntimeOptions): QueryRenewInstancePriceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.duration)) {
    body['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    body['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryRenewInstancePrice',
    version = '2021-10-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRenewInstancePrice(request: QueryRenewInstancePriceRequest): QueryRenewInstancePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRenewInstancePriceWithOptions(request, runtime);
}

model RenewInstanceRequest {
  duration?: int32(name='Duration'),
  instanceId?: string(name='InstanceId'),
  pricingCycle?: string(name='PricingCycle'),
  region?: string(name='Region'),
}

model RenewInstanceResponseBody = {
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstanceWithOptions(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.duration)) {
    body['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    body['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RenewInstance',
    version = '2021-10-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceWithOptions(request, runtime);
}

model TagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tagResponseId?: string(name='TagResponseId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2021-10-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All'),
  regionId?: string(name='RegionId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tagResponseId?: string(name='TagResponseId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2021-10-28',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

