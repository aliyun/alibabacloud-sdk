import OSS;
import OpenPlatform;
import RPCUtil;
import OSSUtil;
import Util;
import Credential;
import FileForm;

type @endpoint = string
type @regionId = string
type @protocol = string
type @userAgent = string
type @endpointType = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @openPlatformEndpoint = string
type @credential = Credential

model Config {
  accessKeyId?: string,
  accessKeySecret?: string,
  type?: string,
  securityToken?: string,
  endpoint: string,
  protocol?: string,
  regionId: string,
  userAgent?: string,
  readTimeout?: number,
  connectTimeout?: number,
  httpProxy?: string,
  httpsProxy?: string,
  noProxy?: string,
  socks5Proxy?: string,
  socks5NetWork?: string,
  maxIdleConns?: number,
  endpointType?: string,
  openPlatformEndpoint?: string,
}

init(config: Config){
  if (Util.isUnset(config)) {
    throw {
      name = "ParameterMissing",
      message = "'config' can not be unset"
    };
  }

  if (Util.empty(config.regionId)) {
    throw {
      name = "ParameterMissing",
      message = "'config.regionId' can not be empty"
    };
  }

  if (Util.empty(config.endpoint)) {
    throw {
      name = "ParameterMissing",
      message = "'config.endpoint' can not be empty"
    };
  }

  if (Util.empty(config.type)) {
    config.type = 'access_key';
  }
  var credentialConfig = new Credential.Config{
    accessKeyId =  config.accessKeyId,
    type = config.type,
    accessKeySecret =  config.accessKeySecret,
    securityToken = config.securityToken,
  };
  @credential = new Credential(credentialConfig);
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @regionId = config.regionId;
  @userAgent = config.userAgent;
  @readTimeout = config.readTimeout;
  @connectTimeout = config.connectTimeout;
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = config.maxIdleConns;
  @endpointType = config.endpointType;
  @openPlatformEndpoint = config.openPlatformEndpoint;
}

api _request(action: string, protocol: string, method: string, request: object, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = '/';
  var accessKeyId = getAccessKeyId();
  var accessKeySecret = getAccessKeySecret();
  __request.query = RPCUtil.query({
    Action = action,
    Format = 'json',
    RegionId = @regionId,
    Timestamp = RPCUtil.getTimestamp(),
    Version = '2019-12-30',
    SignatureMethod = 'HMAC-SHA1',
    SignatureVersion = '1.0',
    SignatureNonce = Util.getNonce(),
    AccessKeyId = accessKeyId,
    ...request,
  });
  __request.headers = {
    host = RPCUtil.getHost('imageaudit', @regionId, @endpoint),
    user-agent = getUserAgent(),
  };
  __request.query.Signature = RPCUtil.getSignature(__request, accessKeySecret);
} returns {
  var obj = Util.readAsJSON(__response.body);
  var body = Util.assertAsMap(obj);
  if (Util.is4xx(__response.statusCode) || Util.is5xx(__response.statusCode)) {
  throw {
      message = body.Message,
      data = body,
      code = body.Code,
    }
  }
  return body;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

model ScanTextRequest = {
  tasks: [
    {
      content: string(name='Content', description='content'),
    }
  ](name='Tasks', description='tasks'),
  labels: [
    {
      label: string(name='Label', description='label'),
    }
  ](name='Labels', description='labels'),
}

model ScanTextResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    elements: [
      {
        taskId: string(name='TaskId', description='taskId'),
        results: [
          {
            label: string(name='Label', description='label'),
            suggestion: string(name='Suggestion', description='suggestion'),
            rate: float(name='Rate', description='rate'),
            details: [
              {
                label: string(name='Label', description='label'),
                contexts: [
                  {
                    context: string(name='Context', description='context'),
                  }
                ](name='Contexts', description='contexts'),
              }
            ](name='Details', description='details'),
          }
        ](name='Results', description='results'),
      }
    ](name='Elements', description='elements'),
  }(name='Data', description='data'),
}

async function scanText(request: ScanTextRequest, runtime: Util.RuntimeOptions): ScanTextResponse {
  return _request('ScanText', 'HTTPS', 'POST', request, runtime);
}

model ScanImageRequest = {
  task: [
    {
      dataId?: string(name='DataId', description='dataId'),
      imageURL: string(name='ImageURL', description='imageUrl'),
      imageTimeMillisecond?: long(name='ImageTimeMillisecond', description='imageTime'),
      interval?: integer(name='Interval', description='interval'),
      maxFrames?: integer(name='MaxFrames', description='maxFrames'),
    }
  ](name='Task', description='tasks'),
  scene: [ string ](name='Scene', description='scenes'),
}

model ScanImageResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    results: [
      {
        dataId: string(name='DataId', description='dataId'),
        taskId: string(name='TaskId', description='taskId'),
        imageURL: string(name='ImageURL', description='imageUrl'),
        subResults: [
          {
            label: string(name='Label', description='label'),
            suggestion: string(name='Suggestion', description='suggestion'),
            rate: float(name='Rate', description='rate'),
            scene: string(name='Scene', description='scene'),
            frames: [
              {
                rate: float(name='Rate', description='Rate'),
                URL: string(name='URL', description='URL'),
              }
            ](name='Frames', description='frames'),
            hintWordsInfoList: [
              {
                context: string(name='Context', description='Context'),
              }
            ](name='HintWordsInfoList', description='hintWordsInfo'),
            programCodeDataList: [
              {
                x: float(name='X', description='x'),
                y: float(name='Y', description='y'),
                width: float(name='Width', description='width'),
                height: float(name='Height', description='height'),
              }
            ](name='ProgramCodeDataList', description='programCodeData'),
            logoDataList: [
              {
                type: string(name='Type', description='type'),
                name: string(name='Name', description='name'),
                x: float(name='X', description='x'),
                y: float(name='Y', description='y'),
                width: float(name='Width', description='Width'),
                height: float(name='Height', description='Height'),
              }
            ](name='LogoDataList', description='logoData'),
            sfaceDataList: [
              {
                x: float(name='X', description='x'),
                y: float(name='Y', description='y'),
                width: float(name='Width', description='width'),
                height: float(name='Height', description='heihght'),
                faces: [
                  {
                    name: string(name='Name', description='name'),
                    rate: float(name='Rate', description='rate'),
                    id: string(name='Id', description='id'),
                  }
                ](name='Faces', description='faces'),
              }
            ](name='SfaceDataList', description='sfaceData'),
          }
        ](name='SubResults', description='subResults'),
      }
    ](name='Results', description='result'),
  }(name='Data', description='data'),
}

async function scanImage(request: ScanImageRequest, runtime: Util.RuntimeOptions): ScanImageResponse {
  return _request('ScanImage', 'HTTPS', 'POST', request, runtime);
}

function getUserAgent(): string {
  var userAgent = Util.getUserAgent(@userAgent);
  return userAgent;
}

async function getAccessKeyId(): string{
  if (Util.isUnset(@credential)) {
    return '';
  }
  var accessKeyId = @credential.getAccessKeyId();
  return accessKeyId;
}

async function getAccessKeySecret(): string{
  if (Util.isUnset(@credential)) {
    return '';
  }
  var secret = @credential.getAccessKeySecret();
  return secret;
}

