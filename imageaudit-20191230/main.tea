import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint(@productId, @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model ScanTextRequest = {
  tasks: [
    {
      content: string(name='Content', description='content'),
    }
  ](name='Tasks', description='tasks'),
  labels: [
    {
      label: string(name='Label', description='label'),
    }
  ](name='Labels', description='labels'),
}

model ScanTextResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    elements: [
      {
        taskId: string(name='TaskId', description='taskId'),
        results: [
          {
            label: string(name='Label', description='label'),
            suggestion: string(name='Suggestion', description='suggestion'),
            rate: float(name='Rate', description='rate'),
            details: [
              {
                label: string(name='Label', description='label'),
                contexts: [
                  {
                    context: string(name='Context', description='context'),
                  }
                ](name='Contexts', description='contexts'),
              }
            ](name='Details', description='details'),
          }
        ](name='Results', description='results'),
      }
    ](name='Elements', description='elements'),
  }(name='Data', description='data'),
}

async function scanTextEx(request: ScanTextRequest, runtime: Util.RuntimeOptions): ScanTextResponse {
  Util.validateModel(request);
  return doRequest('ScanText', 'HTTPS', 'POST', '2019-12-30', 'AK', null, request, runtime);
}

async function scanText(request: ScanTextRequest): ScanTextResponse {
  var runtime = new Util.RuntimeOptions{};
  return scanTextEx(request, runtime);
}

model ScanImageRequest = {
  task: [
    {
      dataId?: string(name='DataId', description='dataId'),
      imageURL: string(name='ImageURL', description='imageUrl'),
      imageTimeMillisecond?: long(name='ImageTimeMillisecond', description='imageTime'),
      interval?: integer(name='Interval', description='interval'),
      maxFrames?: integer(name='MaxFrames', description='maxFrames'),
    }
  ](name='Task', description='tasks'),
  scene: [ string ](name='Scene', description='scenes'),
}

model ScanImageResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    results: [
      {
        dataId: string(name='DataId', description='dataId'),
        taskId: string(name='TaskId', description='taskId'),
        imageURL: string(name='ImageURL', description='imageUrl'),
        subResults: [
          {
            label: string(name='Label', description='label'),
            suggestion: string(name='Suggestion', description='suggestion'),
            rate: float(name='Rate', description='rate'),
            scene: string(name='Scene', description='scene'),
            frames: [
              {
                rate: float(name='Rate', description='Rate'),
                URL: string(name='URL', description='URL'),
              }
            ](name='Frames', description='frames'),
            hintWordsInfoList: [
              {
                context: string(name='Context', description='Context'),
              }
            ](name='HintWordsInfoList', description='hintWordsInfo'),
            programCodeDataList: [
              {
                x: float(name='X', description='x'),
                y: float(name='Y', description='y'),
                width: float(name='Width', description='width'),
                height: float(name='Height', description='height'),
              }
            ](name='ProgramCodeDataList', description='programCodeData'),
            logoDataList: [
              {
                type: string(name='Type', description='type'),
                name: string(name='Name', description='name'),
                x: float(name='X', description='x'),
                y: float(name='Y', description='y'),
                width: float(name='Width', description='Width'),
                height: float(name='Height', description='Height'),
              }
            ](name='LogoDataList', description='logoData'),
            sfaceDataList: [
              {
                x: float(name='X', description='x'),
                y: float(name='Y', description='y'),
                width: float(name='Width', description='width'),
                height: float(name='Height', description='heihght'),
                faces: [
                  {
                    name: string(name='Name', description='name'),
                    rate: float(name='Rate', description='rate'),
                    id: string(name='Id', description='id'),
                  }
                ](name='Faces', description='faces'),
              }
            ](name='SfaceDataList', description='sfaceData'),
            OCRDataList: [ string ](name='OCRDataList', description='ocrData'),
          }
        ](name='SubResults', description='subResults'),
      }
    ](name='Results', description='result'),
  }(name='Data', description='data'),
}

async function scanImageEx(request: ScanImageRequest, runtime: Util.RuntimeOptions): ScanImageResponse {
  Util.validateModel(request);
  return doRequest('ScanImage', 'HTTPS', 'POST', '2019-12-30', 'AK', null, request, runtime);
}

async function scanImage(request: ScanImageRequest): ScanImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return scanImageEx(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
