/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  

  checkConfig(config);
  @endpoint = getEndpoint('imageaudit', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ScanImageRequest {
  task?: [ 
    {
      imageTimeMillisecond?: long(name='ImageTimeMillisecond'),
      interval?: int32(name='Interval'),
      imageURL?: string(name='ImageURL'),
      maxFrames?: int32(name='MaxFrames'),
      dataId?: string(name='DataId'),
    }
  ](name='Task'),
  scene?: [ string ](name='Scene'),
}

model ScanImageResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    results?: [ 
      {
        imageURL?: string(name='ImageURL'),
        dataId?: string(name='DataId'),
        subResults?: [ 
          {
            sfaceDataList?: [ 
              {
                width?: float(name='Width'),
                faces?: [ 
                  {
                    name?: string(name='Name'),
                    id?: string(name='Id'),
                    rate?: float(name='Rate'),
                  }
                ](name='Faces'),
                height?: float(name='Height'),
                y?: float(name='Y'),
                x?: float(name='X'),
              }
            ](name='SfaceDataList'),
            hintWordsInfoList?: [ 
              {
                context?: string(name='Context'),
              }
            ](name='HintWordsInfoList'),
            suggestion?: string(name='Suggestion'),
            programCodeDataList?: [ 
              {
                width?: float(name='Width'),
                height?: float(name='Height'),
                y?: float(name='Y'),
                x?: float(name='X'),
              }
            ](name='ProgramCodeDataList'),
            OCRDataList?: [ string ](name='OCRDataList'),
            frames?: [ 
              {
                URL?: string(name='URL'),
                rate?: float(name='Rate'),
              }
            ](name='Frames'),
            logoDataList?: [ 
              {
                type?: string(name='Type'),
                width?: float(name='Width'),
                height?: float(name='Height'),
                y?: float(name='Y'),
                name?: string(name='Name'),
                x?: float(name='X'),
              }
            ](name='LogoDataList'),
            label?: string(name='Label'),
            scene?: string(name='Scene'),
            rate?: float(name='Rate'),
          }
        ](name='SubResults'),
        taskId?: string(name='TaskId'),
      }
    ](name='Results'),
  }(name='Data'),
}

model ScanImageResponse = {
  headers: map[string]string(name='headers'),
  body: ScanImageResponseBody(name='body'),
}

async function scanImageWithOptions(request: ScanImageRequest, runtime: Util.RuntimeOptions): ScanImageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ScanImage',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function scanImage(request: ScanImageRequest): ScanImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return scanImageWithOptions(request, runtime);
}

model ScanTextRequest {
  tasks?: [ 
    {
      content?: string(name='Content'),
    }
  ](name='Tasks'),
  labels?: [ 
    {
      label?: string(name='Label'),
    }
  ](name='Labels'),
}

model ScanTextResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    elements?: [ 
      {
        taskId?: string(name='TaskId'),
        results?: [ 
          {
            suggestion?: string(name='Suggestion'),
            label?: string(name='Label'),
            rate?: float(name='Rate'),
            details?: [ 
              {
                label?: string(name='Label'),
                contexts?: [ 
                  {
                    context?: string(name='Context'),
                  }
                ](name='Contexts'),
              }
            ](name='Details'),
          }
        ](name='Results'),
      }
    ](name='Elements'),
  }(name='Data'),
}

model ScanTextResponse = {
  headers: map[string]string(name='headers'),
  body: ScanTextResponseBody(name='body'),
}

async function scanTextWithOptions(request: ScanTextRequest, runtime: Util.RuntimeOptions): ScanTextResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ScanText',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function scanText(request: ScanTextRequest): ScanTextResponse {
  var runtime = new Util.RuntimeOptions{};
  return scanTextWithOptions(request, runtime);
}

