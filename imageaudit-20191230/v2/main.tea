/**
 *
 */
import Credential;
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('imageaudit', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ScanImageRequest {
  scene?: [ string ](name='Scene', description='1

This parameter is required.', example='porn'),
  task?: [ 
    {
      dataId?: string(name='DataId', example='uuid-xxxx-xxxx-1234'),
      imageTimeMillisecond?: long(name='ImageTimeMillisecond', example='1'),
      imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://xxx.xxx.com/xxx.jpg'),
      interval?: int32(name='Interval', example='1'),
      maxFrames?: int32(name='MaxFrames', example='1'),
    }
  ](name='Task', description='1

This parameter is required.'),
}

model ScanImageAdvanceRequest {
  scene?: [ string ](name='Scene', description='1

This parameter is required.', example='porn'),
  task?: [ 
    {
      dataId?: string(name='DataId', example='uuid-xxxx-xxxx-1234'),
      imageTimeMillisecond?: long(name='ImageTimeMillisecond', example='1'),
      imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://xxx.xxx.com/xxx.jpg'),
      interval?: int32(name='Interval', example='1'),
      maxFrames?: int32(name='MaxFrames', example='1'),
    }
  ](name='Task', description='1

This parameter is required.'),
}

model ScanImageResponseBody = {
  data?: {
    results?: [ 
      {
        dataId?: string(name='DataId', example='uuid-xxxx-xxx-1234'),
        imageURL?: string(name='ImageURL', example='http://xxx.xxx.xxx/xxx.jpg'),
        subResults?: [ 
          {
            frames?: [ 
              {
                rate?: float(name='Rate', example='89.85'),
                URL?: string(name='URL', example='http://xxx.xxx.com/xxx-0.jpg'),
              }
            ](name='Frames'),
            hintWordsInfoList?: [ 
              {
                context?: string(name='Context', example='abc'),
              }
            ](name='HintWordsInfoList'),
            label?: string(name='Label', example='normal'),
            logoDataList?: [ 
              {
                height?: float(name='Height', example='106'),
                name?: string(name='Name', example='abc'),
                type?: string(name='Type', example='TV'),
                width?: float(name='Width', example='106'),
                x?: float(name='X', example='140'),
                y?: float(name='Y', example='68'),
              }
            ](name='LogoDataList'),
            OCRDataList?: [ string ](name='OCRDataList', description='1'),
            programCodeDataList?: [ 
              {
                height?: float(name='Height', example='413.0'),
                width?: float(name='Width', example='402.0'),
                x?: float(name='X', example='11.0'),
                y?: float(name='Y', example='0.0'),
              }
            ](name='ProgramCodeDataList'),
            rate?: float(name='Rate', example='99.91'),
            scene?: string(name='Scene', example='ad'),
            sfaceDataList?: [ 
              {
                faces?: [ 
                  {
                    id?: string(name='Id', example='AliFace_0001234'),
                    name?: string(name='Name', example='abc'),
                    rate?: float(name='Rate', example='91.54'),
                  }
                ](name='Faces'),
                height?: float(name='Height', example='131'),
                width?: float(name='Width', example='97'),
                x?: float(name='X', example='49'),
                y?: float(name='Y', example='39'),
              }
            ](name='SfaceDataList'),
            suggestion?: string(name='Suggestion', example='block'),
          }
        ](name='SubResults'),
        taskId?: string(name='TaskId', example='img4wlJcb7p4wH4lAP3111111-123456'),
      }
    ](name='Results'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='69B41AE8-1234-1234-1234-12D395695D2D'),
}

model ScanImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ScanImageResponseBody(name='body'),
}

/**
 * @summary 图片审核接口
 *
 * @param request ScanImageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ScanImageResponse
 */
@context("scanImageWithContext")
async function scanImageWithOptions(request: ScanImageRequest, runtime: $RuntimeOptions): ScanImageResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.scene)) {
    body['Scene'] = request.scene;
  }
  if (!$isNull(request.task)) {
    body['Task'] = request.task;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ScanImage',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 图片审核接口
 *
 * @param request ScanImageRequest
 * @return ScanImageResponse
 */
async function scanImage(request: ScanImageRequest): ScanImageResponse {
  var runtime = new $RuntimeOptions{};
  return scanImageWithOptions(request, runtime);
}

async function scanImageAdvance(request: ScanImageAdvanceRequest, runtime: $RuntimeOptions): ScanImageResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'imageaudit',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var scanImageReq = new ScanImageRequest{};
  OpenApiUtil.convert(request, scanImageReq);

  if(!$isNull(request.task)) {
    var i0 : integer = 0;
    for (var item0 : request.task) {
      if(!$isNull(item0.imageURLObject)) {
        authResponse = authClient.callApi(authParams, authReq, runtime);
        tmpBody = $object(authResponse['body']);
        useAccelerate = $boolean(tmpBody['UseAccelerate']);
        authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
        fileObj = new $FileField{
          filename = authResponseBody['ObjectKey'],
          content = item0.imageURLObject,
          contentType = '',
        };
        ossHeader = {
          host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
          OSSAccessKeyId = authResponseBody['AccessKeyId'],
          policy = authResponseBody['EncodedPolicy'],
          Signature = authResponseBody['Signature'],
          key = authResponseBody['ObjectKey'],
          file = fileObj,
          success_action_status = '201',
        };
        _postOSSObject(authResponseBody['Bucket'], ossHeader);
        var tmpObj : ScanImageRequest.task = scanImageReq.task[i0];
        tmpObj.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
        i0++;
      }
    }
  }
  var scanImageResp = scanImageWithOptions(scanImageReq, runtime);
  return scanImageResp;
}

model ScanTextRequest {
  labels?: [ 
    {
      label?: string(name='Label', description='This parameter is required.', example='ad'),
    }
  ](name='Labels', description='1

This parameter is required.'),
  tasks?: [ 
    {
      content?: string(name='Content', description='This parameter is required.'),
    }
  ](name='Tasks', description='1

This parameter is required.'),
}

model ScanTextResponseBody = {
  data?: {
    elements?: [ 
      {
        results?: [ 
          {
            details?: [ 
              {
                contexts?: [ 
                  {
                    context?: string(name='Context'),
                  }
                ](name='Contexts'),
                label?: string(name='Label', example='ad'),
              }
            ](name='Details'),
            label?: string(name='Label', example='ad'),
            rate?: float(name='Rate', example='99.91'),
            suggestion?: string(name='Suggestion', example='block'),
          }
        ](name='Results'),
        taskId?: string(name='TaskId', example='txt6Vh5Fv0DAFy5hgdVRt3pqf-1s82jj'),
      }
    ](name='Elements'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C7CD87E3-57A5-4E2F-8A44-809F3554692C'),
}

model ScanTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ScanTextResponseBody(name='body'),
}

/**
 * @param request ScanTextRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ScanTextResponse
 */
@context("scanTextWithContext")
async function scanTextWithOptions(request: ScanTextRequest, runtime: $RuntimeOptions): ScanTextResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!$isNull(request.tasks)) {
    body['Tasks'] = request.tasks;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ScanText',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request ScanTextRequest
 * @return ScanTextResponse
 */
async function scanText(request: ScanTextRequest): ScanTextResponse {
  var runtime = new $RuntimeOptions{};
  return scanTextWithOptions(request, runtime);
}

api _postOSSObject(bucketName: string, form: object): object {
  var boundary = $Form.getBoundary();
  __request.protocol = 'HTTPS';
  __request.method = 'POST';
  __request.pathname = `/`;
  __request.headers = {
    host = $string(form.host),
    date = OpenApiUtil.getDateUTCString(),
    user-agent = OpenApiUtil.getUserAgent(''),
  };
  __request.headers.content-type = `multipart/form-data; boundary=${boundary}`;
  __request.body = $Form.toFileForm(form, boundary);
} returns {
  var respMap : object = null;
  var bodyStr = $Stream.readAsString(__response.body);
  if ((__response.statusCode >= 400) && (__response.statusCode < 600)) {
    respMap = $XML.parseXml(bodyStr, null);
    var err = $object(respMap.Error);
    throw new OpenApi.Client{
      code = $string(err.Code),
      message = $string(err.Message),
      data = {
        httpCode = __response.statusCode,
        requestId = $string(err.RequestId),
        hostId = $string(err.HostId),
      }
    };
  }
  respMap = $XML.parseXml(bodyStr, null);
  return {
    ...respMap,
  };
}
