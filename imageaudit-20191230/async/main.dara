/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'imageaudit';
  @version = '2019-12-30';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ScanTextRequest {
  labels: [ 
    {
      label: string(name='Label', description='This parameter is required.', example='ad'),
    }
  ](name='Labels', description='1

This parameter is required.', position='Body'),
  tasks: [ 
    {
      content: string(name='Content', description='This parameter is required.'),
    }
  ](name='Tasks', description='1

This parameter is required.', position='Body'),
}

model ScanTextResponseBody = {
  data?: {
    elements?: [ 
      {
        results?: [ 
          {
            details?: [ 
              {
                contexts?: [ 
                  {
                    context?: string(name='Context'),
                  }
                ](name='Contexts'),
                label?: string(name='Label', example='ad'),
              }
            ](name='Details'),
            label?: string(name='Label', example='ad'),
            rate?: float(name='Rate', example='99.91'),
            suggestion?: string(name='Suggestion', example='block'),
          }
        ](name='Results'),
        taskId?: string(name='TaskId', example='txt6Vh5Fv0DAFy5hgdVRt3pqf-1s82jj'),
      }
    ](name='Elements'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C7CD87E3-57A5-4E2F-8A44-809F3554692C'),
}

model ScanTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ScanTextResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ScanText  ScanTextRequest
  * @return ScanTextResponse
 */
async function scanText(request: ScanTextRequest): ScanTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ScanText', 'POST', '/', 'json', true, 'form', request);
}

