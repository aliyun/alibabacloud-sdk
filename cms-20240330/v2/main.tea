/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cms', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddonMeta {
  alias?: string(name='alias'),
  categories?: [ string ](name='categories'),
  dashboards?: [ 
    {
      description?: string(name='description'),
      name?: string(name='name'),
      url?: string(name='url'),
    }
  ](name='dashboards'),
  description?: string(name='description'),
  environments?: [ 
    {
      commonSchemaRefs?: [ 
        {
          group?: string(name='group'),
          version?: string(name='version'),
        }
      ](name='commonSchemaRefs'),
      dependencies?: {
        clusterTypes?: [ string ](name='clusterTypes'),
        features?: map[string]boolean(name='features'),
        services?: [ string ](name='services'),
      }(name='dependencies'),
      description?: string(name='description'),
      enable?: boolean(name='enable'),
      label?: string(name='label'),
      name?: string(name='name'),
      policies?: {
        alertDefaultStatus?: string(name='alertDefaultStatus'),
        bindDefaultPolicy?: boolean(name='bindDefaultPolicy'),
        bindEntity?: {
          entityGroupMode?: boolean(name='entityGroupMode'),
          entityType?: string(name='entityType'),
          singleEntityMode?: boolean(name='singleEntityMode'),
          vpcIdFieldKey?: string(name='vpcIdFieldKey'),
        }(name='bindEntity'),
        defaultInstall?: boolean(name='defaultInstall'),
        enableServiceAccount?: boolean(name='enableServiceAccount'),
        metricCheckRule?: {
          promQL?: [ string ](name='promQL'),
        }(name='metricCheckRule'),
        needRestartAfterIntegration?: boolean(name='needRestartAfterIntegration'),
        protocols?: [ 
          {
            description?: string(name='description'),
            icon?: string(name='icon'),
            label?: string(name='label'),
            name?: string(name='name'),
          }
        ](name='protocols'),
        targetAddonName?: string(name='targetAddonName'),
      }(name='policies'),
      policyType?: string(name='policyType'),
    }
  ](name='environments'),
  icon?: string(name='icon'),
  keywords?: [ string ](name='keywords'),
  language?: string(name='language'),
  latestReleaseCreateTime?: string(name='latestReleaseCreateTime'),
  name?: string(name='name'),
  once?: boolean(name='once'),
  scene?: string(name='scene'),
  version?: string(name='version'),
  weight?: int32(name='weight'),
}

model AlertEventIntegrationPolicyForModify {
  alertEventIntegrationPolicyName?: string(name='alertEventIntegrationPolicyName', description='This parameter is required.'),
  description?: string(name='description'),
  filterSetting?: FilterSetting(name='filterSetting'),
  integrationSetting?: string(name='integrationSetting'),
  transformerSetting?: [
    TransformAction
  ](name='transformerSetting'),
  type?: string(name='type'),
}

model AlertEventIntegrationPolicyForView {
  alertEventIntegrationPolicyId?: string(name='alertEventIntegrationPolicyId'),
  alertEventIntegrationPolicyName?: string(name='alertEventIntegrationPolicyName', description='This parameter is required.'),
  createTime?: string(name='createTime'),
  description?: string(name='description'),
  enable?: boolean(name='enable'),
  filterSetting?: FilterSetting(name='filterSetting'),
  integrationSetting?: string(name='integrationSetting'),
  token?: string(name='token'),
  transformerSetting?: [
    TransformAction
  ](name='transformerSetting'),
  type?: string(name='type'),
  updateTime?: string(name='updateTime'),
  userId?: string(name='userId'),
  workspace?: string(name='workspace'),
}

model AlertRuleAction {
  actions?: [ string ](name='actions'),
}

model AlertRuleAlertMetricFilterDef {
  dim?: string(name='dim'),
  dimDisabled?: boolean(name='dimDisabled'),
  displayNameCn?: string(name='displayNameCn'),
  displayNameEn?: string(name='displayNameEn'),
  hidden?: boolean(name='hidden'),
  labelDisabled?: boolean(name='labelDisabled'),
  opt?: string(name='opt'),
  supportedOpts?: [ 
    {
      displayNameCn?: string(name='displayNameCn'),
      displayNameEn?: string(name='displayNameEn'),
      value?: string(name='value'),
    }
  ](name='supportedOpts'),
}

model AlertRuleAlertMetricInput {
  filterValues?: [
    AlertRuleAlertMetricInputFilterValue
  ](name='filterValues'),
  groupId?: string(name='groupId'),
  metricId?: string(name='metricId'),
  paramValues?: [
    AlertRuleAlertMetricInputParamValue
  ](name='paramValues'),
}

model AlertRuleAlertMetricInputFilterValue {
  dim?: string(name='dim', description='This parameter is required.'),
  opt?: string(name='opt', description='This parameter is required.'),
  value?: string(name='value'),
}

model AlertRuleAlertMetricInputParamValue {
  name?: string(name='name', description='This parameter is required.'),
  value?: string(name='value', description='This parameter is required.'),
}

model AlertRuleAlertMetricParamDef {
  maxWidth?: int32(name='maxWidth'),
  minWidth?: int32(name='minWidth'),
  name?: string(name='name'),
  placeholderCn?: string(name='placeholderCn'),
  placeholderEn?: string(name='placeholderEn'),
  type?: string(name='type'),
  value?: string(name='value'),
  values?: [ 
    {
      labelCn?: string(name='labelCn'),
      labelEn?: string(name='labelEn'),
      value?: string(name='value'),
    }
  ](name='values'),
}

model AlertRuleCondition {
  alertCount?: int32(name='alertCount', description='type=SLS_CONDITION时指定，满足条件几次后告警，默认为1'),
  caseList?: [ 
    {
      condition?: string(name='condition'),
      countCondition?: string(name='countCondition'),
      level?: string(name='level'),
      type?: string(name='type'),
    }
  ](name='caseList', description='type=SLS_CONDITION时指定'),
  compareList?: [ 
    {
      aggregate?: string(name='aggregate'),
      baseUnit?: string(name='baseUnit'),
      displayUnit?: string(name='displayUnit'),
      oper?: string(name='oper'),
      value?: double(name='value'),
      valueLevelList?: [ 
        {
          level?: string(name='level'),
          value?: double(name='value'),
        }
      ](name='valueLevelList'),
      yoyTimeUnit?: string(name='yoyTimeUnit'),
      yoyTimeValue?: int32(name='yoyTimeValue'),
    }
  ](name='compareList'),
  compositeEscalation?: {
    escalations?: [ 
      {
        comparisonOperator?: string(name='comparisonOperator'),
        metricName?: string(name='metricName'),
        period?: long(name='period'),
        statistics?: string(name='statistics'),
        threshold?: double(name='threshold'),
      }
    ](name='escalations'),
    level?: string(name='level'),
    relation?: string(name='relation'),
    times?: int32(name='times'),
  }(name='compositeEscalation'),
  escalationType?: string(name='escalationType'),
  expressEscalation?: {
    level?: string(name='level'),
    rawExpression?: string(name='rawExpression'),
    times?: int32(name='times'),
  }(name='expressEscalation'),
  noDataAlertLevel?: string(name='noDataAlertLevel', description='无数据时按什么级别告警，不指定则不对无数据报警'),
  noDataAppendValue?: string(name='noDataAppendValue'),
  noDataPolicy?: string(name='noDataPolicy'),
  oper?: string(name='oper'),
  relation?: string(name='relation'),
  simpleEscalation?: {
    escalations?: [ 
      {
        comparisonOperator?: string(name='comparisonOperator'),
        level?: string(name='level'),
        statistics?: string(name='statistics'),
        threshold?: double(name='threshold'),
        times?: int32(name='times'),
      }
    ](name='escalations'),
    metricName?: string(name='metricName'),
    period?: long(name='period'),
  }(name='simpleEscalation'),
  type?: string(name='type', description='规则条件类型，可选值：SLS_CONDITION

This parameter is required.'),
  value?: double(name='value'),
}

model AlertRuleDataSource {
  appType?: string(name='appType'),
  dsList?: [ 
    {
      project?: string(name='project'),
      regionId?: string(name='regionId'),
      store?: string(name='store'),
      type?: string(name='type'),
    }
  ](name='dsList'),
  instanceId?: string(name='instanceId', description='实例id，当type=PROMETHEUS_DS/ENTERPRISE_DS时必填，为prometheus实例的clusterId或指标仓库名称'),
  namespace?: string(name='namespace'),
  regionId?: string(name='regionId'),
  type?: string(name='type', description='数据源类型

This parameter is required.'),
}

model AlertRuleLabelFilter {
  labels?: map[string]string(name='labels'),
  opt?: string(name='opt'),
}

model AlertRuleNotification {
  contacts?: [ string ](name='contacts'),
  customWebhooks?: [ string ](name='customWebhooks'),
  dingWebhooks?: [ string ](name='dingWebhooks'),
  fsWebhooks?: [ string ](name='fsWebhooks'),
  groups?: [ string ](name='groups'),
  notifyTime?: AlertRuleTimeSpan(name='notifyTime'),
  silenceTime?: long(name='silenceTime'),
  slackWebhooks?: [ string ](name='slackWebhooks'),
  wxWebhooks?: [ string ](name='wxWebhooks'),
}

model AlertRuleNotificationFilter {
  contacts?: [ string ](name='contacts'),
  customWebhooks?: [ string ](name='customWebhooks'),
  dingWebhooks?: [ string ](name='dingWebhooks'),
  fsWebhooks?: [ string ](name='fsWebhooks'),
  groups?: [ string ](name='groups'),
  slackWebhooks?: [ string ](name='slackWebhooks'),
  wxWebhooks?: [ string ](name='wxWebhooks'),
}

model AlertRuleQuery {
  checkAfterDataComplete?: boolean(name='checkAfterDataComplete'),
  dimensions?: [ map[string]string ](name='dimensions'),
  domain?: string(name='domain'),
  duration?: long(name='duration'),
  entityFilter?: {
    domain?: string(name='domain'),
    filters?: [ 
      {
        field?: string(name='field'),
        operator?: string(name='operator'),
        value?: string(name='value'),
      }
    ](name='filters'),
    type?: string(name='type'),
  }(name='entityFilter'),
  expr?: string(name='expr'),
  firstJoin?: AlertRuleSlsQueryJoin(name='firstJoin'),
  groupFieldList?: [ string ](name='groupFieldList'),
  groupId?: string(name='groupId'),
  groupType?: string(name='groupType'),
  metric?: string(name='metric'),
  metricSet?: string(name='metricSet'),
  namespace?: string(name='namespace'),
  queries?: [ 
    {
      apmAlertMetricId?: string(name='apmAlertMetricId'),
      apmFilters?: [ 
        {
          dim?: string(name='dim'),
          type?: string(name='type'),
          value?: string(name='value'),
        }
      ](name='apmFilters'),
      apmGroupBy?: [ string ](name='apmGroupBy'),
      duration?: long(name='duration'),
      end?: long(name='end', description='时间偏移结束时间(相对)，如果指定了start、end，则不指定window。'),
      expr?: string(name='expr', description='查询表达式'),
      start?: long(name='start', description='sls查询的时间偏移开始时间(相对)，如果指定了start、end，则不指定window。  例如：start=15， timeUnit=minute，表示15分钟前'),
      timeUnit?: string(name='timeUnit', description='start和end、window的时间单位： day/hour/minute/second'),
      window?: long(name='window', description='整点时间查询区间。  如果指定了window则不指定start、end'),
    }
  ](name='queries'),
  relationType?: string(name='relationType'),
  secondJoin?: AlertRuleSlsQueryJoin(name='secondJoin'),
  serviceIds?: [ string ](name='serviceIds'),
  type?: string(name='type', description='查询类型

This parameter is required.'),
}

model AlertRuleSend {
  action?: AlertRuleAction(name='action'),
  notification?: AlertRuleNotification(name='notification'),
  sendToArms?: boolean(name='sendToArms'),
}

model AlertRuleSlsQueryJoin {
  conditions?: [ 
    {
      firstField?: string(name='firstField', description='条件的左操作参数，格式为$<query_idx>.<结果集字段名>'),
      oper?: string(name='oper', description='<, >, ==, !=, <=, >='),
      secondField?: string(name='secondField', description='条件的右操作参数，格式为$<query_idx>.<结果集字段名>'),
    }
  ](name='conditions'),
  type?: string(name='type', description='集合操作类型。
  ● CrossJoin： 笛卡尔积
  ● FullJoin：全联
  ● InnerJoin：内联
  ● LeftExclude： 左斥
  ● RightExclude：右斥
  ● LeftJoin：左联
  ● RightJoin：右联
  ● NoJoin：不合并
  ● Concat： 拼接
  https://help.aliyun.com/zh/sls/user-guide/set-query-statistics-statement

This parameter is required.'),
}

model AlertRuleTimeSpan {
  dayOfWeek?: [ int32 ](name='dayOfWeek'),
  endTime?: string(name='endTime'),
  gmtOffset?: string(name='gmtOffset'),
  startTime?: string(name='startTime'),
}

model BizTraceConfig {
  advancedConfig?: string(name='advancedConfig'),
  bizTraceCode?: string(name='bizTraceCode'),
  bizTraceId?: string(name='bizTraceId'),
  bizTraceName?: string(name='bizTraceName'),
  createTime?: string(name='createTime'),
  regionId?: string(name='regionId'),
  ruleConfig?: string(name='ruleConfig'),
  workspace?: string(name='workspace'),
}

model DataStorageItem {
  dataType?: string(name='dataType'),
  project?: string(name='project'),
  regionId?: string(name='regionId'),
  storeName?: string(name='storeName'),
  storeType?: string(name='storeType'),
}

model EntityDiscoverRule {
  annotations?: [ 
    {
      op?: string(name='op'),
      tagKey?: string(name='tagKey'),
      tagValues?: [ string ](name='tagValues'),
    }
  ](name='annotations'),
  entityTypes?: [ string ](name='entityTypes'),
  fieldRules?: [ 
    {
      fieldKey?: string(name='fieldKey'),
      fieldValues?: [ string ](name='fieldValues'),
      op?: string(name='op'),
    }
  ](name='fieldRules'),
  instanceIds?: [ string ](name='instanceIds'),
  ipMatchRule?: [ 
    {
      ipCIDR?: string(name='ipCIDR'),
      ipFieldKey?: string(name='ipFieldKey'),
    }
  ](name='ipMatchRule'),
  labels?: [ 
    {
      op?: string(name='op'),
      tagKey?: string(name='tagKey'),
      tagValues?: [ string ](name='tagValues'),
    }
  ](name='labels'),
  regionIds?: [ string ](name='regionIds'),
  resourceGroupId?: string(name='resourceGroupId'),
  tags?: [ 
    {
      op?: string(name='op'),
      tagKey?: string(name='tagKey'),
      tagValues?: [ string ](name='tagValues'),
    }
  ](name='tags'),
}

model EntityGroupBase {
  description?: string(name='description'),
  entityGroupId?: string(name='entityGroupId'),
  entityGroupName?: string(name='entityGroupName'),
  entityQueries?: [ 
    {
      entityType?: string(name='entityType'),
      spl?: string(name='spl'),
    }
  ](name='entityQueries'),
  entityRules?: EntityDiscoverRule(name='entityRules'),
  regionId?: string(name='regionId'),
  userId?: string(name='userId'),
  workspace?: string(name='workspace'),
}

model FilterSetting {
  conditions?: [ 
    {
      field?: string(name='field'),
      op?: string(name='op'),
      value?: string(name='value'),
    }
  ](name='conditions'),
  expression?: string(name='expression'),
  relation?: string(name='relation'),
}

model IncidentContactStruct {
  channel?: [ string ](name='channel'),
  contactId?: string(name='contactId'),
  contactType?: string(name='contactType'),
}

model IncidentEscalationStageStruct {
  contact?: [
    IncidentContactStruct
  ](name='contact'),
  cycleNotifyCount?: int32(name='cycleNotifyCount'),
  cycleNotifyTime?: int32(name='cycleNotifyTime'),
  description?: string(name='description'),
  effectTime?: string(name='effectTime'),
  name?: string(name='name'),
  stageIndex?: int32(name='stageIndex'),
  timeZone?: string(name='timeZone'),
  waitToNextStageTime?: int32(name='waitToNextStageTime'),
}

model IncidentEscalationStruct {
  createTime?: long(name='createTime'),
  description?: string(name='description'),
  incidentEscalationId?: string(name='incidentEscalationId'),
  modifyTime?: long(name='modifyTime'),
  name?: string(name='name'),
  regionId?: string(name='regionId'),
  stage?: [
    IncidentEscalationStageStruct
  ](name='stage'),
  workspace?: string(name='workspace'),
}

model IncidentEventStruct {
  autoRecoverTime?: long(name='autoRecoverTime'),
  content?: string(name='content'),
  count?: int32(name='count'),
  dimension?: map[string]string(name='dimension'),
  groupBy?: map[string]string(name='groupBy'),
  incidentEventId?: string(name='incidentEventId'),
  incidentId?: string(name='incidentId'),
  lastTime?: long(name='lastTime'),
  recoverTime?: long(name='recoverTime'),
  resource?: map[string]string(name='resource'),
  status?: long(name='status'),
  time?: string(name='time'),
  title?: string(name='title'),
  userId?: string(name='userId'),
}

model IncidentMemberStruct {
  acknowledge?: {
    breakLevel?: string(name='breakLevel'),
    verifyTime?: long(name='verifyTime'),
  }(name='acknowledge'),
  contactId?: string(name='contactId'),
  contacts?: [ 
    {
      channel?: string(name='channel'),
      contactMask?: string(name='contactMask'),
    }
  ](name='contacts'),
  escalation?: {
    description?: string(name='description'),
    incidentEscalationId?: string(name='incidentEscalationId'),
    name?: string(name='name'),
    stageIndex?: string(name='stageIndex'),
    title?: string(name='title'),
  }(name='escalation'),
  incidentId?: string(name='incidentId'),
  incidentMemberId?: string(name='incidentMemberId'),
  scheduleGroup?: {
    contactId?: string(name='contactId'),
    name?: string(name='name'),
  }(name='scheduleGroup'),
  time?: long(name='time'),
  userId?: long(name='userId'),
}

model IncidentNoteStruct {
  content?: string(name='content'),
  format?: string(name='format'),
  incidentId?: string(name='incidentId'),
  noteId?: string(name='noteId'),
  operator?: {
    contact?: string(name='contact'),
    contactId?: string(name='contactId'),
    name?: string(name='name'),
    userId?: long(name='userId'),
  }(name='operator'),
  time?: long(name='time'),
  type?: string(name='type'),
}

model IncidentPlanCorporationStruct {
  channel?: string(name='channel'),
  robotId?: string(name='robotId'),
}

model IncidentPlanFieldPath {
  fieldAlias?: string(name='fieldAlias'),
  fieldPath?: [ string ](name='fieldPath'),
}

model IncidentPlanStruct {
  autoRecoverSeconds?: int32(name='autoRecoverSeconds'),
  closeExpire?: long(name='closeExpire'),
  corporation?: [
    IncidentPlanCorporationStruct
  ](name='corporation'),
  description?: string(name='description'),
  escalationId?: [ string ](name='escalationId'),
  gmtCreate?: long(name='gmtCreate'),
  gmtModified?: long(name='gmtModified'),
  groupBy?: [
    IncidentPlanFieldPath
  ](name='groupBy'),
  incidentPlanId?: string(name='incidentPlanId'),
  name?: string(name='name'),
  resourceFiled?: [
    IncidentPlanFieldPath
  ](name='resourceFiled'),
  status?: string(name='status'),
  userId?: long(name='userId'),
  workspace?: string(name='workspace'),
}

model IncidentResourceDetail {
  extraId?: string(name='extraId'),
  resourceId?: map[string]any(name='resourceId'),
  type?: string(name='type'),
}

model IncidentResourceStruct {
  description?: string(name='description'),
  incidentId?: string(name='incidentId'),
  incidentResourceId?: string(name='incidentResourceId'),
  resource?: IncidentResourceDetail(name='resource'),
  source?: string(name='source'),
  time?: long(name='time'),
  userId?: long(name='userId'),
}

model IncidentStruct {
  content?: string(name='content'),
  escalations?: [
    IncidentEscalationStruct
  ](name='escalations'),
  incidentId?: string(name='incidentId'),
  incidentPlan?: IncidentPlanStruct(name='incidentPlan'),
  resource?: IncidentResourceDetail(name='resource'),
  severity?: string(name='severity'),
  status?: string(name='status'),
  time?: long(name='time'),
  title?: string(name='title'),
  userId?: string(name='userId'),
}

model IncidentTimeline {
  childType?: string(name='childType'),
  content?: string(name='content'),
  incidentId?: string(name='incidentId'),
  incidentTimelineId?: string(name='incidentTimelineId'),
  time?: long(name='time'),
  timelineId?: string(name='timelineId'),
  title?: string(name='title'),
  type?: string(name='type'),
  userId?: string(name='userId'),
}

model MaintainWindowForModify {
  description?: string(name='description'),
  effectTimeRange?: {
    dayInWeek?: [ int32 ](name='dayInWeek'),
    endTimeInMinute?: int32(name='endTimeInMinute'),
    startTimeInMinute?: int32(name='startTimeInMinute'),
    timeZone?: string(name='timeZone'),
  }(name='effectTimeRange'),
  effective?: string(name='effective'),
  endTime?: string(name='endTime'),
  filterSetting?: FilterSetting(name='filterSetting'),
  maintainWindowName?: string(name='maintainWindowName', description='This parameter is required.'),
  startTime?: string(name='startTime'),
}

model MaintainWindowForView {
  createTime?: string(name='createTime'),
  description?: string(name='description'),
  effectTimeRange?: {
    dayInWeek?: [ int32 ](name='dayInWeek'),
    endTimeInMinute?: int32(name='endTimeInMinute'),
    startTimeInMinute?: int32(name='startTimeInMinute'),
    timeZone?: string(name='timeZone'),
  }(name='effectTimeRange'),
  effective?: string(name='effective'),
  enable?: boolean(name='enable'),
  endTime?: string(name='endTime'),
  filterSetting?: FilterSetting(name='filterSetting'),
  maintainWindowId?: string(name='maintainWindowId'),
  maintainWindowName?: string(name='maintainWindowName', description='This parameter is required.'),
  startTime?: string(name='startTime'),
  updateTime?: string(name='updateTime'),
  userId?: string(name='userId'),
  workspace?: string(name='workspace'),
}

model MergeContact {
  email?: string(name='email'),
  emailVerify?: boolean(name='emailVerify'),
  extend?: map[string]any(name='extend'),
  gmtCreate?: string(name='gmtCreate'),
  gmtModified?: string(name='gmtModified'),
  identifier?: string(name='identifier'),
  lang?: string(name='lang'),
  name?: string(name='name'),
  phone?: string(name='phone'),
  phoneCode?: string(name='phoneCode'),
  phoneVerify?: boolean(name='phoneVerify'),
  source?: string(name='source'),
}

model MergeContactGroup {
  contacts?: [ string ](name='contacts'),
  extend?: map[string]any(name='extend'),
  gmtCreate?: string(name='gmtCreate'),
  gmtModified?: string(name='gmtModified'),
  identifier?: string(name='identifier'),
  name?: string(name='name'),
  source?: string(name='source'),
}

model MergeRobot {
  createTime?: string(name='createTime'),
  extend?: {
    cardTemplate?: string(name='cardTemplate'),
    dailyNoc?: boolean(name='dailyNoc'),
    dailyNocTime?: string(name='dailyNocTime'),
    dingSignKey?: string(name='dingSignKey'),
    enableOutgoing?: boolean(name='enableOutgoing'),
    token?: string(name='token'),
  }(name='extend'),
  gmtModified?: string(name='gmtModified'),
  identifier?: string(name='identifier'),
  lang?: string(name='lang'),
  name?: string(name='name'),
  source?: string(name='source'),
  type?: string(name='type'),
  webhook?: string(name='webhook'),
}

model MergeWebhook {
  contentType?: string(name='contentType'),
  extend?: string(name='extend'),
  gmtCreate?: string(name='gmtCreate'),
  gmtModified?: map[string]any(name='gmtModified'),
  headers?: string(name='headers'),
  identifier?: string(name='identifier'),
  lang?: string(name='lang'),
  method?: string(name='method'),
  name?: string(name='name'),
  source?: string(name='source'),
  type?: string(name='type'),
  webhook?: string(name='webhook'),
}

model NotifyStrategyForModify {
  customTemplateEntries?: [ 
    {
      targetType?: string(name='targetType', description='This parameter is required.'),
      templateUuid?: string(name='templateUuid', description='This parameter is required.'),
    }
  ](name='customTemplateEntries'),
  description?: string(name='description'),
  groupingSetting?: {
    groupingKeys?: [ string ](name='groupingKeys'),
    periodMin?: int32(name='periodMin'),
    silenceSec?: int32(name='silenceSec'),
    times?: int32(name='times'),
  }(name='groupingSetting', description='This parameter is required.'),
  ignoreRestoredNotification?: boolean(name='ignoreRestoredNotification'),
  notifyStrategyName?: string(name='notifyStrategyName', description='This parameter is required.'),
  routes?: [ 
    {
      channels?: [ 
        {
          channelType?: string(name='channelType', description='This parameter is required.'),
          enabledSubChannels?: [ string ](name='enabledSubChannels'),
          receivers?: [ string ](name='receivers', description='This parameter is required.'),
        }
      ](name='channels'),
      effectTimeRange?: {
        dayInWeek?: [ int32 ](name='dayInWeek'),
        endTimeInMinute?: int32(name='endTimeInMinute'),
        startTimeInMinute?: int32(name='startTimeInMinute'),
        timeZone?: string(name='timeZone'),
      }(name='effectTimeRange'),
      filterSetting?: FilterSetting(name='filterSetting'),
      severities?: [ string ](name='severities'),
    }
  ](name='routes', description='This parameter is required.'),
}

model NotifyStrategyForView {
  createTime?: string(name='createTime'),
  customTemplateEntries?: [ 
    {
      targetType?: string(name='targetType', description='This parameter is required.'),
      templateUuid?: string(name='templateUuid', description='This parameter is required.'),
    }
  ](name='customTemplateEntries'),
  description?: string(name='description'),
  enable?: boolean(name='enable'),
  groupingSetting?: {
    groupingKeys?: [ string ](name='groupingKeys'),
    periodMin?: int32(name='periodMin'),
    silenceSec?: int32(name='silenceSec'),
    times?: int32(name='times'),
  }(name='groupingSetting', description='This parameter is required.'),
  ignoreRestoredNotification?: boolean(name='ignoreRestoredNotification'),
  notifyStrategyId?: string(name='notifyStrategyId'),
  notifyStrategyName?: string(name='notifyStrategyName', description='This parameter is required.'),
  routes?: [ 
    {
      channels?: [ 
        {
          channelType?: string(name='channelType', description='This parameter is required.'),
          enabledSubChannels?: [ string ](name='enabledSubChannels'),
          receivers?: [ string ](name='receivers', description='This parameter is required.'),
        }
      ](name='channels'),
      effectTimeRange?: {
        dayInWeek?: [ int32 ](name='dayInWeek'),
        endTimeInMinute?: int32(name='endTimeInMinute'),
        startTimeInMinute?: int32(name='startTimeInMinute'),
        timeZone?: string(name='timeZone'),
      }(name='effectTimeRange'),
      filterSetting?: FilterSetting(name='filterSetting'),
      severities?: [ string ](name='severities'),
    }
  ](name='routes', description='This parameter is required.'),
  updateTime?: string(name='updateTime'),
  userId?: string(name='userId'),
  workspace?: string(name='workspace'),
}

model PrometheusManagedInstance {
  createTime?: string(name='createTime'),
  instanceType?: string(name='instanceType'),
  prometheusInstanceId?: string(name='prometheusInstanceId'),
  prometheusInstanceName?: string(name='prometheusInstanceName'),
  regionId?: string(name='regionId'),
  status?: string(name='status'),
  workspace?: string(name='workspace'),
}

model RumDnsResponse {
  domain?: string(name='domain'),
  message?: string(name='message'),
  result?: boolean(name='result'),
}

model SubscriptionForModify {
  description?: string(name='description'),
  filterSetting?: FilterSetting(name='filterSetting'),
  notifyStrategyId?: string(name='notifyStrategyId'),
  pushingSetting?: {
    alertActionIds?: [ string ](name='alertActionIds'),
    responsePlanId?: string(name='responsePlanId'),
    restoreActionIds?: [ string ](name='restoreActionIds'),
    templateUuid?: string(name='templateUuid'),
  }(name='pushingSetting'),
  subscriptionName?: string(name='subscriptionName', description='This parameter is required.'),
}

model SubscriptionForView {
  createTime?: string(name='createTime'),
  description?: string(name='description'),
  enable?: boolean(name='enable'),
  filterSetting?: FilterSetting(name='filterSetting'),
  notifyStrategyId?: string(name='notifyStrategyId'),
  pushingSetting?: {
    alertActionIds?: [ string ](name='alertActionIds'),
    responsePlanId?: string(name='responsePlanId'),
    restoreActionIds?: [ string ](name='restoreActionIds'),
    templateUuid?: string(name='templateUuid'),
  }(name='pushingSetting'),
  subscriptionId?: string(name='subscriptionId'),
  subscriptionName?: string(name='subscriptionName', description='This parameter is required.'),
  updateTime?: string(name='updateTime'),
  userId?: string(name='userId'),
  workspace?: string(name='workspace'),
}

model TransformAction {
  filterSetting?: FilterSetting(name='filterSetting'),
  labelKey?: string(name='labelKey'),
  mapping?: map[string]string(name='mapping'),
  regExp?: string(name='regExp'),
  source?: string(name='source'),
  target?: string(name='target'),
  type?: string(name='type'),
  value?: string(name='value'),
  variable?: string(name='variable'),
}

model TransformerForModify {
  actions?: [
    TransformAction
  ](name='actions'),
  description?: string(name='description'),
  filterSetting?: FilterSetting(name='filterSetting'),
  quitAfterMatch?: boolean(name='quitAfterMatch'),
  sortId?: int32(name='sortId'),
  transformerName?: string(name='transformerName', description='This parameter is required.'),
}

model TransformerForView {
  actions?: [
    TransformAction
  ](name='actions'),
  createTime?: string(name='createTime'),
  description?: string(name='description'),
  enable?: boolean(name='enable'),
  filterSetting?: FilterSetting(name='filterSetting'),
  quitAfterMatch?: boolean(name='quitAfterMatch'),
  sortId?: int32(name='sortId'),
  transformerId?: string(name='transformerId'),
  transformerName?: string(name='transformerName', description='This parameter is required.'),
  updateTime?: string(name='updateTime'),
  userId?: string(name='userId'),
  workspace?: string(name='workspace'),
}

model CreateAddonReleaseRequest {
  addonName?: string(name='addonName', description='This parameter is required.', example='cs-gpu'),
  aliyunLang?: string(name='aliyunLang', example='zh'),
  dryRun?: boolean(name='dryRun', example='false'),
  entityRules?: EntityDiscoverRule(name='entityRules'),
  envType?: string(name='envType', example='CS'),
  parentAddonReleaseId?: string(name='parentAddonReleaseId', example='policy-xxxxxxxxxxx'),
  releaseName?: string(name='releaseName', example='test-gpu-integration-name'),
  values?: string(name='values', example='{"install":{"mode":"auto-install","listenPort":"9400"},"discoverMode":"instances","discover":{"instances":"worker-k8s-for-cs-c126d87c76218487e83ab322017f11b44"},"scrapeInterval":"15","enableSecuritecs-nodeyGroupInjection":"true","metricTags":""}'),
  version?: string(name='version', description='This parameter is required.', example='0.0.2'),
  workspace?: string(name='workspace', example='default'),
}

model CreateAddonReleaseResponseBody = {
  release?: {
    addonName?: string(name='addonName', example='cs-gpu'),
    alertRuleCount?: long(name='alertRuleCount', example='6'),
    conditions?: [ 
      {
        firstTransitionTime?: string(name='firstTransitionTime', example='2024-11-04T16:10:22+08:00'),
        lastTransitionTime?: string(name='lastTransitionTime', example='2024-11-04T16:10:22+08:00'),
        message?: string(name='message', example='The addon loaded successfully'),
        status?: string(name='status', example='{\\\\"phase\\\\": \\\\"Created\\\\", \\\\"executionDetails\\\\": [], \\\\"invocations\\\\": [], \\\\"latestExecError\\\\": {\\\\"message\\\\": \\\\"\\\\", \\\\"code\\\\": \\\\"\\\\", \\\\"requestId\\\\": \\\\"\\\\", \\\\"extraInfo\\\\": \\\\"\\\\", \\\\"title\\\\": \\\\"\\\\"}}'),
        type?: string(name='type', example='Loaded'),
      }
    ](name='conditions'),
    config?: string(name='config', example='{"install":{"mode":"auto-install","listenPort":"9400"},"discoverMode":"instances","discover":{"instances":"worker-k8s-for-cs-c126d87c76218487e83ab322017f11b44"},"scrapeInterval":"15","enableSecuritecs-nodeyGroupInjection":"true","metricTags":""}'),
    createTime?: string(name='createTime', example='2024-11-05T15:21:30+08:00'),
    dashboardCount?: long(name='dashboardCount', example='3'),
    entityRules?: EntityGroupBase(name='entityRules'),
    envType?: string(name='envType', example='CS'),
    environmentId?: string(name='environmentId', example='policy-xxxxxxxxxxx'),
    exporterCount?: long(name='exporterCount', example='2'),
    haveConfig?: boolean(name='haveConfig', example='true'),
    installUserId?: string(name='installUserId', example='1654218965xxxxxx'),
    language?: string(name='language', example='zh'),
    managed?: boolean(name='managed', example='true'),
    parentAddonReleaseId?: string(name='parentAddonReleaseId', example='policy-xxxxxxxxxxx'),
    policyId?: string(name='policyId', example='policy-xxxxxxxxxx'),
    regionId?: string(name='regionId', example='cn-hangzhou'),
    releaseId?: string(name='releaseId', example='2e898e60-5e6a-46d1-a994-xxxxxxxxxx'),
    releaseName?: string(name='releaseName', example='test-gpu-integration-name'),
    scene?: string(name='scene', example='1'),
    status?: string(name='status', example='200'),
    updateTime?: string(name='updateTime', example='2024-09-13T02:21:02Z'),
    userId?: string(name='userId', example='165421896xxxxxx'),
    version?: string(name='version', example='1.0.0'),
    workspace?: string(name='workspace', example='default'),
  }(name='release'),
  requestId?: string(name='requestId', example='0CEC5375-C554-562B-A65F-9A629907C1F0'),
}

model CreateAddonReleaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAddonReleaseResponseBody(name='body'),
}

/**
 * @summary 安装接入组件，代表进行一次接入
 *
 * @param request CreateAddonReleaseRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAddonReleaseResponse
 */
@context("createAddonReleaseWithContext")
async function createAddonReleaseWithOptions(policyId: string, request: CreateAddonReleaseRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateAddonReleaseResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.addonName)) {
    body['addonName'] = request.addonName;
  }
  if (!$isNull(request.aliyunLang)) {
    body['aliyunLang'] = request.aliyunLang;
  }
  if (!$isNull(request.dryRun)) {
    body['dryRun'] = request.dryRun;
  }
  if (!$isNull(request.entityRules)) {
    body['entityRules'] = request.entityRules;
  }
  if (!$isNull(request.envType)) {
    body['envType'] = request.envType;
  }
  if (!$isNull(request.parentAddonReleaseId)) {
    body['parentAddonReleaseId'] = request.parentAddonReleaseId;
  }
  if (!$isNull(request.releaseName)) {
    body['releaseName'] = request.releaseName;
  }
  if (!$isNull(request.values)) {
    body['values'] = request.values;
  }
  if (!$isNull(request.version)) {
    body['version'] = request.version;
  }
  if (!$isNull(request.workspace)) {
    body['workspace'] = request.workspace;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateAddonRelease',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/integration-policies/${$URL.percentEncode(policyId)}/addon-releases`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 安装接入组件，代表进行一次接入
 *
 * @param request CreateAddonReleaseRequest
 * @return CreateAddonReleaseResponse
 */
async function createAddonRelease(policyId: string, request: CreateAddonReleaseRequest): CreateAddonReleaseResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createAddonReleaseWithOptions(policyId, request, headers, runtime);
}

model CreateAggTaskGroupRequest {
  aggTaskGroupConfig?: string(name='aggTaskGroupConfig', description='This parameter is required.', example='groups:
- name: "node.rules"
  interval: "60s"
  rules:
  - record: "node_namespace_pod:kube_pod_info:"
    expr: "max(label_replace(kube_pod_info{job=\\\\"kubernetes-pods-kube-state-metrics\\\\"\\\\
      }, \\\\"pod\\\\", \\\\"$1\\\\", \\\\"pod\\\\", \\\\"(.*)\\\\")) by (node, namespace, pod, cluster)"'),
  aggTaskGroupConfigType?: string(name='aggTaskGroupConfigType', example='RecordingRuleYaml'),
  aggTaskGroupName?: string(name='aggTaskGroupName', description='This parameter is required.', example='test-group'),
  cronExpr?: string(name='cronExpr', example='0/1 * * * *'),
  delay?: int32(name='delay', example='30'),
  description?: string(name='description', example='desc'),
  fromTime?: long(name='fromTime', example='1724996015'),
  maxRetries?: int32(name='maxRetries', example='20'),
  maxRunTimeInSeconds?: int32(name='maxRunTimeInSeconds', example='600'),
  precheckString?: string(name='precheckString', example='{"policy":"skip","prometheusId":"xxx","query":"scalar(sum(count_over_time(up{job=\\\\"_arms/kubelet/cadvisor\\\\"}[15s])) / 21)","threshold":0.5,"timeout":15,"type":"promql"}'),
  scheduleMode?: string(name='scheduleMode', example='FixedRate'),
  scheduleTimeExpr?: string(name='scheduleTimeExpr', example='@m'),
  status?: string(name='status', example='Running'),
  tags?: [ 
    {
      key?: string(name='key', example='key1'),
      value?: string(name='value', example='value1'),
    }
  ](name='tags'),
  targetPrometheusId?: string(name='targetPrometheusId', description='This parameter is required.', example='rw-pq4apob9jm'),
  toTime?: long(name='toTime', example='0'),
  overrideIfExists?: boolean(name='overrideIfExists', example='true'),
}

model CreateAggTaskGroupResponseBody = {
  aggTaskGroupConfigHash?: string(name='aggTaskGroupConfigHash', example='a54136014dc386a92c83a6ef1e97ff22'),
  aggTaskGroupId?: string(name='aggTaskGroupId', example='aggTaskGroup-f4b8e50525cf41c894488c0c71ec483f'),
  aggTaskGroupName?: string(name='aggTaskGroupName', example='pipeline-aggtask-group'),
  requestId?: string(name='requestId', example='16C0A6D6-C3E7-511D-A60B-A87FD85F5BA7'),
  sourcePrometheusId?: string(name='sourcePrometheusId', example='rw-ecc04af14729b1a16e40a0d10068'),
  status?: string(name='status', example='Pending2Running'),
}

model CreateAggTaskGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAggTaskGroupResponseBody(name='body'),
}

/**
 * @summary 创建聚合任务组
 *
 * @param request CreateAggTaskGroupRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAggTaskGroupResponse
 */
@context("createAggTaskGroupWithContext")
async function createAggTaskGroupWithOptions(instanceId: string, request: CreateAggTaskGroupRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateAggTaskGroupResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.overrideIfExists)) {
    query['overrideIfExists'] = request.overrideIfExists;
  }

  var body : map[string]any = {};
  if (!$isNull(request.aggTaskGroupConfig)) {
    body['aggTaskGroupConfig'] = request.aggTaskGroupConfig;
  }
  if (!$isNull(request.aggTaskGroupConfigType)) {
    body['aggTaskGroupConfigType'] = request.aggTaskGroupConfigType;
  }
  if (!$isNull(request.aggTaskGroupName)) {
    body['aggTaskGroupName'] = request.aggTaskGroupName;
  }
  if (!$isNull(request.cronExpr)) {
    body['cronExpr'] = request.cronExpr;
  }
  if (!$isNull(request.delay)) {
    body['delay'] = request.delay;
  }
  if (!$isNull(request.description)) {
    body['description'] = request.description;
  }
  if (!$isNull(request.fromTime)) {
    body['fromTime'] = request.fromTime;
  }
  if (!$isNull(request.maxRetries)) {
    body['maxRetries'] = request.maxRetries;
  }
  if (!$isNull(request.maxRunTimeInSeconds)) {
    body['maxRunTimeInSeconds'] = request.maxRunTimeInSeconds;
  }
  if (!$isNull(request.precheckString)) {
    body['precheckString'] = request.precheckString;
  }
  if (!$isNull(request.scheduleMode)) {
    body['scheduleMode'] = request.scheduleMode;
  }
  if (!$isNull(request.scheduleTimeExpr)) {
    body['scheduleTimeExpr'] = request.scheduleTimeExpr;
  }
  if (!$isNull(request.status)) {
    body['status'] = request.status;
  }
  if (!$isNull(request.tags)) {
    body['tags'] = request.tags;
  }
  if (!$isNull(request.targetPrometheusId)) {
    body['targetPrometheusId'] = request.targetPrometheusId;
  }
  if (!$isNull(request.toTime)) {
    body['toTime'] = request.toTime;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateAggTaskGroup',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/prometheus-instances/${$URL.percentEncode(instanceId)}/agg-task-groups`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建聚合任务组
 *
 * @param request CreateAggTaskGroupRequest
 * @return CreateAggTaskGroupResponse
 */
async function createAggTaskGroup(instanceId: string, request: CreateAggTaskGroupRequest): CreateAggTaskGroupResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createAggTaskGroupWithOptions(instanceId, request, headers, runtime);
}

model CreateEntityStoreResponseBody = {
  requestId?: string(name='requestId', example='264C3E89-XXXX-XXXX-XXXX-CE9C2196C7DC'),
  workspaceName?: string(name='workspaceName', example='workspace-test-001'),
}

model CreateEntityStoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEntityStoreResponseBody(name='body'),
}

/**
 * @summary 创建EntityStore相关存储
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateEntityStoreResponse
 */
@context("createEntityStoreWithContext")
async function createEntityStoreWithOptions(workspaceName: string, headers: map[string]string, runtime: $RuntimeOptions): CreateEntityStoreResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateEntityStore',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace/${$URL.percentEncode(workspaceName)}/entitystore`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建EntityStore相关存储
 *
 * @return CreateEntityStoreResponse
 */
async function createEntityStore(workspaceName: string): CreateEntityStoreResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createEntityStoreWithOptions(workspaceName, headers, runtime);
}

model CreateIntegrationPolicyRequest {
  entityGroup?: {
    clusterEntityType?: string(name='clusterEntityType', example='acs.ack.cluster'),
    clusterId?: string(name='clusterId', example='na61prod3-na61cloudhdfsssd'),
    disablePolicyShare?: boolean(name='disablePolicyShare'),
    entityGroupId?: string(name='entityGroupId', example='eg-b79f65d11fb94e779867cf937c3a3002'),
    vpcId?: string(name='vpcId', example='vpc-bp18fgg3ffxa9czna40xt'),
  }(name='entityGroup'),
  policyName?: string(name='policyName', example='prod-database'),
  policyType?: string(name='policyType', description='This parameter is required.', example='CS'),
  resourceGroupId?: string(name='resourceGroupId', example='rg-aekz2km4kmhtbii'),
  tags?: [ 
    {
      key?: string(name='key', example='use'),
      value?: string(name='value', example='database'),
    }
  ](name='tags'),
  workspace?: string(name='workspace', example='prometheus'),
}

model CreateIntegrationPolicyResponseBody = {
  created?: boolean(name='created', example='true'),
  policy?: {
    entityGroupId?: string(name='entityGroupId', example='eg-b79f65d11fb94e779867cf937c3a3002'),
    policyId?: string(name='policyId', example='policy-14c8e9a29b0a46da843f8781471062ff'),
    policyName?: string(name='policyName', example='metrics-inner-manage'),
    policyType?: string(name='policyType', example='CS'),
    regionId?: string(name='regionId', example='cn-heyuan'),
    userId?: string(name='userId', example='u1234567'),
    workspace?: string(name='workspace'),
  }(name='policy'),
  requestId?: string(name='requestId', example='CD8BA7D6-995D-578D-9941-78B0FECD14B5'),
}

model CreateIntegrationPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIntegrationPolicyResponseBody(name='body'),
}

/**
 * @summary 创建接入中心策略
 *
 * @param request CreateIntegrationPolicyRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateIntegrationPolicyResponse
 */
@context("createIntegrationPolicyWithContext")
async function createIntegrationPolicyWithOptions(request: CreateIntegrationPolicyRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateIntegrationPolicyResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.entityGroup)) {
    body['entityGroup'] = request.entityGroup;
  }
  if (!$isNull(request.policyName)) {
    body['policyName'] = request.policyName;
  }
  if (!$isNull(request.policyType)) {
    body['policyType'] = request.policyType;
  }
  if (!$isNull(request.resourceGroupId)) {
    body['resourceGroupId'] = request.resourceGroupId;
  }
  if (!$isNull(request.tags)) {
    body['tags'] = request.tags;
  }
  if (!$isNull(request.workspace)) {
    body['workspace'] = request.workspace;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateIntegrationPolicy',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/integration-policies`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建接入中心策略
 *
 * @param request CreateIntegrationPolicyRequest
 * @return CreateIntegrationPolicyResponse
 */
async function createIntegrationPolicy(request: CreateIntegrationPolicyRequest): CreateIntegrationPolicyResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createIntegrationPolicyWithOptions(request, headers, runtime);
}

model CreatePrometheusInstanceRequest {
  archiveDuration?: int32(name='archiveDuration', example='60', nullable=true),
  authFreeReadPolicy?: string(name='authFreeReadPolicy', example='0.0.0.0/0'),
  authFreeWritePolicy?: string(name='authFreeWritePolicy', example='0.0.0.0/0'),
  enableAuthFreeRead?: boolean(name='enableAuthFreeRead', example='true'),
  enableAuthFreeWrite?: boolean(name='enableAuthFreeWrite', example='true'),
  enableAuthToken?: boolean(name='enableAuthToken', example='true'),
  paymentType?: string(name='paymentType', example='POSTPAY'),
  prometheusInstanceName?: string(name='prometheusInstanceName', description='This parameter is required.', example='name1'),
  status?: string(name='status', example='Running'),
  storageDuration?: int32(name='storageDuration', example='90'),
  tags?: [ 
    {
      key?: string(name='key', example='key1'),
      value?: string(name='value', example='110109200001214284'),
    }
  ](name='tags'),
  workspace?: string(name='workspace', example='wokspace1'),
}

model CreatePrometheusInstanceResponseBody = {
  prometheusInstanceId?: string(name='prometheusInstanceId', example='rw-abc123'),
  requestId?: string(name='requestId', description='Id of the request', example='264C3E89-BE6E-5F82-A484-CE9C2196C7DC'),
}

model CreatePrometheusInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePrometheusInstanceResponseBody(name='body'),
}

/**
 * @summary 创建Prometheus监控实例
 *
 * @param request CreatePrometheusInstanceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePrometheusInstanceResponse
 */
@context("createPrometheusInstanceWithContext")
async function createPrometheusInstanceWithOptions(request: CreatePrometheusInstanceRequest, headers: map[string]string, runtime: $RuntimeOptions): CreatePrometheusInstanceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.archiveDuration)) {
    body['archiveDuration'] = request.archiveDuration;
  }
  if (!$isNull(request.authFreeReadPolicy)) {
    body['authFreeReadPolicy'] = request.authFreeReadPolicy;
  }
  if (!$isNull(request.authFreeWritePolicy)) {
    body['authFreeWritePolicy'] = request.authFreeWritePolicy;
  }
  if (!$isNull(request.enableAuthFreeRead)) {
    body['enableAuthFreeRead'] = request.enableAuthFreeRead;
  }
  if (!$isNull(request.enableAuthFreeWrite)) {
    body['enableAuthFreeWrite'] = request.enableAuthFreeWrite;
  }
  if (!$isNull(request.enableAuthToken)) {
    body['enableAuthToken'] = request.enableAuthToken;
  }
  if (!$isNull(request.paymentType)) {
    body['paymentType'] = request.paymentType;
  }
  if (!$isNull(request.prometheusInstanceName)) {
    body['prometheusInstanceName'] = request.prometheusInstanceName;
  }
  if (!$isNull(request.status)) {
    body['status'] = request.status;
  }
  if (!$isNull(request.storageDuration)) {
    body['storageDuration'] = request.storageDuration;
  }
  if (!$isNull(request.tags)) {
    body['tags'] = request.tags;
  }
  if (!$isNull(request.workspace)) {
    body['workspace'] = request.workspace;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreatePrometheusInstance',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/prometheus-instances`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建Prometheus监控实例
 *
 * @param request CreatePrometheusInstanceRequest
 * @return CreatePrometheusInstanceResponse
 */
async function createPrometheusInstance(request: CreatePrometheusInstanceRequest): CreatePrometheusInstanceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createPrometheusInstanceWithOptions(request, headers, runtime);
}

model CreatePrometheusViewRequest {
  authFreeReadPolicy?: string(name='authFreeReadPolicy', example='null'),
  enableAuthFreeRead?: boolean(name='enableAuthFreeRead', example='true'),
  enableAuthToken?: boolean(name='enableAuthToken', example='true'),
  prometheusInstances?: [ 
    {
      prometheusInstanceId?: string(name='prometheusInstanceId', example='arms-1d581fac20a462dcde743d9628'),
      regionId?: string(name='regionId', example='cn-wulanchabu'),
      userId?: string(name='userId', example='167271234567890'),
    }
  ](name='prometheusInstances', description='This parameter is required.'),
  prometheusViewName?: string(name='prometheusViewName', description='This parameter is required.', example='test-prom-view-name'),
  resourceGroupId?: string(name='resourceGroupId', example='rg-acfm3gn5i6bigbi'),
  status?: string(name='status', example='null'),
  tags?: [ 
    {
      key?: string(name='key', example='test-key'),
      value?: string(name='value', example='test-value'),
    }
  ](name='tags'),
  version?: string(name='version', description='This parameter is required.', example='V2'),
  workspace?: string(name='workspace', example='cms-monitor-test-aysls-pub-cn-zhangjiakou-spe-monitor'),
}

model CreatePrometheusViewResponseBody = {
  prometheusViewId?: string(name='prometheusViewId', example='cd5237f7dbd574cf9bbd648ff9efb16cd'),
  requestId?: string(name='requestId', description='Id of the request', example='8FDE2569-626B-5176-9844-28877A*****'),
}

model CreatePrometheusViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePrometheusViewResponseBody(name='body'),
}

/**
 * @summary 创建prometheus视图
 *
 * @param request CreatePrometheusViewRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePrometheusViewResponse
 */
@context("createPrometheusViewWithContext")
async function createPrometheusViewWithOptions(request: CreatePrometheusViewRequest, headers: map[string]string, runtime: $RuntimeOptions): CreatePrometheusViewResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.authFreeReadPolicy)) {
    body['authFreeReadPolicy'] = request.authFreeReadPolicy;
  }
  if (!$isNull(request.enableAuthFreeRead)) {
    body['enableAuthFreeRead'] = request.enableAuthFreeRead;
  }
  if (!$isNull(request.enableAuthToken)) {
    body['enableAuthToken'] = request.enableAuthToken;
  }
  if (!$isNull(request.prometheusInstances)) {
    body['prometheusInstances'] = request.prometheusInstances;
  }
  if (!$isNull(request.prometheusViewName)) {
    body['prometheusViewName'] = request.prometheusViewName;
  }
  if (!$isNull(request.resourceGroupId)) {
    body['resourceGroupId'] = request.resourceGroupId;
  }
  if (!$isNull(request.status)) {
    body['status'] = request.status;
  }
  if (!$isNull(request.tags)) {
    body['tags'] = request.tags;
  }
  if (!$isNull(request.version)) {
    body['version'] = request.version;
  }
  if (!$isNull(request.workspace)) {
    body['workspace'] = request.workspace;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreatePrometheusView',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/prometheus-views`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建prometheus视图
 *
 * @param request CreatePrometheusViewRequest
 * @return CreatePrometheusViewResponse
 */
async function createPrometheusView(request: CreatePrometheusViewRequest): CreatePrometheusViewResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createPrometheusViewWithOptions(request, headers, runtime);
}

model CreatePrometheusVirtualInstanceRequest {
  namespace?: string(name='namespace', description='This parameter is required.', example='cms_prometheus'),
}

model CreatePrometheusVirtualInstanceResponseBody = {
  instance?: {
    createdAt?: string(name='createdAt', example='1751520976660'),
    httpApiUrl?: string(name='httpApiUrl', example='http://xxxxxxx'),
    instanceId?: string(name='instanceId', example='rw-e815960b4c9ebc5c3d89790c7e82'),
    namespace?: string(name='namespace', example='ack-csi-fuse'),
    regionId?: string(name='regionId', example='cn-zhengzhou-jva'),
    userId?: string(name='userId', example='167212345678'),
  }(name='instance'),
  requestId?: string(name='requestId', description='Id of the request', example='0B9377D9-C56B-5C2E-A8A4-************'),
}

model CreatePrometheusVirtualInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePrometheusVirtualInstanceResponseBody(name='body'),
}

/**
 * @summary 创建Prometheus监控实例
 *
 * @param request CreatePrometheusVirtualInstanceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePrometheusVirtualInstanceResponse
 */
@context("createPrometheusVirtualInstanceWithContext")
async function createPrometheusVirtualInstanceWithOptions(request: CreatePrometheusVirtualInstanceRequest, headers: map[string]string, runtime: $RuntimeOptions): CreatePrometheusVirtualInstanceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.namespace)) {
    body['namespace'] = request.namespace;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreatePrometheusVirtualInstance',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/virtual-instances`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建Prometheus监控实例
 *
 * @param request CreatePrometheusVirtualInstanceRequest
 * @return CreatePrometheusVirtualInstanceResponse
 */
async function createPrometheusVirtualInstance(request: CreatePrometheusVirtualInstanceRequest): CreatePrometheusVirtualInstanceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createPrometheusVirtualInstanceWithOptions(request, headers, runtime);
}

model CreateServiceRequest {
  attributes?: string(name='attributes', example='{"language":"java"}'),
  description?: string(name='description'),
  displayName?: string(name='displayName'),
  pid?: string(name='pid', example='bx3udsi5ie@ed2ba6beebdb6de'),
  serviceName?: string(name='serviceName', description='This parameter is required.', example='mag_test'),
  serviceStatus?: string(name='serviceStatus', example='Created'),
  serviceType?: string(name='serviceType', description='This parameter is required.', example='TRACE'),
}

model CreateServiceResponseBody = {
  pid?: string(name='pid', example='cwzxvuc6uo@d60088ad4797d26'),
  requestId?: string(name='requestId', example='3A2FA9E9-9CF1-5CB1-A808-52828F14310D'),
  serviceId?: string(name='serviceId', example='cwzxvuc6uo@4bc6b15ad81f166174ffb'),
}

model CreateServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceResponseBody(name='body'),
}

/**
 * @summary 创建Service
 *
 * @param request CreateServiceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateServiceResponse
 */
@context("createServiceWithContext")
async function createServiceWithOptions(workspace: string, request: CreateServiceRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateServiceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.attributes)) {
    body['attributes'] = request.attributes;
  }
  if (!$isNull(request.description)) {
    body['description'] = request.description;
  }
  if (!$isNull(request.displayName)) {
    body['displayName'] = request.displayName;
  }
  if (!$isNull(request.pid)) {
    body['pid'] = request.pid;
  }
  if (!$isNull(request.serviceName)) {
    body['serviceName'] = request.serviceName;
  }
  if (!$isNull(request.serviceStatus)) {
    body['serviceStatus'] = request.serviceStatus;
  }
  if (!$isNull(request.serviceType)) {
    body['serviceType'] = request.serviceType;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateService',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace/${$URL.percentEncode(workspace)}/service`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建Service
 *
 * @param request CreateServiceRequest
 * @return CreateServiceResponse
 */
async function createService(workspace: string, request: CreateServiceRequest): CreateServiceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createServiceWithOptions(workspace, request, headers, runtime);
}

model CreateTicketRequest {
  accessTokenExpirationTime?: long(name='accessTokenExpirationTime', example='600'),
  expirationTime?: long(name='expirationTime', example='86400'),
}

model CreateTicketResponseBody = {
  ticket?: string(name='ticket', example='eyJ***************.eyJ******************.KUT****************'),
}

model CreateTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTicketResponseBody(name='body'),
}

/**
 * @summary 创建票据
 *
 * @param request CreateTicketRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateTicketResponse
 */
@context("createTicketWithContext")
async function createTicketWithOptions(request: CreateTicketRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateTicketResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.accessTokenExpirationTime)) {
    query['accessTokenExpirationTime'] = request.accessTokenExpirationTime;
  }
  if (!$isNull(request.expirationTime)) {
    query['expirationTime'] = request.expirationTime;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateTicket',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/tickets`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建票据
 *
 * @param request CreateTicketRequest
 * @return CreateTicketResponse
 */
async function createTicket(request: CreateTicketRequest): CreateTicketResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createTicketWithOptions(request, headers, runtime);
}

model CreateUmodelRequest {
  description?: string(name='description', example='workspace test'),
}

model CreateUmodelResponseBody = {
  requestId?: string(name='requestId', example='123-0F43-23423-AC43-34234'),
  workspace?: string(name='workspace', example='workspace-test'),
}

model CreateUmodelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUmodelResponseBody(name='body'),
}

/**
 * @summary 创建Umodel配置
 *
 * @param request CreateUmodelRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateUmodelResponse
 */
@context("createUmodelWithContext")
async function createUmodelWithOptions(workspace: string, request: CreateUmodelRequest, headers: map[string]string, runtime: $RuntimeOptions): CreateUmodelResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.description)) {
    body['description'] = request.description;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateUmodel',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace/${$URL.percentEncode(workspace)}/umodel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建Umodel配置
 *
 * @param request CreateUmodelRequest
 * @return CreateUmodelResponse
 */
async function createUmodel(workspace: string, request: CreateUmodelRequest): CreateUmodelResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return createUmodelWithOptions(workspace, request, headers, runtime);
}

model DeleteAddonReleaseRequest {
  addonName?: string(name='addonName', example='cs-gpu'),
  force?: boolean(name='force', example='false'),
  releaseName?: string(name='releaseName', example='test-gpu-integration-name'),
}

model DeleteAddonReleaseResponseBody = {
  requestId?: string(name='requestId', example='264C3E89-BE6E-5F82-A484-CE9C2196C7DC'),
}

model DeleteAddonReleaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAddonReleaseResponseBody(name='body'),
}

/**
 * @summary 删除addon release信息
 *
 * @param request DeleteAddonReleaseRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAddonReleaseResponse
 */
@context("deleteAddonReleaseWithContext")
async function deleteAddonReleaseWithOptions(policyId: string, request: DeleteAddonReleaseRequest, headers: map[string]string, runtime: $RuntimeOptions): DeleteAddonReleaseResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.addonName)) {
    query['addonName'] = request.addonName;
  }
  if (!$isNull(request.force)) {
    query['force'] = request.force;
  }
  if (!$isNull(request.releaseName)) {
    query['releaseName'] = request.releaseName;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteAddonRelease',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/integration-policies/${$URL.percentEncode(policyId)}/addon-releases`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除addon release信息
 *
 * @param request DeleteAddonReleaseRequest
 * @return DeleteAddonReleaseResponse
 */
async function deleteAddonRelease(policyId: string, request: DeleteAddonReleaseRequest): DeleteAddonReleaseResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteAddonReleaseWithOptions(policyId, request, headers, runtime);
}

model DeleteAggTaskGroupResponseBody = {
  requestId?: string(name='requestId', example='264C3E89-XXXX-XXXX-XXXX-CE9C2196C7DC'),
}

model DeleteAggTaskGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAggTaskGroupResponseBody(name='body'),
}

/**
 * @summary 删除聚合任务组
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAggTaskGroupResponse
 */
@context("deleteAggTaskGroupWithContext")
async function deleteAggTaskGroupWithOptions(instanceId: string, groupId: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteAggTaskGroupResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteAggTaskGroup',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/prometheus-instances/${$URL.percentEncode(instanceId)}/agg-task-groups/${$URL.percentEncode(groupId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除聚合任务组
 *
 * @return DeleteAggTaskGroupResponse
 */
async function deleteAggTaskGroup(instanceId: string, groupId: string): DeleteAggTaskGroupResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteAggTaskGroupWithOptions(instanceId, groupId, headers, runtime);
}

model DeleteEntityStoreResponseBody = {
  requestId?: string(name='requestId', example='264C3E89-XXXX-XXXX-XXXX-CE9C2196C7DC'),
}

model DeleteEntityStoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEntityStoreResponseBody(name='body'),
}

/**
 * @summary 删除EntityStore相关存储
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEntityStoreResponse
 */
@context("deleteEntityStoreWithContext")
async function deleteEntityStoreWithOptions(workspaceName: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteEntityStoreResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteEntityStore',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace/${$URL.percentEncode(workspaceName)}/entitystore`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除EntityStore相关存储
 *
 * @return DeleteEntityStoreResponse
 */
async function deleteEntityStore(workspaceName: string): DeleteEntityStoreResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteEntityStoreWithOptions(workspaceName, headers, runtime);
}

model DeleteIntegrationPolicyRequest {
  force?: boolean(name='force', example='false'),
}

model DeleteIntegrationPolicyResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='CD8BA7D6-995D-578D-9941-78B0FECD14B5'),
}

model DeleteIntegrationPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIntegrationPolicyResponseBody(name='body'),
}

/**
 * @summary 删除接入中心策略
 *
 * @param request DeleteIntegrationPolicyRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteIntegrationPolicyResponse
 */
@context("deleteIntegrationPolicyWithContext")
async function deleteIntegrationPolicyWithOptions(policyId: string, request: DeleteIntegrationPolicyRequest, headers: map[string]string, runtime: $RuntimeOptions): DeleteIntegrationPolicyResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.force)) {
    query['force'] = request.force;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteIntegrationPolicy',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/integration-policies/${$URL.percentEncode(policyId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除接入中心策略
 *
 * @param request DeleteIntegrationPolicyRequest
 * @return DeleteIntegrationPolicyResponse
 */
async function deleteIntegrationPolicy(policyId: string, request: DeleteIntegrationPolicyRequest): DeleteIntegrationPolicyResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteIntegrationPolicyWithOptions(policyId, request, headers, runtime);
}

model DeletePrometheusInstanceResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='8FDE2569-626B-5176-9844-28877A*****'),
}

model DeletePrometheusInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePrometheusInstanceResponseBody(name='body'),
}

/**
 * @summary 删除prom实例
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeletePrometheusInstanceResponse
 */
@context("deletePrometheusInstanceWithContext")
async function deletePrometheusInstanceWithOptions(prometheusInstanceId: string, headers: map[string]string, runtime: $RuntimeOptions): DeletePrometheusInstanceResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeletePrometheusInstance',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/prometheus-instances/${$URL.percentEncode(prometheusInstanceId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除prom实例
 *
 * @return DeletePrometheusInstanceResponse
 */
async function deletePrometheusInstance(prometheusInstanceId: string): DeletePrometheusInstanceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deletePrometheusInstanceWithOptions(prometheusInstanceId, headers, runtime);
}

model DeletePrometheusViewResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='0CEC5375-C554-562B-A65F-9A629907C1F0'),
}

model DeletePrometheusViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePrometheusViewResponseBody(name='body'),
}

/**
 * @summary 删除prometheus视图实例
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeletePrometheusViewResponse
 */
@context("deletePrometheusViewWithContext")
async function deletePrometheusViewWithOptions(prometheusViewId: string, headers: map[string]string, runtime: $RuntimeOptions): DeletePrometheusViewResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeletePrometheusView',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/prometheus-views/${$URL.percentEncode(prometheusViewId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除prometheus视图实例
 *
 * @return DeletePrometheusViewResponse
 */
async function deletePrometheusView(prometheusViewId: string): DeletePrometheusViewResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deletePrometheusViewWithOptions(prometheusViewId, headers, runtime);
}

model DeleteServiceResponseBody = {
  requestId?: string(name='requestId', example='51B6A3E8-EA9E-5143-BE11-8E5F83474C95'),
}

model DeleteServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServiceResponseBody(name='body'),
}

/**
 * @summary 删除Service
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteServiceResponse
 */
@context("deleteServiceWithContext")
async function deleteServiceWithOptions(workspace: string, serviceId: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteServiceResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteService',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace/${$URL.percentEncode(workspace)}/service/${$URL.percentEncode(serviceId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除Service
 *
 * @return DeleteServiceResponse
 */
async function deleteService(workspace: string, serviceId: string): DeleteServiceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteServiceWithOptions(workspace, serviceId, headers, runtime);
}

model DeleteUmodelResponseBody = {
  requestId?: string(name='requestId', example='123123-3213-345-9941-345345345'),
}

model DeleteUmodelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUmodelResponseBody(name='body'),
}

/**
 * @summary 删除Umodel配置信息
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteUmodelResponse
 */
@context("deleteUmodelWithContext")
async function deleteUmodelWithOptions(workspace: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteUmodelResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteUmodel',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace/${$URL.percentEncode(workspace)}/umodel`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除Umodel配置信息
 *
 * @return DeleteUmodelResponse
 */
async function deleteUmodel(workspace: string): DeleteUmodelResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteUmodelWithOptions(workspace, headers, runtime);
}

model DeleteUmodelDataRequest {
  domain?: string(name='domain', example='apm'),
  kind?: string(name='kind', example='metric_set'),
  name?: string(name='name', example='test'),
}

model DeleteUmodelDataResponseBody = {
  requestId?: string(name='requestId', example='111111-222-333-1111-33333'),
}

model DeleteUmodelDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUmodelDataResponseBody(name='body'),
}

/**
 * @summary 删除 Umodel Elements
 *
 * @param request DeleteUmodelDataRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteUmodelDataResponse
 */
@context("deleteUmodelDataWithContext")
async function deleteUmodelDataWithOptions(workspace: string, request: DeleteUmodelDataRequest, headers: map[string]string, runtime: $RuntimeOptions): DeleteUmodelDataResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.domain)) {
    query['domain'] = request.domain;
  }
  if (!$isNull(request.kind)) {
    query['kind'] = request.kind;
  }
  if (!$isNull(request.name)) {
    query['name'] = request.name;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteUmodelData',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace/${$URL.percentEncode(workspace)}/umodel/data`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除 Umodel Elements
 *
 * @param request DeleteUmodelDataRequest
 * @return DeleteUmodelDataResponse
 */
async function deleteUmodelData(workspace: string, request: DeleteUmodelDataRequest): DeleteUmodelDataResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteUmodelDataWithOptions(workspace, request, headers, runtime);
}

model DeleteWorkspaceResponseBody = {
  requestId?: string(name='requestId', example='264C3E89-XXXX-XXXX-XXXX-CE9C2196C7DC'),
}

model DeleteWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkspaceResponseBody(name='body'),
}

/**
 * @summary 删除工作空间
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWorkspaceResponse
 */
@context("deleteWorkspaceWithContext")
async function deleteWorkspaceWithOptions(workspaceName: string, headers: map[string]string, runtime: $RuntimeOptions): DeleteWorkspaceResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteWorkspace',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace/${$URL.percentEncode(workspaceName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除工作空间
 *
 * @return DeleteWorkspaceResponse
 */
async function deleteWorkspace(workspaceName: string): DeleteWorkspaceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteWorkspaceWithOptions(workspaceName, headers, runtime);
}

model GetAddonReleaseResponseBody = {
  config?: string(name='config', example='{"install":{"mode":"auto-install","listenPort":"9400"},"discoverMode":"instances","discover":{"instances":"worker-k8s-for-cs-c126d87c76218487e83ab322017f11b44"},"scrapeInterval":"15","enableSecuritecs-nodeyGroupInjection":"true","metricTags":""}'),
  release?: {
    addonName?: string(name='addonName', example='cs-gpu'),
    alertRuleCount?: long(name='alertRuleCount', example='6'),
    conditions?: [ 
      {
        firstTransitionTime?: string(name='firstTransitionTime', example='2024-11-04T16:10:22+08:00'),
        lastTransitionTime?: string(name='lastTransitionTime', example='2024-11-04T16:10:22+08:00'),
        message?: string(name='message', example='The addon loaded successfully'),
        status?: string(name='status', example='True'),
        type?: string(name='type', example='Loaded'),
      }
    ](name='conditions'),
    config?: string(name='config', example='{"install":{"mode":"auto-install","listenPort":"9400"},"discoverMode":"instances","discover":{"instances":"worker-k8s-for-cs-c126d87c76218487e83ab322017f11b44"},"scrapeInterval":"15","enableSecuritecs-nodeyGroupInjection":"true","metricTags":""}'),
    createTime?: string(name='createTime', example='2024-11-04T16:10:12+08:00'),
    dashboardCount?: long(name='dashboardCount', example='3'),
    entityRules?: EntityGroupBase(name='entityRules'),
    envType?: string(name='envType', example='CS'),
    environmentId?: string(name='environmentId', example='policy-xxxxxxxxxxx'),
    exporterCount?: long(name='exporterCount', example='2'),
    haveConfig?: boolean(name='haveConfig', example='true'),
    installUserId?: string(name='installUserId', example='1707xxxxxxxxxxxx'),
    language?: string(name='language', example='zh'),
    managed?: boolean(name='managed', example='true'),
    parentAddonReleaseId?: string(name='parentAddonReleaseId', example='policy-xxxxxxxxxxxxx'),
    policyId?: string(name='policyId', example='policy-xxxxxxxxxxxxx'),
    regionId?: string(name='regionId', example='cn-hangzhou'),
    releaseId?: string(name='releaseId', description='Release ID。', example='7339d808-66f9-4d40-83fa-xxxxxxxxxxx'),
    releaseName?: string(name='releaseName', example='test-gpu-integration-name'),
    scene?: string(name='scene', example='container'),
    status?: string(name='status', example='running'),
    updateTime?: string(name='updateTime', example='2024-11-04T16:10:12+08:00'),
    userId?: string(name='userId', example='1707xxxxxxxxxxxx'),
    version?: string(name='version', example='0.0.2'),
    workspace?: string(name='workspace', example='default'),
  }(name='release'),
  requestId?: string(name='requestId', example='0B9377D9-C56B-5C2E-A8A4-A01D6CC3F4B8'),
}

model GetAddonReleaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAddonReleaseResponseBody(name='body'),
}

/**
 * @summary 查看addon release(查看接入状态)
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAddonReleaseResponse
 */
@context("getAddonReleaseWithContext")
async function getAddonReleaseWithOptions(releaseName: string, policyId: string, headers: map[string]string, runtime: $RuntimeOptions): GetAddonReleaseResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetAddonRelease',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/integration-policies/${$URL.percentEncode(policyId)}/addon-releases/${$URL.percentEncode(releaseName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看addon release(查看接入状态)
 *
 * @return GetAddonReleaseResponse
 */
async function getAddonRelease(releaseName: string, policyId: string): GetAddonReleaseResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getAddonReleaseWithOptions(releaseName, policyId, headers, runtime);
}

model GetAggTaskGroupResponseBody = {
  aggTaskGroup?: {
    aggTaskGroupConfig?: string(name='aggTaskGroupConfig', example='groups:
- name: "node.rules"
  interval: "60s"
  rules:
  - record: "node_namespace_pod:kube_pod_info:"
    expr: "max(label_replace(kube_pod_info{job=\\\\"kubernetes-pods-kube-state-metrics\\\\"\\\\
      }, \\\\"pod\\\\", \\\\"$1\\\\", \\\\"pod\\\\", \\\\"(.*)\\\\")) by (node, namespace, pod, cluster)"'),
    aggTaskGroupConfigHash?: string(name='aggTaskGroupConfigHash', example='a54136xxx'),
    aggTaskGroupId?: string(name='aggTaskGroupId', example='aggTaskGroup-xx'),
    aggTaskGroupName?: string(name='aggTaskGroupName', example='pipeline-aggtask-group'),
    cronExpr?: string(name='cronExpr', example='0 1 3 * * ? *'),
    delay?: int32(name='delay', example='2'),
    description?: string(name='description', example='test'),
    fromTime?: long(name='fromTime', example='1757409495'),
    maxRetries?: int32(name='maxRetries', example='2'),
    maxRunTimeInSeconds?: int32(name='maxRunTimeInSeconds', example='50'),
    precheckString?: string(name='precheckString', example='{"policy":"skip","prometheusId":"rw-xx","query":"noPrecheck","threshold":0.5,"timeout":15,"type":"none"}'),
    regionId?: string(name='regionId', example='cn-zhangjiakou'),
    scheduleMode?: string(name='scheduleMode', example='FixedRate'),
    scheduleTimeExpr?: string(name='scheduleTimeExpr', example='@m'),
    sourcePrometheusId?: string(name='sourcePrometheusId', example='rw-xxx'),
    status?: string(name='status', example='Running'),
    tags?: [ 
      {
        key?: string(name='key', example='key1'),
        value?: string(name='value', example='value1'),
      }
    ](name='tags'),
    targetPrometheusId?: string(name='targetPrometheusId', example='rw-xxx'),
    toTime?: long(name='toTime', example='1757409495'),
    updateTime?: string(name='updateTime', example='1757409499000'),
    userId?: string(name='userId', example='123xxx'),
  }(name='aggTaskGroup'),
  requestId?: string(name='requestId', example='68DAF543-35DF-5762-BE90-F5C00B5DC036'),
  success?: boolean(name='success', example='True'),
}

model GetAggTaskGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAggTaskGroupResponseBody(name='body'),
}

/**
 * @summary 描述聚合任务组
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAggTaskGroupResponse
 */
@context("getAggTaskGroupWithContext")
async function getAggTaskGroupWithOptions(instanceId: string, groupId: string, headers: map[string]string, runtime: $RuntimeOptions): GetAggTaskGroupResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetAggTaskGroup',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/prometheus-instances/${$URL.percentEncode(instanceId)}/agg-task-groups/${$URL.percentEncode(groupId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 描述聚合任务组
 *
 * @return GetAggTaskGroupResponse
 */
async function getAggTaskGroup(instanceId: string, groupId: string): GetAggTaskGroupResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getAggTaskGroupWithOptions(instanceId, groupId, headers, runtime);
}

model GetEntityStoreResponseBody = {
  regionId?: string(name='regionId', example='cn-heyuan'),
  requestId?: string(name='requestId', example='264C3E89-XXXX-XXXX-XXXX-CE9C2196C7DC'),
  workspaceName?: string(name='workspaceName', example='workspace-test-001'),
}

model GetEntityStoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEntityStoreResponseBody(name='body'),
}

/**
 * @summary 获取EntityStore相关存储信息
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEntityStoreResponse
 */
@context("getEntityStoreWithContext")
async function getEntityStoreWithOptions(workspaceName: string, headers: map[string]string, runtime: $RuntimeOptions): GetEntityStoreResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetEntityStore',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace/${$URL.percentEncode(workspaceName)}/entitystore`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取EntityStore相关存储信息
 *
 * @return GetEntityStoreResponse
 */
async function getEntityStore(workspaceName: string): GetEntityStoreResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getEntityStoreWithOptions(workspaceName, headers, runtime);
}

model GetEntityStoreDataHeaders {
  commonHeaders?: map[string]string,
  acceptEncoding?: string(name='acceptEncoding', example='gzip'),
}

model GetEntityStoreDataRequest {
  from?: int32(name='from', description='This parameter is required.', example='1721767203'),
  query?: string(name='query', description='This parameter is required.', example='.entity with(domain=\\\\"acs\\\\", type=\\\\"acs.k8s.node\\\\") | limit 0, 10'),
  to?: int32(name='to', description='This parameter is required.', example='1721767283'),
}

model GetEntityStoreDataResponseBody = {
  data?: [[ string ]  ](name='data'),
  header?: [ string ](name='header'),
  requestId?: string(name='requestId', example='264C3E89-XXXX-XXXX-XXXX-CE9C2196C7DC'),
  responseStatus?: {
    executionStates?: string(name='executionStates'),
    level?: string(name='level'),
    result?: string(name='result'),
    retryPolicy?: string(name='retryPolicy'),
    statusItem?: [ 
      {
        code?: string(name='code'),
        level?: string(name='level'),
        message?: string(name='message'),
        suggestion?: string(name='suggestion'),
      }
    ](name='statusItem'),
  }(name='responseStatus'),
}

model GetEntityStoreDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEntityStoreDataResponseBody(name='body'),
}

/**
 * @summary 查询指定Workspace下的实体和关系数据，返回结果显示某时间区间中的实体数据（返回结果压缩后传输）。
 *
 * @param request GetEntityStoreDataRequest
 * @param headers GetEntityStoreDataHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEntityStoreDataResponse
 */
@context("getEntityStoreDataWithContext")
async function getEntityStoreDataWithOptions(workspace: string, request: GetEntityStoreDataRequest, headers: GetEntityStoreDataHeaders, runtime: $RuntimeOptions): GetEntityStoreDataResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.from)) {
    body['from'] = request.from;
  }
  if (!$isNull(request.query)) {
    body['query'] = request.query;
  }
  if (!$isNull(request.to)) {
    body['to'] = request.to;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.acceptEncoding)) {
    realHeaders['acceptEncoding'] = $string(headers.acceptEncoding);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetEntityStoreData',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace/${$URL.percentEncode(workspace)}/entitiesAndRelations`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询指定Workspace下的实体和关系数据，返回结果显示某时间区间中的实体数据（返回结果压缩后传输）。
 *
 * @param request GetEntityStoreDataRequest
 * @return GetEntityStoreDataResponse
 */
async function getEntityStoreData(workspace: string, request: GetEntityStoreDataRequest): GetEntityStoreDataResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new GetEntityStoreDataHeaders{};
  return getEntityStoreDataWithOptions(workspace, request, headers, runtime);
}

model GetIntegrationPolicyResponseBody = {
  policy?: {
    bindResource?: {
      clusterId?: string(name='clusterId', example='00b1630f02814f95a9bce717d8d56bb2'),
      clusterType?: string(name='clusterType', example='ManagedKubernetes'),
      vpcCidr?: string(name='vpcCidr', example='10.12.0.1/16'),
      vpcId?: string(name='vpcId', example='vpc-2zegqpeyxplhtmdg70xnr'),
    }(name='bindResource'),
    entityGroup?: {
      description?: string(name='description', example='xxxxxx'),
      entityGroupId?: string(name='entityGroupId', example='eg-b79f65d11fb94e779867cf937c3a3002'),
      entityGroupName?: string(name='entityGroupName', example='prod-database'),
      entityRules?: {
        annotations?: [ 
          {
            op?: string(name='op', example='add'),
            tagKey?: string(name='tagKey', example='use'),
            tagValues?: [ string ](name='tagValues'),
          }
        ](name='annotations'),
        entityTypes?: [ string ](name='entityTypes'),
        fieldRules?: [ 
          {
            fieldKey?: string(name='fieldKey', example='test'),
            fieldValues?: [ string ](name='fieldValues'),
            op?: string(name='op', example='add'),
          }
        ](name='fieldRules'),
        instanceIds?: [ string ](name='instanceIds'),
        ipMatchRule?: {
          ipCidr?: string(name='ipCidr', example='10.10.0.1/16'),
          ipFieldKey?: string(name='ipFieldKey', example='test-key'),
        }(name='ipMatchRule'),
        labels?: [ 
          {
            op?: string(name='op', example='add'),
            tagKey?: string(name='tagKey', example='key1'),
            tagValues?: [ string ](name='tagValues'),
          }
        ](name='labels'),
        regionIds?: [ string ](name='regionIds'),
        resourceGroupId?: string(name='resourceGroupId', example='rg-aek3aqsuvlv3yyq'),
        tags?: [ 
          {
            op?: string(name='op', example='add'),
            tagKey?: string(name='tagKey', example='key2'),
            tagValues?: [ string ](name='tagValues'),
          }
        ](name='tags'),
      }(name='entityRules'),
      query?: string(name='query', example='status: 200 AND totalTime > 0.5'),
      regionId?: string(name='regionId', example='cn-heyuan'),
      userId?: string(name='userId', example='u123456'),
      workspace?: string(name='workspace', example='test-api'),
    }(name='entityGroup'),
    managedInfo?: {
      securityGroupId?: string(name='securityGroupId', example='sg-xxxxxx'),
      vswitchId?: string(name='vswitchId', example='vsw-xxxxxxxxx'),
    }(name='managedInfo'),
    policyId?: string(name='policyId', example='policy-c9efed2b99c348d49e589c5f780fc074'),
    policyName?: string(name='policyName', example='ControlPolicy4DetailVportInfo'),
    policyType?: string(name='policyType', example='CS'),
    regionId?: string(name='regionId', example='cn-heyuan'),
    resourceGroupId?: string(name='resourceGroupId', example='rg-xxxxx'),
    tags?: [ 
      {
        key?: string(name='key', example='use'),
        value?: string(name='value', example='db'),
      }
    ](name='tags'),
    userId?: string(name='userId', example='u123456'),
    workspace?: string(name='workspace', example='prometheus'),
  }(name='policy'),
  requestId?: string(name='requestId', description='Id of the request', example='0B9377D9-C56B-5C2E-A8A4-A01D6CC3F4B8'),
}

model GetIntegrationPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIntegrationPolicyResponseBody(name='body'),
}

/**
 * @summary 查询接入中心策略列表信息
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetIntegrationPolicyResponse
 */
@context("getIntegrationPolicyWithContext")
async function getIntegrationPolicyWithOptions(policyId: string, headers: map[string]string, runtime: $RuntimeOptions): GetIntegrationPolicyResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetIntegrationPolicy',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/integration-policies/${$URL.percentEncode(policyId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询接入中心策略列表信息
 *
 * @return GetIntegrationPolicyResponse
 */
async function getIntegrationPolicy(policyId: string): GetIntegrationPolicyResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getIntegrationPolicyWithOptions(policyId, headers, runtime);
}

model GetPrometheusInstanceRequest {
  aliyunLang?: string(name='aliyunLang', example='zh'),
  resourceGroupId?: string(name='resourceGroupId', example='rg-aek2bhocin5e2na'),
}

model GetPrometheusInstanceResponseBody = {
  prometheusInstance?: {
    accessType?: string(name='accessType', example='readOnly'),
    archiveDuration?: int32(name='archiveDuration', example='165'),
    authFreeReadPolicy?: string(name='authFreeReadPolicy', example='0.0.0.0/0'),
    authFreeWritePolicy?: string(name='authFreeWritePolicy', example='0.0.0.0/0'),
    authToken?: string(name='authToken', example='eJwixxxxx'),
    createTime?: string(name='createTime', example='2025-08-10T02:07:53Z'),
    enableAuthFreeRead?: boolean(name='enableAuthFreeRead', example='true'),
    enableAuthFreeWrite?: boolean(name='enableAuthFreeWrite', example='true'),
    enableAuthToken?: boolean(name='enableAuthToken', example='true'),
    extraInfo?: map[string]string(name='extraInfo'),
    folderUrl?: string(name='folderUrl', example='https://gnew.console.aliyun.com/dashboards/f/c49a80d2a551d4a20a8c4b996b0be4e52/xxxxxxx'),
    grafanaInstanceId?: string(name='grafanaInstanceId', example='SHARED'),
    grafanaInstanceName?: string(name='grafanaInstanceName'),
    httpApiInterUrl?: string(name='httpApiInterUrl', example='http://workspace-default-cms-xxxxxxx'),
    httpApiIntraUrl?: string(name='httpApiIntraUrl', example='http://workspace-default-cms-xxxxxxx'),
    instanceType?: string(name='instanceType', description='remote-write（Prometheus for Remote Write）', example='e1'),
    paymentType?: string(name='paymentType', example='prepaid'),
    paymentTypeUpdateTime?: string(name='paymentTypeUpdateTime', example='null'),
    product?: string(name='product', example='NAS'),
    prometheusInstanceId?: string(name='prometheusInstanceId', example='rw-524ada714221af267c73122af2e1'),
    prometheusInstanceName?: string(name='prometheusInstanceName', example='test-prom-name'),
    pushGatewayInterUrl?: string(name='pushGatewayInterUrl', example='http://workspace-default-cms-xxxxxxx'),
    pushGatewayIntraUrl?: string(name='pushGatewayIntraUrl', example='http://workspace-default-cms-xxxxxxx'),
    regionId?: string(name='regionId', example='cn-heyuan'),
    remoteReadInterUrl?: string(name='remoteReadInterUrl', example='http://workspace-default-cms-xxxxxxx'),
    remoteReadIntraUrl?: string(name='remoteReadIntraUrl', example='https://workspace-default-cms-1xxxxxxxxxx'),
    remoteWriteInterUrl?: string(name='remoteWriteInterUrl', example='https://workspace-default-cms-xxxxxxxxxx'),
    remoteWriteIntraUrl?: string(name='remoteWriteIntraUrl', example='https://workspace-default-cms-xxxxxxxxxx'),
    resourceGroupId?: string(name='resourceGroupId', example='rg-acfm3gn5i6bigbi'),
    resourceType?: string(name='resourceType', example='Prometheus'),
    status?: string(name='status', example='Running'),
    storageDuration?: int32(name='storageDuration', example='90'),
    supportAuthTypes?: [ string ](name='supportAuthTypes'),
    tags?: [ 
      {
        key?: string(name='key', example='openStorage'),
        value?: string(name='value', example='130303196111114281'),
      }
    ](name='tags'),
    userId?: string(name='userId', example='170731234567'),
    version?: string(name='version', example='*'),
    workspace?: string(name='workspace', example='rum-monitor-test-aysls-pub-cn-qingdao-monitor'),
  }(name='prometheusInstance'),
  requestId?: string(name='requestId', description='Id of the request', example='264C3E89-XXXX-XXXX-XXXX-CE9C2196C7DC'),
}

model GetPrometheusInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPrometheusInstanceResponseBody(name='body'),
}

/**
 * @summary 查询指定环境实例
 *
 * @param request GetPrometheusInstanceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPrometheusInstanceResponse
 */
@context("getPrometheusInstanceWithContext")
async function getPrometheusInstanceWithOptions(prometheusInstanceId: string, request: GetPrometheusInstanceRequest, headers: map[string]string, runtime: $RuntimeOptions): GetPrometheusInstanceResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.aliyunLang)) {
    query['aliyunLang'] = request.aliyunLang;
  }
  if (!$isNull(request.resourceGroupId)) {
    query['resourceGroupId'] = request.resourceGroupId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetPrometheusInstance',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/prometheus-instances/${$URL.percentEncode(prometheusInstanceId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询指定环境实例
 *
 * @param request GetPrometheusInstanceRequest
 * @return GetPrometheusInstanceResponse
 */
async function getPrometheusInstance(prometheusInstanceId: string, request: GetPrometheusInstanceRequest): GetPrometheusInstanceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getPrometheusInstanceWithOptions(prometheusInstanceId, request, headers, runtime);
}

model GetPrometheusViewRequest {
  aliyunLang?: string(name='aliyunLang', example='zh'),
  resourceGroupId?: string(name='resourceGroupId', example='rg-aek2bhocin5e2na'),
}

model GetPrometheusViewResponseBody = {
  prometheusView?: {
    authFreeReadPolicy?: string(name='authFreeReadPolicy', example='0.0.0.0/0'),
    authToken?: string(name='authToken', example='eJxxxxxx'),
    createTime?: string(name='createTime', example='2025-08-10T02:07:53Z'),
    enableAuthFreeRead?: boolean(name='enableAuthFreeRead', example='true'),
    enableAuthToken?: boolean(name='enableAuthToken', example='true'),
    folderUrl?: string(name='folderUrl', example='https://xxxx'),
    grafanaInstanceId?: string(name='grafanaInstanceId', example='g-xxx'),
    grafanaInstanceName?: string(name='grafanaInstanceName', example='gxxx'),
    httpApiInterUrl?: string(name='httpApiInterUrl', example='http://xxxxxxxx'),
    httpApiIntraUrl?: string(name='httpApiIntraUrl', example='http://xxxxxxxx'),
    instanceType?: string(name='instanceType', example='prom-view'),
    paymentType?: string(name='paymentType', example='FREE'),
    product?: string(name='product', example='cms'),
    prometheusInstances?: [ 
      {
        prometheusInstanceId?: string(name='prometheusInstanceId', example='rw-63549e054ff596a4149927961dff'),
        regionId?: string(name='regionId', example='cn-north-2-gov-1'),
        userId?: string(name='userId', example='122xxxxx'),
      }
    ](name='prometheusInstances'),
    prometheusViewId?: string(name='prometheusViewId', example='view-xxx'),
    prometheusViewName?: string(name='prometheusViewName', example='view1'),
    regionId?: string(name='regionId', example='cn-shanghai'),
    remoteReadInterUrl?: string(name='remoteReadInterUrl', example='http://workspace-default-cms-xxx-cn-hangzhou.cn-hangzhou.log.aliyuncs.com/prometheus/workspace-default-cms-xxx-cn-hangzhou/xxx/api/v1/read'),
    remoteReadIntraUrl?: string(name='remoteReadIntraUrl', example='http://workspace-default-cms-xxx-cn-hangzhou.cn-hangzhou-intranet.log.aliyuncs.com/prometheus/workspace-default-cms-xxx-cn-hangzhou/xxx/api/v1/read'),
    resourceGroupId?: string(name='resourceGroupId', example='rg-acfm3gn5i6bigbi'),
    resourceType?: string(name='resourceType', example='RegistryModule'),
    status?: string(name='status', example='Pending2Running'),
    supportAuthTypes?: [ string ](name='supportAuthTypes'),
    tags?: [ 
      {
        key?: string(name='key', example='global_score_series'),
        value?: string(name='value', example='371293199010092839'),
      }
    ](name='tags'),
    userId?: string(name='userId', example='11222'),
    version?: string(name='version', example='V1'),
    workspace?: string(name='workspace', example='cms-monitor-test-aysls-pub-cn-fuzhou-monitor'),
  }(name='prometheusView'),
  requestId?: string(name='requestId', description='Id of the request', example='0B9377D9-C56B-5C2E-A8A4-A01D6CC3F4B8'),
}

model GetPrometheusViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPrometheusViewResponseBody(name='body'),
}

/**
 * @summary 查询指定Prometheus视图实例
 *
 * @param request GetPrometheusViewRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPrometheusViewResponse
 */
@context("getPrometheusViewWithContext")
async function getPrometheusViewWithOptions(prometheusViewId: string, request: GetPrometheusViewRequest, headers: map[string]string, runtime: $RuntimeOptions): GetPrometheusViewResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.aliyunLang)) {
    query['aliyunLang'] = request.aliyunLang;
  }
  if (!$isNull(request.resourceGroupId)) {
    query['resourceGroupId'] = request.resourceGroupId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetPrometheusView',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/prometheus-views/${$URL.percentEncode(prometheusViewId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询指定Prometheus视图实例
 *
 * @param request GetPrometheusViewRequest
 * @return GetPrometheusViewResponse
 */
async function getPrometheusView(prometheusViewId: string, request: GetPrometheusViewRequest): GetPrometheusViewResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getPrometheusViewWithOptions(prometheusViewId, request, headers, runtime);
}

model GetServiceResponseBody = {
  requestId?: string(name='requestId', example='264C3E89-BE6E-5F82-A484-CE9C2196C7DC'),
  service?: {
    attributes?: string(name='attributes', example='{"language":"java"}'),
    createTime?: string(name='createTime', example='2025-05-13T03:32:55Z'),
    description?: string(name='description', example='test'),
    displayName?: string(name='displayName'),
    pid?: string(name='pid', example='by6rjzro2j@0fe8dfa799e5906'),
    regionId?: string(name='regionId', example='cn-heyuan'),
    serviceId?: string(name='serviceId', example='cwzxvuc6uo@4bc6b15ad81f166174ffb'),
    serviceName?: string(name='serviceName', example='demo-app'),
    serviceStatus?: string(name='serviceStatus', example='Running'),
    serviceType?: string(name='serviceType', example='TRACE'),
    workspace?: string(name='workspace', example='default-cms-1106439496876715-cn-hangzhou'),
  }(name='service'),
}

model GetServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceResponseBody(name='body'),
}

/**
 * @summary 查询 Service
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetServiceResponse
 */
@context("getServiceWithContext")
async function getServiceWithOptions(workspace: string, serviceId: string, headers: map[string]string, runtime: $RuntimeOptions): GetServiceResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetService',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace/${$URL.percentEncode(workspace)}/service/${$URL.percentEncode(serviceId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询 Service
 *
 * @return GetServiceResponse
 */
async function getService(workspace: string, serviceId: string): GetServiceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getServiceWithOptions(workspace, serviceId, headers, runtime);
}

model GetServiceObservabilityResponseBody = {
  entryPointInfo?: {
    authToken?: string(name='authToken'),
    privateDomain?: string(name='privateDomain'),
    project?: string(name='project', description='SLS Project', example='proj-xtrace-xxxxx'),
    publicDomain?: string(name='publicDomain'),
  }(name='entryPointInfo'),
  feeType?: string(name='feeType'),
  quotas?: map[string]string(name='quotas'),
  regionId?: string(name='regionId', example='cn-hangzhou'),
  requestId?: string(name='requestId', example='4852B9B5-345C-5CBC-A15F-786D83ECCBBA'),
  settings?: map[string]string(name='settings'),
  status?: string(name='status', example='Running'),
  type?: string(name='type', example='apm'),
  workspace?: string(name='workspace'),
}

model GetServiceObservabilityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceObservabilityResponseBody(name='body'),
}

/**
 * @summary 获取应用可观测实例
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetServiceObservabilityResponse
 */
@context("getServiceObservabilityWithContext")
async function getServiceObservabilityWithOptions(workspace: string, type: string, headers: map[string]string, runtime: $RuntimeOptions): GetServiceObservabilityResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetServiceObservability',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace/${$URL.percentEncode(workspace)}/service-observability/${$URL.percentEncode(type)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取应用可观测实例
 *
 * @return GetServiceObservabilityResponse
 */
async function getServiceObservability(workspace: string, type: string): GetServiceObservabilityResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getServiceObservabilityWithOptions(workspace, type, headers, runtime);
}

model GetUmodelResponseBody = {
  commonSchemaRef?: [ 
    {
      group?: string(name='group', example='test-job-123123'),
      version?: string(name='version', example='5'),
    }
  ](name='commonSchemaRef'),
  description?: string(name='description', example='workspace test'),
  regionId?: string(name='regionId', example='cn-heyuan'),
  requestId?: string(name='requestId', example='123-123123-sdf-435-3123'),
  workspace?: string(name='workspace', example='workspace-test'),
}

model GetUmodelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUmodelResponseBody(name='body'),
}

/**
 * @summary 获取Umodel配置信息
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUmodelResponse
 */
@context("getUmodelWithContext")
async function getUmodelWithOptions(workspace: string, headers: map[string]string, runtime: $RuntimeOptions): GetUmodelResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetUmodel',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace/${$URL.percentEncode(workspace)}/umodel`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取Umodel配置信息
 *
 * @return GetUmodelResponse
 */
async function getUmodel(workspace: string): GetUmodelResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getUmodelWithOptions(workspace, headers, runtime);
}

model GetUmodelDataRequest {
  content?: any(name='content', example='{
	"filter": {
		"domains": []
	},
	"offset": 0,
	"size": 100000
}'),
  method?: string(name='method', description='This parameter is required.', example='ListData'),
}

model GetUmodelDataResponseBody = {
  errors?: [ 
    {
      message?: string(name='message', example='ok'),
      type?: string(name='type', example='external'),
    }
  ](name='errors'),
  links?: [ any ](name='links'),
  nodes?: [ any ](name='nodes'),
  requestId?: string(name='requestId', example='123-123-234-345-123'),
  totalLinksCount?: int32(name='totalLinksCount', example='0'),
  totalNodesCount?: int32(name='totalNodesCount', example='0'),
}

model GetUmodelDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUmodelDataResponseBody(name='body'),
}

/**
 * @summary 获取相关联的 Umodel 图数据
 *
 * @param request GetUmodelDataRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUmodelDataResponse
 */
@context("getUmodelDataWithContext")
async function getUmodelDataWithOptions(workspace: string, request: GetUmodelDataRequest, headers: map[string]string, runtime: $RuntimeOptions): GetUmodelDataResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.method)) {
    query['method'] = request.method;
  }

  var body : map[string]any = {};
  if (!$isNull(request.content)) {
    body['content'] = request.content;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetUmodelData',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace/${$URL.percentEncode(workspace)}/umodel/graph`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取相关联的 Umodel 图数据
 *
 * @param request GetUmodelDataRequest
 * @return GetUmodelDataResponse
 */
async function getUmodelData(workspace: string, request: GetUmodelDataRequest): GetUmodelDataResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getUmodelDataWithOptions(workspace, request, headers, runtime);
}

model GetWorkspaceResponseBody = {
  createTime?: string(name='createTime', description='Use the UTC time format: yyyy-MM-ddTHH:mm:ss.SSSZ', example='2025-03-11T08:21:58Z'),
  description?: string(name='description', description='工作空间描述', example='workspace test'),
  displayName?: string(name='displayName', example='workspace-test'),
  lastModifyTime?: string(name='lastModifyTime', description='Use the UTC time format: yyyy-MM-ddTHH:mm:ssZ', example='2025-03-11T08:21:58Z'),
  regionId?: string(name='regionId', description='地域ID', example='cn-heyuan'),
  requestId?: string(name='requestId', example='264C3E89-XXXX-XXXX-XXXX-CE9C2196C7DC'),
  slsProject?: string(name='slsProject', description='工作空间绑定的日志服务项目名称', example='sls-project-test-001'),
  workspaceName?: string(name='workspaceName', description='工作空间名称

This parameter is required.', example='workspace-test-001'),
}

model GetWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkspaceResponseBody(name='body'),
}

/**
 * @summary 获取工作空间
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWorkspaceResponse
 */
@context("getWorkspaceWithContext")
async function getWorkspaceWithOptions(workspaceName: string, headers: map[string]string, runtime: $RuntimeOptions): GetWorkspaceResponse {
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApiUtil.Params{
    action = 'GetWorkspace',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace/${$URL.percentEncode(workspaceName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取工作空间
 *
 * @return GetWorkspaceResponse
 */
async function getWorkspace(workspaceName: string): GetWorkspaceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return getWorkspaceWithOptions(workspaceName, headers, runtime);
}

model ListAddonReleasesRequest {
  addonName?: string(name='addonName', example='cs-gpu'),
  parentAddonReleaseId?: string(name='parentAddonReleaseId', example='policy-xxxxxxxxxxxxx'),
}

model ListAddonReleasesResponseBody = {
  releases?: [ 
    {
      addonName?: string(name='addonName', example='cs-gpu'),
      alertRuleCount?: long(name='alertRuleCount', example='6'),
      apiVersion?: string(name='apiVersion'),
      conditions?: [ 
        {
          firstTransitionTime?: string(name='firstTransitionTime', example='2024-11-04T16:10:22+08:00'),
          lastTransitionTime?: string(name='lastTransitionTime', example='2024-11-04T16:10:22+08:00'),
          message?: string(name='message', example='The addon loaded successfully'),
          status?: string(name='status', example='True'),
          type?: string(name='type', example='Loaded'),
        }
      ](name='conditions'),
      config?: string(name='config', example='{"install":{"mode":"auto-install","listenPort":"9400"},"discoverMode":"instances","discover":{"instances":"worker-k8s-for-cs-c126d87c76218487e83ab322017f11b44"},"scrapeInterval":"15","enableSecuritecs-nodeyGroupInjection":"true","metricTags":""}'),
      createTime?: string(name='createTime', example='2024-11-04T16:10:12+08:00'),
      dashboardCount?: long(name='dashboardCount', example='3'),
      entityRules?: EntityGroupBase(name='entityRules'),
      envType?: string(name='envType', example='CS'),
      environmentId?: string(name='environmentId', example='policy-xxxxxxxxxxxx'),
      exporterCount?: long(name='exporterCount', example='2'),
      haveConfig?: boolean(name='haveConfig', example='true'),
      installUserId?: string(name='installUserId', example='175xxxxxxxxx'),
      language?: string(name='language', example='zh'),
      managed?: boolean(name='managed', example='true'),
      nextVersion?: string(name='nextVersion'),
      parentAddonReleaseId?: string(name='parentAddonReleaseId', example='policy-xxxxxxxxxxxxxx'),
      policyId?: string(name='policyId', example='policy-xxxxxxxxxxxxxx'),
      regionId?: string(name='regionId', example='cn-hangzhou'),
      releaseId?: string(name='releaseId', description='Release ID。', example='7339d808-66f9-4d40-83fa-xxxxxxxxxxx'),
      releaseName?: string(name='releaseName', example='test-gpu-integration-name'),
      scene?: string(name='scene', example='container'),
      status?: string(name='status', example='running'),
      subAddonRelease?: {
        ready?: int32(name='ready'),
        total?: int32(name='total'),
      }(name='subAddonRelease'),
      updateTime?: string(name='updateTime', example='2024-11-04T16:10:23+08:00'),
      userId?: string(name='userId', example='175xxxxxxxxxxxxx'),
      version?: string(name='version', example='0.0.2'),
      workspace?: string(name='workspace', example='default'),
    }
  ](name='releases'),
  requestId?: string(name='requestId', example='CD8BA7D6-995D-578D-9941-78B0FECD14B5'),
  total?: long(name='total', example='1'),
}

model ListAddonReleasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAddonReleasesResponseBody(name='body'),
}

/**
 * @summary addon的release列表
 *
 * @param request ListAddonReleasesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAddonReleasesResponse
 */
@context("listAddonReleasesWithContext")
async function listAddonReleasesWithOptions(policyId: string, request: ListAddonReleasesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListAddonReleasesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.addonName)) {
    query['addonName'] = request.addonName;
  }
  if (!$isNull(request.parentAddonReleaseId)) {
    query['parentAddonReleaseId'] = request.parentAddonReleaseId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListAddonReleases',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/integration-policies/${$URL.percentEncode(policyId)}/addon-releases`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary addon的release列表
 *
 * @param request ListAddonReleasesRequest
 * @return ListAddonReleasesResponse
 */
async function listAddonReleases(policyId: string, request: ListAddonReleasesRequest): ListAddonReleasesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listAddonReleasesWithOptions(policyId, request, headers, runtime);
}

model ListAggTaskGroupsRequest {
  filterAggTaskGroupIds?: string(name='filterAggTaskGroupIds', example='["aggTaskGroup-xxx"]'),
  filterAggTaskGroupNames?: string(name='filterAggTaskGroupNames', example='["apiserver_request_total"]'),
  maxResults?: int32(name='maxResults', example='20'),
  nextToken?: string(name='nextToken', example='28036394xxx'),
  query?: string(name='query', example='test'),
  status?: string(name='status', example='Running'),
  tags?: [ 
    {
      key?: string(name='key', example='key1'),
      value?: string(name='value', example='value1'),
    }
  ](name='tags'),
  targetPrometheusId?: string(name='targetPrometheusId', example='rw-pq4apob9jm'),
}

model ListAggTaskGroupsShrinkRequest {
  filterAggTaskGroupIds?: string(name='filterAggTaskGroupIds', example='["aggTaskGroup-xxx"]'),
  filterAggTaskGroupNames?: string(name='filterAggTaskGroupNames', example='["apiserver_request_total"]'),
  maxResults?: int32(name='maxResults', example='20'),
  nextToken?: string(name='nextToken', example='28036394xxx'),
  query?: string(name='query', example='test'),
  status?: string(name='status', example='Running'),
  tagsShrink?: string(name='tags'),
  targetPrometheusId?: string(name='targetPrometheusId', example='rw-pq4apob9jm'),
}

model ListAggTaskGroupsResponseBody = {
  aggTaskGroups?: [ 
    {
      aggTaskGroupConfigHash?: string(name='aggTaskGroupConfigHash', example='a54136014xxx'),
      aggTaskGroupId?: string(name='aggTaskGroupId', example='aggTaskGroup-xxxx'),
      aggTaskGroupName?: string(name='aggTaskGroupName', example='pipeline-aggtask-group'),
      cronExpr?: string(name='cronExpr', example='0 10 8 1 * ? *'),
      delay?: int32(name='delay', example='30'),
      description?: string(name='description', example='workspace api monitor update test'),
      fromTime?: long(name='fromTime', example='1757409499000'),
      interval?: string(name='interval', example='2025-04-24 00:00:00,2025-04-24 00:00:00'),
      maxRetries?: int32(name='maxRetries', example='2'),
      maxRunTimeInSeconds?: int32(name='maxRunTimeInSeconds', example='200'),
      regionId?: string(name='regionId', example='cn-hangzhou'),
      scheduleMode?: string(name='scheduleMode', example='FixedRate'),
      scheduleTimeExpr?: string(name='scheduleTimeExpr', example='@m'),
      sourcePrometheusId?: string(name='sourcePrometheusId', example='rw-xxx'),
      status?: string(name='status', example='Running'),
      tags?: [ 
        {
          key?: string(name='key', example='key1'),
          value?: string(name='value', example='value1'),
        }
      ](name='tags'),
      targetPrometheusId?: string(name='targetPrometheusId', example='rw-xxx'),
      toTime?: long(name='toTime', example='0'),
      updateTime?: string(name='updateTime', example='1757409499000'),
    }
  ](name='aggTaskGroups'),
  maxResults?: int32(name='maxResults', example='100'),
  nextToken?: string(name='nextToken', example='aa9d0e569b880xxx'),
  requestId?: string(name='requestId', example='7BF1F4D6-B9A8-5F0B-8C1D-4347FFCB798E'),
  totalCount?: int32(name='totalCount', example='5'),
}

model ListAggTaskGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAggTaskGroupsResponseBody(name='body'),
}

/**
 * @summary 列举聚合任务组
 *
 * @param tmpReq ListAggTaskGroupsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAggTaskGroupsResponse
 */
@context("listAggTaskGroupsWithContext")
async function listAggTaskGroupsWithOptions(instanceId: string, tmpReq: ListAggTaskGroupsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListAggTaskGroupsResponse {
  tmpReq.validate();
  var request = new ListAggTaskGroupsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'tags', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.filterAggTaskGroupIds)) {
    query['filterAggTaskGroupIds'] = request.filterAggTaskGroupIds;
  }
  if (!$isNull(request.filterAggTaskGroupNames)) {
    query['filterAggTaskGroupNames'] = request.filterAggTaskGroupNames;
  }
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!$isNull(request.query)) {
    query['query'] = request.query;
  }
  if (!$isNull(request.status)) {
    query['status'] = request.status;
  }
  if (!$isNull(request.tagsShrink)) {
    query['tags'] = request.tagsShrink;
  }
  if (!$isNull(request.targetPrometheusId)) {
    query['targetPrometheusId'] = request.targetPrometheusId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListAggTaskGroups',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/prometheus-instances/${$URL.percentEncode(instanceId)}/agg-task-groups`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列举聚合任务组
 *
 * @param request ListAggTaskGroupsRequest
 * @return ListAggTaskGroupsResponse
 */
async function listAggTaskGroups(instanceId: string, request: ListAggTaskGroupsRequest): ListAggTaskGroupsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listAggTaskGroupsWithOptions(instanceId, request, headers, runtime);
}

model ListAlertActionsRequest {
  alertActionIds?: [ string ](name='alertActionIds'),
  alertActionName?: string(name='alertActionName', example='testName'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='100'),
  type?: string(name='type', example='FC'),
}

model ListAlertActionsShrinkRequest {
  alertActionIdsShrink?: string(name='alertActionIds'),
  alertActionName?: string(name='alertActionName', example='testName'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='100'),
  type?: string(name='type', example='FC'),
}

model ListAlertActionsResponseBody = {
  alertActions?: [ 
    {
      alertActionId?: string(name='alertActionId', example='test'),
      alertActionName?: string(name='alertActionName', example='testName'),
      ebParam?: {
        ebSource?: string(name='ebSource', example='test'),
        eventBusName?: string(name='eventBusName', example='test'),
        regionId?: string(name='regionId', example='cn-heyuan'),
        subject?: string(name='subject', example='test'),
      }(name='ebParam'),
      essParam?: {
        essGroupId?: string(name='essGroupId', example='testId'),
        essRuleId?: string(name='essRuleId', example='testId'),
        regionId?: string(name='regionId', example='cn-beijing'),
      }(name='essParam'),
      fc3Param?: {
        function?: string(name='function', example='test'),
        qualifier?: string(name='qualifier', example='test'),
        regionId?: string(name='regionId', example='cn-qingdao'),
      }(name='fc3Param'),
      fcParam?: {
        function?: string(name='function', example='test'),
        regionId?: string(name='regionId', example='cn-beijing'),
        service?: string(name='service', example='test'),
      }(name='fcParam'),
      mnsParam?: {
        mnsType?: string(name='mnsType', example='queue'),
        name?: string(name='name', example='test'),
        regionId?: string(name='regionId', example='cn-hangzhou'),
      }(name='mnsParam'),
      pagerDutyParam?: {
        key?: string(name='key', example='fsfer4543t5t65g4t4'),
        url?: string(name='url', example='https://events.pagerduty.com/v2/enqueue'),
      }(name='pagerDutyParam'),
      slsParam?: {
        logstore?: string(name='logstore', example='test'),
        project?: string(name='project', example='test'),
        regionId?: string(name='regionId', example='cn-hangzhou'),
      }(name='slsParam'),
      type?: string(name='type', example='FC'),
      webhookParam?: {
        contentType?: string(name='contentType', example='JSON'),
        headers?: map[string]string(name='headers'),
        method?: string(name='method', example='GET'),
        url?: string(name='url', example='http://www.test.com'),
      }(name='webhookParam'),
    }
  ](name='alertActions'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='100'),
  requestId?: string(name='requestId', example='8FDE2569-626B-5176-9844-28877A*****'),
  total?: int32(name='total', example='9'),
}

model ListAlertActionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAlertActionsResponseBody(name='body'),
}

/**
 * @summary 查询告警动作
 *
 * @param tmpReq ListAlertActionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAlertActionsResponse
 */
@context("listAlertActionsWithContext")
async function listAlertActionsWithOptions(tmpReq: ListAlertActionsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListAlertActionsResponse {
  tmpReq.validate();
  var request = new ListAlertActionsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.alertActionIds)) {
    request.alertActionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.alertActionIds, 'alertActionIds', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.alertActionIdsShrink)) {
    query['alertActionIds'] = request.alertActionIdsShrink;
  }
  if (!$isNull(request.alertActionName)) {
    query['alertActionName'] = request.alertActionName;
  }
  if (!$isNull(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!$isNull(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListAlertActions',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/alertActions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询告警动作
 *
 * @param request ListAlertActionsRequest
 * @return ListAlertActionsResponse
 */
async function listAlertActions(request: ListAlertActionsRequest): ListAlertActionsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listAlertActionsWithOptions(request, headers, runtime);
}

model ListIntegrationPoliciesRequest {
  addonName?: string(name='addonName', example='cs-default'),
  bindResourceId?: string(name='bindResourceId'),
  entityGroupIds?: string(name='entityGroupIds', example='eg-1,eg-2,eg-3'),
  filterRegionIds?: string(name='filterRegionIds', example='cn-beijing,cn-hangzhou'),
  maxResults?: int32(name='maxResults', example='30'),
  nextToken?: string(name='nextToken', example='mvnX6zqg3P'),
  policyId?: string(name='policyId', example='policy-93817a401f78435596d745a97d2e85a1'),
  policyName?: string(name='policyName', example='prod-database'),
  policyType?: string(name='policyType', example='CS'),
  prometheusInstanceId?: string(name='prometheusInstanceId'),
  query?: string(name='query', example='test'),
  resourceGroupId?: string(name='resourceGroupId', example='rg-xxxxx'),
  tag?: [ 
    {
      key?: string(name='key', example='test'),
      value?: string(name='value', example='value'),
    }
  ](name='tag'),
  workspace?: string(name='workspace', example='demo'),
}

model ListIntegrationPoliciesShrinkRequest {
  addonName?: string(name='addonName', example='cs-default'),
  bindResourceId?: string(name='bindResourceId'),
  entityGroupIds?: string(name='entityGroupIds', example='eg-1,eg-2,eg-3'),
  filterRegionIds?: string(name='filterRegionIds', example='cn-beijing,cn-hangzhou'),
  maxResults?: int32(name='maxResults', example='30'),
  nextToken?: string(name='nextToken', example='mvnX6zqg3P'),
  policyId?: string(name='policyId', example='policy-93817a401f78435596d745a97d2e85a1'),
  policyName?: string(name='policyName', example='prod-database'),
  policyType?: string(name='policyType', example='CS'),
  prometheusInstanceId?: string(name='prometheusInstanceId'),
  query?: string(name='query', example='test'),
  resourceGroupId?: string(name='resourceGroupId', example='rg-xxxxx'),
  tagShrink?: string(name='tag'),
  workspace?: string(name='workspace', example='demo'),
}

model ListIntegrationPoliciesResponseBody = {
  maxResults?: int32(name='maxResults', example='100'),
  nextToken?: string(name='nextToken', example='44ANBjKZmQeKnaB1fXRq06w7sFYK3MUcCALMD9qQbmEiE'),
  policies?: [ 
    {
      bindResource?: {
        clusterId?: string(name='clusterId', example='cv68tt87d78vyc89zy9v'),
        clusterType?: string(name='clusterType', example='ManagedKubernetes'),
        vpcCidr?: string(name='vpcCidr', example='100.100.0.1/16'),
        vpcId?: string(name='vpcId', example='vpc-uf664nyle5khp5d4d7hdo'),
      }(name='bindResource'),
      entityGroup?: {
        description?: string(name='description', example='xxxx'),
        entityGroupId?: string(name='entityGroupId', example='eg-b79f65d11fb94e779867cf937c3a3002'),
        entityGroupName?: string(name='entityGroupName', example='test-eg'),
        entityRules?: {
          annotations?: [ 
            {
              op?: string(name='op', example='add'),
              tagKey?: string(name='tagKey', example='key'),
              tagValues?: [ string ](name='tagValues'),
            }
          ](name='annotations'),
          entityTypes?: [ string ](name='entityTypes'),
          fieldRules?: [ 
            {
              fieldKey?: string(name='fieldKey', example='test'),
              fieldValues?: [ string ](name='fieldValues'),
              op?: string(name='op', example='add'),
            }
          ](name='fieldRules'),
          instanceIds?: [ string ](name='instanceIds'),
          ipMatchRule?: {
            ipCidr?: string(name='ipCidr', example='100.100.1.0/16'),
            ipFieldKey?: string(name='ipFieldKey', example='xxxx'),
          }(name='ipMatchRule'),
          labels?: [ 
            {
              op?: string(name='op', example='add'),
              tagKey?: string(name='tagKey', example='test'),
              tagValues?: [ string ](name='tagValues'),
            }
          ](name='labels'),
          regionIds?: [ string ](name='regionIds'),
          resourceGroupId?: string(name='resourceGroupId', example='rg-5i6dbwxfxuqihk7k'),
          tags?: [ 
            {
              op?: string(name='op', example='add'),
              tagKey?: string(name='tagKey', example='key'),
              tagValues?: [ string ](name='tagValues'),
            }
          ](name='tags'),
        }(name='entityRules'),
        query?: string(name='query'),
        regionId?: string(name='regionId', example='cn-heyuan'),
        userId?: string(name='userId', example='1236812738'),
        workspace?: string(name='workspace', example='test-api'),
      }(name='entityGroup'),
      managedInfo?: {
        eniId?: string(name='eniId', example='eni-12345678'),
        securityGroupId?: string(name='securityGroupId', example='sg-xxxxx'),
        vswitchId?: string(name='vswitchId', example='vsw-xxxxxx'),
      }(name='managedInfo'),
      policyId?: string(name='policyId', example='policy-ac38a7cb02d14ff48bc9f97d0a75063e'),
      policyName?: string(name='policyName', example='6f5HSsg3AP'),
      policyType?: string(name='policyType', example='ECS'),
      regionId?: string(name='regionId', example='cn-heyuan'),
      resourceGroupId?: string(name='resourceGroupId', example='rg-xxxxx'),
      subAddonRelease?: {
        ready?: int32(name='ready'),
        total?: int32(name='total'),
      }(name='subAddonRelease'),
      tags?: [ 
        {
          key?: string(name='key', example='key'),
          value?: string(name='value', example='value'),
        }
      ](name='tags'),
      userId?: string(name='userId', example='128470923'),
      workspace?: string(name='workspace', example='test-api'),
    }
  ](name='policies'),
  requestId?: string(name='requestId', description='Id of the request', example='CD8BA7D6-995D-578D-9941-78B0FECD14B5'),
  totalCount?: int32(name='totalCount', example='0'),
}

model ListIntegrationPoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIntegrationPoliciesResponseBody(name='body'),
}

/**
 * @summary 查询接入中心策略列表信息
 *
 * @param tmpReq ListIntegrationPoliciesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIntegrationPoliciesResponse
 */
@context("listIntegrationPoliciesWithContext")
async function listIntegrationPoliciesWithOptions(tmpReq: ListIntegrationPoliciesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListIntegrationPoliciesResponse {
  tmpReq.validate();
  var request = new ListIntegrationPoliciesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.tag)) {
    request.tagShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tag, 'tag', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.addonName)) {
    query['addonName'] = request.addonName;
  }
  if (!$isNull(request.bindResourceId)) {
    query['bindResourceId'] = request.bindResourceId;
  }
  if (!$isNull(request.entityGroupIds)) {
    query['entityGroupIds'] = request.entityGroupIds;
  }
  if (!$isNull(request.filterRegionIds)) {
    query['filterRegionIds'] = request.filterRegionIds;
  }
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!$isNull(request.policyId)) {
    query['policyId'] = request.policyId;
  }
  if (!$isNull(request.policyName)) {
    query['policyName'] = request.policyName;
  }
  if (!$isNull(request.policyType)) {
    query['policyType'] = request.policyType;
  }
  if (!$isNull(request.prometheusInstanceId)) {
    query['prometheusInstanceId'] = request.prometheusInstanceId;
  }
  if (!$isNull(request.query)) {
    query['query'] = request.query;
  }
  if (!$isNull(request.resourceGroupId)) {
    query['resourceGroupId'] = request.resourceGroupId;
  }
  if (!$isNull(request.tagShrink)) {
    query['tag'] = request.tagShrink;
  }
  if (!$isNull(request.workspace)) {
    query['workspace'] = request.workspace;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListIntegrationPolicies',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/integration-policies`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询接入中心策略列表信息
 *
 * @param request ListIntegrationPoliciesRequest
 * @return ListIntegrationPoliciesResponse
 */
async function listIntegrationPolicies(request: ListIntegrationPoliciesRequest): ListIntegrationPoliciesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listIntegrationPoliciesWithOptions(request, headers, runtime);
}

model ListIntegrationPolicyCustomScrapeJobRulesRequest {
  addonReleaseName?: string(name='addonReleaseName', example='release12345678'),
  encryptYaml?: boolean(name='encryptYaml', example='true'),
  namespace?: string(name='namespace'),
}

model ListIntegrationPolicyCustomScrapeJobRulesResponseBody = {
  clusterId?: string(name='clusterId', example='et15prod-et15storage'),
  customScrapeJobRules?: [ 
    {
      addonName?: string(name='addonName', example='cloud-ecs'),
      addonReleaseName?: string(name='addonReleaseName', example='release-12345678'),
      addonVersion?: string(name='addonVersion', example='0.0.1'),
      configYaml?: string(name='configYaml', example='scrape_cofnigs:
- jobxxxxxx'),
      enableStatus?: string(name='enableStatus', example='mini'),
      encryptYaml?: boolean(name='encryptYaml', example='true'),
      matchedPodCount?: long(name='matchedPodCount', example='1'),
      message?: string(name='message', example='ok'),
      name?: string(name='name', example='dlab1'),
      namespace?: string(name='namespace', example='prod-data'),
      scrapeConfigs?: [ 
        {
          jobName?: string(name='jobName', example='mysql-exporter'),
          message?: string(name='message', example='successful'),
          metricsPath?: string(name='metricsPath', example='/metrics'),
          scheme?: string(name='scheme', example='http'),
          scrapeInterval?: string(name='scrapeInterval', example='30s'),
          scrapeTimeout?: string(name='scrapeTimeout', example='60s'),
          serviceDiscoveryConfigs?: [ string ](name='serviceDiscoveryConfigs'),
        }
      ](name='scrapeConfigs'),
    }
  ](name='customScrapeJobRules'),
  policyId?: string(name='policyId', example='policy-15abcc24c06f4797832b5954198e1ed1'),
  requestId?: string(name='requestId', description='Id of the request', example='0CEC5375-C554-562B-A65F-9A629907C1F0'),
}

model ListIntegrationPolicyCustomScrapeJobRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIntegrationPolicyCustomScrapeJobRulesResponseBody(name='body'),
}

/**
 * @summary 获取接入中心策略的存储要求信息
 *
 * @param request ListIntegrationPolicyCustomScrapeJobRulesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIntegrationPolicyCustomScrapeJobRulesResponse
 */
@context("listIntegrationPolicyCustomScrapeJobRulesWithContext")
async function listIntegrationPolicyCustomScrapeJobRulesWithOptions(policyId: string, request: ListIntegrationPolicyCustomScrapeJobRulesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListIntegrationPolicyCustomScrapeJobRulesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.addonReleaseName)) {
    query['addonReleaseName'] = request.addonReleaseName;
  }
  if (!$isNull(request.encryptYaml)) {
    query['encryptYaml'] = request.encryptYaml;
  }
  if (!$isNull(request.namespace)) {
    query['namespace'] = request.namespace;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListIntegrationPolicyCustomScrapeJobRules',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/integration-policies/${$URL.percentEncode(policyId)}/custom-scrape-job-rules`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取接入中心策略的存储要求信息
 *
 * @param request ListIntegrationPolicyCustomScrapeJobRulesRequest
 * @return ListIntegrationPolicyCustomScrapeJobRulesResponse
 */
async function listIntegrationPolicyCustomScrapeJobRules(policyId: string, request: ListIntegrationPolicyCustomScrapeJobRulesRequest): ListIntegrationPolicyCustomScrapeJobRulesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listIntegrationPolicyCustomScrapeJobRulesWithOptions(policyId, request, headers, runtime);
}

model ListIntegrationPolicyDashboardsRequest {
  addonName?: string(name='addonName', example='cs-default'),
  language?: string(name='language'),
  scene?: string(name='scene', example='databse'),
}

model ListIntegrationPolicyDashboardsResponseBody = {
  dashboards?: [ 
    {
      engine?: string(name='engine'),
      folderUid?: string(name='folderUid'),
      name?: string(name='name'),
      region?: string(name='region'),
      tags?: [ string ](name='tags'),
      title?: string(name='title'),
      uid?: string(name='uid'),
      url?: string(name='url'),
    }
  ](name='dashboards'),
  requestId?: string(name='requestId', description='Id of the request', example='CD8BA7D6-995D-578D-9941-78B0FECD14B5'),
  total?: int32(name='total', example='1'),
}

model ListIntegrationPolicyDashboardsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIntegrationPolicyDashboardsResponseBody(name='body'),
}

/**
 * @summary 策略大盘列表
 *
 * @param request ListIntegrationPolicyDashboardsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIntegrationPolicyDashboardsResponse
 */
@context("listIntegrationPolicyDashboardsWithContext")
async function listIntegrationPolicyDashboardsWithOptions(policyId: string, request: ListIntegrationPolicyDashboardsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListIntegrationPolicyDashboardsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.addonName)) {
    query['addonName'] = request.addonName;
  }
  if (!$isNull(request.language)) {
    query['language'] = request.language;
  }
  if (!$isNull(request.scene)) {
    query['scene'] = request.scene;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListIntegrationPolicyDashboards',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/integration-policies/${$URL.percentEncode(policyId)}/dashboards`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 策略大盘列表
 *
 * @param request ListIntegrationPolicyDashboardsRequest
 * @return ListIntegrationPolicyDashboardsResponse
 */
async function listIntegrationPolicyDashboards(policyId: string, request: ListIntegrationPolicyDashboardsRequest): ListIntegrationPolicyDashboardsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listIntegrationPolicyDashboardsWithOptions(policyId, request, headers, runtime);
}

model ListIntegrationPolicyPodMonitorsRequest {
  addonReleaseName?: string(name='addonReleaseName', example='release-123456789'),
  encryptYaml?: boolean(name='encryptYaml', example='true'),
  namespace?: string(name='namespace', example='default'),
}

model ListIntegrationPolicyPodMonitorsResponseBody = {
  clusterId?: string(name='clusterId'),
  podMonitors?: [ 
    {
      addonName?: string(name='addonName', example='cloud-ecs'),
      addonReleaseName?: string(name='addonReleaseName', example='release-2345678'),
      addonVersion?: string(name='addonVersion', example='0.0.1'),
      configYaml?: string(name='configYaml', example='apiVersion: xxxxx'),
      enableStatus?: string(name='enableStatus', example='run'),
      encryptYaml?: boolean(name='encryptYaml', example='YXBpVmVyc2lvbjogeHh4eHgK'),
      endpoints?: [ 
        {
          interval?: string(name='interval', example='30s'),
          matchedTargetCount?: long(name='matchedTargetCount', example='1'),
          path?: string(name='path', example='/metrics'),
          port?: string(name='port', example='9100'),
          targetPort?: string(name='targetPort', example='https'),
        }
      ](name='endpoints'),
      matchedPodCount?: long(name='matchedPodCount', example='3'),
      name?: string(name='name', example='znzmo_entity_test'),
      namespace?: string(name='namespace', example='sla-ns-d5aeb2b4f91b47'),
    }
  ](name='podMonitors'),
  policyId?: string(name='policyId', example='policy-c9efed2b99c348d49e589c5f780fc074'),
  requestId?: string(name='requestId', description='Id of the request', example='CD8BA7D6-995D-578D-9941-78B0FECD14B5'),
}

model ListIntegrationPolicyPodMonitorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIntegrationPolicyPodMonitorsResponseBody(name='body'),
}

/**
 * @summary 获取接入中心策略的PodMonitor资源
 *
 * @param request ListIntegrationPolicyPodMonitorsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIntegrationPolicyPodMonitorsResponse
 */
@context("listIntegrationPolicyPodMonitorsWithContext")
async function listIntegrationPolicyPodMonitorsWithOptions(policyId: string, request: ListIntegrationPolicyPodMonitorsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListIntegrationPolicyPodMonitorsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.addonReleaseName)) {
    query['addonReleaseName'] = request.addonReleaseName;
  }
  if (!$isNull(request.encryptYaml)) {
    query['encryptYaml'] = request.encryptYaml;
  }
  if (!$isNull(request.namespace)) {
    query['namespace'] = request.namespace;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListIntegrationPolicyPodMonitors',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/integration-policies/${$URL.percentEncode(policyId)}/pod-monitors`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取接入中心策略的PodMonitor资源
 *
 * @param request ListIntegrationPolicyPodMonitorsRequest
 * @return ListIntegrationPolicyPodMonitorsResponse
 */
async function listIntegrationPolicyPodMonitors(policyId: string, request: ListIntegrationPolicyPodMonitorsRequest): ListIntegrationPolicyPodMonitorsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listIntegrationPolicyPodMonitorsWithOptions(policyId, request, headers, runtime);
}

model ListIntegrationPolicyStorageRequirementsRequest {
  addonName?: string(name='addonName', example='release-1234357'),
  addonReleaseName?: string(name='addonReleaseName'),
  storageType?: string(name='storageType', example='LogStore'),
}

model ListIntegrationPolicyStorageRequirementsResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='0CEC5375-C554-562B-A65F-9A629907C1F0'),
  storageRequirements?: [ 
    {
      addonReleaseNames?: [ string ](name='addonReleaseNames'),
      apiVersion?: string(name='apiVersion', example='v1'),
      kind?: string(name='kind', example='Pod'),
      metadata?: {
        annotations?: map[string]string(name='annotations'),
        labels?: map[string]string(name='labels'),
        name?: string(name='name', example='pod-1234567'),
        namespace?: string(name='namespace', example='arms-prom'),
      }(name='metadata'),
      spec?: {
        entityId?: string(name='entityId', example='es-xxxxx'),
        instance?: string(name='instance', example='i-bp122p85gthbniw8rsu9'),
        instanceName?: string(name='instanceName', example='category_predict'),
        project?: string(name='project', example='datagrid_cdm'),
        region?: string(name='region', example='cn-shenzhen'),
        shareScope?: string(name='shareScope', example='Region'),
        storageType?: string(name='storageType', example='Prometheus'),
        systemTags?: map[string]string(name='systemTags'),
        tags?: map[string]string(name='tags'),
        userId?: string(name='userId', example='12345678'),
        workspace?: string(name='workspace', example='test-api'),
      }(name='spec'),
      status?: {
        instanceId?: string(name='instanceId', example='rmq-cn-uqm3ket1t0u'),
        interUrl?: string(name='interUrl', example='http://192.168.xxxxxx'),
        intraUrl?: string(name='intraUrl', example='http://100.100.xxxxxx'),
        name?: string(name='name', example='sr-xxxx'),
        project?: string(name='project', example='jiuwu_algo'),
        promMetricStore?: string(name='promMetricStore', example='xxxx'),
        region?: string(name='region', example='cn-hangzhou'),
        storageType?: string(name='storageType', example='Prometheus'),
        workspace?: string(name='workspace', example='default'),
      }(name='status'),
    }
  ](name='storageRequirements'),
}

model ListIntegrationPolicyStorageRequirementsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIntegrationPolicyStorageRequirementsResponseBody(name='body'),
}

/**
 * @summary 获取接入中心策略的存储要求信息
 *
 * @param request ListIntegrationPolicyStorageRequirementsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIntegrationPolicyStorageRequirementsResponse
 */
@context("listIntegrationPolicyStorageRequirementsWithContext")
async function listIntegrationPolicyStorageRequirementsWithOptions(policyId: string, request: ListIntegrationPolicyStorageRequirementsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListIntegrationPolicyStorageRequirementsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.addonName)) {
    query['addonName'] = request.addonName;
  }
  if (!$isNull(request.addonReleaseName)) {
    query['addonReleaseName'] = request.addonReleaseName;
  }
  if (!$isNull(request.storageType)) {
    query['storageType'] = request.storageType;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListIntegrationPolicyStorageRequirements',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/integration-policies/${$URL.percentEncode(policyId)}/storage-requirements`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取接入中心策略的存储要求信息
 *
 * @param request ListIntegrationPolicyStorageRequirementsRequest
 * @return ListIntegrationPolicyStorageRequirementsResponse
 */
async function listIntegrationPolicyStorageRequirements(policyId: string, request: ListIntegrationPolicyStorageRequirementsRequest): ListIntegrationPolicyStorageRequirementsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listIntegrationPolicyStorageRequirementsWithOptions(policyId, request, headers, runtime);
}

model ListPrometheusDashboardsRequest {
  aliyunLang?: string(name='aliyunLang', example='zh'),
  resourceGroupId?: string(name='resourceGroupId', example='rg-acfm3gn5i6bigbi'),
}

model ListPrometheusDashboardsResponseBody = {
  prometheusDashboards?: [ 
    {
      id?: string(name='id', example='1'),
      name?: string(name='name', example='pod'),
      tags?: [ string ](name='tags'),
      title?: string(name='title', example='ceshi'),
      uid?: string(name='uid', example='1987395500251724'),
      url?: string(name='url', example='https://gnew.console.aliyun.com/d/xxx-17460385-807-7-6/cs-cost-application'),
    }
  ](name='prometheusDashboards'),
  requestId?: string(name='requestId', description='Id of the request', example='8FDE2569-626B-5176-9844-28877A*****'),
  totalCount?: int32(name='totalCount', example='66'),
}

model ListPrometheusDashboardsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrometheusDashboardsResponseBody(name='body'),
}

/**
 * @summary 获取Prometheus实例大盘列表
 *
 * @param request ListPrometheusDashboardsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPrometheusDashboardsResponse
 */
@context("listPrometheusDashboardsWithContext")
async function listPrometheusDashboardsWithOptions(prometheusInstanceId: string, request: ListPrometheusDashboardsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListPrometheusDashboardsResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.aliyunLang)) {
    query['aliyunLang'] = request.aliyunLang;
  }
  if (!$isNull(request.resourceGroupId)) {
    query['resourceGroupId'] = request.resourceGroupId;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListPrometheusDashboards',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/prometheus-instances/${$URL.percentEncode(prometheusInstanceId)}/dashboards`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取Prometheus实例大盘列表
 *
 * @param request ListPrometheusDashboardsRequest
 * @return ListPrometheusDashboardsResponse
 */
async function listPrometheusDashboards(prometheusInstanceId: string, request: ListPrometheusDashboardsRequest): ListPrometheusDashboardsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listPrometheusDashboardsWithOptions(prometheusInstanceId, request, headers, runtime);
}

model ListPrometheusInstancesRequest {
  filterRegionIds?: string(name='filterRegionIds', example='cn-shenzhen', nullable=true),
  maxResults?: int32(name='maxResults', example='10', nullable=true),
  nextToken?: string(name='nextToken', example='xxxxxxxxxx', nullable=true),
  prometheusInstanceIds?: string(name='prometheusInstanceIds', example='rw-00001,rw-00002,rw-00003', nullable=true),
  prometheusInstanceName?: string(name='prometheusInstanceName', example='test', nullable=true),
  resourceGroupId?: string(name='resourceGroupId', example='rg-aek2bhocin5e2na'),
  resourceType?: string(name='resourceType', example='Prometheus', nullable=true),
  tag?: [ 
    {
      key?: string(name='key', example='testKey'),
      value?: string(name='value', example='testValue'),
    }
  ](name='tag'),
  version?: string(name='version', example='V2', nullable=true),
}

model ListPrometheusInstancesShrinkRequest {
  filterRegionIds?: string(name='filterRegionIds', example='cn-shenzhen', nullable=true),
  maxResults?: int32(name='maxResults', example='10', nullable=true),
  nextToken?: string(name='nextToken', example='xxxxxxxxxx', nullable=true),
  prometheusInstanceIds?: string(name='prometheusInstanceIds', example='rw-00001,rw-00002,rw-00003', nullable=true),
  prometheusInstanceName?: string(name='prometheusInstanceName', example='test', nullable=true),
  resourceGroupId?: string(name='resourceGroupId', example='rg-aek2bhocin5e2na'),
  resourceType?: string(name='resourceType', example='Prometheus', nullable=true),
  tagShrink?: string(name='tag'),
  version?: string(name='version', example='V2', nullable=true),
}

model ListPrometheusInstancesResponseBody = {
  maxResults?: int32(name='maxResults', example='10', nullable=true),
  nextToken?: string(name='nextToken', example='xxxxxxxxxx'),
  prometheusInstances?: [ 
    {
      accessType?: string(name='accessType', example='readWrite'),
      createTime?: string(name='createTime', example='2025-08-10T02:07:53Z'),
      instanceType?: string(name='instanceType', example='remote-write'),
      paymentType?: string(name='paymentType', example='POSTPAY_GB'),
      product?: string(name='product', example='arms'),
      prometheusInstanceId?: string(name='prometheusInstanceId', example='rw-63549e054ff596a4149927961dff'),
      prometheusInstanceName?: string(name='prometheusInstanceName', example='test-prom-name'),
      regionId?: string(name='regionId', example='cn-nanjing'),
      resourceGroupId?: string(name='resourceGroupId', example='rg-aek2bhocin5e2na'),
      resourceType?: string(name='resourceType', example='Prometheus'),
      status?: string(name='status', example='Pending2Running'),
      supportAuthTypes?: [ string ](name='supportAuthTypes'),
      tags?: [ 
        {
          key?: string(name='key', example='testKey'),
          value?: string(name='value', example='testValue'),
        }
      ](name='tags'),
      userId?: string(name='userId', example='17073812345'),
      version?: string(name='version', example='*'),
      workspace?: string(name='workspace', example='default-cms-115214006-cn-hangzhou'),
    }
  ](name='prometheusInstances'),
  requestId?: string(name='requestId', description='Id of the request', example='264C3E89-XXXX-XXXX-XXXX-CE9C2196C7DC'),
  totalCount?: int32(name='totalCount', example='66'),
}

model ListPrometheusInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrometheusInstancesResponseBody(name='body'),
}

/**
 * @summary 获取Prometheus实例信息列表
 *
 * @param tmpReq ListPrometheusInstancesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPrometheusInstancesResponse
 */
@context("listPrometheusInstancesWithContext")
async function listPrometheusInstancesWithOptions(tmpReq: ListPrometheusInstancesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListPrometheusInstancesResponse {
  tmpReq.validate();
  var request = new ListPrometheusInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.tag)) {
    request.tagShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tag, 'tag', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.filterRegionIds)) {
    query['filterRegionIds'] = request.filterRegionIds;
  }
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!$isNull(request.prometheusInstanceIds)) {
    query['prometheusInstanceIds'] = request.prometheusInstanceIds;
  }
  if (!$isNull(request.prometheusInstanceName)) {
    query['prometheusInstanceName'] = request.prometheusInstanceName;
  }
  if (!$isNull(request.resourceGroupId)) {
    query['resourceGroupId'] = request.resourceGroupId;
  }
  if (!$isNull(request.resourceType)) {
    query['resourceType'] = request.resourceType;
  }
  if (!$isNull(request.tagShrink)) {
    query['tag'] = request.tagShrink;
  }
  if (!$isNull(request.version)) {
    query['version'] = request.version;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListPrometheusInstances',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/prometheus-instances`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取Prometheus实例信息列表
 *
 * @param request ListPrometheusInstancesRequest
 * @return ListPrometheusInstancesResponse
 */
async function listPrometheusInstances(request: ListPrometheusInstancesRequest): ListPrometheusInstancesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listPrometheusInstancesWithOptions(request, headers, runtime);
}

model ListPrometheusViewsRequest {
  filterRegionIds?: string(name='filterRegionIds', example='cn-zhangjiakou,cn-beijing'),
  maxResults?: int32(name='maxResults', example='100', nullable=true),
  nextToken?: string(name='nextToken', example='44ANBjKZmQeKnaB1fXRq06w7sFYK3MUcCALMD9qQbmEiE', nullable=true),
  prometheusViewIds?: string(name='prometheusViewIds', example='view-xxx'),
  prometheusViewName?: string(name='prometheusViewName', example='view1'),
  resourceGroupId?: string(name='resourceGroupId', example='rg-acfm3gn5i6bigbi'),
  resourceType?: string(name='resourceType', example='PROMETHEUSVIEW'),
  tag?: [ 
    {
      key?: string(name='key', example='key1'),
      value?: string(name='value', example='value1'),
    }
  ](name='tag'),
  version?: string(name='version', example='V2'),
  workspace?: string(name='workspace', example='workspace-test'),
}

model ListPrometheusViewsShrinkRequest {
  filterRegionIds?: string(name='filterRegionIds', example='cn-zhangjiakou,cn-beijing'),
  maxResults?: int32(name='maxResults', example='100', nullable=true),
  nextToken?: string(name='nextToken', example='44ANBjKZmQeKnaB1fXRq06w7sFYK3MUcCALMD9qQbmEiE', nullable=true),
  prometheusViewIds?: string(name='prometheusViewIds', example='view-xxx'),
  prometheusViewName?: string(name='prometheusViewName', example='view1'),
  resourceGroupId?: string(name='resourceGroupId', example='rg-acfm3gn5i6bigbi'),
  resourceType?: string(name='resourceType', example='PROMETHEUSVIEW'),
  tagShrink?: string(name='tag'),
  version?: string(name='version', example='V2'),
  workspace?: string(name='workspace', example='workspace-test'),
}

model ListPrometheusViewsResponseBody = {
  maxResults?: int32(name='maxResults', example='10', nullable=true),
  nextToken?: string(name='nextToken', example='2-ba4d-4b9f-aa24-dcb067a30f1c'),
  prometheusViews?: [ 
    {
      createTime?: string(name='createTime', example='2025-07-12T02:18:36Z'),
      instanceType?: string(name='instanceType', example='prom-view'),
      paymentType?: string(name='paymentType', example='FREE'),
      product?: string(name='product', example='cms'),
      prometheusInstanceCount?: int32(name='prometheusInstanceCount', example='2'),
      prometheusViewId?: string(name='prometheusViewId', example='view-xxx'),
      prometheusViewName?: string(name='prometheusViewName', example='view1'),
      regionId?: string(name='regionId', example='cn-zhangjiakou'),
      resourceGroupId?: string(name='resourceGroupId', example='rg-acfm3gn5i6bigbi'),
      resourceType?: string(name='resourceType', example='PrometheusView'),
      status?: string(name='status', example='Running'),
      tags?: [ 
        {
          key?: string(name='key', example='key1'),
          value?: string(name='value', example='value1'),
        }
      ](name='tags'),
      userId?: string(name='userId', example='123xxx'),
      version?: string(name='version', example='V2'),
      workspace?: string(name='workspace', example='default-cms-1490404746278495-cn-hangzhou'),
    }
  ](name='prometheusViews'),
  requestId?: string(name='requestId', description='Id of the request', example='0CEC5375-C554-562B-A65F-9A629907C1F0'),
  totalCount?: int32(name='totalCount', example='66'),
}

model ListPrometheusViewsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrometheusViewsResponseBody(name='body'),
}

/**
 * @summary 获取Prometheus视图实例信息列表
 *
 * @param tmpReq ListPrometheusViewsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPrometheusViewsResponse
 */
@context("listPrometheusViewsWithContext")
async function listPrometheusViewsWithOptions(tmpReq: ListPrometheusViewsRequest, headers: map[string]string, runtime: $RuntimeOptions): ListPrometheusViewsResponse {
  tmpReq.validate();
  var request = new ListPrometheusViewsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.tag)) {
    request.tagShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tag, 'tag', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.filterRegionIds)) {
    query['filterRegionIds'] = request.filterRegionIds;
  }
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!$isNull(request.prometheusViewIds)) {
    query['prometheusViewIds'] = request.prometheusViewIds;
  }
  if (!$isNull(request.prometheusViewName)) {
    query['prometheusViewName'] = request.prometheusViewName;
  }
  if (!$isNull(request.resourceGroupId)) {
    query['resourceGroupId'] = request.resourceGroupId;
  }
  if (!$isNull(request.resourceType)) {
    query['resourceType'] = request.resourceType;
  }
  if (!$isNull(request.tagShrink)) {
    query['tag'] = request.tagShrink;
  }
  if (!$isNull(request.version)) {
    query['version'] = request.version;
  }
  if (!$isNull(request.workspace)) {
    query['workspace'] = request.workspace;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListPrometheusViews',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/prometheus-views`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取Prometheus视图实例信息列表
 *
 * @param request ListPrometheusViewsRequest
 * @return ListPrometheusViewsResponse
 */
async function listPrometheusViews(request: ListPrometheusViewsRequest): ListPrometheusViewsResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listPrometheusViewsWithOptions(request, headers, runtime);
}

model ListPrometheusVirtualInstancesRequest {
  namespace?: string(name='namespace', example='ack-csi-fuse'),
}

model ListPrometheusVirtualInstancesResponseBody = {
  instances?: [ 
    {
      createdAt?: string(name='createdAt', example='1750315319946'),
      httpApiUrl?: string(name='httpApiUrl', example='http://xxxxxxxx'),
      instanceId?: string(name='instanceId', example='rw-b8cfbbe94194ac37fe83f3d2d16a'),
      namespace?: string(name='namespace', example='arms-prom'),
      regionId?: string(name='regionId', example='cn-shanghai-cloudspe'),
      userId?: string(name='userId', example='17073812345'),
    }
  ](name='instances'),
  requestId?: string(name='requestId', description='Id of the request', example='264C3E89-XXXX-XXXX-XXXX-CE9C2196C7DC'),
}

model ListPrometheusVirtualInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrometheusVirtualInstancesResponseBody(name='body'),
}

/**
 * @summary 获取Prometheus虚拟实例
 *
 * @param request ListPrometheusVirtualInstancesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPrometheusVirtualInstancesResponse
 */
@context("listPrometheusVirtualInstancesWithContext")
async function listPrometheusVirtualInstancesWithOptions(request: ListPrometheusVirtualInstancesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListPrometheusVirtualInstancesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.namespace)) {
    query['namespace'] = request.namespace;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListPrometheusVirtualInstances',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/virtual-instances`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取Prometheus虚拟实例
 *
 * @param request ListPrometheusVirtualInstancesRequest
 * @return ListPrometheusVirtualInstancesResponse
 */
async function listPrometheusVirtualInstances(request: ListPrometheusVirtualInstancesRequest): ListPrometheusVirtualInstancesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listPrometheusVirtualInstancesWithOptions(request, headers, runtime);
}

model ListServicesRequest {
  maxResults?: int32(name='maxResults', example='10'),
  nextToken?: string(name='nextToken', example='7-b81a-4bc9-bbfa-a50cc6988667'),
  serviceType?: string(name='serviceType', example='apm'),
}

model ListServicesResponseBody = {
  maxResults?: int32(name='maxResults', example='10'),
  nextToken?: string(name='nextToken', example='2-ba4d-4b9f-aa24-dcb067a30f1c'),
  requestId?: string(name='requestId', example='0CEC5375-C554-562B-A65F-9A629907C1F0'),
  services?: [ 
    {
      attributes?: string(name='attributes', example='{"language":"java"}'),
      createTime?: string(name='createTime', example='2025-07-01T02:23:59Z'),
      description?: string(name='description', example='workspace api monitor test'),
      displayName?: string(name='displayName', example='test'),
      pid?: string(name='pid', example='kgcsf@192197e828d51aa'),
      serviceId?: string(name='serviceId', example='jm2pl0yoqf@d4905cb11a4f218dfb0a8'),
      serviceName?: string(name='serviceName', example='demo-app'),
      serviceStatus?: string(name='serviceStatus', example='Running'),
      serviceType?: string(name='serviceType', example='TRACE'),
      workspace?: string(name='workspace', example='default-cms-1192928460540589-cn-hangzhou'),
    }
  ](name='services'),
  totalCount?: int32(name='totalCount', example='66'),
}

model ListServicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServicesResponseBody(name='body'),
}

/**
 * @summary 列出资源Service
 *
 * @param request ListServicesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListServicesResponse
 */
@context("listServicesWithContext")
async function listServicesWithOptions(workspace: string, request: ListServicesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListServicesResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!$isNull(request.serviceType)) {
    query['serviceType'] = request.serviceType;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListServices',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace/${$URL.percentEncode(workspace)}/services`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列出资源Service
 *
 * @param request ListServicesRequest
 * @return ListServicesResponse
 */
async function listServices(workspace: string, request: ListServicesRequest): ListServicesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listServicesWithOptions(workspace, request, headers, runtime);
}

model ListWorkspacesRequest {
  maxResults?: int32(name='maxResults', example='10'),
  nextToken?: string(name='nextToken', example='xxxxxxxxxx'),
  region?: string(name='region', example='cn-heyuan', nullable=true),
  workspaceName?: string(name='workspaceName', example='workspace-test-001'),
  workspaceNameList?: [ string ](name='workspaceNameList', example='workspace-test-001', nullable=true),
}

model ListWorkspacesShrinkRequest {
  maxResults?: int32(name='maxResults', example='10'),
  nextToken?: string(name='nextToken', example='xxxxxxxxxx'),
  region?: string(name='region', example='cn-heyuan', nullable=true),
  workspaceName?: string(name='workspaceName', example='workspace-test-001'),
  workspaceNameListShrink?: string(name='workspaceNameList', example='workspace-test-001', nullable=true),
}

model ListWorkspacesResponseBody = {
  maxResults?: int32(name='maxResults', example='10'),
  nextToken?: string(name='nextToken', example='xxxxxxxxxx'),
  requestId?: string(name='requestId', example='264C3E89-XXXX-XXXX-XXXX-CE9C2196C7DC'),
  total?: int32(name='total', example='1'),
  workspaces?: [ 
    {
      createTime?: string(name='createTime', description='Use the UTC time format: yyyy-MM-ddTHH:mm:ssZ', example='2025-03-11T08:21:58Z'),
      description?: string(name='description', description='工作空间描述', example='workspace test'),
      displayName?: string(name='displayName', example='workspace-test'),
      lastModifyTime?: string(name='lastModifyTime', description='Use the UTC time format: yyyy-MM-ddTHH:mm:ssZ', example='2025-03-11T08:21:58Z'),
      regionId?: string(name='regionId', description='地域ID', example='cn-heyuan'),
      slsProject?: string(name='slsProject', description='工作空间绑定的日志服务项目名称', example='sls-project-test-001'),
      workspaceName?: string(name='workspaceName', description='工作空间名称

This parameter is required.', example='workspace-test-001'),
    }
  ](name='workspaces'),
}

model ListWorkspacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkspacesResponseBody(name='body'),
}

/**
 * @summary 获取工作空间列表
 *
 * @param tmpReq ListWorkspacesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWorkspacesResponse
 */
@context("listWorkspacesWithContext")
async function listWorkspacesWithOptions(tmpReq: ListWorkspacesRequest, headers: map[string]string, runtime: $RuntimeOptions): ListWorkspacesResponse {
  tmpReq.validate();
  var request = new ListWorkspacesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.workspaceNameList)) {
    request.workspaceNameListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.workspaceNameList, 'workspaceNameList', 'simple');
  }
  var query : map[string]any = {};
  if (!$isNull(request.maxResults)) {
    query['maxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    query['nextToken'] = request.nextToken;
  }
  if (!$isNull(request.region)) {
    query['region'] = request.region;
  }
  if (!$isNull(request.workspaceName)) {
    query['workspaceName'] = request.workspaceName;
  }
  if (!$isNull(request.workspaceNameListShrink)) {
    query['workspaceNameList'] = request.workspaceNameListShrink;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListWorkspaces',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取工作空间列表
 *
 * @param request ListWorkspacesRequest
 * @return ListWorkspacesResponse
 */
async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return listWorkspacesWithOptions(request, headers, runtime);
}

model PutWorkspaceRequest {
  description?: string(name='description', description='工作空间描述', example='workspace test'),
  displayName?: string(name='displayName', example='workspace-test'),
  slsProject?: string(name='slsProject', description='工作空间绑定的日志服务项目名称

This parameter is required.', example='sls-project-test-001'),
}

model PutWorkspaceResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='264C3E89-XXXX-XXXX-XXXX-CE9C2196C7DC'),
  workspaceName?: string(name='workspaceName', example='workspace-test-001'),
}

model PutWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutWorkspaceResponseBody(name='body'),
}

/**
 * @summary 创建工作空间
 *
 * @param request PutWorkspaceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutWorkspaceResponse
 */
@context("putWorkspaceWithContext")
async function putWorkspaceWithOptions(workspaceName: string, request: PutWorkspaceRequest, headers: map[string]string, runtime: $RuntimeOptions): PutWorkspaceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.description)) {
    body['description'] = request.description;
  }
  if (!$isNull(request.displayName)) {
    body['displayName'] = request.displayName;
  }
  if (!$isNull(request.slsProject)) {
    body['slsProject'] = request.slsProject;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'PutWorkspace',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace/${$URL.percentEncode(workspaceName)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建工作空间
 *
 * @param request PutWorkspaceRequest
 * @return PutWorkspaceResponse
 */
async function putWorkspace(workspaceName: string, request: PutWorkspaceRequest): PutWorkspaceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return putWorkspaceWithOptions(workspaceName, request, headers, runtime);
}

model UpdateAddonReleaseRequest {
  addonVersion?: string(name='addonVersion', example='0.0.2'),
  dryRun?: boolean(name='dryRun', example='true'),
  entityRules?: EntityDiscoverRule(name='entityRules'),
  values?: string(name='values', example='{"install":{"mode":"auto-install","listenPort":"9400"},"discoverMode":"instances","discover":{"instances":"worker-k8s-for-cs-c126d87c76218487e83ab322017f11b44"},"scrapeInterval":"15","enableSecuritecs-nodeyGroupInjection":"true","metricTags":""}'),
}

model UpdateAddonReleaseResponseBody = {
  requestId?: string(name='requestId', example='9F00A7AF-2728-5424-B321-79D39C00A1EC'),
}

model UpdateAddonReleaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAddonReleaseResponseBody(name='body'),
}

/**
 * @summary 升级接入组件
 *
 * @param request UpdateAddonReleaseRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAddonReleaseResponse
 */
@context("updateAddonReleaseWithContext")
async function updateAddonReleaseWithOptions(releaseName: string, policyId: string, request: UpdateAddonReleaseRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateAddonReleaseResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.addonVersion)) {
    body['addonVersion'] = request.addonVersion;
  }
  if (!$isNull(request.dryRun)) {
    body['dryRun'] = request.dryRun;
  }
  if (!$isNull(request.entityRules)) {
    body['entityRules'] = request.entityRules;
  }
  if (!$isNull(request.values)) {
    body['values'] = request.values;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateAddonRelease',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/integration-policies/${$URL.percentEncode(policyId)}/addon-releases/${$URL.percentEncode(releaseName)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 升级接入组件
 *
 * @param request UpdateAddonReleaseRequest
 * @return UpdateAddonReleaseResponse
 */
async function updateAddonRelease(releaseName: string, policyId: string, request: UpdateAddonReleaseRequest): UpdateAddonReleaseResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateAddonReleaseWithOptions(releaseName, policyId, request, headers, runtime);
}

model UpdateAggTaskGroupRequest {
  aggTaskGroupConfig?: string(name='aggTaskGroupConfig', description='This parameter is required.', example='groups:
- name: "node.rules"
  interval: "60s"
  rules:
  - record: "node_namespace_pod:kube_pod_info:"
    expr: "max(label_replace(kube_pod_info{job=\\\\"kubernetes-pods-kube-state-metrics\\\\"\\\\
      }, \\\\"pod\\\\", \\\\"$1\\\\", \\\\"pod\\\\", \\\\"(.*)\\\\")) by (node, namespace, pod, cluster)"'),
  aggTaskGroupConfigType?: string(name='aggTaskGroupConfigType', example='RecordingRuleYaml'),
  aggTaskGroupName?: string(name='aggTaskGroupName', example='test-group'),
  cronExpr?: string(name='cronExpr', example='0/1 * * * *'),
  delay?: int32(name='delay', example='30'),
  description?: string(name='description', example='desc'),
  fromTime?: long(name='fromTime', example='1724996015'),
  maxRetries?: int32(name='maxRetries', example='20'),
  maxRunTimeInSeconds?: int32(name='maxRunTimeInSeconds', example='600'),
  precheckString?: string(name='precheckString', example='{"policy":"skip","prometheusId":"xxx","query":"scalar(sum(count_over_time(up{job=\\\\"_arms/kubelet/cadvisor\\\\"}[15s])) / 21)","threshold":0.5,"timeout":15,"type":"promql"}'),
  scheduleMode?: string(name='scheduleMode', example='FixedRate'),
  scheduleTimeExpr?: string(name='scheduleTimeExpr', example='@m'),
  status?: string(name='status', example='Running'),
  tags?: [ 
    {
      key?: string(name='key', example='key1'),
      value?: string(name='value', example='value1'),
    }
  ](name='tags'),
  targetPrometheusId?: string(name='targetPrometheusId', description='This parameter is required.', example='rw-pq4apob9jm'),
  toTime?: long(name='toTime', example='0'),
}

model UpdateAggTaskGroupResponseBody = {
  aggTaskGroupConfigHash?: string(name='aggTaskGroupConfigHash', example='a54136014dc386a92c83a6ef1e97ff22'),
  aggTaskGroupId?: string(name='aggTaskGroupId', example='aggTaskGroup-5fb2c3ade63a4709bcb059d13493b7b8'),
  aggTaskGroupName?: string(name='aggTaskGroupName', example='pipeline-aggtask-group'),
  requestId?: string(name='requestId', example='8FDE2569-626B-5176-9844-28877A*****'),
  sourcePrometheusId?: string(name='sourcePrometheusId', example='rw-083e17834e279f8c627fe91a2d72'),
  status?: string(name='status', example='Running'),
}

model UpdateAggTaskGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAggTaskGroupResponseBody(name='body'),
}

/**
 * @summary 应用聚合任务组
 *
 * @param request UpdateAggTaskGroupRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAggTaskGroupResponse
 */
@context("updateAggTaskGroupWithContext")
async function updateAggTaskGroupWithOptions(instanceId: string, groupId: string, request: UpdateAggTaskGroupRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateAggTaskGroupResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.aggTaskGroupConfig)) {
    body['aggTaskGroupConfig'] = request.aggTaskGroupConfig;
  }
  if (!$isNull(request.aggTaskGroupConfigType)) {
    body['aggTaskGroupConfigType'] = request.aggTaskGroupConfigType;
  }
  if (!$isNull(request.aggTaskGroupName)) {
    body['aggTaskGroupName'] = request.aggTaskGroupName;
  }
  if (!$isNull(request.cronExpr)) {
    body['cronExpr'] = request.cronExpr;
  }
  if (!$isNull(request.delay)) {
    body['delay'] = request.delay;
  }
  if (!$isNull(request.description)) {
    body['description'] = request.description;
  }
  if (!$isNull(request.fromTime)) {
    body['fromTime'] = request.fromTime;
  }
  if (!$isNull(request.maxRetries)) {
    body['maxRetries'] = request.maxRetries;
  }
  if (!$isNull(request.maxRunTimeInSeconds)) {
    body['maxRunTimeInSeconds'] = request.maxRunTimeInSeconds;
  }
  if (!$isNull(request.precheckString)) {
    body['precheckString'] = request.precheckString;
  }
  if (!$isNull(request.scheduleMode)) {
    body['scheduleMode'] = request.scheduleMode;
  }
  if (!$isNull(request.scheduleTimeExpr)) {
    body['scheduleTimeExpr'] = request.scheduleTimeExpr;
  }
  if (!$isNull(request.status)) {
    body['status'] = request.status;
  }
  if (!$isNull(request.tags)) {
    body['tags'] = request.tags;
  }
  if (!$isNull(request.targetPrometheusId)) {
    body['targetPrometheusId'] = request.targetPrometheusId;
  }
  if (!$isNull(request.toTime)) {
    body['toTime'] = request.toTime;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateAggTaskGroup',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/prometheus-instances/${$URL.percentEncode(instanceId)}/agg-task-groups/${$URL.percentEncode(groupId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 应用聚合任务组
 *
 * @param request UpdateAggTaskGroupRequest
 * @return UpdateAggTaskGroupResponse
 */
async function updateAggTaskGroup(instanceId: string, groupId: string, request: UpdateAggTaskGroupRequest): UpdateAggTaskGroupResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateAggTaskGroupWithOptions(instanceId, groupId, request, headers, runtime);
}

model UpdateAggTaskGroupStatusRequest {
  status?: string(name='status', description='This parameter is required.', example='Running'),
}

model UpdateAggTaskGroupStatusResponseBody = {
  aggTaskGroupConfigHash?: string(name='aggTaskGroupConfigHash', example='a54136014dc386a92c83a6ef1e97ff22'),
  aggTaskGroupId?: string(name='aggTaskGroupId', example='aggTaskGroup-xxx'),
  aggTaskGroupName?: string(name='aggTaskGroupName', example='pipeline-aggtask-group'),
  requestId?: string(name='requestId', example='0CEC5375-C554-562B-A65F-***'),
  sourcePrometheusId?: string(name='sourcePrometheusId', example='rw-xxx'),
  status?: string(name='status', example='Running'),
}

model UpdateAggTaskGroupStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAggTaskGroupStatusResponseBody(name='body'),
}

/**
 * @summary 更新聚合任务组状态
 *
 * @param request UpdateAggTaskGroupStatusRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAggTaskGroupStatusResponse
 */
@context("updateAggTaskGroupStatusWithContext")
async function updateAggTaskGroupStatusWithOptions(instanceId: string, groupId: string, request: UpdateAggTaskGroupStatusRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateAggTaskGroupStatusResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.status)) {
    body['status'] = request.status;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateAggTaskGroupStatus',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/prometheus-instances/${$URL.percentEncode(instanceId)}/agg-task-groups/${$URL.percentEncode(groupId)}/status`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新聚合任务组状态
 *
 * @param request UpdateAggTaskGroupStatusRequest
 * @return UpdateAggTaskGroupStatusResponse
 */
async function updateAggTaskGroupStatus(instanceId: string, groupId: string, request: UpdateAggTaskGroupStatusRequest): UpdateAggTaskGroupStatusResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateAggTaskGroupStatusWithOptions(instanceId, groupId, request, headers, runtime);
}

model UpdateIntegrationPolicyRequest {
  feePackage?: string(name='feePackage', example='CS_Pro'),
  policyName?: string(name='policyName', example='metrics-inner-manage'),
  resourceGroupId?: string(name='resourceGroupId', example='rg-aekzoiafjtr7zyq'),
  tags?: [ 
    {
      key?: string(name='key', example='algo_bhv_expose_in_airec_exposure'),
      value?: string(name='value', example='[{\\\\"Id\\\\": \\\\"kgqie6hm\\\\", \\\\"Name\\\\": \\\\"Sheet1\\\\"}]'),
    }
  ](name='tags'),
}

model UpdateIntegrationPolicyResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='0CEC5375-C554-562B-A65F-9A629907C1F0'),
}

model UpdateIntegrationPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIntegrationPolicyResponseBody(name='body'),
}

/**
 * @summary 更新指定策略
 *
 * @param request UpdateIntegrationPolicyRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateIntegrationPolicyResponse
 */
@context("updateIntegrationPolicyWithContext")
async function updateIntegrationPolicyWithOptions(integrationPolicyId: string, request: UpdateIntegrationPolicyRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateIntegrationPolicyResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.feePackage)) {
    body['feePackage'] = request.feePackage;
  }
  if (!$isNull(request.policyName)) {
    body['policyName'] = request.policyName;
  }
  if (!$isNull(request.resourceGroupId)) {
    body['resourceGroupId'] = request.resourceGroupId;
  }
  if (!$isNull(request.tags)) {
    body['tags'] = request.tags;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateIntegrationPolicy',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/integration-policies/${$URL.percentEncode(integrationPolicyId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新指定策略
 *
 * @param request UpdateIntegrationPolicyRequest
 * @return UpdateIntegrationPolicyResponse
 */
async function updateIntegrationPolicy(integrationPolicyId: string, request: UpdateIntegrationPolicyRequest): UpdateIntegrationPolicyResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateIntegrationPolicyWithOptions(integrationPolicyId, request, headers, runtime);
}

model UpdatePrometheusInstanceRequest {
  archiveDuration?: integer(name='archiveDuration', example='365', nullable=true),
  authFreeReadPolicy?: string(name='authFreeReadPolicy', example='0.0.0.0/0'),
  authFreeWritePolicy?: string(name='authFreeWritePolicy', example='true'),
  enableAuthFreeRead?: boolean(name='enableAuthFreeRead', example='true'),
  enableAuthFreeWrite?: boolean(name='enableAuthFreeWrite', example='true'),
  enableAuthToken?: boolean(name='enableAuthToken', example='true'),
  paymentType?: string(name='paymentType', example='POSTPAY_GB'),
  prometheusInstanceName?: string(name='prometheusInstanceName', example='test-prom-name'),
  status?: string(name='status', example='RUNNING'),
  storageDuration?: integer(name='storageDuration', example='90'),
  workspace?: string(name='workspace', example='default-cms-1500199863951574-cn-shanghai'),
}

model UpdatePrometheusInstanceResponseBody = {
  prometheusInstanceId?: string(name='prometheusInstanceId', example='rw-abc123'),
  requestId?: string(name='requestId', description='Id of the request', example='1E92F783-E057-58F1-BD5C-92DED088E7A5'),
}

model UpdatePrometheusInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePrometheusInstanceResponseBody(name='body'),
}

/**
 * @summary 更新Prom实例信息
 *
 * @param request UpdatePrometheusInstanceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdatePrometheusInstanceResponse
 */
@context("updatePrometheusInstanceWithContext")
async function updatePrometheusInstanceWithOptions(prometheusInstanceId: string, request: UpdatePrometheusInstanceRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdatePrometheusInstanceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.archiveDuration)) {
    body['archiveDuration'] = request.archiveDuration;
  }
  if (!$isNull(request.authFreeReadPolicy)) {
    body['authFreeReadPolicy'] = request.authFreeReadPolicy;
  }
  if (!$isNull(request.authFreeWritePolicy)) {
    body['authFreeWritePolicy'] = request.authFreeWritePolicy;
  }
  if (!$isNull(request.enableAuthFreeRead)) {
    body['enableAuthFreeRead'] = request.enableAuthFreeRead;
  }
  if (!$isNull(request.enableAuthFreeWrite)) {
    body['enableAuthFreeWrite'] = request.enableAuthFreeWrite;
  }
  if (!$isNull(request.enableAuthToken)) {
    body['enableAuthToken'] = request.enableAuthToken;
  }
  if (!$isNull(request.paymentType)) {
    body['paymentType'] = request.paymentType;
  }
  if (!$isNull(request.prometheusInstanceName)) {
    body['prometheusInstanceName'] = request.prometheusInstanceName;
  }
  if (!$isNull(request.status)) {
    body['status'] = request.status;
  }
  if (!$isNull(request.storageDuration)) {
    body['storageDuration'] = request.storageDuration;
  }
  if (!$isNull(request.workspace)) {
    body['workspace'] = request.workspace;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdatePrometheusInstance',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/prometheus-instances/${$URL.percentEncode(prometheusInstanceId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新Prom实例信息
 *
 * @param request UpdatePrometheusInstanceRequest
 * @return UpdatePrometheusInstanceResponse
 */
async function updatePrometheusInstance(prometheusInstanceId: string, request: UpdatePrometheusInstanceRequest): UpdatePrometheusInstanceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updatePrometheusInstanceWithOptions(prometheusInstanceId, request, headers, runtime);
}

model UpdatePrometheusViewRequest {
  authFreeReadPolicy?: string(name='authFreeReadPolicy', example='0.0.0.0/0'),
  enableAuthFreeRead?: boolean(name='enableAuthFreeRead', example='true'),
  enableAuthToken?: boolean(name='enableAuthToken', example='false'),
  prometheusInstances?: [ 
    {
      prometheusInstanceId?: string(name='prometheusInstanceId', example='c7ba84651c71e442c8d0653085d862164'),
      regionId?: string(name='regionId', example='cn-north-2-gov-1'),
      userId?: string(name='userId', example='16727123456789'),
    }
  ](name='prometheusInstances'),
  prometheusViewName?: string(name='prometheusViewName', example='test-prom-view-name'),
  status?: string(name='status', example='Running'),
  workspace?: string(name='workspace', example='default-cms-108490012345-cn-heyuan'),
}

model UpdatePrometheusViewResponseBody = {
  prometheusViewId?: string(name='prometheusViewId', example='rw-xxxxxx'),
  requestId?: string(name='requestId', description='Id of the request', example='64D964F5-76C7-19A2-9399-457744AB3619'),
}

model UpdatePrometheusViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePrometheusViewResponseBody(name='body'),
}

/**
 * @summary 更新Prom视图实例信息
 *
 * @param request UpdatePrometheusViewRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdatePrometheusViewResponse
 */
@context("updatePrometheusViewWithContext")
async function updatePrometheusViewWithOptions(prometheusViewId: string, request: UpdatePrometheusViewRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdatePrometheusViewResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.authFreeReadPolicy)) {
    body['authFreeReadPolicy'] = request.authFreeReadPolicy;
  }
  if (!$isNull(request.enableAuthFreeRead)) {
    body['enableAuthFreeRead'] = request.enableAuthFreeRead;
  }
  if (!$isNull(request.enableAuthToken)) {
    body['enableAuthToken'] = request.enableAuthToken;
  }
  if (!$isNull(request.prometheusInstances)) {
    body['prometheusInstances'] = request.prometheusInstances;
  }
  if (!$isNull(request.prometheusViewName)) {
    body['prometheusViewName'] = request.prometheusViewName;
  }
  if (!$isNull(request.status)) {
    body['status'] = request.status;
  }
  if (!$isNull(request.workspace)) {
    body['workspace'] = request.workspace;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdatePrometheusView',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/prometheus-views/${$URL.percentEncode(prometheusViewId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新Prom视图实例信息
 *
 * @param request UpdatePrometheusViewRequest
 * @return UpdatePrometheusViewResponse
 */
async function updatePrometheusView(prometheusViewId: string, request: UpdatePrometheusViewRequest): UpdatePrometheusViewResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updatePrometheusViewWithOptions(prometheusViewId, request, headers, runtime);
}

model UpdateServiceRequest {
  attributes?: string(name='attributes', example='{"language":"java"}'),
  description?: string(name='description', example='test'),
  displayName?: string(name='displayName', example='api-monitor-test'),
  serviceStatus?: string(name='serviceStatus', example='Stopped'),
}

model UpdateServiceResponseBody = {
  requestId?: string(name='requestId', example='123-0F43-23423-AC43-34234'),
  serviceId?: string(name='serviceId', example='em87vd@c2e25bcfe0e21ce0***'),
}

model UpdateServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceResponseBody(name='body'),
}

/**
 * @summary 更新UpdateService
 *
 * @param request UpdateServiceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateServiceResponse
 */
@context("updateServiceWithContext")
async function updateServiceWithOptions(workspace: string, serviceId: string, request: UpdateServiceRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateServiceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.attributes)) {
    body['attributes'] = request.attributes;
  }
  if (!$isNull(request.description)) {
    body['description'] = request.description;
  }
  if (!$isNull(request.displayName)) {
    body['displayName'] = request.displayName;
  }
  if (!$isNull(request.serviceStatus)) {
    body['serviceStatus'] = request.serviceStatus;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateService',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace/${$URL.percentEncode(workspace)}/service/${$URL.percentEncode(serviceId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新UpdateService
 *
 * @param request UpdateServiceRequest
 * @return UpdateServiceResponse
 */
async function updateService(workspace: string, serviceId: string, request: UpdateServiceRequest): UpdateServiceResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateServiceWithOptions(workspace, serviceId, request, headers, runtime);
}

model UpdateUmodelRequest {
  description?: string(name='description', example='workspace test'),
}

model UpdateUmodelResponseBody = {
  requestId?: string(name='requestId', example='234324-123-123-123-23423'),
  workspace?: string(name='workspace', example='workspace-test'),
}

model UpdateUmodelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUmodelResponseBody(name='body'),
}

/**
 * @summary 更新Umodel配置信息
 *
 * @param request UpdateUmodelRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateUmodelResponse
 */
@context("updateUmodelWithContext")
async function updateUmodelWithOptions(workspace: string, request: UpdateUmodelRequest, headers: map[string]string, runtime: $RuntimeOptions): UpdateUmodelResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.description)) {
    body['description'] = request.description;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateUmodel',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace/${$URL.percentEncode(workspace)}/umodel`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新Umodel配置信息
 *
 * @param request UpdateUmodelRequest
 * @return UpdateUmodelResponse
 */
async function updateUmodel(workspace: string, request: UpdateUmodelRequest): UpdateUmodelResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return updateUmodelWithOptions(workspace, request, headers, runtime);
}

model UpsertUmodelDataRequest {
  elements?: [ any ](name='elements'),
  method?: string(name='method', example='Upsert'),
}

model UpsertUmodelDataResponseBody = {
  requestId?: string(name='requestId', example='0CEC5375-C554-562B-A65F-9A629907C1F0'),
}

model UpsertUmodelDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpsertUmodelDataResponseBody(name='body'),
}

/**
 * @summary 写入 Umodel Elements
 *
 * @param request UpsertUmodelDataRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpsertUmodelDataResponse
 */
@context("upsertUmodelDataWithContext")
async function upsertUmodelDataWithOptions(workspace: string, request: UpsertUmodelDataRequest, headers: map[string]string, runtime: $RuntimeOptions): UpsertUmodelDataResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.method)) {
    query['method'] = request.method;
  }

  var body : map[string]any = {};
  if (!$isNull(request.elements)) {
    body['elements'] = request.elements;
  }

  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpsertUmodelData',
    version = '2024-03-30',
    protocol = 'HTTPS',
    pathname = `/workspace/${$URL.percentEncode(workspace)}/umodel/data`,
    method = 'PATCH',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 写入 Umodel Elements
 *
 * @param request UpsertUmodelDataRequest
 * @return UpsertUmodelDataResponse
 */
async function upsertUmodelData(workspace: string, request: UpsertUmodelDataRequest): UpsertUmodelDataResponse {
  var runtime = new $RuntimeOptions{};
  var headers : map[string]string = {};
  return upsertUmodelDataWithOptions(workspace, request, headers, runtime);
}

