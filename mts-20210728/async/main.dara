/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Mts';
  @version = '2021-07-28';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'mts.aliyuncs.com',
    ap-southeast-2 = 'mts.aliyuncs.com',
    ap-southeast-3 = 'mts.aliyuncs.com',
    cn-beijing-finance-1 = 'mts.aliyuncs.com',
    cn-beijing-finance-pop = 'mts.aliyuncs.com',
    cn-beijing-gov-1 = 'mts.aliyuncs.com',
    cn-beijing-nu16-b01 = 'mts.aliyuncs.com',
    cn-chengdu = 'mts.aliyuncs.com',
    cn-edge-1 = 'mts.aliyuncs.com',
    cn-fujian = 'mts.aliyuncs.com',
    cn-haidian-cm12-c01 = 'mts.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'mts.aliyuncs.com',
    cn-hangzhou-finance = 'mts.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'mts.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'mts.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'mts.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'mts.aliyuncs.com',
    cn-hangzhou-test-306 = 'mts.aliyuncs.com',
    cn-hongkong-finance-pop = 'mts.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'mts.aliyuncs.com',
    cn-north-2-gov-1 = 'mts.aliyuncs.com',
    cn-qingdao-nebula = 'mts.aliyuncs.com',
    cn-shanghai-et15-b01 = 'mts.aliyuncs.com',
    cn-shanghai-et2-b01 = 'mts.aliyuncs.com',
    cn-shanghai-finance-1 = 'mts.aliyuncs.com',
    cn-shanghai-inner = 'mts.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'mts.aliyuncs.com',
    cn-shenzhen-finance-1 = 'mts.aliyuncs.com',
    cn-shenzhen-inner = 'mts.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'mts.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'mts.aliyuncs.com',
    cn-wuhan = 'mts.aliyuncs.com',
    cn-wulanchabu = 'mts.aliyuncs.com',
    cn-yushanfang = 'mts.aliyuncs.com',
    cn-zhangbei = 'mts.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'mts.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'mts.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'mts.aliyuncs.com',
    eu-west-1-oxs = 'mts.aliyuncs.com',
    me-east-1 = 'mts.aliyuncs.com',
    rus-west-1-pop = 'mts.aliyuncs.com',
    us-east-1 = 'mts.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model QueryCopyrightRequest {
  createTimeEnd?: long(name='CreateTimeEnd', description='创建时间截止', position='Body'),
  createTimeStart?: long(name='CreateTimeStart', description='创建时间起始', position='Body'),
  jobId?: string(name='JobId', description='任务id', position='Body'),
  level?: long(name='Level', description='水印强度', position='Body'),
  pageNumber?: long(name='PageNumber', description='翻页下标', position='Body'),
  pageSize?: long(name='PageSize', description='每页数量', position='Body'),
}

model QueryCopyrightResponseBody = {
  data?: [ 
    {
      callback?: string(name='Callback', description='回调url'),
      gmtCreate?: long(name='GmtCreate', description='创建时间'),
      gmtModified?: long(name='GmtModified', description='修改时间'),
      input?: string(name='Input', description='水印视频输入'),
      jobId?: string(name='JobId', description='任务id'),
      level?: long(name='Level', description='水印强度'),
      message?: string(name='Message', description='水印信息'),
      messageId?: long(name='MessageId', description='水印信息id'),
      output?: string(name='Output', description='水印视频输出'),
      result?: string(name='Result', description='任务结果'),
      status?: string(name='Status', description='状态'),
      userData?: string(name='UserData', description='用户数据'),
      userId?: long(name='UserId', description='用户ID'),
    }
  ](name='Data'),
  requestID?: string(name='RequestID'),
  statusCode?: long(name='StatusCode', description='状态码'),
}

model QueryCopyrightResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCopyrightResponseBody(name='body'),
}

async function queryCopyright(request: QueryCopyrightRequest): QueryCopyrightResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryCopyright', 'POST', '/queryCopyrightJob', 'json', false, 'json', request);
}

model QueryCopyrightExtractRequest {
  jobId: string(name='JobId', description='任务id', position='Body'),
}

model QueryCopyrightExtractResponseBody = {
  data?: {
    message?: string(name='Message', description='版权水印信息'),
  }(name='Data'),
  message?: string(name='Message', description='返回信息'),
  requestID?: string(name='RequestID'),
  statusCode?: long(name='StatusCode', description='状态码'),
}

model QueryCopyrightExtractResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCopyrightExtractResponseBody(name='body'),
}

async function queryCopyrightExtract(request: QueryCopyrightExtractRequest): QueryCopyrightExtractResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryCopyrightExtract', 'POST', '/queryCopyrightExtract', 'json', false, 'json', request);
}

model QueryTraceAbRequest {
  jobId?: string(name='JobId', description='任务id', position='Body'),
  mediaId?: string(name='MediaId', description='媒体id', position='Body'),
}

model QueryTraceAbResponseBody = {
  data?: [ 
    {
      callback?: string(name='Callback', description='任务结果回调'),
      gmtCreate?: long(name='GmtCreate', description='创建时间'),
      gmtModified?: long(name='GmtModified', description='最后修改时间'),
      input?: string(name='Input', description='输入oss地址'),
      jobId?: string(name='JobId', description='任务id'),
      level?: long(name='Level', description='水印强度'),
      mediaId?: string(name='MediaId', description='媒体id'),
      output?: string(name='Output', description='输出地址'),
      result?: string(name='Result', description='任务结果'),
      status?: string(name='Status', description='任务状态'),
      userData?: string(name='UserData', description='用户数据'),
      userId?: long(name='UserId', description='uid'),
    }
  ](name='Data', description='返回结构'),
  message?: string(name='Message', description='返回信息'),
  requestID?: string(name='RequestID', description='请求id'),
  statusCode?: long(name='StatusCode', description='状态码'),
}

model QueryTraceAbResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTraceAbResponseBody(name='body'),
}

async function queryTraceAb(request: QueryTraceAbRequest): QueryTraceAbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryTraceAb', 'POST', '/queryTraceAb', 'json', false, 'json', request);
}

model QueryTraceExtractRequest {
  jobId: string(name='JobId', description='任务id', position='Body'),
}

model QueryTraceExtractResponseBody = {
  data?: {
    trace?: string(name='Trace', description='溯源水印信息'),
  }(name='Data'),
  message?: string(name='Message', description='返回信息'),
  requestID?: string(name='RequestID'),
  statusCode?: long(name='StatusCode', description='状态码'),
}

model QueryTraceExtractResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTraceExtractResponseBody(name='body'),
}

async function queryTraceExtract(request: QueryTraceExtractRequest): QueryTraceExtractResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryTraceExtract', 'POST', '/queryTraceExtract', 'json', false, 'json', request);
}

model QueryTraceMuRequest {
  createTimeEnd?: long(name='CreateTimeEnd', description='创建时间起始', position='Body'),
  createTimeStart?: long(name='CreateTimeStart', description='创建时间截止', position='Body'),
  jobId?: string(name='JobId', description='任务id', position='Body'),
  level?: long(name='Level', description='水印强度', position='Body'),
  messageId?: long(name='MessageId', description='水印信息id', position='Body'),
  pageNumber?: long(name='PageNumber', description='页偏移', position='Body'),
  pageSize?: long(name='PageSize', description='每页数量', position='Body'),
}

model QueryTraceMuResponseBody = {
  data?: [ 
    {
      gmtCreate?: long(name='GmtCreate', description='创建时间'),
      gmtModified?: long(name='GmtModified', description='最后修改时间'),
      jobId?: string(name='JobId', description='任务id'),
      mediaId?: string(name='MediaId', description='媒体id'),
      output?: string(name='Output', description='输出oss地址'),
      status?: string(name='Status', description='任务状态'),
      trace?: string(name='Trace', description='溯源水印信息'),
      traceId?: long(name='TraceId', description='溯源水印信息id'),
      userData?: string(name='UserData', description='用户自定义数据'),
      userId?: long(name='UserId', description='uid'),
    }
  ](name='Data', description='返回数据结构'),
  message?: string(name='Message', description='返回信息'),
  requestID?: string(name='RequestID', description='请求id'),
  statusCode?: long(name='StatusCode', description='状态码'),
}

model QueryTraceMuResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTraceMuResponseBody(name='body'),
}

async function queryTraceMu(request: QueryTraceMuRequest): QueryTraceMuResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryTraceMu', 'POST', '/queryTraceM3u8', 'json', false, 'json', request);
}

model SubmitCopyrightExtractRequest {
  callBack?: string(name='CallBack', description='任务完成回调', position='Body'),
  input?: string(name='Input', description='输入文件oss地址', position='Body'),
  url?: string(name='Url', description='url链接', position='Body'),
  userData?: string(name='UserData', description='用户数据', position='Body'),
}

model SubmitCopyrightExtractResponseBody = {
  data?: {
    jobId?: string(name='JobId', description='任务id'),
  }(name='Data'),
  message?: string(name='Message', description='返回消息'),
  requestID?: string(name='RequestID'),
  statusCode?: long(name='StatusCode', description='状态码'),
}

model SubmitCopyrightExtractResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitCopyrightExtractResponseBody(name='body'),
}

async function submitCopyrightExtract(request: SubmitCopyrightExtractRequest): SubmitCopyrightExtractResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitCopyrightExtract', 'POST', '/submitCopyrightExtract', 'json', false, 'json', request);
}

model SubmitCopyrightJobRequest {
  callBack?: string(name='CallBack', description='任务结果回调url', position='Body'),
  description?: string(name='Description', description='水印信息描述', position='Body'),
  input?: string(name='Input', description='输入的视频，oss三元组', position='Body'),
  level?: long(name='Level', description='水印强度，取值1，2，3', position='Body'),
  message: string(name='Message', description='水印信息', position='Body'),
  output: string(name='Output', description='输出的视频，oss三元组', position='Body'),
  params?: string(name='Params', description='水印参数', position='Body'),
  startTime?: long(name='StartTime', description='水印起始时间(单位是秒)，不填写默认为0', position='Body'),
  totalTime?: long(name='TotalTime', description='水印结束时间(单位是秒)，不填默认为60000', position='Body'),
  url?: string(name='Url', description='外部url链接(Input和url二选一)', position='Body'),
  userData?: string(name='UserData', description='用户自定义数据', position='Body'),
  visibleMessage?: string(name='VisibleMessage', description='可见水印(必须是英文字符)', position='Body'),
}

model SubmitCopyrightJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', description='任务id'),
  }(name='Data', description='返回数据'),
  message?: string(name='Message', description='返回信息'),
  requestID?: string(name='RequestID', description='请求Id'),
  statusCode?: long(name='StatusCode', description='状态码'),
}

model SubmitCopyrightJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitCopyrightJobResponseBody(name='body'),
}

async function submitCopyrightJob(request: SubmitCopyrightJobRequest): SubmitCopyrightJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitCopyrightJob', 'POST', '/submitCopyrightJob', 'json', false, 'json', request);
}

model SubmitImageCopyrightRequest {
  level?: long(name='Level', description='水印强度', position='Body'),
  message: string(name='Message', description='水印信息', position='Body'),
  output?: string(name='Output', description='水印图片输出oss地址', position='Body'),
  params?: string(name='Params', description='参数', position='Body'),
}

model SubmitImageCopyrightResponseBody = {
  data?: {
    jobId?: string(name='JobId', description='任务id'),
  }(name='Data', description='返回数据'),
  message?: string(name='Message', description='返回信息'),
  requestID?: string(name='RequestID', description='请求id'),
  statusCode?: long(name='StatusCode', description='状态码'),
}

model SubmitImageCopyrightResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitImageCopyrightResponseBody(name='body'),
}

async function submitImageCopyright(request: SubmitImageCopyrightRequest): SubmitImageCopyrightResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitImageCopyright', 'POST', '/submitImageCopyright', 'json', false, 'json', request);
}

model SubmitTraceAbRequest {
  callBack?: string(name='CallBack', description='任务结果回调', position='Body'),
  cipherBase64ed?: string(name='CipherBase64ed', description='密钥base64串', position='Body'),
  input?: string(name='Input', description='溯源水印ab流处理视频输入', position='Body'),
  level: long(name='Level', description='水印强度', position='Body'),
  output: string(name='Output', description='溯源水印ab流处理输出', position='Body'),
  startTime?: long(name='StartTime', description='嵌入水印开始时间', minimum=0, position='Body'),
  totalTime?: long(name='TotalTime', description='嵌入水印总时长', minimum=0, position='Body'),
  url?: string(name='Url', description='外部url链接(Input和url二选一)', position='Body'),
  userData?: string(name='UserData', description='用户自定义数据，最大长度1024个字节', position='Body'),
}

model SubmitTraceAbResponseBody = {
  data?: {
    jobId?: string(name='JobId', description='任务ID'),
    mediaId?: string(name='MediaId', description='媒体id'),
  }(name='Data', description='返回数据'),
  message?: string(name='Message', description='返回信息'),
  requestID?: string(name='RequestID', description='请求Id'),
  statusCode?: long(name='StatusCode', description='状态码'),
}

model SubmitTraceAbResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitTraceAbResponseBody(name='body'),
}

async function submitTraceAb(request: SubmitTraceAbRequest): SubmitTraceAbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitTraceAb', 'POST', '/submitTraceAb', 'json', false, 'json', request);
}

model SubmitTraceExtractRequest {
  callBack?: string(name='CallBack', description='任务完成回调', position='Body'),
  input?: string(name='Input', description='输入文件oss地址', position='Body'),
  url?: string(name='Url', description='url链接', position='Body'),
  userData?: string(name='UserData', description='用户数据', position='Body'),
}

model SubmitTraceExtractResponseBody = {
  data?: {
    jobId?: string(name='JobId', description='任务id'),
  }(name='Data'),
  message?: string(name='Message', description='返回消息'),
  requestID?: string(name='RequestID'),
  statusCode?: long(name='StatusCode', description='状态码'),
}

model SubmitTraceExtractResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitTraceExtractResponseBody(name='body'),
}

async function submitTraceExtract(request: SubmitTraceExtractRequest): SubmitTraceExtractResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitTraceExtract', 'POST', '/submitTraceExtract', 'json', false, 'json', request);
}

model SubmitTracemuRequest {
  keyUri?: string(name='KeyUri', description='密钥服务器uri', position='Body'),
  mediaId: string(name='MediaId', description='ab流处理后的媒体id', position='Body'),
  output: string(name='Output', description='m3u8文件输出oss地址', position='Body'),
  trace: string(name='Trace', description='溯源水印信息', position='Body'),
}

model SubmitTracemuResponseBody = {
  data?: {
    code?: string(name='Code', description='生成m3u8文件的code'),
    jobId?: string(name='JobId', description='任务id'),
  }(name='Data', description='返回数据'),
  message?: string(name='Message', description='返回信息'),
  requestID?: string(name='RequestID', description='请求Id'),
  statusCode?: long(name='StatusCode', description='状态码'),
}

model SubmitTracemuResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitTracemuResponseBody(name='body'),
}

async function submitTracemu(request: SubmitTracemuRequest): SubmitTracemuResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitTracemu', 'POST', '/submitTraceM3u8', 'json', false, 'json', request);
}

