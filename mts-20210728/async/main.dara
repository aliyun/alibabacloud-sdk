/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Mts';
  @version = '2021-07-28';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'mts.aliyuncs.com',
    ap-southeast-2 = 'mts.aliyuncs.com',
    ap-southeast-3 = 'mts.aliyuncs.com',
    cn-beijing-finance-1 = 'mts.aliyuncs.com',
    cn-beijing-finance-pop = 'mts.aliyuncs.com',
    cn-beijing-gov-1 = 'mts.aliyuncs.com',
    cn-beijing-nu16-b01 = 'mts.aliyuncs.com',
    cn-chengdu = 'mts.aliyuncs.com',
    cn-edge-1 = 'mts.aliyuncs.com',
    cn-fujian = 'mts.aliyuncs.com',
    cn-haidian-cm12-c01 = 'mts.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'mts.aliyuncs.com',
    cn-hangzhou-finance = 'mts.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'mts.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'mts.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'mts.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'mts.aliyuncs.com',
    cn-hangzhou-test-306 = 'mts.aliyuncs.com',
    cn-hongkong-finance-pop = 'mts.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'mts.aliyuncs.com',
    cn-north-2-gov-1 = 'mts.aliyuncs.com',
    cn-qingdao-nebula = 'mts.aliyuncs.com',
    cn-shanghai-et15-b01 = 'mts.aliyuncs.com',
    cn-shanghai-et2-b01 = 'mts.aliyuncs.com',
    cn-shanghai-finance-1 = 'mts.aliyuncs.com',
    cn-shanghai-inner = 'mts.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'mts.aliyuncs.com',
    cn-shenzhen-finance-1 = 'mts.aliyuncs.com',
    cn-shenzhen-inner = 'mts.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'mts.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'mts.aliyuncs.com',
    cn-wuhan = 'mts.aliyuncs.com',
    cn-wulanchabu = 'mts.aliyuncs.com',
    cn-yushanfang = 'mts.aliyuncs.com',
    cn-zhangbei = 'mts.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'mts.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'mts.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'mts.aliyuncs.com',
    eu-west-1-oxs = 'mts.aliyuncs.com',
    me-east-1 = 'mts.aliyuncs.com',
    rus-west-1-pop = 'mts.aliyuncs.com',
    us-east-1 = 'mts.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model QueryCopyrightRequest {
  createTimeEnd?: long(name='CreateTimeEnd', example='1627357322', position='Body'),
  createTimeStart?: long(name='CreateTimeStart', example='1627357322', position='Body'),
  jobId?: string(name='JobId', example='e44f30ce-21d9-4814-901d-7925f748****', position='Body'),
  level?: long(name='Level', example='2', position='Body'),
  pageNumber?: long(name='PageNumber', example='0', position='Body'),
  pageSize?: long(name='PageSize', example='1', position='Body'),
}

model QueryCopyrightResponseBody = {
  data?: [ 
    {
      callback?: string(name='Callback', example='http://example.com/callback'),
      gmtCreate?: long(name='GmtCreate', example='1627357322'),
      gmtModified?: long(name='GmtModified', example='1627357322'),
      input?: string(name='Input', example='{"Bucket":"abc-test","Location":"oss-cn-shanghai","Object":"test.mp4"}'),
      jobId?: string(name='JobId', example='bfb786c639894f4d80648792021e****'),
      level?: long(name='Level', example='2'),
      message?: string(name='Message', example='平头哥半导体(上海)'),
      messageId?: long(name='MessageId', example='82'),
      output?: string(name='Output', example='{"Bucket":"abc-test","Location":"oss-cn-shanghai","Object":"out.mp4"}'),
      result?: string(name='Result', example='{"Code":"success","Message":"ok"}'),
      status?: string(name='Status', example='Success'),
      userData?: string(name='UserData', example='{"uid":134669327666****}'),
      userId?: long(name='UserId', example='134669327666****'),
    }
  ](name='Data'),
  requestID?: string(name='RequestID', example='61038D1A424235AE267B9817'),
  statusCode?: long(name='StatusCode', example='200'),
}

model QueryCopyrightResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCopyrightResponseBody(name='body'),
}

async function queryCopyright(request: QueryCopyrightRequest): QueryCopyrightResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryCopyright', 'POST', '/queryCopyrightJob', 'json', false, 'json', request);
}

model QueryCopyrightExtractRequest {
  jobId: string(name='JobId', example='ebbfe90c63b54ed4b61acb2f6c44****', position='Body'),
}

model QueryCopyrightExtractResponseBody = {
  data?: {
    message?: string(name='Message', example='example water mark'),
  }(name='Data'),
  message?: string(name='Message', example='ok'),
  requestID?: string(name='RequestID', example='54BB917F-DD35-4F32-BABA-E60E31B21W63'),
  statusCode?: long(name='StatusCode', example='200'),
}

model QueryCopyrightExtractResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCopyrightExtractResponseBody(name='body'),
}

async function queryCopyrightExtract(request: QueryCopyrightExtractRequest): QueryCopyrightExtractResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryCopyrightExtract', 'POST', '/queryCopyrightExtract', 'json', false, 'json', request);
}

model QueryTraceAbRequest {
  jobId?: string(name='JobId', example='a20f60d76ac9485496c4a1c6fa70****', position='Body'),
  mediaId?: string(name='MediaId', example='437bd2b516ffda105d07b12a9a82****', position='Body'),
}

model QueryTraceAbResponseBody = {
  data?: [ 
    {
      callback?: string(name='Callback', example='http://example.com/callback'),
      gmtCreate?: long(name='GmtCreate', example='1727441315'),
      gmtModified?: long(name='GmtModified', example='1727441315'),
      input?: string(name='Input', example='{"Bucket":"exampleBucket","Location":"oss-cn-shanghai","Object":"test.jpeg"}'),
      jobId?: string(name='JobId', example='bfb786c639894f4d80648792021e****'),
      level?: long(name='Level', example='2'),
      mediaId?: string(name='MediaId', example='437bd2b516ffda105d07b12a9a82****'),
      output?: string(name='Output', example='{"Bucket":"ivison-test","Location":"oss-cn-shanghai","Dir":"out/"}'),
      result?: string(name='Result', example='{"Code":"success","Message":"ok"}'),
      status?: string(name='Status', example='Success'),
      userData?: string(name='UserData', example='{"uid":134669327666****}'),
      userId?: long(name='UserId', example='134669327666****'),
    }
  ](name='Data'),
  message?: string(name='Message', example='ok'),
  requestID?: string(name='RequestID', example='61038D31354232E106FB****'),
  statusCode?: long(name='StatusCode', example='200'),
}

model QueryTraceAbResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTraceAbResponseBody(name='body'),
}

async function queryTraceAb(request: QueryTraceAbRequest): QueryTraceAbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryTraceAb', 'POST', '/queryTraceAb', 'json', false, 'json', request);
}

model QueryTraceExtractRequest {
  jobId: string(name='JobId', example='ebbfe90c63b54ed4b61acb2f6c44****', position='Body'),
}

model QueryTraceExtractResponseBody = {
  data?: {
    trace?: string(name='Trace', example='example water mark'),
  }(name='Data'),
  message?: string(name='Message', example='ok'),
  requestID?: string(name='RequestID', example='610399D2334334AE2CB70C28'),
  statusCode?: long(name='StatusCode', example='200'),
}

model QueryTraceExtractResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTraceExtractResponseBody(name='body'),
}

async function queryTraceExtract(request: QueryTraceExtractRequest): QueryTraceExtractResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryTraceExtract', 'POST', '/queryTraceExtract', 'json', false, 'json', request);
}

model QueryTraceMuRequest {
  createTimeEnd?: long(name='CreateTimeEnd', example='1527441300', position='Body'),
  createTimeStart?: long(name='CreateTimeStart', example='1527441300', position='Body'),
  jobId?: string(name='JobId', example='bfb786c639894f4d80648792021e****', position='Body'),
  level?: long(name='Level', example='2', position='Body'),
  messageId?: long(name='MessageId', example='78', position='Body'),
  pageNumber?: long(name='PageNumber', example='0', position='Body'),
  pageSize?: long(name='PageSize', example='5', position='Body'),
}

model QueryTraceMuResponseBody = {
  data?: [ 
    {
      gmtCreate?: long(name='GmtCreate', example='1527441300'),
      gmtModified?: long(name='GmtModified', example='1527441300'),
      jobId?: string(name='JobId', example='bfb786c639894f4d80648792021e****'),
      mediaId?: string(name='MediaId', example='437bd2b516ffda105d07b12a9a82****'),
      output?: string(name='Output', example='{"Bucket":"ivison-test","Location":"oss-cn-shanghai","Object":"out/test.m3u8"}'),
      status?: string(name='Status', example='Success'),
      trace?: string(name='Trace', example='平头哥半导体'),
      traceId?: long(name='TraceId', example='65'),
      userData?: string(name='UserData', example='{"uid":134669327666****}'),
      userId?: long(name='UserId', example='1346693276669150'),
    }
  ](name='Data'),
  message?: string(name='Message', example='ok'),
  requestID?: string(name='RequestID', example='61038D2F324544B46C27783B'),
  statusCode?: long(name='StatusCode', example='200'),
}

model QueryTraceMuResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTraceMuResponseBody(name='body'),
}

async function queryTraceMu(request: QueryTraceMuRequest): QueryTraceMuResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryTraceMu', 'POST', '/queryTraceM3u8', 'json', false, 'json', request);
}

model SubmitCopyrightExtractRequest {
  callBack?: string(name='CallBack', example='http://example.com/callback', position='Body'),
  input?: string(name='Input', example='{"Bucket":"example","Location":"oss-cn-shanghai","Object":"example.mp4"}', position='Body'),
  params?: string(name='Params', example='{"strength":"1"}', position='Body'),
  url?: string(name='Url', example='http://example.com/test.mp4', position='Body'),
  userData?: string(name='UserData', example='23test', position='Body'),
}

model SubmitCopyrightExtractResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='ebbfe90c63b54ed4b61acb2f6c44****'),
  }(name='Data'),
  message?: string(name='Message', example='ok'),
  requestID?: string(name='RequestID', example='610399D2334334AE2CB70C28'),
  statusCode?: long(name='StatusCode', example='200'),
}

model SubmitCopyrightExtractResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitCopyrightExtractResponseBody(name='body'),
}

async function submitCopyrightExtract(request: SubmitCopyrightExtractRequest): SubmitCopyrightExtractResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitCopyrightExtract', 'POST', '/submitCopyrightExtract', 'json', false, 'json', request);
}

model SubmitCopyrightJobRequest {
  callBack?: string(name='CallBack', example='http://example.com/callback', position='Body'),
  description?: string(name='Description', example='地址 : 上海市浦东新区上科路366号川和路55弄2号5层水印信息描述', position='Body'),
  input?: string(name='Input', example='{"Bucket":"example-bucket","Location":"oss-cn-shanghai","Object":"example.flv"}', position='Body'),
  level?: long(name='Level', example='2', position='Body'),
  message: string(name='Message', example='平头哥(上海)半导体技术有限公司水印信息', position='Body'),
  output: string(name='Output', example='{"Bucket":"example-bucket","Location":"oss-cn-shanghai","Object":"example.flv"}', position='Body'),
  params?: string(name='Params', example='{"vsid":"198"}', position='Body'),
  startTime?: long(name='StartTime', example='100', position='Body'),
  totalTime?: long(name='TotalTime', example='1000', position='Body'),
  url?: string(name='Url', example='http://www.example.com/video/test.mp4', position='Body'),
  userData?: string(name='UserData', example='123', position='Body'),
  visibleMessage?: string(name='VisibleMessage', example='abcd', position='Body'),
}

model SubmitCopyrightJobResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='bfb786c639894f4d80648792021e****'),
  }(name='Data'),
  message?: string(name='Message', example='ok'),
  requestID?: string(name='RequestID', example='610399D2334334AE2CB70C28'),
  statusCode?: long(name='StatusCode', example='200'),
}

model SubmitCopyrightJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitCopyrightJobResponseBody(name='body'),
}

async function submitCopyrightJob(request: SubmitCopyrightJobRequest): SubmitCopyrightJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitCopyrightJob', 'POST', '/submitCopyrightJob', 'json', false, 'json', request);
}

model SubmitImageCopyrightRequest {
  level?: long(name='Level', example='2', position='Body'),
  message: string(name='Message', example='平头哥半导体科技有限公司', position='Body'),
  output?: string(name='Output', example='{"Bucket":"abc-test","Location":"oss-cn-shanghai","Object":"out.jpeg"}', position='Body'),
  params?: string(name='Params', example='{"width":2999, "height":2999, "afa": 3, "type":1, "version":0}', position='Body'),
}

model SubmitImageCopyrightResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='bfb786c639894f4d80648792021e****'),
  }(name='Data'),
  message?: string(name='Message', example='ok'),
  requestID?: string(name='RequestID', example='61038671443432952925C670'),
  statusCode?: long(name='StatusCode', example='200'),
}

model SubmitImageCopyrightResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitImageCopyrightResponseBody(name='body'),
}

async function submitImageCopyright(request: SubmitImageCopyrightRequest): SubmitImageCopyrightResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitImageCopyright', 'POST', '/submitImageCopyright', 'json', false, 'json', request);
}

model SubmitTraceAbRequest {
  callBack?: string(name='CallBack', example='http://example.com/callback', position='Body'),
  cipherBase64ed?: string(name='CipherBase64ed', example='Qh6OdgIMcliQSI1fReOw****', position='Body'),
  input?: string(name='Input', example='{"Bucket":"ivison-test","Location":"oss-cn-shanghai","Object":"test.mp4"}', position='Body'),
  level: long(name='Level', example='2', position='Body'),
  output: string(name='Output', example='{"Bucket":"ivison-test","Location":"oss-cn-shanghai","Dir":"out/"}', position='Body'),
  startTime?: long(name='StartTime', example='0', minimum=0, position='Body'),
  totalTime?: long(name='TotalTime', example='360', minimum=0, position='Body'),
  url?: string(name='Url', example='http://example.com/image_01.jpg', position='Body'),
  userData?: string(name='UserData', example='{uid:1765****}', position='Body'),
}

model SubmitTraceAbResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='bfb786c639894f4d80648792021e****'),
    mediaId?: string(name='MediaId', example='437bd2b516ffda105d07b12a9a82****'),
  }(name='Data'),
  message?: string(name='Message', example='ok'),
  requestID?: string(name='RequestID', example='610399D2334334AE2CB70C28'),
  statusCode?: long(name='StatusCode', example='200'),
}

model SubmitTraceAbResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitTraceAbResponseBody(name='body'),
}

async function submitTraceAb(request: SubmitTraceAbRequest): SubmitTraceAbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitTraceAb', 'POST', '/submitTraceAb', 'json', false, 'json', request);
}

model SubmitTraceExtractRequest {
  callBack?: string(name='CallBack', example='http://example.com/callback', position='Body'),
  input?: string(name='Input', example='{"Bucket":"example","Location":"oss-cn-shanghai","Object":"example.mp4"}', position='Body'),
  url?: string(name='Url', example='http://example.com/test.mp4', position='Body'),
  userData?: string(name='UserData', example='51test', position='Body'),
}

model SubmitTraceExtractResponseBody = {
  data?: {
    jobId?: string(name='JobId', example='ebbfe90c63b54ed4b61acb2f6c44****'),
  }(name='Data'),
  message?: string(name='Message', example='ok'),
  requestID?: string(name='RequestID', example='610399D2334334AE2CB70C28'),
  statusCode?: long(name='StatusCode', example='200'),
}

model SubmitTraceExtractResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitTraceExtractResponseBody(name='body'),
}

async function submitTraceExtract(request: SubmitTraceExtractRequest): SubmitTraceExtractResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitTraceExtract', 'POST', '/submitTraceExtract', 'json', false, 'json', request);
}

model SubmitTracemuRequest {
  keyUri?: string(name='KeyUri', example='https://cipher.abc.com', position='Body'),
  mediaId: string(name='MediaId', example='437bd2b516ffda105d07b12a9a82****', position='Body'),
  output: string(name='Output', example='{"Bucket":"exampleBucket","Location":"oss-cn-shanghai","Object":"out.m3u8"}', position='Body'),
  trace: string(name='Trace', example='平头哥半导体科技有限公司', position='Body'),
}

model SubmitTracemuResponseBody = {
  data?: {
    code?: string(name='Code', example='10011001110101010101****'),
    jobId?: string(name='JobId', example='bfb786c639894f4d80648792021e****'),
  }(name='Data'),
  message?: string(name='Message', example='ok'),
  requestID?: string(name='RequestID', example='610393F5324544B46C60****'),
  statusCode?: long(name='StatusCode', example='200'),
}

model SubmitTracemuResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitTracemuResponseBody(name='body'),
}

async function submitTracemu(request: SubmitTracemuRequest): SubmitTracemuResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitTracemu', 'POST', '/submitTraceM3u8', 'json', false, 'json', request);
}

