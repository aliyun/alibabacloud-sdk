/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'mts.aliyuncs.com',
    ap-southeast-2 = 'mts.aliyuncs.com',
    ap-southeast-3 = 'mts.aliyuncs.com',
    cn-beijing-finance-1 = 'mts.aliyuncs.com',
    cn-beijing-finance-pop = 'mts.aliyuncs.com',
    cn-beijing-gov-1 = 'mts.aliyuncs.com',
    cn-beijing-nu16-b01 = 'mts.aliyuncs.com',
    cn-chengdu = 'mts.aliyuncs.com',
    cn-edge-1 = 'mts.aliyuncs.com',
    cn-fujian = 'mts.aliyuncs.com',
    cn-haidian-cm12-c01 = 'mts.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'mts.aliyuncs.com',
    cn-hangzhou-finance = 'mts.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'mts.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'mts.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'mts.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'mts.aliyuncs.com',
    cn-hangzhou-test-306 = 'mts.aliyuncs.com',
    cn-hongkong-finance-pop = 'mts.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'mts.aliyuncs.com',
    cn-north-2-gov-1 = 'mts.aliyuncs.com',
    cn-qingdao-nebula = 'mts.aliyuncs.com',
    cn-shanghai-et15-b01 = 'mts.aliyuncs.com',
    cn-shanghai-et2-b01 = 'mts.aliyuncs.com',
    cn-shanghai-finance-1 = 'mts.aliyuncs.com',
    cn-shanghai-inner = 'mts.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'mts.aliyuncs.com',
    cn-shenzhen-finance-1 = 'mts.aliyuncs.com',
    cn-shenzhen-inner = 'mts.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'mts.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'mts.aliyuncs.com',
    cn-wuhan = 'mts.aliyuncs.com',
    cn-wulanchabu = 'mts.aliyuncs.com',
    cn-yushanfang = 'mts.aliyuncs.com',
    cn-zhangbei = 'mts.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'mts.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'mts.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'mts.aliyuncs.com',
    eu-west-1-oxs = 'mts.aliyuncs.com',
    me-east-1 = 'mts.aliyuncs.com',
    rus-west-1-pop = 'mts.aliyuncs.com',
    us-east-1 = 'mts.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('mts', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model QueryCopyrightRequest {
  createTimeEnd?: long(name='CreateTimeEnd'),
  createTimeStart?: long(name='CreateTimeStart'),
  jobId?: string(name='JobId'),
  level?: long(name='Level'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model QueryCopyrightResponseBody = {
  data?: [ 
    {
      callback?: string(name='Callback'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      input?: string(name='Input'),
      jobId?: string(name='JobId'),
      level?: long(name='Level'),
      message?: string(name='Message'),
      messageId?: long(name='MessageId'),
      output?: string(name='Output'),
      result?: string(name='Result'),
      status?: string(name='Status'),
      userData?: string(name='UserData'),
      userId?: long(name='UserId'),
    }
  ](name='Data'),
  requestID?: string(name='RequestID'),
  statusCode?: long(name='StatusCode'),
}

model QueryCopyrightResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCopyrightResponseBody(name='body'),
}

async function queryCopyright(request: QueryCopyrightRequest): QueryCopyrightResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryCopyrightWithOptions(request, headers, runtime);
}

async function queryCopyrightWithOptions(request: QueryCopyrightRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCopyrightResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.createTimeEnd)) {
    body['CreateTimeEnd'] = request.createTimeEnd;
  }
  if (!Util.isUnset(request.createTimeStart)) {
    body['CreateTimeStart'] = request.createTimeStart;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.level)) {
    body['Level'] = request.level;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryCopyright',
    version = '2021-07-28',
    protocol = 'HTTPS',
    pathname = `/queryCopyrightJob`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model QueryCopyrightExtractRequest {
  jobId?: string(name='JobId'),
}

model QueryCopyrightExtractResponseBody = {
  data?: {
    message?: string(name='Message'),
  }(name='Data'),
  message?: string(name='Message'),
  requestID?: string(name='RequestID'),
  statusCode?: long(name='StatusCode'),
}

model QueryCopyrightExtractResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCopyrightExtractResponseBody(name='body'),
}

async function queryCopyrightExtract(request: QueryCopyrightExtractRequest): QueryCopyrightExtractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryCopyrightExtractWithOptions(request, headers, runtime);
}

async function queryCopyrightExtractWithOptions(request: QueryCopyrightExtractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCopyrightExtractResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryCopyrightExtract',
    version = '2021-07-28',
    protocol = 'HTTPS',
    pathname = `/queryCopyrightExtract`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model QueryTraceAbRequest {
  jobId?: string(name='JobId'),
  mediaId?: string(name='MediaId'),
}

model QueryTraceAbResponseBody = {
  data?: [ 
    {
      callback?: string(name='Callback'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      input?: string(name='Input'),
      jobId?: string(name='JobId'),
      level?: long(name='Level'),
      mediaId?: string(name='MediaId'),
      output?: string(name='Output'),
      result?: string(name='Result'),
      status?: string(name='Status'),
      userData?: string(name='UserData'),
      userId?: long(name='UserId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestID?: string(name='RequestID'),
  statusCode?: long(name='StatusCode'),
}

model QueryTraceAbResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTraceAbResponseBody(name='body'),
}

async function queryTraceAb(request: QueryTraceAbRequest): QueryTraceAbResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryTraceAbWithOptions(request, headers, runtime);
}

async function queryTraceAbWithOptions(request: QueryTraceAbRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceAbResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.mediaId)) {
    body['MediaId'] = request.mediaId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryTraceAb',
    version = '2021-07-28',
    protocol = 'HTTPS',
    pathname = `/queryTraceAb`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model QueryTraceExtractRequest {
  jobId?: string(name='JobId'),
}

model QueryTraceExtractResponseBody = {
  data?: {
    trace?: string(name='Trace'),
  }(name='Data'),
  message?: string(name='Message'),
  requestID?: string(name='RequestID'),
  statusCode?: long(name='StatusCode'),
}

model QueryTraceExtractResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTraceExtractResponseBody(name='body'),
}

async function queryTraceExtract(request: QueryTraceExtractRequest): QueryTraceExtractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryTraceExtractWithOptions(request, headers, runtime);
}

async function queryTraceExtractWithOptions(request: QueryTraceExtractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceExtractResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryTraceExtract',
    version = '2021-07-28',
    protocol = 'HTTPS',
    pathname = `/queryTraceExtract`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model QueryTraceMuRequest {
  createTimeEnd?: long(name='CreateTimeEnd'),
  createTimeStart?: long(name='CreateTimeStart'),
  jobId?: string(name='JobId'),
  level?: long(name='Level'),
  messageId?: long(name='MessageId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model QueryTraceMuResponseBody = {
  data?: [ 
    {
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      jobId?: string(name='JobId'),
      mediaId?: string(name='MediaId'),
      output?: string(name='Output'),
      status?: string(name='Status'),
      trace?: string(name='Trace'),
      traceId?: long(name='TraceId'),
      userData?: string(name='UserData'),
      userId?: long(name='UserId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestID?: string(name='RequestID'),
  statusCode?: long(name='StatusCode'),
}

model QueryTraceMuResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTraceMuResponseBody(name='body'),
}

async function queryTraceMu(request: QueryTraceMuRequest): QueryTraceMuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryTraceMuWithOptions(request, headers, runtime);
}

async function queryTraceMuWithOptions(request: QueryTraceMuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceMuResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.createTimeEnd)) {
    body['CreateTimeEnd'] = request.createTimeEnd;
  }
  if (!Util.isUnset(request.createTimeStart)) {
    body['CreateTimeStart'] = request.createTimeStart;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.level)) {
    body['Level'] = request.level;
  }
  if (!Util.isUnset(request.messageId)) {
    body['MessageId'] = request.messageId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryTraceMu',
    version = '2021-07-28',
    protocol = 'HTTPS',
    pathname = `/queryTraceM3u8`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SubmitCopyrightExtractRequest {
  callBack?: string(name='CallBack'),
  input?: string(name='Input'),
  url?: string(name='Url'),
  userData?: string(name='UserData'),
}

model SubmitCopyrightExtractResponseBody = {
  data?: {
    jobId?: string(name='JobId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestID?: string(name='RequestID'),
  statusCode?: long(name='StatusCode'),
}

model SubmitCopyrightExtractResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitCopyrightExtractResponseBody(name='body'),
}

async function submitCopyrightExtract(request: SubmitCopyrightExtractRequest): SubmitCopyrightExtractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return submitCopyrightExtractWithOptions(request, headers, runtime);
}

async function submitCopyrightExtractWithOptions(request: SubmitCopyrightExtractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitCopyrightExtractResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.callBack)) {
    body['CallBack'] = request.callBack;
  }
  if (!Util.isUnset(request.input)) {
    body['Input'] = request.input;
  }
  if (!Util.isUnset(request.url)) {
    body['Url'] = request.url;
  }
  if (!Util.isUnset(request.userData)) {
    body['UserData'] = request.userData;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitCopyrightExtract',
    version = '2021-07-28',
    protocol = 'HTTPS',
    pathname = `/submitCopyrightExtract`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SubmitCopyrightJobRequest {
  callBack?: string(name='CallBack'),
  description?: string(name='Description'),
  input?: string(name='Input'),
  level?: long(name='Level'),
  message?: string(name='Message'),
  output?: string(name='Output'),
  startTime?: long(name='StartTime'),
  totalTime?: long(name='TotalTime'),
  url?: string(name='Url'),
  userData?: string(name='UserData'),
  visibleMessage?: string(name='VisibleMessage'),
}

model SubmitCopyrightJobResponseBody = {
  data?: {
    jobId?: string(name='JobId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestID?: string(name='RequestID'),
  statusCode?: long(name='StatusCode'),
}

model SubmitCopyrightJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitCopyrightJobResponseBody(name='body'),
}

async function submitCopyrightJob(request: SubmitCopyrightJobRequest): SubmitCopyrightJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return submitCopyrightJobWithOptions(request, headers, runtime);
}

async function submitCopyrightJobWithOptions(request: SubmitCopyrightJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitCopyrightJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.callBack)) {
    body['CallBack'] = request.callBack;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.input)) {
    body['Input'] = request.input;
  }
  if (!Util.isUnset(request.level)) {
    body['Level'] = request.level;
  }
  if (!Util.isUnset(request.message)) {
    body['Message'] = request.message;
  }
  if (!Util.isUnset(request.output)) {
    body['Output'] = request.output;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.totalTime)) {
    body['TotalTime'] = request.totalTime;
  }
  if (!Util.isUnset(request.url)) {
    body['Url'] = request.url;
  }
  if (!Util.isUnset(request.userData)) {
    body['UserData'] = request.userData;
  }
  if (!Util.isUnset(request.visibleMessage)) {
    body['VisibleMessage'] = request.visibleMessage;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitCopyrightJob',
    version = '2021-07-28',
    protocol = 'HTTPS',
    pathname = `/submitCopyrightJob`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SubmitImageCopyrightRequest {
  input?: string(name='Input'),
  level?: long(name='Level'),
  message?: string(name='Message'),
  output?: string(name='Output'),
  params?: string(name='Params'),
  url?: string(name='Url'),
}

model SubmitImageCopyrightResponseBody = {
  data?: {
    jobId?: string(name='JobId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestID?: string(name='RequestID'),
  statusCode?: long(name='StatusCode'),
}

model SubmitImageCopyrightResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitImageCopyrightResponseBody(name='body'),
}

async function submitImageCopyright(request: SubmitImageCopyrightRequest): SubmitImageCopyrightResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return submitImageCopyrightWithOptions(request, headers, runtime);
}

async function submitImageCopyrightWithOptions(request: SubmitImageCopyrightRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitImageCopyrightResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.input)) {
    body['Input'] = request.input;
  }
  if (!Util.isUnset(request.level)) {
    body['Level'] = request.level;
  }
  if (!Util.isUnset(request.message)) {
    body['Message'] = request.message;
  }
  if (!Util.isUnset(request.output)) {
    body['Output'] = request.output;
  }
  if (!Util.isUnset(request.params)) {
    body['Params'] = request.params;
  }
  if (!Util.isUnset(request.url)) {
    body['Url'] = request.url;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitImageCopyright',
    version = '2021-07-28',
    protocol = 'HTTPS',
    pathname = `/submitImageCopyright`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SubmitTraceAbRequest {
  callBack?: string(name='CallBack'),
  cipherBase64ed?: string(name='CipherBase64ed'),
  input?: string(name='Input'),
  level?: long(name='Level'),
  output?: string(name='Output'),
  startTime?: long(name='StartTime'),
  totalTime?: long(name='TotalTime'),
  url?: string(name='Url'),
  userData?: string(name='UserData'),
}

model SubmitTraceAbResponseBody = {
  data?: {
    jobId?: string(name='JobId'),
    mediaId?: string(name='MediaId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestID?: string(name='RequestID'),
  statusCode?: long(name='StatusCode'),
}

model SubmitTraceAbResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitTraceAbResponseBody(name='body'),
}

async function submitTraceAb(request: SubmitTraceAbRequest): SubmitTraceAbResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return submitTraceAbWithOptions(request, headers, runtime);
}

async function submitTraceAbWithOptions(request: SubmitTraceAbRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitTraceAbResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.callBack)) {
    body['CallBack'] = request.callBack;
  }
  if (!Util.isUnset(request.cipherBase64ed)) {
    body['CipherBase64ed'] = request.cipherBase64ed;
  }
  if (!Util.isUnset(request.input)) {
    body['Input'] = request.input;
  }
  if (!Util.isUnset(request.level)) {
    body['Level'] = request.level;
  }
  if (!Util.isUnset(request.output)) {
    body['Output'] = request.output;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.totalTime)) {
    body['TotalTime'] = request.totalTime;
  }
  if (!Util.isUnset(request.url)) {
    body['Url'] = request.url;
  }
  if (!Util.isUnset(request.userData)) {
    body['UserData'] = request.userData;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitTraceAb',
    version = '2021-07-28',
    protocol = 'HTTPS',
    pathname = `/submitTraceAb`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SubmitTraceExtractRequest {
  callBack?: string(name='CallBack'),
  input?: string(name='Input'),
  url?: string(name='Url'),
  userData?: string(name='UserData'),
}

model SubmitTraceExtractResponseBody = {
  data?: {
    jobId?: string(name='JobId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestID?: string(name='RequestID'),
  statusCode?: long(name='StatusCode'),
}

model SubmitTraceExtractResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitTraceExtractResponseBody(name='body'),
}

async function submitTraceExtract(request: SubmitTraceExtractRequest): SubmitTraceExtractResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return submitTraceExtractWithOptions(request, headers, runtime);
}

async function submitTraceExtractWithOptions(request: SubmitTraceExtractRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitTraceExtractResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.callBack)) {
    body['CallBack'] = request.callBack;
  }
  if (!Util.isUnset(request.input)) {
    body['Input'] = request.input;
  }
  if (!Util.isUnset(request.url)) {
    body['Url'] = request.url;
  }
  if (!Util.isUnset(request.userData)) {
    body['UserData'] = request.userData;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitTraceExtract',
    version = '2021-07-28',
    protocol = 'HTTPS',
    pathname = `/submitTraceExtract`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SubmitTracemuRequest {
  keyUri?: string(name='KeyUri'),
  mediaId?: string(name='MediaId'),
  output?: string(name='Output'),
  trace?: string(name='Trace'),
}

model SubmitTracemuResponseBody = {
  data?: {
    code?: string(name='Code'),
    jobId?: string(name='JobId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestID?: string(name='RequestID'),
  statusCode?: long(name='StatusCode'),
}

model SubmitTracemuResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitTracemuResponseBody(name='body'),
}

async function submitTracemu(request: SubmitTracemuRequest): SubmitTracemuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return submitTracemuWithOptions(request, headers, runtime);
}

async function submitTracemuWithOptions(request: SubmitTracemuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitTracemuResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.keyUri)) {
    body['KeyUri'] = request.keyUri;
  }
  if (!Util.isUnset(request.mediaId)) {
    body['MediaId'] = request.mediaId;
  }
  if (!Util.isUnset(request.output)) {
    body['Output'] = request.output;
  }
  if (!Util.isUnset(request.trace)) {
    body['Trace'] = request.trace;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitTracemu',
    version = '2021-07-28',
    protocol = 'HTTPS',
    pathname = `/submitTraceM3u8`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

