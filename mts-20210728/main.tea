/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    ap-northeast-2-pop = 'mts.aliyuncs.com',
    ap-southeast-2 = 'mts.aliyuncs.com',
    ap-southeast-3 = 'mts.aliyuncs.com',
    cn-beijing-finance-1 = 'mts.aliyuncs.com',
    cn-beijing-finance-pop = 'mts.aliyuncs.com',
    cn-beijing-gov-1 = 'mts.aliyuncs.com',
    cn-beijing-nu16-b01 = 'mts.aliyuncs.com',
    cn-chengdu = 'mts.aliyuncs.com',
    cn-edge-1 = 'mts.aliyuncs.com',
    cn-fujian = 'mts.aliyuncs.com',
    cn-haidian-cm12-c01 = 'mts.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'mts.aliyuncs.com',
    cn-hangzhou-finance = 'mts.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'mts.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'mts.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'mts.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'mts.aliyuncs.com',
    cn-hangzhou-test-306 = 'mts.aliyuncs.com',
    cn-hongkong-finance-pop = 'mts.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'mts.aliyuncs.com',
    cn-north-2-gov-1 = 'mts.aliyuncs.com',
    cn-qingdao-nebula = 'mts.aliyuncs.com',
    cn-shanghai-et15-b01 = 'mts.aliyuncs.com',
    cn-shanghai-et2-b01 = 'mts.aliyuncs.com',
    cn-shanghai-finance-1 = 'mts.aliyuncs.com',
    cn-shanghai-inner = 'mts.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'mts.aliyuncs.com',
    cn-shenzhen-finance-1 = 'mts.aliyuncs.com',
    cn-shenzhen-inner = 'mts.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'mts.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'mts.aliyuncs.com',
    cn-wuhan = 'mts.aliyuncs.com',
    cn-wulanchabu = 'mts.aliyuncs.com',
    cn-yushanfang = 'mts.aliyuncs.com',
    cn-zhangbei = 'mts.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'mts.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'mts.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'mts.aliyuncs.com',
    eu-west-1-oxs = 'mts.aliyuncs.com',
    me-east-1 = 'mts.aliyuncs.com',
    rus-west-1-pop = 'mts.aliyuncs.com',
    us-east-1 = 'mts.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('mts', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model QueryTraceMuRequest {
  createTimeEnd?: long(name='CreateTimeEnd', description='创建时间起始'),
  createTimeStart?: long(name='CreateTimeStart', description='创建时间截止'),
  jobId?: string(name='JobId', description='任务id'),
  level?: long(name='Level', description='水印强度'),
  messageId?: long(name='MessageId', description='水印信息id'),
  pageNumber?: long(name='PageNumber', description='页偏移'),
  pageSize?: long(name='PageSize', description='每页数量'),
}

model QueryTraceMuResponseBody = {
  data?: [ 
    {
      gmtCreate?: long(name='GmtCreate', description='创建时间'),
      gmtModified?: long(name='GmtModified', description='最后修改时间'),
      jobId?: string(name='JobId', description='任务id'),
      mediaId?: string(name='MediaId', description='媒体id'),
      output?: string(name='Output', description='输出oss地址'),
      status?: string(name='Status', description='任务状态'),
      trace?: string(name='Trace', description='溯源水印信息'),
      traceId?: long(name='TraceId', description='溯源水印信息id'),
      userData?: string(name='UserData', description='用户自定义数据'),
      userId?: long(name='UserId', description='uid'),
    }
  ](name='Data', description='返回数据结构'),
  message?: string(name='Message', description='返回信息'),
  requestID?: string(name='RequestID', description='请求id'),
  statusCode?: long(name='StatusCode', description='状态码'),
}

model QueryTraceMuResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTraceMuResponseBody(name='body'),
}

async function queryTraceMu(request: QueryTraceMuRequest): QueryTraceMuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryTraceMuWithOptions(request, headers, runtime);
}

async function queryTraceMuWithOptions(request: QueryTraceMuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceMuResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.createTimeEnd)) {
    body.CreateTimeEnd = request.createTimeEnd;
  }
  if (!Util.isUnset(request.createTimeStart)) {
    body.CreateTimeStart = request.createTimeStart;
  }
  if (!Util.isUnset(request.jobId)) {
    body.JobId = request.jobId;
  }
  if (!Util.isUnset(request.level)) {
    body.Level = request.level;
  }
  if (!Util.isUnset(request.messageId)) {
    body.MessageId = request.messageId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body.PageSize = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('QueryTraceMu', '2021-07-28', 'HTTPS', 'POST', 'AK', `/queryTraceM3u8`, 'json', req, runtime);
}

model SubmitImageCopyrightRequest {
  input?: string(name='Input', description='需要加水印的图片oss地址(Input和url二选一)'),
  level?: long(name='Level', description='水印强度'),
  message?: string(name='Message', description='水印信息'),
  output?: string(name='Output', description='水印图片输出oss地址'),
  url?: string(name='Url', description='外部url链接(Input和url二选一)'),
}

model SubmitImageCopyrightResponseBody = {
  data?: {
    jobId?: string(name='JobId', description='任务id'),
  }(name='Data', description='返回数据'),
  message?: string(name='Message', description='返回信息'),
  requestID?: string(name='RequestID', description='请求id'),
  statusCode?: long(name='StatusCode', description='状态码'),
}

model SubmitImageCopyrightResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitImageCopyrightResponseBody(name='body'),
}

async function submitImageCopyright(request: SubmitImageCopyrightRequest): SubmitImageCopyrightResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return submitImageCopyrightWithOptions(request, headers, runtime);
}

async function submitImageCopyrightWithOptions(request: SubmitImageCopyrightRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitImageCopyrightResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.input)) {
    body.Input = request.input;
  }
  if (!Util.isUnset(request.level)) {
    body.Level = request.level;
  }
  if (!Util.isUnset(request.message)) {
    body.Message = request.message;
  }
  if (!Util.isUnset(request.output)) {
    body.Output = request.output;
  }
  if (!Util.isUnset(request.url)) {
    body.Url = request.url;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('SubmitImageCopyright', '2021-07-28', 'HTTPS', 'POST', 'AK', `/submitImageCopyright`, 'json', req, runtime);
}

model QueryImageCopyrightRequest {
  createTimeEnd?: long(name='CreateTimeEnd', description='创建时间起始'),
  createTimeStart?: long(name='CreateTimeStart', description='创建时间截止'),
  jobId?: string(name='JobId', description='任务ID'),
  pageNumber?: long(name='PageNumber', description='页偏移'),
  pageSize?: long(name='PageSize', description='每页数量'),
}

model QueryImageCopyrightResponseBody = {
  data?: [ 
    {
      gmtCreate?: long(name='GmtCreate', description='创建时间'),
      gmtModified?: long(name='GmtModified', description='最后修改时间'),
      input?: string(name='Input', description='水印图片输入oss地址'),
      jobId?: string(name='JobId', description='任务id'),
      level?: long(name='Level', description='水印强度'),
      message?: string(name='Message', description='水印信息'),
      messageId?: long(name='MessageId', description='水印信息id'),
      output?: string(name='Output', description='加完水印后的输出oss地址'),
      status?: string(name='Status', description='任务状态'),
      userData?: string(name='UserData', description='用户自定义数据'),
      userId?: long(name='UserId', description='uid'),
    }
  ](name='Data', description='返回数据'),
  message?: string(name='Message', description='返回信息'),
  requestID?: string(name='RequestID', description='请求id'),
  statusCode?: long(name='StatusCode', description='状态码'),
}

model QueryImageCopyrightResponse = {
  headers: map[string]string(name='headers'),
  body: QueryImageCopyrightResponseBody(name='body'),
}

async function queryImageCopyright(request: QueryImageCopyrightRequest): QueryImageCopyrightResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryImageCopyrightWithOptions(request, headers, runtime);
}

async function queryImageCopyrightWithOptions(request: QueryImageCopyrightRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryImageCopyrightResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.createTimeEnd)) {
    body.CreateTimeEnd = request.createTimeEnd;
  }
  if (!Util.isUnset(request.createTimeStart)) {
    body.CreateTimeStart = request.createTimeStart;
  }
  if (!Util.isUnset(request.jobId)) {
    body.JobId = request.jobId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body.PageSize = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('QueryImageCopyright', '2021-07-28', 'HTTPS', 'POST', 'AK', `/queryImageCopyright`, 'json', req, runtime);
}

model QueryCopyrightRequest {
  createTimeEnd?: long(name='CreateTimeEnd', description='创建时间截止'),
  createTimeStart?: long(name='CreateTimeStart', description='创建时间起始'),
  jobId?: string(name='JobId', description='任务id'),
  level?: long(name='Level', description='水印强度'),
  pageNumber?: long(name='PageNumber', description='翻页下标'),
  pageSize?: long(name='PageSize', description='每页数量'),
}

model QueryCopyrightResponseBody = {
  requestID?: string(name='RequestID'),
  data?: [ 
    {
      callback?: string(name='Callback', description='回调url'),
      gmtCreate?: long(name='GmtCreate', description='创建时间'),
      gmtModified?: long(name='GmtModified', description='修改时间'),
      input?: string(name='Input', description='水印视频输入'),
      jobId?: string(name='JobId', description='任务id'),
      level?: long(name='Level', description='水印强度'),
      message?: string(name='Message', description='水印信息'),
      messageId?: long(name='MessageId', description='水印信息id'),
      output?: string(name='Output', description='水印视频输出'),
      status?: string(name='Status', description='状态'),
      userData?: string(name='UserData', description='用户数据'),
      userId?: long(name='UserId', description='用户ID'),
    }
  ](name='Data'),
  statusCode?: long(name='StatusCode', description='状态码'),
}

model QueryCopyrightResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCopyrightResponseBody(name='body'),
}

async function queryCopyright(request: QueryCopyrightRequest): QueryCopyrightResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryCopyrightWithOptions(request, headers, runtime);
}

async function queryCopyrightWithOptions(request: QueryCopyrightRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryCopyrightResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.createTimeEnd)) {
    body.CreateTimeEnd = request.createTimeEnd;
  }
  if (!Util.isUnset(request.createTimeStart)) {
    body.CreateTimeStart = request.createTimeStart;
  }
  if (!Util.isUnset(request.jobId)) {
    body.JobId = request.jobId;
  }
  if (!Util.isUnset(request.level)) {
    body.Level = request.level;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body.PageSize = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('QueryCopyright', '2021-07-28', 'HTTPS', 'POST', 'AK', `/queryCopyrightJob`, 'json', req, runtime);
}

model SubmitTracemuRequest {
  mediaId?: string(name='MediaId', description='ab流处理后的媒体id'),
  output?: string(name='Output', description='m3u8文件输出oss地址'),
  trace?: string(name='Trace', description='溯源水印信息'),
}

model SubmitTracemuResponseBody = {
  data?: {
    jobId?: string(name='JobId', description='任务id'),
  }(name='Data', description='返回数据'),
  message?: string(name='Message', description='返回信息'),
  requestID?: string(name='RequestID', description='请求Id'),
  statusCode?: long(name='StatusCode', description='状态码'),
}

model SubmitTracemuResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitTracemuResponseBody(name='body'),
}

async function submitTracemu(request: SubmitTracemuRequest): SubmitTracemuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return submitTracemuWithOptions(request, headers, runtime);
}

async function submitTracemuWithOptions(request: SubmitTracemuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitTracemuResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.mediaId)) {
    body.MediaId = request.mediaId;
  }
  if (!Util.isUnset(request.output)) {
    body.Output = request.output;
  }
  if (!Util.isUnset(request.trace)) {
    body.Trace = request.trace;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('SubmitTracemu', '2021-07-28', 'HTTPS', 'POST', 'AK', `/submitTraceM3u8`, 'json', req, runtime);
}

model QueryTraceAbRequest {
  jobId?: string(name='JobId', description='任务id'),
  mediaId?: string(name='MediaId', description='媒体id'),
}

model QueryTraceAbResponseBody = {
  data?: [ 
    {
      callback?: string(name='Callback', description='任务结果回调'),
      gmtCreate?: long(name='GmtCreate', description='创建时间'),
      gmtModified?: long(name='GmtModified', description='最后修改时间'),
      input?: string(name='Input', description='输入oss地址'),
      jobId?: string(name='JobId', description='任务id'),
      level?: long(name='Level', description='水印强度'),
      mediaId?: string(name='MediaId', description='媒体id'),
      output?: string(name='Output', description='输出地址'),
      status?: string(name='Status', description='任务状态'),
      userData?: string(name='UserData', description='用户数据'),
      userId?: long(name='UserId', description='uid'),
    }
  ](name='Data', description='返回结构'),
  message?: string(name='Message', description='返回信息'),
  requestID?: string(name='RequestID', description='请求id'),
  statusCode?: long(name='StatusCode', description='状态码'),
}

model QueryTraceAbResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTraceAbResponseBody(name='body'),
}

async function queryTraceAb(request: QueryTraceAbRequest): QueryTraceAbResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryTraceAbWithOptions(request, headers, runtime);
}

async function queryTraceAbWithOptions(request: QueryTraceAbRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTraceAbResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.jobId)) {
    body.JobId = request.jobId;
  }
  if (!Util.isUnset(request.mediaId)) {
    body.MediaId = request.mediaId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('QueryTraceAb', '2021-07-28', 'HTTPS', 'POST', 'AK', `/queryTraceAb`, 'json', req, runtime);
}

model SubmitTraceAbRequest {
  callBack?: string(name='CallBack', description='任务结果回调'),
  input?: string(name='Input', description='溯源水印ab流处理视频输入'),
  level?: long(name='Level', description='水印强度'),
  output?: string(name='Output', description='溯源水印ab流处理输出'),
  userData?: string(name='UserData', description='用户自定义数据，最大长度1024个字节'),
  url?: string(name='Url', description='外部url链接(Input和url二选一)'),
}

model SubmitTraceAbResponseBody = {
  data?: {
    jobId?: string(name='JobId', description='任务ID'),
    mediaId?: string(name='MediaId', description='媒体id'),
  }(name='Data', description='返回数据'),
  message?: string(name='Message', description='返回信息'),
  requestID?: string(name='RequestID', description='请求Id'),
  statusCode?: long(name='StatusCode', description='状态码'),
}

model SubmitTraceAbResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitTraceAbResponseBody(name='body'),
}

async function submitTraceAb(request: SubmitTraceAbRequest): SubmitTraceAbResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return submitTraceAbWithOptions(request, headers, runtime);
}

async function submitTraceAbWithOptions(request: SubmitTraceAbRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitTraceAbResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.callBack)) {
    body.CallBack = request.callBack;
  }
  if (!Util.isUnset(request.input)) {
    body.Input = request.input;
  }
  if (!Util.isUnset(request.level)) {
    body.Level = request.level;
  }
  if (!Util.isUnset(request.output)) {
    body.Output = request.output;
  }
  if (!Util.isUnset(request.userData)) {
    body.UserData = request.userData;
  }
  if (!Util.isUnset(request.url)) {
    body.Url = request.url;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('SubmitTraceAb', '2021-07-28', 'HTTPS', 'POST', 'AK', `/submitTraceAb`, 'json', req, runtime);
}

model SubmitCopyrightJobRequest {
  callBack?: string(name='CallBack', description='任务结果回调url'),
  description?: string(name='Description', description='水印信息描述'),
  input?: string(name='Input', description='输入的视频，oss三元组'),
  level?: long(name='Level', description='水印强度，取值1，2，3'),
  message?: string(name='Message', description='水印信息'),
  startTime?: long(name='StartTime', description='水印起始时间(单位是秒)，不填写默认为0'),
  totalTime?: long(name='TotalTime', description='水印结束时间(单位是秒)，不填默认为60000'),
  output?: string(name='Output', description='输出的视频，oss三元组'),
  userData?: string(name='UserData', description='用户自定义数据'),
  url?: string(name='Url', description='外部url链接(Input和url二选一)'),
}

model SubmitCopyrightJobResponseBody = {
  requestID?: string(name='RequestID', description='请求Id'),
  message?: string(name='Message', description='返回信息'),
  data?: {
    jobId?: string(name='JobId', description='任务id'),
  }(name='Data', description='返回数据'),
  statusCode?: long(name='StatusCode', description='状态码'),
}

model SubmitCopyrightJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitCopyrightJobResponseBody(name='body'),
}

async function submitCopyrightJob(request: SubmitCopyrightJobRequest): SubmitCopyrightJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return submitCopyrightJobWithOptions(request, headers, runtime);
}

async function submitCopyrightJobWithOptions(request: SubmitCopyrightJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitCopyrightJobResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.callBack)) {
    body.CallBack = request.callBack;
  }
  if (!Util.isUnset(request.description)) {
    body.Description = request.description;
  }
  if (!Util.isUnset(request.input)) {
    body.Input = request.input;
  }
  if (!Util.isUnset(request.level)) {
    body.Level = request.level;
  }
  if (!Util.isUnset(request.message)) {
    body.Message = request.message;
  }
  if (!Util.isUnset(request.startTime)) {
    body.StartTime = request.startTime;
  }
  if (!Util.isUnset(request.totalTime)) {
    body.TotalTime = request.totalTime;
  }
  if (!Util.isUnset(request.output)) {
    body.Output = request.output;
  }
  if (!Util.isUnset(request.userData)) {
    body.UserData = request.userData;
  }
  if (!Util.isUnset(request.url)) {
    body.Url = request.url;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('SubmitCopyrightJob', '2021-07-28', 'HTTPS', 'POST', 'AK', `/submitCopyrightJob`, 'json', req, runtime);
}

