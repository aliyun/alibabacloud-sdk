/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aegis', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateInstanceRequest {
  ownerId?: long(name='OwnerId'),
  clientToken?: string(name='ClientToken'),
  duration?: int32(name='Duration'),
  pricingCycle?: string(name='PricingCycle'),
  versionCode?: int32(name='VersionCode'),
  vmNumber?: int32(name='VmNumber'),
  isAutoRenew?: boolean(name='IsAutoRenew'),
  autoRenewDuration?: int32(name='AutoRenewDuration'),
}

model CreateInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
  orderId?: string(name='OrderId'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateInstance', '2016-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model DeleteRuleRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  id?: string(name='Id'),
}

model DeleteRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRuleResponseBody(name='body'),
}

async function deleteRuleWithOptions(request: DeleteRuleRequest, runtime: Util.RuntimeOptions): DeleteRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRule', '2016-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRuleWithOptions(request, runtime);
}

model DescribeAutoDelConfigRequest {
  sourceIp?: string(name='SourceIp'),
}

model DescribeAutoDelConfigResponseBody = {
  requestId?: string(name='RequestId'),
  days?: int32(name='Days'),
}

model DescribeAutoDelConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoDelConfigResponseBody(name='body'),
}

async function describeAutoDelConfigWithOptions(request: DescribeAutoDelConfigRequest, runtime: Util.RuntimeOptions): DescribeAutoDelConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAutoDelConfig', '2016-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAutoDelConfig(request: DescribeAutoDelConfigRequest): DescribeAutoDelConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoDelConfigWithOptions(request, runtime);
}

model DescribeCheckWarningDetailRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  checkWarningId?: long(name='CheckWarningId'),
}

model DescribeCheckWarningDetailResponseBody = {
  item?: string(name='Item'),
  type?: string(name='Type'),
  description?: string(name='Description'),
  requestId?: string(name='RequestId'),
  checkId?: long(name='CheckId'),
  level?: string(name='Level'),
  prompt?: string(name='Prompt'),
  advice?: string(name='Advice'),
}

model DescribeCheckWarningDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCheckWarningDetailResponseBody(name='body'),
}

async function describeCheckWarningDetailWithOptions(request: DescribeCheckWarningDetailRequest, runtime: Util.RuntimeOptions): DescribeCheckWarningDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCheckWarningDetail', '2016-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCheckWarningDetail(request: DescribeCheckWarningDetailRequest): DescribeCheckWarningDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCheckWarningDetailWithOptions(request, runtime);
}

model DescribeConcernNecessityRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
}

model DescribeConcernNecessityResponseBody = {
  requestId?: string(name='RequestId'),
  concernNecessity?: [ string ](name='ConcernNecessity'),
}

model DescribeConcernNecessityResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConcernNecessityResponseBody(name='body'),
}

async function describeConcernNecessityWithOptions(request: DescribeConcernNecessityRequest, runtime: Util.RuntimeOptions): DescribeConcernNecessityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeConcernNecessity', '2016-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeConcernNecessity(request: DescribeConcernNecessityRequest): DescribeConcernNecessityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConcernNecessityWithOptions(request, runtime);
}

model DescribeInstanceStatisticsRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  uuid?: string(name='Uuid'),
}

model DescribeInstanceStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      account?: int32(name='Account'),
      uuid?: string(name='Uuid'),
      vul?: int32(name='Vul'),
      health?: int32(name='Health'),
      trojan?: int32(name='Trojan'),
      suspicious?: int32(name='Suspicious'),
    }
  ](name='Data'),
}

model DescribeInstanceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceStatisticsResponseBody(name='body'),
}

async function describeInstanceStatisticsWithOptions(request: DescribeInstanceStatisticsRequest, runtime: Util.RuntimeOptions): DescribeInstanceStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceStatistics', '2016-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceStatistics(request: DescribeInstanceStatisticsRequest): DescribeInstanceStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceStatisticsWithOptions(request, runtime);
}

model DescribeStrategyExecDetailRequest {
  sourceIp?: string(name='SourceIp'),
  strategyId?: int32(name='StrategyId'),
}

model DescribeStrategyExecDetailResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  percent?: string(name='Percent'),
  failCount?: int32(name='FailCount'),
  startTime?: string(name='StartTime'),
  successCount?: int32(name='SuccessCount'),
  source?: string(name='Source'),
  failedEcsList?: [ 
    {
      internetIp?: string(name='InternetIp'),
      instanceName?: string(name='InstanceName'),
      IP?: string(name='IP'),
      intranetIp?: string(name='IntranetIp'),
      reason?: string(name='Reason'),
    }
  ](name='FailedEcsList'),
  inProcessCount?: int32(name='InProcessCount'),
}

model DescribeStrategyExecDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStrategyExecDetailResponseBody(name='body'),
}

async function describeStrategyExecDetailWithOptions(request: DescribeStrategyExecDetailRequest, runtime: Util.RuntimeOptions): DescribeStrategyExecDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeStrategyExecDetail', '2016-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeStrategyExecDetail(request: DescribeStrategyExecDetailRequest): DescribeStrategyExecDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStrategyExecDetailWithOptions(request, runtime);
}

model DescribeStratetyRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  strategyIds?: string(name='StrategyIds'),
}

model DescribeStratetyResponseBody = {
  requestId?: string(name='RequestId'),
  strategies?: [ 
    {
      execStatus?: int32(name='ExecStatus'),
      type?: int32(name='Type'),
      configTargets?: [ 
        {
          flag?: string(name='Flag'),
          target?: string(name='Target'),
          targetType?: string(name='TargetType'),
        }
      ](name='ConfigTargets'),
      cycleStartTime?: int32(name='CycleStartTime'),
      ecsCount?: int32(name='EcsCount'),
      processRate?: int32(name='ProcessRate'),
      cycleDays?: int32(name='CycleDays'),
      riskCount?: int32(name='RiskCount'),
      name?: string(name='Name'),
      passRate?: int32(name='PassRate'),
      id?: int32(name='Id'),
    }
  ](name='Strategies'),
}

model DescribeStratetyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStratetyResponseBody(name='body'),
}

async function describeStratetyWithOptions(request: DescribeStratetyRequest, runtime: Util.RuntimeOptions): DescribeStratetyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeStratety', '2016-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeStratety(request: DescribeStratetyRequest): DescribeStratetyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStratetyWithOptions(request, runtime);
}

model DescribeVulWhitelistRequest {
  sourceIp?: string(name='SourceIp'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model DescribeVulWhitelistResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  vulWhitelists?: [ 
    {
      type?: string(name='Type'),
      aliasName?: string(name='AliasName'),
      name?: string(name='Name'),
      reason?: string(name='Reason'),
    }
  ](name='VulWhitelists'),
  currentPage?: int32(name='CurrentPage'),
}

model DescribeVulWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVulWhitelistResponseBody(name='body'),
}

async function describeVulWhitelistWithOptions(request: DescribeVulWhitelistRequest, runtime: Util.RuntimeOptions): DescribeVulWhitelistResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVulWhitelist', '2016-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVulWhitelist(request: DescribeVulWhitelistRequest): DescribeVulWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulWhitelistWithOptions(request, runtime);
}

model RenewInstanceRequest {
  ownerId?: long(name='OwnerId'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  vmNumber?: string(name='VmNumber'),
  duration?: int32(name='Duration'),
  pricingCycle?: string(name='PricingCycle'),
}

model RenewInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstanceWithOptions(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RenewInstance', '2016-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceWithOptions(request, runtime);
}

model UpgradeInstanceRequest {
  ownerId?: long(name='OwnerId'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  versionCode?: int32(name='VersionCode'),
  vmNumber?: int32(name='VmNumber'),
}

model UpgradeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model UpgradeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeInstanceResponseBody(name='body'),
}

async function upgradeInstanceWithOptions(request: UpgradeInstanceRequest, runtime: Util.RuntimeOptions): UpgradeInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeInstance', '2016-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeInstance(request: UpgradeInstanceRequest): UpgradeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeInstanceWithOptions(request, runtime);
}

