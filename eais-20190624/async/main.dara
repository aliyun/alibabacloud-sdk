/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'eais';
  @version = '2019-06-24';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'eais.aliyuncs.com',
    ap-northeast-2-pop = 'eais.aliyuncs.com',
    ap-south-1 = 'eais.aliyuncs.com',
    ap-southeast-1 = 'eais.aliyuncs.com',
    ap-southeast-2 = 'eais.aliyuncs.com',
    ap-southeast-3 = 'eais.aliyuncs.com',
    ap-southeast-5 = 'eais.aliyuncs.com',
    cn-beijing-finance-1 = 'eais.aliyuncs.com',
    cn-beijing-finance-pop = 'eais.aliyuncs.com',
    cn-beijing-gov-1 = 'eais.aliyuncs.com',
    cn-beijing-nu16-b01 = 'eais.aliyuncs.com',
    cn-edge-1 = 'eais.aliyuncs.com',
    cn-fujian = 'eais.aliyuncs.com',
    cn-haidian-cm12-c01 = 'eais.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'eais.aliyuncs.com',
    cn-hangzhou-finance = 'eais.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'eais.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'eais.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'eais.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'eais.aliyuncs.com',
    cn-hangzhou-test-306 = 'eais.aliyuncs.com',
    cn-hongkong = 'eais.aliyuncs.com',
    cn-hongkong-finance-pop = 'eais.aliyuncs.com',
    cn-huhehaote = 'eais.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'eais.aliyuncs.com',
    cn-north-2-gov-1 = 'eais.aliyuncs.com',
    cn-qingdao = 'eais.aliyuncs.com',
    cn-qingdao-nebula = 'eais.aliyuncs.com',
    cn-shanghai-et15-b01 = 'eais.aliyuncs.com',
    cn-shanghai-et2-b01 = 'eais.aliyuncs.com',
    cn-shanghai-finance-1 = 'eais.aliyuncs.com',
    cn-shanghai-inner = 'eais.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'eais.aliyuncs.com',
    cn-shenzhen-finance-1 = 'eais.aliyuncs.com',
    cn-shenzhen-inner = 'eais.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'eais.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'eais.aliyuncs.com',
    cn-wuhan = 'eais.aliyuncs.com',
    cn-wulanchabu = 'eais.aliyuncs.com',
    cn-yushanfang = 'eais.aliyuncs.com',
    cn-zhangbei = 'eais.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'eais.aliyuncs.com',
    cn-zhangjiakou = 'eais.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'eais.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'eais.aliyuncs.com',
    eu-central-1 = 'eais.aliyuncs.com',
    eu-west-1 = 'eais.aliyuncs.com',
    eu-west-1-oxs = 'eais.aliyuncs.com',
    me-east-1 = 'eais.aliyuncs.com',
    rus-west-1-pop = 'eais.aliyuncs.com',
    us-east-1 = 'eais.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AttachEaiRequest {
  clientInstanceId: string(name='ClientInstanceId', example='i-wz93g6pyat2g7t7o****', position='Query'),
  elasticAcceleratedInstanceId: string(name='ElasticAcceleratedInstanceId', example='eais-sz8t15a7gt7z7j7i****', position='Query'),
  regionId: string(name='RegionId', example='cn-shenzhen', position='Query'),
}

model AttachEaiResponseBody = {
  clientInstanceId?: string(name='ClientInstanceId', example='i-wz93g6pyat2g7t7o****'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId', example='eais-sz8t15a7gt7z7j7i****'),
  requestId?: string(name='RequestId', example='C3BCB7DA-BEB6-4982-A765-6EA61EC84474'),
}

model AttachEaiResponse = {
  headers: map[string]string(name='headers'),
  body: AttachEaiResponseBody(name='body'),
}

async function attachEai(request: AttachEaiRequest): AttachEaiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachEai', 'POST', '/', 'json', false, 'json', request);
}

model AttachEaisEiRequest {
  clientInstanceId: string(name='ClientInstanceId', example='i-bp14ws9hbt1oe0u9****', position='Query'),
  eiInstanceId?: string(name='EiInstanceId', example='eais-hzu00xufs1c8j5nn****', position='Query'),
  eiInstanceType?: string(name='EiInstanceType', example='eais.ei-a6.2xlarge', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model AttachEaisEiResponseBody = {
  clientInstanceId?: string(name='ClientInstanceId', example='i-bp14ws9hbt1oe0u9****'),
  eiInstanceId?: string(name='EiInstanceId', example='eais-hzu00xufs1c8j5nn****'),
  requestId?: string(name='RequestId', example='C3BCB7DA-BEB6-4982-A765-6EA61EC8****'),
}

model AttachEaisEiResponse = {
  headers: map[string]string(name='headers'),
  body: AttachEaisEiResponseBody(name='body'),
}

async function attachEaisEi(request: AttachEaisEiRequest): AttachEaisEiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachEaisEi', 'POST', '/', 'json', false, 'json', request);
}

model ChangeResourceGroupRequest {
  resourceGroupId: string(name='ResourceGroupId', example='rg-acfmvpuy4a5****', position='Query'),
  resourceId: string(name='ResourceId', example='eais-hzs4h26yyt5xkcke****', position='Query'),
  resourceRegionId: string(name='ResourceRegionId', example='cn-hangzhou', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='C3BCB7DA-BEB6-4982-A765-6EA61EC8****'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateEaiRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  image?: string(name='Image', position='Query'),
  instanceName?: string(name='InstanceName', example='eais-test01', position='Query'),
  instanceType: string(name='InstanceType', example='eais.ei-a6.2xlarge', position='Query'),
  regionId: string(name='RegionId', example='cn-shenzhen', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-uf66jeqopgqa9hdn****', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-uf6h3rbwbm90urjwa****', position='Query'),
}

model CreateEaiResponseBody = {
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId', example='eais-sz8t15a7gt7z7j7i****'),
  requestId?: string(name='RequestId', example='A655AB0E-31BB-45AD-9255-FCE93F6*****'),
}

model CreateEaiResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEaiResponseBody(name='body'),
}

async function createEai(request: CreateEaiRequest): CreateEaiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEai', 'POST', '/', 'json', false, 'json', request);
}

model CreateEaiAllRequest {
  clientImageId: string(name='ClientImageId', example='ubuntu_18_04_x64_20G_alibase_20200914.vhd', position='Query'),
  clientInstanceName?: string(name='ClientInstanceName', example='test-name', position='Query'),
  clientInstanceType: string(name='ClientInstanceType', example='ecs.g5.large', position='Query'),
  clientInternetMaxBandwidthIn?: int32(name='ClientInternetMaxBandwidthIn', example='10', position='Query'),
  clientInternetMaxBandwidthOut?: int32(name='ClientInternetMaxBandwidthOut', example='10', position='Query'),
  clientPassword?: string(name='ClientPassword', example='EcsV587!', position='Query'),
  clientSecurityGroupId: string(name='ClientSecurityGroupId', example='sg-wz9a02pqben4axkd2****', position='Query'),
  clientSystemDiskCategory?: string(name='ClientSystemDiskCategory', example='cloud_ssd', position='Query'),
  clientSystemDiskSize?: int32(name='ClientSystemDiskSize', example='40', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  clientVSwitchId: string(name='ClientVSwitchId', example='vsw-wz9a04axkd22pqben****', position='Query'),
  clientZoneId?: string(name='ClientZoneId', example='cn-shenzhen-a', position='Query'),
  eaiInstanceType: string(name='EaiInstanceType', example='eais.ei-a6.large', position='Query'),
  instanceName?: string(name='InstanceName', example='eais-test01', position='Query'),
  regionId: string(name='RegionId', example='cn-shenzhen', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model CreateEaiAllResponseBody = {
  clientInstanceId?: string(name='ClientInstanceId', example='i-bp1fvhi60e1zizsp****'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId', example='eais-hza1ahi0uuw0re33****'),
  requestId?: string(name='RequestId', example='D266C40C-8624-41A4-B8C2-35852B952D1A'),
}

model CreateEaiAllResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEaiAllResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function createEaiAll(request: CreateEaiAllRequest): CreateEaiAllResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEaiAll', 'POST', '/', 'json', false, 'json', request);
}

model CreateEaiEciRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  eaisName?: string(name='EaisName', example='eais-test01', position='Query'),
  eaisType: string(name='EaisType', example='eais.ei-a6.2xlarge', position='Query'),
  eci?: {
    container?: {
      arg?: string(name='Arg', example='100'),
      command?: string(name='Command', example='sleep'),
      image?: string(name='Image', example='nginx'),
      name?: string(name='Name', example='test1'),
      volumes?: string(name='Volumes', example='/mnt/eais=eais,/models=eais/models'),
    }(name='Container'),
    eipId?: string(name='EipId', example='eip-uf66jeqopgqa9hdn****'),
    name?: string(name='Name', example='test-nginx'),
    type?: string(name='Type', example='ecs.c5.xlarge'),
    volume?: string(name='Volume', example='00c7****-rivj.cn-hangzhou.extreme.nas.aliyuncs.com:/share'),
  }(name='Eci', shrink='json', position='Query'),
  regionId: string(name='RegionId', example='cn-shenzhen', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmvpuy4a5****', position='Query'),
  securityGroupId: string(name='SecurityGroupId', example='sg-uf66jeqopgqa9hdn****', position='Query'),
  vSwitchId: string(name='VSwitchId', example='vsw-uf6h3rbwbm90urjwa****', position='Query'),
}

model CreateEaiEciResponseBody = {
  clientInstanceId?: string(name='ClientInstanceId', example='eci-2zeh03ygxlrzmfi6****'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId', example='eais-sz8t15a7gt7z7j7i****'),
  requestId?: string(name='RequestId', example='F5FEB9AA-C108-577C-AB3D-D13524AF****'),
}

model CreateEaiEciResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEaiEciResponseBody(name='body'),
}

async function createEaiEci(request: CreateEaiEciRequest): CreateEaiEciResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEaiEci', 'POST', '/', 'json', false, 'json', request);
}

model CreateEaiEcsRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  eaisName?: string(name='EaisName', example='eais-test01', position='Query'),
  eaisType: string(name='EaisType', example='eais.ei-a6.2xlarge', position='Query'),
  ecs?: {
    imageId?: string(name='ImageId', example='aliyun_2_1903_x64_20G_alibase_20200324.vhd'),
    internetMaxBandwidthIn?: string(name='InternetMaxBandwidthIn', example='10'),
    internetMaxBandwidthOut?: string(name='InternetMaxBandwidthOut', example='10'),
    name?: string(name='Name', example='test1'),
    password?: string(name='Password', example='EcsV587!'),
    systemDiskCategory?: string(name='SystemDiskCategory', example='cloud_ssd'),
    systemDiskSize?: long(name='SystemDiskSize', example='40'),
    type?: string(name='Type', example='ecs.g7.4xlarge'),
    zoneId?: string(name='ZoneId', example='cn-shenzhen-e'),
  }(name='Ecs', shrink='json', position='Query'),
  regionId: string(name='RegionId', example='cn-shenzhen', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmvpuy4a5****', position='Query'),
  securityGroupId: string(name='SecurityGroupId', example='sg-uf66jeqopgqa9hdn****', position='Query'),
  vSwitchId: string(name='VSwitchId', example='vsw-uf6h3rbwbm90urjwa****', position='Query'),
}

model CreateEaiEcsResponseBody = {
  clientInstanceId?: string(name='ClientInstanceId', example='i-bp1hjrvleawl4ogb****'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId', example='eais-sz8t15a7gt7z7j7i****'),
  requestId?: string(name='RequestId', example='F5FEB9AA-C108-577C-AB3D-D13524AF****'),
}

model CreateEaiEcsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEaiEcsResponseBody(name='body'),
}

async function createEaiEcs(request: CreateEaiEcsRequest): CreateEaiEcsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEaiEcs', 'POST', '/', 'json', false, 'json', request);
}

model CreateEaiJupyterRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  eaisName?: string(name='EaisName', position='Query'),
  eaisType: string(name='EaisType', example='eais.ei-a6.2xlarge', position='Query'),
  environmentVar?: [ 
    {
      key?: string(name='Key', example='MY_USER_NAME'),
      value?: string(name='Value', example='test123'),
    }
  ](name='EnvironmentVar', shrink='json', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', example='sg-uf66jeqopgqa9hdn****', position='Query'),
  vSwitchId: string(name='VSwitchId', example='vsw-uf6h3rbwbm90urjwa****', position='Query'),
}

model CreateEaiJupyterResponseBody = {
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId', example='eais-hz8t15a7gt7z7j7i****'),
  requestId?: string(name='RequestId', example='A655AB0E-31BB-45AD-9255-FCE93F6*****'),
}

model CreateEaiJupyterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEaiJupyterResponseBody(name='body'),
}

async function createEaiJupyter(request: CreateEaiJupyterRequest): CreateEaiJupyterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEaiJupyter', 'POST', '/', 'json', false, 'json', request);
}

model CreateEaisEiRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceName?: string(name='InstanceName', example='test_ei', position='Query'),
  instanceType: string(name='InstanceType', example='eais.ei-a6.2xlarge', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmvpuy4a5****', position='Query'),
  securityGroupId: string(name='SecurityGroupId', example='sg-bp16jgp51ttnkbdr****', position='Query'),
  vSwitchId: string(name='VSwitchId', example='vsw-bp17wmd1wb6fwlimk****', position='Query'),
}

model CreateEaisEiResponseBody = {
  eiInstanceId?: string(name='EiInstanceId', example='eais-hzu00xufs1c8j5nn****'),
  requestId?: string(name='RequestId', example='F5FEB9AA-C108-577C-AB3D-D13524AF****'),
}

model CreateEaisEiResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEaisEiResponseBody(name='body'),
}

async function createEaisEi(request: CreateEaisEiRequest): CreateEaisEiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEaisEi', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEaiRequest {
  elasticAcceleratedInstanceId: string(name='ElasticAcceleratedInstanceId', example='eais-sz8t15a7gt7z7j7i****', position='Query'),
  force?: boolean(name='Force', example='false', position='Query'),
  regionId: string(name='RegionId', example='cn-shenzhen', position='Query'),
}

model DeleteEaiResponseBody = {
  requestId?: string(name='RequestId', example='F23AEEC7-4D98-4657-A104-0269270*****'),
}

model DeleteEaiResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEaiResponseBody(name='body'),
}

async function deleteEai(request: DeleteEaiRequest): DeleteEaiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEai', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEaiAllRequest {
  clientInstanceId?: string(name='ClientInstanceId', example='i-bp1fvhi60e1zizsp****', position='Query'),
  elasticAcceleratedInstanceId: string(name='ElasticAcceleratedInstanceId', example='eais-hza1ahi0uuw0re33****', position='Query'),
  regionId: string(name='RegionId', example='cn-shenzhen', position='Query'),
}

model DeleteEaiAllResponseBody = {
  requestId?: string(name='RequestId', example='AD4EA714-A35B-4710-BF92-8275BCDDB69F'),
}

model DeleteEaiAllResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEaiAllResponseBody(name='body'),
}

async function deleteEaiAll(request: DeleteEaiAllRequest): DeleteEaiAllResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEaiAll', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEaisEiRequest {
  eiInstanceId: string(name='EiInstanceId', example='eais-hzu00xufs1c8j5nn****', position='Query'),
  force?: boolean(name='Force', example='false', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteEaisEiResponseBody = {
  requestId?: string(name='RequestId', example='F23AEEC7-4D98-4657-A104-02692701****'),
}

model DeleteEaisEiResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEaisEiResponseBody(name='body'),
}

async function deleteEaisEi(request: DeleteEaisEiRequest): DeleteEaisEiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEaisEi', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEaisRequest {
  elasticAcceleratedInstanceIds?: string(name='ElasticAcceleratedInstanceIds', example='["eais-id1", "eais-id2"]', position='Query'),
  instanceName?: string(name='InstanceName', example='eais*', position='Query'),
  instanceType?: string(name='InstanceType', example='eais.ei-a6.2xlarge', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='200', position='Query'),
  regionId: string(name='RegionId', example='cn-shenzhen', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  status?: string(name='Status', example='InUse', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeEaisResponseBody = {
  instances?: {
    instance?: [ 
    {
      category?: string(name='Category', example='jupyter'),
      clientInstanceId?: string(name='ClientInstanceId', example='i-wz93g6pyat2g****'),
      clientInstanceName?: string(name='ClientInstanceName', example='test1'),
      clientInstanceType?: string(name='ClientInstanceType', example='ecs.g5ne.large'),
      creationTime?: string(name='CreationTime', example='2020-11-11T03:11Z'),
      description?: string(name='Description', example='testDescription'),
      elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId', example='eais-sz8t15a7gt7****'),
      instanceName?: string(name='InstanceName', example='testName'),
      instanceType?: string(name='InstanceType', example='eais.ei-a6.2xlarge'),
      jupyterUrl?: string(name='JupyterUrl', example='http://121.41.**.24:8888'),
      regionId?: string(name='RegionId', example='cn-shenzhen'),
      resourceGroupId?: string(name='ResourceGroupId'),
      securityGroupId?: string(name='SecurityGroupId', example='sg-bp1gppir818lx4******'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status', example='InUse'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', example='TestKey'),
          tagValue?: string(name='TagValue', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      vSwitchId?: string(name='VSwitchId', example='vsw-bp1sd131hfmd76r******'),
      zoneId?: string(name='ZoneId', example='cn-shenzhen-e'),
    }
  ](name='Instance')
  }(name='Instances'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='1E23D585-BBD8-436F-9615-54CACD6*****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeEaisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEaisResponseBody(name='body'),
}

async function describeEais(request: DescribeEaisRequest): DescribeEaisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEais', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint', example='eais.cn-shenzhen.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-shenzhen'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId', example='F5FEB9AA-C108-577C-AB3D-D13524AF1840'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DetachEaiRequest {
  elasticAcceleratedInstanceId: string(name='ElasticAcceleratedInstanceId', example='eais-sz8t15a7gt7z7j7i****', position='Query'),
  regionId: string(name='RegionId', example='cn-shenzhen', position='Query'),
}

model DetachEaiResponseBody = {
  requestId?: string(name='RequestId', example='04DEB304-2436-4CB9-BB63-468BCEA03D9D'),
}

model DetachEaiResponse = {
  headers: map[string]string(name='headers'),
  body: DetachEaiResponseBody(name='body'),
}

async function detachEai(request: DetachEaiRequest): DetachEaiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachEai', 'POST', '/', 'json', false, 'json', request);
}

model DetachEaisEiRequest {
  eiInstanceId: string(name='EiInstanceId', example='eais-hzu00xufs1c8j5nn****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DetachEaisEiResponseBody = {
  requestId?: string(name='RequestId', example='04DEB304-2436-4CB9-BB63-468BCEA0****'),
}

model DetachEaisEiResponse = {
  headers: map[string]string(name='headers'),
  body: DetachEaisEiResponseBody(name='body'),
}

async function detachEaisEi(request: DetachEaisEiRequest): DetachEaisEiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachEaisEi', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceMetricsRequest {
  endTime?: string(name='EndTime', example='2022-11-22T16:30:00Z', position='Query'),
  instanceId: string(name='InstanceId', example='eais-hznzre6ffmz9num4****', position='Query'),
  metricType: string(name='MetricType', example='MemoryUsage', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  startTime?: string(name='StartTime', example='2022-11-22T16:00:00Z', position='Query'),
  timeStep?: string(name='TimeStep', example='5m', position='Query'),
}

model GetInstanceMetricsResponseBody = {
  instanceId?: string(name='InstanceId', example='eais-bj8b53it29hfhj******'),
  podMetrics?: [ 
    {
      metrics?: [ 
        {
          time?: string(name='Time', example='1669107528450'),
          value?: string(name='Value', example='4.536552540058814'),
        }
      ](name='Metrics'),
      podId?: string(name='PodId', description='Pod ID。', example='eais-hznzre6ffmz9num4****-579b587ddf-9txr6'),
    }
  ](name='PodMetrics'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model GetInstanceMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceMetricsResponseBody(name='body'),
}

async function getInstanceMetrics(request: GetInstanceMetricsRequest): GetInstanceMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceMetrics', 'POST', '/', 'json', false, 'json', request);
}

model StartEaisEiRequest {
  eiInstanceId: string(name='EiInstanceId', example='eais-hzu00xufs1c8j5nn****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model StartEaisEiResponseBody = {
  requestId?: string(name='RequestId', example='F23AEEC7-4D98-4657-A104-02692701****'),
}

model StartEaisEiResponse = {
  headers: map[string]string(name='headers'),
  body: StartEaisEiResponseBody(name='body'),
}

async function startEaisEi(request: StartEaisEiRequest): StartEaisEiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartEaisEi', 'POST', '/', 'json', false, 'json', request);
}

model StopEaisEiRequest {
  eiInstanceId: string(name='EiInstanceId', example='eais-hzu00xufs1c8j5nn****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model StopEaisEiResponseBody = {
  requestId?: string(name='RequestId', example='F23AEEC7-4D98-4657-A104-02692701****'),
}

model StopEaisEiResponse = {
  headers: map[string]string(name='headers'),
  body: StopEaisEiResponseBody(name='body'),
}

async function stopEaisEi(request: StopEaisEiRequest): StopEaisEiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopEaisEi', 'POST', '/', 'json', false, 'json', request);
}

