/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'eais';
  @version = '2019-06-24';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'eais.aliyuncs.com',
    ap-northeast-2-pop = 'eais.aliyuncs.com',
    ap-south-1 = 'eais.aliyuncs.com',
    ap-southeast-1 = 'eais.aliyuncs.com',
    ap-southeast-2 = 'eais.aliyuncs.com',
    ap-southeast-3 = 'eais.aliyuncs.com',
    ap-southeast-5 = 'eais.aliyuncs.com',
    cn-beijing-finance-1 = 'eais.aliyuncs.com',
    cn-beijing-finance-pop = 'eais.aliyuncs.com',
    cn-beijing-gov-1 = 'eais.aliyuncs.com',
    cn-beijing-nu16-b01 = 'eais.aliyuncs.com',
    cn-edge-1 = 'eais.aliyuncs.com',
    cn-fujian = 'eais.aliyuncs.com',
    cn-haidian-cm12-c01 = 'eais.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'eais.aliyuncs.com',
    cn-hangzhou-finance = 'eais.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'eais.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'eais.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'eais.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'eais.aliyuncs.com',
    cn-hangzhou-test-306 = 'eais.aliyuncs.com',
    cn-hongkong = 'eais.aliyuncs.com',
    cn-hongkong-finance-pop = 'eais.aliyuncs.com',
    cn-huhehaote = 'eais.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'eais.aliyuncs.com',
    cn-north-2-gov-1 = 'eais.aliyuncs.com',
    cn-qingdao = 'eais.aliyuncs.com',
    cn-qingdao-nebula = 'eais.aliyuncs.com',
    cn-shanghai-et15-b01 = 'eais.aliyuncs.com',
    cn-shanghai-et2-b01 = 'eais.aliyuncs.com',
    cn-shanghai-finance-1 = 'eais.aliyuncs.com',
    cn-shanghai-inner = 'eais.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'eais.aliyuncs.com',
    cn-shenzhen-finance-1 = 'eais.aliyuncs.com',
    cn-shenzhen-inner = 'eais.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'eais.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'eais.aliyuncs.com',
    cn-wuhan = 'eais.aliyuncs.com',
    cn-wulanchabu = 'eais.aliyuncs.com',
    cn-yushanfang = 'eais.aliyuncs.com',
    cn-zhangbei = 'eais.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'eais.aliyuncs.com',
    cn-zhangjiakou = 'eais.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'eais.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'eais.aliyuncs.com',
    eu-central-1 = 'eais.aliyuncs.com',
    eu-west-1 = 'eais.aliyuncs.com',
    eu-west-1-oxs = 'eais.aliyuncs.com',
    me-east-1 = 'eais.aliyuncs.com',
    rus-west-1-pop = 'eais.aliyuncs.com',
    us-east-1 = 'eais.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AttachEaiRequest {
  clientInstanceId: string(name='ClientInstanceId', position='Query'),
  elasticAcceleratedInstanceId: string(name='ElasticAcceleratedInstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model AttachEaiResponseBody = {
  clientInstanceId?: string(name='ClientInstanceId'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
  requestId?: string(name='RequestId'),
}

model AttachEaiResponse = {
  headers: map[string]string(name='headers'),
  body: AttachEaiResponseBody(name='body'),
}

async function attachEai(request: AttachEaiRequest): AttachEaiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachEai', 'POST', '/', 'json', false, 'json', request);
}

model CreateEaiRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
}

model CreateEaiResponseBody = {
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateEaiResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEaiResponseBody(name='body'),
}

async function createEai(request: CreateEaiRequest): CreateEaiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEai', 'POST', '/', 'json', false, 'json', request);
}

model CreateEaiAllRequest {
  clientImageId: string(name='ClientImageId', position='Query'),
  clientInstanceName?: string(name='ClientInstanceName', position='Query'),
  clientInstanceType: string(name='ClientInstanceType', position='Query'),
  clientInternetMaxBandwidthIn?: int32(name='ClientInternetMaxBandwidthIn', position='Query'),
  clientInternetMaxBandwidthOut?: int32(name='ClientInternetMaxBandwidthOut', position='Query'),
  clientPassword?: string(name='ClientPassword', position='Query'),
  clientSecurityGroupId: string(name='ClientSecurityGroupId', position='Query'),
  clientSystemDiskCategory?: string(name='ClientSystemDiskCategory', position='Query'),
  clientSystemDiskSize?: int32(name='ClientSystemDiskSize', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  clientVSwitchId: string(name='ClientVSwitchId', position='Query'),
  clientZoneId?: string(name='ClientZoneId', position='Query'),
  eaiInstanceType: string(name='EaiInstanceType', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model CreateEaiAllResponseBody = {
  clientInstanceId?: string(name='ClientInstanceId'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateEaiAllResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEaiAllResponseBody(name='body'),
}

async function createEaiAll(request: CreateEaiAllRequest): CreateEaiAllResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEaiAll', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEaiRequest {
  elasticAcceleratedInstanceId: string(name='ElasticAcceleratedInstanceId', position='Query'),
  force?: boolean(name='Force', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DeleteEaiResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteEaiResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEaiResponseBody(name='body'),
}

async function deleteEai(request: DeleteEaiRequest): DeleteEaiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEai', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEaiAllRequest {
  clientInstanceId: string(name='ClientInstanceId', position='Query'),
  elasticAcceleratedInstanceId: string(name='ElasticAcceleratedInstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DeleteEaiAllResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteEaiAllResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEaiAllResponseBody(name='body'),
}

async function deleteEaiAll(request: DeleteEaiAllRequest): DeleteEaiAllResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEaiAll', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEaisRequest {
  elasticAcceleratedInstanceIds?: string(name='ElasticAcceleratedInstanceIds', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  status?: string(name='Status', position='Query'),
}

model DescribeEaisResponseBody = {
  instances?: {
    instance?: [ 
    {
      clientInstanceId?: string(name='ClientInstanceId'),
      clientInstanceName?: string(name='ClientInstanceName'),
      clientInstanceType?: string(name='ClientInstanceType'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceType?: string(name='InstanceType'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Instance')
  }(name='Instances'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeEaisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEaisResponseBody(name='body'),
}

async function describeEais(request: DescribeEaisRequest): DescribeEaisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEais', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZonesRequest {
  instanceType?: string(name='InstanceType', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  zones?: [ 
    {
      availableInstanceTypes?: [ string ](name='AvailableInstanceTypes'),
      localName?: string(name='LocalName'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Zones'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZones', 'POST', '/', 'json', false, 'json', request);
}

model DetachEaiRequest {
  elasticAcceleratedInstanceId: string(name='ElasticAcceleratedInstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DetachEaiResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachEaiResponse = {
  headers: map[string]string(name='headers'),
  body: DetachEaiResponseBody(name='body'),
}

async function detachEai(request: DetachEaiRequest): DetachEaiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachEai', 'POST', '/', 'json', false, 'json', request);
}

model GetPrivateIpRequest {
  clientInstanceId: string(name='ClientInstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model GetPrivateIpResponseBody = {
  privateIp?: string(name='PrivateIp'),
  requestId?: string(name='RequestId'),
}

model GetPrivateIpResponse = {
  headers: map[string]string(name='headers'),
  body: GetPrivateIpResponseBody(name='body'),
}

async function getPrivateIp(request: GetPrivateIpRequest): GetPrivateIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPrivateIp', 'POST', '/', 'json', false, 'json', request);
}

