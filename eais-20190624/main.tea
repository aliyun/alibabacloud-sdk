/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'eais.aliyuncs.com',
    ap-northeast-2-pop = 'eais.aliyuncs.com',
    ap-south-1 = 'eais.aliyuncs.com',
    ap-southeast-1 = 'eais.aliyuncs.com',
    ap-southeast-2 = 'eais.aliyuncs.com',
    ap-southeast-3 = 'eais.aliyuncs.com',
    ap-southeast-5 = 'eais.aliyuncs.com',
    cn-beijing-finance-1 = 'eais.aliyuncs.com',
    cn-beijing-finance-pop = 'eais.aliyuncs.com',
    cn-beijing-gov-1 = 'eais.aliyuncs.com',
    cn-beijing-nu16-b01 = 'eais.aliyuncs.com',
    cn-edge-1 = 'eais.aliyuncs.com',
    cn-fujian = 'eais.aliyuncs.com',
    cn-haidian-cm12-c01 = 'eais.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'eais.aliyuncs.com',
    cn-hangzhou-finance = 'eais.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'eais.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'eais.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'eais.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'eais.aliyuncs.com',
    cn-hangzhou-test-306 = 'eais.aliyuncs.com',
    cn-hongkong = 'eais.aliyuncs.com',
    cn-hongkong-finance-pop = 'eais.aliyuncs.com',
    cn-huhehaote = 'eais.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'eais.aliyuncs.com',
    cn-north-2-gov-1 = 'eais.aliyuncs.com',
    cn-qingdao = 'eais.aliyuncs.com',
    cn-qingdao-nebula = 'eais.aliyuncs.com',
    cn-shanghai-et15-b01 = 'eais.aliyuncs.com',
    cn-shanghai-et2-b01 = 'eais.aliyuncs.com',
    cn-shanghai-finance-1 = 'eais.aliyuncs.com',
    cn-shanghai-inner = 'eais.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'eais.aliyuncs.com',
    cn-shenzhen-finance-1 = 'eais.aliyuncs.com',
    cn-shenzhen-inner = 'eais.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'eais.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'eais.aliyuncs.com',
    cn-wuhan = 'eais.aliyuncs.com',
    cn-wulanchabu = 'eais.aliyuncs.com',
    cn-yushanfang = 'eais.aliyuncs.com',
    cn-zhangbei = 'eais.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'eais.aliyuncs.com',
    cn-zhangjiakou = 'eais.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'eais.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'eais.aliyuncs.com',
    eu-central-1 = 'eais.aliyuncs.com',
    eu-west-1 = 'eais.aliyuncs.com',
    eu-west-1-oxs = 'eais.aliyuncs.com',
    me-east-1 = 'eais.aliyuncs.com',
    rus-west-1-pop = 'eais.aliyuncs.com',
    us-east-1 = 'eais.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('eais', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AttachEaiRequest {
  clientInstanceId?: string(name='ClientInstanceId'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
  regionId?: string(name='RegionId'),
}

model AttachEaiResponseBody = {
  clientInstanceId?: string(name='ClientInstanceId'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
  requestId?: string(name='RequestId'),
}

model AttachEaiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachEaiResponseBody(name='body'),
}

async function attachEaiWithOptions(request: AttachEaiRequest, runtime: Util.RuntimeOptions): AttachEaiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientInstanceId)) {
    query['ClientInstanceId'] = request.clientInstanceId;
  }
  if (!Util.isUnset(request.elasticAcceleratedInstanceId)) {
    query['ElasticAcceleratedInstanceId'] = request.elasticAcceleratedInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachEai',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachEai(request: AttachEaiRequest): AttachEaiResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachEaiWithOptions(request, runtime);
}

model CreateEaiRequest {
  clientToken?: string(name='ClientToken'),
  instanceName?: string(name='InstanceName'),
  instanceType?: string(name='InstanceType'),
  regionId?: string(name='RegionId'),
  securityGroupId?: string(name='SecurityGroupId'),
  vSwitchId?: string(name='VSwitchId'),
}

model CreateEaiResponseBody = {
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateEaiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEaiResponseBody(name='body'),
}

async function createEaiWithOptions(request: CreateEaiRequest, runtime: Util.RuntimeOptions): CreateEaiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEai',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEai(request: CreateEaiRequest): CreateEaiResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEaiWithOptions(request, runtime);
}

model CreateEaiAllRequest {
  clientImageId?: string(name='ClientImageId'),
  clientInstanceName?: string(name='ClientInstanceName'),
  clientInstanceType?: string(name='ClientInstanceType'),
  clientInternetMaxBandwidthIn?: int32(name='ClientInternetMaxBandwidthIn'),
  clientInternetMaxBandwidthOut?: int32(name='ClientInternetMaxBandwidthOut'),
  clientPassword?: string(name='ClientPassword'),
  clientSecurityGroupId?: string(name='ClientSecurityGroupId'),
  clientSystemDiskCategory?: string(name='ClientSystemDiskCategory'),
  clientSystemDiskSize?: int32(name='ClientSystemDiskSize'),
  clientToken?: string(name='ClientToken'),
  clientVSwitchId?: string(name='ClientVSwitchId'),
  clientZoneId?: string(name='ClientZoneId'),
  eaiInstanceType?: string(name='EaiInstanceType'),
  instanceName?: string(name='InstanceName'),
  regionId?: string(name='RegionId'),
}

model CreateEaiAllResponseBody = {
  clientInstanceId?: string(name='ClientInstanceId'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateEaiAllResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEaiAllResponseBody(name='body'),
}

async function createEaiAllWithOptions(request: CreateEaiAllRequest, runtime: Util.RuntimeOptions): CreateEaiAllResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientImageId)) {
    query['ClientImageId'] = request.clientImageId;
  }
  if (!Util.isUnset(request.clientInstanceName)) {
    query['ClientInstanceName'] = request.clientInstanceName;
  }
  if (!Util.isUnset(request.clientInstanceType)) {
    query['ClientInstanceType'] = request.clientInstanceType;
  }
  if (!Util.isUnset(request.clientInternetMaxBandwidthIn)) {
    query['ClientInternetMaxBandwidthIn'] = request.clientInternetMaxBandwidthIn;
  }
  if (!Util.isUnset(request.clientInternetMaxBandwidthOut)) {
    query['ClientInternetMaxBandwidthOut'] = request.clientInternetMaxBandwidthOut;
  }
  if (!Util.isUnset(request.clientPassword)) {
    query['ClientPassword'] = request.clientPassword;
  }
  if (!Util.isUnset(request.clientSecurityGroupId)) {
    query['ClientSecurityGroupId'] = request.clientSecurityGroupId;
  }
  if (!Util.isUnset(request.clientSystemDiskCategory)) {
    query['ClientSystemDiskCategory'] = request.clientSystemDiskCategory;
  }
  if (!Util.isUnset(request.clientSystemDiskSize)) {
    query['ClientSystemDiskSize'] = request.clientSystemDiskSize;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientVSwitchId)) {
    query['ClientVSwitchId'] = request.clientVSwitchId;
  }
  if (!Util.isUnset(request.clientZoneId)) {
    query['ClientZoneId'] = request.clientZoneId;
  }
  if (!Util.isUnset(request.eaiInstanceType)) {
    query['EaiInstanceType'] = request.eaiInstanceType;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEaiAll',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEaiAll(request: CreateEaiAllRequest): CreateEaiAllResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEaiAllWithOptions(request, runtime);
}

model CreateEaiJupyterRequest {
  clientToken?: string(name='ClientToken'),
  eaisType?: string(name='EaisType'),
  environmentVar?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='EnvironmentVar'),
  regionId?: string(name='RegionId'),
  securityGroupId?: string(name='SecurityGroupId'),
  vSwitchId?: string(name='VSwitchId'),
}

model CreateEaiJupyterShrinkRequest {
  clientToken?: string(name='ClientToken'),
  eaisType?: string(name='EaisType'),
  environmentVarShrink?: string(name='EnvironmentVar'),
  regionId?: string(name='RegionId'),
  securityGroupId?: string(name='SecurityGroupId'),
  vSwitchId?: string(name='VSwitchId'),
}

model CreateEaiJupyterResponseBody = {
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateEaiJupyterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEaiJupyterResponseBody(name='body'),
}

async function createEaiJupyterWithOptions(tmpReq: CreateEaiJupyterRequest, runtime: Util.RuntimeOptions): CreateEaiJupyterResponse {
  Util.validateModel(tmpReq);
  var request = new CreateEaiJupyterShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.environmentVar)) {
    request.environmentVarShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.environmentVar, 'EnvironmentVar', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.eaisType)) {
    query['EaisType'] = request.eaisType;
  }
  if (!Util.isUnset(request.environmentVarShrink)) {
    query['EnvironmentVar'] = request.environmentVarShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEaiJupyter',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEaiJupyter(request: CreateEaiJupyterRequest): CreateEaiJupyterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEaiJupyterWithOptions(request, runtime);
}

model DeleteEaiRequest {
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
  force?: boolean(name='Force'),
  regionId?: string(name='RegionId'),
}

model DeleteEaiResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteEaiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEaiResponseBody(name='body'),
}

async function deleteEaiWithOptions(request: DeleteEaiRequest, runtime: Util.RuntimeOptions): DeleteEaiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.elasticAcceleratedInstanceId)) {
    query['ElasticAcceleratedInstanceId'] = request.elasticAcceleratedInstanceId;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEai',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEai(request: DeleteEaiRequest): DeleteEaiResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEaiWithOptions(request, runtime);
}

model DeleteEaiAllRequest {
  clientInstanceId?: string(name='ClientInstanceId'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
  regionId?: string(name='RegionId'),
}

model DeleteEaiAllResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteEaiAllResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEaiAllResponseBody(name='body'),
}

async function deleteEaiAllWithOptions(request: DeleteEaiAllRequest, runtime: Util.RuntimeOptions): DeleteEaiAllResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientInstanceId)) {
    query['ClientInstanceId'] = request.clientInstanceId;
  }
  if (!Util.isUnset(request.elasticAcceleratedInstanceId)) {
    query['ElasticAcceleratedInstanceId'] = request.elasticAcceleratedInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEaiAll',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEaiAll(request: DeleteEaiAllRequest): DeleteEaiAllResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEaiAllWithOptions(request, runtime);
}

model DescribeEaisRequest {
  elasticAcceleratedInstanceIds?: string(name='ElasticAcceleratedInstanceIds'),
  instanceName?: string(name='InstanceName'),
  instanceType?: string(name='InstanceType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  status?: string(name='Status'),
}

model DescribeEaisResponseBody = {
  instances?: {
    instance?: [ 
    {
      category?: string(name='Category'),
      clientInstanceId?: string(name='ClientInstanceId'),
      clientInstanceName?: string(name='ClientInstanceName'),
      clientInstanceType?: string(name='ClientInstanceType'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceType?: string(name='InstanceType'),
      jupyterUrl?: string(name='JupyterUrl'),
      regionId?: string(name='RegionId'),
      securityGroupId?: string(name='SecurityGroupId'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      vSwitchId?: string(name='VSwitchId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Instance')
  }(name='Instances'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeEaisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEaisResponseBody(name='body'),
}

async function describeEaisWithOptions(request: DescribeEaisRequest, runtime: Util.RuntimeOptions): DescribeEaisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.elasticAcceleratedInstanceIds)) {
    query['ElasticAcceleratedInstanceIds'] = request.elasticAcceleratedInstanceIds;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEais',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEais(request: DescribeEaisRequest): DescribeEaisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEaisWithOptions(request, runtime);
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(runtime);
}

model DetachEaiRequest {
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
  regionId?: string(name='RegionId'),
}

model DetachEaiResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachEaiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachEaiResponseBody(name='body'),
}

async function detachEaiWithOptions(request: DetachEaiRequest, runtime: Util.RuntimeOptions): DetachEaiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.elasticAcceleratedInstanceId)) {
    query['ElasticAcceleratedInstanceId'] = request.elasticAcceleratedInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachEai',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachEai(request: DetachEaiRequest): DetachEaiResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachEaiWithOptions(request, runtime);
}

