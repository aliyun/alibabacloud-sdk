/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    ap-northeast-1 = 'eais.aliyuncs.com',
    ap-northeast-2-pop = 'eais.aliyuncs.com',
    ap-south-1 = 'eais.aliyuncs.com',
    ap-southeast-1 = 'eais.aliyuncs.com',
    ap-southeast-2 = 'eais.aliyuncs.com',
    ap-southeast-3 = 'eais.aliyuncs.com',
    ap-southeast-5 = 'eais.aliyuncs.com',
    cn-beijing-finance-1 = 'eais.aliyuncs.com',
    cn-beijing-finance-pop = 'eais.aliyuncs.com',
    cn-beijing-gov-1 = 'eais.aliyuncs.com',
    cn-beijing-nu16-b01 = 'eais.aliyuncs.com',
    cn-edge-1 = 'eais.aliyuncs.com',
    cn-fujian = 'eais.aliyuncs.com',
    cn-haidian-cm12-c01 = 'eais.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'eais.aliyuncs.com',
    cn-hangzhou-finance = 'eais.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'eais.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'eais.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'eais.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'eais.aliyuncs.com',
    cn-hangzhou-test-306 = 'eais.aliyuncs.com',
    cn-hongkong = 'eais.aliyuncs.com',
    cn-hongkong-finance-pop = 'eais.aliyuncs.com',
    cn-huhehaote = 'eais.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'eais.aliyuncs.com',
    cn-north-2-gov-1 = 'eais.aliyuncs.com',
    cn-qingdao = 'eais.aliyuncs.com',
    cn-qingdao-nebula = 'eais.aliyuncs.com',
    cn-shanghai-et15-b01 = 'eais.aliyuncs.com',
    cn-shanghai-et2-b01 = 'eais.aliyuncs.com',
    cn-shanghai-finance-1 = 'eais.aliyuncs.com',
    cn-shanghai-inner = 'eais.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'eais.aliyuncs.com',
    cn-shenzhen-finance-1 = 'eais.aliyuncs.com',
    cn-shenzhen-inner = 'eais.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'eais.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'eais.aliyuncs.com',
    cn-wuhan = 'eais.aliyuncs.com',
    cn-wulanchabu = 'eais.aliyuncs.com',
    cn-yushanfang = 'eais.aliyuncs.com',
    cn-zhangbei = 'eais.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'eais.aliyuncs.com',
    cn-zhangjiakou = 'eais.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'eais.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'eais.aliyuncs.com',
    eu-central-1 = 'eais.aliyuncs.com',
    eu-west-1 = 'eais.aliyuncs.com',
    eu-west-1-oxs = 'eais.aliyuncs.com',
    me-east-1 = 'eais.aliyuncs.com',
    rus-west-1-pop = 'eais.aliyuncs.com',
    us-east-1 = 'eais.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('eais', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AttachEaiRequest {
  regionId?: string(name='RegionId'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
  clientInstanceId?: string(name='ClientInstanceId'),
}

model AttachEaiResponseBody = {
  requestId?: string(name='RequestId'),
  clientInstanceId?: string(name='ClientInstanceId'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
}

model AttachEaiResponse = {
  headers: map[string]string(name='headers'),
  body: AttachEaiResponseBody(name='body'),
}

async function attachEaiWithOptions(request: AttachEaiRequest, runtime: Util.RuntimeOptions): AttachEaiResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachEai', '2019-06-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachEai(request: AttachEaiRequest): AttachEaiResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachEaiWithOptions(request, runtime);
}

model CreateEaiRequest {
  regionId?: string(name='RegionId'),
  instanceType?: string(name='InstanceType'),
  clientToken?: string(name='ClientToken'),
  instanceName?: string(name='InstanceName'),
}

model CreateEaiResponseBody = {
  requestId?: string(name='RequestId'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
}

model CreateEaiResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEaiResponseBody(name='body'),
}

async function createEaiWithOptions(request: CreateEaiRequest, runtime: Util.RuntimeOptions): CreateEaiResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEai', '2019-06-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEai(request: CreateEaiRequest): CreateEaiResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEaiWithOptions(request, runtime);
}

model CreateEaiAllRequest {
  regionId?: string(name='RegionId'),
  eaiInstanceType?: string(name='EaiInstanceType'),
  clientVSwitchId?: string(name='ClientVSwitchId'),
  clientSecurityGroupId?: string(name='ClientSecurityGroupId'),
  clientImageId?: string(name='ClientImageId'),
  clientInstanceType?: string(name='ClientInstanceType'),
  clientZoneId?: string(name='ClientZoneId'),
  clientInstanceName?: string(name='ClientInstanceName'),
  clientPassword?: string(name='ClientPassword'),
  clientInternetMaxBandwidthIn?: int32(name='ClientInternetMaxBandwidthIn'),
  clientInternetMaxBandwidthOut?: int32(name='ClientInternetMaxBandwidthOut'),
  clientSystemDiskCategory?: string(name='ClientSystemDiskCategory'),
  clientSystemDiskSize?: int32(name='ClientSystemDiskSize'),
  clientToken?: string(name='ClientToken'),
  instanceName?: string(name='InstanceName'),
}

model CreateEaiAllResponseBody = {
  requestId?: string(name='RequestId'),
  clientInstanceId?: string(name='ClientInstanceId'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
}

model CreateEaiAllResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEaiAllResponseBody(name='body'),
}

async function createEaiAllWithOptions(request: CreateEaiAllRequest, runtime: Util.RuntimeOptions): CreateEaiAllResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEaiAll', '2019-06-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEaiAll(request: CreateEaiAllRequest): CreateEaiAllResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEaiAllWithOptions(request, runtime);
}

model DeleteEaiRequest {
  regionId?: string(name='RegionId'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
  force?: boolean(name='Force'),
}

model DeleteEaiResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteEaiResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEaiResponseBody(name='body'),
}

async function deleteEaiWithOptions(request: DeleteEaiRequest, runtime: Util.RuntimeOptions): DeleteEaiResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteEai', '2019-06-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteEai(request: DeleteEaiRequest): DeleteEaiResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEaiWithOptions(request, runtime);
}

model DeleteEaiAllRequest {
  regionId?: string(name='RegionId'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
  clientInstanceId?: string(name='ClientInstanceId'),
}

model DeleteEaiAllResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteEaiAllResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEaiAllResponseBody(name='body'),
}

async function deleteEaiAllWithOptions(request: DeleteEaiAllRequest, runtime: Util.RuntimeOptions): DeleteEaiAllResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteEaiAll', '2019-06-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteEaiAll(request: DeleteEaiAllRequest): DeleteEaiAllResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEaiAllWithOptions(request, runtime);
}

model DescribeEaisRequest {
  regionId?: string(name='RegionId'),
  elasticAcceleratedInstanceIds?: string(name='ElasticAcceleratedInstanceIds'),
  instanceName?: string(name='InstanceName'),
  status?: string(name='Status'),
  instanceType?: string(name='InstanceType'),
}

model DescribeEaisResponseBody = {
  instances?: {
    instance?: [ 
    {
      status?: string(name='Status'),
      creationTime?: string(name='CreationTime'),
      clientInstanceType?: string(name='ClientInstanceType'),
      clientInstanceId?: string(name='ClientInstanceId'),
      tags?: {
        tag?: [ 
        {
          tagValue?: string(name='TagValue'),
          tagKey?: string(name='TagKey'),
        }
      ](name='Tag')
      }(name='Tags'),
      instanceType?: string(name='InstanceType'),
      regionId?: string(name='RegionId'),
      clientInstanceName?: string(name='ClientInstanceName'),
      description?: string(name='Description'),
      elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
      instanceName?: string(name='InstanceName'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Instance')
  }(name='Instances'),
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeEaisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEaisResponseBody(name='body'),
}

async function describeEaisWithOptions(request: DescribeEaisRequest, runtime: Util.RuntimeOptions): DescribeEaisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEais', '2019-06-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEais(request: DescribeEaisRequest): DescribeEaisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEaisWithOptions(request, runtime);
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeRegions', '2019-06-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(runtime);
}

model DetachEaiRequest {
  regionId?: string(name='RegionId'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId'),
}

model DetachEaiResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachEaiResponse = {
  headers: map[string]string(name='headers'),
  body: DetachEaiResponseBody(name='body'),
}

async function detachEaiWithOptions(request: DetachEaiRequest, runtime: Util.RuntimeOptions): DetachEaiResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetachEai', '2019-06-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detachEai(request: DetachEaiRequest): DetachEaiResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachEaiWithOptions(request, runtime);
}

model GetPrivateIpRequest {
  regionId?: string(name='RegionId'),
  clientInstanceId?: string(name='ClientInstanceId'),
}

model GetPrivateIpResponseBody = {
  requestId?: string(name='RequestId'),
  privateIp?: string(name='PrivateIp'),
}

model GetPrivateIpResponse = {
  headers: map[string]string(name='headers'),
  body: GetPrivateIpResponseBody(name='body'),
}

async function getPrivateIpWithOptions(request: GetPrivateIpRequest, runtime: Util.RuntimeOptions): GetPrivateIpResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetPrivateIp', '2019-06-24', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getPrivateIp(request: GetPrivateIpRequest): GetPrivateIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPrivateIpWithOptions(request, runtime);
}

