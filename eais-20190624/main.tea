/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'eais.aliyuncs.com',
    ap-northeast-2-pop = 'eais.aliyuncs.com',
    ap-south-1 = 'eais.aliyuncs.com',
    ap-southeast-1 = 'eais.aliyuncs.com',
    ap-southeast-2 = 'eais.aliyuncs.com',
    ap-southeast-3 = 'eais.aliyuncs.com',
    ap-southeast-5 = 'eais.aliyuncs.com',
    cn-beijing-finance-1 = 'eais.aliyuncs.com',
    cn-beijing-finance-pop = 'eais.aliyuncs.com',
    cn-beijing-gov-1 = 'eais.aliyuncs.com',
    cn-beijing-nu16-b01 = 'eais.aliyuncs.com',
    cn-edge-1 = 'eais.aliyuncs.com',
    cn-fujian = 'eais.aliyuncs.com',
    cn-haidian-cm12-c01 = 'eais.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'eais.aliyuncs.com',
    cn-hangzhou-finance = 'eais.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'eais.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'eais.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'eais.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'eais.aliyuncs.com',
    cn-hangzhou-test-306 = 'eais.aliyuncs.com',
    cn-hongkong = 'eais.aliyuncs.com',
    cn-hongkong-finance-pop = 'eais.aliyuncs.com',
    cn-huhehaote = 'eais.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'eais.aliyuncs.com',
    cn-north-2-gov-1 = 'eais.aliyuncs.com',
    cn-qingdao = 'eais.aliyuncs.com',
    cn-qingdao-nebula = 'eais.aliyuncs.com',
    cn-shanghai-et15-b01 = 'eais.aliyuncs.com',
    cn-shanghai-et2-b01 = 'eais.aliyuncs.com',
    cn-shanghai-finance-1 = 'eais.aliyuncs.com',
    cn-shanghai-inner = 'eais.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'eais.aliyuncs.com',
    cn-shenzhen-finance-1 = 'eais.aliyuncs.com',
    cn-shenzhen-inner = 'eais.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'eais.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'eais.aliyuncs.com',
    cn-wuhan = 'eais.aliyuncs.com',
    cn-wulanchabu = 'eais.aliyuncs.com',
    cn-yushanfang = 'eais.aliyuncs.com',
    cn-zhangbei = 'eais.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'eais.aliyuncs.com',
    cn-zhangjiakou = 'eais.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'eais.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'eais.aliyuncs.com',
    eu-central-1 = 'eais.aliyuncs.com',
    eu-west-1 = 'eais.aliyuncs.com',
    eu-west-1-oxs = 'eais.aliyuncs.com',
    me-east-1 = 'eais.aliyuncs.com',
    rus-west-1-pop = 'eais.aliyuncs.com',
    us-east-1 = 'eais.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('eais', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AttachEaiRequest {
  clientInstanceId?: string(name='ClientInstanceId', example='i-wz93g6pyat2g7t7o****'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId', example='eais-sz8t15a7gt7z7j7i****'),
  regionId?: string(name='RegionId', example='cn-shenzhen'),
}

model AttachEaiResponseBody = {
  clientInstanceId?: string(name='ClientInstanceId', example='i-wz93g6pyat2g7t7o****'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId', example='eais-sz8t15a7gt7z7j7i****'),
  requestId?: string(name='RequestId', example='C3BCB7DA-BEB6-4982-A765-6EA61EC84474'),
}

model AttachEaiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachEaiResponseBody(name='body'),
}

async function attachEaiWithOptions(request: AttachEaiRequest, runtime: Util.RuntimeOptions): AttachEaiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientInstanceId)) {
    query['ClientInstanceId'] = request.clientInstanceId;
  }
  if (!Util.isUnset(request.elasticAcceleratedInstanceId)) {
    query['ElasticAcceleratedInstanceId'] = request.elasticAcceleratedInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachEai',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachEai(request: AttachEaiRequest): AttachEaiResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachEaiWithOptions(request, runtime);
}

model AttachEaisEiRequest {
  clientInstanceId?: string(name='ClientInstanceId'),
  eiInstanceId?: string(name='EiInstanceId'),
  eiInstanceType?: string(name='EiInstanceType'),
  regionId?: string(name='RegionId'),
}

model AttachEaisEiResponseBody = {
  clientInstanceId?: string(name='ClientInstanceId'),
  eiInstanceId?: string(name='EiInstanceId'),
  requestId?: string(name='RequestId'),
}

model AttachEaisEiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachEaisEiResponseBody(name='body'),
}

async function attachEaisEiWithOptions(request: AttachEaisEiRequest, runtime: Util.RuntimeOptions): AttachEaisEiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientInstanceId)) {
    query['ClientInstanceId'] = request.clientInstanceId;
  }
  if (!Util.isUnset(request.eiInstanceId)) {
    query['EiInstanceId'] = request.eiInstanceId;
  }
  if (!Util.isUnset(request.eiInstanceType)) {
    query['EiInstanceType'] = request.eiInstanceType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachEaisEi',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachEaisEi(request: AttachEaisEiRequest): AttachEaisEiResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachEaisEiWithOptions(request, runtime);
}

model ChangeResourceGroupRequest {
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmvpuy4a5****'),
  resourceId?: string(name='ResourceId', example='eais-hzs4h26yyt5xkcke****'),
  resourceRegionId?: string(name='ResourceRegionId', example='cn-hangzhou'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='C3BCB7DA-BEB6-4982-A765-6EA61EC8****'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroupWithOptions(request: ChangeResourceGroupRequest, runtime: Util.RuntimeOptions): ChangeResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceRegionId)) {
    query['ResourceRegionId'] = request.resourceRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeResourceGroup',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeResourceGroupWithOptions(request, runtime);
}

model CreateEaiRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  image?: string(name='Image'),
  instanceName?: string(name='InstanceName', example='eais-test01'),
  instanceType?: string(name='InstanceType', example='eais.ei-a6.2xlarge'),
  regionId?: string(name='RegionId', example='cn-shenzhen'),
  resourceGroupId?: string(name='ResourceGroupId'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-uf66jeqopgqa9hdn****'),
  vSwitchId?: string(name='VSwitchId', example='vsw-uf6h3rbwbm90urjwa****'),
}

model CreateEaiResponseBody = {
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId', example='eais-sz8t15a7gt7z7j7i****'),
  requestId?: string(name='RequestId', example='A655AB0E-31BB-45AD-9255-FCE93F6*****'),
}

model CreateEaiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEaiResponseBody(name='body'),
}

async function createEaiWithOptions(request: CreateEaiRequest, runtime: Util.RuntimeOptions): CreateEaiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.image)) {
    query['Image'] = request.image;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEai',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEai(request: CreateEaiRequest): CreateEaiResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEaiWithOptions(request, runtime);
}

model CreateEaiAllRequest {
  clientImageId?: string(name='ClientImageId', example='ubuntu_18_04_x64_20G_alibase_20200914.vhd'),
  clientInstanceName?: string(name='ClientInstanceName', example='test-name'),
  clientInstanceType?: string(name='ClientInstanceType', example='ecs.g5.large'),
  clientInternetMaxBandwidthIn?: int32(name='ClientInternetMaxBandwidthIn', example='10'),
  clientInternetMaxBandwidthOut?: int32(name='ClientInternetMaxBandwidthOut', example='10'),
  clientPassword?: string(name='ClientPassword', example='EcsV587!'),
  clientSecurityGroupId?: string(name='ClientSecurityGroupId', example='sg-wz9a02pqben4axkd2****'),
  clientSystemDiskCategory?: string(name='ClientSystemDiskCategory', example='cloud_ssd'),
  clientSystemDiskSize?: int32(name='ClientSystemDiskSize', example='40'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  clientVSwitchId?: string(name='ClientVSwitchId', example='vsw-wz9a04axkd22pqben****'),
  clientZoneId?: string(name='ClientZoneId', example='cn-shenzhen-a'),
  eaiInstanceType?: string(name='EaiInstanceType', example='eais.ei-a6.large'),
  instanceName?: string(name='InstanceName', example='eais-test01'),
  regionId?: string(name='RegionId', example='cn-shenzhen'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateEaiAllResponseBody = {
  clientInstanceId?: string(name='ClientInstanceId', example='i-bp1fvhi60e1zizsp****'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId', example='eais-hza1ahi0uuw0re33****'),
  requestId?: string(name='RequestId', example='D266C40C-8624-41A4-B8C2-35852B952D1A'),
}

model CreateEaiAllResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEaiAllResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request CreateEaiAllRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateEaiAllResponse
 */
// Deprecated
async function createEaiAllWithOptions(request: CreateEaiAllRequest, runtime: Util.RuntimeOptions): CreateEaiAllResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientImageId)) {
    query['ClientImageId'] = request.clientImageId;
  }
  if (!Util.isUnset(request.clientInstanceName)) {
    query['ClientInstanceName'] = request.clientInstanceName;
  }
  if (!Util.isUnset(request.clientInstanceType)) {
    query['ClientInstanceType'] = request.clientInstanceType;
  }
  if (!Util.isUnset(request.clientInternetMaxBandwidthIn)) {
    query['ClientInternetMaxBandwidthIn'] = request.clientInternetMaxBandwidthIn;
  }
  if (!Util.isUnset(request.clientInternetMaxBandwidthOut)) {
    query['ClientInternetMaxBandwidthOut'] = request.clientInternetMaxBandwidthOut;
  }
  if (!Util.isUnset(request.clientPassword)) {
    query['ClientPassword'] = request.clientPassword;
  }
  if (!Util.isUnset(request.clientSecurityGroupId)) {
    query['ClientSecurityGroupId'] = request.clientSecurityGroupId;
  }
  if (!Util.isUnset(request.clientSystemDiskCategory)) {
    query['ClientSystemDiskCategory'] = request.clientSystemDiskCategory;
  }
  if (!Util.isUnset(request.clientSystemDiskSize)) {
    query['ClientSystemDiskSize'] = request.clientSystemDiskSize;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientVSwitchId)) {
    query['ClientVSwitchId'] = request.clientVSwitchId;
  }
  if (!Util.isUnset(request.clientZoneId)) {
    query['ClientZoneId'] = request.clientZoneId;
  }
  if (!Util.isUnset(request.eaiInstanceType)) {
    query['EaiInstanceType'] = request.eaiInstanceType;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEaiAll',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request CreateEaiAllRequest
  * @return CreateEaiAllResponse
 */
// Deprecated
async function createEaiAll(request: CreateEaiAllRequest): CreateEaiAllResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEaiAllWithOptions(request, runtime);
}

model CreateEaiEciRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  eaisName?: string(name='EaisName', example='eais-test01'),
  eaisType?: string(name='EaisType', example='eais.ei-a6.2xlarge'),
  eci?: {
    container?: {
      arg?: string(name='Arg', example='100'),
      command?: string(name='Command', example='sleep'),
      image?: string(name='Image', example='nginx'),
      name?: string(name='Name', example='test1'),
      volumes?: string(name='Volumes', example='/mnt/eais=eais,/models=eais/models'),
    }(name='Container'),
    eipId?: string(name='EipId', example='eip-uf66jeqopgqa9hdn****'),
    name?: string(name='Name', example='test-nginx'),
    type?: string(name='Type', example='ecs.c5.xlarge'),
    volume?: string(name='Volume', example='00c7****-rivj.cn-hangzhou.extreme.nas.aliyuncs.com:/share'),
  }(name='Eci'),
  regionId?: string(name='RegionId', example='cn-shenzhen'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmvpuy4a5****'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-uf66jeqopgqa9hdn****'),
  vSwitchId?: string(name='VSwitchId', example='vsw-uf6h3rbwbm90urjwa****'),
}

model CreateEaiEciShrinkRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  eaisName?: string(name='EaisName', example='eais-test01'),
  eaisType?: string(name='EaisType', example='eais.ei-a6.2xlarge'),
  eciShrink?: string(name='Eci'),
  regionId?: string(name='RegionId', example='cn-shenzhen'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmvpuy4a5****'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-uf66jeqopgqa9hdn****'),
  vSwitchId?: string(name='VSwitchId', example='vsw-uf6h3rbwbm90urjwa****'),
}

model CreateEaiEciResponseBody = {
  clientInstanceId?: string(name='ClientInstanceId', example='eci-2zeh03ygxlrzmfi6****'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId', example='eais-sz8t15a7gt7z7j7i****'),
  requestId?: string(name='RequestId', example='F5FEB9AA-C108-577C-AB3D-D13524AF****'),
}

model CreateEaiEciResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEaiEciResponseBody(name='body'),
}

async function createEaiEciWithOptions(tmpReq: CreateEaiEciRequest, runtime: Util.RuntimeOptions): CreateEaiEciResponse {
  Util.validateModel(tmpReq);
  var request = new CreateEaiEciShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.eci)) {
    request.eciShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.eci, 'Eci', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.eaisName)) {
    query['EaisName'] = request.eaisName;
  }
  if (!Util.isUnset(request.eaisType)) {
    query['EaisType'] = request.eaisType;
  }
  if (!Util.isUnset(request.eciShrink)) {
    query['Eci'] = request.eciShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEaiEci',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEaiEci(request: CreateEaiEciRequest): CreateEaiEciResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEaiEciWithOptions(request, runtime);
}

model CreateEaiEcsRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  eaisName?: string(name='EaisName', example='eais-test01'),
  eaisType?: string(name='EaisType', example='eais.ei-a6.2xlarge'),
  ecs?: {
    imageId?: string(name='ImageId', example='aliyun_2_1903_x64_20G_alibase_20200324.vhd'),
    internetMaxBandwidthIn?: string(name='InternetMaxBandwidthIn', example='10'),
    internetMaxBandwidthOut?: string(name='InternetMaxBandwidthOut', example='10'),
    name?: string(name='Name', example='test1'),
    password?: string(name='Password', example='EcsV587!'),
    systemDiskCategory?: string(name='SystemDiskCategory', example='cloud_ssd'),
    systemDiskSize?: long(name='SystemDiskSize', example='40'),
    type?: string(name='Type', example='ecs.g7.4xlarge'),
    zoneId?: string(name='ZoneId', example='cn-shenzhen-e'),
  }(name='Ecs'),
  regionId?: string(name='RegionId', example='cn-shenzhen'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmvpuy4a5****'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-uf66jeqopgqa9hdn****'),
  vSwitchId?: string(name='VSwitchId', example='vsw-uf6h3rbwbm90urjwa****'),
}

model CreateEaiEcsShrinkRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  eaisName?: string(name='EaisName', example='eais-test01'),
  eaisType?: string(name='EaisType', example='eais.ei-a6.2xlarge'),
  ecsShrink?: string(name='Ecs'),
  regionId?: string(name='RegionId', example='cn-shenzhen'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmvpuy4a5****'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-uf66jeqopgqa9hdn****'),
  vSwitchId?: string(name='VSwitchId', example='vsw-uf6h3rbwbm90urjwa****'),
}

model CreateEaiEcsResponseBody = {
  clientInstanceId?: string(name='ClientInstanceId', example='i-bp1hjrvleawl4ogb****'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId', example='eais-sz8t15a7gt7z7j7i****'),
  requestId?: string(name='RequestId', example='F5FEB9AA-C108-577C-AB3D-D13524AF****'),
}

model CreateEaiEcsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEaiEcsResponseBody(name='body'),
}

async function createEaiEcsWithOptions(tmpReq: CreateEaiEcsRequest, runtime: Util.RuntimeOptions): CreateEaiEcsResponse {
  Util.validateModel(tmpReq);
  var request = new CreateEaiEcsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ecs)) {
    request.ecsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ecs, 'Ecs', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.eaisName)) {
    query['EaisName'] = request.eaisName;
  }
  if (!Util.isUnset(request.eaisType)) {
    query['EaisType'] = request.eaisType;
  }
  if (!Util.isUnset(request.ecsShrink)) {
    query['Ecs'] = request.ecsShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEaiEcs',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEaiEcs(request: CreateEaiEcsRequest): CreateEaiEcsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEaiEcsWithOptions(request, runtime);
}

model CreateEaiJupyterRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  eaisName?: string(name='EaisName'),
  eaisType?: string(name='EaisType', example='eais.ei-a6.2xlarge'),
  environmentVar?: [ 
    {
      key?: string(name='Key', example='MY_USER_NAME'),
      value?: string(name='Value', example='test123'),
    }
  ](name='EnvironmentVar'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-uf66jeqopgqa9hdn****'),
  vSwitchId?: string(name='VSwitchId', example='vsw-uf6h3rbwbm90urjwa****'),
}

model CreateEaiJupyterShrinkRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  eaisName?: string(name='EaisName'),
  eaisType?: string(name='EaisType', example='eais.ei-a6.2xlarge'),
  environmentVarShrink?: string(name='EnvironmentVar'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-uf66jeqopgqa9hdn****'),
  vSwitchId?: string(name='VSwitchId', example='vsw-uf6h3rbwbm90urjwa****'),
}

model CreateEaiJupyterResponseBody = {
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId', example='eais-hz8t15a7gt7z7j7i****'),
  requestId?: string(name='RequestId', example='A655AB0E-31BB-45AD-9255-FCE93F6*****'),
}

model CreateEaiJupyterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEaiJupyterResponseBody(name='body'),
}

async function createEaiJupyterWithOptions(tmpReq: CreateEaiJupyterRequest, runtime: Util.RuntimeOptions): CreateEaiJupyterResponse {
  Util.validateModel(tmpReq);
  var request = new CreateEaiJupyterShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.environmentVar)) {
    request.environmentVarShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.environmentVar, 'EnvironmentVar', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.eaisName)) {
    query['EaisName'] = request.eaisName;
  }
  if (!Util.isUnset(request.eaisType)) {
    query['EaisType'] = request.eaisType;
  }
  if (!Util.isUnset(request.environmentVarShrink)) {
    query['EnvironmentVar'] = request.environmentVarShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEaiJupyter',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEaiJupyter(request: CreateEaiJupyterRequest): CreateEaiJupyterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEaiJupyterWithOptions(request, runtime);
}

model CreateEaisEiRequest {
  clientToken?: string(name='ClientToken'),
  instanceName?: string(name='InstanceName'),
  instanceType?: string(name='InstanceType'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  securityGroupId?: string(name='SecurityGroupId'),
  vSwitchId?: string(name='VSwitchId'),
}

model CreateEaisEiResponseBody = {
  eiInstanceId?: string(name='EiInstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateEaisEiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEaisEiResponseBody(name='body'),
}

async function createEaisEiWithOptions(request: CreateEaisEiRequest, runtime: Util.RuntimeOptions): CreateEaisEiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEaisEi',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEaisEi(request: CreateEaisEiRequest): CreateEaisEiResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEaisEiWithOptions(request, runtime);
}

model DeleteEaiRequest {
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId', example='eais-sz8t15a7gt7z7j7i****'),
  force?: boolean(name='Force', example='false'),
  regionId?: string(name='RegionId', example='cn-shenzhen'),
}

model DeleteEaiResponseBody = {
  requestId?: string(name='RequestId', example='F23AEEC7-4D98-4657-A104-0269270*****'),
}

model DeleteEaiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEaiResponseBody(name='body'),
}

async function deleteEaiWithOptions(request: DeleteEaiRequest, runtime: Util.RuntimeOptions): DeleteEaiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.elasticAcceleratedInstanceId)) {
    query['ElasticAcceleratedInstanceId'] = request.elasticAcceleratedInstanceId;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEai',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEai(request: DeleteEaiRequest): DeleteEaiResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEaiWithOptions(request, runtime);
}

model DeleteEaiAllRequest {
  clientInstanceId?: string(name='ClientInstanceId', example='i-bp1fvhi60e1zizsp****'),
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId', example='eais-hza1ahi0uuw0re33****'),
  regionId?: string(name='RegionId', example='cn-shenzhen'),
}

model DeleteEaiAllResponseBody = {
  requestId?: string(name='RequestId', example='AD4EA714-A35B-4710-BF92-8275BCDDB69F'),
}

model DeleteEaiAllResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEaiAllResponseBody(name='body'),
}

async function deleteEaiAllWithOptions(request: DeleteEaiAllRequest, runtime: Util.RuntimeOptions): DeleteEaiAllResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientInstanceId)) {
    query['ClientInstanceId'] = request.clientInstanceId;
  }
  if (!Util.isUnset(request.elasticAcceleratedInstanceId)) {
    query['ElasticAcceleratedInstanceId'] = request.elasticAcceleratedInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEaiAll',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEaiAll(request: DeleteEaiAllRequest): DeleteEaiAllResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEaiAllWithOptions(request, runtime);
}

model DeleteEaisEiRequest {
  eiInstanceId?: string(name='EiInstanceId'),
  force?: boolean(name='Force'),
  regionId?: string(name='RegionId'),
}

model DeleteEaisEiResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteEaisEiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEaisEiResponseBody(name='body'),
}

async function deleteEaisEiWithOptions(request: DeleteEaisEiRequest, runtime: Util.RuntimeOptions): DeleteEaisEiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eiInstanceId)) {
    query['EiInstanceId'] = request.eiInstanceId;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEaisEi',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEaisEi(request: DeleteEaisEiRequest): DeleteEaisEiResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEaisEiWithOptions(request, runtime);
}

model DescribeEaisRequest {
  elasticAcceleratedInstanceIds?: string(name='ElasticAcceleratedInstanceIds', example='["eais-id1", "eais-id2"]'),
  instanceName?: string(name='InstanceName', example='eais*'),
  instanceType?: string(name='InstanceType', example='eais.ei-a6.2xlarge'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='200'),
  regionId?: string(name='RegionId', example='cn-shenzhen'),
  resourceGroupId?: string(name='ResourceGroupId'),
  status?: string(name='Status', example='InUse'),
}

model DescribeEaisResponseBody = {
  instances?: {
    instance?: [ 
    {
      category?: string(name='Category', example='jupyter'),
      clientInstanceId?: string(name='ClientInstanceId', example='i-wz93g6pyat2g****'),
      clientInstanceName?: string(name='ClientInstanceName', example='test1'),
      clientInstanceType?: string(name='ClientInstanceType', example='ecs.g5ne.large'),
      creationTime?: string(name='CreationTime', example='2020-11-11T03:11Z'),
      description?: string(name='Description', example='testDescription'),
      elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId', example='eais-sz8t15a7gt7****'),
      instanceName?: string(name='InstanceName', example='testName'),
      instanceType?: string(name='InstanceType', example='eais.ei-a6.2xlarge'),
      jupyterUrl?: string(name='JupyterUrl', example='http://121.41.**.24:8888'),
      regionId?: string(name='RegionId', example='cn-shenzhen'),
      resourceGroupId?: string(name='ResourceGroupId'),
      securityGroupId?: string(name='SecurityGroupId', example='sg-bp1gppir818lx4******'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status', example='InUse'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', example='TestKey'),
          tagValue?: string(name='TagValue', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      vSwitchId?: string(name='VSwitchId', example='vsw-bp1sd131hfmd76r******'),
      zoneId?: string(name='ZoneId', example='cn-shenzhen-e'),
    }
  ](name='Instance')
  }(name='Instances'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='1E23D585-BBD8-436F-9615-54CACD6*****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeEaisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEaisResponseBody(name='body'),
}

async function describeEaisWithOptions(request: DescribeEaisRequest, runtime: Util.RuntimeOptions): DescribeEaisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.elasticAcceleratedInstanceIds)) {
    query['ElasticAcceleratedInstanceIds'] = request.elasticAcceleratedInstanceIds;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEais',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEais(request: DescribeEaisRequest): DescribeEaisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEaisWithOptions(request, runtime);
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint', example='eais.cn-shenzhen.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-shenzhen'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId', example='F5FEB9AA-C108-577C-AB3D-D13524AF1840'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(runtime);
}

model DetachEaiRequest {
  elasticAcceleratedInstanceId?: string(name='ElasticAcceleratedInstanceId', example='eais-sz8t15a7gt7z7j7i****'),
  regionId?: string(name='RegionId', example='cn-shenzhen'),
}

model DetachEaiResponseBody = {
  requestId?: string(name='RequestId', example='04DEB304-2436-4CB9-BB63-468BCEA03D9D'),
}

model DetachEaiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachEaiResponseBody(name='body'),
}

async function detachEaiWithOptions(request: DetachEaiRequest, runtime: Util.RuntimeOptions): DetachEaiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.elasticAcceleratedInstanceId)) {
    query['ElasticAcceleratedInstanceId'] = request.elasticAcceleratedInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachEai',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachEai(request: DetachEaiRequest): DetachEaiResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachEaiWithOptions(request, runtime);
}

model DetachEaisEiRequest {
  eiInstanceId?: string(name='EiInstanceId'),
  regionId?: string(name='RegionId'),
}

model DetachEaisEiResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachEaisEiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachEaisEiResponseBody(name='body'),
}

async function detachEaisEiWithOptions(request: DetachEaisEiRequest, runtime: Util.RuntimeOptions): DetachEaisEiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eiInstanceId)) {
    query['EiInstanceId'] = request.eiInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachEaisEi',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachEaisEi(request: DetachEaisEiRequest): DetachEaisEiResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachEaisEiWithOptions(request, runtime);
}

model GetInstanceMetricsRequest {
  endTime?: string(name='EndTime', example='2022-11-22T16:30:00Z'),
  instanceId?: string(name='InstanceId', example='eais-hznzre6ffmz9num4****'),
  metricType?: string(name='MetricType', example='MemoryUsage'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime', example='2022-11-22T16:00:00Z'),
  timeStep?: string(name='TimeStep', example='5m'),
}

model GetInstanceMetricsResponseBody = {
  instanceId?: string(name='InstanceId', example='eais-bj8b53it29hfhj******'),
  podMetrics?: [ 
    {
      metrics?: [ 
        {
          time?: string(name='Time', example='1669107528450'),
          value?: string(name='Value', example='4.536552540058814'),
        }
      ](name='Metrics'),
      podId?: string(name='PodId', description='Pod ID。', example='eais-hznzre6ffmz9num4****-579b587ddf-9txr6'),
    }
  ](name='PodMetrics'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model GetInstanceMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceMetricsResponseBody(name='body'),
}

async function getInstanceMetricsWithOptions(request: GetInstanceMetricsRequest, runtime: Util.RuntimeOptions): GetInstanceMetricsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.metricType)) {
    query['MetricType'] = request.metricType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.timeStep)) {
    query['TimeStep'] = request.timeStep;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceMetrics',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstanceMetrics(request: GetInstanceMetricsRequest): GetInstanceMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceMetricsWithOptions(request, runtime);
}

model StartEaisEiRequest {
  eiInstanceId?: string(name='EiInstanceId'),
  regionId?: string(name='RegionId'),
}

model StartEaisEiResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartEaisEiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartEaisEiResponseBody(name='body'),
}

async function startEaisEiWithOptions(request: StartEaisEiRequest, runtime: Util.RuntimeOptions): StartEaisEiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eiInstanceId)) {
    query['EiInstanceId'] = request.eiInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartEaisEi',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startEaisEi(request: StartEaisEiRequest): StartEaisEiResponse {
  var runtime = new Util.RuntimeOptions{};
  return startEaisEiWithOptions(request, runtime);
}

model StopEaisEiRequest {
  eiInstanceId?: string(name='EiInstanceId'),
  regionId?: string(name='RegionId'),
}

model StopEaisEiResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopEaisEiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopEaisEiResponseBody(name='body'),
}

async function stopEaisEiWithOptions(request: StopEaisEiRequest, runtime: Util.RuntimeOptions): StopEaisEiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eiInstanceId)) {
    query['EiInstanceId'] = request.eiInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopEaisEi',
    version = '2019-06-24',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopEaisEi(request: StopEaisEiRequest): StopEaisEiResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopEaisEiWithOptions(request, runtime);
}

