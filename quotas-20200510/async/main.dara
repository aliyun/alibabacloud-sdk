/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'quotas';
  @version = '2020-05-10';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateQuotaAlarmRequest {
  alarmName: string(name='AlarmName', position='Body'),
  productCode: string(name='ProductCode', position='Body'),
  quotaActionCode: string(name='QuotaActionCode', position='Body'),
  quotaDimensions?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='QuotaDimensions', position='Body'),
  threshold?: float(name='Threshold', minimum=1, position='Body'),
  thresholdPercent?: float(name='ThresholdPercent', minimum=50, maximum=100, position='Body'),
  thresholdType?: string(name='ThresholdType', position='Body'),
  webHook?: string(name='WebHook', position='Body'),
}

model CreateQuotaAlarmResponseBody = {
  alarmId?: string(name='AlarmId'),
  requestId?: string(name='RequestId'),
}

model CreateQuotaAlarmResponse = {
  headers: map[string]string(name='headers'),
  body: CreateQuotaAlarmResponseBody(name='body'),
}

async function createQuotaAlarm(request: CreateQuotaAlarmRequest): CreateQuotaAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateQuotaAlarm', 'POST', '/', 'json', true, 'form', request);
}

model CreateQuotaApplicationRequest {
  auditMode?: string(name='AuditMode', position='Body'),
  desireValue: float(name='DesireValue', position='Body'),
  dimensions?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Dimensions', position='Body'),
  noticeType?: int32(name='NoticeType', position='Body'),
  productCode: string(name='ProductCode', position='Body'),
  quotaActionCode: string(name='QuotaActionCode', position='Body'),
  quotaCategory?: string(name='QuotaCategory', position='Body'),
  reason: string(name='Reason', position='Body'),
}

model CreateQuotaApplicationResponseBody = {
  applicationId?: string(name='ApplicationId'),
  applyTime?: string(name='ApplyTime'),
  approveValue?: float(name='ApproveValue'),
  auditReason?: string(name='AuditReason'),
  desireValue?: int32(name='DesireValue'),
  dimension?: map[string]any(name='Dimension'),
  effectiveTime?: string(name='EffectiveTime'),
  expireTime?: string(name='ExpireTime'),
  noticeType?: long(name='NoticeType'),
  productCode?: string(name='ProductCode'),
  quotaActionCode?: string(name='QuotaActionCode'),
  quotaArn?: string(name='QuotaArn'),
  quotaDescription?: string(name='QuotaDescription'),
  quotaName?: string(name='QuotaName'),
  quotaUnit?: string(name='QuotaUnit'),
  reason?: string(name='Reason'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model CreateQuotaApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateQuotaApplicationResponseBody(name='body'),
}

async function createQuotaApplication(request: CreateQuotaApplicationRequest): CreateQuotaApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateQuotaApplication', 'POST', '/', 'json', true, 'form', request);
}

model DeleteQuotaAlarmRequest {
  alarmId: string(name='AlarmId', position='Body'),
}

model DeleteQuotaAlarmResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteQuotaAlarmResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteQuotaAlarmResponseBody(name='body'),
}

async function deleteQuotaAlarm(request: DeleteQuotaAlarmRequest): DeleteQuotaAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteQuotaAlarm', 'POST', '/', 'json', true, 'form', request);
}

model GetProductQuotaRequest {
  dimensions?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Dimensions', position='Body'),
  productCode: string(name='ProductCode', position='Body'),
  quotaActionCode: string(name='QuotaActionCode', position='Body'),
}

model GetProductQuotaResponseBody = {
  quota?: {
    adjustable?: boolean(name='Adjustable'),
    applicableRange?: [ float ](name='ApplicableRange'),
    applicableType?: string(name='ApplicableType'),
    consumable?: boolean(name='Consumable'),
    dimensions?: map[string]any(name='Dimensions'),
    period?: {
      periodUnit?: string(name='PeriodUnit'),
      periodValue?: int32(name='PeriodValue'),
    }(name='Period'),
    productCode?: string(name='ProductCode'),
    quotaActionCode?: string(name='QuotaActionCode'),
    quotaArn?: string(name='QuotaArn'),
    quotaDescription?: string(name='QuotaDescription'),
    quotaItems?: [ 
      {
        quota?: string(name='Quota'),
        quotaUnit?: string(name='QuotaUnit'),
        type?: string(name='Type'),
        usage?: string(name='Usage'),
      }
    ](name='QuotaItems'),
    quotaName?: string(name='QuotaName'),
    quotaType?: string(name='QuotaType'),
    quotaUnit?: string(name='QuotaUnit'),
    totalQuota?: float(name='TotalQuota'),
    totalUsage?: float(name='TotalUsage'),
    unadjustableDetail?: string(name='UnadjustableDetail'),
  }(name='Quota'),
  requestId?: string(name='RequestId'),
}

model GetProductQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: GetProductQuotaResponseBody(name='body'),
}

async function getProductQuota(request: GetProductQuotaRequest): GetProductQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProductQuota', 'POST', '/', 'json', true, 'form', request);
}

model GetProductQuotaDimensionRequest {
  dependentDimensions?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='DependentDimensions', position='Body'),
  dimensionKey?: string(name='DimensionKey', position='Body'),
  productCode: string(name='ProductCode', position='Body'),
}

model GetProductQuotaDimensionResponseBody = {
  quotaDimension?: {
    dependentDimensions?: [ string ](name='DependentDimensions'),
    dimensionKey?: string(name='DimensionKey'),
    dimensionValueDetail?: [ 
      {
        name?: string(name='Name'),
        value?: string(name='Value'),
      }
    ](name='DimensionValueDetail'),
    dimensionValues?: [ string ](name='DimensionValues'),
    name?: string(name='Name'),
  }(name='QuotaDimension'),
  requestId?: string(name='RequestId'),
}

model GetProductQuotaDimensionResponse = {
  headers: map[string]string(name='headers'),
  body: GetProductQuotaDimensionResponseBody(name='body'),
}

async function getProductQuotaDimension(request: GetProductQuotaDimensionRequest): GetProductQuotaDimensionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProductQuotaDimension', 'POST', '/', 'json', true, 'form', request);
}

model GetQuotaAlarmRequest {
  alarmId?: string(name='AlarmId', position='Body'),
}

model GetQuotaAlarmResponseBody = {
  quotaAlarm?: {
    alarmId?: string(name='AlarmId'),
    alarmName?: string(name='AlarmName'),
    createTime?: string(name='CreateTime'),
    notifyChannels?: [ string ](name='NotifyChannels'),
    notifyTarget?: string(name='NotifyTarget'),
    productCode?: string(name='ProductCode'),
    quotaActionCode?: string(name='QuotaActionCode'),
    quotaDimension?: map[string]any(name='QuotaDimension'),
    quotaUsage?: float(name='QuotaUsage'),
    quotaValue?: float(name='QuotaValue'),
    threshold?: float(name='Threshold'),
    thresholdPercent?: float(name='ThresholdPercent'),
    thresholdType?: string(name='ThresholdType'),
  }(name='QuotaAlarm'),
  requestId?: string(name='RequestId'),
}

model GetQuotaAlarmResponse = {
  headers: map[string]string(name='headers'),
  body: GetQuotaAlarmResponseBody(name='body'),
}

async function getQuotaAlarm(request: GetQuotaAlarmRequest): GetQuotaAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQuotaAlarm', 'POST', '/', 'json', true, 'form', request);
}

model GetQuotaApplicationRequest {
  applicationId?: string(name='ApplicationId', position='Body'),
}

model GetQuotaApplicationResponseBody = {
  quotaApplication?: {
    applicationId?: string(name='ApplicationId'),
    applyTime?: string(name='ApplyTime'),
    approveValue?: float(name='ApproveValue'),
    auditReason?: string(name='AuditReason'),
    desireValue?: int32(name='DesireValue'),
    dimension?: map[string]any(name='Dimension'),
    effectiveTime?: string(name='EffectiveTime'),
    expireTime?: string(name='ExpireTime'),
    noticeType?: long(name='NoticeType'),
    productCode?: string(name='ProductCode'),
    quotaActionCode?: string(name='QuotaActionCode'),
    quotaArn?: string(name='QuotaArn'),
    quotaDescription?: string(name='QuotaDescription'),
    quotaName?: string(name='QuotaName'),
    quotaUnit?: string(name='QuotaUnit'),
    reason?: string(name='Reason'),
    status?: string(name='Status'),
  }(name='QuotaApplication'),
  requestId?: string(name='RequestId'),
}

model GetQuotaApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: GetQuotaApplicationResponseBody(name='body'),
}

async function getQuotaApplication(request: GetQuotaApplicationRequest): GetQuotaApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQuotaApplication', 'POST', '/', 'json', true, 'form', request);
}

model ListAlarmHistoriesRequest {
  endTime?: long(name='EndTime', position='Body'),
  keyword?: string(name='Keyword', position='Body'),
  maxResults?: int32(name='MaxResults', position='Body'),
  nextToken?: string(name='NextToken', position='Body'),
  productCode?: string(name='ProductCode', position='Body'),
  startTime?: long(name='StartTime', position='Body'),
}

model ListAlarmHistoriesResponseBody = {
  alarmHistories?: [ 
    {
      alarmName?: string(name='AlarmName'),
      createTime?: string(name='CreateTime'),
      notifyChannels?: [ string ](name='NotifyChannels'),
      notifyTarget?: string(name='NotifyTarget'),
      productCode?: string(name='ProductCode'),
      quotaActionCode?: string(name='QuotaActionCode'),
      quotaUsage?: float(name='QuotaUsage'),
      threshold?: float(name='Threshold'),
      thresholdPercent?: float(name='ThresholdPercent'),
    }
  ](name='AlarmHistories'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListAlarmHistoriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAlarmHistoriesResponseBody(name='body'),
}

async function listAlarmHistories(request: ListAlarmHistoriesRequest): ListAlarmHistoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAlarmHistories', 'POST', '/', 'json', true, 'form', request);
}

model ListDependentQuotasRequest {
  productCode: string(name='ProductCode', position='Body'),
  quotaActionCode: string(name='QuotaActionCode', position='Body'),
}

model ListDependentQuotasResponseBody = {
  quotas?: [ 
    {
      dimensions?: [ 
        {
          dependentDimension?: [ string ](name='DependentDimension'),
          dimensionKey?: string(name='DimensionKey'),
          dimensionValues?: [ string ](name='DimensionValues'),
        }
      ](name='Dimensions'),
      productCode?: string(name='ProductCode'),
      quotaActionCode?: string(name='QuotaActionCode'),
      scale?: float(name='Scale'),
    }
  ](name='Quotas'),
  requestId?: string(name='RequestId'),
}

model ListDependentQuotasResponse = {
  headers: map[string]string(name='headers'),
  body: ListDependentQuotasResponseBody(name='body'),
}

async function listDependentQuotas(request: ListDependentQuotasRequest): ListDependentQuotasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDependentQuotas', 'POST', '/', 'json', true, 'form', request);
}

model ListProductDimensionGroupsRequest {
  maxResults?: int32(name='MaxResults', maximum=200, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  productCode: string(name='ProductCode', position='Query'),
}

model ListProductDimensionGroupsResponseBody = {
  dimensionGroups?: [ 
    {
      dimensionKeys?: [ string ](name='DimensionKeys'),
      groupCode?: string(name='GroupCode'),
      groupName?: string(name='GroupName'),
      productCode?: string(name='ProductCode'),
    }
  ](name='DimensionGroups'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListProductDimensionGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductDimensionGroupsResponseBody(name='body'),
}

async function listProductDimensionGroups(request: ListProductDimensionGroupsRequest): ListProductDimensionGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProductDimensionGroups', 'GET', '/', 'json', false, 'json', request);
}

model ListProductQuotaDimensionsRequest {
  maxResults?: int32(name='MaxResults', maximum=200, position='Body'),
  nextToken?: string(name='NextToken', position='Body'),
  productCode: string(name='ProductCode', position='Body'),
  quotaCategory?: string(name='QuotaCategory', position='Body'),
}

model ListProductQuotaDimensionsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  quotaDimensions?: [ 
    {
      dependentDimensions?: [ string ](name='DependentDimensions'),
      dimensionKey?: string(name='DimensionKey'),
      dimensionValueDetail?: [ 
        {
          name?: string(name='Name'),
          value?: string(name='Value'),
        }
      ](name='DimensionValueDetail'),
      dimensionValues?: [ string ](name='DimensionValues'),
      name?: string(name='Name'),
      requisite?: boolean(name='Requisite'),
    }
  ](name='QuotaDimensions'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListProductQuotaDimensionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductQuotaDimensionsResponseBody(name='body'),
}

async function listProductQuotaDimensions(request: ListProductQuotaDimensionsRequest): ListProductQuotaDimensionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProductQuotaDimensions', 'POST', '/', 'json', true, 'form', request);
}

model ListProductQuotasRequest {
  dimensions?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Dimensions', position='Body'),
  groupCode?: string(name='GroupCode', position='Body'),
  keyWord?: string(name='KeyWord', position='Body'),
  maxResults?: int32(name='MaxResults', position='Body'),
  nextToken?: string(name='NextToken', position='Body'),
  productCode: string(name='ProductCode', position='Body'),
  quotaActionCode?: string(name='QuotaActionCode', position='Body'),
  quotaCategory?: string(name='QuotaCategory', position='Body'),
  sortField?: string(name='SortField', position='Body'),
  sortOrder?: string(name='SortOrder', position='Body'),
}

model ListProductQuotasResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  quotas?: [ 
    {
      adjustable?: boolean(name='Adjustable'),
      applicableRange?: [ float ](name='ApplicableRange'),
      applicableType?: string(name='ApplicableType'),
      consumable?: boolean(name='Consumable'),
      dimensions?: map[string]any(name='Dimensions'),
      period?: {
        periodUnit?: string(name='PeriodUnit'),
        periodValue?: int32(name='PeriodValue'),
      }(name='Period'),
      productCode?: string(name='ProductCode'),
      quotaActionCode?: string(name='QuotaActionCode'),
      quotaArn?: string(name='QuotaArn'),
      quotaDescription?: string(name='QuotaDescription'),
      quotaItems?: [ 
        {
          quota?: string(name='Quota'),
          quotaUnit?: string(name='QuotaUnit'),
          type?: string(name='Type'),
          usage?: string(name='Usage'),
        }
      ](name='QuotaItems'),
      quotaName?: string(name='QuotaName'),
      quotaType?: string(name='QuotaType'),
      quotaUnit?: string(name='QuotaUnit'),
      totalQuota?: float(name='TotalQuota'),
      totalUsage?: float(name='TotalUsage'),
      unadjustableDetail?: string(name='UnadjustableDetail'),
    }
  ](name='Quotas'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListProductQuotasResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductQuotasResponseBody(name='body'),
}

async function listProductQuotas(request: ListProductQuotasRequest): ListProductQuotasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProductQuotas', 'POST', '/', 'json', true, 'form', request);
}

model ListProductsRequest {
  maxResults?: int32(name='MaxResults', maximum=200, position='Body'),
  nextToken?: string(name='NextToken', position='Body'),
}

model ListProductsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  productInfo?: [ 
    {
      commonQuotaSupport?: string(name='CommonQuotaSupport', description='通用配额是否支持'),
      dynamic?: boolean(name='Dynamic'),
      flowControlSupport?: string(name='FlowControlSupport', description='是否支持流程'),
      productCode?: string(name='ProductCode'),
      productName?: string(name='ProductName'),
      productNameEn?: string(name='ProductNameEn'),
      secondCategoryId?: long(name='SecondCategoryId'),
      secondCategoryName?: string(name='SecondCategoryName'),
      secondCategoryNameEn?: string(name='SecondCategoryNameEn'),
    }
  ](name='ProductInfo'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListProductsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductsResponseBody(name='body'),
}

async function listProducts(request: ListProductsRequest): ListProductsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProducts', 'POST', '/', 'json', true, 'form', request);
}

model ListQuotaAlarmsRequest {
  alarmName?: string(name='AlarmName', position='Body'),
  maxResults?: int32(name='MaxResults', maximum=200, position='Body'),
  nextToken?: string(name='NextToken', position='Body'),
  productCode?: string(name='ProductCode', position='Body'),
  quotaActionCode?: string(name='QuotaActionCode', position='Body'),
  quotaDimensions?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='QuotaDimensions', position='Body'),
}

model ListQuotaAlarmsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  quotaAlarms?: [ 
    {
      alarmId?: string(name='AlarmId'),
      alarmName?: string(name='AlarmName'),
      createTime?: string(name='CreateTime'),
      exceedThreshold?: boolean(name='ExceedThreshold'),
      notifyChannels?: [ string ](name='NotifyChannels'),
      notifyTarget?: string(name='NotifyTarget'),
      productCode?: string(name='ProductCode'),
      quotaActionCode?: string(name='QuotaActionCode'),
      quotaDimensions?: map[string]any(name='QuotaDimensions'),
      quotaUsage?: float(name='QuotaUsage'),
      quotaValue?: float(name='QuotaValue'),
      threshold?: float(name='Threshold'),
      thresholdPercent?: float(name='ThresholdPercent'),
      thresholdType?: string(name='ThresholdType'),
      webHook?: string(name='WebHook'),
    }
  ](name='QuotaAlarms'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListQuotaAlarmsResponse = {
  headers: map[string]string(name='headers'),
  body: ListQuotaAlarmsResponseBody(name='body'),
}

async function listQuotaAlarms(request: ListQuotaAlarmsRequest): ListQuotaAlarmsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListQuotaAlarms', 'POST', '/', 'json', true, 'form', request);
}

model ListQuotaApplicationsRequest {
  dimensions?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Dimensions', position='Body'),
  keyWord?: string(name='KeyWord', position='Body'),
  maxResults?: int32(name='MaxResults', maximum=200, position='Body'),
  nextToken?: string(name='NextToken', position='Body'),
  productCode: string(name='ProductCode', position='Body'),
  quotaActionCode?: string(name='QuotaActionCode', position='Body'),
  quotaCategory?: string(name='QuotaCategory', position='Body'),
  status?: string(name='Status', position='Body'),
}

model ListQuotaApplicationsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  quotaApplications?: [ 
    {
      applicationId?: string(name='ApplicationId'),
      applyTime?: string(name='ApplyTime'),
      approveValue?: float(name='ApproveValue'),
      auditReason?: string(name='AuditReason'),
      comment?: string(name='Comment'),
      desireValue?: float(name='DesireValue'),
      dimension?: map[string]any(name='Dimension'),
      effectiveTime?: string(name='EffectiveTime'),
      expireTime?: string(name='ExpireTime'),
      noticeType?: int32(name='NoticeType'),
      period?: {
        periodUnit?: string(name='PeriodUnit'),
        periodValue?: long(name='PeriodValue'),
      }(name='Period'),
      productCode?: string(name='ProductCode'),
      quotaActionCode?: string(name='QuotaActionCode'),
      quotaArn?: string(name='QuotaArn'),
      quotaDescription?: string(name='QuotaDescription'),
      quotaName?: string(name='QuotaName'),
      quotaUnit?: string(name='QuotaUnit'),
      reason?: string(name='Reason'),
      status?: string(name='Status'),
    }
  ](name='QuotaApplications'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListQuotaApplicationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListQuotaApplicationsResponseBody(name='body'),
}

async function listQuotaApplications(request: ListQuotaApplicationsRequest): ListQuotaApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListQuotaApplications', 'POST', '/', 'json', true, 'form', request);
}

model UpdateQuotaAlarmRequest {
  alarmId: string(name='AlarmId', position='Body'),
  alarmName: string(name='AlarmName', position='Body'),
  threshold?: float(name='Threshold', minimum=1, position='Body'),
  thresholdPercent?: float(name='ThresholdPercent', minimum=50, maximum=100, position='Body'),
  thresholdType?: string(name='ThresholdType', position='Body'),
  webHook?: string(name='WebHook', position='Body'),
}

model UpdateQuotaAlarmResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateQuotaAlarmResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateQuotaAlarmResponseBody(name='body'),
}

async function updateQuotaAlarm(request: UpdateQuotaAlarmRequest): UpdateQuotaAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateQuotaAlarm', 'POST', '/', 'json', true, 'form', request);
}

