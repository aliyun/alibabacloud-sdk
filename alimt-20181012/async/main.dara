/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'alimt';
  @version = '2018-10-12';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'mt.cn-hangzhou.aliyuncs.com',
    ap-northeast-1 = 'mt.aliyuncs.com',
    ap-northeast-2-pop = 'mt.aliyuncs.com',
    ap-south-1 = 'mt.aliyuncs.com',
    ap-southeast-1 = 'mt.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'mt.aliyuncs.com',
    ap-southeast-3 = 'mt.aliyuncs.com',
    ap-southeast-5 = 'mt.aliyuncs.com',
    cn-beijing = 'mt.aliyuncs.com',
    cn-beijing-finance-1 = 'mt.aliyuncs.com',
    cn-beijing-finance-pop = 'mt.aliyuncs.com',
    cn-beijing-gov-1 = 'mt.aliyuncs.com',
    cn-beijing-nu16-b01 = 'mt.aliyuncs.com',
    cn-chengdu = 'mt.aliyuncs.com',
    cn-edge-1 = 'mt.aliyuncs.com',
    cn-fujian = 'mt.aliyuncs.com',
    cn-haidian-cm12-c01 = 'mt.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'mt.aliyuncs.com',
    cn-hangzhou-finance = 'mt.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'mt.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'mt.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'mt.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'mt.aliyuncs.com',
    cn-hangzhou-test-306 = 'mt.aliyuncs.com',
    cn-hongkong = 'mt.aliyuncs.com',
    cn-hongkong-finance-pop = 'mt.aliyuncs.com',
    cn-huhehaote = 'mt.aliyuncs.com',
    cn-north-2-gov-1 = 'mt.aliyuncs.com',
    cn-qingdao = 'mt.aliyuncs.com',
    cn-qingdao-nebula = 'mt.aliyuncs.com',
    cn-shanghai = 'mt.aliyuncs.com',
    cn-shanghai-et15-b01 = 'mt.aliyuncs.com',
    cn-shanghai-et2-b01 = 'mt.aliyuncs.com',
    cn-shanghai-finance-1 = 'mt.aliyuncs.com',
    cn-shanghai-inner = 'mt.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'mt.aliyuncs.com',
    cn-shenzhen = 'mt.aliyuncs.com',
    cn-shenzhen-finance-1 = 'mt.aliyuncs.com',
    cn-shenzhen-inner = 'mt.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'mt.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'mt.aliyuncs.com',
    cn-wuhan = 'mt.aliyuncs.com',
    cn-yushanfang = 'mt.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'mt.aliyuncs.com',
    cn-zhangjiakou = 'mt.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'mt.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'mt.aliyuncs.com',
    eu-central-1 = 'mt.aliyuncs.com',
    eu-west-1 = 'mt.aliyuncs.com',
    eu-west-1-oxs = 'mt.aliyuncs.com',
    me-east-1 = 'mt.aliyuncs.com',
    rus-west-1-pop = 'mt.aliyuncs.com',
    us-east-1 = 'mt.aliyuncs.com',
    us-west-1 = 'mt.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreateAsyncTranslateRequest {
  apiType: string(name='ApiType', example='translate_standard', position='Body'),
  formatType: string(name='FormatType', example='text', position='Body'),
  scene: string(name='Scene', example='general', position='Body'),
  sourceLanguage: string(name='SourceLanguage', example='en', position='Body'),
  sourceText: string(name='SourceText', example='Opinion: We have finally gotten some relief at the pump. But it may not last long', position='Body'),
  targetLanguage: string(name='TargetLanguage', example='zh', position='Body'),
}

model CreateAsyncTranslateResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    jobId: string(name='JobId', example='98bbb007-71bb-448b-bab0-2695ce8f8599'),
    status: string(name='Status', example='ready'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='DC2DCCC9-C3DF-4F59-8D8E-78185729F16D'),
}

model CreateAsyncTranslateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAsyncTranslateResponseBody(name='body'),
}

async function createAsyncTranslate(request: CreateAsyncTranslateRequest): CreateAsyncTranslateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAsyncTranslate', 'POST', '/', 'json', true, 'form', request);
}

model CreateImageTranslateTaskRequest {
  clientToken?: string(name='ClientToken', example='1', position='Body'),
  extra?: string(name='Extra', example='{"have_ocr":"false","without_text":"false","have_psd":"true","ignore_entity":"false"}', position='Body'),
  sourceLanguage: string(name='SourceLanguage', example='zh', position='Body'),
  targetLanguage: string(name='TargetLanguage', example='en', position='Body'),
  urlList: string(name='UrlList', example='http://xxx,http://yyy', position='Body'),
}

model CreateImageTranslateTaskResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    taskId?: string(name='TaskId', example='A41F6E25-8520-4AF0-90EF-111111'),
  }(name='Data'),
  message?: string(name='Message', example='ok'),
  requestId?: string(name='RequestId', example='A41F6E25-8520-4AF0-90EF-AF7E32840108'),
}

model CreateImageTranslateTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateImageTranslateTaskResponseBody(name='body'),
}

async function createImageTranslateTask(request: CreateImageTranslateTaskRequest): CreateImageTranslateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateImageTranslateTask', 'POST', '/', 'json', true, 'form', request);
}

model GetAsyncTranslateRequest {
  jobId: string(name='JobId', example='77056ab7-7be1-4c2a-91a1-f20f63894048', position='Body'),
}

model GetAsyncTranslateResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    detectedLanguage?: string(name='DetectedLanguage', example='zh'),
    status?: string(name='Status', example='ready'),
    translatedText?: string(name='TranslatedText', example='hello'),
    wordCount?: string(name='WordCount', example='2'),
  }(name='Data'),
  message?: string(name='Message', example='ok'),
  requestId?: string(name='RequestId', example='DC2DCCC9-C3DF-4F59-8D8E-78185729F16D'),
}

model GetAsyncTranslateResponse = {
  headers: map[string]string(name='headers'),
  body: GetAsyncTranslateResponseBody(name='body'),
}

async function getAsyncTranslate(request: GetAsyncTranslateRequest): GetAsyncTranslateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAsyncTranslate', 'POST', '/', 'json', true, 'form', request);
}

model GetBatchTranslateRequest {
  apiType: string(name='ApiType', example='translate_standard', position='Body'),
  formatType: string(name='FormatType', example='text', position='Body'),
  scene: string(name='Scene', example='general', position='Body'),
  sourceLanguage: string(name='SourceLanguage', example='en', position='Body'),
  sourceText: string(name='SourceText', example='{"11":"hello boy","12":"go home","13":"we can"}', position='Body'),
  targetLanguage: string(name='TargetLanguage', example='zh', position='Body'),
}

model GetBatchTranslateResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='86D18195-D89C-4C8C-9DC4-5FCE789CE6D5'),
  translatedList?: [  map[string]any ](name='TranslatedList'),
}

model GetBatchTranslateResponse = {
  headers: map[string]string(name='headers'),
  body: GetBatchTranslateResponseBody(name='body'),
}

async function getBatchTranslate(request: GetBatchTranslateRequest): GetBatchTranslateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBatchTranslate', 'POST', '/', 'json', true, 'form', request);
}

model GetDetectLanguageRequest {
  sourceText: string(name='SourceText', position='Body'),
}

model GetDetectLanguageResponseBody = {
  detectedLanguage?: string(name='DetectedLanguage', example='zh'),
  requestId?: string(name='RequestId', example='0C5EC1EC-1A06-4D60-97E6-4D41350945E4'),
}

model GetDetectLanguageResponse = {
  headers: map[string]string(name='headers'),
  body: GetDetectLanguageResponseBody(name='body'),
}

async function getDetectLanguage(request: GetDetectLanguageRequest): GetDetectLanguageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDetectLanguage', 'POST', '/', 'json', true, 'form', request);
}

model GetDocTranslateTaskRequest {
  taskId: string(name='TaskId', example='0586df512c8b4bb382d7d9a6a01b5854', position='Query'),
}

model GetDocTranslateTaskResponseBody = {
  pageCount?: int32(name='PageCount', example='20'),
  requestId?: string(name='RequestId', example='12952E92-FDF3-4D3C-88E3-242D72BA7150'),
  status?: string(name='Status', example='translated'),
  taskId?: string(name='TaskId', example='0586df512c8b4bb382d7d9a6a01b5854'),
  translateErrorCode?: string(name='TranslateErrorCode', example='Error'),
  translateErrorMessage?: string(name='TranslateErrorMessage', example='Fail to get the page number of document.'),
  translateFileUrl?: string(name='TranslateFileUrl', example='http://translateFileUrl'),
}

model GetDocTranslateTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetDocTranslateTaskResponseBody(name='body'),
}

async function getDocTranslateTask(request: GetDocTranslateTaskRequest): GetDocTranslateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDocTranslateTask', 'GET', '/', 'json', false, 'json', request);
}

model GetImageDiagnoseRequest {
  extra?: string(name='Extra', example='{   "product_id": "1",   "platform": "ae" }', position='Body'),
  url: string(name='Url', example='http://xxxxx.oss-cn-shenzhen.aliyuncs.com/jd/41209/xxxxx.jpg', position='Body'),
}

model GetImageDiagnoseResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    language?: string(name='Language', example='zh'),
  }(name='Data'),
  message?: string(name='Message', example='ok'),
  requestId?: string(name='RequestId', example='DC2DCCC9-C3DF-4F59-8D8E-78185729F16D'),
}

model GetImageDiagnoseResponse = {
  headers: map[string]string(name='headers'),
  body: GetImageDiagnoseResponseBody(name='body'),
}

async function getImageDiagnose(request: GetImageDiagnoseRequest): GetImageDiagnoseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetImageDiagnose', 'POST', '/', 'json', true, 'form', request);
}

model GetImageTranslateRequest {
  extra?: string(name='Extra', example='{"have_ocr": "false", "without_text":"true", "have_psd": "false", "ignore_entity": "false"}', position='Body'),
  sourceLanguage: string(name='SourceLanguage', example='zh', position='Body'),
  targetLanguage: string(name='TargetLanguage', example='en', position='Body'),
  url: string(name='Url', example='http://xxxxxxx.oss-cn-shenzhen.aliyuncs.com/xxxxxx.jpg', position='Body'),
}

model GetImageTranslateResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    orc?: string(name='Orc'),
    pictureEditor?: string(name='PictureEditor'),
    url?: string(name='Url', example='https://ae01.alicdn.com/kf/xxxxx.jpeg'),
  }(name='Data'),
  message?: string(name='Message', example='ok'),
  requestId?: string(name='RequestId', example='A41F6E25-8520-4AF0-90EF-AF7E32840108'),
}

model GetImageTranslateResponse = {
  headers: map[string]string(name='headers'),
  body: GetImageTranslateResponseBody(name='body'),
}

async function getImageTranslate(request: GetImageTranslateRequest): GetImageTranslateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetImageTranslate', 'POST', '/', 'json', true, 'form', request);
}

model GetImageTranslateTaskRequest {
  taskId: string(name='TaskId', example='xxxxxx', position='Body'),
}

model GetImageTranslateTaskResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    imageData?: string(name='ImageData', example='[{xxxxxx}]'),
  }(name='Data'),
  message?: string(name='Message', example='ok'),
  requestId?: string(name='RequestId', example='xxxxxxx'),
}

model GetImageTranslateTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetImageTranslateTaskResponseBody(name='body'),
}

async function getImageTranslateTask(request: GetImageTranslateTaskRequest): GetImageTranslateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetImageTranslateTask', 'POST', '/', 'json', true, 'form', request);
}

model GetTitleDiagnoseRequest {
  categoryId: string(name='CategoryId', example='123', position='Body'),
  extra?: string(name='Extra', example='{   "product_id": "1",   "platform": "ae" }', position='Body'),
  language: string(name='Language', example='zh', position='Body'),
  platform: string(name='Platform', example='ae', position='Body'),
  title: string(name='Title', example='Amroe Japan Comic Theme Uzumaki Naruto Namikaze Minato 3D Visual Cartoon 7 Color USB Touch', position='Body'),
}

model GetTitleDiagnoseResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    allUppercaseWords?: string(name='AllUppercaseWords', example='Boy'),
    containCoreClasses?: string(name='ContainCoreClasses', example='true'),
    disableWords?: string(name='DisableWords', example='baba'),
    duplicateWords?: string(name='DuplicateWords', example='hi'),
    languageQualityScore?: string(name='LanguageQualityScore', example='2'),
    noFirstUppercaseList?: string(name='NoFirstUppercaseList', example='no'),
    overLengthLimit?: string(name='OverLengthLimit', example='100'),
    totalScore?: string(name='TotalScore', example='3'),
    wordCount?: string(name='WordCount', example='10'),
    wordSpelledCorrectError?: string(name='WordSpelledCorrectError', example='ahk'),
  }(name='Data'),
  message?: string(name='Message', example='ok'),
  requestId?: string(name='RequestId', example='DC2DCCC9-C3DF-4F59-8D8E-78185729F16D'),
}

model GetTitleDiagnoseResponse = {
  headers: map[string]string(name='headers'),
  body: GetTitleDiagnoseResponseBody(name='body'),
}

async function getTitleDiagnose(request: GetTitleDiagnoseRequest): GetTitleDiagnoseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTitleDiagnose', 'POST', '/', 'json', true, 'form', request);
}

model GetTitleGenerateRequest {
  attributes?: string(name='Attributes', example='{2:"None",10:"Plastic"}', position='Body'),
  categoryId: string(name='CategoryId', example='127896018', position='Body'),
  extra?: string(name='Extra', example='{   "product_id": "1",   "platform": "ae" }', position='Body'),
  hotWords?: string(name='HotWords', example='None,Plastic', position='Body'),
  language: string(name='Language', example='en', position='Body'),
  platform: string(name='Platform', example='ae', position='Body'),
  title: string(name='Title', example='10pcs 80ml Kitchen Disposable', position='Body'),
}

model GetTitleGenerateResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    titles?: string(name='Titles', example='10pcs 80ml Kitchen Disposable Plastic Sauce Cup Pot Chutney Container'),
  }(name='Data'),
  message?: string(name='Message', example='ok'),
  requestId?: string(name='RequestId', example='DC2DCCC9-C3DF-4F59-8D8E-78185729F16D'),
}

model GetTitleGenerateResponse = {
  headers: map[string]string(name='headers'),
  body: GetTitleGenerateResponseBody(name='body'),
}

async function getTitleGenerate(request: GetTitleGenerateRequest): GetTitleGenerateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTitleGenerate', 'POST', '/', 'json', true, 'form', request);
}

model GetTitleIntelligenceRequest {
  catLevelThreeId: long(name='CatLevelThreeId', example='111', minimum=0, maximum=99999999999, position='Body'),
  catLevelTwoId: long(name='CatLevelTwoId', example='222', minimum=0, maximum=99999999999, position='Body'),
  extra?: string(name='Extra', example='{"product_id":"1212"}', position='Body'),
  keywords?: string(name='Keywords', example='hello,apple', position='Body'),
  platform: string(name='Platform', example='ae', position='Body'),
}

model GetTitleIntelligenceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    titles?: string(name='Titles', example='Custom Hello Kitty PVC Cartoon Apple for Home Garden Complete Apple Bath Shower'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='D70487B4-8891-4D24-BB64-8788E53671FB'),
}

model GetTitleIntelligenceResponse = {
  headers: map[string]string(name='headers'),
  body: GetTitleIntelligenceResponseBody(name='body'),
}

async function getTitleIntelligence(request: GetTitleIntelligenceRequest): GetTitleIntelligenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTitleIntelligence', 'POST', '/', 'json', true, 'form', request);
}

model GetTranslateImageBatchResultRequest {
  taskId: string(name='TaskId', example='EEA28E6D-4828-5031-BD8C-8FF1B3216842', position='Body'),
}

model GetTranslateImageBatchResultResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    result?: [ 
      {
        code?: int32(name='Code', example='200'),
        finalImageUrl?: string(name='FinalImageUrl', example='https://example.com/example.jpg'),
        inPaintingUrl?: string(name='InPaintingUrl', example='https://example.com/example.jpg'),
        message?: string(name='Message', example='OK'),
        sourceImageUrl?: string(name='SourceImageUrl', example='https://example.com/example.jpg'),
        success?: boolean(name='Success', example='true'),
        templateJson?: string(name='TemplateJson', example='{"TemplateJson": "Editor Template Json String	"}'),
      }
    ](name='Result'),
    status?: string(name='Status', example='finished'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='DACD263C-C068-5116-83EC-117245AA35CF'),
}

model GetTranslateImageBatchResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetTranslateImageBatchResultResponseBody(name='body'),
}

async function getTranslateImageBatchResult(request: GetTranslateImageBatchResultRequest): GetTranslateImageBatchResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTranslateImageBatchResult', 'POST', '/', 'json', true, 'form', request);
}

model GetTranslateReportRequest {
  apiName: string(name='ApiName', position='Query'),
  beginTime: string(name='BeginTime', example='2021-03-01 00:00:00', position='Query'),
  endTime: string(name='EndTime', example='2021-03-01 23:59:59', position='Query'),
  group: string(name='Group', position='Query'),
}

model GetTranslateReportResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='{"result":[{"time":"2021-10-21 00:00:00","total":100}]}'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='86D18195-D89C-4C8C-9DC4-5FCE789CE6D5'),
}

model GetTranslateReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetTranslateReportResponseBody(name='body'),
}

async function getTranslateReport(request: GetTranslateReportRequest): GetTranslateReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTranslateReport', 'POST', '/', 'json', false, 'json', request);
}

model OpenAlimtServiceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  type?: string(name='Type', example='id', position='Query'),
}

model OpenAlimtServiceResponseBody = {
  orderId?: string(name='OrderId', example='123456'),
  requestId?: string(name='RequestId', example='xxxx-xxxxx'),
}

model OpenAlimtServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenAlimtServiceResponseBody(name='body'),
}

async function openAlimtService(request: OpenAlimtServiceRequest): OpenAlimtServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenAlimtService', 'POST', '/', 'json', false, 'json', request);
}

model TranslateRequest {
  context?: string(name='Context', example='{\\"appName\\":\\"alynx\\"}', position='Query'),
  formatType: string(name='FormatType', example='text', position='Body'),
  scene: string(name='Scene', example='title', position='Body'),
  sourceLanguage: string(name='SourceLanguage', example='zh', position='Body'),
  sourceText: string(name='SourceText', position='Body'),
  targetLanguage: string(name='TargetLanguage', example='en', position='Body'),
}

model TranslateResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    detectedLanguage?: string(name='DetectedLanguage'),
    translated?: string(name='Translated', example='Hello'),
    wordCount?: string(name='WordCount', example='10'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='86D18195-D89C-4C8C-9DC4-5FCE789CE6D5'),
}

model TranslateResponse = {
  headers: map[string]string(name='headers'),
  body: TranslateResponseBody(name='body'),
}

async function translate(request: TranslateRequest): TranslateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Translate', 'POST', '/', 'json', true, 'form', request);
}

model TranslateECommerceRequest {
  context?: string(name='Context', example='context信息', position='Query'),
  formatType: string(name='FormatType', example='text', position='Body'),
  scene: string(name='Scene', example='social', position='Body'),
  sourceLanguage: string(name='SourceLanguage', example='en', position='Body'),
  sourceText: string(name='SourceText', example='Hello', position='Body'),
  targetLanguage: string(name='TargetLanguage', example='zh', position='Body'),
}

model TranslateECommerceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    translated?: string(name='Translated'),
    wordCount?: string(name='WordCount', example='10'),
  }(name='Data'),
  message?: string(name='Message', example='An error occurred while translating.'),
  requestId?: string(name='RequestId', example='CC93BB5C-EAB5-579B-AA44-F61528F48FF8'),
}

model TranslateECommerceResponse = {
  headers: map[string]string(name='headers'),
  body: TranslateECommerceResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function translateECommerce(request: TranslateECommerceRequest): TranslateECommerceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TranslateECommerce', 'POST', '/', 'json', true, 'form', request);
}

model TranslateGeneralRequest {
  context?: string(name='Context', example='{\\"appName\\":\\"alynx\\"}', position='Query'),
  formatType: string(name='FormatType', example='text', position='Body'),
  scene?: string(name='Scene', example='general', position='Body'),
  sourceLanguage: string(name='SourceLanguage', example='zh', position='Body'),
  sourceText: string(name='SourceText', position='Body'),
  targetLanguage: string(name='TargetLanguage', example='en', position='Body'),
}

model TranslateGeneralResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    detectedLanguage?: string(name='DetectedLanguage'),
    translated?: string(name='Translated', example='Hello'),
    wordCount?: string(name='WordCount', example='10'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='86D18195-D89C-4C8C-9DC4-5FCE789CE6D5'),
}

model TranslateGeneralResponse = {
  headers: map[string]string(name='headers'),
  body: TranslateGeneralResponseBody(name='body'),
}

async function translateGeneral(request: TranslateGeneralRequest): TranslateGeneralResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TranslateGeneral', 'POST', '/', 'json', true, 'form', request);
}

model TranslateImageRequest {
  ext?: string(name='Ext', example='{"needEditorData": "false", "ignoreEntityRecognize": "true"}', position='Body'),
  field?: string(name='Field', example='general', position='Body'),
  imageBase64?: string(name='ImageBase64', example='/9j/4...H/9k=', position='Body'),
  imageUrl?: string(name='ImageUrl', example='https://example.com/example.jpg', position='Body'),
  sourceLanguage?: string(name='SourceLanguage', example='zh', position='Body'),
  targetLanguage?: string(name='TargetLanguage', example='en', position='Body'),
}

model TranslateImageResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    finalImageUrl?: string(name='FinalImageUrl', example='https://example.com/example.jpg'),
    inPaintingUrl?: string(name='InPaintingUrl', example='https://example.com/example.jpg'),
    templateJson?: string(name='TemplateJson', example='Editor Template Json String'),
  }(name='Data'),
  message?: string(name='Message', example='Error Message'),
  requestId?: string(name='RequestId', example='D774D33D-F1CB-5A2C-A787-E0A2179239CE'),
}

model TranslateImageResponse = {
  headers: map[string]string(name='headers'),
  body: TranslateImageResponseBody(name='body'),
}

async function translateImage(request: TranslateImageRequest): TranslateImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TranslateImage', 'POST', '/', 'json', true, 'form', request);
}

model TranslateImageBatchRequest {
  customTaskId?: string(name='CustomTaskId', example='my_awesome_task_1', position='Body'),
  ext?: string(name='Ext', example='{"needEditorData": "false", "ignoreEntityRecognize": "true"}', position='Body'),
  field?: string(name='Field', example='general', position='Body'),
  imageUrls: string(name='ImageUrls', example='https://example.com/1.jpg,https://example.com/2.jpg,https://example.com/3.jpg', position='Body'),
  sourceLanguage: string(name='SourceLanguage', example='zh', position='Body'),
  targetLanguage: string(name='TargetLanguage', example='en', position='Body'),
}

model TranslateImageBatchResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    taskId?: string(name='TaskId', example='EEA28E6D-4828-5031-BD8C-8FF1B3216842'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='D774D33D-F1CB-5A2C-A787-E0A2179239CE'),
}

model TranslateImageBatchResponse = {
  headers: map[string]string(name='headers'),
  body: TranslateImageBatchResponseBody(name='body'),
}

async function translateImageBatch(request: TranslateImageBatchRequest): TranslateImageBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TranslateImageBatch', 'POST', '/', 'json', true, 'form', request);
}

