/**
 *
 */
import Util;
import OSS;
import RPC;
import OpenPlatform;
import OSSUtil;
import FileForm;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-hangzhou = 'mt.cn-hangzhou.aliyuncs.com',
    ap-northeast-1 = 'mt.aliyuncs.com',
    ap-northeast-2-pop = 'mt.aliyuncs.com',
    ap-south-1 = 'mt.aliyuncs.com',
    ap-southeast-1 = 'mt.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'mt.aliyuncs.com',
    ap-southeast-3 = 'mt.aliyuncs.com',
    ap-southeast-5 = 'mt.aliyuncs.com',
    cn-beijing = 'mt.aliyuncs.com',
    cn-beijing-finance-1 = 'mt.aliyuncs.com',
    cn-beijing-finance-pop = 'mt.aliyuncs.com',
    cn-beijing-gov-1 = 'mt.aliyuncs.com',
    cn-beijing-nu16-b01 = 'mt.aliyuncs.com',
    cn-chengdu = 'mt.aliyuncs.com',
    cn-edge-1 = 'mt.aliyuncs.com',
    cn-fujian = 'mt.aliyuncs.com',
    cn-haidian-cm12-c01 = 'mt.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'mt.aliyuncs.com',
    cn-hangzhou-finance = 'mt.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'mt.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'mt.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'mt.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'mt.aliyuncs.com',
    cn-hangzhou-test-306 = 'mt.aliyuncs.com',
    cn-hongkong = 'mt.aliyuncs.com',
    cn-hongkong-finance-pop = 'mt.aliyuncs.com',
    cn-huhehaote = 'mt.aliyuncs.com',
    cn-north-2-gov-1 = 'mt.aliyuncs.com',
    cn-qingdao = 'mt.aliyuncs.com',
    cn-qingdao-nebula = 'mt.aliyuncs.com',
    cn-shanghai = 'mt.aliyuncs.com',
    cn-shanghai-et15-b01 = 'mt.aliyuncs.com',
    cn-shanghai-et2-b01 = 'mt.aliyuncs.com',
    cn-shanghai-finance-1 = 'mt.aliyuncs.com',
    cn-shanghai-inner = 'mt.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'mt.aliyuncs.com',
    cn-shenzhen = 'mt.aliyuncs.com',
    cn-shenzhen-finance-1 = 'mt.aliyuncs.com',
    cn-shenzhen-inner = 'mt.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'mt.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'mt.aliyuncs.com',
    cn-wuhan = 'mt.aliyuncs.com',
    cn-yushanfang = 'mt.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'mt.aliyuncs.com',
    cn-zhangjiakou = 'mt.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'mt.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'mt.aliyuncs.com',
    eu-central-1 = 'mt.aliyuncs.com',
    eu-west-1 = 'mt.aliyuncs.com',
    eu-west-1-oxs = 'mt.aliyuncs.com',
    me-east-1 = 'mt.aliyuncs.com',
    rus-west-1-pop = 'mt.aliyuncs.com',
    us-east-1 = 'mt.aliyuncs.com',
    us-west-1 = 'mt.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('alimt', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateDocTranslateTaskRequest {
  callbackUrl?: string(name='CallbackUrl'),
  clientToken?: string(name='ClientToken'),
  fileUrl?: string(name='FileUrl'),
  scene?: string(name='Scene'),
  sourceLanguage?: string(name='SourceLanguage'),
  targetLanguage?: string(name='TargetLanguage'),
}

model CreateDocTranslateTaskAdvanceRequest {
  fileUrlObject: readable(name='FileUrlObject'),
  callbackUrl?: string(name='CallbackUrl'),
  clientToken?: string(name='ClientToken'),
  scene?: string(name='Scene'),
  sourceLanguage?: string(name='SourceLanguage'),
  targetLanguage?: string(name='TargetLanguage'),
}

model CreateDocTranslateTaskResponseBody = {
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  taskId?: string(name='TaskId'),
}

model CreateDocTranslateTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDocTranslateTaskResponseBody(name='body'),
}

async function createDocTranslateTaskWithOptions(request: CreateDocTranslateTaskRequest, runtime: Util.RuntimeOptions): CreateDocTranslateTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDocTranslateTask', '2018-10-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDocTranslateTask(request: CreateDocTranslateTaskRequest): CreateDocTranslateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDocTranslateTaskWithOptions(request, runtime);
}

async function createDocTranslateTaskAdvance(request: CreateDocTranslateTaskAdvanceRequest, runtime: Util.RuntimeOptions): CreateDocTranslateTaskResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'alimt',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var createDocTranslateTaskReq = new CreateDocTranslateTaskRequest{};
  OpenApiUtil.convert(request, createDocTranslateTaskReq);

  if(!Util.isUnset(request.fileUrlObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.fileUrlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    createDocTranslateTaskReq.fileUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var createDocTranslateTaskResp = createDocTranslateTaskWithOptions(createDocTranslateTaskReq, runtime);
  return createDocTranslateTaskResp;
}

model CreateImageTranslateTaskRequest {
  clientToken?: string(name='ClientToken'),
  extra?: string(name='Extra'),
  sourceLanguage?: string(name='SourceLanguage'),
  targetLanguage?: string(name='TargetLanguage'),
  urlList?: string(name='UrlList'),
}

model CreateImageTranslateTaskResponseBody = {
  code?: int32(name='Code'),
  data?: {
    taskId?: string(name='TaskId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateImageTranslateTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateImageTranslateTaskResponseBody(name='body'),
}

async function createImageTranslateTaskWithOptions(request: CreateImageTranslateTaskRequest, runtime: Util.RuntimeOptions): CreateImageTranslateTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateImageTranslateTask', '2018-10-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createImageTranslateTask(request: CreateImageTranslateTaskRequest): CreateImageTranslateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageTranslateTaskWithOptions(request, runtime);
}

model GetBatchTranslateRequest {
  apiType?: string(name='ApiType'),
  formatType?: string(name='FormatType'),
  scene?: string(name='Scene'),
  sourceLanguage?: string(name='SourceLanguage'),
  sourceText?: string(name='SourceText'),
  targetLanguage?: string(name='TargetLanguage'),
}

model GetBatchTranslateResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  translatedList?: [  map[string]any ](name='TranslatedList'),
}

model GetBatchTranslateResponse = {
  headers: map[string]string(name='headers'),
  body: GetBatchTranslateResponseBody(name='body'),
}

async function getBatchTranslateWithOptions(request: GetBatchTranslateRequest, runtime: Util.RuntimeOptions): GetBatchTranslateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetBatchTranslate', '2018-10-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getBatchTranslate(request: GetBatchTranslateRequest): GetBatchTranslateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBatchTranslateWithOptions(request, runtime);
}

model GetDetectLanguageRequest {
  sourceText?: string(name='SourceText'),
}

model GetDetectLanguageResponseBody = {
  detectedLanguage?: string(name='DetectedLanguage'),
  requestId?: string(name='RequestId'),
}

model GetDetectLanguageResponse = {
  headers: map[string]string(name='headers'),
  body: GetDetectLanguageResponseBody(name='body'),
}

async function getDetectLanguageWithOptions(request: GetDetectLanguageRequest, runtime: Util.RuntimeOptions): GetDetectLanguageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDetectLanguage', '2018-10-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDetectLanguage(request: GetDetectLanguageRequest): GetDetectLanguageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDetectLanguageWithOptions(request, runtime);
}

model GetDocTranslateTaskRequest {
  taskId?: string(name='TaskId'),
}

model GetDocTranslateTaskResponseBody = {
  pageCount?: int32(name='PageCount'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  taskId?: string(name='TaskId'),
  translateErrorCode?: string(name='TranslateErrorCode'),
  translateErrorMessage?: string(name='TranslateErrorMessage'),
  translateFileUrl?: string(name='TranslateFileUrl'),
}

model GetDocTranslateTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetDocTranslateTaskResponseBody(name='body'),
}

async function getDocTranslateTaskWithOptions(request: GetDocTranslateTaskRequest, runtime: Util.RuntimeOptions): GetDocTranslateTaskResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDocTranslateTask', '2018-10-12', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDocTranslateTask(request: GetDocTranslateTaskRequest): GetDocTranslateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDocTranslateTaskWithOptions(request, runtime);
}

model GetImageDiagnoseRequest {
  extra?: string(name='Extra'),
  url?: string(name='Url'),
}

model GetImageDiagnoseResponseBody = {
  code?: int32(name='Code'),
  data?: {
    language?: string(name='Language'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetImageDiagnoseResponse = {
  headers: map[string]string(name='headers'),
  body: GetImageDiagnoseResponseBody(name='body'),
}

async function getImageDiagnoseWithOptions(request: GetImageDiagnoseRequest, runtime: Util.RuntimeOptions): GetImageDiagnoseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetImageDiagnose', '2018-10-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getImageDiagnose(request: GetImageDiagnoseRequest): GetImageDiagnoseResponse {
  var runtime = new Util.RuntimeOptions{};
  return getImageDiagnoseWithOptions(request, runtime);
}

model GetImageTranslateRequest {
  extra?: string(name='Extra'),
  sourceLanguage?: string(name='SourceLanguage'),
  targetLanguage?: string(name='TargetLanguage'),
  url?: string(name='Url'),
}

model GetImageTranslateResponseBody = {
  code?: int32(name='Code'),
  data?: {
    orc?: string(name='Orc'),
    pictureEditor?: string(name='PictureEditor'),
    url?: string(name='Url'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetImageTranslateResponse = {
  headers: map[string]string(name='headers'),
  body: GetImageTranslateResponseBody(name='body'),
}

async function getImageTranslateWithOptions(request: GetImageTranslateRequest, runtime: Util.RuntimeOptions): GetImageTranslateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetImageTranslate', '2018-10-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getImageTranslate(request: GetImageTranslateRequest): GetImageTranslateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getImageTranslateWithOptions(request, runtime);
}

model GetImageTranslateTaskRequest {
  taskId?: string(name='TaskId'),
}

model GetImageTranslateTaskResponseBody = {
  code?: int32(name='Code'),
  data?: {
    imageData?: string(name='ImageData'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetImageTranslateTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetImageTranslateTaskResponseBody(name='body'),
}

async function getImageTranslateTaskWithOptions(request: GetImageTranslateTaskRequest, runtime: Util.RuntimeOptions): GetImageTranslateTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetImageTranslateTask', '2018-10-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getImageTranslateTask(request: GetImageTranslateTaskRequest): GetImageTranslateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getImageTranslateTaskWithOptions(request, runtime);
}

model GetTitleDiagnoseRequest {
  categoryId?: string(name='CategoryId'),
  extra?: string(name='Extra'),
  language?: string(name='Language'),
  platform?: string(name='Platform'),
  title?: string(name='Title'),
}

model GetTitleDiagnoseResponseBody = {
  code?: int32(name='Code'),
  data?: {
    allUppercaseWords?: string(name='AllUppercaseWords'),
    containCoreClasses?: string(name='ContainCoreClasses'),
    disableWords?: string(name='DisableWords'),
    duplicateWords?: string(name='DuplicateWords'),
    languageQualityScore?: string(name='LanguageQualityScore'),
    noFirstUppercaseList?: string(name='NoFirstUppercaseList'),
    overLengthLimit?: string(name='OverLengthLimit'),
    totalScore?: string(name='TotalScore'),
    wordCount?: string(name='WordCount'),
    wordSpelledCorrectError?: string(name='WordSpelledCorrectError'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetTitleDiagnoseResponse = {
  headers: map[string]string(name='headers'),
  body: GetTitleDiagnoseResponseBody(name='body'),
}

async function getTitleDiagnoseWithOptions(request: GetTitleDiagnoseRequest, runtime: Util.RuntimeOptions): GetTitleDiagnoseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTitleDiagnose', '2018-10-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTitleDiagnose(request: GetTitleDiagnoseRequest): GetTitleDiagnoseResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTitleDiagnoseWithOptions(request, runtime);
}

model GetTitleGenerateRequest {
  attributes?: string(name='Attributes'),
  categoryId?: string(name='CategoryId'),
  extra?: string(name='Extra'),
  hotWords?: string(name='HotWords'),
  language?: string(name='Language'),
  platform?: string(name='Platform'),
  title?: string(name='Title'),
}

model GetTitleGenerateResponseBody = {
  code?: int32(name='Code'),
  data?: {
    titles?: string(name='Titles'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetTitleGenerateResponse = {
  headers: map[string]string(name='headers'),
  body: GetTitleGenerateResponseBody(name='body'),
}

async function getTitleGenerateWithOptions(request: GetTitleGenerateRequest, runtime: Util.RuntimeOptions): GetTitleGenerateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTitleGenerate', '2018-10-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTitleGenerate(request: GetTitleGenerateRequest): GetTitleGenerateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTitleGenerateWithOptions(request, runtime);
}

model GetTitleIntelligenceRequest {
  catLevelThreeId?: long(name='CatLevelThreeId'),
  catLevelTwoId?: long(name='CatLevelTwoId'),
  extra?: string(name='Extra'),
  keywords?: string(name='Keywords'),
  platform?: string(name='Platform'),
}

model GetTitleIntelligenceResponseBody = {
  code?: int32(name='Code'),
  data?: {
    titles?: string(name='Titles'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetTitleIntelligenceResponse = {
  headers: map[string]string(name='headers'),
  body: GetTitleIntelligenceResponseBody(name='body'),
}

async function getTitleIntelligenceWithOptions(request: GetTitleIntelligenceRequest, runtime: Util.RuntimeOptions): GetTitleIntelligenceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTitleIntelligence', '2018-10-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTitleIntelligence(request: GetTitleIntelligenceRequest): GetTitleIntelligenceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTitleIntelligenceWithOptions(request, runtime);
}

model GetTranslateReportRequest {
  apiName?: string(name='ApiName'),
  beginTime?: string(name='BeginTime'),
  endTime?: string(name='EndTime'),
  group?: string(name='Group'),
}

model GetTranslateReportResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetTranslateReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetTranslateReportResponseBody(name='body'),
}

async function getTranslateReportWithOptions(request: GetTranslateReportRequest, runtime: Util.RuntimeOptions): GetTranslateReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTranslateReport', '2018-10-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTranslateReport(request: GetTranslateReportRequest): GetTranslateReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTranslateReportWithOptions(request, runtime);
}

model GetUserResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserResponseBody(name='body'),
}

async function getUserWithOptions(runtime: Util.RuntimeOptions): GetUserResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('GetUser', '2018-10-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getUser(): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserWithOptions(runtime);
}

model OpenAlimtServiceRequest {
  ownerId?: long(name='OwnerId'),
  type?: string(name='Type'),
}

model OpenAlimtServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenAlimtServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenAlimtServiceResponseBody(name='body'),
}

async function openAlimtServiceWithOptions(request: OpenAlimtServiceRequest, runtime: Util.RuntimeOptions): OpenAlimtServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OpenAlimtService', '2018-10-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function openAlimtService(request: OpenAlimtServiceRequest): OpenAlimtServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openAlimtServiceWithOptions(request, runtime);
}

model TranslateRequest {
  formatType?: string(name='FormatType'),
  scene?: string(name='Scene'),
  sourceLanguage?: string(name='SourceLanguage'),
  sourceText?: string(name='SourceText'),
  targetLanguage?: string(name='TargetLanguage'),
}

model TranslateResponseBody = {
  code?: int32(name='Code'),
  data?: {
    translated?: string(name='Translated'),
    wordCount?: string(name='WordCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model TranslateResponse = {
  headers: map[string]string(name='headers'),
  body: TranslateResponseBody(name='body'),
}

async function translateWithOptions(request: TranslateRequest, runtime: Util.RuntimeOptions): TranslateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('Translate', '2018-10-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function translate(request: TranslateRequest): TranslateResponse {
  var runtime = new Util.RuntimeOptions{};
  return translateWithOptions(request, runtime);
}

model TranslateCertificateRequest {
  certificateType?: string(name='CertificateType'),
  imageUrl?: string(name='ImageUrl'),
  resultType?: string(name='ResultType'),
  sourceLanguage?: string(name='SourceLanguage'),
  targetLanguage?: string(name='TargetLanguage'),
}

model TranslateCertificateAdvanceRequest {
  imageUrlObject: readable(name='ImageUrlObject'),
  certificateType?: string(name='CertificateType'),
  resultType?: string(name='ResultType'),
  sourceLanguage?: string(name='SourceLanguage'),
  targetLanguage?: string(name='TargetLanguage'),
}

model TranslateCertificateResponseBody = {
  data?: {
    translatedValues?: [ 
      {
        key?: string(name='Key'),
        keyTranslation?: string(name='KeyTranslation'),
        value?: string(name='Value'),
        valueTranslation?: string(name='ValueTranslation'),
      }
    ](name='TranslatedValues'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model TranslateCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: TranslateCertificateResponseBody(name='body'),
}

async function translateCertificateWithOptions(request: TranslateCertificateRequest, runtime: Util.RuntimeOptions): TranslateCertificateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TranslateCertificate', '2018-10-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function translateCertificate(request: TranslateCertificateRequest): TranslateCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return translateCertificateWithOptions(request, runtime);
}

async function translateCertificateAdvance(request: TranslateCertificateAdvanceRequest, runtime: Util.RuntimeOptions): TranslateCertificateResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'alimt',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var translateCertificateReq = new TranslateCertificateRequest{};
  OpenApiUtil.convert(request, translateCertificateReq);

  if(!Util.isUnset(request.imageUrlObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageUrlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    translateCertificateReq.imageUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var translateCertificateResp = translateCertificateWithOptions(translateCertificateReq, runtime);
  return translateCertificateResp;
}

model TranslateECommerceRequest {
  formatType?: string(name='FormatType'),
  scene?: string(name='Scene'),
  sourceLanguage?: string(name='SourceLanguage'),
  sourceText?: string(name='SourceText'),
  targetLanguage?: string(name='TargetLanguage'),
}

model TranslateECommerceResponseBody = {
  code?: int32(name='Code'),
  data?: {
    translated?: string(name='Translated'),
    wordCount?: string(name='WordCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model TranslateECommerceResponse = {
  headers: map[string]string(name='headers'),
  body: TranslateECommerceResponseBody(name='body'),
}

async function translateECommerceWithOptions(request: TranslateECommerceRequest, runtime: Util.RuntimeOptions): TranslateECommerceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TranslateECommerce', '2018-10-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function translateECommerce(request: TranslateECommerceRequest): TranslateECommerceResponse {
  var runtime = new Util.RuntimeOptions{};
  return translateECommerceWithOptions(request, runtime);
}

model TranslateGeneralRequest {
  formatType?: string(name='FormatType'),
  scene?: string(name='Scene'),
  sourceLanguage?: string(name='SourceLanguage'),
  sourceText?: string(name='SourceText'),
  targetLanguage?: string(name='TargetLanguage'),
}

model TranslateGeneralResponseBody = {
  code?: int32(name='Code'),
  data?: {
    translated?: string(name='Translated'),
    wordCount?: string(name='WordCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model TranslateGeneralResponse = {
  headers: map[string]string(name='headers'),
  body: TranslateGeneralResponseBody(name='body'),
}

async function translateGeneralWithOptions(request: TranslateGeneralRequest, runtime: Util.RuntimeOptions): TranslateGeneralResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TranslateGeneral', '2018-10-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function translateGeneral(request: TranslateGeneralRequest): TranslateGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return translateGeneralWithOptions(request, runtime);
}

model TranslateImageRequest {
  field?: string(name='Field'),
  imageBase64?: string(name='ImageBase64'),
  imageUrl?: string(name='ImageUrl'),
  sourceLanguage?: string(name='SourceLanguage'),
  targetLanguage?: string(name='TargetLanguage'),
}

model TranslateImageResponseBody = {
  code?: int32(name='Code'),
  data?: {
    finalImageUrl?: string(name='FinalImageUrl'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model TranslateImageResponse = {
  headers: map[string]string(name='headers'),
  body: TranslateImageResponseBody(name='body'),
}

async function translateImageWithOptions(request: TranslateImageRequest, runtime: Util.RuntimeOptions): TranslateImageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TranslateImage', '2018-10-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function translateImage(request: TranslateImageRequest): TranslateImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return translateImageWithOptions(request, runtime);
}

