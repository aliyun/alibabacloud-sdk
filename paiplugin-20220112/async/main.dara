/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'PaiPlugin';
  @version = '2022-01-12';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateCampaignRequest {
  name?: string(name='Name', description='运营活动名称。', position='Body'),
  remark?: string(name='Remark', description='备注。', position='Body'),
}

model CreateCampaignResponseBody = {
  data?: {
    createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
    id?: string(name='Id', description='运营活动Id。'),
    name?: string(name='Name', description='运营活动名称。'),
    remark?: string(name='Remark', description='备注。'),
    updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model CreateCampaignResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCampaignResponseBody(name='body'),
}

/**
 * 注册运营活动。
 */
async function createCampaign(request: CreateCampaignRequest): CreateCampaignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateCampaign', 'POST', '/api/v2/campaigns', 'json', false, 'json', request);
}

model CreateGroupRequest {
  algorithm?: string(name='Algorithm', description='关联算法，人群来源为算法。', position='Body'),
  column?: string(name='Column', description='手机号列名，人群来源为CSV文件，MaxCompute，并且包含手机号时需指定。', position='Body'),
  filter?: string(name='Filter', description='过滤条件，人群来源为MaxCompute时可指定。', position='Body'),
  inferenceJobId?: string(name='InferenceJobId', description='预测任务Id，人群来源为算法。', position='Body'),
  name?: string(name='Name', description='人群名称。', position='Body'),
  phoneNumber?: boolean(name='PhoneNumber', description='是否包含手机号，包含手机号的人群可用于触达计划。', position='Body'),
  project?: string(name='Project', description='MaxCompute(ODPS)项目名，人群来源为MaxCompute时需指定。', position='Body'),
  remark?: string(name='Remark', description='人群备注。', position='Body'),
  source?: int32(name='Source', description='人群来源。
- 0: 文本，每行一个手机号，最多100个。
- 1: 文本文件，每行一个手机号，可通过控制台上传或指定自定义OSS地址，指定自定义OSS地址前需确保已在控制台完成一键授权。
- 2: CSV文件，需指定手机号列名，可通过控制台上传或指定自定义OSS地址，指定自定义OSS地址前需确保已在控制台完成一键授权。
- 3: MaxCompute(ODPS)表，需指定手机号列名。
- 4: 算法。', position='Body'),
  table?: string(name='Table', description='MaxCompute(ODPS)表名，人群来源为MaxCompute时需指定。', position='Body'),
  text?: string(name='Text', description='文本，人群来源为文本时需指定。', position='Body'),
  uri?: string(name='Uri', description='文件地址，人群来源为文本文件，CSV文件，MaxCompute时需指定。', position='Body'),
}

model CreateGroupResponseBody = {
  data?: {
    algorithm?: string(name='Algorithm', description='关联算法，人群来源为算法。'),
    amount?: int32(name='Amount', description='人群数量。'),
    column?: string(name='Column', description='手机号列名，人群来源为CSV文件，MaxCompute，并且包含手机号时需指定。'),
    createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
    filter?: string(name='Filter', description='过滤条件，人群来源为MaxCompute时可指定。'),
    id?: string(name='Id', description='人群Id。'),
    inferenceJobId?: string(name='InferenceJobId', description='预测任务Id，人群来源为算法。'),
    name?: string(name='Name', description='人群名称。'),
    phoneNumber?: boolean(name='PhoneNumber', description='是否包含手机号，包含手机号的人群可用于触达计划。'),
    project?: string(name='Project', description='MaxCompute(ODPS)项目名，人群来源为MaxCompute时需指定。'),
    remark?: string(name='Remark', description='人群备注。'),
    source?: int32(name='Source', description='人群来源。
- 0: 文本，每行一个手机号，最多100个。
- 1: 文本文件，每行一个手机号，可通过控制台上传或指定自定义OSS地址，指定自定义OSS地址前需确保已在控制台完成一键授权。
- 2: CSV文件，需指定手机号列名，可通过控制台上传或指定自定义OSS地址，指定自定义OSS地址前需确保已在控制台完成一键授权。
- 3: MaxCompute(ODPS)表，需指定手机号列名。
- 4: 算法。'),
    status?: int32(name='Status', description='人群状态。
- 0: 检查中。
- 1: 已通过。
- 2: 未通过。'),
    table?: string(name='Table', description='MaxCompute(ODPS)表名，人群来源为MaxCompute时需指定。'),
    text?: string(name='Text', description='文本，人群来源为文本时需指定。'),
    updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
    uri?: string(name='Uri', description='文件地址，人群来源为文本文件，CSV文件，MaxCompute时需指定。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model CreateGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGroupResponseBody(name='body'),
}

/**
 * 注册人群。
 */
async function createGroup(request: CreateGroupRequest): CreateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateGroup', 'POST', '/api/v2/groups', 'json', false, 'json', request);
}

model CreateInferenceJobRequest {
  algorithm?: string(name='Algorithm', description='关联算法。', position='Body'),
  campaignId?: string(name='CampaignId', description='关联运营活动Id。', position='Body'),
  dataPath?: string(name='DataPath', description='预测数据路径。', position='Body'),
  name?: string(name='Name', description='预测任务名称。', position='Body'),
  remark?: string(name='Remark', description='备注。', position='Body'),
  targetPath?: string(name='TargetPath', description='输出数据路径，需要为空目录。', position='Body'),
  trainingJobId?: string(name='TrainingJobId', description='关联训练任务。', position='Body'),
  userConfig?: string(name='UserConfig', description='用户配置。', position='Body'),
}

model CreateInferenceJobResponseBody = {
  data?: {
    algorithm?: string(name='Algorithm', description='关联算法。'),
    campaignId?: string(name='CampaignId', description='关联运营活动Id。'),
    createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
    dataPath?: string(name='DataPath', description='预测数据路径。'),
    groupId?: string(name='GroupId', description='关联人群Id，如果任务失败则人群无效。'),
    history?: string(name='History', description='预测任务日志。'),
    id?: string(name='Id', description='预测任务Id。'),
    name?: string(name='Name', description='预测任务名称。'),
    remark?: string(name='Remark', description='备注。'),
    status?: int32(name='Status', description='预测任务状态。'),
    targetPath?: string(name='TargetPath', description='输出数据路径，需要为空目录。'),
    trainingJobId?: string(name='TrainingJobId', description='关联训练任务。'),
    updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
    userConfig?: string(name='UserConfig', description='用户配置。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model CreateInferenceJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInferenceJobResponseBody(name='body'),
}

/**
 * 注册预测任务。
 */
async function createInferenceJob(request: CreateInferenceJobRequest): CreateInferenceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInferenceJob', 'POST', '/api/v2/inference/jobs', 'json', false, 'json', request);
}

model CreateScheduleRequest {
  endTime?: int32(name='EndTime', description='终止时间（UTC+8）。', position='Body'),
  executeTime?: string(name='ExecuteTime', description='执行时间 (UTC+8)，为空立即执行。', position='Body'),
  groupId?: string(name='GroupId', description='人群Id。', position='Body'),
  name?: string(name='Name', description='触达计划名称。', position='Body'),
  repeatCycle?: int32(name='RepeatCycle', description='重复周期，按重复周期与重复周期单位执行。', position='Body'),
  repeatCycleUnit?: int32(name='RepeatCycleUnit', description='重复周期单位，若指定执行时间，则重复周期生效。
- 0: 从不（默认）。
- 1: 小时。
- 2: 天。
- 3: 周。
- 4: 月。', position='Body'),
  repeatTimes?: int32(name='RepeatTimes', description='重复次数。
- -1: 不设终止时间（默认）。
- 0: 不重复。
- N: 重复N次后终止。', position='Body'),
  signName?: string(name='SignName', description='签名。', position='Body'),
  signatureId?: string(name='SignatureId', description='签名Id，或指定签名。', position='Body'),
  templateCode?: string(name='TemplateCode', description='模板Code。', position='Body'),
  templateId?: string(name='TemplateId', description='模板Id，或指定模板Code。', position='Body'),
}

model CreateScheduleResponseBody = {
  data?: {
    createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
    endTime?: int32(name='EndTime', description='终止时间（UTC+8）。'),
    executeTime?: string(name='ExecuteTime', description='执行时间 (UTC+8)，为空立即执行。'),
    groupId?: string(name='GroupId', description='人群Id。'),
    id?: string(name='Id', description='触达计划Id。'),
    name?: string(name='Name', description='触达计划名称。'),
    repeatCycle?: int32(name='RepeatCycle', description='重复周期，按重复周期与重复周期单位执行。'),
    repeatCycleUnit?: int32(name='RepeatCycleUnit', description='重复周期单位，若指定执行时间，则重复周期生效。
- 0: 从不（默认）。
- 1: 小时。
- 2: 天。
- 3: 周。
- 4: 月。'),
    repeatTimes?: int32(name='RepeatTimes', description='重复次数。
- -1: 不设终止时间（默认）。
- 0: 不重复。
- N: 重复N次后终止。'),
    signName?: string(name='SignName', description='签名。'),
    signatureId?: string(name='SignatureId', description='签名Id，或指定签名。'),
    status?: int32(name='Status', description='状态。
- 0: 检查中。
- 1: 检查成功。
- 2: 检查失败。
- 3: 发送中。
- 4: 发送成功。
- 5: 发送失败。'),
    templateCode?: string(name='TemplateCode', description='模板Code。'),
    templateId?: string(name='TemplateId', description='模板Id，或指定模板Code。'),
    updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model CreateScheduleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScheduleResponseBody(name='body'),
}

/**
 * 注册触达计划。
 */
async function createSchedule(request: CreateScheduleRequest): CreateScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSchedule', 'POST', '/api/v2/schedules', 'json', false, 'json', request);
}

model CreateSignatureRequest {
  description?: string(name='Description', description='申请说明。', position='Body'),
  name?: string(name='Name', description='签名名称。', position='Body'),
}

model CreateSignatureResponseBody = {
  data?: {
    createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
    id?: string(name='Id', description='签名Id。'),
    name?: string(name='Name', description='签名名称。'),
    status?: int32(name='Status', description='签名审核状态。
- 0：审核中。
- 1：审核通过。
- 2：审核不通过。'),
    updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model CreateSignatureResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSignatureResponseBody(name='body'),
}

/**
 * 注册签名。

 */
async function createSignature(request: CreateSignatureRequest): CreateSignatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSignature', 'POST', '/api/v2/signatures', 'json', false, 'json', request);
}

model CreateTemplateRequest {
  content?: string(name='Content', description='模板内容，请注意控制总字数在70个字以内，超出部分按长短信收费，按67个字为单位记一条短信，营销短信必须在结尾添加“回T退订”。', position='Body'),
  description?: string(name='Description', description='申请说明。', position='Body'),
  name?: string(name='Name', description='模板名称。', position='Body'),
  signature?: string(name='Signature', description='签名名称，同时只能指定签名名称或签名Id其中之一。', position='Body'),
  signatureId?: string(name='SignatureId', description='签名Id，可通过ListSignatures获取审核状态为已通过的签名列表，获取签名Id。', position='Body'),
  type?: int32(name='Type', description='模板类型。
- 0 : 验证码。
- 1 : 短信通知。
- 2 : 推广短信。', position='Body'),
}

model CreateTemplateResponseBody = {
  data?: {
    content?: string(name='Content', description='模板内容。'),
    createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
    description?: string(name='Description', description='申请说明。'),
    id?: string(name='Id', description='模板Id。'),
    name?: string(name='Name', description='签名名称。'),
    reason?: string(name='Reason', description='审核意见。'),
    signatureId?: string(name='SignatureId', description='签名Id。'),
    status?: int32(name='Status', description='审核状态。
- 0 : 审核中。
- 1 : 审核通过。
- 2 : 审核不通过。'),
    templateCode?: string(name='TemplateCode', description='模板Code。'),
    type?: int32(name='Type', description='模板类型。
- 0 : 验证码。
- 1 : 短信通知。
- 2 : 推广短信。'),
    updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model CreateTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTemplateResponseBody(name='body'),
}

/**
 * 注册模板。

 */
async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTemplate', 'POST', '/api/v2/templates', 'json', false, 'json', request);
}

model CreateTrainingJobRequest {
  algorithm?: string(name='Algorithm', description='关联算法Id。', position='Body'),
  campaignId?: string(name='CampaignId', description='关联运营活动Id。', position='Body'),
  dataPath?: string(name='DataPath', description='训练数据路径。', position='Body'),
  name?: string(name='Name', description='训练任务名称。', position='Body'),
  remark?: string(name='Remark', description='备注。', position='Body'),
  userConfig?: string(name='UserConfig', description='用户配置。', position='Body'),
}

model CreateTrainingJobResponseBody = {
  data?: {
    algorithm?: string(name='Algorithm', description='关联算法Id。'),
    campaignId?: string(name='CampaignId', description='关联运营活动Id。'),
    createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
    dataPath?: string(name='DataPath', description='训练数据路径。'),
    history?: string(name='History', description='训练任务日志。'),
    id?: string(name='Id', description='训练任务Id。'),
    name?: string(name='Name', description='训练任务名称。'),
    remark?: string(name='Remark', description='备注。'),
    status?: int32(name='Status', description='训练任务状态。'),
    updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
    userConfig?: string(name='UserConfig', description='用户配置。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model CreateTrainingJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTrainingJobResponseBody(name='body'),
}

/**
 * 注册训练任务。

 */
async function createTrainingJob(request: CreateTrainingJobRequest): CreateTrainingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTrainingJob', 'POST', '/api/v2/training/jobs', 'json', false, 'json', request);
}

model DeleteCampaignRequest {
  id?: string(name='Id', description='path', position='Path'),
}

model DeleteCampaignResponseBody = {
  data?: string(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model DeleteCampaignResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCampaignResponseBody(name='body'),
}

/**
 * 删除运营活动

 */
async function deleteCampaign(request: DeleteCampaignRequest): DeleteCampaignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteCampaign', 'DELETE', '/api/v2/campaigns/{Id}', 'json', false, 'json', request);
}

model DeleteGroupRequest {
  id?: string(name='Id', description='path', position='Path'),
}

model DeleteGroupResponseBody = {
  data?: string(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model DeleteGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGroupResponseBody(name='body'),
}

/**
 * 删除人群

 */
async function deleteGroup(request: DeleteGroupRequest): DeleteGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteGroup', 'DELETE', '/api/v2/groups/{Id}', 'json', false, 'json', request);
}

model DeleteInferenceJobRequest {
  id?: string(name='Id', description='预测任务Id，可通过ListInferenceJobs查询账号下的预测任务列表，获取预测任务Id。', position='Path'),
}

model DeleteInferenceJobResponseBody = {
  data?: string(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model DeleteInferenceJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInferenceJobResponseBody(name='body'),
}

/**
 * 删除预测任务。
 */
async function deleteInferenceJob(request: DeleteInferenceJobRequest): DeleteInferenceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInferenceJob', 'DELETE', '/api/v2/inference/jobs/{Id}', 'json', false, 'json', request);
}

model DeleteScheduleRequest {
  id?: string(name='Id', description='触达计划Id，可通过ListSchedules查询账号下的触达计划列表，获取触达计划Id。', position='Path'),
}

model DeleteScheduleResponseBody = {
  data?: string(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model DeleteScheduleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScheduleResponseBody(name='body'),
}

/**
 * 删除触达计划。

 */
async function deleteSchedule(request: DeleteScheduleRequest): DeleteScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSchedule', 'DELETE', '/api/v2/schedules/{Id}', 'json', false, 'json', request);
}

model DeleteSignatureRequest {
  id?: string(name='Id', description='签名Id，可通过ListSignatures查询账号下的签名列表，获取签名Id。', position='Path'),
}

model DeleteSignatureResponseBody = {
  data?: string(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model DeleteSignatureResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSignatureResponseBody(name='body'),
}

/**
 * 删除签名。

 */
async function deleteSignature(request: DeleteSignatureRequest): DeleteSignatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSignature', 'DELETE', '/api/v2/signatures/{Id}', 'json', false, 'json', request);
}

model DeleteTemplateRequest {
  id?: string(name='Id', description='模板Id，可通过ListTemplates查询账号下的模板列表，获取模板Id。', position='Path'),
}

model DeleteTemplateResponseBody = {
  data?: string(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model DeleteTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTemplateResponseBody(name='body'),
}

/**
 * 删除模板

 */
async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTemplate', 'DELETE', '/api/v2/templates/{Id}', 'json', false, 'json', request);
}

model DeleteTrainingJobRequest {
  id?: string(name='Id', description='训练任务Id，可通过ListTrainingJobs查询账号下的训练任务列表，获取训练任务Id。', position='Path'),
}

model DeleteTrainingJobResponseBody = {
  data?: string(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model DeleteTrainingJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTrainingJobResponseBody(name='body'),
}

/**
 * 删除训练任务。
 */
async function deleteTrainingJob(request: DeleteTrainingJobRequest): DeleteTrainingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTrainingJob', 'DELETE', '/api/v2/training/jobs/{Id}', 'json', false, 'json', request);
}

model GetAlgorithmRequest {
  id?: string(name='Id', description='模板Id，可通过ListAlgorithms查询当前可用算法，使用获取的算法Id。', position='Path'),
}

model GetAlgorithmResponseBody = {
  data?: {
    description?: string(name='Description', description='算法说明。'),
    id?: string(name='Id', description='算法Id。'),
    inferUserConfigMap?: string(name='InferUserConfigMap', description='预测所需参数名与对应的参数说明。'),
    name?: string(name='Name', description='算法名称。'),
    trainUserConfigMap?: string(name='TrainUserConfigMap', description='训练所需参数名与对应的参数说明。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model GetAlgorithmResponse = {
  headers: map[string]string(name='headers'),
  body: GetAlgorithmResponseBody(name='body'),
}

/**
 * 获取算法详情。
 */
async function getAlgorithm(request: GetAlgorithmRequest): GetAlgorithmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAlgorithm', 'GET', '/api/v2/algorithms/{Id}', 'json', false, 'json', request);
}

model GetCampaignRequest {
  id?: string(name='Id', description='运营活动Id，可通过ListCampaigns查询账号下的运营活动列表，获取运营活动Id。', position='Path'),
}

model GetCampaignResponseBody = {
  data?: {
    createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
    id?: string(name='Id', description='运营活动Id。'),
    name?: string(name='Name', description='运营活动名称。'),
    remark?: string(name='Remark', description='备注。'),
    updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model GetCampaignResponse = {
  headers: map[string]string(name='headers'),
  body: GetCampaignResponseBody(name='body'),
}

/**
 * 获取运营活动详情。
 */
async function getCampaign(request: GetCampaignRequest): GetCampaignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCampaign', 'GET', '/api/v2/campaigns/{Id}', 'json', false, 'json', request);
}

model GetGroupRequest {
  id?: string(name='Id', description='人群Id，可通过ListGroups查询账号下的人群列表，获取人群Id。', position='Path'),
}

model GetGroupResponseBody = {
  data?: {
    algorithm?: string(name='Algorithm', description='关联算法，人群来源为算法。'),
    amount?: int32(name='Amount', description='人群数量。'),
    campaignId?: string(name='CampaignId', description='关联运营活动Id。'),
    column?: string(name='Column', description='手机号列名，人群来源为CSV文件，MaxCompute，并且包含手机号时需指定。'),
    createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
    filter?: string(name='Filter', description='过滤条件，人群来源为MaxCompute时可指定。'),
    history?: string(name='History', description='历史记录。'),
    id?: string(name='Id', description='人群Id。'),
    inferenceJobId?: string(name='InferenceJobId', description='预测任务Id，人群来源为算法。'),
    name?: string(name='Name', description='人群名称。'),
    phoneNumber?: boolean(name='PhoneNumber', description='是否包含手机号，包含手机号的人群可用于触达计划。'),
    project?: string(name='Project', description='MaxCompute(ODPS)项目名，人群来源为MaxCompute时需指定。'),
    remark?: string(name='Remark', description='人群备注。'),
    source?: int32(name='Source', description='人群来源。
- 0: 文本，每行一个手机号，最多100个。
- 1: 文本文件，每行一个手机号，可通过控制台上传或指定自定义OSS地址，指定自定义OSS地址前需确保已在控制台完成一键授权。
- 2: 多列CSV文件，需指定手机号列名，可通过控制台上传或指定自定义OSS地址，指定自定义OSS地址前需确保已在控制台完成一键授权。
- 3: MaxCompute表，需指定手机号列名。
- 4: 算法。'),
    status?: int32(name='Status', description='人群状态。
- 0: 检查中。
- 1: 已通过。
- 2: 未通过。'),
    table?: string(name='Table', description='MaxCompute(ODPS)表名，人群来源为MaxCompute时需指定。'),
    text?: string(name='Text', description='文本，人群来源为文本时需指定。'),
    updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
    uri?: string(name='Uri', description='文件地址，人群来源为文本文件，CSV文件时需指定。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model GetGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetGroupResponseBody(name='body'),
}

/**
 * 获取人群详情。
 */
async function getGroup(request: GetGroupRequest): GetGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetGroup', 'GET', '/api/v2/groups/{Id}', 'json', false, 'json', request);
}

model GetInferenceJobRequest {
  id?: string(name='Id', description='预测任务Id，可通过ListInferenceJobs查询账号下的预测任务列表，获取预测任务Id。', position='Path'),
}

model GetInferenceJobResponseBody = {
  data?: {
    algorithm?: string(name='Algorithm', description='关联算法。'),
    campaignId?: string(name='CampaignId', description='关联运营活动Id。'),
    createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
    dataPath?: string(name='DataPath', description='预测数据路径。'),
    groupId?: string(name='GroupId', description='关联人群Id，如果任务失败则人群无效。'),
    history?: string(name='History', description='预测任务日志。'),
    id?: string(name='Id', description='预测任务Id。'),
    name?: string(name='Name', description='预测任务名称。'),
    remark?: string(name='Remark', description='备注。'),
    status?: int32(name='Status', description='预测任务状态。'),
    targetPath?: string(name='TargetPath', description='输出数据路径，需要为空目录。'),
    trainingJobId?: string(name='TrainingJobId', description='关联训练任务。'),
    updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
    userConfig?: string(name='UserConfig', description='用户配置。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model GetInferenceJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetInferenceJobResponseBody(name='body'),
}

/**
 * 获取预测任务详情。
 */
async function getInferenceJob(request: GetInferenceJobRequest): GetInferenceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInferenceJob', 'GET', '/api/v2/inference/jobs/{Id}', 'json', false, 'json', request);
}

model GetMessageConfigRequest {
}

model GetMessageConfigResponseBody = {
  data?: {
    smsReportUrl?: string(name='SmsReportUrl', description='短信发送状态回执接收服务地址。'),
    smsUpUrl?: string(name='SmsUpUrl', description='上行短信消息接收服务地址。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model GetMessageConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetMessageConfigResponseBody(name='body'),
}

/**
 * 获取短信配置。
 */
async function getMessageConfig(request: GetMessageConfigRequest): GetMessageConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMessageConfig', 'GET', '/api/v2/users/messageConfig', 'json', false, 'json', request);
}

model GetScheduleRequest {
  id?: string(name='Id', description='触达计划Id，可通过ListSchedules查询账号下的触达计划列表，获取触达计划Id。', position='Path'),
}

model GetScheduleResponseBody = {
  data?: {
    createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
    endTime?: int32(name='EndTime', description='终止时间（UTC+8）。'),
    executeTime?: string(name='ExecuteTime', description='执行时间 (UTC+8)，为空立即执行。'),
    groupId?: string(name='GroupId', description='人群Id。'),
    history?: string(name='History', description='历史记录。'),
    id?: string(name='Id', description='触达计划Id。'),
    name?: string(name='Name', description='触达计划名称。'),
    repeatCycle?: int32(name='RepeatCycle', description='重复周期，按重复周期与重复周期单位执行。'),
    repeatCycleUnit?: int32(name='RepeatCycleUnit', description='重复周期单位，若指定执行时间，则重复周期生效。
- 0: 从不（默认）。
- 1: 小时。
- 2: 天。
- 3: 周。
- 4: 月。'),
    repeatTimes?: int32(name='RepeatTimes', description='重复次数。
- -1: 不设终止时间（默认）。
- 0: 不重复。
- N: 重复N次后终止。'),
    signName?: string(name='SignName', description='签名。'),
    signatureId?: string(name='SignatureId', description='签名Id，或指定签名。'),
    status?: int32(name='Status', description='状态。
- 0: 检查中。
- 1: 检查成功。
- 2: 检查失败。
- 3: 发送中。
- 4: 发送成功。
- 5: 发送失败。'),
    templateCode?: string(name='TemplateCode', description='模板Code。'),
    templateId?: string(name='TemplateId', description='模板Id，或指定模板Code。'),
    updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model GetScheduleResponse = {
  headers: map[string]string(name='headers'),
  body: GetScheduleResponseBody(name='body'),
}

/**
 * 获取触达计划详情。
 */
async function getSchedule(request: GetScheduleRequest): GetScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSchedule', 'GET', '/api/v2/schedules/{Id}', 'json', false, 'json', request);
}

model GetSignatureRequest {
  id?: string(name='Id', description='签名Id，可通过ListSignatures查询账号下的签名列表，获取签名Id。', position='Path'),
}

model GetSignatureResponseBody = {
  data?: {
    createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
    description?: string(name='Description', description='申请说明。'),
    id?: string(name='Id', description='签名Id。'),
    name?: string(name='Name', description='签名名称。'),
    reason?: string(name='Reason', description='审核建议。'),
    status?: int32(name='Status', description='签名审核状态。
- 0：审核中。
- 1：审核通过。
- 2：审核不通过。'),
    updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model GetSignatureResponse = {
  headers: map[string]string(name='headers'),
  body: GetSignatureResponseBody(name='body'),
}

/**
 * 获取签名详情。
 */
async function getSignature(request: GetSignatureRequest): GetSignatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSignature', 'GET', '/api/v2/signatures/{Id}', 'json', false, 'json', request);
}

model GetTemplateRequest {
  id?: string(name='Id', description='模板Id，可通过ListTemplates查询账号下的模板列表，获取模板Id。', position='Path'),
}

model GetTemplateResponseBody = {
  data?: {
    content?: string(name='Content', description='模板内容。'),
    createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
    description?: string(name='Description', description='申请说明。'),
    id?: string(name='Id', description='模板Id。'),
    name?: string(name='Name', description='签名名称。'),
    reason?: string(name='Reason', description='审核意见。'),
    signatureId?: string(name='SignatureId', description='签名Id。'),
    status?: int32(name='Status', description='审核状态。
- 0 : 审核中。
- 1 : 审核通过。
- 2 : 审核不通过。'),
    templateCode?: string(name='TemplateCode', description='模板Code。'),
    type?: int32(name='Type', description='模板类型。
- 0 : 验证码。
- 1 : 短信通知。
- 2 : 推广短信。'),
    updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model GetTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetTemplateResponseBody(name='body'),
}

/**
 * 获取模板详情。
 */
async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTemplate', 'GET', '/api/v2/templates/{Id}', 'json', false, 'json', request);
}

model GetTrainingJobRequest {
  id?: string(name='Id', description='训练任务Id，可通过ListTrainingJobs查询账号下的训练任务列表，获取训练任务Id。', position='Path'),
}

model GetTrainingJobResponseBody = {
  data?: {
    algorithm?: string(name='Algorithm', description='关联算法Id。'),
    campaignId?: string(name='CampaignId', description='关联运营活动Id。'),
    createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
    dataPath?: string(name='DataPath', description='训练数据路径。'),
    history?: string(name='History', description='训练任务日志。'),
    id?: string(name='Id', description='训练任务Id。'),
    name?: string(name='Name', description='训练任务名称。'),
    remark?: string(name='Remark', description='备注。'),
    status?: int32(name='Status', description='训练任务状态。'),
    updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
    userConfig?: string(name='UserConfig', description='用户配置。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model GetTrainingJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrainingJobResponseBody(name='body'),
}

/**
 * 获取训练任务详情。
 */
async function getTrainingJob(request: GetTrainingJobRequest): GetTrainingJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTrainingJob', 'GET', '/api/v2/training/jobs/{Id}', 'json', false, 'json', request);
}

model GetUserRequest {
}

model GetUserResponseBody = {
  data?: {
    accountStatus?: int32(name='AccountStatus', description='账号状态。
- 0 : 正常使用。
- 1 : 因欠费等原因暂时停用。
- 2 : 已释放产品。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserResponseBody(name='body'),
}

/**
 * 获取账号状态。
 */
async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUser', 'GET', '/api/v2/users', 'json', false, 'json', request);
}

model ListAlgorithmsRequest {
  id?: string(name='Id', description='算法Id过滤。', position='Query'),
  name?: string(name='Name', description='算法名称过滤。', position='Query'),
  pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。', position='Query'),
  pageSize?: int32(name='PageSize', description='分页大小，默认为10。', position='Query'),
}

model ListAlgorithmsResponseBody = {
  data?: {
    algorithms?: [ 
      {
        id?: string(name='Id', description='算法Id。'),
        name?: string(name='Name', description='算法名称。'),
      }
    ](name='Algorithms', description='算法列表。'),
    pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。'),
    pageSize?: int32(name='PageSize', description='分页大小，默认为10。'),
    totalCount?: int32(name='TotalCount', description='总算法数量。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model ListAlgorithmsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAlgorithmsResponseBody(name='body'),
}

/**
 * 获取算法列表。
 */
async function listAlgorithms(request: ListAlgorithmsRequest): ListAlgorithmsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAlgorithms', 'GET', '/api/v2/algorithms', 'json', false, 'json', request);
}

model ListCampaignsRequest {
  name?: string(name='Name', description='运营活动名称过滤。', position='Query'),
  pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。', position='Query'),
  pageSize?: int32(name='PageSize', description='分页大小，默认为10。', position='Query'),
  remark?: string(name='Remark', description='运营活动备注过滤。', position='Query'),
}

model ListCampaignsResponseBody = {
  data?: {
    campaigns?: [ 
      {
        createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
        id?: string(name='Id', description='运营活动Id。'),
        name?: string(name='Name', description='运营活动名称。'),
        remark?: string(name='Remark', description='备注。'),
        updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
      }
    ](name='Campaigns', description='运营活动列表。'),
    pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。'),
    pageSize?: int32(name='PageSize', description='分页大小，默认为10。'),
    totalCount?: int32(name='TotalCount', description='总运营活动数量。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model ListCampaignsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCampaignsResponseBody(name='body'),
}

/**
 * 获取运营活动列表。
 */
async function listCampaigns(request: ListCampaignsRequest): ListCampaignsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCampaigns', 'GET', '/api/v2/campaigns', 'json', false, 'json', request);
}

model ListGroupsRequest {
  name?: string(name='Name', description='人群名称过滤。', position='Query'),
  pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。', position='Query'),
  pageSize?: int32(name='PageSize', description='分页大小，默认为10。', position='Query'),
  phoneNumber?: boolean(name='PhoneNumber', description='是否包含手机号过滤。', position='Query'),
  remark?: string(name='Remark', description='人群备注过滤。', position='Query'),
  source?: int32(name='Source', description='来源过滤。', position='Query'),
  status?: int32(name='Status', description='审核状态过滤。', position='Query'),
}

model ListGroupsResponseBody = {
  data?: {
    groups?: [ 
      {
        algorithm?: string(name='Algorithm', description='关联算法，人群来源为算法。'),
        amount?: int32(name='Amount', description='人群数量。'),
        column?: string(name='Column', description='手机号列名，人群来源为CSV文件，MaxCompute，并且包含手机号时需指定。'),
        createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
        filter?: string(name='Filter', description='过滤条件，人群来源为MaxCompute时可指定。'),
        id?: string(name='Id', description='人群Id。'),
        inferenceJobId?: string(name='InferenceJobId', description='预测任务Id，人群来源为算法。'),
        name?: string(name='Name', description='人群名称。'),
        phoneNumber?: boolean(name='PhoneNumber', description='是否包含手机号，包含手机号的人群可用于触达计划。'),
        project?: string(name='Project', description='MaxCompute(ODPS)项目名，人群来源为MaxCompute时需指定。'),
        remark?: string(name='Remark', description='人群备注。'),
        source?: int32(name='Source', description='人群来源。
- 0: 文本，每行一个手机号，最多100个。
- 1: 文本文件，每行一个手机号，可通过控制台上传或指定自定义OSS地址，指定自定义OSS地址前需确保已在控制台完成一键授权。
- 2: CSV文件，需指定手机号列名，可通过控制台上传或指定自定义OSS地址，指定自定义OSS地址前需确保已在控制台完成一键授权。
- 3: MaxCompute(ODPS)表，需指定手机号列名。
- 4: 算法。'),
        status?: int32(name='Status', description='人群状态。
- 0: 检查中。
- 1: 已通过。
- 2: 未通过。'),
        table?: string(name='Table', description='MaxCompute(ODPS)表名，人群来源为MaxCompute时需指定。'),
        text?: string(name='Text', description='文本，人群来源为文本时需指定。'),
        updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
        uri?: string(name='Uri', description='文件地址，人群来源为文本文件，CSV文件，MaxCompute时需指定。'),
      }
    ](name='Groups', description='人群列表。'),
    pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。'),
    pageSize?: int32(name='PageSize', description='分页大小，默认为10。'),
    totalCount?: int32(name='TotalCount', description='总人群数量。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model ListGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListGroupsResponseBody(name='body'),
}

/**
 * 获取人群列表。
 */
async function listGroups(request: ListGroupsRequest): ListGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListGroups', 'GET', '/api/v2/groups', 'json', false, 'json', request);
}

model ListInferenceJobsRequest {
  campaignId?: string(name='CampaignId', description='归属运营活动过滤。', position='Query'),
  campaignName?: string(name='CampaignName', position='Query'),
  name?: string(name='Name', description='预测任务名称过滤。', position='Query'),
  pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。', position='Query'),
  pageSize?: int32(name='PageSize', description='分页大小，默认为10。', position='Query'),
  remark?: string(name='Remark', description='预测任务备注过滤。', position='Query'),
  status?: int32(name='Status', description='预测任务状态过滤。
- 0: 队列中。
- 1: 已提交。
- 2: 运行中。
- 3: 成功。
- 4: 失败。', position='Query'),
  trainingJobName?: string(name='TrainingJobName', position='Query'),
}

model ListInferenceJobsResponseBody = {
  data?: {
    inferenceJobs?: [ 
      {
        algorithm?: string(name='Algorithm', description='关联算法。'),
        campaignId?: string(name='CampaignId', description='关联运营活动ID。'),
        createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
        dataPath?: string(name='DataPath', description='预测数据路径，当预测人群数据分布在多个csv文件时可指定目录，指定路径前需确保已在控制台完成一键授权。'),
        groupId?: string(name='GroupId', description='预测人群，人群来源必须为多列csv，当同时指定DataPath与GroupId时，以GroupId为准。'),
        history?: string(name='History', description='预测任务日志。'),
        id?: string(name='Id', description='预测任务ID。'),
        name?: string(name='Name', description='预测任务名称。'),
        remark?: string(name='Remark', description='备注。'),
        status?: int32(name='Status', description='预测任务状态。
- 0: 队列中。
- 1: 已提交。
- 2: 运行中。
- 3: 成功。
- 4: 失败。'),
        targetGroupId?: string(name='TargetGroupId', description='关联目标人群ID，如果任务失败则人群无效。'),
        targetPath?: string(name='TargetPath', description='输出数据路径，需要为空目录，指定路径前需确保已在控制台完成一键授权。'),
        trainingJobId?: string(name='TrainingJobId', description='关联训练任务。'),
        updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
        userConfig?: string(name='UserConfig', description='用户配置。'),
      }
    ](name='InferenceJobs', description='预测任务列表。'),
    pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。'),
    pageSize?: int32(name='PageSize', description='分页大小，默认为10。'),
    totalCount?: int32(name='TotalCount', description='总预测任务数量。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model ListInferenceJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListInferenceJobsResponseBody(name='body'),
}

async function listInferenceJobs(request: ListInferenceJobsRequest): ListInferenceJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInferenceJobs', 'GET', '/api/v2/inference/jobs', 'json', false, 'json', request);
}

model ListMessageMetricsRequest {
  endDate: string(name='EndDate', description='结束日期，格式20220102。', position='Query'),
  groupId?: string(name='GroupId', description='关联人群Id。', position='Query'),
  pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。', position='Query'),
  pageSize?: int32(name='PageSize', description='分页大小，默认为10。', position='Query'),
  scheduleId?: string(name='ScheduleId', description='关联触达计划Id。', position='Query'),
  signature?: string(name='Signature', description='签名名称。', position='Query'),
  signatureId?: string(name='SignatureId', description='签名Id，同时只能指定签名名称或签名Id其中之一。', position='Query'),
  startDate: string(name='StartDate', description='开始日期，格式20220102。', position='Query'),
  templateCode?: string(name='TemplateCode', description='模板号。', position='Query'),
  templateId?: string(name='TemplateId', description='模板Id，同时只能指定模板Code或模板Id其中之一。', position='Query'),
  templateType?: int32(name='TemplateType', description='模板类型。
- 0 : 验证码。
- 1 : 短信通知。
- 2 : 推广短信。', position='Query'),
}

model ListMessageMetricsResponseBody = {
  data?: {
    metrics?: [ 
      {
        date?: string(name='Date', description='发送日期。'),
        fail?: int32(name='Fail', description='发送失败。'),
        pending?: int32(name='Pending', description='发送中。'),
        rate?: float(name='Rate', description='发送成功率。'),
        success?: int32(name='Success', description='发送成功。'),
        total?: int32(name='Total', description='总计短信数量。'),
      }
    ](name='Metrics', description='分页返回的统计数据条目列表。'),
    pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。'),
    pageSize?: int32(name='PageSize', description='分页大小，默认为10。'),
    totalCount?: int32(name='TotalCount', description='总统计数据条目数量。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model ListMessageMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMessageMetricsResponseBody(name='body'),
}

/**
 * 获取短信发送统计列表。
获取短信发送统计数据，可按指定条件获取分类别详细数据，返回数据按日期顺序排列，发送统计为空的日期默认不返回。
发送数据在48小时内会随实际短信发送状态不断更新，最终数据以48小时后数据为准。
 */
async function listMessageMetrics(request: ListMessageMetricsRequest): ListMessageMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMessageMetrics', 'GET', '/api/v2/messages/metrics', 'json', false, 'json', request);
}

model ListMessagesRequest {
  datetime: string(name='Datetime', description='发送日期，格式为20220101。', position='Query'),
  errorCode?: string(name='ErrorCode', description='短信错误码过滤。', position='Query'),
  groupId?: string(name='GroupId', description='关联人群Id过滤。', position='Query'),
  messageId?: string(name='MessageId', description='短信Id过滤，短信Id为SendMessage成功返回的Id。', position='Query'),
  pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。', position='Query'),
  pageSize?: int32(name='PageSize', description='分页大小，默认为10。', position='Query'),
  phoneNumber?: string(name='PhoneNumber', description='手机号码过滤。', position='Query'),
  requestId?: string(name='RequestId', description='短信批处理Id过滤，短信批处理Id为SendMessage成功返回的RequestId。', position='Query'),
  scheduleId?: string(name='ScheduleId', description='关联触达计划Id过滤。', position='Query'),
  signature?: string(name='Signature', description='签名名称过滤。', position='Query'),
  signatureId?: string(name='SignatureId', description='签名Id过滤，同时只能指定签名名称或签名Id其中之一。', position='Query'),
  status?: int32(name='Status', description='短信发送状态过滤。
- 0 : 发送中。
- 1 : 发送成功。
- 2 : 发送失败。', position='Query'),
  templateCode?: string(name='TemplateCode', description='模板号过滤。', position='Query'),
  templateId?: string(name='TemplateId', description='模板Id过滤，同时只能指定模板Code或模板Id其中之一。', position='Query'),
  templateType?: int32(name='TemplateType', description='模板类型过滤。
- 0 : 验证码。
- 1 : 短信通知。
- 2 : 推广短信。', position='Query'),
}

model ListMessagesResponseBody = {
  data?: {
    messages?: [ 
      {
        errorCode?: string(name='ErrorCode', description='短信错误码。'),
        groupId?: string(name='GroupId', description='关联人群Id，未关联则为空。'),
        id?: string(name='Id', description='短信序列号。'),
        outId?: string(name='OutId', description='外部拓展字段。'),
        phoneNumber?: string(name='PhoneNumber', description='手机号码。'),
        scheduleId?: string(name='ScheduleId', description='关联触达计划Id，未关联则为空。'),
        signature?: string(name='Signature', description='签名名称。'),
        status?: int32(name='Status', description='短信发送状态。
- 0 : 发送中。
- 1 : 发送成功。
- 2 : 发送失败。'),
        templateCode?: string(name='TemplateCode', description='模板号。'),
        templateParams?: string(name='TemplateParams', description='模板参数。'),
        templateType?: int32(name='TemplateType', description='模板类型。
- 0 : 验证码。
- 1 : 短信通知。
- 2 : 推广短信。'),
      }
    ](name='Messages', description='短信列表。'),
    pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。'),
    pageSize?: int32(name='PageSize', description='分页大小，默认为10。'),
    totalCount?: int32(name='TotalCount', description='短信数量。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model ListMessagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListMessagesResponseBody(name='body'),
}

/**
 * 查询短信发送详情列表。
 */
async function listMessages(request: ListMessagesRequest): ListMessagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMessages', 'GET', '/api/v2/messages', 'json', false, 'json', request);
}

model ListSchedulesRequest {
  name?: string(name='Name', description='触达计划名称过滤。', position='Query'),
  pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。', position='Query'),
  pageSize?: int32(name='PageSize', description='分页大小，默认为10。', position='Query'),
  status?: int32(name='Status', description='发送状态过滤。', position='Query'),
}

model ListSchedulesResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。'),
    pageSize?: int32(name='PageSize', description='分页大小，默认为10。'),
    schedules?: [ 
      {
        createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
        endTime?: int32(name='EndTime', description='终止时间（UTC+8）。'),
        executeTime?: string(name='ExecuteTime', description='执行时间 (UTC+8)，为空立即执行。'),
        groupId?: string(name='GroupId', description='人群Id。'),
        id?: string(name='Id', description='触达计划Id。'),
        name?: string(name='Name', description='触达计划名称。'),
        repeatCycle?: int32(name='RepeatCycle', description='重复周期，按重复周期与重复周期单位执行。'),
        repeatCycleUnit?: int32(name='RepeatCycleUnit', description='重复周期单位，若指定执行时间，则重复周期生效。
- 0: 从不（默认）。
- 1: 小时。
- 2: 天。
- 3: 周。
- 4: 月。'),
        repeatTimes?: int32(name='RepeatTimes', description='重复次数。
- -1: 不设终止时间（默认）。
- 0: 不重复。
- N: 重复N次后终止。'),
        signName?: string(name='SignName', description='签名。'),
        signatureId?: string(name='SignatureId', description='签名Id，或指定签名。'),
        status?: int32(name='Status', description='状态。
- 0: 检查中。
- 1: 检查成功。
- 2: 检查失败。
- 3: 发送中。
- 4: 发送成功。
- 5: 发送失败。'),
        templateCode?: string(name='TemplateCode', description='模板Code。'),
        templateId?: string(name='TemplateId', description='模板Id，或指定模板Code。'),
        updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
      }
    ](name='Schedules', description='触达计划列表。'),
    totalCount?: int32(name='TotalCount', description='触达计划数量。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model ListSchedulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSchedulesResponseBody(name='body'),
}

/**
 * 获取触达计划列表。
 */
async function listSchedules(request: ListSchedulesRequest): ListSchedulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSchedules', 'GET', '/api/v2/schedules', 'json', false, 'json', request);
}

model ListSignaturesRequest {
  name?: string(name='Name', description='签名名称过滤。', position='Query'),
  pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。', position='Query'),
  pageSize?: int32(name='PageSize', description='分页大小，默认为10。', position='Query'),
  status?: int32(name='Status', description='签名审核状态过滤。
- 0：审核中。
- 1：审核通过。
- 2：审核不通过。', position='Query'),
}

model ListSignaturesResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。'),
    pageSize?: int32(name='PageSize', description='分页大小，默认为10。'),
    signatures?: [ 
      {
        createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
        id?: string(name='Id', description='签名Id。'),
        name?: string(name='Name', description='签名名称。'),
        status?: int32(name='Status', description='签名审核状态。
- 0：审核中。
- 1：审核通过。
- 2：审核不通过。'),
        updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
      }
    ](name='Signatures', description='分页返回的签名列表。'),
    totalCount?: int32(name='TotalCount', description='账号下全部签名注册记录数量。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model ListSignaturesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSignaturesResponseBody(name='body'),
}

/**
 * 获取签名列表。
 */
async function listSignatures(request: ListSignaturesRequest): ListSignaturesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSignatures', 'GET', '/api/v2/signatures', 'json', false, 'json', request);
}

model ListTemplatesRequest {
  content?: string(name='Content', description='模板内容过滤。', position='Query'),
  name?: string(name='Name', description='模板名称过滤。', position='Query'),
  pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。', position='Query'),
  pageSize?: int32(name='PageSize', description='分页大小，默认为10。', position='Query'),
  status?: int32(name='Status', description='审核状态过滤。
- 0 : 审核中。
- 1 : 审核通过。
- 2 : 审核不通过。', position='Query'),
  type?: int32(name='Type', description='模板类型过滤。
- 0 : 验证码。
- 1 : 短信通知。
- 2 : 推广短信。', position='Query'),
}

model ListTemplatesResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。'),
    pageSize?: int32(name='PageSize', description='分页大小，默认为10。'),
    templates?: [ 
      {
        content?: string(name='Content', description='模板内容。'),
        createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
        description?: string(name='Description', description='申请说明。'),
        id?: string(name='Id', description='模板Id。'),
        name?: string(name='Name', description='签名名称。'),
        reason?: string(name='Reason', description='审核意见。'),
        signatureId?: string(name='SignatureId', description='签名Id。'),
        status?: int32(name='Status', description='审核状态。
- 0 : 审核中。
- 1 : 审核通过。
- 2 : 审核不通过。'),
        templateCode?: string(name='TemplateCode', description='模板Code。'),
        type?: int32(name='Type', description='模板类型。
- 0 : 验证码。
- 1 : 短信通知。
- 2 : 推广短信。'),
        updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
      }
    ](name='Templates', description='分页返回的模板列表。'),
    totalCount?: int32(name='TotalCount', description='全部模板注册记录数量。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model ListTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTemplatesResponseBody(name='body'),
}

/**
 * 获取模板列表。
 */
async function listTemplates(request: ListTemplatesRequest): ListTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTemplates', 'GET', '/api/v2/templates', 'json', false, 'json', request);
}

model ListTrainingJobsRequest {
  campaignId?: string(name='CampaignId', description='归属运营活动过滤。', position='Query'),
  campaignName?: string(name='CampaignName', description='关联运营活动名称', position='Query'),
  name?: string(name='Name', description='训练任务名称过滤。', position='Query'),
  pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。', position='Query'),
  pageSize?: int32(name='PageSize', description='分页大小，默认为10。', position='Query'),
  remark?: string(name='Remark', description='训练任务备注过滤。', position='Query'),
  status?: int32(name='Status', description='训练任务状态过滤。
- 0: 队列中。
- 1: 已提交。
- 2: 运行中。
- 3: 成功。
- 4: 失败。', position='Query'),
  trainingScheduleId?: string(name='TrainingScheduleId', description='归属训练计划过滤。', position='Query'),
}

model ListTrainingJobsResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。'),
    pageSize?: int32(name='PageSize', description='分页大小，默认为10。'),
    totalCount?: int32(name='TotalCount', description='总训练任务数量。'),
    trainingJobs?: [ 
      {
        algorithm?: string(name='Algorithm', description='关联算法ID。'),
        campaignId?: string(name='CampaignId', description='关联运营活动ID。'),
        createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
        dataPath?: string(name='DataPath', description='训练数据路径，指定路径前需确保已在控制台完成一键授权。'),
        history?: string(name='History', description='训练任务日志。'),
        id?: string(name='Id', description='训练任务ID。'),
        name?: string(name='Name', description='训练任务名称。'),
        remark?: string(name='Remark', description='备注。'),
        status?: int32(name='Status', description='训练任务状态。
- 0: 队列中。
- 1: 已提交。
- 2: 运行中。
- 3: 成功。
- 4: 失败。'),
        trainingScheduleId?: string(name='TrainingScheduleId', description='关联训练计划ID。'),
        updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
        userConfig?: string(name='UserConfig', description='用户配置。'),
      }
    ](name='TrainingJobs', description='训练任务列表。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model ListTrainingJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTrainingJobsResponseBody(name='body'),
}

async function listTrainingJobs(request: ListTrainingJobsRequest): ListTrainingJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTrainingJobs', 'GET', '/api/v2/training/jobs', 'json', false, 'json', request);
}

model SendMessageRequest {
  groupId?: string(name='GroupId', description='人群Id，用于关联人群。', position='Body'),
  outIds?: [ string ](name='OutIds', description='外部拓展字段，示例：["1234567890"]。', position='Body'),
  phoneNumbers?: [ string ](name='PhoneNumbers', description='手机号，每个手机号对应一个模板变量、上行拓展码和外部拓展字段，示例：["1234567890"]。', position='Body'),
  scheduleId?: string(name='ScheduleId', description='触达计划Id，用于关联触达计划。', position='Body'),
  signName?: string(name='SignName', description='签名名称。', position='Body'),
  signatureId?: string(name='SignatureId', description='签名Id，同时只能指定签名名称或签名Id其中之一。', position='Body'),
  smsUpExtendCodes?: [ string ](name='SmsUpExtendCodes', description='短信上行拓展码，示例：["1234567890"]。', position='Body'),
  templateCode?: string(name='TemplateCode', description='模板Code。', position='Body'),
  templateId?: string(name='TemplateId', description='模板Id，同时只能指定模板Code或模板Id其中之一。', position='Body'),
  templateParams?: [ string ](name='TemplateParams', description='短信模板变量对应的实际值，JSON格式。支持传入多个参数，示例：[{"name":"张三","number":"15038****76"}]。', position='Body'),
}

model SendMessageResponseBody = {
  data?: {
    messages?: [ 
      {
        id?: string(name='Id', description='短信Id，可使用ListMessages查询短信状态。'),
        phoneNumber?: string(name='PhoneNumber', description='手机号码。'),
      }
    ](name='Messages', description='短信结果列表，列表中手机号的顺序与输入请求手机号顺序一一对应。'),
    requestId?: string(name='RequestId', description='短信批处理Id，可使用ListMessages查询短信状态。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model SendMessageResponse = {
  headers: map[string]string(name='headers'),
  body: SendMessageResponseBody(name='body'),
}

async function sendMessage(request: SendMessageRequest): SendMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SendMessage', 'POST', '/api/v2/messages', 'json', false, 'json', request);
}

model SmsReportRequest {
  body?: [ 
    {
      bizId?: string(name='biz_id', description='发送回执ID，即发送流水号。'),
      errCode?: string(name='err_code', description='状态报告编码。'),
      errMsg?: string(name='err_msg', description='状态报告说明。'),
      messageId?: string(name='message_id', description='短信Id。调用发送接口SendMessage发送短信时，返回值中的Id字段。可使用短信Id在接口ListMessages查询具体的发送状态。'),
      outId?: string(name='out_id', description='外部拓展字段。'),
      phoneNumber?: string(name='phone_number', description='手机号码。'),
      reportTime?: string(name='report_time', description='状态报告时间。'),
      requestId?: string(name='request_id', description='短信批处理Id。调用发送接口SendMessage发送短信时，返回值中的RequestId字段。可使用短信批处理Id在接口ListMessages查询具体的发送状态。'),
      sendTime?: string(name='send_time', description='发送时间。'),
      signName?: string(name='sign_name', description='签名。'),
      smsSize?: string(name='sms_size', description='短信长度。短信长度不超过70个字，按照一条短信计费；超过70个字，即为长短信，按照67字/条拆分成多条计费。'),
      success?: boolean(name='success', description='是否接收成功。
- true : 接收成功。
- false : 接收失败。'),
      templateCode?: string(name='template_code', description='模板号。'),
    }
  ](name='body', description='请求参数的主体信息。', position='Body'),
}

model SmsReportResponseBody = {
  code?: int32(name='code', description='应答编码。'),
  msg?: string(name='msg', description='描述信息。'),
}

model SmsReportResponse = {
  headers: map[string]string(name='headers'),
  body: SmsReportResponseBody(name='body'),
}

/**
 * 短信回执。
 */
async function smsReport(request: SmsReportRequest): SmsReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SmsReport', 'POST', '/api/v2/recall/report', 'json', false, 'json', request);
}

model SmsUpRequest {
  body?: [ 
    {
      content?: string(name='content', description='发送内容。'),
      destCode?: string(name='dest_code', description='上行短信扩展号码，系统后台自动生成，不支持自定义传入。'),
      phoneNumber?: string(name='phone_number', description='手机号码。'),
      sendTime?: string(name='send_time', description='发送时间。'),
      sequenceId?: int32(name='sequence_id', description='序列号。'),
      signName?: string(name='sign_name', description='签名信息。'),
    }
  ](name='body', description='请求参数的主体信息。', position='Body'),
}

model SmsUpResponseBody = {
  code?: int32(name='code', description='应答编码。'),
  msg?: string(name='msg', description='描述信息。'),
}

model SmsUpResponse = {
  headers: map[string]string(name='headers'),
  body: SmsUpResponseBody(name='body'),
}

/**
 * 短信上行。
 */
async function smsUp(request: SmsUpRequest): SmsUpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SmsUp', 'POST', '/api/v2/recall/up', 'json', false, 'json', request);
}

model UpdateCampaignRequest {
  id?: string(name='Id', description='运营活动Id，可通过ListCampaigns查询账号下的运营活动列表，获取运营活动Id。', position='Path'),
  name?: string(name='Name', description='运营活动名称。', position='Body'),
  remark?: string(name='Remark', description='备注。', position='Body'),
}

model UpdateCampaignResponseBody = {
  data?: {
    createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
    id?: string(name='Id', description='运营活动Id。'),
    name?: string(name='Name', description='运营活动名称。'),
    remark?: string(name='Remark', description='备注。'),
    updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model UpdateCampaignResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCampaignResponseBody(name='body'),
}

/**
 * 更新运营活动
 */
async function updateCampaign(request: UpdateCampaignRequest): UpdateCampaignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateCampaign', 'PUT', '/api/v2/campaigns/{Id}', 'json', false, 'json', request);
}

model UpdateReportUrlRequest {
  url?: string(name='Url', description='可公开访问的地址。', position='Body'),
}

model UpdateReportUrlResponseBody = {
  data?: string(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model UpdateReportUrlResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateReportUrlResponseBody(name='body'),
}

/**
 * 更新回执Url。

 */
async function updateReportUrl(request: UpdateReportUrlRequest): UpdateReportUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateReportUrl', 'PUT', '/api/v2/users/reportUrl', 'json', false, 'json', request);
}

model UpdateUploadUrlRequest {
  url?: string(name='Url', description='可公开访问的地址。', position='Body'),
}

model UpdateUploadUrlResponseBody = {
  data?: string(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model UpdateUploadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUploadUrlResponseBody(name='body'),
}

/**
 * 更新上行Url。
 */
async function updateUploadUrl(request: UpdateUploadUrlRequest): UpdateUploadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateUploadUrl', 'PUT', '/api/v2/users/uploadUrl', 'json', false, 'json', request);
}

