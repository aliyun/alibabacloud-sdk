/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('paiplugin', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateCampaignRequest {
  name?: string(name='Name'),
  remark?: string(name='Remark'),
}

model CreateCampaignResponseBody = {
  data?: {
    createdTime?: string(name='CreatedTime'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    remark?: string(name='Remark'),
    updatedTime?: string(name='UpdatedTime'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model CreateCampaignResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCampaignResponseBody(name='body'),
}

/**
 * 注册运营活动。
 */
async function createCampaign(request: CreateCampaignRequest): CreateCampaignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createCampaignWithOptions(request, headers, runtime);
}

async function createCampaignWithOptions(request: CreateCampaignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCampaignResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateCampaign',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/campaigns`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateGroupRequest {
  algorithm?: string(name='Algorithm'),
  column?: string(name='Column'),
  filter?: string(name='Filter'),
  inferenceJobId?: string(name='InferenceJobId'),
  name?: string(name='Name'),
  phoneNumber?: boolean(name='PhoneNumber'),
  project?: string(name='Project'),
  remark?: string(name='Remark'),
  source?: int32(name='Source'),
  table?: string(name='Table'),
  text?: string(name='Text'),
  uri?: string(name='Uri'),
}

model CreateGroupResponseBody = {
  data?: {
    algorithm?: string(name='Algorithm'),
    amount?: int32(name='Amount'),
    column?: string(name='Column'),
    createdTime?: string(name='CreatedTime'),
    filter?: string(name='Filter'),
    id?: string(name='Id'),
    inferenceJobId?: string(name='InferenceJobId'),
    name?: string(name='Name'),
    phoneNumber?: boolean(name='PhoneNumber'),
    project?: string(name='Project'),
    remark?: string(name='Remark'),
    source?: int32(name='Source'),
    status?: int32(name='Status'),
    table?: string(name='Table'),
    text?: string(name='Text'),
    updatedTime?: string(name='UpdatedTime'),
    uri?: string(name='Uri'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model CreateGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateGroupResponseBody(name='body'),
}

/**
 * 注册人群。
 */
async function createGroup(request: CreateGroupRequest): CreateGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createGroupWithOptions(request, headers, runtime);
}

async function createGroupWithOptions(request: CreateGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.algorithm)) {
    body['Algorithm'] = request.algorithm;
  }
  if (!Util.isUnset(request.column)) {
    body['Column'] = request.column;
  }
  if (!Util.isUnset(request.filter)) {
    body['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.inferenceJobId)) {
    body['InferenceJobId'] = request.inferenceJobId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    body['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.project)) {
    body['Project'] = request.project;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.source)) {
    body['Source'] = request.source;
  }
  if (!Util.isUnset(request.table)) {
    body['Table'] = request.table;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.uri)) {
    body['Uri'] = request.uri;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateGroup',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/groups`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateInferenceJobRequest {
  algorithm?: string(name='Algorithm'),
  campaignId?: string(name='CampaignId'),
  dataPath?: string(name='DataPath'),
  name?: string(name='Name'),
  remark?: string(name='Remark'),
  targetPath?: string(name='TargetPath'),
  trainingJobId?: string(name='TrainingJobId'),
  userConfig?: string(name='UserConfig'),
}

model CreateInferenceJobResponseBody = {
  data?: {
    algorithm?: string(name='Algorithm'),
    campaignId?: string(name='CampaignId'),
    createdTime?: string(name='CreatedTime'),
    dataPath?: string(name='DataPath'),
    groupId?: string(name='GroupId'),
    history?: string(name='History'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    remark?: string(name='Remark'),
    status?: int32(name='Status'),
    targetPath?: string(name='TargetPath'),
    trainingJobId?: string(name='TrainingJobId'),
    updatedTime?: string(name='UpdatedTime'),
    userConfig?: string(name='UserConfig'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model CreateInferenceJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInferenceJobResponseBody(name='body'),
}

/**
 * 注册预测任务。
 */
async function createInferenceJob(request: CreateInferenceJobRequest): CreateInferenceJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createInferenceJobWithOptions(request, headers, runtime);
}

async function createInferenceJobWithOptions(request: CreateInferenceJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateInferenceJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.algorithm)) {
    body['Algorithm'] = request.algorithm;
  }
  if (!Util.isUnset(request.campaignId)) {
    body['CampaignId'] = request.campaignId;
  }
  if (!Util.isUnset(request.dataPath)) {
    body['DataPath'] = request.dataPath;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.targetPath)) {
    body['TargetPath'] = request.targetPath;
  }
  if (!Util.isUnset(request.trainingJobId)) {
    body['TrainingJobId'] = request.trainingJobId;
  }
  if (!Util.isUnset(request.userConfig)) {
    body['UserConfig'] = request.userConfig;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateInferenceJob',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/inference/jobs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateScheduleRequest {
  endTime?: int32(name='EndTime'),
  executeTime?: string(name='ExecuteTime'),
  groupId?: string(name='GroupId'),
  name?: string(name='Name'),
  repeatCycle?: int32(name='RepeatCycle'),
  repeatCycleUnit?: int32(name='RepeatCycleUnit'),
  repeatTimes?: int32(name='RepeatTimes'),
  signName?: string(name='SignName'),
  signatureId?: string(name='SignatureId'),
  templateCode?: string(name='TemplateCode'),
  templateId?: string(name='TemplateId'),
}

model CreateScheduleResponseBody = {
  data?: {
    createdTime?: string(name='CreatedTime'),
    endTime?: int32(name='EndTime'),
    executeTime?: string(name='ExecuteTime'),
    groupId?: string(name='GroupId'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    repeatCycle?: int32(name='RepeatCycle'),
    repeatCycleUnit?: int32(name='RepeatCycleUnit'),
    repeatTimes?: int32(name='RepeatTimes'),
    signName?: string(name='SignName'),
    signatureId?: string(name='SignatureId'),
    status?: int32(name='Status'),
    templateCode?: string(name='TemplateCode'),
    templateId?: string(name='TemplateId'),
    updatedTime?: string(name='UpdatedTime'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model CreateScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateScheduleResponseBody(name='body'),
}

/**
 * 注册触达计划。
 */
async function createSchedule(request: CreateScheduleRequest): CreateScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createScheduleWithOptions(request, headers, runtime);
}

async function createScheduleWithOptions(request: CreateScheduleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateScheduleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.executeTime)) {
    body['ExecuteTime'] = request.executeTime;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.repeatCycle)) {
    body['RepeatCycle'] = request.repeatCycle;
  }
  if (!Util.isUnset(request.repeatCycleUnit)) {
    body['RepeatCycleUnit'] = request.repeatCycleUnit;
  }
  if (!Util.isUnset(request.repeatTimes)) {
    body['RepeatTimes'] = request.repeatTimes;
  }
  if (!Util.isUnset(request.signName)) {
    body['SignName'] = request.signName;
  }
  if (!Util.isUnset(request.signatureId)) {
    body['SignatureId'] = request.signatureId;
  }
  if (!Util.isUnset(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSchedule',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/schedules`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateSignatureRequest {
  description?: string(name='Description'),
  name?: string(name='Name'),
}

model CreateSignatureResponseBody = {
  data?: {
    createdTime?: string(name='CreatedTime'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    status?: int32(name='Status'),
    updatedTime?: string(name='UpdatedTime'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model CreateSignatureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSignatureResponseBody(name='body'),
}

/**
 * 注册签名。

 */
async function createSignature(request: CreateSignatureRequest): CreateSignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createSignatureWithOptions(request, headers, runtime);
}

async function createSignatureWithOptions(request: CreateSignatureRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSignatureResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSignature',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/signatures`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateTemplateRequest {
  content?: string(name='Content'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  signature?: string(name='Signature'),
  signatureId?: string(name='SignatureId'),
  type?: int32(name='Type'),
}

model CreateTemplateResponseBody = {
  data?: {
    content?: string(name='Content'),
    createdTime?: string(name='CreatedTime'),
    description?: string(name='Description'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    reason?: string(name='Reason'),
    signatureId?: string(name='SignatureId'),
    status?: int32(name='Status'),
    templateCode?: string(name='TemplateCode'),
    type?: int32(name='Type'),
    updatedTime?: string(name='UpdatedTime'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model CreateTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTemplateResponseBody(name='body'),
}

/**
 * 注册模板。

 */
async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTemplateWithOptions(request, headers, runtime);
}

async function createTemplateWithOptions(request: CreateTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.signature)) {
    body['Signature'] = request.signature;
  }
  if (!Util.isUnset(request.signatureId)) {
    body['SignatureId'] = request.signatureId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTemplate',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/templates`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateTrainingJobRequest {
  algorithm?: string(name='Algorithm'),
  campaignId?: string(name='CampaignId'),
  dataPath?: string(name='DataPath'),
  name?: string(name='Name'),
  remark?: string(name='Remark'),
  userConfig?: string(name='UserConfig'),
}

model CreateTrainingJobResponseBody = {
  data?: {
    algorithm?: string(name='Algorithm'),
    campaignId?: string(name='CampaignId'),
    createdTime?: string(name='CreatedTime'),
    dataPath?: string(name='DataPath'),
    history?: string(name='History'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    remark?: string(name='Remark'),
    status?: int32(name='Status'),
    updatedTime?: string(name='UpdatedTime'),
    userConfig?: string(name='UserConfig'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model CreateTrainingJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTrainingJobResponseBody(name='body'),
}

/**
 * 注册训练任务。

 */
async function createTrainingJob(request: CreateTrainingJobRequest): CreateTrainingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTrainingJobWithOptions(request, headers, runtime);
}

async function createTrainingJobWithOptions(request: CreateTrainingJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTrainingJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.algorithm)) {
    body['Algorithm'] = request.algorithm;
  }
  if (!Util.isUnset(request.campaignId)) {
    body['CampaignId'] = request.campaignId;
  }
  if (!Util.isUnset(request.dataPath)) {
    body['DataPath'] = request.dataPath;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.userConfig)) {
    body['UserConfig'] = request.userConfig;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTrainingJob',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/training/jobs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteCampaignResponseBody = {
  data?: string(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model DeleteCampaignResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCampaignResponseBody(name='body'),
}

/**
 * 删除运营活动

 */
async function deleteCampaign(Id: string): DeleteCampaignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteCampaignWithOptions(Id, headers, runtime);
}

async function deleteCampaignWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteCampaignResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteCampaign',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/campaigns/${OpenApiUtil.getEncodeParam(Id)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteGroupResponseBody = {
  data?: string(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model DeleteGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGroupResponseBody(name='body'),
}

/**
 * 删除人群

 */
async function deleteGroup(Id: string): DeleteGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteGroupWithOptions(Id, headers, runtime);
}

async function deleteGroupWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteGroup',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/groups/${OpenApiUtil.getEncodeParam(Id)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteInferenceJobResponseBody = {
  data?: string(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model DeleteInferenceJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInferenceJobResponseBody(name='body'),
}

/**
 * 删除预测任务。
 */
async function deleteInferenceJob(Id: string): DeleteInferenceJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteInferenceJobWithOptions(Id, headers, runtime);
}

async function deleteInferenceJobWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteInferenceJobResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteInferenceJob',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/inference/jobs/${OpenApiUtil.getEncodeParam(Id)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteScheduleResponseBody = {
  data?: string(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model DeleteScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteScheduleResponseBody(name='body'),
}

/**
 * 删除触达计划。

 */
async function deleteSchedule(Id: string): DeleteScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteScheduleWithOptions(Id, headers, runtime);
}

async function deleteScheduleWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteScheduleResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteSchedule',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/schedules/${OpenApiUtil.getEncodeParam(Id)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteSignatureResponseBody = {
  data?: string(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model DeleteSignatureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSignatureResponseBody(name='body'),
}

/**
 * 删除签名。

 */
async function deleteSignature(Id: string): DeleteSignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteSignatureWithOptions(Id, headers, runtime);
}

async function deleteSignatureWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSignatureResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteSignature',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/signatures/${OpenApiUtil.getEncodeParam(Id)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteTemplateResponseBody = {
  data?: string(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model DeleteTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTemplateResponseBody(name='body'),
}

/**
 * 删除模板

 */
async function deleteTemplate(Id: string): DeleteTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteTemplateWithOptions(Id, headers, runtime);
}

async function deleteTemplateWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTemplateResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteTemplate',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/templates/${OpenApiUtil.getEncodeParam(Id)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteTrainingJobResponseBody = {
  data?: string(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model DeleteTrainingJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTrainingJobResponseBody(name='body'),
}

/**
 * 删除训练任务。
 */
async function deleteTrainingJob(Id: string): DeleteTrainingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteTrainingJobWithOptions(Id, headers, runtime);
}

async function deleteTrainingJobWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTrainingJobResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteTrainingJob',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/training/jobs/${OpenApiUtil.getEncodeParam(Id)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetAlgorithmResponseBody = {
  data?: {
    description?: string(name='Description'),
    id?: string(name='Id'),
    inferUserConfigMap?: string(name='InferUserConfigMap'),
    name?: string(name='Name'),
    trainUserConfigMap?: string(name='TrainUserConfigMap'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model GetAlgorithmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAlgorithmResponseBody(name='body'),
}

/**
 * 获取算法详情。
 */
async function getAlgorithm(Id: string): GetAlgorithmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getAlgorithmWithOptions(Id, headers, runtime);
}

async function getAlgorithmWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetAlgorithmResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetAlgorithm',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/algorithms/${OpenApiUtil.getEncodeParam(Id)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetCampaignResponseBody = {
  data?: {
    createdTime?: string(name='CreatedTime'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    remark?: string(name='Remark'),
    updatedTime?: string(name='UpdatedTime'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model GetCampaignResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCampaignResponseBody(name='body'),
}

/**
 * 获取运营活动详情。
 */
async function getCampaign(Id: string): GetCampaignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getCampaignWithOptions(Id, headers, runtime);
}

async function getCampaignWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetCampaignResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetCampaign',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/campaigns/${OpenApiUtil.getEncodeParam(Id)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetGroupResponseBody = {
  data?: {
    algorithm?: string(name='Algorithm'),
    amount?: int32(name='Amount'),
    campaignId?: string(name='CampaignId'),
    column?: string(name='Column'),
    createdTime?: string(name='CreatedTime'),
    filter?: string(name='Filter'),
    history?: string(name='History'),
    id?: string(name='Id'),
    inferenceJobId?: string(name='InferenceJobId'),
    name?: string(name='Name'),
    phoneNumber?: boolean(name='PhoneNumber'),
    project?: string(name='Project'),
    remark?: string(name='Remark'),
    source?: int32(name='Source'),
    status?: int32(name='Status'),
    table?: string(name='Table'),
    text?: string(name='Text'),
    updatedTime?: string(name='UpdatedTime'),
    uri?: string(name='Uri'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model GetGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGroupResponseBody(name='body'),
}

/**
 * 获取人群详情。
 */
async function getGroup(Id: string): GetGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getGroupWithOptions(Id, headers, runtime);
}

async function getGroupWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetGroup',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/groups/${OpenApiUtil.getEncodeParam(Id)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetInferenceJobResponseBody = {
  data?: {
    algorithm?: string(name='Algorithm'),
    campaignId?: string(name='CampaignId'),
    createdTime?: string(name='CreatedTime'),
    dataPath?: string(name='DataPath'),
    groupId?: string(name='GroupId'),
    history?: string(name='History'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    remark?: string(name='Remark'),
    status?: int32(name='Status'),
    targetPath?: string(name='TargetPath'),
    trainingJobId?: string(name='TrainingJobId'),
    updatedTime?: string(name='UpdatedTime'),
    userConfig?: string(name='UserConfig'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model GetInferenceJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInferenceJobResponseBody(name='body'),
}

/**
 * 获取预测任务详情。
 */
async function getInferenceJob(Id: string): GetInferenceJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getInferenceJobWithOptions(Id, headers, runtime);
}

async function getInferenceJobWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetInferenceJobResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetInferenceJob',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/inference/jobs/${OpenApiUtil.getEncodeParam(Id)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetMessageConfigResponseBody = {
  data?: {
    smsReportUrl?: string(name='SmsReportUrl'),
    smsUpUrl?: string(name='SmsUpUrl'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model GetMessageConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMessageConfigResponseBody(name='body'),
}

/**
 * 获取短信配置。
 */
async function getMessageConfig(): GetMessageConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getMessageConfigWithOptions(headers, runtime);
}

async function getMessageConfigWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): GetMessageConfigResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetMessageConfig',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/users/messageConfig`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetScheduleResponseBody = {
  data?: {
    createdTime?: string(name='CreatedTime'),
    endTime?: int32(name='EndTime'),
    executeTime?: string(name='ExecuteTime'),
    groupId?: string(name='GroupId'),
    history?: string(name='History'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    repeatCycle?: int32(name='RepeatCycle'),
    repeatCycleUnit?: int32(name='RepeatCycleUnit'),
    repeatTimes?: int32(name='RepeatTimes'),
    signName?: string(name='SignName'),
    signatureId?: string(name='SignatureId'),
    status?: int32(name='Status'),
    templateCode?: string(name='TemplateCode'),
    templateId?: string(name='TemplateId'),
    updatedTime?: string(name='UpdatedTime'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model GetScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetScheduleResponseBody(name='body'),
}

/**
 * 获取触达计划详情。
 */
async function getSchedule(Id: string): GetScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getScheduleWithOptions(Id, headers, runtime);
}

async function getScheduleWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetScheduleResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetSchedule',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/schedules/${OpenApiUtil.getEncodeParam(Id)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetSignatureResponseBody = {
  data?: {
    createdTime?: string(name='CreatedTime'),
    description?: string(name='Description'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    reason?: string(name='Reason'),
    status?: int32(name='Status'),
    updatedTime?: string(name='UpdatedTime'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model GetSignatureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSignatureResponseBody(name='body'),
}

/**
 * 获取签名详情。
 */
async function getSignature(Id: string): GetSignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSignatureWithOptions(Id, headers, runtime);
}

async function getSignatureWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetSignatureResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetSignature',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/signatures/${OpenApiUtil.getEncodeParam(Id)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetTemplateResponseBody = {
  data?: {
    content?: string(name='Content'),
    createdTime?: string(name='CreatedTime'),
    description?: string(name='Description'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    reason?: string(name='Reason'),
    signatureId?: string(name='SignatureId'),
    status?: int32(name='Status'),
    templateCode?: string(name='TemplateCode'),
    type?: int32(name='Type'),
    updatedTime?: string(name='UpdatedTime'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model GetTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTemplateResponseBody(name='body'),
}

/**
 * 获取模板详情。
 */
async function getTemplate(Id: string): GetTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTemplateWithOptions(Id, headers, runtime);
}

async function getTemplateWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetTemplateResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetTemplate',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/templates/${OpenApiUtil.getEncodeParam(Id)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetTrainingJobResponseBody = {
  data?: {
    algorithm?: string(name='Algorithm'),
    campaignId?: string(name='CampaignId'),
    createdTime?: string(name='CreatedTime'),
    dataPath?: string(name='DataPath'),
    history?: string(name='History'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    remark?: string(name='Remark'),
    status?: int32(name='Status'),
    updatedTime?: string(name='UpdatedTime'),
    userConfig?: string(name='UserConfig'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model GetTrainingJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTrainingJobResponseBody(name='body'),
}

/**
 * 获取训练任务详情。
 */
async function getTrainingJob(Id: string): GetTrainingJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTrainingJobWithOptions(Id, headers, runtime);
}

async function getTrainingJobWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetTrainingJobResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetTrainingJob',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/training/jobs/${OpenApiUtil.getEncodeParam(Id)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetUserResponseBody = {
  data?: {
    accountStatus?: int32(name='AccountStatus'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserResponseBody(name='body'),
}

/**
 * 获取账号状态。
 */
async function getUser(): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getUserWithOptions(headers, runtime);
}

async function getUserWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): GetUserResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetUser',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/users`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListAlgorithmsRequest {
  id?: string(name='Id'),
  name?: string(name='Name'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListAlgorithmsResponseBody = {
  data?: {
    algorithms?: [ 
      {
        id?: string(name='Id'),
        name?: string(name='Name'),
      }
    ](name='Algorithms'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model ListAlgorithmsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAlgorithmsResponseBody(name='body'),
}

/**
 * 获取算法列表。
 */
async function listAlgorithms(request: ListAlgorithmsRequest): ListAlgorithmsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAlgorithmsWithOptions(request, headers, runtime);
}

async function listAlgorithmsWithOptions(request: ListAlgorithmsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAlgorithmsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAlgorithms',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/algorithms`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListCampaignsRequest {
  name?: string(name='Name'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  remark?: string(name='Remark'),
}

model ListCampaignsResponseBody = {
  data?: {
    campaigns?: [ 
      {
        createdTime?: string(name='CreatedTime'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        remark?: string(name='Remark'),
        updatedTime?: string(name='UpdatedTime'),
      }
    ](name='Campaigns'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model ListCampaignsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCampaignsResponseBody(name='body'),
}

/**
 * 获取运营活动列表。
 */
async function listCampaigns(request: ListCampaignsRequest): ListCampaignsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listCampaignsWithOptions(request, headers, runtime);
}

async function listCampaignsWithOptions(request: ListCampaignsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListCampaignsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCampaigns',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/campaigns`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListGroupsRequest {
  name?: string(name='Name'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  phoneNumber?: boolean(name='PhoneNumber'),
  remark?: string(name='Remark'),
  source?: int32(name='Source'),
  status?: int32(name='Status'),
}

model ListGroupsResponseBody = {
  data?: {
    groups?: [ 
      {
        algorithm?: string(name='Algorithm'),
        amount?: int32(name='Amount'),
        column?: string(name='Column'),
        createdTime?: string(name='CreatedTime'),
        filter?: string(name='Filter'),
        id?: string(name='Id'),
        inferenceJobId?: string(name='InferenceJobId'),
        name?: string(name='Name'),
        phoneNumber?: boolean(name='PhoneNumber'),
        project?: string(name='Project'),
        remark?: string(name='Remark'),
        source?: int32(name='Source'),
        status?: int32(name='Status'),
        table?: string(name='Table'),
        text?: string(name='Text'),
        updatedTime?: string(name='UpdatedTime'),
        uri?: string(name='Uri'),
      }
    ](name='Groups'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model ListGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGroupsResponseBody(name='body'),
}

/**
 * 获取人群列表。
 */
async function listGroups(request: ListGroupsRequest): ListGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listGroupsWithOptions(request, headers, runtime);
}

async function listGroupsWithOptions(request: ListGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListGroupsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGroups',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/groups`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListInferenceJobsRequest {
  campaignId?: string(name='CampaignId'),
  campaignName?: string(name='CampaignName'),
  name?: string(name='Name'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  remark?: string(name='Remark'),
  status?: int32(name='Status'),
  trainingJobName?: string(name='TrainingJobName'),
}

model ListInferenceJobsResponseBody = {
  data?: {
    inferenceJobs?: [ 
      {
        algorithm?: string(name='Algorithm'),
        campaignId?: string(name='CampaignId'),
        createdTime?: string(name='CreatedTime'),
        dataPath?: string(name='DataPath'),
        groupId?: string(name='GroupId'),
        history?: string(name='History'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        remark?: string(name='Remark'),
        status?: int32(name='Status'),
        targetGroupId?: string(name='TargetGroupId'),
        targetPath?: string(name='TargetPath'),
        trainingJobId?: string(name='TrainingJobId'),
        updatedTime?: string(name='UpdatedTime'),
        userConfig?: string(name='UserConfig'),
      }
    ](name='InferenceJobs'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model ListInferenceJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInferenceJobsResponseBody(name='body'),
}

async function listInferenceJobs(request: ListInferenceJobsRequest): ListInferenceJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInferenceJobsWithOptions(request, headers, runtime);
}

async function listInferenceJobsWithOptions(request: ListInferenceJobsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInferenceJobsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.campaignId)) {
    query['CampaignId'] = request.campaignId;
  }
  if (!Util.isUnset(request.campaignName)) {
    query['CampaignName'] = request.campaignName;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.trainingJobName)) {
    query['TrainingJobName'] = request.trainingJobName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInferenceJobs',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/inference/jobs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListMessageMetricsRequest {
  endDate?: string(name='EndDate'),
  groupId?: string(name='GroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  scheduleId?: string(name='ScheduleId'),
  signature?: string(name='Signature'),
  signatureId?: string(name='SignatureId'),
  startDate?: string(name='StartDate'),
  templateCode?: string(name='TemplateCode'),
  templateId?: string(name='TemplateId'),
  templateType?: int32(name='TemplateType'),
}

model ListMessageMetricsResponseBody = {
  data?: {
    metrics?: [ 
      {
        date?: string(name='Date'),
        fail?: int32(name='Fail'),
        pending?: int32(name='Pending'),
        rate?: float(name='Rate'),
        success?: int32(name='Success'),
        total?: int32(name='Total'),
      }
    ](name='Metrics'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model ListMessageMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMessageMetricsResponseBody(name='body'),
}

/**
 * 获取短信发送统计列表。
获取短信发送统计数据，可按指定条件获取分类别详细数据，返回数据按日期顺序排列，发送统计为空的日期默认不返回。
发送数据在48小时内会随实际短信发送状态不断更新，最终数据以48小时后数据为准。
 */
async function listMessageMetrics(request: ListMessageMetricsRequest): ListMessageMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listMessageMetricsWithOptions(request, headers, runtime);
}

async function listMessageMetricsWithOptions(request: ListMessageMetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMessageMetricsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.scheduleId)) {
    query['ScheduleId'] = request.scheduleId;
  }
  if (!Util.isUnset(request.signature)) {
    query['Signature'] = request.signature;
  }
  if (!Util.isUnset(request.signatureId)) {
    query['SignatureId'] = request.signatureId;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMessageMetrics',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/messages/metrics`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListMessagesRequest {
  datetime?: string(name='Datetime'),
  errorCode?: string(name='ErrorCode'),
  groupId?: string(name='GroupId'),
  messageId?: string(name='MessageId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  phoneNumber?: string(name='PhoneNumber'),
  requestId?: string(name='RequestId'),
  scheduleId?: string(name='ScheduleId'),
  signature?: string(name='Signature'),
  signatureId?: string(name='SignatureId'),
  status?: int32(name='Status'),
  templateCode?: string(name='TemplateCode'),
  templateId?: string(name='TemplateId'),
  templateType?: int32(name='TemplateType'),
}

model ListMessagesResponseBody = {
  data?: {
    messages?: [ 
      {
        errorCode?: string(name='ErrorCode'),
        groupId?: string(name='GroupId'),
        id?: string(name='Id'),
        outId?: string(name='OutId'),
        phoneNumber?: string(name='PhoneNumber'),
        scheduleId?: string(name='ScheduleId'),
        signature?: string(name='Signature'),
        status?: int32(name='Status'),
        templateCode?: string(name='TemplateCode'),
        templateParams?: string(name='TemplateParams'),
        templateType?: int32(name='TemplateType'),
      }
    ](name='Messages'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model ListMessagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMessagesResponseBody(name='body'),
}

/**
 * 查询短信发送详情列表。
 */
async function listMessages(request: ListMessagesRequest): ListMessagesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listMessagesWithOptions(request, headers, runtime);
}

async function listMessagesWithOptions(request: ListMessagesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMessagesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.datetime)) {
    query['Datetime'] = request.datetime;
  }
  if (!Util.isUnset(request.errorCode)) {
    query['ErrorCode'] = request.errorCode;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.messageId)) {
    query['MessageId'] = request.messageId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.scheduleId)) {
    query['ScheduleId'] = request.scheduleId;
  }
  if (!Util.isUnset(request.signature)) {
    query['Signature'] = request.signature;
  }
  if (!Util.isUnset(request.signatureId)) {
    query['SignatureId'] = request.signatureId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMessages',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/messages`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListSchedulesRequest {
  name?: string(name='Name'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  status?: int32(name='Status'),
}

model ListSchedulesResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    schedules?: [ 
      {
        createdTime?: string(name='CreatedTime'),
        endTime?: int32(name='EndTime'),
        executeTime?: string(name='ExecuteTime'),
        groupId?: string(name='GroupId'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        repeatCycle?: int32(name='RepeatCycle'),
        repeatCycleUnit?: int32(name='RepeatCycleUnit'),
        repeatTimes?: int32(name='RepeatTimes'),
        signName?: string(name='SignName'),
        signatureId?: string(name='SignatureId'),
        status?: int32(name='Status'),
        templateCode?: string(name='TemplateCode'),
        templateId?: string(name='TemplateId'),
        updatedTime?: string(name='UpdatedTime'),
      }
    ](name='Schedules'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model ListSchedulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSchedulesResponseBody(name='body'),
}

/**
 * 获取触达计划列表。
 */
async function listSchedules(request: ListSchedulesRequest): ListSchedulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSchedulesWithOptions(request, headers, runtime);
}

async function listSchedulesWithOptions(request: ListSchedulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSchedulesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSchedules',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/schedules`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListSignaturesRequest {
  name?: string(name='Name'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  status?: int32(name='Status'),
}

model ListSignaturesResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    signatures?: [ 
      {
        createdTime?: string(name='CreatedTime'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        status?: int32(name='Status'),
        updatedTime?: string(name='UpdatedTime'),
      }
    ](name='Signatures'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model ListSignaturesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSignaturesResponseBody(name='body'),
}

/**
 * 获取签名列表。
 */
async function listSignatures(request: ListSignaturesRequest): ListSignaturesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSignaturesWithOptions(request, headers, runtime);
}

async function listSignaturesWithOptions(request: ListSignaturesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSignaturesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSignatures',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/signatures`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListTemplatesRequest {
  content?: string(name='Content'),
  name?: string(name='Name'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  status?: int32(name='Status'),
  type?: int32(name='Type'),
}

model ListTemplatesResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    templates?: [ 
      {
        content?: string(name='Content'),
        createdTime?: string(name='CreatedTime'),
        description?: string(name='Description'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        reason?: string(name='Reason'),
        signatureId?: string(name='SignatureId'),
        status?: int32(name='Status'),
        templateCode?: string(name='TemplateCode'),
        type?: int32(name='Type'),
        updatedTime?: string(name='UpdatedTime'),
      }
    ](name='Templates'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model ListTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTemplatesResponseBody(name='body'),
}

/**
 * 获取模板列表。
 */
async function listTemplates(request: ListTemplatesRequest): ListTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTemplatesWithOptions(request, headers, runtime);
}

async function listTemplatesWithOptions(request: ListTemplatesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTemplatesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTemplates',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/templates`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListTrainingJobsRequest {
  campaignId?: string(name='CampaignId'),
  campaignName?: string(name='CampaignName'),
  name?: string(name='Name'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  remark?: string(name='Remark'),
  status?: int32(name='Status'),
  trainingScheduleId?: string(name='TrainingScheduleId'),
}

model ListTrainingJobsResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    trainingJobs?: [ 
      {
        algorithm?: string(name='Algorithm'),
        campaignId?: string(name='CampaignId'),
        createdTime?: string(name='CreatedTime'),
        dataPath?: string(name='DataPath'),
        history?: string(name='History'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        remark?: string(name='Remark'),
        status?: int32(name='Status'),
        trainingScheduleId?: string(name='TrainingScheduleId'),
        updatedTime?: string(name='UpdatedTime'),
        userConfig?: string(name='UserConfig'),
      }
    ](name='TrainingJobs'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model ListTrainingJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTrainingJobsResponseBody(name='body'),
}

async function listTrainingJobs(request: ListTrainingJobsRequest): ListTrainingJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTrainingJobsWithOptions(request, headers, runtime);
}

async function listTrainingJobsWithOptions(request: ListTrainingJobsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTrainingJobsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.campaignId)) {
    query['CampaignId'] = request.campaignId;
  }
  if (!Util.isUnset(request.campaignName)) {
    query['CampaignName'] = request.campaignName;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.trainingScheduleId)) {
    query['TrainingScheduleId'] = request.trainingScheduleId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTrainingJobs',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/training/jobs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SendMessageRequest {
  groupId?: string(name='GroupId'),
  outIds?: [ string ](name='OutIds'),
  phoneNumbers?: [ string ](name='PhoneNumbers'),
  scheduleId?: string(name='ScheduleId'),
  signName?: string(name='SignName'),
  signatureId?: string(name='SignatureId'),
  smsUpExtendCodes?: [ string ](name='SmsUpExtendCodes'),
  templateCode?: string(name='TemplateCode'),
  templateId?: string(name='TemplateId'),
  templateParams?: [ string ](name='TemplateParams'),
}

model SendMessageResponseBody = {
  data?: {
    messages?: [ 
      {
        id?: string(name='Id'),
        phoneNumber?: string(name='PhoneNumber'),
      }
    ](name='Messages'),
    requestId?: string(name='RequestId'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model SendMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendMessageResponseBody(name='body'),
}

async function sendMessage(request: SendMessageRequest): SendMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return sendMessageWithOptions(request, headers, runtime);
}

async function sendMessageWithOptions(request: SendMessageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendMessageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.outIds)) {
    body['OutIds'] = request.outIds;
  }
  if (!Util.isUnset(request.phoneNumbers)) {
    body['PhoneNumbers'] = request.phoneNumbers;
  }
  if (!Util.isUnset(request.scheduleId)) {
    body['ScheduleId'] = request.scheduleId;
  }
  if (!Util.isUnset(request.signName)) {
    body['SignName'] = request.signName;
  }
  if (!Util.isUnset(request.signatureId)) {
    body['SignatureId'] = request.signatureId;
  }
  if (!Util.isUnset(request.smsUpExtendCodes)) {
    body['SmsUpExtendCodes'] = request.smsUpExtendCodes;
  }
  if (!Util.isUnset(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateParams)) {
    body['TemplateParams'] = request.templateParams;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendMessage',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/messages`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SmsReportRequest {
  body?: [ 
    {
      bizId?: string(name='biz_id'),
      errCode?: string(name='err_code'),
      errMsg?: string(name='err_msg'),
      messageId?: string(name='message_id'),
      outId?: string(name='out_id'),
      phoneNumber?: string(name='phone_number'),
      reportTime?: string(name='report_time'),
      requestId?: string(name='request_id'),
      sendTime?: string(name='send_time'),
      signName?: string(name='sign_name'),
      smsSize?: string(name='sms_size'),
      success?: boolean(name='success'),
      templateCode?: string(name='template_code'),
    }
  ](name='body'),
}

model SmsReportResponseBody = {
  code?: int32(name='code'),
  msg?: string(name='msg'),
}

model SmsReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SmsReportResponseBody(name='body'),
}

/**
 * 短信回执。
 */
async function smsReport(request: SmsReportRequest): SmsReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return smsReportWithOptions(request, headers, runtime);
}

async function smsReportWithOptions(request: SmsReportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SmsReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = Util.toArray(request.body),
  };
  var params = new OpenApi.Params{
    action = 'SmsReport',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/recall/report`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SmsUpRequest {
  body?: [ 
    {
      content?: string(name='content'),
      destCode?: string(name='dest_code'),
      phoneNumber?: string(name='phone_number'),
      sendTime?: string(name='send_time'),
      sequenceId?: int32(name='sequence_id'),
      signName?: string(name='sign_name'),
    }
  ](name='body'),
}

model SmsUpResponseBody = {
  code?: int32(name='code'),
  msg?: string(name='msg'),
}

model SmsUpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SmsUpResponseBody(name='body'),
}

/**
 * 短信上行。
 */
async function smsUp(request: SmsUpRequest): SmsUpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return smsUpWithOptions(request, headers, runtime);
}

async function smsUpWithOptions(request: SmsUpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SmsUpResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = Util.toArray(request.body),
  };
  var params = new OpenApi.Params{
    action = 'SmsUp',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/recall/up`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateCampaignRequest {
  name?: string(name='Name'),
  remark?: string(name='Remark'),
}

model UpdateCampaignResponseBody = {
  data?: {
    createdTime?: string(name='CreatedTime'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    remark?: string(name='Remark'),
    updatedTime?: string(name='UpdatedTime'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model UpdateCampaignResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCampaignResponseBody(name='body'),
}

/**
 * 更新运营活动
 */
async function updateCampaign(Id: string, request: UpdateCampaignRequest): UpdateCampaignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateCampaignWithOptions(Id, request, headers, runtime);
}

async function updateCampaignWithOptions(Id: string, request: UpdateCampaignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateCampaignResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCampaign',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/campaigns/${OpenApiUtil.getEncodeParam(Id)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateReportUrlRequest {
  url?: string(name='Url'),
}

model UpdateReportUrlResponseBody = {
  data?: string(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model UpdateReportUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateReportUrlResponseBody(name='body'),
}

/**
 * 更新回执Url。

 */
async function updateReportUrl(request: UpdateReportUrlRequest): UpdateReportUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateReportUrlWithOptions(request, headers, runtime);
}

async function updateReportUrlWithOptions(request: UpdateReportUrlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateReportUrlResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.url)) {
    body['Url'] = request.url;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateReportUrl',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/users/reportUrl`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateUploadUrlRequest {
  url?: string(name='Url'),
}

model UpdateUploadUrlResponseBody = {
  data?: string(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
}

model UpdateUploadUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateUploadUrlResponseBody(name='body'),
}

/**
 * 更新上行Url。
 */
async function updateUploadUrl(request: UpdateUploadUrlRequest): UpdateUploadUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateUploadUrlWithOptions(request, headers, runtime);
}

async function updateUploadUrlWithOptions(request: UpdateUploadUrlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateUploadUrlResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.url)) {
    body['Url'] = request.url;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUploadUrl',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/users/uploadUrl`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

