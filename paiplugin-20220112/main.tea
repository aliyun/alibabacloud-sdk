/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('paiplugin', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateSignatureRequest {
  description?: string(name='Description', description='申请说明。'),
  name?: string(name='Name', description='签名名称。'),
}

model CreateSignatureResponseBody = {
  data?: {
    createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
    id?: string(name='Id', description='签名Id。'),
    name?: string(name='Name', description='签名名称。'),
    status?: int32(name='Status', description='签名审核状态。
- 0：审核中。
- 1：审核通过。
- 2：审核不通过。'),
    updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model CreateSignatureResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSignatureResponseBody(name='body'),
}

/**
 * 注册签名。

 */
async function createSignature(request: CreateSignatureRequest): CreateSignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createSignatureWithOptions(request, headers, runtime);
}

async function createSignatureWithOptions(request: CreateSignatureRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSignatureResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSignature',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/signatures`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateTemplateRequest {
  content?: string(name='Content', description='模板内容，请注意控制总字数在70个字以内，超出部分按长短信收费，按67个字为单位记一条短信，必须在结尾添加”回T退订“。'),
  description?: string(name='Description', description='申请说明。'),
  name?: string(name='Name', description='模板名称。'),
  signatureId?: string(name='SignatureId', description='签名Id，可通过ListSignatures获取审核状态为已通过的签名列表，获取签名Id。'),
  type?: int32(name='Type', description='模板类型。
- 0 : 验证码。
- 1 : 短信通知。
- 2 : 推广短信。'),
}

model CreateTemplateResponseBody = {
  data?: {
    content?: string(name='Content', description='模板内容。'),
    createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
    description?: string(name='Description', description='申请说明。'),
    id?: string(name='Id', description='模板Id。'),
    name?: string(name='Name', description='签名名称。'),
    reason?: string(name='Reason', description='审核意见。'),
    signatureId?: string(name='SignatureId', description='签名Id。'),
    status?: int32(name='Status', description='审核状态。
- 0 : 审核中。
- 1 : 审核通过。
- 2 : 审核不通过。'),
    templateCode?: string(name='TemplateCode', description='模板Code。'),
    type?: int32(name='Type', description='模板类型。
- 0 : 验证码。
- 1 : 短信通知。
- 2 : 推广短信。'),
    updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model CreateTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTemplateResponseBody(name='body'),
}

/**
 * 注册模板。

 */
async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTemplateWithOptions(request, headers, runtime);
}

async function createTemplateWithOptions(request: CreateTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.signatureId)) {
    body['SignatureId'] = request.signatureId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTemplate',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/templates`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteSignatureResponseBody = {
  data?: string(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model DeleteSignatureResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSignatureResponseBody(name='body'),
}

/**
 * 删除签名。

 */
async function deleteSignature(Id: string): DeleteSignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteSignatureWithOptions(Id, headers, runtime);
}

async function deleteSignatureWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSignatureResponse {
  Id = OpenApiUtil.getEncodeParam(Id);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteSignature',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/signatures/${Id}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteTemplateResponseBody = {
  data?: string(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model DeleteTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTemplateResponseBody(name='body'),
}

/**
 * 删除模板

 */
async function deleteTemplate(Id: string): DeleteTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteTemplateWithOptions(Id, headers, runtime);
}

async function deleteTemplateWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTemplateResponse {
  Id = OpenApiUtil.getEncodeParam(Id);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteTemplate',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/templates/${Id}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetMessageConfigResponseBody = {
  data?: {
    smsReportUrl?: string(name='SmsReportUrl', description='短信发送状态回执接收服务地址。'),
    smsUpUrl?: string(name='SmsUpUrl', description='上行短信消息接收服务地址。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model GetMessageConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetMessageConfigResponseBody(name='body'),
}

/**
 * 获取短信配置。
 */
async function getMessageConfig(): GetMessageConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getMessageConfigWithOptions(headers, runtime);
}

async function getMessageConfigWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): GetMessageConfigResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetMessageConfig',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/users/messageConfig`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetSignatureResponseBody = {
  data?: {
    createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
    description?: string(name='Description', description='申请说明。'),
    id?: string(name='Id', description='签名Id。'),
    name?: string(name='Name', description='签名名称。'),
    reason?: string(name='Reason', description='审核建议。'),
    status?: int32(name='Status', description='签名审核状态。
- 0：审核中。
- 1：审核通过。
- 2：审核不通过。'),
    updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model GetSignatureResponse = {
  headers: map[string]string(name='headers'),
  body: GetSignatureResponseBody(name='body'),
}

/**
 * 获取签名详情。
 */
async function getSignature(Id: string): GetSignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSignatureWithOptions(Id, headers, runtime);
}

async function getSignatureWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetSignatureResponse {
  Id = OpenApiUtil.getEncodeParam(Id);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetSignature',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/signatures/${Id}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetTemplateResponseBody = {
  data?: {
    content?: string(name='Content', description='模板内容。'),
    createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
    description?: string(name='Description', description='申请说明。'),
    id?: string(name='Id', description='模板Id。'),
    name?: string(name='Name', description='签名名称。'),
    reason?: string(name='Reason', description='审核意见。'),
    signatureId?: string(name='SignatureId', description='签名Id。'),
    status?: int32(name='Status', description='审核状态。
- 0 : 审核中。
- 1 : 审核通过。
- 2 : 审核不通过。'),
    templateCode?: string(name='TemplateCode', description='模板Code。'),
    type?: int32(name='Type', description='模板类型。
- 0 : 验证码。
- 1 : 短信通知。
- 2 : 推广短信。'),
    updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model GetTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetTemplateResponseBody(name='body'),
}

/**
 * 获取模板详情。
 */
async function getTemplate(Id: string): GetTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTemplateWithOptions(Id, headers, runtime);
}

async function getTemplateWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetTemplateResponse {
  Id = OpenApiUtil.getEncodeParam(Id);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetTemplate',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/templates/${Id}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetUserResponseBody = {
  data?: {
    accountStatus?: int32(name='AccountStatus', description='账号状态。
- 0 : 正常使用。
- 1 : 因欠费等原因暂时停用。
- 2 : 已释放产品。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserResponseBody(name='body'),
}

/**
 * 获取账号状态。
 */
async function getUser(): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getUserWithOptions(headers, runtime);
}

async function getUserWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): GetUserResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetUser',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/users`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListMessageMetricsRequest {
  endDate?: string(name='EndDate', description='结束日期，必填，格式20220102。'),
  groupId?: string(name='GroupId', description='关联人群Id。'),
  pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。'),
  pageSize?: int32(name='PageSize', description='分页大小，默认为10。'),
  scheduleId?: string(name='ScheduleId', description='关联触达计划Id。'),
  signature?: string(name='Signature', description='签名名称。'),
  signatureId?: string(name='SignatureId', description='签名Id，同时只能指定签名名称或签名Id其中之一。'),
  startDate?: string(name='StartDate', description='开始日期，必填，格式20220102。'),
  templateCode?: string(name='TemplateCode', description='模板号。'),
  templateId?: string(name='TemplateId', description='模板Id，同时只能指定模板Code或模板Id其中之一。'),
  templateType?: int32(name='TemplateType', description='模板类型。
0 : 验证码。
1 : 短信通知。
2 : 推广短信。'),
}

model ListMessageMetricsResponseBody = {
  data?: {
    metrics?: [ 
      {
        date?: string(name='Date', description='发送日期。'),
        fail?: int32(name='Fail', description='发送失败。'),
        pending?: int32(name='Pending', description='发送中。'),
        rate?: float(name='Rate', description='发送成功率。'),
        success?: int32(name='Success', description='发送成功。'),
        total?: int32(name='Total', description='总计短信数量。'),
      }
    ](name='Metrics', description='统计数据列表。'),
    pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。'),
    pageSize?: int32(name='PageSize', description='分页大小，默认为10。'),
    totalCount?: int32(name='TotalCount', description='总统计数量。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model ListMessageMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMessageMetricsResponseBody(name='body'),
}

/**
 * 获取短信发送统计列表。
 */
async function listMessageMetrics(request: ListMessageMetricsRequest): ListMessageMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listMessageMetricsWithOptions(request, headers, runtime);
}

async function listMessageMetricsWithOptions(request: ListMessageMetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMessageMetricsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.scheduleId)) {
    query['ScheduleId'] = request.scheduleId;
  }
  if (!Util.isUnset(request.signature)) {
    query['Signature'] = request.signature;
  }
  if (!Util.isUnset(request.signatureId)) {
    query['SignatureId'] = request.signatureId;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMessageMetrics',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/messages/metrics`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListMessagesRequest {
  datetime?: string(name='Datetime', description='发送日期，格式为20220101。'),
  errorCode?: string(name='ErrorCode', description='短信错误码过滤。'),
  groupId?: string(name='GroupId', description='关联人群Id过滤。'),
  messageId?: string(name='MessageId', description='短信Id过滤，短信Id为SendMessage成功返回的Id。'),
  pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。'),
  pageSize?: int32(name='PageSize', description='分页大小，默认为10。'),
  phoneNumber?: string(name='PhoneNumber', description='手机号码过滤。'),
  requestId?: string(name='RequestId', description='短信批处理Id过滤，短信批处理Id为SendMessage成功返回的RequestId。'),
  scheduleId?: string(name='ScheduleId', description='关联触达计划Id过滤。'),
  signature?: string(name='Signature', description='签名名称过滤。'),
  signatureId?: string(name='SignatureId', description='签名Id过滤，同时只能指定签名名称或签名Id其中之一。'),
  status?: int32(name='Status', description='短信发送状态过滤。
- 0 : 发送中。
- 1 : 发送成功。
- 2 : 发送失败。'),
  templateCode?: string(name='TemplateCode', description='模板号过滤。'),
  templateId?: string(name='TemplateId', description='模板Id过滤，同时只能指定模板Code或模板Id其中之一。'),
  templateType?: int32(name='TemplateType', description='模板类型过滤。
- 0 : 验证码。
- 1 : 短信通知。
- 2 : 推广短信。'),
}

model ListMessagesResponseBody = {
  data?: {
    messages?: [ 
      {
        errorCode?: string(name='ErrorCode', description='短信错误码。'),
        groupId?: string(name='GroupId', description='关联人群Id，未关联则为空。'),
        id?: string(name='Id', description='短信序列号。'),
        outId?: string(name='OutId', description='外部拓展字段。'),
        phoneNumber?: string(name='PhoneNumber', description='手机号码。'),
        scheduleId?: string(name='ScheduleId', description='关联触达计划Id，未关联则为空。'),
        signature?: string(name='Signature', description='签名名称。'),
        status?: int32(name='Status', description='短信发送状态。
- 0 : 发送中。
- 1 : 发送成功。
- 2 : 发送失败。'),
        templateCode?: string(name='TemplateCode', description='模板号。'),
        templateParams?: string(name='TemplateParams', description='模板参数。'),
        templateType?: int32(name='TemplateType', description='模板类型。
- 0 : 验证码。
- 1 : 短信通知。
- 2 : 推广短信。'),
      }
    ](name='Messages', description='短信列表。'),
    pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。'),
    pageSize?: int32(name='PageSize', description='分页大小，默认为10。'),
    totalCount?: int32(name='TotalCount', description='短信数量。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model ListMessagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListMessagesResponseBody(name='body'),
}

/**
 * 查询短信发送详情列表。
 */
async function listMessages(request: ListMessagesRequest): ListMessagesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listMessagesWithOptions(request, headers, runtime);
}

async function listMessagesWithOptions(request: ListMessagesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMessagesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.datetime)) {
    query['Datetime'] = request.datetime;
  }
  if (!Util.isUnset(request.errorCode)) {
    query['ErrorCode'] = request.errorCode;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.messageId)) {
    query['MessageId'] = request.messageId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.scheduleId)) {
    query['ScheduleId'] = request.scheduleId;
  }
  if (!Util.isUnset(request.signature)) {
    query['Signature'] = request.signature;
  }
  if (!Util.isUnset(request.signatureId)) {
    query['SignatureId'] = request.signatureId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMessages',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/messages`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListSignaturesRequest {
  name?: string(name='Name', description='签名名称。'),
  pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。'),
  pageSize?: int32(name='PageSize', description='分页大小，默认为10。'),
  status?: int32(name='Status', description='审核状态。'),
}

model ListSignaturesResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。'),
    pageSize?: int32(name='PageSize', description='分页大小，默认为10。'),
    signatures?: [ 
      {
        createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
        id?: string(name='Id', description='签名Id。'),
        name?: string(name='Name', description='签名名称。'),
        status?: int32(name='Status', description='签名审核状态。
- 0：审核中。
- 1：审核通过。
- 2：审核不通过。'),
        updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
      }
    ](name='Signatures', description='签名列表。'),
    totalCount?: int32(name='TotalCount', description='签名数量。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model ListSignaturesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSignaturesResponseBody(name='body'),
}

/**
 * 获取签名列表。
 */
async function listSignatures(request: ListSignaturesRequest): ListSignaturesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSignaturesWithOptions(request, headers, runtime);
}

async function listSignaturesWithOptions(request: ListSignaturesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSignaturesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSignatures',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/signatures`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListTemplatesRequest {
  content?: string(name='Content', description='内容类型过滤。'),
  name?: string(name='Name', description='模板名称过滤。'),
  pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。'),
  pageSize?: int32(name='PageSize', description='分页大小，默认为10。'),
  status?: int32(name='Status', description='审核状态过滤。'),
  type?: int32(name='Type', description='模板类型过滤。'),
}

model ListTemplatesResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='分页数，从1开始，默认为1。'),
    pageSize?: int32(name='PageSize', description='分页大小，默认为10。'),
    templates?: [ 
      {
        content?: string(name='Content', description='模板内容。'),
        createdTime?: string(name='CreatedTime', description='创建时间 (UTC+8)。'),
        description?: string(name='Description', description='申请说明。'),
        id?: string(name='Id', description='模板Id。'),
        name?: string(name='Name', description='签名名称。'),
        reason?: string(name='Reason', description='审核意见。'),
        signatureId?: string(name='SignatureId', description='签名Id。'),
        status?: int32(name='Status', description='审核状态。
- 0 : 审核中。
- 1 : 审核通过。
- 2 : 审核不通过。'),
        templateCode?: string(name='TemplateCode', description='模板Code。'),
        type?: int32(name='Type', description='模板类型。
- 0 : 验证码。
- 1 : 短信通知。
- 2 : 推广短信。'),
        updatedTime?: string(name='UpdatedTime', description='更新时间 (UTC+8)。'),
      }
    ](name='Templates', description='模板列表。'),
    totalCount?: int32(name='TotalCount', description='总模板数量。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model ListTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTemplatesResponseBody(name='body'),
}

/**
 * 获取模板列表。
 */
async function listTemplates(request: ListTemplatesRequest): ListTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTemplatesWithOptions(request, headers, runtime);
}

async function listTemplatesWithOptions(request: ListTemplatesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTemplatesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTemplates',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/templates`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SendMessageRequest {
  groupId?: string(name='GroupId', description='人群Id，用于关联人群。'),
  outIds?: [ string ](name='OutIds', description='外部拓展字段，示例：["1234567890"]。'),
  phoneNumbers?: [ string ](name='PhoneNumbers', description='手机号，每个手机号对应一个模板变量、上行拓展码和外部拓展字段，示例：["1234567890"]。'),
  scheduleId?: string(name='ScheduleId', description='触达计划Id，用于关联触达计划。'),
  signName?: string(name='SignName', description='签名名称。'),
  signatureId?: string(name='SignatureId', description='签名Id，同时只能指定签名名称或签名Id其中之一。'),
  smsUpExtendCodes?: [ string ](name='SmsUpExtendCodes', description='短信上行拓展码，示例：["1234567890"]。'),
  templateCode?: string(name='TemplateCode', description='模板Code。'),
  templateId?: string(name='TemplateId', description='模板Id，同时只能指定模板Code或模板Id其中之一。'),
  templateParams?: [ string ](name='TemplateParams', description='短信模板变量对应的实际值，JSON格式。支持传入多个参数，示例：[{"name":"张三","number":"15038****76"}]。'),
}

model SendMessageResponseBody = {
  data?: {
    messages?: [ 
      {
        id?: string(name='Id', description='短信Id。'),
        phoneNumber?: string(name='PhoneNumber', description='手机号码。'),
      }
    ](name='Messages', description='短信列表。'),
    requestId?: string(name='RequestId', description='请求Id。'),
  }(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model SendMessageResponse = {
  headers: map[string]string(name='headers'),
  body: SendMessageResponseBody(name='body'),
}

/**
 * 发送短信。
 */
async function sendMessage(request: SendMessageRequest): SendMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return sendMessageWithOptions(request, headers, runtime);
}

async function sendMessageWithOptions(request: SendMessageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SendMessageResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.outIds)) {
    body['OutIds'] = request.outIds;
  }
  if (!Util.isUnset(request.phoneNumbers)) {
    body['PhoneNumbers'] = request.phoneNumbers;
  }
  if (!Util.isUnset(request.scheduleId)) {
    body['ScheduleId'] = request.scheduleId;
  }
  if (!Util.isUnset(request.signName)) {
    body['SignName'] = request.signName;
  }
  if (!Util.isUnset(request.signatureId)) {
    body['SignatureId'] = request.signatureId;
  }
  if (!Util.isUnset(request.smsUpExtendCodes)) {
    body['SmsUpExtendCodes'] = request.smsUpExtendCodes;
  }
  if (!Util.isUnset(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateParams)) {
    body['TemplateParams'] = request.templateParams;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendMessage',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/messages`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SmsReportRequest {
  body?: [ 
    {
      bizId?: string(name='biz_id', description='发送回执ID，即发送流水号。'),
      errCode?: string(name='err_code', description='状态报告编码。'),
      errMsg?: string(name='err_msg', description='状态报告说明。'),
      messageId?: string(name='message_id', description='短信Id。调用发送接口SendMessage发送短信时，返回值中的Id字段。可使用短信Id在接口ListMessages查询具体的发送状态。'),
      outId?: string(name='out_id', description='外部拓展字段。'),
      phoneNumber?: string(name='phone_number', description='手机号码。'),
      reportTime?: string(name='report_time', description='状态报告时间。'),
      requestId?: string(name='request_id', description='短信批处理Id。调用发送接口SendMessage发送短信时，返回值中的RequestId字段。可使用短信批处理Id在接口ListMessages查询具体的发送状态。'),
      sendTime?: string(name='send_time', description='发送时间。'),
      signName?: string(name='sign_name', description='签名。'),
      smsSize?: string(name='sms_size', description='短信长度。短信长度不超过70个字，按照一条短信计费；超过70个字，即为长短信，按照67字/条拆分成多条计费。'),
      success?: boolean(name='success', description='是否接收成功。
- true : 接收成功。
- false : 接收失败。'),
      templateCode?: string(name='template_code', description='模板号。'),
    }
  ](name='body', description='请求参数的主体信息。'),
}

model SmsReportResponseBody = {
  code?: int32(name='code', description='应答编码。'),
  msg?: string(name='msg', description='描述信息。'),
}

model SmsReportResponse = {
  headers: map[string]string(name='headers'),
  body: SmsReportResponseBody(name='body'),
}

/**
 * 短信回执。
 */
async function smsReport(request: SmsReportRequest): SmsReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return smsReportWithOptions(request, headers, runtime);
}

async function smsReportWithOptions(request: SmsReportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SmsReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = Util.toArray(request.body),
  };
  var params = new OpenApi.Params{
    action = 'SmsReport',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/recall/report`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SmsUpRequest {
  body?: [ 
    {
      content?: string(name='content', description='发送内容。'),
      destCode?: string(name='dest_code', description='上行短信扩展号码，系统后台自动生成，不支持自定义传入。'),
      phoneNumber?: string(name='phone_number', description='手机号码。'),
      sendTime?: string(name='send_time', description='发送时间。'),
      sequenceId?: int32(name='sequence_id', description='序列号。'),
      signName?: string(name='sign_name', description='签名信息。'),
    }
  ](name='body', description='请求参数的主体信息。'),
}

model SmsUpResponseBody = {
  code?: int32(name='code', description='应答编码。'),
  msg?: string(name='msg', description='描述信息。'),
}

model SmsUpResponse = {
  headers: map[string]string(name='headers'),
  body: SmsUpResponseBody(name='body'),
}

/**
 * 短信上行。
 */
async function smsUp(request: SmsUpRequest): SmsUpResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return smsUpWithOptions(request, headers, runtime);
}

async function smsUpWithOptions(request: SmsUpRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SmsUpResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = Util.toArray(request.body),
  };
  var params = new OpenApi.Params{
    action = 'SmsUp',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/recall/up`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateReportUrlRequest {
  url?: string(name='Url', description='可公开访问的地址。'),
}

model UpdateReportUrlResponseBody = {
  data?: string(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model UpdateReportUrlResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateReportUrlResponseBody(name='body'),
}

/**
 * 更新回执Url。

 */
async function updateReportUrl(request: UpdateReportUrlRequest): UpdateReportUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateReportUrlWithOptions(request, headers, runtime);
}

async function updateReportUrlWithOptions(request: UpdateReportUrlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateReportUrlResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.url)) {
    body['Url'] = request.url;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateReportUrl',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/users/reportUrl`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateUploadUrlRequest {
  url?: string(name='Url', description='可公开访问的地址。'),
}

model UpdateUploadUrlResponseBody = {
  data?: string(name='Data', description='返回数据。'),
  errorCode?: int32(name='ErrorCode', description='错误码。'),
  errorMessage?: string(name='ErrorMessage', description='错误信息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model UpdateUploadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUploadUrlResponseBody(name='body'),
}

/**
 * 更新上行Url。
 */
async function updateUploadUrl(request: UpdateUploadUrlRequest): UpdateUploadUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateUploadUrlWithOptions(request, headers, runtime);
}

async function updateUploadUrlWithOptions(request: UpdateUploadUrlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateUploadUrlResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.url)) {
    body['Url'] = request.url;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUploadUrl',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = `/api/v2/users/uploadUrl`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

