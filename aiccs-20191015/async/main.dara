/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'aiccs';
  @version = '2019-10-15';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddHotlineNumberRequest {
  description: string(name='Description', description='号码描述', example='desc', position='Body'),
  enableInbound: boolean(name='EnableInbound', description='是否用于入呼', example='true', position='Body'),
  enableInboundEvaluation: boolean(name='EnableInboundEvaluation', description='是否开启入呼满意度', example='true', position='Body'),
  enableOutbound: boolean(name='EnableOutbound', description='是否用于外呼', example='true', position='Body'),
  enableOutboundEvaluation: boolean(name='EnableOutboundEvaluation', description='是否开启外呼满意度', example='true', position='Body'),
  evaluationLevel?: int32(name='EvaluationLevel', description='满意度等级', example='2', position='Body'),
  hotlineNumber: string(name='HotlineNumber', description='号码', example='05710000****', position='Body'),
  inboundFlowId?: long(name='InboundFlowId', description='入呼ivr流程id', example='123456', position='Body'),
  instanceId: string(name='InstanceId', description='实例id', example='ccc_xp_pre-cn-***', position='Body'),
  outboundAllDepart: boolean(name='OutboundAllDepart', description='外呼是否对所有部门生效', example='true', position='Body'),
  outboundRangeList?: [ 
    {
      departmentId?: long(name='DepartmentId', description='生效部门id', example='123456'),
      groupIdList?: [ long ](name='GroupIdList', description='生效技能组列表（部门123下）'),
    }
  ](name='OutboundRangeList', description='外呼生效范围', shrink='json', position='Body'),
}

model AddHotlineNumberResponseBody = {
  code?: string(name='Code', description='错误码', example='Success'),
  httpStatusCode?: long(name='HttpStatusCode', description='http状态码', example='200'),
  message?: string(name='Message', description='错误信息', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE339D98-9BD3-4413-B165'),
  success?: boolean(name='Success', description='接口调用是否成功', example='true'),
}

model AddHotlineNumberResponse = {
  headers: map[string]string(name='headers'),
  body: AddHotlineNumberResponseBody(name='body'),
}

async function addHotlineNumber(request: AddHotlineNumberRequest): AddHotlineNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddHotlineNumber', 'POST', '/', 'json', true, 'form', request);
}

model AddOuterAccountRequest {
  avatar?: string(name='Avatar', example='http://****', position='Query'),
  ext?: string(name='Ext', position='Query'),
  outerAccountId: string(name='OuterAccountId', example='1212', position='Query'),
  outerAccountName?: string(name='OuterAccountName', position='Query'),
  outerAccountType: string(name='OuterAccountType', example='alipay', position='Query'),
  outerDepartmentId?: string(name='OuterDepartmentId', example='3', position='Query'),
  outerDepartmentType?: string(name='OuterDepartmentType', example='type_invalid', position='Query'),
  outerGroupIds?: string(name='OuterGroupIds', example='["222","333","444"]', position='Query'),
  outerGroupType?: string(name='OuterGroupType', example='mybank', position='Query'),
  realName?: string(name='RealName', position='Query'),
}

model AddOuterAccountResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='123456'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model AddOuterAccountResponse = {
  headers: map[string]string(name='headers'),
  body: AddOuterAccountResponseBody(name='body'),
}

async function addOuterAccount(request: AddOuterAccountRequest): AddOuterAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddOuterAccount', 'GET', '/', 'json', false, 'json', request);
}

model AddSkillGroupRequest {
  outerDepartmentId?: string(name='OuterDepartmentId', example='123456', position='Query'),
  outerDepartmentType?: string(name='OuterDepartmentType', example='type_invalid', position='Query'),
  outerGroupId: string(name='OuterGroupId', example='123456', position='Query'),
  outerGroupName: string(name='OuterGroupName', position='Query'),
  outerGroupType: string(name='OuterGroupType', example='mybank', position='Query'),
}

model AddSkillGroupResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='123456'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model AddSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddSkillGroupResponseBody(name='body'),
}

async function addSkillGroup(request: AddSkillGroupRequest): AddSkillGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSkillGroup', 'GET', '/', 'json', false, 'json', request);
}

model AiccsSmartCallRequest {
  actionCodeBreak?: boolean(name='ActionCodeBreak', example='true', position='Query'),
  actionCodeTimeBreak?: int32(name='ActionCodeTimeBreak', example='120', position='Query'),
  asrAlsAmId?: string(name='AsrAlsAmId', example='23387****', position='Query'),
  asrBaseId?: string(name='AsrBaseId', example='customer_service_8k', position='Query'),
  asrModelId?: string(name='AsrModelId', example='bf71664d30d2478fb8cb8c39c6b6****', position='Query'),
  asrVocabularyId?: string(name='AsrVocabularyId', example='6689****', position='Query'),
  backgroundFileCode?: string(name='BackgroundFileCode', example='2d4c-4e78-8d2a-afbb06cf****.wav', position='Query'),
  backgroundSpeed?: int32(name='BackgroundSpeed', example='1', position='Query'),
  backgroundVolume?: int32(name='BackgroundVolume', example='1', minimum=-4, maximum=4, position='Query'),
  calledNumber: string(name='CalledNumber', example='1862222****', position='Query'),
  calledShowNumber: string(name='CalledShowNumber', example='0571000****', position='Query'),
  dynamicId?: string(name='DynamicId', example='2234****', position='Query'),
  earlyMediaAsr?: boolean(name='EarlyMediaAsr', example='fasle', position='Query'),
  enableITN?: boolean(name='EnableITN', example='true', position='Query'),
  muteTime?: int32(name='MuteTime', example='10000', position='Query'),
  outId?: string(name='OutId', example='222356****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pauseTime?: int32(name='PauseTime', example='800', position='Query'),
  playTimes?: int32(name='PlayTimes', example='1', position='Query'),
  prodCode?: string(name='ProdCode', example='aiccs', position='Query'),
  recordFlag?: boolean(name='RecordFlag', example='true', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sessionTimeout?: int32(name='SessionTimeout', example='120', position='Query'),
  speed?: int32(name='Speed', example='1', position='Query'),
  ttsConf?: boolean(name='TtsConf', example='true', position='Query'),
  ttsSpeed?: int32(name='TtsSpeed', example='100', position='Query'),
  ttsStyle?: string(name='TtsStyle', example='xiaoyun', position='Query'),
  ttsVolume?: int32(name='TtsVolume', example='10', position='Query'),
  voiceCode: string(name='VoiceCode', example='2d4c-4e78-8d2a-afbb06cf****.wav,$name$', position='Query'),
  voiceCodeParam?: string(name='VoiceCodeParam', position='Query'),
  volume?: int32(name='Volume', example='1', position='Query'),
}

model AiccsSmartCallResponseBody = {
  code?: string(name='Code', example='116012854210^10281427****'),
  data?: string(name='Data', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='A90E4451-FED7-49D2-87C8-00700A8C4D0D'),
}

model AiccsSmartCallResponse = {
  headers: map[string]string(name='headers'),
  body: AiccsSmartCallResponseBody(name='body'),
}

async function aiccsSmartCall(request: AiccsSmartCallRequest): AiccsSmartCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AiccsSmartCall', 'POST', '/', 'json', false, 'json', request);
}

model AiccsSmartCallOperateRequest {
  callId?: string(name='CallId', example='116012854210^102814279****', position='Query'),
  command?: string(name='Command', example='parallelBridge', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  param?: string(name='Param', example='Param', position='Query'),
  prodCode?: string(name='ProdCode', example='aiccs', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AiccsSmartCallOperateResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='true'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='A90E4451-FED7-49D2-87C8-00700A8C4D0D'),
}

model AiccsSmartCallOperateResponse = {
  headers: map[string]string(name='headers'),
  body: AiccsSmartCallOperateResponseBody(name='body'),
}

async function aiccsSmartCallOperate(request: AiccsSmartCallOperateRequest): AiccsSmartCallOperateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AiccsSmartCallOperate', 'POST', '/', 'json', false, 'json', request);
}

model AnswerCallRequest {
  accountName: string(name='AccountName', example='123@123.com', position='Body'),
  callId?: string(name='CallId', example='7719786', position='Body'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Body'),
  connectionId?: string(name='ConnectionId', example='7719788', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
  jobId?: string(name='JobId', example='7719787', position='Body'),
}

model AnswerCallResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model AnswerCallResponse = {
  headers: map[string]string(name='headers'),
  body: AnswerCallResponseBody(name='body'),
}

async function answerCall(request: AnswerCallRequest): AnswerCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AnswerCall', 'POST', '/', 'json', true, 'form', request);
}

model AttachTaskRequest {
  callString?: string(name='CallString', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: long(name='TaskId', example='123456', minimum=0, maximum=9223372036854775807, position='Query'),
}

model AttachTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: long(name='Data', example='10'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
  success?: boolean(name='Success', example='true'),
}

model AttachTaskResponse = {
  headers: map[string]string(name='headers'),
  body: AttachTaskResponseBody(name='body'),
}

async function attachTask(request: AttachTaskRequest): AttachTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachTask', 'POST', '/', 'json', false, 'json', request);
}

model BatchCreateQualityProjectsRequest {
  analysisIds: [ long ](name='AnalysisIds', position='Query'),
  channelTouchType?: [ int32 ](name='ChannelTouchType', position='Query'),
  checkFreqType: int32(name='CheckFreqType', minimum=1, maximum=100, position='Query'),
  instanceList: [ string ](name='InstanceList', position='Query'),
  projectName: string(name='ProjectName', position='Query'),
  timeRangeEnd?: string(name='TimeRangeEnd', position='Query'),
  timeRangeStart?: string(name='TimeRangeStart', position='Query'),
}

model BatchCreateQualityProjectsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      instanceId?: string(name='InstanceId'),
      projectId?: long(name='ProjectId'),
      version?: int32(name='Version'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchCreateQualityProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchCreateQualityProjectsResponseBody(name='body'),
}

async function batchCreateQualityProjects(request: BatchCreateQualityProjectsRequest): BatchCreateQualityProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchCreateQualityProjects', 'POST', '/', 'json', false, 'json', request);
}

model CancelTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: long(name='TaskId', example='123456', position='Query'),
}

model CancelTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='Ok'),
  requestId?: string(name='RequestId', description='Id of the request', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
  success?: boolean(name='Success', example='true'),
}

model CancelTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CancelTaskResponseBody(name='body'),
}

async function cancelTask(request: CancelTaskRequest): CancelTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelTask', 'POST', '/', 'json', false, 'json', request);
}

model ChangeChatAgentStatusRequest {
  accountName: string(name='AccountName', description='账户名称', example='account1', position='Body'),
  clientToken?: string(name='ClientToken', description='clientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Body'),
  instanceId: string(name='InstanceId', description='示例id', example='ccc_xp_pre-cn-***', position='Body'),
  method: string(name='Method', description='修改到的状态类型', example='requestLogout', position='Body'),
}

model ChangeChatAgentStatusResponseBody = {
  code?: string(name='Code', description='code', example='Success'),
  data?: string(name='Data', description='data', example='0'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  message?: string(name='Message', description='message', example='success'),
  requestId?: string(name='RequestId', description='requestId', example='DF6A3FB7-A5AA-43BE-A65B'),
  success?: boolean(name='Success', description='success', example='true'),
}

model ChangeChatAgentStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeChatAgentStatusResponseBody(name='body'),
}

async function changeChatAgentStatus(request: ChangeChatAgentStatusRequest): ChangeChatAgentStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeChatAgentStatus', 'POST', '/', 'json', true, 'form', request);
}

model ChangeQualityProjectStatusRequest {
  instanceId: string(name='InstanceId', position='Query'),
  projectId: long(name='ProjectId', position='Query'),
  status: int32(name='Status', position='Query'),
}

model ChangeQualityProjectStatusResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ChangeQualityProjectStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeQualityProjectStatusResponseBody(name='body'),
}

async function changeQualityProjectStatus(request: ChangeQualityProjectStatusRequest): ChangeQualityProjectStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeQualityProjectStatus', 'POST', '/', 'json', false, 'json', request);
}

model CreateAgentRequest {
  accountName: string(name='AccountName', example='username@example.com', position='Body'),
  clientToken?: string(name='ClientToken', description='js sdk中自动生成的鉴权token', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Body'),
  displayName: string(name='DisplayName', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
  skillGroupId?: [ long ](name='SkillGroupId', position='Body'),
  skillGroupIdList?: [ long ](name='SkillGroupIdList', position='Body'),
}

model CreateAgentResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: long(name='Data', example='2578****'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model CreateAgentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAgentResponseBody(name='body'),
}

async function createAgent(request: CreateAgentRequest): CreateAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAgent', 'POST', '/', 'json', true, 'form', request);
}

model CreateAiOutboundTaskRequest {
  concurrentRate?: int32(name='ConcurrentRate', description='自动外呼的呼叫并发', example='10', position='Query'),
  description?: string(name='Description', description='任务描述（0～100字符）', maxLength=100, position='Query'),
  executionTime: string(name='ExecutionTime', description='任务执行时间', example='{"TUESDAY":[{"start":"06:00","end":"06:05"}],"MONDAY":[{"start":"09:00","end":"18:00"},{"start":"20:30","end":"21:45"},{"start":"22:30","end":"22:50"}],"WEDNESDAY":[{"start":"09:00","end":"18:00"}],"THURSDAY":[{"start":"09:00","end":"18:00"}],"FRIDAY":[{"start":"09:00","end":"18:00"}],"SATURDAY":[{"start":"09:00","end":"18:00"}],"SUNDAY":[{"start":"17:00","end":"23:45"}]}', position='Query'),
  forecastCallRate?: float(name='ForecastCallRate', description='预测式外呼固定外呼比例（>=1）', example='1.5', minimum=1, maximum=100, position='Query'),
  handlerId: long(name='HandlerId', description='技能组id（预测式外呼）或者ivr id（自动外呼）', example='123456', position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', example='cc_xp_pre-cn-***', position='Query'),
  name: string(name='Name', description='任务名（1～15字符）', example='xx外呼任务', minLength=1, maxLength=15, position='Query'),
  numRepeated: int32(name='NumRepeated', description='被叫号码重复策略（0任务内去重，1不去重）', example='1', position='Query'),
  outboundNums: [ string ](name='OutboundNums', description='外呼主叫号码', shrink='json', position='Query'),
  recallRule?: {
    count?: int32(name='Count', description='重呼次数（1～3）', example='1', minimum=1, maximum=3),
    interval?: int32(name='Interval', description='重呼间隔时间（1～60分钟）', example='1', minimum=1, maximum=60),
  }(name='RecallRule', description='失败重呼策略（为空则不重呼）', shrink='json', position='Query'),
  type: int32(name='Type', description='任务类型（2:预测式外呼3:自动外呼）', example='2', position='Query'),
}

model CreateAiOutboundTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: long(name='Data', description='任务id', example='123456'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='请求ID', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model CreateAiOutboundTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAiOutboundTaskResponseBody(name='body'),
}

async function createAiOutboundTask(request: CreateAiOutboundTaskRequest): CreateAiOutboundTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAiOutboundTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateAiOutboundTaskBatchRequest {
  instanceId: string(name='InstanceId', description='实例ID', example='agent_***', position='Query'),
  taskId: long(name='TaskId', description='任务id', example='123456', position='Query'),
}

model CreateAiOutboundTaskBatchResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: int32(name='Data', description='新建的任务批次版本id', example='123456'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model CreateAiOutboundTaskBatchResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAiOutboundTaskBatchResponseBody(name='body'),
}

async function createAiOutboundTaskBatch(request: CreateAiOutboundTaskBatchRequest): CreateAiOutboundTaskBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAiOutboundTaskBatch', 'POST', '/', 'json', false, 'json', request);
}

model CreateDepartmentRequest {
  departmentName: string(name='DepartmentName', description='部门名称', position='Query'),
  instanceId: string(name='InstanceId', description='实例id', example='ccc_xp_pre-cn-***', position='Query'),
}

model CreateDepartmentResponseBody = {
  code?: string(name='Code', example='200'),
  data?: long(name='Data', example='123456'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='Id of the request', example='98B032F5-6473-4EAC-8BA8-C28993513A1F'),
  success?: boolean(name='Success', example='true'),
}

model CreateDepartmentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDepartmentResponseBody(name='body'),
}

async function createDepartment(request: CreateDepartmentRequest): CreateDepartmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDepartment', 'POST', '/', 'json', false, 'json', request);
}

model CreateOutboundTaskRequest {
  ani: string(name='Ani', position='Query'),
  callInfos?: string(name='CallInfos', position='Query'),
  departmentId?: long(name='DepartmentId', minimum=0, maximum=9223372036854775700, position='Query'),
  description?: string(name='Description', position='Query'),
  endDate: string(name='EndDate', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  extAttrs?: string(name='ExtAttrs', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  model?: int32(name='Model', minimum=0, maximum=10, position='Query'),
  retryInterval?: int32(name='RetryInterval', minimum=0, maximum=2880, position='Query'),
  retryTime?: int32(name='RetryTime', minimum=0, maximum=3, position='Query'),
  skillGroup: long(name='SkillGroup', minimum=0, maximum=9223372036854775700, position='Query'),
  startDate: string(name='StartDate', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  taskName: string(name='TaskName', position='Query'),
  taskType: int32(name='TaskType', minimum=0, maximum=10, position='Query'),
}

model CreateOutboundTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateOutboundTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOutboundTaskResponseBody(name='body'),
}

async function createOutboundTask(request: CreateOutboundTaskRequest): CreateOutboundTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOutboundTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateQualityProjectRequest {
  analysisIds: [ long ](name='AnalysisIds', position='Body'),
  channelTouchType?: [ int32 ](name='ChannelTouchType', position='Body'),
  checkFreqType: int32(name='CheckFreqType', minimum=1, maximum=100, position='Body'),
  depList?: [ long ](name='DepList', position='Body'),
  groupList?: [ long ](name='GroupList', position='Body'),
  instanceId: string(name='InstanceId', position='Body'),
  projectName: string(name='ProjectName', position='Body'),
  scopeType: int32(name='ScopeType', minimum=1, maximum=100, position='Body'),
  servicerList?: [ string ](name='ServicerList', position='Body'),
  timeRangeEnd?: string(name='TimeRangeEnd', position='Body'),
  timeRangeStart?: string(name='TimeRangeStart', position='Body'),
}

model CreateQualityProjectResponseBody = {
  code?: string(name='Code'),
  data?: {
    instanceId?: string(name='InstanceId'),
    projectId?: long(name='ProjectId'),
    version?: int32(name='Version'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateQualityProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateQualityProjectResponseBody(name='body'),
}

async function createQualityProject(request: CreateQualityProjectRequest): CreateQualityProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateQualityProject', 'POST', '/', 'json', true, 'form', request);
}

model CreateQualityRuleRequest {
  instanceId: string(name='InstanceId', position='Body'),
  keyWords: [ string ](name='KeyWords', position='Body'),
  matchType: int32(name='MatchType', position='Body'),
  name: string(name='Name', position='Body'),
  ruleTag: int32(name='RuleTag', position='Body'),
}

model CreateQualityRuleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateQualityRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateQualityRuleResponseBody(name='body'),
}

async function createQualityRule(request: CreateQualityRuleRequest): CreateQualityRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateQualityRule', 'POST', '/', 'json', true, 'form', request);
}

model CreateSkillGroupRequest {
  channelType: int32(name='ChannelType', example='2', minimum=0, maximum=7, position='Body'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-****-70b6a298d94d', position='Body'),
  departmentId?: long(name='DepartmentId', description='部门ID', example='123', position='Body'),
  description?: string(name='Description', position='Body'),
  displayName?: string(name='DisplayName', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
  skillGroupName: string(name='SkillGroupName', position='Body'),
}

model CreateSkillGroupResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: long(name='Data', example='123456'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model CreateSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSkillGroupResponseBody(name='body'),
}

async function createSkillGroup(request: CreateSkillGroupRequest): CreateSkillGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSkillGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateTaskRequest {
  callString?: string(name='CallString', position='Query'),
  callStringType: string(name='CallStringType', example='JSON', position='Query'),
  caller: string(name='Caller', example='0571****5678,0571****5679', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  retryCount?: int32(name='RetryCount', example='2', position='Query'),
  retryFlag?: int32(name='RetryFlag', example='1', position='Query'),
  retryInterval?: int32(name='RetryInterval', example='2', position='Query'),
  retryStatusCode?: string(name='RetryStatusCode', example='200010,200011', position='Query'),
  robotId: string(name='RobotId', example='123456', position='Query'),
  seatCount: string(name='SeatCount', example='3', position='Query'),
  startNow?: boolean(name='StartNow', position='Query'),
  taskName: string(name='TaskName', position='Query'),
  workDay: string(name='WorkDay', example='1', position='Query'),
  workTimeList: string(name='WorkTimeList', example='10:00-12:00,13:00-14:00', position='Query'),
}

model CreateTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: long(name='Data', example='123456'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model CreateTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTaskResponseBody(name='body'),
}

async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateThirdSsoAgentRequest {
  accountId: string(name='AccountId', description='param3', example='accountId1', position='Body'),
  accountName: string(name='AccountName', description='param4', example='accountName1', position='Body'),
  clientId: string(name='ClientId', description='param2', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Body'),
  clientToken?: string(name='ClientToken', description='clientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Body'),
  displayName?: string(name='DisplayName', description='param5', position='Body'),
  instanceId: string(name='InstanceId', description='param1', example='ccc_xp_pre***', position='Body'),
  roleIds?: [ long ](name='RoleIds', description='param7', position='Body'),
  skillGroupIds?: [ long ](name='SkillGroupIds', description='param6', position='Body'),
}

model CreateThirdSsoAgentResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: long(name='Data', description='新创建的坐席id', example='123456'),
  httpStatusCode?: long(name='HttpStatusCode', description='httpStatusCode', example='200'),
  message?: string(name='Message', description='message', example='Success'),
  requestId?: string(name='RequestId', description='requestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', description='success', example='true'),
}

model CreateThirdSsoAgentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateThirdSsoAgentResponseBody(name='body'),
}

async function createThirdSsoAgent(request: CreateThirdSsoAgentRequest): CreateThirdSsoAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateThirdSsoAgent', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAgentRequest {
  accountName: string(name='AccountName', example='123@****.com', position='Query'),
  clientToken?: string(name='ClientToken', description='js sdk中自动生成的鉴权token', example='46c1341e-2648-447a-9b11-70b6a298****', position='Query'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Query'),
}

model DeleteAgentResponseBody = {
  code?: string(name='Code', example='Success'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model DeleteAgentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAgentResponseBody(name='body'),
}

async function deleteAgent(request: DeleteAgentRequest): DeleteAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAgent', 'DELETE', '/', 'json', false, 'json', request);
}

model DeleteAiOutboundTaskRequest {
  instanceId: string(name='InstanceId', description='实例id', example='agent_***', position='Query'),
  taskId: long(name='TaskId', description='任务id', example='123456', position='Query'),
}

model DeleteAiOutboundTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model DeleteAiOutboundTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAiOutboundTaskResponseBody(name='body'),
}

async function deleteAiOutboundTask(request: DeleteAiOutboundTaskRequest): DeleteAiOutboundTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAiOutboundTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDepartmentRequest {
  departmentId: long(name='DepartmentId', description='部门id', example='123456', position='Query'),
  instanceId: string(name='InstanceId', description='实例id', example='ccc_xp_pre-cn-***', position='Query'),
}

model DeleteDepartmentResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='seccessful'),
  requestId?: string(name='RequestId', description='Id of the request', example='98B032F5-6473-4EAC-8BA8-C28993513A1F'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDepartmentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDepartmentResponseBody(name='body'),
}

async function deleteDepartment(request: DeleteDepartmentRequest): DeleteDepartmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDepartment', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHotlineNumberRequest {
  hotlineNumber: string(name='HotlineNumber', description='号码', example='05710000****', position='Body'),
  instanceId: string(name='InstanceId', description='实例id', example='ccc_xp_pre-cn-***', position='Body'),
}

model DeleteHotlineNumberResponseBody = {
  code?: string(name='Code', description='错误码', example='Success'),
  httpStatusCode?: long(name='HttpStatusCode', description='http状态码', example='200'),
  message?: string(name='Message', description='错误信息', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='98B032F5-6473-4EAC-8BA8-C28993513A1F'),
  success?: boolean(name='Success', description='接口调用是否成功', example='true'),
}

model DeleteHotlineNumberResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHotlineNumberResponseBody(name='body'),
}

async function deleteHotlineNumber(request: DeleteHotlineNumberRequest): DeleteHotlineNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHotlineNumber', 'POST', '/', 'json', true, 'form', request);
}

model DeleteOutboundTaskRequest {
  instanceId: string(name='InstanceId', position='Query'),
  outboundTaskId: long(name='OutboundTaskId', minimum=0, maximum=9223372036854775700, position='Query'),
}

model DeleteOutboundTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteOutboundTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteOutboundTaskResponseBody(name='body'),
}

async function deleteOutboundTask(request: DeleteOutboundTaskRequest): DeleteOutboundTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteOutboundTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteOuterAccountRequest {
  outerAccountId: string(name='OuterAccountId', example='123456', position='Query'),
  outerAccountType: string(name='OuterAccountType', example='aliyun', position='Query'),
}

model DeleteOuterAccountResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model DeleteOuterAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteOuterAccountResponseBody(name='body'),
}

async function deleteOuterAccount(request: DeleteOuterAccountRequest): DeleteOuterAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteOuterAccount', 'GET', '/', 'json', false, 'json', request);
}

model DeleteQualityProjectRequest {
  instanceId: string(name='InstanceId', position='Query'),
  projectId?: long(name='ProjectId', minimum=0, maximum=9223372036854775807, position='Query'),
}

model DeleteQualityProjectResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteQualityProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteQualityProjectResponseBody(name='body'),
}

async function deleteQualityProject(request: DeleteQualityProjectRequest): DeleteQualityProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteQualityProject', 'POST', '/', 'json', false, 'json', request);
}

model DeleteQualityRuleRequest {
  id: long(name='Id', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model DeleteQualityRuleResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteQualityRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteQualityRuleResponseBody(name='body'),
}

async function deleteQualityRule(request: DeleteQualityRuleRequest): DeleteQualityRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteQualityRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSkillGroupRequest {
  outerGroupId?: string(name='OuterGroupId', example='123456', position='Query'),
  outerGroupType?: string(name='OuterGroupType', example='2', position='Query'),
}

model DeleteSkillGroupResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSkillGroupResponseBody(name='body'),
}

async function deleteSkillGroup(request: DeleteSkillGroupRequest): DeleteSkillGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSkillGroup', 'GET', '/', 'json', false, 'json', request);
}

model DescribeRecordDataRequest {
  accountId?: string(name='AccountId', example='2235****', position='Query'),
  accountType?: string(name='AccountType', example='BUC_TYPE', position='Query'),
  acid?: string(name='Acid', example='1004849****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', example='aiccs', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secLevel?: int32(name='SecLevel', example='2', position='Query'),
}

model DescribeRecordDataResponseBody = {
  acid?: string(name='Acid', example='1004849****'),
  agentId?: string(name='AgentId', example='1212****'),
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='OK'),
  ossLink?: string(name='OssLink', example='https://****'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
}

model DescribeRecordDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecordDataResponseBody(name='body'),
}

async function describeRecordData(request: DescribeRecordDataRequest): DescribeRecordDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecordData', 'POST', '/', 'json', false, 'json', request);
}

model EditQualityProjectRequest {
  analysisIds: [ long ](name='AnalysisIds', position='Query'),
  channelTouchType: [ int32 ](name='ChannelTouchType', position='Query'),
  checkFreqType: int32(name='CheckFreqType', minimum=1, maximum=100, position='Query'),
  depList?: [ long ](name='DepList', minimum=0, maximum=9223372036854775807, position='Query'),
  groupList?: [ long ](name='GroupList', minimum=0, maximum=9223372036854775807, position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  projectId: long(name='ProjectId', minimum=0, maximum=9223372036854775807, position='Query'),
  projectName: string(name='ProjectName', position='Body'),
  projectVersion: int32(name='ProjectVersion', minimum=1, maximum=100, position='Query'),
  scopeType: int32(name='ScopeType', minimum=1, maximum=100, position='Query'),
  servicerList?: [ string ](name='ServicerList', position='Query'),
  timeRangeEnd?: string(name='TimeRangeEnd', position='Query'),
  timeRangeStart?: string(name='TimeRangeStart', position='Query'),
}

model EditQualityProjectResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      instanceId?: string(name='InstanceId'),
      projectId?: long(name='ProjectId'),
      version?: int32(name='Version'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EditQualityProjectResponse = {
  headers: map[string]string(name='headers'),
  body: EditQualityProjectResponseBody(name='body'),
}

async function editQualityProject(request: EditQualityProjectRequest): EditQualityProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditQualityProject', 'POST', '/', 'json', true, 'form', request);
}

model EditQualityRuleRequest {
  instanceId: string(name='InstanceId', position='Body'),
  keyWords: [ string ](name='KeyWords', position='Body'),
  matchType: int32(name='MatchType', minimum=1, maximum=1000, position='Body'),
  name: string(name='Name', position='Body'),
  qualityRuleId: long(name='QualityRuleId', position='Body'),
  ruleTag: int32(name='RuleTag', position='Body'),
}

model EditQualityRuleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EditQualityRuleResponse = {
  headers: map[string]string(name='headers'),
  body: EditQualityRuleResponseBody(name='body'),
}

async function editQualityRule(request: EditQualityRuleRequest): EditQualityRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditQualityRule', 'POST', '/', 'json', true, 'form', request);
}

model EditQualityRuleTagRequest {
  analysisTypes: [ 
    {
      id?: long(name='Id'),
      name?: string(name='Name'),
    }
  ](name='AnalysisTypes', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model EditQualityRuleTagResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EditQualityRuleTagResponse = {
  headers: map[string]string(name='headers'),
  body: EditQualityRuleTagResponseBody(name='body'),
}

async function editQualityRuleTag(request: EditQualityRuleTagRequest): EditQualityRuleTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditQualityRuleTag', 'POST', '/', 'json', false, 'json', request);
}

model EncryptPhoneNumRequest {
  instanceId: string(name='InstanceId', description='实例Id', example='ccc_xp_pre***', position='Query'),
  phoneNum: string(name='PhoneNum', description='号码明文', example='130****0000', position='Query'),
}

model EncryptPhoneNumResponseBody = {
  code?: string(name='Code', description='错误码', example='200'),
  data?: string(name='Data', description='加密后密文', example='20nJ****/9Fl/kxx/***7'),
  message?: string(name='Message', description='错误信息', example='xxxx'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', description='接口调用是否成功', example='true'),
}

model EncryptPhoneNumResponse = {
  headers: map[string]string(name='headers'),
  body: EncryptPhoneNumResponseBody(name='body'),
}

async function encryptPhoneNum(request: EncryptPhoneNumRequest): EncryptPhoneNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EncryptPhoneNum', 'GET', '/', 'json', false, 'json', request);
}

model FetchCallRequest {
  accountName: string(name='AccountName', example='123@123.com', position='Body'),
  callId?: string(name='CallId', example='7719786', position='Body'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Body'),
  connectionId?: string(name='ConnectionId', example='7719788', position='Body'),
  holdConnectionId?: string(name='HoldConnectionId', example='0', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
  jobId?: string(name='JobId', example='7719787', position='Body'),
}

model FetchCallResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model FetchCallResponse = {
  headers: map[string]string(name='headers'),
  body: FetchCallResponseBody(name='body'),
}

async function fetchCall(request: FetchCallRequest): FetchCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FetchCall', 'POST', '/', 'json', true, 'form', request);
}

model FinishHotlineServiceRequest {
  accountName: string(name='AccountName', example='123@****.com', position='Body'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
}

model FinishHotlineServiceResponseBody = {
  code?: string(name='Code', example='Success'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model FinishHotlineServiceResponse = {
  headers: map[string]string(name='headers'),
  body: FinishHotlineServiceResponseBody(name='body'),
}

async function finishHotlineService(request: FinishHotlineServiceRequest): FinishHotlineServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FinishHotlineService', 'POST', '/', 'json', true, 'form', request);
}

model GenerateWebSocketSignRequest {
  accountName: string(name='AccountName', example='123@123.com', position='Body'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
}

model GenerateWebSocketSignResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: string(name='Data', example='dnthF_oinHg7JMJDmKqex3UxDD7'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model GenerateWebSocketSignResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateWebSocketSignResponseBody(name='body'),
}

async function generateWebSocketSign(request: GenerateWebSocketSignRequest): GenerateWebSocketSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateWebSocketSign', 'POST', '/', 'json', true, 'form', request);
}

model GetAgentRequest {
  accountName: string(name='AccountName', example='123@123.com', position='Query'),
  clientToken?: string(name='ClientToken', description='js sdk中自动生成的鉴权token', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Query'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Query'),
}

model GetAgentResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountName?: string(name='AccountName', example='123@123.com'),
    agentId?: long(name='AgentId', example='222222'),
    displayName?: string(name='DisplayName'),
    groupList?: [ 
      {
        channelType?: int32(name='ChannelType', example='1'),
        description?: string(name='Description'),
        displayName?: string(name='DisplayName'),
        name?: string(name='Name'),
        skillGroupId?: long(name='SkillGroupId', example='123456'),
      }
    ](name='GroupList'),
    status?: int32(name='Status', example='0'),
    tenantId?: long(name='TenantId', example='0'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model GetAgentResponse = {
  headers: map[string]string(name='headers'),
  body: GetAgentResponseBody(name='body'),
}

async function getAgent(request: GetAgentRequest): GetAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAgent', 'GET', '/', 'json', false, 'json', request);
}

model GetAgentBasisStatusRequest {
  agentIds?: [ long ](name='AgentIds', description='坐席id列表', shrink='simple', position='Query'),
  currentPage?: int32(name='CurrentPage', description='当前页（默认为1）', example='1', position='Query'),
  depIds?: [ long ](name='DepIds', description='部门id列表', shrink='simple', position='Query'),
  endDate?: long(name='EndDate', description='结束日期时间戳（毫秒）', example='1617761765000', position='Query'),
  instanceId: string(name='InstanceId', description='AICCS实例ID，在智能联络中心控制台上可以看到', example='ccc_xp_pre-cn-***', position='Query'),
  pageSize?: int32(name='PageSize', description='每页大小（默认为10)', example='20', position='Query'),
  startDate?: long(name='StartDate', description='开始日期时间戳（毫秒）', example='1615083365000', position='Query'),
}

model GetAgentBasisStatusResponseBody = {
  code?: string(name='Code', description='错误编码', example='200'),
  data?: {
    pageNum?: int32(name='PageNum', description='当前页数', example='1'),
    pageSize?: int32(name='PageSize', description='页大小', example='2000'),
    rows?: string(name='Rows', description='信息为list<map>类型的json字符串'),
    totalNum?: int32(name='TotalNum', description='总记录数', example='4'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='错误描述', example='OK'),
  requestId?: string(name='RequestId', description='请求ID，用于跟踪错误原因', example='EE338D98-9BD3-4413-B165'),
  success?: string(name='Success', description='调用接口是否成功', example='true'),
}

model GetAgentBasisStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetAgentBasisStatusResponseBody(name='body'),
}

async function getAgentBasisStatus(request: GetAgentBasisStatusRequest): GetAgentBasisStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAgentBasisStatus', 'GET', '/', 'json', false, 'json', request);
}

model GetAgentByIdRequest {
  agentId: long(name='AgentId', minimum=1, maximum=9223372036854775807, position='Body'),
  instanceId: string(name='InstanceId', position='Body'),
}

model GetAgentByIdResponseBody = {
  code?: string(name='Code'),
  data?: {
    agentId?: int32(name='AgentId'),
    createUserName?: string(name='CreateUserName'),
    foreignKey?: string(name='ForeignKey'),
    foreignNick?: string(name='ForeignNick'),
    realName?: string(name='RealName'),
    servicerType?: int32(name='ServicerType'),
    showName?: string(name='ShowName'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAgentByIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetAgentByIdResponseBody(name='body'),
}

async function getAgentById(request: GetAgentByIdRequest): GetAgentByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAgentById', 'POST', '/', 'json', true, 'form', request);
}

model GetAgentDetailReportRequest {
  agentIds?: [ long ](name='AgentIds', description='坐席id列表', shrink='simple', position='Query'),
  currentPage?: int32(name='CurrentPage', description='当前页（默认为1）', example='1', position='Query'),
  depIds?: [ long ](name='DepIds', description='部门id列表', shrink='simple', position='Query'),
  endDate?: long(name='EndDate', description='结束日期时间戳（毫秒）', example='1617761765000', position='Query'),
  existAgentGrouping?: boolean(name='ExistAgentGrouping', description='是否根据坐席分组显示', example='true/false', position='Query'),
  existDepartmentGrouping?: boolean(name='ExistDepartmentGrouping', description='是否根据部门分组显示', example='true/false', position='Query'),
  instanceId: string(name='InstanceId', description='AICCS实例ID，在智能联络中心控制台上可以看到', example='ccc_xp_pre-cn-***', position='Query'),
  pageSize?: int32(name='PageSize', description='每页大小（默认为10)', example='20', position='Query'),
  startDate?: long(name='StartDate', description='开始日期时间戳（毫秒）', example='1615083365000', position='Query'),
  timeLatitudeType?: string(name='TimeLatitudeType', description='时间纬度类型', example='day', position='Query'),
}

model GetAgentDetailReportResponseBody = {
  code?: string(name='Code', description='错误编码', example='200'),
  data?: {
    pageNum?: long(name='PageNum', description='当前页数', example='1'),
    pageSize?: long(name='PageSize', description='页大小', example='2000'),
    rows?: string(name='Rows', description='信息为list<map>类型的json字符串', example='{"t_wait":379322.0,"hotline_time_outcall_avg":"32.00","n_ringing":0,"t_outbound_40":0.0,"hotline_time_incall_avg":-1,"t_calldialing":0.0,"n_inbound":276,"servicer_id":"-1","call_in_sep_sat_cnt":13,"request_cnt":231,"n_not_ready_99":811,"t_work_outbound":49338.0,"hotline_rate_handle_in_60s":"96%","n_not_ready_login":811,"t_not_ready_login":0.0,"n_work_inbound":176,"}'),
    totalNum?: long(name='TotalNum', description='总记录数', example='4'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='错误描述', example='successful'),
  requestId?: string(name='RequestId', description='请求ID，用于跟踪错误原因', example='EE338D98-9BD3-4413-B165'),
  success?: string(name='Success', description='调用接口是否成功', example='true'),
}

model GetAgentDetailReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetAgentDetailReportResponseBody(name='body'),
}

async function getAgentDetailReport(request: GetAgentDetailReportRequest): GetAgentDetailReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAgentDetailReport', 'GET', '/', 'json', false, 'json', request);
}

model GetAgentIndexRealTimeRequest {
  currentPage?: int32(name='CurrentPage', minimum=1, maximum=1000, position='Query'),
  depIds?: [ long ](name='DepIds', position='Query'),
  groupIds?: [ long ](name='GroupIds', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=200, position='Query'),
}

model GetAgentIndexRealTimeResponseBody = {
  code?: string(name='Code'),
  data?: {
    columns?: [ 
      {
        key?: string(name='Key'),
        title?: string(name='Title'),
      }
    ](name='Columns'),
    page?: int32(name='Page'),
    pageSize?: int32(name='PageSize'),
    rows?: [  map[string]any ](name='Rows'),
    total?: int32(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAgentIndexRealTimeResponse = {
  headers: map[string]string(name='headers'),
  body: GetAgentIndexRealTimeResponseBody(name='body'),
}

async function getAgentIndexRealTime(request: GetAgentIndexRealTimeRequest): GetAgentIndexRealTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAgentIndexRealTime', 'POST', '/', 'json', false, 'json', request);
}

model GetAgentServiceStatusRequest {
  agentIds?: [ long ](name='AgentIds', description='坐席id列表', shrink='simple', position='Query'),
  currentPage?: int32(name='CurrentPage', description='当前页（默认为1）', example='1', position='Query'),
  depIds?: [ long ](name='DepIds', description='部门id列表', shrink='simple', position='Query'),
  endDate?: long(name='EndDate', description='结束日期时间戳（毫秒）', example='1617761765000', position='Query'),
  existAgentGrouping?: boolean(name='ExistAgentGrouping', description='是否根据坐席分组', example='true', position='Query'),
  existDepartmentGrouping?: boolean(name='ExistDepartmentGrouping', description='是否根据部门分组', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='AICCS实例ID，在智能联络中心控制台上可以看到', example='ccc_xp_pre-cn-***', position='Query'),
  pageSize?: int32(name='PageSize', description='每页大小（默认为10)', example='20', position='Query'),
  startDate?: long(name='StartDate', description='开始日期时间戳（毫秒）', example='1615083365000', position='Query'),
  timeLatitudeType?: string(name='TimeLatitudeType', description='时间纬度类型', example='minute', position='Query'),
}

model GetAgentServiceStatusResponseBody = {
  code?: string(name='Code', description='错误编码', example='200'),
  data?: {
    pageNum?: long(name='PageNum', description='当前页数', example='1'),
    pageSize?: long(name='PageSize', description='页大小', example='2000'),
    rows?: string(name='Rows', description='信息为list<map>类型的json字符串', example='{"online_40s_transfer_ready_cnt":81,"minute_id":"-1","online_unsatis_cnt":0,"online_simple_cnt":0,"average_queue_time":-1,"service_pickup":"2086","total_waiting_time":"981","online_service_time_len":58208,"online_direct_give_up_len":0,"break_ratio":"2%"}'),
    totalNum?: long(name='TotalNum', description='总记录数', example='4'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='错误描述', example='xxxx'),
  requestId?: string(name='RequestId', description='请求ID，用于跟踪错误原因', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', description='调用接口是否成功', example='true'),
}

model GetAgentServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetAgentServiceStatusResponseBody(name='body'),
}

async function getAgentServiceStatus(request: GetAgentServiceStatusRequest): GetAgentServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAgentServiceStatus', 'GET', '/', 'json', false, 'json', request);
}

model GetAgentStatisticsRequest {
  agentIds?: [ long ](name='AgentIds', description='坐席id列表', shrink='simple', position='Query'),
  currentPage?: int32(name='CurrentPage', description='当前页（默认为1）', example='1', position='Query'),
  depIds?: [ long ](name='DepIds', description='部门id列表', shrink='simple', position='Query'),
  endDate?: long(name='EndDate', description='结束日期时间戳（毫秒）', example='1617761765000', position='Query'),
  existAgentGrouping?: boolean(name='ExistAgentGrouping', description='是否根据坐席分组', example='false', position='Query'),
  existDepartmentGrouping?: boolean(name='ExistDepartmentGrouping', description='是否根据部门分组', example='false', position='Query'),
  instanceId: string(name='InstanceId', description='AICCS实例ID，在智能联络中心控制台上可以看到', example='ccc_xp_pre-cn-***', position='Query'),
  pageSize?: int32(name='PageSize', description='每页大小（默认为10)', example='20', position='Query'),
  startDate?: long(name='StartDate', description='开始日期时间戳（毫秒）', example='1615083365000', position='Query'),
  timeLatitudeType?: string(name='TimeLatitudeType', description='时间纬度类型', example='minute', position='Query'),
}

model GetAgentStatisticsResponseBody = {
  code?: string(name='Code', description='错误编码', example='200'),
  data?: {
    pageNum?: int32(name='PageNum', description='当前页数', example='1'),
    pageSize?: int32(name='PageSize', description='页大小', example='2000'),
    rows?: string(name='Rows', description='信息为list<map>类型的json字符串', example='{"n_resttype_1":15,"t_outcall_speak":829747,"average_incoming_time":"8451.29","n_resttype_3":0,"minute_id":"-1","n_conference_speak":0,"n_resttype_2":0,"n_resttype_5":0,"n_resttype_4":0,"n_resttype_7":0,"n_resttype_6":0,"n_resttype_9":0,"n_resttype_8":0,"n_outcall_dial":25,"total_break_time":"58555","n_internal_speak":0,"n_send_step_transfer":7,"n_consulted_internal_speak":0}'),
    totalNum?: int32(name='TotalNum', description='总记录数', example='4'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='错误描述', example='successful'),
  requestId?: string(name='RequestId', description='请求ID，用于跟踪错误原因', example='EE338D98-9BD3-4413-B165'),
  success?: string(name='Success', description='调用接口是否成功', example='true'),
}

model GetAgentStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetAgentStatisticsResponseBody(name='body'),
}

async function getAgentStatistics(request: GetAgentStatisticsRequest): GetAgentStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAgentStatistics', 'GET', '/', 'json', false, 'json', request);
}

model GetAiOutboundTaskBizDataRequest {
  channelId: string(name='ChannelId', description='入呼channelId', example='123456', position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', example='agent_***', position='Query'),
}

model GetAiOutboundTaskBizDataResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    bizData?: string(name='BizData', description='业务自定义信息', example='{"customer":123}'),
    caseId?: long(name='CaseId', description='id', example='123'),
    phoneNum?: string(name='PhoneNum', description='外呼号码', example='158****0000'),
    taskId?: long(name='TaskId', description='任务ID', example='123456'),
  }(name='Data', description='本次呼叫关联的业务信息'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model GetAiOutboundTaskBizDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetAiOutboundTaskBizDataResponseBody(name='body'),
}

async function getAiOutboundTaskBizData(request: GetAiOutboundTaskBizDataRequest): GetAiOutboundTaskBizDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAiOutboundTaskBizData', 'GET', '/', 'json', false, 'json', request);
}

model GetAiOutboundTaskDetailRequest {
  instanceId: string(name='InstanceId', description='实例ID', example='agent_***', position='Query'),
  taskId: long(name='TaskId', description='任务id', example='123456', position='Query'),
}

model GetAiOutboundTaskDetailResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    concurrentRate?: int32(name='ConcurrentRate', description='自动外呼的并发', example='10'),
    description?: string(name='Description', description='任务描述'),
    executionTime?: string(name='ExecutionTime', description='任务执行时间', example='{"TUESDAY":[{"start":"06:00","end":"06:05"}],"MONDAY":[{"start":"09:00","end":"18:00"},{"start":"20:30","end":"21:45"},{"start":"22:30","end":"22:50"}],"WEDNESDAY":[{"start":"09:00","end":"18:00"}],"THURSDAY":[{"start":"09:00","end":"18:00"}],"FRIDAY":[{"start":"09:00","end":"18:00"}],"SATURDAY":[{"start":"09:00","end":"18:00"}],"SUNDAY":[{"start":"17:00","end":"23:45"}]}'),
    forecastCallRate?: float(name='ForecastCallRate', description='预测式外呼固定外呼比例', example='1.2'),
    handlerId?: long(name='HandlerId', description='技能组id（预测式外呼）或者ivr id（自动外呼）', example='123456'),
    handlerName?: string(name='HandlerName', description='技能组名称或ivr名称', example='热线技能组'),
    name?: string(name='Name', description='任务名', example='xx外呼任务'),
    numRepeated?: int32(name='NumRepeated', description='被叫号码重复策略（0去重，1不去重）', example='0'),
    outboundNums?: [ string ](name='OutboundNums', description='外呼主叫号码'),
    recallRule?: {
      count?: int32(name='Count', description='重呼次数', example='2'),
      interval?: int32(name='Interval', description='重呼间隔时间（分钟）', example='2'),
    }(name='RecallRule', description='失败重呼策略'),
    status?: int32(name='Status', description='任务状态（0:未开始,1:进行中,2:系统暂停,3:手动暂停,4:已完成,5:已终止）', example='1'),
    statusDesc?: string(name='StatusDesc', description='任务状态描述', example='未开始'),
    taskId?: long(name='TaskId', description='任务id', example='123'),
    type?: int32(name='Type', description='任务类型(2:预测式外呼，3:自动外呼)', example='2'),
  }(name='Data', description='任务详情'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='请求ID', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
  success?: boolean(name='Success', example='true'),
}

model GetAiOutboundTaskDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetAiOutboundTaskDetailResponseBody(name='body'),
}

async function getAiOutboundTaskDetail(request: GetAiOutboundTaskDetailRequest): GetAiOutboundTaskDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAiOutboundTaskDetail', 'GET', '/', 'json', false, 'json', request);
}

model GetAiOutboundTaskExecDetailRequest {
  batchVersion?: int32(name='BatchVersion', description='任务批次', example='1', position='Query'),
  caseId?: long(name='CaseId', description='单条外呼id', example='123456', position='Query'),
  caseStatus?: int32(name='CaseStatus', description='单条号码任务执行状态（1：待呼叫，2:呼叫中，3:已完成，4:已终止，5:待重呼）', example='1', position='Query'),
  createTimeEnd?: long(name='CreateTimeEnd', description='号码导入结束时间戳（毫秒）', example='1632290119000', position='Query'),
  createTimeStart?: long(name='CreateTimeStart', description='号码导入起始时间戳（毫秒）', example='1632289999000', position='Query'),
  currentPage: int32(name='CurrentPage', description='当前页数', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', example='agent_***', position='Query'),
  pageSize: int32(name='PageSize', description='分页大小（<=50）', example='10', minimum=1, maximum=50, position='Query'),
  phoneNum?: string(name='PhoneNum', description='手机号', example='150****000', position='Query'),
  taskId: long(name='TaskId', description='任务id', example='123456', position='Query'),
}

model GetAiOutboundTaskExecDetailResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    currentPage?: int32(name='CurrentPage', description='当前页数', example='1'),
    hasNextPage?: boolean(name='HasNextPage', description='是否有下一页', example='true'),
    list?: [ 
      {
        batchVersion?: int32(name='BatchVersion', description='任务批次', example='1'),
        bizData?: string(name='BizData', description='业务自定义信息', example='123'),
        callCount?: int32(name='CallCount', description='外呼次数', example='1'),
        caseId?: long(name='CaseId', description='id', example='123456'),
        createTime?: long(name='CreateTime', description='号码导入时间戳（毫秒）', example='1632289999000'),
        lastCallResult?: string(name='LastCallResult', description='最后一次外呼结果', example='未接通'),
        phoneNum?: string(name='PhoneNum', description='手机号', example='150****0000'),
        status?: int32(name='Status', description='执行状态（1：待呼叫，2:呼叫中，3:已完成，4:已终止，5:待重呼）', example='1'),
        statusDesc?: int32(name='StatusDesc', description='执行状态描述', example='待呼叫'),
      }
    ](name='List', description='外呼号码执行列表'),
    pageSize?: int32(name='PageSize', description='分页大小', example='10'),
    totalResults?: int32(name='TotalResults', description='总数', example='199'),
  }(name='Data', description='任务执行列表'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
  success?: boolean(name='Success', example='true'),
}

model GetAiOutboundTaskExecDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetAiOutboundTaskExecDetailResponseBody(name='body'),
}

async function getAiOutboundTaskExecDetail(request: GetAiOutboundTaskExecDetailRequest): GetAiOutboundTaskExecDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAiOutboundTaskExecDetail', 'GET', '/', 'json', false, 'json', request);
}

model GetAiOutboundTaskListRequest {
  createTimeEnd?: long(name='CreateTimeEnd', description='任务创建截止时间戳（毫秒）', example='1617761765000', position='Query'),
  createTimeStart?: long(name='CreateTimeStart', description='任务创建起始时间戳（毫秒）', example='1615083365000', position='Query'),
  currentPage: int32(name='CurrentPage', description='查询第几页', example='1', minimum=1, position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', example='agent_****', position='Query'),
  pageSize: int32(name='PageSize', description='分页大小(<=50)', example='10', minimum=1, maximum=50, position='Query'),
  searchKey?: string(name='SearchKey', description='过滤条件：匹配任务ID或者模糊匹配任务名', example='1763****', position='Query'),
  status?: int32(name='Status', description='任务状态（0:未开始,1:进行中,2:系统暂停,3:手动暂停,4:已完成,5:已终止）', example='1', position='Query'),
  type: int32(name='Type', description='任务类型(2:预测式外呼，3:自动外呼)', example='2', position='Query'),
}

model GetAiOutboundTaskListResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    currentPage?: int32(name='CurrentPage', description='当前页数', example='1'),
    hasNextPage?: boolean(name='HasNextPage', description='是否有下一页', example='false'),
    list?: [ 
      {
        concurrentRate?: int32(name='ConcurrentRate', description='自动外呼的并发', example='1'),
        createTime?: long(name='CreateTime', description='任务创建时间毫秒时间戳', example='1615083365000'),
        description?: string(name='Description', description='任务描述'),
        finishCount?: int32(name='FinishCount', description='任务已完成量', example='70'),
        finishRate?: float(name='FinishRate', description='任务完成率', example='0.7'),
        handlerId?: long(name='HandlerId', description='技能组id（预测式）或者ivr id（自动外呼）', example='2468****'),
        handlerName?: string(name='HandlerName', description='技能组名称或ivr名称', example='热线技能组'),
        name?: string(name='Name', description='任务名称', example='xx外呼任务'),
        status?: int32(name='Status', description='任务状态（0:未开始,1:进行中,2:系统暂停,3:手动暂停,4:已完成,5:已终止）', example='0'),
        statusDesc?: string(name='StatusDesc', description='任务状态描述', example='未开始'),
        taskId?: long(name='TaskId', description='任务id', example='1763****'),
        totalCount?: int32(name='TotalCount', description='任务总量', example='100'),
      }
    ](name='List', description='任务信息'),
    pageSize?: int32(name='PageSize', description='分页大小', example='10'),
    totalResults?: int32(name='TotalResults', description='数据总量', example='10'),
  }(name='Data', description='任务列表'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='请求id', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model GetAiOutboundTaskListResponse = {
  headers: map[string]string(name='headers'),
  body: GetAiOutboundTaskListResponseBody(name='body'),
}

async function getAiOutboundTaskList(request: GetAiOutboundTaskListRequest): GetAiOutboundTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAiOutboundTaskList', 'GET', '/', 'json', false, 'json', request);
}

model GetAiOutboundTaskProgressRequest {
  batchVersion?: int32(name='BatchVersion', description='任务批次（为空则查询任务下所有数据）', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', example='agent_***', position='Query'),
  taskId: long(name='TaskId', description='任务id', example='123456', position='Query'),
}

model GetAiOutboundTaskProgressResponseBody = {
  code?: string(name='Code', example='ok'),
  data?: {
    calloutProgress?: {
      callLossCount?: int32(name='CallLossCount', description='呼损量（预测式外呼特有）', example='1'),
      callLossRate?: float(name='CallLossRate', description='呼损率（预测式外呼特有）', example='0.01'),
      callOutConnectCount?: int32(name='CallOutConnectCount', description='外呼接通次数（自动外呼特有）', example='5'),
      callOutConnectRate?: float(name='CallOutConnectRate', description='外呼接通次率（自动外呼特有）', example='0.5'),
      callOutCount?: int32(name='CallOutCount', description='外呼次数', example='10'),
      callOutServicerPickupCount?: int32(name='CallOutServicerPickupCount', description='坐席接通量（预测式外呼特有）', example='4'),
      callOutServicerPickupRate?: float(name='CallOutServicerPickupRate', description='坐席接通率（预测式外呼特有）', example='0.4'),
      callOutUserPickupCount?: int32(name='CallOutUserPickupCount', description='客户接起量（预测式外呼特有）', example='5'),
      callOutUserPickupRate?: float(name='CallOutUserPickupRate', description='客户接起率（预测式外呼特有）', example='0.5'),
    }(name='CalloutProgress', description='外呼维度进展'),
    taskId?: long(name='TaskId', description='任务id', example='123456'),
    taskProgress?: {
      callingCount?: int32(name='CallingCount', description='呼叫中任务数', example='2'),
      connectCount?: int32(name='ConnectCount', description='任务接通量（自动外呼特有）', example='2'),
      connectRate?: float(name='ConnectRate', description='任务接通率（自动外呼特有）', example='0.2'),
      finishCount?: int32(name='FinishCount', description='任务完成数', example='2'),
      finishRate?: float(name='FinishRate', description='任务完成率', example='0.20'),
      servicerPickupCount?: int32(name='ServicerPickupCount', description='坐席接通数（预测式外呼特有）', example='2'),
      servicerPickupRate?: float(name='ServicerPickupRate', description='坐席接通率(预测式外呼特有）', example='0.2'),
      terminateCount?: int32(name='TerminateCount', description='已终止任务数', example='2'),
      totalCount?: int32(name='TotalCount', description='总任务数', example='10'),
      userPickupCount?: int32(name='UserPickupCount', description='客户接起数（预测式外呼特有）', example='2'),
      userPickupRate?: float(name='UserPickupRate', description='客户接起率（预测式外呼特有）', example='0.2'),
      waitingCallCount?: int32(name='WaitingCallCount', description='待呼叫任务数', example='2'),
      waitingRecallCount?: int32(name='WaitingRecallCount', description='待重呼任务数', example='2'),
    }(name='TaskProgress', description='任务维度进展'),
    type?: int32(name='Type', description='任务类型（2:预测式3:自动）', example='2'),
  }(name='Data', description='任务进展'),
  message?: string(name='Message', example='ok'),
  requestId?: string(name='RequestId', description='Id of the request', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
  success?: boolean(name='Success', example='true'),
}

model GetAiOutboundTaskProgressResponse = {
  headers: map[string]string(name='headers'),
  body: GetAiOutboundTaskProgressResponseBody(name='body'),
}

async function getAiOutboundTaskProgress(request: GetAiOutboundTaskProgressRequest): GetAiOutboundTaskProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAiOutboundTaskProgress', 'GET', '/', 'json', false, 'json', request);
}

model GetAllDepartmentRequest {
  instanceId: string(name='InstanceId', description='实例id', example='ccc_xp_pre-cn-***', position='Query'),
}

model GetAllDepartmentResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: [ 
    {
      departmentId?: long(name='DepartmentId', example='10'),
      departmentName?: string(name='DepartmentName'),
    }
  ](name='Data', description='data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  message?: string(name='Message', description='message', example='successful'),
  requestId?: string(name='RequestId', description='requestId', example='98B032F5-6473-4EAC-8BA8-C28993513A1F'),
  success?: boolean(name='Success', description='success', example='true'),
}

model GetAllDepartmentResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllDepartmentResponseBody(name='body'),
}

async function getAllDepartment(request: GetAllDepartmentRequest): GetAllDepartmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAllDepartment', 'GET', '/', 'json', false, 'json', request);
}

model GetCallSoundRecordRequest {
  callId: string(name='CallId', example='125165515022^11195613****', position='Query'),
  createTime: string(name='CreateTime', example='2021-10-15 08:56:23', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetCallSoundRecordResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='http://aliccrec-shvpc.oss-cn-shanghai.aliyuncs.com/accrec_tmp/1001067****.wav'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
  success?: boolean(name='Success', example='true'),
}

model GetCallSoundRecordResponse = {
  headers: map[string]string(name='headers'),
  body: GetCallSoundRecordResponseBody(name='body'),
}

async function getCallSoundRecord(request: GetCallSoundRecordRequest): GetCallSoundRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCallSoundRecord', 'POST', '/', 'json', false, 'json', request);
}

model GetConfigNumListRequest {
  accountName?: string(name='AccountName', description='账号名称', example='123@123.com', position='Query'),
  departmentId?: long(name='DepartmentId', description='部门ID', example='12345', position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', example='ccc_xp_pre-cn-***', position='Query'),
}

model GetConfigNumListResponseBody = {
  code?: string(name='Code', description='错误码', example='Success'),
  data?: [ string ](name='Data', description='号码列表'),
  message?: string(name='Message', description='错误信息', example='xxxx'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE339D98-9BD3-4413-B165'),
  success?: boolean(name='Success', description='接口调用是否成功', example='true'),
}

model GetConfigNumListResponse = {
  headers: map[string]string(name='headers'),
  body: GetConfigNumListResponseBody(name='body'),
}

async function getConfigNumList(request: GetConfigNumListRequest): GetConfigNumListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConfigNumList', 'GET', '/', 'json', false, 'json', request);
}

model GetCustomerInfoRequest {
  instanceId: string(name='InstanceId', description='实例ID', example='ccc_xp_pre-cn-***', position='Query'),
  memberId: long(name='MemberId', description='会员ID', example='82345678****', minimum=1, maximum=9223372036854775807, position='Query'),
}

model GetCustomerInfoResponseBody = {
  code?: string(name='Code', description='错误码', example='200'),
  data?: {
    customizeFields?: map[string]any(name='CustomizeFields', description='自定义字段'),
    nick?: string(name='Nick', description='昵称'),
    outerId?: string(name='OuterId', description='外部ID', example='6666666'),
    photo?: string(name='Photo', description='头像', example='https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLSW7XPFlJDwVunXP8pr84TvltwtLlNqTlOVSFeM3bCgn57mAB4JuZZmvMW0qicqW0PyzyUdZpxiaFQ'),
    realName?: string(name='RealName', description='真实姓名'),
    userId?: long(name='UserId', description='会员ID', example='823456789023'),
  }(name='Data', description='会员信息'),
  message?: string(name='Message', description='错误信息', example='successful'),
  requestId?: string(name='RequestId', description='请求ID', example='DF6A3FB7-A5AA-43BE-A65B'),
  success?: boolean(name='Success', description='是否请求成功', example='true'),
}

model GetCustomerInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetCustomerInfoResponseBody(name='body'),
}

async function getCustomerInfo(request: GetCustomerInfoRequest): GetCustomerInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomerInfo', 'GET', '/', 'json', false, 'json', request);
}

model GetDepGroupTreeDataRequest {
  agentId: long(name='AgentId', description='坐席ID', example='123456', position='Query'),
  instanceId: string(name='InstanceId', description='租户实例ID', example='ccc_xp_pre-cn-***', position='Query'),
}

model GetDepGroupTreeDataResponseBody = {
  code?: string(name='Code', description='Code', example='Success'),
  data?: [ 
    {
      depGroupId?: string(name='DepGroupId', description='depGroupId', example='10'),
      depGroupName?: string(name='DepGroupName', description='depGroupName'),
      groupDTOS?: [ 
        {
          name?: string(name='Name', description='name'),
          skillGroupId?: long(name='SkillGroupId', description='skillGroupId', example='555555'),
        }
      ](name='GroupDTOS', description='groupDTOS'),
    }
  ](name='Data', description='Data'),
  message?: string(name='Message', description='Message', example='xxxx'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE338D98-9BD3-4413-B165'),
  success?: string(name='Success', description='Success', example='true'),
}

model GetDepGroupTreeDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetDepGroupTreeDataResponseBody(name='body'),
}

async function getDepGroupTreeData(request: GetDepGroupTreeDataRequest): GetDepGroupTreeDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDepGroupTreeData', 'GET', '/', 'json', false, 'json', request);
}

model GetDepartmentalLatitudeAgentStatusRequest {
  currentPage?: long(name='CurrentPage', description='当前页（默认为1）', example='1', position='Query'),
  depIds?: [ long ](name='DepIds', description='技能组分组id列表', shrink='simple', position='Query'),
  endDate?: long(name='EndDate', description='结束日期时间戳（毫秒）', example='1617761765000', position='Query'),
  existDepartmentGrouping?: boolean(name='ExistDepartmentGrouping', description='是否根据技能组分组id分组显示', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='AICCS实例ID，在智能联络中心控制台上可以看到', example='ccc_xp_pre-cn-***', position='Query'),
  pageSize?: long(name='PageSize', description='每页大小（默认为10)', example='20', position='Query'),
  startDate?: long(name='StartDate', description='开始日期时间戳（毫秒）', example='1615083365000', position='Query'),
}

model GetDepartmentalLatitudeAgentStatusResponseBody = {
  code?: string(name='Code', description='错误编码', example='200'),
  data?: {
    pageNum?: int32(name='PageNum', description='当前页数', example='1'),
    pageSize?: int32(name='PageSize', description='每页的数量', example='2000'),
    rows?: string(name='Rows', description='信息为list<map>类型的json字符串'),
    totalNum?: int32(name='TotalNum', description='总共记录数', example='4'),
  }(name='Data', description='数据'),
  message?: string(name='Message', description='错误描述', example='message'),
  requestId?: string(name='RequestId', description='请求ID，用于跟踪错误原因', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', description='接口调用是否成功', example='true'),
}

model GetDepartmentalLatitudeAgentStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetDepartmentalLatitudeAgentStatusResponseBody(name='body'),
}

async function getDepartmentalLatitudeAgentStatus(request: GetDepartmentalLatitudeAgentStatusRequest): GetDepartmentalLatitudeAgentStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDepartmentalLatitudeAgentStatus', 'GET', '/', 'json', false, 'json', request);
}

model GetHotlineAgentDetailRequest {
  accountName: string(name='AccountName', example='123@****.com', position='Query'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d****', position='Query'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Query'),
}

model GetHotlineAgentDetailResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    agentId?: long(name='AgentId', example='2235****'),
    agentStatus?: int32(name='AgentStatus', example='1'),
    agentStatusCode?: string(name='AgentStatusCode', example='AgentCheckout'),
    assigned?: boolean(name='Assigned', example='false'),
    restType?: int32(name='RestType', example='1'),
    tenantId?: long(name='TenantId', example='ccc_xp_pre-cn-***'),
    token?: string(name='Token', example='dnthF_oinHg7JMJDmKqex3Ux****'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model GetHotlineAgentDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineAgentDetailResponseBody(name='body'),
}

async function getHotlineAgentDetail(request: GetHotlineAgentDetailRequest): GetHotlineAgentDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHotlineAgentDetail', 'GET', '/', 'json', false, 'json', request);
}

model GetHotlineAgentDetailReportRequest {
  currentPage?: int32(name='CurrentPage', example='1', minimum=1, maximum=1000, position='Query'),
  depIds?: [ long ](name='DepIds', position='Query'),
  endDate: long(name='EndDate', example='1614824972', minimum=1, position='Query'),
  groupIds?: [ long ](name='GroupIds', position='Query'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=200, position='Query'),
  startDate: long(name='StartDate', example='1614824872', minimum=1, position='Query'),
}

model GetHotlineAgentDetailReportResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    columns?: [ 
      {
        key?: string(name='Key', example='realName'),
        title?: string(name='Title'),
      }
    ](name='Columns'),
    page?: int32(name='Page', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    rows?: [  map[string]any ](name='Rows'),
    total?: int32(name='Total', example='7'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: string(name='Success', example='true'),
}

model GetHotlineAgentDetailReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineAgentDetailReportResponseBody(name='body'),
}

async function getHotlineAgentDetailReport(request: GetHotlineAgentDetailReportRequest): GetHotlineAgentDetailReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHotlineAgentDetailReport', 'POST', '/', 'json', false, 'json', request);
}

model GetHotlineAgentStatusRequest {
  accountName: string(name='AccountName', example='123@****.com', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
}

model GetHotlineAgentStatusResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: string(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model GetHotlineAgentStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineAgentStatusResponseBody(name='body'),
}

async function getHotlineAgentStatus(request: GetHotlineAgentStatusRequest): GetHotlineAgentStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHotlineAgentStatus', 'POST', '/', 'json', true, 'form', request);
}

model GetHotlineCallActionRequest {
  acc?: string(name='Acc', description='热线自定义参数', example='{"time":1}', position='Body'),
  accountName?: string(name='AccountName', example='username@example.com', position='Body'),
  act?: int32(name='Act', example='1', minimum=0, maximum=2147483647, position='Body'),
  biz?: string(name='Biz', description='业务自定义参数', example='{"name":123}', position='Body'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d9****', position='Body'),
  fromSource?: string(name='FromSource', example='hotlinebs_out', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
}

model GetHotlineCallActionResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    actionId?: long(name='ActionId', example='8999****'),
    buId?: long(name='BuId', example='2367****'),
    calloutId?: long(name='CalloutId', example='1122****'),
    calloutName?: string(name='CalloutName'),
    caseId?: long(name='CaseId', example='1138902****'),
    channelId?: string(name='ChannelId', example='2377****'),
    channelType?: long(name='ChannelType', example='2'),
    depId?: long(name='DepId', example='1223****'),
    isTransfer?: string(name='IsTransfer', example='true'),
    memberId?: long(name='MemberId', example='7856876****'),
    memberList?: string(name='MemberList', example='8900****'),
    memberName?: string(name='MemberName'),
    servicerId?: long(name='ServicerId', example='1332****'),
    servicerName?: string(name='ServicerName'),
    subTouchId?: long(name='SubTouchId', example='3423****'),
    taskId?: long(name='TaskId', example='12345****'),
    touchId?: long(name='TouchId', example='2235****'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='EE339D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model GetHotlineCallActionResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineCallActionResponseBody(name='body'),
}

async function getHotlineCallAction(request: GetHotlineCallActionRequest): GetHotlineCallActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHotlineCallAction', 'POST', '/', 'json', true, 'form', request);
}

model GetHotlineGroupDetailReportRequest {
  currentPage?: int32(name='CurrentPage', minimum=1, maximum=1000, position='Query'),
  depIds?: [ long ](name='DepIds', position='Query'),
  endDate: long(name='EndDate', minimum=1, position='Query'),
  groupIds?: [ long ](name='GroupIds', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=200, position='Query'),
  startDate: long(name='StartDate', minimum=1, position='Query'),
}

model GetHotlineGroupDetailReportResponseBody = {
  code?: string(name='Code'),
  data?: {
    columns?: [ 
      {
        key?: string(name='Key'),
        title?: string(name='Title'),
      }
    ](name='Columns'),
    page?: int32(name='Page'),
    pageSize?: int32(name='PageSize'),
    rows?: [  map[string]any ](name='Rows'),
    total?: int32(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model GetHotlineGroupDetailReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineGroupDetailReportResponseBody(name='body'),
}

async function getHotlineGroupDetailReport(request: GetHotlineGroupDetailReportRequest): GetHotlineGroupDetailReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHotlineGroupDetailReport', 'POST', '/', 'json', false, 'json', request);
}

model GetHotlineMessageLogRequest {
  acid: string(name='Acid', description='会话id', example='100****2077', position='Query'),
  instanceId: string(name='InstanceId', description='实例id', example='ccc_xp_pre-cn-***', position='Query'),
}

model GetHotlineMessageLogResponseBody = {
  code?: string(name='Code', description='错误码', example='Success'),
  data?: [ 
    {
      acid?: string(name='Acid', description='会话ID', example='100****2077'),
      content?: string(name='Content', description='会话内容'),
      endTime?: long(name='EndTime', description='结束时间', example='1623738027480'),
      mid?: string(name='Mid', description='记录id', example='11deca999****'),
      senderType?: int32(name='SenderType', description='发送方类型（1：会员，2：坐席）', example='1'),
      startTime?: long(name='StartTime', description='开始时间', example='1623738026460'),
    }
  ](name='Data'),
  message?: string(name='Message', description='错误信息', example='xxxx'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', description='调用是否成功', example='true'),
}

model GetHotlineMessageLogResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineMessageLogResponseBody(name='body'),
}

async function getHotlineMessageLog(request: GetHotlineMessageLogRequest): GetHotlineMessageLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHotlineMessageLog', 'GET', '/', 'json', false, 'json', request);
}

model GetHotlineRuntimeInfoRequest {
  accountName: string(name='AccountName', description='账号名', example='123@****.com', position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', example='ccc_xp_pre-cn-***', position='Query'),
}

model GetHotlineRuntimeInfoResponseBody = {
  code?: string(name='Code', description='错误码', example='200'),
  data?: map[string]any(name='Data', description='数据结果'),
  message?: string(name='Message', description='错误信息', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', description='接口调用是否成功', example='true'),
}

model GetHotlineRuntimeInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineRuntimeInfoResponseBody(name='body'),
}

async function getHotlineRuntimeInfo(request: GetHotlineRuntimeInfoRequest): GetHotlineRuntimeInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHotlineRuntimeInfo', 'GET', '/', 'json', false, 'json', request);
}

model GetHotlineServiceStatisticsRequest {
  agentIds?: [ long ](name='AgentIds', description='坐席id列表', shrink='simple', position='Query'),
  currentPage?: int32(name='CurrentPage', description='当前页（默认为1）', example='1', position='Query'),
  depIds?: [ long ](name='DepIds', description='部门id列表', shrink='simple', position='Query'),
  endDate?: long(name='EndDate', description='结束日期时间戳（毫秒）', example='1617761765000', position='Query'),
  existAgentGrouping?: boolean(name='ExistAgentGrouping', description='是否根据坐席分组', example='true', position='Query'),
  existDepartmentGrouping?: boolean(name='ExistDepartmentGrouping', description='是否根据部门分组', example='true', position='Query'),
  existSkillGroupGrouping?: boolean(name='ExistSkillGroupGrouping', description='是否根据技能组分组', example='true', position='Query'),
  groupIds?: [ long ](name='GroupIds', description='技能组id列表', shrink='simple', position='Query'),
  instanceId: string(name='InstanceId', description='AICCS实例ID，在智能联络中心控制台上可以看到', example='ccc_xp_pre-cn-***', position='Query'),
  pageSize?: int32(name='PageSize', description='每页大小（默认为10)', example='10', position='Query'),
  startDate?: long(name='StartDate', description='开始日期时间戳（毫秒）', example='1615083365000', position='Query'),
  timeLatitudeType?: string(name='TimeLatitudeType', description='时间纬度类型', example='minute', position='Query'),
}

model GetHotlineServiceStatisticsResponseBody = {
  code?: string(name='Code', description='错误编码', example='200'),
  data?: {
    pageNum?: int32(name='PageNum', description='当前页数', example='1'),
    pageSize?: int32(name='PageSize', description='页大小', example='2000'),
    rows?: string(name='Rows', description='信息为list<map>类型的json字符串'),
    totalNum?: int32(name='TotalNum', description='总记录数', example='4'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='错误描述', example='message'),
  requestId?: string(name='RequestId', description='请求ID，用于跟踪错误原因', example='EE338D98-9BD3-4413-B165'),
  success?: string(name='Success', description='调用接口是否成功', example='true'),
}

model GetHotlineServiceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineServiceStatisticsResponseBody(name='body'),
}

async function getHotlineServiceStatistics(request: GetHotlineServiceStatisticsRequest): GetHotlineServiceStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHotlineServiceStatistics', 'GET', '/', 'json', false, 'json', request);
}

model GetHotlineWaitingNumberRequest {
  accountName: string(name='AccountName', example='123@123.com', position='Query'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Query'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Query'),
}

model GetHotlineWaitingNumberResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: long(name='Data', example='2'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: string(name='Success', example='true'),
}

model GetHotlineWaitingNumberResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineWaitingNumberResponseBody(name='body'),
}

async function getHotlineWaitingNumber(request: GetHotlineWaitingNumberRequest): GetHotlineWaitingNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHotlineWaitingNumber', 'GET', '/', 'json', false, 'json', request);
}

model GetIndexCurrentValueRequest {
  depIds?: string(name='DepIds', example='2332****,2334****', position='Query'),
  groupIds?: string(name='GroupIds', example='2323****,2324****', position='Query'),
  instanceId?: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Query'),
}

model GetIndexCurrentValueResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [  map[string]any ](name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model GetIndexCurrentValueResponse = {
  headers: map[string]string(name='headers'),
  body: GetIndexCurrentValueResponseBody(name='body'),
}

async function getIndexCurrentValue(request: GetIndexCurrentValueRequest): GetIndexCurrentValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIndexCurrentValue', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceListRequest {
  name?: string(name='Name', position='Body'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=1000, position='Body'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Body'),
}

model GetInstanceListResponseBody = {
  code?: string(name='Code'),
  commodityInstances?: [ 
    {
      instanceId?: string(name='InstanceId'),
      name?: string(name='Name'),
    }
  ](name='CommodityInstances'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model GetInstanceListResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceListResponseBody(name='body'),
}

async function getInstanceList(request: GetInstanceListRequest): GetInstanceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceList', 'POST', '/', 'json', true, 'form', request);
}

model GetMcuLvsIpRequest {
  instanceId: string(name='InstanceId', description='实例ID', example='ccc_xp_pre***', position='Query'),
}

model GetMcuLvsIpResponseBody = {
  code?: string(name='Code', description='error code', example='200'),
  data?: string(name='Data', description='result data', example='{ "xmculvs":[ 0:{ "port":00 "ip":"0.0.0.0" "name":"lvs1" } ]}'),
  message?: string(name='Message', description='error message', example='xxxx'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', description='success', example='true'),
}

model GetMcuLvsIpResponse = {
  headers: map[string]string(name='headers'),
  body: GetMcuLvsIpResponseBody(name='body'),
}

async function getMcuLvsIp(request: GetMcuLvsIpRequest): GetMcuLvsIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMcuLvsIp', 'GET', '/', 'json', false, 'json', request);
}

model GetNumLocationRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  phoneNum: string(name='PhoneNum', position='Query'),
}

model GetNumLocationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetNumLocationResponse = {
  headers: map[string]string(name='headers'),
  body: GetNumLocationResponseBody(name='body'),
}

async function getNumLocation(request: GetNumLocationRequest): GetNumLocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNumLocation', 'GET', '/', 'json', false, 'json', request);
}

model GetOnlineSeatInformationRequest {
  agentIds?: [ long ](name='AgentIds', description='坐席id列表', shrink='simple', position='Query'),
  currentPage?: int32(name='CurrentPage', description='当前页（默认为1）', example='1', position='Query'),
  depIds?: [ long ](name='DepIds', description='部门id列表', shrink='simple', position='Query'),
  endDate?: long(name='EndDate', description='结束日期时间戳（毫秒）', example='1617761765000', position='Query'),
  instanceId: string(name='InstanceId', description='AICCS实例ID，在智能联络中心控制台上可以看到', example='ccc_xp_pre-cn-***', position='Query'),
  pageSize?: int32(name='PageSize', description='每页大小（默认为10)', example='20', position='Query'),
  startDate?: long(name='StartDate', description='开始日期时间戳（毫秒）', example='1615083365000', position='Query'),
}

model GetOnlineSeatInformationResponseBody = {
  code?: string(name='Code', description='错误编码', example='200'),
  data?: {
    pageNum?: int32(name='PageNum', description='当前页数', example='1'),
    pageSize?: int32(name='PageSize', description='页大小', example='2000'),
    rows?: string(name='Rows', description='信息为list<map>类型的json字符串'),
    totalNum?: int32(name='TotalNum', description='总记录数', example='4'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='错误描述', example='successful'),
  requestId?: string(name='RequestId', description='请求ID，用于跟踪错误原因', example='EE338D98-9BD3-4413-B165'),
  success?: string(name='Success', description='调用接口是否成功', example='true'),
}

model GetOnlineSeatInformationResponse = {
  headers: map[string]string(name='headers'),
  body: GetOnlineSeatInformationResponseBody(name='body'),
}

async function getOnlineSeatInformation(request: GetOnlineSeatInformationRequest): GetOnlineSeatInformationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOnlineSeatInformation', 'GET', '/', 'json', false, 'json', request);
}

model GetOnlineServiceVolumeRequest {
  agentIds?: [ long ](name='AgentIds', description='坐席id列表', shrink='simple', position='Query'),
  currentPage?: int32(name='CurrentPage', description='当前页（默认为1）', example='1', position='Query'),
  depIds?: [ long ](name='DepIds', description='部门id列表', shrink='simple', position='Query'),
  endDate?: long(name='EndDate', description='结束日期时间戳（毫秒）', example='1617761765000', position='Query'),
  existAgentGrouping?: boolean(name='ExistAgentGrouping', description='是否根据坐席分组', example='false', position='Query'),
  existDepartmentGrouping?: boolean(name='ExistDepartmentGrouping', description='是否根据部门分组', example='false', position='Query'),
  existSkillGroupGrouping?: boolean(name='ExistSkillGroupGrouping', description='是否根据技能组分组', example='false', position='Query'),
  groupIds?: [ long ](name='GroupIds', description='技能组id列表', shrink='simple', position='Query'),
  instanceId: string(name='InstanceId', description='AICCS实例ID，在智能联络中心控制台上可以看到', example='ccc_xp_pre-cn-***', position='Query'),
  pageSize?: int32(name='PageSize', description='每页大小（默认为10)', example='20', position='Query'),
  startDate?: long(name='StartDate', description='开始日期时间戳（毫秒）', example='1615083365000', position='Query'),
  timeLatitudeType?: string(name='TimeLatitudeType', description='时间纬度类型', example='minute', position='Query'),
}

model GetOnlineServiceVolumeResponseBody = {
  code?: string(name='Code', description='错误编码', example='200'),
  data?: {
    pageNum?: int32(name='PageNum', description='当前页数', example='1'),
    pageSize?: int32(name='PageSize', description='页大小', example='2000'),
    rows?: string(name='Rows', description='信息为list<map>类型的json字符串', example='{"tenant_id":"905","online_40s_transfer_ready_cnt":109,"minute_id":"-1","wait_time_len":1215,"pickup_rate":"63.09%","thirty_seconds_to_pickUp":"2560","date_id":"-1","online_over_out_cnt":0,"online_20s_transfer_ready_cnt":109,"thirty_seconds_response_rate":"63.09%","abandonment_rate":"63.09%","service_time_len":68378,"service_pickup":"2560","hour_id":"-1","online_10s_transfer_ready_cnt":109}'),
    totalNum?: int32(name='TotalNum', description='总记录数', example='4'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='错误描述', example='successful'),
  requestId?: string(name='RequestId', description='请求ID，用于跟踪错误原因', example='EE338D98-9BD3-4413-B165'),
  success?: string(name='Success', description='调用接口是否成功', example='true'),
}

model GetOnlineServiceVolumeResponse = {
  headers: map[string]string(name='headers'),
  body: GetOnlineServiceVolumeResponseBody(name='body'),
}

async function getOnlineServiceVolume(request: GetOnlineServiceVolumeRequest): GetOnlineServiceVolumeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOnlineServiceVolume', 'GET', '/', 'json', false, 'json', request);
}

model GetOutbounNumListRequest {
  accountName: string(name='AccountName', example='123@****.com', position='Body'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d****', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-****', position='Body'),
}

model GetOutbounNumListResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    num?: [ 
      {
        description?: string(name='Description'),
        type?: int32(name='Type', example='1'),
        value?: string(name='Value', example='07512234****'),
      }
    ](name='Num'),
    numGroup?: [ 
      {
        description?: string(name='Description', example='Jella'),
        type?: int32(name='Type', example='2'),
        value?: string(name='Value', example='7688****'),
      }
    ](name='NumGroup'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model GetOutbounNumListResponse = {
  headers: map[string]string(name='headers'),
  body: GetOutbounNumListResponseBody(name='body'),
}

async function getOutbounNumList(request: GetOutbounNumListRequest): GetOutbounNumListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOutbounNumList', 'POST', '/', 'json', true, 'form', request);
}

model GetQualityProjectDetailRequest {
  instanceId: string(name='InstanceId', description='租户实例ID', example='ccc_xp_pre***', position='Query'),
  projectId: long(name='ProjectId', description='质检任务ID', example='15977801', minimum=0, maximum=9223372036854775807, position='Query'),
}

model GetQualityProjectDetailResponseBody = {
  code?: string(name='Code', description='Code', example='200'),
  data?: {
    checkFreqType?: int32(name='CheckFreqType', description='质检周期', example='1'),
    createTime?: string(name='CreateTime', description='创建时间', example='2021-04-07 18:07:18'),
    depList?: [ long ](name='DepList', description='技能组分组'),
    groupList?: [ long ](name='GroupList', description='技能组列表'),
    id?: long(name='Id', description='质检任务ID', example='15977801'),
    modifyTime?: string(name='ModifyTime', description='修改时间', example='2021-04-07 18:07:19'),
    projectName?: string(name='ProjectName', description='质检任务名称'),
    qualityRuleIds?: [ long ](name='QualityRuleIds', description='质检规则ID'),
    qualityType?: int32(name='QualityType', description='质检类型', example='1'),
    servicerList?: [ long ](name='ServicerList', description='坐席列表'),
    status?: int32(name='Status', description='质检任务状态', example='0'),
    version?: int32(name='Version', description='Version', example='1'),
  }(name='Data', description='Data'),
  message?: string(name='Message', description='Message', example='xxxx'),
  requestId?: string(name='RequestId', description='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: string(name='Success', description='Success', example='true'),
}

model GetQualityProjectDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetQualityProjectDetailResponseBody(name='body'),
}

async function getQualityProjectDetail(request: GetQualityProjectDetailRequest): GetQualityProjectDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQualityProjectDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetQualityProjectListRequest {
  instanceId: string(name='InstanceId', description='实例ID', example='ccc_xp_pre***', position='Query'),
  pageNo?: int32(name='PageNo', description='PageNo', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', description='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  projectId?: long(name='ProjectId', description='质检项ID', example='15', minimum=0, maximum=9223372036854775807, position='Query'),
  projectName?: string(name='ProjectName', description='质检项名称', position='Query'),
  status?: int32(name='Status', description='质检项状态', example='0', position='Query'),
  checkFreqType?: long(name='checkFreqType', description='质检频率', example='1', position='Query'),
}

model GetQualityProjectListResponseBody = {
  code?: string(name='Code', description='Code', example='200'),
  data?: {
    pageNo?: int32(name='PageNo', description='PageNo', example='1'),
    pageSize?: int32(name='PageSize', description='PageSize', example='10'),
    qualityProjectList?: [ 
      {
        checkFreqType?: int32(name='CheckFreqType', description='质检任务频率', example='1'),
        createTime?: string(name='CreateTime', description='CreateTime', example='2021-04-07 18:07:18'),
        depList?: [ long ](name='DepList', description='技能组分组列表'),
        groupList?: [ long ](name='GroupList', description='技能组列表'),
        id?: long(name='Id', description='质检任务Id', example='15977801'),
        modifyTime?: string(name='ModifyTime', description='修改时间', example='2021-04-07 18:07:19'),
        projectName?: string(name='ProjectName', description='质检任务名称'),
        qualityRuleIds?: [ long ](name='QualityRuleIds', description='质检规则列表'),
        qualityType?: int32(name='QualityType', description='质检任务类型', example='1'),
        servicerList?: [ long ](name='ServicerList', description='坐席列表'),
        status?: int32(name='Status', description='质检任务状态', example='0'),
        version?: int32(name='Version', description='版本', example='1'),
      }
    ](name='QualityProjectList', description='质检项列表'),
    total?: long(name='Total', description='Total', example='35'),
  }(name='Data', description='Data'),
  message?: string(name='Message', description='Message', example='xxxx'),
  requestId?: string(name='RequestId', description='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', description='Success', example='true'),
}

model GetQualityProjectListResponse = {
  headers: map[string]string(name='headers'),
  body: GetQualityProjectListResponseBody(name='body'),
}

async function getQualityProjectList(request: GetQualityProjectListRequest): GetQualityProjectListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQualityProjectList', 'POST', '/', 'json', false, 'json', request);
}

model GetQualityProjectLogRequest {
  instanceId: string(name='InstanceId', position='Query'),
  projectId?: long(name='ProjectId', position='Query'),
}

model GetQualityProjectLogResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      actionData?: string(name='ActionData'),
      actionTime?: string(name='ActionTime'),
      actionType?: string(name='ActionType'),
      projectCreateTime?: string(name='ProjectCreateTime'),
      projectId?: long(name='ProjectId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetQualityProjectLogResponse = {
  headers: map[string]string(name='headers'),
  body: GetQualityProjectLogResponseBody(name='body'),
}

async function getQualityProjectLog(request: GetQualityProjectLogRequest): GetQualityProjectLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQualityProjectLog', 'POST', '/', 'json', false, 'json', request);
}

model GetQualityResultRequest {
  channelType?: string(name='ChannelType', position='Query'),
  groupIds?: [ long ](name='GroupIds', position='Query'),
  hitStatus?: int32(name='HitStatus', minimum=1, maximum=100, position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  pageNo?: int32(name='PageNo', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=1000, position='Query'),
  projectIds?: [ long ](name='ProjectIds', position='Query'),
  qualityRuleIds?: [ long ](name='QualityRuleIds', position='Query'),
  touchEndTime: string(name='TouchEndTime', position='Query'),
  touchStartTime: string(name='TouchStartTime', position='Query'),
}

model GetQualityResultResponseBody = {
  channelTypeName?: string(name='ChannelTypeName'),
  code?: string(name='Code'),
  data?: {
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    qualityResultResponseList?: [ 
      {
        channelType?: string(name='ChannelType'),
        channelTypeName?: string(name='ChannelTypeName'),
        groupId?: string(name='GroupId'),
        groupName?: string(name='GroupName'),
        hitDetail?: string(name='HitDetail'),
        hitStatus?: boolean(name='HitStatus'),
        instanceName?: string(name='InstanceName'),
        memberName?: string(name='MemberName'),
        projectId?: string(name='ProjectId'),
        projectName?: string(name='ProjectName'),
        ruleId?: string(name='RuleId'),
        ruleName?: string(name='RuleName'),
        servicerId?: string(name='ServicerId'),
        servicerName?: string(name='ServicerName'),
        touchId?: string(name='TouchId'),
        touchStartTime?: string(name='TouchStartTime'),
      }
    ](name='QualityResultResponseList'),
    totalNum?: int32(name='TotalNum'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetQualityResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetQualityResultResponseBody(name='body'),
}

async function getQualityResult(request: GetQualityResultRequest): GetQualityResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQualityResult', 'POST', '/', 'json', false, 'json', request);
}

model GetQualityRuleDetailRequest {
  instanceId: string(name='InstanceId', position='Query'),
  qualityRuleId: long(name='QualityRuleId', position='Query'),
}

model GetQualityRuleDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    keyWords?: [ string ](name='KeyWords'),
    matchType?: int32(name='MatchType'),
    name?: string(name='Name'),
    ruleCreateTime?: string(name='RuleCreateTime'),
    ruleId?: long(name='RuleId'),
    ruleTag?: int32(name='RuleTag'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetQualityRuleDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetQualityRuleDetailResponseBody(name='body'),
}

async function getQualityRuleDetail(request: GetQualityRuleDetailRequest): GetQualityRuleDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQualityRuleDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetQualityRuleListRequest {
  instanceId: string(name='InstanceId', position='Query'),
  pageNo?: int32(name='PageNo', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
}

model GetQualityRuleListResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    qualityRuleList?: [ 
      {
        keyWords?: [ string ](name='KeyWords'),
        matchType?: int32(name='MatchType'),
        name?: string(name='Name'),
        ruleCreateTime?: string(name='RuleCreateTime'),
        ruleId?: long(name='RuleId'),
        ruleTag?: int32(name='RuleTag'),
      }
    ](name='QualityRuleList'),
    total?: long(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetQualityRuleListResponse = {
  headers: map[string]string(name='headers'),
  body: GetQualityRuleListResponseBody(name='body'),
}

async function getQualityRuleList(request: GetQualityRuleListRequest): GetQualityRuleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQualityRuleList', 'POST', '/', 'json', false, 'json', request);
}

model GetQualityRuleTagListRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model GetQualityRuleTagListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      ruleTagId?: long(name='RuleTagId'),
      ruleTagName?: string(name='RuleTagName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetQualityRuleTagListResponse = {
  headers: map[string]string(name='headers'),
  body: GetQualityRuleTagListResponseBody(name='body'),
}

async function getQualityRuleTagList(request: GetQualityRuleTagListRequest): GetQualityRuleTagListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQualityRuleTagList', 'POST', '/', 'json', false, 'json', request);
}

model GetQueueInformationRequest {
  currentPage?: int32(name='CurrentPage', description='当前页（默认为1）', example='1', position='Query'),
  depIds?: [ long ](name='DepIds', description='部门id列表', shrink='simple', position='Query'),
  endDate?: long(name='EndDate', description='结束日期时间戳（毫秒）', example='1617761765000', position='Query'),
  existDepartmentGrouping?: boolean(name='ExistDepartmentGrouping', description='是否根据部门分组', example='false', position='Query'),
  existSkillGroupGrouping?: boolean(name='ExistSkillGroupGrouping', description='是否根据技能组分组', example='fasle', position='Query'),
  groupIds?: [ long ](name='GroupIds', description='技能组id列表', shrink='simple', position='Query'),
  instanceId: string(name='InstanceId', description='AICCS实例ID，在智能联络中心控制台上可以看到', example='ccc_xp_pre-cn-***', position='Query'),
  pageSize?: int32(name='PageSize', description='每页大小（默认为10)', example='20', position='Query'),
  startDate?: long(name='StartDate', description='开始日期时间戳（毫秒）', example='1615083365000', position='Query'),
}

model GetQueueInformationResponseBody = {
  code?: string(name='Code', description='错误编码', example='200'),
  data?: {
    pageNum?: int32(name='PageNum', description='当前页数', example='1'),
    pageSize?: int32(name='PageSize', description='页大小', example='2000'),
    rows?: string(name='Rows', description='信息为list<map>类型的json字符串'),
    totalNum?: int32(name='TotalNum', description='总记录数', example='4'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='错误描述', example='successful'),
  requestId?: string(name='RequestId', description='请求ID，用于跟踪错误原因', example='EE338D98-9BD3-4413-B165'),
  success?: string(name='Success', description='调用接口是否成功', example='true'),
}

model GetQueueInformationResponse = {
  headers: map[string]string(name='headers'),
  body: GetQueueInformationResponseBody(name='body'),
}

async function getQueueInformation(request: GetQueueInformationRequest): GetQueueInformationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQueueInformation', 'GET', '/', 'json', false, 'json', request);
}

model GetRecordDataRequest {
  acid: string(name='Acid', example='1001067****', position='Query'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Query'),
}

model GetRecordDataResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    acid?: string(name='Acid', example='1001067****'),
    ossLink?: string(name='OssLink', example='http://aliccrec-shvpc.oss-cn-shanghai.aliyuncs.com/accrec_tmp/10010679716-12-01-56.wav?***'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model GetRecordDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetRecordDataResponseBody(name='body'),
}

async function getRecordData(request: GetRecordDataRequest): GetRecordDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRecordData', 'POST', '/', 'json', false, 'json', request);
}

model GetRecordUrlRequest {
  acid: string(name='Acid', example='1001067****', position='Query'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-****', position='Query'),
  recordType: string(name='RecordType', example='DUP_CALL', position='Query'),
}

model GetRecordUrlResponseBody = {
  data?: {
    acid?: string(name='Acid', description='会话id', example='1001067****'),
    ossLink?: string(name='OssLink', description='录音链接', example='http://aliccrec-shvpc.oss-cn-shanghai.aliyuncs.com/accrec_tmp/10010679716-12-01-56.wav?***'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model GetRecordUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetRecordUrlResponseBody(name='body'),
}

async function getRecordUrl(request: GetRecordUrlRequest): GetRecordUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRecordUrl', 'GET', '/', 'json', false, 'json', request);
}

model GetRtcTokenRequest {
  accountName: string(name='AccountName', description='账号名称', example='username@example.com', position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', example='agent_***', position='Query'),
}

model GetRtcTokenResponseBody = {
  code?: string(name='Code', description='错误码', example='200'),
  data?: {
    accountName?: string(name='AccountName', description='账号名', example='139000000'),
    rtcId?: string(name='RtcId', description='rtcId', example='200000000*******'),
    token?: string(name='Token', description='token信息', example='{“cleansession”:true,”clientId”:”GID_VOIP@@@ClientId_****”,”conferenceTopic”:”cs_alicom_voip_conference”,”host”:”mqtt-cn-4590mdhb901.mqtt.aliyuncs.com”,”meetingEventKeepAliveInterval”:0,”phoneTopic”:”alicom_voip_phone”,”port”:0,”reconnectTimeout”:2000,”registerTime”:0,”sdkClientPort”:8883,”serverId”:”GID_VOIP@@@MTEuMTMuMTM2LjExOA==”,”sgwServerTopic”:”alicom_voip_server_pre”,”tlsport”:443,”tokenData”:”abcdef”,”useTLS”:false}'),
  }(name='Data', description='data', example='{"cleansession":true,"clientId":"GID_VOIP@@@ClientId_2000000001271771_100685295007","conferenceTopic":"cs_alicom_voip_conference_pre","dataTopic":"alicom_voip_data_pre","host":"mqtt-cn-4590mdhb901.mqtt.aliyuncs.com","meetingEventKeepAliveInterval":0,"phoneTopic":"alicom_voip_phone","port":0,"reconnectTimeout":2000,"registerTime":0,"sdkClientPort":8883,"serverId":"GID_VOIP@@@MTEuMjIuMTQ1Ljgy","sgwServerTopic":"alicom_voip_server_pre","tlsport":443,"tokenData":"LzMT+XLFl5s/YWJ/MlDz4t/Lq5HC1iGU1P28HAMaxYzmBSHQsWXgdISJ1ZJ+2cxaU0jwYsoyG8Q8cCIbLZTwwaFHf7gc7pPXbJGYgJWUr5ooKsoHaVvvG34cww7W8woWE1OsmZGFDODvooOIjF1CZSorVrR8OwRdprW99yqhMhkJKh7r5f3HfiQgoJWL8b3A85RrRGCSP057skgQ5rIqVAlx7jDFrOTdLtz+krken8qYvpaVBO9wRfFyWQLvxAgNJNx3Oql/hpzc2o3+xbKGTA/P2siLn6Nee1FYk5ClpXcnvfSTM4BAauuWR+oES10VblKEKTU5R/pfjXj3UKOlZ1+OdGO93WA16BR/l1uRb3cOLqya5pjWM+oSmo0sOR7B0ATLz6K1xA0Pc+p6Mu8hZl+OdGO93WA1kj1L0h9Z6CAZG4ol/BNdIg9z6noy7yFmX450Y73dYDWSPUvSH1noIBkbiiX8E10iT0a6ypXxupQdyyrhh8j1yw6otqnw5AT5Tj5VsVWVfflXeZ8nPt1ydXC9nWeHX7K80O6vtOU9M8Qn5VrhkP0F1umbOoYs3NfM+WYZIQx4pkViQo6qqkxgbEg1l6oHJbmOVzrxYRrDTIxqgE/pb0YVJQ==","useTLS":false,"username":"LTAI27GqAW1VrcQA"}'),
  message?: string(name='Message', description='错误信息', example='Successful'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', description='是否成功', example='true'),
}

model GetRtcTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetRtcTokenResponseBody(name='body'),
}

async function getRtcToken(request: GetRtcTokenRequest): GetRtcTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRtcToken', 'GET', '/', 'json', false, 'json', request);
}

model GetSeatInformationRequest {
  instanceId: string(name='InstanceId', description='AICCS实例ID，在智能联络中心控制台上可以看到', example='ccc_xp_pre-cn-***', position='Query'),
  currentPage?: int32(name='currentPage', description='当前页（默认为1）', example='1', position='Query'),
  depIds?: [ long ](name='depIds', description='部门id列表', shrink='simple', position='Query'),
  endDate?: long(name='endDate', description='结束日期时间戳（毫秒）', example='1617761765000', position='Query'),
  existDepartmentGrouping?: boolean(name='existDepartmentGrouping', description='是否根据部门分组', example='true', position='Query'),
  pageSize?: int32(name='pageSize', description='每页大小（默认为10)', example='10', position='Query'),
  startDate?: long(name='startDate', description='开始日期时间戳（毫秒）', example='1615083365000', position='Query'),
}

model GetSeatInformationResponseBody = {
  code?: string(name='Code', description='错误编码', example='200'),
  data?: {
    pageNum?: int32(name='PageNum', description='当前页数', example='1'),
    pageSize?: int32(name='PageSize', description='页大小', example='2000'),
    rowr?: string(name='Rowr', description='信息为list<map>类型的json字符串'),
    totalNum?: int32(name='TotalNum', description='总记录数', example='4'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='错误描述', example='successful'),
  requestId?: string(name='RequestId', description='请求ID，用于跟踪错误原因', example='EE338D98-9BD3-4413-B165'),
  success?: string(name='Success', description='调用接口是否成功', example='true'),
}

model GetSeatInformationResponse = {
  headers: map[string]string(name='headers'),
  body: GetSeatInformationResponseBody(name='body'),
}

async function getSeatInformation(request: GetSeatInformationRequest): GetSeatInformationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSeatInformation', 'GET', '/', 'json', false, 'json', request);
}

model GetSkillGroupAgentStatusDetailsRequest {
  currentPage?: int32(name='CurrentPage', description='当前页（默认为1）', example='1', position='Query'),
  depIds?: [ long ](name='DepIds', description='部门id列表', shrink='simple', position='Query'),
  endDate?: long(name='EndDate', description='结束日期时间戳（毫秒）', example='1614824972', position='Query'),
  existDepartmentGrouping?: boolean(name='ExistDepartmentGrouping', description='是否根据部门分组', example='true', position='Query'),
  existSkillGroupGrouping?: boolean(name='ExistSkillGroupGrouping', description='是否根据技能组分组', example='true', position='Query'),
  groupIds?: [ long ](name='GroupIds', description='技能组id列表', shrink='simple', position='Query'),
  instanceId: string(name='InstanceId', description='AICCS实例ID，在智能联络中心控制台上可以看到', example='ccc_xp_pre-cn-***', position='Query'),
  pageSize?: int32(name='PageSize', description='每页大小（默认为10)', example='10', position='Query'),
  startDate?: long(name='StartDate', description='开始日期时间戳（毫秒）', example='1614824872', position='Query'),
}

model GetSkillGroupAgentStatusDetailsResponseBody = {
  code?: string(name='Code', description='错误编码', example='200'),
  data?: {
    pageNum?: long(name='PageNum', description='当前页数', example='1'),
    pageSize?: long(name='PageSize', description='每页的数量', example='2000'),
    rows?: string(name='Rows', description='信息为list<map>类型的json字符串'),
    totalNum?: long(name='TotalNum', description='总记录数', example='4'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='错误描述', example='successful'),
  requestId?: string(name='RequestId', description='请求ID，用于跟踪错误原因', example='EE338D98-9BD3-4413-B165'),
  success?: string(name='Success', description='接口调用是否成功', example='true'),
}

model GetSkillGroupAgentStatusDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: GetSkillGroupAgentStatusDetailsResponseBody(name='body'),
}

async function getSkillGroupAgentStatusDetails(request: GetSkillGroupAgentStatusDetailsRequest): GetSkillGroupAgentStatusDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSkillGroupAgentStatusDetails', 'GET', '/', 'json', false, 'json', request);
}

model GetSkillGroupAndAgentStatusSummaryRequest {
  currentPage?: int32(name='CurrentPage', description='当前页（默认为1）', example='1', position='Query'),
  depIds?: [ long ](name='DepIds', description='部门id列表', shrink='simple', position='Query'),
  endDate?: long(name='EndDate', description='结束日期时间戳（毫秒）', example='1617761765000', position='Query'),
  existDepartmentGrouping?: boolean(name='ExistDepartmentGrouping', description='是否根据部门分组', example='false', position='Query'),
  existSkillGroupGrouping?: boolean(name='ExistSkillGroupGrouping', description='是否根据技能组分组', example='false', position='Query'),
  groupIds?: [ long ](name='GroupIds', description='技能组id列表', shrink='simple', position='Query'),
  instanceId: string(name='InstanceId', description='AICCS实例ID，在智能联络中心控制台上可以看到', example='ccc_xp_pre-cn-***', position='Query'),
  pageSize?: int32(name='PageSize', description='每页大小（默认为10)', example='20', position='Query'),
  startDate?: long(name='StartDate', description='开始日期时间戳（毫秒）', example='1615083365000', position='Query'),
}

model GetSkillGroupAndAgentStatusSummaryResponseBody = {
  code?: string(name='Code', description='错误编码', example='200'),
  data?: {
    pageNum?: int32(name='PageNum', description='当前页数', example='1'),
    pageSize?: int32(name='PageSize', description='每页的数量', example='2000'),
    rows?: string(name='Rows', description='信息为list<map>类型的json字符串'),
    totalNum?: int32(name='TotalNum', description='总记录数', example='4'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='错误描述', example='message'),
  requestId?: string(name='RequestId', description='请求ID，用于跟踪错误原因', example='EE338D98-9BD3-4413-B165'),
  success?: string(name='Success', description='接口调用是否成功', example='true'),
}

model GetSkillGroupAndAgentStatusSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: GetSkillGroupAndAgentStatusSummaryResponseBody(name='body'),
}

async function getSkillGroupAndAgentStatusSummary(request: GetSkillGroupAndAgentStatusSummaryRequest): GetSkillGroupAndAgentStatusSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSkillGroupAndAgentStatusSummary', 'GET', '/', 'json', false, 'json', request);
}

model GetSkillGroupLatitudeStateRequest {
  currentPage?: int32(name='CurrentPage', description='当前页（默认为1）', example='1', position='Query'),
  depIds?: [ long ](name='DepIds', description='部门id列表', shrink='simple', position='Query'),
  endDate?: long(name='EndDate', description='结束日期时间戳（毫秒）', example='1617761765000', position='Query'),
  existDepartmentGrouping?: boolean(name='ExistDepartmentGrouping', description='是否根据部门分组', example='true', position='Query'),
  existSkillGroupGrouping?: boolean(name='ExistSkillGroupGrouping', description='是否根据技能组分组', example='true', position='Query'),
  groupIds?: [ long ](name='GroupIds', description='技能组id列表', shrink='simple', position='Query'),
  instanceId: string(name='InstanceId', description='AICCS实例ID，在智能联络中心控制台上可以看到', example='ccc_xp_pre-cn-***', position='Query'),
  pageSize?: int32(name='PageSize', description='每页大小（默认为10)', example='20', position='Query'),
  startDate?: long(name='StartDate', description='开始日期时间戳（毫秒）', example='1615083365000', position='Query'),
}

model GetSkillGroupLatitudeStateResponseBody = {
  code?: string(name='Code', description='错误编码', example='200'),
  data?: {
    pageNum?: int32(name='PageNum', description='当前页数', example='1'),
    pageSize?: int32(name='PageSize', description='每页的数量', example='2000'),
    rows?: string(name='Rows', description='信息为list<map>类型的json字符串'),
    totalNum?: int32(name='TotalNum', description='总共记录数', example='4'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='错误描述', example='successful'),
  requestId?: string(name='RequestId', description='请求ID，用于跟踪错误原因', example='EE338D98-9BD3-4413-B165'),
  success?: string(name='Success', description='接口调用是否成功', example='true'),
}

model GetSkillGroupLatitudeStateResponse = {
  headers: map[string]string(name='headers'),
  body: GetSkillGroupLatitudeStateResponseBody(name='body'),
}

async function getSkillGroupLatitudeState(request: GetSkillGroupLatitudeStateRequest): GetSkillGroupLatitudeStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSkillGroupLatitudeState', 'GET', '/', 'json', false, 'json', request);
}

model GetSkillGroupServiceCapabilityRequest {
  currentPage?: int32(name='CurrentPage', description='当前页（默认为1）', example='1', position='Query'),
  depIds?: [ long ](name='DepIds', description='部门id列表', shrink='simple', position='Query'),
  endDate?: long(name='EndDate', description='结束日期时间戳（毫秒）', example='1617761765000', position='Query'),
  existDepartmentGrouping?: boolean(name='ExistDepartmentGrouping', description='是否根据部门分组', example='true', position='Query'),
  existSkillGroupGrouping?: boolean(name='ExistSkillGroupGrouping', description='是否根据技能组分组', example='true', position='Query'),
  groupIds?: [ long ](name='GroupIds', description='技能组id列表', shrink='simple', position='Query'),
  instanceId: string(name='InstanceId', description='AICCS实例ID，在智能联络中心控制台上可以看到', example='ccc_xp_pre-cn-***', position='Query'),
  pageSize?: int32(name='PageSize', description='每页大小（默认为10)', example='10', position='Query'),
  startDate?: long(name='StartDate', description='开始日期时间戳（毫秒）', example='1615083365000', position='Query'),
}

model GetSkillGroupServiceCapabilityResponseBody = {
  code?: string(name='Code', description='错误编码', example='200'),
  data?: {
    pageNum?: int32(name='PageNum', description='当前页数', example='1'),
    pageSize?: int32(name='PageSize', description='页大小', example='2000'),
    rows?: string(name='Rows', description='信息为list<map>类型的json字符串'),
    totalNum?: long(name='TotalNum', description='总记录数', example='4'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='错误描述', example='successful'),
  requestId?: string(name='RequestId', description='请求ID，用于跟踪错误原因', example='EE338D98-9BD3-4413-B165'),
  success?: string(name='Success', description='调用接口是否成功', example='true'),
}

model GetSkillGroupServiceCapabilityResponse = {
  headers: map[string]string(name='headers'),
  body: GetSkillGroupServiceCapabilityResponseBody(name='body'),
}

async function getSkillGroupServiceCapability(request: GetSkillGroupServiceCapabilityRequest): GetSkillGroupServiceCapabilityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSkillGroupServiceCapability', 'GET', '/', 'json', false, 'json', request);
}

model GetSkillGroupServiceStatusRequest {
  agentIds?: [ long ](name='AgentIds', description='技能组id列表', shrink='simple', position='Query'),
  currentPage?: int32(name='CurrentPage', description='当前页（默认为1）', example='1', position='Query'),
  depIds?: [ long ](name='DepIds', description='部门id列表', shrink='simple', position='Query'),
  endDate?: long(name='EndDate', description='结束日期时间戳（毫秒）', example='1617761765000', position='Query'),
  existAgentGrouping?: boolean(name='ExistAgentGrouping', description='是否根据技能组分组', example='false', position='Query'),
  existChannelInstanceGrouping?: boolean(name='ExistChannelInstanceGrouping', description='是否根据渠道实例分组', example='false', position='Query'),
  existDepartmentGrouping?: boolean(name='ExistDepartmentGrouping', description='是否根据部门分组', example='false', position='Query'),
  existRobotInstanceGrouping?: boolean(name='ExistRobotInstanceGrouping', description='是否根据机器实例分组', example='false', position='Query'),
  existSkillGroupGrouping?: boolean(name='ExistSkillGroupGrouping', description='是否根据技能组分组', example='false', position='Query'),
  groupIds?: [ long ](name='GroupIds', description='技能组id列表', shrink='simple', position='Query'),
  instanceId: string(name='InstanceId', description='AICCS实例ID，在智能联络中心控制台上可以看到', example='ccc_xp_pre-cn-***', position='Query'),
  pageSize?: int32(name='PageSize', description='每页大小（默认为10)', example='10', position='Query'),
  startDate?: long(name='StartDate', description='开始日期时间戳（毫秒）', example='1615083365000', position='Query'),
  timeLatitudeType?: string(name='TimeLatitudeType', description='时间纬度类型', example='minute', position='Query'),
}

model GetSkillGroupServiceStatusResponseBody = {
  code?: string(name='Code', description='错误编码', example='200'),
  data?: {
    pageNum?: int32(name='PageNum', description='当前页数', example='1'),
    pageSize?: int32(name='PageSize', description='页大小', example='2000'),
    rows?: string(name='Rows', description='信息为list<map>类型的json字符串'),
    totalNum?: int32(name='TotalNum', description='总记录数', example='4'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='错误描述', example='successful'),
  requestId?: string(name='RequestId', description='请求ID，用于跟踪错误原因', example='EE338D98-9BD3-4413-B165'),
  success?: string(name='Success', description='调用接口是否成功', example='true'),
}

model GetSkillGroupServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetSkillGroupServiceStatusResponseBody(name='body'),
}

async function getSkillGroupServiceStatus(request: GetSkillGroupServiceStatusRequest): GetSkillGroupServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSkillGroupServiceStatus', 'GET', '/', 'json', false, 'json', request);
}

model GetSkillGroupStatusTotalRequest {
  agentIds?: [ long ](name='AgentIds', description='坐席id列表', shrink='simple', position='Query'),
  currentPage?: int32(name='CurrentPage', description='当前页（默认为1）', example='1', position='Query'),
  depIds?: [ long ](name='DepIds', description='部门id列表', shrink='simple', position='Query'),
  endDate?: long(name='EndDate', description='结束日期时间戳（毫秒）', example='1617761765000', position='Query'),
  existAgentGrouping?: boolean(name='ExistAgentGrouping', description='是否根据坐席分组', example='false', position='Query'),
  existDepartmentGrouping?: boolean(name='ExistDepartmentGrouping', description='是否根据部门分组', example='fasle', position='Query'),
  existSkillGroupGrouping?: boolean(name='ExistSkillGroupGrouping', description='是否根据技能组分组', example='fasle', position='Query'),
  groupIds?: [ long ](name='GroupIds', description='技能组id列表', shrink='simple', position='Query'),
  instanceId: string(name='InstanceId', description='AICCS实例ID，在智能联络中心控制台上可以看到', example='ccc_xp_pre-cn-***', position='Query'),
  pageSize?: int32(name='PageSize', description='每页大小（默认为10)', example='20', position='Query'),
  startDate?: long(name='StartDate', description='开始日期时间戳（毫秒）', example='1615083365000', position='Query'),
  timeLatitudeType?: string(name='TimeLatitudeType', description='时间纬度类型', example='minute', position='Query'),
}

model GetSkillGroupStatusTotalResponseBody = {
  code?: string(name='Code', description='错误编码', example='200'),
  data?: {
    pageNum?: long(name='PageNum', description='当前页数', example='1'),
    pageSize?: long(name='PageSize', description='页大小', example='2000'),
    rows?: string(name='Rows', description='信息为list<map>类型的json字符串'),
    totalNum?: long(name='TotalNum', description='总记录数', example='4'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='错误描述', example='successful'),
  requestId?: string(name='RequestId', description='请求ID，用于跟踪错误原因', example='EE338D98-9BD3-4413-B165'),
  success?: string(name='Success', description='接口调用是否成功', example='true'),
}

model GetSkillGroupStatusTotalResponse = {
  headers: map[string]string(name='headers'),
  body: GetSkillGroupStatusTotalResponseBody(name='body'),
}

async function getSkillGroupStatusTotal(request: GetSkillGroupStatusTotalRequest): GetSkillGroupStatusTotalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSkillGroupStatusTotal', 'GET', '/', 'json', false, 'json', request);
}

model HangUpDoubleCallRequest {
  acid?: string(name='Acid', description='会话ID', example='68255155****', position='Query'),
  instanceId?: string(name='InstanceId', description='实例ID', example='ccc_xp_pre-cn-***', position='Query'),
}

model HangUpDoubleCallResponseBody = {
  code?: string(name='Code', description='错误码', example='200'),
  message?: string(name='Message', description='错误信息', example='xxxx'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', description='是否调用成功', example='true'),
}

model HangUpDoubleCallResponse = {
  headers: map[string]string(name='headers'),
  body: HangUpDoubleCallResponseBody(name='body'),
}

async function hangUpDoubleCall(request: HangUpDoubleCallRequest): HangUpDoubleCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'HangUpDoubleCall', 'POST', '/', 'json', false, 'json', request);
}

model HangupCallRequest {
  accountName: string(name='AccountName', example='123@123.com', position='Body'),
  callId?: string(name='CallId', example='7719786', position='Body'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Body'),
  connectionId?: string(name='ConnectionId', example='7719788', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
  jobId?: string(name='JobId', example='7719787', position='Body'),
}

model HangupCallResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model HangupCallResponse = {
  headers: map[string]string(name='headers'),
  body: HangupCallResponseBody(name='body'),
}

async function hangupCall(request: HangupCallRequest): HangupCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'HangupCall', 'POST', '/', 'json', true, 'form', request);
}

model HangupThirdCallRequest {
  accountName: string(name='AccountName', example='123@123.com', position='Body'),
  callId?: string(name='CallId', example='7719786', position='Body'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Body'),
  connectionId?: string(name='ConnectionId', example='7719788', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
  jobId?: string(name='JobId', example='7719787', position='Body'),
}

model HangupThirdCallResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model HangupThirdCallResponse = {
  headers: map[string]string(name='headers'),
  body: HangupThirdCallResponseBody(name='body'),
}

async function hangupThirdCall(request: HangupThirdCallRequest): HangupThirdCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'HangupThirdCall', 'POST', '/', 'json', true, 'form', request);
}

model HoldCallRequest {
  accountName: string(name='AccountName', example='123@123.com', position='Body'),
  callId?: string(name='CallId', example='7719786', position='Body'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Body'),
  connectionId?: string(name='ConnectionId', example='7719788', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
  jobId?: string(name='JobId', example='7719787', position='Body'),
}

model HoldCallResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model HoldCallResponse = {
  headers: map[string]string(name='headers'),
  body: HoldCallResponseBody(name='body'),
}

async function holdCall(request: HoldCallRequest): HoldCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'HoldCall', 'POST', '/', 'json', true, 'form', request);
}

model HotlineSessionQueryRequest {
  acid?: string(name='Acid', example='7719786****', position='Query'),
  acidList?: [ string ](name='AcidList', position='Query'),
  callResult?: string(name='CallResult', example='normal', position='Query'),
  callResultList?: [ string ](name='CallResultList', position='Query'),
  callType?: int32(name='CallType', example='1', position='Query'),
  callTypeList?: [ int32 ](name='CallTypeList', position='Query'),
  calledNumber?: string(name='CalledNumber', example='135615****', position='Query'),
  calledNumberList?: [ string ](name='CalledNumberList', position='Query'),
  callingNumber?: string(name='CallingNumber', example='057177****', position='Query'),
  callingNumberList?: [ string ](name='CallingNumberList', position='Query'),
  groupId?: long(name='GroupId', example='123456', position='Query'),
  groupIdList?: [ long ](name='GroupIdList', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  id?: string(name='Id', example='acc1c58dab4a4dd280e3813c66', position='Query'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Query'),
  memberId?: string(name='MemberId', example='7856****', position='Query'),
  memberIdList?: [ string ](name='MemberIdList', position='Query'),
  memberName?: string(name='MemberName', position='Query'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  params?: string(name='Params', example='xxxx', position='Query'),
  queryEndTime?: long(name='QueryEndTime', example='161482972', position='Query'),
  queryStartTime?: long(name='QueryStartTime', example='161482872', position='Query'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165', position='Query'),
  servicerId?: string(name='ServicerId', example='555555', position='Query'),
  servicerIdList?: [ string ](name='ServicerIdList', position='Query'),
  servicerName?: string(name='ServicerName', position='Query'),
}

model HotlineSessionQueryResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    callDetailRecord?: [ 
      {
        acid?: string(name='Acid', example='7719786'),
        activeTransferId?: string(name='ActiveTransferId', example='12'),
        callContinueTime?: int32(name='CallContinueTime', example='37'),
        callResult?: string(name='CallResult', example='normal'),
        callType?: int32(name='CallType', example='1'),
        calledNumber?: string(name='CalledNumber', example='135615*****'),
        callingNumber?: string(name='CallingNumber', example='0571773'),
        createTime?: string(name='CreateTime', example='2020-10-02 22:32:55'),
        evaluationLevel?: int32(name='EvaluationLevel', example='4'),
        evaluationScore?: int32(name='EvaluationScore', example='4'),
        groupId?: long(name='GroupId', example='123456'),
        groupName?: string(name='GroupName'),
        hangUpRole?: string(name='HangUpRole', example='2'),
        hangUpTime?: string(name='HangUpTime', example='2020-10-02 22:33:46'),
        id?: string(name='Id', example='acc1c58dab4a4dd280e3813c66'),
        inQueueTime?: string(name='InQueueTime', example='2020-10-02 22:32:55'),
        memberId?: string(name='MemberId', example='7856876'),
        memberName?: string(name='MemberName'),
        outQueueTime?: string(name='OutQueueTime', example='2020-10-02 22:32:59'),
        passiveTransferId?: string(name='PassiveTransferId', example='12'),
        passiveTransferIdType?: string(name='PassiveTransferIdType', example='1'),
        pickUpTime?: string(name='PickUpTime', example='2020-10-02 22:33:09'),
        queueUpContinueTime?: int32(name='QueueUpContinueTime', example='4'),
        ringContinueTime?: int32(name='RingContinueTime', example='10'),
        ringEndTime?: string(name='RingEndTime', example='2020-10-02 22:33:09'),
        ringStartTime?: string(name='RingStartTime', example='2020-10-02 22:32:59'),
        servicerId?: string(name='ServicerId', example='555555'),
        servicerName?: string(name='ServicerName'),
        trunkCall?: string(name='TrunkCall', example='1861111****'),
      }
    ](name='CallDetailRecord'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='26'),
  }(name='Data'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE339D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model HotlineSessionQueryResponse = {
  headers: map[string]string(name='headers'),
  body: HotlineSessionQueryResponseBody(name='body'),
}

async function hotlineSessionQuery(request: HotlineSessionQueryRequest): HotlineSessionQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'HotlineSessionQuery', 'POST', '/', 'json', false, 'json', request);
}

model InsertAiOutboundPhoneNumsRequest {
  batchVersion?: int32(name='BatchVersion', description='任务批次号（不填则导入到默认批次）', example='2', position='Query'),
  details: [ 
    {
      bizData?: string(name='BizData', description='自定义信息', example='xxxx'),
      phoneNum?: string(name='PhoneNum', description='手机号', example='150****0000'),
    }
  ](name='Details', description='号码详情(至多30条)', shrink='json', position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', example='agent_***', position='Query'),
  taskId: long(name='TaskId', description='任务id', example='123', position='Query'),
}

model InsertAiOutboundPhoneNumsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    failInfo?: [ 
      {
        bizData?: string(name='BizData', description='自定义信息', example='xxxx'),
        msg?: string(name='Msg', description='失败原因描述', example='号码格式异常'),
        phoneNum?: string(name='PhoneNum', description='外呼被叫号码', example='150****0000'),
      }
    ](name='FailInfo', description='失败号码详情'),
    successCount?: int32(name='SuccessCount', description='导入成功数量', example='7'),
    totalCount?: int32(name='TotalCount', description='导入总数', example='10'),
  }(name='Data', description='导入结果'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
  success?: boolean(name='Success', example='true'),
}

model InsertAiOutboundPhoneNumsResponse = {
  headers: map[string]string(name='headers'),
  body: InsertAiOutboundPhoneNumsResponseBody(name='body'),
}

async function insertAiOutboundPhoneNums(request: InsertAiOutboundPhoneNumsRequest): InsertAiOutboundPhoneNumsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertAiOutboundPhoneNums', 'POST', '/', 'json', false, 'json', request);
}

model InsertTaskDetailRequest {
  callInfos: string(name='CallInfos', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  outboundTaskId: long(name='OutboundTaskId', minimum=0, maximum=9223372036854775700, position='Query'),
}

model InsertTaskDetailResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InsertTaskDetailResponse = {
  headers: map[string]string(name='headers'),
  body: InsertTaskDetailResponseBody(name='body'),
}

async function insertTaskDetail(request: InsertTaskDetailRequest): InsertTaskDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertTaskDetail', 'POST', '/', 'json', false, 'json', request);
}

model JoinThirdCallRequest {
  accountName: string(name='AccountName', example='123@123.com', position='Body'),
  callId?: string(name='CallId', example='7719786', position='Body'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Body'),
  connectionId?: string(name='ConnectionId', example='7719788', position='Body'),
  holdConnectionId?: string(name='HoldConnectionId', example='0', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
  jobId?: string(name='JobId', example='7719787', position='Body'),
}

model JoinThirdCallResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model JoinThirdCallResponse = {
  headers: map[string]string(name='headers'),
  body: JoinThirdCallResponseBody(name='body'),
}

async function joinThirdCall(request: JoinThirdCallRequest): JoinThirdCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'JoinThirdCall', 'POST', '/', 'json', true, 'form', request);
}

model ListAgentBySkillGroupIdRequest {
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Query'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Query'),
  skillGroupId: long(name='SkillGroupId', example='666666', minimum=1, maximum=9223372036854775807, position='Query'),
}

model ListAgentBySkillGroupIdResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: [ 
    {
      accountName?: string(name='AccountName', example='username@example.com'),
      agentId?: long(name='AgentId', example='666666'),
      displayName?: string(name='DisplayName'),
      status?: int32(name='Status', example='0'),
      tenantId?: long(name='TenantId', example='0'),
    }
  ](name='Data'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model ListAgentBySkillGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: ListAgentBySkillGroupIdResponseBody(name='body'),
}

async function listAgentBySkillGroupId(request: ListAgentBySkillGroupIdRequest): ListAgentBySkillGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAgentBySkillGroupId', 'GET', '/', 'json', false, 'json', request);
}

model ListAiccsRobotRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  robotName?: string(name='RobotName', position='Query'),
}

model ListAiccsRobotResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      atProfession?: string(name='AtProfession'),
      atSence?: string(name='AtSence'),
      id?: long(name='Id', example='123456'),
      robotName?: string(name='RobotName'),
      robotType?: string(name='RobotType', example='CUSTOM'),
    }
  ](name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='Id of the request', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
  success?: boolean(name='Success', example='true'),
}

model ListAiccsRobotResponse = {
  headers: map[string]string(name='headers'),
  body: ListAiccsRobotResponseBody(name='body'),
}

async function listAiccsRobot(request: ListAiccsRobotRequest): ListAiccsRobotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAiccsRobot', 'POST', '/', 'json', false, 'json', request);
}

model ListChatRecordDetailRequest {
  clientToken?: string(name='ClientToken', description='clientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Query'),
  closeTimeEnd?: long(name='CloseTimeEnd', description='在线挂断的时间范围', example='1614582000000', position='Query'),
  closeTimeStart?: long(name='CloseTimeStart', description='在线挂断的时间范围', example='1614578400000', position='Query'),
  currentPage?: int32(name='CurrentPage', description='当前页', example='1', minimum=1, position='Query'),
  instanceId: string(name='InstanceId', description='实例id', example='ccc_xp_pre***', position='Query'),
  pageSize?: int32(name='PageSize', description='每页数据量', example='100', position='Query'),
}

model ListChatRecordDetailResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  message?: string(name='Message', description='message', example='xxxx'),
  requestId?: string(name='RequestId', description='requestId', example='EE338D98-9BD3-4413-B165'),
  resultData?: {
    currentPage?: long(name='CurrentPage', example='1'),
    data?: [ 
      {
        endTime?: long(name='EndTime', description='在线结束时间', example='1614578410000'),
        messageList?: [ 
          {
            content?: string(name='Content'),
            createTime?: long(name='CreateTime', example='1614578400000'),
            msgType?: string(name='MsgType', example='MSG'),
            senderName?: string(name='SenderName', example='account1'),
            senderType?: long(name='SenderType', example='2'),
          }
        ](name='MessageList', description='在线会话详细信息'),
        servicerName?: string(name='ServicerName', example='123@123.com'),
        startTime?: long(name='StartTime', description='在线开始时间', example='1614578400000'),
      }
    ](name='Data'),
    onePageSize?: long(name='OnePageSize', example='10'),
    totalPage?: long(name='TotalPage', example='10'),
    totalResults?: long(name='TotalResults', example='100'),
  }(name='ResultData', description='data'),
  success?: boolean(name='Success', description='success', example='true'),
}

model ListChatRecordDetailResponse = {
  headers: map[string]string(name='headers'),
  body: ListChatRecordDetailResponseBody(name='body'),
}

async function listChatRecordDetail(request: ListChatRecordDetailRequest): ListChatRecordDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListChatRecordDetail', 'GET', '/', 'json', false, 'json', request);
}

model ListDialogRequest {
  called: string(name='Called', example='130****0000', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: long(name='TaskId', example='123456', minimum=0, maximum=9223372036854775807, position='Query'),
}

model ListDialogResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      content?: string(name='Content'),
      nodeType?: string(name='NodeType', example='normal'),
      role?: string(name='Role', example='robot'),
      tag?: string(name='Tag'),
      time?: string(name='Time', example='1619763900718'),
    }
  ](name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
  success?: boolean(name='Success', example='true'),
}

model ListDialogResponse = {
  headers: map[string]string(name='headers'),
  body: ListDialogResponseBody(name='body'),
}

async function listDialog(request: ListDialogRequest): ListDialogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDialog', 'POST', '/', 'json', false, 'json', request);
}

model ListHotlineRecordRequest {
  callId: string(name='CallId', example='100365558', position='Query'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Query'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Query'),
}

model ListHotlineRecordResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: [ 
    {
      callId?: string(name='CallId', example='100365558'),
      connectionId?: string(name='ConnectionId', example='100365548'),
      endTime?: long(name='EndTime', example='16128694810'),
      startTime?: long(name='StartTime', example='16128694110'),
      url?: string(name='Url', example='http://aliccrec-shvpc.oss-cn-shanghai.aliyuncs.com'),
    }
  ](name='Data'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model ListHotlineRecordResponse = {
  headers: map[string]string(name='headers'),
  body: ListHotlineRecordResponseBody(name='body'),
}

async function listHotlineRecord(request: ListHotlineRecordRequest): ListHotlineRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHotlineRecord', 'GET', '/', 'json', false, 'json', request);
}

model ListHotlineRecordDetailRequest {
  clientToken?: string(name='ClientToken', description='clientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Query'),
  closeTimeEnd?: long(name='CloseTimeEnd', description='热线挂断的时间范围', example='1614582000000', position='Query'),
  closeTimeStart?: long(name='CloseTimeStart', description='热线挂断的时间范围', example='1614578400000', position='Query'),
  currentPage?: int32(name='CurrentPage', description='当前页', example='1', minimum=1, position='Query'),
  instanceId: string(name='InstanceId', description='实例id', example='ccc_xp_pre***', position='Query'),
  pageSize?: int32(name='PageSize', description='每页数据量', example='100', position='Query'),
}

model ListHotlineRecordDetailResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  message?: string(name='Message', description='message', example='xxxx'),
  requestId?: string(name='RequestId', description='requestId', example='EE338D98-9BD3-4413-B165'),
  resultData?: {
    currentPage?: long(name='CurrentPage', example='1'),
    data?: [ 
      {
        endTime?: long(name='EndTime', description='热线结束时间', example='1614578410000'),
        ossUrl?: string(name='OssUrl', description='热线通话录音地址', example='http://xxx.xxxxx/xx.wav'),
        servicerName?: string(name='ServicerName', example='123@123.com'),
        startTime?: long(name='StartTime', description='热线开始时间', example='1614578400000'),
      }
    ](name='Data'),
    onePageSize?: long(name='OnePageSize', example='100'),
    totalPage?: long(name='TotalPage', example='10'),
    totalResults?: long(name='TotalResults', example='945'),
  }(name='ResultData', description='data'),
  success?: boolean(name='Success', description='success', example='true'),
}

model ListHotlineRecordDetailResponse = {
  headers: map[string]string(name='headers'),
  body: ListHotlineRecordDetailResponseBody(name='body'),
}

async function listHotlineRecordDetail(request: ListHotlineRecordDetailRequest): ListHotlineRecordDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHotlineRecordDetail', 'GET', '/', 'json', false, 'json', request);
}

model ListOutboundPhoneNumberRequest {
  accountName?: string(name='AccountName', example='123@****.com', position='Query'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d****', position='Query'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Query'),
}

model ListOutboundPhoneNumberResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: [ string ](name='Data'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model ListOutboundPhoneNumberResponse = {
  headers: map[string]string(name='headers'),
  body: ListOutboundPhoneNumberResponseBody(name='body'),
}

async function listOutboundPhoneNumber(request: ListOutboundPhoneNumberRequest): ListOutboundPhoneNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOutboundPhoneNumber', 'GET', '/', 'json', false, 'json', request);
}

model ListOuterOrderedNumbersRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', example='aiccs', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListOuterOrderedNumbersResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  numbers?: [ string ](name='Numbers'),
  requestId?: string(name='RequestId', example='28A0160D-FE11-5318-A1FC-335E871BB254'),
}

model ListOuterOrderedNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: ListOuterOrderedNumbersResponseBody(name='body'),
}

async function listOuterOrderedNumbers(request: ListOuterOrderedNumbersRequest): ListOuterOrderedNumbersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOuterOrderedNumbers', 'POST', '/', 'json', false, 'json', request);
}

model ListRobotCallDialogRequest {
  callId: string(name='CallId', example='125165515022^11195613****', position='Query'),
  createTime: string(name='CreateTime', example='2021-05-20 00:00:00', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListRobotCallDialogResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      content?: string(name='Content'),
      nodeType?: string(name='NodeType', example='normal'),
      role?: string(name='Role', example='robot'),
      tag?: string(name='Tag'),
      time?: string(name='Time', example='1621483557000'),
    }
  ](name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
  success?: boolean(name='Success', example='true'),
}

model ListRobotCallDialogResponse = {
  headers: map[string]string(name='headers'),
  body: ListRobotCallDialogResponseBody(name='body'),
}

async function listRobotCallDialog(request: ListRobotCallDialogRequest): ListRobotCallDialogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRobotCallDialog', 'POST', '/', 'json', false, 'json', request);
}

model ListRobotNodeRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  robotId: long(name='RobotId', example='100002674****', minimum=0, maximum=9223372036854775807, position='Query'),
}

model ListRobotNodeResponseBody = {
  code?: string(name='Code', example='Ok'),
  data?: [ 
    {
      isOutput?: int32(name='IsOutput', example='1'),
      modelName?: string(name='ModelName'),
      nodeIdentifier?: string(name='NodeIdentifier', example='123456'),
      nodeName?: string(name='NodeName'),
      processName?: string(name='ProcessName'),
    }
  ](name='Data'),
  message?: string(name='Message', example='Ok'),
  requestId?: string(name='RequestId', description='Id of the request', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
  success?: boolean(name='Success', example='true'),
}

model ListRobotNodeResponse = {
  headers: map[string]string(name='headers'),
  body: ListRobotNodeResponseBody(name='body'),
}

async function listRobotNode(request: ListRobotNodeRequest): ListRobotNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRobotNode', 'POST', '/', 'json', false, 'json', request);
}

model ListRobotParamsRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  robotId: long(name='RobotId', example='123456', minimum=0, maximum=9223372036854775807, position='Query'),
}

model ListRobotParamsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      isEmpty?: int32(name='IsEmpty', example='0'),
      paramCode?: string(name='ParamCode', example='name'),
      paramName?: string(name='ParamName'),
    }
  ](name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='Id of the request', example='FF67D4D5-4E90-1DF5-BB8F-060BBFAD72DB'),
  success?: boolean(name='Success', example='true'),
}

model ListRobotParamsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRobotParamsResponseBody(name='body'),
}

async function listRobotParams(request: ListRobotParamsRequest): ListRobotParamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRobotParams', 'POST', '/', 'json', false, 'json', request);
}

model ListRolesRequest {
  clientToken?: string(name='ClientToken', description='clientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Query'),
  instanceId: string(name='InstanceId', description='租户实例id', example='ccc_xp_pre-cn-***', position='Query'),
}

model ListRolesResponseBody = {
  data?: [ 
    {
      buId?: long(name='BuId', description='租户id', example='1'),
      code?: string(name='Code', description='角色code', example='admin'),
      createTime?: string(name='CreateTime', description='创建时间', example='2020-01-03T20:25:33Z'),
      description?: string(name='Description', description='角色描述', example='Admin'),
      roleGroupId?: long(name='RoleGroupId', description='所属角色组id', example='0'),
      roleGroupName?: string(name='RoleGroupName', description='所属角色组名称'),
      roleId?: long(name='RoleId', description='角色id', example='1'),
      title?: string(name='Title', description='角色名称'),
    }
  ](name='Data', description='data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  message?: string(name='Message', description='message', example='xxxx'),
  requestId?: string(name='RequestId', description='requestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', description='success', example='true'),
}

model ListRolesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRolesResponseBody(name='body'),
}

async function listRoles(request: ListRolesRequest): ListRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRoles', 'GET', '/', 'json', false, 'json', request);
}

model ListSkillGroupRequest {
  channelType?: int32(name='ChannelType', example='2', minimum=0, maximum=7, position='Query'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Query'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Query'),
}

model ListSkillGroupResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: [ 
    {
      channelType?: int32(name='ChannelType', example='2'),
      description?: string(name='Description'),
      displayName?: string(name='DisplayName'),
      name?: string(name='Name'),
      skillGroupId?: long(name='SkillGroupId', example='123456'),
    }
  ](name='Data'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model ListSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListSkillGroupResponseBody(name='body'),
}

async function listSkillGroup(request: ListSkillGroupRequest): ListSkillGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSkillGroup', 'GET', '/', 'json', false, 'json', request);
}

model ListTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  robotName?: string(name='RobotName', position='Query'),
  status?: string(name='Status', example='STOP', position='Query'),
  taskId?: long(name='TaskId', position='Query'),
  taskName?: string(name='TaskName', minimum=0, maximum=9223372036854775807, position='Query'),
}

model ListTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    pageNo?: long(name='PageNo', example='1'),
    pageSize?: long(name='PageSize', example='20'),
    record?: [ 
      {
        completeCount?: int32(name='CompleteCount', example='1'),
        fireTime?: string(name='FireTime', example='1618477232000'),
        gmtCreate?: string(name='GmtCreate', example='1618477232000'),
        id?: long(name='Id', example='123456'),
        robotId?: long(name='RobotId', example='123456'),
        robotName?: string(name='RobotName'),
        status?: string(name='Status', example='RELEASE'),
        taskName?: string(name='TaskName'),
        totalCount?: int32(name='TotalCount', example='1'),
      }
    ](name='Record'),
    total?: long(name='Total', example='50'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
  success?: boolean(name='Success', example='true'),
}

model ListTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ListTaskResponseBody(name='body'),
}

async function listTask(request: ListTaskRequest): ListTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTask', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskDetailRequest {
  called?: string(name='Called', example='186****0000', position='Query'),
  id?: long(name='Id', example='123456', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', example='SUCCESS', minimum=0, maximum=9223372036854775807, position='Query'),
  statusCode?: string(name='StatusCode', example='000001', minimum=0, maximum=9223372036854775807, position='Query'),
  taskId: long(name='TaskId', example='123456', minimum=0, maximum=9223372036854775807, position='Query'),
}

model ListTaskDetailResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    pageNo?: long(name='PageNo', example='20'),
    pageSize?: long(name='PageSize', example='1'),
    record?: [ 
      {
        called?: string(name='Called', example='186****0000'),
        caller?: string(name='Caller', example='136****0000'),
        direction?: string(name='Direction'),
        duration?: int32(name='Duration', example='30'),
        endTime?: string(name='EndTime', example='2021-05-20 00:03:00'),
        id?: long(name='Id', example='123456'),
        retryCurTimes?: int32(name='RetryCurTimes', example='1'),
        retryTimes?: int32(name='RetryTimes', example='1'),
        startTime?: string(name='StartTime', example='2021-05-20 00:00:00'),
        status?: string(name='Status', example='SUCCESS'),
        statusCode?: string(name='StatusCode', example='00001'),
        statusCodeDesc?: string(name='StatusCodeDesc'),
        tags?: string(name='Tags'),
      }
    ](name='Record'),
    total?: long(name='Total', example='50'),
  }(name='Data'),
  message?: string(name='Message', example='Ok'),
  requestId?: string(name='RequestId', description='Id of the request', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
  success?: boolean(name='Success', example='true'),
}

model ListTaskDetailResponse = {
  headers: map[string]string(name='headers'),
  body: ListTaskDetailResponseBody(name='body'),
}

async function listTaskDetail(request: ListTaskDetailRequest): ListTaskDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskDetail', 'POST', '/', 'json', false, 'json', request);
}

model MakeCallRequest {
  calledNumber: string(name='CalledNumber', example='130****0000', position='Query'),
  callingNumber: string(name='CallingNumber', example='0571456****', position='Query'),
  commandCode: string(name='CommandCode', example='outBound_Call', position='Query'),
  extInfo?: string(name='ExtInfo', example='{"bizId": 23323}', position='Query'),
  outerAccountId: string(name='OuterAccountId', example='123456', position='Query'),
  outerAccountType: string(name='OuterAccountType', example='ALIPAY', position='Query'),
}

model MakeCallResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='true'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model MakeCallResponse = {
  headers: map[string]string(name='headers'),
  body: MakeCallResponseBody(name='body'),
}

async function makeCall(request: MakeCallRequest): MakeCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MakeCall', 'POST', '/', 'json', false, 'json', request);
}

model MakeDoubleCallRequest {
  accountName: string(name='AccountName', description='账号名称', example='12345', position='Query'),
  bizData?: string(name='BizData', description='业务携带数据（JsonString）', example='{"bizId": 123456}', position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', example='agent_***', position='Query'),
  memberPhone: string(name='MemberPhone', description='用户手机号', example='1502123****', position='Query'),
  outboundCallNumber: string(name='OutboundCallNumber', description='外呼主叫号码', example='0571000****', position='Query'),
  servicerPhone?: string(name='ServicerPhone', description='坐席手机号（需要通过坐席手机呼叫才需要填写）', example='150****1234', position='Query'),
}

model MakeDoubleCallResponseBody = {
  code?: string(name='Code', description='错误码', example='200'),
  data?: {
    acid?: string(name='Acid', description='会话id', example='68255155365620598'),
  }(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误信息', example='Successful'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', description='调用是否成功', example='true'),
}

model MakeDoubleCallResponse = {
  headers: map[string]string(name='headers'),
  body: MakeDoubleCallResponseBody(name='body'),
}

async function makeDoubleCall(request: MakeDoubleCallRequest): MakeDoubleCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MakeDoubleCall', 'POST', '/', 'json', false, 'json', request);
}

model QueryHotlineInQueueRequest {
  outerGroupId: string(name='OuterGroupId', example='123456', position='Query'),
  outerGroupType: string(name='OuterGroupType', example='mybank', position='Query'),
}

model QueryHotlineInQueueResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='{"n_online_now":10,"n_idle_now":3,"n_resttype_now":3,"n_acw_now":1}'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model QueryHotlineInQueueResponse = {
  headers: map[string]string(name='headers'),
  body: QueryHotlineInQueueResponseBody(name='body'),
}

async function queryHotlineInQueue(request: QueryHotlineInQueueRequest): QueryHotlineInQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryHotlineInQueue', 'GET', '/', 'json', false, 'json', request);
}

model QueryHotlineNumberRequest {
  currentPage: int32(name='CurrentPage', description='当前页码', example='1', minimum=1, position='Query'),
  departmentId?: long(name='DepartmentId', description='部门id（技能组分组）', example='2256****', position='Query'),
  groupIds?: [ long ](name='GroupIds', description='技能组列表', shrink='json', position='Query'),
  hotlineNumber?: string(name='HotlineNumber', description='号码（支持模糊查询）', example='0571****2211', position='Query'),
  instanceId: string(name='InstanceId', description='实例id', example='ccc_xp_pre-cn-***', position='Query'),
  pageSize: int32(name='PageSize', description='每页大小', example='10', minimum=1, maximum=20, position='Query'),
}

model QueryHotlineNumberResponseBody = {
  code?: string(name='Code', description='错误码', example='Success'),
  data?: {
    currentPage?: long(name='CurrentPage', description='当前页面', example='1'),
    hotlineNumList?: [ 
      {
        calloutAllDepartment?: boolean(name='CalloutAllDepartment', description='外呼针对所有部门生效', example='true'),
        calloutRangeList?: [ 
          {
            departmentId?: long(name='DepartmentId', description='部门id', example='2256****'),
            departmentName?: string(name='DepartmentName', description='部门名称'),
            groupDOList?: [ 
              {
                groupId?: long(name='GroupId', description='技能组id', example='6083****'),
                groupName?: string(name='GroupName', description='技能组名称'),
              }
            ](name='GroupDOList', description='技能组列表'),
          }
        ](name='CalloutRangeList', description='外呼生效列表'),
        description?: string(name='Description', description='号码描述', example='测试'),
        evaluationStatus?: int32(name='EvaluationStatus', description='满意度状态', example='0'),
        flowId?: long(name='FlowId', description='入呼流程id', example='12'),
        flowName?: string(name='FlowName', description='入呼流程名称', example='测试流程'),
        hotlineNumber?: string(name='HotlineNumber', description='号码', example='0571****2211'),
        inBoundEnabled?: boolean(name='InBoundEnabled', description='是否用于入呼', example='true'),
        location?: string(name='Location', description='归属地', example='浙江杭州'),
        outboundEnabled?: boolean(name='OutboundEnabled', description='是否用于外呼', example='true'),
        sp?: string(name='Sp', description='运营商', example='电信'),
      }
    ](name='HotlineNumList', description='号码列表'),
    pageSize?: long(name='PageSize', description='每页大小', example='10'),
    totalCount?: long(name='TotalCount', description='数据总量', example='123'),
  }(name='Data', description='返回结果数据'),
  message?: string(name='Message', description='错误信息', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE339D98-9BD3-4413-B165'),
  success?: boolean(name='Success', description='是否成功', example='true'),
}

model QueryHotlineNumberResponse = {
  headers: map[string]string(name='headers'),
  body: QueryHotlineNumberResponseBody(name='body'),
}

async function queryHotlineNumber(request: QueryHotlineNumberRequest): QueryHotlineNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryHotlineNumber', 'GET', '/', 'json', false, 'json', request);
}

model QueryOutboundTaskRequest {
  ani?: string(name='Ani', position='Query'),
  currentPage?: int32(name='CurrentPage', minimum=1, maximum=10000, position='Query'),
  departmentId?: string(name='DepartmentId', position='Query'),
  endDate?: string(name='EndDate', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  pageSize?: int32(name='PageSize', minimum=0, maximum=100, position='Query'),
  skillGroup?: long(name='SkillGroup', minimum=0, maximum=9223372036854775700, position='Query'),
  startDate?: string(name='StartDate', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  status?: string(name='Status', position='Query'),
  taskId?: long(name='TaskId', minimum=0, maximum=9223372036854775700, position='Query'),
  taskName?: string(name='TaskName', position='Query'),
  taskType?: int32(name='TaskType', minimum=0, maximum=10, position='Query'),
}

model QueryOutboundTaskResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: string(name='CurrentPage'),
    list?: [ 
      {
        buId?: long(name='BuId'),
        callerNum?: string(name='CallerNum'),
        creator?: string(name='Creator'),
        departmentId?: long(name='DepartmentId'),
        description?: string(name='Description'),
        endDate?: string(name='EndDate'),
        endTime?: string(name='EndTime'),
        extAttrs?: string(name='ExtAttrs'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        groupName?: string(name='GroupName'),
        id?: long(name='Id'),
        model?: int32(name='Model'),
        modifier?: string(name='Modifier'),
        name?: string(name='Name'),
        retryInterval?: int32(name='RetryInterval'),
        retryTime?: int32(name='RetryTime'),
        skillGroup?: long(name='SkillGroup'),
        startDate?: string(name='StartDate'),
        startTime?: string(name='StartTime'),
        status?: int32(name='Status'),
        type?: int32(name='Type'),
      }
    ](name='List'),
    pageSize?: string(name='PageSize'),
    totalResults?: string(name='TotalResults'),
  }(name='Data'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model QueryOutboundTaskResponse = {
  headers: map[string]string(name='headers'),
  body: QueryOutboundTaskResponseBody(name='body'),
}

async function queryOutboundTask(request: QueryOutboundTaskRequest): QueryOutboundTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOutboundTask', 'POST', '/', 'json', false, 'json', request);
}

model QuerySkillGroupsRequest {
  channelType?: int32(name='ChannelType', description='技能组类型（1：热线，2：在线，4：工单）', example='2', position='Query'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Query'),
  departmentId?: long(name='DepartmentId', description='部门ID', example='1023****', position='Query'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Query'),
  pageNo: int32(name='PageNo', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize: int32(name='PageSize', example='20', minimum=1, maximum=1000, position='Query'),
}

model QuerySkillGroupsResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: [ 
    {
      channelType?: int32(name='ChannelType', example='2'),
      description?: string(name='Description'),
      displayName?: string(name='DisplayName'),
      skillGroupId?: long(name='SkillGroupId', example='123456'),
      skillGroupName?: string(name='SkillGroupName'),
    }
  ](name='Data'),
  onePageSize?: int32(name='OnePageSize', example='20'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  totalPage?: int32(name='TotalPage', example='4'),
  totalResults?: int32(name='TotalResults', example='76'),
}

model QuerySkillGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySkillGroupsResponseBody(name='body'),
}

async function querySkillGroups(request: QuerySkillGroupsRequest): QuerySkillGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySkillGroups', 'POST', '/', 'json', false, 'json', request);
}

model QueryTaskDetailRequest {
  ani?: string(name='Ani', position='Query'),
  currentPage?: int32(name='CurrentPage', minimum=0, maximum=10000, position='Query'),
  departmentIdList?: string(name='DepartmentIdList', position='Query'),
  dnis?: string(name='Dnis', position='Query'),
  endReasonList?: string(name='EndReasonList', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  outboundTaskId?: string(name='OutboundTaskId', position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  priorityList?: string(name='PriorityList', position='Query'),
  servicerId?: string(name='ServicerId', position='Query'),
  servicerName?: string(name='ServicerName', position='Query'),
  sid?: string(name='Sid', position='Query'),
  skillGroup?: string(name='SkillGroup', position='Query'),
  statusList?: string(name='StatusList', position='Query'),
  taskId?: long(name='TaskId', minimum=0, maximum=9223372036854775700, position='Query'),
}

model QueryTaskDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: string(name='CurrentPage'),
    list?: [ 
      {
        ani?: string(name='Ani'),
        buId?: long(name='BuId'),
        departmentId?: long(name='DepartmentId'),
        dnis?: string(name='Dnis'),
        endReason?: int32(name='EndReason'),
        extAttrs?: string(name='ExtAttrs'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        id?: int32(name='Id'),
        memberId?: long(name='MemberId'),
        memberName?: string(name='MemberName'),
        outboundNum?: int32(name='OutboundNum'),
        outboundTaskId?: long(name='OutboundTaskId'),
        priority?: int32(name='Priority'),
        retryTime?: string(name='RetryTime'),
        servicerId?: long(name='ServicerId'),
        servicerName?: string(name='ServicerName'),
        skillGroup?: int32(name='SkillGroup'),
        status?: int32(name='Status'),
      }
    ](name='List'),
    pageSize?: string(name='PageSize'),
    totalResults?: string(name='TotalResults'),
  }(name='Data'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model QueryTaskDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTaskDetailResponseBody(name='body'),
}

async function queryTaskDetail(request: QueryTaskDetailRequest): QueryTaskDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTaskDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryTicketsRequest {
  caseId?: long(name='CaseId', example='223468****', minimum=1, maximum=9223372036854775807, position='Body'),
  caseStatus?: int32(name='CaseStatus', example='2', minimum=-100000, maximum=9223372036854775807, position='Body'),
  caseType?: int32(name='CaseType', example='1223', minimum=1, maximum=9223372036854775807, position='Body'),
  channelId?: string(name='ChannelId', example='02acfefd3fa14049826ac1a89e1xxxxx', position='Body'),
  channelType?: int32(name='ChannelType', example='1', minimum=-10000000, maximum=9223372036854775807, position='Body'),
  currentPage?: int32(name='CurrentPage', example='1', minimum=0, maximum=5000, position='Body'),
  dealId?: long(name='DealId', example='123456', minimum=-1, maximum=9223372036854775807, position='Body'),
  extra?: map[string]any(name='Extra', shrink='json', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
  srType?: long(name='SrType', example='29506', minimum=1, maximum=9223372036854775807, position='Body'),
  taskStatus?: int32(name='TaskStatus', example='3', minimum=-10000000, maximum=9223372036854775807, position='Body'),
  touchId?: long(name='TouchId', example='15030609', minimum=0, maximum=9223372036854775807, position='Body'),
}

model QueryTicketsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='{ "totalResults":1 "previousPage":1 "data":[ 0:{ "serviceType":1 "lastUrgeTime":0 "queueId":0 "sopCateId":252011 "totalUrgeMemo":"" "taskGmtModified":0 "departmentId":10 "groupId":0 "channelType":1 "questionInfo":"" "templateId":0 "deadLine":0 "srType":30701 "caseId":2000000001165962}'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model QueryTicketsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTicketsResponseBody(name='body'),
}

async function queryTickets(request: QueryTicketsRequest): QueryTicketsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTickets', 'POST', '/', 'json', true, 'form', request);
}

model QueryTouchListRequest {
  channelId?: [ string ](name='ChannelId', position='Body'),
  channelType?: [ int32 ](name='ChannelType', position='Body'),
  closeTimeEnd?: long(name='CloseTimeEnd', example='1614600500000', position='Body'),
  closeTimeStart?: long(name='CloseTimeStart', example='1614600400000', position='Body'),
  currentPage?: int32(name='CurrentPage', example='1', position='Body'),
  evaluationLevel?: [ int32 ](name='EvaluationLevel', position='Body'),
  evaluationScore?: [ int32 ](name='EvaluationScore', position='Body'),
  evaluationStatus?: [ int32 ](name='EvaluationStatus', position='Body'),
  firstTimeEnd?: long(name='FirstTimeEnd', example='1614599400000', position='Body'),
  firstTimeStart?: long(name='FirstTimeStart', example='1614596400000', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
  memberId?: [ long ](name='MemberId', position='Body'),
  memberName?: [ string ](name='MemberName', position='Body'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=500, position='Body'),
  queueId?: [ long ](name='QueueId', position='Body'),
  servicerId?: [ long ](name='ServicerId', position='Body'),
  servicerName?: [ string ](name='ServicerName', position='Body'),
  touchId?: [ long ](name='TouchId', position='Body'),
  touchType?: [ int32 ](name='TouchType', position='Body'),
}

model QueryTouchListResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='865658FD-80DE-5D49-ABEB-F3CC9863F4F1'),
  resultData?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    data?: [ 
      {
        buId?: long(name='BuId', example='905'),
        channelId?: string(name='ChannelId', example='4f8807a9de024507a3090b5b66a8****'),
        channelType?: int32(name='ChannelType', example='1'),
        closeTime?: long(name='CloseTime', example='1611207976000'),
        commonQueueName?: string(name='CommonQueueName'),
        depId?: long(name='DepId', example='100'),
        extAttrs?: {
          ani?: string(name='Ani', example='187****0000'),
          dnis?: string(name='Dnis', example='05712688****'),
          evaluationLevel?: int32(name='EvaluationLevel', example='2'),
          evaluationScore?: int32(name='EvaluationScore', example='1'),
          evaluationSolution?: int32(name='EvaluationSolution', example='0'),
          evaluationStatus?: int32(name='EvaluationStatus', example='1'),
          onlineJoinRespInterval?: int32(name='OnlineJoinRespInterval', example='1'),
          onlineSessionSource?: int32(name='OnlineSessionSource', example='0'),
          outCallRouteNumber?: string(name='OutCallRouteNumber', example='05712688****'),
        }(name='ExtAttrs'),
        extAttrsString?: map[string]any(name='ExtAttrsString'),
        feedback?: string(name='Feedback', example='xxxx'),
        firstTime?: long(name='FirstTime', example='1611209971000'),
        fromId?: long(name='FromId', example='6400665****'),
        gmtCreate?: long(name='GmtCreate', example='1611209971000'),
        gmtModified?: long(name='GmtModified', example='1611207979000'),
        memberId?: long(name='MemberId', example='6400665****'),
        memberName?: string(name='MemberName'),
        parentTouchId?: long(name='ParentTouchId', example='0'),
        queueId?: long(name='QueueId', example='111'),
        servicerId?: long(name='ServicerId', example='67****'),
        servicerName?: string(name='ServicerName', example='13900001234'),
        status?: int32(name='Status', example='1'),
        switchUser?: string(name='SwitchUser', example='null'),
        toId?: long(name='ToId', example='678026'),
        touchContent?: string(name='TouchContent', example='1'),
        touchEndReason?: int32(name='TouchEndReason', example='2'),
        touchId?: string(name='TouchId', example='1386****'),
        touchTime?: string(name='TouchTime', example='111'),
        touchType?: int32(name='TouchType', example='2'),
        userTouchId?: long(name='UserTouchId', example='1386****'),
      }
    ](name='Data'),
    empty?: boolean(name='Empty', example='false'),
    nextPage?: int32(name='NextPage', example='2'),
    onePageSize?: int32(name='OnePageSize', example='2'),
    previousPage?: int32(name='PreviousPage', example='2'),
    totalPage?: int32(name='TotalPage', example='4'),
    totalResults?: int32(name='TotalResults', example='100'),
  }(name='ResultData'),
  success?: boolean(name='Success', example='true'),
}

model QueryTouchListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTouchListResponseBody(name='body'),
}

async function queryTouchList(request: QueryTouchListRequest): QueryTouchListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTouchList', 'POST', '/', 'json', true, 'form', request);
}

model RemoveAgentFromSkillGroupRequest {
  agentIds: [ long ](name='AgentIds', description='坐席列表', shrink='json', position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', example='agent_***', position='Query'),
  skillGroupId: long(name='SkillGroupId', description='技能组id', example='1146****', position='Query'),
}

model RemoveAgentFromSkillGroupResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    successCount?: int32(name='SuccessCount', description='成功移除的坐席数', example='2'),
  }(name='Data', description='结果信息'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='请求ID', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model RemoveAgentFromSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveAgentFromSkillGroupResponseBody(name='body'),
}

async function removeAgentFromSkillGroup(request: RemoveAgentFromSkillGroupRequest): RemoveAgentFromSkillGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveAgentFromSkillGroup', 'POST', '/', 'json', false, 'json', request);
}

model RemoveSkillGroupRequest {
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
  skillGroupId: string(name='SkillGroupId', example='123456', position='Body'),
}

model RemoveSkillGroupResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model RemoveSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveSkillGroupResponseBody(name='body'),
}

async function removeSkillGroup(request: RemoveSkillGroupRequest): RemoveSkillGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveSkillGroup', 'POST', '/', 'json', true, 'form', request);
}

model ResetHotlineNumberRequest {
  description: string(name='Description', description='号码描述', example='desc', position='Body'),
  enableInbound: boolean(name='EnableInbound', description='是否用于入呼', example='true', position='Body'),
  enableInboundEvaluation: boolean(name='EnableInboundEvaluation', description='是否开启入呼满意度', example='true', position='Body'),
  enableOutbound: boolean(name='EnableOutbound', description='是否用于外呼', example='true', position='Body'),
  enableOutboundEvaluation: boolean(name='EnableOutboundEvaluation', description='是否开启外呼满意度', example='true', position='Body'),
  evaluationLevel?: int32(name='EvaluationLevel', description='满意度等级', example='2', position='Body'),
  hotlineNumber: string(name='HotlineNumber', description='号码', example='0571********', position='Body'),
  inboundFlowId?: long(name='InboundFlowId', description='入呼ivr流程id', example='123456', position='Body'),
  instanceId: string(name='InstanceId', description='实例id', example='ccc_xp_pre-cn-***', position='Body'),
  outboundAllDepart: boolean(name='OutboundAllDepart', description='外呼是否对所有部门生效', example='true', position='Body'),
  outboundRangeList?: [ 
    {
      departmentId?: long(name='DepartmentId', description='生效部门id', example='123456'),
      groupIdList?: [ long ](name='GroupIdList', description='生效技能组列表（部门123下）'),
    }
  ](name='OutboundRangeList', description='外呼生效范围', shrink='json', position='Body'),
}

model ResetHotlineNumberResponseBody = {
  code?: string(name='Code', description='错误码', example='Success'),
  httpStatusCode?: long(name='HttpStatusCode', description='http状态码', example='200'),
  message?: string(name='Message', description='错误信息', example='xxx'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', description='接口调用是否成功', example='true'),
}

model ResetHotlineNumberResponse = {
  headers: map[string]string(name='headers'),
  body: ResetHotlineNumberResponseBody(name='body'),
}

async function resetHotlineNumber(request: ResetHotlineNumberRequest): ResetHotlineNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetHotlineNumber', 'POST', '/', 'json', true, 'form', request);
}

model RestartOutboundTaskRequest {
  instanceId: string(name='InstanceId', position='Query'),
  outboundTaskId: long(name='OutboundTaskId', minimum=0, maximum=9223372036854775700, position='Query'),
}

model RestartOutboundTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RestartOutboundTaskResponse = {
  headers: map[string]string(name='headers'),
  body: RestartOutboundTaskResponseBody(name='body'),
}

async function restartOutboundTask(request: RestartOutboundTaskRequest): RestartOutboundTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartOutboundTask', 'POST', '/', 'json', false, 'json', request);
}

model RobotCallRequest {
  calledNumber: string(name='CalledNumber', example='131****2204', position='Query'),
  calledShowNumber: string(name='CalledShowNumber', example='0571****5678', position='Query'),
  earlyMediaAsr?: boolean(name='EarlyMediaAsr', example='false', position='Query'),
  outId?: string(name='OutId', example='abcdefgh', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  params?: string(name='Params', position='Query'),
  recordFlag?: boolean(name='RecordFlag', example='true', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  robotId: long(name='RobotId', example='350000****', minimum=0, maximum=9223372036854775807, position='Query'),
}

model RobotCallResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='116012854210^10281427*****'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='A90E4451-FED7-49D2-87C8-00700A8C4D0D'),
}

model RobotCallResponse = {
  headers: map[string]string(name='headers'),
  body: RobotCallResponseBody(name='body'),
}

async function robotCall(request: RobotCallRequest): RobotCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RobotCall', 'POST', '/', 'json', false, 'json', request);
}

model SendCcoSmartCallRequest {
  actionCodeBreak?: boolean(name='ActionCodeBreak', example='true', position='Query'),
  actionCodeTimeBreak?: int32(name='ActionCodeTimeBreak', example='120', position='Query'),
  asrAlsAmId?: string(name='AsrAlsAmId', example='123456', position='Query'),
  asrBaseId?: string(name='AsrBaseId', example='customer_service_8k', position='Query'),
  asrModelId?: string(name='AsrModelId', example='bf71664d30d2478fb8cb8c39c6b6****', position='Query'),
  asrVocabularyId?: string(name='AsrVocabularyId', example='123456', position='Query'),
  backgroundFileCode?: string(name='BackgroundFileCode', example='2d4c-4e78-8d2a-afbb06cf****.wav', position='Query'),
  backgroundSpeed?: int32(name='BackgroundSpeed', example='1', position='Query'),
  backgroundVolume?: int32(name='BackgroundVolume', example='1', minimum=-4, maximum=4, position='Query'),
  calledNumber: string(name='CalledNumber', example='137****0000', position='Query'),
  calledShowNumber: string(name='CalledShowNumber', example='0571****0000', position='Query'),
  dynamicId?: string(name='DynamicId', example='123456', position='Query'),
  earlyMediaAsr?: boolean(name='EarlyMediaAsr', example='fasle', position='Query'),
  enableITN?: boolean(name='EnableITN', example='true', position='Query'),
  muteTime?: int32(name='MuteTime', example='10000', position='Query'),
  outId?: string(name='OutId', example='222356****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pauseTime?: int32(name='PauseTime', example='800', position='Query'),
  playTimes?: int32(name='PlayTimes', example='1', position='Query'),
  prodCode?: string(name='ProdCode', example='aiccs', position='Query'),
  recordFlag?: boolean(name='RecordFlag', example='true', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sessionTimeout?: int32(name='SessionTimeout', example='120', position='Query'),
  speed?: int32(name='Speed', example='1', position='Query'),
  ttsConf?: boolean(name='TtsConf', example='true', position='Query'),
  ttsSpeed?: int32(name='TtsSpeed', example='100', position='Query'),
  ttsStyle?: string(name='TtsStyle', example='xiaoyun', position='Query'),
  ttsVolume?: int32(name='TtsVolume', example='10', position='Query'),
  voiceCode: string(name='VoiceCode', example='2d4c-4e78-8d2a-afbb06cf****.wav,$name$', position='Query'),
  voiceCodeParam?: string(name='VoiceCodeParam', position='Query'),
  volume?: int32(name='Volume', example='1', position='Query'),
}

model SendCcoSmartCallResponseBody = {
  code?: string(name='Code', example='16012854210^10281427****'),
  data?: string(name='Data', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='A90E4451-FED7-49D2-87C8-00700A8C4D0D'),
}

model SendCcoSmartCallResponse = {
  headers: map[string]string(name='headers'),
  body: SendCcoSmartCallResponseBody(name='body'),
}

async function sendCcoSmartCall(request: SendCcoSmartCallRequest): SendCcoSmartCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendCcoSmartCall', 'POST', '/', 'json', false, 'json', request);
}

model SendCcoSmartCallOperateRequest {
  callId: string(name='CallId', example='116012854210^102814279****', position='Query'),
  command: string(name='Command', example='parallelBridge', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  param?: string(name='Param', example='Param', position='Query'),
  prodCode?: string(name='ProdCode', example='aiccs', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model SendCcoSmartCallOperateResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='true'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='A90E4451-FED7-49D2-87C8-00700A8C4D0D'),
}

model SendCcoSmartCallOperateResponse = {
  headers: map[string]string(name='headers'),
  body: SendCcoSmartCallOperateResponseBody(name='body'),
}

async function sendCcoSmartCallOperate(request: SendCcoSmartCallOperateRequest): SendCcoSmartCallOperateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendCcoSmartCallOperate', 'POST', '/', 'json', false, 'json', request);
}

model SendHotlineHeartBeatRequest {
  accountName: string(name='AccountName', example='123@123.com', position='Body'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
  token: string(name='Token', example='0079e7a845e373****', position='Body'),
}

model SendHotlineHeartBeatResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model SendHotlineHeartBeatResponse = {
  headers: map[string]string(name='headers'),
  body: SendHotlineHeartBeatResponseBody(name='body'),
}

async function sendHotlineHeartBeat(request: SendHotlineHeartBeatRequest): SendHotlineHeartBeatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendHotlineHeartBeat', 'POST', '/', 'json', true, 'form', request);
}

model StartAiOutboundTaskRequest {
  instanceId: string(name='InstanceId', description='实例ID', example='agent_****', position='Query'),
  taskId: long(name='TaskId', description='任务id', example='1763****', position='Query'),
}

model StartAiOutboundTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model StartAiOutboundTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StartAiOutboundTaskResponseBody(name='body'),
}

async function startAiOutboundTask(request: StartAiOutboundTaskRequest): StartAiOutboundTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartAiOutboundTask', 'POST', '/', 'json', false, 'json', request);
}

model StartCallRequest {
  accountName: string(name='AccountName', example='123@123.com', position='Body'),
  callee: string(name='Callee', example='1360987****', position='Body'),
  caller: string(name='Caller', example='906****', position='Body'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
}

model StartCallResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model StartCallResponse = {
  headers: map[string]string(name='headers'),
  body: StartCallResponseBody(name='body'),
}

async function startCall(request: StartCallRequest): StartCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartCall', 'POST', '/', 'json', true, 'form', request);
}

model StartCallV2Request {
  accountName: string(name='AccountName', example='123@123.com', position='Body'),
  callee: string(name='Callee', example='136****1111', position='Body'),
  caller: string(name='Caller', example='9065****', position='Body'),
  callerType: int32(name='CallerType', example='1', position='Body'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
}

model StartCallV2ResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model StartCallV2Response = {
  headers: map[string]string(name='headers'),
  body: StartCallV2ResponseBody(name='body'),
}

async function startCallV2(request: StartCallV2Request): StartCallV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartCallV2', 'POST', '/', 'json', true, 'form', request);
}

model StartChatWorkRequest {
  accountName: string(name='AccountName', description='accountName', example='123@123.com', position='Body'),
  instanceId: string(name='InstanceId', description='instanceId', example='ccc_xp_pre***', position='Body'),
}

model StartChatWorkResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: string(name='Data', description='data', example='1'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  message?: string(name='Message', description='message', example='xxxx'),
  requestId?: string(name='RequestId', description='requestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', description='success', example='true'),
}

model StartChatWorkResponse = {
  headers: map[string]string(name='headers'),
  body: StartChatWorkResponseBody(name='body'),
}

async function startChatWork(request: StartChatWorkRequest): StartChatWorkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartChatWork', 'POST', '/', 'json', true, 'form', request);
}

model StartHotlineServiceRequest {
  accountName: string(name='AccountName', example='username@example.com', position='Body'),
  clientToken?: string(name='ClientToken', description='js sdk中自动生成的鉴权token', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
}

model StartHotlineServiceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: string(name='Data', example='0079e7a845e37334ff'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model StartHotlineServiceResponse = {
  headers: map[string]string(name='headers'),
  body: StartHotlineServiceResponseBody(name='body'),
}

async function startHotlineService(request: StartHotlineServiceRequest): StartHotlineServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartHotlineService', 'POST', '/', 'json', true, 'form', request);
}

model StartMicroOutboundRequest {
  accountId?: string(name='AccountId', example='223457****', position='Query'),
  accountType?: string(name='AccountType', example='BUC_TYPE', position='Query'),
  appName?: string(name='AppName', example='aliyun', position='Query'),
  calledNumber?: string(name='CalledNumber', example='0571456****', position='Query'),
  callingNumber?: string(name='CallingNumber', example='1367123****', position='Query'),
  commandCode?: string(name='CommandCode', example='outBound_Call', position='Query'),
  extInfo?: string(name='ExtInfo', example='{"caseId":23232****}', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', example='aiccs', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model StartMicroOutboundResponseBody = {
  code?: string(name='Code', example='200'),
  customerInfo?: string(name='CustomerInfo', example='{\\"caseId\\":2323****}'),
  invokeCmdId?: string(name='InvokeCmdId', example='8883f165-4a0d-4da2-a2d2'),
  invokeCreateTime?: string(name='InvokeCreateTime', example='2019-05-23 17:30:32.525'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
}

model StartMicroOutboundResponse = {
  headers: map[string]string(name='headers'),
  body: StartMicroOutboundResponseBody(name='body'),
}

async function startMicroOutbound(request: StartMicroOutboundRequest): StartMicroOutboundResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartMicroOutbound', 'POST', '/', 'json', false, 'json', request);
}

model StartTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startNow?: boolean(name='StartNow', example='true', position='Query'),
  taskId: long(name='TaskId', example='123456', position='Query'),
}

model StartTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
  success?: boolean(name='Success', example='true'),
}

model StartTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StartTaskResponseBody(name='body'),
}

async function startTask(request: StartTaskRequest): StartTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartTask', 'POST', '/', 'json', false, 'json', request);
}

model StopAiOutboundTaskRequest {
  instanceId: string(name='InstanceId', description='实例ID', example='agent_***', position='Query'),
  taskId: long(name='TaskId', description='任务id', example='123456', position='Query'),
}

model StopAiOutboundTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model StopAiOutboundTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StopAiOutboundTaskResponseBody(name='body'),
}

async function stopAiOutboundTask(request: StopAiOutboundTaskRequest): StopAiOutboundTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopAiOutboundTask', 'POST', '/', 'json', false, 'json', request);
}

model StopTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: long(name='TaskId', example='123456', position='Query'),
}

model StopTaskResponseBody = {
  code?: string(name='Code', example='Ok'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='D9CB3933-9FE3-4870-BA8E-2BEE91B69D23'),
  success?: boolean(name='Success', example='true'),
}

model StopTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StopTaskResponseBody(name='body'),
}

async function stopTask(request: StopTaskRequest): StopTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopTask', 'POST', '/', 'json', false, 'json', request);
}

model SuspendHotlineServiceRequest {
  accountName: string(name='AccountName', example='123@123.com', position='Body'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
  type?: int32(name='Type', example='1', minimum=1, maximum=5, position='Body'),
}

model SuspendHotlineServiceResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model SuspendHotlineServiceResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendHotlineServiceResponseBody(name='body'),
}

async function suspendHotlineService(request: SuspendHotlineServiceRequest): SuspendHotlineServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendHotlineService', 'POST', '/', 'json', true, 'form', request);
}

model SuspendOutboundTaskRequest {
  instanceId: string(name='InstanceId', position='Query'),
  outboundTaskId: long(name='OutboundTaskId', minimum=0, maximum=9223372036854775700, position='Query'),
}

model SuspendOutboundTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SuspendOutboundTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendOutboundTaskResponseBody(name='body'),
}

async function suspendOutboundTask(request: SuspendOutboundTaskRequest): SuspendOutboundTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendOutboundTask', 'POST', '/', 'json', false, 'json', request);
}

model TerminateAiOutboundTaskRequest {
  instanceId: string(name='InstanceId', description='实例id', example='agent_****', position='Query'),
  taskId: long(name='TaskId', description='任务id', example='1763****', position='Query'),
}

model TerminateAiOutboundTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model TerminateAiOutboundTaskResponse = {
  headers: map[string]string(name='headers'),
  body: TerminateAiOutboundTaskResponseBody(name='body'),
}

async function terminateAiOutboundTask(request: TerminateAiOutboundTaskRequest): TerminateAiOutboundTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TerminateAiOutboundTask', 'POST', '/', 'json', false, 'json', request);
}

model TransferCallToSkillGroupRequest {
  accountName: string(name='AccountName', example='username@example.com', position='Body'),
  callId?: string(name='CallId', example='7719786', position='Body'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Body'),
  connectionId?: string(name='ConnectionId', example='7719788', position='Body'),
  holdConnectionId?: string(name='HoldConnectionId', example='0', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
  isSingleTransfer?: boolean(name='IsSingleTransfer', example='true', position='Body'),
  jobId?: string(name='JobId', example='7719787', position='Body'),
  skillGroupId: long(name='SkillGroupId', example='356543', position='Body'),
  type?: int32(name='Type', example='1', minimum=1, maximum=2, position='Body'),
}

model TransferCallToSkillGroupResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model TransferCallToSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: TransferCallToSkillGroupResponseBody(name='body'),
}

async function transferCallToSkillGroup(request: TransferCallToSkillGroupRequest): TransferCallToSkillGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransferCallToSkillGroup', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAgentRequest {
  accountName: string(name='AccountName', example='123@123.com', position='Body'),
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Body'),
  displayName: string(name='DisplayName', position='Body'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Body'),
  skillGroupId?: [ long ](name='SkillGroupId', position='Body'),
  skillGroupIdList?: [ long ](name='SkillGroupIdList', position='Body'),
}

model UpdateAgentResponseBody = {
  code?: string(name='Code', example='Success'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAgentResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAgentResponseBody(name='body'),
}

async function updateAgent(request: UpdateAgentRequest): UpdateAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAgent', 'PUT', '/', 'json', true, 'form', request);
}

model UpdateAiOutboundTaskRequest {
  concurrentRate?: int32(name='ConcurrentRate', description='自动外呼的并发', example='10', position='Query'),
  description?: string(name='Description', description='任务描述（0～100字符）', maxLength=100, position='Query'),
  executionTime: string(name='ExecutionTime', description='任务执行时间', example='{"TUESDAY":[{"start":"06:00","end":"06:05"}],"MONDAY":[{"start":"09:00","end":"18:00"},{"start":"20:30","end":"21:45"},{"start":"22:30","end":"22:50"}],"WEDNESDAY":[{"start":"09:00","end":"18:00"}],"THURSDAY":[{"start":"09:00","end":"18:00"}],"FRIDAY":[{"start":"09:00","end":"18:00"}],"SATURDAY":[{"start":"09:00","end":"18:00"}],"SUNDAY":[{"start":"17:00","end":"23:45"}]}', position='Query'),
  forecastCallRate?: float(name='ForecastCallRate', description='预测式外呼固定外呼比例（>=1）', example='1.2', minimum=1, maximum=100, position='Query'),
  handlerId: long(name='HandlerId', description='技能组id（预测式外呼）或者ivr id（自动外呼）', example='123', position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', example='agent_***', position='Query'),
  name: string(name='Name', description='任务名（1～15字符）', example='xx外呼任务', minLength=1, maxLength=15, position='Query'),
  numRepeated: int32(name='NumRepeated', description='被叫号码重复策略（0:任务内去重，1:任务内不去重）', example='1', position='Query'),
  outboundNums: [ string ](name='OutboundNums', description='外呼主叫号码', shrink='json', position='Query'),
  recallRule?: {
    count?: int32(name='Count', description='失败重呼次数（1～3次）', example='2', minimum=1, maximum=3),
    interval?: int32(name='Interval', description='失败重呼间隔时间（1～60分钟）', example='5', minimum=1, maximum=60),
  }(name='RecallRule', description='失败重呼策略', shrink='json', position='Query'),
  taskId: long(name='TaskId', description='任务id', example='123', position='Query'),
}

model UpdateAiOutboundTaskResponseBody = {
  code?: string(name='Code', example='ok'),
  message?: string(name='Message', example='ok'),
  requestId?: string(name='RequestId', description='Id of the request', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAiOutboundTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAiOutboundTaskResponseBody(name='body'),
}

async function updateAiOutboundTask(request: UpdateAiOutboundTaskRequest): UpdateAiOutboundTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAiOutboundTask', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDepartmentRequest {
  departmentId: long(name='DepartmentId', description='部门id', example='123456', position='Query'),
  departmentName: string(name='DepartmentName', description='部门名称', position='Query'),
  instanceId: string(name='InstanceId', description='实例id', example='ccc_xp_pre-cn-***', position='Query'),
}

model UpdateDepartmentResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', description='Id of the request', example='98B032F5-6473-4EAC-8BA8-C28993513A1'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDepartmentResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDepartmentResponseBody(name='body'),
}

async function updateDepartment(request: UpdateDepartmentRequest): UpdateDepartmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDepartment', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOuterAccountRequest {
  avatar?: string(name='Avatar', example='http://****', position='Query'),
  ext?: string(name='Ext', position='Query'),
  outerAccountId: string(name='OuterAccountId', example='123456', position='Query'),
  outerAccountName?: string(name='OuterAccountName', position='Query'),
  outerAccountType: string(name='OuterAccountType', example='alipay', position='Query'),
  outerDepartmentId?: string(name='OuterDepartmentId', example='3', position='Query'),
  outerDepartmentType?: string(name='OuterDepartmentType', example='type_invalid', position='Query'),
  outerGroupIds?: string(name='OuterGroupIds', example='["222","333","444"]', position='Query'),
  outerGroupType?: string(name='OuterGroupType', example='mybank', position='Query'),
  realName?: string(name='RealName', position='Query'),
}

model UpdateOuterAccountResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='true'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model UpdateOuterAccountResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateOuterAccountResponseBody(name='body'),
}

async function updateOuterAccount(request: UpdateOuterAccountRequest): UpdateOuterAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOuterAccount', 'GET', '/', 'json', false, 'json', request);
}

model UpdateSkillGroupRequest {
  clientToken?: string(name='ClientToken', example='46c1341e-2648-447a-9b11-70b6a298d94d', position='Query'),
  description?: string(name='Description', position='Query'),
  displayName?: string(name='DisplayName', position='Query'),
  instanceId: string(name='InstanceId', example='ccc_xp_pre-cn-***', position='Query'),
  skillGroupId: long(name='SkillGroupId', example='123456', minimum=1, maximum=9223372036854775807, position='Query'),
  skillGroupName?: string(name='SkillGroupName', position='Query'),
}

model UpdateSkillGroupResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='xxxx'),
  requestId?: string(name='RequestId', example='EE338D98-9BD3-4413-B165'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSkillGroupResponseBody(name='body'),
}

async function updateSkillGroup(request: UpdateSkillGroupRequest): UpdateSkillGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSkillGroup', 'POST', '/', 'json', false, 'json', request);
}

