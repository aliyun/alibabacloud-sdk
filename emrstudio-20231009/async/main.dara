/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'EmrStudio';
  @version = '2023-10-09';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ListProjectsRequest {
  maxResults?: int32(name='maxResults', example='100', position='Query'),
  nextToken?: string(name='nextToken', example='8bj81uI8nls=', position='Query'),
  searchVal?: string(name='searchVal', example='test', position='Query'),
  workspaceId: long(name='workspaceId', example='12345', position='Query'),
}

model ListProjectsResponseBody = {
  data?: [ 
    {
      code?: long(name='code'),
      description?: string(name='description'),
      name?: string(name='name', example='project_name'),
      projectId?: long(name='projectId', example='318720'),
    }
  ](name='data'),
  nextToken?: string(name='nextToken', example='8bj81uI8nls='),
  requestId?: string(name='requestId', example='14079B51-C226-5391-BFAF-6E44AC492C1F'),
}

model ListProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectsResponseBody(name='body'),
}

async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjects', 'GET', '/dolphinscheduler/v3/projects', 'json', false, 'json', request);
}

