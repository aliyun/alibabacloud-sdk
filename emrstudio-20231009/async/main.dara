/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'EmrStudio';
  @version = '2023-10-09';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DescribeManualTaskRequest {
  projectId: string(name='projectId', example='123***', position='Path'),
  manualTaskId: string(name='manualTaskId', example='123***', position='Path'),
  workspaceId: string(name='workspaceId', example='123***', position='Query'),
}

model DescribeManualTaskResponseBody = {
  createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段', example='2024-03-27 00:00:00'),
  description?: string(name='Description', description='描述', example='test'),
  manualTaskId?: string(name='ManualTaskId', description='代表资源一级ID的资源属性字段', example='123***'),
  manualTaskName?: string(name='ManualTaskName', description='代表资源名称的资源属性字段', example='test'),
  parentDirectoryId?: string(name='ParentDirectoryId', description='目录ID', example='123***'),
  projectId?: string(name='ProjectId', description='项目ID', example='123***'),
  resourceIds?: string(name='ResourceIds', description='资源id列表', example='123'),
  taskParams?: string(name='TaskParams', description='任务参数', example='{
    "yarnUser": "",
    "conditionResult": "null",
    "rawScript": "sleep 300",
    "submitOnYarnFlag": false,
    "emrClusterId": "",
    "yarnPriority": "",
    "dependence": "null",
    "yarnMemory": "",
    "localParams": [],
    "switchResult": "null",
    "resourceList": [],
    "yarnQueue": "",
    "yarnVCores": "",
    "associateManualTaskFlag": false
}'),
  taskType?: string(name='TaskType', description='任务类型', example='SHELL'),
  updateTime?: string(name='UpdateTime', description='更新时间', example='2024-03-27 00:00:00'),
  requestId?: string(name='requestId', description='Id of the request', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model DescribeManualTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeManualTaskResponseBody(name='body'),
}

async function describeManualTask(request: DescribeManualTaskRequest): DescribeManualTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeManualTask', 'GET', '/dolphinscheduler/v3/projects/{projectId}/manualTasks/{manualTaskId}', 'json', false, 'json', request);
}

model DescribeManualTaskInstanceRequest {
  manualTaskInstanceId: string(name='manualTaskInstanceId', example='123abc***', position='Path'),
  projectId: string(name='projectId', example='123***', position='Path'),
  workspaceId: string(name='workspaceId', example='123***', position='Query'),
}

model DescribeManualTaskInstanceResponseBody = {
  emrClusterId?: string(name='EmrClusterId', description='EMR集群ID', example='c-b933c5aac7f7***'),
  endTime?: string(name='EndTime', description='结束时间', example='2024-03-27 00:00:00'),
  externalAppId?: string(name='ExternalAppId', description='外部应用ID', example='application_123_***'),
  manualTaskInstanceId?: string(name='ManualTaskInstanceId', description='代表资源一级ID的资源属性字段', example='123abc***'),
  manualTaskInstanceName?: string(name='ManualTaskInstanceName', description='代表资源名称的资源属性字段', example='test'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID', example='wg-123abc***'),
  startTime?: string(name='StartTime', description='开始时间', example='2024-03-27 00:00:00'),
  status?: string(name='Status', description='状态', example='SUCCESS'),
  submitTime?: string(name='SubmitTime', description='提交时间', example='2024-03-27 00:00:00'),
  taskParams?: string(name='TaskParams', description='任务参数', example='{
    "yarnUser": "",
    "conditionResult": "null",
    "rawScript": "sleep 300",
    "submitOnYarnFlag": false,
    "emrClusterId": "",
    "yarnPriority": "",
    "dependence": "null",
    "yarnMemory": "",
    "localParams": [],
    "switchResult": "null",
    "resourceList": [],
    "yarnQueue": "",
    "yarnVCores": "",
    "associateManualTaskFlag": false
}'),
  taskType?: string(name='TaskType', description='任务类型', example='SHELL'),
  requestId?: string(name='requestId', description='Id of the request', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model DescribeManualTaskInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeManualTaskInstanceResponseBody(name='body'),
}

async function describeManualTaskInstance(request: DescribeManualTaskInstanceRequest): DescribeManualTaskInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeManualTaskInstance', 'GET', '/dolphinscheduler/v3/projects/{projectId}/manualTaskInstances/{manualTaskInstanceId}', 'json', false, 'json', request);
}

model DescribeProjectRequest {
  code: long(name='code', example='123', position='Path'),
  workspaceId: string(name='workspaceId', example='1234', position='Query'),
}

model DescribeProjectResponseBody = {
  code: long(name='code', example='12345'),
  description: string(name='description', example='this is a project description'),
  name: string(name='name', example='test_project_name'),
  requestId?: string(name='requestId', example='req_id'),
}

model DescribeProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeProjectResponseBody(name='body'),
}

async function describeProject(request: DescribeProjectRequest): DescribeProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeProject', 'GET', '/dolphinscheduler/v3/projects/{code}', 'json', false, 'json', request);
}

model DescribeTaskRequest {
  workflowId: string(name='workflowId', example='123***', position='Path'),
  projectId: string(name='projectId', example='123***', position='Path'),
  taskId: string(name='taskId', example='123***', position='Path'),
  workspaceId: string(name='workspaceId', example='123***', position='Query'),
}

model DescribeTaskResponseBody = {
  createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段', example='2024-03-27 00:00:00'),
  delayTime?: int32(name='DelayTime', description='延时执行时间', example='0'),
  description?: string(name='Description', description='描述', example='test'),
  failRetryInterval?: int32(name='FailRetryInterval', description='失败重试间隔', example='1'),
  failRetryTimes?: int32(name='FailRetryTimes', description='失败重试次数', example='0'),
  flag?: string(name='Flag', description='运行标志', example='YES'),
  projectId?: string(name='ProjectId', description='项目ID', example='123***'),
  resourceIds?: string(name='ResourceIds', description='资源ID列表', example='123'),
  taskId?: string(name='TaskId', description='代表资源一级ID的资源属性字段', example='123***'),
  taskName?: string(name='TaskName', description='代表资源名称的资源属性字段', example='test'),
  taskParams?: string(name='TaskParams', description='任务参数', example='{
    "yarnUser": "",
    "conditionResult": "null",
    "rawScript": "sleep 300",
    "submitOnYarnFlag": false,
    "emrClusterId": "",
    "yarnPriority": "",
    "dependence": "null",
    "yarnMemory": "",
    "localParams": [],
    "switchResult": "null",
    "resourceList": [],
    "yarnQueue": "",
    "yarnVCores": "",
    "associateManualTaskFlag": false
}'),
  taskPriority?: string(name='TaskPriority', description='任务优先级', example='MEDIUM'),
  taskType?: string(name='TaskType', description='任务类型', example='SHELL'),
  timeout?: int32(name='Timeout', description='超时时长', example='10'),
  timeoutFlag?: string(name='TimeoutFlag', description='超时告警标志', example='CLOSE'),
  timeoutNotifyStrategy?: string(name='TimeoutNotifyStrategy', description='超时告警标志', example='WARN'),
  updateTime?: string(name='UpdateTime', description='更新时间', example='2024-03-27 00:00:00'),
  version?: string(name='Version', description='版本', example='1'),
  requestId?: string(name='requestId', description='Id of the request', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model DescribeTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTaskResponseBody(name='body'),
}

async function describeTask(request: DescribeTaskRequest): DescribeTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeTask', 'GET', '/dolphinscheduler/v3/projects/{projectId}/workflows/{workflowId}/tasks/{taskId}', 'json', false, 'json', request);
}

model DescribeTaskInstanceRequest {
  projectId: string(name='projectId', example='123***', position='Path'),
  workflowInstanceId: string(name='workflowInstanceId', example='123abc***', position='Path'),
  taskInstanceId: string(name='taskInstanceId', example='123abc***', position='Path'),
  workspaceId: string(name='workspaceId', example='123***', position='Query'),
}

model DescribeTaskInstanceResponseBody = {
  dryRun?: string(name='DryRun', description='空跑标识', example='0'),
  emrClusterId?: string(name='EmrClusterId', description='EMR集群ID', example='c-b933c5aac7f7***'),
  endTime?: string(name='EndTime', description='结束时间', example='2024-03-27 00:00:00'),
  externalAppId?: string(name='ExternalAppId', description='外部应用ID', example='application_123_***'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID', example='wg-123abc***'),
  retryTimes?: int32(name='RetryTimes', description='重试次数', example='0'),
  startTime?: string(name='StartTime', description='开始时间', example='2024-03-27 00:00:00'),
  status?: string(name='Status', description='状态', example='SUCCESS'),
  submitTime?: string(name='SubmitTime', description='提交时间', example='2024-03-27 00:00:00'),
  taskId?: string(name='TaskId', description='任务ID', example='123***'),
  taskInstanceId?: string(name='TaskInstanceId', description='任务实例ID', example='123abc***'),
  taskInstanceName?: string(name='TaskInstanceName', description='任务实例名称', example='test'),
  taskParams?: string(name='TaskParams', description='任务参数', example='{
    "yarnUser": "",
    "conditionResult": "null",
    "rawScript": "sleep 300",
    "submitOnYarnFlag": false,
    "emrClusterId": "",
    "yarnPriority": "",
    "dependence": "null",
    "yarnMemory": "",
    "localParams": [],
    "switchResult": "null",
    "resourceList": [],
    "yarnQueue": "",
    "yarnVCores": "",
    "associateManualTaskFlag": false
}'),
  taskType?: string(name='TaskType', description='任务类型', example='SHELL'),
  taskVersion?: string(name='TaskVersion', description='任务版本', example='1'),
  workflowInstanceId?: string(name='WorkflowInstanceId', description='工作流实例ID', example='123abc***'),
  requestId?: string(name='requestId', description='Id of the request', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model DescribeTaskInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTaskInstanceResponseBody(name='body'),
}

async function describeTaskInstance(request: DescribeTaskInstanceRequest): DescribeTaskInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeTaskInstance', 'GET', '/dolphinscheduler/v3/projects/{projectId}/workflows/{workflowInstanceId}/taskInstances/{taskInstanceId}', 'json', false, 'json', request);
}

model DescribeWorkflowRequest {
  projectId: long(name='projectId', example='123', position='Path'),
  workflowId: long(name='workflowId', example='123131', position='Path'),
  workspaceId: long(name='workspaceId', example='12345', position='Query'),
}

model DescribeWorkflowResponseBody = {
  requestId?: string(name='requestId', example='611AD6E6-BFE3-5897-AA12-569F79DBAF9B'),
  taskRelations?: [ 
    {
      name?: string(name='name', example='relation_name'),
      postTaskId?: long(name='postTaskId', example='1234'),
      postTaskVersion?: int32(name='postTaskVersion', example='2'),
      preTaskId?: long(name='preTaskId', example='123'),
      preTaskVersion?: int32(name='preTaskVersion', example='1'),
    }
  ](name='taskRelations'),
  tasks?: [ 
    {
      description?: string(name='description', example='task description'),
      name?: string(name='name', example='task_name'),
      taskId?: long(name='taskId', example='123123'),
      version?: int32(name='version', example='1'),
    }
  ](name='tasks'),
}

model DescribeWorkflowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeWorkflowResponseBody(name='body'),
}

async function describeWorkflow(request: DescribeWorkflowRequest): DescribeWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeWorkflow', 'GET', '/dolphinscheduler/v3/projects/{projectId}/processDefinitions/{workflowId}', 'json', false, 'json', request);
}

model DescribeWorkflowInstanceRequest {
  projectId: long(name='projectId', example='123', position='Path'),
  workflowInstanceId: int32(name='workflowInstanceId', example='234', position='Path'),
  workspaceId: long(name='workspaceId', example='12345', position='Query'),
}

model DescribeWorkflowInstanceResponseBody = {
  emrClusterId?: string(name='emrClusterId', example='c-047fa6bbe732e12d'),
  endDate?: string(name='endDate', example='2023-06-02 10:30:00'),
  isComplementData?: boolean(name='isComplementData', example='false'),
  name?: string(name='name', example='workflow_instance_name'),
  requestId?: string(name='requestId', example='B897B94B-6754-5D09-AB8C-2E8186CCADC0'),
  resourceGroupId?: string(name='resourceGroupId', example='wg-acfmv4opbsduvfy'),
  runTimes?: int32(name='runTimes', example='2'),
  scheduleTime?: string(name='scheduleTime', example='2024-01-01 10:59:00'),
  startDate?: string(name='startDate', example='2024-02-04 00:00:00'),
  state?: string(name='state', example='SUCCESS'),
  timeout?: int32(name='timeout', example='10'),
  workflowId?: long(name='workflowId', example='1231311'),
  workflowVersion?: int32(name='workflowVersion', example='2'),
}

model DescribeWorkflowInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeWorkflowInstanceResponseBody(name='body'),
}

async function describeWorkflowInstance(request: DescribeWorkflowInstanceRequest): DescribeWorkflowInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeWorkflowInstance', 'GET', '/dolphinscheduler/v3/projects/{projectId}/processInstances/{workflowInstanceId}', 'json', false, 'json', request);
}

model ListManualTaskInstancesRequest {
  projectId: string(name='projectId', example='123***', position='Path'),
  endTime?: string(name='endTime', example='2024-03-27 00:00:00', position='Query'),
  executionStatus?: string(name='executionStatus', example='SUCCESS', position='Query'),
  maxResults?: int32(name='maxResults', example='20', position='Query'),
  nextToken?: string(name='nextToken', example='123abc***', position='Query'),
  searchVal?: string(name='searchVal', example='test', position='Query'),
  startTime?: string(name='startTime', example='2024-03-27 00:00:00', position='Query'),
  workspaceId: string(name='workspaceId', example='123***', position='Query'),
}

model ListManualTaskInstancesResponseBody = {
  data?: [ 
    {
      emrClusterId?: string(name='EmrClusterId', description='EMR集群ID', example='c-b933c5aac7f7***'),
      endTime?: string(name='EndTime', description='结束时间', example='2024-03-27 00:00:00'),
      externalAppId?: string(name='ExternalAppId', description='外部应用ID', example='application_123_***'),
      manualTaskInstanceId?: string(name='ManualTaskInstanceId', description='代表资源一级ID的资源属性字段', example='123abc***'),
      manualTaskInstanceName?: string(name='ManualTaskInstanceName', description='代表资源名称的资源属性字段', example='test'),
      resourceGroupId?: string(name='ResourceGroupId', description='资源组ID', example='wg-123abc***'),
      startTime?: string(name='StartTime', description='开始时间', example='2024-03-27 00:00:00'),
      status?: string(name='Status', description='状态', example='SUCCESS'),
      submitTime?: string(name='SubmitTime', description='提交时间', example='2024-03-27 00:00:00'),
      taskParams?: string(name='TaskParams', description='任务参数', example='{
    "yarnUser": "",
    "conditionResult": "null",
    "rawScript": "sleep 300",
    "submitOnYarnFlag": false,
    "emrClusterId": "",
    "yarnPriority": "",
    "dependence": "null",
    "yarnMemory": "",
    "localParams": [],
    "switchResult": "null",
    "resourceList": [],
    "yarnQueue": "",
    "yarnVCores": "",
    "associateManualTaskFlag": false
}'),
      taskType?: string(name='TaskType', description='任务类型', example='SHELL'),
    }
  ](name='data'),
  nextToken?: string(name='nextToken', example='123abc***'),
  requestId?: string(name='requestId', description='Id of the request', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalSize?: int32(name='totalSize', example='10'),
}

model ListManualTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListManualTaskInstancesResponseBody(name='body'),
}

async function listManualTaskInstances(request: ListManualTaskInstancesRequest): ListManualTaskInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListManualTaskInstances', 'GET', '/dolphinscheduler/v3/projects/{projectId}/manualTaskInstances', 'json', false, 'json', request);
}

model ListManualTasksRequest {
  projectId: string(name='projectId', example='123***', position='Path'),
  maxResults?: int32(name='maxResults', example='20', position='Query'),
  nextToken?: string(name='nextToken', example='123abc***', position='Query'),
  searchVal?: string(name='searchVal', example='test', position='Query'),
  taskType?: string(name='taskType', example='SHELL', position='Query'),
  workspaceId: string(name='workspaceId', example='123***', position='Query'),
}

model ListManualTasksResponseBody = {
  data?: [ 
    {
      createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段', example='2024-03-27 00:00:00'),
      description?: string(name='Description', description='描述', example='test'),
      manualTaskId?: string(name='ManualTaskId', description='代表资源一级ID的资源属性字段', example='123***'),
      manualTaskName?: string(name='ManualTaskName', description='代表资源名称的资源属性字段', example='test'),
      parentDirectoryId?: string(name='ParentDirectoryId', description='目录ID', example='123***'),
      projectId?: string(name='ProjectId', description='项目ID', example='123***'),
      resourceIds?: string(name='ResourceIds', description='资源id列表', example='123'),
      taskParams?: string(name='TaskParams', description='任务参数', example='{
    "yarnUser": "",
    "conditionResult": "null",
    "rawScript": "sleep 300",
    "submitOnYarnFlag": false,
    "emrClusterId": "",
    "yarnPriority": "",
    "dependence": "null",
    "yarnMemory": "",
    "localParams": [],
    "switchResult": "null",
    "resourceList": [],
    "yarnQueue": "",
    "yarnVCores": "",
    "associateManualTaskFlag": false
}'),
      taskType?: string(name='TaskType', description='任务类型', example='SHELL'),
      updateTime?: string(name='UpdateTime', description='更新时间', example='2024-03-27 00:00:00'),
    }
  ](name='data'),
  nextToken?: string(name='nextToken', example='123abc***'),
  requestId?: string(name='requestId', description='Id of the request', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalSize?: int32(name='totalSize', example='10'),
}

model ListManualTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListManualTasksResponseBody(name='body'),
}

async function listManualTasks(request: ListManualTasksRequest): ListManualTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListManualTasks', 'GET', '/dolphinscheduler/v3/projects/{projectId}/manualTasks', 'json', false, 'json', request);
}

model ListProjectsRequest {
  maxResults?: int32(name='maxResults', example='100', position='Query'),
  nextToken?: string(name='nextToken', example='8bj81uI8nls=', position='Query'),
  searchVal?: string(name='searchVal', example='test', position='Query'),
  workspaceId: long(name='workspaceId', example='12345', position='Query'),
}

model ListProjectsResponseBody = {
  data?: [ 
    {
      code?: long(name='code'),
      description?: string(name='description'),
      name?: string(name='name', example='project_name'),
      projectId?: long(name='projectId', example='318720'),
    }
  ](name='data'),
  nextToken?: string(name='nextToken', example='8bj81uI8nls='),
  requestId?: string(name='requestId', example='14079B51-C226-5391-BFAF-6E44AC492C1F'),
}

model ListProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectsResponseBody(name='body'),
}

async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjects', 'GET', '/dolphinscheduler/v3/projects', 'json', false, 'json', request);
}

model ListTaskInstancesRequest {
  projectId: string(name='projectId', example='123***', position='Path'),
  endTime?: string(name='endTime', example='2024-03-27 00:00:00', position='Query'),
  executionStatus?: string(name='executionStatus', example='SUCCESS', position='Query'),
  maxResults?: int32(name='maxResults', example='25', position='Query'),
  nextToken?: string(name='nextToken', example='123abc***', position='Query'),
  searchVal?: string(name='searchVal', example='test', position='Query'),
  startTime?: string(name='startTime', example='2024-03-27 00:00:00', position='Query'),
  workflowInstanceId?: string(name='workflowInstanceId', example='123abc***', position='Query'),
  workspaceId: string(name='workspaceId', example='100', position='Query'),
}

model ListTaskInstancesResponseBody = {
  data?: [ 
    {
      dryRun?: string(name='DryRun', description='空跑标识', example='0'),
      emrClusterId?: string(name='EmrClusterId', description='EMR集群ID', example='c-123abc***'),
      endTime?: string(name='EndTime', description='结束时间', example='2024-03-27 00:00:00'),
      externalAppId?: string(name='ExternalAppId', description='外部应用ID', example='application_123_***'),
      resourceGroupId?: string(name='ResourceGroupId', description='资源组ID', example='wg-123abc***'),
      retryTimes?: int32(name='RetryTimes', description='重试次数', example='0'),
      startTime?: string(name='StartTime', description='开始时间', example='2024-03-27 00:00:00'),
      status?: string(name='Status', description='状态', example='SUCCESS'),
      submitTime?: string(name='SubmitTime', description='提交时间', example='2024-03-27 00:00:00'),
      taskId?: string(name='TaskId', description='任务ID', example='123***'),
      taskInstanceId?: string(name='TaskInstanceId', description='任务实例ID', example='123abc***'),
      taskInstanceName?: string(name='TaskInstanceName', description='任务实例名称', example='test'),
      taskParams?: string(name='TaskParams', description='任务参数', example='{
    "yarnUser": "",
    "conditionResult": "null",
    "rawScript": "sleep 300",
    "submitOnYarnFlag": false,
    "emrClusterId": "",
    "yarnPriority": "",
    "dependence": "null",
    "yarnMemory": "",
    "localParams": [],
    "switchResult": "null",
    "resourceList": [],
    "yarnQueue": "",
    "yarnVCores": "",
    "associateManualTaskFlag": false
}'),
      taskType?: string(name='TaskType', description='任务类型', example='SHELL'),
      taskVersion?: string(name='TaskVersion', description='任务版本', example='1'),
      workflowInstanceId?: string(name='WorkflowInstanceId', description='工作流实例ID', example='123abc***'),
    }
  ](name='data'),
  nextToken?: string(name='nextToken', example='123abc***'),
  requestId?: string(name='requestId', description='Id of the request', example='9E3A7161-EB7B-172B-8D18-FFB06BA38***'),
  totalSize?: int32(name='totalSize', example='100'),
}

model ListTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskInstancesResponseBody(name='body'),
}

async function listTaskInstances(request: ListTaskInstancesRequest): ListTaskInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTaskInstances', 'GET', '/dolphinscheduler/v3/projects/{projectId}/taskInstances', 'json', false, 'json', request);
}

model ListTasksRequest {
  projectId: string(name='projectId', example='123***', position='Path'),
  maxResults?: string(name='maxResults', example='20', position='Query'),
  nextToken?: string(name='nextToken', example='123abc***', position='Query'),
  searchVal?: string(name='searchVal', example='test', position='Query'),
  taskType?: string(name='taskType', example='SHELL', position='Query'),
  workflowId?: string(name='workflowId', example='123***', position='Query'),
  workspaceId: string(name='workspaceId', example='123***', position='Query'),
}

model ListTasksResponseBody = {
  data?: [ 
    {
      createTime?: string(name='CreateTime', description='代表创建时间的资源属性字段', example='2024-03-27 00:00:00'),
      delayTime?: int32(name='DelayTime', description='延时执行时间', example='0'),
      description?: string(name='Description', description='描述', example='test'),
      failRetryInterval?: int32(name='FailRetryInterval', description='失败重试间隔', example='1'),
      failRetryTimes?: int32(name='FailRetryTimes', description='失败重试次数', example='0'),
      flag?: string(name='Flag', description='运行标志', example='YES'),
      projectId?: string(name='ProjectId', description='项目ID', example='123***'),
      resourceIds?: string(name='ResourceIds', description='资源ID列表', example='123'),
      taskId?: string(name='TaskId', description='代表资源一级ID的资源属性字段', example='123***'),
      taskName?: string(name='TaskName', description='代表资源名称的资源属性字段', example='test'),
      taskParams?: string(name='TaskParams', description='任务参数', example='{
    "yarnUser": "",
    "conditionResult": "null",
    "rawScript": "sleep 300",
    "submitOnYarnFlag": false,
    "emrClusterId": "",
    "yarnPriority": "",
    "dependence": "null",
    "yarnMemory": "",
    "localParams": [],
    "switchResult": "null",
    "resourceList": [],
    "yarnQueue": "",
    "yarnVCores": "",
    "associateManualTaskFlag": false
}'),
      taskPriority?: string(name='TaskPriority', description='任务优先级', example='MEDIUM'),
      taskType?: string(name='TaskType', description='任务类型', example='SHELL'),
      timeout?: int32(name='Timeout', description='超时时长', example='0'),
      timeoutFlag?: string(name='TimeoutFlag', description='超时告警标志', example='CLOSE'),
      timeoutNotifyStrategy?: string(name='TimeoutNotifyStrategy', description='超时告警标志', example='WARN'),
      updateTime?: string(name='UpdateTime', description='更新时间', example='2024-03-27 00:00:00'),
      version?: string(name='Version', description='版本', example='1'),
    }
  ](name='data'),
  nextToken?: string(name='nextToken', example='123abc***'),
  requestId?: string(name='requestId', description='Id of the request', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalSize?: int32(name='totalSize', example='10'),
}

model ListTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTasksResponseBody(name='body'),
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTasks', 'GET', '/dolphinscheduler/v3/projects/{projectId}/tasks', 'json', false, 'json', request);
}

model ListWorkflowInstancesRequest {
  projectId: long(name='projectId', example='318546', position='Path'),
  endDate?: string(name='endDate', example='2023-06-27 00:00:00', position='Query'),
  maxResults?: int32(name='maxResults', example='20', position='Query'),
  nextToken?: string(name='nextToken', example='8bj81uI8nls=', position='Query'),
  startDate?: string(name='startDate', example='2024-02-04 00:00:00', position='Query'),
  workflowId?: long(name='workflowId', example='1231311', position='Query'),
  workspaceId: long(name='workspaceId', example='12345', position='Query'),
}

model ListWorkflowInstancesResponseBody = {
  data?: [ 
    {
      endDate?: string(name='endDate', example='2023-12-24 01:00:00'),
      name?: string(name='name', example='workflow_instance_name'),
      runTimes?: string(name='runTimes', example='3'),
      scheduleTime?: string(name='scheduleTime', example='2024-01-01 10:30:30'),
      startDate?: string(name='startDate', example='2023-05-19 00:00:00'),
      state?: string(name='state', example='RUNNING_EXECUTION'),
      workflowId?: long(name='workflowId', example='123'),
      workflowInstanceId?: long(name='workflowInstanceId', example='123123'),
      workflowVersion?: string(name='workflowVersion', example='1234'),
    }
  ](name='data'),
  nextToken?: string(name='nextToken', example='8bj81uI8nls='),
  requestId?: string(name='requestId', example='1DF8BA1E-F26F-50C9-9A27-8261ECB85259'),
  totalSize?: int32(name='totalSize', example='4292'),
}

model ListWorkflowInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkflowInstancesResponseBody(name='body'),
}

async function listWorkflowInstances(request: ListWorkflowInstancesRequest): ListWorkflowInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkflowInstances', 'GET', '/dolphinscheduler/v3/projects/{projectId}/processInstances', 'json', false, 'json', request);
}

model ListWorkflowsRequest {
  projectId: long(name='projectId', example='309277', position='Path'),
  maxResults?: int32(name='maxResults', example='20', position='Query'),
  nextToken?: string(name='nextToken', example='8bj81uI8nls=', position='Query'),
  searchVal?: string(name='searchVal', example='test', position='Query'),
  workspaceId: long(name='workspaceId', example='12345', position='Query'),
}

model ListWorkflowsResponseBody = {
  data?: [ 
    {
      createTime?: string(name='createTime', example='2023-06-07T02:35:13Z'),
      description?: string(name='description', example='workflow description'),
      name?: string(name='name', example='workflow_name'),
      releaseState?: string(name='releaseState', example='ONLINE'),
      updateTime?: string(name='updateTime', example='2023-10-30T14:22:03Z'),
      workflowId?: long(name='workflowId', example='1231311'),
    }
  ](name='data'),
  nextToken?: string(name='nextToken', example='8bj81uI8nls='),
  requestId?: string(name='requestId', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalSize?: int32(name='totalSize', example='10'),
}

model ListWorkflowsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkflowsResponseBody(name='body'),
}

async function listWorkflows(request: ListWorkflowsRequest): ListWorkflowsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkflows', 'GET', '/dolphinscheduler/v3/projects/{projectId}/processDefinitions', 'json', false, 'json', request);
}

