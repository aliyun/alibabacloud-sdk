/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'devops-rdc';
  @version = '2020-03-03';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddCodeupSourceToPipelineRequest {
  codeBranch?: string(name='CodeBranch', description='代码库分支', position='Query'),
  codePath: string(name='CodePath', description='Codeup的代码库路径，比如 group1/repo1', position='Query'),
  orgId: string(name='OrgId', position='Query'),
  pipelineId: long(name='PipelineId', description='流水线ID', position='Query'),
}

model AddCodeupSourceToPipelineResponseBody = {
  pipelineId?: long(name='PipelineId', description='流水线ID'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddCodeupSourceToPipelineResponse = {
  headers: map[string]string(name='headers'),
  body: AddCodeupSourceToPipelineResponseBody(name='body'),
}

async function addCodeupSourceToPipeline(request: AddCodeupSourceToPipelineRequest): AddCodeupSourceToPipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCodeupSourceToPipeline', 'POST', '/', 'json', false, 'json', request);
}

model BatchInsertMembersRequest {
  members?: string(name='Members', position='Body'),
  orgId?: string(name='OrgId', position='Body'),
  realPk?: string(name='RealPk', position='Body'),
}

model BatchInsertMembersResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: boolean(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchInsertMembersResponse = {
  headers: map[string]string(name='headers'),
  body: BatchInsertMembersResponseBody(name='body'),
}

async function batchInsertMembers(request: BatchInsertMembersRequest): BatchInsertMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchInsertMembers', 'POST', '/', 'json', true, 'form', request);
}

model CancelPipelineRequest {
  flowInstanceId: long(name='FlowInstanceId', position='Body'),
  orgId: string(name='OrgId', position='Body'),
  pipelineId: long(name='PipelineId', position='Body'),
  userPk?: string(name='UserPk', position='Body'),
}

model CancelPipelineResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: boolean(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelPipelineResponse = {
  headers: map[string]string(name='headers'),
  body: CancelPipelineResponseBody(name='body'),
}

async function cancelPipeline(request: CancelPipelineRequest): CancelPipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelPipeline', 'POST', '/', 'json', true, 'form', request);
}

model CheckAliyunAccountExistsRequest {
  userPk: string(name='UserPk', position='Body'),
}

model CheckAliyunAccountExistsResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: boolean(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model CheckAliyunAccountExistsResponse = {
  headers: map[string]string(name='headers'),
  body: CheckAliyunAccountExistsResponseBody(name='body'),
}

async function checkAliyunAccountExists(request: CheckAliyunAccountExistsRequest): CheckAliyunAccountExistsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckAliyunAccountExists', 'POST', '/', 'json', true, 'form', request);
}

model CreateCommonGroupRequest {
  description?: string(name='Description', position='Body'),
  name: string(name='Name', position='Body'),
  orgId: string(name='OrgId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  smartGroupId: string(name='SmartGroupId', position='Body'),
}

model CreateCommonGroupResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: {
    id?: string(name='Id'),
  }(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model CreateCommonGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCommonGroupResponseBody(name='body'),
}

async function createCommonGroup(request: CreateCommonGroupRequest): CreateCommonGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCommonGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateCredentialRequest {
  name: string(name='Name', position='Body'),
  orgId: string(name='OrgId', position='Body'),
  password: string(name='Password', position='Body'),
  type: string(name='Type', position='Body'),
  userName: string(name='UserName', position='Body'),
  userPk?: string(name='UserPk', position='Body'),
}

model CreateCredentialResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: long(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateCredentialResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCredentialResponseBody(name='body'),
}

async function createCredential(request: CreateCredentialRequest): CreateCredentialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCredential', 'POST', '/', 'json', true, 'form', request);
}

model CreateDevopsOrganizationRequest {
  desiredMemberCount?: int32(name='DesiredMemberCount', position='Body'),
  orgName: string(name='OrgName', position='Body'),
  realPk?: string(name='RealPk', position='Body'),
  source: string(name='Source', position='Body'),
}

model CreateDevopsOrganizationResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: string(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDevopsOrganizationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDevopsOrganizationResponseBody(name='body'),
}

async function createDevopsOrganization(request: CreateDevopsOrganizationRequest): CreateDevopsOrganizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDevopsOrganization', 'POST', '/', 'json', true, 'form', request);
}

model CreateDevopsProjectRequest {
  description: string(name='Description', position='Body'),
  name: string(name='Name', position='Body'),
  orgId: string(name='OrgId', position='Body'),
}

model CreateDevopsProjectResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: string(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDevopsProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDevopsProjectResponseBody(name='body'),
}

async function createDevopsProject(request: CreateDevopsProjectRequest): CreateDevopsProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDevopsProject', 'POST', '/', 'json', true, 'form', request);
}

model CreateDevopsProjectSprintRequest {
  description?: string(name='Description', position='Body'),
  dueDate?: string(name='DueDate', position='Body'),
  executorId: string(name='ExecutorId', position='Body'),
  name: string(name='Name', position='Body'),
  orgId: string(name='OrgId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  startDate?: string(name='StartDate', position='Body'),
}

model CreateDevopsProjectSprintResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: {
    accomplished?: string(name='Accomplished'),
    created?: string(name='Created'),
    creatorId?: string(name='CreatorId'),
    description?: string(name='Description'),
    dueDate?: string(name='DueDate'),
    executor?: string(name='Executor'),
    id?: string(name='Id'),
    isDeleted?: boolean(name='IsDeleted'),
    name?: string(name='Name'),
    planToDo?: {
      storyPoints?: int32(name='StoryPoints'),
      tasks?: int32(name='Tasks'),
      workTimes?: int32(name='WorkTimes'),
    }(name='PlanToDo'),
    projectId?: string(name='ProjectId'),
    startDate?: string(name='StartDate'),
    status?: string(name='Status'),
    updated?: string(name='Updated'),
  }(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model CreateDevopsProjectSprintResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDevopsProjectSprintResponseBody(name='body'),
}

async function createDevopsProjectSprint(request: CreateDevopsProjectSprintRequest): CreateDevopsProjectSprintResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDevopsProjectSprint', 'POST', '/', 'json', true, 'form', request);
}

model CreateDevopsProjectTaskRequest {
  content: string(name='Content', position='Body'),
  dueDate?: string(name='DueDate', position='Body'),
  executorId: string(name='ExecutorId', position='Body'),
  note?: string(name='Note', position='Body'),
  orgId: string(name='OrgId', position='Body'),
  parentTaskId?: string(name='ParentTaskId', position='Body'),
  priority?: int32(name='Priority', minimum=0, maximum=999999999999999, position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  scenarioFieldConfigId: string(name='ScenarioFieldConfigId', position='Body'),
  sprintId?: string(name='SprintId', position='Body'),
  startDate?: string(name='StartDate', position='Body'),
  taskFlowStatusId?: string(name='TaskFlowStatusId', position='Body'),
  taskListId: string(name='TaskListId', position='Body'),
  visible?: string(name='Visible', position='Body'),
}

model CreateDevopsProjectTaskResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: {
    content?: string(name='Content'),
    created?: string(name='Created'),
    creatorId?: string(name='CreatorId'),
    dueDate?: string(name='DueDate'),
    executorId?: string(name='ExecutorId'),
    id?: string(name='Id'),
    isDone?: boolean(name='IsDone'),
    note?: string(name='Note'),
    organizationId?: string(name='OrganizationId'),
    pos?: int32(name='Pos'),
    priority?: int32(name='Priority'),
    projectId?: string(name='ProjectId'),
    rating?: int32(name='Rating'),
    scenarioFieldConfigId?: string(name='ScenarioFieldConfigId'),
    source?: string(name='Source'),
    sprintId?: string(name='SprintId'),
    startDate?: string(name='StartDate'),
    storyPoint?: string(name='StoryPoint'),
    taskType?: string(name='TaskType'),
    taskflowstatusId?: string(name='TaskflowstatusId'),
    tasklistId?: string(name='TasklistId'),
    uniqueId?: int32(name='UniqueId'),
    updated?: string(name='Updated'),
    visible?: string(name='Visible'),
  }(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model CreateDevopsProjectTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDevopsProjectTaskResponseBody(name='body'),
}

async function createDevopsProjectTask(request: CreateDevopsProjectTaskRequest): CreateDevopsProjectTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDevopsProjectTask', 'POST', '/', 'json', true, 'form', request);
}

model CreatePipelineRequest {
  orgId: string(name='OrgId', position='Body'),
  pipeline: string(name='Pipeline', position='Body'),
  userPk?: string(name='UserPk', position='Body'),
}

model CreatePipelineResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: long(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreatePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePipelineResponseBody(name='body'),
}

async function createPipeline(request: CreatePipelineRequest): CreatePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePipeline', 'POST', '/', 'json', true, 'form', request);
}

model CreatePipelineFromTemplateRequest {
  orgId: string(name='OrgId', position='Query'),
  pipelineName: string(name='PipelineName', description='流水线名称', position='Query'),
  pipelineTemplateId: long(name='PipelineTemplateId', description='流水线模板的ID，可通过GetPipelineTemplates获取到该信息', position='Query'),
}

model CreatePipelineFromTemplateResponseBody = {
  pipelineId?: long(name='PipelineId', description='流水线ID'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreatePipelineFromTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePipelineFromTemplateResponseBody(name='body'),
}

async function createPipelineFromTemplate(request: CreatePipelineFromTemplateRequest): CreatePipelineFromTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePipelineFromTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceConnectionRequest {
  orgId: string(name='OrgId', position='Body'),
  serviceConnectionType: string(name='ServiceConnectionType', position='Body'),
  userPk?: string(name='UserPk', position='Body'),
}

model CreateServiceConnectionResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: long(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateServiceConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceConnectionResponseBody(name='body'),
}

async function createServiceConnection(request: CreateServiceConnectionRequest): CreateServiceConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceConnection', 'POST', '/', 'json', true, 'form', request);
}

model DeleteCommonGroupRequest {
  commonGroupId: string(name='CommonGroupId', position='Body'),
  orgId: string(name='OrgId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model DeleteCommonGroupResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: {
    id?: string(name='Id'),
  }(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model DeleteCommonGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCommonGroupResponseBody(name='body'),
}

async function deleteCommonGroup(request: DeleteCommonGroupRequest): DeleteCommonGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCommonGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDevopsOrganizationRequest {
  orgId: string(name='OrgId', position='Body'),
}

model DeleteDevopsOrganizationResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: string(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDevopsOrganizationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDevopsOrganizationResponseBody(name='body'),
}

async function deleteDevopsOrganization(request: DeleteDevopsOrganizationRequest): DeleteDevopsOrganizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDevopsOrganization', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDevopsOrganizationMembersRequest {
  orgId?: string(name='OrgId', position='Body'),
  realPk?: string(name='RealPk', position='Body'),
  userId?: string(name='UserId', position='Body'),
}

model DeleteDevopsOrganizationMembersResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: boolean(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDevopsOrganizationMembersResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDevopsOrganizationMembersResponseBody(name='body'),
}

async function deleteDevopsOrganizationMembers(request: DeleteDevopsOrganizationMembersRequest): DeleteDevopsOrganizationMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDevopsOrganizationMembers', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDevopsProjectRequest {
  orgId: string(name='OrgId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model DeleteDevopsProjectResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: string(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDevopsProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDevopsProjectResponseBody(name='body'),
}

async function deleteDevopsProject(request: DeleteDevopsProjectRequest): DeleteDevopsProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDevopsProject', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDevopsProjectMembersRequest {
  orgId: string(name='OrgId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  userIds: string(name='UserIds', position='Body'),
}

model DeleteDevopsProjectMembersResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: boolean(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model DeleteDevopsProjectMembersResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDevopsProjectMembersResponseBody(name='body'),
}

async function deleteDevopsProjectMembers(request: DeleteDevopsProjectMembersRequest): DeleteDevopsProjectMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDevopsProjectMembers', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDevopsProjectSprintRequest {
  orgId: string(name='OrgId', position='Body'),
  sprintId: string(name='SprintId', position='Body'),
}

model DeleteDevopsProjectSprintResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: boolean(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model DeleteDevopsProjectSprintResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDevopsProjectSprintResponseBody(name='body'),
}

async function deleteDevopsProjectSprint(request: DeleteDevopsProjectSprintRequest): DeleteDevopsProjectSprintResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDevopsProjectSprint', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDevopsProjectTaskRequest {
  orgId: string(name='OrgId', position='Body'),
  taskId: string(name='TaskId', position='Body'),
}

model DeleteDevopsProjectTaskResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: boolean(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model DeleteDevopsProjectTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDevopsProjectTaskResponseBody(name='body'),
}

async function deleteDevopsProjectTask(request: DeleteDevopsProjectTaskRequest): DeleteDevopsProjectTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDevopsProjectTask', 'POST', '/', 'json', true, 'form', request);
}

model DeletePipelineMemberRequest {
  orgId: string(name='OrgId', position='Query'),
  pipelineId: long(name='PipelineId', minimum=1, maximum=999999999999999, position='Query'),
  userId: string(name='UserId', position='Body'),
  userPk?: string(name='UserPk', position='Body'),
}

model DeletePipelineMemberResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: boolean(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeletePipelineMemberResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePipelineMemberResponseBody(name='body'),
}

async function deletePipelineMember(request: DeletePipelineMemberRequest): DeletePipelineMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePipelineMember', 'POST', '/', 'json', true, 'form', request);
}

model ExecutePipelineRequest {
  orgId: string(name='OrgId', position='Body'),
  parameters?: string(name='Parameters', position='Body'),
  pipelineId: long(name='PipelineId', position='Body'),
  userPk?: string(name='UserPk', position='Body'),
}

model ExecutePipelineResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: long(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExecutePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: ExecutePipelineResponseBody(name='body'),
}

async function executePipeline(request: ExecutePipelineRequest): ExecutePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecutePipeline', 'POST', '/', 'json', true, 'form', request);
}

model GetDevopsOrganizationMembersRequest {
  orgId?: string(name='OrgId', position='Body'),
}

model GetDevopsOrganizationMembersResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: [ 
    {
      avatarUrl?: string(name='AvatarUrl'),
      email?: string(name='Email'),
      memberId?: string(name='MemberId'),
      name?: string(name='Name'),
      phone?: string(name='Phone'),
      role?: int32(name='Role'),
      userId?: string(name='UserId'),
    }
  ](name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model GetDevopsOrganizationMembersResponse = {
  headers: map[string]string(name='headers'),
  body: GetDevopsOrganizationMembersResponseBody(name='body'),
}

async function getDevopsOrganizationMembers(request: GetDevopsOrganizationMembersRequest): GetDevopsOrganizationMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDevopsOrganizationMembers', 'POST', '/', 'json', true, 'form', request);
}

model GetDevopsProjectInfoRequest {
  orgId: string(name='OrgId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model GetDevopsProjectInfoResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: {
    category?: string(name='Category'),
    created?: string(name='Created'),
    creatorId?: string(name='CreatorId'),
    customfields?: string(name='Customfields'),
    defaultCollectionId?: string(name='DefaultCollectionId'),
    defaultRoleId?: string(name='DefaultRoleId'),
    description?: string(name='Description'),
    endDate?: string(name='EndDate'),
    id?: string(name='Id'),
    isArchived?: boolean(name='IsArchived'),
    isDeleted?: boolean(name='IsDeleted'),
    isSuspended?: boolean(name='IsSuspended'),
    isTemplate?: boolean(name='IsTemplate'),
    logo?: string(name='Logo'),
    modifierId?: string(name='ModifierId'),
    name?: string(name='Name'),
    nextTaskUniqueId?: int32(name='NextTaskUniqueId'),
    normalType?: string(name='NormalType'),
    organizationId?: string(name='OrganizationId'),
    pinyin?: string(name='Pinyin'),
    py?: string(name='Py'),
    rootCollectionId?: string(name='RootCollectionId'),
    sortMethod?: string(name='SortMethod'),
    sourceId?: string(name='SourceId'),
    sourceType?: string(name='SourceType'),
    startDate?: string(name='StartDate'),
    uniqueIdPrefix?: string(name='UniqueIdPrefix'),
    updated?: string(name='Updated'),
    visibility?: string(name='Visibility'),
  }(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model GetDevopsProjectInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetDevopsProjectInfoResponseBody(name='body'),
}

async function getDevopsProjectInfo(request: GetDevopsProjectInfoRequest): GetDevopsProjectInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDevopsProjectInfo', 'POST', '/', 'json', true, 'form', request);
}

model GetDevopsProjectMembersRequest {
  orgId: string(name='OrgId', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  pageToken?: string(name='PageToken', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model GetDevopsProjectMembersResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  nextPageToken?: string(name='NextPageToken'),
  object?: [ 
    {
      avatarUrl?: string(name='AvatarUrl'),
      email?: string(name='Email'),
      memberId?: string(name='MemberId'),
      name?: string(name='Name'),
      phone?: string(name='Phone'),
      role?: int32(name='Role'),
      userId?: string(name='UserId'),
    }
  ](name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
  total?: int32(name='Total'),
}

model GetDevopsProjectMembersResponse = {
  headers: map[string]string(name='headers'),
  body: GetDevopsProjectMembersResponseBody(name='body'),
}

async function getDevopsProjectMembers(request: GetDevopsProjectMembersRequest): GetDevopsProjectMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDevopsProjectMembers', 'POST', '/', 'json', true, 'form', request);
}

model GetDevopsProjectSprintInfoRequest {
  orgId: string(name='OrgId', position='Body'),
  sprintId: string(name='SprintId', position='Body'),
}

model GetDevopsProjectSprintInfoResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: {
    accomplished?: string(name='Accomplished'),
    created?: string(name='Created'),
    creatorId?: string(name='CreatorId'),
    dueDate?: string(name='DueDate'),
    id?: string(name='Id'),
    isDeleted?: boolean(name='IsDeleted'),
    name?: string(name='Name'),
    planToDo?: {
      storyPoints?: int32(name='StoryPoints'),
      tasks?: int32(name='Tasks'),
      workTimes?: int32(name='WorkTimes'),
    }(name='PlanToDo'),
    projectId?: string(name='ProjectId'),
    startDate?: string(name='StartDate'),
    status?: string(name='Status'),
    updated?: string(name='Updated'),
  }(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model GetDevopsProjectSprintInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetDevopsProjectSprintInfoResponseBody(name='body'),
}

async function getDevopsProjectSprintInfo(request: GetDevopsProjectSprintInfoRequest): GetDevopsProjectSprintInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDevopsProjectSprintInfo', 'POST', '/', 'json', true, 'form', request);
}

model GetDevopsProjectTaskInfoRequest {
  orgId: string(name='OrgId', position='Body'),
  taskId: string(name='TaskId', position='Body'),
}

model GetDevopsProjectTaskInfoResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: {
    content?: string(name='Content'),
    created?: string(name='Created'),
    creatorId?: string(name='CreatorId'),
    dueDate?: string(name='DueDate'),
    executorId?: string(name='ExecutorId'),
    id?: string(name='Id'),
    involveMembers?: [ string ](name='InvolveMembers'),
    isDeleted?: boolean(name='IsDeleted'),
    isDone?: boolean(name='IsDone'),
    isTopInProject?: boolean(name='IsTopInProject'),
    note?: string(name='Note'),
    organizationId?: string(name='OrganizationId'),
    priority?: string(name='Priority'),
    projectId?: string(name='ProjectId'),
    sprintId?: string(name='SprintId'),
    startDate?: string(name='StartDate'),
    storyPoint?: string(name='StoryPoint'),
    taskType?: string(name='TaskType'),
    taskflowstatusId?: string(name='TaskflowstatusId'),
    tasklistId?: string(name='TasklistId'),
    updated?: string(name='Updated'),
    visible?: string(name='Visible'),
  }(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model GetDevopsProjectTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetDevopsProjectTaskInfoResponseBody(name='body'),
}

async function getDevopsProjectTaskInfo(request: GetDevopsProjectTaskInfoRequest): GetDevopsProjectTaskInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDevopsProjectTaskInfo', 'POST', '/', 'json', true, 'form', request);
}

model GetLastWorkspaceRequest {
  orgId?: string(name='OrgId', position='Body'),
  realPk?: string(name='RealPk', position='Body'),
}

model GetLastWorkspaceResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: string(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetLastWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: GetLastWorkspaceResponseBody(name='body'),
}

async function getLastWorkspace(request: GetLastWorkspaceRequest): GetLastWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLastWorkspace', 'POST', '/', 'json', true, 'form', request);
}

model GetPipelineInstHistoryRequest {
  endTime?: string(name='EndTime', position='Body'),
  orgId: string(name='OrgId', minLength=1, position='Body'),
  pageSize: long(name='PageSize', maximum=20, position='Body'),
  pageStart: long(name='PageStart', position='Body'),
  pipelineId: long(name='PipelineId', minimum=1, maximum=999999999999999, position='Body'),
  startTime?: string(name='StartTime', minLength=1, maxLength=999999999999999, position='Body'),
  userPk?: string(name='UserPk', position='Body'),
}

model GetPipelineInstHistoryResponseBody = {
  data?: {
    dataList?: [ 
      {
        createTime?: long(name='CreateTime'),
        creator?: string(name='Creator'),
        deletion?: string(name='Deletion'),
        flowInstId?: int32(name='FlowInstId'),
        flowInstance?: {
          autoDrivenStatus?: boolean(name='AutoDrivenStatus'),
          createTime?: long(name='CreateTime'),
          creator?: string(name='Creator'),
          groups?: [ 
            {
              createTime?: long(name='CreateTime'),
              creator?: string(name='Creator'),
              deleteStatus?: string(name='DeleteStatus'),
              endTime?: long(name='EndTime'),
              flowInstId?: int32(name='FlowInstId'),
              id?: int32(name='Id'),
              idExtent?: int32(name='IdExtent'),
              modifier?: string(name='Modifier'),
              modifyTime?: long(name='ModifyTime'),
              name?: string(name='Name'),
              resultStatus?: string(name='ResultStatus'),
              startTime?: long(name='StartTime'),
              status?: string(name='Status'),
            }
          ](name='Groups'),
          id?: int32(name='Id'),
          modifier?: string(name='Modifier'),
          modifyTime?: long(name='ModifyTime'),
          result?: {
            caches?: string(name='Caches'),
            dateTime?: string(name='DateTime'),
            enginePipelineId?: int32(name='EnginePipelineId'),
            enginePipelineInstId?: int32(name='EnginePipelineInstId'),
            enginePipelineName?: string(name='EnginePipelineName'),
            enginePipelineNumber?: int32(name='EnginePipelineNumber'),
            mixFlowInstId?: string(name='MixFlowInstId'),
            sources?: string(name='Sources'),
            timeStamp?: string(name='TimeStamp'),
            triggerMode?: string(name='TriggerMode'),
          }(name='Result'),
          resultStatus?: string(name='ResultStatus'),
          runningStatus?: string(name='RunningStatus'),
          stageTopo?: string(name='StageTopo'),
          stages?: map[string]any(name='Stages'),
          status?: string(name='Status'),
          statusName?: string(name='StatusName'),
          systemCode?: string(name='SystemCode'),
          systemId?: string(name='SystemId'),
        }(name='FlowInstance'),
        id?: int32(name='Id'),
        instNumber?: int32(name='InstNumber'),
        modifier?: string(name='Modifier'),
        modifyTime?: long(name='ModifyTime'),
        packages?: string(name='Packages'),
        pipelineConfigId?: int32(name='PipelineConfigId'),
        pipelineId?: int32(name='PipelineId'),
        status?: string(name='Status'),
        statusName?: string(name='StatusName'),
        triggerMode?: int32(name='TriggerMode'),
      }
    ](name='DataList'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetPipelineInstHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineInstHistoryResponseBody(name='body'),
}

async function getPipelineInstHistory(request: GetPipelineInstHistoryRequest): GetPipelineInstHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPipelineInstHistory', 'POST', '/', 'json', true, 'form', request);
}

model GetPipelineInstanceBuildNumberStatusRequest {
  buildNum?: long(name='BuildNum', minimum=1, maximum=999999999999999, position='Body'),
  orgId: string(name='OrgId', position='Query'),
  pipelineId: long(name='PipelineId', minimum=1, maximum=999999999999999, position='Query'),
  userPk?: string(name='UserPk', position='Body'),
}

model GetPipelineInstanceBuildNumberStatusResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: {
    groups?: [ 
      {
        name?: string(name='Name'),
        stages?: [ 
          {
            components?: [ 
              {
                jobId?: long(name='JobId'),
                name?: string(name='Name'),
                status?: string(name='Status'),
              }
            ](name='Components'),
            sign?: string(name='Sign'),
            status?: string(name='Status'),
          }
        ](name='Stages'),
        status?: string(name='Status'),
      }
    ](name='Groups'),
    status?: string(name='Status'),
  }(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetPipelineInstanceBuildNumberStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineInstanceBuildNumberStatusResponseBody(name='body'),
}

async function getPipelineInstanceBuildNumberStatus(request: GetPipelineInstanceBuildNumberStatusRequest): GetPipelineInstanceBuildNumberStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPipelineInstanceBuildNumberStatus', 'POST', '/', 'json', true, 'form', request);
}

model GetPipelineInstanceGroupStatusRequest {
  flowInstanceId: long(name='FlowInstanceId', minimum=1, maximum=999999999999999, position='Body'),
  orgId: string(name='OrgId', position='Query'),
  pipelineId: long(name='PipelineId', minimum=1, maximum=999999999999999, position='Query'),
  userPk?: string(name='UserPk', position='Body'),
}

model GetPipelineInstanceGroupStatusResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: {
    groups?: [ 
      {
        name?: string(name='Name'),
        stages?: [ 
          {
            components?: [ 
              {
                jobId?: string(name='JobId'),
                name?: string(name='Name'),
                status?: string(name='Status'),
              }
            ](name='Components'),
            sign?: string(name='Sign'),
            status?: string(name='Status'),
          }
        ](name='Stages'),
        status?: string(name='Status'),
      }
    ](name='Groups'),
    status?: string(name='Status'),
  }(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetPipelineInstanceGroupStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineInstanceGroupStatusResponseBody(name='body'),
}

async function getPipelineInstanceGroupStatus(request: GetPipelineInstanceGroupStatusRequest): GetPipelineInstanceGroupStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPipelineInstanceGroupStatus', 'POST', '/', 'json', true, 'form', request);
}

model GetPipelineInstanceInfoRequest {
  flowInstanceId: string(name='FlowInstanceId', position='Body'),
  orgId: string(name='OrgId', position='Body'),
  pipelineId: long(name='PipelineId', position='Body'),
  userPk?: string(name='UserPk', position='Body'),
}

model GetPipelineInstanceInfoResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: {
    dockerImages?: [ string ](name='DockerImages'),
    employeeId?: string(name='EmployeeId'),
    endTime?: long(name='EndTime'),
    packageDownloadUrls?: [ string ](name='PackageDownloadUrls'),
    sources?: string(name='Sources'),
    startTime?: long(name='StartTime'),
    status?: string(name='Status'),
  }(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetPipelineInstanceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineInstanceInfoResponseBody(name='body'),
}

async function getPipelineInstanceInfo(request: GetPipelineInstanceInfoRequest): GetPipelineInstanceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPipelineInstanceInfo', 'POST', '/', 'json', true, 'form', request);
}

model GetPipelineInstanceStatusRequest {
  flowInstanceId: long(name='FlowInstanceId', position='Query'),
  orgId: string(name='OrgId', position='Query'),
  pipelineId: long(name='PipelineId', position='Query'),
  userPk?: string(name='UserPk', position='Body'),
}

model GetPipelineInstanceStatusResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: string(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetPipelineInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineInstanceStatusResponseBody(name='body'),
}

async function getPipelineInstanceStatus(request: GetPipelineInstanceStatusRequest): GetPipelineInstanceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPipelineInstanceStatus', 'POST', '/', 'json', true, 'form', request);
}

model GetPipelineLogRequest {
  jobId: long(name='JobId', minimum=1, maximum=999999999999999, position='Body'),
  orgId: string(name='OrgId', minLength=1, position='Body'),
  pipelineId: long(name='PipelineId', minimum=1, maximum=999999999999999, position='Body'),
  userPk?: string(name='UserPk', position='Body'),
}

model GetPipelineLogResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: [ 
    {
      actionName?: string(name='ActionName'),
      buildProcessNodes?: [ 
        {
          nodeIndex?: int32(name='NodeIndex'),
          nodeName?: string(name='NodeName'),
          status?: string(name='Status'),
        }
      ](name='BuildProcessNodes'),
      jobId?: long(name='JobId'),
      startTime?: string(name='StartTime'),
    }
  ](name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetPipelineLogResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineLogResponseBody(name='body'),
}

async function getPipelineLog(request: GetPipelineLogRequest): GetPipelineLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPipelineLog', 'POST', '/', 'json', true, 'form', request);
}

model GetPipelineStepLogRequest {
  jobId: long(name='JobId', minimum=1, maximum=999999999999999, position='Body'),
  limit: long(name='Limit', minimum=0, maximum=2000, position='Body'),
  offset: long(name='Offset', position='Body'),
  orgId: string(name='OrgId', minLength=1, position='Body'),
  pipelineId: long(name='PipelineId', minimum=1, maximum=999999999999999, position='Body'),
  stepIndex: string(name='StepIndex', position='Body'),
  userPk?: string(name='UserPk', position='Body'),
}

model GetPipelineStepLogResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: {
    last?: int32(name='Last'),
    logs?: string(name='Logs'),
    more?: boolean(name='More'),
  }(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetPipelineStepLogResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineStepLogResponseBody(name='body'),
}

async function getPipelineStepLog(request: GetPipelineStepLogRequest): GetPipelineStepLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPipelineStepLog', 'POST', '/', 'json', true, 'form', request);
}

model GetPipelineTemplatesRequest {
  orgId: string(name='OrgId', position='Body'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model GetPipelineTemplatesResponseBody = {
  object?: {
    dataList?: [ 
      {
        id?: float(name='Id'),
        templateName?: string(name='TemplateName'),
      }
    ](name='DataList'),
    total?: float(name='Total'),
  }(name='Object'),
  requestId?: string(name='RequestId'),
}

model GetPipelineTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipelineTemplatesResponseBody(name='body'),
}

async function getPipelineTemplates(request: GetPipelineTemplatesRequest): GetPipelineTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPipelineTemplates', 'GET', '/', 'json', true, 'form', request);
}

model GetPipleineLatestInstanceStatusRequest {
  orgId: string(name='OrgId', position='Query'),
  pipelineId: long(name='PipelineId', minimum=1, maximum=999999999999999, position='Query'),
  userPk?: string(name='UserPk', position='Body'),
}

model GetPipleineLatestInstanceStatusResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: {
    groups?: [ 
      {
        name?: string(name='Name'),
        stages?: [ 
          {
            components?: [ 
              {
                jobId?: long(name='JobId'),
                name?: string(name='Name'),
                status?: string(name='Status'),
              }
            ](name='Components'),
            sign?: string(name='Sign'),
            status?: string(name='Status'),
          }
        ](name='Stages'),
        status?: string(name='Status'),
      }
    ](name='Groups'),
    status?: string(name='Status'),
  }(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetPipleineLatestInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetPipleineLatestInstanceStatusResponseBody(name='body'),
}

async function getPipleineLatestInstanceStatus(request: GetPipleineLatestInstanceStatusRequest): GetPipleineLatestInstanceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPipleineLatestInstanceStatus', 'POST', '/', 'json', true, 'form', request);
}

model GetProjectOptionRequest {
  orgId: string(name='OrgId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  query?: string(name='Query', position='Body'),
  type: string(name='Type', position='Body'),
}

model GetProjectOptionResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: [ 
    {
      kind?: string(name='Kind'),
      name?: string(name='Name'),
      scopeName?: string(name='ScopeName'),
      value?: string(name='Value'),
    }
  ](name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model GetProjectOptionResponse = {
  headers: map[string]string(name='headers'),
  body: GetProjectOptionResponseBody(name='body'),
}

async function getProjectOption(request: GetProjectOptionRequest): GetProjectOptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProjectOption', 'POST', '/', 'json', true, 'form', request);
}

model GetTaskDetailActivityRequest {
  orgId: string(name='OrgId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  taskId: string(name='TaskId', position='Body'),
}

model GetTaskDetailActivityResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  object?: [ 
    {
      action?: string(name='Action'),
      content?: map[string]any(name='Content'),
      created?: string(name='Created'),
      title?: string(name='Title'),
      updated?: string(name='Updated'),
    }
  ](name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model GetTaskDetailActivityResponse = {
  headers: map[string]string(name='headers'),
  body: GetTaskDetailActivityResponseBody(name='body'),
}

async function getTaskDetailActivity(request: GetTaskDetailActivityRequest): GetTaskDetailActivityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTaskDetailActivity', 'POST', '/', 'json', true, 'form', request);
}

model GetTaskDetailBaseRequest {
  orgId: string(name='OrgId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  taskId: string(name='TaskId', position='Body'),
}

model GetTaskDetailBaseResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: {
    accomplished?: string(name='Accomplished'),
    ancestorIds?: [ string ](name='AncestorIds'),
    ancestors?: [ string ](name='Ancestors'),
    attachmentsCount?: int32(name='AttachmentsCount'),
    badges?: {
      attachmentsCount?: int32(name='AttachmentsCount'),
      commentsCount?: int32(name='CommentsCount'),
      likesCount?: int32(name='LikesCount'),
      objectlinksCount?: int32(name='ObjectlinksCount'),
    }(name='Badges'),
    commentsCount?: int32(name='CommentsCount'),
    content?: string(name='Content'),
    created?: string(name='Created'),
    creator?: {
      id?: string(name='Id'),
      name?: string(name='Name'),
    }(name='Creator'),
    creatorId?: string(name='CreatorId'),
    customfields?: [ 
      {
        customfieldId?: string(name='CustomfieldId'),
        type?: string(name='Type'),
        value?: [ 
          {
            id?: string(name='Id'),
            title?: string(name='Title'),
          }
        ](name='Value'),
        values?: [ string ](name='Values'),
      }
    ](name='Customfields'),
    divisions?: [ string ](name='Divisions'),
    dueDate?: string(name='DueDate'),
    executor?: {
      avatarUrl?: string(name='AvatarUrl'),
      id?: string(name='Id'),
      name?: string(name='Name'),
    }(name='Executor'),
    executorId?: string(name='ExecutorId'),
    id?: string(name='Id'),
    involveMembers?: [ string ](name='InvolveMembers'),
    involvers?: [ 
      {
        id?: string(name='Id'),
        name?: string(name='Name'),
      }
    ](name='Involvers'),
    isArchived?: boolean(name='IsArchived'),
    isDone?: boolean(name='IsDone'),
    isFavorite?: boolean(name='IsFavorite'),
    isTopInProject?: boolean(name='IsTopInProject'),
    labels?: [ string ](name='Labels'),
    likesCount?: int32(name='LikesCount'),
    note?: string(name='Note'),
    objectType?: string(name='ObjectType'),
    objectlinksCount?: int32(name='ObjectlinksCount'),
    organization?: string(name='Organization'),
    organizationId?: string(name='OrganizationId'),
    parent?: string(name='Parent'),
    priority?: int32(name='Priority'),
    progress?: int32(name='Progress'),
    projectId?: string(name='ProjectId'),
    rating?: int32(name='Rating'),
    recurrence?: string(name='Recurrence'),
    reminder?: {
      creatorId?: string(name='CreatorId'),
      date?: string(name='Date'),
      memberRoles?: [ string ](name='MemberRoles'),
      members?: [ string ](name='Members'),
      method?: string(name='Method'),
      rules?: [ string ](name='Rules'),
      type?: string(name='Type'),
    }(name='Reminder'),
    scenariofieldconfig?: {
      icon?: string(name='Icon'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      proTemplateConfigType?: string(name='ProTemplateConfigType'),
    }(name='Scenariofieldconfig'),
    scenariofieldconfigId?: string(name='ScenariofieldconfigId'),
    shareStatus?: int32(name='ShareStatus'),
    source?: string(name='Source'),
    sourceDate?: string(name='SourceDate'),
    sourceId?: string(name='SourceId'),
    sprint?: string(name='Sprint'),
    sprintId?: string(name='SprintId'),
    stage?: {
      id?: string(name='Id'),
      name?: string(name='Name'),
    }(name='Stage'),
    stageId?: string(name='StageId'),
    startDate?: string(name='StartDate'),
    storyPoint?: string(name='StoryPoint'),
    subtaskCount?: {
      done?: int32(name='Done'),
      total?: int32(name='Total'),
    }(name='SubtaskCount'),
    subtasks?: [ 
      {
        content?: string(name='Content'),
        id?: string(name='Id'),
      }
    ](name='Subtasks'),
    tagIds?: [ string ](name='TagIds'),
    taskId?: string(name='TaskId'),
    taskflowstatus?: {
      id?: string(name='Id'),
      kind?: string(name='Kind'),
      name?: string(name='Name'),
      taskflowId?: string(name='TaskflowId'),
    }(name='Taskflowstatus'),
    taskflowstatusId?: string(name='TaskflowstatusId'),
    tasklist?: {
      id?: string(name='Id'),
      title?: string(name='Title'),
    }(name='Tasklist'),
    uniqueId?: int32(name='UniqueId'),
    untilDate?: string(name='UntilDate'),
    updated?: string(name='Updated'),
    visible?: string(name='Visible'),
    workTime?: {
      totalTime?: int32(name='TotalTime'),
      unit?: string(name='Unit'),
      usedTime?: int32(name='UsedTime'),
    }(name='WorkTime'),
  }(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model GetTaskDetailBaseResponse = {
  headers: map[string]string(name='headers'),
  body: GetTaskDetailBaseResponseBody(name='body'),
}

async function getTaskDetailBase(request: GetTaskDetailBaseRequest): GetTaskDetailBaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTaskDetailBase', 'POST', '/', 'json', true, 'form', request);
}

model GetTaskListFilterRequest {
  creatorId?: string(name='CreatorId', position='Body'),
  dueDateEnd?: string(name='DueDateEnd', position='Body'),
  dueDateStart?: string(name='DueDateStart', position='Body'),
  executorId?: string(name='ExecutorId', position='Body'),
  extra?: string(name='Extra', position='Body'),
  involveMembers?: string(name='InvolveMembers', position='Body'),
  isDone?: boolean(name='IsDone', position='Body'),
  name?: string(name='Name', position='Body'),
  objectType: string(name='ObjectType', position='Body'),
  order: string(name='Order', position='Body'),
  orderCondition: string(name='OrderCondition', position='Body'),
  orgId: string(name='OrgId', position='Body'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=5000, position='Body'),
  pageToken?: string(name='PageToken', position='Body'),
  priority?: string(name='Priority', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  scenarioFieldConfigId: string(name='ScenarioFieldConfigId', position='Body'),
  sprintId?: string(name='SprintId', position='Body'),
  tagId?: string(name='TagId', position='Body'),
  taskFlowStatusId?: string(name='TaskFlowStatusId', position='Body'),
}

model GetTaskListFilterResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: {
    nextPageToken?: string(name='NextPageToken'),
    result?: [ 
      {
        accomplished?: string(name='Accomplished'),
        ancestorIds?: [ string ](name='AncestorIds'),
        attachmentsCount?: int32(name='AttachmentsCount'),
        badges?: {
          attachmentsCount?: int32(name='AttachmentsCount'),
          commentsCount?: int32(name='CommentsCount'),
          likesCount?: int32(name='LikesCount'),
          objectlinksCount?: int32(name='ObjectlinksCount'),
        }(name='Badges'),
        commentsCount?: int32(name='CommentsCount'),
        content?: string(name='Content'),
        created?: string(name='Created'),
        creator?: {
          avatarUrl?: string(name='AvatarUrl'),
          id?: string(name='Id'),
          name?: string(name='Name'),
        }(name='Creator'),
        creatorId?: string(name='CreatorId'),
        customfields?: [ 
          {
            customfieldId?: string(name='CustomfieldId'),
            type?: string(name='Type'),
            value?: [ 
              {
                id?: string(name='Id'),
                title?: string(name='Title'),
              }
            ](name='Value'),
            values?: string(name='Values'),
          }
        ](name='Customfields'),
        divisions?: [ string ](name='Divisions'),
        dueDate?: string(name='DueDate'),
        executor?: {
          avatarUrl?: string(name='AvatarUrl'),
          id?: string(name='Id'),
          name?: string(name='Name'),
        }(name='Executor'),
        executorId?: string(name='ExecutorId'),
        id?: string(name='Id'),
        involveMembers?: [ string ](name='InvolveMembers'),
        isArchived?: boolean(name='IsArchived'),
        isDone?: boolean(name='IsDone'),
        isFavorite?: boolean(name='IsFavorite'),
        isTopInProject?: boolean(name='IsTopInProject'),
        labels?: [ string ](name='Labels'),
        likesCount?: int32(name='LikesCount'),
        note?: string(name='Note'),
        objectType?: string(name='ObjectType'),
        objectlinksCount?: int32(name='ObjectlinksCount'),
        organizationId?: string(name='OrganizationId'),
        parent?: string(name='Parent'),
        priority?: int32(name='Priority'),
        progress?: int32(name='Progress'),
        projectId?: string(name='ProjectId'),
        rating?: int32(name='Rating'),
        recurrence?: string(name='Recurrence'),
        reminder?: {
          creatorId?: string(name='CreatorId'),
          date?: string(name='Date'),
          members?: [ string ](name='Members'),
          rules?: [ string ](name='Rules'),
          type?: string(name='Type'),
        }(name='Reminder'),
        scenariofFeldConfigId?: string(name='ScenariofFeldConfigId'),
        shareStatus?: int32(name='ShareStatus'),
        source?: string(name='Source'),
        sourceDate?: string(name='SourceDate'),
        sourceId?: string(name='SourceId'),
        sprint?: string(name='Sprint'),
        sprintId?: string(name='SprintId'),
        stage?: {
          id?: string(name='Id'),
          name?: string(name='Name'),
        }(name='Stage'),
        stageId?: string(name='StageId'),
        startDate?: string(name='StartDate'),
        storyPoint?: string(name='StoryPoint'),
        subtaskCount?: {
          done?: int32(name='Done'),
          total?: int32(name='Total'),
        }(name='SubtaskCount'),
        tagIds?: [ string ](name='TagIds'),
        taskFlowStatus?: {
          id?: string(name='Id'),
          kind?: string(name='Kind'),
          name?: string(name='Name'),
          pos?: int32(name='Pos'),
          taskFlowId?: string(name='TaskFlowId'),
        }(name='TaskFlowStatus'),
        taskFlowStatusId?: string(name='TaskFlowStatusId'),
        taskId?: string(name='TaskId'),
        taskListId?: string(name='TaskListId'),
        taskUniqueId?: string(name='TaskUniqueId'),
        uniqueId?: int32(name='UniqueId'),
        untilDate?: string(name='UntilDate'),
        updated?: string(name='Updated'),
        visible?: string(name='Visible'),
        workTime?: {
          totalTime?: int32(name='TotalTime'),
          unit?: string(name='Unit'),
          usedTime?: int32(name='UsedTime'),
        }(name='WorkTime'),
      }
    ](name='Result'),
    totalSize?: int32(name='TotalSize'),
  }(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: string(name='Successful'),
}

model GetTaskListFilterResponse = {
  headers: map[string]string(name='headers'),
  body: GetTaskListFilterResponseBody(name='body'),
}

async function getTaskListFilter(request: GetTaskListFilterRequest): GetTaskListFilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTaskListFilter', 'POST', '/', 'json', true, 'form', request);
}

model GetUserByAliyunUidRequest {
  orgId: string(name='OrgId', position='Body'),
  userPk: string(name='UserPk', position='Body'),
}

model GetUserByAliyunUidResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: {
    aliyunPk?: string(name='AliyunPk'),
    avatarUrl?: string(name='AvatarUrl'),
    email?: string(name='Email'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    phone?: string(name='Phone'),
  }(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model GetUserByAliyunUidResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserByAliyunUidResponseBody(name='body'),
}

async function getUserByAliyunUid(request: GetUserByAliyunUidRequest): GetUserByAliyunUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserByAliyunUid', 'POST', '/', 'json', true, 'form', request);
}

model GetUserNameRequest {
  orgId: string(name='OrgId', position='Body'),
  userId: string(name='UserId', position='Body'),
}

model GetUserNameResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: string(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model GetUserNameResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserNameResponseBody(name='body'),
}

async function getUserName(request: GetUserNameRequest): GetUserNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserName', 'POST', '/', 'json', true, 'form', request);
}

model InsertDevopsUserRequest {
  email?: string(name='Email', position='Body'),
  phone?: string(name='Phone', position='Body'),
  userName?: string(name='UserName', position='Body'),
  userPk: string(name='UserPk', position='Body'),
}

model InsertDevopsUserResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: string(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InsertDevopsUserResponse = {
  headers: map[string]string(name='headers'),
  body: InsertDevopsUserResponseBody(name='body'),
}

async function insertDevopsUser(request: InsertDevopsUserRequest): InsertDevopsUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertDevopsUser', 'POST', '/', 'json', true, 'form', request);
}

model InsertPipelineMemberRequest {
  orgId: string(name='OrgId', position='Query'),
  pipelineId: long(name='PipelineId', minimum=1, maximum=999999999999999, position='Query'),
  roleName: string(name='RoleName', position='Body'),
  userId: string(name='UserId', position='Body'),
  userPk?: string(name='UserPk', position='Body'),
}

model InsertPipelineMemberResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: boolean(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InsertPipelineMemberResponse = {
  headers: map[string]string(name='headers'),
  body: InsertPipelineMemberResponseBody(name='body'),
}

async function insertPipelineMember(request: InsertPipelineMemberRequest): InsertPipelineMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertPipelineMember', 'POST', '/', 'json', true, 'form', request);
}

model InsertProjectMembersRequest {
  members: string(name='Members', position='Body'),
  orgId: string(name='OrgId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model InsertProjectMembersResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: boolean(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model InsertProjectMembersResponse = {
  headers: map[string]string(name='headers'),
  body: InsertProjectMembersResponseBody(name='body'),
}

async function insertProjectMembers(request: InsertProjectMembersRequest): InsertProjectMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertProjectMembers', 'POST', '/', 'json', true, 'form', request);
}

model ListCommonGroupRequest {
  all: boolean(name='All', position='Body'),
  orgId: string(name='OrgId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  smartGroupId: string(name='SmartGroupId', position='Body'),
}

model ListCommonGroupResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: [ 
    {
      creatorId?: string(name='CreatorId'),
      isRoot?: boolean(name='IsRoot'),
      name?: string(name='Name'),
      pinyin?: string(name='Pinyin'),
      pos?: int32(name='Pos'),
      projectId?: string(name='ProjectId'),
      resourceCount?: int32(name='ResourceCount'),
      smartGroupId?: string(name='SmartGroupId'),
      id?: string(name='id'),
    }
  ](name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model ListCommonGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListCommonGroupResponseBody(name='body'),
}

async function listCommonGroup(request: ListCommonGroupRequest): ListCommonGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCommonGroup', 'POST', '/', 'json', true, 'form', request);
}

model ListCredentialsRequest {
  orgId: string(name='OrgId', position='Body'),
  userPk?: string(name='UserPk', position='Body'),
}

model ListCredentialsResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: [  map[string]any ](name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListCredentialsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCredentialsResponseBody(name='body'),
}

async function listCredentials(request: ListCredentialsRequest): ListCredentialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCredentials', 'POST', '/', 'json', true, 'form', request);
}

model ListDevopsProjectSprintsRequest {
  orgId: string(name='OrgId', position='Body'),
  pageSize?: long(name='PageSize', position='Body'),
  pageToken?: string(name='PageToken', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model ListDevopsProjectSprintsResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  nextPageToken?: string(name='NextPageToken'),
  object?: [ 
    {
      accomplished?: string(name='Accomplished'),
      created?: string(name='Created'),
      creatorId?: string(name='CreatorId'),
      dueDate?: string(name='DueDate'),
      id?: string(name='Id'),
      isDeleted?: boolean(name='IsDeleted'),
      name?: string(name='Name'),
      planToDo?: {
        storyPoints?: int32(name='StoryPoints'),
        tasks?: int32(name='Tasks'),
        workTimes?: int32(name='WorkTimes'),
      }(name='PlanToDo'),
      projectId?: string(name='ProjectId'),
      startDate?: string(name='StartDate'),
      status?: string(name='Status'),
      updated?: string(name='Updated'),
    }
  ](name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model ListDevopsProjectSprintsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDevopsProjectSprintsResponseBody(name='body'),
}

async function listDevopsProjectSprints(request: ListDevopsProjectSprintsRequest): ListDevopsProjectSprintsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDevopsProjectSprints', 'POST', '/', 'json', true, 'form', request);
}

model ListDevopsProjectTaskFlowRequest {
  orgId: string(name='OrgId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model ListDevopsProjectTaskFlowResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: [ 
    {
      id?: string(name='Id'),
      name?: string(name='Name'),
      type?: string(name='Type'),
    }
  ](name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model ListDevopsProjectTaskFlowResponse = {
  headers: map[string]string(name='headers'),
  body: ListDevopsProjectTaskFlowResponseBody(name='body'),
}

async function listDevopsProjectTaskFlow(request: ListDevopsProjectTaskFlowRequest): ListDevopsProjectTaskFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDevopsProjectTaskFlow', 'POST', '/', 'json', true, 'form', request);
}

model ListDevopsProjectTaskFlowStatusRequest {
  orgId: string(name='OrgId', position='Body'),
  taskFlowId: string(name='TaskFlowId', position='Body'),
}

model ListDevopsProjectTaskFlowStatusResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: [ 
    {
      created?: string(name='Created'),
      creatorId?: string(name='CreatorId'),
      id?: string(name='Id'),
      isDeleted?: boolean(name='IsDeleted'),
      kind?: string(name='Kind'),
      name?: string(name='Name'),
      pos?: int32(name='Pos'),
      rejectStatusIds?: string(name='RejectStatusIds'),
      taskflowId?: string(name='TaskflowId'),
      updated?: string(name='Updated'),
    }
  ](name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model ListDevopsProjectTaskFlowStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ListDevopsProjectTaskFlowStatusResponseBody(name='body'),
}

async function listDevopsProjectTaskFlowStatus(request: ListDevopsProjectTaskFlowStatusRequest): ListDevopsProjectTaskFlowStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDevopsProjectTaskFlowStatus', 'POST', '/', 'json', true, 'form', request);
}

model ListDevopsProjectTaskListRequest {
  orgId: string(name='OrgId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model ListDevopsProjectTaskListResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: {
    result?: [ 
      {
        id?: string(name='Id'),
      }
    ](name='Result'),
  }(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model ListDevopsProjectTaskListResponse = {
  headers: map[string]string(name='headers'),
  body: ListDevopsProjectTaskListResponseBody(name='body'),
}

async function listDevopsProjectTaskList(request: ListDevopsProjectTaskListRequest): ListDevopsProjectTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDevopsProjectTaskList', 'POST', '/', 'json', true, 'form', request);
}

model ListDevopsProjectTasksRequest {
  orgId: string(name='OrgId', position='Body'),
  projectIds: string(name='ProjectIds', position='Body'),
}

model ListDevopsProjectTasksResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: [ 
    {
      created?: string(name='Created'),
      creatorId?: string(name='CreatorId'),
      id?: string(name='Id'),
      modifierId?: string(name='ModifierId'),
      name?: string(name='Name'),
      projectId?: string(name='ProjectId'),
      taskgroupId?: string(name='TaskgroupId'),
      tasklistId?: string(name='TasklistId'),
      updated?: string(name='Updated'),
    }
  ](name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model ListDevopsProjectTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListDevopsProjectTasksResponseBody(name='body'),
}

async function listDevopsProjectTasks(request: ListDevopsProjectTasksRequest): ListDevopsProjectTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDevopsProjectTasks', 'POST', '/', 'json', true, 'form', request);
}

model ListDevopsProjectsRequest {
  orderBy: string(name='OrderBy', position='Body'),
  orgId: string(name='OrgId', position='Body'),
  pageSize: int32(name='PageSize', minimum=1, maximum=100, position='Body'),
  pageToken?: string(name='PageToken', position='Body'),
  selectBy?: string(name='SelectBy', position='Body'),
}

model ListDevopsProjectsResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: {
    nextPageToken?: string(name='NextPageToken'),
    result?: [ 
      {
        created?: string(name='Created'),
        creatorId?: string(name='CreatorId'),
        description?: string(name='Description'),
        id?: string(name='Id'),
        isArchived?: boolean(name='IsArchived'),
        isPublic?: boolean(name='IsPublic'),
        isStar?: boolean(name='IsStar'),
        isTemplate?: boolean(name='IsTemplate'),
        logo?: string(name='Logo'),
        membersCount?: int32(name='MembersCount'),
        name?: string(name='Name'),
        organizationId?: string(name='OrganizationId'),
        roleId?: string(name='RoleId'),
        tasksCount?: int32(name='TasksCount'),
        updated?: string(name='Updated'),
        visibility?: string(name='Visibility'),
      }
    ](name='Result'),
  }(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model ListDevopsProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDevopsProjectsResponseBody(name='body'),
}

async function listDevopsProjects(request: ListDevopsProjectsRequest): ListDevopsProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDevopsProjects', 'POST', '/', 'json', true, 'form', request);
}

model ListDevopsScenarioFieldConfigRequest {
  orgId: string(name='OrgId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model ListDevopsScenarioFieldConfigResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: [ 
    {
      id?: string(name='Id'),
      name?: string(name='Name'),
      type?: string(name='Type'),
    }
  ](name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model ListDevopsScenarioFieldConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ListDevopsScenarioFieldConfigResponseBody(name='body'),
}

async function listDevopsScenarioFieldConfig(request: ListDevopsScenarioFieldConfigRequest): ListDevopsScenarioFieldConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDevopsScenarioFieldConfig', 'POST', '/', 'json', true, 'form', request);
}

model ListPipelineTemplatesRequest {
  orgId: string(name='OrgId', position='Query'),
  pageNum?: int32(name='PageNum', description='本次读取的最大数据记录数量', position='Query'),
  pageStart?: int32(name='PageStart', description='本次读取的最大数据记录数量', position='Query'),
}

model ListPipelineTemplatesResponseBody = {
  data?: {
    dataList?: [ 
      {
        id?: long(name='Id'),
        templateName?: string(name='TemplateName'),
      }
    ](name='DataList'),
    total?: float(name='Total'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ListPipelineTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelineTemplatesResponseBody(name='body'),
}

async function listPipelineTemplates(request: ListPipelineTemplatesRequest): ListPipelineTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPipelineTemplates', 'GET', '/', 'json', false, 'json', request);
}

model ListPipelinesRequest {
  createEndTime?: string(name='CreateEndTime', position='Body'),
  createStartTime?: string(name='CreateStartTime', position='Body'),
  creators?: string(name='Creators', position='Body'),
  executeEndTime?: string(name='ExecuteEndTime', position='Body'),
  executeStartTime?: string(name='ExecuteStartTime', position='Body'),
  operators?: string(name='Operators', position='Body'),
  orgId: string(name='OrgId', position='Query'),
  pageSize: int32(name='PageSize', position='Body'),
  pageStart: int32(name='PageStart', position='Body'),
  pipelineName?: string(name='PipelineName', position='Body'),
  resultStatusList?: string(name='ResultStatusList', position='Body'),
  userPk?: string(name='UserPk', position='Body'),
}

model ListPipelinesResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: map[string]any(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListPipelinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPipelinesResponseBody(name='body'),
}

async function listPipelines(request: ListPipelinesRequest): ListPipelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPipelines', 'POST', '/', 'json', true, 'form', request);
}

model ListProjectCustomFieldsRequest {
  orgId: string(name='OrgId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model ListProjectCustomFieldsResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: [ 
    {
      customFieldId?: string(name='CustomFieldId'),
      name?: string(name='Name'),
      subtype?: string(name='Subtype'),
      type?: string(name='Type'),
      values?: [ 
        {
          id?: string(name='Id'),
          value?: string(name='Value'),
        }
      ](name='Values'),
    }
  ](name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model ListProjectCustomFieldsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectCustomFieldsResponseBody(name='body'),
}

async function listProjectCustomFields(request: ListProjectCustomFieldsRequest): ListProjectCustomFieldsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProjectCustomFields', 'POST', '/', 'json', true, 'form', request);
}

model ListServiceConnectionsRequest {
  orgId: string(name='OrgId', position='Body'),
  scType: string(name='ScType', position='Body'),
  userPk?: string(name='UserPk', position='Body'),
}

model ListServiceConnectionsResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: [  map[string]any ](name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListServiceConnectionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceConnectionsResponseBody(name='body'),
}

async function listServiceConnections(request: ListServiceConnectionsRequest): ListServiceConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServiceConnections', 'POST', '/', 'json', true, 'form', request);
}

model ListSmartGroupRequest {
  orgId: string(name='OrgId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model ListSmartGroupResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: [ 
    {
      id?: string(name='Id'),
      type?: string(name='Type'),
    }
  ](name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model ListSmartGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListSmartGroupResponseBody(name='body'),
}

async function listSmartGroup(request: ListSmartGroupRequest): ListSmartGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSmartGroup', 'POST', '/', 'json', true, 'form', request);
}

model ListUserOrganizationRequest {
  realPk?: string(name='RealPk', position='Body'),
}

model ListUserOrganizationResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: [ 
    {
      id?: string(name='Id'),
      name?: string(name='Name'),
    }
  ](name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListUserOrganizationResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserOrganizationResponseBody(name='body'),
}

async function listUserOrganization(request: ListUserOrganizationRequest): ListUserOrganizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserOrganization', 'POST', '/', 'json', true, 'form', request);
}

model TransferPipelineOwnerRequest {
  newOwnerId: string(name='NewOwnerId', position='Body'),
  orgId: string(name='OrgId', position='Query'),
  pipelineId: long(name='PipelineId', minimum=1, maximum=999999999999999, position='Query'),
  userPk?: string(name='UserPk', position='Body'),
}

model TransferPipelineOwnerResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: map[string]any(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TransferPipelineOwnerResponse = {
  headers: map[string]string(name='headers'),
  body: TransferPipelineOwnerResponseBody(name='body'),
}

async function transferPipelineOwner(request: TransferPipelineOwnerRequest): TransferPipelineOwnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransferPipelineOwner', 'POST', '/', 'json', true, 'form', request);
}

model UpdateCommonGroupRequest {
  commonGroupId: string(name='CommonGroupId', position='Body'),
  description?: string(name='Description', position='Body'),
  name: string(name='Name', position='Body'),
  orgId: string(name='OrgId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  smartGroupId: string(name='SmartGroupId', position='Body'),
}

model UpdateCommonGroupResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: {
    id?: string(name='Id'),
  }(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model UpdateCommonGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCommonGroupResponseBody(name='body'),
}

async function updateCommonGroup(request: UpdateCommonGroupRequest): UpdateCommonGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCommonGroup', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDevopsProjectRequest {
  description: string(name='Description', position='Body'),
  name: string(name='Name', position='Body'),
  orgId: string(name='OrgId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model UpdateDevopsProjectResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: string(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateDevopsProjectResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDevopsProjectResponseBody(name='body'),
}

async function updateDevopsProject(request: UpdateDevopsProjectRequest): UpdateDevopsProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDevopsProject', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDevopsProjectSprintRequest {
  description?: string(name='Description', position='Body'),
  dueDate?: string(name='DueDate', position='Body'),
  executorId: string(name='ExecutorId', position='Body'),
  name: string(name='Name', position='Body'),
  orgId: string(name='OrgId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  sprintId: string(name='SprintId', position='Body'),
  startDate?: string(name='StartDate', position='Body'),
}

model UpdateDevopsProjectSprintResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: boolean(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model UpdateDevopsProjectSprintResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDevopsProjectSprintResponseBody(name='body'),
}

async function updateDevopsProjectSprint(request: UpdateDevopsProjectSprintRequest): UpdateDevopsProjectSprintResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDevopsProjectSprint', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDevopsProjectTaskRequest {
  content?: string(name='Content', position='Body'),
  dueDate?: string(name='DueDate', position='Body'),
  executorId?: string(name='ExecutorId', position='Body'),
  note?: string(name='Note', position='Body'),
  orgId: string(name='OrgId', position='Body'),
  parentTaskId?: string(name='ParentTaskId', position='Body'),
  priority?: int32(name='Priority', minimum=0, maximum=999999999999999, position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  scenarioFiieldConfigId?: string(name='ScenarioFiieldConfigId', position='Body'),
  sprintId?: string(name='SprintId', position='Body'),
  startDate?: string(name='StartDate', position='Body'),
  taskFlowStatusId?: string(name='TaskFlowStatusId', position='Body'),
  taskId?: string(name='TaskId', position='Body'),
  visible?: string(name='Visible', position='Body'),
}

model UpdateDevopsProjectTaskResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: boolean(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model UpdateDevopsProjectTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDevopsProjectTaskResponseBody(name='body'),
}

async function updateDevopsProjectTask(request: UpdateDevopsProjectTaskRequest): UpdateDevopsProjectTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDevopsProjectTask', 'POST', '/', 'json', true, 'form', request);
}

model UpdatePipelineEnvVarsRequest {
  envVars?: string(name='EnvVars', description='需要修改的环境变量和默认值，json形式', position='Query'),
  orgId: string(name='OrgId', position='Query'),
  pipelineId?: long(name='PipelineId', description='流水线id', position='Query'),
}

model UpdatePipelineEnvVarsResponseBody = {
  pipelineId?: long(name='PipelineId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdatePipelineEnvVarsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePipelineEnvVarsResponseBody(name='body'),
}

async function updatePipelineEnvVars(request: UpdatePipelineEnvVarsRequest): UpdatePipelineEnvVarsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePipelineEnvVars', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePipelineMemberRequest {
  orgId: string(name='OrgId', position='Query'),
  pipelineId: long(name='PipelineId', minimum=1, maximum=999999999999999, position='Query'),
  roleName: string(name='RoleName', position='Body'),
  userId: string(name='UserId', position='Body'),
  userPk?: string(name='UserPk', position='Body'),
}

model UpdatePipelineMemberResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  object?: boolean(name='Object'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdatePipelineMemberResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePipelineMemberResponseBody(name='body'),
}

async function updatePipelineMember(request: UpdatePipelineMemberRequest): UpdatePipelineMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePipelineMember', 'POST', '/', 'json', true, 'form', request);
}

model UpdateTaskDetailRequest {
  addInvolvers?: string(name='AddInvolvers', position='Body'),
  content?: string(name='Content', position='Body'),
  customFieldId?: string(name='CustomFieldId', position='Body'),
  customFieldValues?: string(name='CustomFieldValues', position='Body'),
  delInvolvers?: string(name='DelInvolvers', position='Body'),
  dueDate?: string(name='DueDate', position='Body'),
  executorId?: string(name='ExecutorId', position='Body'),
  note?: string(name='Note', position='Body'),
  orgId: string(name='OrgId', position='Body'),
  priority?: long(name='Priority', minimum=-20, maximum=999999999999999, position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  sprintId?: string(name='SprintId', position='Body'),
  startDate?: string(name='StartDate', position='Body'),
  storyPoint?: string(name='StoryPoint', position='Body'),
  tagIds?: string(name='TagIds', position='Body'),
  taskFlowStatusId?: string(name='TaskFlowStatusId', position='Body'),
  taskId: string(name='TaskId', position='Body'),
  workTimes?: long(name='WorkTimes', minimum=0, maximum=100000, position='Body'),
}

model UpdateTaskDetailResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  object?: boolean(name='Object'),
  requestId?: string(name='RequestId'),
  successful?: boolean(name='Successful'),
}

model UpdateTaskDetailResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTaskDetailResponseBody(name='body'),
}

async function updateTaskDetail(request: UpdateTaskDetailRequest): UpdateTaskDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskDetail', 'POST', '/', 'json', true, 'form', request);
}

