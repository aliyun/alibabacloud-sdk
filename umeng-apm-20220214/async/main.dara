/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'umeng-apm';
  @version = '2022-02-14';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DeleteSymRecordsRequest {
  appVersions: [ string ](name='appVersions', description='This parameter is required.', shrink='simple', position='Body'),
  dataSourceId: string(name='dataSourceId', description='This parameter is required.', example='5fb6001a73749c24fd9cb356', position='Body'),
  fileType: int32(name='fileType', description='This parameter is required.', example='1', minimum=1, maximum=4, position='Body'),
}

model DeleteSymRecordsResponseBody = {
  code?: long(name='code', description='code', example='200'),
  msg?: string(name='msg', example='succeed in handling request'),
  num?: int32(name='num', example='1'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210f07c516457690916816858d94ea'),
}

model DeleteSymRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSymRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSymRecords  DeleteSymRecordsRequest
  * @return DeleteSymRecordsResponse
 */
async function deleteSymRecords(request: DeleteSymRecordsRequest): DeleteSymRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSymRecords', 'POST', '/deleteSymRecords', 'json', true, 'form', request);
}

model GetH5PageTrendRequest {
  appVersion?: string(name='appVersion', example='1.0.2', position='Query'),
  dataSourceId: string(name='dataSourceId', description='This parameter is required.', example='5fb6001a73749c24fd9cb356', position='Query'),
  endDate: string(name='endDate', description='This parameter is required.', example='2023-05-03', position='Query'),
  startDate: string(name='startDate', description='This parameter is required.', example='2023-05-01', position='Query'),
  timeUnit: string(name='timeUnit', description='This parameter is required.', example='day', position='Query'),
}

model GetH5PageTrendResponseBody = {
  code?: long(name='code', example='200'),
  data?: [ 
    {
      analyzeDOM?: double(name='analyzeDOM', example='504.89'),
      appCache?: double(name='appCache', example='49.48'),
      contentTrans?: double(name='contentTrans', example='979.83'),
      dns?: double(name='dns', example='50.16'),
      domReady?: double(name='domReady', example='1881.96'),
      fcp?: double(name='fcp', example='190.69'),
      firstByte?: double(name='firstByte', example='472.57'),
      fiveSecondRate?: double(name='fiveSecondRate', example='44.67'),
      fp?: double(name='fp', example='50.25'),
      loadEvent?: double(name='loadEvent', example='492.86'),
      loadFinish?: double(name='loadFinish', example='4741.44'),
      loadResource?: double(name='loadResource', example='2549.46'),
      logCnt?: long(name='logCnt', example='2062'),
      oneSecondRate?: double(name='oneSecondRate', example='0.19'),
      redirect?: double(name='redirect', example='100.93'),
      ssl?: double(name='ssl', example='71.02'),
      tcp?: double(name='tcp', example='150.18'),
      timePoint?: string(name='timePoint', example='2023-05-20'),
      ttfb?: double(name='ttfb', example='249.55'),
      tti?: double(name='tti', example='2126.61'),
      twoSecondRate?: double(name='twoSecondRate', example='4.9'),
      unload?: double(name='unload', example='98.26'),
    }
  ](name='data'),
  msg?: string(name='msg', example='succeed in handling request'),
  success?: boolean(name='success', example='true'),
}

model GetH5PageTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetH5PageTrendResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetH5PageTrend  GetH5PageTrendRequest
  * @return GetH5PageTrendResponse
 */
async function getH5PageTrend(request: GetH5PageTrendRequest): GetH5PageTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetH5PageTrend', 'GET', '/stat/getH5PageTrend', 'json', false, 'json', request);
}

model GetLaunchTrendRequest {
  appVersion?: string(name='appVersion', example='1.0.2', position='Query'),
  dataSourceId: string(name='dataSourceId', description='This parameter is required.', example='5fb6001a73749c24fd9cb356', position='Query'),
  endDate: string(name='endDate', description='This parameter is required.', example='2023-05-03', position='Query'),
  startDate: string(name='startDate', description='This parameter is required.', example='2023-05-01', position='Query'),
  timeUnit: string(name='timeUnit', description='This parameter is required.', example='day', position='Query'),
}

model GetLaunchTrendResponseBody = {
  code?: long(name='code', example='200'),
  data?: [ 
    {
      coldLaunchCount?: long(name='coldLaunchCount', example='2495'),
      coldLaunchDuration?: double(name='coldLaunchDuration', example='3784.5'),
      firstLaunchCount?: long(name='firstLaunchCount', example='2495'),
      firstLaunchDuration?: double(name='firstLaunchDuration', example='3740.5'),
      hotLaunchCount?: long(name='hotLaunchCount', example='2495'),
      hotLaunchDuration?: double(name='hotLaunchDuration', example='1400.5'),
      timePoint?: string(name='timePoint', example='2023-05-20'),
    }
  ](name='data'),
  msg?: string(name='msg', example='succeed in handling request'),
  success?: boolean(name='success', example='true'),
}

model GetLaunchTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLaunchTrendResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLaunchTrend  GetLaunchTrendRequest
  * @return GetLaunchTrendResponse
 */
async function getLaunchTrend(request: GetLaunchTrendRequest): GetLaunchTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLaunchTrend', 'GET', '/stat/getLaunchTrend', 'json', false, 'json', request);
}

model GetNativePageTrendRequest {
  appVersion?: string(name='appVersion', example='1.0.2', position='Query'),
  dataSourceId: string(name='dataSourceId', description='This parameter is required.', example='5fb6001a73749c24fd9cb356', position='Query'),
  endDate: string(name='endDate', description='This parameter is required.', example='2023-05-03', position='Query'),
  startDate: string(name='startDate', description='This parameter is required.', example='2023-05-01', position='Query'),
  timeUnit: string(name='timeUnit', description='This parameter is required.', example='day', position='Query'),
}

model GetNativePageTrendResponseBody = {
  code?: long(name='code', example='200'),
  data?: [ 
    {
      avgLoadDuration?: double(name='avgLoadDuration', example='75.9'),
      crashRate?: double(name='crashRate', example='37.317'),
      loadCnt?: long(name='loadCnt', example='2460'),
      slowLoadRate?: double(name='slowLoadRate', example='99.837'),
      timePoint?: string(name='timePoint', example='2023-05-20'),
    }
  ](name='data'),
  msg?: string(name='msg', example='succeed in handling request'),
  success?: boolean(name='success', example='true'),
}

model GetNativePageTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNativePageTrendResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetNativePageTrend  GetNativePageTrendRequest
  * @return GetNativePageTrendResponse
 */
async function getNativePageTrend(request: GetNativePageTrendRequest): GetNativePageTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetNativePageTrend', 'GET', '/stat/getNativePageTrend', 'json', false, 'json', request);
}

model GetNetworkTrendRequest {
  appVersion?: string(name='appVersion', example='1.0.2', position='Query'),
  dataSourceId: string(name='dataSourceId', description='This parameter is required.', example='5fb6001a73749c24fd9cb356', position='Query'),
  endDate: string(name='endDate', description='This parameter is required.', example='2023-05-03', position='Query'),
  startDate: string(name='startDate', description='This parameter is required.', example='2023-05-01', position='Query'),
  timeUnit: string(name='timeUnit', description='This parameter is required.', example='day', position='Query'),
}

model GetNetworkTrendResponseBody = {
  code?: long(name='code', example='200'),
  data?: [ 
    {
      avgCost?: double(name='avgCost', example='4402.8'),
      avgResponseTime?: double(name='avgResponseTime', example='1654.51'),
      avgTransformBytes?: double(name='avgTransformBytes', example='3299.43'),
      requestPerMinute?: double(name='requestPerMinute', example='1.61'),
      timePoint?: string(name='timePoint', example='2023-05-20'),
    }
  ](name='data'),
  msg?: string(name='msg', example='succeed in handling request'),
  success?: boolean(name='success', example='true'),
}

model GetNetworkTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNetworkTrendResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetNetworkTrend  GetNetworkTrendRequest
  * @return GetNetworkTrendResponse
 */
async function getNetworkTrend(request: GetNetworkTrendRequest): GetNetworkTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetNetworkTrend', 'GET', '/stat/getNetworkTrend', 'json', false, 'json', request);
}

model GetStatTrendRequest {
  appVersion?: string(name='appVersion', example='1.0', position='Query'),
  dataSourceId: string(name='dataSourceId', description='This parameter is required.', example='5fb6001a73749c24fd9cb356', position='Query'),
  endDate?: string(name='endDate', example='2021-06-03', position='Query'),
  startDate?: string(name='startDate', example='2021-06-01', position='Query'),
  type: int32(name='type', description='This parameter is required.', example='1', position='Query'),
}

model GetStatTrendResponseBody = {
  code?: long(name='code', example='200'),
  data?: [ 
    {
      affectedUserCount?: long(name='affectedUserCount', example='52'),
      affectedUserRate?: double(name='affectedUserRate', example='10.3'),
      errorCount?: long(name='errorCount', example='120'),
      errorRate?: double(name='errorRate', example='25.6'),
      timePoint?: string(name='timePoint', example='2021-06-01'),
    }
  ](name='data'),
  msg?: string(name='msg', example='succeed in handling request'),
  success?: boolean(name='success', example='true'),
}

model GetStatTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetStatTrendResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetStatTrend  GetStatTrendRequest
  * @return GetStatTrendResponse
 */
async function getStatTrend(request: GetStatTrendRequest): GetStatTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetStatTrend', 'GET', '/stat/getStatTrend', 'json', false, 'json', request);
}

model GetSymUploadParamRequest {
  appVersion: string(name='appVersion', description='This parameter is required.', example='1.0.3', position='Query'),
  dataSourceId: string(name='dataSourceId', description='This parameter is required.', example='5fb6001a73749c24fd9cb356', position='Query'),
  fileName: string(name='fileName', description='This parameter is required.', example='symbol.zip', position='Query'),
  fileType: int32(name='fileType', description='This parameter is required.', example='1', minimum=1, maximum=7, position='Query'),
  flutterName?: string(name='flutterName', example='my-flutter-app', position='Query'),
}

model GetSymUploadParamResponseBody = {
  code?: long(name='code', example='200'),
  data?: {
    accessKeyId?: string(name='accessKeyId', example='LTAI5tM4ZXXXXX'),
    callback?: string(name='callback', example='eyJjYWxsYmFja1VybCI6Imh0dHBzOi8vYXBtLnVtZW5nLmNvbS9oc2Yvc3ltL29zcy9ub3RpZnlNc2ciLCJjYqc29uIn0='),
    key?: string(name='key', example='tmp/20220428/5fb6001a73749c24fd9cb356_f49a08dc1225438188c109fcf92eb9f3/symbol.zip'),
    policy?: string(name='policy', example='eyJleHBpcmF0aW9uIjoiMjAyMi0wNC0yOFQwNDoxMzo0MS43OTJaIiwiY29uZGl0aW9ucyI6W1siZXEiLCIka2V5IiwidG1WpveGZTSXNJbU5oYkd4aVlXTnJRbTlrZVZSNWNHVWlPaUpoY0hCc2FXTmhkR2x2Ymk5cWMyOXVJbjA9In1dfQ=='),
    signature?: string(name='signature', example='3f67c435e08d164f41f6e522a2b5d1d7feb93000'),
    uploadAddress?: string(name='uploadAddress', example='https://quickbird.oss-cn-shanghai.aliyuncs.com'),
  }(name='data', description='data'),
  msg?: string(name='msg', example='succeed in handling request'),
  success?: boolean(name='success', example='true'),
  traceId?: string(name='traceId', description='traceId', example='210f07c516457690916816858d94ea'),
}

model GetSymUploadParamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSymUploadParamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSymUploadParam  GetSymUploadParamRequest
  * @return GetSymUploadParamResponse
 */
async function getSymUploadParam(request: GetSymUploadParamRequest): GetSymUploadParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSymUploadParam', 'GET', '/getSymUploadParam', 'json', false, 'json', request);
}

model GetTodayStatTrendRequest {
  appVersion?: string(name='appVersion', example='1.0', position='Query'),
  dataSourceId: string(name='dataSourceId', description='This parameter is required.', example='5fb6001a73749c24fd9cb356', position='Query'),
  type: int32(name='type', description='This parameter is required.', example='1', position='Query'),
}

model GetTodayStatTrendResponseBody = {
  code?: long(name='code', example='200'),
  data?: [ 
    {
      affectedUserCount?: long(name='affectedUserCount', example='56'),
      affectedUserRate?: double(name='affectedUserRate', example='10.21'),
      errorCount?: long(name='errorCount', example='120'),
      errorRate?: double(name='errorRate', example='17.24'),
      timePoint?: string(name='timePoint', example='13:00'),
    }
  ](name='data'),
  msg?: string(name='msg', example='succeed in handling request'),
  success?: boolean(name='success', example='true'),
}

model GetTodayStatTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTodayStatTrendResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTodayStatTrend  GetTodayStatTrendRequest
  * @return GetTodayStatTrendResponse
 */
async function getTodayStatTrend(request: GetTodayStatTrendRequest): GetTodayStatTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTodayStatTrend', 'GET', '/stat/getTodayStatTrend', 'json', false, 'json', request);
}

model UpdateAlertPlanRequest {
  dataSourceId: string(name='dataSourceId', description='This parameter is required.', example='5fb6001a73749c24fd9cb356', position='Query'),
  planId: long(name='planId', description='This parameter is required.', example='18288', position='Query'),
  versions: string(name='versions', description='This parameter is required.', example='"1.1.0,1.2.0,1.3.0"', position='Query'),
}

model UpdateAlertPlanResponseBody = {
  code?: long(name='code', example='200'),
  msg?: string(name='msg', example='Success'),
  success?: boolean(name='success', example='true'),
}

model UpdateAlertPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAlertPlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAlertPlan  UpdateAlertPlanRequest
  * @return UpdateAlertPlanResponse
 */
async function updateAlertPlan(request: UpdateAlertPlanRequest): UpdateAlertPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAlertPlan', 'POST', '/updateAlertPlan', 'json', false, 'json', request);
}

