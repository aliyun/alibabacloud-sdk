/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('umeng-apm', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model GetStatTrendRequest {
  appVersion?: string(name='appVersion'),
  dataSourceId?: string(name='dataSourceId'),
  endDate?: string(name='endDate'),
  startDate?: string(name='startDate'),
  type?: int32(name='type'),
}

model GetStatTrendResponseBody = {
  code?: long(name='code'),
  data?: [ 
    {
      affectedUserCount?: long(name='affectedUserCount'),
      affectedUserRate?: long(name='affectedUserRate'),
      errorCount?: long(name='errorCount'),
      errorRate?: long(name='errorRate'),
      timePoint?: string(name='timePoint'),
    }
  ](name='data'),
  msg?: string(name='msg'),
  success?: boolean(name='success'),
}

model GetStatTrendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetStatTrendResponseBody(name='body'),
}

async function getStatTrend(request: GetStatTrendRequest): GetStatTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getStatTrendWithOptions(request, headers, runtime);
}

async function getStatTrendWithOptions(request: GetStatTrendRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetStatTrendResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.appVersion)) {
    query['appVersion'] = request.appVersion;
  }
  if (!Util.isUnset(request.dataSourceId)) {
    query['dataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.endDate)) {
    query['endDate'] = request.endDate;
  }
  if (!Util.isUnset(request.startDate)) {
    query['startDate'] = request.startDate;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetStatTrend',
    version = '2022-02-14',
    protocol = 'HTTPS',
    pathname = `/stat/getStatTrend`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetSymUploadParamRequest {
  appVersion?: string(name='appVersion'),
  dataSourceId?: string(name='dataSourceId'),
  fileName?: string(name='fileName'),
  fileType?: int32(name='fileType'),
}

model GetSymUploadParamResponseBody = {
  code?: long(name='code'),
  data?: {
    accessKeyId?: string(name='accessKeyId'),
    callback?: string(name='callback'),
    key?: string(name='key'),
    policy?: string(name='policy'),
    signature?: string(name='signature'),
    uploadAddress?: string(name='uploadAddress'),
  }(name='data'),
  msg?: string(name='msg'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model GetSymUploadParamResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSymUploadParamResponseBody(name='body'),
}

async function getSymUploadParam(request: GetSymUploadParamRequest): GetSymUploadParamResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSymUploadParamWithOptions(request, headers, runtime);
}

async function getSymUploadParamWithOptions(request: GetSymUploadParamRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSymUploadParamResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.appVersion)) {
    query['appVersion'] = request.appVersion;
  }
  if (!Util.isUnset(request.dataSourceId)) {
    query['dataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.fileName)) {
    query['fileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileType)) {
    query['fileType'] = request.fileType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSymUploadParam',
    version = '2022-02-14',
    protocol = 'HTTPS',
    pathname = `/getSymUploadParam`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetTodayStatTrendRequest {
  appVersion?: string(name='appVersion'),
  dataSourceId?: string(name='dataSourceId'),
  type?: int32(name='type'),
}

model GetTodayStatTrendResponseBody = {
  code?: long(name='code'),
  data?: [ 
    {
      affectedUserCount?: long(name='affectedUserCount'),
      affectedUserRate?: long(name='affectedUserRate'),
      errorCount?: long(name='errorCount'),
      errorRate?: long(name='errorRate'),
      timePoint?: string(name='timePoint'),
    }
  ](name='data'),
  msg?: string(name='msg'),
  success?: boolean(name='success'),
}

model GetTodayStatTrendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTodayStatTrendResponseBody(name='body'),
}

async function getTodayStatTrend(request: GetTodayStatTrendRequest): GetTodayStatTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTodayStatTrendWithOptions(request, headers, runtime);
}

async function getTodayStatTrendWithOptions(request: GetTodayStatTrendRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTodayStatTrendResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.appVersion)) {
    query['appVersion'] = request.appVersion;
  }
  if (!Util.isUnset(request.dataSourceId)) {
    query['dataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTodayStatTrend',
    version = '2022-02-14',
    protocol = 'HTTPS',
    pathname = `/stat/getTodayStatTrend`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

