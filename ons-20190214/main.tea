/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'ons.ap-northeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'ons.aliyuncs.com',
    cn-beijing-finance-pop = 'ons.aliyuncs.com',
    cn-beijing-gov-1 = 'ons.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ons.aliyuncs.com',
    cn-edge-1 = 'ons.aliyuncs.com',
    cn-fujian = 'ons.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ons.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ons.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ons.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ons.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ons.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ons.aliyuncs.com',
    cn-hangzhou-test-306 = 'ons.aliyuncs.com',
    cn-hongkong-finance-pop = 'ons.aliyuncs.com',
    cn-qingdao-nebula = 'ons.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ons.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ons.aliyuncs.com',
    cn-shanghai-inner = 'ons.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ons.aliyuncs.com',
    cn-shenzhen-inner = 'ons.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ons.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ons.aliyuncs.com',
    cn-wuhan = 'ons.aliyuncs.com',
    cn-yushanfang = 'ons.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ons.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ons.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ons.aliyuncs.com',
    eu-west-1-oxs = 'ons.ap-northeast-1.aliyuncs.com',
    rus-west-1-pop = 'ons.ap-northeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('ons', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ListTagResourcesRequest {
  instanceId?: string(name='InstanceId'),
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      instanceId?: string(name='InstanceId'),
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model OnsConsumerAccumulateRequest {
  detail?: boolean(name='Detail'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
}

model OnsConsumerAccumulateResponseBody = {
  data?: {
    consumeTps?: float(name='ConsumeTps'),
    delayTime?: long(name='DelayTime'),
    detailInTopicList?: {
      detailInTopicDo?: [ 
      {
        delayTime?: long(name='DelayTime'),
        lastTimestamp?: long(name='LastTimestamp'),
        topic?: string(name='Topic'),
        totalDiff?: long(name='TotalDiff'),
      }
    ](name='DetailInTopicDo')
    }(name='DetailInTopicList'),
    lastTimestamp?: long(name='LastTimestamp'),
    online?: boolean(name='Online'),
    totalDiff?: long(name='TotalDiff'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model OnsConsumerAccumulateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsConsumerAccumulateResponseBody(name='body'),
}

async function onsConsumerAccumulateWithOptions(request: OnsConsumerAccumulateRequest, runtime: Util.RuntimeOptions): OnsConsumerAccumulateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.detail)) {
    query['Detail'] = request.detail;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsConsumerAccumulate',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsConsumerAccumulate(request: OnsConsumerAccumulateRequest): OnsConsumerAccumulateResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsConsumerAccumulateWithOptions(request, runtime);
}

model OnsConsumerGetConnectionRequest {
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
}

model OnsConsumerGetConnectionResponseBody = {
  data?: {
    connectionList?: {
      connectionDo?: [ 
      {
        clientAddr?: string(name='ClientAddr'),
        clientId?: string(name='ClientId'),
        language?: string(name='Language'),
        version?: string(name='Version'),
      }
    ](name='ConnectionDo')
    }(name='ConnectionList'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model OnsConsumerGetConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsConsumerGetConnectionResponseBody(name='body'),
}

async function onsConsumerGetConnectionWithOptions(request: OnsConsumerGetConnectionRequest, runtime: Util.RuntimeOptions): OnsConsumerGetConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsConsumerGetConnection',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsConsumerGetConnection(request: OnsConsumerGetConnectionRequest): OnsConsumerGetConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsConsumerGetConnectionWithOptions(request, runtime);
}

model OnsConsumerResetOffsetRequest {
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  resetTimestamp?: long(name='ResetTimestamp'),
  topic?: string(name='Topic'),
  type?: int32(name='Type'),
}

model OnsConsumerResetOffsetResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsConsumerResetOffsetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsConsumerResetOffsetResponseBody(name='body'),
}

async function onsConsumerResetOffsetWithOptions(request: OnsConsumerResetOffsetRequest, runtime: Util.RuntimeOptions): OnsConsumerResetOffsetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resetTimestamp)) {
    query['ResetTimestamp'] = request.resetTimestamp;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsConsumerResetOffset',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsConsumerResetOffset(request: OnsConsumerResetOffsetRequest): OnsConsumerResetOffsetResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsConsumerResetOffsetWithOptions(request, runtime);
}

model OnsConsumerStatusRequest {
  detail?: boolean(name='Detail'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  needJstack?: boolean(name='NeedJstack'),
}

model OnsConsumerStatusResponseBody = {
  data?: {
    connectionSet?: {
      connectionDo?: [ 
      {
        clientAddr?: string(name='ClientAddr'),
        clientId?: string(name='ClientId'),
        language?: string(name='Language'),
        remoteIP?: string(name='RemoteIP'),
        version?: string(name='Version'),
      }
    ](name='ConnectionDo')
    }(name='ConnectionSet'),
    consumeModel?: string(name='ConsumeModel'),
    consumeTps?: float(name='ConsumeTps'),
    consumerConnectionInfoList?: {
      consumerConnectionInfoDo?: [ 
      {
        clientId?: string(name='ClientId'),
        connection?: string(name='Connection'),
        consumeModel?: string(name='ConsumeModel'),
        consumeType?: string(name='ConsumeType'),
        jstack?: {
          threadTrackDo?: [ 
          {
            thread?: string(name='Thread'),
            trackList?: {
              track?: [ string ](name='Track')
            }(name='TrackList'),
          }
        ](name='ThreadTrackDo')
        }(name='Jstack'),
        language?: string(name='Language'),
        lastTimeStamp?: long(name='LastTimeStamp'),
        runningDataList?: {
          consumerRunningDataDo?: [ 
          {
            failedCountPerHour?: long(name='FailedCountPerHour'),
            failedTps?: float(name='FailedTps'),
            groupId?: string(name='GroupId'),
            okTps?: float(name='OkTps'),
            rt?: float(name='Rt'),
            topic?: string(name='Topic'),
          }
        ](name='ConsumerRunningDataDo')
        }(name='RunningDataList'),
        startTimeStamp?: long(name='StartTimeStamp'),
        subscriptionSet?: {
          subscriptionData?: [ 
          {
            subString?: string(name='SubString'),
            subVersion?: long(name='SubVersion'),
            tagsSet?: {
              tag?: [ string ](name='Tag')
            }(name='TagsSet'),
            topic?: string(name='Topic'),
          }
        ](name='SubscriptionData')
        }(name='SubscriptionSet'),
        threadCount?: int32(name='ThreadCount'),
        version?: string(name='Version'),
      }
    ](name='ConsumerConnectionInfoDo')
    }(name='ConsumerConnectionInfoList'),
    delayTime?: long(name='DelayTime'),
    detailInTopicList?: {
      detailInTopicDo?: [ 
      {
        delayTime?: long(name='DelayTime'),
        lastTimestamp?: long(name='LastTimestamp'),
        topic?: string(name='Topic'),
        totalDiff?: long(name='TotalDiff'),
      }
    ](name='DetailInTopicDo')
    }(name='DetailInTopicList'),
    instanceId?: string(name='InstanceId'),
    lastTimestamp?: long(name='LastTimestamp'),
    online?: boolean(name='Online'),
    rebalanceOK?: boolean(name='RebalanceOK'),
    subscriptionSame?: boolean(name='SubscriptionSame'),
    totalDiff?: long(name='TotalDiff'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model OnsConsumerStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsConsumerStatusResponseBody(name='body'),
}

async function onsConsumerStatusWithOptions(request: OnsConsumerStatusRequest, runtime: Util.RuntimeOptions): OnsConsumerStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.detail)) {
    query['Detail'] = request.detail;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.needJstack)) {
    query['NeedJstack'] = request.needJstack;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsConsumerStatus',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsConsumerStatus(request: OnsConsumerStatusRequest): OnsConsumerStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsConsumerStatusWithOptions(request, runtime);
}

model OnsConsumerTimeSpanRequest {
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  topic?: string(name='Topic'),
}

model OnsConsumerTimeSpanResponseBody = {
  data?: {
    consumeTimeStamp?: long(name='ConsumeTimeStamp'),
    instanceId?: string(name='InstanceId'),
    maxTimeStamp?: long(name='MaxTimeStamp'),
    minTimeStamp?: long(name='MinTimeStamp'),
    topic?: string(name='Topic'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model OnsConsumerTimeSpanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsConsumerTimeSpanResponseBody(name='body'),
}

async function onsConsumerTimeSpanWithOptions(request: OnsConsumerTimeSpanRequest, runtime: Util.RuntimeOptions): OnsConsumerTimeSpanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsConsumerTimeSpan',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsConsumerTimeSpan(request: OnsConsumerTimeSpanRequest): OnsConsumerTimeSpanResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsConsumerTimeSpanWithOptions(request, runtime);
}

model OnsDLQMessageGetByIdRequest {
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  msgId?: string(name='MsgId'),
}

model OnsDLQMessageGetByIdResponseBody = {
  data?: {
    bodyCRC?: int32(name='BodyCRC'),
    bornHost?: string(name='BornHost'),
    bornTimestamp?: long(name='BornTimestamp'),
    instanceId?: string(name='InstanceId'),
    msgId?: string(name='MsgId'),
    propertyList?: {
      messageProperty?: [ 
      {
        name?: string(name='Name'),
        value?: string(name='Value'),
      }
    ](name='MessageProperty')
    }(name='PropertyList'),
    reconsumeTimes?: int32(name='ReconsumeTimes'),
    storeHost?: string(name='StoreHost'),
    storeSize?: int32(name='StoreSize'),
    storeTimestamp?: long(name='StoreTimestamp'),
    topic?: string(name='Topic'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model OnsDLQMessageGetByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsDLQMessageGetByIdResponseBody(name='body'),
}

async function onsDLQMessageGetByIdWithOptions(request: OnsDLQMessageGetByIdRequest, runtime: Util.RuntimeOptions): OnsDLQMessageGetByIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.msgId)) {
    query['MsgId'] = request.msgId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsDLQMessageGetById',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsDLQMessageGetById(request: OnsDLQMessageGetByIdRequest): OnsDLQMessageGetByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsDLQMessageGetByIdWithOptions(request, runtime);
}

model OnsDLQMessagePageQueryByGroupIdRequest {
  beginTime?: long(name='BeginTime'),
  currentPage?: int32(name='CurrentPage'),
  endTime?: long(name='EndTime'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  pageSize?: int32(name='PageSize'),
  taskId?: string(name='TaskId'),
}

model OnsDLQMessagePageQueryByGroupIdResponseBody = {
  msgFoundDo?: {
    currentPage?: long(name='CurrentPage'),
    maxPageCount?: long(name='MaxPageCount'),
    msgFoundList?: {
      onsRestMessageDo?: [ 
      {
        bodyCRC?: int32(name='BodyCRC'),
        bornHost?: string(name='BornHost'),
        bornTimestamp?: long(name='BornTimestamp'),
        instanceId?: string(name='InstanceId'),
        msgId?: string(name='MsgId'),
        propertyList?: {
          messageProperty?: [ 
          {
            name?: string(name='Name'),
            value?: string(name='Value'),
          }
        ](name='MessageProperty')
        }(name='PropertyList'),
        reconsumeTimes?: int32(name='ReconsumeTimes'),
        storeHost?: string(name='StoreHost'),
        storeSize?: int32(name='StoreSize'),
        storeTimestamp?: long(name='StoreTimestamp'),
        topic?: string(name='Topic'),
      }
    ](name='OnsRestMessageDo')
    }(name='MsgFoundList'),
    taskId?: string(name='TaskId'),
  }(name='MsgFoundDo'),
  requestId?: string(name='RequestId'),
}

model OnsDLQMessagePageQueryByGroupIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsDLQMessagePageQueryByGroupIdResponseBody(name='body'),
}

async function onsDLQMessagePageQueryByGroupIdWithOptions(request: OnsDLQMessagePageQueryByGroupIdRequest, runtime: Util.RuntimeOptions): OnsDLQMessagePageQueryByGroupIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.beginTime)) {
    query['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsDLQMessagePageQueryByGroupId',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsDLQMessagePageQueryByGroupId(request: OnsDLQMessagePageQueryByGroupIdRequest): OnsDLQMessagePageQueryByGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsDLQMessagePageQueryByGroupIdWithOptions(request, runtime);
}

model OnsDLQMessageResendByIdRequest {
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  msgId?: string(name='MsgId'),
}

model OnsDLQMessageResendByIdResponseBody = {
  data?: {
    msgId?: [ string ](name='MsgId')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model OnsDLQMessageResendByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsDLQMessageResendByIdResponseBody(name='body'),
}

async function onsDLQMessageResendByIdWithOptions(request: OnsDLQMessageResendByIdRequest, runtime: Util.RuntimeOptions): OnsDLQMessageResendByIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.msgId)) {
    query['MsgId'] = request.msgId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsDLQMessageResendById',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsDLQMessageResendById(request: OnsDLQMessageResendByIdRequest): OnsDLQMessageResendByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsDLQMessageResendByIdWithOptions(request, runtime);
}

model OnsGroupConsumerUpdateRequest {
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  readEnable?: boolean(name='ReadEnable'),
}

model OnsGroupConsumerUpdateResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsGroupConsumerUpdateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsGroupConsumerUpdateResponseBody(name='body'),
}

async function onsGroupConsumerUpdateWithOptions(request: OnsGroupConsumerUpdateRequest, runtime: Util.RuntimeOptions): OnsGroupConsumerUpdateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.readEnable)) {
    query['ReadEnable'] = request.readEnable;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsGroupConsumerUpdate',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsGroupConsumerUpdate(request: OnsGroupConsumerUpdateRequest): OnsGroupConsumerUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsGroupConsumerUpdateWithOptions(request, runtime);
}

model OnsGroupCreateRequest {
  groupId?: string(name='GroupId'),
  groupType?: string(name='GroupType'),
  instanceId?: string(name='InstanceId'),
  remark?: string(name='Remark'),
}

model OnsGroupCreateResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsGroupCreateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsGroupCreateResponseBody(name='body'),
}

async function onsGroupCreateWithOptions(request: OnsGroupCreateRequest, runtime: Util.RuntimeOptions): OnsGroupCreateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsGroupCreate',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsGroupCreate(request: OnsGroupCreateRequest): OnsGroupCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsGroupCreateWithOptions(request, runtime);
}

model OnsGroupDeleteRequest {
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
}

model OnsGroupDeleteResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsGroupDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsGroupDeleteResponseBody(name='body'),
}

async function onsGroupDeleteWithOptions(request: OnsGroupDeleteRequest, runtime: Util.RuntimeOptions): OnsGroupDeleteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsGroupDelete',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsGroupDelete(request: OnsGroupDeleteRequest): OnsGroupDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsGroupDeleteWithOptions(request, runtime);
}

model OnsGroupListRequest {
  groupId?: string(name='GroupId'),
  groupType?: string(name='GroupType'),
  instanceId?: string(name='InstanceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model OnsGroupListResponseBody = {
  data?: {
    subscribeInfoDo?: [ 
    {
      createTime?: long(name='CreateTime'),
      groupId?: string(name='GroupId'),
      groupType?: string(name='GroupType'),
      independentNaming?: boolean(name='IndependentNaming'),
      instanceId?: string(name='InstanceId'),
      owner?: string(name='Owner'),
      remark?: string(name='Remark'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='SubscribeInfoDo')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model OnsGroupListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsGroupListResponseBody(name='body'),
}

async function onsGroupListWithOptions(request: OnsGroupListRequest, runtime: Util.RuntimeOptions): OnsGroupListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsGroupList',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsGroupList(request: OnsGroupListRequest): OnsGroupListResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsGroupListWithOptions(request, runtime);
}

model OnsGroupSubDetailRequest {
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
}

model OnsGroupSubDetailResponseBody = {
  data?: {
    groupId?: string(name='GroupId'),
    messageModel?: string(name='MessageModel'),
    online?: boolean(name='Online'),
    subscriptionDataList?: {
      subscriptionDataList?: [ 
      {
        subString?: string(name='SubString'),
        topic?: string(name='Topic'),
      }
    ](name='SubscriptionDataList')
    }(name='SubscriptionDataList'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model OnsGroupSubDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsGroupSubDetailResponseBody(name='body'),
}

async function onsGroupSubDetailWithOptions(request: OnsGroupSubDetailRequest, runtime: Util.RuntimeOptions): OnsGroupSubDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsGroupSubDetail',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsGroupSubDetail(request: OnsGroupSubDetailRequest): OnsGroupSubDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsGroupSubDetailWithOptions(request, runtime);
}

model OnsInstanceBaseInfoRequest {
  instanceId?: string(name='InstanceId'),
}

model OnsInstanceBaseInfoResponseBody = {
  instanceBaseInfo?: {
    createTime?: string(name='CreateTime'),
    endpoints?: {
      httpInternalEndpoint?: string(name='HttpInternalEndpoint'),
      httpInternetEndpoint?: string(name='HttpInternetEndpoint'),
      httpInternetSecureEndpoint?: string(name='HttpInternetSecureEndpoint'),
      tcpEndpoint?: string(name='TcpEndpoint'),
      tcpInternetEndpoint?: string(name='TcpInternetEndpoint'),
    }(name='Endpoints'),
    independentNaming?: boolean(name='IndependentNaming'),
    instanceId?: string(name='InstanceId'),
    instanceName?: string(name='InstanceName'),
    instanceStatus?: int32(name='InstanceStatus'),
    instanceType?: int32(name='InstanceType'),
    maxTps?: long(name='MaxTps'),
    releaseTime?: long(name='ReleaseTime'),
    remark?: string(name='Remark'),
    topicCapacity?: int32(name='TopicCapacity'),
    spInstanceId?: string(name='spInstanceId'),
    spInstanceType?: int32(name='spInstanceType'),
  }(name='InstanceBaseInfo'),
  requestId?: string(name='RequestId'),
}

model OnsInstanceBaseInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsInstanceBaseInfoResponseBody(name='body'),
}

async function onsInstanceBaseInfoWithOptions(request: OnsInstanceBaseInfoRequest, runtime: Util.RuntimeOptions): OnsInstanceBaseInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsInstanceBaseInfo',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsInstanceBaseInfo(request: OnsInstanceBaseInfoRequest): OnsInstanceBaseInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsInstanceBaseInfoWithOptions(request, runtime);
}

model OnsInstanceCreateRequest {
  instanceName?: string(name='InstanceName'),
  remark?: string(name='Remark'),
}

model OnsInstanceCreateResponseBody = {
  data?: {
    instanceId?: string(name='InstanceId'),
    instanceType?: int32(name='InstanceType'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model OnsInstanceCreateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsInstanceCreateResponseBody(name='body'),
}

async function onsInstanceCreateWithOptions(request: OnsInstanceCreateRequest, runtime: Util.RuntimeOptions): OnsInstanceCreateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsInstanceCreate',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsInstanceCreate(request: OnsInstanceCreateRequest): OnsInstanceCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsInstanceCreateWithOptions(request, runtime);
}

model OnsInstanceDeleteRequest {
  instanceId?: string(name='InstanceId'),
}

model OnsInstanceDeleteResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsInstanceDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsInstanceDeleteResponseBody(name='body'),
}

async function onsInstanceDeleteWithOptions(request: OnsInstanceDeleteRequest, runtime: Util.RuntimeOptions): OnsInstanceDeleteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsInstanceDelete',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsInstanceDelete(request: OnsInstanceDeleteRequest): OnsInstanceDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsInstanceDeleteWithOptions(request, runtime);
}

model OnsInstanceInServiceListRequest {
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model OnsInstanceInServiceListResponseBody = {
  data?: {
    instanceVO?: [ 
    {
      createTime?: long(name='CreateTime'),
      independentNaming?: boolean(name='IndependentNaming'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceStatus?: int32(name='InstanceStatus'),
      instanceType?: int32(name='InstanceType'),
      releaseTime?: long(name='ReleaseTime'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
    }
  ](name='InstanceVO')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model OnsInstanceInServiceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsInstanceInServiceListResponseBody(name='body'),
}

async function onsInstanceInServiceListWithOptions(request: OnsInstanceInServiceListRequest, runtime: Util.RuntimeOptions): OnsInstanceInServiceListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsInstanceInServiceList',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsInstanceInServiceList(request: OnsInstanceInServiceListRequest): OnsInstanceInServiceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsInstanceInServiceListWithOptions(request, runtime);
}

model OnsInstanceUpdateRequest {
  instanceId?: string(name='InstanceId'),
  instanceName?: string(name='InstanceName'),
  remark?: string(name='Remark'),
}

model OnsInstanceUpdateResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsInstanceUpdateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsInstanceUpdateResponseBody(name='body'),
}

async function onsInstanceUpdateWithOptions(request: OnsInstanceUpdateRequest, runtime: Util.RuntimeOptions): OnsInstanceUpdateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsInstanceUpdate',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsInstanceUpdate(request: OnsInstanceUpdateRequest): OnsInstanceUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsInstanceUpdateWithOptions(request, runtime);
}

model OnsMessageGetByKeyRequest {
  instanceId?: string(name='InstanceId'),
  key?: string(name='Key'),
  topic?: string(name='Topic'),
}

model OnsMessageGetByKeyResponseBody = {
  data?: {
    onsRestMessageDo?: [ 
    {
      bodyCRC?: int32(name='BodyCRC'),
      bornHost?: string(name='BornHost'),
      bornTimestamp?: long(name='BornTimestamp'),
      instanceId?: string(name='InstanceId'),
      msgId?: string(name='MsgId'),
      propertyList?: {
        messageProperty?: [ 
        {
          name?: string(name='Name'),
          value?: string(name='Value'),
        }
      ](name='MessageProperty')
      }(name='PropertyList'),
      reconsumeTimes?: int32(name='ReconsumeTimes'),
      storeHost?: string(name='StoreHost'),
      storeSize?: int32(name='StoreSize'),
      storeTimestamp?: long(name='StoreTimestamp'),
      topic?: string(name='Topic'),
    }
  ](name='OnsRestMessageDo')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model OnsMessageGetByKeyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsMessageGetByKeyResponseBody(name='body'),
}

async function onsMessageGetByKeyWithOptions(request: OnsMessageGetByKeyRequest, runtime: Util.RuntimeOptions): OnsMessageGetByKeyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsMessageGetByKey',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsMessageGetByKey(request: OnsMessageGetByKeyRequest): OnsMessageGetByKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsMessageGetByKeyWithOptions(request, runtime);
}

model OnsMessageGetByMsgIdRequest {
  instanceId?: string(name='InstanceId'),
  msgId?: string(name='MsgId'),
  topic?: string(name='Topic'),
}

model OnsMessageGetByMsgIdResponseBody = {
  data?: {
    bodyCRC?: int32(name='BodyCRC'),
    bornHost?: string(name='BornHost'),
    bornTimestamp?: long(name='BornTimestamp'),
    instanceId?: string(name='InstanceId'),
    msgId?: string(name='MsgId'),
    propertyList?: {
      messageProperty?: [ 
      {
        name?: string(name='Name'),
        value?: string(name='Value'),
      }
    ](name='MessageProperty')
    }(name='PropertyList'),
    reconsumeTimes?: int32(name='ReconsumeTimes'),
    storeHost?: string(name='StoreHost'),
    storeSize?: int32(name='StoreSize'),
    storeTimestamp?: long(name='StoreTimestamp'),
    topic?: string(name='Topic'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model OnsMessageGetByMsgIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsMessageGetByMsgIdResponseBody(name='body'),
}

async function onsMessageGetByMsgIdWithOptions(request: OnsMessageGetByMsgIdRequest, runtime: Util.RuntimeOptions): OnsMessageGetByMsgIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.msgId)) {
    query['MsgId'] = request.msgId;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsMessageGetByMsgId',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsMessageGetByMsgId(request: OnsMessageGetByMsgIdRequest): OnsMessageGetByMsgIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsMessageGetByMsgIdWithOptions(request, runtime);
}

model OnsMessagePageQueryByTopicRequest {
  beginTime?: long(name='BeginTime'),
  currentPage?: int32(name='CurrentPage'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  pageSize?: int32(name='PageSize'),
  taskId?: string(name='TaskId'),
  topic?: string(name='Topic'),
}

model OnsMessagePageQueryByTopicResponseBody = {
  msgFoundDo?: {
    currentPage?: long(name='CurrentPage'),
    maxPageCount?: long(name='MaxPageCount'),
    msgFoundList?: {
      onsRestMessageDo?: [ 
      {
        bodyCRC?: int32(name='BodyCRC'),
        bornHost?: string(name='BornHost'),
        bornTimestamp?: long(name='BornTimestamp'),
        instanceId?: string(name='InstanceId'),
        msgId?: string(name='MsgId'),
        propertyList?: {
          messageProperty?: [ 
          {
            name?: string(name='Name'),
            value?: string(name='Value'),
          }
        ](name='MessageProperty')
        }(name='PropertyList'),
        reconsumeTimes?: int32(name='ReconsumeTimes'),
        storeHost?: string(name='StoreHost'),
        storeSize?: int32(name='StoreSize'),
        storeTimestamp?: long(name='StoreTimestamp'),
        topic?: string(name='Topic'),
      }
    ](name='OnsRestMessageDo')
    }(name='MsgFoundList'),
    taskId?: string(name='TaskId'),
  }(name='MsgFoundDo'),
  requestId?: string(name='RequestId'),
}

model OnsMessagePageQueryByTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsMessagePageQueryByTopicResponseBody(name='body'),
}

async function onsMessagePageQueryByTopicWithOptions(request: OnsMessagePageQueryByTopicRequest, runtime: Util.RuntimeOptions): OnsMessagePageQueryByTopicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.beginTime)) {
    query['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsMessagePageQueryByTopic',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsMessagePageQueryByTopic(request: OnsMessagePageQueryByTopicRequest): OnsMessagePageQueryByTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsMessagePageQueryByTopicWithOptions(request, runtime);
}

model OnsMessagePushRequest {
  clientId?: string(name='ClientId'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  msgId?: string(name='MsgId'),
  topic?: string(name='Topic'),
}

model OnsMessagePushResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsMessagePushResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsMessagePushResponseBody(name='body'),
}

async function onsMessagePushWithOptions(request: OnsMessagePushRequest, runtime: Util.RuntimeOptions): OnsMessagePushResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.msgId)) {
    query['MsgId'] = request.msgId;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsMessagePush',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsMessagePush(request: OnsMessagePushRequest): OnsMessagePushResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsMessagePushWithOptions(request, runtime);
}

model OnsMessageTraceRequest {
  instanceId?: string(name='InstanceId'),
  msgId?: string(name='MsgId'),
  topic?: string(name='Topic'),
}

model OnsMessageTraceResponseBody = {
  data?: {
    messageTrack?: [ 
    {
      consumerGroup?: string(name='ConsumerGroup'),
      instanceId?: string(name='InstanceId'),
      trackType?: string(name='TrackType'),
    }
  ](name='MessageTrack')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model OnsMessageTraceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsMessageTraceResponseBody(name='body'),
}

async function onsMessageTraceWithOptions(request: OnsMessageTraceRequest, runtime: Util.RuntimeOptions): OnsMessageTraceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.msgId)) {
    query['MsgId'] = request.msgId;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsMessageTrace',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsMessageTrace(request: OnsMessageTraceRequest): OnsMessageTraceResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsMessageTraceWithOptions(request, runtime);
}

model OnsRegionListResponseBody = {
  data?: {
    regionDo?: [ 
    {
      onsRegionId?: string(name='OnsRegionId'),
      regionName?: string(name='RegionName'),
    }
  ](name='RegionDo')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model OnsRegionListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsRegionListResponseBody(name='body'),
}

async function onsRegionListWithOptions(runtime: Util.RuntimeOptions): OnsRegionListResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'OnsRegionList',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsRegionList(): OnsRegionListResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsRegionListWithOptions(runtime);
}

model OnsTopicCreateRequest {
  instanceId?: string(name='InstanceId'),
  messageType?: int32(name='MessageType'),
  remark?: string(name='Remark'),
  topic?: string(name='Topic'),
}

model OnsTopicCreateResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsTopicCreateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsTopicCreateResponseBody(name='body'),
}

async function onsTopicCreateWithOptions(request: OnsTopicCreateRequest, runtime: Util.RuntimeOptions): OnsTopicCreateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.messageType)) {
    query['MessageType'] = request.messageType;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsTopicCreate',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsTopicCreate(request: OnsTopicCreateRequest): OnsTopicCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTopicCreateWithOptions(request, runtime);
}

model OnsTopicDeleteRequest {
  instanceId?: string(name='InstanceId'),
  topic?: string(name='Topic'),
}

model OnsTopicDeleteResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsTopicDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsTopicDeleteResponseBody(name='body'),
}

async function onsTopicDeleteWithOptions(request: OnsTopicDeleteRequest, runtime: Util.RuntimeOptions): OnsTopicDeleteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsTopicDelete',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsTopicDelete(request: OnsTopicDeleteRequest): OnsTopicDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTopicDeleteWithOptions(request, runtime);
}

model OnsTopicListRequest {
  instanceId?: string(name='InstanceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  topic?: string(name='Topic'),
  userId?: string(name='UserId'),
}

model OnsTopicListResponseBody = {
  data?: {
    publishInfoDo?: [ 
    {
      createTime?: long(name='CreateTime'),
      independentNaming?: boolean(name='IndependentNaming'),
      instanceId?: string(name='InstanceId'),
      messageType?: int32(name='MessageType'),
      owner?: string(name='Owner'),
      relation?: int32(name='Relation'),
      relationName?: string(name='RelationName'),
      remark?: string(name='Remark'),
      serviceStatus?: int32(name='ServiceStatus'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      topic?: string(name='Topic'),
    }
  ](name='PublishInfoDo')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model OnsTopicListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsTopicListResponseBody(name='body'),
}

async function onsTopicListWithOptions(request: OnsTopicListRequest, runtime: Util.RuntimeOptions): OnsTopicListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsTopicList',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsTopicList(request: OnsTopicListRequest): OnsTopicListResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTopicListWithOptions(request, runtime);
}

model OnsTopicStatusRequest {
  instanceId?: string(name='InstanceId'),
  topic?: string(name='Topic'),
}

model OnsTopicStatusResponseBody = {
  data?: {
    lastTimeStamp?: long(name='LastTimeStamp'),
    perm?: int32(name='Perm'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model OnsTopicStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsTopicStatusResponseBody(name='body'),
}

async function onsTopicStatusWithOptions(request: OnsTopicStatusRequest, runtime: Util.RuntimeOptions): OnsTopicStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsTopicStatus',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsTopicStatus(request: OnsTopicStatusRequest): OnsTopicStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTopicStatusWithOptions(request, runtime);
}

model OnsTopicSubDetailRequest {
  instanceId?: string(name='InstanceId'),
  topic?: string(name='Topic'),
}

model OnsTopicSubDetailResponseBody = {
  data?: {
    subscriptionDataList?: {
      subscriptionDataList?: [ 
      {
        groupId?: string(name='GroupId'),
        messageModel?: string(name='MessageModel'),
        subString?: string(name='SubString'),
      }
    ](name='SubscriptionDataList')
    }(name='SubscriptionDataList'),
    topic?: string(name='Topic'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model OnsTopicSubDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsTopicSubDetailResponseBody(name='body'),
}

async function onsTopicSubDetailWithOptions(request: OnsTopicSubDetailRequest, runtime: Util.RuntimeOptions): OnsTopicSubDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsTopicSubDetail',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsTopicSubDetail(request: OnsTopicSubDetailRequest): OnsTopicSubDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTopicSubDetailWithOptions(request, runtime);
}

model OnsTopicUpdateRequest {
  instanceId?: string(name='InstanceId'),
  perm?: int32(name='Perm'),
  topic?: string(name='Topic'),
}

model OnsTopicUpdateResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsTopicUpdateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsTopicUpdateResponseBody(name='body'),
}

async function onsTopicUpdateWithOptions(request: OnsTopicUpdateRequest, runtime: Util.RuntimeOptions): OnsTopicUpdateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.perm)) {
    query['Perm'] = request.perm;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsTopicUpdate',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsTopicUpdate(request: OnsTopicUpdateRequest): OnsTopicUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTopicUpdateWithOptions(request, runtime);
}

model OnsTraceGetResultRequest {
  queryId?: string(name='QueryId'),
}

model OnsTraceGetResultResponseBody = {
  requestId?: string(name='RequestId'),
  traceData?: {
    createTime?: long(name='CreateTime'),
    instanceId?: string(name='InstanceId'),
    msgId?: string(name='MsgId'),
    msgKey?: string(name='MsgKey'),
    queryId?: string(name='QueryId'),
    status?: string(name='Status'),
    topic?: string(name='Topic'),
    traceList?: {
      traceMapDo?: [ 
      {
        bornHost?: string(name='BornHost'),
        costTime?: int32(name='CostTime'),
        msgId?: string(name='MsgId'),
        msgKey?: string(name='MsgKey'),
        pubGroupName?: string(name='PubGroupName'),
        pubTime?: long(name='PubTime'),
        status?: string(name='Status'),
        subList?: {
          subMapDo?: [ 
          {
            clientList?: {
              subClientInfoDo?: [ 
              {
                clientHost?: string(name='ClientHost'),
                costTime?: int32(name='CostTime'),
                reconsumeTimes?: int32(name='ReconsumeTimes'),
                status?: string(name='Status'),
                subGroupName?: string(name='SubGroupName'),
                subTime?: long(name='SubTime'),
              }
            ](name='SubClientInfoDo')
            }(name='ClientList'),
            failCount?: int32(name='FailCount'),
            subGroupName?: string(name='SubGroupName'),
            successCount?: int32(name='SuccessCount'),
          }
        ](name='SubMapDo')
        }(name='SubList'),
        tag?: string(name='Tag'),
        topic?: string(name='Topic'),
      }
    ](name='TraceMapDo')
    }(name='TraceList'),
    updateTime?: long(name='UpdateTime'),
    userId?: string(name='UserId'),
  }(name='TraceData'),
}

model OnsTraceGetResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsTraceGetResultResponseBody(name='body'),
}

async function onsTraceGetResultWithOptions(request: OnsTraceGetResultRequest, runtime: Util.RuntimeOptions): OnsTraceGetResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.queryId)) {
    query['QueryId'] = request.queryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsTraceGetResult',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsTraceGetResult(request: OnsTraceGetResultRequest): OnsTraceGetResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTraceGetResultWithOptions(request, runtime);
}

model OnsTraceQueryByMsgIdRequest {
  beginTime?: long(name='BeginTime'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  msgId?: string(name='MsgId'),
  topic?: string(name='Topic'),
}

model OnsTraceQueryByMsgIdResponseBody = {
  queryId?: string(name='QueryId'),
  requestId?: string(name='RequestId'),
}

model OnsTraceQueryByMsgIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsTraceQueryByMsgIdResponseBody(name='body'),
}

async function onsTraceQueryByMsgIdWithOptions(request: OnsTraceQueryByMsgIdRequest, runtime: Util.RuntimeOptions): OnsTraceQueryByMsgIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.beginTime)) {
    query['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.msgId)) {
    query['MsgId'] = request.msgId;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsTraceQueryByMsgId',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsTraceQueryByMsgId(request: OnsTraceQueryByMsgIdRequest): OnsTraceQueryByMsgIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTraceQueryByMsgIdWithOptions(request, runtime);
}

model OnsTraceQueryByMsgKeyRequest {
  beginTime?: long(name='BeginTime'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  msgKey?: string(name='MsgKey'),
  topic?: string(name='Topic'),
}

model OnsTraceQueryByMsgKeyResponseBody = {
  queryId?: string(name='QueryId'),
  requestId?: string(name='RequestId'),
}

model OnsTraceQueryByMsgKeyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsTraceQueryByMsgKeyResponseBody(name='body'),
}

async function onsTraceQueryByMsgKeyWithOptions(request: OnsTraceQueryByMsgKeyRequest, runtime: Util.RuntimeOptions): OnsTraceQueryByMsgKeyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.beginTime)) {
    query['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.msgKey)) {
    query['MsgKey'] = request.msgKey;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsTraceQueryByMsgKey',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsTraceQueryByMsgKey(request: OnsTraceQueryByMsgKeyRequest): OnsTraceQueryByMsgKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTraceQueryByMsgKeyWithOptions(request, runtime);
}

model OnsTrendGroupOutputTpsRequest {
  beginTime?: long(name='BeginTime'),
  endTime?: long(name='EndTime'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  period?: long(name='Period'),
  topic?: string(name='Topic'),
  type?: int32(name='Type'),
}

model OnsTrendGroupOutputTpsResponseBody = {
  data?: {
    records?: {
      statsDataDo?: [ 
      {
        x?: long(name='X'),
        y?: float(name='Y'),
      }
    ](name='StatsDataDo')
    }(name='Records'),
    title?: string(name='Title'),
    XUnit?: string(name='XUnit'),
    YUnit?: string(name='YUnit'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model OnsTrendGroupOutputTpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsTrendGroupOutputTpsResponseBody(name='body'),
}

async function onsTrendGroupOutputTpsWithOptions(request: OnsTrendGroupOutputTpsRequest, runtime: Util.RuntimeOptions): OnsTrendGroupOutputTpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.beginTime)) {
    query['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsTrendGroupOutputTps',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsTrendGroupOutputTps(request: OnsTrendGroupOutputTpsRequest): OnsTrendGroupOutputTpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTrendGroupOutputTpsWithOptions(request, runtime);
}

model OnsTrendTopicInputTpsRequest {
  beginTime?: long(name='BeginTime'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  period?: long(name='Period'),
  topic?: string(name='Topic'),
  type?: int32(name='Type'),
}

model OnsTrendTopicInputTpsResponseBody = {
  data?: {
    records?: {
      statsDataDo?: [ 
      {
        x?: long(name='X'),
        y?: float(name='Y'),
      }
    ](name='StatsDataDo')
    }(name='Records'),
    title?: string(name='Title'),
    XUnit?: string(name='XUnit'),
    YUnit?: string(name='YUnit'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model OnsTrendTopicInputTpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OnsTrendTopicInputTpsResponseBody(name='body'),
}

async function onsTrendTopicInputTpsWithOptions(request: OnsTrendTopicInputTpsRequest, runtime: Util.RuntimeOptions): OnsTrendTopicInputTpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.beginTime)) {
    query['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnsTrendTopicInputTps',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function onsTrendTopicInputTps(request: OnsTrendTopicInputTpsRequest): OnsTrendTopicInputTpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTrendTopicInputTpsWithOptions(request, runtime);
}

model OpenOnsServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenOnsServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenOnsServiceResponseBody(name='body'),
}

async function openOnsServiceWithOptions(runtime: Util.RuntimeOptions): OpenOnsServiceResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'OpenOnsService',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openOnsService(): OpenOnsServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openOnsServiceWithOptions(runtime);
}

model TagResourcesRequest {
  instanceId?: string(name='InstanceId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All'),
  instanceId?: string(name='InstanceId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2019-02-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

