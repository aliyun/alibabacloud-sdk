/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    ap-northeast-2-pop = 'ons.ap-northeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'ons.aliyuncs.com',
    cn-beijing-finance-pop = 'ons.aliyuncs.com',
    cn-beijing-gov-1 = 'ons.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ons.aliyuncs.com',
    cn-edge-1 = 'ons.aliyuncs.com',
    cn-fujian = 'ons.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ons.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ons.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ons.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ons.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ons.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ons.aliyuncs.com',
    cn-hangzhou-test-306 = 'ons.aliyuncs.com',
    cn-hongkong-finance-pop = 'ons.aliyuncs.com',
    cn-qingdao-nebula = 'ons.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ons.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ons.aliyuncs.com',
    cn-shanghai-inner = 'ons.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ons.aliyuncs.com',
    cn-shenzhen-inner = 'ons.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ons.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ons.aliyuncs.com',
    cn-wuhan = 'ons.aliyuncs.com',
    cn-yushanfang = 'ons.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ons.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ons.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ons.aliyuncs.com',
    eu-west-1-oxs = 'ons.ap-northeast-1.aliyuncs.com',
    rus-west-1-pop = 'ons.ap-northeast-1.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('ons', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ListTagResourcesRequest {
  instanceId?: string(name='InstanceId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  resourceId?: [ string ](name='ResourceId'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceType?: string(name='ResourceType'),
      instanceId?: string(name='InstanceId'),
      tagValue?: string(name='TagValue'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model OnsConsumerAccumulateRequest {
  groupId?: string(name='GroupId'),
  detail?: boolean(name='Detail'),
  instanceId?: string(name='InstanceId'),
}

model OnsConsumerAccumulateResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    consumeTps?: float(name='ConsumeTps'),
    delayTime?: long(name='DelayTime'),
    lastTimestamp?: long(name='LastTimestamp'),
    totalDiff?: long(name='TotalDiff'),
    online?: boolean(name='Online'),
    detailInTopicList?: {
      detailInTopicDo?: [ 
      {
        delayTime?: long(name='DelayTime'),
        totalDiff?: long(name='TotalDiff'),
        lastTimestamp?: long(name='LastTimestamp'),
        topic?: string(name='Topic'),
      }
    ](name='DetailInTopicDo')
    }(name='DetailInTopicList'),
  }(name='Data'),
}

model OnsConsumerAccumulateResponse = {
  headers: map[string]string(name='headers'),
  body: OnsConsumerAccumulateResponseBody(name='body'),
}

async function onsConsumerAccumulateWithOptions(request: OnsConsumerAccumulateRequest, runtime: Util.RuntimeOptions): OnsConsumerAccumulateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsConsumerAccumulate', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsConsumerAccumulate(request: OnsConsumerAccumulateRequest): OnsConsumerAccumulateResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsConsumerAccumulateWithOptions(request, runtime);
}

model OnsConsumerGetConnectionRequest {
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
}

model OnsConsumerGetConnectionResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    connectionList?: {
      connectionDo?: [ 
      {
        version?: string(name='Version'),
        clientAddr?: string(name='ClientAddr'),
        language?: string(name='Language'),
        clientId?: string(name='ClientId'),
      }
    ](name='ConnectionDo')
    }(name='ConnectionList'),
  }(name='Data'),
}

model OnsConsumerGetConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: OnsConsumerGetConnectionResponseBody(name='body'),
}

async function onsConsumerGetConnectionWithOptions(request: OnsConsumerGetConnectionRequest, runtime: Util.RuntimeOptions): OnsConsumerGetConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsConsumerGetConnection', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsConsumerGetConnection(request: OnsConsumerGetConnectionRequest): OnsConsumerGetConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsConsumerGetConnectionWithOptions(request, runtime);
}

model OnsConsumerResetOffsetRequest {
  groupId?: string(name='GroupId'),
  topic?: string(name='Topic'),
  type?: int32(name='Type'),
  resetTimestamp?: long(name='ResetTimestamp'),
  instanceId?: string(name='InstanceId'),
}

model OnsConsumerResetOffsetResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsConsumerResetOffsetResponse = {
  headers: map[string]string(name='headers'),
  body: OnsConsumerResetOffsetResponseBody(name='body'),
}

async function onsConsumerResetOffsetWithOptions(request: OnsConsumerResetOffsetRequest, runtime: Util.RuntimeOptions): OnsConsumerResetOffsetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsConsumerResetOffset', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsConsumerResetOffset(request: OnsConsumerResetOffsetRequest): OnsConsumerResetOffsetResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsConsumerResetOffsetWithOptions(request, runtime);
}

model OnsConsumerStatusRequest {
  groupId?: string(name='GroupId'),
  detail?: boolean(name='Detail'),
  needJstack?: boolean(name='NeedJstack'),
  instanceId?: string(name='InstanceId'),
}

model OnsConsumerStatusResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    consumeTps?: float(name='ConsumeTps'),
    consumeModel?: string(name='ConsumeModel'),
    connectionSet?: {
      connectionDo?: [ 
      {
        remoteIP?: string(name='RemoteIP'),
        version?: string(name='Version'),
        clientAddr?: string(name='ClientAddr'),
        language?: string(name='Language'),
        clientId?: string(name='ClientId'),
      }
    ](name='ConnectionDo')
    }(name='ConnectionSet'),
    totalDiff?: long(name='TotalDiff'),
    consumerConnectionInfoList?: {
      consumerConnectionInfoDo?: [ 
      {
        consumeModel?: string(name='ConsumeModel'),
        runningDataList?: {
          consumerRunningDataDo?: [ 
          {
            groupId?: string(name='GroupId'),
            rt?: float(name='Rt'),
            topic?: string(name='Topic'),
            failedCountPerHour?: long(name='FailedCountPerHour'),
            okTps?: float(name='OkTps'),
            failedTps?: float(name='FailedTps'),
          }
        ](name='ConsumerRunningDataDo')
        }(name='RunningDataList'),
        subscriptionSet?: {
          subscriptionData?: [ 
          {
            subString?: string(name='SubString'),
            subVersion?: long(name='SubVersion'),
            topic?: string(name='Topic'),
            tagsSet?: {
              tag?: [ string ](name='Tag')
            }(name='TagsSet'),
          }
        ](name='SubscriptionData')
        }(name='SubscriptionSet'),
        jstack?: {
          threadTrackDo?: [ 
          {
            trackList?: {
              track?: [ string ](name='Track')
            }(name='TrackList'),
            thread?: string(name='Thread'),
          }
        ](name='ThreadTrackDo')
        }(name='Jstack'),
        lastTimeStamp?: long(name='LastTimeStamp'),
        startTimeStamp?: long(name='StartTimeStamp'),
        language?: string(name='Language'),
        clientId?: string(name='ClientId'),
        connection?: string(name='Connection'),
        version?: string(name='Version'),
        consumeType?: string(name='ConsumeType'),
        threadCount?: int32(name='ThreadCount'),
      }
    ](name='ConsumerConnectionInfoDo')
    }(name='ConsumerConnectionInfoList'),
    instanceId?: string(name='InstanceId'),
    detailInTopicList?: {
      detailInTopicDo?: [ 
      {
        delayTime?: long(name='DelayTime'),
        totalDiff?: long(name='TotalDiff'),
        lastTimestamp?: long(name='LastTimestamp'),
        topic?: string(name='Topic'),
      }
    ](name='DetailInTopicDo')
    }(name='DetailInTopicList'),
    subscriptionSame?: boolean(name='SubscriptionSame'),
    delayTime?: long(name='DelayTime'),
    lastTimestamp?: long(name='LastTimestamp'),
    online?: boolean(name='Online'),
    rebalanceOK?: boolean(name='RebalanceOK'),
  }(name='Data'),
}

model OnsConsumerStatusResponse = {
  headers: map[string]string(name='headers'),
  body: OnsConsumerStatusResponseBody(name='body'),
}

async function onsConsumerStatusWithOptions(request: OnsConsumerStatusRequest, runtime: Util.RuntimeOptions): OnsConsumerStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsConsumerStatus', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsConsumerStatus(request: OnsConsumerStatusRequest): OnsConsumerStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsConsumerStatusWithOptions(request, runtime);
}

model OnsConsumerTimeSpanRequest {
  groupId?: string(name='GroupId'),
  topic?: string(name='Topic'),
  instanceId?: string(name='InstanceId'),
}

model OnsConsumerTimeSpanResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    maxTimeStamp?: long(name='MaxTimeStamp'),
    consumeTimeStamp?: long(name='ConsumeTimeStamp'),
    topic?: string(name='Topic'),
    minTimeStamp?: long(name='MinTimeStamp'),
    instanceId?: string(name='InstanceId'),
  }(name='Data'),
}

model OnsConsumerTimeSpanResponse = {
  headers: map[string]string(name='headers'),
  body: OnsConsumerTimeSpanResponseBody(name='body'),
}

async function onsConsumerTimeSpanWithOptions(request: OnsConsumerTimeSpanRequest, runtime: Util.RuntimeOptions): OnsConsumerTimeSpanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsConsumerTimeSpan', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsConsumerTimeSpan(request: OnsConsumerTimeSpanRequest): OnsConsumerTimeSpanResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsConsumerTimeSpanWithOptions(request, runtime);
}

model OnsDLQMessageGetByIdRequest {
  msgId?: string(name='MsgId'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
}

model OnsDLQMessageGetByIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    storeSize?: int32(name='StoreSize'),
    reconsumeTimes?: int32(name='ReconsumeTimes'),
    storeTimestamp?: long(name='StoreTimestamp'),
    instanceId?: string(name='InstanceId'),
    msgId?: string(name='MsgId'),
    storeHost?: string(name='StoreHost'),
    topic?: string(name='Topic'),
    propertyList?: {
      messageProperty?: [ 
      {
        value?: string(name='Value'),
        name?: string(name='Name'),
      }
    ](name='MessageProperty')
    }(name='PropertyList'),
    bornTimestamp?: long(name='BornTimestamp'),
    bodyCRC?: int32(name='BodyCRC'),
    bornHost?: string(name='BornHost'),
  }(name='Data'),
}

model OnsDLQMessageGetByIdResponse = {
  headers: map[string]string(name='headers'),
  body: OnsDLQMessageGetByIdResponseBody(name='body'),
}

async function onsDLQMessageGetByIdWithOptions(request: OnsDLQMessageGetByIdRequest, runtime: Util.RuntimeOptions): OnsDLQMessageGetByIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsDLQMessageGetById', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsDLQMessageGetById(request: OnsDLQMessageGetByIdRequest): OnsDLQMessageGetByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsDLQMessageGetByIdWithOptions(request, runtime);
}

model OnsDLQMessagePageQueryByGroupIdRequest {
  groupId?: string(name='GroupId'),
  beginTime?: long(name='BeginTime'),
  endTime?: long(name='EndTime'),
  taskId?: string(name='TaskId'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  instanceId?: string(name='InstanceId'),
}

model OnsDLQMessagePageQueryByGroupIdResponseBody = {
  requestId?: string(name='RequestId'),
  msgFoundDo?: {
    currentPage?: long(name='CurrentPage'),
    msgFoundList?: {
      onsRestMessageDo?: [ 
      {
        storeSize?: int32(name='StoreSize'),
        reconsumeTimes?: int32(name='ReconsumeTimes'),
        storeTimestamp?: long(name='StoreTimestamp'),
        instanceId?: string(name='InstanceId'),
        msgId?: string(name='MsgId'),
        storeHost?: string(name='StoreHost'),
        topic?: string(name='Topic'),
        propertyList?: {
          messageProperty?: [ 
          {
            value?: string(name='Value'),
            name?: string(name='Name'),
          }
        ](name='MessageProperty')
        }(name='PropertyList'),
        bornTimestamp?: long(name='BornTimestamp'),
        bodyCRC?: int32(name='BodyCRC'),
        bornHost?: string(name='BornHost'),
      }
    ](name='OnsRestMessageDo')
    }(name='MsgFoundList'),
    maxPageCount?: long(name='MaxPageCount'),
    taskId?: string(name='TaskId'),
  }(name='MsgFoundDo'),
}

model OnsDLQMessagePageQueryByGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: OnsDLQMessagePageQueryByGroupIdResponseBody(name='body'),
}

async function onsDLQMessagePageQueryByGroupIdWithOptions(request: OnsDLQMessagePageQueryByGroupIdRequest, runtime: Util.RuntimeOptions): OnsDLQMessagePageQueryByGroupIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsDLQMessagePageQueryByGroupId', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsDLQMessagePageQueryByGroupId(request: OnsDLQMessagePageQueryByGroupIdRequest): OnsDLQMessagePageQueryByGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsDLQMessagePageQueryByGroupIdWithOptions(request, runtime);
}

model OnsDLQMessageResendByIdRequest {
  msgId?: string(name='MsgId'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
}

model OnsDLQMessageResendByIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    msgId?: [ string ](name='MsgId')
  }(name='Data'),
}

model OnsDLQMessageResendByIdResponse = {
  headers: map[string]string(name='headers'),
  body: OnsDLQMessageResendByIdResponseBody(name='body'),
}

async function onsDLQMessageResendByIdWithOptions(request: OnsDLQMessageResendByIdRequest, runtime: Util.RuntimeOptions): OnsDLQMessageResendByIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsDLQMessageResendById', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsDLQMessageResendById(request: OnsDLQMessageResendByIdRequest): OnsDLQMessageResendByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsDLQMessageResendByIdWithOptions(request, runtime);
}

model OnsGroupConsumerUpdateRequest {
  groupId?: string(name='GroupId'),
  readEnable?: boolean(name='ReadEnable'),
  instanceId?: string(name='InstanceId'),
}

model OnsGroupConsumerUpdateResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsGroupConsumerUpdateResponse = {
  headers: map[string]string(name='headers'),
  body: OnsGroupConsumerUpdateResponseBody(name='body'),
}

async function onsGroupConsumerUpdateWithOptions(request: OnsGroupConsumerUpdateRequest, runtime: Util.RuntimeOptions): OnsGroupConsumerUpdateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsGroupConsumerUpdate', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsGroupConsumerUpdate(request: OnsGroupConsumerUpdateRequest): OnsGroupConsumerUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsGroupConsumerUpdateWithOptions(request, runtime);
}

model OnsGroupCreateRequest {
  groupId?: string(name='GroupId'),
  remark?: string(name='Remark'),
  instanceId?: string(name='InstanceId'),
  groupType?: string(name='GroupType'),
}

model OnsGroupCreateResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsGroupCreateResponse = {
  headers: map[string]string(name='headers'),
  body: OnsGroupCreateResponseBody(name='body'),
}

async function onsGroupCreateWithOptions(request: OnsGroupCreateRequest, runtime: Util.RuntimeOptions): OnsGroupCreateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsGroupCreate', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsGroupCreate(request: OnsGroupCreateRequest): OnsGroupCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsGroupCreateWithOptions(request, runtime);
}

model OnsGroupDeleteRequest {
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
}

model OnsGroupDeleteResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsGroupDeleteResponse = {
  headers: map[string]string(name='headers'),
  body: OnsGroupDeleteResponseBody(name='body'),
}

async function onsGroupDeleteWithOptions(request: OnsGroupDeleteRequest, runtime: Util.RuntimeOptions): OnsGroupDeleteResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsGroupDelete', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsGroupDelete(request: OnsGroupDeleteRequest): OnsGroupDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsGroupDeleteWithOptions(request, runtime);
}

model OnsGroupListRequest {
  instanceId?: string(name='InstanceId'),
  groupId?: string(name='GroupId'),
  groupType?: string(name='GroupType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model OnsGroupListResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    subscribeInfoDo?: [ 
    {
      owner?: string(name='Owner'),
      updateTime?: long(name='UpdateTime'),
      independentNaming?: boolean(name='IndependentNaming'),
      groupId?: string(name='GroupId'),
      remark?: string(name='Remark'),
      createTime?: long(name='CreateTime'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      instanceId?: string(name='InstanceId'),
      groupType?: string(name='GroupType'),
    }
  ](name='SubscribeInfoDo')
  }(name='Data'),
}

model OnsGroupListResponse = {
  headers: map[string]string(name='headers'),
  body: OnsGroupListResponseBody(name='body'),
}

async function onsGroupListWithOptions(request: OnsGroupListRequest, runtime: Util.RuntimeOptions): OnsGroupListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsGroupList', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsGroupList(request: OnsGroupListRequest): OnsGroupListResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsGroupListWithOptions(request, runtime);
}

model OnsGroupSubDetailRequest {
  instanceId?: string(name='InstanceId'),
  groupId?: string(name='GroupId'),
}

model OnsGroupSubDetailResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    subscriptionDataList?: {
      subscriptionDataList?: [ 
      {
        subString?: string(name='SubString'),
        topic?: string(name='Topic'),
      }
    ](name='SubscriptionDataList')
    }(name='SubscriptionDataList'),
    groupId?: string(name='GroupId'),
    messageModel?: string(name='MessageModel'),
    online?: boolean(name='Online'),
  }(name='Data'),
}

model OnsGroupSubDetailResponse = {
  headers: map[string]string(name='headers'),
  body: OnsGroupSubDetailResponseBody(name='body'),
}

async function onsGroupSubDetailWithOptions(request: OnsGroupSubDetailRequest, runtime: Util.RuntimeOptions): OnsGroupSubDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsGroupSubDetail', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsGroupSubDetail(request: OnsGroupSubDetailRequest): OnsGroupSubDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsGroupSubDetailWithOptions(request, runtime);
}

model OnsInstanceBaseInfoRequest {
  instanceId?: string(name='InstanceId'),
}

model OnsInstanceBaseInfoResponseBody = {
  instanceBaseInfo?: {
    endpoints?: {
      tcpEndpoint?: string(name='TcpEndpoint'),
      httpInternetEndpoint?: string(name='HttpInternetEndpoint'),
      httpInternalEndpoint?: string(name='HttpInternalEndpoint'),
      httpInternetSecureEndpoint?: string(name='HttpInternetSecureEndpoint'),
    }(name='Endpoints'),
    independentNaming?: boolean(name='IndependentNaming'),
    maxTps?: long(name='MaxTps'),
    remark?: string(name='Remark'),
    instanceName?: string(name='InstanceName'),
    releaseTime?: long(name='ReleaseTime'),
    topicCapacity?: int32(name='TopicCapacity'),
    instanceStatus?: int32(name='InstanceStatus'),
    instanceId?: string(name='InstanceId'),
    instanceType?: int32(name='InstanceType'),
  }(name='InstanceBaseInfo'),
  requestId?: string(name='RequestId'),
}

model OnsInstanceBaseInfoResponse = {
  headers: map[string]string(name='headers'),
  body: OnsInstanceBaseInfoResponseBody(name='body'),
}

async function onsInstanceBaseInfoWithOptions(request: OnsInstanceBaseInfoRequest, runtime: Util.RuntimeOptions): OnsInstanceBaseInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsInstanceBaseInfo', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsInstanceBaseInfo(request: OnsInstanceBaseInfoRequest): OnsInstanceBaseInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsInstanceBaseInfoWithOptions(request, runtime);
}

model OnsInstanceCreateRequest {
  remark?: string(name='Remark'),
  instanceName?: string(name='InstanceName'),
}

model OnsInstanceCreateResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    instanceId?: string(name='InstanceId'),
    instanceType?: int32(name='InstanceType'),
  }(name='Data'),
}

model OnsInstanceCreateResponse = {
  headers: map[string]string(name='headers'),
  body: OnsInstanceCreateResponseBody(name='body'),
}

async function onsInstanceCreateWithOptions(request: OnsInstanceCreateRequest, runtime: Util.RuntimeOptions): OnsInstanceCreateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsInstanceCreate', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsInstanceCreate(request: OnsInstanceCreateRequest): OnsInstanceCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsInstanceCreateWithOptions(request, runtime);
}

model OnsInstanceDeleteRequest {
  instanceId?: string(name='InstanceId'),
}

model OnsInstanceDeleteResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsInstanceDeleteResponse = {
  headers: map[string]string(name='headers'),
  body: OnsInstanceDeleteResponseBody(name='body'),
}

async function onsInstanceDeleteWithOptions(request: OnsInstanceDeleteRequest, runtime: Util.RuntimeOptions): OnsInstanceDeleteResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsInstanceDelete', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsInstanceDelete(request: OnsInstanceDeleteRequest): OnsInstanceDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsInstanceDeleteWithOptions(request, runtime);
}

model OnsInstanceInServiceListRequest {
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model OnsInstanceInServiceListResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    instanceVO?: [ 
    {
      independentNaming?: boolean(name='IndependentNaming'),
      instanceName?: string(name='InstanceName'),
      releaseTime?: long(name='ReleaseTime'),
      instanceStatus?: int32(name='InstanceStatus'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      instanceId?: string(name='InstanceId'),
      instanceType?: int32(name='InstanceType'),
    }
  ](name='InstanceVO')
  }(name='Data'),
}

model OnsInstanceInServiceListResponse = {
  headers: map[string]string(name='headers'),
  body: OnsInstanceInServiceListResponseBody(name='body'),
}

async function onsInstanceInServiceListWithOptions(request: OnsInstanceInServiceListRequest, runtime: Util.RuntimeOptions): OnsInstanceInServiceListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsInstanceInServiceList', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsInstanceInServiceList(request: OnsInstanceInServiceListRequest): OnsInstanceInServiceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsInstanceInServiceListWithOptions(request, runtime);
}

model OnsInstanceUpdateRequest {
  remark?: string(name='Remark'),
  instanceName?: string(name='InstanceName'),
  instanceId?: string(name='InstanceId'),
}

model OnsInstanceUpdateResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsInstanceUpdateResponse = {
  headers: map[string]string(name='headers'),
  body: OnsInstanceUpdateResponseBody(name='body'),
}

async function onsInstanceUpdateWithOptions(request: OnsInstanceUpdateRequest, runtime: Util.RuntimeOptions): OnsInstanceUpdateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsInstanceUpdate', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsInstanceUpdate(request: OnsInstanceUpdateRequest): OnsInstanceUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsInstanceUpdateWithOptions(request, runtime);
}

model OnsMessageGetByKeyRequest {
  topic?: string(name='Topic'),
  key?: string(name='Key'),
  instanceId?: string(name='InstanceId'),
}

model OnsMessageGetByKeyResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    onsRestMessageDo?: [ 
    {
      storeSize?: int32(name='StoreSize'),
      reconsumeTimes?: int32(name='ReconsumeTimes'),
      storeTimestamp?: long(name='StoreTimestamp'),
      instanceId?: string(name='InstanceId'),
      msgId?: string(name='MsgId'),
      storeHost?: string(name='StoreHost'),
      topic?: string(name='Topic'),
      propertyList?: {
        messageProperty?: [ 
        {
          value?: string(name='Value'),
          name?: string(name='Name'),
        }
      ](name='MessageProperty')
      }(name='PropertyList'),
      bornTimestamp?: long(name='BornTimestamp'),
      bodyCRC?: int32(name='BodyCRC'),
      bornHost?: string(name='BornHost'),
    }
  ](name='OnsRestMessageDo')
  }(name='Data'),
}

model OnsMessageGetByKeyResponse = {
  headers: map[string]string(name='headers'),
  body: OnsMessageGetByKeyResponseBody(name='body'),
}

async function onsMessageGetByKeyWithOptions(request: OnsMessageGetByKeyRequest, runtime: Util.RuntimeOptions): OnsMessageGetByKeyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsMessageGetByKey', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsMessageGetByKey(request: OnsMessageGetByKeyRequest): OnsMessageGetByKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsMessageGetByKeyWithOptions(request, runtime);
}

model OnsMessageGetByMsgIdRequest {
  msgId?: string(name='MsgId'),
  topic?: string(name='Topic'),
  instanceId?: string(name='InstanceId'),
}

model OnsMessageGetByMsgIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    storeSize?: int32(name='StoreSize'),
    reconsumeTimes?: int32(name='ReconsumeTimes'),
    storeTimestamp?: long(name='StoreTimestamp'),
    instanceId?: string(name='InstanceId'),
    msgId?: string(name='MsgId'),
    storeHost?: string(name='StoreHost'),
    topic?: string(name='Topic'),
    propertyList?: {
      messageProperty?: [ 
      {
        value?: string(name='Value'),
        name?: string(name='Name'),
      }
    ](name='MessageProperty')
    }(name='PropertyList'),
    bornTimestamp?: long(name='BornTimestamp'),
    bodyCRC?: int32(name='BodyCRC'),
    bornHost?: string(name='BornHost'),
  }(name='Data'),
}

model OnsMessageGetByMsgIdResponse = {
  headers: map[string]string(name='headers'),
  body: OnsMessageGetByMsgIdResponseBody(name='body'),
}

async function onsMessageGetByMsgIdWithOptions(request: OnsMessageGetByMsgIdRequest, runtime: Util.RuntimeOptions): OnsMessageGetByMsgIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsMessageGetByMsgId', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsMessageGetByMsgId(request: OnsMessageGetByMsgIdRequest): OnsMessageGetByMsgIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsMessageGetByMsgIdWithOptions(request, runtime);
}

model OnsMessagePageQueryByTopicRequest {
  topic?: string(name='Topic'),
  beginTime?: long(name='BeginTime'),
  endTime?: long(name='EndTime'),
  taskId?: string(name='TaskId'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  instanceId?: string(name='InstanceId'),
}

model OnsMessagePageQueryByTopicResponseBody = {
  requestId?: string(name='RequestId'),
  msgFoundDo?: {
    currentPage?: long(name='CurrentPage'),
    msgFoundList?: {
      onsRestMessageDo?: [ 
      {
        storeSize?: int32(name='StoreSize'),
        reconsumeTimes?: int32(name='ReconsumeTimes'),
        storeTimestamp?: long(name='StoreTimestamp'),
        instanceId?: string(name='InstanceId'),
        msgId?: string(name='MsgId'),
        storeHost?: string(name='StoreHost'),
        topic?: string(name='Topic'),
        propertyList?: {
          messageProperty?: [ 
          {
            value?: string(name='Value'),
            name?: string(name='Name'),
          }
        ](name='MessageProperty')
        }(name='PropertyList'),
        bornTimestamp?: long(name='BornTimestamp'),
        bodyCRC?: int32(name='BodyCRC'),
        bornHost?: string(name='BornHost'),
      }
    ](name='OnsRestMessageDo')
    }(name='MsgFoundList'),
    maxPageCount?: long(name='MaxPageCount'),
    taskId?: string(name='TaskId'),
  }(name='MsgFoundDo'),
}

model OnsMessagePageQueryByTopicResponse = {
  headers: map[string]string(name='headers'),
  body: OnsMessagePageQueryByTopicResponseBody(name='body'),
}

async function onsMessagePageQueryByTopicWithOptions(request: OnsMessagePageQueryByTopicRequest, runtime: Util.RuntimeOptions): OnsMessagePageQueryByTopicResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsMessagePageQueryByTopic', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsMessagePageQueryByTopic(request: OnsMessagePageQueryByTopicRequest): OnsMessagePageQueryByTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsMessagePageQueryByTopicWithOptions(request, runtime);
}

model OnsMessagePushRequest {
  groupId?: string(name='GroupId'),
  clientId?: string(name='ClientId'),
  msgId?: string(name='MsgId'),
  topic?: string(name='Topic'),
  instanceId?: string(name='InstanceId'),
}

model OnsMessagePushResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsMessagePushResponse = {
  headers: map[string]string(name='headers'),
  body: OnsMessagePushResponseBody(name='body'),
}

async function onsMessagePushWithOptions(request: OnsMessagePushRequest, runtime: Util.RuntimeOptions): OnsMessagePushResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsMessagePush', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsMessagePush(request: OnsMessagePushRequest): OnsMessagePushResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsMessagePushWithOptions(request, runtime);
}

model OnsMessageSendRequest {
  topic?: string(name='Topic'),
  tag?: string(name='Tag'),
  key?: string(name='Key'),
  message?: string(name='Message'),
  instanceId?: string(name='InstanceId'),
}

model OnsMessageSendResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
}

model OnsMessageSendResponse = {
  headers: map[string]string(name='headers'),
  body: OnsMessageSendResponseBody(name='body'),
}

async function onsMessageSendWithOptions(request: OnsMessageSendRequest, runtime: Util.RuntimeOptions): OnsMessageSendResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsMessageSend', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsMessageSend(request: OnsMessageSendRequest): OnsMessageSendResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsMessageSendWithOptions(request, runtime);
}

model OnsMessageTraceRequest {
  topic?: string(name='Topic'),
  msgId?: string(name='MsgId'),
  instanceId?: string(name='InstanceId'),
}

model OnsMessageTraceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    messageTrack?: [ 
    {
      trackType?: string(name='TrackType'),
      consumerGroup?: string(name='ConsumerGroup'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='MessageTrack')
  }(name='Data'),
}

model OnsMessageTraceResponse = {
  headers: map[string]string(name='headers'),
  body: OnsMessageTraceResponseBody(name='body'),
}

async function onsMessageTraceWithOptions(request: OnsMessageTraceRequest, runtime: Util.RuntimeOptions): OnsMessageTraceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsMessageTrace', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsMessageTrace(request: OnsMessageTraceRequest): OnsMessageTraceResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsMessageTraceWithOptions(request, runtime);
}

model OnsMqttGroupIdCreateRequest {
  topic?: string(name='Topic'),
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
}

model OnsMqttGroupIdCreateResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsMqttGroupIdCreateResponse = {
  headers: map[string]string(name='headers'),
  body: OnsMqttGroupIdCreateResponseBody(name='body'),
}

async function onsMqttGroupIdCreateWithOptions(request: OnsMqttGroupIdCreateRequest, runtime: Util.RuntimeOptions): OnsMqttGroupIdCreateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsMqttGroupIdCreate', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsMqttGroupIdCreate(request: OnsMqttGroupIdCreateRequest): OnsMqttGroupIdCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsMqttGroupIdCreateWithOptions(request, runtime);
}

model OnsMqttGroupIdDeleteRequest {
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
}

model OnsMqttGroupIdDeleteResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsMqttGroupIdDeleteResponse = {
  headers: map[string]string(name='headers'),
  body: OnsMqttGroupIdDeleteResponseBody(name='body'),
}

async function onsMqttGroupIdDeleteWithOptions(request: OnsMqttGroupIdDeleteRequest, runtime: Util.RuntimeOptions): OnsMqttGroupIdDeleteResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsMqttGroupIdDelete', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsMqttGroupIdDelete(request: OnsMqttGroupIdDeleteRequest): OnsMqttGroupIdDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsMqttGroupIdDeleteWithOptions(request, runtime);
}

model OnsMqttGroupIdListRequest {
  instanceId?: string(name='InstanceId'),
}

model OnsMqttGroupIdListResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    mqttGroupIdDo?: [ 
    {
      updateTime?: long(name='UpdateTime'),
      independentNaming?: boolean(name='IndependentNaming'),
      groupId?: string(name='GroupId'),
      createTime?: long(name='CreateTime'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='MqttGroupIdDo')
  }(name='Data'),
}

model OnsMqttGroupIdListResponse = {
  headers: map[string]string(name='headers'),
  body: OnsMqttGroupIdListResponseBody(name='body'),
}

async function onsMqttGroupIdListWithOptions(request: OnsMqttGroupIdListRequest, runtime: Util.RuntimeOptions): OnsMqttGroupIdListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsMqttGroupIdList', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsMqttGroupIdList(request: OnsMqttGroupIdListRequest): OnsMqttGroupIdListResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsMqttGroupIdListWithOptions(request, runtime);
}

model OnsMqttQueryClientByClientIdRequest {
  clientId?: string(name='ClientId'),
  instanceId?: string(name='InstanceId'),
}

model OnsMqttQueryClientByClientIdResponseBody = {
  requestId?: string(name='RequestId'),
  mqttClientInfoDo?: {
    online?: boolean(name='Online'),
    lastTouch?: long(name='LastTouch'),
    socketChannel?: string(name='SocketChannel'),
    clientId?: string(name='ClientId'),
    subScriptonData?: {
      subscriptionDo?: [ 
      {
        subTopic?: string(name='SubTopic'),
        parentTopic?: string(name='ParentTopic'),
        qos?: int32(name='Qos'),
      }
    ](name='SubscriptionDo')
    }(name='SubScriptonData'),
  }(name='MqttClientInfoDo'),
}

model OnsMqttQueryClientByClientIdResponse = {
  headers: map[string]string(name='headers'),
  body: OnsMqttQueryClientByClientIdResponseBody(name='body'),
}

async function onsMqttQueryClientByClientIdWithOptions(request: OnsMqttQueryClientByClientIdRequest, runtime: Util.RuntimeOptions): OnsMqttQueryClientByClientIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsMqttQueryClientByClientId', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsMqttQueryClientByClientId(request: OnsMqttQueryClientByClientIdRequest): OnsMqttQueryClientByClientIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsMqttQueryClientByClientIdWithOptions(request, runtime);
}

model OnsMqttQueryClientByGroupIdRequest {
  groupId?: string(name='GroupId'),
  instanceId?: string(name='InstanceId'),
}

model OnsMqttQueryClientByGroupIdResponseBody = {
  requestId?: string(name='RequestId'),
  mqttClientSetDo?: {
    onlineCount?: long(name='OnlineCount'),
  }(name='MqttClientSetDo'),
}

model OnsMqttQueryClientByGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: OnsMqttQueryClientByGroupIdResponseBody(name='body'),
}

async function onsMqttQueryClientByGroupIdWithOptions(request: OnsMqttQueryClientByGroupIdRequest, runtime: Util.RuntimeOptions): OnsMqttQueryClientByGroupIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsMqttQueryClientByGroupId', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsMqttQueryClientByGroupId(request: OnsMqttQueryClientByGroupIdRequest): OnsMqttQueryClientByGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsMqttQueryClientByGroupIdWithOptions(request, runtime);
}

model OnsMqttQueryClientByTopicRequest {
  parentTopic?: string(name='ParentTopic'),
  subTopic?: string(name='SubTopic'),
  instanceId?: string(name='InstanceId'),
}

model OnsMqttQueryClientByTopicResponseBody = {
  requestId?: string(name='RequestId'),
  mqttClientSetDo?: {
    onlineCount?: long(name='OnlineCount'),
  }(name='MqttClientSetDo'),
}

model OnsMqttQueryClientByTopicResponse = {
  headers: map[string]string(name='headers'),
  body: OnsMqttQueryClientByTopicResponseBody(name='body'),
}

async function onsMqttQueryClientByTopicWithOptions(request: OnsMqttQueryClientByTopicRequest, runtime: Util.RuntimeOptions): OnsMqttQueryClientByTopicResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsMqttQueryClientByTopic', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsMqttQueryClientByTopic(request: OnsMqttQueryClientByTopicRequest): OnsMqttQueryClientByTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsMqttQueryClientByTopicWithOptions(request, runtime);
}

model OnsMqttQueryHistoryOnlineRequest {
  groupId?: string(name='GroupId'),
  beginTime?: long(name='BeginTime'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
}

model OnsMqttQueryHistoryOnlineResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    records?: {
      statsDataDo?: [ 
      {
        y?: float(name='Y'),
        x?: long(name='X'),
      }
    ](name='StatsDataDo')
    }(name='Records'),
    XUnit?: string(name='XUnit'),
    YUnit?: string(name='YUnit'),
    title?: string(name='Title'),
  }(name='Data'),
}

model OnsMqttQueryHistoryOnlineResponse = {
  headers: map[string]string(name='headers'),
  body: OnsMqttQueryHistoryOnlineResponseBody(name='body'),
}

async function onsMqttQueryHistoryOnlineWithOptions(request: OnsMqttQueryHistoryOnlineRequest, runtime: Util.RuntimeOptions): OnsMqttQueryHistoryOnlineResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsMqttQueryHistoryOnline', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsMqttQueryHistoryOnline(request: OnsMqttQueryHistoryOnlineRequest): OnsMqttQueryHistoryOnlineResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsMqttQueryHistoryOnlineWithOptions(request, runtime);
}

model OnsMqttQueryMsgTransTrendRequest {
  tpsType?: string(name='TpsType'),
  transType?: string(name='TransType'),
  parentTopic?: string(name='ParentTopic'),
  subTopic?: string(name='SubTopic'),
  msgType?: string(name='MsgType'),
  qos?: int32(name='Qos'),
  beginTime?: long(name='BeginTime'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
}

model OnsMqttQueryMsgTransTrendResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    records?: {
      statsDataDo?: [ 
      {
        y?: float(name='Y'),
        x?: long(name='X'),
      }
    ](name='StatsDataDo')
    }(name='Records'),
    XUnit?: string(name='XUnit'),
    YUnit?: string(name='YUnit'),
    title?: string(name='Title'),
  }(name='Data'),
}

model OnsMqttQueryMsgTransTrendResponse = {
  headers: map[string]string(name='headers'),
  body: OnsMqttQueryMsgTransTrendResponseBody(name='body'),
}

async function onsMqttQueryMsgTransTrendWithOptions(request: OnsMqttQueryMsgTransTrendRequest, runtime: Util.RuntimeOptions): OnsMqttQueryMsgTransTrendResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsMqttQueryMsgTransTrend', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsMqttQueryMsgTransTrend(request: OnsMqttQueryMsgTransTrendRequest): OnsMqttQueryMsgTransTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsMqttQueryMsgTransTrendWithOptions(request, runtime);
}

model OnsRegionListResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    regionDo?: [ 
    {
      regionName?: string(name='RegionName'),
      onsRegionId?: string(name='OnsRegionId'),
    }
  ](name='RegionDo')
  }(name='Data'),
}

model OnsRegionListResponse = {
  headers: map[string]string(name='headers'),
  body: OnsRegionListResponseBody(name='body'),
}

async function onsRegionListWithOptions(runtime: Util.RuntimeOptions): OnsRegionListResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('OnsRegionList', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsRegionList(): OnsRegionListResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsRegionListWithOptions(runtime);
}

model OnsTopicCreateRequest {
  topic?: string(name='Topic'),
  messageType?: int32(name='MessageType'),
  remark?: string(name='Remark'),
  instanceId?: string(name='InstanceId'),
}

model OnsTopicCreateResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsTopicCreateResponse = {
  headers: map[string]string(name='headers'),
  body: OnsTopicCreateResponseBody(name='body'),
}

async function onsTopicCreateWithOptions(request: OnsTopicCreateRequest, runtime: Util.RuntimeOptions): OnsTopicCreateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsTopicCreate', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsTopicCreate(request: OnsTopicCreateRequest): OnsTopicCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTopicCreateWithOptions(request, runtime);
}

model OnsTopicDeleteRequest {
  topic?: string(name='Topic'),
  instanceId?: string(name='InstanceId'),
}

model OnsTopicDeleteResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsTopicDeleteResponse = {
  headers: map[string]string(name='headers'),
  body: OnsTopicDeleteResponseBody(name='body'),
}

async function onsTopicDeleteWithOptions(request: OnsTopicDeleteRequest, runtime: Util.RuntimeOptions): OnsTopicDeleteResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsTopicDelete', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsTopicDelete(request: OnsTopicDeleteRequest): OnsTopicDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTopicDeleteWithOptions(request, runtime);
}

model OnsTopicListRequest {
  topic?: string(name='Topic'),
  instanceId?: string(name='InstanceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model OnsTopicListResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    publishInfoDo?: [ 
    {
      messageType?: int32(name='MessageType'),
      relationName?: string(name='RelationName'),
      owner?: string(name='Owner'),
      independentNaming?: boolean(name='IndependentNaming'),
      remark?: string(name='Remark'),
      relation?: int32(name='Relation'),
      createTime?: long(name='CreateTime'),
      topic?: string(name='Topic'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='PublishInfoDo')
  }(name='Data'),
}

model OnsTopicListResponse = {
  headers: map[string]string(name='headers'),
  body: OnsTopicListResponseBody(name='body'),
}

async function onsTopicListWithOptions(request: OnsTopicListRequest, runtime: Util.RuntimeOptions): OnsTopicListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsTopicList', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsTopicList(request: OnsTopicListRequest): OnsTopicListResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTopicListWithOptions(request, runtime);
}

model OnsTopicStatusRequest {
  topic?: string(name='Topic'),
  instanceId?: string(name='InstanceId'),
}

model OnsTopicStatusResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    perm?: int32(name='Perm'),
    lastTimeStamp?: long(name='LastTimeStamp'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
}

model OnsTopicStatusResponse = {
  headers: map[string]string(name='headers'),
  body: OnsTopicStatusResponseBody(name='body'),
}

async function onsTopicStatusWithOptions(request: OnsTopicStatusRequest, runtime: Util.RuntimeOptions): OnsTopicStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsTopicStatus', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsTopicStatus(request: OnsTopicStatusRequest): OnsTopicStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTopicStatusWithOptions(request, runtime);
}

model OnsTopicSubDetailRequest {
  instanceId?: string(name='InstanceId'),
  topic?: string(name='Topic'),
}

model OnsTopicSubDetailResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    subscriptionDataList?: {
      subscriptionDataList?: [ 
      {
        groupId?: string(name='GroupId'),
        messageModel?: string(name='MessageModel'),
        subString?: string(name='SubString'),
      }
    ](name='SubscriptionDataList')
    }(name='SubscriptionDataList'),
    topic?: string(name='Topic'),
  }(name='Data'),
}

model OnsTopicSubDetailResponse = {
  headers: map[string]string(name='headers'),
  body: OnsTopicSubDetailResponseBody(name='body'),
}

async function onsTopicSubDetailWithOptions(request: OnsTopicSubDetailRequest, runtime: Util.RuntimeOptions): OnsTopicSubDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsTopicSubDetail', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsTopicSubDetail(request: OnsTopicSubDetailRequest): OnsTopicSubDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTopicSubDetailWithOptions(request, runtime);
}

model OnsTopicUpdateRequest {
  topic?: string(name='Topic'),
  perm?: int32(name='Perm'),
  instanceId?: string(name='InstanceId'),
}

model OnsTopicUpdateResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsTopicUpdateResponse = {
  headers: map[string]string(name='headers'),
  body: OnsTopicUpdateResponseBody(name='body'),
}

async function onsTopicUpdateWithOptions(request: OnsTopicUpdateRequest, runtime: Util.RuntimeOptions): OnsTopicUpdateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsTopicUpdate', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsTopicUpdate(request: OnsTopicUpdateRequest): OnsTopicUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTopicUpdateWithOptions(request, runtime);
}

model OnsTraceGetResultRequest {
  queryId?: string(name='QueryId'),
}

model OnsTraceGetResultResponseBody = {
  requestId?: string(name='RequestId'),
  traceData?: {
    status?: string(name='Status'),
    msgKey?: string(name='MsgKey'),
    updateTime?: long(name='UpdateTime'),
    createTime?: long(name='CreateTime'),
    topic?: string(name='Topic'),
    userId?: string(name='UserId'),
    instanceId?: string(name='InstanceId'),
    msgId?: string(name='MsgId'),
    traceList?: {
      traceMapDo?: [ 
      {
        status?: string(name='Status'),
        msgKey?: string(name='MsgKey'),
        pubTime?: long(name='PubTime'),
        subList?: {
          subMapDo?: [ 
          {
            clientList?: {
              subClientInfoDo?: [ 
              {
                status?: string(name='Status'),
                subTime?: long(name='SubTime'),
                reconsumeTimes?: int32(name='ReconsumeTimes'),
                subGroupName?: string(name='SubGroupName'),
                clientHost?: string(name='ClientHost'),
                costTime?: int32(name='CostTime'),
              }
            ](name='SubClientInfoDo')
            }(name='ClientList'),
            failCount?: int32(name='FailCount'),
            subGroupName?: string(name='SubGroupName'),
            successCount?: int32(name='SuccessCount'),
          }
        ](name='SubMapDo')
        }(name='SubList'),
        topic?: string(name='Topic'),
        costTime?: int32(name='CostTime'),
        tag?: string(name='Tag'),
        msgId?: string(name='MsgId'),
        pubGroupName?: string(name='PubGroupName'),
        bornHost?: string(name='BornHost'),
      }
    ](name='TraceMapDo')
    }(name='TraceList'),
    queryId?: string(name='QueryId'),
  }(name='TraceData'),
}

model OnsTraceGetResultResponse = {
  headers: map[string]string(name='headers'),
  body: OnsTraceGetResultResponseBody(name='body'),
}

async function onsTraceGetResultWithOptions(request: OnsTraceGetResultRequest, runtime: Util.RuntimeOptions): OnsTraceGetResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsTraceGetResult', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsTraceGetResult(request: OnsTraceGetResultRequest): OnsTraceGetResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTraceGetResultWithOptions(request, runtime);
}

model OnsTraceQueryByMsgIdRequest {
  topic?: string(name='Topic'),
  msgId?: string(name='MsgId'),
  beginTime?: long(name='BeginTime'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
}

model OnsTraceQueryByMsgIdResponseBody = {
  requestId?: string(name='RequestId'),
  queryId?: string(name='QueryId'),
}

model OnsTraceQueryByMsgIdResponse = {
  headers: map[string]string(name='headers'),
  body: OnsTraceQueryByMsgIdResponseBody(name='body'),
}

async function onsTraceQueryByMsgIdWithOptions(request: OnsTraceQueryByMsgIdRequest, runtime: Util.RuntimeOptions): OnsTraceQueryByMsgIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsTraceQueryByMsgId', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsTraceQueryByMsgId(request: OnsTraceQueryByMsgIdRequest): OnsTraceQueryByMsgIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTraceQueryByMsgIdWithOptions(request, runtime);
}

model OnsTraceQueryByMsgKeyRequest {
  topic?: string(name='Topic'),
  msgKey?: string(name='MsgKey'),
  beginTime?: long(name='BeginTime'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
}

model OnsTraceQueryByMsgKeyResponseBody = {
  requestId?: string(name='RequestId'),
  queryId?: string(name='QueryId'),
}

model OnsTraceQueryByMsgKeyResponse = {
  headers: map[string]string(name='headers'),
  body: OnsTraceQueryByMsgKeyResponseBody(name='body'),
}

async function onsTraceQueryByMsgKeyWithOptions(request: OnsTraceQueryByMsgKeyRequest, runtime: Util.RuntimeOptions): OnsTraceQueryByMsgKeyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsTraceQueryByMsgKey', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsTraceQueryByMsgKey(request: OnsTraceQueryByMsgKeyRequest): OnsTraceQueryByMsgKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTraceQueryByMsgKeyWithOptions(request, runtime);
}

model OnsTrendGroupOutputTpsRequest {
  groupId?: string(name='GroupId'),
  topic?: string(name='Topic'),
  beginTime?: long(name='BeginTime'),
  endTime?: long(name='EndTime'),
  type?: int32(name='Type'),
  instanceId?: string(name='InstanceId'),
  period?: long(name='Period'),
}

model OnsTrendGroupOutputTpsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    records?: {
      statsDataDo?: [ 
      {
        y?: float(name='Y'),
        x?: long(name='X'),
      }
    ](name='StatsDataDo')
    }(name='Records'),
    XUnit?: string(name='XUnit'),
    YUnit?: string(name='YUnit'),
    title?: string(name='Title'),
  }(name='Data'),
}

model OnsTrendGroupOutputTpsResponse = {
  headers: map[string]string(name='headers'),
  body: OnsTrendGroupOutputTpsResponseBody(name='body'),
}

async function onsTrendGroupOutputTpsWithOptions(request: OnsTrendGroupOutputTpsRequest, runtime: Util.RuntimeOptions): OnsTrendGroupOutputTpsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsTrendGroupOutputTps', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsTrendGroupOutputTps(request: OnsTrendGroupOutputTpsRequest): OnsTrendGroupOutputTpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTrendGroupOutputTpsWithOptions(request, runtime);
}

model OnsTrendTopicInputTpsRequest {
  topic?: string(name='Topic'),
  beginTime?: long(name='BeginTime'),
  endTime?: long(name='EndTime'),
  type?: int32(name='Type'),
  instanceId?: string(name='InstanceId'),
  period?: long(name='Period'),
}

model OnsTrendTopicInputTpsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    records?: {
      statsDataDo?: [ 
      {
        y?: float(name='Y'),
        x?: long(name='X'),
      }
    ](name='StatsDataDo')
    }(name='Records'),
    XUnit?: string(name='XUnit'),
    YUnit?: string(name='YUnit'),
    title?: string(name='Title'),
  }(name='Data'),
}

model OnsTrendTopicInputTpsResponse = {
  headers: map[string]string(name='headers'),
  body: OnsTrendTopicInputTpsResponseBody(name='body'),
}

async function onsTrendTopicInputTpsWithOptions(request: OnsTrendTopicInputTpsRequest, runtime: Util.RuntimeOptions): OnsTrendTopicInputTpsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsTrendTopicInputTps', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsTrendTopicInputTps(request: OnsTrendTopicInputTpsRequest): OnsTrendTopicInputTpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsTrendTopicInputTpsWithOptions(request, runtime);
}

model OnsWarnCreateRequest {
  groupId?: string(name='GroupId'),
  topic?: string(name='Topic'),
  threshold?: string(name='Threshold'),
  contacts?: string(name='Contacts'),
  delayTime?: string(name='DelayTime'),
  blockTime?: string(name='BlockTime'),
  alertTime?: string(name='AlertTime'),
  level?: string(name='Level'),
  instanceId?: string(name='InstanceId'),
}

model OnsWarnCreateResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsWarnCreateResponse = {
  headers: map[string]string(name='headers'),
  body: OnsWarnCreateResponseBody(name='body'),
}

async function onsWarnCreateWithOptions(request: OnsWarnCreateRequest, runtime: Util.RuntimeOptions): OnsWarnCreateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsWarnCreate', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsWarnCreate(request: OnsWarnCreateRequest): OnsWarnCreateResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsWarnCreateWithOptions(request, runtime);
}

model OnsWarnDeleteRequest {
  groupId?: string(name='GroupId'),
  topic?: string(name='Topic'),
  instanceId?: string(name='InstanceId'),
}

model OnsWarnDeleteResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsWarnDeleteResponse = {
  headers: map[string]string(name='headers'),
  body: OnsWarnDeleteResponseBody(name='body'),
}

async function onsWarnDeleteWithOptions(request: OnsWarnDeleteRequest, runtime: Util.RuntimeOptions): OnsWarnDeleteResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsWarnDelete', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsWarnDelete(request: OnsWarnDeleteRequest): OnsWarnDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsWarnDeleteWithOptions(request, runtime);
}

model OpenOnsServiceResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model OpenOnsServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenOnsServiceResponseBody(name='body'),
}

async function openOnsServiceWithOptions(runtime: Util.RuntimeOptions): OpenOnsServiceResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('OpenOnsService', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function openOnsService(): OpenOnsServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openOnsServiceWithOptions(runtime);
}

model TagResourcesRequest {
  instanceId?: string(name='InstanceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  resourceId?: [ string ](name='ResourceId'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  instanceId?: string(name='InstanceId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2019-02-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

