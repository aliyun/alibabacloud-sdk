/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('swas-open', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateFirewallRuleRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  ruleProtocol?: string(name='RuleProtocol'),
  port?: string(name='Port'),
  clientToken?: string(name='ClientToken'),
  remark?: string(name='Remark'),
}

model CreateFirewallRuleResponseBody = {
  requestId?: string(name='RequestId'),
  firewallId?: string(name='FirewallId'),
}

model CreateFirewallRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFirewallRuleResponseBody(name='body'),
}

async function createFirewallRuleWithOptions(request: CreateFirewallRuleRequest, runtime: Util.RuntimeOptions): CreateFirewallRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateFirewallRule', '2020-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createFirewallRule(request: CreateFirewallRuleRequest): CreateFirewallRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFirewallRuleWithOptions(request, runtime);
}

model CreateInstancesRequest {
  regionId?: string(name='RegionId'),
  imageId?: string(name='ImageId'),
  planId?: string(name='PlanId'),
  period?: int32(name='Period'),
  autoRenew?: boolean(name='AutoRenew'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod'),
  dataDiskSize?: long(name='DataDiskSize'),
  amount?: int32(name='Amount'),
  chargeType?: string(name='ChargeType'),
  clientToken?: string(name='ClientToken'),
}

model CreateInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model CreateInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstancesResponseBody(name='body'),
}

async function createInstancesWithOptions(request: CreateInstancesRequest, runtime: Util.RuntimeOptions): CreateInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateInstances', '2020-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createInstances(request: CreateInstancesRequest): CreateInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstancesWithOptions(request, runtime);
}

model CreateSnapshotRequest {
  regionId?: string(name='RegionId'),
  diskId?: string(name='DiskId'),
  snapshotName?: string(name='SnapshotName'),
  clientToken?: string(name='ClientToken'),
}

model CreateSnapshotResponseBody = {
  snapshotId?: string(name='SnapshotId'),
  requestId?: string(name='RequestId'),
}

model CreateSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSnapshotResponseBody(name='body'),
}

async function createSnapshotWithOptions(request: CreateSnapshotRequest, runtime: Util.RuntimeOptions): CreateSnapshotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSnapshot', '2020-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSnapshotWithOptions(request, runtime);
}

model DeleteFirewallRuleRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  ruleId?: string(name='RuleId'),
  clientToken?: string(name='ClientToken'),
}

model DeleteFirewallRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteFirewallRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFirewallRuleResponseBody(name='body'),
}

async function deleteFirewallRuleWithOptions(request: DeleteFirewallRuleRequest, runtime: Util.RuntimeOptions): DeleteFirewallRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteFirewallRule', '2020-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteFirewallRule(request: DeleteFirewallRuleRequest): DeleteFirewallRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFirewallRuleWithOptions(request, runtime);
}

model DeleteSnapshotRequest {
  regionId?: string(name='RegionId'),
  snapshotId?: string(name='SnapshotId'),
  clientToken?: string(name='ClientToken'),
}

model DeleteSnapshotResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSnapshotResponseBody(name='body'),
}

async function deleteSnapshotWithOptions(request: DeleteSnapshotRequest, runtime: Util.RuntimeOptions): DeleteSnapshotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSnapshot', '2020-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnapshotWithOptions(request, runtime);
}

model ListDisksRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  diskIds?: string(name='DiskIds'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model ListDisksResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  disks?: [ 
    {
      creationTime?: string(name='CreationTime'),
      status?: string(name='Status'),
      device?: string(name='Device'),
      size?: int32(name='Size'),
      diskName?: string(name='DiskName'),
      diskChargeType?: string(name='DiskChargeType'),
      diskType?: string(name='DiskType'),
      category?: string(name='Category'),
      diskId?: string(name='DiskId'),
      instanceId?: string(name='InstanceId'),
      regionId?: string(name='RegionId'),
    }
  ](name='Disks'),
}

model ListDisksResponse = {
  headers: map[string]string(name='headers'),
  body: ListDisksResponseBody(name='body'),
}

async function listDisksWithOptions(request: ListDisksRequest, runtime: Util.RuntimeOptions): ListDisksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDisks', '2020-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDisks(request: ListDisksRequest): ListDisksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDisksWithOptions(request, runtime);
}

model ListFirewallRulesRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model ListFirewallRulesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  firewallRules?: [ 
    {
      remark?: string(name='Remark'),
      port?: string(name='Port'),
      ruleId?: string(name='RuleId'),
      ruleProtocol?: string(name='RuleProtocol'),
    }
  ](name='FirewallRules'),
}

model ListFirewallRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListFirewallRulesResponseBody(name='body'),
}

async function listFirewallRulesWithOptions(request: ListFirewallRulesRequest, runtime: Util.RuntimeOptions): ListFirewallRulesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListFirewallRules', '2020-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listFirewallRules(request: ListFirewallRulesRequest): ListFirewallRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFirewallRulesWithOptions(request, runtime);
}

model ListImagesRequest {
  regionId?: string(name='RegionId'),
  imageIds?: string(name='ImageIds'),
  imageType?: string(name='ImageType'),
}

model ListImagesResponseBody = {
  requestId?: string(name='RequestId'),
  images?: [ 
    {
      imageType?: string(name='ImageType'),
      description?: string(name='Description'),
      imageName?: string(name='ImageName'),
      imageId?: string(name='ImageId'),
    }
  ](name='Images'),
}

model ListImagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListImagesResponseBody(name='body'),
}

async function listImagesWithOptions(request: ListImagesRequest, runtime: Util.RuntimeOptions): ListImagesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListImages', '2020-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listImages(request: ListImagesRequest): ListImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listImagesWithOptions(request, runtime);
}

model ListInstancesRequest {
  regionId?: string(name='RegionId'),
  instanceIds?: string(name='InstanceIds'),
  chargeType?: string(name='ChargeType'),
  publicIpAddresses?: string(name='PublicIpAddresses'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      status?: string(name='Status'),
      creationTime?: string(name='CreationTime'),
      innerIpAddress?: string(name='InnerIpAddress'),
      chargeType?: string(name='ChargeType'),
      instanceId?: string(name='InstanceId'),
      planId?: string(name='PlanId'),
      publicIpAddress?: string(name='PublicIpAddress'),
      regionId?: string(name='RegionId'),
      expiredTime?: string(name='ExpiredTime'),
      instanceName?: string(name='InstanceName'),
      businessStatus?: string(name='BusinessStatus'),
      ddosStatus?: string(name='DdosStatus'),
      imageId?: string(name='ImageId'),
    }
  ](name='Instances'),
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(request: ListInstancesRequest, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListInstances', '2020-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(request, runtime);
}

model ListPlansRequest {
  regionId?: string(name='RegionId'),
}

model ListPlansResponseBody = {
  plans?: [ 
    {
      core?: int32(name='Core'),
      bandwidth?: int32(name='Bandwidth'),
      diskSize?: int32(name='DiskSize'),
      flow?: int32(name='Flow'),
      memory?: int32(name='Memory'),
      planId?: string(name='PlanId'),
    }
  ](name='Plans'),
  requestId?: string(name='RequestId'),
}

model ListPlansResponse = {
  headers: map[string]string(name='headers'),
  body: ListPlansResponseBody(name='body'),
}

async function listPlansWithOptions(request: ListPlansRequest, runtime: Util.RuntimeOptions): ListPlansResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPlans', '2020-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPlans(request: ListPlansRequest): ListPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPlansWithOptions(request, runtime);
}

model ListRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegionsWithOptions(runtime: Util.RuntimeOptions): ListRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListRegions', '2020-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRegions(): ListRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRegionsWithOptions(runtime);
}

model ListSnapshotsRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  diskId?: string(name='DiskId'),
  snapshotIds?: string(name='SnapshotIds'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model ListSnapshotsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  snapshots?: [ 
    {
      status?: string(name='Status'),
      creationTime?: string(name='CreationTime'),
      sourceDiskId?: string(name='SourceDiskId'),
      snapshotName?: string(name='SnapshotName'),
      progress?: string(name='Progress'),
      remark?: string(name='Remark'),
      snapshotId?: string(name='SnapshotId'),
      sourceDiskType?: string(name='SourceDiskType'),
      regionId?: string(name='RegionId'),
    }
  ](name='Snapshots'),
}

model ListSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSnapshotsResponseBody(name='body'),
}

async function listSnapshotsWithOptions(request: ListSnapshotsRequest, runtime: Util.RuntimeOptions): ListSnapshotsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSnapshots', '2020-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSnapshots(request: ListSnapshotsRequest): ListSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSnapshotsWithOptions(request, runtime);
}

model RebootInstanceRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
}

model RebootInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RebootInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RebootInstanceResponseBody(name='body'),
}

async function rebootInstanceWithOptions(request: RebootInstanceRequest, runtime: Util.RuntimeOptions): RebootInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RebootInstance', '2020-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rebootInstance(request: RebootInstanceRequest): RebootInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootInstanceWithOptions(request, runtime);
}

model RenewInstanceRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  period?: int32(name='Period'),
  clientToken?: string(name='ClientToken'),
}

model RenewInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstanceWithOptions(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RenewInstance', '2020-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceWithOptions(request, runtime);
}

model ResetDiskRequest {
  regionId?: string(name='RegionId'),
  diskId?: string(name='DiskId'),
  clientToken?: string(name='ClientToken'),
  snapshotId?: string(name='SnapshotId'),
}

model ResetDiskResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetDiskResponse = {
  headers: map[string]string(name='headers'),
  body: ResetDiskResponseBody(name='body'),
}

async function resetDiskWithOptions(request: ResetDiskRequest, runtime: Util.RuntimeOptions): ResetDiskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetDisk', '2020-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetDisk(request: ResetDiskRequest): ResetDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetDiskWithOptions(request, runtime);
}

model ResetSystemRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  imageId?: string(name='ImageId'),
  clientToken?: string(name='ClientToken'),
}

model ResetSystemResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetSystemResponse = {
  headers: map[string]string(name='headers'),
  body: ResetSystemResponseBody(name='body'),
}

async function resetSystemWithOptions(request: ResetSystemRequest, runtime: Util.RuntimeOptions): ResetSystemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetSystem', '2020-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetSystem(request: ResetSystemRequest): ResetSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetSystemWithOptions(request, runtime);
}

model StartInstanceRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
}

model StartInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartInstanceResponseBody(name='body'),
}

async function startInstanceWithOptions(request: StartInstanceRequest, runtime: Util.RuntimeOptions): StartInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartInstance', '2020-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startInstanceWithOptions(request, runtime);
}

model StopInstanceRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
}

model StopInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StopInstanceResponseBody(name='body'),
}

async function stopInstanceWithOptions(request: StopInstanceRequest, runtime: Util.RuntimeOptions): StopInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopInstance', '2020-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstanceWithOptions(request, runtime);
}

model UpdateInstanceAttributeRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  password?: string(name='Password'),
  instanceName?: string(name='InstanceName'),
  clientToken?: string(name='ClientToken'),
}

model UpdateInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceAttributeResponseBody(name='body'),
}

async function updateInstanceAttributeWithOptions(request: UpdateInstanceAttributeRequest, runtime: Util.RuntimeOptions): UpdateInstanceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateInstanceAttribute', '2020-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateInstanceAttribute(request: UpdateInstanceAttributeRequest): UpdateInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInstanceAttributeWithOptions(request, runtime);
}

model UpgradeInstanceRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  planId?: string(name='PlanId'),
  clientToken?: string(name='ClientToken'),
}

model UpgradeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeInstanceResponseBody(name='body'),
}

async function upgradeInstanceWithOptions(request: UpgradeInstanceRequest, runtime: Util.RuntimeOptions): UpgradeInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeInstance', '2020-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeInstance(request: UpgradeInstanceRequest): UpgradeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeInstanceWithOptions(request, runtime);
}

