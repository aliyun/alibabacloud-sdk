/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('swas-open', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AllocatePublicConnectionRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model AllocatePublicConnectionResponseBody = {
  publicConnection?: string(name='PublicConnection', example='db-38263fa955774501a2ae1bdaed6f****.mysql.rds.aliyuncs.com'),
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model AllocatePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocatePublicConnectionResponseBody(name='body'),
}

async function allocatePublicConnectionWithOptions(request: AllocatePublicConnectionRequest, runtime: Util.RuntimeOptions): AllocatePublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocatePublicConnection',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocatePublicConnection(request: AllocatePublicConnectionRequest): AllocatePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocatePublicConnectionWithOptions(request, runtime);
}

model CreateCustomImageRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dataSnapshotId?: string(name='DataSnapshotId', example='s-acscasca****'),
  description?: string(name='Description', example='test'),
  imageName?: string(name='ImageName', example='customImage-test'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  systemSnapshotId?: string(name='SystemSnapshotId', example='s-acscasca****'),
}

model CreateCustomImageResponseBody = {
  imageId?: string(name='ImageId', example='m-csaascsaccscs****'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model CreateCustomImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCustomImageResponseBody(name='body'),
}

async function createCustomImageWithOptions(request: CreateCustomImageRequest, runtime: Util.RuntimeOptions): CreateCustomImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dataSnapshotId)) {
    query['DataSnapshotId'] = request.dataSnapshotId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.systemSnapshotId)) {
    query['SystemSnapshotId'] = request.systemSnapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCustomImage',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCustomImage(request: CreateCustomImageRequest): CreateCustomImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomImageWithOptions(request, runtime);
}

model CreateFirewallRuleRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  port?: string(name='Port', example='3306'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  remark?: string(name='Remark'),
  ruleProtocol?: string(name='RuleProtocol', example='TCP'),
}

model CreateFirewallRuleResponseBody = {
  firewallId?: string(name='FirewallId', example='8007e18c61024aafbd776d52d0****'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model CreateFirewallRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFirewallRuleResponseBody(name='body'),
}

async function createFirewallRuleWithOptions(request: CreateFirewallRuleRequest, runtime: Util.RuntimeOptions): CreateFirewallRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.ruleProtocol)) {
    query['RuleProtocol'] = request.ruleProtocol;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFirewallRule',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFirewallRule(request: CreateFirewallRuleRequest): CreateFirewallRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFirewallRuleWithOptions(request, runtime);
}

model CreateInstancesRequest {
  amount?: int32(name='Amount', example='1'),
  autoRenew?: boolean(name='AutoRenew', example='false'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', example='1'),
  chargeType?: string(name='ChargeType', example='PrePaid'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dataDiskSize?: long(name='DataDiskSize', example='20'),
  imageId?: string(name='ImageId', example='e2c9c365024a44369c9b955a998a****'),
  period?: int32(name='Period', example='1'),
  planId?: string(name='PlanId', example='swas.s1.c1m1s40b3t05'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CreateInstancesResponseBody = {
  instanceIds?: [ string ](name='InstanceIds'),
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E1FEE'),
}

model CreateInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstancesResponseBody(name='body'),
}

async function createInstancesWithOptions(request: CreateInstancesRequest, runtime: Util.RuntimeOptions): CreateInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoRenewPeriod)) {
    query['AutoRenewPeriod'] = request.autoRenewPeriod;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dataDiskSize)) {
    query['DataDiskSize'] = request.dataDiskSize;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstances',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInstances(request: CreateInstancesRequest): CreateInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstancesWithOptions(request, runtime);
}

model CreateSnapshotRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  diskId?: string(name='DiskId', example='d-bp18kjxg9ebrhsgi****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  snapshotName?: string(name='SnapshotName', example='test-SnapshotName'),
}

model CreateSnapshotResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  snapshotId?: string(name='SnapshotId', example='s-bp16oazlsold4dks****'),
}

model CreateSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSnapshotResponseBody(name='body'),
}

async function createSnapshotWithOptions(request: CreateSnapshotRequest, runtime: Util.RuntimeOptions): CreateSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotName)) {
    query['SnapshotName'] = request.snapshotName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSnapshot',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSnapshotWithOptions(request, runtime);
}

model DeleteCustomImageRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  imageId?: string(name='ImageId', example='m-2zehv38jjmwva1ee****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteCustomImageResponseBody = {
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model DeleteCustomImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCustomImageResponseBody(name='body'),
}

async function deleteCustomImageWithOptions(request: DeleteCustomImageRequest, runtime: Util.RuntimeOptions): DeleteCustomImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCustomImage',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCustomImage(request: DeleteCustomImageRequest): DeleteCustomImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCustomImageWithOptions(request, runtime);
}

model DeleteFirewallRuleRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  ruleId?: string(name='RuleId', example='eeea34d9867b4d55a4ff8d5fcfbd****'),
}

model DeleteFirewallRuleResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model DeleteFirewallRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFirewallRuleResponseBody(name='body'),
}

async function deleteFirewallRuleWithOptions(request: DeleteFirewallRuleRequest, runtime: Util.RuntimeOptions): DeleteFirewallRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFirewallRule',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFirewallRule(request: DeleteFirewallRuleRequest): DeleteFirewallRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFirewallRuleWithOptions(request, runtime);
}

model DeleteSnapshotRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  snapshotId?: string(name='SnapshotId', example='s-bp16oazlsold4dks****'),
}

model DeleteSnapshotResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model DeleteSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSnapshotResponseBody(name='body'),
}

async function deleteSnapshotWithOptions(request: DeleteSnapshotRequest, runtime: Util.RuntimeOptions): DeleteSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSnapshot',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnapshotWithOptions(request, runtime);
}

model DescribeCloudAssistantStatusRequest {
  instanceIds?: [ string ](name='InstanceIds'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeCloudAssistantStatusShrinkRequest {
  instanceIdsShrink?: string(name='InstanceIds'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeCloudAssistantStatusResponseBody = {
  cloudAssistantStatus?: [ 
    {
      instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
      status?: boolean(name='Status', example='true'),
    }
  ](name='CloudAssistantStatus'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeCloudAssistantStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudAssistantStatusResponseBody(name='body'),
}

async function describeCloudAssistantStatusWithOptions(tmpReq: DescribeCloudAssistantStatusRequest, runtime: Util.RuntimeOptions): DescribeCloudAssistantStatusResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeCloudAssistantStatusShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudAssistantStatus',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudAssistantStatus(request: DescribeCloudAssistantStatusRequest): DescribeCloudAssistantStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudAssistantStatusWithOptions(request, runtime);
}

model DescribeDatabaseErrorLogsRequest {
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  endTime?: string(name='EndTime', example='2022-09-08T04:04Z'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime', example='2022-09-07T04:04Z'),
}

model DescribeDatabaseErrorLogsResponseBody = {
  errorLogs?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-09-08T12:11:04Z'),
      errorInfo?: string(name='ErrorInfo', example='spid52 DBCC TRACEON 3499, server process ID (SPID) 52. This is an informational message only; no user action is required'),
    }
  ](name='ErrorLogs'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model DescribeDatabaseErrorLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatabaseErrorLogsResponseBody(name='body'),
}

async function describeDatabaseErrorLogsWithOptions(request: DescribeDatabaseErrorLogsRequest, runtime: Util.RuntimeOptions): DescribeDatabaseErrorLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDatabaseErrorLogs',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDatabaseErrorLogs(request: DescribeDatabaseErrorLogsRequest): DescribeDatabaseErrorLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDatabaseErrorLogsWithOptions(request, runtime);
}

model DescribeDatabaseInstanceMetricDataRequest {
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  endTime?: string(name='EndTime', example='2022-09-07T04:04Z'),
  metricName?: string(name='MetricName', example='MySQL_MemCpuUsage'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime', example='2022-09-06T04:04Z'),
}

model DescribeDatabaseInstanceMetricDataResponseBody = {
  dataFormat?: string(name='DataFormat', example='cpuusage&memusage'),
  metricData?: string(name='MetricData', example='[  {     "date": " 2022-09-06T04:04:00Z",\\"value\\":\\"0.77&3.69\\"  } ]'),
  metricName?: string(name='MetricName', example='MySQL_MemCpuUsage'),
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
  unit?: string(name='Unit', example='%'),
}

model DescribeDatabaseInstanceMetricDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatabaseInstanceMetricDataResponseBody(name='body'),
}

async function describeDatabaseInstanceMetricDataWithOptions(request: DescribeDatabaseInstanceMetricDataRequest, runtime: Util.RuntimeOptions): DescribeDatabaseInstanceMetricDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.metricName)) {
    query['MetricName'] = request.metricName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDatabaseInstanceMetricData',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDatabaseInstanceMetricData(request: DescribeDatabaseInstanceMetricDataRequest): DescribeDatabaseInstanceMetricDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDatabaseInstanceMetricDataWithOptions(request, runtime);
}

model DescribeDatabaseInstanceParametersRequest {
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeDatabaseInstanceParametersResponseBody = {
  configParameters?: [ 
    {
      checkingCode?: string(name='CheckingCode', example='[1-65535]'),
      forceModify?: string(name='ForceModify', example='true'),
      forceRestart?: string(name='ForceRestart', example='false'),
      parameterDescription?: string(name='ParameterDescription', example='Auto-increment columns are incremented by this'),
      parameterName?: string(name='ParameterName', example='auto_increment_increment'),
      parameterValue?: string(name='ParameterValue', example='1'),
    }
  ](name='ConfigParameters'),
  engine?: string(name='Engine', example='MySQL'),
  engineVersion?: string(name='EngineVersion', example='5.5'),
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
  runningParameters?: [ 
    {
      checkingCode?: string(name='CheckingCode', example='[ON|OFF]'),
      forceModify?: string(name='ForceModify', example='true'),
      forceRestart?: string(name='ForceRestart', example='false'),
      parameterDescription?: string(name='ParameterDescription', example='When this variable has a value of 1 (the default), the server automatically grants the EXECUTE and ALTER ROUTINE privileges to the creator of a stored routine, if the user cannot already execute and alter or drop the routine. (The ALTER ROUTINE privilege is required to drop the routine.) The server also automatically drops those privileges from the creator when the routine is dropped. If automatic_sp_privileges is 0, the server does not automatically add or drop these privileges.'),
      parameterName?: string(name='ParameterName', example='autocommit'),
      parameterValue?: string(name='ParameterValue', example='ON'),
    }
  ](name='RunningParameters'),
}

model DescribeDatabaseInstanceParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatabaseInstanceParametersResponseBody(name='body'),
}

async function describeDatabaseInstanceParametersWithOptions(request: DescribeDatabaseInstanceParametersRequest, runtime: Util.RuntimeOptions): DescribeDatabaseInstanceParametersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDatabaseInstanceParameters',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDatabaseInstanceParameters(request: DescribeDatabaseInstanceParametersRequest): DescribeDatabaseInstanceParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDatabaseInstanceParametersWithOptions(request, runtime);
}

model DescribeDatabaseInstancesRequest {
  databaseInstanceIds?: string(name='DatabaseInstanceIds', example='["swasdb-xxx******","swasdb-yyy******"]'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeDatabaseInstancesResponseBody = {
  databaseInstances?: [ 
    {
      businessStatus?: string(name='BusinessStatus', example='normal'),
      chargeType?: string(name='ChargeType', example='PrePaid'),
      cpu?: string(name='Cpu', example='1'),
      creationTime?: string(name='CreationTime', example='2022-09-01T02:39:46Z'),
      databaseInstanceEdition?: string(name='DatabaseInstanceEdition', example='swas.db.c1m1s25'),
      databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
      databaseInstanceName?: string(name='DatabaseInstanceName'),
      databaseInstanceStatus?: string(name='DatabaseInstanceStatus', example='Running'),
      databaseVersion?: string(name='DatabaseVersion', example='5.7'),
      expiredTime?: string(name='ExpiredTime', example='2022-10-01T16:00:00Z'),
      memory?: string(name='Memory', example='1'),
      privateConnection?: string(name='PrivateConnection', example='rm-bp1d39opj7906****.mysql.rds.aliyuncs.com'),
      publicConnection?: string(name='PublicConnection', example='db-38263fa955774501a2ae1bdaed6f****.mysql.rds.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      storage?: int32(name='Storage', example='25'),
      superAccountName?: string(name='SuperAccountName', example='administrator'),
    }
  ](name='DatabaseInstances'),
  pageNumber?: int32(name='PageNumber', example='10'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4****'),
  totalCount?: int32(name='TotalCount', example='5'),
}

model DescribeDatabaseInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatabaseInstancesResponseBody(name='body'),
}

async function describeDatabaseInstancesWithOptions(request: DescribeDatabaseInstancesRequest, runtime: Util.RuntimeOptions): DescribeDatabaseInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.databaseInstanceIds)) {
    query['DatabaseInstanceIds'] = request.databaseInstanceIds;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDatabaseInstances',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDatabaseInstances(request: DescribeDatabaseInstancesRequest): DescribeDatabaseInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDatabaseInstancesWithOptions(request, runtime);
}

model DescribeDatabaseSlowLogRecordsRequest {
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  endTime?: string(name='EndTime', example='2022-09-08T04:04Z'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime', example='2022-09-07T04:04Z'),
}

model DescribeDatabaseSlowLogRecordsResponseBody = {
  engine?: string(name='Engine', example='MySQL'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  physicalIORead?: long(name='PhysicalIORead', example='200'),
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
  slowLogs?: [ 
    {
      DBName?: string(name='DBName', example='testDB'),
      executionStartTime?: string(name='ExecutionStartTime', example='2022-09-08T01:40:44Z'),
      hostAddress?: string(name='HostAddress', example='xxx[xxx] @ [1xx.xxx.xxx.xx]'),
      lockTimes?: long(name='LockTimes', example='0'),
      parseRowCounts?: long(name='ParseRowCounts', example='1'),
      queryTimeMS?: long(name='QueryTimeMS', example='2001'),
      queryTimes?: long(name='QueryTimes', example='2'),
      returnRowCounts?: long(name='ReturnRowCounts', example='1'),
      SQLText?: string(name='SQLText', example='select sleep(2)'),
    }
  ](name='SlowLogs'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model DescribeDatabaseSlowLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatabaseSlowLogRecordsResponseBody(name='body'),
}

async function describeDatabaseSlowLogRecordsWithOptions(request: DescribeDatabaseSlowLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeDatabaseSlowLogRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDatabaseSlowLogRecords',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDatabaseSlowLogRecords(request: DescribeDatabaseSlowLogRecordsRequest): DescribeDatabaseSlowLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDatabaseSlowLogRecordsWithOptions(request, runtime);
}

model DescribeInvocationResultRequest {
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  invokeId?: string(name='InvokeId', example='t-bj02prjhw1n****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeInvocationResultResponseBody = {
  invocationResult?: {
    errorCode?: string(name='ErrorCode', example='InstanceNotExists'),
    errorInfo?: string(name='ErrorInfo', example='the specified instance does not exists'),
    exitCode?: long(name='ExitCode', example='0'),
    finishedTime?: string(name='FinishedTime', example='2022-07-11T06:37:17Z'),
    instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
    invocationStatus?: string(name='InvocationStatus', example='Success'),
    invokeId?: string(name='InvokeId', example='t-bj02prjje65****'),
    invokeRecordStatus?: string(name='InvokeRecordStatus', example='Finished'),
    invokeUser?: string(name='InvokeUser', example='root'),
    output?: string(name='Output', example='YWRtaW4K'),
    startTime?: string(name='StartTime', example='2022-07-11T06:37:16Z'),
  }(name='InvocationResult'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model DescribeInvocationResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInvocationResultResponseBody(name='body'),
}

async function describeInvocationResultWithOptions(request: DescribeInvocationResultRequest, runtime: Util.RuntimeOptions): DescribeInvocationResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.invokeId)) {
    query['InvokeId'] = request.invokeId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInvocationResult',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInvocationResult(request: DescribeInvocationResultRequest): DescribeInvocationResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInvocationResultWithOptions(request, runtime);
}

model DescribeInvocationsRequest {
  instanceId?: string(name='InstanceId', example='3a658ca270df4df39f22e289b338****'),
  invokeStatus?: string(name='InvokeStatus', example='Finished'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeInvocationsResponseBody = {
  invocations?: [ 
    {
      commandContent?: string(name='CommandContent', example='bHM='),
      commandName?: string(name='CommandName', example='testname'),
      commandType?: string(name='CommandType', example='RunShellScript'),
      creationTime?: string(name='CreationTime', example='2022-07-11T06:37:16Z'),
      invocationStatus?: string(name='InvocationStatus', example='Success'),
      invokeId?: string(name='InvokeId', example='t-hz02p9545t6****'),
      invokeStatus?: string(name='InvokeStatus', example='Finished'),
      parameters?: map[string]any(name='Parameters', example='{}'),
    }
  ](name='Invocations'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeInvocationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInvocationsResponseBody(name='body'),
}

async function describeInvocationsWithOptions(request: DescribeInvocationsRequest, runtime: Util.RuntimeOptions): DescribeInvocationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.invokeStatus)) {
    query['InvokeStatus'] = request.invokeStatus;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInvocations',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInvocations(request: DescribeInvocationsRequest): DescribeInvocationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInvocationsWithOptions(request, runtime);
}

model InstallCloudAssistantRequest {
  instanceIds?: [ string ](name='InstanceIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model InstallCloudAssistantShrinkRequest {
  instanceIdsShrink?: string(name='InstanceIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model InstallCloudAssistantResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model InstallCloudAssistantResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InstallCloudAssistantResponseBody(name='body'),
}

async function installCloudAssistantWithOptions(tmpReq: InstallCloudAssistantRequest, runtime: Util.RuntimeOptions): InstallCloudAssistantResponse {
  Util.validateModel(tmpReq);
  var request = new InstallCloudAssistantShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InstallCloudAssistant',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function installCloudAssistant(request: InstallCloudAssistantRequest): InstallCloudAssistantResponse {
  var runtime = new Util.RuntimeOptions{};
  return installCloudAssistantWithOptions(request, runtime);
}

model ListDisksRequest {
  diskIds?: string(name='DiskIds', example='["d-bp14wq0149cpp2x****", "d-bp14wq0149cpp2y****"]'),
  instanceId?: string(name='InstanceId', example='2ad1ae67295445f598017499dc****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListDisksResponseBody = {
  disks?: [ 
    {
      category?: string(name='Category', example='ESSD'),
      creationTime?: string(name='CreationTime', example='2021-03-08T05:31:06Z'),
      device?: string(name='Device', example='/dev/xvda'),
      diskChargeType?: string(name='DiskChargeType', example='PrePaid'),
      diskId?: string(name='DiskId', example='d-bp14wq0149cpp2x****'),
      diskName?: string(name='DiskName', example='SystemDisk'),
      diskType?: string(name='DiskType', example='System'),
      instanceId?: string(name='InstanceId', example='2ad1ae67295445f598017499dc****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      size?: int32(name='Size', example='50'),
      status?: string(name='Status', example='In_use'),
    }
  ](name='Disks'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListDisksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDisksResponseBody(name='body'),
}

async function listDisksWithOptions(request: ListDisksRequest, runtime: Util.RuntimeOptions): ListDisksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskIds)) {
    query['DiskIds'] = request.diskIds;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDisks',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDisks(request: ListDisksRequest): ListDisksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDisksWithOptions(request, runtime);
}

model ListFirewallRulesRequest {
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListFirewallRulesResponseBody = {
  firewallRules?: [ 
    {
      port?: string(name='Port', example='3306'),
      remark?: string(name='Remark'),
      ruleId?: string(name='RuleId', example='eeea34d9867b4d55a4ff8d5fcfbd****'),
      ruleProtocol?: string(name='RuleProtocol', example='TCP'),
    }
  ](name='FirewallRules'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  totalCount?: int32(name='TotalCount', example='4'),
}

model ListFirewallRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFirewallRulesResponseBody(name='body'),
}

async function listFirewallRulesWithOptions(request: ListFirewallRulesRequest, runtime: Util.RuntimeOptions): ListFirewallRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFirewallRules',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFirewallRules(request: ListFirewallRulesRequest): ListFirewallRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFirewallRulesWithOptions(request, runtime);
}

model ListImagesRequest {
  imageIds?: string(name='ImageIds', example='["fe9c66133a9d4688872869726b52****", "794c230fd3e64ea19f83f4d7a0ad****"]'),
  imageType?: string(name='ImageType', example='system'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListImagesResponseBody = {
  images?: [ 
    {
      description?: string(name='Description'),
      imageId?: string(name='ImageId', example='794c230fd3e64ea19f83f4d7a0ad****'),
      imageName?: string(name='ImageName', example='WordPress-4.8.1'),
      imageType?: string(name='ImageType', example='app'),
      platform?: string(name='Platform', example='Linux'),
    }
  ](name='Images'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model ListImagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListImagesResponseBody(name='body'),
}

async function listImagesWithOptions(request: ListImagesRequest, runtime: Util.RuntimeOptions): ListImagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageIds)) {
    query['ImageIds'] = request.imageIds;
  }
  if (!Util.isUnset(request.imageType)) {
    query['ImageType'] = request.imageType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListImages',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listImages(request: ListImagesRequest): ListImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listImagesWithOptions(request, runtime);
}

model ListInstancePlansModificationRequest {
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListInstancePlansModificationResponseBody = {
  plans?: [ 
    {
      bandwidth?: int32(name='Bandwidth', example='3'),
      core?: int32(name='Core', example='2'),
      currency?: string(name='Currency', example='CNY'),
      diskSize?: int32(name='DiskSize', example='40'),
      diskType?: string(name='DiskType', example='ESSD'),
      flow?: int32(name='Flow', example='400'),
      memory?: int32(name='Memory', example='1'),
      originPrice?: double(name='OriginPrice', example='60'),
      planId?: string(name='PlanId', example='swas.s2.c2m1s40b3t04'),
      supportPlatform?: string(name='SupportPlatform', example='["Linux","Windows"]'),
    }
  ](name='Plans'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model ListInstancePlansModificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancePlansModificationResponseBody(name='body'),
}

async function listInstancePlansModificationWithOptions(request: ListInstancePlansModificationRequest, runtime: Util.RuntimeOptions): ListInstancePlansModificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstancePlansModification',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstancePlansModification(request: ListInstancePlansModificationRequest): ListInstancePlansModificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancePlansModificationWithOptions(request, runtime);
}

model ListInstancesRequest {
  chargeType?: string(name='ChargeType', example='PrePaid'),
  instanceIds?: string(name='InstanceIds', example='["2ad1ae67295445f598017499dc****", "2ad1ae67295445f598017123dc****"]'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  publicIpAddresses?: string(name='PublicIpAddresses', example='["42.1.**.**", "42.2.**.**"]'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      chargeType?: string(name='ChargeType', example='PrePaid'),
      creationTime?: string(name='CreationTime', example='2021-03-08T05:31:06Z'),
      ddosStatus?: string(name='DdosStatus', example='Normal'),
      expiredTime?: string(name='ExpiredTime', example='2021-05-08T16:00:00Z'),
      imageId?: string(name='ImageId', example='fe9c66133a9d4688872869726b52****'),
      innerIpAddress?: string(name='InnerIpAddress', example='172.26.XX.XX'),
      instanceId?: string(name='InstanceId', example='2ad1ae67295445f598017499dc****'),
      instanceName?: string(name='InstanceName', example='test-InstanceName'),
      planId?: string(name='PlanId', example='swas.s2.c2m2s50b4t08'),
      publicIpAddress?: string(name='PublicIpAddress', example='42.1.XX.XX'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: string(name='Status', example='Running'),
    }
  ](name='Instances'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(request: ListInstancesRequest, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.publicIpAddresses)) {
    query['PublicIpAddresses'] = request.publicIpAddresses;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(request, runtime);
}

model ListInstancesTrafficPackagesRequest {
  instanceIds?: string(name='InstanceIds', example='["2ad1ae67295445f598017499dc******","2ad1ae67295445f598017499dc******"]'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListInstancesTrafficPackagesResponseBody = {
  instanceTrafficPackageUsages?: [ 
    {
      instanceId?: string(name='InstanceId', example='ccscqwqwqqqw****'),
      trafficOverflow?: long(name='TrafficOverflow', example='0'),
      trafficPackageRemaining?: long(name='TrafficPackageRemaining', example='10000'),
      trafficPackageTotal?: long(name='TrafficPackageTotal', example='20000'),
      trafficUsed?: long(name='TrafficUsed', example='10000'),
    }
  ](name='InstanceTrafficPackageUsages'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model ListInstancesTrafficPackagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesTrafficPackagesResponseBody(name='body'),
}

async function listInstancesTrafficPackagesWithOptions(request: ListInstancesTrafficPackagesRequest, runtime: Util.RuntimeOptions): ListInstancesTrafficPackagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstancesTrafficPackages',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstancesTrafficPackages(request: ListInstancesTrafficPackagesRequest): ListInstancesTrafficPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesTrafficPackagesWithOptions(request, runtime);
}

model ListPlansRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListPlansResponseBody = {
  plans?: [ 
    {
      bandwidth?: int32(name='Bandwidth', example='3'),
      core?: int32(name='Core', example='2'),
      currency?: string(name='Currency', example='CNY'),
      diskSize?: int32(name='DiskSize', example='40'),
      diskType?: string(name='DiskType', example='ESSD'),
      flow?: int32(name='Flow', example='400'),
      memory?: int32(name='Memory', example='1'),
      originPrice?: double(name='OriginPrice', example='60'),
      planId?: string(name='PlanId', example='swas.s2.c2m1s40b3t04'),
      supportPlatform?: string(name='SupportPlatform', example='["Linux","Windows"]'),
    }
  ](name='Plans'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model ListPlansResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPlansResponseBody(name='body'),
}

async function listPlansWithOptions(request: ListPlansRequest, runtime: Util.RuntimeOptions): ListPlansResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPlans',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPlans(request: ListPlansRequest): ListPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPlansWithOptions(request, runtime);
}

model ListRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint', example='swas.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegionsWithOptions(runtime: Util.RuntimeOptions): ListRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListRegions',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRegions(): ListRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRegionsWithOptions(runtime);
}

model ListSnapshotsRequest {
  diskId?: string(name='DiskId', example='d-bp14wq0149cpp2xy****'),
  instanceId?: string(name='InstanceId', example='2ad1ae67295445f598017499dc****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  snapshotIds?: string(name='SnapshotIds', example='["s-bp16oazlsold4dks****", "s-bp16oazlsold4abc****"]'),
}

model ListSnapshotsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  snapshots?: [ 
    {
      creationTime?: string(name='CreationTime', example='2021-03-09T07:12:49Z'),
      progress?: string(name='Progress', example='100%'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      remark?: string(name='Remark', example='test-Remark'),
      snapshotId?: string(name='SnapshotId', example='s-bp16oazlsold4dks****'),
      snapshotName?: string(name='SnapshotName', example='test-SnapshotName'),
      sourceDiskId?: string(name='SourceDiskId', example='d-bp14wq0149cpp2xy****'),
      sourceDiskType?: string(name='SourceDiskType', example='System'),
      status?: string(name='Status', example='Accomplished'),
    }
  ](name='Snapshots'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSnapshotsResponseBody(name='body'),
}

async function listSnapshotsWithOptions(request: ListSnapshotsRequest, runtime: Util.RuntimeOptions): ListSnapshotsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotIds)) {
    query['SnapshotIds'] = request.snapshotIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSnapshots',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSnapshots(request: ListSnapshotsRequest): ListSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSnapshotsWithOptions(request, runtime);
}

model LoginInstanceRequest {
  instanceId?: string(name='InstanceId', example='9ae7106e68eb4402b0dcbd48a9de****'),
  password?: string(name='Password', example='Test****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  username?: string(name='Username', example='administrator'),
}

model LoginInstanceResponseBody = {
  redirectUrl?: string(name='RedirectUrl', example='https://ecs-workbench.aliyun.com/view/instance/single/gbktfz****'),
  requestId?: string(name='RequestId', example='C2DE174B-7196-5778-A00D-6EA2601B****'),
}

model LoginInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LoginInstanceResponseBody(name='body'),
}

async function loginInstanceWithOptions(request: LoginInstanceRequest, runtime: Util.RuntimeOptions): LoginInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.username)) {
    query['Username'] = request.username;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'LoginInstance',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function loginInstance(request: LoginInstanceRequest): LoginInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return loginInstanceWithOptions(request, runtime);
}

model ModifyDatabaseInstanceDescriptionRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  databaseInstanceDescription?: string(name='DatabaseInstanceDescription'),
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyDatabaseInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model ModifyDatabaseInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDatabaseInstanceDescriptionResponseBody(name='body'),
}

async function modifyDatabaseInstanceDescriptionWithOptions(request: ModifyDatabaseInstanceDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDatabaseInstanceDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.databaseInstanceDescription)) {
    query['DatabaseInstanceDescription'] = request.databaseInstanceDescription;
  }
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDatabaseInstanceDescription',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDatabaseInstanceDescription(request: ModifyDatabaseInstanceDescriptionRequest): ModifyDatabaseInstanceDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDatabaseInstanceDescriptionWithOptions(request, runtime);
}

model ModifyDatabaseInstanceParameterRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  forceRestart?: boolean(name='ForceRestart', example='false'),
  parameters?: string(name='Parameters', example='{"delayed_insert_timeout":"600","max_length_for_sort_data":"2048"}'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyDatabaseInstanceParameterResponseBody = {
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model ModifyDatabaseInstanceParameterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDatabaseInstanceParameterResponseBody(name='body'),
}

async function modifyDatabaseInstanceParameterWithOptions(request: ModifyDatabaseInstanceParameterRequest, runtime: Util.RuntimeOptions): ModifyDatabaseInstanceParameterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.forceRestart)) {
    query['ForceRestart'] = request.forceRestart;
  }
  if (!Util.isUnset(request.parameters)) {
    query['Parameters'] = request.parameters;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDatabaseInstanceParameter',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDatabaseInstanceParameter(request: ModifyDatabaseInstanceParameterRequest): ModifyDatabaseInstanceParameterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDatabaseInstanceParameterWithOptions(request, runtime);
}

model ModifyImageShareStatusRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  imageId?: string(name='ImageId', example='m-saacssasc****'),
  operation?: string(name='Operation', example='Share'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyImageShareStatusResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C****'),
}

model ModifyImageShareStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyImageShareStatusResponseBody(name='body'),
}

async function modifyImageShareStatusWithOptions(request: ModifyImageShareStatusRequest, runtime: Util.RuntimeOptions): ModifyImageShareStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.operation)) {
    query['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyImageShareStatus',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyImageShareStatus(request: ModifyImageShareStatusRequest): ModifyImageShareStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageShareStatusWithOptions(request, runtime);
}

model RebootInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model RebootInstanceResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model RebootInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebootInstanceResponseBody(name='body'),
}

async function rebootInstanceWithOptions(request: RebootInstanceRequest, runtime: Util.RuntimeOptions): RebootInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebootInstance',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rebootInstance(request: RebootInstanceRequest): RebootInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootInstanceWithOptions(request, runtime);
}

model ReleasePublicConnectionRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ReleasePublicConnectionResponseBody = {
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model ReleasePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleasePublicConnectionResponseBody(name='body'),
}

async function releasePublicConnectionWithOptions(request: ReleasePublicConnectionRequest, runtime: Util.RuntimeOptions): ReleasePublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleasePublicConnection',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releasePublicConnection(request: ReleasePublicConnectionRequest): ReleasePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releasePublicConnectionWithOptions(request, runtime);
}

model RenewInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  period?: int32(name='Period', example='1'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model RenewInstanceResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstanceWithOptions(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewInstance',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceWithOptions(request, runtime);
}

model ResetDatabaseAccountPasswordRequest {
  accountPassword?: string(name='AccountPassword', example='Password****'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ResetDatabaseAccountPasswordResponseBody = {
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model ResetDatabaseAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetDatabaseAccountPasswordResponseBody(name='body'),
}

async function resetDatabaseAccountPasswordWithOptions(request: ResetDatabaseAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetDatabaseAccountPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetDatabaseAccountPassword',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetDatabaseAccountPassword(request: ResetDatabaseAccountPasswordRequest): ResetDatabaseAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetDatabaseAccountPasswordWithOptions(request, runtime);
}

model ResetDiskRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  diskId?: string(name='DiskId', example='d-bp14wq0149cpp2xy****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  snapshotId?: string(name='SnapshotId', example='s-bp16oazlsold4dks****'),
}

model ResetDiskResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model ResetDiskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetDiskResponseBody(name='body'),
}

async function resetDiskWithOptions(request: ResetDiskRequest, runtime: Util.RuntimeOptions): ResetDiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetDisk',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetDisk(request: ResetDiskRequest): ResetDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetDiskWithOptions(request, runtime);
}

model ResetSystemRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  imageId?: string(name='ImageId', example='794c230fd3e64ea19f83f4d7a0ad****'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ResetSystemResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model ResetSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetSystemResponseBody(name='body'),
}

async function resetSystemWithOptions(request: ResetSystemRequest, runtime: Util.RuntimeOptions): ResetSystemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetSystem',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetSystem(request: ResetSystemRequest): ResetSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetSystemWithOptions(request, runtime);
}

model RestartDatabaseInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model RestartDatabaseInstanceResponseBody = {
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model RestartDatabaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartDatabaseInstanceResponseBody(name='body'),
}

async function restartDatabaseInstanceWithOptions(request: RestartDatabaseInstanceRequest, runtime: Util.RuntimeOptions): RestartDatabaseInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestartDatabaseInstance',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartDatabaseInstance(request: RestartDatabaseInstanceRequest): RestartDatabaseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDatabaseInstanceWithOptions(request, runtime);
}

model RunCommandRequest {
  commandContent?: string(name='CommandContent', example='ifconfig -s'),
  enableParameter?: boolean(name='EnableParameter', example='false'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  name?: string(name='Name', example='testName'),
  parameters?: map[string]any(name='Parameters', example='{"name":"Jack", "accessKey":"LTAIdyvdIqaRY****"}'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  timeout?: int32(name='Timeout', example='60'),
  type?: string(name='Type', example='RunShellScript'),
  windowsPasswordName?: string(name='WindowsPasswordName', example='axtSecretPassword'),
  workingDir?: string(name='WorkingDir', example='/home/'),
  workingUser?: string(name='WorkingUser', example='root'),
}

model RunCommandShrinkRequest {
  commandContent?: string(name='CommandContent', example='ifconfig -s'),
  enableParameter?: boolean(name='EnableParameter', example='false'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  name?: string(name='Name', example='testName'),
  parametersShrink?: string(name='Parameters', example='{"name":"Jack", "accessKey":"LTAIdyvdIqaRY****"}'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  timeout?: int32(name='Timeout', example='60'),
  type?: string(name='Type', example='RunShellScript'),
  windowsPasswordName?: string(name='WindowsPasswordName', example='axtSecretPassword'),
  workingDir?: string(name='WorkingDir', example='/home/'),
  workingUser?: string(name='WorkingUser', example='root'),
}

model RunCommandResponseBody = {
  invokeId?: string(name='InvokeId', example='t-hz02p9545t6****'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model RunCommandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunCommandResponseBody(name='body'),
}

async function runCommandWithOptions(tmpReq: RunCommandRequest, runtime: Util.RuntimeOptions): RunCommandResponse {
  Util.validateModel(tmpReq);
  var request = new RunCommandShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.parameters)) {
    request.parametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.parameters, 'Parameters', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.commandContent)) {
    query['CommandContent'] = request.commandContent;
  }
  if (!Util.isUnset(request.enableParameter)) {
    query['EnableParameter'] = request.enableParameter;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.parametersShrink)) {
    query['Parameters'] = request.parametersShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.windowsPasswordName)) {
    query['WindowsPasswordName'] = request.windowsPasswordName;
  }
  if (!Util.isUnset(request.workingDir)) {
    query['WorkingDir'] = request.workingDir;
  }
  if (!Util.isUnset(request.workingUser)) {
    query['WorkingUser'] = request.workingUser;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RunCommand',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runCommand(request: RunCommandRequest): RunCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return runCommandWithOptions(request, runtime);
}

model StartDatabaseInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model StartDatabaseInstanceResponseBody = {
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model StartDatabaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDatabaseInstanceResponseBody(name='body'),
}

async function startDatabaseInstanceWithOptions(request: StartDatabaseInstanceRequest, runtime: Util.RuntimeOptions): StartDatabaseInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDatabaseInstance',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startDatabaseInstance(request: StartDatabaseInstanceRequest): StartDatabaseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDatabaseInstanceWithOptions(request, runtime);
}

model StartInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model StartInstanceResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartInstanceResponseBody(name='body'),
}

async function startInstanceWithOptions(request: StartInstanceRequest, runtime: Util.RuntimeOptions): StartInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartInstance',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startInstanceWithOptions(request, runtime);
}

model StopDatabaseInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model StopDatabaseInstanceResponseBody = {
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model StopDatabaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopDatabaseInstanceResponseBody(name='body'),
}

async function stopDatabaseInstanceWithOptions(request: StopDatabaseInstanceRequest, runtime: Util.RuntimeOptions): StopDatabaseInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDatabaseInstance',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopDatabaseInstance(request: StopDatabaseInstanceRequest): StopDatabaseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDatabaseInstanceWithOptions(request, runtime);
}

model StopInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model StopInstanceResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopInstanceResponseBody(name='body'),
}

async function stopInstanceWithOptions(request: StopInstanceRequest, runtime: Util.RuntimeOptions): StopInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopInstance',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstanceWithOptions(request, runtime);
}

model UpdateInstanceAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  instanceName?: string(name='InstanceName', example='test-InstanceName'),
  password?: string(name='Password', example='Test123!'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model UpdateInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model UpdateInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInstanceAttributeResponseBody(name='body'),
}

async function updateInstanceAttributeWithOptions(request: UpdateInstanceAttributeRequest, runtime: Util.RuntimeOptions): UpdateInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstanceAttribute',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateInstanceAttribute(request: UpdateInstanceAttributeRequest): UpdateInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInstanceAttributeWithOptions(request, runtime);
}

model UpgradeInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  planId?: string(name='PlanId', example='swas.s2.c2m2s50b4t08'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model UpgradeInstanceResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model UpgradeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeInstanceResponseBody(name='body'),
}

async function upgradeInstanceWithOptions(request: UpgradeInstanceRequest, runtime: Util.RuntimeOptions): UpgradeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeInstance',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeInstance(request: UpgradeInstanceRequest): UpgradeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeInstanceWithOptions(request, runtime);
}

