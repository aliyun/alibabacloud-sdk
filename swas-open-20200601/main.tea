/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('swas-open', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AllocatePublicConnectionRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model AllocatePublicConnectionResponseBody = {
  publicConnection?: string(name='PublicConnection', example='db-38263fa955774501a2ae1bdaed6f****.mysql.rds.aliyuncs.com'),
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model AllocatePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocatePublicConnectionResponseBody(name='body'),
}

async function allocatePublicConnectionWithOptions(request: AllocatePublicConnectionRequest, runtime: Util.RuntimeOptions): AllocatePublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocatePublicConnection',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocatePublicConnection(request: AllocatePublicConnectionRequest): AllocatePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocatePublicConnectionWithOptions(request, runtime);
}

model CreateCustomImageRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** value can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  dataSnapshotId?: string(name='DataSnapshotId', description='The ID of the data disk snapshot.', example='s-acscasca****'),
  description?: string(name='Description', description='The description of the custom image.', example='test'),
  imageName?: string(name='ImageName', description='The name of the custom image. The name must be 2 to 128 characters in length, and can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). The name must start with a letter or a digit.

This parameter is empty by default.', example='customImage-test'),
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou'),
  systemSnapshotId?: string(name='SystemSnapshotId', description='The ID of the system disk snapshot.', example='s-acscasca****'),
}

model CreateCustomImageResponseBody = {
  imageId?: string(name='ImageId', description='The ID of the custom image.', example='m-csaascsaccscs****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model CreateCustomImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCustomImageResponseBody(name='body'),
}

/**
  * A custom image is created based on a snapshot of a simple application server. You can use custom images to create multiple simple application servers that have the same configurations. You can also share custom images with ECS and use the shared images to create ECS instances or replace the OSs of existing ECS instances.
  * For more information about custom images, see [Overview of custom images](~~199375~~).
  * You must create a system disk snapshot of a simple application server before you create a custom image of the simple application server. For more information, see [CreateSnapshot](~~190452~~).
  * >  If you need the data on the data disk of a simple application server when you create a custom image, create a snapshot for the data disk first.
  * When you create a custom image, take note of the following items:
  * *   The custom image and the corresponding simple application server reside in the same region.
  * *   The maximum number of custom images that can be retained in an Alibaba Cloud account is triple of the number of simple application servers that you created. The value cannot be greater than 15.
  * *   You can directly create a custom image only based on the system disk snapshot of a simple application server. If you want a custom image to contain the data on the data disk of the simple application server, you must select a data disk snapshot when you create the custom image.
  * *   If a simple application server is released due to expiration or refunds, the custom images that are created based on the server are also released.
  * *   If you reset a simple application sever, the disk data on the server is cleared. You must back up the data as needed.
  * ## QPS limits
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request CreateCustomImageRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateCustomImageResponse
 */
async function createCustomImageWithOptions(request: CreateCustomImageRequest, runtime: Util.RuntimeOptions): CreateCustomImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dataSnapshotId)) {
    query['DataSnapshotId'] = request.dataSnapshotId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.systemSnapshotId)) {
    query['SystemSnapshotId'] = request.systemSnapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCustomImage',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * A custom image is created based on a snapshot of a simple application server. You can use custom images to create multiple simple application servers that have the same configurations. You can also share custom images with ECS and use the shared images to create ECS instances or replace the OSs of existing ECS instances.
  * For more information about custom images, see [Overview of custom images](~~199375~~).
  * You must create a system disk snapshot of a simple application server before you create a custom image of the simple application server. For more information, see [CreateSnapshot](~~190452~~).
  * >  If you need the data on the data disk of a simple application server when you create a custom image, create a snapshot for the data disk first.
  * When you create a custom image, take note of the following items:
  * *   The custom image and the corresponding simple application server reside in the same region.
  * *   The maximum number of custom images that can be retained in an Alibaba Cloud account is triple of the number of simple application servers that you created. The value cannot be greater than 15.
  * *   You can directly create a custom image only based on the system disk snapshot of a simple application server. If you want a custom image to contain the data on the data disk of the simple application server, you must select a data disk snapshot when you create the custom image.
  * *   If a simple application server is released due to expiration or refunds, the custom images that are created based on the server are also released.
  * *   If you reset a simple application sever, the disk data on the server is cleared. You must back up the data as needed.
  * ## QPS limits
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request CreateCustomImageRequest
  * @return CreateCustomImageResponse
 */
async function createCustomImage(request: CreateCustomImageRequest): CreateCustomImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomImageWithOptions(request, runtime);
}

model CreateFirewallRuleRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length. ****For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****'),
  port?: string(name='Port', description='The port range. Valid values: 1 to 65535. Specify a port range in the format of \\<start port number>/\\<end port number>. Example: `1024/1055`, which indicates that the port range of 1024 to 1055.', example='3306'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server.', example='cn-hangzhou'),
  remark?: string(name='Remark', description='The remarks of the firewall rule.'),
  ruleProtocol?: string(name='RuleProtocol', description='The transport layer protocol. Valid values:

*   TCP: the TCP protocol
*   UDP: the UDP protocol
*   TCP+UDP: the TCP and UDP protocols', example='TCP'),
}

model CreateFirewallRuleResponseBody = {
  firewallId?: string(name='FirewallId', description='The ID of the firewall rule.', example='8007e18c61024aafbd776d52d0****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model CreateFirewallRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFirewallRuleResponseBody(name='body'),
}

/**
  * Firewalls serve to control network access to simple application servers and isolate security domains in the cloud. By default, Secure Shell (SSH) port 22, HTTP port 80, and HTTPS port 443 are enabled for simple application servers. Other ports are disabled. You can add firewall rules to enable more ports.
  *
  * @param request CreateFirewallRuleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateFirewallRuleResponse
 */
async function createFirewallRuleWithOptions(request: CreateFirewallRuleRequest, runtime: Util.RuntimeOptions): CreateFirewallRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.ruleProtocol)) {
    query['RuleProtocol'] = request.ruleProtocol;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFirewallRule',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Firewalls serve to control network access to simple application servers and isolate security domains in the cloud. By default, Secure Shell (SSH) port 22, HTTP port 80, and HTTPS port 443 are enabled for simple application servers. Other ports are disabled. You can add firewall rules to enable more ports.
  *
  * @param request CreateFirewallRuleRequest
  * @return CreateFirewallRuleResponse
 */
async function createFirewallRule(request: CreateFirewallRuleRequest): CreateFirewallRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFirewallRuleWithOptions(request, runtime);
}

model CreateFirewallRulesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  firewallRules?: [ 
    {
      port?: string(name='Port', example='3306'),
      remark?: string(name='Remark'),
      ruleProtocol?: string(name='RuleProtocol', example='TCP'),
      sourceCidrIp?: string(name='SourceCidrIp', example='47.101.XX.XX'),
    }
  ](name='FirewallRules'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CreateFirewallRulesShrinkRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  firewallRulesShrink?: string(name='FirewallRules'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CreateFirewallRulesResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model CreateFirewallRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFirewallRulesResponseBody(name='body'),
}

async function createFirewallRulesWithOptions(tmpReq: CreateFirewallRulesRequest, runtime: Util.RuntimeOptions): CreateFirewallRulesResponse {
  Util.validateModel(tmpReq);
  var request = new CreateFirewallRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.firewallRules)) {
    request.firewallRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.firewallRules, 'FirewallRules', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.firewallRulesShrink)) {
    query['FirewallRules'] = request.firewallRulesShrink;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFirewallRules',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFirewallRules(request: CreateFirewallRulesRequest): CreateFirewallRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFirewallRulesWithOptions(request, runtime);
}

model CreateInstanceKeyPairRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='2ad1ae67295445f598017499dc****'),
  keyPairName?: string(name='KeyPairName', example='ceshi'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CreateInstanceKeyPairResponseBody = {
  fingerprint?: string(name='Fingerprint', example='If2K1ItazA4GlKkWCEhdRj8Wd6czAvK9*****'),
  keyPairName?: string(name='KeyPairName', example='ceshi'),
  privateKey?: string(name='PrivateKey', example='***'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model CreateInstanceKeyPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceKeyPairResponseBody(name='body'),
}

async function createInstanceKeyPairWithOptions(request: CreateInstanceKeyPairRequest, runtime: Util.RuntimeOptions): CreateInstanceKeyPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstanceKeyPair',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInstanceKeyPair(request: CreateInstanceKeyPairRequest): CreateInstanceKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceKeyPairWithOptions(request, runtime);
}

model CreateInstancesRequest {
  amount?: int32(name='Amount', description='The number of simple application servers that you want to create. Valid values: 1 to 20.

Default value: 1.', example='1'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal. Valid values:

*   true: enables auto-renewal.
*   false: does not enable auto-renewal.

Default value: false.', example='false'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', description='The auto-renewal period. This parameter is required only when you set `AutoRenew` to true. Unit: months Valid values: 1, 3, 6, 12, 24, and 36.', example='1'),
  chargeType?: string(name='ChargeType', description='The billing method of the simple application server. Set the value to PrePaid, which indicates the subscription billing method. Only the subscription billing method is supported.

Default value: PrePaid.', example='PrePaid'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.**** For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  dataDiskSize?: long(name='DataDiskSize', description='The size of the data disk. Unit: GB. Valid values: 0 to 16380. The value must be an integral multiple of 20.

*   A value of 0 indicates that no data disk is attached.
*   If the disk included in the specified plan is a standard SSD, the data disk must be 20 GB or larger in size.

Default value: 0.', example='20'),
  imageId?: string(name='ImageId', description='The ID of the image. You can call the [ListImages](~~189313~~) operation to query the available images in the specified region.', example='e2c9c365024a44369c9b955a998a****'),
  period?: int32(name='Period', description='The subscription period. Unit: months Valid values: 1, 3, 6, 12, 24, and 36.', example='1'),
  planId?: string(name='PlanId', description='The ID of the plan. You can call the [ListPlans](~~189314~~) operation to query all the plans provided by Simple Application Server in the specified region.', example='swas.s1.c1m1s40b3t05'),
  regionId?: string(name='RegionId', description='The region ID of the simple application servers. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model CreateInstancesResponseBody = {
  instanceIds?: [ string ](name='InstanceIds', description='The IDs of the simple application servers.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='30637AD6-D977-4833-A54C-CC89483E1FEE'),
}

model CreateInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstancesResponseBody(name='body'),
}

/**
  * *   Before you call this operation, we recommend that you understand the billing of Simple Application Server. For more information, see [Billable items](~~58623~~).
  * *   A maximum of 20 simple application servers can be created within an Alibaba Cloud account.
  * *   When you call this operation to create simple application servers, make sure that the balance in your account is sufficient to pay for the servers. If the balance in your account is insufficient, the servers cannot be created.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request CreateInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateInstancesResponse
 */
async function createInstancesWithOptions(request: CreateInstancesRequest, runtime: Util.RuntimeOptions): CreateInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoRenewPeriod)) {
    query['AutoRenewPeriod'] = request.autoRenewPeriod;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dataDiskSize)) {
    query['DataDiskSize'] = request.dataDiskSize;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstances',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Before you call this operation, we recommend that you understand the billing of Simple Application Server. For more information, see [Billable items](~~58623~~).
  * *   A maximum of 20 simple application servers can be created within an Alibaba Cloud account.
  * *   When you call this operation to create simple application servers, make sure that the balance in your account is sufficient to pay for the servers. If the balance in your account is insufficient, the servers cannot be created.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request CreateInstancesRequest
  * @return CreateInstancesResponse
 */
async function createInstances(request: CreateInstancesRequest): CreateInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstancesWithOptions(request, runtime);
}

model CreateSnapshotRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** value can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  diskId?: string(name='DiskId', description='The ID of the disk.', example='d-bp18kjxg9ebrhsgi****'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server to which the disk is attached.', example='cn-hangzhou'),
  snapshotName?: string(name='SnapshotName', description='The name of the snapshot. The name must be 2 to 50 characters in length. It must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).', example='test-SnapshotName'),
}

model CreateSnapshotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-bp16oazlsold4dks****'),
}

model CreateSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSnapshotResponseBody(name='body'),
}

/**
  * A snapshot is a point-in-time backup of a disk. Snapshots can be used to back up data, recover data after accidental instance releases, recover data after network attacks, and create custom images.
  * >  You are not charged for creating snapshots for simple application servers.
  * ## Precautions
  * - You can create up to three snapshots for disks of each simple application server.
  * - The maximum number of snapshots that can be retained in an Alibaba Cloud account is triple of the number of simple application servers that are created. The value cannot be greater than 15.
  * - If a simple application server is automatically released due to expiration, the snapshots created for the server are deleted.
  * - If you create a snapshot for a simple application server before you reset the server, the snapshot is retained after you reset the server but the snapshot cannot be used to roll back the disks of the server.
  * ## QPS limits
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request CreateSnapshotRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateSnapshotResponse
 */
async function createSnapshotWithOptions(request: CreateSnapshotRequest, runtime: Util.RuntimeOptions): CreateSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotName)) {
    query['SnapshotName'] = request.snapshotName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSnapshot',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * A snapshot is a point-in-time backup of a disk. Snapshots can be used to back up data, recover data after accidental instance releases, recover data after network attacks, and create custom images.
  * >  You are not charged for creating snapshots for simple application servers.
  * ## Precautions
  * - You can create up to three snapshots for disks of each simple application server.
  * - The maximum number of snapshots that can be retained in an Alibaba Cloud account is triple of the number of simple application servers that are created. The value cannot be greater than 15.
  * - If a simple application server is automatically released due to expiration, the snapshots created for the server are deleted.
  * - If you create a snapshot for a simple application server before you reset the server, the snapshot is retained after you reset the server but the snapshot cannot be used to roll back the disks of the server.
  * ## QPS limits
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request CreateSnapshotRequest
  * @return CreateSnapshotResponse
 */
async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSnapshotWithOptions(request, runtime);
}

model DeleteCustomImageRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  imageId?: string(name='ImageId', description='The ID of the custom image.', example='m-2zehv38jjmwva1ee****'),
  regionId?: string(name='RegionId', description='The region ID of the custom image. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DeleteCustomImageResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model DeleteCustomImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCustomImageResponseBody(name='body'),
}

/**
  * You can delete a custom image that you no longer need. After the custom image is deleted, the simple application servers that were created from the custom image cannot be reset by using the custom image.
  * >  If a custom image is shared, you must unshare the image before you can delete it. After a custom image is unshared, you cannot query the custom image by using the Elastic Compute Service (ECS) console or by calling ECS API operations. If you need to use the custom image in ECS, we recommend that you copy the image before you delete it. For more information, see [Copy custom images](~~199378~~).
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request DeleteCustomImageRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteCustomImageResponse
 */
async function deleteCustomImageWithOptions(request: DeleteCustomImageRequest, runtime: Util.RuntimeOptions): DeleteCustomImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCustomImage',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can delete a custom image that you no longer need. After the custom image is deleted, the simple application servers that were created from the custom image cannot be reset by using the custom image.
  * >  If a custom image is shared, you must unshare the image before you can delete it. After a custom image is unshared, you cannot query the custom image by using the Elastic Compute Service (ECS) console or by calling ECS API operations. If you need to use the custom image in ECS, we recommend that you copy the image before you delete it. For more information, see [Copy custom images](~~199378~~).
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request DeleteCustomImageRequest
  * @return DeleteCustomImageResponse
 */
async function deleteCustomImage(request: DeleteCustomImageRequest): DeleteCustomImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCustomImageWithOptions(request, runtime);
}

model DeleteFirewallRuleRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.**** For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', description='The region ID of the server.', example='cn-hangzhou'),
  ruleId?: string(name='RuleId', description='The ID of the firewall rule.', example='eeea34d9867b4d55a4ff8d5fcfbd****'),
}

model DeleteFirewallRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model DeleteFirewallRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFirewallRuleResponseBody(name='body'),
}

/**
  * After a firewall rule is deleted, your business deployed on the simple application server may become inaccessible. Before you delete a firewall rule, make sure that the firewall rule is no longer needed by the simple application server.
  * ## QPS limits
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request DeleteFirewallRuleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteFirewallRuleResponse
 */
async function deleteFirewallRuleWithOptions(request: DeleteFirewallRuleRequest, runtime: Util.RuntimeOptions): DeleteFirewallRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFirewallRule',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After a firewall rule is deleted, your business deployed on the simple application server may become inaccessible. Before you delete a firewall rule, make sure that the firewall rule is no longer needed by the simple application server.
  * ## QPS limits
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request DeleteFirewallRuleRequest
  * @return DeleteFirewallRuleResponse
 */
async function deleteFirewallRule(request: DeleteFirewallRuleRequest): DeleteFirewallRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFirewallRuleWithOptions(request, runtime);
}

model DeleteInstanceKeyPairRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteInstanceKeyPairResponseBody = {
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model DeleteInstanceKeyPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstanceKeyPairResponseBody(name='body'),
}

async function deleteInstanceKeyPairWithOptions(request: DeleteInstanceKeyPairRequest, runtime: Util.RuntimeOptions): DeleteInstanceKeyPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstanceKeyPair',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteInstanceKeyPair(request: DeleteInstanceKeyPairRequest): DeleteInstanceKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceKeyPairWithOptions(request, runtime);
}

model DeleteSnapshotRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.**** For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  regionId?: string(name='RegionId', description='The region ID of the snapshot.', example='cn-hangzhou'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-bp16oazlsold4dks****'),
}

model DeleteSnapshotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model DeleteSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSnapshotResponseBody(name='body'),
}

/**
  * You can delete a snapshot that is no longer needed.
  * >  If a custom image was created from the snapshot, delete the custom image before you delete the snapshot.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request DeleteSnapshotRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteSnapshotResponse
 */
async function deleteSnapshotWithOptions(request: DeleteSnapshotRequest, runtime: Util.RuntimeOptions): DeleteSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSnapshot',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can delete a snapshot that is no longer needed.
  * >  If a custom image was created from the snapshot, delete the custom image before you delete the snapshot.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request DeleteSnapshotRequest
  * @return DeleteSnapshotResponse
 */
async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnapshotWithOptions(request, runtime);
}

model DeleteSnapshotsRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  snapshotIds?: string(name='SnapshotIds', example='["s-bp16oazlsold4dks****", "s-bp16oazlsold4abc****"]'),
}

model DeleteSnapshotsResponseBody = {
  requestId?: string(name='RequestId', example='C2DE174B-7196-5778-A00D-6EA2601B****'),
}

model DeleteSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSnapshotsResponseBody(name='body'),
}

async function deleteSnapshotsWithOptions(request: DeleteSnapshotsRequest, runtime: Util.RuntimeOptions): DeleteSnapshotsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotIds)) {
    query['SnapshotIds'] = request.snapshotIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSnapshots',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSnapshots(request: DeleteSnapshotsRequest): DeleteSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnapshotsWithOptions(request, runtime);
}

model DescribeCloudAssistantStatusRequest {
  instanceIds?: [ string ](name='InstanceIds', description='The IDs of the simple application servers.'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 50.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server.', example='cn-hangzhou'),
}

model DescribeCloudAssistantStatusShrinkRequest {
  instanceIdsShrink?: string(name='InstanceIds', description='The IDs of the simple application servers.'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 50.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server.', example='cn-hangzhou'),
}

model DescribeCloudAssistantStatusResponseBody = {
  cloudAssistantStatus?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****'),
      status?: boolean(name='Status', description='Indicates whether the Cloud Assistant client is installed on the server.', example='true'),
    }
  ](name='CloudAssistantStatus', description='The status of the Cloud Assistant client.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.

Maximum value: 50.

Default value: 10.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
  totalCount?: int32(name='TotalCount', description='The total number of commands.', example='1'),
}

model DescribeCloudAssistantStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudAssistantStatusResponseBody(name='body'),
}

/**
  * By default, the Cloud Assistant client is installed on your simple application server. If you have manually uninstalled the client, you must reinstall the client. Otherwise, you cannot run commands on the server.
  *
  * @param tmpReq DescribeCloudAssistantStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCloudAssistantStatusResponse
 */
async function describeCloudAssistantStatusWithOptions(tmpReq: DescribeCloudAssistantStatusRequest, runtime: Util.RuntimeOptions): DescribeCloudAssistantStatusResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeCloudAssistantStatusShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudAssistantStatus',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * By default, the Cloud Assistant client is installed on your simple application server. If you have manually uninstalled the client, you must reinstall the client. Otherwise, you cannot run commands on the server.
  *
  * @param request DescribeCloudAssistantStatusRequest
  * @return DescribeCloudAssistantStatusResponse
 */
async function describeCloudAssistantStatus(request: DescribeCloudAssistantStatusRequest): DescribeCloudAssistantStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudAssistantStatusWithOptions(request, runtime);
}

model DescribeCloudMonitorAgentStatusesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceIds?: string(name='InstanceIds', example='["2ad1ae67295445f598017499dc******","2ad1ae67295445f598017499dc******"]'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeCloudMonitorAgentStatusesResponseBody = {
  instanceStatusList?: [ 
    {
      autoInstall?: boolean(name='AutoInstall', example='true'),
      instanceId?: string(name='InstanceId', example='c854dc6f07e74953830bb5808d0****'),
      status?: string(name='Status', example='running'),
    }
  ](name='InstanceStatusList'),
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E1FEE'),
}

model DescribeCloudMonitorAgentStatusesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudMonitorAgentStatusesResponseBody(name='body'),
}

async function describeCloudMonitorAgentStatusesWithOptions(request: DescribeCloudMonitorAgentStatusesRequest, runtime: Util.RuntimeOptions): DescribeCloudMonitorAgentStatusesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudMonitorAgentStatuses',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudMonitorAgentStatuses(request: DescribeCloudMonitorAgentStatusesRequest): DescribeCloudMonitorAgentStatusesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudMonitorAgentStatusesWithOptions(request, runtime);
}

model DescribeDatabaseErrorLogsRequest {
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  endTime?: string(name='EndTime', example='2022-09-08T04:04Z'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime', example='2022-09-07T04:04Z'),
}

model DescribeDatabaseErrorLogsResponseBody = {
  errorLogs?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-09-08T12:11:04Z'),
      errorInfo?: string(name='ErrorInfo', example='spid52 DBCC TRACEON 3499, server process ID (SPID) 52. This is an informational message only; no user action is required'),
    }
  ](name='ErrorLogs'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model DescribeDatabaseErrorLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatabaseErrorLogsResponseBody(name='body'),
}

async function describeDatabaseErrorLogsWithOptions(request: DescribeDatabaseErrorLogsRequest, runtime: Util.RuntimeOptions): DescribeDatabaseErrorLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDatabaseErrorLogs',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDatabaseErrorLogs(request: DescribeDatabaseErrorLogsRequest): DescribeDatabaseErrorLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDatabaseErrorLogsWithOptions(request, runtime);
}

model DescribeDatabaseInstanceMetricDataRequest {
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  endTime?: string(name='EndTime', example='2022-09-07T04:04Z'),
  metricName?: string(name='MetricName', example='MySQL_MemCpuUsage'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime', example='2022-09-06T04:04Z'),
}

model DescribeDatabaseInstanceMetricDataResponseBody = {
  dataFormat?: string(name='DataFormat', example='cpuusage&memusage'),
  metricData?: string(name='MetricData'),
  metricName?: string(name='MetricName', example='MySQL_MemCpuUsage'),
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
  unit?: string(name='Unit', example='%'),
}

model DescribeDatabaseInstanceMetricDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatabaseInstanceMetricDataResponseBody(name='body'),
}

async function describeDatabaseInstanceMetricDataWithOptions(request: DescribeDatabaseInstanceMetricDataRequest, runtime: Util.RuntimeOptions): DescribeDatabaseInstanceMetricDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.metricName)) {
    query['MetricName'] = request.metricName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDatabaseInstanceMetricData',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDatabaseInstanceMetricData(request: DescribeDatabaseInstanceMetricDataRequest): DescribeDatabaseInstanceMetricDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDatabaseInstanceMetricDataWithOptions(request, runtime);
}

model DescribeDatabaseInstanceParametersRequest {
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeDatabaseInstanceParametersResponseBody = {
  configParameters?: [ 
    {
      checkingCode?: string(name='CheckingCode', example='[1-65535]'),
      forceModify?: string(name='ForceModify', example='true'),
      forceRestart?: string(name='ForceRestart', example='false'),
      parameterDescription?: string(name='ParameterDescription', example='Auto-increment columns are incremented by this'),
      parameterName?: string(name='ParameterName', example='auto_increment_increment'),
      parameterValue?: string(name='ParameterValue', example='1'),
    }
  ](name='ConfigParameters'),
  engine?: string(name='Engine', example='MySQL'),
  engineVersion?: string(name='EngineVersion', example='5.5'),
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
  runningParameters?: [ 
    {
      checkingCode?: string(name='CheckingCode', example='[ON|OFF]'),
      forceModify?: string(name='ForceModify', example='true'),
      forceRestart?: string(name='ForceRestart', example='false'),
      parameterDescription?: string(name='ParameterDescription', example='When this variable has a value of 1 (the default), the server automatically grants the EXECUTE and ALTER ROUTINE privileges to the creator of a stored routine, if the user cannot already execute and alter or drop the routine. (The ALTER ROUTINE privilege is required to drop the routine.) The server also automatically drops those privileges from the creator when the routine is dropped. If automatic_sp_privileges is 0, the server does not automatically add or drop these privileges.'),
      parameterName?: string(name='ParameterName', example='autocommit'),
      parameterValue?: string(name='ParameterValue', example='ON'),
    }
  ](name='RunningParameters'),
}

model DescribeDatabaseInstanceParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatabaseInstanceParametersResponseBody(name='body'),
}

async function describeDatabaseInstanceParametersWithOptions(request: DescribeDatabaseInstanceParametersRequest, runtime: Util.RuntimeOptions): DescribeDatabaseInstanceParametersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDatabaseInstanceParameters',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDatabaseInstanceParameters(request: DescribeDatabaseInstanceParametersRequest): DescribeDatabaseInstanceParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDatabaseInstanceParametersWithOptions(request, runtime);
}

model DescribeDatabaseInstancesRequest {
  databaseInstanceIds?: string(name='DatabaseInstanceIds', example='["swasdb-xxx******","swasdb-yyy******"]'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeDatabaseInstancesResponseBody = {
  databaseInstances?: [ 
    {
      businessStatus?: string(name='BusinessStatus', example='normal'),
      chargeType?: string(name='ChargeType', example='PrePaid'),
      cpu?: string(name='Cpu', example='1'),
      creationTime?: string(name='CreationTime', example='2022-09-01T02:39:46Z'),
      databaseInstanceEdition?: string(name='DatabaseInstanceEdition', example='swas.db.c1m1s25'),
      databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
      databaseInstanceName?: string(name='DatabaseInstanceName'),
      databaseInstanceStatus?: string(name='DatabaseInstanceStatus', example='Running'),
      databaseVersion?: string(name='DatabaseVersion', example='5.7'),
      expiredTime?: string(name='ExpiredTime', example='2022-10-01T16:00:00Z'),
      memory?: string(name='Memory', example='1'),
      privateConnection?: string(name='PrivateConnection', example='rm-bp1d39opj7906****.mysql.rds.aliyuncs.com'),
      publicConnection?: string(name='PublicConnection', example='db-38263fa955774501a2ae1bdaed6f****.mysql.rds.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      storage?: int32(name='Storage', example='25'),
      superAccountName?: string(name='SuperAccountName', example='administrator'),
    }
  ](name='DatabaseInstances'),
  pageNumber?: int32(name='PageNumber', example='10'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4****'),
  totalCount?: int32(name='TotalCount', example='5'),
}

model DescribeDatabaseInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatabaseInstancesResponseBody(name='body'),
}

async function describeDatabaseInstancesWithOptions(request: DescribeDatabaseInstancesRequest, runtime: Util.RuntimeOptions): DescribeDatabaseInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.databaseInstanceIds)) {
    query['DatabaseInstanceIds'] = request.databaseInstanceIds;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDatabaseInstances',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDatabaseInstances(request: DescribeDatabaseInstancesRequest): DescribeDatabaseInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDatabaseInstancesWithOptions(request, runtime);
}

model DescribeDatabaseSlowLogRecordsRequest {
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  endTime?: string(name='EndTime'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime'),
}

model DescribeDatabaseSlowLogRecordsResponseBody = {
  engine?: string(name='Engine', example='MySQL'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  physicalIORead?: long(name='PhysicalIORead', example='200'),
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
  slowLogs?: [ 
    {
      DBName?: string(name='DBName', example='testDB'),
      executionStartTime?: string(name='ExecutionStartTime', example='2022-09-08T01:40:44Z'),
      hostAddress?: string(name='HostAddress', example='xxx[xxx] @ [1xx.xxx.xxx.xx]'),
      lockTimes?: long(name='LockTimes', example='0'),
      parseRowCounts?: long(name='ParseRowCounts', example='1'),
      queryTimeMS?: long(name='QueryTimeMS', example='2001'),
      queryTimes?: long(name='QueryTimes', example='2'),
      returnRowCounts?: long(name='ReturnRowCounts', example='1'),
      SQLText?: string(name='SQLText', example='select sleep(2)'),
    }
  ](name='SlowLogs'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model DescribeDatabaseSlowLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatabaseSlowLogRecordsResponseBody(name='body'),
}

async function describeDatabaseSlowLogRecordsWithOptions(request: DescribeDatabaseSlowLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeDatabaseSlowLogRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDatabaseSlowLogRecords',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDatabaseSlowLogRecords(request: DescribeDatabaseSlowLogRecordsRequest): DescribeDatabaseSlowLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDatabaseSlowLogRecordsWithOptions(request, runtime);
}

model DescribeInstanceKeyPairRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeInstanceKeyPairResponseBody = {
  fingerprint?: string(name='Fingerprint', example='4f:70:62:e9:0c:72:f7:ee:74:ce:e3:bf:e0:82:**:**'),
  keyPairName?: string(name='KeyPairName', example='KeyPairName'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model DescribeInstanceKeyPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceKeyPairResponseBody(name='body'),
}

async function describeInstanceKeyPairWithOptions(request: DescribeInstanceKeyPairRequest, runtime: Util.RuntimeOptions): DescribeInstanceKeyPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceKeyPair',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceKeyPair(request: DescribeInstanceKeyPairRequest): DescribeInstanceKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceKeyPairWithOptions(request, runtime);
}

model DescribeInstancePasswordsSettingRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeInstancePasswordsSettingResponseBody = {
  instancePasswordSetting?: boolean(name='InstancePasswordSetting', example='true'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4****'),
  vncPasswordSetting?: boolean(name='VncPasswordSetting', example='true'),
}

model DescribeInstancePasswordsSettingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstancePasswordsSettingResponseBody(name='body'),
}

async function describeInstancePasswordsSettingWithOptions(request: DescribeInstancePasswordsSettingRequest, runtime: Util.RuntimeOptions): DescribeInstancePasswordsSettingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstancePasswordsSetting',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstancePasswordsSetting(request: DescribeInstancePasswordsSettingRequest): DescribeInstancePasswordsSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancePasswordsSettingWithOptions(request, runtime);
}

model DescribeInstanceVncUrlRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='2ad1ae67295445f598017499dc****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeInstanceVncUrlResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  vncUrl?: string(name='VncUrl', example='wss%3A%2F%2Fhz01-vncproxy.aliyun.com%2Fwebsockify%2F%3Fs%3Dwz3L8wEMO6KMt7%252FXInEMtKVubBB%252F7rv055kOm8eUOD%252*****YlmsKjOfz6'),
}

model DescribeInstanceVncUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceVncUrlResponseBody(name='body'),
}

async function describeInstanceVncUrlWithOptions(request: DescribeInstanceVncUrlRequest, runtime: Util.RuntimeOptions): DescribeInstanceVncUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceVncUrl',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceVncUrl(request: DescribeInstanceVncUrlRequest): DescribeInstanceVncUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceVncUrlWithOptions(request, runtime);
}

model DescribeInvocationResultRequest {
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****'),
  invokeId?: string(name='InvokeId', description='The ID of the command task. You can call the [DescribeInvocations](~~439368~~) operation to query the task IDs.', example='t-bj02prjhw1n****'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DescribeInvocationResultResponseBody = {
  invocationResult?: {
    errorCode?: string(name='ErrorCode', description='The error code returned when the command cannot be sent or run. Valid values:

*   If this parameter is empty, the command is run normally.
*   InstanceNotExists: The instance does not exist or is released.
*   InstanceReleased: The instance was released while the command was being run on the instance.
*   InstanceNotRunning: The instance is not in the Running state while the command is being run.
*   CommandNotApplicable: The command is not applicable to the specified instance.
*   AccountNotExists: The specified account does not exist.
*   DirectoryNotExists: The specified directory does not exist.
*   BadCronExpression: The specified cron expression for the running schedule is invalid.
*   ClientNotRunning: The Cloud Assistant client is not running.
*   ClientNotResponse: The Cloud Assistant client does not respond.
*   ClientIsUpgrading: The Cloud Assistant client is being upgraded.
*   ClientNeedUpgrade: The Cloud Assistant client needs to be upgraded.
*   DeliveryTimeout: The request for sending the command times out.
*   ExecutionTimeout: The running of the command times out.
*   ExecutionException: An exception has occurred while the command is being run.
*   ExecutionInterrupted: The running of the command is interrupted.
*   ExitCodeNonzero: The command finishes running, but the exit code is not 0.', example='InstanceNotExists'),
    errorInfo?: string(name='ErrorInfo', description='The error message returned when the command cannot be sent or run. Valid values:

*   If this parameter is empty, the command is run normally.
*   the specified instance does not exists: The specified instance does not exist or is released.
*   the instance has released when create task: The instance was released while the command was being run on the instance.
*   the instance is not running when create task: The instance is not in the Running state while the command is being run.
*   the command is not applicable: The command is not applicable to the specified instance.
*   the specified account does not exists: The specified account does not exist.
*   the specified directory does not exists: The specified directory does not exist.
*   the cron job expression is invalid: The specified cron expression for the runing schedule is invalid.
*   the aliyun service is not running on the instance: The Cloud Assistance client is not running.
*   the aliyun service in the instance does not response: The Cloud Assistant client does not respond.
*   the aliyun service in the instance is upgrading now: The Cloud Assistant client is being upgraded.
*   the aliyun service in the instance need upgrade: The Cloud Assistant client needs to be upgraded.
*   the command delivery has been timeout: The request for sending the command times out.
*   the command execution has been timeout: The running of the command times out.
*   the command execution got an exception: An exception has occurred while the command is being run.
*   the command execution has been interrupted: The running of the command is interrupted.
*   the command execution exit code is not zero: The command finishes running, but the exit code is not 0.', example='the specified instance does not exists'),
    exitCode?: long(name='ExitCode', description='The exit code of the command task.

*   For Linux instances, the value is the exit code of the shell command.
*   For Windows instances, the value is the exit code of the batch or PowerShell command.', example='0'),
    finishedTime?: string(name='FinishedTime', description='The time when the command finished running on the instance.', example='2022-07-11T06:37:17Z'),
    instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****'),
    invocationStatus?: string(name='InvocationStatus', description='The status of the command. Valid values:

*   Pending: The command is being verified or sent.
*   Invalid: The specified command type or parameter is invalid.
*   Aborted: The command failed to be sent. To send a command to an instance, make sure that the instance is in the Running state and the command is sent to the instance within 1 minute.
*   Running: The command is being run on the instance.
*   Success: The command finishes running, and the exit code is 0.
*   Failed: The command finishes running, but the exit code is not 0.
*   Error: The running of the command cannot proceed due to an exception.
*   Timeout: The running of the command times out.
*   Cancelled: The running is canceled, and the command is not run.
*   Stopping: The command that is running is being stopped.
*   Terminated: The command is terminated while it is being run.', example='Success'),
    invokeId?: string(name='InvokeId', description='The ID of the command task.', example='t-bj02prjje65****'),
    invokeRecordStatus?: string(name='InvokeRecordStatus', description='The status of the command task. Valid values:

*   Running
*   Finished
*   Failed
*   Stopped', example='Finished'),
    invokeUser?: string(name='InvokeUser', description='The username who runs the command on the simple application server.', example='root'),
    output?: string(name='Output', description='The command output.', example='YWRtaW4K'),
    startTime?: string(name='StartTime', description='The time when the command started to be run on the instance.', example='2022-07-11T06:37:16Z'),
  }(name='InvocationResult', description='The information about the command running result.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model DescribeInvocationResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInvocationResultResponseBody(name='body'),
}

/**
  * *   After you run a command, the command may not succeed or return the expected results. You can call this operation to query the actual execution results.
  * *   You can query the execution information that is generated within the last two weeks. Up to 100,000 lines of execution information can be retained.
  *
  * @param request DescribeInvocationResultRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInvocationResultResponse
 */
async function describeInvocationResultWithOptions(request: DescribeInvocationResultRequest, runtime: Util.RuntimeOptions): DescribeInvocationResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.invokeId)) {
    query['InvokeId'] = request.invokeId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInvocationResult',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   After you run a command, the command may not succeed or return the expected results. You can call this operation to query the actual execution results.
  * *   You can query the execution information that is generated within the last two weeks. Up to 100,000 lines of execution information can be retained.
  *
  * @param request DescribeInvocationResultRequest
  * @return DescribeInvocationResultResponse
 */
async function describeInvocationResult(request: DescribeInvocationResultRequest): DescribeInvocationResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInvocationResultWithOptions(request, runtime);
}

model DescribeInvocationsRequest {
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='3a658ca270df4df39f22e289b338****'),
  invokeStatus?: string(name='InvokeStatus', description='The status of the command. Valid values:

*   Running: The command is running.
*   Finished: The command finishes running.
*   Failed: The command failed to be run.', example='Finished'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 50.

Default value: 10', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DescribeInvocationsResponseBody = {
  invocations?: [ 
    {
      commandContent?: string(name='CommandContent', description='The content of the command, which is Base64-encoded.', example='bHM='),
      commandName?: string(name='CommandName', description='The name of the command.', example='testname'),
      commandType?: string(name='CommandType', description='The type of the command. Valid values:

*   RunBatScript: batch command (applicable to Windows instances).
*   RunPowerShellScript: PowerShell command (applicable to Windows instances).
*   RunShellScript: shell command (applicable to Linux instances).', example='RunShellScript'),
      creationTime?: string(name='CreationTime', description='The time when the command was created.', example='2022-07-11T06:37:16Z'),
      invocationStatus?: string(name='InvocationStatus', description='The status of the command. Valid values:

*   Pending: The command is being verified or sent.
*   Invalid: The specified command type or parameter is invalid.
*   Aborted: The command failed to be sent. To send a command to an instance, make sure that the instance is in the Running state and the command is sent to the instance within 1 minute.
*   Running: The command is being run on the instance.
*   Success: The command finishes running, and the exit code is 0.
*   Failed: The command finishes running, but the exit code is not 0.
*   Error: The running of the command cannot proceed due to an exception.
*   Timeout: The running of the command times out.
*   Cancelled: The running is canceled, and the command is not run.
*   Stopping: The command that is running is being stopped.
*   Terminated: The command is terminated while it is being run.', example='Success'),
      invokeId?: string(name='InvokeId', description='The ID of the command task.', example='t-hz02p9545t6****'),
      invokeStatus?: string(name='InvokeStatus', description='The status of the command. Valid values:

*   Running: The command is running.
*   Finished: The command finishes running.
*   Failed: The running of the command failed.
*   Stopped: The running is stopped.', example='Finished'),
      parameters?: map[string]any(name='Parameters', description='The custom parameters in the command. If no custom parameter exists in the command, the default value is {}.', example='{}'),
    }
  ](name='Invocations', description='Running records of commands.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='30637AD6-D977-4833-A54C-CC89483E****'),
  totalCount?: int32(name='TotalCount', description='The total number of commands.', example='10'),
}

model DescribeInvocationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInvocationsResponseBody(name='body'),
}

/**
  * *   After you run a command, the command may not succeed or deliver the expected results. You can call this operation to query the actual execution results.
  * *   You can query the execution information that is generated within the last two weeks. Up to 100,000 lines of execution information can be retained.
  *
  * @param request DescribeInvocationsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInvocationsResponse
 */
async function describeInvocationsWithOptions(request: DescribeInvocationsRequest, runtime: Util.RuntimeOptions): DescribeInvocationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.invokeStatus)) {
    query['InvokeStatus'] = request.invokeStatus;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInvocations',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   After you run a command, the command may not succeed or deliver the expected results. You can call this operation to query the actual execution results.
  * *   You can query the execution information that is generated within the last two weeks. Up to 100,000 lines of execution information can be retained.
  *
  * @param request DescribeInvocationsRequest
  * @return DescribeInvocationsResponse
 */
async function describeInvocations(request: DescribeInvocationsRequest): DescribeInvocationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInvocationsWithOptions(request, runtime);
}

model DescribeMonitorDataRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  endTime?: string(name='EndTime', example='2022-09-08T08:04:44Z'),
  instanceId?: string(name='InstanceId', example='2ad1ae67295445f598017499dc****'),
  length?: string(name='Length', example='100'),
  metricName?: string(name='MetricName', example='DISKUSAGE_USED'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6nOc1nj4M9UaAZ/I8db***'),
  period?: string(name='Period', example='60'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime', example='2022-09-07T04:04:44Z'),
}

model DescribeMonitorDataResponseBody = {
  datapoints?: string(name='Datapoints', example='[]'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6nOc1nj4M9UaAZ/I8db***'),
  period?: string(name='Period', example='60'),
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model DescribeMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMonitorDataResponseBody(name='body'),
}

async function describeMonitorDataWithOptions(request: DescribeMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeMonitorDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.length)) {
    query['Length'] = request.length;
  }
  if (!Util.isUnset(request.metricName)) {
    query['MetricName'] = request.metricName;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMonitorData',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMonitorData(request: DescribeMonitorDataRequest): DescribeMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMonitorDataWithOptions(request, runtime);
}

model DescribeSecurityAgentStatusRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeSecurityAgentStatusResponseBody = {
  clientStatus?: string(name='ClientStatus', example='online'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model DescribeSecurityAgentStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityAgentStatusResponseBody(name='body'),
}

async function describeSecurityAgentStatusWithOptions(request: DescribeSecurityAgentStatusRequest, runtime: Util.RuntimeOptions): DescribeSecurityAgentStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityAgentStatus',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSecurityAgentStatus(request: DescribeSecurityAgentStatusRequest): DescribeSecurityAgentStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityAgentStatusWithOptions(request, runtime);
}

model DisableFirewallRuleRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  remark?: string(name='Remark'),
  ruleId?: string(name='RuleId', example='eeea34d9867b4d55a4ff8d5fcfbd****'),
}

model DisableFirewallRuleResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model DisableFirewallRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableFirewallRuleResponseBody(name='body'),
}

async function disableFirewallRuleWithOptions(request: DisableFirewallRuleRequest, runtime: Util.RuntimeOptions): DisableFirewallRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableFirewallRule',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableFirewallRule(request: DisableFirewallRuleRequest): DisableFirewallRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableFirewallRuleWithOptions(request, runtime);
}

model EnableFirewallRuleRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='2ad1ae67295445f598017499dc****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  remark?: string(name='Remark'),
  ruleId?: string(name='RuleId', example='eeea34d9867b4d55a4ff8d5fcfbd****'),
  sourceCidrIp?: string(name='SourceCidrIp', example='10.147.33.**'),
}

model EnableFirewallRuleResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model EnableFirewallRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableFirewallRuleResponseBody(name='body'),
}

async function enableFirewallRuleWithOptions(request: EnableFirewallRuleRequest, runtime: Util.RuntimeOptions): EnableFirewallRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.sourceCidrIp)) {
    query['SourceCidrIp'] = request.sourceCidrIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableFirewallRule',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableFirewallRule(request: EnableFirewallRuleRequest): EnableFirewallRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableFirewallRuleWithOptions(request, runtime);
}

model InstallCloudAssistantRequest {
  instanceIds?: [ string ](name='InstanceIds', description='The IDs of the simple application servers.'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model InstallCloudAssistantShrinkRequest {
  instanceIdsShrink?: string(name='InstanceIds', description='The IDs of the simple application servers.'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model InstallCloudAssistantResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model InstallCloudAssistantResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InstallCloudAssistantResponseBody(name='body'),
}

/**
  * To run commands, you must install the Cloud Assistant client on your simple application server. You can call the [DescribeCloudAssistantStatus](~~439512~~) operation to query whether the Cloud Assistant client is installed on your simple application server. If you have not installed the Cloud Assistant client, you can call the InstallCloudAssistant operation to install the client. Then, you can call the [RebootInstance](~~190443~~) operation to restart the server to allow the installation to take effect.
  *
  * @param tmpReq InstallCloudAssistantRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return InstallCloudAssistantResponse
 */
async function installCloudAssistantWithOptions(tmpReq: InstallCloudAssistantRequest, runtime: Util.RuntimeOptions): InstallCloudAssistantResponse {
  Util.validateModel(tmpReq);
  var request = new InstallCloudAssistantShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InstallCloudAssistant',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * To run commands, you must install the Cloud Assistant client on your simple application server. You can call the [DescribeCloudAssistantStatus](~~439512~~) operation to query whether the Cloud Assistant client is installed on your simple application server. If you have not installed the Cloud Assistant client, you can call the InstallCloudAssistant operation to install the client. Then, you can call the [RebootInstance](~~190443~~) operation to restart the server to allow the installation to take effect.
  *
  * @param request InstallCloudAssistantRequest
  * @return InstallCloudAssistantResponse
 */
async function installCloudAssistant(request: InstallCloudAssistantRequest): InstallCloudAssistantResponse {
  var runtime = new Util.RuntimeOptions{};
  return installCloudAssistantWithOptions(request, runtime);
}

model InstallCloudMonitorAgentRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  force?: boolean(name='Force', example='true'),
  instanceId?: string(name='InstanceId', example='9ae7106e68eb4402b0dcbd48a9de****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model InstallCloudMonitorAgentResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4****'),
}

model InstallCloudMonitorAgentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InstallCloudMonitorAgentResponseBody(name='body'),
}

async function installCloudMonitorAgentWithOptions(request: InstallCloudMonitorAgentRequest, runtime: Util.RuntimeOptions): InstallCloudMonitorAgentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InstallCloudMonitorAgent',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function installCloudMonitorAgent(request: InstallCloudMonitorAgentRequest): InstallCloudMonitorAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return installCloudMonitorAgentWithOptions(request, runtime);
}

model ListCustomImagesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dataSnapshotId?: string(name='DataSnapshotId', example='s-acscasca****'),
  imageIds?: string(name='ImageIds', example='["fe9c66133a9d4688872869726b52****", "794c230fd3e64ea19f83f4d7a0ad****"]'),
  imageNames?: string(name='ImageNames', example='["test1****", "test2****"]'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  systemSnapshotId?: string(name='SystemSnapshotId', example='s-bp14m09pq8***0g6'),
}

model ListCustomImagesResponseBody = {
  customImages?: [ 
    {
      creationTime?: string(name='CreationTime', example='2022-10-09T02:28:06Z'),
      dataSnapshotId?: string(name='DataSnapshotId', example='s-bp19rn9u8eqzlfb***'),
      dataSnapshotName?: string(name='DataSnapshotName'),
      description?: string(name='Description'),
      imageId?: string(name='ImageId', example='m-bp1e79zktg26n2b***'),
      inShare?: boolean(name='InShare'),
      instanceId?: string(name='InstanceId', example='2d06ee0520b44de1ae88d4be****'),
      instanceName?: string(name='InstanceName', example='swas-asdf23***'),
      name?: string(name='Name', example='hua'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: string(name='Status'),
      systemSnapshotId?: string(name='SystemSnapshotId', example='s-bp1h173hj21puxb***'),
      systemSnapshotName?: string(name='SystemSnapshotName'),
    }
  ](name='CustomImages'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  totalCount?: string(name='TotalCount', example='4'),
}

model ListCustomImagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCustomImagesResponseBody(name='body'),
}

async function listCustomImagesWithOptions(request: ListCustomImagesRequest, runtime: Util.RuntimeOptions): ListCustomImagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dataSnapshotId)) {
    query['DataSnapshotId'] = request.dataSnapshotId;
  }
  if (!Util.isUnset(request.imageIds)) {
    query['ImageIds'] = request.imageIds;
  }
  if (!Util.isUnset(request.imageNames)) {
    query['ImageNames'] = request.imageNames;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.systemSnapshotId)) {
    query['SystemSnapshotId'] = request.systemSnapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCustomImages',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCustomImages(request: ListCustomImagesRequest): ListCustomImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCustomImagesWithOptions(request, runtime);
}

model ListDisksRequest {
  diskIds?: string(name='DiskIds', description='The IDs of the disks. The value can be a JSON array that consists of up to 100 disk IDs. Separate the disk IDs with commas (,).', example='["d-bp14wq0149cpp2x****", "d-bp14wq0149cpp2y****"]'),
  diskType?: string(name='DiskType'),
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='2ad1ae67295445f598017499dc****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server.', example='cn-hangzhou'),
}

model ListDisksResponseBody = {
  disks?: [ 
    {
      category?: string(name='Category', description='The category of the disk. Valid values: Valid values:

*   ESSD: enhanced SSD (ESSD) at performance level 0 (PL0)
*   SSD: standard SSD', example='ESSD'),
      creationTime?: string(name='CreationTime', description='The time when the disk was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-03-08T05:31:06Z'),
      device?: string(name='Device', description='The device name of the disk on the simple application server.', example='/dev/xvda'),
      diskChargeType?: string(name='DiskChargeType', description='The billing method of the disk.', example='PrePaid'),
      diskId?: string(name='DiskId', description='The ID of the disk.', example='d-bp14wq0149cpp2x****'),
      diskName?: string(name='DiskName', description='The name of the disk.', example='SystemDisk'),
      diskType?: string(name='DiskType', description='The type of the disk. Valid values:

*   System: system disk
*   Data: data disk', example='System'),
      instanceId?: string(name='InstanceId', description='The ID of the simple application server to which the disk is attached.', example='2ad1ae67295445f598017499dc****'),
      instanceName?: string(name='InstanceName'),
      regionId?: string(name='RegionId', description='The region ID of the server.', example='cn-hangzhou'),
      remark?: string(name='Remark'),
      size?: int32(name='Size', description='The size of the disk. Unit: GB.', example='50'),
      status?: string(name='Status', description='The status of the disk. Valid values:

*   ReIniting: The disk is being initialized.
*   Creating: The disk is being created.
*   In_Use: The disk is being used.
*   Available: The disk can be attached.
*   Attaching: The disk is being attached.
*   Detaching: The disk is being detached.', example='In_use'),
    }
  ](name='Disks', description='Details about the disks.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  totalCount?: int32(name='TotalCount', description='The total number of disks.', example='1'),
}

model ListDisksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDisksResponseBody(name='body'),
}

/**
  * You can specify multiple request parameters such as `InstanceId` and `DiskIds`. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions.
  * ## QPS limits
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ListDisksRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListDisksResponse
 */
async function listDisksWithOptions(request: ListDisksRequest, runtime: Util.RuntimeOptions): ListDisksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskIds)) {
    query['DiskIds'] = request.diskIds;
  }
  if (!Util.isUnset(request.diskType)) {
    query['DiskType'] = request.diskType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDisks',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can specify multiple request parameters such as `InstanceId` and `DiskIds`. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions.
  * ## QPS limits
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ListDisksRequest
  * @return ListDisksResponse
 */
async function listDisks(request: ListDisksRequest): ListDisksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDisksWithOptions(request, runtime);
}

model ListFirewallRulesRequest {
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server.', example='cn-hangzhou'),
}

model ListFirewallRulesResponseBody = {
  firewallRules?: [ 
    {
      policy?: string(name='Policy'),
      port?: string(name='Port', description='The port range.', example='3306'),
      remark?: string(name='Remark', description='The remarks of the firewall rule.'),
      ruleId?: string(name='RuleId', description='The ID of the firewall rule.', example='eeea34d9867b4d55a4ff8d5fcfbd****'),
      ruleProtocol?: string(name='RuleProtocol', description='The transport layer protocol. Valid values:

*   TCP: the TCP protocol.
*   UDP: the UDP protocol.
*   TCP+UDP: the TCP and UDP protocols.', example='TCP'),
      sourceCidrIp?: string(name='SourceCidrIp'),
    }
  ](name='FirewallRules', description='Details about the firewall rules.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  totalCount?: int32(name='TotalCount', description='The total number of firewall rules.', example='4'),
}

model ListFirewallRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFirewallRulesResponseBody(name='body'),
}

/**
  * You can call the ListFirewallRules operation to query the firewall rule details of a specified simple application server, including the port range, firewall rule ID, and transport layer protocol.
  * ## QPS limits
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ListFirewallRulesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListFirewallRulesResponse
 */
async function listFirewallRulesWithOptions(request: ListFirewallRulesRequest, runtime: Util.RuntimeOptions): ListFirewallRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFirewallRules',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the ListFirewallRules operation to query the firewall rule details of a specified simple application server, including the port range, firewall rule ID, and transport layer protocol.
  * ## QPS limits
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ListFirewallRulesRequest
  * @return ListFirewallRulesResponse
 */
async function listFirewallRules(request: ListFirewallRulesRequest): ListFirewallRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFirewallRulesWithOptions(request, runtime);
}

model ListImagesRequest {
  imageIds?: string(name='ImageIds', description='The IDs of the images. The value can be a JSON array that consists of up to 50 image IDs, in the format of `["xxx", "yyy", … "zzz"]`. Separate the image IDs with commas (,).', example='["fe9c66133a9d4688872869726b52****", "794c230fd3e64ea19f83f4d7a0ad****"]'),
  imageType?: string(name='ImageType', description='The type of the image. Valid values:

*   system
*   app
*   custom', example='system'),
  regionId?: string(name='RegionId', description='The region ID of the images. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model ListImagesResponseBody = {
  images?: [ 
    {
      description?: string(name='Description', description='The description of the image.'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='794c230fd3e64ea19f83f4d7a0ad****'),
      imageName?: string(name='ImageName', description='The name of the image.', example='WordPress-4.8.1'),
      imageType?: string(name='ImageType', description='The type of the image. Valid values:

*   system
*   app
*   custom', example='app'),
      platform?: string(name='Platform', description='The operating system type of the image. Valid values:

*   Linux
*   Windows', example='Linux'),
    }
  ](name='Images', description='Details of the images.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model ListImagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListImagesResponseBody(name='body'),
}

/**
  * You can query details about one or more images in a specified region, including the IDs, names, and types of the images.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of your calls per second exceeds the limit, throttling is triggered. This may affect your business. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ListImagesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListImagesResponse
 */
async function listImagesWithOptions(request: ListImagesRequest, runtime: Util.RuntimeOptions): ListImagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageIds)) {
    query['ImageIds'] = request.imageIds;
  }
  if (!Util.isUnset(request.imageType)) {
    query['ImageType'] = request.imageType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListImages',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can query details about one or more images in a specified region, including the IDs, names, and types of the images.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of your calls per second exceeds the limit, throttling is triggered. This may affect your business. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ListImagesRequest
  * @return ListImagesResponse
 */
async function listImages(request: ListImagesRequest): ListImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listImagesWithOptions(request, runtime);
}

model ListInstancePlansModificationRequest {
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model ListInstancePlansModificationResponseBody = {
  plans?: [ 
    {
      bandwidth?: int32(name='Bandwidth', description='The peak bandwidth. Unit: Mbit/s.', example='3'),
      core?: int32(name='Core', description='The number of vCPUs.', example='2'),
      currency?: string(name='Currency', description='The unit of the plan price. Valid values:

*   CNY
*   USD', example='CNY'),
      diskSize?: int32(name='DiskSize', description='The disk size of the simple application server. Unit: GB.', example='40'),
      diskType?: string(name='DiskType', description='The category of the disk. Valid values:

*   SSD: standard SSD
*   ESSD: enhanced SSD', example='ESSD'),
      flow?: int32(name='Flow', description='The monthly data transfer quota. Unit: GB.', example='400'),
      memory?: int32(name='Memory', description='The memory size. Unit: GB.', example='1'),
      originPrice?: double(name='OriginPrice', description='The price of the plan.', example='60'),
      planId?: string(name='PlanId', description='The ID of the plan.', example='swas.s2.c2m1s40b3t04'),
      supportPlatform?: string(name='SupportPlatform', description='The operating system types supported by the plan.', example='["Linux","Windows"]'),
    }
  ](name='Plans', description='Details about the plans.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model ListInstancePlansModificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancePlansModificationResponseBody(name='body'),
}

/**
  * If the plans of your simple application server do not meet your business requirements, you can call the ListInstancePlansModification operation to obtain a list of plans that can be upgraded for your simple application server. Then, you can call the [UpgradeInstance](~~190445~~) operation to upgrade the plans.
  * >  We recommend that you create snapshots for the disks of your simple application server to back up data before you upgrade the plans. For more information, see [CreateSnapshot](~~190452~~).
  * For the precautions about plan upgrade, see [Upgrade configurations](~~61433~~).
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ListInstancePlansModificationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListInstancePlansModificationResponse
 */
async function listInstancePlansModificationWithOptions(request: ListInstancePlansModificationRequest, runtime: Util.RuntimeOptions): ListInstancePlansModificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstancePlansModification',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If the plans of your simple application server do not meet your business requirements, you can call the ListInstancePlansModification operation to obtain a list of plans that can be upgraded for your simple application server. Then, you can call the [UpgradeInstance](~~190445~~) operation to upgrade the plans.
  * >  We recommend that you create snapshots for the disks of your simple application server to back up data before you upgrade the plans. For more information, see [CreateSnapshot](~~190452~~).
  * For the precautions about plan upgrade, see [Upgrade configurations](~~61433~~).
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ListInstancePlansModificationRequest
  * @return ListInstancePlansModificationResponse
 */
async function listInstancePlansModification(request: ListInstancePlansModificationRequest): ListInstancePlansModificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancePlansModificationWithOptions(request, runtime);
}

model ListInstanceStatusRequest {
  instanceIds?: string(name='InstanceIds', example='["2ad1ae67295445f598017499dc****", "2ad1ae67295445f598017123dc****"]'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListInstanceStatusResponseBody = {
  instanceStatuses?: [ 
    {
      instanceId?: string(name='InstanceId', example='a9a6474b935d41bcb531250bb5d****'),
      status?: string(name='Status', example='Running'),
    }
  ](name='InstanceStatuses'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
  totalCount?: int32(name='TotalCount', example='54'),
}

model ListInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceStatusResponseBody(name='body'),
}

async function listInstanceStatusWithOptions(request: ListInstanceStatusRequest, runtime: Util.RuntimeOptions): ListInstanceStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceStatus',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstanceStatus(request: ListInstanceStatusRequest): ListInstanceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceStatusWithOptions(request, runtime);
}

model ListInstancesRequest {
  chargeType?: string(name='ChargeType', description='The billing method of the simple application server. Set the value to PrePaid, which indicates the subscription billing method. Only the subscription billing method is supported.

Default value: PrePaid.', example='PrePaid'),
  instanceIds?: string(name='InstanceIds', description='The IDs of the simple application servers. The value can be a JSON array that consists of up to 100 simple application server IDs. Separate the server IDs with commas (,).

>  If you specify both `InstanceIds` and `PublicIpAddresses`, make sure that each specified ID and its corresponding public IP address belong to the same simple application server. Otherwise, an empty result is returned.', example='["2ad1ae67295445f598017499dc****", "2ad1ae67295445f598017123dc****"]'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100.

Default value: 10.', example='10'),
  publicIpAddresses?: string(name='PublicIpAddresses', description='The public IP addresses of the simple application servers. The value can be a JSON array that consists of up to 100 IP addresses. Separate the IP addresses with commas (,).

>  If you specify both `InstanceIds` and `PublicIpAddresses`, make sure that each specified ID and its corresponding public IP address belong to the same simple application server. Otherwise, an empty result is returned.', example='["42.1.**.**", "42.2.**.**"]'),
  regionId?: string(name='RegionId', description='The region ID of the simple application servers.', example='cn-hangzhou'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      businessStatus?: string(name='BusinessStatus', description='The status of the simple application server. Valid values:

*   Normal
*   Expired
*   Overdue', example='Normal'),
      chargeType?: string(name='ChargeType', description='The billing method of the simple application server.', example='PrePaid'),
      combination?: boolean(name='Combination'),
      combinationInstanceId?: string(name='CombinationInstanceId'),
      creationTime?: string(name='CreationTime', description='The time when the simple application server was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-03-08T05:31:06Z'),
      ddosStatus?: string(name='DdosStatus', description='The DDoS protection status. Valid values:

*   Normal: Normal
*   BlackHole: Blackholing
*   Defense: Cleaning', example='Normal'),
      disableReason?: string(name='DisableReason'),
      expiredTime?: string(name='ExpiredTime', description='The time when the simple application server expires. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-05-08T16:00:00Z'),
      image?: {
        imageContact?: string(name='ImageContact'),
        imageIconUrl?: string(name='ImageIconUrl'),
        imageName?: string(name='ImageName'),
        imageType?: string(name='ImageType'),
        imageVersion?: string(name='ImageVersion'),
        osType?: string(name='OsType'),
      }(name='Image'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='fe9c66133a9d4688872869726b52****'),
      innerIpAddress?: string(name='InnerIpAddress', description='The internal IP address of the simple application server.', example='172.26.XX.XX'),
      instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='2ad1ae67295445f598017499dc****'),
      instanceName?: string(name='InstanceName', description='The name of the simple application server.', example='test-InstanceName'),
      planId?: string(name='PlanId', description='The ID of the plan.', example='swas.s2.c2m2s50b4t08'),
      publicIpAddress?: string(name='PublicIpAddress', description='The public IP address.', example='42.1.XX.XX'),
      regionId?: string(name='RegionId', description='The region ID of the simple application servers.', example='cn-hangzhou'),
      resourceSpec?: {
        bandwidth?: int32(name='Bandwidth'),
        cpu?: int32(name='Cpu'),
        diskCategory?: string(name='DiskCategory'),
        diskSize?: int32(name='DiskSize'),
        flow?: double(name='Flow'),
        memory?: double(name='Memory'),
      }(name='ResourceSpec'),
      status?: string(name='Status', description='The status of the simple application server. Valid values:

*   Pending
*   Starting
*   Running
*   Stopping
*   Stopped
*   Resetting
*   Upgrading
*   Disabled', example='Running'),
      uuid?: string(name='Uuid'),
    }
  ](name='Instances', description='Details about the simple application servers.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
  totalCount?: int32(name='TotalCount', description='The total number of simple application servers returned.', example='1'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

/**
  * You can call this operation to query the details of one or more simple application servers in a specified region, including the names, public IP addresses, internal IP addresses, creation time, and expiration time of the servers.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ListInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListInstancesResponse
 */
async function listInstancesWithOptions(request: ListInstancesRequest, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.publicIpAddresses)) {
    query['PublicIpAddresses'] = request.publicIpAddresses;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query the details of one or more simple application servers in a specified region, including the names, public IP addresses, internal IP addresses, creation time, and expiration time of the servers.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ListInstancesRequest
  * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(request, runtime);
}

model ListInstancesTrafficPackagesRequest {
  instanceIds?: string(name='InstanceIds', description='The IDs of the simple application servers. The value can be a JSON array that consists of up to 100 simple application server IDs. Separate the server IDs with commas (,).', example='["2ad1ae67295445f598017499dc******","2ad1ae67295445f598017499dc******"]'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model ListInstancesTrafficPackagesResponseBody = {
  instanceTrafficPackageUsages?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ccscqwqwqqqw****'),
      trafficOverflow?: long(name='TrafficOverflow', description='The data transfers that exceeds the quota of the data transfer plan in the current month. Unit: Byte.', example='0'),
      trafficPackageRemaining?: long(name='TrafficPackageRemaining', description='The unused quota of the data transfer plan in the current month. Unit: Byte.', example='10000'),
      trafficPackageTotal?: long(name='TrafficPackageTotal', description='The quota of the data transfer plan in the current month. Unit: Byte.

>  TrafficPackageTotal = TrafficUsed + TrafficPackageRemaining', example='20000'),
      trafficUsed?: long(name='TrafficUsed', description='The used quota of the data transfer plan in the current month. Unit: Byte.', example='10000'),
    }
  ](name='InstanceTrafficPackageUsages', description='The details of the data transfer plans of the simple application servers.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model ListInstancesTrafficPackagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesTrafficPackagesResponseBody(name='body'),
}

/**
  * You can query the details of data transfer plans for one or more simple application servers, including the data transfer quota, used data transfer quota, unused data transfer quota, and excess data transfers in the current month.
  * Simple Application Server provides data transfer quotas in plans. The prices for data transfers within quotas are included in the plans. You are charged for data transfers that exceed the quotas. Take note of the following items:
  * *   You are charged only for outbound data transfers from simple application servers over the Internet. You are not charged for inbound data transfers to simple application servers over the Internet.
  * *   Outbound data transfers from simple application servers to other Alibaba Cloud services over the Internet consume the data transfer quotas that are included in plans. If the quotas are exceeded, you are charged for the excess data transfers.
  * *   You are not charged for data transfers between simple application servers within the same virtual private cloud (VPC).
  * For more information, see [Quotas and billing of data transfers](~~86281~~).
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ListInstancesTrafficPackagesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListInstancesTrafficPackagesResponse
 */
async function listInstancesTrafficPackagesWithOptions(request: ListInstancesTrafficPackagesRequest, runtime: Util.RuntimeOptions): ListInstancesTrafficPackagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstancesTrafficPackages',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can query the details of data transfer plans for one or more simple application servers, including the data transfer quota, used data transfer quota, unused data transfer quota, and excess data transfers in the current month.
  * Simple Application Server provides data transfer quotas in plans. The prices for data transfers within quotas are included in the plans. You are charged for data transfers that exceed the quotas. Take note of the following items:
  * *   You are charged only for outbound data transfers from simple application servers over the Internet. You are not charged for inbound data transfers to simple application servers over the Internet.
  * *   Outbound data transfers from simple application servers to other Alibaba Cloud services over the Internet consume the data transfer quotas that are included in plans. If the quotas are exceeded, you are charged for the excess data transfers.
  * *   You are not charged for data transfers between simple application servers within the same virtual private cloud (VPC).
  * For more information, see [Quotas and billing of data transfers](~~86281~~).
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ListInstancesTrafficPackagesRequest
  * @return ListInstancesTrafficPackagesResponse
 */
async function listInstancesTrafficPackages(request: ListInstancesTrafficPackagesRequest): ListInstancesTrafficPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesTrafficPackagesWithOptions(request, runtime);
}

model ListPlansRequest {
  regionId?: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model ListPlansResponseBody = {
  plans?: [ 
    {
      bandwidth?: int32(name='Bandwidth', description='The peak bandwidth. Unit: Mbit/s.', example='3'),
      core?: int32(name='Core', description='The number of vCPUs.', example='2'),
      currency?: string(name='Currency', description='The unit of the plan price. Valid values:

*   CNY
*   USD

>  CNY is for the China site (aliyun.com). USD is for the international site (alibabacloud.com).', example='CNY'),
      diskSize?: int32(name='DiskSize', description='The size of the disk. Unit: GB.', example='40'),
      diskType?: string(name='DiskType', description='The category of the disk. Valid values:

*   SSD: standard SSDs
*   ESSD: enhanced SSDs', example='ESSD'),
      flow?: int32(name='Flow', description='The monthly data transfer quota. Unit: GB.', example='400'),
      memory?: int32(name='Memory', description='The memory size. Unit: GB.', example='1'),
      originPrice?: double(name='OriginPrice', description='The monthly price of the plan.', example='60'),
      planId?: string(name='PlanId', description='The ID of the plan.', example='swas.s2.c2m1s40b3t04'),
      supportPlatform?: string(name='SupportPlatform', description='The operating system types supported by the plan.', example='["Linux","Windows"]'),
    }
  ](name='Plans', description='Details about the plans.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model ListPlansResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPlansResponseBody(name='body'),
}

/**
  * You can query the details of all plans provided by Simple Application Server in a specified region, including the IDs, prices, disk sizes, and disk categories of the plans.
  * ## QPS limits
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ListPlansRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListPlansResponse
 */
async function listPlansWithOptions(request: ListPlansRequest, runtime: Util.RuntimeOptions): ListPlansResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPlans',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can query the details of all plans provided by Simple Application Server in a specified region, including the IDs, prices, disk sizes, and disk categories of the plans.
  * ## QPS limits
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ListPlansRequest
  * @return ListPlansResponse
 */
async function listPlans(request: ListPlansRequest): ListPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPlansWithOptions(request, runtime);
}

model ListRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of the region.', example='swas.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='Regions', description='Details about the regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRegionsResponseBody(name='body'),
}

/**
  * The query results include all the Alibaba Cloud regions where Simple Application Server is available on the International site (alibabacloud.com) and the China site (aliyun.com).
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ListRegionsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListRegionsResponse
 */
async function listRegionsWithOptions(runtime: Util.RuntimeOptions): ListRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListRegions',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The query results include all the Alibaba Cloud regions where Simple Application Server is available on the International site (alibabacloud.com) and the China site (aliyun.com).
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @return ListRegionsResponse
 */
async function listRegions(): ListRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRegionsWithOptions(runtime);
}

model ListSnapshotsRequest {
  diskId?: string(name='DiskId', description='The ID of the source disk.', example='d-bp14wq0149cpp2xy****'),
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='2ad1ae67295445f598017499dc****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server.', example='cn-hangzhou'),
  snapshotIds?: string(name='SnapshotIds', description='The IDs of the snapshots. The value can be a JSON array that consists of up to 100 snapshot IDs. Separate the snapshot IDs with commas (,).', example='["s-bp16oazlsold4dks****", "s-bp16oazlsold4abc****"]'),
  sourceDiskType?: string(name='SourceDiskType'),
}

model ListSnapshotsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  snapshots?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the snapshot was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-03-09T07:12:49Z'),
      instanceId?: string(name='InstanceId'),
      progress?: string(name='Progress', description='The progress of snapshot creation.', example='100%'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      remark?: string(name='Remark', description='The remarks of the snapshot.', example='test-Remark'),
      rollbackTime?: string(name='RollbackTime'),
      snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-bp16oazlsold4dks****'),
      snapshotName?: string(name='SnapshotName', description='The name of the snapshot.', example='test-SnapshotName'),
      sourceDiskId?: string(name='SourceDiskId', description='The ID of the source disk. This parameter has a value even after the source disk is released.', example='d-bp14wq0149cpp2xy****'),
      sourceDiskType?: string(name='SourceDiskType', description='The type of the source disk. Valid values:

*   System: system disk
*   data: data disk', example='System'),
      status?: string(name='Status', description='The status of the snapshot. Valid values:

*   Progressing: The snapshot is being created.
*   Accomplished: The snapshot is created.
*   Failed: The snapshot failed to be created.', example='Accomplished'),
    }
  ](name='Snapshots', description='Details about the snapshots.'),
  totalCount?: int32(name='TotalCount', description='The total number of snapshots.', example='1'),
}

model ListSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSnapshotsResponseBody(name='body'),
}

/**
  * You can specify multiple request parameters such as `InstanceId`, `DiskId`, and `SnapshotIds` to be queried. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ListSnapshotsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListSnapshotsResponse
 */
async function listSnapshotsWithOptions(request: ListSnapshotsRequest, runtime: Util.RuntimeOptions): ListSnapshotsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotIds)) {
    query['SnapshotIds'] = request.snapshotIds;
  }
  if (!Util.isUnset(request.sourceDiskType)) {
    query['SourceDiskType'] = request.sourceDiskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSnapshots',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can specify multiple request parameters such as `InstanceId`, `DiskId`, and `SnapshotIds` to be queried. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ListSnapshotsRequest
  * @return ListSnapshotsResponse
 */
async function listSnapshots(request: ListSnapshotsRequest): ListSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSnapshotsWithOptions(request, runtime);
}

model LoginInstanceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='9ae7106e68eb4402b0dcbd48a9de****'),
  password?: string(name='Password', description='The password that corresponds to the username.

*   For a Linux server, you do not need to enter a password.
*   For a Windows server, enter the password that you set. If you have not set a password for the simple application server, set a password. For more information, see [Reset the password](~~60055~~l).', example='Test****'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server.

You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou'),
  username?: string(name='Username', description='The username of the simple application server.

*   For a Linux server, you do not need to enter a username.
*   For a Windows server, the default username is `administrator`.', example='administrator'),
}

model LoginInstanceResponseBody = {
  redirectUrl?: string(name='RedirectUrl', description='The URL that you use to log on to the server.', example='https://ecs-workbench.aliyun.com/view/instance/single/gbktfz****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C2DE174B-7196-5778-A00D-6EA2601B****'),
}

model LoginInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LoginInstanceResponseBody(name='body'),
}

/**
  * After you create a simple application server, you can log on to the simple application server to build environments and applications on the server.
  *
  * @param request LoginInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return LoginInstanceResponse
 */
async function loginInstanceWithOptions(request: LoginInstanceRequest, runtime: Util.RuntimeOptions): LoginInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.username)) {
    query['Username'] = request.username;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'LoginInstance',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After you create a simple application server, you can log on to the simple application server to build environments and applications on the server.
  *
  * @param request LoginInstanceRequest
  * @return LoginInstanceResponse
 */
async function loginInstance(request: LoginInstanceRequest): LoginInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return loginInstanceWithOptions(request, runtime);
}

model ModifyDatabaseInstanceDescriptionRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  databaseInstanceDescription?: string(name='DatabaseInstanceDescription'),
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyDatabaseInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model ModifyDatabaseInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDatabaseInstanceDescriptionResponseBody(name='body'),
}

async function modifyDatabaseInstanceDescriptionWithOptions(request: ModifyDatabaseInstanceDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDatabaseInstanceDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.databaseInstanceDescription)) {
    query['DatabaseInstanceDescription'] = request.databaseInstanceDescription;
  }
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDatabaseInstanceDescription',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDatabaseInstanceDescription(request: ModifyDatabaseInstanceDescriptionRequest): ModifyDatabaseInstanceDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDatabaseInstanceDescriptionWithOptions(request, runtime);
}

model ModifyDatabaseInstanceParameterRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  forceRestart?: boolean(name='ForceRestart', example='false'),
  parameters?: string(name='Parameters', example='{"delayed_insert_timeout":"600","max_length_for_sort_data":"2048"}'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyDatabaseInstanceParameterResponseBody = {
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model ModifyDatabaseInstanceParameterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDatabaseInstanceParameterResponseBody(name='body'),
}

async function modifyDatabaseInstanceParameterWithOptions(request: ModifyDatabaseInstanceParameterRequest, runtime: Util.RuntimeOptions): ModifyDatabaseInstanceParameterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.forceRestart)) {
    query['ForceRestart'] = request.forceRestart;
  }
  if (!Util.isUnset(request.parameters)) {
    query['Parameters'] = request.parameters;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDatabaseInstanceParameter',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDatabaseInstanceParameter(request: ModifyDatabaseInstanceParameterRequest): ModifyDatabaseInstanceParameterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDatabaseInstanceParameterWithOptions(request, runtime);
}

model ModifyFirewallRuleRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  port?: string(name='Port', example='3306'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  remark?: string(name='Remark'),
  ruleId?: string(name='RuleId', example='eeea34d9867b4d55a4ff8d5fcfbd****'),
  ruleProtocol?: string(name='RuleProtocol', example='TCP'),
  sourceCidrIp?: string(name='SourceCidrIp', example='10.147.33.**'),
}

model ModifyFirewallRuleResponseBody = {
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E1FEE'),
}

model ModifyFirewallRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyFirewallRuleResponseBody(name='body'),
}

async function modifyFirewallRuleWithOptions(request: ModifyFirewallRuleRequest, runtime: Util.RuntimeOptions): ModifyFirewallRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.ruleProtocol)) {
    query['RuleProtocol'] = request.ruleProtocol;
  }
  if (!Util.isUnset(request.sourceCidrIp)) {
    query['SourceCidrIp'] = request.sourceCidrIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyFirewallRule',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyFirewallRule(request: ModifyFirewallRuleRequest): ModifyFirewallRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyFirewallRuleWithOptions(request, runtime);
}

model ModifyImageShareStatusRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.**** For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  imageId?: string(name='ImageId', description='The ID of the image.', example='m-saacssasc****'),
  operation?: string(name='Operation', description='Valid values:

*   Share
*   UnShare', example='Share'),
  regionId?: string(name='RegionId', description='The region ID of the custom image. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model ModifyImageShareStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C****'),
}

model ModifyImageShareStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyImageShareStatusResponseBody(name='body'),
}

/**
  * You can share a custom image to ECS. When the configurations of your simple application server cannot meet your business requirements, or you want to use ECS instances to deploy your business, you can share your custom image to ECS to transfer your business from Simple Application Server to ECS.
  * >  The region in which the shared image resides in ECS is the same as the region in which the custom image resides in Simple Application Server.
  * You can unshare a custom image based on your business requirements or when you want to delete the custom image.
  * Take note of the following items:
  * *   After you unshare a custom image, you cannot query or use the custom image in the ECS console or by calling ECS API operations.
  * *   After you unshare a custom image, the system disks of the ECS instances that were created from the shared image cannot be re-initialized.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ModifyImageShareStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyImageShareStatusResponse
 */
async function modifyImageShareStatusWithOptions(request: ModifyImageShareStatusRequest, runtime: Util.RuntimeOptions): ModifyImageShareStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.operation)) {
    query['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyImageShareStatus',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can share a custom image to ECS. When the configurations of your simple application server cannot meet your business requirements, or you want to use ECS instances to deploy your business, you can share your custom image to ECS to transfer your business from Simple Application Server to ECS.
  * >  The region in which the shared image resides in ECS is the same as the region in which the custom image resides in Simple Application Server.
  * You can unshare a custom image based on your business requirements or when you want to delete the custom image.
  * Take note of the following items:
  * *   After you unshare a custom image, you cannot query or use the custom image in the ECS console or by calling ECS API operations.
  * *   After you unshare a custom image, the system disks of the ECS instances that were created from the shared image cannot be re-initialized.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ModifyImageShareStatusRequest
  * @return ModifyImageShareStatusResponse
 */
async function modifyImageShareStatus(request: ModifyImageShareStatusRequest): ModifyImageShareStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageShareStatusWithOptions(request, runtime);
}

model ModifyInstanceVncPasswordRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  vncPassword?: string(name='VncPassword', example='***'),
}

model ModifyInstanceVncPasswordResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model ModifyInstanceVncPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceVncPasswordResponseBody(name='body'),
}

async function modifyInstanceVncPasswordWithOptions(request: ModifyInstanceVncPasswordRequest, runtime: Util.RuntimeOptions): ModifyInstanceVncPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vncPassword)) {
    query['VncPassword'] = request.vncPassword;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceVncPassword',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstanceVncPassword(request: ModifyInstanceVncPasswordRequest): ModifyInstanceVncPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceVncPasswordWithOptions(request, runtime);
}

model RebootInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server.', example='cn-hangzhou'),
}

model RebootInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model RebootInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebootInstanceResponseBody(name='body'),
}

/**
  * *   You can restart simple application server instances that are only in the Running (Running) state.
  * *   After you restart a simple application server, it enters the Starting (Starting) state.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request RebootInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RebootInstanceResponse
 */
async function rebootInstanceWithOptions(request: RebootInstanceRequest, runtime: Util.RuntimeOptions): RebootInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebootInstance',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can restart simple application server instances that are only in the Running (Running) state.
  * *   After you restart a simple application server, it enters the Starting (Starting) state.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request RebootInstanceRequest
  * @return RebootInstanceResponse
 */
async function rebootInstance(request: RebootInstanceRequest): RebootInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootInstanceWithOptions(request, runtime);
}

model RebootInstancesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  forceReboot?: boolean(name='ForceReboot', example='false'),
  instanceIds?: string(name='InstanceIds', example='["2ad1ae67295445f598017499dc****", "2ad1ae67295445f598017123dc****"]'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model RebootInstancesResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model RebootInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebootInstancesResponseBody(name='body'),
}

async function rebootInstancesWithOptions(request: RebootInstancesRequest, runtime: Util.RuntimeOptions): RebootInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.forceReboot)) {
    query['ForceReboot'] = request.forceReboot;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebootInstances',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rebootInstances(request: RebootInstancesRequest): RebootInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootInstancesWithOptions(request, runtime);
}

model ReleasePublicConnectionRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ReleasePublicConnectionResponseBody = {
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model ReleasePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleasePublicConnectionResponseBody(name='body'),
}

async function releasePublicConnectionWithOptions(request: ReleasePublicConnectionRequest, runtime: Util.RuntimeOptions): ReleasePublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleasePublicConnection',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releasePublicConnection(request: ReleasePublicConnectionRequest): ReleasePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releasePublicConnectionWithOptions(request, runtime);
}

model RenewInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****'),
  period?: int32(name='Period', description='The renewal duration. Unit: months Valid values: 1, 3, 6, 12, 24, and 36.', example='1'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server.', example='cn-hangzhou'),
}

model RenewInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewInstanceResponseBody(name='body'),
}

/**
  * *   Before you call this operation, we recommend that you understand the billing of Simple Application Server. For more information, see [Billable items](~~58623~~).
  * *   When you call this operation to renew a server, make sure that the balance in your account is sufficient. If the balance in your account is insufficient, the server cannot be renewed.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request RenewInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RenewInstanceResponse
 */
async function renewInstanceWithOptions(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewInstance',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Before you call this operation, we recommend that you understand the billing of Simple Application Server. For more information, see [Billable items](~~58623~~).
  * *   When you call this operation to renew a server, make sure that the balance in your account is sufficient. If the balance in your account is insufficient, the server cannot be renewed.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request RenewInstanceRequest
  * @return RenewInstanceResponse
 */
async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceWithOptions(request, runtime);
}

model ResetDatabaseAccountPasswordRequest {
  accountPassword?: string(name='AccountPassword', example='Password****'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ResetDatabaseAccountPasswordResponseBody = {
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model ResetDatabaseAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetDatabaseAccountPasswordResponseBody(name='body'),
}

async function resetDatabaseAccountPasswordWithOptions(request: ResetDatabaseAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetDatabaseAccountPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetDatabaseAccountPassword',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetDatabaseAccountPassword(request: ResetDatabaseAccountPasswordRequest): ResetDatabaseAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetDatabaseAccountPasswordWithOptions(request, runtime);
}

model ResetDiskRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** value can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  diskId?: string(name='DiskId', description='The ID of the disk to be rolled back.', example='d-bp14wq0149cpp2xy****'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server for which the snapshot is created.', example='cn-hangzhou'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-bp16oazlsold4dks****'),
}

model ResetDiskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model ResetDiskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetDiskResponseBody(name='body'),
}

/**
  * *   You can call this operation to roll back a disk only when the associated simple application server is in the Stopped state.
  * *   After a disk is rolled back, all data changes that are made from when the snapshot was created to when the disk is rolled back are lost. Back up disk data based on your needs before you roll back the disk.
  * ## Precautions
  * If you reset a simple application server, the disk data on the server is deleted. Snapshots created before the resetting are retained but cannot be used to roll back the disks of the server.  
  * ## QPS limits
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ResetDiskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ResetDiskResponse
 */
async function resetDiskWithOptions(request: ResetDiskRequest, runtime: Util.RuntimeOptions): ResetDiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetDisk',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call this operation to roll back a disk only when the associated simple application server is in the Stopped state.
  * *   After a disk is rolled back, all data changes that are made from when the snapshot was created to when the disk is rolled back are lost. Back up disk data based on your needs before you roll back the disk.
  * ## Precautions
  * If you reset a simple application server, the disk data on the server is deleted. Snapshots created before the resetting are retained but cannot be used to roll back the disks of the server.  
  * ## QPS limits
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ResetDiskRequest
  * @return ResetDiskResponse
 */
async function resetDisk(request: ResetDiskRequest): ResetDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetDiskWithOptions(request, runtime);
}

model ResetSystemRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length. ****For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  imageId?: string(name='ImageId', description='The ID of the image that is used to replace the image on the simple application server. If you do not specify this parameter, the operating system of the simple application server is reset by default.', example='794c230fd3e64ea19f83f4d7a0ad****'),
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model ResetSystemResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model ResetSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetSystemResponseBody(name='body'),
}

/**
  * You can reset a simple application server to re-install its applications or operating system and re-initialize the server. You can reset a simple application server by resetting the operating system or replacing the image.
  * You can use one of the following methods to reset a simple application server:
  * *   Reset the operating system. You can re-install the operating system without the need to replace the image.
  * *   Replace the image. You can replace the existing image on the simple application server by using another Alibaba Cloud image or a custom image. This effectively replaces the operating system.
  * ## Precautions
  * - If you reset a simple application sever, the disk data on the server is cleared. You must back up the data as needed.
  * - After you reset a simple application server, the monitoring operations that are performed on the server may fail. You can use one of the following methods to install the CloudMonitor agent on the server:    - Connect to the server: For more information, see [Manually install plug-ins for Alibaba Cloud hosts](/help/en/cloudmonitor/latest/install-and-uninstall-the-cloudmonitor-agent-for-cpp).
  *   - Use Command Assistant: For more information, see [Use Command Assistant](/help/en/simple-application-server/latest/cloud-assistant). You can obtain the commands that are used to install CloudMonitor from the "Common commands" section in the [Use Command Assistant](/help/en/simple-application-server/latest/cloud-assistant) topic.
  * ## Limits
  * - If a simple application server is reset, snapshots that are created before the server is reset are retained, but the snapshots cannot be used to roll back the disks of the server.
  * - If a simple application server was created based on a custom image that contains data of a data disk, the server cannot be reset.
  * - If you reset a simple application server by replacing the existing image with a custom image,   - The custom image must reside in the same region as the current server.
  *   - The custom image cannot be created from the current server. If you want to recover the data on the server, you can use a snapshot that is created from the server to roll back the disks.
  *   - If your simple application server resides in a region outside the Chinese mainland, you cannot switch the operating system of the server between Windows Server and Linux. You cannot use a Windows Server custom image to reset a Linux simple application server. Similarly, you cannot use a Linux custom image to reset a Windows Server simple application server. You can switch the operating system of simple application servers only between Windows Server operating systems or between Linux distributions.
  *   - The following limits apply to the disks on the simple application server:     - If the custom image contains a system disk and data disks, but the simple application server is not attached with a data disk but attached only with a system disk, you cannot use the custom image to reset the simple application server.
  *     - If the system disk size of the custom image is greater than the system disk size of the simple application server, you cannot directly use the custom image to reset the simple application server.
  *     - When the system disk size of the simple application server is greater than or equal to the system disk size of the custom image, you can use the custom image to reset the simple application server. To increase the system disk size of the server, you can upgrade the simple application server. For more information, see Upgrade configurations.
  *     - If the data disk size of the custom image is greater than the data disk size of the simple application server, you cannot use the custom image to reset the simple application server.
  * ## QPS limits
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ResetSystemRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ResetSystemResponse
 */
async function resetSystemWithOptions(request: ResetSystemRequest, runtime: Util.RuntimeOptions): ResetSystemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetSystem',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can reset a simple application server to re-install its applications or operating system and re-initialize the server. You can reset a simple application server by resetting the operating system or replacing the image.
  * You can use one of the following methods to reset a simple application server:
  * *   Reset the operating system. You can re-install the operating system without the need to replace the image.
  * *   Replace the image. You can replace the existing image on the simple application server by using another Alibaba Cloud image or a custom image. This effectively replaces the operating system.
  * ## Precautions
  * - If you reset a simple application sever, the disk data on the server is cleared. You must back up the data as needed.
  * - After you reset a simple application server, the monitoring operations that are performed on the server may fail. You can use one of the following methods to install the CloudMonitor agent on the server:    - Connect to the server: For more information, see [Manually install plug-ins for Alibaba Cloud hosts](/help/en/cloudmonitor/latest/install-and-uninstall-the-cloudmonitor-agent-for-cpp).
  *   - Use Command Assistant: For more information, see [Use Command Assistant](/help/en/simple-application-server/latest/cloud-assistant). You can obtain the commands that are used to install CloudMonitor from the "Common commands" section in the [Use Command Assistant](/help/en/simple-application-server/latest/cloud-assistant) topic.
  * ## Limits
  * - If a simple application server is reset, snapshots that are created before the server is reset are retained, but the snapshots cannot be used to roll back the disks of the server.
  * - If a simple application server was created based on a custom image that contains data of a data disk, the server cannot be reset.
  * - If you reset a simple application server by replacing the existing image with a custom image,   - The custom image must reside in the same region as the current server.
  *   - The custom image cannot be created from the current server. If you want to recover the data on the server, you can use a snapshot that is created from the server to roll back the disks.
  *   - If your simple application server resides in a region outside the Chinese mainland, you cannot switch the operating system of the server between Windows Server and Linux. You cannot use a Windows Server custom image to reset a Linux simple application server. Similarly, you cannot use a Linux custom image to reset a Windows Server simple application server. You can switch the operating system of simple application servers only between Windows Server operating systems or between Linux distributions.
  *   - The following limits apply to the disks on the simple application server:     - If the custom image contains a system disk and data disks, but the simple application server is not attached with a data disk but attached only with a system disk, you cannot use the custom image to reset the simple application server.
  *     - If the system disk size of the custom image is greater than the system disk size of the simple application server, you cannot directly use the custom image to reset the simple application server.
  *     - When the system disk size of the simple application server is greater than or equal to the system disk size of the custom image, you can use the custom image to reset the simple application server. To increase the system disk size of the server, you can upgrade the simple application server. For more information, see Upgrade configurations.
  *     - If the data disk size of the custom image is greater than the data disk size of the simple application server, you cannot use the custom image to reset the simple application server.
  * ## QPS limits
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request ResetSystemRequest
  * @return ResetSystemResponse
 */
async function resetSystem(request: ResetSystemRequest): ResetSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetSystemWithOptions(request, runtime);
}

model RestartDatabaseInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model RestartDatabaseInstanceResponseBody = {
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model RestartDatabaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartDatabaseInstanceResponseBody(name='body'),
}

async function restartDatabaseInstanceWithOptions(request: RestartDatabaseInstanceRequest, runtime: Util.RuntimeOptions): RestartDatabaseInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestartDatabaseInstance',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartDatabaseInstance(request: RestartDatabaseInstanceRequest): RestartDatabaseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDatabaseInstanceWithOptions(request, runtime);
}

model RunCommandRequest {
  commandContent?: string(name='CommandContent', description='The content of the command. Take note of the following items:

*   When `EnableParameter` is set to true, the custom parameter feature is enabled and you can configure custom parameters based on the following rules:
*   Define custom parameters in the {{}} format. Within `{{}}`, the spaces and line feeds before and after the parameter names are ignored.
*   The number of custom parameters cannot be greater than 20.
*   A custom parameter name can contain only letters, digits, underscores (\\_), and hyphens (-). The name is case-insensitive.
*   Each custom parameter name cannot exceed 64 bytes in length.', example='ifconfig -s'),
  enableParameter?: boolean(name='EnableParameter', description='Specifies whether to include custom parameters in the command.

Default value: false.', example='false'),
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****'),
  name?: string(name='Name', description='The name of the command.', example='testName'),
  parameters?: map[string]any(name='Parameters', description='The custom parameters in the key-value pair format that are to be passed in when the command includes custom parameters. For example, if the command content is `echo {{name}}`, you can set the `Parameters` parameter to the `{"name":"Jack"}` key-value pair. The `name` key of the custom parameter is automatically replaced with the paired Jack value to generate a new command. As a result, the `echo Jack` command is actually run.

Number of custom parameters ranges from 0 to 20. Take note of the following items:

*   The key cannot be an empty string and can be up to 64 characters in length.
*   The value can be an empty string.
*   After custom parameters and original command content are encoded in Base64, the command cannot exceed 16 KB in size.
*   The value of Parameters must be included in the custom parameters specified when you created the command. You can use empty strings to represent the parameters that are not passed in.

This parameter is empty by default. You can leave this parameter empty to disable the custom parameter feature.', example='{"name":"Jack", "accessKey":"LTAIdyvdIqaRY****"}'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou'),
  timeout?: int32(name='Timeout', description='Specifies the timeout period of the command on the server.

If a task that runs the command times out, Command Assistant forcefully terminates the task process. Valid values: 10 to 86400. Unit: seconds. The period of 86400 seconds is equal to 24 hours.

Default value: 60.', example='60'),
  type?: string(name='Type', description='The language type of the command. Valid values:

*   RunBatScript: batch commands (applicable to Windows servers).
*   RunPowerShellScript: PowerShell commands (applicable to Windows servers).
*   RunShellScript: shell commands (applicable to Linux servers).', example='RunShellScript'),
  windowsPasswordName?: string(name='WindowsPasswordName', description='The name of the password to be used to run the command on a Windows server.

If you want to use a username other than the default "system" username to run the command on a Windows server, you must specify both the WindowsPasswordName and WorkingUser parameters. The password is hosted in plaintext in the parameter repository of Operation Orchestration Service (OOS) to reduce the risk of password leaks. Only the name of the password is passed in by using the WindowsPasswordName parameter.', example='axtSecretPassword'),
  workingDir?: string(name='WorkingDir', description='The execution path of the command. You can specify a value for the parameter. Default execution paths vary based on the operating systems of the servers.

*   For Linux servers, the default execution path is the /home directory of the root user.
*   For Windows servers, the default execution path is C:\\Windows\\system32.', example='/home/'),
  workingUser?: string(name='WorkingUser', description='A user of the server who runs the command. We recommend that you run the command as a regular user to reduce security risks.

Default value:

*   For Linux servers, the default value is root.
*   For Windows servers, the default value is system.', example='root'),
}

model RunCommandShrinkRequest {
  commandContent?: string(name='CommandContent', description='The content of the command. Take note of the following items:

*   When `EnableParameter` is set to true, the custom parameter feature is enabled and you can configure custom parameters based on the following rules:
*   Define custom parameters in the {{}} format. Within `{{}}`, the spaces and line feeds before and after the parameter names are ignored.
*   The number of custom parameters cannot be greater than 20.
*   A custom parameter name can contain only letters, digits, underscores (\\_), and hyphens (-). The name is case-insensitive.
*   Each custom parameter name cannot exceed 64 bytes in length.', example='ifconfig -s'),
  enableParameter?: boolean(name='EnableParameter', description='Specifies whether to include custom parameters in the command.

Default value: false.', example='false'),
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****'),
  name?: string(name='Name', description='The name of the command.', example='testName'),
  parametersShrink?: string(name='Parameters', description='The custom parameters in the key-value pair format that are to be passed in when the command includes custom parameters. For example, if the command content is `echo {{name}}`, you can set the `Parameters` parameter to the `{"name":"Jack"}` key-value pair. The `name` key of the custom parameter is automatically replaced with the paired Jack value to generate a new command. As a result, the `echo Jack` command is actually run.

Number of custom parameters ranges from 0 to 20. Take note of the following items:

*   The key cannot be an empty string and can be up to 64 characters in length.
*   The value can be an empty string.
*   After custom parameters and original command content are encoded in Base64, the command cannot exceed 16 KB in size.
*   The value of Parameters must be included in the custom parameters specified when you created the command. You can use empty strings to represent the parameters that are not passed in.

This parameter is empty by default. You can leave this parameter empty to disable the custom parameter feature.', example='{"name":"Jack", "accessKey":"LTAIdyvdIqaRY****"}'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou'),
  timeout?: int32(name='Timeout', description='Specifies the timeout period of the command on the server.

If a task that runs the command times out, Command Assistant forcefully terminates the task process. Valid values: 10 to 86400. Unit: seconds. The period of 86400 seconds is equal to 24 hours.

Default value: 60.', example='60'),
  type?: string(name='Type', description='The language type of the command. Valid values:

*   RunBatScript: batch commands (applicable to Windows servers).
*   RunPowerShellScript: PowerShell commands (applicable to Windows servers).
*   RunShellScript: shell commands (applicable to Linux servers).', example='RunShellScript'),
  windowsPasswordName?: string(name='WindowsPasswordName', description='The name of the password to be used to run the command on a Windows server.

If you want to use a username other than the default "system" username to run the command on a Windows server, you must specify both the WindowsPasswordName and WorkingUser parameters. The password is hosted in plaintext in the parameter repository of Operation Orchestration Service (OOS) to reduce the risk of password leaks. Only the name of the password is passed in by using the WindowsPasswordName parameter.', example='axtSecretPassword'),
  workingDir?: string(name='WorkingDir', description='The execution path of the command. You can specify a value for the parameter. Default execution paths vary based on the operating systems of the servers.

*   For Linux servers, the default execution path is the /home directory of the root user.
*   For Windows servers, the default execution path is C:\\Windows\\system32.', example='/home/'),
  workingUser?: string(name='WorkingUser', description='A user of the server who runs the command. We recommend that you run the command as a regular user to reduce security risks.

Default value:

*   For Linux servers, the default value is root.
*   For Windows servers, the default value is system.', example='root'),
}

model RunCommandResponseBody = {
  invokeId?: string(name='InvokeId', description='The ID of the command task.', example='t-hz02p9545t6****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model RunCommandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunCommandResponseBody(name='body'),
}

/**
  * Command Assistant is a Simple Application Server-specific automated O\\&M tool. You can manage simple application servers by running shell, PowerShell, and batch commands in the Simple Application Server console without logging on to the servers.
  * When you use Command Assistant, the following conditions must be met:
  * *   The simple application server must be in the Running state.
  * *   The Cloud Assistant client is installed on the server. By default, the Cloud Assistant client is installed on simple application servers. If you manually uninstall the client, you must reinstall it. For more information, see [Install the Cloud Assistant client](~~64921~~).
  *
  * @param tmpReq RunCommandRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RunCommandResponse
 */
async function runCommandWithOptions(tmpReq: RunCommandRequest, runtime: Util.RuntimeOptions): RunCommandResponse {
  Util.validateModel(tmpReq);
  var request = new RunCommandShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.parameters)) {
    request.parametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.parameters, 'Parameters', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.commandContent)) {
    query['CommandContent'] = request.commandContent;
  }
  if (!Util.isUnset(request.enableParameter)) {
    query['EnableParameter'] = request.enableParameter;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.parametersShrink)) {
    query['Parameters'] = request.parametersShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.windowsPasswordName)) {
    query['WindowsPasswordName'] = request.windowsPasswordName;
  }
  if (!Util.isUnset(request.workingDir)) {
    query['WorkingDir'] = request.workingDir;
  }
  if (!Util.isUnset(request.workingUser)) {
    query['WorkingUser'] = request.workingUser;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RunCommand',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Command Assistant is a Simple Application Server-specific automated O\\&M tool. You can manage simple application servers by running shell, PowerShell, and batch commands in the Simple Application Server console without logging on to the servers.
  * When you use Command Assistant, the following conditions must be met:
  * *   The simple application server must be in the Running state.
  * *   The Cloud Assistant client is installed on the server. By default, the Cloud Assistant client is installed on simple application servers. If you manually uninstall the client, you must reinstall it. For more information, see [Install the Cloud Assistant client](~~64921~~).
  *
  * @param request RunCommandRequest
  * @return RunCommandResponse
 */
async function runCommand(request: RunCommandRequest): RunCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return runCommandWithOptions(request, runtime);
}

model StartDatabaseInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model StartDatabaseInstanceResponseBody = {
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model StartDatabaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDatabaseInstanceResponseBody(name='body'),
}

async function startDatabaseInstanceWithOptions(request: StartDatabaseInstanceRequest, runtime: Util.RuntimeOptions): StartDatabaseInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDatabaseInstance',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startDatabaseInstance(request: StartDatabaseInstanceRequest): StartDatabaseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDatabaseInstanceWithOptions(request, runtime);
}

model StartInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server.', example='cn-hangzhou'),
}

model StartInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartInstanceResponseBody(name='body'),
}

/**
  * If your simple application server is in the Stopped state, you can call the StartInstance operation to start the server.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request StartInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StartInstanceResponse
 */
async function startInstanceWithOptions(request: StartInstanceRequest, runtime: Util.RuntimeOptions): StartInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartInstance',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If your simple application server is in the Stopped state, you can call the StartInstance operation to start the server.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request StartInstanceRequest
  * @return StartInstanceResponse
 */
async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startInstanceWithOptions(request, runtime);
}

model StartInstancesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceIds?: string(name='InstanceIds', example='["2ad1ae67295445f598017499dc****", "2ad1ae67295445f598017123dc****"]'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model StartInstancesResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model StartInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartInstancesResponseBody(name='body'),
}

async function startInstancesWithOptions(request: StartInstancesRequest, runtime: Util.RuntimeOptions): StartInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartInstances',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startInstances(request: StartInstancesRequest): StartInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return startInstancesWithOptions(request, runtime);
}

model StopDatabaseInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model StopDatabaseInstanceResponseBody = {
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model StopDatabaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopDatabaseInstanceResponseBody(name='body'),
}

async function stopDatabaseInstanceWithOptions(request: StopDatabaseInstanceRequest, runtime: Util.RuntimeOptions): StopDatabaseInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.databaseInstanceId)) {
    query['DatabaseInstanceId'] = request.databaseInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDatabaseInstance',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopDatabaseInstance(request: StopDatabaseInstanceRequest): StopDatabaseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDatabaseInstanceWithOptions(request, runtime);
}

model StopInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.**** For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****'),
  regionId?: string(name='RegionId', description='The region ID of the server.', example='cn-hangzhou'),
}

model StopInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopInstanceResponseBody(name='body'),
}

/**
  * You can stop simple application servers that are not used for the time being.
  * >  The stopping of simple application server may interrupt your business. We recommend that you perform the stop operation during off-peak hours.
  * ## QPS limits
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request StopInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StopInstanceResponse
 */
async function stopInstanceWithOptions(request: StopInstanceRequest, runtime: Util.RuntimeOptions): StopInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopInstance',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can stop simple application servers that are not used for the time being.
  * >  The stopping of simple application server may interrupt your business. We recommend that you perform the stop operation during off-peak hours.
  * ## QPS limits
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request StopInstanceRequest
  * @return StopInstanceResponse
 */
async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstanceWithOptions(request, runtime);
}

model StopInstancesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  forceStop?: boolean(name='ForceStop', example='true'),
  instanceIds?: string(name='InstanceIds', example='["2ad1ae67295445f598017499dc****", "2ad1ae67295445f598017123dc****"]'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model StopInstancesResponseBody = {
  requestId?: string(name='RequestId', example='C2DE174B-7196-5778-A00D-6EA2601B****'),
}

model StopInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopInstancesResponseBody(name='body'),
}

async function stopInstancesWithOptions(request: StopInstancesRequest, runtime: Util.RuntimeOptions): StopInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.forceStop)) {
    query['ForceStop'] = request.forceStop;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopInstances',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopInstances(request: StopInstancesRequest): StopInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstancesWithOptions(request, runtime);
}

model UpdateDiskAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  diskId?: string(name='DiskId', example='d-bp18kjxg9ebrhsgi****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  remark?: string(name='Remark', example='test'),
}

model UpdateDiskAttributeResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28D****534F'),
}

model UpdateDiskAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDiskAttributeResponseBody(name='body'),
}

async function updateDiskAttributeWithOptions(request: UpdateDiskAttributeRequest, runtime: Util.RuntimeOptions): UpdateDiskAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDiskAttribute',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDiskAttribute(request: UpdateDiskAttributeRequest): UpdateDiskAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDiskAttributeWithOptions(request, runtime);
}

model UpdateInstanceAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.**** For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****'),
  instanceName?: string(name='InstanceName', description='The new name of the simple application server. The name must be 2 to 128 characters in length. It must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).', example='test-InstanceName'),
  password?: string(name='Password', description='The new password of the simple application server. The password must be 8 to 30 characters in length. It must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include

`( ) ~ ! @ # $ % ^ & * - + = | { } [ ] : ; < > , . ? /`', example='Test123!'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server.', example='cn-hangzhou'),
}

model UpdateInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model UpdateInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInstanceAttributeResponseBody(name='body'),
}

/**
  * After you change the password of a simple application server, you must restart the server by calling the [RebootInstance](~~190443~~) operation for the new password to take effect.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request UpdateInstanceAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateInstanceAttributeResponse
 */
async function updateInstanceAttributeWithOptions(request: UpdateInstanceAttributeRequest, runtime: Util.RuntimeOptions): UpdateInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstanceAttribute',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After you change the password of a simple application server, you must restart the server by calling the [RebootInstance](~~190443~~) operation for the new password to take effect.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request UpdateInstanceAttributeRequest
  * @return UpdateInstanceAttributeResponse
 */
async function updateInstanceAttribute(request: UpdateInstanceAttributeRequest): UpdateInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInstanceAttributeWithOptions(request, runtime);
}

model UpdateSnapshotAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  remark?: string(name='Remark', example='test'),
  snapshotId?: string(name='SnapshotId', example='s-bp16oazlsold4dks****'),
}

model UpdateSnapshotAttributeResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C****'),
}

model UpdateSnapshotAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSnapshotAttributeResponseBody(name='body'),
}

async function updateSnapshotAttributeWithOptions(request: UpdateSnapshotAttributeRequest, runtime: Util.RuntimeOptions): UpdateSnapshotAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSnapshotAttribute',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSnapshotAttribute(request: UpdateSnapshotAttributeRequest): UpdateSnapshotAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSnapshotAttributeWithOptions(request, runtime);
}

model UpgradeInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****'),
  planId?: string(name='PlanId', description='The ID of the new plan. You can call the [ListPlans](~~189314~~) operation to query plans provided by Simple Application Server.', example='swas.s2.c2m2s50b4t08'),
  regionId?: string(name='RegionId', description='The region ID of the simple application server.', example='cn-hangzhou'),
}

model UpgradeInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model UpgradeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeInstanceResponseBody(name='body'),
}

/**
  * *   The plans of simple application servers can only be upgraded. For more information about plans, see [Billable items](~~58623~~).
  * *   When you call this operation to upgrade a server, make sure that the balance in your account is sufficient. If the balance in your account is insufficient, the server cannot be upgraded.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request UpgradeInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpgradeInstanceResponse
 */
async function upgradeInstanceWithOptions(request: UpgradeInstanceRequest, runtime: Util.RuntimeOptions): UpgradeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeInstance',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The plans of simple application servers can only be upgraded. For more information about plans, see [Billable items](~~58623~~).
  * *   When you call this operation to upgrade a server, make sure that the balance in your account is sufficient. If the balance in your account is insufficient, the server cannot be upgraded.
  * ## QPS limits
  * The queries per second (QPS) limit for a single user for the API operation is 10 calls per minute. If the number of calls to the API operation per minute exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation. For more information, see [QPS limit](/help/en/simple-application-server/latest/qps-limit-1).
  *
  * @param request UpgradeInstanceRequest
  * @return UpgradeInstanceResponse
 */
async function upgradeInstance(request: UpgradeInstanceRequest): UpgradeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeInstanceWithOptions(request, runtime);
}

model UploadInstanceKeyPairRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  instanceId?: string(name='InstanceId', example='2ad1ae67295445f598017499dc****'),
  keyPairName?: string(name='KeyPairName', example='test_gin'),
  publicKey?: string(name='PublicKey', example='ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAID5aQ5bM0Am3mWe+upjSXqisUT4DLR6ExwvA0***** **@**.com'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model UploadInstanceKeyPairResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model UploadInstanceKeyPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UploadInstanceKeyPairResponseBody(name='body'),
}

async function uploadInstanceKeyPairWithOptions(request: UploadInstanceKeyPairRequest, runtime: Util.RuntimeOptions): UploadInstanceKeyPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.publicKey)) {
    query['PublicKey'] = request.publicKey;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UploadInstanceKeyPair',
    version = '2020-06-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function uploadInstanceKeyPair(request: UploadInstanceKeyPairRequest): UploadInstanceKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadInstanceKeyPairWithOptions(request, runtime);
}

