/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'SWAS-OPEN';
  @version = '2020-06-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateCustomImageRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dataSnapshotId?: string(name='DataSnapshotId', position='Query'),
  description?: string(name='Description', position='Query'),
  imageName: string(name='ImageName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  systemSnapshotId: string(name='SystemSnapshotId', position='Query'),
}

model CreateCustomImageResponseBody = {
  imageId?: string(name='ImageId'),
  requestId?: string(name='RequestId'),
}

model CreateCustomImageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCustomImageResponseBody(name='body'),
}

async function createCustomImage(request: CreateCustomImageRequest): CreateCustomImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomImage', 'POST', '/', 'json', false, 'json', request);
}

model CreateFirewallRuleRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  port: string(name='Port', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  remark?: string(name='Remark', position='Query'),
  ruleProtocol: string(name='RuleProtocol', position='Query'),
}

model CreateFirewallRuleResponseBody = {
  firewallId?: string(name='FirewallId'),
  requestId?: string(name='RequestId'),
}

model CreateFirewallRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFirewallRuleResponseBody(name='body'),
}

async function createFirewallRule(request: CreateFirewallRuleRequest): CreateFirewallRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFirewallRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstancesRequest {
  amount?: int32(name='Amount', minimum=1, maximum=200, position='Query'),
  autoRenew?: boolean(name='AutoRenew', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', minimum=1, maximum=36, position='Query'),
  chargeType?: string(name='ChargeType', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  dataDiskSize?: long(name='DataDiskSize', minimum=0, maximum=16380, position='Query'),
  imageId: string(name='ImageId', position='Query'),
  period: int32(name='Period', minimum=1, maximum=36, position='Query'),
  planId: string(name='PlanId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model CreateInstancesResponseBody = {
  instanceIds?: [ string ](name='InstanceIds'),
  requestId?: string(name='RequestId'),
}

model CreateInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstancesResponseBody(name='body'),
}

async function createInstances(request: CreateInstancesRequest): CreateInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstances', 'POST', '/', 'json', false, 'json', request);
}

model CreateSnapshotRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  diskId: string(name='DiskId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  snapshotName: string(name='SnapshotName', position='Query'),
}

model CreateSnapshotResponseBody = {
  requestId?: string(name='RequestId'),
  snapshotId?: string(name='SnapshotId'),
}

model CreateSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSnapshotResponseBody(name='body'),
}

async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomImageRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  imageId: string(name='ImageId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DeleteCustomImageResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCustomImageResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCustomImageResponseBody(name='body'),
}

async function deleteCustomImage(request: DeleteCustomImageRequest): DeleteCustomImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomImage', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFirewallRuleRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
}

model DeleteFirewallRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteFirewallRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFirewallRuleResponseBody(name='body'),
}

async function deleteFirewallRule(request: DeleteFirewallRuleRequest): DeleteFirewallRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFirewallRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSnapshotRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  snapshotId: string(name='SnapshotId', position='Query'),
}

model DeleteSnapshotResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSnapshotResponseBody(name='body'),
}

async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model ListDisksRequest {
  diskIds?: string(name='DiskIds', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ListDisksResponseBody = {
  disks?: [ 
    {
      category?: string(name='Category'),
      creationTime?: string(name='CreationTime'),
      device?: string(name='Device'),
      diskChargeType?: string(name='DiskChargeType'),
      diskId?: string(name='DiskId'),
      diskName?: string(name='DiskName'),
      diskType?: string(name='DiskType'),
      instanceId?: string(name='InstanceId'),
      regionId?: string(name='RegionId'),
      size?: int32(name='Size'),
      status?: string(name='Status'),
    }
  ](name='Disks'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListDisksResponse = {
  headers: map[string]string(name='headers'),
  body: ListDisksResponseBody(name='body'),
}

async function listDisks(request: ListDisksRequest): ListDisksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDisks', 'POST', '/', 'json', false, 'json', request);
}

model ListFirewallRulesRequest {
  instanceId: string(name='InstanceId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ListFirewallRulesResponseBody = {
  firewallRules?: [ 
    {
      port?: string(name='Port'),
      remark?: string(name='Remark'),
      ruleId?: string(name='RuleId'),
      ruleProtocol?: string(name='RuleProtocol'),
    }
  ](name='FirewallRules'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListFirewallRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListFirewallRulesResponseBody(name='body'),
}

async function listFirewallRules(request: ListFirewallRulesRequest): ListFirewallRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFirewallRules', 'POST', '/', 'json', false, 'json', request);
}

model ListImagesRequest {
  imageIds?: string(name='ImageIds', position='Query'),
  imageType?: string(name='ImageType', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ListImagesResponseBody = {
  images?: [ 
    {
      description?: string(name='Description'),
      imageId?: string(name='ImageId'),
      imageName?: string(name='ImageName'),
      imageType?: string(name='ImageType'),
      platform?: string(name='Platform'),
    }
  ](name='Images'),
  requestId?: string(name='RequestId'),
}

model ListImagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListImagesResponseBody(name='body'),
}

async function listImages(request: ListImagesRequest): ListImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListImages', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancePlansModificationRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ListInstancePlansModificationResponseBody = {
  plans?: [ 
    {
      bandwidth?: int32(name='Bandwidth'),
      core?: int32(name='Core'),
      currency?: string(name='Currency'),
      diskSize?: int32(name='DiskSize'),
      diskType?: string(name='DiskType'),
      flow?: int32(name='Flow'),
      memory?: int32(name='Memory'),
      originPrice?: double(name='OriginPrice'),
      planId?: string(name='PlanId'),
      supportPlatform?: string(name='SupportPlatform'),
    }
  ](name='Plans'),
  requestId?: string(name='RequestId'),
}

model ListInstancePlansModificationResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancePlansModificationResponseBody(name='body'),
}

async function listInstancePlansModification(request: ListInstancePlansModificationRequest): ListInstancePlansModificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstancePlansModification', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancesRequest {
  chargeType?: string(name='ChargeType', position='Query'),
  instanceIds?: string(name='InstanceIds', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  publicIpAddresses?: string(name='PublicIpAddresses', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      businessStatus?: string(name='BusinessStatus'),
      chargeType?: string(name='ChargeType'),
      creationTime?: string(name='CreationTime'),
      ddosStatus?: string(name='DdosStatus'),
      expiredTime?: string(name='ExpiredTime'),
      imageId?: string(name='ImageId'),
      innerIpAddress?: string(name='InnerIpAddress'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      planId?: string(name='PlanId'),
      publicIpAddress?: string(name='PublicIpAddress'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
    }
  ](name='Instances'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancesTrafficPackagesRequest {
  instanceIds: string(name='InstanceIds', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ListInstancesTrafficPackagesResponseBody = {
  instanceTrafficPackageUsages?: [ 
    {
      instanceId?: string(name='InstanceId'),
      trafficOverflow?: long(name='TrafficOverflow'),
      trafficPackageRemaining?: long(name='TrafficPackageRemaining'),
      trafficPackageTotal?: long(name='TrafficPackageTotal'),
      trafficUsed?: long(name='TrafficUsed'),
    }
  ](name='InstanceTrafficPackageUsages'),
  requestId?: string(name='RequestId'),
}

model ListInstancesTrafficPackagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesTrafficPackagesResponseBody(name='body'),
}

async function listInstancesTrafficPackages(request: ListInstancesTrafficPackagesRequest): ListInstancesTrafficPackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstancesTrafficPackages', 'POST', '/', 'json', false, 'json', request);
}

model ListPlansRequest {
  regionId: string(name='RegionId', position='Query'),
}

model ListPlansResponseBody = {
  plans?: [ 
    {
      bandwidth?: int32(name='Bandwidth'),
      core?: int32(name='Core'),
      currency?: string(name='Currency'),
      diskSize?: int32(name='DiskSize'),
      diskType?: string(name='DiskType'),
      flow?: int32(name='Flow'),
      memory?: int32(name='Memory'),
      originPrice?: double(name='OriginPrice'),
      planId?: string(name='PlanId'),
      supportPlatform?: string(name='SupportPlatform'),
    }
  ](name='Plans'),
  requestId?: string(name='RequestId'),
}

model ListPlansResponse = {
  headers: map[string]string(name='headers'),
  body: ListPlansResponseBody(name='body'),
}

async function listPlans(request: ListPlansRequest): ListPlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPlans', 'POST', '/', 'json', false, 'json', request);
}

model ListRegionsRequest {
}

model ListRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListSnapshotsRequest {
  diskId?: string(name='DiskId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  snapshotIds?: string(name='SnapshotIds', position='Query'),
}

model ListSnapshotsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  snapshots?: [ 
    {
      creationTime?: string(name='CreationTime'),
      progress?: string(name='Progress'),
      regionId?: string(name='RegionId'),
      remark?: string(name='Remark'),
      snapshotId?: string(name='SnapshotId'),
      snapshotName?: string(name='SnapshotName'),
      sourceDiskId?: string(name='SourceDiskId'),
      sourceDiskType?: string(name='SourceDiskType'),
      status?: string(name='Status'),
    }
  ](name='Snapshots'),
  totalCount?: int32(name='TotalCount'),
}

model ListSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSnapshotsResponseBody(name='body'),
}

async function listSnapshots(request: ListSnapshotsRequest): ListSnapshotsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSnapshots', 'POST', '/', 'json', false, 'json', request);
}

model ModifyImageShareStatusRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  imageId: string(name='ImageId', position='Query'),
  operation: string(name='Operation', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ModifyImageShareStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyImageShareStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyImageShareStatusResponseBody(name='body'),
}

async function modifyImageShareStatus(request: ModifyImageShareStatusRequest): ModifyImageShareStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyImageShareStatus', 'POST', '/', 'json', false, 'json', request);
}

model RebootInstanceRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model RebootInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RebootInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RebootInstanceResponseBody(name='body'),
}

async function rebootInstance(request: RebootInstanceRequest): RebootInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebootInstance', 'POST', '/', 'json', false, 'json', request);
}

model RenewInstanceRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  period: int32(name='Period', minimum=1, maximum=36, position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model RenewInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewInstance', 'POST', '/', 'json', false, 'json', request);
}

model ResetDiskRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  diskId: string(name='DiskId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  snapshotId: string(name='SnapshotId', position='Query'),
}

model ResetDiskResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetDiskResponse = {
  headers: map[string]string(name='headers'),
  body: ResetDiskResponseBody(name='body'),
}

async function resetDisk(request: ResetDiskRequest): ResetDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetDisk', 'POST', '/', 'json', false, 'json', request);
}

model ResetSystemRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ResetSystemResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetSystemResponse = {
  headers: map[string]string(name='headers'),
  body: ResetSystemResponseBody(name='body'),
}

async function resetSystem(request: ResetSystemRequest): ResetSystemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetSystem', 'POST', '/', 'json', false, 'json', request);
}

model StartInstanceRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model StartInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartInstanceResponseBody(name='body'),
}

async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartInstance', 'POST', '/', 'json', false, 'json', request);
}

model StopInstanceRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model StopInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StopInstanceResponseBody(name='body'),
}

async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopInstance', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceAttributeRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  password?: string(name='Password', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model UpdateInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceAttributeResponseBody(name='body'),
}

async function updateInstanceAttribute(request: UpdateInstanceAttributeRequest): UpdateInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeInstanceRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  planId: string(name='PlanId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model UpgradeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeInstanceResponseBody(name='body'),
}

async function upgradeInstance(request: UpgradeInstanceRequest): UpgradeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeInstance', 'POST', '/', 'json', false, 'json', request);
}

