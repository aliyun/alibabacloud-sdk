/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'SWAS-OPEN';
  @version = '2020-06-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AllocatePublicConnectionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  databaseInstanceId: string(name='DatabaseInstanceId', description='The ID of the Simple Database Service instance.', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Simple Database Service instance. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model AllocatePublicConnectionResponseBody = {
  publicConnection?: string(name='PublicConnection', description='The public endpoint that is assigned to the Simple Database Service instance.', example='db-38263fa955774501a2ae1bdaed6f****.mysql.rds.aliyuncs.com'),
  requestId?: string(name='RequestId', description='The request ID.', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model AllocatePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocatePublicConnectionResponseBody(name='body'),
}

/**
  * By default, no public endpoints are assigned to Simple Database Service instances. If you want to access the databases of a Simple Database Service instance over the Internet by using Simple Container Service or Data Management (DMS), you must apply for a public endpoint for the Simple Database Service instance.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function allocatePublicConnection(request: AllocatePublicConnectionRequest): AllocatePublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocatePublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model CreateCommandRequest {
  commandContent: string(name='CommandContent', example='ifconfig -s', position='Query'),
  description?: string(name='Description', example='test', position='Query'),
  enableParameter?: boolean(name='EnableParameter', example='false', position='Query'),
  name: string(name='Name', example='testName', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  timeout?: long(name='Timeout', example='60', position='Query'),
  type: string(name='Type', example='RunShellScript', position='Query'),
  workingDir?: string(name='WorkingDir', example='/root/', position='Query'),
}

model CreateCommandResponseBody = {
  commandId?: string(name='CommandId', example='c-sh02yh0932w****'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4****'),
}

model CreateCommandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCommandResponseBody(name='body'),
}

async function createCommand(request: CreateCommandRequest): CreateCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCommand', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomImageRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dataSnapshotId?: string(name='DataSnapshotId', description='The ID of the data disk snapshot.', example='s-acscasca****', position='Query'),
  description?: string(name='Description', description='The description of the custom image.', example='test', position='Query'),
  imageName: string(name='ImageName', description='The name of the custom image. The name must be 2 to 128 characters in length, and can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). The name must start with a letter or a digit. This parameter is empty by default.', example='customImage-test', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the database. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  systemSnapshotId: string(name='SystemSnapshotId', description='The ID of the system disk snapshot.', example='s-acscasca****', position='Query'),
}

model CreateCustomImageResponseBody = {
  imageId?: string(name='ImageId', description='The custom image ID.', example='m-csaascsaccscs****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model CreateCustomImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCustomImageResponseBody(name='body'),
}

/**
  * A custom image is created based on a snapshot of a simple application server. You can use a custom image to create multiple simple application servers that have the same configurations. You can also share custom images to ECS and use the shared images to create ECS instances or replace the OSs of existing ECS instances. For more information about custom images, see [Overview of custom images](~~199375~~).
  * You must create a system disk snapshot of a simple application server before you create a custom image based on the snapshot. For more information, see [CreateSnapshot](~~190452~~).
  * > If you need the data on the data disk of a simple application server when you create a custom image, create a snapshot for the data disk first.
  * Before you create a custom image, take note of the following items:
  * *   The custom image and the corresponding simple application server must reside in the same region.
  * *   The maximum number of custom images that can be maintained in an Alibaba Cloud account is triple the number of simple application servers in the account. The value cannot be greater than 15.
  * *   You can directly create a custom image only based on the system disk snapshot of a simple application server. If you want a custom image to contain the data on the data disk of the simple application server, you must select a data disk snapshot when you create the custom image.
  * *   If a simple application server is released due to expiration or refunds, the custom images that are created based on a snapshot of the server are also released.
  * *   If you reset a simple application server by changing the application system or OS of the server or replacing the image of the server, the disk data on the server is cleared. Back up the disk data as needed.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function createCustomImage(request: CreateCustomImageRequest): CreateCustomImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomImage', 'POST', '/', 'json', false, 'json', request);
}

model CreateFirewallRuleRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  port: string(name='Port', description='The port range. Valid values: 165535. Specify a port range in the format of \\<start port number>/\\<end port number>. Example: 1024/1055, which indicates the port range of 10241055.', example='3306', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server.', example='cn-hangzhou', position='Query'),
  remark?: string(name='Remark', description='The remarks of the firewall rule.', example='TEST', position='Query'),
  ruleProtocol: string(name='RuleProtocol', description='The transport layer protocol. Valid values:

*   TCP: the TCP protocol
*   UDP: the UDP protocol
*   TCP+UDP: the TCP and UDP protocols', example='TCP', position='Query'),
}

model CreateFirewallRuleResponseBody = {
  firewallId?: string(name='FirewallId', description='The ID of the firewall rule.', example='8007e18c61024aafbd776d52d0****'),
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model CreateFirewallRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFirewallRuleResponseBody(name='body'),
}

/**
  * Firewalls serve to control network access to simple application servers and isolate security domains in the cloud. By default, SSH port 22, HTTP port 80, and HTTPS port 443 are enabled for simple application servers. Other ports are disabled. You can add firewall rules to enable more ports.
  * ### QPS limits
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function createFirewallRule(request: CreateFirewallRuleRequest): CreateFirewallRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFirewallRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateFirewallRulesRequest {
  clientToken?: string(name='ClientToken', description='The client token.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  firewallRules?: [ 
    {
      port?: string(name='Port', example='3306'),
      remark?: string(name='Remark'),
      ruleProtocol?: string(name='RuleProtocol', example='TCP'),
      sourceCidrIp?: string(name='SourceCidrIp', example='47.101.XX.XX'),
    }
  ](name='FirewallRules', description='The remarks of the firewall rule.', shrink='json', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model CreateFirewallRulesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model CreateFirewallRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFirewallRulesResponseBody(name='body'),
}

/**
  * Firewalls serve to control network access to simple application servers and isolate security domains in the cloud. By default, SSH port 22, HTTP port 80, and HTTPS port 443 are enabled for simple application servers. Other ports are disabled. You can add firewall rules to enable more ports.
  *
 */
async function createFirewallRules(request: CreateFirewallRulesRequest): CreateFirewallRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFirewallRules', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceKeyPairRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='2ad1ae67295445f598017499dc****', position='Query'),
  keyPairName: string(name='KeyPairName', description='The name of the key pair.', example='ceshi', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model CreateInstanceKeyPairResponseBody = {
  fingerprint?: string(name='Fingerprint', description='The fingerprint of the key pair.', example='If2K1ItazA4GlKkWCEhdRj8Wd6czAvK9*****'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair.', example='ceshi'),
  privateKey?: string(name='PrivateKey', description='The private key.', example='***'),
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model CreateInstanceKeyPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceKeyPairResponseBody(name='body'),
}

async function createInstanceKeyPair(request: CreateInstanceKeyPairRequest): CreateInstanceKeyPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstanceKeyPair', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstancesRequest {
  amount?: int32(name='Amount', description='The number of simple application servers that you want to create. Valid values: 1 to 20.

Default value: 1.', example='1', minimum=1, maximum=200, position='Query'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal. Valid values:

*   true
*   false

Default value: false.', example='false', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', description='The auto-renewal period. This parameter is required only when you set `AutoRenew` to true. Unit: months. Valid values: 1, 3, 6, 12, 24, and 36.', example='1', minimum=1, maximum=36, position='Query'),
  chargeType?: string(name='ChargeType', description='The billing method of the simple application servers. Set the value to PrePaid, which indicates the subscription billing method.

Default value: PrePaid.', example='PrePaid', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dataDiskSize?: long(name='DataDiskSize', description='The size of the data disk that is attached to the server. Unit: GB. Valid values: 0 to 16380. The value must be an integral multiple of 20.

*   A value of 0 indicates that no data disk is attached.
*   If the disk included in the specified plan is a standard SSD, the data disk must be 20 GB or larger in size.

Default value: 0.', example='20', minimum=0, maximum=16380, position='Query'),
  imageId: string(name='ImageId', description='The image ID. You can call the [ListImages](~~189313~~) operation to query the available images in the specified region.', example='e2c9c365024a44369c9b955a998a****', position='Query'),
  period: int32(name='Period', description='The subscription period of the servers. Unit: months. Valid values: 1, 3, 6, 12, 24, and 36.', example='1', minimum=1, maximum=36, position='Query'),
  planId: string(name='PlanId', description='The plan ID. You can call the [ListPlans](~~189314~~) operation to query all plans provided by Simple Application Server in the specified region.', example='swas.s1.c1m1s40b3t05', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application servers. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model CreateInstancesResponseBody = {
  instanceIds?: [ string ](name='InstanceIds', description='The IDs of the simple application servers.'),
  requestId?: string(name='RequestId', description='The request ID.', example='30637AD6-D977-4833-A54C-CC89483E1FEE'),
}

model CreateInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstancesResponseBody(name='body'),
}

/**
  * *   Before you call this operation, we recommend that you understand the billing of Simple Application Server. For more information, see [Billable items](~~58623~~).
  * *   A maximum of 20 simple application servers can be maintained in an Alibaba Cloud account.
  * *   When you call this operation to create simple application servers, make sure that the balance in your account is sufficient to pay for the servers. If the balance in your account is insufficient, the servers cannot be created.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function createInstances(request: CreateInstancesRequest): CreateInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstances', 'POST', '/', 'json', false, 'json', request);
}

model CreateSnapshotRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  diskId: string(name='DiskId', description='The disk ID.', example='d-bp18kjxg9ebrhsgi****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server to which the disk is attached.', example='cn-hangzhou', position='Query'),
  snapshotName: string(name='SnapshotName', description='The snapshot name. The name must be 2 to 50 characters in length. It must start with a letter but cannot start with `http://` or `https://`. The name can only contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).', example='test-SnapshotName', position='Query'),
}

model CreateSnapshotResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  snapshotId?: string(name='SnapshotId', description='The snapshot ID.', example='s-bp16oazlsold4dks****'),
}

model CreateSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSnapshotResponseBody(name='body'),
}

/**
  * A snapshot is a point-in-time backup of a disk. Snapshots can be used to back up data, recover data after accidental operations on instances, recover data after network attacks, and create custom images.
  * > You are not charged for creating snapshots for disks of simple application servers.
  * ### Precautions
  * *   You can create up to three snapshots for disks of each simple application server.
  * *   The maximum number of snapshots that can be retained in an Alibaba Cloud account is triple the number of simple application servers that you maintain. The value cannot be greater than 15.
  * *   If a simple application server is automatically released due to expiration, the snapshots created for the server are deleted.
  * *   If you reset the simple application server after you create a snapshot for a server, the snapshot is retained but cannot be used to roll back the disks of the server.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCommandRequest {
  commandId: string(name='CommandId', example='c-sh02yh0932w****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteCommandResponseBody = {
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model DeleteCommandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCommandResponseBody(name='body'),
}

async function deleteCommand(request: DeleteCommandRequest): DeleteCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCommand', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomImageRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  imageId: string(name='ImageId', description='The custom image ID.', example='m-2zehv38jjmwva1ee****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the custom image. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DeleteCustomImageResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model DeleteCustomImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCustomImageResponseBody(name='body'),
}

/**
  * You can delete a custom image that you no longer need. After the custom image is deleted, you cannot use the custom image to reset the simple application servers that were created based on the custom image.
  * > If a custom image is shared to Elastic Compute Service (ECS), you must unshare the image before you can delete it. After you unshare the custom image, you cannot query the custom image by using the ECS console or by calling ECS API operations. If you need to use the custom image in ECS, we recommend that you copy the image before you delete it. For more information, see [Copy a shared image of a simple application server in the ECS console](~~199378~~).
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function deleteCustomImage(request: DeleteCustomImageRequest): DeleteCustomImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomImage', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFirewallRuleRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server.', example='cn-hangzhou', position='Query'),
  ruleId: string(name='RuleId', description='The ID of the firewall rule.', example='eeea34d9867b4d55a4ff8d5fcfbd****', position='Query'),
}

model DeleteFirewallRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model DeleteFirewallRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFirewallRuleResponseBody(name='body'),
}

/**
  * After a firewall rule is deleted, your business deployed on the simple application server may become inaccessible. Before you delete a firewall rule, make sure that the firewall rule is no longer needed by the simple application server.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function deleteFirewallRule(request: DeleteFirewallRuleRequest): DeleteFirewallRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFirewallRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceKeyPairRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DeleteInstanceKeyPairResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model DeleteInstanceKeyPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstanceKeyPairResponseBody(name='body'),
}

async function deleteInstanceKeyPair(request: DeleteInstanceKeyPairRequest): DeleteInstanceKeyPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstanceKeyPair', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSnapshotRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the snapshot.', example='cn-hangzhou', position='Query'),
  snapshotId: string(name='SnapshotId', description='The snapshot ID.', example='s-bp16oazlsold4dks****', position='Query'),
}

model DeleteSnapshotResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model DeleteSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSnapshotResponseBody(name='body'),
}

/**
  * You can delete a snapshot if you no longer need it.
  * > If a custom image was created based on the snapshot, delete the custom image before you delete the snapshot.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSnapshotsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  snapshotIds: string(name='SnapshotIds', description='The snapshot IDs. The value can be a JSON array that consists of up to 100 snapshot IDs. Separate multiple snapshot IDs with commas (,).', example='["s-bp16oazlsold4dks****", "s-bp16oazlsold4abc****"]', position='Query'),
}

model DeleteSnapshotsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C2DE174B-7196-5778-A00D-6EA2601B****'),
}

model DeleteSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSnapshotsResponseBody(name='body'),
}

async function deleteSnapshots(request: DeleteSnapshotsRequest): DeleteSnapshotsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSnapshots', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCloudAssistantStatusRequest {
  instanceIds?: [ string ](name='InstanceIds', description='The IDs of the simple application servers.', shrink='json', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.

Pages start from page 1.

Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

Maximum value: 50.

Default value: 10.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application servers.', example='cn-hangzhou', position='Query'),
}

model DescribeCloudAssistantStatusResponseBody = {
  cloudAssistantStatus?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****'),
      status?: boolean(name='Status', description='Indicates whether the Cloud Assistant client is installed on the server.', example='true'),
    }
  ](name='CloudAssistantStatus', description='Indicates whether the Cloud Assistant client is installed on the server.'),
  pageNumber?: int32(name='PageNumber', description='The page number.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

Maximum value: 50.

Default value: 10.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeCloudAssistantStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudAssistantStatusResponseBody(name='body'),
}

/**
  * By default, the Cloud Assistant client is installed on simple application servers. If you have manually uninstalled the client, you must reinstall the client. Otherwise, you cannot run commands on the servers.
  *
 */
async function describeCloudAssistantStatus(request: DescribeCloudAssistantStatusRequest): DescribeCloudAssistantStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudAssistantStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCloudMonitorAgentStatusesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceIds: string(name='InstanceIds', description='The IDs of the simple application servers. The value can be a JSON array that consists of up to 100 simple application server IDs. Separate multiple server IDs with commas (,).', example='["2ad1ae67295445f598017499dc******","2ad1ae67295445f598017499dc******"]', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application servers. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DescribeCloudMonitorAgentStatusesResponseBody = {
  instanceStatusList?: [ 
    {
      autoInstall?: boolean(name='AutoInstall', example='true'),
      instanceId?: string(name='InstanceId', example='c854dc6f07e74953830bb5808d0****'),
      status?: string(name='Status', example='running'),
    }
  ](name='InstanceStatusList', description='Indicates whether the Cloud Monitor agent was automatically installed on the simple application server. Valid values:

*   true
*   false'),
  requestId?: string(name='RequestId', description='The request ID.', example='30637AD6-D977-4833-A54C-CC89483E1FEE'),
}

model DescribeCloudMonitorAgentStatusesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudMonitorAgentStatusesResponseBody(name='body'),
}

async function describeCloudMonitorAgentStatuses(request: DescribeCloudMonitorAgentStatusesRequest): DescribeCloudMonitorAgentStatusesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudMonitorAgentStatuses', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCommandInvocationsRequest {
  commandId?: string(name='CommandId', example='c-sh02yh0932w****', position='Query'),
  commandName?: string(name='CommandName', example='testName', position='Query'),
  commandType?: string(name='CommandType', example='RunPowerShellScript', position='Query'),
  instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****', position='Query'),
  invocationStatus?: string(name='InvocationStatus', example='Success', position='Query'),
  invokeId?: string(name='InvokeId', example='t-hz02p9545t6****', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeCommandInvocationsResponseBody = {
  commandInvocations?: [ 
    {
      commandContent?: string(name='CommandContent', example='echo 123'),
      commandDescription?: string(name='CommandDescription', example='testDescription'),
      commandId?: string(name='CommandId', example='c-hy0338xh28r****'),
      commandName?: string(name='CommandName', example='testCommandName'),
      commandType?: string(name='CommandType', example='RunShellScript'),
      creationTime?: string(name='CreationTime', example='2023-04-27T10:11:58'),
      invocationStatus?: string(name='InvocationStatus', example='Success'),
      invokeId?: string(name='InvokeId', example='t-hz0373jyzxt****'),
      invokeInstances?: [ 
        {
          errorCode?: string(name='ErrorCode', example='InstanceNotExists'),
          errorInfo?: string(name='ErrorInfo', example='the specified instance does not exists'),
          exitCode?: long(name='ExitCode', example='0'),
          finishTime?: string(name='FinishTime', example='2023-04-03T02:42:29Z'),
          instanceId?: string(name='InstanceId', example='2445f4aecdac4b71ba2c7e3a7ccf****'),
          invocationStatus?: string(name='InvocationStatus', example='Running'),
          output?: string(name='Output', example='OutputMsg'),
          startTime?: string(name='StartTime', example='2023-05-09T03:32:24Z'),
        }
      ](name='InvokeInstances'),
      parameters?: string(name='Parameters', example='{}'),
      timeout?: long(name='Timeout', example='60'),
      username?: string(name='Username', example='root'),
      workingDir?: string(name='WorkingDir', example='c:\\wwwroot'),
    }
  ](name='CommandInvocations'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeCommandInvocationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCommandInvocationsResponseBody(name='body'),
}

async function describeCommandInvocations(request: DescribeCommandInvocationsRequest): DescribeCommandInvocationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCommandInvocations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCommandsRequest {
  commandId?: string(name='CommandId', example='c-sh02yh0932w****', position='Query'),
  name?: string(name='Name', example='testName', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  provider: string(name='Provider', example='AlibabaCloud', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  type?: string(name='Type', example='RunShellScript', position='Query'),
}

model DescribeCommandsResponseBody = {
  commands?: [ 
    {
      commandContent?: string(name='CommandContent', example='cat /etc/ssh/sshd_config'),
      commandId?: string(name='CommandId', example='c-gov1k1tqwi9****'),
      creationTime?: string(name='CreationTime', example='2023-01-05T06:38:53Z'),
      description?: string(name='Description', example='testDescription'),
      enableParameter?: boolean(name='EnableParameter', example='false'),
      name?: string(name='Name', example='testName'),
      parameterDefinitions?: [ 
        {
          defaultValue?: string(name='DefaultValue', example='https://aliyun-client-assist.oss-accelerate.aliyuncs.com/linux/aliyun_assist_latest.rpm'),
          description?: string(name='Description'),
          parameterName?: string(name='ParameterName', example='DownloadUrl'),
          possibleValues?: [ string ](name='PossibleValues'),
          required?: boolean(name='Required', example='false'),
        }
      ](name='ParameterDefinitions'),
      parameterNames?: [ string ](name='ParameterNames'),
      provider?: string(name='Provider', example='User'),
      timeout?: long(name='Timeout', example='60'),
      type?: string(name='Type', example='RunShellScript'),
      workingDir?: string(name='WorkingDir', example='/home'),
    }
  ](name='Commands'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeCommandsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCommandsResponseBody(name='body'),
}

async function describeCommands(request: DescribeCommandsRequest): DescribeCommandsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCommands', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatabaseErrorLogsRequest {
  databaseInstanceId: string(name='DatabaseInstanceId', description='The ID of the Simple Database Service instance.', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC. The end time must be later than the start time.

> The time displayed in the Simple Application Server console is in the format of UTC+8.', example='2022-09-08T04:04Z', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='30', minimum=30, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Simple Database Service instance.

You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.

> The time displayed in the Simple Application Server console is in the format of UTC+8.', example='2022-09-07T04:04Z', position='Query'),
}

model DescribeDatabaseErrorLogsResponseBody = {
  errorLogs?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-09-08T12:11:04Z'),
      errorInfo?: string(name='ErrorInfo', example='spid52 DBCC TRACEON 3499, server process ID (SPID) 52. This is an informational message only; no user action is required'),
    }
  ](name='ErrorLogs', description='The time when the error log entry was generated. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.

> The time displayed in the Simple Application Server console is in the format of UTC+8.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='30'),
  requestId?: string(name='RequestId', description='The request ID.', example='30637AD6-D977-4833-A54C-CC89483E****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='20'),
}

model DescribeDatabaseErrorLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatabaseErrorLogsResponseBody(name='body'),
}

/**
  * You can call this operation to query the error logs of databases in a Simple Database Service instance and locate faults based on the error logs.
  * \\### QPS limit You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function describeDatabaseErrorLogs(request: DescribeDatabaseErrorLogsRequest): DescribeDatabaseErrorLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatabaseErrorLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatabaseInstanceMetricDataRequest {
  databaseInstanceId: string(name='DatabaseInstanceId', description='The ID of the Simple Database Service instance.', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.

> The time displayed in the Simple Application Server console is in the format of UTC+8.', example='2022-09-07T04:04Z', position='Query'),
  metricName: string(name='MetricName', description='The name of the metric. Valid values:

*   MySQL_MemCpuUsage: The CPU utilization and memory usage of the instance within the entire operating system.
*   MySQL_DetailedSpaceUsage: The total space usage, data space, log space, temporary space, and system space of the instance.
*   MySQL_Sessions : The total number of active connections.
*   MySQL_IOPS: The IOPS of the instance.', example='MySQL_MemCpuUsage', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Simple Database Service instance. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.

> The time displayed in the Simple Application Server console is in the format of UTC+8.', example='2022-09-06T04:04Z', position='Query'),
}

model DescribeDatabaseInstanceMetricDataResponseBody = {
  dataFormat?: string(name='DataFormat', description='The data format. Valid values:

*   cpuusage\\&memusage
*   active_session\\&total_session
*   ins_size\\&data_size\\&log_size\\&tmp_size\\&other_size
*   io', example='cpuusage&memusage'),
  metricData?: string(name='MetricData', description='The monitoring data.', example='[  {     \\"date"\\: " 2022-09-06T04:04:00Z",\\"value\\":\\"0.77&3.69\\"  } ]'),
  metricName?: string(name='MetricName', description='The name of the metric. Valid values:

*   MySQL_MemCpuUsage: The CPU utilization and memory usage of the instance within the entire operating system.
*   MySQL_DetailedSpaceUsage: The total space usage, data space, log space, temporary space, and system space of the instance.
*   MySQL_Sessions : The total number of active connections.
*   MySQL_IOPS: The IOPS of the instance.', example='MySQL_MemCpuUsage'),
  requestId?: string(name='RequestId', description='The request ID.', example='30637AD6-D977-4833-A54C-CC89483E****'),
  unit?: string(name='Unit', description='The unit of the monitoring metric.

*   %
*   int
*   MB', example='%'),
}

model DescribeDatabaseInstanceMetricDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatabaseInstanceMetricDataResponseBody(name='body'),
}

/**
  * After you create a Simple Database Service instance, you can query the details about the vCPU, memory, disk size, storage IOPS (input/output operations per second), and total current connection number of the instance.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function describeDatabaseInstanceMetricData(request: DescribeDatabaseInstanceMetricDataRequest): DescribeDatabaseInstanceMetricDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatabaseInstanceMetricData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatabaseInstanceParametersRequest {
  databaseInstanceId: string(name='DatabaseInstanceId', description='The ID of the Simple Database Service instance.', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Simple Database Service instance. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DescribeDatabaseInstanceParametersResponseBody = {
  configParameters?: [ 
    {
      checkingCode?: string(name='CheckingCode', example='[1-65535]'),
      forceModify?: string(name='ForceModify', example='true'),
      forceRestart?: string(name='ForceRestart', example='false'),
      parameterDescription?: string(name='ParameterDescription', example='Auto-increment columns are incremented by this'),
      parameterName?: string(name='ParameterName', example='auto_increment_increment'),
      parameterValue?: string(name='ParameterValue', example='1'),
    }
  ](name='ConfigParameters', description='The range of ParameterValue.

> The value of CheckingCode varies based on the value of ParameterName.'),
  engine?: string(name='Engine', description='The database engine that the instance runs. The value must be MySQL.', example='MySQL'),
  engineVersion?: string(name='EngineVersion', description='The version of the database engine. Valid values:

*   5.7: MySQL 5.7.
*   8.0: MySQL 8.0.', example='5.5'),
  requestId?: string(name='RequestId', description='The request ID.', example='30637AD6-D977-4833-A54C-CC89483E****'),
  runningParameters?: [ 
    {
      checkingCode?: string(name='CheckingCode', example='[ON|OFF]'),
      forceModify?: string(name='ForceModify', example='true'),
      forceRestart?: string(name='ForceRestart', example='false'),
      parameterDescription?: string(name='ParameterDescription', example='When this variable has a value of 1 (the default), the server automatically grants the EXECUTE and ALTER ROUTINE privileges to the creator of a stored routine, if the user cannot already execute and alter or drop the routine. (The ALTER ROUTINE privilege is required to drop the routine.) The server also automatically drops those privileges from the creator when the routine is dropped. If automatic_sp_privileges is 0, the server does not automatically add or drop these privileges.'),
      parameterName?: string(name='ParameterName', example='autocommit'),
      parameterValue?: string(name='ParameterValue', example='ON'),
    }
  ](name='RunningParameters', description='The range of ParameterValue.

> The value of CheckingCode varies based on the value of ParameterName.'),
}

model DescribeDatabaseInstanceParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatabaseInstanceParametersResponseBody(name='body'),
}

/**
  * You can call this operation to query the information about parameters of a Simple Database Service instance.
  *
 */
async function describeDatabaseInstanceParameters(request: DescribeDatabaseInstanceParametersRequest): DescribeDatabaseInstanceParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatabaseInstanceParameters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatabaseInstancesRequest {
  databaseInstanceIds?: string(name='DatabaseInstanceIds', description='The IDs of the Simple Database Service instances. The value can be a JSON array that consists of up to 100 Simple Database Service instance IDs. Separate multiple instance IDs with commas (,).', example='["swasdb-xxx******","swasdb-yyy******"]', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.

Pages start from page 1.

Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

Maximum value: 100.

Default value: 10.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Simple Database Service instances.', example='cn-hangzhou', position='Query'),
}

model DescribeDatabaseInstancesResponseBody = {
  databaseInstances?: [ 
    {
      businessStatus?: string(name='BusinessStatus', example='normal'),
      chargeType?: string(name='ChargeType', example='PrePaid'),
      cpu?: string(name='Cpu', example='1'),
      creationTime?: string(name='CreationTime', example='2022-09-01T02:39:46Z'),
      databaseInstanceEdition?: string(name='DatabaseInstanceEdition', example='swas.db.c1m1s25'),
      databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
      databaseInstanceName?: string(name='DatabaseInstanceName'),
      databaseInstanceStatus?: string(name='DatabaseInstanceStatus', example='Running'),
      databaseVersion?: string(name='DatabaseVersion', example='5.7'),
      expiredTime?: string(name='ExpiredTime', example='2022-10-01T16:00:00Z'),
      memory?: string(name='Memory', example='1'),
      privateConnection?: string(name='PrivateConnection', example='rm-bp1d39opj7906****.mysql.rds.aliyuncs.com'),
      publicConnection?: string(name='PublicConnection', example='db-38263fa955774501a2ae1bdaed6f****.mysql.rds.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      storage?: int32(name='Storage', example='25'),
      superAccountName?: string(name='SuperAccountName', example='administrator'),
    }
  ](name='DatabaseInstances', description='The name of the super administrator account of the Simple Database Service instance.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='10'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='5'),
}

model DescribeDatabaseInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatabaseInstancesResponseBody(name='body'),
}

/**
  * You can call this operation to query the details of Simple Database Service instances in a region, including the IDs, names, plans, database versions, public endpoint, internal endpoint, creation time, and expiration time of the instances.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function describeDatabaseInstances(request: DescribeDatabaseInstancesRequest): DescribeDatabaseInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatabaseInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatabaseSlowLogRecordsRequest {
  acsProduct?: string(name='AcsProduct', position='Query'),
  databaseInstanceId: string(name='DatabaseInstanceId', description='The ID of the Simple Database Service instance.', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. The interval between the start time and the end time must be less than 7 days.

Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

> The time displayed in the Simple Application Server console is in the format of UTC+8.', example='2022-09-08T04:04:44Z', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.

Pages start from page 1.

Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 30 to 100.

Default value: 30.', example='30', minimum=30, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Simple Database Service instance. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query.

Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

> The time displayed in the Simple Application Server console is in the format of UTC+8.', example='2022-09-07T04:04:44Z', position='Query'),
}

model DescribeDatabaseSlowLogRecordsResponseBody = {
  engine?: string(name='Engine', description='The database engine that the instance runs.', example='MySQL'),
  pageNumber?: int32(name='PageNumber', description='The page number.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 30 to 100.

Default value: 30.', example='30'),
  physicalIORead?: long(name='PhysicalIORead', description='The number of logical reads.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='30637AD6-D977-4833-A54C-CC89483E****'),
  slowLogs?: [ 
    {
      DBName?: string(name='DBName', example='testDB'),
      executionStartTime?: string(name='ExecutionStartTime', example='2022-09-08T01:40:44Z'),
      hostAddress?: string(name='HostAddress', example='xxx[xxx] @ [1xx.xxx.xxx.xx]'),
      lockTimes?: long(name='LockTimes', example='0'),
      parseRowCounts?: long(name='ParseRowCounts', example='1'),
      queryTimeMS?: long(name='QueryTimeMS', example='2001'),
      queryTimes?: long(name='QueryTimes', example='2'),
      returnRowCounts?: long(name='ReturnRowCounts', example='1'),
      SQLText?: string(name='SQLText', example='select sleep(2)'),
    }
  ](name='SlowLogs', description='The database name.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='20'),
}

model DescribeDatabaseSlowLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDatabaseSlowLogRecordsResponseBody(name='body'),
}

/**
  * You can query the slow query log details of a Simple Database Service instance and locate faults based on the log details.
  * > Slow query log details are retained for 7 days.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function describeDatabaseSlowLogRecords(request: DescribeDatabaseSlowLogRecordsRequest): DescribeDatabaseSlowLogRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatabaseSlowLogRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceKeyPairRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DescribeInstanceKeyPairResponseBody = {
  fingerprint?: string(name='Fingerprint', description='The fingerprint of the key pair.', example='4f:70:62:e9:0c:72:f7:ee:74:ce:e3:bf:e0:82:**:**'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair.', example='KeyPairName'),
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model DescribeInstanceKeyPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceKeyPairResponseBody(name='body'),
}

async function describeInstanceKeyPair(request: DescribeInstanceKeyPairRequest): DescribeInstanceKeyPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceKeyPair', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstancePasswordsSettingRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DescribeInstancePasswordsSettingResponseBody = {
  instancePasswordSetting?: boolean(name='InstancePasswordSetting', description='Indicates whether a logon password is set for the simple application server.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4****'),
  vncPasswordSetting?: boolean(name='VncPasswordSetting', description='Indicates whether a VNC connection password is set.', example='true'),
}

model DescribeInstancePasswordsSettingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstancePasswordsSettingResponseBody(name='body'),
}

async function describeInstancePasswordsSetting(request: DescribeInstancePasswordsSettingRequest): DescribeInstancePasswordsSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstancePasswordsSetting', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceVncUrlRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='2ad1ae67295445f598017499dc****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server.', example='cn-hangzhou', position='Query'),
}

model DescribeInstanceVncUrlResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  vncUrl?: string(name='VncUrl', description='The VNC connection address of the server.', example='wss%3A%2F%2Fhz01-vncproxy.aliyun.com%2Fwebsockify%2F%3Fs%3Dwz3L8wEMO6KMt7%252FXInEMtKVubBB%252F7rv055kOm8eUOD%252*****YlmsKjOfz6'),
}

model DescribeInstanceVncUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceVncUrlResponseBody(name='body'),
}

async function describeInstanceVncUrl(request: DescribeInstanceVncUrlRequest): DescribeInstanceVncUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceVncUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInvocationResultRequest {
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  invokeId: string(name='InvokeId', description='The execution ID. You can call the [DescribeInvocations](~~439368~~) operation to query execution IDs.', example='t-bj02prjhw1n****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DescribeInvocationResultResponseBody = {
  invocationResult?: {
    errorCode?: string(name='ErrorCode', description='The error code that is returned if the command failed to be sent or executed.

*   If this parameter is empty, the command is executed normally.
*   InstanceNotExists: The specified server does not exist or is released.
*   InstanceReleased: The server was released while the command was being executed on the server.
*   InstanceNotRunning: The server is not in the Running state while the command is being executed.
*   CommandNotApplicable: The command is not applicable to the specified server.
*   AccountNotExists: The specified account does not exist.
*   DirectoryNotExists: The specified directory does not exist.
*   BadCronExpression: The specified cron expression for the execution schedule is invalid.
*   ClientNotRunning: The Cloud Assistant client is not running.
*   ClientNotResponse: The Cloud Assistant client does not respond.
*   ClientIsUpgrading: The Cloud Assistant client is being upgraded.
*   ClientNeedUpgrade: The Cloud Assistant client needs to be upgraded.
*   DeliveryTimeout: Command sending times out.
*   ExecutionTimeout: The execution times out.
*   ExecutionException: An exception occurs while the command is being executed.
*   ExecutionInterrupted: The execution is interrupted.
*   ExitCodeNonzero: The execution is complete, but the exit code is not 0.', example='InstanceNotExists'),
    errorInfo?: string(name='ErrorInfo', description='The error message returned when the command is not successfully sent or executed. Valid values:

*   If this parameter is empty, the command is executed normally.
*   the specified instance does not exists: The specified server does not exist or is released.
*   the instance has released when create task: The server was released while the command was being executed on the server.
*   the instance is not running when create task: The server is not in the Running state while the command is being executed.
*   the command is not applicable: The command is not applicable to the specified server.
*   the specified account does not exists: The specified account does not exist.
*   the specified directory does not exists: The specified directory does not exist.
*   the cron job expression is invalid: The specified cron expression is invalid.
*   the aliyun service is not running on the instance: The Cloud Assistance client is not running.
*   the aliyun service in the instance does not response: The Cloud Assistant client does not respond to your request.
*   the aliyun service in the instance is upgrading now: The Cloud Assistant client is being upgraded.
*   the aliyun service in the instance need upgrade: The Cloud Assistant client needs to be upgraded.
*   the command delivery has been timeout: Command sending times out.
*   the command execution has been timeout: The execution times out.
*   the command execution got an exception: An exception occurs while the command is being executed.
*   the command execution has been interrupted: The execution is interrupted.
*   the command execution exit code is not zero: The execution is complete, and the exit code is not 0.', example='the specified instance does not exists'),
    exitCode?: long(name='ExitCode', description='The exit code of the command.

*   For Linux instances, the exit code is the exit code of the shell command.
*   For Windows instances, the exit code is the exit code of the batch or PowerShell command.', example='0'),
    finishedTime?: string(name='FinishedTime', description='The time when the execution ended.', example='2022-07-11T06:37:17Z'),
    instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****'),
    invocationStatus?: string(name='InvocationStatus', description='The status of the execution progress. Valid values:

*   Pending: The command is being verified or sent.
*   Invalid: The specified command type or parameter is invalid.
*   Aborted: The command fails to be sent to the server. To send a command to a server, make sure that the server is in the Running state and the command can be sent within 1 minute.
*   Running: The command is being executed on the server.
*   Success: The execution is completed, and the exit code is 0.
*   Failed: The execution is completed, and the exit code is not 0.
*   Error: The execution cannot proceed due to an exception.
*   Timeout: The execution times out.
*   Cancelled: The execution is canceled, and the command is not executed.
*   Stopping: The command in the Running state is being stopped.
*   Terminated: The command is terminated while it is being executed.', example='Success'),
    invokeId?: string(name='InvokeId', description='The execution ID.', example='t-bj02prjje65****'),
    invokeRecordStatus?: string(name='InvokeRecordStatus', description='The status of the execution. Valid values:

*   Running
*   Finished
*   Failed
*   Stopped', example='Finished'),
    invokeUser?: string(name='InvokeUser', description='The username who executes the command on the simple application server.', example='root'),
    output?: string(name='Output', description='The command output.', example='YWRtaW4K'),
    startTime?: string(name='StartTime', description='The time when the execution started.', example='2022-07-11T06:37:16Z'),
  }(name='InvocationResult', description='The execution results.'),
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model DescribeInvocationResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInvocationResultResponseBody(name='body'),
}

/**
  * *   After you execute a command, the command may not succeed or return the expected results. You can call this operation to query the execution result of a command.
  * *   You can query the execution results that were generated within the last two weeks. A maximum of 100,000 entries of execution results can be retained.
  *
 */
async function describeInvocationResult(request: DescribeInvocationResultRequest): DescribeInvocationResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInvocationResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInvocationsRequest {
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='3a658ca270df4df39f22e289b338****', position='Query'),
  invokeStatus?: string(name='InvokeStatus', description='The status of the command execution. Valid values:

*   Running: The command is being executed.
*   Finished: The execution is complete.
*   Failed: The execution fails.', example='Finished', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.

Pages start from page 1.

Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

Maximum value: 50.

Default value: 10.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DescribeInvocationsResponseBody = {
  invocations?: [ 
    {
      commandContent?: string(name='CommandContent', description='The content of the command, which is Base64-encoded.', example='bHM='),
      commandName?: string(name='CommandName', description='The name of the command.', example='testname'),
      commandType?: string(name='CommandType', description='The type of the command. Valid values:

*   RunBatScript: batch command (applicable to Windows instances).
*   RunPowerShellScript: PowerShell command (applicable to Windows instances).
*   RunShellScript: shell command (applicable to Linux instances).', example='RunShellScript'),
      creationTime?: string(name='CreationTime', description='The time when the command was created.', example='2022-07-11T06:37:16Z'),
      invocationStatus?: string(name='InvocationStatus', description='The status of the command. Valid values:

*   Pending: The command is being verified or sent.
*   Invalid: The specified command type or parameter is invalid.
*   Aborted: The command failed to be sent. To send a command to an instance, make sure that the instance is in the Running state and the command is sent to the instance within 1 minute.
*   Running: The command is being run on the instance.
*   Success: The command finishes running, and the exit code is 0.
*   Failed: The command finishes running, but the exit code is not 0.
*   Error: The running of the command cannot proceed due to an exception.
*   Timeout: The running of the command times out.
*   Cancelled: The running is canceled, and the command is not run.
*   Stopping: The command that is running is being stopped.
*   Terminated: The command is terminated while it is being run.', example='Success'),
      invokeId?: string(name='InvokeId', description='The ID of the command task.', example='t-hz02p9545t6****'),
      invokeStatus?: string(name='InvokeStatus', description='The status of the command. Valid values:

*   Running: The command is running.
*   Finished: The command finishes running.
*   Failed: The running of the command failed.
*   Stopped: The running is stopped.', example='Finished'),
      parameters?: map[string]any(name='Parameters', description='The custom parameters in the command. If no custom parameter exists in the command, the default value is {}.', example='{}'),
    }
  ](name='Invocations', description='The command name.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='30637AD6-D977-4833-A54C-CC89483E****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10'),
}

model DescribeInvocationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInvocationsResponseBody(name='body'),
}

/**
  * *   After you execute a command, the command may not succeed or return the expected results. You can call this operation to query the actual execution results.
  * *   You can query the execution results that were generated within the last two weeks. Up to 100,000 entries of execution results can be retained.
  *
 */
async function describeInvocations(request: DescribeInvocationsRequest): DescribeInvocationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInvocations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMonitorDataRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. The following formats are supported:

*   UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 January 1, 1970.
*   Time format: YYYY-MM-DDThh:mm:ssZ.

> The interval between the start time and the end time is less than or equal to 31 days.', example='2022-09-08T08:04:44Z', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='2ad1ae67295445f598017499dc****', position='Query'),
  length?: string(name='Length', description='The number of entries per page. Valid values: 1 to 1440.', example='100', position='Query'),
  metricName: string(name='MetricName', description='The metric name. Valid values:

*   MEMORY_ACTUALUSEDSPACE: the memory usage. Unit: bytes.
*   DISKUSAGE_USED: the disk usage. Unit: bytes.
*   CPU_UTILIZATION: the CPU utilization in percentage.
*   VPC_PUBLICIP_INTERNETOUT_RATE: the outbound bandwidth rate of the network. Unit: bits/s.
*   VPC_PUBLICIP_INTERNETIN_RATE: the inbound bandwidth rate of the network. Unit: bits/s.
*   DISK_READ_IOPS: the read IOPS of the disk. Unit: count/s.
*   DISK_WRITE_IOPS: the write IOPS of the disk. Unit: count/s.
*   FLOW_USED: the traffic usage. Unit: bytes.', example='DISKUSAGE_USED', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nOc1nj4M9UaAZ/I8db***', position='Query'),
  period: string(name='Period', description='The interval at which the monitoring data is queried. Valid values: 60, 300, and 900. Unit: seconds.

> 

If MetricName is set to FLOW_USED, Period is set to 3600 (one hour). In other cases, set Period based on your business requirements.

**

****', example='60', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. The following formats are supported:

*   UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 January 1, 1970.
*   Time format: YYYY-MM-DDThh:mm:ssZ.

> The specified time range includes the end time and excludes the start time. The start time must be earlier than the end time.

The interval between the start time and the end time is less than or equal to 31 days.

**

****', example='2022-09-07T04:04:44Z', position='Query'),
}

model DescribeMonitorDataResponseBody = {
  datapoints?: string(name='Datapoints', description='The monitoring data.', example='[]'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nOc1nj4M9UaAZ/I8db***'),
  period?: string(name='Period', description='The interval at which the monitoring data is queried. Valid values: 60, 300, and 900. Unit: seconds.

> 

If MetricName is set to FLOW_USED, the value of Period is 3600 (one hour).

**

****', example='60'),
  requestId?: string(name='RequestId', description='The request ID.', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model DescribeMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMonitorDataResponseBody(name='body'),
}

async function describeMonitorData(request: DescribeMonitorDataRequest): DescribeMonitorDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMonitorData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityAgentStatusRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DescribeSecurityAgentStatusResponseBody = {
  clientStatus?: string(name='ClientStatus', description='The status of the Security Center agent. Valid values:

*   pause: The Security Center agent suspends protection for your server.
*   online: The Security Center agent is protecting your server.
*   offline: The Security Center agent does not protect your server.', example='online'),
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model DescribeSecurityAgentStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityAgentStatusResponseBody(name='body'),
}

async function describeSecurityAgentStatus(request: DescribeSecurityAgentStatusRequest): DescribeSecurityAgentStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityAgentStatus', 'POST', '/', 'json', false, 'json', request);
}

model DisableFirewallRuleRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  remark?: string(name='Remark', description='The remarks of the firewall rule.', position='Query'),
  ruleId: string(name='RuleId', description='The ID of the firewall rule. You can call the ListFirewallRules operation to query the ID of the firewall rule.', example='eeea34d9867b4d55a4ff8d5fcfbd****', position='Query'),
}

model DisableFirewallRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model DisableFirewallRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableFirewallRuleResponseBody(name='body'),
}

async function disableFirewallRule(request: DisableFirewallRuleRequest): DisableFirewallRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableFirewallRule', 'POST', '/', 'json', false, 'json', request);
}

model EnableFirewallRuleRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='2ad1ae67295445f598017499dc****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  remark?: string(name='Remark', description='The remarks of the firewall rule.', position='Query'),
  ruleId: string(name='RuleId', description='The ID of the firewall rule.', example='eeea34d9867b4d55a4ff8d5fcfbd****', position='Query'),
  sourceCidrIp?: string(name='SourceCidrIp', description='The IP address or CIDR block that is allowed in the firewall policy.', example='10.147.33.**', position='Query'),
}

model EnableFirewallRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model EnableFirewallRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableFirewallRuleResponseBody(name='body'),
}

async function enableFirewallRule(request: EnableFirewallRuleRequest): EnableFirewallRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableFirewallRule', 'POST', '/', 'json', false, 'json', request);
}

model InstallCloudAssistantRequest {
  instanceIds: [ string ](name='InstanceIds', description='The IDs of the simple application servers.', shrink='json', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application servers. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model InstallCloudAssistantResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model InstallCloudAssistantResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InstallCloudAssistantResponseBody(name='body'),
}

/**
  * To run commands on your simple application servers, you must install the Cloud Assistant client on your servers. You can call the [DescribeCloudAssistantStatus](~~439512~~) operation to check whether the Cloud Assistant client is installed on your simple application servers. If you have not installed the Cloud Assistant client, you can call the InstallCloudAssistant operation to install the client. Then, you can call the [RebootInstance](~~190443~~) operation to restart the servers to allow the client to take effect.
  *
 */
async function installCloudAssistant(request: InstallCloudAssistantRequest): InstallCloudAssistantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallCloudAssistant', 'POST', '/', 'json', false, 'json', request);
}

model InstallCloudMonitorAgentRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  force?: boolean(name='Force', description='Specifies whether to forcibly install the CloudMonitor agent. Valid values:

*   true (default value): forcibly installs the CloudMonitor agent.
*   false: does not forcibly install the CloudMonitor agent.', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='9ae7106e68eb4402b0dcbd48a9de****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model InstallCloudMonitorAgentResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4****'),
}

model InstallCloudMonitorAgentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InstallCloudMonitorAgentResponseBody(name='body'),
}

async function installCloudMonitorAgent(request: InstallCloudMonitorAgentRequest): InstallCloudMonitorAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallCloudMonitorAgent', 'POST', '/', 'json', false, 'json', request);
}

model InvokeCommandRequest {
  commandId: string(name='CommandId', example='c-sh02yh0932w****', position='Query'),
  instanceIds: string(name='InstanceIds', example='["2ad1ae67295445f598017499dc****", "2ad1ae67295445f598017123dc****"]', position='Query'),
  parameters?: map[string]any(name='Parameters', example='{"delayed_insert_timeout":"600","max_length_for_sort_data":"2048"}', shrink='json', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  username?: string(name='Username', example='test', position='Query'),
}

model InvokeCommandResponseBody = {
  invokeId?: string(name='InvokeId', example='t-bj02prjhw1n****'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model InvokeCommandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvokeCommandResponseBody(name='body'),
}

async function invokeCommand(request: InvokeCommandRequest): InvokeCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InvokeCommand', 'POST', '/', 'json', false, 'json', request);
}

model ListCustomImagesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dataSnapshotId?: string(name='DataSnapshotId', description='The ID of the data disk snapshot.', example='s-acscasca****', position='Query'),
  imageIds?: string(name='ImageIds', description='The image IDs of the simple application server. The value can be a JSON array that consists of up to 100 image IDs. Separate multiple image IDs with commas (,).', example='["fe9c66133a9d4688872869726b52****", "794c230fd3e64ea19f83f4d7a0ad****"]', position='Query'),
  imageNames?: string(name='ImageNames', description='The image names of the simple application servers. The value can be a JSON array that consists of up to 100 image names. Separate multiple image names with commas (,).', example='["test1****", "test2****"]', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

*   Maximum value: 100.
*   Default value: 10.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application servers corresponding to the custom images. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  systemSnapshotId?: string(name='SystemSnapshotId', description='The ID of the system disk snapshot.', example='s-bp14m09pq8***0g6', position='Query'),
}

model ListCustomImagesResponseBody = {
  customImages?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the snapshot was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-10-09T02:28:06Z'),
      dataSnapshotId?: string(name='DataSnapshotId', description='The ID of the data disk snapshot.', example='s-bp19rn9u8eqzlfb***'),
      dataSnapshotName?: string(name='DataSnapshotName', description='The name of the data disk snapshot.'),
      description?: string(name='Description', description='The description of the custom image.'),
      imageId?: string(name='ImageId', description='The ID of the custom image.', example='m-bp1e79zktg26n2b***'),
      inShare?: boolean(name='InShare', description='Indicates whether the custom image is shared with Elastic Compute Service (ECS).', example='false'),
      instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='2d06ee0520b44de1ae88d4be****'),
      instanceName?: string(name='InstanceName', description='The name of the simple application server.', example='swas-asdf23***'),
      name?: string(name='Name', description='The name of the custom image.', example='hua'),
      regionId?: string(name='RegionId', description='The region ID of the custom images.', example='cn-hangzhou'),
      status?: string(name='Status', description='The status of the custom image.', example='1'),
      systemSnapshotId?: string(name='SystemSnapshotId', description='The ID of the system disk snapshot.', example='s-bp1h173hj21puxb***'),
      systemSnapshotName?: string(name='SystemSnapshotName', description='The name of the system disk snapshot.'),
    }
  ](name='CustomImages', description='The queried custom images.'),
  pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='4'),
}

model ListCustomImagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCustomImagesResponseBody(name='body'),
}

async function listCustomImages(request: ListCustomImagesRequest): ListCustomImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomImages', 'POST', '/', 'json', false, 'json', request);
}

model ListDisksRequest {
  diskIds?: string(name='DiskIds', description='The IDs of the disks. The value can be a JSON array that consists of up to 100 disk IDs. Separate multiple disk IDs with commas (,).', example='["d-bp14wq0149cpp2x****", "d-bp14wq0149cpp2y****"]', position='Query'),
  diskType?: string(name='DiskType', description='The type of the disk. Valid values:

*   System: system disk.
*   Data: data disk.

By default, system disks and data disks are both queried.', example='System', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='2ad1ae67295445f598017499dc****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.

Default value: 1.', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

Maximum value: 100.

Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the disks.', example='cn-hangzhou', position='Query'),
}

model ListDisksResponseBody = {
  disks?: [ 
    {
      category?: string(name='Category', description='The category of the disk. Valid values:

*   ESSD: an enhanced SSD (ESSD) at performance level 0 (PL0).
*   SSD: a standard SSD.', example='ESSD'),
      creationTime?: string(name='CreationTime', description='The time when the disk was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-03-08T05:31:06Z'),
      device?: string(name='Device', description='The device name of the disk on the simple application server.', example='/dev/xvda'),
      diskChargeType?: string(name='DiskChargeType', description='The billing method of the disk.', example='PrePaid'),
      diskId?: string(name='DiskId', description='The ID of the disk.', example='d-bp14wq0149cpp2x****'),
      diskName?: string(name='DiskName', description='The name of the disk.', example='SystemDisk'),
      diskType?: string(name='DiskType', description='The type of the disk. Valid values:

*   System: system disk.
*   Data: data disk.', example='System'),
      instanceId?: string(name='InstanceId', description='The ID of the simple application server to which the disk is attached.', example='2ad1ae67295445f598017499dc****'),
      instanceName?: string(name='InstanceName', description='Name of the simple application server.', example='myInstance'),
      regionId?: string(name='RegionId', description='The region ID of the disks.', example='cn-hangzhou'),
      remark?: string(name='Remark', description='Description about the disk.', example='remark'),
      size?: int32(name='Size', description='The size of the disk. Unit: GB.', example='50'),
      status?: string(name='Status', description='The status of the disk. Valid values:

*   ReIniting: The disk is being initialized.
*   Creating: The disk is being created.
*   In_Use: The disk is being used.
*   Available: The disk can be attached.
*   Attaching: The disk is being attached.
*   Detaching: The disk is being detached.', example='In_use'),
    }
  ](name='Disks', description='Details about the disks.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListDisksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDisksResponseBody(name='body'),
}

/**
  * You can specify multiple request parameters such as `InstanceId` and `DiskIds`. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit](~~347607~~).
  *
 */
async function listDisks(request: ListDisksRequest): ListDisksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDisks', 'POST', '/', 'json', false, 'json', request);
}

model ListFirewallRulesRequest {
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.

Pages start from page 1.

Default value: 1.', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

Maximum value: 100.

Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server.', example='cn-hangzhou', position='Query'),
}

model ListFirewallRulesResponseBody = {
  firewallRules?: [ 
    {
      policy?: string(name='Policy', description='The firewall policy.

*   accept: Access is allowed.
*   drop: Access is refused.', example='accept'),
      port?: string(name='Port', description='The port range.', example='3306'),
      remark?: string(name='Remark', description='The remarks of the firewall rule.'),
      ruleId?: string(name='RuleId', description='The ID of the firewall rule.', example='eeea34d9867b4d55a4ff8d5fcfbd****'),
      ruleProtocol?: string(name='RuleProtocol', description='The transport layer protocol. Valid values:

*   TCP: the TCP protocol.
*   UDP: the UDP protocol
*   TCP+UDP: the TCP and UDP protocols', example='TCP'),
      sourceCidrIp?: string(name='SourceCidrIp', description='The IP address or CIDR block that is allowed by the firewall rule.', example='0.0.0.0/0'),
    }
  ](name='FirewallRules', description='Details about the firewall rules.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='4'),
}

model ListFirewallRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFirewallRulesResponseBody(name='body'),
}

/**
  * You can call the ListFirewallRules operation to query the firewall rule details of a simple application server, including the port range, firewall rule ID, and transport layer protocol.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function listFirewallRules(request: ListFirewallRulesRequest): ListFirewallRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFirewallRules', 'POST', '/', 'json', false, 'json', request);
}

model ListImagesRequest {
  imageIds?: string(name='ImageIds', description='The image IDs. The value can be a JSON array that consists of up to 50 image IDs. Format: `["xxx", "yyy", … "zzz"]`. Separate multiple image IDs with commas (,).', example='["fe9c66133a9d4688872869726b52****", "794c230fd3e64ea19f83f4d7a0ad****"]', position='Query'),
  imageType?: string(name='ImageType', description='The type of the images. Valid values:

*   system: OS images
*   app: application images
*   custom: custom images', example='system', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the images. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model ListImagesResponseBody = {
  images?: [ 
    {
      description?: string(name='Description', description='The description of the image.'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='794c230fd3e64ea19f83f4d7a0ad****'),
      imageName?: string(name='ImageName', description='The name of the image.', example='WordPress-4.8.1'),
      imageType?: string(name='ImageType', description='The type of the image. Valid values:

*   system
*   app
*   custom', example='app'),
      platform?: string(name='Platform', description='The operating system type of the image. Valid values:

*   Linux
*   Windows', example='Linux'),
    }
  ](name='Images', description='The OS type of the image. Valid values:

*   Linux
*   Windows'),
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model ListImagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListImagesResponseBody(name='body'),
}

/**
  * You can query information about images in a region, including the IDs, names, and types of the images.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function listImages(request: ListImagesRequest): ListImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListImages', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancePlansModificationRequest {
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model ListInstancePlansModificationResponseBody = {
  plans?: [ 
    {
      bandwidth?: int32(name='Bandwidth', description='The peak bandwidth. Unit: Mbit/s.', example='3'),
      core?: int32(name='Core', description='The number of vCPUs.', example='2'),
      currency?: string(name='Currency', description='The unit of the plan price. Valid values:

*   CNY
*   USD', example='CNY'),
      diskSize?: int32(name='DiskSize', description='The disk size of the simple application server. Unit: GB.', example='40'),
      diskType?: string(name='DiskType', description='The category of the disk. Valid values:

*   SSD: standard SSD
*   ESSD: enhanced SSD', example='ESSD'),
      flow?: int32(name='Flow', description='The monthly data transfer quota. Unit: GB.', example='400'),
      memory?: int32(name='Memory', description='The memory size. Unit: GB.', example='1'),
      originPrice?: double(name='OriginPrice', description='The price of the plan.', example='60'),
      planId?: string(name='PlanId', description='The ID of the plan.', example='swas.s2.c2m1s40b3t04'),
      supportPlatform?: string(name='SupportPlatform', description='The operating system types supported by the plan.', example='["Linux","Windows"]'),
    }
  ](name='Plans', description='The operating system types supported by the plan.'),
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model ListInstancePlansModificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancePlansModificationResponseBody(name='body'),
}

/**
  * If the plan of your simple application server does not meet your business requirements, you can call the ListInstancePlansModification operation to obtain a list of plans to which you can upgrade your simple application server. Then, you can call the [UpgradeInstance](~~190445~~) operation to upgrade the server.
  * > We recommend that you create snapshots for the disks of your simple application server to back up data before you upgrade the server. For more information, see [CreateSnapshot](~~190452~~).
  * For the precautions about plan upgrade, see [Upgrade a simple application server](~~61433~~).
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function listInstancePlansModification(request: ListInstancePlansModificationRequest): ListInstancePlansModificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstancePlansModification', 'POST', '/', 'json', false, 'json', request);
}

model ListInstanceStatusRequest {
  instanceIds?: string(name='InstanceIds', description='The IDs of the simple application servers. The value can be a JSON array that consists of up to 100 simple application server IDs. Separate multiple server IDs with commas (,).', example='["2ad1ae67295445f598017499dc****", "2ad1ae67295445f598017123dc****"]', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application servers. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model ListInstanceStatusResponseBody = {
  instanceStatuses?: [ 
    {
      instanceId?: string(name='InstanceId', example='a9a6474b935d41bcb531250bb5d****'),
      status?: string(name='Status', example='Running'),
    }
  ](name='InstanceStatuses', description='The ID of the simple application server.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='30637AD6-D977-4833-A54C-CC89483E****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='54'),
}

model ListInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceStatusResponseBody(name='body'),
}

async function listInstanceStatus(request: ListInstanceStatusRequest): ListInstanceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceStatus', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancesRequest {
  chargeType?: string(name='ChargeType', description='The billing method of the simple application servers. Set the value to PrePaid, which indicates the subscription billing method.

Default value: PrePaid.', example='PrePaid', position='Query'),
  instanceIds?: string(name='InstanceIds', description='The IDs of the simple application servers. The value can be a JSON array that consists of up to 100 simple application server IDs. Separate multiple server IDs with commas (,).

> If you specify both `InstanceIds` and `PublicIpAddresses`, make sure that the specified IDs and the specified public IP addresses belong to the same simple application servers. Otherwise, an empty result is returned.', example='["2ad1ae67295445f598017499dc****", "2ad1ae67295445f598017123dc****"]', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.

Default value: 1.', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: 100.

Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  publicIpAddresses?: string(name='PublicIpAddresses', description='The public IP addresses of the simple application servers. The value can be a JSON array that consists of up to 100 IP addresses. Separate multiple IP addresses with commas (,).

> If you specify both `InstanceIds` and `PublicIpAddresses`, make sure that the specified IDs and the specified public IP addresses belong to the same simple application servers. Otherwise, an empty result is returned.', example='["42.1.**.**", "42.2.**.**"]', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application servers.', example='cn-hangzhou', position='Query'),
  status?: string(name='Status', description='实例状态，可能值：

- Pending：准备中
- Starting：启动中
- Running：运行中
- Stopping：停止中
- Stopped：停止
- Resetting：重置中
- Upgrading：升级中
- Disabled：不可用', example='Running', position='Query'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      businessStatus?: string(name='BusinessStatus', description='The status of the server. Valid values:

*   Normal: The server is normal.
*   Expired: The server expires.
*   Overdue: The payment of the server is overdue.', example='Normal'),
      chargeType?: string(name='ChargeType', description='The billing method of the simple application server.', example='PrePaid'),
      combination?: boolean(name='Combination', description='Indicates whether the plan is a bundle plan.', example='false'),
      combinationInstanceId?: string(name='CombinationInstanceId', description='The ID of the bundle plan.', example='com-f6c9a22****45b5b8de68ad608af1ba'),
      creationTime?: string(name='CreationTime', description='The time when the simple application server was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-03-08T05:31:06Z'),
      ddosStatus?: string(name='DdosStatus', description='The DDoS protection status of the server. Valid values:

*   Normal: The DDoS protection status of the server is normal.
*   BlackHole: The server is in blackhole filtering.
*   Defense: The server is being scrubbed.', example='Normal'),
      disableReason?: string(name='DisableReason', description='The reason why the server is disabled. Valid values:

*   FINANCIAL: The server is locked due to overdue payments.
*   SECURITY: The server is locked due to security reasons.
*   EXPIRED: The server has expired.', example='EXPIRED'),
      expiredTime?: string(name='ExpiredTime', description='The time when the server expires. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-05-08T16:00:00Z'),
      image?: {
        imageContact?: string(name='ImageContact', description='The image provider.', example='https://selfs****e.console.aliyun.com/ticket/createIndex'),
        imageIconUrl?: string(name='ImageIconUrl', description='The URL of the image icon.', example='https://img.alicdn.com/imgextra/i3/O****1vdh9651ReKqWNMI2I_!!6000000002136****-24-24.svg'),
        imageName?: string(name='ImageName', description='The image name.', example='test-custom-1686536882356'),
        imageType?: string(name='ImageType', description='The image type. Valid values:

*   system
*   app
*   custom', example='system'),
        imageVersion?: string(name='ImageVersion', description='The image tag.', example='V3.5'),
        osType?: string(name='OsType', description='The OS.', example='windows'),
      }(name='Image', description='The description of the image.'),
      imageId?: string(name='ImageId', description='The ID of an image.', example='fe9c66133a9d4688872869726b52****'),
      innerIpAddress?: string(name='InnerIpAddress', description='The internal IP address of the simple application server.', example='172.26.XX.XX'),
      instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='2ad1ae67295445f598017499dc****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='test-InstanceName'),
      planId?: string(name='PlanId', description='The plan ID.', example='swas.s2.c2m2s50b4t08'),
      publicIpAddress?: string(name='PublicIpAddress', description='The public IP address of the server.', example='42.1.XX.XX'),
      regionId?: string(name='RegionId', description='The region ID of the servers.', example='cn-hangzhou'),
      resourceSpec?: {
        bandwidth?: int32(name='Bandwidth', description='The bandwidth of the server.', example='5'),
        cpu?: int32(name='Cpu', description='The number of vCPUs.', example='2'),
        diskCategory?: string(name='DiskCategory', description='The category of the disk. Valid values:

*   ESSD: an enhanced SSD (ESSD) at performance level 0 (PL0).
*   SSD: a standard SSD.
*   CLOUD_EFFICIENCY: an ultra disk.', example='cloud_efficiency'),
        diskSize?: int32(name='DiskSize', description='The disk size.', example='60'),
        flow?: double(name='Flow', description='The amount of the traffic.

*   A value of 0 indicates that the server is a bandwidth-based server.
*   A value of none-zero indicates that the server is a data transfer plan-based server.', example='818'),
        memory?: double(name='Memory', description='The memory size.', example='2'),
      }(name='ResourceSpec', description='The specifications of the resource.'),
      status?: string(name='Status', description='The status of the simple application server. Valid values:

*   Pending
*   Starting
*   Running
*   Stopping
*   Stopped
*   Resetting
*   Upgrading
*   Disabled', example='Running'),
      uuid?: string(name='Uuid', description='The universally unique identifier (UUID) of the server.', example='41f30524-5df7-49c9-9c6e-32****489001'),
    }
  ](name='Instances', description='Details about the simple application servers.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

/**
  * You can call this operation to query the details of simple application servers in a specified region, including the names, public IP addresses, internal IP addresses, creation time, and expiration time of the servers.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancesTrafficPackagesRequest {
  acsProduct?: string(name='AcsProduct', position='Query'),
  instanceIds: string(name='InstanceIds', description='The IDs of the simple application servers. The value can be a JSON array that consists of up to 100 simple application server IDs. Separate multiple server IDs with commas (,).', example='["2ad1ae67295445f598017499dc******","2ad1ae67295445f598017499dc******"]', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application servers. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model ListInstancesTrafficPackagesResponseBody = {
  instanceTrafficPackageUsages?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='ccscqwqwqqqw****'),
      trafficOverflow?: long(name='TrafficOverflow', description='The data transfers that exceeds the quota of the data transfer plan in the current month. Unit: Byte.', example='0'),
      trafficPackageRemaining?: long(name='TrafficPackageRemaining', description='The unused quota of the data transfer plan in the current month. Unit: Byte.', example='10000'),
      trafficPackageTotal?: long(name='TrafficPackageTotal', description='The quota of the data transfer plan in the current month. Unit: Byte.

>  TrafficPackageTotal = TrafficUsed + TrafficPackageRemaining', example='20000'),
      trafficUsed?: long(name='TrafficUsed', description='The used quota of the data transfer plan in the current month. Unit: Byte.', example='10000'),
    }
  ](name='InstanceTrafficPackageUsages', description='The data transfers that exceed the quota of the data transfer plan in the current month. Unit: bytes.'),
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model ListInstancesTrafficPackagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesTrafficPackagesResponseBody(name='body'),
}

/**
  * You can query the details of data transfer plans of simple application servers, including the data transfer quota, used amount and unused amount of the data transfer quota, and excess data transfers beyond the quota in the current month.
  * Simple Application Server provides data transfer quotas in plans. Plan prices include prices of data transfer quotas. You are charged for data transfers that exceed the quotas. Take note of the following items:
  * *   Only outbound data transfers of simple application servers over the Internet are calculated. Outbound data transfers include the data transfer quota and the excess data transfers beyond the quota. Inbound data transfers of simple application servers over the Internet are not calculated.
  * *   Outbound data transfers from simple application servers to other Alibaba Cloud services over the Internet first consume data transfer quotas. If the quotas are exhausted, you are charged for excess data transfers.
  * *   You are not charged for data transfers between simple application servers within the same virtual private cloud (VPC).
  * For more information, see [Quotas and billing of data transfers](~~86281~~).
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function listInstancesTrafficPackages(request: ListInstancesTrafficPackagesRequest): ListInstancesTrafficPackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstancesTrafficPackages', 'POST', '/', 'json', false, 'json', request);
}

model ListPlansRequest {
  regionId: string(name='RegionId', description='The region ID of the plans. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model ListPlansResponseBody = {
  plans?: [ 
    {
      bandwidth?: int32(name='Bandwidth', description='The peak bandwidth. Unit: Mbit/s.', example='3'),
      core?: int32(name='Core', description='The number of vCPUs.', example='2'),
      currency?: string(name='Currency', description='The unit of the plan price. Valid values:

*   CNY
*   USD

>  CNY is for the China site (aliyun.com). USD is for the international site (alibabacloud.com).', example='CNY'),
      diskSize?: int32(name='DiskSize', description='The size of the disk. Unit: GB.', example='40'),
      diskType?: string(name='DiskType', description='The category of the disk. Valid values:

*   SSD: standard SSDs
*   ESSD: enhanced SSDs', example='ESSD'),
      flow?: int32(name='Flow', description='The monthly data transfer quota. Unit: GB.', example='400'),
      memory?: int32(name='Memory', description='The memory size. Unit: GB.', example='1'),
      originPrice?: double(name='OriginPrice', description='The monthly price of the plan.', example='60'),
      planId?: string(name='PlanId', description='The ID of the plan.', example='swas.s2.c2m1s40b3t04'),
      supportPlatform?: string(name='SupportPlatform', description='The operating system types supported by the plan.', example='["Linux","Windows"]'),
    }
  ](name='Plans', description='The operating system types supported by the plan.'),
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model ListPlansResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPlansResponseBody(name='body'),
}

/**
  * You can query the details of all plans provided by Simple Application Server in a region, including the IDs, prices, disk sizes, and disk categories of the plans.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function listPlans(request: ListPlansRequest): ListPlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPlans', 'POST', '/', 'json', false, 'json', request);
}

model ListRegionsRequest {
}

model ListRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of the region.', example='swas.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='Regions', description='The region ID.'),
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRegionsResponseBody(name='body'),
}

/**
  * The query results include all the Alibaba Cloud regions where Simple Application Server is supported on the international site (alibabacloud.com) and the China site (aliyun.com).
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListSnapshotsRequest {
  acsProduct?: string(name='AcsProduct', position='Query'),
  diskId?: string(name='DiskId', description='The disk ID.', example='d-bp14wq0149cpp2xy****', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the simple application server.', example='2ad1ae67295445f598017499dc****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.

Default value: 1.', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: 100.

Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server that corresponds to the snapshots.', example='cn-hangzhou', position='Query'),
  snapshotIds?: string(name='SnapshotIds', description='The snapshot IDs. The value can be a JSON array that consists of up to 100 snapshot IDs. Separate multiple snapshot IDs with commas (,).', example='["s-bp16oazlsold4dks****", "s-bp16oazlsold4abc****"]', position='Query'),
  sourceDiskType?: string(name='SourceDiskType', description='The type of the source disk. Valid values:

*   system: system disk.
*   data: data disk.', example='System', position='Query'),
}

model ListSnapshotsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  snapshots?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the snapshot was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-03-09T07:12:49Z'),
      instanceId?: string(name='InstanceId', description='The ID of the simple application server.

Note: This parameter has a value for system disk snapshots. This parameter is left empty for data disk snapshots.', example='2ad1ae67295445f598017499dc****'),
      progress?: string(name='Progress', description='The progress of snapshot creation.', example='100%'),
      regionId?: string(name='RegionId', description='The region ID of the snapshots.', example='cn-hangzhou'),
      remark?: string(name='Remark', description='The remarks of the snapshot.', example='test-Remark'),
      rollbackTime?: string(name='RollbackTime', description='The time when the last disk rollback was performed.', example='2021-03-09T07:12:49Z'),
      snapshotId?: string(name='SnapshotId', description='The snapshot ID.', example='s-bp16oazlsold4dks****'),
      snapshotName?: string(name='SnapshotName', description='The name of the snapshot.', example='test-SnapshotName'),
      sourceDiskId?: string(name='SourceDiskId', description='The ID of the source disk based on which the snapshot is created. This parameter has a value even if the source disk is released.', example='d-bp14wq0149cpp2xy****'),
      sourceDiskType?: string(name='SourceDiskType', description='The type of the source disk. Valid values:

*   system: system disk.
*   data: data disk.', example='System'),
      status?: string(name='Status', description='The status of the snapshot. Valid values:

*   Progressing: The snapshot is being created.
*   Accomplished: The snapshot is created.
*   Failed: The snapshot failed to be created.', example='Accomplished'),
    }
  ](name='Snapshots', description='Details about the snapshots.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSnapshotsResponseBody(name='body'),
}

/**
  * You can specify multiple request parameters such as `InstanceId`, `DiskId`, and `SnapshotIds` to query snapshots. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function listSnapshots(request: ListSnapshotsRequest): ListSnapshotsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSnapshots', 'POST', '/', 'json', false, 'json', request);
}

model LoginInstanceRequest {
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='9ae7106e68eb4402b0dcbd48a9de****', position='Query'),
  password?: string(name='Password', description='The password that corresponds to the username.

*   For a Linux server, you do not need to enter a password.
*   For a Windows server, enter the password that you set. If you have not set a password for the simple application server, set a password. For more information, see [Reset the password](~~60055~~).', example='Test****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  username?: string(name='Username', description='The username of the simple application server.

*   For a Linux server, you do not need to enter a username.
*   For a Windows server, the default username is `administrator`.', example='administrator', position='Query'),
}

model LoginInstanceResponseBody = {
  redirectUrl?: string(name='RedirectUrl', description='The URL that you use to log on to the server.', example='https://ecs-workbench.aliyun.com/view/instance/single/gbktfz****'),
  requestId?: string(name='RequestId', description='The request ID.', example='C2DE174B-7196-5778-A00D-6EA2601B****'),
}

model LoginInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LoginInstanceResponseBody(name='body'),
}

/**
  * ##
  * After you create a simple application server, you can log on to the simple application server to build environments and applications on the server.
  *
 */
async function loginInstance(request: LoginInstanceRequest): LoginInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LoginInstance', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDatabaseInstanceDescriptionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  databaseInstanceDescription: string(name='DatabaseInstanceDescription', description='The description of the Simple Database Service instance.', position='Query'),
  databaseInstanceId: string(name='DatabaseInstanceId', description='The ID of the Simple Database Service instance.', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Simple Database Service instance. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model ModifyDatabaseInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model ModifyDatabaseInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDatabaseInstanceDescriptionResponseBody(name='body'),
}

/**
  * You can call this operation to modify the description of a Simple Database Service instance.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function modifyDatabaseInstanceDescription(request: ModifyDatabaseInstanceDescriptionRequest): ModifyDatabaseInstanceDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDatabaseInstanceDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDatabaseInstanceParameterRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  databaseInstanceId: string(name='DatabaseInstanceId', description='The ID of the Simple Database Service instance.', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  forceRestart?: boolean(name='ForceRestart', description='Specifies whether to forcibly restart the instance after parameters are modified. Valid values:

*   true: forcibly restarts the instance. If a new parameter value takes effect only after the instance restarts, you must set this parameter to true. Otherwise, the new parameter value cannot take effect.
*   false: does not forcibly restart the instance.

Default value: false.', example='false', position='Query'),
  parameters: string(name='Parameters', description='The JSON strings that consist of instance parameters and the values of the instance parameters. The parameter values are of the string type. Format: {"Parameter name 1":"Parameter value 1","Parameter name 2":"Parameter value 2"...}.', example='{"delayed_insert_timeout":"600","max_length_for_sort_data":"2048"}', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Simple Database Service instance. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model ModifyDatabaseInstanceParameterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model ModifyDatabaseInstanceParameterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDatabaseInstanceParameterResponseBody(name='body'),
}

/**
  * After you create a Simple Database Service instance, you can view the parameters of the instance or modify the parameters of the instance based on your business requirements.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function modifyDatabaseInstanceParameter(request: ModifyDatabaseInstanceParameterRequest): ModifyDatabaseInstanceParameterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDatabaseInstanceParameter', 'POST', '/', 'json', false, 'json', request);
}

model ModifyFirewallRuleRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  port: string(name='Port', description='The port range. Valid values: 165535. Specify a port range in the format of \\<start port number>/\\<end port number>. Example: `1024/1055`, which indicates that the port range of 10241055.', example='3306', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  remark?: string(name='Remark', description='The remarks of the firewall rule.', position='Query'),
  ruleId: string(name='RuleId', description='The ID of the firewall rule.', example='eeea34d9867b4d55a4ff8d5fcfbd****', position='Query'),
  ruleProtocol: string(name='RuleProtocol', description='The transport layer protocol. Valid values:

*   TCP: the TCP protocol
*   UDP: the UDP protocol
*   TCP+UDP: the TCP and UDP protocols', example='TCP', position='Query'),
  sourceCidrIp?: string(name='SourceCidrIp', description='The IP address or CIDR block that is allowed in the firewall rule.', example='10.147.33.**', position='Query'),
}

model ModifyFirewallRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='30637AD6-D977-4833-A54C-CC89483E1FEE'),
}

model ModifyFirewallRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyFirewallRuleResponseBody(name='body'),
}

async function modifyFirewallRule(request: ModifyFirewallRuleRequest): ModifyFirewallRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyFirewallRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyImageShareStatusRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  imageId: string(name='ImageId', description='The image ID.', example='m-saacssasc****', position='Query'),
  operation: string(name='Operation', description='Valid values:

*   Share
*   UnShare', example='Share', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the custom image. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model ModifyImageShareStatusResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C****'),
}

model ModifyImageShareStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyImageShareStatusResponseBody(name='body'),
}

/**
  * You can share a custom image with ECS. If the configurations of your simple application server cannot meet your business requirements, or you want to use ECS instances to deploy your business, you can share your custom image with ECS to transfer your business from Simple Application Server to ECS.
  * > The shared image in ECS resides in the same region as the custom image in Simple Application Server.
  * You can unshare a custom image based on your business requirements or when you want to delete the custom image. Take note of the following items:
  * *   After you unshare a custom image, you cannot query or use the custom image in the ECS console or by calling ECS API operations.
  * *   After you unshare a custom image, you cannot re-initialize the disks of the ECS instances that were created based on the shared image.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function modifyImageShareStatus(request: ModifyImageShareStatusRequest): ModifyImageShareStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyImageShareStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceVncPasswordRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  vncPassword?: string(name='VncPassword', description='The existing VNC password.', example='***', position='Query'),
}

model ModifyInstanceVncPasswordResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model ModifyInstanceVncPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceVncPasswordResponseBody(name='body'),
}

async function modifyInstanceVncPassword(request: ModifyInstanceVncPasswordRequest): ModifyInstanceVncPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceVncPassword', 'POST', '/', 'json', false, 'json', request);
}

model RebootInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server.', example='cn-hangzhou', position='Query'),
}

model RebootInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model RebootInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebootInstanceResponseBody(name='body'),
}

/**
  * *   Only simple application servers that are in the Running state can be restarted.
  * *   After you restart a simple application server, it enters the Starting state.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function rebootInstance(request: RebootInstanceRequest): RebootInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebootInstance', 'POST', '/', 'json', false, 'json', request);
}

model RebootInstancesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  forceReboot?: boolean(name='ForceReboot', description='Specifies whether to forcibly restart the servers. Valid values:

*   true: forcibly restarts the servers. This operation is equivalent to the typical power-off operation. Cache data that is not written to storage devices on the server will be lost.
*   false: normally restarts the instance.

Default value: false', example='false', position='Query'),
  instanceIds: string(name='InstanceIds', description='The IDs of the simple application servers. The value can be a JSON array that consists of up to 100 simple application server IDs. Separate multiple server IDs with commas (,).', example='["2ad1ae67295445f598017499dc****", "2ad1ae67295445f598017123dc****"]', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application servers. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model RebootInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model RebootInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebootInstancesResponseBody(name='body'),
}

async function rebootInstances(request: RebootInstancesRequest): RebootInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebootInstances', 'POST', '/', 'json', false, 'json', request);
}

model ReleasePublicConnectionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  databaseInstanceId: string(name='DatabaseInstanceId', description='The ID of the Simple Database Service instance.', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Simple Database Service instance. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model ReleasePublicConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model ReleasePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleasePublicConnectionResponseBody(name='body'),
}

/**
  * If you no longer need to use a public endpoint to access a Simple Database Service instance, you can release the public endpoint.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function releasePublicConnection(request: ReleasePublicConnectionRequest): ReleasePublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleasePublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model RenewInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  period: int32(name='Period', description='The renewal period. Unit: month. Valid values: 1, 3, 6, 12, 24, and 36.', example='1', minimum=1, maximum=36, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the server.', example='cn-hangzhou', position='Query'),
}

model RenewInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewInstanceResponseBody(name='body'),
}

/**
  * *   Before you call this operation, we recommend that you understand the billing of Simple Application Server. For more information, see [Billable items](~~58623~~).
  * *   When you call this operation to renew a server, make sure that the balance in your account is sufficient. If the balance in your account is insufficient, the server cannot be renewed.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewInstance', 'POST', '/', 'json', false, 'json', request);
}

model ResetDatabaseAccountPasswordRequest {
  accountPassword: string(name='AccountPassword', description='The password of the database administrator account.', example='Password****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  databaseInstanceId: string(name='DatabaseInstanceId', description='The ID of the Simple Database Service instance.', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Simple Database Service instance. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model ResetDatabaseAccountPasswordResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model ResetDatabaseAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetDatabaseAccountPasswordResponseBody(name='body'),
}

/**
  * If the password of your Simple Database Service instance is not strong, you can call this operation to change the password of the administrator account of the instance. To ensure security of the instance, we recommend that you regularly change the password of the instance.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function resetDatabaseAccountPassword(request: ResetDatabaseAccountPasswordRequest): ResetDatabaseAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetDatabaseAccountPassword', 'POST', '/', 'json', false, 'json', request);
}

model ResetDiskRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  diskId: string(name='DiskId', description='The ID of the disk to be rolled back.', example='d-bp14wq0149cpp2xy****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server for which the snapshot is created.', example='cn-hangzhou', position='Query'),
  snapshotId: string(name='SnapshotId', description='The snapshot ID.', example='s-bp16oazlsold4dks****', position='Query'),
}

model ResetDiskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model ResetDiskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetDiskResponseBody(name='body'),
}

/**
  * *   You can call this operation to roll back a disk only if the associated simple application server is in the Stopped state.
  * *   After a disk is rolled back, all data changes that are made from when the snapshot was created to when the disk is rolled back are lost. Back up disk data based on your needs before you roll back the disk.
  * ### Precautions
  * After you reset a simple application server, the disk data on the server is deleted. Snapshots created before the resetting operation are retained but cannot be used to roll back the disks of the server.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function resetDisk(request: ResetDiskRequest): ResetDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetDisk', 'POST', '/', 'json', false, 'json', request);
}

model ResetSystemRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  imageId?: string(name='ImageId', description='The ID of the image that is used to replace the image of the simple application server. If you do not specify this parameter, the current image of the simple application server is replaced by default.', example='794c230fd3e64ea19f83f4d7a0ad****', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model ResetSystemResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model ResetSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetSystemResponseBody(name='body'),
}

/**
  * You can reset a simple application server to re-install its application system or OS and re-initialize the server. You can reset a simple application server by resetting the current system or replacing the image.
  * You can use one of the following methods to reset a simple application server:
  * *   Reset the current system. You can re-install the operating system without replacing the image.
  * *   Replace the image. You can select an Alibaba Cloud image or a custom image that is different from the existing image of the server to reinstall the OS of the server.
  * ### Precautions
  * *   After you reset a simple application server, the disk data on the server is cleared. Back up the data as needed.
  * *   After you reset a simple application server, the monitoring operations that are performed on the server may fail. In this case, you can use one of the following methods to install the CloudMonitor agent on the server:
  *     *   Connect to the server: For more information, see [Manually install the CloudMonitor agent for C++ on an ECS instance](~~183482~~).
  *     *   Use Command Assistant: For more information, see [Use Command Assistant](~~438681~~). You can obtain the command that can be used to install CloudMonitor from the "Common commands" section of the [Use Command Assistant](~~438681~~) topic.
  * ### Limits
  * *   Snapshots that are created before a server is reset are retained, but the snapshots cannot be used to roll back the disks of the server.
  * *   You cannot reset simple application servers that were created based on custom images that contain data of data disks.
  * *   Before you reset a simple application server by replacing the existing image with a custom image, take note of the following items:
  *     *   The custom image must reside in the same region as the current server.
  *     *   The custom image cannot be created based on the current server. If you want to recover the data on the server, you can use a snapshot of the server to roll back the disks of the server.
  *     *   If your simple application server resides outside the Chinese mainland, you cannot switch the OS of the server between Windows Server and Linux. You cannot use a Windows Server custom image to reset a Linux simple application server. You also cannot use a Linux custom image to reset a Windows Server simple application server. You can switch the OSs of simple application servers only between Windows Server OSs or between Linux distributions.
  *     *   The following limits apply to the disks attached to the simple application server:
  *         *   If the custom image contains a system disk and a data disk but only a system disk is attached to the simple application server and no data disk is attached, you cannot use the custom image to reset the simple application server.
  *         *   If the system disk size of the custom image is greater than the system disk size of the simple application server, you cannot directly use the custom image to reset the simple application server.
  *         *   Only if the system disk size of the simple application server is greater than or equal to the system disk size of the custom image, you can use the custom image to reset the simple application server. To increase the system disk size of your simple application server, you can upgrade the server. For more information, see Upgrade a simple application server.
  *         *   If the data disk size of the custom image is greater than the data disk size of the simple application server, you cannot use the custom image to reset the simple application server.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function resetSystem(request: ResetSystemRequest): ResetSystemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetSystem', 'POST', '/', 'json', false, 'json', request);
}

model RestartDatabaseInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  databaseInstanceId: string(name='DatabaseInstanceId', description='The ID of the Simple Database Service instance.', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Simple Database Service instance. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model RestartDatabaseInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model RestartDatabaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartDatabaseInstanceResponseBody(name='body'),
}

/**
  * You can call this operation to restart a Simple Database Service instance that is in the Running state.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function restartDatabaseInstance(request: RestartDatabaseInstanceRequest): RestartDatabaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartDatabaseInstance', 'POST', '/', 'json', false, 'json', request);
}

model RunCommandRequest {
  commandContent: string(name='CommandContent', description='The content of the command. Take note of the following items:

*   If you set `EnableParameter` to true, the custom parameter feature is enabled in the command content and you can configure custom parameters based on the following rules:
*   Define custom parameters in the {{}} format. Within `{{}}`, the spaces and line feeds before and after the parameter names are ignored.
*   The number of custom parameters cannot be greater than 20.
*   A custom parameter name can contain only letters, digits, underscores (\\_), and hyphens (-). The name is case-insensitive.
*   Each custom parameter name cannot exceed 64 bytes in length.', example='ifconfig -s', position='Query'),
  enableParameter?: boolean(name='EnableParameter', description='Specifies whether to enable the custom parameter feature.

Default value: false.', example='false', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  name: string(name='Name', description='The name of the command.', example='testName', position='Query'),
  parameters?: map[string]any(name='Parameters', description='The custom parameters in the key-value pair format that are to be passed in when the command includes custom parameters. For example, if the command content is `echo {{name}}`, you can use `Parameters` to pass in the `{"name":"Jack"}` key-value pair. The `name` key of the custom parameter is automatically replaced with the paired Jack value to generate a new command. As a result, the `echo Jack` command is executed.

Number of custom parameters ranges from 0 to 20. Take note of the following items:

*   The key cannot be an empty string. It can be up to 64 characters in length.
*   The value can be an empty string.
*   After custom parameters and original command content are encoded in Base64, the command cannot exceed 16 KB in size.
*   The custom parameter names that are specified by Parameters must be included in the custom parameter names that you specified when you created the command. You can use empty strings to represent the parameters that are not passed in.

This parameter is empty by default, which indicates to disable the custom parameter feature.', example='{"name":"Jack", "accessKey":"LTAIdyvdIqaRY****"}', shrink='json', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  timeout?: int32(name='Timeout', description='The timeout period of the command on the server.

If a command execution task times out, Command Assistant forcibly terminates the task process. Valid values: 10 to 86400. Unit: seconds. The period of 86400 seconds is equal to 24 hours.

Default value: 60.', example='60', position='Query'),
  type: string(name='Type', description='The language type of the command. Valid values:

*   RunBatScript: batch commands (applicable to Windows servers).
*   RunPowerShellScript: PowerShell commands (applicable to Windows servers).
*   RunShellScript: shell commands (applicable to Linux servers).', example='RunShellScript', position='Query'),
  windowsPasswordName?: string(name='WindowsPasswordName', description='The name of the password to be used to run the command on a Windows server.

If you want to use a username other than the default "system" username to run the command on a Windows server, you must specify both the WindowsPasswordName and WorkingUser parameters. To mitigate the risk of password leaks, the password is stored in plaintext in Operation Orchestration Service (OOS) Parameter Store, and only the name of the password is passed in by using WindowsPasswordName.', example='axtSecretPassword', position='Query'),
  workingDir?: string(name='WorkingDir', description='The execution path of the command. You can specify a value for the parameter. Default execution paths vary based on the operating systems of the servers.

*   For Linux servers, the default execution path is the /home directory of the root user.
*   For Windows servers, the default execution path is C:\\Windows\\system32.', example='/home/', position='Query'),
  workingUser?: string(name='WorkingUser', description='A user of the server who runs the command. We recommend that you run the command as a regular user to reduce security risks. Default values:

*   For Linux servers, the default value is root.
*   For Windows servers, the default value is system.', example='root', position='Query'),
}

model RunCommandResponseBody = {
  invokeId?: string(name='InvokeId', description='The execution ID.', example='t-hz02p9545t6****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model RunCommandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunCommandResponseBody(name='body'),
}

/**
  * Command Assistant is an automated O\\&M tool for Simple Application Server. You can maintain simple application servers by running shell, PowerShell, and batch commands in the Simple Application Server console without remotely logging on to the servers.
  * Before you use Command Assistant, take note of the following items:
  * *   The simple application server must be in the Running state.
  * *   The Cloud Assistant client is installed on the server. By default, the Cloud Assistant client is installed on simple application servers. If you have manually uninstalled the client, you must reinstall it. For more information, see [Install the Cloud Assistant Agent](~~64921~~).
  *
 */
async function runCommand(request: RunCommandRequest): RunCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunCommand', 'POST', '/', 'json', false, 'json', request);
}

model StartDatabaseInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  databaseInstanceId: string(name='DatabaseInstanceId', description='The ID of the Simple Database Service instance.', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Simple Database Service instance. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model StartDatabaseInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model StartDatabaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDatabaseInstanceResponseBody(name='body'),
}

/**
  * You can call this operation to start a Simple Database Service instance that is in the Stopped state.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function startDatabaseInstance(request: StartDatabaseInstanceRequest): StartDatabaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDatabaseInstance', 'POST', '/', 'json', false, 'json', request);
}

model StartInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the server.', example='cn-hangzhou', position='Query'),
}

model StartInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartInstanceResponseBody(name='body'),
}

/**
  * You can call this operation to start a simple application server that is in the Stopped state.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartInstance', 'POST', '/', 'json', false, 'json', request);
}

model StartInstancesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceIds: string(name='InstanceIds', description='The IDs of the simple application servers. The value can be a JSON array that consists of up to 100 simple application server IDs. Separate multiple server IDs with commas (,).', example='["2ad1ae67295445f598017499dc****", "2ad1ae67295445f598017123dc****"]', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application servers. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model StartInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model StartInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartInstancesResponseBody(name='body'),
}

async function startInstances(request: StartInstancesRequest): StartInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartInstances', 'POST', '/', 'json', false, 'json', request);
}

model StartTerminalSessionRequest {
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model StartTerminalSessionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
  securityToken?: string(name='SecurityToken', description='The security token included in the WebSocket request header. The system uses this token to authenticate the request.', example='token-xxxaaz'),
  sessionId?: string(name='SessionId', description='The session ID.', example='ffb90b6e-b18a-4a33-88cf-86fb88****'),
  webSocketUrl?: string(name='WebSocketUrl', description='The URL of the WebSocket session that is used to connect to the server. The URL contains the session ID (`SessionId`) and the authentication token (`SecurityToken`).', example='wss://xxxx'),
}

model StartTerminalSessionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartTerminalSessionResponseBody(name='body'),
}

async function startTerminalSession(request: StartTerminalSessionRequest): StartTerminalSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartTerminalSession', 'POST', '/', 'json', false, 'json', request);
}

model StopDatabaseInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  databaseInstanceId: string(name='DatabaseInstanceId', description='The ID of the Simple Database Service instance.', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Simple Database Service instance. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model StopDatabaseInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model StopDatabaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopDatabaseInstanceResponseBody(name='body'),
}

/**
  * You can call this operation to stop a Simple Database Service instance that is in the Running state. After the instance is stopped, you cannot log on to or access the instance.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function stopDatabaseInstance(request: StopDatabaseInstanceRequest): StopDatabaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDatabaseInstance', 'POST', '/', 'json', false, 'json', request);
}

model StopInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the server.', example='cn-hangzhou', position='Query'),
}

model StopInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopInstanceResponseBody(name='body'),
}

/**
  * You can stop a simple application server that you do not use for the time being.
  * >  Stopping a simple application server may interrupt your business. We recommend that you perform the stop operation during off-peak hours.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopInstance', 'POST', '/', 'json', false, 'json', request);
}

model StopInstancesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  forceStop?: boolean(name='ForceStop', description='Specifies whether to forcibly stop the servers.

*   **true**: forcibly stops the servers.
*   **false**: normally stops the servers. This is the default value.', example='true', position='Query'),
  instanceIds: string(name='InstanceIds', description='The IDs of the simple application servers. The value can be a JSON array that consists of up to 100 simple application server IDs. Separate multiple server IDs with commas (,).', example='["2ad1ae67295445f598017499dc****", "2ad1ae67295445f598017123dc****"]', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application servers. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model StopInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C2DE174B-7196-5778-A00D-6EA2601B****'),
}

model StopInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopInstancesResponseBody(name='body'),
}

async function stopInstances(request: StopInstancesRequest): StopInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopInstances', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCommandAttributeRequest {
  commandId: string(name='CommandId', example='c-sh02yh0932w****', position='Query'),
  description?: string(name='Description', example='test', position='Query'),
  name?: string(name='Name', example='testName', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  timeout?: long(name='Timeout', example='60', position='Query'),
  workingDir?: string(name='WorkingDir', example='/home/', position='Query'),
}

model UpdateCommandAttributeResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model UpdateCommandAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCommandAttributeResponseBody(name='body'),
}

async function updateCommandAttribute(request: UpdateCommandAttributeRequest): UpdateCommandAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCommandAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDiskAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  diskId: string(name='DiskId', description='The disk ID. You can call the ListDisks operation to query the ID of data disk.', example='d-bp18kjxg9ebrhsgi****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  remark: string(name='Remark', description='The remarks of the data disk.', example='test', position='Query'),
}

model UpdateDiskAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28D****534F'),
}

model UpdateDiskAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDiskAttributeResponseBody(name='body'),
}

async function updateDiskAttribute(request: UpdateDiskAttributeRequest): UpdateDiskAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDiskAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  instanceName?: string(name='InstanceName', description='The name of the simple application server. The name must be 2 to 128 characters in length. It must start with a letter but cannot start with `http://` or `https://`. The name can only contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).', example='test-InstanceName', position='Query'),
  password?: string(name='Password', description='The new password of the simple application server. The password must be 8 to 30 characters in length. It must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Only the following special characters are supported:

`()~!@#$%^&*-+=|{}[]:;<>,.?/`', example='Test123!', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server.', example='cn-hangzhou', position='Query'),
}

model UpdateInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model UpdateInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInstanceAttributeResponseBody(name='body'),
}

/**
  * ## Usage notes
  * After you change the password of a simple application server, you must restart the server by calling the [RebootInstance](~~190443~~) operation to allow the new password to take effect.
  * ### QPS limits
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function updateInstanceAttribute(request: UpdateInstanceAttributeRequest): UpdateInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSnapshotAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  remark?: string(name='Remark', description='The remarks of the snapshot of the simple application server.', example='test', position='Query'),
  snapshotId: string(name='SnapshotId', description='The snapshot ID. You can call the ListSnapshots operation to query the snapshot ID.', example='s-bp16oazlsold4dks****', position='Query'),
}

model UpdateSnapshotAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C****'),
}

model UpdateSnapshotAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSnapshotAttributeResponseBody(name='body'),
}

async function updateSnapshotAttribute(request: UpdateSnapshotAttributeRequest): UpdateSnapshotAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSnapshotAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='ace0706b2ac4454d984295a94213****', position='Query'),
  planId: string(name='PlanId', description='The ID of the new plan. You can call the [ListPlans](~~189314~~) operation to query the plans provided by Simple Application Server.', example='swas.s2.c2m2s50b4t08', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server.', example='cn-hangzhou', position='Query'),
}

model UpgradeInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model UpgradeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeInstanceResponseBody(name='body'),
}

/**
  * *   The plan of a simple application server cannot be downgraded, but can only be upgraded. For more information about plans, see [Billable items](~~58623~~).
  * *   When you call this operation to upgrade a server, make sure that the balance in your account is sufficient. If the balance in your account is insufficient, the server cannot be upgraded.
  * ### QPS limit
  * You can call this API operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](~~347607~~).
  *
 */
async function upgradeInstance(request: UpgradeInstanceRequest): UpgradeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeInstance', 'POST', '/', 'json', false, 'json', request);
}

model UploadInstanceKeyPairRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the simple application server.', example='2ad1ae67295445f598017499dc****', position='Query'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair.', example='test_gin', position='Query'),
  publicKey?: string(name='PublicKey', description='The public key.', example='ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAID5aQ5bM0Am3mWe+upjSXqisUT4DLR6ExwvA0***** **@**.com', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the simple application server. You can call the [ListRegions](~~189315~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model UploadInstanceKeyPairResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model UploadInstanceKeyPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UploadInstanceKeyPairResponseBody(name='body'),
}

async function uploadInstanceKeyPair(request: UploadInstanceKeyPairRequest): UploadInstanceKeyPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadInstanceKeyPair', 'POST', '/', 'json', false, 'json', request);
}

