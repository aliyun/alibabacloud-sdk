/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'SWAS-OPEN';
  @version = '2020-06-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AllocatePublicConnectionRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  databaseInstanceId: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model AllocatePublicConnectionResponseBody = {
  publicConnection?: string(name='PublicConnection', example='db-38263fa955774501a2ae1bdaed6f****.mysql.rds.aliyuncs.com'),
  requestId?: string(name='RequestId', description='Id of the request', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model AllocatePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: AllocatePublicConnectionResponseBody(name='body'),
}

async function allocatePublicConnection(request: AllocatePublicConnectionRequest): AllocatePublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocatePublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomImageRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dataSnapshotId?: string(name='DataSnapshotId', example='s-acscasca****', position='Query'),
  description?: string(name='Description', example='test', position='Query'),
  imageName: string(name='ImageName', example='customImage-test', position='Query'),
  instanceId: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  systemSnapshotId: string(name='SystemSnapshotId', example='s-acscasca****', position='Query'),
}

model CreateCustomImageResponseBody = {
  imageId?: string(name='ImageId', example='m-csaascsaccscs****'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model CreateCustomImageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCustomImageResponseBody(name='body'),
}

async function createCustomImage(request: CreateCustomImageRequest): CreateCustomImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomImage', 'POST', '/', 'json', false, 'json', request);
}

model CreateFirewallRuleRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****', position='Query'),
  port: string(name='Port', example='3306', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  remark?: string(name='Remark', position='Query'),
  ruleProtocol: string(name='RuleProtocol', example='TCP', position='Query'),
}

model CreateFirewallRuleResponseBody = {
  firewallId?: string(name='FirewallId', example='8007e18c61024aafbd776d52d0****'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model CreateFirewallRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFirewallRuleResponseBody(name='body'),
}

async function createFirewallRule(request: CreateFirewallRuleRequest): CreateFirewallRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFirewallRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstancesRequest {
  amount?: int32(name='Amount', example='1', minimum=1, maximum=200, position='Query'),
  autoRenew?: boolean(name='AutoRenew', example='false', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', example='1', minimum=1, maximum=36, position='Query'),
  chargeType?: string(name='ChargeType', example='PrePaid', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dataDiskSize?: long(name='DataDiskSize', example='20', minimum=0, maximum=16380, position='Query'),
  imageId: string(name='ImageId', example='e2c9c365024a44369c9b955a998a****', position='Query'),
  period: int32(name='Period', example='1', minimum=1, maximum=36, position='Query'),
  planId: string(name='PlanId', example='swas.s1.c1m1s40b3t05', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CreateInstancesResponseBody = {
  instanceIds?: [ string ](name='InstanceIds'),
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E1FEE'),
}

model CreateInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstancesResponseBody(name='body'),
}

async function createInstances(request: CreateInstancesRequest): CreateInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstances', 'POST', '/', 'json', false, 'json', request);
}

model CreateSnapshotRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  diskId: string(name='DiskId', example='d-bp18kjxg9ebrhsgi****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  snapshotName: string(name='SnapshotName', example='test-SnapshotName', position='Query'),
}

model CreateSnapshotResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  snapshotId?: string(name='SnapshotId', example='s-bp16oazlsold4dks****'),
}

model CreateSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSnapshotResponseBody(name='body'),
}

async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomImageRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  imageId: string(name='ImageId', example='m-2zehv38jjmwva1ee****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteCustomImageResponseBody = {
  requestId?: string(name='RequestId', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model DeleteCustomImageResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCustomImageResponseBody(name='body'),
}

async function deleteCustomImage(request: DeleteCustomImageRequest): DeleteCustomImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomImage', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFirewallRuleRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  ruleId: string(name='RuleId', example='eeea34d9867b4d55a4ff8d5fcfbd****', position='Query'),
}

model DeleteFirewallRuleResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model DeleteFirewallRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFirewallRuleResponseBody(name='body'),
}

async function deleteFirewallRule(request: DeleteFirewallRuleRequest): DeleteFirewallRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFirewallRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSnapshotRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  snapshotId: string(name='SnapshotId', example='s-bp16oazlsold4dks****', position='Query'),
}

model DeleteSnapshotResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model DeleteSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSnapshotResponseBody(name='body'),
}

async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCloudAssistantStatusRequest {
  instanceIds?: [ string ](name='InstanceIds', shrink='json', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeCloudAssistantStatusResponseBody = {
  cloudAssistantStatus?: [ 
    {
      instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
      status?: boolean(name='Status', example='true'),
    }
  ](name='CloudAssistantStatus'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeCloudAssistantStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCloudAssistantStatusResponseBody(name='body'),
}

async function describeCloudAssistantStatus(request: DescribeCloudAssistantStatusRequest): DescribeCloudAssistantStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudAssistantStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatabaseErrorLogsRequest {
  databaseInstanceId: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  endTime: string(name='EndTime', example='2022-09-08T04:04Z', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='30', minimum=30, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  startTime: string(name='StartTime', example='2022-09-07T04:04Z', position='Query'),
}

model DescribeDatabaseErrorLogsResponseBody = {
  errorLogs?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-09-08T12:11:04Z'),
      errorInfo?: string(name='ErrorInfo', example='spid52 DBCC TRACEON 3499, server process ID (SPID) 52. This is an informational message only; no user action is required'),
    }
  ](name='ErrorLogs'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  requestId?: string(name='RequestId', description='Id of the request', example='30637AD6-D977-4833-A54C-CC89483E****'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model DescribeDatabaseErrorLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDatabaseErrorLogsResponseBody(name='body'),
}

async function describeDatabaseErrorLogs(request: DescribeDatabaseErrorLogsRequest): DescribeDatabaseErrorLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatabaseErrorLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatabaseInstanceMetricDataRequest {
  databaseInstanceId: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  endTime: string(name='EndTime', example='2022-09-07T04:04Z', position='Query'),
  metricName: string(name='MetricName', example='MySQL_MemCpuUsage', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  startTime: string(name='StartTime', example='2022-09-06T04:04Z', position='Query'),
}

model DescribeDatabaseInstanceMetricDataResponseBody = {
  dataFormat?: string(name='DataFormat', example='cpuusage&memusage'),
  metricData?: string(name='MetricData', example='[  {     "date": " 2022-09-06T04:04:00Z",\\"value\\":\\"0.77&3.69\\"  } ]'),
  metricName?: string(name='MetricName', example='MySQL_MemCpuUsage'),
  requestId?: string(name='RequestId', description='Id of the request', example='30637AD6-D977-4833-A54C-CC89483E****'),
  unit?: string(name='Unit', example='%'),
}

model DescribeDatabaseInstanceMetricDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDatabaseInstanceMetricDataResponseBody(name='body'),
}

async function describeDatabaseInstanceMetricData(request: DescribeDatabaseInstanceMetricDataRequest): DescribeDatabaseInstanceMetricDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatabaseInstanceMetricData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatabaseInstanceParametersRequest {
  databaseInstanceId: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeDatabaseInstanceParametersResponseBody = {
  configParameters?: [ 
    {
      checkingCode?: string(name='CheckingCode', example='[1-65535]'),
      forceModify?: string(name='ForceModify', example='true'),
      forceRestart?: string(name='ForceRestart', example='false'),
      parameterDescription?: string(name='ParameterDescription', example='Auto-increment columns are incremented by this'),
      parameterName?: string(name='ParameterName', example='auto_increment_increment'),
      parameterValue?: string(name='ParameterValue', example='1'),
    }
  ](name='ConfigParameters'),
  engine?: string(name='Engine', example='MySQL'),
  engineVersion?: string(name='EngineVersion', example='5.5'),
  requestId?: string(name='RequestId', description='Id of the request', example='30637AD6-D977-4833-A54C-CC89483E****'),
  runningParameters?: [ 
    {
      checkingCode?: string(name='CheckingCode', example='[ON|OFF]'),
      forceModify?: string(name='ForceModify', example='true'),
      forceRestart?: string(name='ForceRestart', example='false'),
      parameterDescription?: string(name='ParameterDescription', example='When this variable has a value of 1 (the default), the server automatically grants the EXECUTE and ALTER ROUTINE privileges to the creator of a stored routine, if the user cannot already execute and alter or drop the routine. (The ALTER ROUTINE privilege is required to drop the routine.) The server also automatically drops those privileges from the creator when the routine is dropped. If automatic_sp_privileges is 0, the server does not automatically add or drop these privileges.'),
      parameterName?: string(name='ParameterName', example='autocommit'),
      parameterValue?: string(name='ParameterValue', example='ON'),
    }
  ](name='RunningParameters'),
}

model DescribeDatabaseInstanceParametersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDatabaseInstanceParametersResponseBody(name='body'),
}

async function describeDatabaseInstanceParameters(request: DescribeDatabaseInstanceParametersRequest): DescribeDatabaseInstanceParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatabaseInstanceParameters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatabaseInstancesRequest {
  databaseInstanceIds?: string(name='DatabaseInstanceIds', example='["swasdb-xxx******","swasdb-yyy******"]', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeDatabaseInstancesResponseBody = {
  databaseInstances?: [ 
    {
      businessStatus?: string(name='BusinessStatus', example='normal'),
      chargeType?: string(name='ChargeType', example='PrePaid'),
      cpu?: string(name='Cpu', example='1'),
      creationTime?: string(name='CreationTime', example='2022-09-01T02:39:46Z'),
      databaseInstanceEdition?: string(name='DatabaseInstanceEdition', example='swas.db.c1m1s25'),
      databaseInstanceId?: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****'),
      databaseInstanceName?: string(name='DatabaseInstanceName'),
      databaseInstanceStatus?: string(name='DatabaseInstanceStatus', example='Running'),
      databaseVersion?: string(name='DatabaseVersion', example='5.7'),
      expiredTime?: string(name='ExpiredTime', example='2022-10-01T16:00:00Z'),
      memory?: string(name='Memory', example='1'),
      privateConnection?: string(name='PrivateConnection', example='rm-bp1d39opj7906****.mysql.rds.aliyuncs.com'),
      publicConnection?: string(name='PublicConnection', example='db-38263fa955774501a2ae1bdaed6f****.mysql.rds.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      storage?: int32(name='Storage', example='25'),
      superAccountName?: string(name='SuperAccountName', example='administrator'),
    }
  ](name='DatabaseInstances'),
  pageNumber?: int32(name='PageNumber', example='10'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', description='Id of the request', example='20758A-585D-4A41-A9B2-28DA8F4****'),
  totalCount?: int32(name='TotalCount', example='5'),
}

model DescribeDatabaseInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDatabaseInstancesResponseBody(name='body'),
}

async function describeDatabaseInstances(request: DescribeDatabaseInstancesRequest): DescribeDatabaseInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatabaseInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDatabaseSlowLogRecordsRequest {
  databaseInstanceId: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  endTime: string(name='EndTime', example='2022-09-08T04:04Z', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=30, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  startTime: string(name='StartTime', example='2022-09-07T04:04Z', position='Query'),
}

model DescribeDatabaseSlowLogRecordsResponseBody = {
  engine?: string(name='Engine', example='MySQL'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  physicalIORead?: long(name='PhysicalIORead', example='200'),
  requestId?: string(name='RequestId', description='Id of the request', example='30637AD6-D977-4833-A54C-CC89483E****'),
  slowLogs?: [ 
    {
      DBName?: string(name='DBName', example='testDB'),
      executionStartTime?: string(name='ExecutionStartTime', example='2022-09-08T01:40:44Z'),
      hostAddress?: string(name='HostAddress', example='xxx[xxx] @ [1xx.xxx.xxx.xx]'),
      lockTimes?: long(name='LockTimes', example='0'),
      parseRowCounts?: long(name='ParseRowCounts', example='1'),
      queryTimeMS?: long(name='QueryTimeMS', example='2001'),
      queryTimes?: long(name='QueryTimes', example='2'),
      returnRowCounts?: long(name='ReturnRowCounts', example='1'),
      SQLText?: string(name='SQLText', example='select sleep(2)'),
    }
  ](name='SlowLogs'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model DescribeDatabaseSlowLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDatabaseSlowLogRecordsResponseBody(name='body'),
}

async function describeDatabaseSlowLogRecords(request: DescribeDatabaseSlowLogRecordsRequest): DescribeDatabaseSlowLogRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDatabaseSlowLogRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInvocationResultRequest {
  instanceId: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****', position='Query'),
  invokeId: string(name='InvokeId', example='t-bj02prjhw1n****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeInvocationResultResponseBody = {
  invocationResult?: {
    errorCode?: string(name='ErrorCode', example='InstanceNotExists'),
    errorInfo?: string(name='ErrorInfo', example='the specified instance does not exists'),
    exitCode?: long(name='ExitCode', example='0'),
    finishedTime?: string(name='FinishedTime', example='2022-07-11T06:37:17Z'),
    instanceId?: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****'),
    invocationStatus?: string(name='InvocationStatus', example='Success'),
    invokeId?: string(name='InvokeId', example='t-bj02prjje65****'),
    invokeRecordStatus?: string(name='InvokeRecordStatus', example='Finished'),
    invokeUser?: string(name='InvokeUser', example='root'),
    output?: string(name='Output', example='YWRtaW4K'),
    startTime?: string(name='StartTime', example='2022-07-11T06:37:16Z'),
  }(name='InvocationResult'),
  requestId?: string(name='RequestId', description='Id of the request', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model DescribeInvocationResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInvocationResultResponseBody(name='body'),
}

async function describeInvocationResult(request: DescribeInvocationResultRequest): DescribeInvocationResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInvocationResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInvocationsRequest {
  instanceId: string(name='InstanceId', example='3a658ca270df4df39f22e289b338****', position='Query'),
  invokeStatus?: string(name='InvokeStatus', example='Finished', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeInvocationsResponseBody = {
  invocations?: [ 
    {
      commandContent?: string(name='CommandContent', example='bHM='),
      commandName?: string(name='CommandName', example='testname'),
      commandType?: string(name='CommandType', example='RunShellScript'),
      creationTime?: string(name='CreationTime', example='2022-07-11T06:37:16Z'),
      invocationStatus?: string(name='InvocationStatus', example='Success'),
      invokeId?: string(name='InvokeId', example='t-hz02p9545t6****'),
      invokeStatus?: string(name='InvokeStatus', example='Finished'),
      parameters?: map[string]any(name='Parameters', example='{}'),
    }
  ](name='Invocations'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='30637AD6-D977-4833-A54C-CC89483E****'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeInvocationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInvocationsResponseBody(name='body'),
}

async function describeInvocations(request: DescribeInvocationsRequest): DescribeInvocationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInvocations', 'POST', '/', 'json', false, 'json', request);
}

model InstallCloudAssistantRequest {
  instanceIds: [ string ](name='InstanceIds', shrink='json', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model InstallCloudAssistantResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model InstallCloudAssistantResponse = {
  headers: map[string]string(name='headers'),
  body: InstallCloudAssistantResponseBody(name='body'),
}

async function installCloudAssistant(request: InstallCloudAssistantRequest): InstallCloudAssistantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallCloudAssistant', 'POST', '/', 'json', false, 'json', request);
}

model ListDisksRequest {
  diskIds?: string(name='DiskIds', example='["d-bp14wq0149cpp2x****", "d-bp14wq0149cpp2y****"]', position='Query'),
  instanceId?: string(name='InstanceId', example='2ad1ae67295445f598017499dc****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListDisksResponseBody = {
  disks?: [ 
    {
      category?: string(name='Category', example='ESSD'),
      creationTime?: string(name='CreationTime', example='2021-03-08T05:31:06Z'),
      device?: string(name='Device', example='/dev/xvda'),
      diskChargeType?: string(name='DiskChargeType', example='PrePaid'),
      diskId?: string(name='DiskId', example='d-bp14wq0149cpp2x****'),
      diskName?: string(name='DiskName', example='SystemDisk'),
      diskType?: string(name='DiskType', example='System'),
      instanceId?: string(name='InstanceId', example='2ad1ae67295445f598017499dc****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      size?: int32(name='Size', example='50'),
      status?: string(name='Status', example='In_use'),
    }
  ](name='Disks'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListDisksResponse = {
  headers: map[string]string(name='headers'),
  body: ListDisksResponseBody(name='body'),
}

async function listDisks(request: ListDisksRequest): ListDisksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDisks', 'POST', '/', 'json', false, 'json', request);
}

model ListFirewallRulesRequest {
  instanceId: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListFirewallRulesResponseBody = {
  firewallRules?: [ 
    {
      port?: string(name='Port', example='3306'),
      remark?: string(name='Remark'),
      ruleId?: string(name='RuleId', example='eeea34d9867b4d55a4ff8d5fcfbd****'),
      ruleProtocol?: string(name='RuleProtocol', example='TCP'),
    }
  ](name='FirewallRules'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  totalCount?: int32(name='TotalCount', example='4'),
}

model ListFirewallRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListFirewallRulesResponseBody(name='body'),
}

async function listFirewallRules(request: ListFirewallRulesRequest): ListFirewallRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFirewallRules', 'POST', '/', 'json', false, 'json', request);
}

model ListImagesRequest {
  imageIds?: string(name='ImageIds', example='["fe9c66133a9d4688872869726b52****", "794c230fd3e64ea19f83f4d7a0ad****"]', position='Query'),
  imageType?: string(name='ImageType', example='system', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListImagesResponseBody = {
  images?: [ 
    {
      description?: string(name='Description'),
      imageId?: string(name='ImageId', example='794c230fd3e64ea19f83f4d7a0ad****'),
      imageName?: string(name='ImageName', example='WordPress-4.8.1'),
      imageType?: string(name='ImageType', example='app'),
      platform?: string(name='Platform', example='Linux'),
    }
  ](name='Images'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model ListImagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListImagesResponseBody(name='body'),
}

async function listImages(request: ListImagesRequest): ListImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListImages', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancePlansModificationRequest {
  instanceId: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListInstancePlansModificationResponseBody = {
  plans?: [ 
    {
      bandwidth?: int32(name='Bandwidth', example='3'),
      core?: int32(name='Core', example='2'),
      currency?: string(name='Currency', example='CNY'),
      diskSize?: int32(name='DiskSize', example='40'),
      diskType?: string(name='DiskType', example='ESSD'),
      flow?: int32(name='Flow', example='400'),
      memory?: int32(name='Memory', example='1'),
      originPrice?: double(name='OriginPrice', example='60'),
      planId?: string(name='PlanId', example='swas.s2.c2m1s40b3t04'),
      supportPlatform?: string(name='SupportPlatform', example='["Linux","Windows"]'),
    }
  ](name='Plans'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model ListInstancePlansModificationResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancePlansModificationResponseBody(name='body'),
}

async function listInstancePlansModification(request: ListInstancePlansModificationRequest): ListInstancePlansModificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstancePlansModification', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancesRequest {
  chargeType?: string(name='ChargeType', example='PrePaid', position='Query'),
  instanceIds?: string(name='InstanceIds', example='["2ad1ae67295445f598017499dc****", "2ad1ae67295445f598017123dc****"]', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  publicIpAddresses?: string(name='PublicIpAddresses', example='["42.1.**.**", "42.2.**.**"]', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      chargeType?: string(name='ChargeType', example='PrePaid'),
      creationTime?: string(name='CreationTime', example='2021-03-08T05:31:06Z'),
      ddosStatus?: string(name='DdosStatus', example='Normal'),
      expiredTime?: string(name='ExpiredTime', example='2021-05-08T16:00:00Z'),
      imageId?: string(name='ImageId', example='fe9c66133a9d4688872869726b52****'),
      innerIpAddress?: string(name='InnerIpAddress', example='172.26.XX.XX'),
      instanceId?: string(name='InstanceId', example='2ad1ae67295445f598017499dc****'),
      instanceName?: string(name='InstanceName', example='test-InstanceName'),
      planId?: string(name='PlanId', example='swas.s2.c2m2s50b4t08'),
      publicIpAddress?: string(name='PublicIpAddress', example='42.1.XX.XX'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: string(name='Status', example='Running'),
    }
  ](name='Instances'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancesTrafficPackagesRequest {
  instanceIds: string(name='InstanceIds', example='["2ad1ae67295445f598017499dc******","2ad1ae67295445f598017499dc******"]', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListInstancesTrafficPackagesResponseBody = {
  instanceTrafficPackageUsages?: [ 
    {
      instanceId?: string(name='InstanceId', example='ccscqwqwqqqw****'),
      trafficOverflow?: long(name='TrafficOverflow', example='0'),
      trafficPackageRemaining?: long(name='TrafficPackageRemaining', example='10000'),
      trafficPackageTotal?: long(name='TrafficPackageTotal', example='20000'),
      trafficUsed?: long(name='TrafficUsed', example='10000'),
    }
  ](name='InstanceTrafficPackageUsages'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model ListInstancesTrafficPackagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesTrafficPackagesResponseBody(name='body'),
}

async function listInstancesTrafficPackages(request: ListInstancesTrafficPackagesRequest): ListInstancesTrafficPackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstancesTrafficPackages', 'POST', '/', 'json', false, 'json', request);
}

model ListPlansRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListPlansResponseBody = {
  plans?: [ 
    {
      bandwidth?: int32(name='Bandwidth', example='3'),
      core?: int32(name='Core', example='2'),
      currency?: string(name='Currency', example='CNY'),
      diskSize?: int32(name='DiskSize', example='40'),
      diskType?: string(name='DiskType', example='ESSD'),
      flow?: int32(name='Flow', example='400'),
      memory?: int32(name='Memory', example='1'),
      originPrice?: double(name='OriginPrice', example='60'),
      planId?: string(name='PlanId', example='swas.s2.c2m1s40b3t04'),
      supportPlatform?: string(name='SupportPlatform', example='["Linux","Windows"]'),
    }
  ](name='Plans'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model ListPlansResponse = {
  headers: map[string]string(name='headers'),
  body: ListPlansResponseBody(name='body'),
}

async function listPlans(request: ListPlansRequest): ListPlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPlans', 'POST', '/', 'json', false, 'json', request);
}

model ListRegionsRequest {
}

model ListRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint', example='swas.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListSnapshotsRequest {
  diskId?: string(name='DiskId', example='d-bp14wq0149cpp2xy****', position='Query'),
  instanceId?: string(name='InstanceId', example='2ad1ae67295445f598017499dc****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  snapshotIds?: string(name='SnapshotIds', example='["s-bp16oazlsold4dks****", "s-bp16oazlsold4abc****"]', position='Query'),
}

model ListSnapshotsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  snapshots?: [ 
    {
      creationTime?: string(name='CreationTime', example='2021-03-09T07:12:49Z'),
      progress?: string(name='Progress', example='100%'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      remark?: string(name='Remark', example='test-Remark'),
      snapshotId?: string(name='SnapshotId', example='s-bp16oazlsold4dks****'),
      snapshotName?: string(name='SnapshotName', example='test-SnapshotName'),
      sourceDiskId?: string(name='SourceDiskId', example='d-bp14wq0149cpp2xy****'),
      sourceDiskType?: string(name='SourceDiskType', example='System'),
      status?: string(name='Status', example='Accomplished'),
    }
  ](name='Snapshots'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSnapshotsResponseBody(name='body'),
}

async function listSnapshots(request: ListSnapshotsRequest): ListSnapshotsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSnapshots', 'POST', '/', 'json', false, 'json', request);
}

model LoginInstanceRequest {
  instanceId: string(name='InstanceId', example='9ae7106e68eb4402b0dcbd48a9de****', position='Query'),
  password?: string(name='Password', example='Test****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  username?: string(name='Username', example='administrator', position='Query'),
}

model LoginInstanceResponseBody = {
  redirectUrl?: string(name='RedirectUrl', example='https://ecs-workbench.aliyun.com/view/instance/single/gbktfz****'),
  requestId?: string(name='RequestId', description='Id of the request', example='C2DE174B-7196-5778-A00D-6EA2601B****'),
}

model LoginInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: LoginInstanceResponseBody(name='body'),
}

async function loginInstance(request: LoginInstanceRequest): LoginInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LoginInstance', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDatabaseInstanceDescriptionRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  databaseInstanceDescription: string(name='DatabaseInstanceDescription', position='Query'),
  databaseInstanceId: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ModifyDatabaseInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model ModifyDatabaseInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDatabaseInstanceDescriptionResponseBody(name='body'),
}

async function modifyDatabaseInstanceDescription(request: ModifyDatabaseInstanceDescriptionRequest): ModifyDatabaseInstanceDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDatabaseInstanceDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDatabaseInstanceParameterRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  databaseInstanceId: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  forceRestart?: boolean(name='ForceRestart', example='false', position='Query'),
  parameters: string(name='Parameters', example='{"delayed_insert_timeout":"600","max_length_for_sort_data":"2048"}', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ModifyDatabaseInstanceParameterResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model ModifyDatabaseInstanceParameterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDatabaseInstanceParameterResponseBody(name='body'),
}

async function modifyDatabaseInstanceParameter(request: ModifyDatabaseInstanceParameterRequest): ModifyDatabaseInstanceParameterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDatabaseInstanceParameter', 'POST', '/', 'json', false, 'json', request);
}

model ModifyImageShareStatusRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  imageId: string(name='ImageId', example='m-saacssasc****', position='Query'),
  operation: string(name='Operation', example='Share', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ModifyImageShareStatusResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C****'),
}

model ModifyImageShareStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyImageShareStatusResponseBody(name='body'),
}

async function modifyImageShareStatus(request: ModifyImageShareStatusRequest): ModifyImageShareStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyImageShareStatus', 'POST', '/', 'json', false, 'json', request);
}

model RebootInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model RebootInstanceResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model RebootInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RebootInstanceResponseBody(name='body'),
}

async function rebootInstance(request: RebootInstanceRequest): RebootInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebootInstance', 'POST', '/', 'json', false, 'json', request);
}

model ReleasePublicConnectionRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  databaseInstanceId: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ReleasePublicConnectionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model ReleasePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleasePublicConnectionResponseBody(name='body'),
}

async function releasePublicConnection(request: ReleasePublicConnectionRequest): ReleasePublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleasePublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model RenewInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****', position='Query'),
  period: int32(name='Period', example='1', minimum=1, maximum=36, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model RenewInstanceResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewInstance', 'POST', '/', 'json', false, 'json', request);
}

model ResetDatabaseAccountPasswordRequest {
  accountPassword: string(name='AccountPassword', example='Password****', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  databaseInstanceId: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ResetDatabaseAccountPasswordResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model ResetDatabaseAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetDatabaseAccountPasswordResponseBody(name='body'),
}

async function resetDatabaseAccountPassword(request: ResetDatabaseAccountPasswordRequest): ResetDatabaseAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetDatabaseAccountPassword', 'POST', '/', 'json', false, 'json', request);
}

model ResetDiskRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  diskId: string(name='DiskId', example='d-bp14wq0149cpp2xy****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  snapshotId: string(name='SnapshotId', example='s-bp16oazlsold4dks****', position='Query'),
}

model ResetDiskResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model ResetDiskResponse = {
  headers: map[string]string(name='headers'),
  body: ResetDiskResponseBody(name='body'),
}

async function resetDisk(request: ResetDiskRequest): ResetDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetDisk', 'POST', '/', 'json', false, 'json', request);
}

model ResetSystemRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  imageId?: string(name='ImageId', example='794c230fd3e64ea19f83f4d7a0ad****', position='Query'),
  instanceId: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ResetSystemResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model ResetSystemResponse = {
  headers: map[string]string(name='headers'),
  body: ResetSystemResponseBody(name='body'),
}

async function resetSystem(request: ResetSystemRequest): ResetSystemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetSystem', 'POST', '/', 'json', false, 'json', request);
}

model RestartDatabaseInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  databaseInstanceId: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model RestartDatabaseInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model RestartDatabaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RestartDatabaseInstanceResponseBody(name='body'),
}

async function restartDatabaseInstance(request: RestartDatabaseInstanceRequest): RestartDatabaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartDatabaseInstance', 'POST', '/', 'json', false, 'json', request);
}

model RunCommandRequest {
  commandContent: string(name='CommandContent', example='ifconfig -s', position='Query'),
  enableParameter?: boolean(name='EnableParameter', example='false', position='Query'),
  instanceId: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****', position='Query'),
  name: string(name='Name', example='testName', position='Query'),
  parameters?: map[string]any(name='Parameters', example='{"name":"Jack", "accessKey":"LTAIdyvdIqaRY****"}', shrink='json', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  timeout?: int32(name='Timeout', example='60', position='Query'),
  type: string(name='Type', example='RunShellScript', position='Query'),
  windowsPasswordName?: string(name='WindowsPasswordName', example='axtSecretPassword', position='Query'),
  workingDir?: string(name='WorkingDir', example='/home/', position='Query'),
  workingUser?: string(name='WorkingUser', example='root', position='Query'),
}

model RunCommandResponseBody = {
  invokeId?: string(name='InvokeId', example='t-hz02p9545t6****'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model RunCommandResponse = {
  headers: map[string]string(name='headers'),
  body: RunCommandResponseBody(name='body'),
}

async function runCommand(request: RunCommandRequest): RunCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunCommand', 'POST', '/', 'json', false, 'json', request);
}

model StartDatabaseInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  databaseInstanceId: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model StartDatabaseInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model StartDatabaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartDatabaseInstanceResponseBody(name='body'),
}

async function startDatabaseInstance(request: StartDatabaseInstanceRequest): StartDatabaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDatabaseInstance', 'POST', '/', 'json', false, 'json', request);
}

model StartInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model StartInstanceResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartInstanceResponseBody(name='body'),
}

async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartInstance', 'POST', '/', 'json', false, 'json', request);
}

model StopDatabaseInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  databaseInstanceId: string(name='DatabaseInstanceId', example='db-38263fa955774501a2ae1bdaed6f****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model StopDatabaseInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='30637AD6-D977-4833-A54C-CC89483E****'),
}

model StopDatabaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StopDatabaseInstanceResponseBody(name='body'),
}

async function stopDatabaseInstance(request: StopDatabaseInstanceRequest): StopDatabaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDatabaseInstance', 'POST', '/', 'json', false, 'json', request);
}

model StopInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model StopInstanceResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StopInstanceResponseBody(name='body'),
}

async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopInstance', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****', position='Query'),
  instanceName?: string(name='InstanceName', example='test-InstanceName', position='Query'),
  password?: string(name='Password', example='Test123!', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model UpdateInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model UpdateInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceAttributeResponseBody(name='body'),
}

async function updateInstanceAttribute(request: UpdateInstanceAttributeRequest): UpdateInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', example='ace0706b2ac4454d984295a94213****', position='Query'),
  planId: string(name='PlanId', example='swas.s2.c2m2s50b4t08', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model UpgradeInstanceResponseBody = {
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model UpgradeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeInstanceResponseBody(name='body'),
}

async function upgradeInstance(request: UpgradeInstanceRequest): UpgradeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeInstance', 'POST', '/', 'json', false, 'json', request);
}

