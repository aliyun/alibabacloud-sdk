/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cis', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateDiagnosisRequest {
  clusterUid?: string(name='ClusterUid'),
  clusterRegionId?: string(name='ClusterRegionId'),
  type?: string(name='Type'),
  target?: string(name='Target'),
  ownerUid?: long(name='OwnerUid'),
}

model CreateDiagnosisResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='bool of success'),
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  diagnosisId?: string(name='DiagnosisId'),
}

model CreateDiagnosisResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDiagnosisResponseBody(name='body'),
}

async function createDiagnosisWithOptions(request: CreateDiagnosisRequest, runtime: Util.RuntimeOptions): CreateDiagnosisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDiagnosis', '2018-08-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDiagnosis(request: CreateDiagnosisRequest): CreateDiagnosisResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiagnosisWithOptions(request, runtime);
}

model GetClusterReportSummaryRequest {
  reportUid?: string(name='ReportUid'),
  clusterRegionId?: string(name='ClusterRegionId'),
  ownerUid?: long(name='OwnerUid'),
}

model GetClusterReportSummaryResponseBody = {
  checkStartTime?: long(name='CheckStartTime'),
  isSuccess?: boolean(name='IsSuccess'),
  checkEndTime?: long(name='CheckEndTime'),
  uid?: string(name='Uid'),
  checklistResults?: [ 
    {
      checkStatus?: string(name='CheckStatus'),
      checkSummary?: {
        process?: int32(name='Process'),
        code?: string(name='Code'),
      }(name='CheckSummary'),
      name?: string(name='Name'),
    }
  ](name='ChecklistResults'),
  clusterUid?: string(name='ClusterUid'),
  requestId?: string(name='RequestId'),
  createTime?: string(name='CreateTime'),
  checkStatus?: string(name='CheckStatus'),
  checkSummary?: {
    process?: int32(name='Process'),
    code?: string(name='Code'),
  }(name='CheckSummary'),
  code?: string(name='Code'),
  name?: string(name='Name'),
  addonName?: string(name='AddonName'),
}

model GetClusterReportSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: GetClusterReportSummaryResponseBody(name='body'),
}

async function getClusterReportSummaryWithOptions(request: GetClusterReportSummaryRequest, runtime: Util.RuntimeOptions): GetClusterReportSummaryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetClusterReportSummary', '2018-08-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getClusterReportSummary(request: GetClusterReportSummaryRequest): GetClusterReportSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getClusterReportSummaryWithOptions(request, runtime);
}

model ListReportTaskRequest {
  clusterRegionId?: string(name='ClusterRegionId'),
  clusterUid?: string(name='ClusterUid'),
  reportName?: string(name='ReportName'),
}

model ListReportTaskResponseBody = {
  requestId?: map[string]any(name='RequestId'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  totalCount?: long(name='TotalCount'),
  reportTasks?: [ 
    {
      endTime?: long(name='EndTime'),
      reportUid?: string(name='ReportUid'),
      result?: string(name='Result'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
      taskId?: string(name='TaskId'),
    }
  ](name='ReportTasks'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListReportTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ListReportTaskResponseBody(name='body'),
}

async function listReportTaskWithOptions(request: ListReportTaskRequest, runtime: Util.RuntimeOptions): ListReportTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListReportTask', '2018-08-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listReportTask(request: ListReportTaskRequest): ListReportTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return listReportTaskWithOptions(request, runtime);
}

model CreateClusterReportRequest {
  clusterUid?: string(name='ClusterUid'),
  clusterRegionId?: string(name='ClusterRegionId'),
  reportName?: string(name='ReportName'),
  ownerUid?: long(name='OwnerUid'),
  addonName?: string(name='AddonName'),
}

model CreateClusterReportResponseBody = {
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  reportUid?: string(name='ReportUid'),
}

model CreateClusterReportResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClusterReportResponseBody(name='body'),
}

async function createClusterReportWithOptions(request: CreateClusterReportRequest, runtime: Util.RuntimeOptions): CreateClusterReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateClusterReport', '2018-08-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createClusterReport(request: CreateClusterReportRequest): CreateClusterReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return createClusterReportWithOptions(request, runtime);
}

model GetClusterCheckResultRequest {
  reportUid?: string(name='ReportUid'),
  clusterRegionId?: string(name='ClusterRegionId'),
  checklistName?: string(name='ChecklistName'),
}

model GetClusterCheckResultResponseBody = {
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
  checkEntryResults?: [ 
    {
      entryGroupName?: string(name='EntryGroupName'),
      normalInstanceResult?: [ 
        {
          extend?: map[string]any(name='Extend'),
          checkpointResults?: [ 
            {
              adviseCode?: string(name='AdviseCode'),
              messageCode?: string(name='MessageCode'),
              affectCode?: string(name='AffectCode'),
              messageLevel?: string(name='MessageLevel'),
              checkpointName?: string(name='CheckpointName'),
            }
          ](name='CheckpointResults'),
          instanceName?: string(name='InstanceName'),
          instanceId?: string(name='InstanceId'),
          instanceType?: string(name='InstanceType'),
        }
      ](name='NormalInstanceResult'),
      unknownInstanceResult?: [ 
        {
          extend?: map[string]any(name='Extend'),
          checkpointResults?: [ 
            {
              adviseCode?: string(name='AdviseCode'),
              messageCode?: string(name='MessageCode'),
              affectCode?: string(name='AffectCode'),
              messageLevel?: string(name='MessageLevel'),
              checkpointName?: string(name='CheckpointName'),
            }
          ](name='CheckpointResults'),
          instanceName?: string(name='InstanceName'),
          instanceId?: string(name='InstanceId'),
          instanceType?: string(name='InstanceType'),
        }
      ](name='UnknownInstanceResult'),
      errorInstanceResult?: [ 
        {
          extend?: map[string]any(name='Extend'),
          checkpointResults?: [ 
            {
              adviseCode?: string(name='AdviseCode'),
              messageCode?: string(name='MessageCode'),
              affectCode?: string(name='AffectCode'),
              messageLevel?: string(name='MessageLevel'),
              checkpointName?: string(name='CheckpointName'),
            }
          ](name='CheckpointResults'),
          instanceName?: string(name='InstanceName'),
          instanceId?: string(name='InstanceId'),
          instanceType?: string(name='InstanceType'),
        }
      ](name='ErrorInstanceResult'),
      entryName?: string(name='EntryName'),
      checkSummary?: {
        process?: int32(name='Process'),
        unknownCount?: int32(name='UnknownCount'),
        warnCount?: int32(name='WarnCount'),
        normalCount?: int32(name='NormalCount'),
        code?: string(name='Code'),
        errorCount?: int32(name='ErrorCount'),
      }(name='CheckSummary'),
      warnInstanceResult?: [ 
        {
          extend?: map[string]any(name='Extend'),
          checkpointResults?: [ 
            {
              adviseCode?: string(name='AdviseCode'),
              messageCode?: string(name='MessageCode'),
              affectCode?: string(name='AffectCode'),
              messageLevel?: string(name='MessageLevel'),
              checkpointName?: string(name='CheckpointName'),
            }
          ](name='CheckpointResults'),
          instanceName?: string(name='InstanceName'),
          instanceId?: string(name='InstanceId'),
          instanceType?: string(name='InstanceType'),
        }
      ](name='WarnInstanceResult'),
    }
  ](name='CheckEntryResults'),
  checkStatus?: string(name='CheckStatus'),
  checkSummary?: {
    process?: int32(name='Process'),
    unknownCount?: int32(name='UnknownCount'),
    warnCount?: int32(name='WarnCount'),
    normalCount?: int32(name='NormalCount'),
    code?: string(name='Code'),
    errorCount?: int32(name='ErrorCount'),
  }(name='CheckSummary'),
  code?: string(name='Code'),
  reportUid?: string(name='ReportUid'),
  name?: string(name='Name'),
}

model GetClusterCheckResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetClusterCheckResultResponseBody(name='body'),
}

async function getClusterCheckResultWithOptions(request: GetClusterCheckResultRequest, runtime: Util.RuntimeOptions): GetClusterCheckResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetClusterCheckResult', '2018-08-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getClusterCheckResult(request: GetClusterCheckResultRequest): GetClusterCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getClusterCheckResultWithOptions(request, runtime);
}

model DeleteReportTaskRuleRequest {
  clusterRegionId?: string(name='ClusterRegionId'),
  clusterUid?: string(name='ClusterUid'),
  ownerUid?: long(name='OwnerUid'),
  ruleId?: string(name='RuleId'),
}

model DeleteReportTaskRuleResponseBody = {
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  reportUid?: string(name='ReportUid'),
}

model DeleteReportTaskRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteReportTaskRuleResponseBody(name='body'),
}

async function deleteReportTaskRuleWithOptions(request: DeleteReportTaskRuleRequest, runtime: Util.RuntimeOptions): DeleteReportTaskRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteReportTaskRule', '2018-08-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteReportTaskRule(request: DeleteReportTaskRuleRequest): DeleteReportTaskRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteReportTaskRuleWithOptions(request, runtime);
}

model ListDiagnosisResultRequest {
  clusterUid?: string(name='ClusterUid'),
  clusterRegionId?: string(name='ClusterRegionId'),
  since?: long(name='Since'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  ownerUid?: long(name='OwnerUid'),
}

model ListDiagnosisResultResponseBody = {
  isSuccess?: boolean(name='IsSuccess'),
  code?: string(name='Code'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
  pageSize?: long(name='PageSize'),
  pageNo?: long(name='PageNo'),
  diagnosisResults?: [ 
    {
      diagnosisId?: string(name='DiagnosisId'),
      type?: string(name='Type'),
      target?: string(name='Target'),
      status?: long(name='Status'),
      code?: long(name='Code'),
      message?: string(name='Message'),
      created?: long(name='Created'),
      finished?: long(name='Finished'),
    }
  ](name='DiagnosisResults'),
}

model ListDiagnosisResultResponse = {
  headers: map[string]string(name='headers'),
  body: ListDiagnosisResultResponseBody(name='body'),
}

async function listDiagnosisResultWithOptions(request: ListDiagnosisResultRequest, runtime: Util.RuntimeOptions): ListDiagnosisResultResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListDiagnosisResult', '2018-08-30', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listDiagnosisResult(request: ListDiagnosisResultRequest): ListDiagnosisResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDiagnosisResultWithOptions(request, runtime);
}

model GetDiagnosisCheckItemRequest {
  ownerUid?: long(name='OwnerUid'),
  diagnosisId?: string(name='DiagnosisId'),
}

model GetDiagnosisCheckItemResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  isSuccess?: boolean(name='IsSuccess'),
  code?: string(name='Code'),
  checkItems?: [ 
    {
      group?: string(name='Group'),
      name?: string(name='Name'),
      refer?: string(name='Refer'),
      value?: string(name='Value'),
      level?: string(name='Level'),
      message?: string(name='Message'),
    }
  ](name='CheckItems'),
}

model GetDiagnosisCheckItemResponse = {
  headers: map[string]string(name='headers'),
  body: GetDiagnosisCheckItemResponseBody(name='body'),
}

async function getDiagnosisCheckItemWithOptions(request: GetDiagnosisCheckItemRequest, runtime: Util.RuntimeOptions): GetDiagnosisCheckItemResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDiagnosisCheckItem', '2018-08-30', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDiagnosisCheckItem(request: GetDiagnosisCheckItemRequest): GetDiagnosisCheckItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDiagnosisCheckItemWithOptions(request, runtime);
}

model ListReportTaskRuleRequest {
  clusterUid?: string(name='ClusterUid'),
  clusterRegionId?: string(name='ClusterRegionId'),
}

model ListReportTaskRuleResponseBody = {
  requestId?: map[string]any(name='RequestId'),
  reportTaskRules?: [ 
    {
      clusterUid?: string(name='ClusterUid'),
      reportName?: string(name='ReportName'),
      scheduleRule?: string(name='ScheduleRule'),
      ruleId?: string(name='RuleId'),
      timeZoneId?: string(name='TimeZoneId'),
    }
  ](name='ReportTaskRules'),
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
}

model ListReportTaskRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ListReportTaskRuleResponseBody(name='body'),
}

async function listReportTaskRuleWithOptions(request: ListReportTaskRuleRequest, runtime: Util.RuntimeOptions): ListReportTaskRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListReportTaskRule', '2018-08-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listReportTaskRule(request: ListReportTaskRuleRequest): ListReportTaskRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listReportTaskRuleWithOptions(request, runtime);
}

model CreateReportTaskRuleRequest {
  clusterUid?: string(name='ClusterUid'),
  clusterRegionId?: string(name='ClusterRegionId'),
  reportName?: string(name='ReportName'),
  ownerUid?: long(name='OwnerUid'),
  scheduleRule?: string(name='ScheduleRule'),
  timeZoneId?: string(name='TimeZoneId'),
}

model CreateReportTaskRuleResponseBody = {
  isSuccess?: boolean(name='IsSuccess'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  ruleId?: string(name='RuleId'),
}

model CreateReportTaskRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateReportTaskRuleResponseBody(name='body'),
}

async function createReportTaskRuleWithOptions(request: CreateReportTaskRuleRequest, runtime: Util.RuntimeOptions): CreateReportTaskRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateReportTaskRule', '2018-08-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createReportTaskRule(request: CreateReportTaskRuleRequest): CreateReportTaskRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createReportTaskRuleWithOptions(request, runtime);
}

model ListClusterReportSummaryRequest {
  clusterUid?: string(name='ClusterUid'),
  pageNo?: string(name='PageNo'),
  pageSize?: string(name='PageSize'),
  clusterRegionId?: string(name='ClusterRegionId'),
  reportName?: string(name='ReportName'),
  addonName?: string(name='AddonName'),
}

model ListClusterReportSummaryResponseBody = {
  isSuccess?: boolean(name='IsSuccess'),
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNo?: int32(name='PageNo'),
  code?: string(name='Code'),
  reportSummaries?: [ 
    {
      checkStatus?: string(name='CheckStatus'),
      checkStartTime?: long(name='CheckStartTime'),
      createTime?: string(name='CreateTime'),
      checkSummary?: {
        process?: int32(name='Process'),
        code?: string(name='Code'),
      }(name='CheckSummary'),
      clusterUid?: string(name='ClusterUid'),
      name?: string(name='Name'),
      checklistResults?: [ 
        {
          checkStatus?: string(name='CheckStatus'),
          checkSummary?: {
            process?: int32(name='Process'),
            code?: string(name='Code'),
          }(name='CheckSummary'),
          name?: string(name='Name'),
        }
      ](name='ChecklistResults'),
      uid?: string(name='Uid'),
      checkEndTime?: long(name='CheckEndTime'),
    }
  ](name='ReportSummaries'),
}

model ListClusterReportSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: ListClusterReportSummaryResponseBody(name='body'),
}

async function listClusterReportSummaryWithOptions(request: ListClusterReportSummaryRequest, runtime: Util.RuntimeOptions): ListClusterReportSummaryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListClusterReportSummary', '2018-08-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listClusterReportSummary(request: ListClusterReportSummaryRequest): ListClusterReportSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClusterReportSummaryWithOptions(request, runtime);
}

model GetDiagnosisResultRequest {
  ownerUid?: long(name='OwnerUid'),
  diagnosisId?: string(name='DiagnosisId'),
}

model GetDiagnosisResultResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='bool of success'),
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  diagnosis?: {
    diagnosisId?: string(name='DiagnosisId'),
    clusterUid?: string(name='ClusterUid'),
    type?: string(name='Type'),
    target?: string(name='Target'),
    status?: long(name='Status'),
    message?: string(name='Message'),
    code?: long(name='Code'),
    result?: string(name='Result'),
    created?: string(name='Created'),
    finished?: string(name='Finished'),
  }(name='Diagnosis'),
}

model GetDiagnosisResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetDiagnosisResultResponseBody(name='body'),
}

async function getDiagnosisResultWithOptions(request: GetDiagnosisResultRequest, runtime: Util.RuntimeOptions): GetDiagnosisResultResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDiagnosisResult', '2018-08-30', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDiagnosisResult(request: GetDiagnosisResultRequest): GetDiagnosisResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDiagnosisResultWithOptions(request, runtime);
}

