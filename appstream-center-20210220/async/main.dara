/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'appstream-center';
  @version = '2021-02-20';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model FindIdpListByLoginIdentifierRequest {
  availableFeatures?: map[string]string(name='AvailableFeatures', shrink='json', position='Query'),
  clientChannel?: string(name='ClientChannel', example='pc', position='Body'),
  clientId?: string(name='ClientId', example='370b56f8-2812-4b6c-bfa6-2560791c****', position='Body'),
  clientIp?: string(name='ClientIp', position='Query'),
  clientOS?: string(name='ClientOS', example='windows_\\"Windows 10 Enterprise\\" 10.0 (Build 14393)', position='Body'),
  clientVersion?: string(name='ClientVersion', example='2.0.1-D-20211008.101607', position='Body'),
  loginIdentifier: string(name='LoginIdentifier', description='This parameter is required.', example='Aliyun123***', position='Body'),
  supportTypes?: [ string ](name='SupportTypes', position='Body'),
  uuid?: string(name='Uuid', example='2943802884B27030B6759F9132B2****', position='Body'),
}

model FindIdpListByLoginIdentifierResponseBody = {
  idpInfos?: [ 
    {
      accountType?: string(name='AccountType', example='simple'),
      cookies?: string(name='Cookies', example='null'),
      idpId?: string(name='IdpId', example='idp-hlyexfvwert9m8****'),
      idpName?: string(name='IdpName'),
      idpNameEN?: string(name='IdpNameEN'),
      idpProvider?: string(name='IdpProvider'),
      jumpSwitch?: string(name='JumpSwitch', example='true'),
      ssoProtocol?: string(name='SsoProtocol', example='SAML'),
      ssoServiceUrl?: string(name='SsoServiceUrl'),
    }
  ](name='IdpInfos'),
  officeSiteInfo?: {
    accessType?: string(name='AccessType', example='INTERNET'),
    officeSiteId?: string(name='OfficeSiteId', example='cn-shanghai+dir-448204****'),
    providerId?: string(name='ProviderId', example='26842'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    ssoServiceUrl?: string(name='SsoServiceUrl'),
  }(name='OfficeSiteInfo'),
  popRegionConfig?: map[string]string(name='PopRegionConfig'),
  profileRegion?: string(name='ProfileRegion', example='cn_hangzhou'),
  requestId?: string(name='RequestId', example='AD2D0761-1FE5-549D-B169-D3F8D19C****'),
  tenantAliasInfo?: {
    accessType?: string(name='AccessType', example='INTERNET'),
    tenantAlias?: string(name='TenantAlias', example='Or09****'),
  }(name='TenantAliasInfo'),
}

model FindIdpListByLoginIdentifierResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FindIdpListByLoginIdentifierResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FindIdpListByLoginIdentifier  FindIdpListByLoginIdentifierRequest
  * @return FindIdpListByLoginIdentifierResponse
 */
async function findIdpListByLoginIdentifier(request: FindIdpListByLoginIdentifierRequest): FindIdpListByLoginIdentifierResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindIdpListByLoginIdentifier', 'POST', '/', 'json', true, 'form', request);
}

model GetLoginTokenRequest {
  authenticationCode?: string(name='AuthenticationCode', example='182901', position='Query'),
  availableFeatures?: map[string]string(name='AvailableFeatures', shrink='json', position='Query'),
  clientId: string(name='ClientId', description='This parameter is required.', example='05967f80-6f51-46cb-a27c-****', position='Query'),
  clientName?: string(name='ClientName', position='Query'),
  clientOS?: string(name='ClientOS', example='windows_\\"Windows 10 Pro\\" 10.0 (Build 22631)', position='Query'),
  clientType?: string(name='ClientType', example='windows', position='Query'),
  clientVersion?: string(name='ClientVersion', example='7.3.0-20240619.143924', position='Query'),
  currentStage?: string(name='CurrentStage', example='SsoTokenLogin', position='Query'),
  directoryId?: string(name='DirectoryId', example='cn-beijing+dir-j9dd****', position='Query'),
  encryptedFingerPrintData?: string(name='EncryptedFingerPrintData', example='null', position='Query'),
  encryptedKey?: string(name='EncryptedKey', example='4d7****8e90bb0484fc', position='Query'),
  encryptedPassword?: string(name='EncryptedPassword', example='04d7****8e90bb0484fc;gJ1GLca1vQRRqQbRvByU0A==;5kOWZE7AtbQhki+4LAo69A==', position='Query'),
  endUserId?: string(name='EndUserId', example='user01', position='Query'),
  fingerPrintData?: string(name='FingerPrintData', example='null', position='Query'),
  idpId?: string(name='IdpId', example='idp-iwntrlbb98q7v****', position='Query'),
  imageUrl?: string(name='ImageUrl', example='null', position='Query'),
  keepAlive?: boolean(name='KeepAlive', example='true', position='Query'),
  keepAliveToken?: string(name='KeepAliveToken', example='00ugamMAoO1+u1MlhmgCeZJ75q094x3H/4kg7ZaTI3f/joVTVPIpJgfv9JFkPLNxnQjblrvsByNas08mc6FtVWvQPOE68fqmt6QMM4UbRtahm8luxEXvicF58qSPXW1hxOtV/Ev6d92VBz2Bck/N4CYyjD0iLocfN8jkBnt231****', position='Query'),
  loginIdentifier?: string(name='LoginIdentifier', example='Fe04****', position='Query'),
  loginName?: string(name='LoginName', example='null', position='Query'),
  mfaType?: string(name='MfaType', position='Query'),
  networkType?: string(name='NetworkType', example='INTERNET', position='Query'),
  newPassword?: string(name='NewPassword', example='Admin@1234****', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-beijing+dir-j9dd****', position='Query'),
  oldPassword?: string(name='OldPassword', example='Admin@1234****', position='Query'),
  password?: string(name='Password', example='Admin@1234****', minLength=1, maxLength=500, position='Query'),
  phone?: string(name='Phone', example='1822727****', position='Query'),
  phoneVerifyCode?: string(name='PhoneVerifyCode', example='321123', position='Query'),
  profileRegion?: string(name='ProfileRegion', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sessionId?: string(name='SessionId', example='c6f3cd91-65fc-4c7b-b189-2a73da0****', position='Query'),
  ssoExtendsCookies?: string(name='SsoExtendsCookies', example='null', position='Query'),
  ssoSessionToken?: string(name='SsoSessionToken', example='04d707a6-fb23-44a7-aae7-8e90****', position='Query'),
  tokenCode?: string(name='TokenCode', example='1234***', position='Query'),
  umidToken?: string(name='UmidToken', example='04d707a6-fb23-44a7-aae7-8e90bb04****', position='Query'),
  uuid?: string(name='Uuid', example='C50973691A6D2BE23F2CDD73B85B****', position='Query'),
}

model GetLoginTokenResponseBody = {
  accessType?: string(name='AccessType', example='INTERNET'),
  accountType?: string(name='AccountType', example='ad'),
  adDomain?: string(name='AdDomain', example='easthp***.com'),
  email?: string(name='Email', example='alice***@aliyun.com'),
  endUserId?: string(name='EndUserId', example='alice'),
  idpId?: string(name='IdpId', example='idp-7ttvs4ove8bo5***'),
  industry?: string(name='Industry', example='edu'),
  keepAliveToken?: string(name='KeepAliveToken', example='006YwvYMsesWWsDBZnVB+Wq9AvJDVIqOY3YCktvtb7+KxMb3ClnNlV8+l/knhZYrXUmeP06IzkjF+IgcZ3vZKOyMprDyFHjCy1r27FRE/U7+geWCl8iQ+yF8GaCRHfJEkC2+ROs93HkT4tfHxyY1J8W7O7ZQGUC/cdCvm+cCP6FIy73IUuPuVR6PcKYXIp***'),
  label?: string(name='Label', example='test:wuying'),
  loginToken?: string(name='LoginToken', example='v185fdd7f6d39fa7861981639366085772e150a390a5bb7b43c4e62440d94fc392b945770e1596cebe90085ce0af4d****'),
  mfaTypeList?: [ 
    {
      name?: string(name='Name'),
      stage?: string(name='Stage'),
    }
  ](name='MfaTypeList'),
  nextStage?: string(name='NextStage', example='MFABind'),
  officeSites?: [ string ](name='OfficeSites'),
  passwordStrategy?: {
    tenantAlternativeChars?: [ string ](name='TenantAlternativeChars'),
    tenantPasswordLength?: int32(name='TenantPasswordLength', example='12'),
  }(name='PasswordStrategy'),
  phone?: string(name='Phone', example='1826717****'),
  props?: map[string]string(name='Props'),
  qrCodePng?: string(name='QrCodePng', example='5OCLLKKOJU5HPBX66H3QCTWY******'),
  reason?: string(name='Reason', example='PasswordExpired'),
  requestId?: string(name='RequestId', example='EEA72491-B731-53D6-83ED-209769D6****'),
  riskVerifyInfo?: {
    email?: string(name='Email', example='ppas***@aliyun.com'),
    lastLockDuration?: long(name='LastLockDuration', example='12000'),
    locked?: boolean(name='Locked', example='true'),
    phone?: string(name='Phone', example='1826717****'),
  }(name='RiskVerifyInfo'),
  secret?: string(name='Secret', example='4JZNSDHDM3T6AZ4G2O5OWXBLLE4P****'),
  sessionId?: string(name='SessionId', example='cc15c91c-821b-4edd-9af2-6df66cc****'),
  tenantAlias?: string(name='TenantAlias', example='Rq201***'),
  tenantId?: long(name='TenantId', example='13747924304****'),
  tenantInfos?: [ 
    {
      accessType?: string(name='AccessType', example='INTERNET'),
      tenantAlias?: string(name='TenantAlias', example='Up830***'),
    }
  ](name='TenantInfos'),
  vpcRegionId?: string(name='VpcRegionId', example='cn-beijing'),
  windowDisplayMode?: string(name='WindowDisplayMode', example='Windowed'),
  wyId?: string(name='WyId', example='0aba1403b337a***'),
}

model GetLoginTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLoginTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLoginToken  GetLoginTokenRequest
  * @return GetLoginTokenResponse
 */
async function getLoginToken(request: GetLoginTokenRequest): GetLoginTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLoginToken', 'POST', '/', 'json', false, 'json', request);
}

model GetStsTokenRequest {
  authCode: string(name='AuthCode', description='This parameter is required.', example='e4e169bea1cc48e8afac53**********', position='Body'),
  clientId?: string(name='ClientId', example='eac19bef-1e45-4190-a03a-4ea74b69****', position='Body'),
  clientIp?: string(name='ClientIp', example='22.21.2.**', position='Body'),
  clientOS?: string(name='ClientOS', example='windows_\\"Windows 10 Enterprise\\" 10.0 (Build 14393)', position='Body'),
  clientVersion?: string(name='ClientVersion', example='6.3.0-R-20231106.210000', position='Body'),
  uuid?: string(name='Uuid', example='2943802884B27030B6759F9132B2****', position='Body'),
}

model GetStsTokenResponseBody = {
  requestId?: string(name='RequestId', example='CCF92035-6231-5ABB-930E-1E003C32****'),
  stsTokenModel?: {
    sessionId?: string(name='SessionId', example='be4be09e-cd00-4b4c-add7-11b4d8****'),
    stsToken?: string(name='StsToken', example='sts****'),
    tenantId?: long(name='TenantId', example='105552640689****'),
  }(name='StsTokenModel'),
}

model GetStsTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetStsTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetStsToken  GetStsTokenRequest
  * @return GetStsTokenResponse
 */
async function getStsToken(request: GetStsTokenRequest): GetStsTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStsToken', 'POST', '/', 'json', true, 'form', request);
}

model RefreshLoginTokenRequest {
  clientId: string(name='ClientId', description='This parameter is required.', example='f4a0dc8e-1702-4728-9a60-95b27a35****', position='Query'),
  clientType?: string(name='ClientType', example='windows', position='Query'),
  endUserId?: string(name='EndUserId', example='alice', position='Query'),
  loginIdentifier?: string(name='LoginIdentifier', example='Alibaba****', position='Query'),
  loginToken: string(name='LoginToken', description='This parameter is required.', example='v1046341d8d4e2f05c4aa168196009613594aaf451499bfc75e54699efa7230bc968e1debb1fa4063b01e5d327b467****', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-shenzhen+dir-436909****', position='Query'),
  profileRegion?: string(name='ProfileRegion', position='Query'),
  sessionId: string(name='SessionId', description='This parameter is required.', example='6442b2fd-ed3e-423a-8e6e-352d26a4****', position='Query'),
  uuid?: string(name='Uuid', example='2943802884B27030B6759F9132B2****', position='Query'),
}

model RefreshLoginTokenResponseBody = {
  loginToken?: string(name='LoginToken', example='v12369636c721ba6b3ddb1683341016775c3f63e4d0e78f120f9a0544ed826b7af7daf747c402f0d0730b52f451b70****'),
  requestId?: string(name='RequestId', example='419F31B9-1FDF-5644-ABA3-D00026FA****'),
}

model RefreshLoginTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefreshLoginTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RefreshLoginToken  RefreshLoginTokenRequest
  * @return RefreshLoginTokenResponse
 */
async function refreshLoginToken(request: RefreshLoginTokenRequest): RefreshLoginTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshLoginToken', 'POST', '/', 'json', false, 'json', request);
}

