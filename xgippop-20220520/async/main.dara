/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'XgipPop';
  @version = '2022-05-20';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model OrderQosProductRequest {
  aliUid?: long(name='AliUid', position='Body'),
  channelId: string(name='ChannelId', description='This parameter is required.', position='Body'),
  iPv6?: string(name='IPv6', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Body'),
  ipType?: string(name='IpType', position='Body'),
  mobileNumber?: string(name='MobileNumber', position='Body'),
  operator: string(name='Operator', description='This parameter is required.', position='Body'),
  privateIpv4?: string(name='PrivateIpv4', position='Body'),
  productId: string(name='ProductId', description='This parameter is required.', position='Body'),
  provice?: string(name='Provice', position='Query'),
  publicIpv4?: string(name='PublicIpv4', position='Body'),
  qosRequestId: string(name='QosRequestId', description='This parameter is required.', position='Body'),
  targetIpList?: [ string ](name='TargetIpList', position='Body'),
  token?: string(name='Token', position='Body'),
  unitNum?: int32(name='UnitNum', position='Body'),
}

model OrderQosProductResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  rt?: long(name='Rt'),
  success?: boolean(name='Success'),
}

model OrderQosProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OrderQosProductResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OrderQosProduct  OrderQosProductRequest
  * @return OrderQosProductResponse
 */
async function orderQosProduct(request: OrderQosProductRequest): OrderQosProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OrderQosProduct', 'POST', '/', 'json', true, 'form', request);
}

