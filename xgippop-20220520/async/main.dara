/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'XgipPop';
  @version = '2022-05-20';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ChangeApplicationInfoRequest {
  aliUid?: long(name='AliUid', description='阿里UID', position='Body'),
  appId: string(name='AppId', position='Body'),
  appName?: string(name='AppName', description='应用名称', position='Body'),
  appTypeList?: string(name='AppTypeList', description='dynamic|static', position='Body'),
  appingList?: string(name='AppingList', description='[', position='Body'),
  itemCode?: string(name='ItemCode', description='商品code', position='Body'),
}

model ChangeApplicationInfoResponseBody = {
  appId?: string(name='AppId', description='应用id'),
  code?: string(name='Code', description='结果码'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='是否成功'),
}

model ChangeApplicationInfoResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeApplicationInfoResponseBody(name='body'),
}

async function changeApplicationInfo(request: ChangeApplicationInfoRequest): ChangeApplicationInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeApplicationInfo', 'POST', '/', 'json', true, 'form', request);
}

model CreateApplicationInfoRequest {
  aliUid?: long(name='AliUid', description='阿里UID', position='Body'),
  appName?: string(name='AppName', description='应用名称', position='Body'),
  appTypeList?: [ string ](name='AppTypeList', description='dynamic（动态业务）/static（静态业务', position='Body'),
  appingList?: [ 
    {
      extId?: long(name='ExtId'),
      flowIp?: [ string ](name='FlowIp', description='cdn ip'),
      flowUrl?: [ string ](name='FlowUrl', description='cdn 域名信息'),
      originalIpList?: [ string ](name='OriginalIpList', description='业务方ip集合'),
      originalUrlList?: [ string ](name='OriginalUrlList', description='业务方域名集合'),
    }
  ](name='AppingList', position='Body'),
  itemCode?: string(name='ItemCode', description='商品code', position='Body'),
}

model CreateApplicationInfoResponseBody = {
  appId?: string(name='AppId', description='应用id'),
  code?: string(name='Code', description='结果码'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='是否成功'),
}

model CreateApplicationInfoResponse = {
  headers: map[string]string(name='headers'),
  body: CreateApplicationInfoResponseBody(name='body'),
}

async function createApplicationInfo(request: CreateApplicationInfoRequest): CreateApplicationInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApplicationInfo', 'POST', '/', 'json', true, 'form', request);
}

model GetAliyunXgipTokenRequest {
}

model GetAliyunXgipTokenResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: string(name='Data', description='结果'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model GetAliyunXgipTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetAliyunXgipTokenResponseBody(name='body'),
}

async function getAliyunXgipToken(request: GetAliyunXgipTokenRequest): GetAliyunXgipTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAliyunXgipToken', 'GET', '/', 'json', false, 'json', request);
}

model GetApplicationRequest {
  aliUid?: long(name='AliUid', description='阿里UID', position='Query'),
  appCode?: string(name='AppCode', description='应用ID', position='Query'),
}

model GetApplicationResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: [  map[string]any ](name='Data'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model GetApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: GetApplicationResponseBody(name='body'),
}

async function getApplication(request: GetApplicationRequest): GetApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplication', 'GET', '/', 'json', false, 'json', request);
}

model GetFreeFlowInstanceRequest {
  aliuid?: long(name='Aliuid', position='Query'),
  appId?: string(name='AppId', description='应用ID', position='Query'),
  instanceId?: string(name='InstanceId', description='实例ID', position='Query'),
  itemCode: string(name='ItemCode', position='Query'),
}

model GetFreeFlowInstanceResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: [ 
    {
      appCode?: string(name='AppCode', description='APP编号'),
      appName?: string(name='AppName', description='APP名称'),
      endTime?: string(name='EndTime', description='产品失效时间'),
      instanceMemo?: string(name='InstanceMemo', description='实例名称'),
      instanceStatus?: string(name='InstanceStatus', description='实例状态'),
      openTime?: string(name='OpenTime', description='产品开通时间'),
      specType?: string(name='SpecType', description='规格类型'),
      startTime?: string(name='StartTime', description='产品生效时间'),
    }
  ](name='Data', description='结果'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model GetFreeFlowInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetFreeFlowInstanceResponseBody(name='body'),
}

async function getFreeFlowInstance(request: GetFreeFlowInstanceRequest): GetFreeFlowInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFreeFlowInstance', 'GET', '/', 'json', false, 'json', request);
}

model GetFreeFlowProductListRequest {
  aliUid?: long(name='AliUid', description='用户编号', position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', position='Query'),
}

model GetFreeFlowProductListResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: [ 
    {
      configured?: boolean(name='Configured', description='产品当前状态，true为已配置，false为未配置'),
      flowProductAmount?: string(name='FlowProductAmount', description='产品包含的流量大小'),
      flowProductId?: string(name='FlowProductId', description='免流产品ID'),
      flowProductName?: string(name='FlowProductName', description='流量包名称'),
      flowProductPeriod?: string(name='FlowProductPeriod', description='产品周期'),
      flowType?: string(name='FlowType', description='取值包括free（定向流量）/normal（通用流量）'),
      operator?: string(name='Operator', description='取值包括cm（中国移动）/ct（中国电信）/cu（中国联通）'),
      specType?: string(name='SpecType', description='注意这里返回的全量套餐里，只能包含SpecType与该InstanceId的SpecType相同的规格'),
      spid?: string(name='Spid'),
      unitPrice?: int32(name='UnitPrice'),
    }
  ](name='Data'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model GetFreeFlowProductListResponse = {
  headers: map[string]string(name='headers'),
  body: GetFreeFlowProductListResponseBody(name='body'),
}

async function getFreeFlowProductList(request: GetFreeFlowProductListRequest): GetFreeFlowProductListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFreeFlowProductList', 'GET', '/', 'json', false, 'json', request);
}

model GetFreeFlowUsageRequest {
  aliUid?: long(name='AliUid', position='Query'),
  curPageNum: int32(name='CurPageNum', description='当前页', position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', position='Query'),
  month: string(name='Month', description='查询月份', position='Query'),
  numPerPage: int32(name='NumPerPage', description='每页的记录数量', position='Query'),
}

model GetFreeFlowUsageResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: {
    curPageNum?: int32(name='CurPageNum', description='当前页数'),
    customerList?: [ 
      {
        channelId?: string(name='ChannelId', description='购买渠道'),
        customerEndTime?: string(name='CustomerEndTime', description='C端产品失效时间'),
        customerFlowOrderId?: string(name='CustomerFlowOrderId'),
        customerFlowStatus?: string(name='CustomerFlowStatus', description='C端免流状态，取值包括create/working/expiration'),
        customerOpenTime?: string(name='CustomerOpenTime', description='C端产品开通时间'),
        customerStartTime?: string(name='CustomerStartTime', description='C端产品生效时间'),
        flowProductId?: string(name='FlowProductId', description='免流产品ID'),
        flowProductName?: string(name='FlowProductName', description='免流产品名'),
        isLasting?: boolean(name='IsLasting', description='是否包月，true或false'),
        mobileNumber?: string(name='MobileNumber', description='C端手机号'),
        unitNum?: int32(name='UnitNum', description='该流量包的计量单元数'),
        unitPrice?: int32(name='UnitPrice', description='流量包价格'),
      }
    ](name='CustomerList', description='C端用户列表'),
    hasNext?: boolean(name='HasNext', description='是否有下一页'),
    hasPrev?: boolean(name='HasPrev', description='是否有上一页'),
    instanceId?: string(name='InstanceId', description='实例ID'),
    numPerPage?: int32(name='NumPerPage', description='每页的记录条数'),
    totalNum?: int32(name='TotalNum', description='总记录条数'),
    totalPageNum?: int32(name='TotalPageNum', description='总页数'),
  }(name='Data', description='结果'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model GetFreeFlowUsageResponse = {
  headers: map[string]string(name='headers'),
  body: GetFreeFlowUsageResponseBody(name='body'),
}

async function getFreeFlowUsage(request: GetFreeFlowUsageRequest): GetFreeFlowUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFreeFlowUsage', 'GET', '/', 'json', false, 'json', request);
}

model GetFreeFlowUsageStatisticRequest {
  aliUid?: long(name='AliUid', position='Query'),
  appId?: string(name='AppId', position='Query'),
  appName?: string(name='AppName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  month: long(name='Month', position='Query'),
}

model GetFreeFlowUsageStatisticResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: [ 
    {
      instanceId?: string(name='InstanceId'),
      specType?: string(name='SpecType', description='该实例对应的包类型'),
      totalMoney?: string(name='TotalMoney'),
      totalOrderNumber?: long(name='TotalOrderNumber', description='该实例的订单总数'),
      totalUnitNumber?: long(name='TotalUnitNumber', description='该实例的订单总计量单元数'),
      yunOutProduct?: string(name='YunOutProduct', description='产品规格'),
    }
  ](name='Data', description='结果'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model GetFreeFlowUsageStatisticResponse = {
  headers: map[string]string(name='headers'),
  body: GetFreeFlowUsageStatisticResponseBody(name='body'),
}

async function getFreeFlowUsageStatistic(request: GetFreeFlowUsageStatisticRequest): GetFreeFlowUsageStatisticResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFreeFlowUsageStatistic', 'GET', '/', 'json', false, 'json', request);
}

model GetOrderFreeFlowProductStatusRequest {
  aliUid?: long(name='AliUid', position='Query'),
  customerFlowOrderId: string(name='CustomerFlowOrderId', description='在订购接口2.1.9中引擎侧生成的id', position='Query'),
}

model GetOrderFreeFlowProductStatusResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: {
    customerFlowOrderId?: string(name='CustomerFlowOrderId', description='C端免流订单ID'),
    customerFlowRequestId?: string(name='CustomerFlowRequestId'),
    error?: string(name='Error', description='status为fail时，描述fail的具体原因'),
    status?: string(name='Status', description='执行中ordering、成功success、失败fail'),
  }(name='Data'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model GetOrderFreeFlowProductStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetOrderFreeFlowProductStatusResponseBody(name='body'),
}

async function getOrderFreeFlowProductStatus(request: GetOrderFreeFlowProductStatusRequest): GetOrderFreeFlowProductStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOrderFreeFlowProductStatus', 'GET', '/', 'json', false, 'json', request);
}

model ModifyApplicationRequest {
  aliUid?: long(name='AliUid', description='AliUid', position='Body'),
  appCode: string(name='AppCode', description='AppId', position='Body'),
  appName?: string(name='AppName', description='应用名称', position='Body'),
  appTypeList?: [ string ](name='AppTypeList', description='dynamic（动态业务）/static（静态业务', position='Body'),
  appingList?: [ 
    {
      extId?: long(name='ExtId'),
      flowIp?: [ string ](name='FlowIp', description='cdn ip'),
      flowUrl?: [ string ](name='FlowUrl', description='cdn 域名信息'),
      originalIpList?: [ string ](name='OriginalIpList', description='业务方ip集合'),
      originalUrlList?: [ string ](name='OriginalUrlList', description='业务方域名集合'),
    }
  ](name='AppingList', description='扩展属性 源域名和源ip信息保存', position='Body'),
}

model ModifyApplicationResponseBody = {
  appId?: string(name='AppId', description='应用id'),
  code?: string(name='Code', description='结果码'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='是否成功'),
}

model ModifyApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyApplicationResponseBody(name='body'),
}

async function modifyApplication(request: ModifyApplicationRequest): ModifyApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApplication', 'POST', '/', 'json', true, 'form', request);
}

model OrderFreeFlowProductRequest {
  aliUid?: long(name='AliUid', position='Query'),
  channelId: string(name='ChannelId', description='渠道ID', position='Query'),
  customerFlowRequestId: string(name='CustomerFlowRequestId', description='客户侧生成的QoS请求ID，需要保证请求幂等性，确保不同请求间该参数值唯一', position='Query'),
  flowProductId: string(name='FlowProductId', description='免流产品ID', position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', position='Query'),
  lasting?: string(name='Lasting', description='是否包月，true为包月，false为不包月', position='Query'),
  mobileNumber: string(name='MobileNumber', description='C端手机号', position='Query'),
  notifyUrl?: string(name='NotifyUrl', description='客户提供的回调通知接口url', position='Query'),
  operator: string(name='Operator', description='取值包括cm（中国移动）/ct（中国电信）/cu（中国联通）', position='Query'),
  purchaseOrderId?: string(name='PurchaseOrderId', description='支付订单ID', position='Query'),
}

model OrderFreeFlowProductResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: {
    bizCode?: string(name='BizCode'),
    customerFlowOrderId?: string(name='CustomerFlowOrderId', description='C端免流订单ID'),
    customerFlowRequestId?: string(name='CustomerFlowRequestId'),
    status?: string(name='Status', description='执行中ordering、成功success、失败fail'),
  }(name='Data', description='结果'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model OrderFreeFlowProductResponse = {
  headers: map[string]string(name='headers'),
  body: OrderFreeFlowProductResponseBody(name='body'),
}

async function orderFreeFlowProduct(request: OrderFreeFlowProductRequest): OrderFreeFlowProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OrderFreeFlowProduct', 'POST', '/', 'json', false, 'json', request);
}

model OrderQosProductRequest {
  aliUid?: long(name='AliUid', position='Body'),
  channelId: string(name='ChannelId', description='渠道ID', position='Body'),
  iPv6?: string(name='IPv6', description='C端v6 IP（移动场景下可以携带）', position='Body'),
  instanceId: string(name='InstanceId', description='实例ID', position='Body'),
  ipType?: string(name='IpType', description='IP类型', position='Body'),
  mobileNumber?: string(name='MobileNumber', description='C端手机号', position='Body'),
  operator: string(name='Operator', description='取值包括cm（中国移动）/ct（中国电信）/cu（中国联通）', position='Body'),
  privateIpv4?: string(name='PrivateIpv4', description='C端用户私网IP（联通场景下必须携带)', position='Body'),
  productId: string(name='ProductId', description='产品ID', position='Body'),
  provice?: string(name='Provice', position='Query'),
  publicIpv4?: string(name='PublicIpv4', description='C端用户公网IP（联通场景下必须携带）', position='Body'),
  qosRequestId: string(name='QosRequestId', description='客户侧生成的QoS请求ID，需要保证请求幂等性，确保不同请求间该参数值唯一', position='Body'),
  targetIpList?: [ string ](name='TargetIpList', description='移动场景目前ip', position='Body'),
  token?: string(name='Token', description='token获取', position='Body'),
  unitNum?: int32(name='UnitNum', description='请求次数', position='Body'),
}

model OrderQosProductResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: string(name='Data', description='结果'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model OrderQosProductResponse = {
  headers: map[string]string(name='headers'),
  body: OrderQosProductResponseBody(name='body'),
}

async function orderQosProduct(request: OrderQosProductRequest): OrderQosProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OrderQosProduct', 'POST', '/', 'json', true, 'form', request);
}

model SaveApplicationInfoRequest {
  aliUid?: long(name='AliUid', description='阿里UID', position='Body'),
  appId?: string(name='AppId', position='Body'),
  appName: string(name='AppName', description='应用名称', position='Body'),
  appTypeList: string(name='AppTypeList', description='dynamic|static', position='Body'),
  appingList: string(name='AppingList', description='[', position='Body'),
  itemCode?: string(name='ItemCode', description='商品code', position='Body'),
}

model SaveApplicationInfoResponseBody = {
  appId?: string(name='AppId', description='应用id'),
  code?: string(name='Code', description='结果码'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='是否成功'),
}

model SaveApplicationInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SaveApplicationInfoResponseBody(name='body'),
}

async function saveApplicationInfo(request: SaveApplicationInfoRequest): SaveApplicationInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveApplicationInfo', 'POST', '/', 'json', true, 'form', request);
}

model SdkValidateStatusRequest {
  appId: string(name='AppId', description='应用名称', position='Query'),
  credentialType: string(name='CredentialType', description='凭证类型', position='Query'),
  credentialValue: string(name='CredentialValue', description='mobile=150xxxx4661', position='Query'),
  operator: string(name='Operator', description='取值包括cm（中国移动）/ct（中国电信）/cu（中国联通）', position='Query'),
  token: string(name='Token', position='Query'),
}

model SdkValidateStatusResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: {
    appExtPopList?: [ 
      {
        extId?: long(name='ExtId'),
        flowIp?: [ string ](name='FlowIp', description='cdn ip'),
        flowUrl?: [ string ](name='FlowUrl', description='cdn 域名信息'),
        originalIpList?: [ string ](name='OriginalIpList', description='业务方ip集合'),
        originalUrlList?: [ string ](name='OriginalUrlList', description='业务方域名集合'),
      }
    ](name='AppExtPopList'),
    freeFlow?: boolean(name='FreeFlow', description='是否处于免流状态，取值范围为true/false'),
    pseudoCode?: string(name='PseudoCode', description='伪码'),
  }(name='Data', description='结果'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model SdkValidateStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SdkValidateStatusResponseBody(name='body'),
}

async function sdkValidateStatus(request: SdkValidateStatusRequest): SdkValidateStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SdkValidateStatus', 'GET', '/', 'json', false, 'json', request);
}

model ValidControllerAuthorRequest {
  aliUid?: long(name='AliUid', position='Query'),
  itemCode: string(name='ItemCode', description='商品code', position='Query'),
}

model ValidControllerAuthorResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: boolean(name='Data', description='结果'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model ValidControllerAuthorResponse = {
  headers: map[string]string(name='headers'),
  body: ValidControllerAuthorResponseBody(name='body'),
}

async function validControllerAuthor(request: ValidControllerAuthorRequest): ValidControllerAuthorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValidControllerAuthor', 'GET', '/', 'json', false, 'json', request);
}

model ValidateStatusRequest {
  aliUid?: long(name='AliUid', description='阿里UID', position='Query'),
  appId: string(name='AppId', description='应用名称', position='Query'),
  credentialType: string(name='CredentialType', description='凭证类型', position='Query'),
  credentialValue: string(name='CredentialValue', description='mobile=150xxxx4661', position='Query'),
  operator: string(name='Operator', description='取值包括cm（中国移动）/ct（中国电信）/cu（中国联通）', position='Query'),
}

model ValidateStatusResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: {
    appExtPopList?: [ 
      {
        extId?: long(name='ExtId'),
        flowIp?: [ string ](name='FlowIp', description='cdn ip'),
        flowUrl?: [ string ](name='FlowUrl', description='cdn 域名信息'),
        originalIpList?: [ string ](name='OriginalIpList', description='业务方ip集合'),
        originalUrlList?: [ string ](name='OriginalUrlList', description='业务方域名集合'),
      }
    ](name='AppExtPopList'),
    freeFlow?: boolean(name='FreeFlow', description='是否处于免流状态，取值范围为true/false'),
    pseudoCode?: string(name='PseudoCode', description='伪码'),
  }(name='Data', description='结果'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model ValidateStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ValidateStatusResponseBody(name='body'),
}

async function validateStatus(request: ValidateStatusRequest): ValidateStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValidateStatus', 'GET', '/', 'json', false, 'json', request);
}

