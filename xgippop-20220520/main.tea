/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('xgippop', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ChangeApplicationInfoRequest {
  aliUid?: long(name='AliUid', description='阿里UID'),
  appId?: string(name='AppId'),
  appName?: string(name='AppName', description='应用名称'),
  appTypeList?: string(name='AppTypeList', description='dynamic|static'),
  appingList?: string(name='AppingList', description='['),
  itemCode?: string(name='ItemCode', description='商品code'),
}

model ChangeApplicationInfoResponseBody = {
  appId?: string(name='AppId', description='应用id'),
  code?: string(name='Code', description='结果码'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='是否成功'),
}

model ChangeApplicationInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeApplicationInfoResponseBody(name='body'),
}

async function changeApplicationInfoWithOptions(request: ChangeApplicationInfoRequest, runtime: Util.RuntimeOptions): ChangeApplicationInfoResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.aliUid)) {
    body['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.appTypeList)) {
    body['AppTypeList'] = request.appTypeList;
  }
  if (!Util.isUnset(request.appingList)) {
    body['AppingList'] = request.appingList;
  }
  if (!Util.isUnset(request.itemCode)) {
    body['ItemCode'] = request.itemCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChangeApplicationInfo',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeApplicationInfo(request: ChangeApplicationInfoRequest): ChangeApplicationInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeApplicationInfoWithOptions(request, runtime);
}

model CreateApplicationInfoRequest {
  aliUid?: long(name='AliUid', description='阿里UID'),
  appName?: string(name='AppName', description='应用名称'),
  appTypeList?: [ string ](name='AppTypeList', description='dynamic（动态业务）/static（静态业务'),
  appingList?: [ 
    {
      extId?: long(name='ExtId'),
      flowIp?: [ string ](name='FlowIp', description='cdn ip'),
      flowUrl?: [ string ](name='FlowUrl', description='cdn 域名信息'),
      originalIpList?: [ string ](name='OriginalIpList', description='业务方ip集合'),
      originalUrlList?: [ string ](name='OriginalUrlList', description='业务方域名集合'),
    }
  ](name='AppingList'),
  itemCode?: string(name='ItemCode', description='商品code'),
}

model CreateApplicationInfoResponseBody = {
  appId?: string(name='AppId', description='应用id'),
  code?: string(name='Code', description='结果码'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='是否成功'),
}

model CreateApplicationInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateApplicationInfoResponseBody(name='body'),
}

async function createApplicationInfoWithOptions(request: CreateApplicationInfoRequest, runtime: Util.RuntimeOptions): CreateApplicationInfoResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.aliUid)) {
    body['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.appTypeList)) {
    body['AppTypeList'] = request.appTypeList;
  }
  if (!Util.isUnset(request.appingList)) {
    body['AppingList'] = request.appingList;
  }
  if (!Util.isUnset(request.itemCode)) {
    body['ItemCode'] = request.itemCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateApplicationInfo',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApplicationInfo(request: CreateApplicationInfoRequest): CreateApplicationInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApplicationInfoWithOptions(request, runtime);
}

model GetApplicationRequest {
  aliUid?: long(name='AliUid', description='阿里UID'),
  appCode?: string(name='AppCode', description='应用ID'),
}

model GetApplicationResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: [  map[string]any ](name='Data'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model GetApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationResponseBody(name='body'),
}

async function getApplicationWithOptions(request: GetApplicationRequest, runtime: Util.RuntimeOptions): GetApplicationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApplication',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplication(request: GetApplicationRequest): GetApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationWithOptions(request, runtime);
}

model GetFreeFlowInstanceRequest {
  aliuid?: long(name='Aliuid'),
  appId?: string(name='AppId', description='应用ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  itemCode?: string(name='ItemCode'),
}

model GetFreeFlowInstanceResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: [ 
    {
      appCode?: string(name='AppCode', description='APP编号'),
      appName?: string(name='AppName', description='APP名称'),
      endTime?: string(name='EndTime', description='产品失效时间'),
      instanceMemo?: string(name='InstanceMemo', description='实例名称'),
      instanceStatus?: string(name='InstanceStatus', description='实例状态'),
      openTime?: string(name='OpenTime', description='产品开通时间'),
      specType?: string(name='SpecType', description='规格类型'),
      startTime?: string(name='StartTime', description='产品生效时间'),
    }
  ](name='Data', description='结果'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model GetFreeFlowInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFreeFlowInstanceResponseBody(name='body'),
}

async function getFreeFlowInstanceWithOptions(request: GetFreeFlowInstanceRequest, runtime: Util.RuntimeOptions): GetFreeFlowInstanceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFreeFlowInstance',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFreeFlowInstance(request: GetFreeFlowInstanceRequest): GetFreeFlowInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFreeFlowInstanceWithOptions(request, runtime);
}

model GetFreeFlowProductListRequest {
  aliUid?: long(name='AliUid', description='用户编号'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetFreeFlowProductListResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: [ 
    {
      configured?: boolean(name='Configured', description='产品当前状态，true为已配置，false为未配置'),
      flowProductAmount?: string(name='FlowProductAmount', description='产品包含的流量大小'),
      flowProductId?: string(name='FlowProductId', description='免流产品ID'),
      flowProductName?: string(name='FlowProductName', description='流量包名称'),
      flowProductPeriod?: string(name='FlowProductPeriod', description='产品周期'),
      flowType?: string(name='FlowType', description='取值包括free（定向流量）/normal（通用流量）'),
      operator?: string(name='Operator', description='取值包括cm（中国移动）/ct（中国电信）/cu（中国联通）'),
      specType?: string(name='SpecType', description='注意这里返回的全量套餐里，只能包含SpecType与该InstanceId的SpecType相同的规格'),
      spid?: string(name='Spid'),
      unitPrice?: int32(name='UnitPrice'),
    }
  ](name='Data'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model GetFreeFlowProductListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFreeFlowProductListResponseBody(name='body'),
}

async function getFreeFlowProductListWithOptions(request: GetFreeFlowProductListRequest, runtime: Util.RuntimeOptions): GetFreeFlowProductListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFreeFlowProductList',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFreeFlowProductList(request: GetFreeFlowProductListRequest): GetFreeFlowProductListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFreeFlowProductListWithOptions(request, runtime);
}

model GetFreeFlowStatusRequest {
  aliUid?: long(name='AliUid'),
  appId?: string(name='AppId', description='应用ID'),
  flowProductId?: string(name='FlowProductId', description='免流产品ID'),
  mobileNumber?: string(name='MobileNumber', description='C端手机号'),
  netType?: string(name='NetType', description='网络类型，如3G、4G、5G'),
  operator?: string(name='Operator', description='取值包括cm（中国移动）/ct（中国电信）/cu（中国联通）'),
  privateIP?: string(name='PrivateIP', description='手机端私网ip地址'),
  pseudoCode?: string(name='PseudoCode', description='C端手机在运营商侧端伪码，如："75D35971BD"'),
  publicIP?: string(name='PublicIP', description='手机端公网ip地址'),
  token?: string(name='Token', description='通过云通信获取的token'),
}

model GetFreeFlowStatusResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: any(name='Data', description='结果'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model GetFreeFlowStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFreeFlowStatusResponseBody(name='body'),
}

async function getFreeFlowStatusWithOptions(request: GetFreeFlowStatusRequest, runtime: Util.RuntimeOptions): GetFreeFlowStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFreeFlowStatus',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFreeFlowStatus(request: GetFreeFlowStatusRequest): GetFreeFlowStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFreeFlowStatusWithOptions(request, runtime);
}

model GetFreeFlowUsageRequest {
  aliUid?: long(name='AliUid'),
  curPageNum?: int32(name='CurPageNum', description='当前页'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  month?: string(name='Month', description='查询月份'),
  numPerPage?: int32(name='NumPerPage', description='每页的记录数量'),
}

model GetFreeFlowUsageResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: {
    curPageNum?: int32(name='CurPageNum', description='当前页数'),
    customerList?: [ 
      {
        channelId?: string(name='ChannelId', description='购买渠道'),
        customerEndTime?: string(name='CustomerEndTime', description='C端产品失效时间'),
        customerFlowOrderId?: string(name='CustomerFlowOrderId'),
        customerFlowStatus?: string(name='CustomerFlowStatus', description='C端免流状态，取值包括create/working/expiration'),
        customerOpenTime?: string(name='CustomerOpenTime', description='C端产品开通时间'),
        customerStartTime?: string(name='CustomerStartTime', description='C端产品生效时间'),
        flowProductId?: string(name='FlowProductId', description='免流产品ID'),
        flowProductName?: string(name='FlowProductName', description='免流产品名'),
        isLasting?: boolean(name='IsLasting', description='是否包月，true或false'),
        mobileNumber?: string(name='MobileNumber', description='C端手机号'),
        unitNum?: int32(name='UnitNum', description='该流量包的计量单元数'),
        unitPrice?: int32(name='UnitPrice', description='流量包价格'),
      }
    ](name='CustomerList', description='C端用户列表'),
    hasNext?: boolean(name='HasNext', description='是否有下一页'),
    hasPrev?: boolean(name='HasPrev', description='是否有上一页'),
    instanceId?: string(name='InstanceId', description='实例ID'),
    numPerPage?: int32(name='NumPerPage', description='每页的记录条数'),
    totalNum?: int32(name='TotalNum', description='总记录条数'),
    totalPageNum?: int32(name='TotalPageNum', description='总页数'),
  }(name='Data', description='结果'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model GetFreeFlowUsageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFreeFlowUsageResponseBody(name='body'),
}

async function getFreeFlowUsageWithOptions(request: GetFreeFlowUsageRequest, runtime: Util.RuntimeOptions): GetFreeFlowUsageResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFreeFlowUsage',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFreeFlowUsage(request: GetFreeFlowUsageRequest): GetFreeFlowUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFreeFlowUsageWithOptions(request, runtime);
}

model GetFreeFlowUsageStatisticRequest {
  aliUid?: long(name='AliUid'),
  appId?: string(name='AppId'),
  appName?: string(name='AppName'),
  instanceId?: string(name='InstanceId'),
  month?: long(name='Month'),
}

model GetFreeFlowUsageStatisticResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: [ 
    {
      instanceId?: string(name='InstanceId'),
      specType?: string(name='SpecType', description='该实例对应的包类型'),
      totalMoney?: string(name='TotalMoney'),
      totalOrderNumber?: long(name='TotalOrderNumber', description='该实例的订单总数'),
      totalUnitNumber?: long(name='TotalUnitNumber', description='该实例的订单总计量单元数'),
      yunOutProduct?: string(name='YunOutProduct', description='产品规格'),
    }
  ](name='Data', description='结果'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model GetFreeFlowUsageStatisticResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFreeFlowUsageStatisticResponseBody(name='body'),
}

async function getFreeFlowUsageStatisticWithOptions(request: GetFreeFlowUsageStatisticRequest, runtime: Util.RuntimeOptions): GetFreeFlowUsageStatisticResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFreeFlowUsageStatistic',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFreeFlowUsageStatistic(request: GetFreeFlowUsageStatisticRequest): GetFreeFlowUsageStatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFreeFlowUsageStatisticWithOptions(request, runtime);
}

model GetOrderFreeFlowProductStatusRequest {
  aliUid?: long(name='AliUid'),
  customerFlowOrderId?: string(name='CustomerFlowOrderId', description='在订购接口2.1.9中引擎侧生成的id'),
}

model GetOrderFreeFlowProductStatusResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: {
    customerFlowOrderId?: string(name='CustomerFlowOrderId', description='C端免流订单ID'),
    customerFlowRequestId?: string(name='CustomerFlowRequestId'),
    error?: string(name='Error', description='status为fail时，描述fail的具体原因'),
    status?: string(name='Status', description='执行中ordering、成功success、失败fail'),
  }(name='Data'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model GetOrderFreeFlowProductStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOrderFreeFlowProductStatusResponseBody(name='body'),
}

async function getOrderFreeFlowProductStatusWithOptions(request: GetOrderFreeFlowProductStatusRequest, runtime: Util.RuntimeOptions): GetOrderFreeFlowProductStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOrderFreeFlowProductStatus',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOrderFreeFlowProductStatus(request: GetOrderFreeFlowProductStatusRequest): GetOrderFreeFlowProductStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOrderFreeFlowProductStatusWithOptions(request, runtime);
}

model ModifyApplicationRequest {
  aliUid?: long(name='AliUid', description='AliUid'),
  appCode?: string(name='AppCode', description='AppId'),
  appName?: string(name='AppName', description='应用名称'),
  appTypeList?: [ string ](name='AppTypeList', description='dynamic（动态业务）/static（静态业务'),
  appingList?: [ 
    {
      extId?: long(name='ExtId'),
      flowIp?: [ string ](name='FlowIp', description='cdn ip'),
      flowUrl?: [ string ](name='FlowUrl', description='cdn 域名信息'),
      originalIpList?: [ string ](name='OriginalIpList', description='业务方ip集合'),
      originalUrlList?: [ string ](name='OriginalUrlList', description='业务方域名集合'),
    }
  ](name='AppingList', description='扩展属性 源域名和源ip信息保存'),
}

model ModifyApplicationResponseBody = {
  appId?: string(name='AppId', description='应用id'),
  code?: string(name='Code', description='结果码'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='是否成功'),
}

model ModifyApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyApplicationResponseBody(name='body'),
}

async function modifyApplicationWithOptions(request: ModifyApplicationRequest, runtime: Util.RuntimeOptions): ModifyApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.aliUid)) {
    body['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.appCode)) {
    body['AppCode'] = request.appCode;
  }
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.appTypeList)) {
    body['AppTypeList'] = request.appTypeList;
  }
  if (!Util.isUnset(request.appingList)) {
    body['AppingList'] = request.appingList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyApplication',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyApplication(request: ModifyApplicationRequest): ModifyApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApplicationWithOptions(request, runtime);
}

model OrderFreeFlowProductRequest {
  aliUid?: long(name='AliUid'),
  channelId?: string(name='ChannelId', description='渠道ID'),
  customerFlowRequestId?: string(name='CustomerFlowRequestId', description='客户侧生成的QoS请求ID，需要保证请求幂等性，确保不同请求间该参数值唯一'),
  flowProductId?: string(name='FlowProductId', description='免流产品ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  lasting?: string(name='Lasting', description='是否包月，true为包月，false为不包月'),
  mobileNumber?: string(name='MobileNumber', description='C端手机号'),
  notifyUrl?: string(name='NotifyUrl', description='客户提供的回调通知接口url'),
  operator?: string(name='Operator', description='取值包括cm（中国移动）/ct（中国电信）/cu（中国联通）'),
  purchaseOrderId?: string(name='PurchaseOrderId', description='支付订单ID'),
}

model OrderFreeFlowProductResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: {
    bizCode?: string(name='BizCode'),
    customerFlowOrderId?: string(name='CustomerFlowOrderId', description='C端免流订单ID'),
    customerFlowRequestId?: string(name='CustomerFlowRequestId'),
    status?: string(name='Status', description='执行中ordering、成功success、失败fail'),
  }(name='Data', description='结果'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model OrderFreeFlowProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OrderFreeFlowProductResponseBody(name='body'),
}

async function orderFreeFlowProductWithOptions(request: OrderFreeFlowProductRequest, runtime: Util.RuntimeOptions): OrderFreeFlowProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.customerFlowRequestId)) {
    query['CustomerFlowRequestId'] = request.customerFlowRequestId;
  }
  if (!Util.isUnset(request.flowProductId)) {
    query['FlowProductId'] = request.flowProductId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.lasting)) {
    query['Lasting'] = request.lasting;
  }
  if (!Util.isUnset(request.mobileNumber)) {
    query['MobileNumber'] = request.mobileNumber;
  }
  if (!Util.isUnset(request.notifyUrl)) {
    query['NotifyUrl'] = request.notifyUrl;
  }
  if (!Util.isUnset(request.operator)) {
    query['Operator'] = request.operator;
  }
  if (!Util.isUnset(request.purchaseOrderId)) {
    query['PurchaseOrderId'] = request.purchaseOrderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OrderFreeFlowProduct',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function orderFreeFlowProduct(request: OrderFreeFlowProductRequest): OrderFreeFlowProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return orderFreeFlowProductWithOptions(request, runtime);
}

model SaveApplicationInfoRequest {
  aliUid?: long(name='AliUid', description='阿里UID'),
  appId?: string(name='AppId'),
  appName?: string(name='AppName', description='应用名称'),
  appTypeList?: string(name='AppTypeList', description='dynamic|static'),
  appingList?: string(name='AppingList', description='['),
  itemCode?: string(name='ItemCode', description='商品code'),
}

model SaveApplicationInfoResponseBody = {
  appId?: string(name='AppId', description='应用id'),
  code?: string(name='Code', description='结果码'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='是否成功'),
}

model SaveApplicationInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveApplicationInfoResponseBody(name='body'),
}

async function saveApplicationInfoWithOptions(request: SaveApplicationInfoRequest, runtime: Util.RuntimeOptions): SaveApplicationInfoResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.aliUid)) {
    body['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.appTypeList)) {
    body['AppTypeList'] = request.appTypeList;
  }
  if (!Util.isUnset(request.appingList)) {
    body['AppingList'] = request.appingList;
  }
  if (!Util.isUnset(request.itemCode)) {
    body['ItemCode'] = request.itemCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SaveApplicationInfo',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveApplicationInfo(request: SaveApplicationInfoRequest): SaveApplicationInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveApplicationInfoWithOptions(request, runtime);
}

model ValidateStatusRequest {
  aliUid?: long(name='AliUid', description='阿里UID'),
  appId?: string(name='AppId', description='应用名称'),
  credentialType?: string(name='CredentialType', description='凭证类型'),
  credentialValue?: string(name='CredentialValue', description='mobile=150xxxx4661'),
  operator?: string(name='Operator', description='取值包括cm（中国移动）/ct（中国电信）/cu（中国联通）'),
}

model ValidateStatusResponseBody = {
  code?: string(name='Code', description='结果码'),
  data?: {
    appExtPopList?: [ 
      {
        extId?: long(name='ExtId'),
        flowIp?: [ string ](name='FlowIp', description='cdn ip'),
        flowUrl?: [ string ](name='FlowUrl', description='cdn 域名信息'),
        originalIpList?: [ string ](name='OriginalIpList', description='业务方ip集合'),
        originalUrlList?: [ string ](name='OriginalUrlList', description='业务方域名集合'),
      }
    ](name='AppExtPopList'),
    freeFlow?: boolean(name='FreeFlow', description='是否处于免流状态，取值范围为true/false'),
    pseudoCode?: string(name='PseudoCode', description='伪码'),
  }(name='Data', description='结果'),
  message?: string(name='Message', description='结果描述'),
  requestId?: string(name='RequestId', description='请求链路ID，如POP请求进来的requestId，返回时原样返回'),
  rt?: long(name='Rt', description='服务端处理耗时，ms'),
  success?: boolean(name='Success', description='是否成功'),
}

model ValidateStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ValidateStatusResponseBody(name='body'),
}

async function validateStatusWithOptions(request: ValidateStatusRequest, runtime: Util.RuntimeOptions): ValidateStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ValidateStatus',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function validateStatus(request: ValidateStatusRequest): ValidateStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return validateStatusWithOptions(request, runtime);
}

