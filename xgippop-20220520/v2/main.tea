/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('xgippop', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model OrderQosProductRequest {
  aliUid?: long(name='AliUid'),
  channelId?: string(name='ChannelId', description='This parameter is required.'),
  IPv6?: string(name='IPv6'),
  instanceId?: string(name='InstanceId', description='This parameter is required.'),
  ipType?: string(name='IpType'),
  mobileNumber?: string(name='MobileNumber'),
  operator?: string(name='Operator', description='This parameter is required.'),
  privateIpv4?: string(name='PrivateIpv4'),
  productId?: string(name='ProductId', description='This parameter is required.'),
  provice?: string(name='Provice'),
  publicIpv4?: string(name='PublicIpv4'),
  qosRequestId?: string(name='QosRequestId', description='This parameter is required.'),
  targetIpList?: [ string ](name='TargetIpList'),
  token?: string(name='Token'),
  unitNum?: int32(name='UnitNum'),
}

model OrderQosProductResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  rt?: long(name='Rt'),
  success?: boolean(name='Success'),
}

model OrderQosProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OrderQosProductResponseBody(name='body'),
}

/**
 * @summary 订购qos云产品服务
 *
 * @param request OrderQosProductRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return OrderQosProductResponse
 */
@context("orderQosProductWithContext")
async function orderQosProductWithOptions(request: OrderQosProductRequest, runtime: $RuntimeOptions): OrderQosProductResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.provice)) {
    query['Provice'] = request.provice;
  }
  var body : map[string]any = {};
  if (!$isNull(request.aliUid)) {
    body['AliUid'] = request.aliUid;
  }
  if (!$isNull(request.channelId)) {
    body['ChannelId'] = request.channelId;
  }
  if (!$isNull(request.IPv6)) {
    body['IPv6'] = request.IPv6;
  }
  if (!$isNull(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!$isNull(request.ipType)) {
    body['IpType'] = request.ipType;
  }
  if (!$isNull(request.mobileNumber)) {
    body['MobileNumber'] = request.mobileNumber;
  }
  if (!$isNull(request.operator)) {
    body['Operator'] = request.operator;
  }
  if (!$isNull(request.privateIpv4)) {
    body['PrivateIpv4'] = request.privateIpv4;
  }
  if (!$isNull(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!$isNull(request.publicIpv4)) {
    body['PublicIpv4'] = request.publicIpv4;
  }
  if (!$isNull(request.qosRequestId)) {
    body['QosRequestId'] = request.qosRequestId;
  }
  if (!$isNull(request.targetIpList)) {
    body['TargetIpList'] = request.targetIpList;
  }
  if (!$isNull(request.token)) {
    body['Token'] = request.token;
  }
  if (!$isNull(request.unitNum)) {
    body['UnitNum'] = request.unitNum;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'OrderQosProduct',
    version = '2022-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 订购qos云产品服务
 *
 * @param request OrderQosProductRequest
 * @return OrderQosProductResponse
 */
async function orderQosProduct(request: OrderQosProductRequest): OrderQosProductResponse {
  var runtime = new $RuntimeOptions{};
  return orderQosProductWithOptions(request, runtime);
}

