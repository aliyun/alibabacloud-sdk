/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Green';
  @version = '2018-05-09';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'green.ap-southeast-1.aliyuncs.com',
    'ap-south-1' = 'green.ap-southeast-1.aliyuncs.com',
    'ap-southeast-2' = 'green.ap-southeast-1.aliyuncs.com',
    'ap-southeast-3' = 'green.ap-southeast-1.aliyuncs.com',
    'ap-southeast-5' = 'green.ap-southeast-1.aliyuncs.com',
    'cn-chengdu' = 'green.aliyuncs.com',
    'cn-hongkong' = 'green.aliyuncs.com',
    'cn-huhehaote' = 'green.aliyuncs.com',
    'cn-qingdao' = 'green.aliyuncs.com',
    'cn-zhangjiakou' = 'green.aliyuncs.com',
    'eu-central-1' = 'green.ap-southeast-1.aliyuncs.com',
    'eu-west-1' = 'green.ap-southeast-1.aliyuncs.com',
    'me-east-1' = 'green.ap-southeast-1.aliyuncs.com',
    'us-east-1' = 'green.ap-southeast-1.aliyuncs.com',
    'cn-hangzhou-finance' = 'green.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'green.aliyuncs.com',
    'cn-shanghai-finance-1' = 'green.aliyuncs.com',
    'cn-north-2-gov-1' = 'green.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddFacesRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model AddFacesResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddFacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFacesResponseBody(name='body'),
}

async function addFaces(request: AddFacesRequest): AddFacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddFaces', 'POST', '/green/sface/face/add', 'json', false, 'json', request);
}

model AddGroupsRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model AddGroupsResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddGroupsResponseBody(name='body'),
}

async function addGroups(request: AddGroupsRequest): AddGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddGroups', 'POST', '/green/sface/person/groups/add', 'json', false, 'json', request);
}

model AddPersonRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model AddPersonResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddPersonResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddPersonResponseBody(name='body'),
}

async function addPerson(request: AddPersonRequest): AddPersonResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddPerson', 'POST', '/green/sface/person/add', 'json', false, 'json', request);
}

model AddSimilarityImageRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model AddSimilarityImageResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddSimilarityImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSimilarityImageResponseBody(name='body'),
}

async function addSimilarityImage(request: AddSimilarityImageRequest): AddSimilarityImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddSimilarityImage', 'POST', '/green/similarity/image/add', 'json', false, 'json', request);
}

model AddSimilarityLibraryRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model AddSimilarityLibraryResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddSimilarityLibraryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSimilarityLibraryResponseBody(name='body'),
}

async function addSimilarityLibrary(request: AddSimilarityLibraryRequest): AddSimilarityLibraryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddSimilarityLibrary', 'POST', '/green/similarity/library/add', 'json', false, 'json', request);
}

model AddVideoDnaRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model AddVideoDnaResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddVideoDnaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddVideoDnaResponseBody(name='body'),
}

async function addVideoDna(request: AddVideoDnaRequest): AddVideoDnaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddVideoDna', 'POST', '/green/video/dna/add', 'json', false, 'json', request);
}

model AddVideoDnaGroupRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model AddVideoDnaGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddVideoDnaGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddVideoDnaGroupResponseBody(name='body'),
}

async function addVideoDnaGroup(request: AddVideoDnaGroupRequest): AddVideoDnaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddVideoDnaGroup', 'POST', '/green/video/dna/group/add', 'json', false, 'json', request);
}

model DeleteFacesRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DeleteFacesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteFacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFacesResponseBody(name='body'),
}

async function deleteFaces(request: DeleteFacesRequest): DeleteFacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteFaces', 'POST', '/green/sface/face/delete', 'json', false, 'json', request);
}

model DeleteGroupsRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DeleteGroupsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGroupsResponseBody(name='body'),
}

async function deleteGroups(request: DeleteGroupsRequest): DeleteGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteGroups', 'POST', '/green/sface/person/groups/delete', 'json', false, 'json', request);
}

model DeletePersonRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DeletePersonResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeletePersonResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePersonResponseBody(name='body'),
}

async function deletePerson(request: DeletePersonRequest): DeletePersonResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePerson', 'POST', '/green/sface/person/delete', 'json', false, 'json', request);
}

model DeleteSimilarityImageRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model DeleteSimilarityImageResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSimilarityImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSimilarityImageResponseBody(name='body'),
}

async function deleteSimilarityImage(request: DeleteSimilarityImageRequest): DeleteSimilarityImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSimilarityImage', 'POST', '/green/similarity/image/delete', 'json', false, 'json', request);
}

model DeleteSimilarityLibraryRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model DeleteSimilarityLibraryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSimilarityLibraryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSimilarityLibraryResponseBody(name='body'),
}

async function deleteSimilarityLibrary(request: DeleteSimilarityLibraryRequest): DeleteSimilarityLibraryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSimilarityLibrary', 'POST', '/green/similarity/library/delete', 'json', false, 'json', request);
}

model DeleteVideoDnaRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model DeleteVideoDnaResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVideoDnaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVideoDnaResponseBody(name='body'),
}

async function deleteVideoDna(request: DeleteVideoDnaRequest): DeleteVideoDnaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteVideoDna', 'POST', '/green/video/dna/delete', 'json', false, 'json', request);
}

model DeleteVideoDnaGroupRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model DeleteVideoDnaGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVideoDnaGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVideoDnaGroupResponseBody(name='body'),
}

async function deleteVideoDnaGroup(request: DeleteVideoDnaGroupRequest): DeleteVideoDnaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteVideoDnaGroup', 'POST', '/green/video/dna/group/delete', 'json', false, 'json', request);
}

model DetectFaceRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model DetectFaceResponseBody = {
  requestId?: string(name='requestId'),
}

model DetectFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectFaceResponseBody(name='body'),
}

async function detectFace(request: DetectFaceRequest): DetectFaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DetectFace', 'POST', '/green/face/detect', 'json', false, 'json', request);
}

model FileAsyncScanRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model FileAsyncScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model FileAsyncScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FileAsyncScanResponseBody(name='body'),
}

async function fileAsyncScan(request: FileAsyncScanRequest): FileAsyncScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FileAsyncScan', 'POST', '/green/file/asyncscan', 'json', false, 'json', request);
}

model FileAsyncScanResultsRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model FileAsyncScanResultsResponseBody = {
  requestId?: string(name='RequestId'),
}

model FileAsyncScanResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FileAsyncScanResultsResponseBody(name='body'),
}

async function fileAsyncScanResults(request: FileAsyncScanResultsRequest): FileAsyncScanResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FileAsyncScanResults', 'POST', '/green/file/results', 'json', false, 'json', request);
}

model FileAsyncScanV2Request {
}

model FileAsyncScanV2ResponseBody = {
  requestId?: string(name='requestId', example='DA36A1DA-C466-538D-AD52-E64D75597750'),
}

model FileAsyncScanV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FileAsyncScanV2ResponseBody(name='body'),
}

async function fileAsyncScanV2(request: FileAsyncScanV2Request): FileAsyncScanV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FileAsyncScanV2', 'POST', '/green/file/asyncscanv2', 'json', false, 'json', request);
}

model GetFacesRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model GetFacesResponseBody = {
  requestId?: string(name='RequestId'),
}

model GetFacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFacesResponseBody(name='body'),
}

async function getFaces(request: GetFacesRequest): GetFacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetFaces', 'POST', '/green/sface/faces', 'json', false, 'json', request);
}

model GetGroupsRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model GetGroupsResponseBody = {
  requestId?: string(name='RequestId'),
}

model GetGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGroupsResponseBody(name='body'),
}

async function getGroups(request: GetGroupsRequest): GetGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetGroups', 'POST', '/green/sface/groups', 'json', false, 'json', request);
}

model GetPersonRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model GetPersonResponseBody = {
  requestId?: string(name='RequestId'),
}

model GetPersonResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPersonResponseBody(name='body'),
}

async function getPerson(request: GetPersonRequest): GetPersonResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPerson', 'POST', '/green/sface/person', 'json', false, 'json', request);
}

model GetPersonsRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model GetPersonsResponseBody = {
  requestId?: string(name='RequestId'),
}

model GetPersonsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPersonsResponseBody(name='body'),
}

async function getPersons(request: GetPersonsRequest): GetPersonsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPersons', 'POST', '/green/sface/group/persons', 'json', false, 'json', request);
}

model GetSimilarityImageRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model GetSimilarityImageResponseBody = {
  requestId?: string(name='RequestId'),
}

model GetSimilarityImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSimilarityImageResponseBody(name='body'),
}

async function getSimilarityImage(request: GetSimilarityImageRequest): GetSimilarityImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSimilarityImage', 'POST', '/green/similarity/image/get', 'json', false, 'json', request);
}

model GetSimilarityLibraryRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model GetSimilarityLibraryResponseBody = {
  requestId?: string(name='RequestId'),
}

model GetSimilarityLibraryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSimilarityLibraryResponseBody(name='body'),
}

async function getSimilarityLibrary(request: GetSimilarityLibraryRequest): GetSimilarityLibraryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSimilarityLibrary', 'POST', '/green/similarity/library/get', 'json', false, 'json', request);
}

model ImageAsyncManualScanRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model ImageAsyncManualScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model ImageAsyncManualScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImageAsyncManualScanResponseBody(name='body'),
}

async function imageAsyncManualScan(request: ImageAsyncManualScanRequest): ImageAsyncManualScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ImageAsyncManualScan', 'POST', '/green/image/manual/asyncScan', 'json', false, 'json', request);
}

model ImageAsyncManualScanResultsRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model ImageAsyncManualScanResultsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ImageAsyncManualScanResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImageAsyncManualScanResultsResponseBody(name='body'),
}

async function imageAsyncManualScanResults(request: ImageAsyncManualScanResultsRequest): ImageAsyncManualScanResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ImageAsyncManualScanResults', 'POST', '/green/image/manual/scan/results', 'json', false, 'json', request);
}

model ImageAsyncScanRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model ImageAsyncScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model ImageAsyncScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImageAsyncScanResponseBody(name='body'),
}

async function imageAsyncScan(request: ImageAsyncScanRequest): ImageAsyncScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ImageAsyncScan', 'POST', '/green/image/asyncscan', 'json', false, 'json', request);
}

model ImageAsyncScanResultsRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model ImageAsyncScanResultsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ImageAsyncScanResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImageAsyncScanResultsResponseBody(name='body'),
}

async function imageAsyncScanResults(request: ImageAsyncScanResultsRequest): ImageAsyncScanResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ImageAsyncScanResults', 'POST', '/green/image/results', 'json', false, 'json', request);
}

model ImageScanFeedbackRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model ImageScanFeedbackResponseBody = {
  requestId?: string(name='RequestId'),
}

model ImageScanFeedbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImageScanFeedbackResponseBody(name='body'),
}

async function imageScanFeedback(request: ImageScanFeedbackRequest): ImageScanFeedbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ImageScanFeedback', 'POST', '/green/image/feedback', 'json', false, 'json', request);
}

model ImageSyncScanRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model ImageSyncScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model ImageSyncScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImageSyncScanResponseBody(name='body'),
}

async function imageSyncScan(request: ImageSyncScanRequest): ImageSyncScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ImageSyncScan', 'POST', '/green/image/scan', 'json', false, 'json', request);
}

model ListSimilarityImagesRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model ListSimilarityImagesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ListSimilarityImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSimilarityImagesResponseBody(name='body'),
}

async function listSimilarityImages(request: ListSimilarityImagesRequest): ListSimilarityImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSimilarityImages', 'POST', '/green/similarity/image/list', 'json', false, 'json', request);
}

model ListSimilarityLibrariesRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model ListSimilarityLibrariesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ListSimilarityLibrariesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSimilarityLibrariesResponseBody(name='body'),
}

async function listSimilarityLibraries(request: ListSimilarityLibrariesRequest): ListSimilarityLibrariesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSimilarityLibraries', 'POST', '/green/similarity/library/list', 'json', false, 'json', request);
}

model LiveStreamAsyncScanRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model LiveStreamAsyncScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model LiveStreamAsyncScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LiveStreamAsyncScanResponseBody(name='body'),
}

async function liveStreamAsyncScan(request: LiveStreamAsyncScanRequest): LiveStreamAsyncScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'LiveStreamAsyncScan', 'POST', '/green/livestream/asyncscan', 'json', false, 'json', request);
}

model LiveStreamAsyncScanResultsRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model LiveStreamAsyncScanResultsResponseBody = {
  requestId?: string(name='RequestId'),
}

model LiveStreamAsyncScanResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LiveStreamAsyncScanResultsResponseBody(name='body'),
}

async function liveStreamAsyncScanResults(request: LiveStreamAsyncScanResultsRequest): LiveStreamAsyncScanResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'LiveStreamAsyncScanResults', 'POST', '/green/livestream/results', 'json', false, 'json', request);
}

model LiveStreamCancelScanRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model LiveStreamCancelScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model LiveStreamCancelScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LiveStreamCancelScanResponseBody(name='body'),
}

async function liveStreamCancelScan(request: LiveStreamCancelScanRequest): LiveStreamCancelScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'LiveStreamCancelScan', 'POST', '/green/livestream/cancelscan', 'json', false, 'json', request);
}

model SetPersonRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model SetPersonResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetPersonResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetPersonResponseBody(name='body'),
}

async function setPerson(request: SetPersonRequest): SetPersonResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SetPerson', 'POST', '/green/sface/person/update', 'json', false, 'json', request);
}

model TextAsyncManualScanRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model TextAsyncManualScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model TextAsyncManualScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextAsyncManualScanResponseBody(name='body'),
}

async function textAsyncManualScan(request: TextAsyncManualScanRequest): TextAsyncManualScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TextAsyncManualScan', 'POST', '/green/text/manual/asyncScan', 'json', false, 'json', request);
}

model TextAsyncManualScanResultsRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model TextAsyncManualScanResultsResponseBody = {
  requestId?: string(name='RequestId'),
}

model TextAsyncManualScanResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextAsyncManualScanResultsResponseBody(name='body'),
}

async function textAsyncManualScanResults(request: TextAsyncManualScanResultsRequest): TextAsyncManualScanResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TextAsyncManualScanResults', 'POST', '/green/text/manual/scan/results', 'json', false, 'json', request);
}

model TextFeedbackRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model TextFeedbackResponseBody = {
  requestId?: string(name='RequestId'),
}

model TextFeedbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextFeedbackResponseBody(name='body'),
}

async function textFeedback(request: TextFeedbackRequest): TextFeedbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TextFeedback', 'POST', '/green/text/feedback', 'json', false, 'json', request);
}

model TextScanRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model TextScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model TextScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TextScanResponseBody(name='body'),
}

async function textScan(request: TextScanRequest): TextScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TextScan', 'POST', '/green/text/scan', 'json', false, 'json', request);
}

model UploadCredentialsRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model UploadCredentialsResponseBody = {
  requestId?: string(name='RequestId'),
}

model UploadCredentialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadCredentialsResponseBody(name='body'),
}

async function uploadCredentials(request: UploadCredentialsRequest): UploadCredentialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UploadCredentials', 'POST', '/green/credentials/uploadcredentials', 'json', false, 'json', request);
}

model VideoAsyncManualScanRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model VideoAsyncManualScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model VideoAsyncManualScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VideoAsyncManualScanResponseBody(name='body'),
}

async function videoAsyncManualScan(request: VideoAsyncManualScanRequest): VideoAsyncManualScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VideoAsyncManualScan', 'POST', '/green/video/manual/asyncScan', 'json', false, 'json', request);
}

model VideoAsyncManualScanResultsRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model VideoAsyncManualScanResultsResponseBody = {
  requestId?: string(name='RequestId'),
}

model VideoAsyncManualScanResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VideoAsyncManualScanResultsResponseBody(name='body'),
}

async function videoAsyncManualScanResults(request: VideoAsyncManualScanResultsRequest): VideoAsyncManualScanResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VideoAsyncManualScanResults', 'POST', '/green/video/manual/scan/results', 'json', false, 'json', request);
}

model VideoAsyncScanRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model VideoAsyncScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model VideoAsyncScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VideoAsyncScanResponseBody(name='body'),
}

async function videoAsyncScan(request: VideoAsyncScanRequest): VideoAsyncScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VideoAsyncScan', 'POST', '/green/video/asyncscan', 'json', false, 'json', request);
}

model VideoAsyncScanResultsRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model VideoAsyncScanResultsResponseBody = {
  requestId?: string(name='RequestId'),
}

model VideoAsyncScanResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VideoAsyncScanResultsResponseBody(name='body'),
}

async function videoAsyncScanResults(request: VideoAsyncScanResultsRequest): VideoAsyncScanResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VideoAsyncScanResults', 'POST', '/green/video/results', 'json', false, 'json', request);
}

model VideoCancelScanRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model VideoCancelScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model VideoCancelScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VideoCancelScanResponseBody(name='body'),
}

async function videoCancelScan(request: VideoCancelScanRequest): VideoCancelScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VideoCancelScan', 'POST', '/green/video/cancelscan', 'json', false, 'json', request);
}

model VideoFeedbackRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model VideoFeedbackResponseBody = {
  requestId?: string(name='RequestId'),
}

model VideoFeedbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VideoFeedbackResponseBody(name='body'),
}

async function videoFeedback(request: VideoFeedbackRequest): VideoFeedbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VideoFeedback', 'POST', '/green/video/feedback', 'json', false, 'json', request);
}

model VideoSyncScanRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model VideoSyncScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model VideoSyncScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VideoSyncScanResponseBody(name='body'),
}

async function videoSyncScan(request: VideoSyncScanRequest): VideoSyncScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VideoSyncScan', 'POST', '/green/video/syncscan', 'json', false, 'json', request);
}

model VodAsyncScanRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model VodAsyncScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model VodAsyncScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VodAsyncScanResponseBody(name='body'),
}

async function vodAsyncScan(request: VodAsyncScanRequest): VodAsyncScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VodAsyncScan', 'POST', '/green/vod/asyncscan', 'json', false, 'json', request);
}

model VodAsyncScanResultsRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model VodAsyncScanResultsResponseBody = {
  requestId?: string(name='RequestId'),
}

model VodAsyncScanResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VodAsyncScanResultsResponseBody(name='body'),
}

async function vodAsyncScanResults(request: VodAsyncScanResultsRequest): VodAsyncScanResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VodAsyncScanResults', 'POST', '/green/vod/results', 'json', false, 'json', request);
}

model VoiceAsyncManualScanRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model VoiceAsyncManualScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model VoiceAsyncManualScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VoiceAsyncManualScanResponseBody(name='body'),
}

async function voiceAsyncManualScan(request: VoiceAsyncManualScanRequest): VoiceAsyncManualScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VoiceAsyncManualScan', 'POST', '/green/voice/manual/asyncScan', 'json', false, 'json', request);
}

model VoiceAsyncManualScanResultsRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model VoiceAsyncManualScanResultsResponseBody = {
  requestId?: string(name='RequestId'),
}

model VoiceAsyncManualScanResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VoiceAsyncManualScanResultsResponseBody(name='body'),
}

async function voiceAsyncManualScanResults(request: VoiceAsyncManualScanResultsRequest): VoiceAsyncManualScanResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VoiceAsyncManualScanResults', 'POST', '/green/voice/manual/scan/results', 'json', false, 'json', request);
}

model VoiceAsyncScanRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model VoiceAsyncScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model VoiceAsyncScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VoiceAsyncScanResponseBody(name='body'),
}

async function voiceAsyncScan(request: VoiceAsyncScanRequest): VoiceAsyncScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VoiceAsyncScan', 'POST', '/green/voice/asyncscan', 'json', false, 'json', request);
}

model VoiceAsyncScanResultsRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model VoiceAsyncScanResultsResponseBody = {
  requestId?: string(name='RequestId'),
}

model VoiceAsyncScanResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VoiceAsyncScanResultsResponseBody(name='body'),
}

async function voiceAsyncScanResults(request: VoiceAsyncScanResultsRequest): VoiceAsyncScanResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VoiceAsyncScanResults', 'POST', '/green/voice/results', 'json', false, 'json', request);
}

model VoiceCancelScanRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model VoiceCancelScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model VoiceCancelScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VoiceCancelScanResponseBody(name='body'),
}

async function voiceCancelScan(request: VoiceCancelScanRequest): VoiceCancelScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VoiceCancelScan', 'POST', '/green/voice/cancelscan', 'json', false, 'json', request);
}

model VoiceIdentityCheckRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model VoiceIdentityCheckResponseBody = {
  requestId?: string(name='RequestId'),
}

model VoiceIdentityCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VoiceIdentityCheckResponseBody(name='body'),
}

async function voiceIdentityCheck(request: VoiceIdentityCheckRequest): VoiceIdentityCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VoiceIdentityCheck', 'POST', '/green/voice/auth/check', 'json', false, 'json', request);
}

model VoiceIdentityRegisterRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model VoiceIdentityRegisterResponseBody = {
  requestId?: string(name='RequestId'),
}

model VoiceIdentityRegisterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VoiceIdentityRegisterResponseBody(name='body'),
}

async function voiceIdentityRegister(request: VoiceIdentityRegisterRequest): VoiceIdentityRegisterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VoiceIdentityRegister', 'POST', '/green/voice/auth/register', 'json', false, 'json', request);
}

model VoiceIdentityStartCheckRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model VoiceIdentityStartCheckResponseBody = {
  requestId?: string(name='RequestId'),
}

model VoiceIdentityStartCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VoiceIdentityStartCheckResponseBody(name='body'),
}

async function voiceIdentityStartCheck(request: VoiceIdentityStartCheckRequest): VoiceIdentityStartCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VoiceIdentityStartCheck', 'POST', '/green/voice/auth/start/check', 'json', false, 'json', request);
}

model VoiceIdentityStartRegisterRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model VoiceIdentityStartRegisterResponseBody = {
  requestId?: string(name='RequestId'),
}

model VoiceIdentityStartRegisterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VoiceIdentityStartRegisterResponseBody(name='body'),
}

async function voiceIdentityStartRegister(request: VoiceIdentityStartRegisterRequest): VoiceIdentityStartRegisterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VoiceIdentityStartRegister', 'POST', '/green/voice/auth/start/register', 'json', false, 'json', request);
}

model VoiceIdentityUnregisterRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model VoiceIdentityUnregisterResponseBody = {
  requestId?: string(name='RequestId'),
}

model VoiceIdentityUnregisterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VoiceIdentityUnregisterResponseBody(name='body'),
}

async function voiceIdentityUnregister(request: VoiceIdentityUnregisterRequest): VoiceIdentityUnregisterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VoiceIdentityUnregister', 'POST', '/green/voice/auth/unregister', 'json', false, 'json', request);
}

model VoiceSyncScanRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model VoiceSyncScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model VoiceSyncScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VoiceSyncScanResponseBody(name='body'),
}

async function voiceSyncScan(request: VoiceSyncScanRequest): VoiceSyncScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VoiceSyncScan', 'POST', '/green/voice/syncscan', 'json', false, 'json', request);
}

model WebpageAsyncScanRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model WebpageAsyncScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model WebpageAsyncScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: WebpageAsyncScanResponseBody(name='body'),
}

async function webpageAsyncScan(request: WebpageAsyncScanRequest): WebpageAsyncScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'WebpageAsyncScan', 'POST', '/green/webpage/asyncscan', 'json', false, 'json', request);
}

model WebpageAsyncScanResultsRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model WebpageAsyncScanResultsResponseBody = {
  requestId?: string(name='RequestId'),
}

model WebpageAsyncScanResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: WebpageAsyncScanResultsResponseBody(name='body'),
}

async function webpageAsyncScanResults(request: WebpageAsyncScanResultsRequest): WebpageAsyncScanResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'WebpageAsyncScanResults', 'POST', '/green/webpage/results', 'json', false, 'json', request);
}

model WebpageSyncScanRequest {
  clientInfo?: string(name='ClientInfo', position='Query'),
}

model WebpageSyncScanResponseBody = {
  requestId?: string(name='RequestId'),
}

model WebpageSyncScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: WebpageSyncScanResponseBody(name='body'),
}

async function webpageSyncScan(request: WebpageSyncScanRequest): WebpageSyncScanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'WebpageSyncScan', 'POST', '/green/webpage/scan', 'json', false, 'json', request);
}

