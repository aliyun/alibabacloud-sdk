/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    ap-northeast-1 = 'green.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'green.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'green.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'green.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'green.ap-southeast-1.aliyuncs.com',
    cn-chengdu = 'green.aliyuncs.com',
    cn-hongkong = 'green.aliyuncs.com',
    cn-huhehaote = 'green.aliyuncs.com',
    cn-qingdao = 'green.aliyuncs.com',
    cn-zhangjiakou = 'green.aliyuncs.com',
    eu-central-1 = 'green.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'green.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'green.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'green.ap-southeast-1.aliyuncs.com',
    cn-hangzhou-finance = 'green.aliyuncs.com',
    cn-shenzhen-finance-1 = 'green.aliyuncs.com',
    cn-shanghai-finance-1 = 'green.aliyuncs.com',
    cn-north-2-gov-1 = 'green.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('green', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddFacesRequest {
  regionId?: string(name='RegionId'),
  clientInfo?: string(name='ClientInfo'),
}

model AddFacesResponse = {
  headers: map[string]string(name='headers'),
}

async function addFaces(request: AddFacesRequest): AddFacesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addFacesWithOptions(request, headers, runtime);
}

async function addFacesWithOptions(request: AddFacesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddFacesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('AddFaces', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/sface/face/add`, 'none', req, runtime);
}

model AddGroupsRequest {
  regionId?: string(name='RegionId'),
  clientInfo?: string(name='ClientInfo'),
}

model AddGroupsResponse = {
  headers: map[string]string(name='headers'),
}

async function addGroups(request: AddGroupsRequest): AddGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addGroupsWithOptions(request, headers, runtime);
}

async function addGroupsWithOptions(request: AddGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddGroupsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('AddGroups', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/sface/person/groups/add`, 'none', req, runtime);
}

model AddPersonRequest {
  regionId?: string(name='RegionId'),
  clientInfo?: string(name='ClientInfo'),
}

model AddPersonResponse = {
  headers: map[string]string(name='headers'),
}

async function addPerson(request: AddPersonRequest): AddPersonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addPersonWithOptions(request, headers, runtime);
}

async function addPersonWithOptions(request: AddPersonRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddPersonResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('AddPerson', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/sface/person/add`, 'none', req, runtime);
}

model AddSimilarityImageRequest {
  clientInfo?: string(name='ClientInfo'),
}

model AddSimilarityImageResponse = {
  headers: map[string]string(name='headers'),
}

async function addSimilarityImage(request: AddSimilarityImageRequest): AddSimilarityImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addSimilarityImageWithOptions(request, headers, runtime);
}

async function addSimilarityImageWithOptions(request: AddSimilarityImageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSimilarityImageResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('AddSimilarityImage', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/similarity/image/add`, 'none', req, runtime);
}

model AddSimilarityLibraryRequest {
  clientInfo?: string(name='ClientInfo'),
}

model AddSimilarityLibraryResponse = {
  headers: map[string]string(name='headers'),
}

async function addSimilarityLibrary(request: AddSimilarityLibraryRequest): AddSimilarityLibraryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addSimilarityLibraryWithOptions(request, headers, runtime);
}

async function addSimilarityLibraryWithOptions(request: AddSimilarityLibraryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddSimilarityLibraryResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('AddSimilarityLibrary', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/similarity/library/add`, 'none', req, runtime);
}

model AddVideoDnaRequest {
  clientInfo?: string(name='ClientInfo'),
}

model AddVideoDnaResponse = {
  headers: map[string]string(name='headers'),
}

async function addVideoDna(request: AddVideoDnaRequest): AddVideoDnaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addVideoDnaWithOptions(request, headers, runtime);
}

async function addVideoDnaWithOptions(request: AddVideoDnaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddVideoDnaResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('AddVideoDna', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/video/dna/add`, 'none', req, runtime);
}

model AddVideoDnaGroupRequest {
  clientInfo?: string(name='ClientInfo'),
}

model AddVideoDnaGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function addVideoDnaGroup(request: AddVideoDnaGroupRequest): AddVideoDnaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addVideoDnaGroupWithOptions(request, headers, runtime);
}

async function addVideoDnaGroupWithOptions(request: AddVideoDnaGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddVideoDnaGroupResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('AddVideoDnaGroup', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/video/dna/group/add`, 'none', req, runtime);
}

model DeleteFacesRequest {
  regionId?: string(name='RegionId'),
  clientInfo?: string(name='ClientInfo'),
}

model DeleteFacesResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteFaces(request: DeleteFacesRequest): DeleteFacesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteFacesWithOptions(request, headers, runtime);
}

async function deleteFacesWithOptions(request: DeleteFacesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFacesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DeleteFaces', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/sface/face/delete`, 'none', req, runtime);
}

model DeleteGroupsRequest {
  regionId?: string(name='RegionId'),
  clientInfo?: string(name='ClientInfo'),
}

model DeleteGroupsResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteGroups(request: DeleteGroupsRequest): DeleteGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteGroupsWithOptions(request, headers, runtime);
}

async function deleteGroupsWithOptions(request: DeleteGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteGroupsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DeleteGroups', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/sface/person/groups/delete`, 'none', req, runtime);
}

model DeletePersonRequest {
  regionId?: string(name='RegionId'),
  clientInfo?: string(name='ClientInfo'),
}

model DeletePersonResponse = {
  headers: map[string]string(name='headers'),
}

async function deletePerson(request: DeletePersonRequest): DeletePersonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deletePersonWithOptions(request, headers, runtime);
}

async function deletePersonWithOptions(request: DeletePersonRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeletePersonResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DeletePerson', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/sface/person/delete`, 'none', req, runtime);
}

model DeleteSimilarityImageRequest {
  clientInfo?: string(name='ClientInfo'),
}

model DeleteSimilarityImageResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteSimilarityImage(request: DeleteSimilarityImageRequest): DeleteSimilarityImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteSimilarityImageWithOptions(request, headers, runtime);
}

async function deleteSimilarityImageWithOptions(request: DeleteSimilarityImageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSimilarityImageResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DeleteSimilarityImage', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/similarity/image/delete`, 'none', req, runtime);
}

model DeleteSimilarityLibraryRequest {
  clientInfo?: string(name='ClientInfo'),
}

model DeleteSimilarityLibraryResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteSimilarityLibrary(request: DeleteSimilarityLibraryRequest): DeleteSimilarityLibraryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteSimilarityLibraryWithOptions(request, headers, runtime);
}

async function deleteSimilarityLibraryWithOptions(request: DeleteSimilarityLibraryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSimilarityLibraryResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DeleteSimilarityLibrary', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/similarity/library/delete`, 'none', req, runtime);
}

model DeleteVideoDnaRequest {
  clientInfo?: string(name='ClientInfo'),
}

model DeleteVideoDnaResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteVideoDna(request: DeleteVideoDnaRequest): DeleteVideoDnaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteVideoDnaWithOptions(request, headers, runtime);
}

async function deleteVideoDnaWithOptions(request: DeleteVideoDnaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteVideoDnaResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DeleteVideoDna', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/video/dna/delete`, 'none', req, runtime);
}

model DeleteVideoDnaGroupRequest {
  clientInfo?: string(name='ClientInfo'),
}

model DeleteVideoDnaGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteVideoDnaGroup(request: DeleteVideoDnaGroupRequest): DeleteVideoDnaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteVideoDnaGroupWithOptions(request, headers, runtime);
}

async function deleteVideoDnaGroupWithOptions(request: DeleteVideoDnaGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteVideoDnaGroupResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DeleteVideoDnaGroup', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/video/dna/group/delete`, 'none', req, runtime);
}

model DetectFaceRequest {
  clientInfo?: string(name='ClientInfo'),
}

model DetectFaceResponse = {
  headers: map[string]string(name='headers'),
}

async function detectFace(request: DetectFaceRequest): DetectFaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return detectFaceWithOptions(request, headers, runtime);
}

async function detectFaceWithOptions(request: DetectFaceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DetectFaceResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DetectFace', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/face/detect`, 'none', req, runtime);
}

model FileAsyncScanRequest {
  clientInfo?: string(name='ClientInfo'),
}

model FileAsyncScanResponse = {
  headers: map[string]string(name='headers'),
}

async function fileAsyncScan(request: FileAsyncScanRequest): FileAsyncScanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return fileAsyncScanWithOptions(request, headers, runtime);
}

async function fileAsyncScanWithOptions(request: FileAsyncScanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FileAsyncScanResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('FileAsyncScan', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/file/asyncscan`, 'none', req, runtime);
}

model FileAsyncScanResultsRequest {
  clientInfo?: string(name='ClientInfo'),
}

model FileAsyncScanResultsResponse = {
  headers: map[string]string(name='headers'),
}

async function fileAsyncScanResults(request: FileAsyncScanResultsRequest): FileAsyncScanResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return fileAsyncScanResultsWithOptions(request, headers, runtime);
}

async function fileAsyncScanResultsWithOptions(request: FileAsyncScanResultsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FileAsyncScanResultsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('FileAsyncScanResults', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/file/results`, 'none', req, runtime);
}

model GetAddVideoDnaResultsRequest {
  clientInfo?: string(name='ClientInfo'),
}

model GetAddVideoDnaResultsResponse = {
  headers: map[string]string(name='headers'),
}

async function getAddVideoDnaResults(request: GetAddVideoDnaResultsRequest): GetAddVideoDnaResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getAddVideoDnaResultsWithOptions(request, headers, runtime);
}

async function getAddVideoDnaResultsWithOptions(request: GetAddVideoDnaResultsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAddVideoDnaResultsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetAddVideoDnaResults', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/video/dna/add/results`, 'none', req, runtime);
}

model GetFacesRequest {
  regionId?: string(name='RegionId'),
  clientInfo?: string(name='ClientInfo'),
}

model GetFacesResponseBody = {
  requestId?: string(name='RequestId'),
}

model GetFacesResponse = {
  headers: map[string]string(name='headers'),
  body: GetFacesResponseBody(name='body'),
}

async function getFaces(request: GetFacesRequest): GetFacesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getFacesWithOptions(request, headers, runtime);
}

async function getFacesWithOptions(request: GetFacesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetFacesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetFaces', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/sface/faces`, 'json', req, runtime);
}

model GetGroupsRequest {
  regionId?: string(name='RegionId'),
  clientInfo?: string(name='ClientInfo'),
}

model GetGroupsResponse = {
  headers: map[string]string(name='headers'),
}

async function getGroups(request: GetGroupsRequest): GetGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getGroupsWithOptions(request, headers, runtime);
}

async function getGroupsWithOptions(request: GetGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetGroupsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetGroups', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/sface/groups`, 'none', req, runtime);
}

model GetPersonRequest {
  regionId?: string(name='RegionId'),
  clientInfo?: string(name='ClientInfo'),
}

model GetPersonResponse = {
  headers: map[string]string(name='headers'),
}

async function getPerson(request: GetPersonRequest): GetPersonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPersonWithOptions(request, headers, runtime);
}

async function getPersonWithOptions(request: GetPersonRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPersonResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetPerson', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/sface/person`, 'none', req, runtime);
}

model GetPersonsRequest {
  regionId?: string(name='RegionId'),
  clientInfo?: string(name='ClientInfo'),
}

model GetPersonsResponse = {
  headers: map[string]string(name='headers'),
}

async function getPersons(request: GetPersonsRequest): GetPersonsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPersonsWithOptions(request, headers, runtime);
}

async function getPersonsWithOptions(request: GetPersonsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPersonsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetPersons', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/sface/group/persons`, 'none', req, runtime);
}

model GetSimilarityImageRequest {
  clientInfo?: string(name='ClientInfo'),
}

model GetSimilarityImageResponse = {
  headers: map[string]string(name='headers'),
}

async function getSimilarityImage(request: GetSimilarityImageRequest): GetSimilarityImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSimilarityImageWithOptions(request, headers, runtime);
}

async function getSimilarityImageWithOptions(request: GetSimilarityImageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSimilarityImageResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetSimilarityImage', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/similarity/image/get`, 'none', req, runtime);
}

model GetSimilarityLibraryRequest {
  clientInfo?: string(name='ClientInfo'),
}

model GetSimilarityLibraryResponse = {
  headers: map[string]string(name='headers'),
}

async function getSimilarityLibrary(request: GetSimilarityLibraryRequest): GetSimilarityLibraryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSimilarityLibraryWithOptions(request, headers, runtime);
}

async function getSimilarityLibraryWithOptions(request: GetSimilarityLibraryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSimilarityLibraryResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetSimilarityLibrary', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/similarity/library/get`, 'none', req, runtime);
}

model ImageAsyncManualScanRequest {
  clientInfo?: string(name='ClientInfo'),
}

model ImageAsyncManualScanResponse = {
  headers: map[string]string(name='headers'),
}

async function imageAsyncManualScan(request: ImageAsyncManualScanRequest): ImageAsyncManualScanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return imageAsyncManualScanWithOptions(request, headers, runtime);
}

async function imageAsyncManualScanWithOptions(request: ImageAsyncManualScanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImageAsyncManualScanResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ImageAsyncManualScan', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/image/manual/asyncScan`, 'none', req, runtime);
}

model ImageAsyncManualScanResultsRequest {
  clientInfo?: string(name='ClientInfo'),
}

model ImageAsyncManualScanResultsResponse = {
  headers: map[string]string(name='headers'),
}

async function imageAsyncManualScanResults(request: ImageAsyncManualScanResultsRequest): ImageAsyncManualScanResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return imageAsyncManualScanResultsWithOptions(request, headers, runtime);
}

async function imageAsyncManualScanResultsWithOptions(request: ImageAsyncManualScanResultsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImageAsyncManualScanResultsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ImageAsyncManualScanResults', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/image/manual/scan/results`, 'none', req, runtime);
}

model ImageAsyncScanRequest {
  clientInfo?: string(name='ClientInfo'),
}

model ImageAsyncScanResponse = {
  headers: map[string]string(name='headers'),
}

async function imageAsyncScan(request: ImageAsyncScanRequest): ImageAsyncScanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return imageAsyncScanWithOptions(request, headers, runtime);
}

async function imageAsyncScanWithOptions(request: ImageAsyncScanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImageAsyncScanResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ImageAsyncScan', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/image/asyncscan`, 'none', req, runtime);
}

model ImageAsyncScanResultsRequest {
  clientInfo?: string(name='ClientInfo'),
}

model ImageAsyncScanResultsResponse = {
  headers: map[string]string(name='headers'),
}

async function imageAsyncScanResults(request: ImageAsyncScanResultsRequest): ImageAsyncScanResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return imageAsyncScanResultsWithOptions(request, headers, runtime);
}

async function imageAsyncScanResultsWithOptions(request: ImageAsyncScanResultsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImageAsyncScanResultsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ImageAsyncScanResults', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/image/results`, 'none', req, runtime);
}

model ImageScanFeedbackRequest {
  clientInfo?: string(name='ClientInfo'),
}

model ImageScanFeedbackResponse = {
  headers: map[string]string(name='headers'),
}

async function imageScanFeedback(request: ImageScanFeedbackRequest): ImageScanFeedbackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return imageScanFeedbackWithOptions(request, headers, runtime);
}

async function imageScanFeedbackWithOptions(request: ImageScanFeedbackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImageScanFeedbackResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ImageScanFeedback', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/image/feedback`, 'none', req, runtime);
}

model ImageSyncScanRequest {
  clientInfo?: string(name='ClientInfo'),
}

model ImageSyncScanResponse = {
  headers: map[string]string(name='headers'),
}

async function imageSyncScan(request: ImageSyncScanRequest): ImageSyncScanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return imageSyncScanWithOptions(request, headers, runtime);
}

async function imageSyncScanWithOptions(request: ImageSyncScanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImageSyncScanResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ImageSyncScan', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/image/scan`, 'none', req, runtime);
}

model ListSimilarityImagesRequest {
  clientInfo?: string(name='ClientInfo'),
}

model ListSimilarityImagesResponse = {
  headers: map[string]string(name='headers'),
}

async function listSimilarityImages(request: ListSimilarityImagesRequest): ListSimilarityImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSimilarityImagesWithOptions(request, headers, runtime);
}

async function listSimilarityImagesWithOptions(request: ListSimilarityImagesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSimilarityImagesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListSimilarityImages', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/similarity/image/list`, 'none', req, runtime);
}

model ListSimilarityLibrariesRequest {
  clientInfo?: string(name='ClientInfo'),
}

model ListSimilarityLibrariesResponse = {
  headers: map[string]string(name='headers'),
}

async function listSimilarityLibraries(request: ListSimilarityLibrariesRequest): ListSimilarityLibrariesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSimilarityLibrariesWithOptions(request, headers, runtime);
}

async function listSimilarityLibrariesWithOptions(request: ListSimilarityLibrariesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSimilarityLibrariesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListSimilarityLibraries', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/similarity/library/list`, 'none', req, runtime);
}

model LiveStreamAsyncScanRequest {
  clientInfo?: string(name='ClientInfo'),
}

model LiveStreamAsyncScanResponse = {
  headers: map[string]string(name='headers'),
}

async function liveStreamAsyncScan(request: LiveStreamAsyncScanRequest): LiveStreamAsyncScanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return liveStreamAsyncScanWithOptions(request, headers, runtime);
}

async function liveStreamAsyncScanWithOptions(request: LiveStreamAsyncScanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): LiveStreamAsyncScanResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('LiveStreamAsyncScan', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/livestream/asyncscan`, 'none', req, runtime);
}

model LiveStreamAsyncScanResultsRequest {
  clientInfo?: string(name='ClientInfo'),
}

model LiveStreamAsyncScanResultsResponse = {
  headers: map[string]string(name='headers'),
}

async function liveStreamAsyncScanResults(request: LiveStreamAsyncScanResultsRequest): LiveStreamAsyncScanResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return liveStreamAsyncScanResultsWithOptions(request, headers, runtime);
}

async function liveStreamAsyncScanResultsWithOptions(request: LiveStreamAsyncScanResultsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): LiveStreamAsyncScanResultsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('LiveStreamAsyncScanResults', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/livestream/results`, 'none', req, runtime);
}

model LiveStreamCancelScanRequest {
  clientInfo?: string(name='ClientInfo'),
}

model LiveStreamCancelScanResponse = {
  headers: map[string]string(name='headers'),
}

async function liveStreamCancelScan(request: LiveStreamCancelScanRequest): LiveStreamCancelScanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return liveStreamCancelScanWithOptions(request, headers, runtime);
}

async function liveStreamCancelScanWithOptions(request: LiveStreamCancelScanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): LiveStreamCancelScanResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('LiveStreamCancelScan', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/livestream/cancelscan`, 'none', req, runtime);
}

model PostAsyncScanRequest {
  clientInfo?: string(name='ClientInfo'),
}

model PostAsyncScanResponse = {
  headers: map[string]string(name='headers'),
}

async function postAsyncScan(request: PostAsyncScanRequest): PostAsyncScanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return postAsyncScanWithOptions(request, headers, runtime);
}

async function postAsyncScanWithOptions(request: PostAsyncScanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PostAsyncScanResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('PostAsyncScan', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/post/asyncscan`, 'none', req, runtime);
}

model PostAsyncScanResultsRequest {
  clientInfo?: string(name='ClientInfo'),
}

model PostAsyncScanResultsResponse = {
  headers: map[string]string(name='headers'),
}

async function postAsyncScanResults(request: PostAsyncScanResultsRequest): PostAsyncScanResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return postAsyncScanResultsWithOptions(request, headers, runtime);
}

async function postAsyncScanResultsWithOptions(request: PostAsyncScanResultsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PostAsyncScanResultsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('PostAsyncScanResults', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/post/results`, 'none', req, runtime);
}

model SearchPersonRequest {
  regionId?: string(name='RegionId'),
  clientInfo?: string(name='ClientInfo'),
}

model SearchPersonResponse = {
  headers: map[string]string(name='headers'),
}

async function searchPerson(request: SearchPersonRequest): SearchPersonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return searchPersonWithOptions(request, headers, runtime);
}

async function searchPersonWithOptions(request: SearchPersonRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SearchPersonResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('SearchPerson', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/sface/search`, 'none', req, runtime);
}

model SetPersonRequest {
  regionId?: string(name='RegionId'),
  clientInfo?: string(name='ClientInfo'),
}

model SetPersonResponse = {
  headers: map[string]string(name='headers'),
}

async function setPerson(request: SetPersonRequest): SetPersonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return setPersonWithOptions(request, headers, runtime);
}

async function setPersonWithOptions(request: SetPersonRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SetPersonResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('SetPerson', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/sface/person/update`, 'none', req, runtime);
}

model TextAsyncManualScanRequest {
  clientInfo?: string(name='ClientInfo'),
}

model TextAsyncManualScanResponse = {
  headers: map[string]string(name='headers'),
}

async function textAsyncManualScan(request: TextAsyncManualScanRequest): TextAsyncManualScanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return textAsyncManualScanWithOptions(request, headers, runtime);
}

async function textAsyncManualScanWithOptions(request: TextAsyncManualScanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): TextAsyncManualScanResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('TextAsyncManualScan', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/text/manual/asyncScan`, 'none', req, runtime);
}

model TextAsyncManualScanResultsRequest {
  clientInfo?: string(name='ClientInfo'),
}

model TextAsyncManualScanResultsResponse = {
  headers: map[string]string(name='headers'),
}

async function textAsyncManualScanResults(request: TextAsyncManualScanResultsRequest): TextAsyncManualScanResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return textAsyncManualScanResultsWithOptions(request, headers, runtime);
}

async function textAsyncManualScanResultsWithOptions(request: TextAsyncManualScanResultsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): TextAsyncManualScanResultsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('TextAsyncManualScanResults', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/text/manual/scan/results`, 'none', req, runtime);
}

model TextFeedbackRequest {
  clientInfo?: string(name='ClientInfo'),
}

model TextFeedbackResponse = {
  headers: map[string]string(name='headers'),
}

async function textFeedback(request: TextFeedbackRequest): TextFeedbackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return textFeedbackWithOptions(request, headers, runtime);
}

async function textFeedbackWithOptions(request: TextFeedbackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): TextFeedbackResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('TextFeedback', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/text/feedback`, 'none', req, runtime);
}

model TextScanRequest {
  clientInfo?: string(name='ClientInfo'),
}

model TextScanResponse = {
  headers: map[string]string(name='headers'),
}

async function textScan(request: TextScanRequest): TextScanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return textScanWithOptions(request, headers, runtime);
}

async function textScanWithOptions(request: TextScanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): TextScanResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('TextScan', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/text/scan`, 'none', req, runtime);
}

model UploadCredentialsRequest {
  regionId?: string(name='RegionId'),
  clientInfo?: string(name='ClientInfo'),
}

model UploadCredentialsResponse = {
  headers: map[string]string(name='headers'),
}

async function uploadCredentials(request: UploadCredentialsRequest): UploadCredentialsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return uploadCredentialsWithOptions(request, headers, runtime);
}

async function uploadCredentialsWithOptions(request: UploadCredentialsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UploadCredentialsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('UploadCredentials', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/credentials/uploadcredentials`, 'none', req, runtime);
}

model VideoAsyncManualScanRequest {
  clientInfo?: string(name='ClientInfo'),
}

model VideoAsyncManualScanResponse = {
  headers: map[string]string(name='headers'),
}

async function videoAsyncManualScan(request: VideoAsyncManualScanRequest): VideoAsyncManualScanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return videoAsyncManualScanWithOptions(request, headers, runtime);
}

async function videoAsyncManualScanWithOptions(request: VideoAsyncManualScanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VideoAsyncManualScanResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('VideoAsyncManualScan', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/video/manual/asyncScan`, 'none', req, runtime);
}

model VideoAsyncManualScanResultsRequest {
  clientInfo?: string(name='ClientInfo'),
}

model VideoAsyncManualScanResultsResponse = {
  headers: map[string]string(name='headers'),
}

async function videoAsyncManualScanResults(request: VideoAsyncManualScanResultsRequest): VideoAsyncManualScanResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return videoAsyncManualScanResultsWithOptions(request, headers, runtime);
}

async function videoAsyncManualScanResultsWithOptions(request: VideoAsyncManualScanResultsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VideoAsyncManualScanResultsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('VideoAsyncManualScanResults', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/video/manual/scan/results`, 'none', req, runtime);
}

model VideoAsyncScanRequest {
  clientInfo?: string(name='ClientInfo'),
}

model VideoAsyncScanResponse = {
  headers: map[string]string(name='headers'),
}

async function videoAsyncScan(request: VideoAsyncScanRequest): VideoAsyncScanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return videoAsyncScanWithOptions(request, headers, runtime);
}

async function videoAsyncScanWithOptions(request: VideoAsyncScanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VideoAsyncScanResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('VideoAsyncScan', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/video/asyncscan`, 'none', req, runtime);
}

model VideoAsyncScanResultsRequest {
  clientInfo?: string(name='ClientInfo'),
}

model VideoAsyncScanResultsResponse = {
  headers: map[string]string(name='headers'),
}

async function videoAsyncScanResults(request: VideoAsyncScanResultsRequest): VideoAsyncScanResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return videoAsyncScanResultsWithOptions(request, headers, runtime);
}

async function videoAsyncScanResultsWithOptions(request: VideoAsyncScanResultsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VideoAsyncScanResultsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('VideoAsyncScanResults', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/video/results`, 'none', req, runtime);
}

model VideoCancelScanRequest {
  clientInfo?: string(name='ClientInfo'),
}

model VideoCancelScanResponse = {
  headers: map[string]string(name='headers'),
}

async function videoCancelScan(request: VideoCancelScanRequest): VideoCancelScanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return videoCancelScanWithOptions(request, headers, runtime);
}

async function videoCancelScanWithOptions(request: VideoCancelScanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VideoCancelScanResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('VideoCancelScan', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/video/cancelscan`, 'none', req, runtime);
}

model VideoFeedbackRequest {
  clientInfo?: string(name='ClientInfo'),
}

model VideoFeedbackResponse = {
  headers: map[string]string(name='headers'),
}

async function videoFeedback(request: VideoFeedbackRequest): VideoFeedbackResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return videoFeedbackWithOptions(request, headers, runtime);
}

async function videoFeedbackWithOptions(request: VideoFeedbackRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VideoFeedbackResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('VideoFeedback', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/video/feedback`, 'none', req, runtime);
}

model VideoSyncScanRequest {
  clientInfo?: string(name='ClientInfo'),
}

model VideoSyncScanResponse = {
  headers: map[string]string(name='headers'),
}

async function videoSyncScan(request: VideoSyncScanRequest): VideoSyncScanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return videoSyncScanWithOptions(request, headers, runtime);
}

async function videoSyncScanWithOptions(request: VideoSyncScanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VideoSyncScanResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('VideoSyncScan', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/video/syncscan`, 'none', req, runtime);
}

model VodAsyncScanRequest {
  clientInfo?: string(name='ClientInfo'),
}

model VodAsyncScanResponse = {
  headers: map[string]string(name='headers'),
}

async function vodAsyncScan(request: VodAsyncScanRequest): VodAsyncScanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return vodAsyncScanWithOptions(request, headers, runtime);
}

async function vodAsyncScanWithOptions(request: VodAsyncScanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VodAsyncScanResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('VodAsyncScan', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/vod/asyncscan`, 'none', req, runtime);
}

model VodAsyncScanResultsRequest {
  clientInfo?: string(name='ClientInfo'),
}

model VodAsyncScanResultsResponse = {
  headers: map[string]string(name='headers'),
}

async function vodAsyncScanResults(request: VodAsyncScanResultsRequest): VodAsyncScanResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return vodAsyncScanResultsWithOptions(request, headers, runtime);
}

async function vodAsyncScanResultsWithOptions(request: VodAsyncScanResultsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VodAsyncScanResultsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('VodAsyncScanResults', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/vod/results`, 'none', req, runtime);
}

model VoiceAsyncManualScanRequest {
  clientInfo?: string(name='ClientInfo'),
}

model VoiceAsyncManualScanResponse = {
  headers: map[string]string(name='headers'),
}

async function voiceAsyncManualScan(request: VoiceAsyncManualScanRequest): VoiceAsyncManualScanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return voiceAsyncManualScanWithOptions(request, headers, runtime);
}

async function voiceAsyncManualScanWithOptions(request: VoiceAsyncManualScanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VoiceAsyncManualScanResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('VoiceAsyncManualScan', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/voice/manual/asyncScan`, 'none', req, runtime);
}

model VoiceAsyncManualScanResultsRequest {
  clientInfo?: string(name='ClientInfo'),
}

model VoiceAsyncManualScanResultsResponse = {
  headers: map[string]string(name='headers'),
}

async function voiceAsyncManualScanResults(request: VoiceAsyncManualScanResultsRequest): VoiceAsyncManualScanResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return voiceAsyncManualScanResultsWithOptions(request, headers, runtime);
}

async function voiceAsyncManualScanResultsWithOptions(request: VoiceAsyncManualScanResultsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VoiceAsyncManualScanResultsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('VoiceAsyncManualScanResults', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/voice/manual/scan/results`, 'none', req, runtime);
}

model VoiceAsyncScanRequest {
  clientInfo?: string(name='ClientInfo'),
}

model VoiceAsyncScanResponse = {
  headers: map[string]string(name='headers'),
}

async function voiceAsyncScan(request: VoiceAsyncScanRequest): VoiceAsyncScanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return voiceAsyncScanWithOptions(request, headers, runtime);
}

async function voiceAsyncScanWithOptions(request: VoiceAsyncScanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VoiceAsyncScanResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('VoiceAsyncScan', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/voice/asyncscan`, 'none', req, runtime);
}

model VoiceAsyncScanResultsRequest {
  clientInfo?: string(name='ClientInfo'),
}

model VoiceAsyncScanResultsResponse = {
  headers: map[string]string(name='headers'),
}

async function voiceAsyncScanResults(request: VoiceAsyncScanResultsRequest): VoiceAsyncScanResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return voiceAsyncScanResultsWithOptions(request, headers, runtime);
}

async function voiceAsyncScanResultsWithOptions(request: VoiceAsyncScanResultsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VoiceAsyncScanResultsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('VoiceAsyncScanResults', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/voice/results`, 'none', req, runtime);
}

model VoiceCancelScanRequest {
  clientInfo?: string(name='ClientInfo'),
}

model VoiceCancelScanResponse = {
  headers: map[string]string(name='headers'),
}

async function voiceCancelScan(request: VoiceCancelScanRequest): VoiceCancelScanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return voiceCancelScanWithOptions(request, headers, runtime);
}

async function voiceCancelScanWithOptions(request: VoiceCancelScanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VoiceCancelScanResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('VoiceCancelScan', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/voice/cancelscan`, 'none', req, runtime);
}

model VoiceIdentityCheckRequest {
  regionId?: string(name='RegionId'),
  clientInfo?: string(name='ClientInfo'),
}

model VoiceIdentityCheckResponse = {
  headers: map[string]string(name='headers'),
}

async function voiceIdentityCheck(request: VoiceIdentityCheckRequest): VoiceIdentityCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return voiceIdentityCheckWithOptions(request, headers, runtime);
}

async function voiceIdentityCheckWithOptions(request: VoiceIdentityCheckRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VoiceIdentityCheckResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('VoiceIdentityCheck', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/voice/auth/check`, 'none', req, runtime);
}

model VoiceIdentityRegisterRequest {
  regionId?: string(name='RegionId'),
  clientInfo?: string(name='ClientInfo'),
}

model VoiceIdentityRegisterResponse = {
  headers: map[string]string(name='headers'),
}

async function voiceIdentityRegister(request: VoiceIdentityRegisterRequest): VoiceIdentityRegisterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return voiceIdentityRegisterWithOptions(request, headers, runtime);
}

async function voiceIdentityRegisterWithOptions(request: VoiceIdentityRegisterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VoiceIdentityRegisterResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('VoiceIdentityRegister', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/voice/auth/register`, 'none', req, runtime);
}

model VoiceIdentityStartCheckRequest {
  regionId?: string(name='RegionId'),
  clientInfo?: string(name='ClientInfo'),
}

model VoiceIdentityStartCheckResponse = {
  headers: map[string]string(name='headers'),
}

async function voiceIdentityStartCheck(request: VoiceIdentityStartCheckRequest): VoiceIdentityStartCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return voiceIdentityStartCheckWithOptions(request, headers, runtime);
}

async function voiceIdentityStartCheckWithOptions(request: VoiceIdentityStartCheckRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VoiceIdentityStartCheckResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('VoiceIdentityStartCheck', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/voice/auth/start/check`, 'none', req, runtime);
}

model VoiceIdentityStartRegisterRequest {
  regionId?: string(name='RegionId'),
  clientInfo?: string(name='ClientInfo'),
}

model VoiceIdentityStartRegisterResponse = {
  headers: map[string]string(name='headers'),
}

async function voiceIdentityStartRegister(request: VoiceIdentityStartRegisterRequest): VoiceIdentityStartRegisterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return voiceIdentityStartRegisterWithOptions(request, headers, runtime);
}

async function voiceIdentityStartRegisterWithOptions(request: VoiceIdentityStartRegisterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VoiceIdentityStartRegisterResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('VoiceIdentityStartRegister', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/voice/auth/start/register`, 'none', req, runtime);
}

model VoiceIdentityUnregisterRequest {
  regionId?: string(name='RegionId'),
  clientInfo?: string(name='ClientInfo'),
}

model VoiceIdentityUnregisterResponse = {
  headers: map[string]string(name='headers'),
}

async function voiceIdentityUnregister(request: VoiceIdentityUnregisterRequest): VoiceIdentityUnregisterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return voiceIdentityUnregisterWithOptions(request, headers, runtime);
}

async function voiceIdentityUnregisterWithOptions(request: VoiceIdentityUnregisterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VoiceIdentityUnregisterResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('VoiceIdentityUnregister', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/voice/auth/unregister`, 'none', req, runtime);
}

model VoiceSyncScanRequest {
  regionId?: string(name='RegionId'),
  clientInfo?: string(name='ClientInfo'),
}

model VoiceSyncScanResponse = {
  headers: map[string]string(name='headers'),
}

async function voiceSyncScan(request: VoiceSyncScanRequest): VoiceSyncScanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return voiceSyncScanWithOptions(request, headers, runtime);
}

async function voiceSyncScanWithOptions(request: VoiceSyncScanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): VoiceSyncScanResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('VoiceSyncScan', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/voice/syncscan`, 'none', req, runtime);
}

model WebpageAsyncScanRequest {
  clientInfo?: string(name='ClientInfo'),
}

model WebpageAsyncScanResponse = {
  headers: map[string]string(name='headers'),
}

async function webpageAsyncScan(request: WebpageAsyncScanRequest): WebpageAsyncScanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return webpageAsyncScanWithOptions(request, headers, runtime);
}

async function webpageAsyncScanWithOptions(request: WebpageAsyncScanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): WebpageAsyncScanResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('WebpageAsyncScan', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/webpage/asyncscan`, 'none', req, runtime);
}

model WebpageAsyncScanResultsRequest {
  clientInfo?: string(name='ClientInfo'),
}

model WebpageAsyncScanResultsResponse = {
  headers: map[string]string(name='headers'),
}

async function webpageAsyncScanResults(request: WebpageAsyncScanResultsRequest): WebpageAsyncScanResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return webpageAsyncScanResultsWithOptions(request, headers, runtime);
}

async function webpageAsyncScanResultsWithOptions(request: WebpageAsyncScanResultsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): WebpageAsyncScanResultsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('WebpageAsyncScanResults', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/webpage/results`, 'none', req, runtime);
}

model WebpageSyncScanRequest {
  clientInfo?: string(name='ClientInfo'),
}

model WebpageSyncScanResponse = {
  headers: map[string]string(name='headers'),
}

async function webpageSyncScan(request: WebpageSyncScanRequest): WebpageSyncScanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return webpageSyncScanWithOptions(request, headers, runtime);
}

async function webpageSyncScanWithOptions(request: WebpageSyncScanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): WebpageSyncScanResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientInfo)) {
    query.ClientInfo = request.clientInfo;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('WebpageSyncScan', '2018-05-09', 'HTTPS', 'POST', 'AK', `/green/webpage/scan`, 'none', req, runtime);
}

