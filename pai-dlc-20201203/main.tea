/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @signatureAlgorithm = 'v2';
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('pai-dlc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AliyunAccounts {
  aliyunUid?: string(name='AliyunUid', description='Aliyun账号的UID'),
  employeeId?: string(name='EmployeeId', description='弹内用户的工号'),
  gmtCreateTime?: string(name='GmtCreateTime', description='这条记录的创建时间'),
  gmtModifyTime?: string(name='GmtModifyTime', description='这条记录的上次修改时间'),
}

model CodeSourceItem {
  codeBranch?: string(name='CodeBranch', description='代码分支'),
  codeCommit?: string(name='CodeCommit', description='代码Commit ID'),
  codeRepo?: string(name='CodeRepo', description='代码仓库地址'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken', description='访问代码仓库所用的AccessToken'),
  codeRepoUserName?: string(name='CodeRepoUserName', description='访问代码仓库的用户名'),
  codeSourceId?: string(name='CodeSourceId', description='代码源ID'),
  description?: string(name='Description', description='代码源详细描述'),
  displayName?: string(name='DisplayName', description='代码源配置的名字'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
  gmtModifyTime?: string(name='GmtModifyTime', description='修改时间'),
  userId?: string(name='UserId', description='代码源配置的用户ID'),
}

model ContainerSpec {
  args?: [ string ](name='Args', description='命令参数'),
  command?: [ string ](name='Command', description='用户命令'),
  env?: [
    EnvVar
  ](name='Env', description='环境变量'),
  image?: string(name='Image', description='容器镜像地址'),
  name?: string(name='Name', description='容器名称'),
  resources?: ResourceRequirements(name='Resources', description='容器资源'),
  workingDir?: string(name='WorkingDir', description='容器内工作目录'),
}

model DataSourceItem {
  dataSourceId?: string(name='DataSourceId', description='数据源Id'),
  dataSourceType?: string(name='DataSourceType', description='数据源类型'),
  description?: string(name='Description', description='数据源描述'),
  displayName?: string(name='DisplayName', description='数据源显示名称'),
  endpoint?: string(name='Endpoint', description='阿里云OSS文件系统服务端点'),
  fileSystemId?: string(name='FileSystemId', description='阿里云NAS文件系统Id'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间（UTC）'),
  gmtModifyTime?: string(name='GmtModifyTime', description='修改时间（UTC）'),
  mountPath?: string(name='MountPath', description='本地挂载目录'),
  options?: string(name='Options', description='阿里云OSS文件系统配置选项'),
  path?: string(name='Path', description='阿里云OSS文件系统路径'),
  userId?: string(name='UserId', description='创建人Id'),
}

model DebuggerConfig {
  content?: string(name='Content', description='配置项细节，json结构'),
  debuggerConfigId?: string(name='DebuggerConfigId', description='系统生成的debug config唯一ID'),
  description?: string(name='Description', description='配置项描述'),
  displayName?: string(name='DisplayName', description='模板配置项名称'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间（UTC）'),
  gmtModifyTime?: string(name='GmtModifyTime', description='修改时间（UTC）'),
}

model DebuggerJob {
  debuggerJobId?: string(name='DebuggerJobId', description='debugger分析作业ID'),
  displayName?: string(name='DisplayName', description='作业显示名'),
  duration?: string(name='Duration', description='作业运行的时长（单位秒）'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间（UTC）'),
  gmtFailedTime?: string(name='GmtFailedTime', description='失败时间（UTC）'),
  gmtFinishTime?: string(name='GmtFinishTime', description='任务完成时间（UTC）'),
  gmtRunningTime?: string(name='GmtRunningTime', description='运行开始时间（UTC）'),
  gmtStoppedTime?: string(name='GmtStoppedTime', description='结束时间（UTC）'),
  gmtSubmittedTime?: string(name='GmtSubmittedTime', description='提交时间（UTC）'),
  gmtSucceedTime?: string(name='GmtSucceedTime', description='成功结束时间（UTC）'),
  status?: string(name='Status', description='作业运行状态'),
  userId?: string(name='UserId', description='用户ID'),
  workspaceId?: string(name='WorkspaceId', description='作业所属的运行工作空间'),
  workspaceName?: string(name='WorkspaceName', description='作业所属的运行工作空间名称'),
}

model DebuggerJobIssue {
  debuggerJobIssue?: string(name='DebuggerJobIssue', description='规则报告的具体json描述'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间（UTC）'),
  jobDebuggerIssueId?: string(name='JobDebuggerIssueId', description='event的全局唯一ID'),
  jobId?: string(name='JobId', description='作业ID'),
  reasonCode?: string(name='ReasonCode', description='规则触发原因的编码'),
  reasonMessage?: string(name='ReasonMessage', description='规则触发的原因'),
  ruleName?: string(name='RuleName', description='规则名称'),
}

model DebuggerResult {
  debuggerConfigContent?: string(name='DebuggerConfigContent', description='配置项细节，json结构'),
  debuggerJobIssues?: string(name='DebuggerJobIssues', description='规则报告细节信息'),
  debuggerJobStatus?: string(name='DebuggerJobStatus', description='debugger job运行状态描述'),
  debuggerReportURL?: string(name='DebuggerReportURL', description='报告文件下载地址'),
  jobDisplayName?: string(name='JobDisplayName', description='作业显示名'),
  jobId?: string(name='JobId', description='作业ID'),
  jobUserId?: string(name='JobUserId', description='用户ID'),
}

model EcsSpec {
  acceleratorType?: string(name='AcceleratorType', description='加速器类型'),
  cpu?: int32(name='Cpu', description='cpu数量'),
  gpu?: int32(name='Gpu', description='gpu数量'),
  gpuType?: string(name='GpuType', description='gpu类型'),
  instanceType?: string(name='InstanceType', description='规格类型'),
  isAvailable?: boolean(name='IsAvailable', description='是否有库存'),
  memory?: int32(name='Memory', description='Memory数量'),
}

model EnvVar {
  name?: string(name='Name', description='环境变量名称'),
  value?: string(name='Value', description='环境变量值'),
}

model ExtraPodSpec {
  initContainers?: [
    ContainerSpec
  ](name='InitContainers', description='初始化容器'),
  podAnnotations?: map[string]string(name='PodAnnotations', description='Pod注解'),
  podLabels?: map[string]string(name='PodLabels', description='Pod标签'),
  sharedVolumeMountPaths?: [ string ](name='SharedVolumeMountPaths', description='容器间共享的本地目录'),
  sideCarContainers?: [
    ContainerSpec
  ](name='SideCarContainers', description='伴随容器'),
}

model GPUDetail {
  GPU?: string(name='GPU', description='GPU卡数'),
  GPUType?: string(name='GPUType', description='GPU卡型'),
  GPUTypeFullName?: string(name='GPUTypeFullName', description='GPU卡型全名'),
}

model ImageItem {
  acceleratorType?: string(name='AcceleratorType', description='加速器类型'),
  authorId?: string(name='AuthorId', description='镜像作者'),
  framework?: string(name='Framework', description='镜像包含的框架类型'),
  imageProviderType?: string(name='ImageProviderType', description='镜像类型'),
  imageTag?: string(name='ImageTag', description='镜像Tag'),
  imageUrl?: string(name='ImageUrl', description='镜像地址'),
  imageUrlVpc?: string(name='ImageUrlVpc', description='镜像vpc地址'),
}

model JobDebuggerConfig {
  debuggerConfigContent?: string(name='DebuggerConfigContent', description='debugger配置信息'),
  debuggerConfigId?: string(name='DebuggerConfigId', description='debugger配置项ID'),
  gmtCreateTime?: string(name='GmtCreateTime', description='debugger配置创建的时间'),
  jobId?: string(name='JobId', description='作业ID'),
}

model JobElasticSpec {
  AIMasterType?: string(name='AIMasterType', description='aimaster角色使用的资源规格'),
  enableElasticTraining?: boolean(name='EnableElasticTraining', description='打开弹性训练'),
  maxParallelism?: int32(name='MaxParallelism', description='最大并行度'),
  minParallelism?: int32(name='MinParallelism', description='最小并行度'),
}

model JobItem {
  codeSource?: {
    branch?: string(name='Branch', description='代码分支'),
    codeSourceId?: string(name='CodeSourceId', description='代码源Id'),
    commit?: string(name='Commit', description='代码Commit'),
    mountPath?: string(name='MountPath', description='本地挂载路径'),
  }(name='CodeSource', description='代码源配置'),
  dataSources?: [ 
    {
      dataSourceId?: string(name='DataSourceId', description='数据源Id'),
      mountPath?: string(name='MountPath', description='本地挂载路径'),
    }
  ](name='DataSources', description='数据源配置列表'),
  displayName?: string(name='DisplayName', description='作业显示名称'),
  duration?: long(name='Duration', description='作业运行时长，单位：秒'),
  enabledDebugger?: boolean(name='EnabledDebugger', description='是否开启了debugger分析'),
  envs?: map[string]string(name='Envs', description='环境变量配置'),
  gmtCreateTime?: string(name='GmtCreateTime', description='作业创建时间（UTC）'),
  gmtFailedTime?: string(name='GmtFailedTime', description='作业失败时间（UTC）'),
  gmtFinishTime?: string(name='GmtFinishTime', description='作业结束时间（UTC）'),
  gmtRunningTime?: string(name='GmtRunningTime', description='作业开始运行时间（UTC）'),
  gmtStoppedTime?: string(name='GmtStoppedTime', description='作业停止时间（UTC）'),
  gmtSubmittedTime?: string(name='GmtSubmittedTime', description='作业提交时间（UTC）'),
  gmtSuccessedTime?: string(name='GmtSuccessedTime', description='作业成功完成时间（UTC）'),
  jobId?: string(name='JobId', description='作业Id'),
  jobSpecs?: [
    JobSpec
  ](name='JobSpecs', description='作业规格配置'),
  jobType?: string(name='JobType', description='作业类型'),
  priority?: int32(name='Priority', description='任务优先级'),
  reasonCode?: string(name='ReasonCode', description='状态详情码'),
  reasonMessage?: string(name='ReasonMessage', description='状态详情'),
  resourceId?: string(name='ResourceId', description='作业运行所在的资源组ID'),
  resourceLevel?: string(name='ResourceLevel', description='作业运行时的资源级别'),
  resourceName?: string(name='ResourceName', description='作业运行的资源名称'),
  settings?: JobSettings(name='Settings', description='作业额外参数'),
  status?: string(name='Status', description='作业状态'),
  thirdpartyLibDir?: string(name='ThirdpartyLibDir', description='三方库(requirements.txt)文件路径'),
  thirdpartyLibs?: [ string ](name='ThirdpartyLibs', description='三方库配置列表'),
  userCommand?: string(name='UserCommand', description='用户命令'),
  userId?: string(name='UserId', description='作业提交人Id'),
  workspaceId?: string(name='WorkspaceId', description='作业所属工作空间ID'),
  workspaceName?: string(name='WorkspaceName', description='作业所属工作空间名称'),
}

model JobSettings {
  businessUserId?: string(name='BusinessUserId', description='作业关联用户ID'),
  caller?: string(name='Caller', description='调用方'),
  enableErrorMonitoringInAIMaster?: boolean(name='EnableErrorMonitoringInAIMaster', description='允许打开作业容错监控'),
  enableRDMA?: boolean(name='EnableRDMA', description='允许作业使用RDMA'),
  enableTideResource?: boolean(name='EnableTideResource', description='允许作业使用潮汐资源'),
  errorMonitoringArgs?: string(name='ErrorMonitoringArgs', description='用户指定容错监控的配置参数，比如指定是否启动基于log hang的检测'),
  pipelineId?: string(name='PipelineId', description='工作流ID'),
  tags?: map[string]string(name='Tags', description='自定义标签'),
}

model JobSpec {
  ecsSpec?: string(name='EcsSpec', description='Ecs实例规格'),
  extraPodSpec?: ExtraPodSpec(name='ExtraPodSpec', description='额外的Pod配置'),
  image?: string(name='Image', description='镜像'),
  podCount?: long(name='PodCount', description='实例数量'),
  resourceConfig?: ResourceConfig(name='ResourceConfig', description='资源配置'),
  type?: string(name='Type', description='类型'),
  useSpotInstance?: boolean(name='UseSpotInstance', description='是否使用竞价实例'),
}

model Member {
  memberId?: string(name='MemberId', description='成员id'),
  memberType?: string(name='MemberType', description='成员角色'),
}

model Metric {
  time?: long(name='Time', description='时间戳（毫秒）'),
  value?: float(name='Value', description='样本值'),
}

model NodeMetric {
  metrics?: [
    Metric
  ](name='Metrics', description='监控指标样本序列'),
  nodeName?: string(name='NodeName', description='节点名称'),
}

model PodMetric {
  metrics?: [
    Metric
  ](name='Metrics', description='监控指标样本序列'),
  podId?: string(name='PodId', description='Pod编号'),
}

model Quota {
  clusterId?: string(name='ClusterId', description='集群id'),
  clusterName?: string(name='ClusterName', description='集群名称'),
  enableTideResource?: boolean(name='EnableTideResource', description='是否允许使用潮汐资源'),
  isExclusiveQuota?: boolean(name='IsExclusiveQuota', description='是否是独占Quota组'),
  quotaId?: string(name='QuotaId', description='资源配额id'),
  quotaName?: string(name='QuotaName', description='资源配额名称'),
  quotaType?: string(name='QuotaType', description='资源配额类型'),
  resourceLevel?: string(name='ResourceLevel', description='资源组允许使用的潮汐资源级别'),
  totalQuota?: QuotaDetail(name='TotalQuota', description='资源总量'),
  totalTideQuota?: QuotaDetail(name='TotalTideQuota', description='潮汐资源总量'),
  usedQuota?: QuotaDetail(name='UsedQuota', description='资源用量'),
  usedTideQuota?: QuotaDetail(name='UsedTideQuota', description='潮汐资源用量'),
}

model QuotaDetail {
  CPU?: string(name='CPU', description='CPU核数'),
  GPU?: string(name='GPU', description='GPU卡数'),
  GPUDetails?: [
    GPUDetail
  ](name='GPUDetails', description='GPU详情'),
  GPUType?: string(name='GPUType', description='GPU卡型'),
  GPUTypeFullName?: string(name='GPUTypeFullName', description='GPU卡型全名'),
  memory?: string(name='Memory', description='内存容量'),
}

model ResourceConfig {
  CPU?: string(name='CPU', description='CPU核心数'),
  GPU?: string(name='GPU', description='GPU核心数'),
  GPUType?: string(name='GPUType', description='显卡类型'),
  memory?: string(name='Memory', description='内存容量'),
  sharedMemory?: string(name='SharedMemory', description='共享内存容量'),
}

model ResourceRequirements {
  limits?: map[string]string(name='Limits', description='资源限制'),
  requests?: map[string]string(name='Requests', description='资源需求'),
}

model Resources {
  CPU?: string(name='CPU', description='CPU核心数'),
  GPU?: string(name='GPU', description='GPU卡数'),
  memory?: string(name='Memory', description='内存大小'),
}

model SmartCache {
  cacheWorkerNum?: long(name='CacheWorkerNum', description='cache worker的数量单位是个'),
  cacheWorkerSize?: long(name='CacheWorkerSize', description='每个cache worker的cache大小单位是GB'),
  description?: string(name='Description', description='SmartCache 描述'),
  displayName?: string(name='DisplayName', description='SmartCache 名称'),
  duration?: string(name='Duration', description='已运行时长'),
  endpoint?: string(name='Endpoint', description='OSS Endpoint'),
  fileSystemId?: string(name='FileSystemId', description='阿里云的NAS文件系统ID'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间（UTC）'),
  gmtModifyTime?: string(name='GmtModifyTime', description='修改时间（UTC）'),
  mountPath?: string(name='MountPath', description='数据源本地挂载目录'),
  options?: string(name='Options', description='可选的超参数'),
  path?: string(name='Path', description='OSS数据源路径'),
  smartCacheId?: string(name='SmartCacheId', description='SmartCacheId'),
  status?: string(name='Status', description='运行状态'),
  type?: string(name='Type', description='挂载的数据类型'),
  userId?: string(name='UserId', description='创建者Id'),
}

model Tensorboard {
  dataSourceId?: string(name='DataSourceId', description='数据源Id'),
  displayName?: string(name='DisplayName', description='展示名称'),
  duration?: string(name='Duration', description='运行时长'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间（UTC）'),
  gmtModifyTime?: string(name='GmtModifyTime', description='修改时间（UTC）'),
  jobId?: string(name='JobId', description='任务Id'),
  reasonCode?: string(name='ReasonCode', description='状态详情码'),
  reasonMessage?: string(name='ReasonMessage', description='状态详情'),
  requestId?: string(name='RequestId', description='请求Id'),
  status?: string(name='Status', description='状态'),
  summaryPath?: string(name='SummaryPath', description='文件路径'),
  tensorboardId?: string(name='TensorboardId', description='Tensorboard Id'),
  tensorboardUrl?: string(name='TensorboardUrl', description='Tensorboard URL'),
  userId?: string(name='UserId', description='创建者'),
}

model Workspace {
  creator?: string(name='Creator', description='创建者'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
  gmtModifyTime?: string(name='GmtModifyTime', description='最近修改时间'),
  members?: [
    Member
  ](name='Members', description='成员列表'),
  quotas?: [
    Quota
  ](name='Quotas', description='资源配额列表'),
  totalResources?: Resources(name='TotalResources', description='资源总量'),
  workspaceAdmins?: [
    Member
  ](name='WorkspaceAdmins', description='管理员列表'),
  workspaceId?: string(name='WorkspaceId', description='工作空间id'),
  workspaceName?: string(name='WorkspaceName', description='工作空间名称'),
}

model CreateCodeSourceRequest {
  codeBranch?: string(name='CodeBranch', description='代码分支'),
  codeRepo?: string(name='CodeRepo', description='代码仓库地址'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken', description='密码'),
  codeRepoUserName?: string(name='CodeRepoUserName', description='用户名'),
  description?: string(name='Description', description='代码源详细描述'),
  displayName?: string(name='DisplayName', description='代码源配置名称'),
  mountPath?: string(name='MountPath', description='代码本地挂载目录，默认挂载到/root/code/下'),
}

model CreateCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', description='创建的代码源配置的ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model CreateCodeSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCodeSourceResponseBody(name='body'),
}

async function createCodeSource(request: CreateCodeSourceRequest): CreateCodeSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createCodeSourceWithOptions(request, headers, runtime);
}

async function createCodeSourceWithOptions(request: CreateCodeSourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCodeSourceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.codeBranch)) {
    body['CodeBranch'] = request.codeBranch;
  }
  if (!Util.isUnset(request.codeRepo)) {
    body['CodeRepo'] = request.codeRepo;
  }
  if (!Util.isUnset(request.codeRepoAccessToken)) {
    body['CodeRepoAccessToken'] = request.codeRepoAccessToken;
  }
  if (!Util.isUnset(request.codeRepoUserName)) {
    body['CodeRepoUserName'] = request.codeRepoUserName;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.mountPath)) {
    body['MountPath'] = request.mountPath;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateCodeSource',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/codesources`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateDataSourceRequest {
  dataSourceType?: string(name='DataSourceType', description='数据源类型'),
  description?: string(name='Description', description='数据源描述'),
  displayName?: string(name='DisplayName', description='数据源显示名称'),
  endpoint?: string(name='Endpoint', description='阿里云OSS文件系统服务端点'),
  fileSystemId?: string(name='FileSystemId', description='阿里云NAS文件系统Id'),
  mountPath?: string(name='MountPath', description='本地挂载目录'),
  options?: string(name='Options', description='阿里云OSS文件系统配置选项'),
  path?: string(name='Path', description='阿里云OSS文件系统路径'),
}

model CreateDataSourceResponseBody = {
  dataSourceId?: string(name='DataSourceId', description='数据源Id'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model CreateDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataSourceResponseBody(name='body'),
}

async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createDataSourceWithOptions(request, headers, runtime);
}

async function createDataSourceWithOptions(request: CreateDataSourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDataSourceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.dataSourceType)) {
    body['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.endpoint)) {
    body['Endpoint'] = request.endpoint;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    body['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.mountPath)) {
    body['MountPath'] = request.mountPath;
  }
  if (!Util.isUnset(request.options)) {
    body['Options'] = request.options;
  }
  if (!Util.isUnset(request.path)) {
    body['Path'] = request.path;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataSource',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasources`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateJobRequest {
  codeSource?: {
    branch?: string(name='Branch', description='代码分支'),
    codeSourceId?: string(name='CodeSourceId', description='代码源Id'),
    commit?: string(name='Commit', description='代码Commit'),
    mountPath?: string(name='MountPath', description='本地挂载路径'),
  }(name='CodeSource', description='代码源配置'),
  dataSources?: [ 
    {
      dataSourceId?: string(name='DataSourceId', description='数据源Id'),
      mountPath?: string(name='MountPath', description='本地挂载路径'),
    }
  ](name='DataSources', description='数据源配置列表'),
  debuggerConfigContent?: string(name='DebuggerConfigContent', description='debugger参数'),
  displayName?: string(name='DisplayName', description='作业显示名称'),
  elasticSpec?: JobElasticSpec(name='ElasticSpec'),
  envs?: map[string]string(name='Envs', description='环境变量配置'),
  jobMaxRunningTimeMinutes?: long(name='JobMaxRunningTimeMinutes', description='作业最大运行时间'),
  jobSpecs?: [
    JobSpec
  ](name='JobSpecs', description='作业规格配置'),
  jobType?: string(name='JobType', description='作业类型'),
  options?: string(name='Options'),
  priority?: int32(name='Priority', description='作业优先级'),
  resourceId?: string(name='ResourceId', description='资源组编号'),
  settings?: JobSettings(name='Settings'),
  thirdpartyLibDir?: string(name='ThirdpartyLibDir', description='三方库(requirements.txt)文件路径'),
  thirdpartyLibs?: [ string ](name='ThirdpartyLibs', description='三方库配置列表'),
  userCommand?: string(name='UserCommand', description='作业命令'),
  userVpc?: {
    extendedCIDRs?: [ string ](name='ExtendedCIDRs', description='扩展网段'),
    securityGroupId?: string(name='SecurityGroupId', description='用户安全组的id'),
    switchId?: string(name='SwitchId', description='用户交换机的id'),
    vpcId?: string(name='VpcId', description='用户VPC的id'),
  }(name='UserVpc', description='用户VPC'),
  workspaceId?: string(name='WorkspaceId', description='工作空间编号'),
}

model CreateJobResponseBody = {
  jobId?: string(name='JobId', description='作业Id'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model CreateJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateJobResponseBody(name='body'),
}

async function createJob(request: CreateJobRequest): CreateJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createJobWithOptions(request, headers, runtime);
}

async function createJobWithOptions(request: CreateJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateJobResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.codeSource)) {
    body['CodeSource'] = request.codeSource;
  }
  if (!Util.isUnset(request.dataSources)) {
    body['DataSources'] = request.dataSources;
  }
  if (!Util.isUnset(request.debuggerConfigContent)) {
    body['DebuggerConfigContent'] = request.debuggerConfigContent;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.elasticSpec)) {
    body['ElasticSpec'] = request.elasticSpec;
  }
  if (!Util.isUnset(request.envs)) {
    body['Envs'] = request.envs;
  }
  if (!Util.isUnset(request.jobMaxRunningTimeMinutes)) {
    body['JobMaxRunningTimeMinutes'] = request.jobMaxRunningTimeMinutes;
  }
  if (!Util.isUnset(request.jobSpecs)) {
    body['JobSpecs'] = request.jobSpecs;
  }
  if (!Util.isUnset(request.jobType)) {
    body['JobType'] = request.jobType;
  }
  if (!Util.isUnset(request.options)) {
    body['Options'] = request.options;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.resourceId)) {
    body['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.settings)) {
    body['Settings'] = request.settings;
  }
  if (!Util.isUnset(request.thirdpartyLibDir)) {
    body['ThirdpartyLibDir'] = request.thirdpartyLibDir;
  }
  if (!Util.isUnset(request.thirdpartyLibs)) {
    body['ThirdpartyLibs'] = request.thirdpartyLibs;
  }
  if (!Util.isUnset(request.userCommand)) {
    body['UserCommand'] = request.userCommand;
  }
  if (!Util.isUnset(request.userVpc)) {
    body['UserVpc'] = request.userVpc;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateJob',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateTensorboardRequest {
  dataSourceId?: string(name='DataSourceId', description='DataSource Id'),
  dataSourceType?: string(name='DataSourceType'),
  dataSources?: [
    DataSourceItem
  ](name='DataSources'),
  displayName?: string(name='DisplayName', description='Tensorboard名称'),
  jobId?: string(name='JobId', description='任务Id'),
  maxRunningTimeMinutes?: long(name='MaxRunningTimeMinutes', description='最长运行时长'),
  options?: string(name='Options'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  summaryPath?: string(name='SummaryPath', description='Summary 目录'),
  summaryRelativePath?: string(name='SummaryRelativePath'),
  uri?: string(name='Uri'),
  workspaceId?: string(name='WorkspaceId'),
}

model CreateTensorboardResponseBody = {
  dataSourceId?: string(name='DataSourceId', description='DataSourceId'),
  jobId?: string(name='JobId', description='任务Id'),
  requestId?: string(name='RequestId', description='请求Id'),
  tensorboardId?: string(name='TensorboardId', description='Tensorboard id'),
}

model CreateTensorboardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTensorboardResponseBody(name='body'),
}

async function createTensorboard(request: CreateTensorboardRequest): CreateTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTensorboardWithOptions(request, headers, runtime);
}

async function createTensorboardWithOptions(request: CreateTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTensorboardResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.dataSourceId)) {
    body['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    body['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.dataSources)) {
    body['DataSources'] = request.dataSources;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.maxRunningTimeMinutes)) {
    body['MaxRunningTimeMinutes'] = request.maxRunningTimeMinutes;
  }
  if (!Util.isUnset(request.options)) {
    body['Options'] = request.options;
  }
  if (!Util.isUnset(request.sourceId)) {
    body['SourceId'] = request.sourceId;
  }
  if (!Util.isUnset(request.sourceType)) {
    body['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.summaryPath)) {
    body['SummaryPath'] = request.summaryPath;
  }
  if (!Util.isUnset(request.summaryRelativePath)) {
    body['SummaryRelativePath'] = request.summaryRelativePath;
  }
  if (!Util.isUnset(request.uri)) {
    body['Uri'] = request.uri;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTensorboard',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', description='被删除的代码源配置ID'),
  requestId?: string(name='RequestId'),
}

model DeleteCodeSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCodeSourceResponseBody(name='body'),
}

async function deleteCodeSource(CodeSourceId: string): DeleteCodeSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteCodeSourceWithOptions(CodeSourceId, headers, runtime);
}

async function deleteCodeSourceWithOptions(CodeSourceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteCodeSourceResponse {
  CodeSourceId = OpenApiUtil.getEncodeParam(CodeSourceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteCodeSource',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/codesources/${CodeSourceId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteDataSourceResponseBody = {
  dataSourceId?: string(name='DataSourceId', description='数据源Id'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model DeleteDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDataSourceResponseBody(name='body'),
}

async function deleteDataSource(DataSourceId: string): DeleteDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteDataSourceWithOptions(DataSourceId, headers, runtime);
}

async function deleteDataSourceWithOptions(DataSourceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDataSourceResponse {
  DataSourceId = OpenApiUtil.getEncodeParam(DataSourceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataSource',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasources/${DataSourceId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteJobResponseBody = {
  jobId?: string(name='JobId', description='作业Id'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model DeleteJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteJobResponseBody(name='body'),
}

async function deleteJob(JobId: string): DeleteJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteJobWithOptions(JobId, headers, runtime);
}

async function deleteJobWithOptions(JobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteJobResponse {
  JobId = OpenApiUtil.getEncodeParam(JobId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteJob',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${JobId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteJobsRequest {
  jobIds?: [ string ](name='JobIds', description='作业ID列表'),
}

model DeleteJobsResponseBody = {
  jobIds?: [ string ](name='JobIds'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteJobsResponseBody(name='body'),
}

async function deleteJobs(request: DeleteJobsRequest): DeleteJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteJobsWithOptions(request, headers, runtime);
}

async function deleteJobsWithOptions(request: DeleteJobsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteJobsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.jobIds)) {
    body['JobIds'] = request.jobIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteJobs',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/batch/jobs/delete`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteTensorboardRequest {
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model DeleteTensorboardResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
  tensorboardId?: string(name='TensorboardId', description='Tensorboad Id'),
}

model DeleteTensorboardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTensorboardResponseBody(name='body'),
}

async function deleteTensorboard(TensorboardId: string, request: DeleteTensorboardRequest): DeleteTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteTensorboardWithOptions(TensorboardId, request, headers, runtime);
}

async function deleteTensorboardWithOptions(TensorboardId: string, request: DeleteTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTensorboardResponse {
  Util.validateModel(request);
  TensorboardId = OpenApiUtil.getEncodeParam(TensorboardId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTensorboard',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards/${TensorboardId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetCodeSourceResponseBody = {
  codeBranch?: string(name='CodeBranch', description='代码仓库分支'),
  codeCommit?: string(name='CodeCommit', description='代码Commit'),
  codeRepo?: string(name='CodeRepo', description='代码仓库地址'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken', description='访问代码仓库的token'),
  codeRepoUserName?: string(name='CodeRepoUserName', description='代码仓库的用户名'),
  codeSourceId?: string(name='CodeSourceId', description='代码源配置ID'),
  description?: string(name='Description', description='详细描述'),
  displayName?: string(name='DisplayName', description='代码源配置名字'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
  gmtModifyTime?: string(name='GmtModifyTime', description='修改时间'),
  mountPath?: string(name='MountPath', description='代码本地挂载目录，默认挂载到/root/code/下'),
  requestId?: string(name='RequestId', description='请求ID'),
  userId?: string(name='UserId', description='代码配置源的创建者ID'),
}

model GetCodeSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCodeSourceResponseBody(name='body'),
}

async function getCodeSource(CodeSourceId: string): GetCodeSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getCodeSourceWithOptions(CodeSourceId, headers, runtime);
}

async function getCodeSourceWithOptions(CodeSourceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetCodeSourceResponse {
  CodeSourceId = OpenApiUtil.getEncodeParam(CodeSourceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetCodeSource',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/codesources/${CodeSourceId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetDataSourceResponseBody = {
  dataSourceId?: string(name='DataSourceId', description='数据源Id'),
  dataSourceType?: string(name='DataSourceType', description='数据源类型'),
  description?: string(name='Description', description='数据源描述'),
  displayName?: string(name='DisplayName', description='数据源显示名称'),
  endpoint?: string(name='Endpoint', description='阿里云OSS文件系统服务端点'),
  fileSystemId?: string(name='FileSystemId', description='阿里云NAS文件系统Id'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间（UTC）'),
  gmtModifyTime?: string(name='GmtModifyTime', description='修改时间（UTC）'),
  mountPath?: string(name='MountPath', description='本地挂载目录'),
  options?: string(name='Options', description='阿里云OSS文件系统配置选项'),
  path?: string(name='Path', description='阿里云OSS文件系统路径'),
  requestId?: string(name='RequestId', description='请求Id'),
  userId?: string(name='UserId', description='创建人Id'),
}

model GetDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataSourceResponseBody(name='body'),
}

async function getDataSource(DataSourceId: string): GetDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDataSourceWithOptions(DataSourceId, headers, runtime);
}

async function getDataSourceWithOptions(DataSourceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetDataSourceResponse {
  DataSourceId = OpenApiUtil.getEncodeParam(DataSourceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetDataSource',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasources/${DataSourceId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetJobResponseBody = {
  clusterId?: string(name='ClusterId', description='集群ID'),
  codeSource?: {
    branch?: string(name='Branch', description='代码分支'),
    codeSourceId?: string(name='CodeSourceId', description='代码源Id'),
    commit?: string(name='Commit', description='代码Commit'),
    mountPath?: string(name='MountPath', description='本地挂载路径'),
  }(name='CodeSource', description='代码源配置'),
  dataSources?: [ 
    {
      dataSourceId?: string(name='DataSourceId', description='数据源Id'),
      mountPath?: string(name='MountPath', description='本地挂载路径'),
    }
  ](name='DataSources', description='数据源配置列表'),
  displayName?: string(name='DisplayName', description='作业显示名称'),
  duration?: long(name='Duration', description='作业运行时长（s）'),
  elasticSpec?: JobElasticSpec(name='ElasticSpec', description='弹性任务参数'),
  enabledDebugger?: boolean(name='EnabledDebugger', description='是否开启debugger任务'),
  envs?: map[string]string(name='Envs', description='环境变量配置'),
  gmtCreateTime?: string(name='GmtCreateTime', description='作业创建时间（UTC）'),
  gmtFailedTime?: string(name='GmtFailedTime'),
  gmtFinishTime?: string(name='GmtFinishTime', description='作业结束时间（UTC）'),
  gmtRunningTime?: string(name='GmtRunningTime'),
  gmtStoppedTime?: string(name='GmtStoppedTime'),
  gmtSubmittedTime?: string(name='GmtSubmittedTime'),
  gmtSuccessedTime?: string(name='GmtSuccessedTime'),
  jobId?: string(name='JobId', description='作业Id'),
  jobSpecs?: [
    JobSpec
  ](name='JobSpecs', description='作业规格配置'),
  jobType?: string(name='JobType', description='作业类型'),
  pods?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime', description='Pod创建时间（UTC）'),
      gmtFinishTime?: string(name='GmtFinishTime', description='Pod结束时间（UTC）'),
      gmtStartTime?: string(name='GmtStartTime', description='Pod启动时间（UTC）'),
      historyPods?: [ 
        {
          gmtCreateTime?: string(name='GmtCreateTime', description='Pod创建时间（UTC）'),
          gmtFinishTime?: string(name='GmtFinishTime', description='Pod结束时间（UTC）'),
          gmtStartTime?: string(name='GmtStartTime', description='Pod启动时间（UTC）'),
          ip?: string(name='Ip', description='Pod Ip'),
          podId?: string(name='PodId', description='Pod Id'),
          podUid?: string(name='PodUid', description='Pod UId'),
          status?: string(name='Status', description='Pod状态'),
          type?: string(name='Type', description='Pod类型'),
        }
      ](name='HistoryPods', description='历史Pods'),
      ip?: string(name='Ip', description='Pod Ip'),
      podId?: string(name='PodId', description='Pod Id'),
      podUid?: string(name='PodUid', description='Pod UId'),
      status?: string(name='Status', description='Pod状态'),
      type?: string(name='Type', description='Pod类型'),
    }
  ](name='Pods', description='作业所以运行Pod列表'),
  priority?: int32(name='Priority', description='任务的优先级'),
  reasonCode?: string(name='ReasonCode', description='状态详情码'),
  reasonMessage?: string(name='ReasonMessage', description='状态详情'),
  requestId?: string(name='RequestId', description='请求Id'),
  resourceId?: string(name='ResourceId', description='作业运行所在的资源组ID'),
  resourceLevel?: string(name='ResourceLevel', description='作业运行时使用的资源级别'),
  settings?: JobSettings(name='Settings', description='作业额外参数配置'),
  status?: string(name='Status', description='作业状态'),
  thirdpartyLibDir?: string(name='ThirdpartyLibDir', description='三方库(requirements.txt)文件路径'),
  thirdpartyLibs?: [ string ](name='ThirdpartyLibs', description='三方库配置列表'),
  userCommand?: string(name='UserCommand', description='用户命令'),
  userId?: string(name='UserId', description='作业提交人Id'),
  workspaceId?: string(name='WorkspaceId', description='作业所属工作空间ID'),
  workspaceName?: string(name='WorkspaceName', description='作业所属工作空间名称'),
}

model GetJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetJobResponseBody(name='body'),
}

async function getJob(JobId: string): GetJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getJobWithOptions(JobId, headers, runtime);
}

async function getJobWithOptions(JobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetJobResponse {
  JobId = OpenApiUtil.getEncodeParam(JobId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetJob',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${JobId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetJobEventsRequest {
  endTime?: string(name='EndTime', description='查询事件的时间区间的截止时间，默认值是当前。'),
  maxEventsNum?: int32(name='MaxEventsNum', description='获取事件的最大数目，默认值：2000'),
  startTime?: string(name='StartTime', description='查询事件的时间区间的起始时间，默认值是7天前。'),
}

model GetJobEventsResponseBody = {
  events?: [ string ](name='Events', description='事件'),
  jobId?: string(name='JobId', description='作业ID'),
  requestId?: int32(name='RequestId', description='请求ID'),
}

model GetJobEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetJobEventsResponseBody(name='body'),
}

async function getJobEvents(JobId: string, request: GetJobEventsRequest): GetJobEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getJobEventsWithOptions(JobId, request, headers, runtime);
}

async function getJobEventsWithOptions(JobId: string, request: GetJobEventsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetJobEventsResponse {
  Util.validateModel(request);
  JobId = OpenApiUtil.getEncodeParam(JobId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.maxEventsNum)) {
    query['MaxEventsNum'] = request.maxEventsNum;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetJobEvents',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${JobId}/events`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetJobMetricsRequest {
  endTime?: string(name='EndTime', description='截止时间'),
  metricType?: string(name='MetricType', description='指标类型'),
  startTime?: string(name='StartTime', description='起始时间'),
  timeStep?: string(name='TimeStep', description='时间间隔'),
  token?: string(name='Token', description='Token'),
}

model GetJobMetricsResponseBody = {
  jobId?: string(name='JobId', description='作业ID'),
  podMetrics?: [
    PodMetric
  ](name='PodMetrics', description='任务监控指标序列集合'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model GetJobMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetJobMetricsResponseBody(name='body'),
}

async function getJobMetrics(JobId: string, request: GetJobMetricsRequest): GetJobMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getJobMetricsWithOptions(JobId, request, headers, runtime);
}

async function getJobMetricsWithOptions(JobId: string, request: GetJobMetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetJobMetricsResponse {
  Util.validateModel(request);
  JobId = OpenApiUtil.getEncodeParam(JobId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.metricType)) {
    query['MetricType'] = request.metricType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.timeStep)) {
    query['TimeStep'] = request.timeStep;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetJobMetrics',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${JobId}/metrics`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPodEventsRequest {
  endTime?: string(name='EndTime', description='截止时间'),
  maxEventsNum?: int32(name='MaxEventsNum', description='返回的事件最大数量'),
  podUid?: string(name='PodUid', description='运行实例UID'),
  startTime?: string(name='StartTime', description='起始时间'),
}

model GetPodEventsResponseBody = {
  events?: [ string ](name='Events', description='事件列表'),
  jobId?: string(name='JobId', description='作业ID'),
  podId?: string(name='PodId', description='运行示例ID'),
  podUid?: string(name='PodUid'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model GetPodEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPodEventsResponseBody(name='body'),
}

async function getPodEvents(JobId: string, PodId: string, request: GetPodEventsRequest): GetPodEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPodEventsWithOptions(JobId, PodId, request, headers, runtime);
}

async function getPodEventsWithOptions(JobId: string, PodId: string, request: GetPodEventsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPodEventsResponse {
  Util.validateModel(request);
  JobId = OpenApiUtil.getEncodeParam(JobId);
  PodId = OpenApiUtil.getEncodeParam(PodId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.maxEventsNum)) {
    query['MaxEventsNum'] = request.maxEventsNum;
  }
  if (!Util.isUnset(request.podUid)) {
    query['PodUid'] = request.podUid;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPodEvents',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${JobId}/pods/${PodId}/events`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPodLogsRequest {
  downloadToFile?: boolean(name='DownloadToFile', description='是否下载日志文件，默认：false。'),
  endTime?: string(name='EndTime', description='查询的截止时间，默认值：当前。'),
  maxLines?: int32(name='MaxLines', description='返回的日志的最大行数，默认值：2000。'),
  podUid?: string(name='PodUid'),
  startTime?: string(name='StartTime', description='查询的起始时间，默认值：7天前。'),
}

model GetPodLogsResponseBody = {
  jobId?: string(name='JobId', description='作业ID'),
  logs?: [ string ](name='Logs', description='日志列表'),
  podId?: string(name='PodId', description='实例ID'),
  podUid?: string(name='PodUid', description='实例UID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model GetPodLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPodLogsResponseBody(name='body'),
}

async function getPodLogs(JobId: string, PodId: string, request: GetPodLogsRequest): GetPodLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPodLogsWithOptions(JobId, PodId, request, headers, runtime);
}

async function getPodLogsWithOptions(JobId: string, PodId: string, request: GetPodLogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPodLogsResponse {
  Util.validateModel(request);
  JobId = OpenApiUtil.getEncodeParam(JobId);
  PodId = OpenApiUtil.getEncodeParam(PodId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.downloadToFile)) {
    query['DownloadToFile'] = request.downloadToFile;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.maxLines)) {
    query['MaxLines'] = request.maxLines;
  }
  if (!Util.isUnset(request.podUid)) {
    query['PodUid'] = request.podUid;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPodLogs',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${JobId}/pods/${PodId}/logs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetTensorboardRequest {
  jodId?: string(name='JodId', description='JodId'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model GetTensorboardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Tensorboard  
}

async function getTensorboard(TensorboardId: string, request: GetTensorboardRequest): GetTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTensorboardWithOptions(TensorboardId, request, headers, runtime);
}

async function getTensorboardWithOptions(TensorboardId: string, request: GetTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTensorboardResponse {
  Util.validateModel(request);
  TensorboardId = OpenApiUtil.getEncodeParam(TensorboardId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.jodId)) {
    query['JodId'] = request.jodId;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTensorboard',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards/${TensorboardId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListCodeSourcesRequest {
  displayName?: string(name='DisplayName', description='代码源显示名称，支持模糊匹配'),
  order?: string(name='Order', description='排序顺序, 枚举值 desc 或者 asc'),
  pageNumber?: int32(name='PageNumber', description='取第几页的数据'),
  pageSize?: int32(name='PageSize', description='分页大小'),
  sortBy?: string(name='SortBy', description='用于排序的字段名，可选字段名：DisplayName、GmtCreateTime、 GmtModifyTime'),
}

model ListCodeSourcesResponseBody = {
  codeSources?: [
    CodeSourceItem
  ](name='CodeSources', description='代码源配置列表'),
  requestId?: string(name='RequestId', description='请求Id'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的代码源配置的总数量'),
}

model ListCodeSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCodeSourcesResponseBody(name='body'),
}

async function listCodeSources(request: ListCodeSourcesRequest): ListCodeSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listCodeSourcesWithOptions(request, headers, runtime);
}

async function listCodeSourcesWithOptions(request: ListCodeSourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListCodeSourcesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCodeSources',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/codesources`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListDataSourcesRequest {
  dataSourceType?: string(name='DataSourceType', description='数据源类型'),
  displayName?: string(name='DisplayName', description='数据源显示名称，支持模糊查询'),
  order?: string(name='Order', description='排序顺序'),
  pageNumber?: int32(name='PageNumber', description='查询第几页数据'),
  pageSize?: int32(name='PageSize', description='设置查询的分页大写'),
  sortBy?: string(name='SortBy', description='按返回字段排序'),
}

model ListDataSourcesResponseBody = {
  dataSources?: [
    DataSourceItem
  ](name='DataSources', description='数据源配置列表'),
  requestId?: string(name='RequestId', description='请求Id'),
  totalCount?: long(name='TotalCount', description='符合条件的数据源总数量'),
}

model ListDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataSourcesResponseBody(name='body'),
}

async function listDataSources(request: ListDataSourcesRequest): ListDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDataSourcesWithOptions(request, headers, runtime);
}

async function listDataSourcesWithOptions(request: ListDataSourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataSourcesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataSources',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/datasources`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListEcsSpecsRequest {
  acceleratorType?: string(name='AcceleratorType', description='按加速器类型过滤'),
  order?: string(name='Order', description='排序顺序'),
  pageNumber?: int32(name='PageNumber', description='查询第几页数据'),
  pageSize?: int32(name='PageSize', description='设置查询的分页大写'),
  sortBy?: string(name='SortBy', description='按返回字段排序'),
}

model ListEcsSpecsResponseBody = {
  ecsSpecs?: [
    EcsSpec
  ](name='EcsSpecs', description='ECS规格列表'),
  requestId?: string(name='RequestId', description='请求Id'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的总数量'),
}

model ListEcsSpecsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEcsSpecsResponseBody(name='body'),
}

async function listEcsSpecs(request: ListEcsSpecsRequest): ListEcsSpecsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listEcsSpecsWithOptions(request, headers, runtime);
}

async function listEcsSpecsWithOptions(request: ListEcsSpecsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListEcsSpecsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.acceleratorType)) {
    query['AcceleratorType'] = request.acceleratorType;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEcsSpecs',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/ecsspecs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListImagesRequest {
  acceleratorType?: string(name='AcceleratorType', description='加速器类型'),
  framework?: string(name='Framework', description='镜像包含的框架类型'),
  imageProviderType?: string(name='ImageProviderType', description='镜像类型'),
  order?: string(name='Order', description='排序顺序'),
  sortBy?: string(name='SortBy', description='按返回字段排序'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model ListImagesResponseBody = {
  images?: [
    ImageItem
  ](name='Images', description='镜像详情列表'),
  requestId?: string(name='RequestId', description='请求Id'),
  totalCount?: long(name='TotalCount', description='2'),
}

model ListImagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListImagesResponseBody(name='body'),
}

async function listImages(request: ListImagesRequest): ListImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listImagesWithOptions(request, headers, runtime);
}

async function listImagesWithOptions(request: ListImagesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListImagesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.acceleratorType)) {
    query['AcceleratorType'] = request.acceleratorType;
  }
  if (!Util.isUnset(request.framework)) {
    query['Framework'] = request.framework;
  }
  if (!Util.isUnset(request.imageProviderType)) {
    query['ImageProviderType'] = request.imageProviderType;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListImages',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/images`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListJobsRequest {
  businessUserId?: string(name='BusinessUserId', description='作业关联用户ID'),
  caller?: string(name='Caller', description='调用方'),
  displayName?: string(name='DisplayName', description='作业显示名称，支持模糊查询'),
  endTime?: string(name='EndTime', description='截止时间'),
  fromAllWorkspaces?: boolean(name='FromAllWorkspaces'),
  jobType?: string(name='JobType', description='作业类型'),
  order?: string(name='Order', description='排序顺序'),
  pageNumber?: int32(name='PageNumber', description='当前页'),
  pageSize?: int32(name='PageSize', description='每页返回的作业数'),
  pipelineId?: string(name='PipelineId', description='工作流ID'),
  resourceId?: string(name='ResourceId', description='资源组ID'),
  showOwn?: boolean(name='ShowOwn', description='是否只返回当前登录者所提交的作业'),
  sortBy?: string(name='SortBy', description='按返回字段排序'),
  startTime?: string(name='StartTime', description='起始时间'),
  status?: string(name='Status', description='作业状态'),
  tags?: map[string]string(name='Tags', description='自定义标签'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model ListJobsShrinkRequest {
  businessUserId?: string(name='BusinessUserId', description='作业关联用户ID'),
  caller?: string(name='Caller', description='调用方'),
  displayName?: string(name='DisplayName', description='作业显示名称，支持模糊查询'),
  endTime?: string(name='EndTime', description='截止时间'),
  fromAllWorkspaces?: boolean(name='FromAllWorkspaces'),
  jobType?: string(name='JobType', description='作业类型'),
  order?: string(name='Order', description='排序顺序'),
  pageNumber?: int32(name='PageNumber', description='当前页'),
  pageSize?: int32(name='PageSize', description='每页返回的作业数'),
  pipelineId?: string(name='PipelineId', description='工作流ID'),
  resourceId?: string(name='ResourceId', description='资源组ID'),
  showOwn?: boolean(name='ShowOwn', description='是否只返回当前登录者所提交的作业'),
  sortBy?: string(name='SortBy', description='按返回字段排序'),
  startTime?: string(name='StartTime', description='起始时间'),
  status?: string(name='Status', description='作业状态'),
  tagsShrink?: string(name='Tags', description='自定义标签'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model ListJobsResponseBody = {
  jobs?: [
    JobItem
  ](name='Jobs', description='作业列表'),
  requestId?: string(name='RequestId', description='请求Id'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的总作业数'),
}

model ListJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListJobsResponseBody(name='body'),
}

async function listJobs(request: ListJobsRequest): ListJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listJobsWithOptions(request, headers, runtime);
}

async function listJobsWithOptions(tmpReq: ListJobsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListJobsResponse {
  Util.validateModel(tmpReq);
  var request = new ListJobsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.businessUserId)) {
    query['BusinessUserId'] = request.businessUserId;
  }
  if (!Util.isUnset(request.caller)) {
    query['Caller'] = request.caller;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.fromAllWorkspaces)) {
    query['FromAllWorkspaces'] = request.fromAllWorkspaces;
  }
  if (!Util.isUnset(request.jobType)) {
    query['JobType'] = request.jobType;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pipelineId)) {
    query['PipelineId'] = request.pipelineId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.showOwn)) {
    query['ShowOwn'] = request.showOwn;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListJobs',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListTensorboardsRequest {
  displayName?: string(name='DisplayName', description='展示名称'),
  endTime?: string(name='EndTime', description='截止时间'),
  jobId?: string(name='JobId', description='JobId'),
  order?: string(name='Order', description='排序顺序'),
  pageNumber?: int32(name='PageNumber', description='当前页'),
  pageSize?: int32(name='PageSize', description='每页返回的作业数'),
  sortBy?: string(name='SortBy', description='按返回字段排序'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  startTime?: string(name='StartTime', description='起始时间'),
  status?: string(name='Status', description='根据状态过滤'),
  tensorboardId?: string(name='TensorboardId', description='TensorboardId'),
  verbose?: boolean(name='Verbose', description='是否显示详情'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model ListTensorboardsResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
  tensorboards?: [
    Tensorboard
  ](name='Tensorboards', description='Tensorboard 列表'),
  totalCount?: long(name='TotalCount', description='符合条件的数据源总数量'),
}

model ListTensorboardsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTensorboardsResponseBody(name='body'),
}

async function listTensorboards(request: ListTensorboardsRequest): ListTensorboardsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTensorboardsWithOptions(request, headers, runtime);
}

async function listTensorboardsWithOptions(request: ListTensorboardsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTensorboardsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sourceId)) {
    query['SourceId'] = request.sourceId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tensorboardId)) {
    query['TensorboardId'] = request.tensorboardId;
  }
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTensorboards',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StartTensorboardRequest {
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model StartTensorboardResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
  tensorboardId?: string(name='TensorboardId', description='Tensorboad Id'),
}

model StartTensorboardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartTensorboardResponseBody(name='body'),
}

async function startTensorboard(TensorboardId: string, request: StartTensorboardRequest): StartTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startTensorboardWithOptions(TensorboardId, request, headers, runtime);
}

async function startTensorboardWithOptions(TensorboardId: string, request: StartTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartTensorboardResponse {
  Util.validateModel(request);
  TensorboardId = OpenApiUtil.getEncodeParam(TensorboardId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartTensorboard',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards/${TensorboardId}/start`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StopJobResponseBody = {
  jobId?: string(name='JobId', description='作业Id'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model StopJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopJobResponseBody(name='body'),
}

async function stopJob(JobId: string): StopJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopJobWithOptions(JobId, headers, runtime);
}

async function stopJobWithOptions(JobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopJobResponse {
  JobId = OpenApiUtil.getEncodeParam(JobId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StopJob',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${JobId}/stop`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StopJobsRequest {
  jobIds?: [ string ](name='JobIds', description='作业ID列表'),
}

model StopJobsResponseBody = {
  jobIds?: [ string ](name='JobIds', description='作业ID列表'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model StopJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopJobsResponseBody(name='body'),
}

async function stopJobs(request: StopJobsRequest): StopJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopJobsWithOptions(request, headers, runtime);
}

async function stopJobsWithOptions(request: StopJobsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopJobsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.jobIds)) {
    body['JobIds'] = request.jobIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StopJobs',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/batch/jobs/stop`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StopTensorboardRequest {
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model StopTensorboardResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
  tensorboardId?: string(name='TensorboardId', description='Tensorboad Id'),
}

model StopTensorboardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopTensorboardResponseBody(name='body'),
}

async function stopTensorboard(TensorboardId: string, request: StopTensorboardRequest): StopTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopTensorboardWithOptions(TensorboardId, request, headers, runtime);
}

async function stopTensorboardWithOptions(TensorboardId: string, request: StopTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopTensorboardResponse {
  Util.validateModel(request);
  TensorboardId = OpenApiUtil.getEncodeParam(TensorboardId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopTensorboard',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards/${TensorboardId}/stop`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateJobRequest {
  priority?: int32(name='Priority', description='设置优先级'),
}

model UpdateJobResponseBody = {
  jobId?: string(name='JobId', description='作业ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model UpdateJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateJobResponseBody(name='body'),
}

async function updateJob(JobId: string, request: UpdateJobRequest): UpdateJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateJobWithOptions(JobId, request, headers, runtime);
}

async function updateJobWithOptions(JobId: string, request: UpdateJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateJobResponse {
  Util.validateModel(request);
  JobId = OpenApiUtil.getEncodeParam(JobId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateJob',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${JobId}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateTensorboardRequest {
  maxRunningTimeMinutes?: long(name='MaxRunningTimeMinutes', description='MaxRunningTimeMinutes'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model UpdateTensorboardResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
  tensorboardId?: string(name='TensorboardId', description='Tensorboad Id'),
}

model UpdateTensorboardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTensorboardResponseBody(name='body'),
}

async function updateTensorboard(TensorboardId: string, request: UpdateTensorboardRequest): UpdateTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateTensorboardWithOptions(TensorboardId, request, headers, runtime);
}

async function updateTensorboardWithOptions(TensorboardId: string, request: UpdateTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTensorboardResponse {
  Util.validateModel(request);
  TensorboardId = OpenApiUtil.getEncodeParam(TensorboardId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.maxRunningTimeMinutes)) {
    query['MaxRunningTimeMinutes'] = request.maxRunningTimeMinutes;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTensorboard',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards/${TensorboardId}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

