/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('pai-dlc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AliyunAccounts {
  aliyunUid?: string(name='AliyunUid', description='Aliyun账号的UID'),
  employeeId?: string(name='EmployeeId', description='弹内用户的工号'),
  gmtCreateTime?: string(name='GmtCreateTime', description='这条记录的创建时间'),
  gmtModifyTime?: string(name='GmtModifyTime', description='这条记录的上次修改时间'),
}

model CodeSourceItem {
  codeBranch?: string(name='CodeBranch', description='代码分支'),
  codeCommit?: string(name='CodeCommit', description='代码Commit ID'),
  codeRepo?: string(name='CodeRepo', description='代码仓库地址'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken', description='访问代码仓库所用的AccessToken'),
  codeRepoUserName?: string(name='CodeRepoUserName', description='访问代码仓库的用户名'),
  codeSourceId?: string(name='CodeSourceId', description='代码源ID'),
  description?: string(name='Description', description='代码源详细描述'),
  displayName?: string(name='DisplayName', description='代码源配置的名字'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
  gmtModifyTime?: string(name='GmtModifyTime', description='修改时间'),
  userId?: string(name='UserId', description='代码源配置的用户ID'),
}

model ContainerSpec {
  args?: [ string ](name='Args', description='命令参数'),
  command?: [ string ](name='Command', description='用户命令'),
  env?: [
    EnvVar
  ](name='Env', description='环境变量'),
  image?: string(name='Image', description='容器镜像地址'),
  name?: string(name='Name', description='容器名称'),
  workingDir?: string(name='WorkingDir', description='容器内工作目录'),
}

model DataSourceItem {
  dataSourceId?: string(name='DataSourceId', description='数据源Id'),
  dataSourceType?: string(name='DataSourceType', description='数据源类型'),
  description?: string(name='Description', description='数据源描述'),
  displayName?: string(name='DisplayName', description='数据源显示名称'),
  endpoint?: string(name='Endpoint', description='阿里云OSS文件系统服务端点'),
  fileSystemId?: string(name='FileSystemId', description='阿里云NAS文件系统Id'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间（UTC）'),
  gmtModifyTime?: string(name='GmtModifyTime', description='修改时间（UTC）'),
  mountPath?: string(name='MountPath', description='本地挂载目录'),
  options?: string(name='Options', description='阿里云OSS文件系统配置选项'),
  path?: string(name='Path', description='阿里云OSS文件系统路径'),
  userId?: string(name='UserId', description='创建人Id'),
}

model EcsSpec {
  cpu?: int32(name='Cpu', description='cpu数量'),
  gpu?: int32(name='Gpu', description='gpu数量'),
  gpuType?: string(name='GpuType', description='gpu类型'),
  instanceType?: string(name='InstanceType', description='规格类型'),
  memory?: int32(name='Memory', description='Memory数量'),
}

model EnvVar {
  name?: string(name='Name', description='环境变量名称'),
  value?: string(name='Value', description='环境变量值'),
}

model ExtraPodSpec {
  initContainers?: [
    ContainerSpec
  ](name='InitContainers', description='初始化容器'),
  podAnnotations?: map[string]string(name='PodAnnotations', description='Pod注解'),
  podLabels?: map[string]string(name='PodLabels', description='Pod标签'),
  sharedVolumeMountPaths?: [ string ](name='SharedVolumeMountPaths', description='容器间共享的本地目录'),
  sideCarContainers?: [
    ContainerSpec
  ](name='SideCarContainers', description='伴随容器'),
}

model GPUDetail {
  GPU?: string(name='GPU', description='GPU卡数'),
  GPUType?: string(name='GPUType', description='GPU卡型'),
  GPUTypeFullName?: string(name='GPUTypeFullName', description='GPU卡型全名'),
}

model ImageItem {
  acceleratorType?: string(name='AcceleratorType', description='加速器类型'),
  framework?: string(name='Framework', description='镜像包含的框架类型'),
  imageProviderType?: string(name='ImageProviderType', description='镜像类型'),
  imageTag?: string(name='ImageTag', description='镜像Tag'),
  imageUrl?: string(name='ImageUrl', description='镜像地址'),
  imageUrlVpc?: string(name='ImageUrlVpc', description='镜像vpc地址'),
}

model JobElasticSpec {
  AIMasterType?: string(name='AIMasterType', description='aimaster角色使用的资源规格'),
  enableElasticTraining?: boolean(name='EnableElasticTraining', description='打开弹性训练'),
  maxParallelism?: int32(name='MaxParallelism', description='最大并行度'),
  minParallelism?: int32(name='MinParallelism', description='最小并行度'),
}

model JobItem {
  codeSource?: {
    branch?: string(name='Branch', description='代码分支'),
    codeSourceId?: string(name='CodeSourceId', description='代码源Id'),
    commit?: string(name='Commit', description='代码Commit'),
    mountPath?: string(name='MountPath', description='本地挂载路径'),
  }(name='CodeSource', description='代码源配置'),
  dataSources?: [ 
    {
      dataSourceId?: string(name='DataSourceId', description='数据源Id'),
      mountPath?: string(name='MountPath', description='本地挂载路径'),
    }
  ](name='DataSources', description='数据源配置列表'),
  displayName?: string(name='DisplayName', description='作业显示名称'),
  duration?: long(name='Duration', description='作业运行时长，单位：秒'),
  envs?: map[string]string(name='Envs', description='环境变量配置'),
  gmtCreateTime?: string(name='GmtCreateTime', description='作业创建时间（UTC）'),
  gmtFinishTime?: string(name='GmtFinishTime', description='作业结束时间（UTC）'),
  jobId?: string(name='JobId', description='作业Id'),
  jobSpecs?: [
    JobSpec
  ](name='JobSpecs', description='作业规格配置'),
  jobType?: string(name='JobType', description='作业类型'),
  reasonCode?: string(name='ReasonCode', description='状态详情码'),
  reasonMessage?: string(name='ReasonMessage', description='状态详情'),
  resourceId?: string(name='ResourceId', description='作业运行所在的资源组ID'),
  settings?: JobSettings(name='Settings', description='作业额外参数'),
  status?: string(name='Status', description='作业状态'),
  thirdpartyLibDir?: string(name='ThirdpartyLibDir', description='三方库(requirements.txt)文件路径'),
  thirdpartyLibs?: [ string ](name='ThirdpartyLibs', description='三方库配置列表'),
  userCommand?: string(name='UserCommand', description='用户命令'),
  userId?: string(name='UserId', description='作业提交人Id'),
  workspaceId?: string(name='WorkspaceId', description='作业所属工作空间ID'),
  workspaceName?: string(name='WorkspaceName', description='作业所属工作空间名称'),
}

model JobSettings {
  businessUserId?: string(name='BusinessUserId', description='作业关联用户ID'),
  caller?: string(name='Caller', description='调用方'),
  pipelineId?: string(name='PipelineId', description='工作流ID'),
  tags?: map[string]string(name='Tags', description='自定义标签'),
}

model JobSpec {
  ecsSpec?: string(name='EcsSpec', description='Ecs实例规格'),
  extraPodSpec?: ExtraPodSpec(name='ExtraPodSpec', description='额外的Pod配置'),
  image?: string(name='Image', description='镜像'),
  podCount?: long(name='PodCount', description='实例数量'),
  resourceConfig?: ResourceConfig(name='ResourceConfig', description='资源配置'),
  type?: string(name='Type', description='类型'),
}

model Member {
  memberId?: string(name='MemberId', description='成员id'),
  memberType?: string(name='MemberType', description='成员角色'),
}

model Metric {
  time?: long(name='Time', description='时间戳（毫秒）'),
  value?: float(name='Value', description='样本值'),
}

model NodeMetric {
  metrics?: [
    Metric
  ](name='Metrics', description='监控指标样本序列'),
  nodeName?: string(name='NodeName', description='节点名称'),
}

model PodMetric {
  metrics?: [
    Metric
  ](name='Metrics', description='监控指标样本序列'),
  podId?: string(name='PodId', description='Pod编号'),
}

model Quota {
  clusterId?: string(name='ClusterId', description='集群id'),
  clusterName?: string(name='ClusterName', description='集群名称'),
  isExclusiveQuota?: boolean(name='IsExclusiveQuota', description='是否是独占Quota组'),
  quotaId?: string(name='QuotaId', description='资源配额id'),
  quotaName?: string(name='QuotaName', description='资源配额名称'),
  quotaType?: string(name='QuotaType', description='资源配额类型'),
  totalQuota?: QuotaDetail(name='TotalQuota', description='资源总量'),
  usedQuota?: QuotaDetail(name='UsedQuota', description='资源用量'),
}

model QuotaDetail {
  CPU?: string(name='CPU', description='CPU核数'),
  GPU?: string(name='GPU', description='GPU卡数'),
  GPUDetails?: [
    GPUDetail
  ](name='GPUDetails', description='GPU详情'),
  GPUType?: string(name='GPUType', description='GPU卡型'),
  GPUTypeFullName?: string(name='GPUTypeFullName', description='GPU卡型全名'),
  memory?: string(name='Memory', description='内存容量'),
}

model ResourceConfig {
  CPU?: string(name='CPU', description='CPU核心数'),
  GPU?: string(name='GPU', description='GPU核心数'),
  GPUType?: string(name='GPUType', description='显卡类型'),
  memory?: string(name='Memory', description='内存容量'),
  sharedMemory?: string(name='SharedMemory', description='共享内存容量'),
}

model Resources {
  CPU?: string(name='CPU', description='CPU核心数'),
  GPU?: string(name='GPU', description='GPU卡数'),
  memory?: string(name='Memory', description='内存大小'),
}

model Tensorboard {
  dataSourceId?: string(name='DataSourceId', description='数据源Id'),
  displayName?: string(name='DisplayName', description='展示名称'),
  duration?: string(name='Duration', description='运行时长'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间（UTC）'),
  gmtModifyTime?: string(name='GmtModifyTime', description='修改时间（UTC）'),
  jobId?: string(name='JobId', description='任务Id'),
  reasonCode?: string(name='ReasonCode', description='状态详情码'),
  reasonMessage?: string(name='ReasonMessage', description='状态详情'),
  requestId?: string(name='RequestId', description='请求Id'),
  status?: string(name='Status', description='状态'),
  summaryPath?: string(name='SummaryPath', description='文件路径'),
  tensorboardId?: string(name='TensorboardId', description='Tensorboard Id'),
  tensorboardUrl?: string(name='TensorboardUrl', description='Tensorboard URL'),
  userId?: string(name='UserId', description='创建者'),
}

model Workspace {
  creator?: string(name='Creator', description='创建者'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
  gmtModifyTime?: string(name='GmtModifyTime', description='最近修改时间'),
  members?: [
    Member
  ](name='Members', description='成员列表'),
  quotas?: [
    Quota
  ](name='Quotas', description='资源配额列表'),
  totalResources?: Resources(name='TotalResources', description='资源总量'),
  workspaceAdmins?: [
    Member
  ](name='WorkspaceAdmins', description='管理员列表'),
  workspaceId?: string(name='WorkspaceId', description='工作空间id'),
  workspaceName?: string(name='WorkspaceName', description='工作空间名称'),
}

model BatchGetJobsStatisticsRequest {
  workspaceIds?: string(name='WorkspaceIds', description='工作空间id列表'),
}

model BatchGetJobsStatisticsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  statistics?: map[string]any(name='Statistics', description='每一个工作空间id下面的Job按照状态的分类统计信息'),
}

model BatchGetJobsStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetJobsStatisticsResponseBody(name='body'),
}

async function batchGetJobsStatistics(request: BatchGetJobsStatisticsRequest): BatchGetJobsStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return batchGetJobsStatisticsWithOptions(request, headers, runtime);
}

async function batchGetJobsStatisticsWithOptions(request: BatchGetJobsStatisticsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchGetJobsStatisticsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.workspaceIds)) {
    query.WorkspaceIds = request.workspaceIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('BatchGetJobsStatistics', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/batch/statistics/jobs`, 'json', req, runtime);
}

model CreateCodeSourceRequest {
  codeBranch?: string(name='CodeBranch', description='代码分支'),
  codeRepo?: string(name='CodeRepo', description='代码仓库地址'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken', description='密码'),
  codeRepoUserName?: string(name='CodeRepoUserName', description='用户名'),
  description?: string(name='Description', description='代码源详细描述'),
  displayName?: string(name='DisplayName', description='代码源配置名称'),
  mountPath?: string(name='MountPath', description='代码本地挂载目录，默认挂载到/root/code/下'),
}

model CreateCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', description='创建的代码源配置的ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model CreateCodeSourceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCodeSourceResponseBody(name='body'),
}

async function createCodeSource(request: CreateCodeSourceRequest): CreateCodeSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createCodeSourceWithOptions(request, headers, runtime);
}

async function createCodeSourceWithOptions(request: CreateCodeSourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCodeSourceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.codeBranch)) {
    body.CodeBranch = request.codeBranch;
  }
  if (!Util.isUnset(request.codeRepo)) {
    body.CodeRepo = request.codeRepo;
  }
  if (!Util.isUnset(request.codeRepoAccessToken)) {
    body.CodeRepoAccessToken = request.codeRepoAccessToken;
  }
  if (!Util.isUnset(request.codeRepoUserName)) {
    body.CodeRepoUserName = request.codeRepoUserName;
  }
  if (!Util.isUnset(request.description)) {
    body.Description = request.description;
  }
  if (!Util.isUnset(request.displayName)) {
    body.DisplayName = request.displayName;
  }
  if (!Util.isUnset(request.mountPath)) {
    body.MountPath = request.mountPath;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateCodeSource', '2020-12-03', 'HTTPS', 'POST', 'AK', `/api/v1/codesources`, 'json', req, runtime);
}

model CreateDataSourceRequest {
  dataSourceType?: string(name='DataSourceType', description='数据源类型'),
  description?: string(name='Description', description='数据源描述'),
  displayName?: string(name='DisplayName', description='数据源显示名称'),
  endpoint?: string(name='Endpoint', description='阿里云OSS文件系统服务端点'),
  fileSystemId?: string(name='FileSystemId', description='阿里云NAS文件系统Id'),
  mountPath?: string(name='MountPath', description='本地挂载目录'),
  options?: string(name='Options', description='阿里云OSS文件系统配置选项'),
  path?: string(name='Path', description='阿里云OSS文件系统路径'),
}

model CreateDataSourceResponseBody = {
  dataSourceId?: string(name='DataSourceId', description='数据源Id'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model CreateDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataSourceResponseBody(name='body'),
}

async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createDataSourceWithOptions(request, headers, runtime);
}

async function createDataSourceWithOptions(request: CreateDataSourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDataSourceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.dataSourceType)) {
    body.DataSourceType = request.dataSourceType;
  }
  if (!Util.isUnset(request.description)) {
    body.Description = request.description;
  }
  if (!Util.isUnset(request.displayName)) {
    body.DisplayName = request.displayName;
  }
  if (!Util.isUnset(request.endpoint)) {
    body.Endpoint = request.endpoint;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    body.FileSystemId = request.fileSystemId;
  }
  if (!Util.isUnset(request.mountPath)) {
    body.MountPath = request.mountPath;
  }
  if (!Util.isUnset(request.options)) {
    body.Options = request.options;
  }
  if (!Util.isUnset(request.path)) {
    body.Path = request.path;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateDataSource', '2020-12-03', 'HTTPS', 'POST', 'AK', `/api/v1/datasources`, 'json', req, runtime);
}

model CreateJobRequest {
  codeSource?: {
    branch?: string(name='Branch', description='代码分支'),
    codeSourceId?: string(name='CodeSourceId', description='代码源Id'),
    commit?: string(name='Commit', description='代码Commit'),
    mountPath?: string(name='MountPath', description='本地挂载路径'),
  }(name='CodeSource', description='代码源配置'),
  dataSources?: [ 
    {
      dataSourceId?: string(name='DataSourceId', description='数据源Id'),
      mountPath?: string(name='MountPath', description='本地挂载路径'),
    }
  ](name='DataSources', description='数据源配置列表'),
  displayName?: string(name='DisplayName', description='作业显示名称'),
  elasticSpec?: JobElasticSpec(name='ElasticSpec'),
  envs?: map[string]string(name='Envs', description='环境变量配置'),
  jobMaxRunningTimeMinutes?: long(name='JobMaxRunningTimeMinutes', description='作业最大运行时间'),
  jobSpecs?: [
    JobSpec
  ](name='JobSpecs', description='作业规格配置'),
  jobType?: string(name='JobType', description='作业类型'),
  priority?: int32(name='Priority', description='作业优先级'),
  resourceId?: string(name='ResourceId', description='资源组编号'),
  settings?: JobSettings(name='Settings'),
  thirdpartyLibDir?: string(name='ThirdpartyLibDir', description='三方库(requirements.txt)文件路径'),
  thirdpartyLibs?: [ string ](name='ThirdpartyLibs', description='三方库配置列表'),
  userCommand?: string(name='UserCommand', description='作业命令'),
  userVpc?: {
    extendedCIDRs?: [ string ](name='ExtendedCIDRs', description='扩展网段'),
    securityGroupId?: string(name='SecurityGroupId', description='用户安全组的id'),
    switchId?: string(name='SwitchId', description='用户交换机的id'),
    vpcId?: string(name='VpcId', description='用户VPC的id'),
  }(name='UserVpc', description='用户VPC'),
  workspaceId?: string(name='WorkspaceId', description='工作空间编号'),
}

model CreateJobResponseBody = {
  jobId?: string(name='JobId', description='作业Id'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model CreateJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateJobResponseBody(name='body'),
}

async function createJob(request: CreateJobRequest): CreateJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createJobWithOptions(request, headers, runtime);
}

async function createJobWithOptions(request: CreateJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateJobResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.codeSource)) {
    body.CodeSource = request.codeSource;
  }
  if (!Util.isUnset(request.dataSources)) {
    body.DataSources = request.dataSources;
  }
  if (!Util.isUnset(request.displayName)) {
    body.DisplayName = request.displayName;
  }
  if (!Util.isUnset(request.elasticSpec)) {
    body.ElasticSpec = request.elasticSpec;
  }
  if (!Util.isUnset(request.envs)) {
    body.Envs = request.envs;
  }
  if (!Util.isUnset(request.jobMaxRunningTimeMinutes)) {
    body.JobMaxRunningTimeMinutes = request.jobMaxRunningTimeMinutes;
  }
  if (!Util.isUnset(request.jobSpecs)) {
    body.JobSpecs = request.jobSpecs;
  }
  if (!Util.isUnset(request.jobType)) {
    body.JobType = request.jobType;
  }
  if (!Util.isUnset(request.priority)) {
    body.Priority = request.priority;
  }
  if (!Util.isUnset(request.resourceId)) {
    body.ResourceId = request.resourceId;
  }
  if (!Util.isUnset(request.settings)) {
    body.Settings = request.settings;
  }
  if (!Util.isUnset(request.thirdpartyLibDir)) {
    body.ThirdpartyLibDir = request.thirdpartyLibDir;
  }
  if (!Util.isUnset(request.thirdpartyLibs)) {
    body.ThirdpartyLibs = request.thirdpartyLibs;
  }
  if (!Util.isUnset(request.userCommand)) {
    body.UserCommand = request.userCommand;
  }
  if (!Util.isUnset(request.userVpc)) {
    body.UserVpc = request.userVpc;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body.WorkspaceId = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateJob', '2020-12-03', 'HTTPS', 'POST', 'AK', `/api/v1/jobs`, 'json', req, runtime);
}

model CreateQuotaRequest {
  quotaDetail?: QuotaDetail(name='QuotaDetail', description='资源配额参数'),
  quotaName?: string(name='QuotaName', description='资源配额名称'),
  quotaType?: string(name='QuotaType', description='资源配额类型'),
}

model CreateQuotaResponseBody = {
  quotaId?: string(name='QuotaId', description='资源配额id'),
  requestId?: string(name='RequestId', description='请求id'),
}

model CreateQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: CreateQuotaResponseBody(name='body'),
}

async function createQuota(request: CreateQuotaRequest): CreateQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createQuotaWithOptions(request, headers, runtime);
}

async function createQuotaWithOptions(request: CreateQuotaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateQuotaResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.quotaDetail)) {
    body.QuotaDetail = request.quotaDetail;
  }
  if (!Util.isUnset(request.quotaName)) {
    body.QuotaName = request.quotaName;
  }
  if (!Util.isUnset(request.quotaType)) {
    body.QuotaType = request.quotaType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateQuota', '2020-12-03', 'HTTPS', 'POST', 'AK', `/api/v1/quotas`, 'json', req, runtime);
}

model CreateTensorboardRequest {
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
  dataSourceId?: string(name='DataSourceId', description='DataSource Id'),
  dataSources?: [
    DataSourceItem
  ](name='DataSources'),
  displayName?: string(name='DisplayName', description='Tensorboard名称'),
  jobId?: string(name='JobId', description='任务Id'),
  maxRunningTimeMinutes?: long(name='MaxRunningTimeMinutes', description='最长运行时长'),
  summaryPath?: string(name='SummaryPath', description='Summary 目录'),
}

model CreateTensorboardResponseBody = {
  dataSourceId?: string(name='DataSourceId', description='DataSourceId'),
  jobId?: string(name='JobId', description='任务Id'),
  requestId?: string(name='RequestId', description='请求Id'),
  tensorboardId?: string(name='TensorboardId', description='Tensorboard id'),
}

model CreateTensorboardResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTensorboardResponseBody(name='body'),
}

async function createTensorboard(request: CreateTensorboardRequest): CreateTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTensorboardWithOptions(request, headers, runtime);
}

async function createTensorboardWithOptions(request: CreateTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTensorboardResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.workspaceId)) {
    query.WorkspaceId = request.workspaceId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.dataSourceId)) {
    body.DataSourceId = request.dataSourceId;
  }
  if (!Util.isUnset(request.dataSources)) {
    body.DataSources = request.dataSources;
  }
  if (!Util.isUnset(request.displayName)) {
    body.DisplayName = request.displayName;
  }
  if (!Util.isUnset(request.jobId)) {
    body.JobId = request.jobId;
  }
  if (!Util.isUnset(request.maxRunningTimeMinutes)) {
    body.MaxRunningTimeMinutes = request.maxRunningTimeMinutes;
  }
  if (!Util.isUnset(request.summaryPath)) {
    body.SummaryPath = request.summaryPath;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateTensorboard', '2020-12-03', 'HTTPS', 'POST', 'AK', `/api/v1/tensorboards`, 'json', req, runtime);
}

model DeleteCodeSourceResponseBody = {
  codeSourceId?: string(name='CodeSourceId', description='被删除的代码源配置ID'),
  requestId?: string(name='RequestId'),
}

model DeleteCodeSourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCodeSourceResponseBody(name='body'),
}

async function deleteCodeSource(CodeSourceId: string): DeleteCodeSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteCodeSourceWithOptions(CodeSourceId, headers, runtime);
}

async function deleteCodeSourceWithOptions(CodeSourceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteCodeSourceResponse {
  CodeSourceId = OpenApiUtil.getEncodeParam(CodeSourceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteCodeSource', '2020-12-03', 'HTTPS', 'DELETE', 'AK', `/api/v1/codesources/${CodeSourceId}`, 'json', req, runtime);
}

model DeleteDataSourceResponseBody = {
  dataSourceId?: string(name='DataSourceId', description='数据源Id'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model DeleteDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDataSourceResponseBody(name='body'),
}

async function deleteDataSource(DataSourceId: string): DeleteDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteDataSourceWithOptions(DataSourceId, headers, runtime);
}

async function deleteDataSourceWithOptions(DataSourceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDataSourceResponse {
  DataSourceId = OpenApiUtil.getEncodeParam(DataSourceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteDataSource', '2020-12-03', 'HTTPS', 'DELETE', 'AK', `/api/v1/datasources/${DataSourceId}`, 'json', req, runtime);
}

model DeleteJobResponseBody = {
  jobId?: string(name='JobId', description='作业Id'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model DeleteJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteJobResponseBody(name='body'),
}

async function deleteJob(JobId: string): DeleteJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteJobWithOptions(JobId, headers, runtime);
}

async function deleteJobWithOptions(JobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteJobResponse {
  JobId = OpenApiUtil.getEncodeParam(JobId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteJob', '2020-12-03', 'HTTPS', 'DELETE', 'AK', `/api/v1/jobs/${JobId}`, 'json', req, runtime);
}

model DeleteQuotaResponseBody = {
  quotaId?: string(name='QuotaId', description='资源配额id'),
  requestId?: string(name='RequestId', description='请求id'),
}

model DeleteQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteQuotaResponseBody(name='body'),
}

async function deleteQuota(QuotaId: string): DeleteQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteQuotaWithOptions(QuotaId, headers, runtime);
}

async function deleteQuotaWithOptions(QuotaId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteQuotaResponse {
  QuotaId = OpenApiUtil.getEncodeParam(QuotaId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('DeleteQuota', '2020-12-03', 'HTTPS', 'DELETE', 'AK', `/api/v1/quotas/${QuotaId}`, 'json', req, runtime);
}

model DeleteTensorboardRequest {
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model DeleteTensorboardResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
  tensorboardId?: string(name='TensorboardId', description='Tensorboad Id'),
}

model DeleteTensorboardResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTensorboardResponseBody(name='body'),
}

async function deleteTensorboard(TensorboardId: string, request: DeleteTensorboardRequest): DeleteTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteTensorboardWithOptions(TensorboardId, request, headers, runtime);
}

async function deleteTensorboardWithOptions(TensorboardId: string, request: DeleteTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTensorboardResponse {
  Util.validateModel(request);
  TensorboardId = OpenApiUtil.getEncodeParam(TensorboardId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.workspaceId)) {
    query.WorkspaceId = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DeleteTensorboard', '2020-12-03', 'HTTPS', 'DELETE', 'AK', `/api/v1/tensorboards/${TensorboardId}`, 'json', req, runtime);
}

model GetAuthorizationResponseBody = {
  authorizationFailedCode?: string(name='AuthorizationFailedCode', description='授权失败码'),
  authorizationFailedMessage?: string(name='AuthorizationFailedMessage', description='授权失败消息'),
  authorized?: boolean(name='Authorized', description='是否授权'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model GetAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  body: GetAuthorizationResponseBody(name='body'),
}

async function getAuthorization(): GetAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getAuthorizationWithOptions(headers, runtime);
}

async function getAuthorizationWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): GetAuthorizationResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetAuthorization', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/authorization`, 'json', req, runtime);
}

model GetCodeSourceResponseBody = {
  codeBranch?: string(name='CodeBranch', description='代码仓库分支'),
  codeCommit?: string(name='CodeCommit', description='代码Commit'),
  codeRepo?: string(name='CodeRepo', description='代码仓库地址'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken', description='访问代码仓库的token'),
  codeRepoUserName?: string(name='CodeRepoUserName', description='代码仓库的用户名'),
  codeSourceId?: string(name='CodeSourceId', description='代码源配置ID'),
  description?: string(name='Description', description='详细描述'),
  displayName?: string(name='DisplayName', description='代码源配置名字'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间'),
  gmtModifyTime?: string(name='GmtModifyTime', description='修改时间'),
  mountPath?: string(name='MountPath', description='代码本地挂载目录，默认挂载到/root/code/下'),
  requestId?: string(name='RequestId', description='请求ID'),
  userId?: string(name='UserId', description='代码配置源的创建者ID'),
}

model GetCodeSourceResponse = {
  headers: map[string]string(name='headers'),
  body: GetCodeSourceResponseBody(name='body'),
}

async function getCodeSource(CodeSourceId: string): GetCodeSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getCodeSourceWithOptions(CodeSourceId, headers, runtime);
}

async function getCodeSourceWithOptions(CodeSourceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetCodeSourceResponse {
  CodeSourceId = OpenApiUtil.getEncodeParam(CodeSourceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetCodeSource', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/codesources/${CodeSourceId}`, 'json', req, runtime);
}

model GetDataSourceResponseBody = {
  dataSourceId?: string(name='DataSourceId', description='数据源Id'),
  dataSourceType?: string(name='DataSourceType', description='数据源类型'),
  description?: string(name='Description', description='数据源描述'),
  displayName?: string(name='DisplayName', description='数据源显示名称'),
  endpoint?: string(name='Endpoint', description='阿里云OSS文件系统服务端点'),
  fileSystemId?: string(name='FileSystemId', description='阿里云NAS文件系统Id'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间（UTC）'),
  gmtModifyTime?: string(name='GmtModifyTime', description='修改时间（UTC）'),
  mountPath?: string(name='MountPath', description='本地挂载目录'),
  options?: string(name='Options', description='阿里云OSS文件系统配置选项'),
  path?: string(name='Path', description='阿里云OSS文件系统路径'),
  requestId?: string(name='RequestId', description='请求Id'),
  userId?: string(name='UserId', description='创建人Id'),
}

model GetDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataSourceResponseBody(name='body'),
}

async function getDataSource(DataSourceId: string): GetDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDataSourceWithOptions(DataSourceId, headers, runtime);
}

async function getDataSourceWithOptions(DataSourceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetDataSourceResponse {
  DataSourceId = OpenApiUtil.getEncodeParam(DataSourceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetDataSource', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/datasources/${DataSourceId}`, 'json', req, runtime);
}

model GetJobResponseBody = {
  clusterId?: string(name='ClusterId', description='集群ID'),
  codeSource?: {
    branch?: string(name='Branch', description='代码分支'),
    codeSourceId?: string(name='CodeSourceId', description='代码源Id'),
    commit?: string(name='Commit', description='代码Commit'),
    mountPath?: string(name='MountPath', description='本地挂载路径'),
  }(name='CodeSource', description='代码源配置'),
  dataSources?: [ 
    {
      dataSourceId?: string(name='DataSourceId', description='数据源Id'),
      mountPath?: string(name='MountPath', description='本地挂载路径'),
    }
  ](name='DataSources', description='数据源配置列表'),
  displayName?: string(name='DisplayName', description='作业显示名称'),
  duration?: long(name='Duration', description='作业运行时长（s）'),
  elasticSpec?: JobElasticSpec(name='ElasticSpec', description='弹性任务参数'),
  envs?: map[string]string(name='Envs', description='环境变量配置'),
  gmtCreateTime?: string(name='GmtCreateTime', description='作业创建时间（UTC）'),
  gmtFailedTime?: string(name='GmtFailedTime'),
  gmtFinishTime?: string(name='GmtFinishTime', description='作业结束时间（UTC）'),
  gmtRunningTime?: string(name='GmtRunningTime'),
  gmtStoppedTime?: string(name='GmtStoppedTime'),
  gmtSubmittedTime?: string(name='GmtSubmittedTime'),
  gmtSuccessedTime?: string(name='GmtSuccessedTime'),
  jobId?: string(name='JobId', description='作业Id'),
  jobSpecs?: [
    JobSpec
  ](name='JobSpecs', description='作业规格配置'),
  jobType?: string(name='JobType', description='作业类型'),
  pods?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime', description='Pod创建时间（UTC）'),
      gmtFinishTime?: string(name='GmtFinishTime', description='Pod结束时间（UTC）'),
      gmtStartTime?: string(name='GmtStartTime', description='Pod启动时间（UTC）'),
      ip?: string(name='Ip', description='Pod Ip'),
      podId?: string(name='PodId', description='Pod Id'),
      status?: string(name='Status', description='Pod状态'),
      type?: string(name='Type', description='Pod类型'),
    }
  ](name='Pods', description='作业所以运行Pod列表'),
  reasonCode?: string(name='ReasonCode', description='状态详情码'),
  reasonMessage?: string(name='ReasonMessage', description='状态详情'),
  requestId?: string(name='RequestId', description='请求Id'),
  resourceId?: string(name='ResourceId', description='作业运行所在的资源组ID'),
  settings?: JobSettings(name='Settings', description='作业额外参数配置'),
  status?: string(name='Status', description='作业状态'),
  thirdpartyLibDir?: string(name='ThirdpartyLibDir', description='三方库(requirements.txt)文件路径'),
  thirdpartyLibs?: [ string ](name='ThirdpartyLibs', description='三方库配置列表'),
  userCommand?: string(name='UserCommand', description='用户命令'),
  userId?: string(name='UserId', description='作业提交人Id'),
  workspaceId?: string(name='WorkspaceId', description='作业所属工作空间ID'),
  workspaceName?: string(name='WorkspaceName', description='作业所属工作空间名称'),
}

model GetJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobResponseBody(name='body'),
}

async function getJob(JobId: string): GetJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getJobWithOptions(JobId, headers, runtime);
}

async function getJobWithOptions(JobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetJobResponse {
  JobId = OpenApiUtil.getEncodeParam(JobId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetJob', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/jobs/${JobId}`, 'json', req, runtime);
}

model GetJobEventsRequest {
  endTime?: string(name='EndTime', description='查询事件的时间区间的截止时间，默认值是当前。'),
  maxEventsNum?: int32(name='MaxEventsNum', description='获取事件的最大数目，默认值：2000'),
  startTime?: string(name='StartTime', description='查询事件的时间区间的起始时间，默认值是7天前。'),
}

model GetJobEventsResponseBody = {
  events?: [ string ](name='Events', description='事件'),
  jobId?: string(name='JobId', description='作业ID'),
  requestId?: int32(name='RequestId', description='请求ID'),
}

model GetJobEventsResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobEventsResponseBody(name='body'),
}

async function getJobEvents(JobId: string, request: GetJobEventsRequest): GetJobEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getJobEventsWithOptions(JobId, request, headers, runtime);
}

async function getJobEventsWithOptions(JobId: string, request: GetJobEventsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetJobEventsResponse {
  Util.validateModel(request);
  JobId = OpenApiUtil.getEncodeParam(JobId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.endTime)) {
    query.EndTime = request.endTime;
  }
  if (!Util.isUnset(request.maxEventsNum)) {
    query.MaxEventsNum = request.maxEventsNum;
  }
  if (!Util.isUnset(request.startTime)) {
    query.StartTime = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetJobEvents', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/jobs/${JobId}/events`, 'json', req, runtime);
}

model GetJobMetricsRequest {
  endTime?: string(name='EndTime', description='截止时间'),
  metricType?: string(name='MetricType', description='指标类型'),
  startTime?: string(name='StartTime', description='起始时间'),
  timeStep?: string(name='TimeStep', description='时间间隔'),
  token?: string(name='Token', description='Token'),
}

model GetJobMetricsResponseBody = {
  jobId?: string(name='JobId', description='作业ID'),
  podMetrics?: [
    PodMetric
  ](name='PodMetrics', description='任务监控指标序列集合'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model GetJobMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobMetricsResponseBody(name='body'),
}

async function getJobMetrics(JobId: string, request: GetJobMetricsRequest): GetJobMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getJobMetricsWithOptions(JobId, request, headers, runtime);
}

async function getJobMetricsWithOptions(JobId: string, request: GetJobMetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetJobMetricsResponse {
  Util.validateModel(request);
  JobId = OpenApiUtil.getEncodeParam(JobId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.endTime)) {
    query.EndTime = request.endTime;
  }
  if (!Util.isUnset(request.metricType)) {
    query.MetricType = request.metricType;
  }
  if (!Util.isUnset(request.startTime)) {
    query.StartTime = request.startTime;
  }
  if (!Util.isUnset(request.timeStep)) {
    query.TimeStep = request.timeStep;
  }
  if (!Util.isUnset(request.token)) {
    query.Token = request.token;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetJobMetrics', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/jobs/${JobId}/metrics`, 'json', req, runtime);
}

model GetJobsStatisticsRequest {
  workspaceId?: string(name='WorkspaceId', description='工作空间id'),
}

model GetJobsStatisticsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  statistics?: map[string]any(name='Statistics', description='当前的Workspace ID下面的JOB统计数据'),
}

model GetJobsStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobsStatisticsResponseBody(name='body'),
}

async function getJobsStatistics(request: GetJobsStatisticsRequest): GetJobsStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getJobsStatisticsWithOptions(request, headers, runtime);
}

async function getJobsStatisticsWithOptions(request: GetJobsStatisticsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetJobsStatisticsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.workspaceId)) {
    query.WorkspaceId = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetJobsStatistics', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/statistics/jobs`, 'json', req, runtime);
}

model GetPodEventsRequest {
  endTime?: string(name='EndTime', description='截止时间'),
  maxEventsNum?: int32(name='MaxEventsNum', description='返回的事件最大数量'),
  startTime?: string(name='StartTime', description='起始时间'),
}

model GetPodEventsResponseBody = {
  events?: [ string ](name='Events', description='事件列表'),
  jobId?: string(name='JobId', description='作业ID'),
  podId?: string(name='PodId', description='运行示例ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model GetPodEventsResponse = {
  headers: map[string]string(name='headers'),
  body: GetPodEventsResponseBody(name='body'),
}

async function getPodEvents(JobId: string, PodId: string, request: GetPodEventsRequest): GetPodEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPodEventsWithOptions(JobId, PodId, request, headers, runtime);
}

async function getPodEventsWithOptions(JobId: string, PodId: string, request: GetPodEventsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPodEventsResponse {
  Util.validateModel(request);
  JobId = OpenApiUtil.getEncodeParam(JobId);
  PodId = OpenApiUtil.getEncodeParam(PodId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.endTime)) {
    query.EndTime = request.endTime;
  }
  if (!Util.isUnset(request.maxEventsNum)) {
    query.MaxEventsNum = request.maxEventsNum;
  }
  if (!Util.isUnset(request.startTime)) {
    query.StartTime = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetPodEvents', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/jobs/${JobId}/pods/${PodId}/events`, 'json', req, runtime);
}

model GetPodLogsRequest {
  downloadToFile?: boolean(name='DownloadToFile', description='是否下载日志文件，默认：false。'),
  endTime?: string(name='EndTime', description='查询的截止时间，默认值：当前。'),
  maxLines?: int32(name='MaxLines', description='返回的日志的最大行数，默认值：2000。'),
  startTime?: string(name='StartTime', description='查询的起始时间，默认值：7天前。'),
}

model GetPodLogsResponseBody = {
  jobId?: string(name='JobId', description='作业ID'),
  logs?: [ string ](name='Logs', description='日志列表'),
  podId?: string(name='PodId', description='实例ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model GetPodLogsResponse = {
  headers: map[string]string(name='headers'),
  body: GetPodLogsResponseBody(name='body'),
}

async function getPodLogs(JobId: string, PodId: string, request: GetPodLogsRequest): GetPodLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPodLogsWithOptions(JobId, PodId, request, headers, runtime);
}

async function getPodLogsWithOptions(JobId: string, PodId: string, request: GetPodLogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPodLogsResponse {
  Util.validateModel(request);
  JobId = OpenApiUtil.getEncodeParam(JobId);
  PodId = OpenApiUtil.getEncodeParam(PodId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.downloadToFile)) {
    query.DownloadToFile = request.downloadToFile;
  }
  if (!Util.isUnset(request.endTime)) {
    query.EndTime = request.endTime;
  }
  if (!Util.isUnset(request.maxLines)) {
    query.MaxLines = request.maxLines;
  }
  if (!Util.isUnset(request.startTime)) {
    query.StartTime = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetPodLogs', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/jobs/${JobId}/pods/${PodId}/logs`, 'json', req, runtime);
}

model GetQuotaResponseBody = {
  clusterId?: string(name='ClusterId', description='集群id'),
  clusterName?: string(name='ClusterName', description='集群名称'),
  quotaId?: string(name='QuotaId', description='资源配额id'),
  quotaName?: string(name='QuotaName', description='资源配额名称'),
  quotaType?: string(name='QuotaType', description='资源配额类型'),
  requestId?: string(name='RequestId', description='请求id'),
  totalQuota?: QuotaDetail(name='TotalQuota', description='资源总量'),
  usedQuota?: QuotaDetail(name='UsedQuota', description='资源用量'),
}

model GetQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: GetQuotaResponseBody(name='body'),
}

async function getQuota(QuotaId: string): GetQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getQuotaWithOptions(QuotaId, headers, runtime);
}

async function getQuotaWithOptions(QuotaId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetQuotaResponse {
  QuotaId = OpenApiUtil.getEncodeParam(QuotaId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetQuota', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/quotas/${QuotaId}`, 'json', req, runtime);
}

model GetSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', description='请求id'),
  securityGroupId?: string(name='SecurityGroupId', description='安全组id'),
  securityGroupName?: string(name='SecurityGroupName', description='安全组名称'),
  vpcId?: string(name='VpcId', description='所属vpc的id'),
}

model GetSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetSecurityGroupResponseBody(name='body'),
}

async function getSecurityGroup(SecurityGroupId: string): GetSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSecurityGroupWithOptions(SecurityGroupId, headers, runtime);
}

async function getSecurityGroupWithOptions(SecurityGroupId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetSecurityGroupResponse {
  SecurityGroupId = OpenApiUtil.getEncodeParam(SecurityGroupId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetSecurityGroup', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/securitygroups/${SecurityGroupId}`, 'json', req, runtime);
}

model GetSwitchResponseBody = {
  cidrBlock?: string(name='CidrBlock', description='网段'),
  requestId?: string(name='RequestId', description='Id of the request'),
  vSwitchId?: string(name='VSwitchId', description='交换机的id'),
  vSwitchName?: string(name='VSwitchName', description='交换机的名称'),
  vpcId?: string(name='VpcId', description='所属VPC的id'),
}

model GetSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: GetSwitchResponseBody(name='body'),
}

async function getSwitch(SwitchId: string): GetSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSwitchWithOptions(SwitchId, headers, runtime);
}

async function getSwitchWithOptions(SwitchId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetSwitchResponse {
  SwitchId = OpenApiUtil.getEncodeParam(SwitchId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetSwitch', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/switches/${SwitchId}`, 'json', req, runtime);
}

model GetTensorboardRequest {
  jodId?: string(name='JodId', description='JodId'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model GetTensorboardResponse = {
  headers: map[string]string(name='headers'),
  body: Tensorboard  
}

async function getTensorboard(TensorboardId: string, request: GetTensorboardRequest): GetTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTensorboardWithOptions(TensorboardId, request, headers, runtime);
}

async function getTensorboardWithOptions(TensorboardId: string, request: GetTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTensorboardResponse {
  Util.validateModel(request);
  TensorboardId = OpenApiUtil.getEncodeParam(TensorboardId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.jodId)) {
    query.JodId = request.jodId;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query.WorkspaceId = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetTensorboard', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/tensorboards/${TensorboardId}`, 'json', req, runtime);
}

model GetTokenRequest {
  expireTime?: long(name='ExpireTime', description='ExpireTime'),
  targetId?: string(name='TargetId', description='TargetId'),
  targetType?: string(name='TargetType', description='TargetType'),
}

model GetTokenResponseBody = {
  requestId?: string(name='RequestId', description='RequestId'),
  token?: string(name='Token', description='Token'),
}

model GetTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetTokenResponseBody(name='body'),
}

async function getToken(request: GetTokenRequest): GetTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTokenWithOptions(request, headers, runtime);
}

async function getTokenWithOptions(request: GetTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTokenResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.expireTime)) {
    query.ExpireTime = request.expireTime;
  }
  if (!Util.isUnset(request.targetId)) {
    query.TargetId = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    query.TargetType = request.targetType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetToken', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/tokens`, 'json', req, runtime);
}

model GetUserAuthorizationResponseBody = {
  isPassed?: boolean(name='IsPassed', description='是否通过鉴权'),
  requestId?: int32(name='RequestId', description='请求ID'),
}

model GetUserAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserAuthorizationResponseBody(name='body'),
}

async function getUserAuthorization(UserId: string): GetUserAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getUserAuthorizationWithOptions(UserId, headers, runtime);
}

async function getUserAuthorizationWithOptions(UserId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetUserAuthorizationResponse {
  UserId = OpenApiUtil.getEncodeParam(UserId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetUserAuthorization', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/users/${UserId}/authorization`, 'json', req, runtime);
}

model GetVpcResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  vpcId?: int32(name='VpcId', description='Vpc的ID'),
  vpcName?: string(name='VpcName', description='Vpc名称'),
}

model GetVpcResponse = {
  headers: map[string]string(name='headers'),
  body: GetVpcResponseBody(name='body'),
}

async function getVpc(VpcId: string): GetVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getVpcWithOptions(VpcId, headers, runtime);
}

async function getVpcWithOptions(VpcId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetVpcResponse {
  VpcId = OpenApiUtil.getEncodeParam(VpcId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetVpc', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/vpcs/${VpcId}`, 'json', req, runtime);
}

model GetWorkspaceResponseBody = {
  isWorkspaceAdmin?: boolean(name='IsWorkspaceAdmin', description='是否是当前工作空间的管理员'),
  requestId?: string(name='RequestId', description='请求ID'),
  workspace?: Workspace(name='Workspace', description='工作空间'),
}

model GetWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkspaceResponseBody(name='body'),
}

async function getWorkspace(WorkspaceId: string): GetWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getWorkspaceWithOptions(WorkspaceId, headers, runtime);
}

async function getWorkspaceWithOptions(WorkspaceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetWorkspaceResponse {
  WorkspaceId = OpenApiUtil.getEncodeParam(WorkspaceId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('GetWorkspace', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/workspaces/${WorkspaceId}`, 'json', req, runtime);
}

model JobDispatchQueryRequest {
  algoName?: string(name='AlgoName', description='PAI-Xflow名称'),
  projectName?: string(name='ProjectName', description='PAI-project名称'),
  properties?: map[string]string(name='Properties', description='properties of pai command'),
  settings?: map[string]string(name='Settings', description='odps settings'),
}

model JobDispatchQueryShrinkRequest {
  algoName?: string(name='AlgoName', description='PAI-Xflow名称'),
  projectName?: string(name='ProjectName', description='PAI-project名称'),
  propertiesShrink?: string(name='Properties', description='properties of pai command'),
  settingsShrink?: string(name='Settings', description='odps settings'),
}

model JobDispatchQueryResponseBody = {
  jobId?: string(name='JobId', description='作业Id'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model JobDispatchQueryResponse = {
  headers: map[string]string(name='headers'),
  body: JobDispatchQueryResponseBody(name='body'),
}

async function jobDispatchQuery(request: JobDispatchQueryRequest): JobDispatchQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return jobDispatchQueryWithOptions(request, headers, runtime);
}

async function jobDispatchQueryWithOptions(tmpReq: JobDispatchQueryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): JobDispatchQueryResponse {
  Util.validateModel(tmpReq);
  var request = new JobDispatchQueryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.properties)) {
    request.propertiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.properties, 'Properties', 'json');
  }
  if (!Util.isUnset(tmpReq.settings)) {
    request.settingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.settings, 'Settings', 'json');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.algoName)) {
    query.AlgoName = request.algoName;
  }
  if (!Util.isUnset(request.projectName)) {
    query.ProjectName = request.projectName;
  }
  if (!Util.isUnset(request.propertiesShrink)) {
    query.Properties = request.propertiesShrink;
  }
  if (!Util.isUnset(request.settingsShrink)) {
    query.Settings = request.settingsShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('JobDispatchQuery', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/jobdispatch`, 'json', req, runtime);
}

model JobDispatchSubmitRequest {
  algoName?: string(name='AlgoName', description='PAI-Xflow名称'),
  projectName?: string(name='ProjectName', description='PAI-project名称'),
  properties?: map[string]string(name='Properties', description='properties of pai command'),
  settings?: map[string]string(name='Settings', description='odps settings'),
}

model JobDispatchSubmitResponseBody = {
  jobUrl?: string(name='JobUrl', description='作业Url'),
}

model JobDispatchSubmitResponse = {
  headers: map[string]string(name='headers'),
  body: JobDispatchSubmitResponseBody(name='body'),
}

async function jobDispatchSubmit(request: JobDispatchSubmitRequest): JobDispatchSubmitResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return jobDispatchSubmitWithOptions(request, headers, runtime);
}

async function jobDispatchSubmitWithOptions(request: JobDispatchSubmitRequest, headers: map[string]string, runtime: Util.RuntimeOptions): JobDispatchSubmitResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.algoName)) {
    body.AlgoName = request.algoName;
  }
  if (!Util.isUnset(request.projectName)) {
    body.ProjectName = request.projectName;
  }
  if (!Util.isUnset(request.properties)) {
    body.Properties = request.properties;
  }
  if (!Util.isUnset(request.settings)) {
    body.Settings = request.settings;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('JobDispatchSubmit', '2020-12-03', 'HTTPS', 'POST', 'AK', `/api/v1/jobdispatch`, 'json', req, runtime);
}

model ListCodeSourcesRequest {
  displayName?: string(name='DisplayName', description='代码源显示名称，支持模糊匹配'),
  order?: string(name='Order', description='排序顺序, 枚举值 desc 或者 asc'),
  pageNumber?: int32(name='PageNumber', description='取第几页的数据'),
  pageSize?: int32(name='PageSize', description='分页大小'),
  sortBy?: string(name='SortBy', description='用于排序的字段名，可选字段名：\'DisplayName\' \'GmtCreateTime\' \'GmtModifyTime\''),
}

model ListCodeSourcesResponseBody = {
  codeSources?: [
    CodeSourceItem
  ](name='CodeSources', description='代码源配置列表'),
  requestId?: string(name='RequestId', description='请求Id'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的代码源配置的总数量'),
}

model ListCodeSourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListCodeSourcesResponseBody(name='body'),
}

async function listCodeSources(request: ListCodeSourcesRequest): ListCodeSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listCodeSourcesWithOptions(request, headers, runtime);
}

async function listCodeSourcesWithOptions(request: ListCodeSourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListCodeSourcesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.displayName)) {
    query.DisplayName = request.displayName;
  }
  if (!Util.isUnset(request.order)) {
    query.Order = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query.SortBy = request.sortBy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListCodeSources', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/codesources`, 'json', req, runtime);
}

model ListDataSourcesRequest {
  dataSourceType?: string(name='DataSourceType', description='数据源类型'),
  displayName?: string(name='DisplayName', description='数据源显示名称，支持模糊查询'),
  order?: string(name='Order', description='排序顺序'),
  pageNumber?: int32(name='PageNumber', description='查询第几页数据'),
  pageSize?: int32(name='PageSize', description='设置查询的分页大写'),
  sortBy?: string(name='SortBy', description='按返回字段排序'),
}

model ListDataSourcesResponseBody = {
  dataSources?: [
    DataSourceItem
  ](name='DataSources', description='数据源配置列表'),
  requestId?: string(name='RequestId', description='请求Id'),
  totalCount?: long(name='TotalCount', description='符合条件的数据源总数量'),
}

model ListDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataSourcesResponseBody(name='body'),
}

async function listDataSources(request: ListDataSourcesRequest): ListDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDataSourcesWithOptions(request, headers, runtime);
}

async function listDataSourcesWithOptions(request: ListDataSourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataSourcesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.dataSourceType)) {
    query.DataSourceType = request.dataSourceType;
  }
  if (!Util.isUnset(request.displayName)) {
    query.DisplayName = request.displayName;
  }
  if (!Util.isUnset(request.order)) {
    query.Order = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query.SortBy = request.sortBy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListDataSources', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/datasources`, 'json', req, runtime);
}

model ListEcsSpecsRequest {
  order?: string(name='Order', description='排序顺序'),
  pageNumber?: int32(name='PageNumber', description='查询第几页数据'),
  pageSize?: int32(name='PageSize', description='设置查询的分页大写'),
  sortBy?: string(name='SortBy', description='按返回字段排序'),
}

model ListEcsSpecsResponseBody = {
  ecsSpecs?: [
    EcsSpec
  ](name='EcsSpecs', description='ECS规格列表'),
  requestId?: string(name='RequestId', description='请求Id'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的总数量'),
}

model ListEcsSpecsResponse = {
  headers: map[string]string(name='headers'),
  body: ListEcsSpecsResponseBody(name='body'),
}

async function listEcsSpecs(request: ListEcsSpecsRequest): ListEcsSpecsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listEcsSpecsWithOptions(request, headers, runtime);
}

async function listEcsSpecsWithOptions(request: ListEcsSpecsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListEcsSpecsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.order)) {
    query.Order = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query.SortBy = request.sortBy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListEcsSpecs', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/ecsspecs`, 'json', req, runtime);
}

model ListImagesRequest {
  acceleratorType?: string(name='AcceleratorType', description='加速器类型'),
  framework?: string(name='Framework', description='镜像包含的框架类型'),
  imageProviderType?: string(name='ImageProviderType', description='镜像类型'),
  order?: string(name='Order', description='排序顺序'),
  sortBy?: string(name='SortBy', description='按返回字段排序'),
}

model ListImagesResponseBody = {
  images?: [
    ImageItem
  ](name='Images', description='镜像详情列表'),
  requestId?: string(name='RequestId', description='请求Id'),
  totalCount?: long(name='TotalCount', description='2'),
}

model ListImagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListImagesResponseBody(name='body'),
}

async function listImages(request: ListImagesRequest): ListImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listImagesWithOptions(request, headers, runtime);
}

async function listImagesWithOptions(request: ListImagesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListImagesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.acceleratorType)) {
    query.AcceleratorType = request.acceleratorType;
  }
  if (!Util.isUnset(request.framework)) {
    query.Framework = request.framework;
  }
  if (!Util.isUnset(request.imageProviderType)) {
    query.ImageProviderType = request.imageProviderType;
  }
  if (!Util.isUnset(request.order)) {
    query.Order = request.order;
  }
  if (!Util.isUnset(request.sortBy)) {
    query.SortBy = request.sortBy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListImages', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/images`, 'json', req, runtime);
}

model ListJobsRequest {
  businessUserId?: string(name='BusinessUserId', description='作业关联用户ID'),
  caller?: string(name='Caller', description='调用方'),
  displayName?: string(name='DisplayName', description='作业显示名称，支持模糊查询'),
  endTime?: string(name='EndTime', description='截止时间'),
  jobType?: string(name='JobType', description='作业类型'),
  order?: string(name='Order', description='排序顺序'),
  pageNumber?: int32(name='PageNumber', description='当前页'),
  pageSize?: int32(name='PageSize', description='每页返回的作业数'),
  pipelineId?: string(name='PipelineId', description='工作流ID'),
  resourceId?: string(name='ResourceId', description='资源组ID'),
  showOwn?: boolean(name='ShowOwn', description='是否只返回当前登录者所提交的作业'),
  sortBy?: string(name='SortBy', description='按返回字段排序'),
  startTime?: string(name='StartTime', description='起始时间'),
  status?: string(name='Status', description='作业状态'),
  tags?: map[string]string(name='Tags', description='自定义标签'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model ListJobsShrinkRequest {
  businessUserId?: string(name='BusinessUserId', description='作业关联用户ID'),
  caller?: string(name='Caller', description='调用方'),
  displayName?: string(name='DisplayName', description='作业显示名称，支持模糊查询'),
  endTime?: string(name='EndTime', description='截止时间'),
  jobType?: string(name='JobType', description='作业类型'),
  order?: string(name='Order', description='排序顺序'),
  pageNumber?: int32(name='PageNumber', description='当前页'),
  pageSize?: int32(name='PageSize', description='每页返回的作业数'),
  pipelineId?: string(name='PipelineId', description='工作流ID'),
  resourceId?: string(name='ResourceId', description='资源组ID'),
  showOwn?: boolean(name='ShowOwn', description='是否只返回当前登录者所提交的作业'),
  sortBy?: string(name='SortBy', description='按返回字段排序'),
  startTime?: string(name='StartTime', description='起始时间'),
  status?: string(name='Status', description='作业状态'),
  tagsShrink?: string(name='Tags', description='自定义标签'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model ListJobsResponseBody = {
  jobs?: [
    JobItem
  ](name='Jobs', description='作业列表'),
  requestId?: string(name='RequestId', description='请求Id'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的总作业数'),
}

model ListJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListJobsResponseBody(name='body'),
}

async function listJobs(request: ListJobsRequest): ListJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listJobsWithOptions(request, headers, runtime);
}

async function listJobsWithOptions(tmpReq: ListJobsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListJobsResponse {
  Util.validateModel(tmpReq);
  var request = new ListJobsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.businessUserId)) {
    query.BusinessUserId = request.businessUserId;
  }
  if (!Util.isUnset(request.caller)) {
    query.Caller = request.caller;
  }
  if (!Util.isUnset(request.displayName)) {
    query.DisplayName = request.displayName;
  }
  if (!Util.isUnset(request.endTime)) {
    query.EndTime = request.endTime;
  }
  if (!Util.isUnset(request.jobType)) {
    query.JobType = request.jobType;
  }
  if (!Util.isUnset(request.order)) {
    query.Order = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.pipelineId)) {
    query.PipelineId = request.pipelineId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query.ResourceId = request.resourceId;
  }
  if (!Util.isUnset(request.showOwn)) {
    query.ShowOwn = request.showOwn;
  }
  if (!Util.isUnset(request.sortBy)) {
    query.SortBy = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query.StartTime = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query.Status = request.status;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query.Tags = request.tagsShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query.WorkspaceId = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListJobs', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/jobs`, 'json', req, runtime);
}

model ListQuotasRequest {
  order?: string(name='Order', description='排序顺序'),
  pageNumber?: int32(name='PageNumber', description='当前页'),
  pageSize?: int32(name='PageSize', description='每页返回的作业数'),
  sortBy?: string(name='SortBy', description='按返回字段排序'),
}

model ListQuotasResponseBody = {
  quotas?: [
    Quota
  ](name='Quotas', description='资源配额列表'),
  requestId?: string(name='RequestId', description='请求id'),
}

model ListQuotasResponse = {
  headers: map[string]string(name='headers'),
  body: ListQuotasResponseBody(name='body'),
}

async function listQuotas(request: ListQuotasRequest): ListQuotasResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listQuotasWithOptions(request, headers, runtime);
}

async function listQuotasWithOptions(request: ListQuotasRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListQuotasResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.order)) {
    query.Order = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query.SortBy = request.sortBy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListQuotas', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/quotas`, 'json', req, runtime);
}

model ListSecurityGroupsRequest {
  pageNumber?: int32(name='PageNumber', description='取第几页的数据'),
  pageSize?: int32(name='PageSize', description='分页大小'),
  vpcId?: string(name='VpcId', description='所属Vpc'),
}

model ListSecurityGroupsResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
  securityGroups?: [ 
    {
      description?: string(name='Description', description='描述'),
      securityGroupId?: string(name='SecurityGroupId', description='安全组Id'),
      securityGroupName?: string(name='SecurityGroupName', description='安全组名称'),
      vpcId?: string(name='VpcId', description='所属VPC ID'),
    }
  ](name='SecurityGroups', description='代码源配置列表'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的代码源配置的总数量'),
}

model ListSecurityGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSecurityGroupsResponseBody(name='body'),
}

async function listSecurityGroups(request: ListSecurityGroupsRequest): ListSecurityGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSecurityGroupsWithOptions(request, headers, runtime);
}

async function listSecurityGroupsWithOptions(request: ListSecurityGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSecurityGroupsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.vpcId)) {
    query.VpcId = request.vpcId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListSecurityGroups', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/securitygroups`, 'json', req, runtime);
}

model ListSwitchesRequest {
  pageNumber?: int32(name='PageNumber', description='取第几页的数据'),
  pageSize?: int32(name='PageSize', description='分页大小'),
  vpcId?: string(name='VpcId', description='所属VPC id'),
}

model ListSwitchesResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
  switches?: [ 
    {
      cidrBlock?: string(name='CidrBlock', description='网段'),
      description?: string(name='Description', description='描述'),
      vSwitchId?: string(name='VSwitchId', description='交换机id'),
      vSwitchName?: string(name='VSwitchName', description='交换机名称'),
      vpcId?: string(name='VpcId', description='所属VPCid'),
    }
  ](name='Switches', description='代码源配置列表'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的代码源配置的总数量'),
}

model ListSwitchesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSwitchesResponseBody(name='body'),
}

async function listSwitches(request: ListSwitchesRequest): ListSwitchesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSwitchesWithOptions(request, headers, runtime);
}

async function listSwitchesWithOptions(request: ListSwitchesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSwitchesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.vpcId)) {
    query.VpcId = request.vpcId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListSwitches', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/switches`, 'json', req, runtime);
}

model ListTensorboardsRequest {
  displayName?: string(name='DisplayName', description='展示名称'),
  endTime?: string(name='EndTime', description='截止时间'),
  jobId?: string(name='JobId', description='JobId'),
  order?: string(name='Order', description='排序顺序'),
  pageNumber?: int32(name='PageNumber', description='当前页'),
  pageSize?: int32(name='PageSize', description='每页返回的作业数'),
  sortBy?: string(name='SortBy', description='按返回字段排序'),
  startTime?: string(name='StartTime', description='起始时间'),
  status?: string(name='Status', description='根据状态过滤'),
  tensorboardId?: string(name='TensorboardId', description='TensorboardId'),
  verbose?: boolean(name='Verbose', description='是否显示详情'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model ListTensorboardsResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
  tensorboards?: [
    Tensorboard
  ](name='Tensorboards', description='Tensorboard 列表'),
  totalCount?: long(name='TotalCount', description='符合条件的数据源总数量'),
}

model ListTensorboardsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTensorboardsResponseBody(name='body'),
}

async function listTensorboards(request: ListTensorboardsRequest): ListTensorboardsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTensorboardsWithOptions(request, headers, runtime);
}

async function listTensorboardsWithOptions(request: ListTensorboardsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTensorboardsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.displayName)) {
    query.DisplayName = request.displayName;
  }
  if (!Util.isUnset(request.endTime)) {
    query.EndTime = request.endTime;
  }
  if (!Util.isUnset(request.jobId)) {
    query.JobId = request.jobId;
  }
  if (!Util.isUnset(request.order)) {
    query.Order = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query.SortBy = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query.StartTime = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query.Status = request.status;
  }
  if (!Util.isUnset(request.tensorboardId)) {
    query.TensorboardId = request.tensorboardId;
  }
  if (!Util.isUnset(request.verbose)) {
    query.Verbose = request.verbose;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query.WorkspaceId = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListTensorboards', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/tensorboards`, 'json', req, runtime);
}

model ListVpcsRequest {
  pageNumber?: int32(name='PageNumber', description='取第几页的数据'),
  pageSize?: int32(name='PageSize', description='分页大小'),
}

model ListVpcsResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的代码源配置的总数量'),
  vpcs?: [ 
    {
      vpcId?: string(name='VpcId', description='vpc的id'),
      vpcName?: string(name='VpcName', description='VPC的名称。'),
    }
  ](name='Vpcs', description='代码源配置列表'),
}

model ListVpcsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcsResponseBody(name='body'),
}

async function listVpcs(request: ListVpcsRequest): ListVpcsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listVpcsWithOptions(request, headers, runtime);
}

async function listVpcsWithOptions(request: ListVpcsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListVpcsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListVpcs', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/vpcs`, 'json', req, runtime);
}

model ListWorkspacesRequest {
  needDetail?: boolean(name='NeedDetail', description='是否返回详情(Quotas, Members)'),
  order?: string(name='Order', description='排列顺序: desc 或者 asc'),
  pageNumber?: int32(name='PageNumber', description='查询第几页数据,最小值为1'),
  pageSize?: int32(name='PageSize', description='设置查询的分页大小,最小值为1'),
  sortBy?: string(name='SortBy', description='返回结果的排序字段名，枚举值'),
}

model ListWorkspacesResponseBody = {
  requestId?: string(name='RequestId', description='请求id'),
  totalCount?: long(name='TotalCount', description='结果数'),
  workspaces?: [
    Workspace
  ](name='Workspaces', description='工作空间列表'),
}

model ListWorkspacesResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkspacesResponseBody(name='body'),
}

async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listWorkspacesWithOptions(request, headers, runtime);
}

async function listWorkspacesWithOptions(request: ListWorkspacesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListWorkspacesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.needDetail)) {
    query.NeedDetail = request.needDetail;
  }
  if (!Util.isUnset(request.order)) {
    query.Order = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query.SortBy = request.sortBy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListWorkspaces', '2020-12-03', 'HTTPS', 'GET', 'AK', `/api/v1/workspaces`, 'json', req, runtime);
}

model StartTensorboardRequest {
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model StartTensorboardResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
  tensorboardId?: string(name='TensorboardId', description='Tensorboad Id'),
}

model StartTensorboardResponse = {
  headers: map[string]string(name='headers'),
  body: StartTensorboardResponseBody(name='body'),
}

async function startTensorboard(TensorboardId: string, request: StartTensorboardRequest): StartTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startTensorboardWithOptions(TensorboardId, request, headers, runtime);
}

async function startTensorboardWithOptions(TensorboardId: string, request: StartTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartTensorboardResponse {
  Util.validateModel(request);
  TensorboardId = OpenApiUtil.getEncodeParam(TensorboardId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.workspaceId)) {
    query.WorkspaceId = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('StartTensorboard', '2020-12-03', 'HTTPS', 'PUT', 'AK', `/api/v1/tensorboards/${TensorboardId}/start`, 'json', req, runtime);
}

model StopJobResponseBody = {
  jobId?: string(name='JobId', description='作业Id'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model StopJobResponse = {
  headers: map[string]string(name='headers'),
  body: StopJobResponseBody(name='body'),
}

async function stopJob(JobId: string): StopJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopJobWithOptions(JobId, headers, runtime);
}

async function stopJobWithOptions(JobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopJobResponse {
  JobId = OpenApiUtil.getEncodeParam(JobId);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  return doROARequest('StopJob', '2020-12-03', 'HTTPS', 'POST', 'AK', `/api/v1/jobs/${JobId}/stop`, 'json', req, runtime);
}

model StopTensorboardRequest {
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model StopTensorboardResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
  tensorboardId?: string(name='TensorboardId', description='Tensorboad Id'),
}

model StopTensorboardResponse = {
  headers: map[string]string(name='headers'),
  body: StopTensorboardResponseBody(name='body'),
}

async function stopTensorboard(TensorboardId: string, request: StopTensorboardRequest): StopTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopTensorboardWithOptions(TensorboardId, request, headers, runtime);
}

async function stopTensorboardWithOptions(TensorboardId: string, request: StopTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopTensorboardResponse {
  Util.validateModel(request);
  TensorboardId = OpenApiUtil.getEncodeParam(TensorboardId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.workspaceId)) {
    query.WorkspaceId = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('StopTensorboard', '2020-12-03', 'HTTPS', 'PUT', 'AK', `/api/v1/tensorboards/${TensorboardId}/stop`, 'json', req, runtime);
}

model UpdateQuotaRequest {
  quotaDetail?: QuotaDetail(name='QuotaDetail', description='资源配额参数'),
  quotaName?: string(name='QuotaName', description='资源配额名称'),
  quotaType?: string(name='QuotaType', description='资源配额类型'),
}

model UpdateQuotaResponseBody = {
  quotaId?: string(name='QuotaId', description='资源配额id'),
  requestId?: string(name='RequestId', description='请求id'),
}

model UpdateQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateQuotaResponseBody(name='body'),
}

async function updateQuota(QuotaId: string, request: UpdateQuotaRequest): UpdateQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateQuotaWithOptions(QuotaId, request, headers, runtime);
}

async function updateQuotaWithOptions(QuotaId: string, request: UpdateQuotaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateQuotaResponse {
  Util.validateModel(request);
  QuotaId = OpenApiUtil.getEncodeParam(QuotaId);
  var body : map[string]any= {};
  if (!Util.isUnset(request.quotaDetail)) {
    body.QuotaDetail = request.quotaDetail;
  }
  if (!Util.isUnset(request.quotaName)) {
    body.QuotaName = request.quotaName;
  }
  if (!Util.isUnset(request.quotaType)) {
    body.QuotaType = request.quotaType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateQuota', '2020-12-03', 'HTTPS', 'PUT', 'AK', `/api/v1/quotas/${QuotaId}`, 'json', req, runtime);
}

model UpdateTensorboardRequest {
  maxRunningTimeMinutes?: long(name='MaxRunningTimeMinutes', description='MaxRunningTimeMinutes'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID'),
}

model UpdateTensorboardResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
  tensorboardId?: string(name='TensorboardId', description='Tensorboad Id'),
}

model UpdateTensorboardResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTensorboardResponseBody(name='body'),
}

async function updateTensorboard(TensorboardId: string, request: UpdateTensorboardRequest): UpdateTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateTensorboardWithOptions(TensorboardId, request, headers, runtime);
}

async function updateTensorboardWithOptions(TensorboardId: string, request: UpdateTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTensorboardResponse {
  Util.validateModel(request);
  TensorboardId = OpenApiUtil.getEncodeParam(TensorboardId);
  var query : map[string]any= {};
  if (!Util.isUnset(request.maxRunningTimeMinutes)) {
    query.MaxRunningTimeMinutes = request.maxRunningTimeMinutes;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query.WorkspaceId = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('UpdateTensorboard', '2020-12-03', 'HTTPS', 'PUT', 'AK', `/api/v1/tensorboards/${TensorboardId}`, 'json', req, runtime);
}

