/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'pai-dlc.aliyuncs.com',
    ap-northeast-2-pop = 'pai-dlc.aliyuncs.com',
    ap-south-1 = 'pai-dlc.aliyuncs.com',
    ap-southeast-2 = 'pai-dlc.aliyuncs.com',
    ap-southeast-3 = 'pai-dlc.aliyuncs.com',
    ap-southeast-5 = 'pai-dlc.aliyuncs.com',
    cn-beijing-finance-1 = 'pai-dlc.aliyuncs.com',
    cn-beijing-finance-pop = 'pai-dlc.aliyuncs.com',
    cn-beijing-gov-1 = 'pai-dlc.aliyuncs.com',
    cn-beijing-nu16-b01 = 'pai-dlc.aliyuncs.com',
    cn-chengdu = 'pai-dlc.aliyuncs.com',
    cn-edge-1 = 'pai-dlc.aliyuncs.com',
    cn-fujian = 'pai-dlc.aliyuncs.com',
    cn-haidian-cm12-c01 = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-finance = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-test-306 = 'pai-dlc.aliyuncs.com',
    cn-hongkong-finance-pop = 'pai-dlc.aliyuncs.com',
    cn-huhehaote = 'pai-dlc.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'pai-dlc.aliyuncs.com',
    cn-north-2-gov-1 = 'pai-dlc.aliyuncs.com',
    cn-qingdao = 'pai-dlc.aliyuncs.com',
    cn-qingdao-nebula = 'pai-dlc.aliyuncs.com',
    cn-shanghai-et15-b01 = 'pai-dlc.aliyuncs.com',
    cn-shanghai-et2-b01 = 'pai-dlc.aliyuncs.com',
    cn-shanghai-inner = 'pai-dlc.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'pai-dlc.aliyuncs.com',
    cn-shenzhen-finance-1 = 'pai-dlc.aliyuncs.com',
    cn-shenzhen-inner = 'pai-dlc.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'pai-dlc.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'pai-dlc.aliyuncs.com',
    cn-wuhan = 'pai-dlc.aliyuncs.com',
    cn-wulanchabu = 'pai-dlc.aliyuncs.com',
    cn-yushanfang = 'pai-dlc.aliyuncs.com',
    cn-zhangbei = 'pai-dlc.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'pai-dlc.aliyuncs.com',
    cn-zhangjiakou = 'pai-dlc.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'pai-dlc.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'pai-dlc.aliyuncs.com',
    eu-west-1 = 'pai-dlc.aliyuncs.com',
    eu-west-1-oxs = 'pai-dlc.aliyuncs.com',
    me-east-1 = 'pai-dlc.aliyuncs.com',
    rus-west-1-pop = 'pai-dlc.aliyuncs.com',
    us-east-1 = 'pai-dlc.aliyuncs.com',
    us-west-1 = 'pai-dlc.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('pai-dlc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AIMasterMessage {
  extended?: string(name='Extended'),
  jobRestartCount?: int32(name='JobRestartCount'),
  messageContent?: string(name='MessageContent'),
  messageEvent?: string(name='MessageEvent'),
  messageVersion?: int32(name='MessageVersion'),
  restartType?: string(name='RestartType'),
}

model AliyunAccounts {
  aliyunUid?: string(name='AliyunUid'),
  employeeId?: string(name='EmployeeId'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifyTime?: string(name='GmtModifyTime'),
}

model AssignNodeSpec {
  antiAffinityNodeNames?: string(name='AntiAffinityNodeNames', example='lingjxxxxxxxx'),
  enableAssignNode?: boolean(name='EnableAssignNode', example='true'),
  nodeNames?: string(name='NodeNames', example='lingjxxxxxxxx'),
}

model AssumeUserInfo {
  accessKeyId?: string(name='AccessKeyId'),
  id?: string(name='Id'),
  securityToken?: string(name='SecurityToken'),
  type?: string(name='Type'),
}

model CodeSourceItem {
  codeBranch?: string(name='CodeBranch', example='master'),
  codeCommit?: string(name='CodeCommit', example='44da1*******'),
  codeRepo?: string(name='CodeRepo', example='https://code.aliyun.com/pai-dlc/examples.git'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken'),
  codeRepoUserName?: string(name='CodeRepoUserName', example='user'),
  codeSourceId?: string(name='CodeSourceId', example='code-20210111103721-85qz*****'),
  description?: string(name='Description', example='code source of dlc examples'),
  displayName?: string(name='DisplayName', example='MyCodeSourceName1'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-18T12:52:15Z'),
  gmtModifyTime?: string(name='GmtModifyTime', example='2021-01-18T12:52:15Z'),
  userId?: string(name='UserId', example='115**********'),
}

model ContainerSpec {
  args?: [ string ](name='Args'),
  command?: [ string ](name='Command'),
  env?: [
    EnvVar
  ](name='Env'),
  image?: string(name='Image', example='registry.cn-hangzhou.aliyuncs.com/pai-dlc/curl:v1.0.0'),
  name?: string(name='Name', example='data-init'),
  resources?: ResourceRequirements(name='Resources'),
  workingDir?: string(name='WorkingDir', example='/root'),
}

model CredentialConfig {
  aliyunEnvRoleKey?: string(name='AliyunEnvRoleKey'),
  credentialConfigItems?: [
    CredentialConfigItem
  ](name='CredentialConfigItems'),
  enableCredentialInject?: boolean(name='EnableCredentialInject'),
}

model CredentialConfigItem {
  key?: string(name='Key'),
  roles?: [
    CredentialRole
  ](name='Roles', nullable=true),
  type?: string(name='Type'),
}

model CredentialRole {
  assumeRoleFor?: string(name='AssumeRoleFor'),
  assumeUserInfo?: AssumeUserInfo(name='AssumeUserInfo'),
  policy?: string(name='Policy'),
  roleArn?: string(name='RoleArn'),
  roleType?: string(name='RoleType'),
}

model DataSourceItem {
  dataSourceId?: string(name='DataSourceId', example='data-20210114104214-vf9lowjt3pso'),
  dataSourceType?: string(name='DataSourceType', example='nas'),
  description?: string(name='Description', example='data source of dlc examples'),
  displayName?: string(name='DisplayName', example='nas-data'),
  endpoint?: string(name='Endpoint', example='oss-cn-beijing-internal.aliyuncs.com'),
  fileSystemId?: string(name='FileSystemId', example='1ca404****'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:35:00Z'),
  gmtModifyTime?: string(name='GmtModifyTime', example='2021-01-12T14:36:00Z'),
  mountPath?: string(name='MountPath', example='/root/data/'),
  options?: string(name='Options', example='{"key": "value"}'),
  path?: string(name='Path', example='oss://mybucket/path/to/dir'),
  userId?: string(name='UserId', example='123456789'),
}

model DebuggerConfig {
  content?: string(name='Content', example='{\\"description\\":\\"这是一个新的pytorchjob模板\\"}'),
  debuggerConfigId?: string(name='DebuggerConfigId', example='dc-vf9lowjt3pso'),
  description?: string(name='Description', example='这是一个Pytorch的基础配置模板'),
  displayName?: string(name='DisplayName', example='Pytorch Experiment Config'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:35:00Z'),
  gmtModifyTime?: string(name='GmtModifyTime', example='2021-01-12T14:36:00Z'),
}

model DebuggerJob {
  debuggerJobId?: string(name='DebuggerJobId', example='dlc20210126170216-mtl37ge7gkvdz'),
  displayName?: string(name='DisplayName', example='dlc debugger test'),
  duration?: string(name='Duration', example='2932'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:35:00Z'),
  gmtFailedTime?: string(name='GmtFailedTime'),
  gmtFinishTime?: string(name='GmtFinishTime'),
  gmtRunningTime?: string(name='GmtRunningTime'),
  gmtStoppedTime?: string(name='GmtStoppedTime'),
  gmtSubmittedTime?: string(name='GmtSubmittedTime'),
  gmtSucceedTime?: string(name='GmtSucceedTime'),
  status?: string(name='Status', example='Running'),
  userId?: string(name='UserId', example='12344556'),
  workspaceId?: string(name='WorkspaceId', example='workspace01'),
  workspaceName?: string(name='WorkspaceName', example='public'),
}

model DebuggerJobIssue {
  debuggerJobIssue?: string(name='DebuggerJobIssue', example='{"Name": "CPUBottleneck",  "Triggered": 10, "Violations": 2,  "Details": "{}"}'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:35:00Z'),
  jobDebuggerIssueId?: string(name='JobDebuggerIssueId', example='de-826ca1bcfba30'),
  jobId?: string(name='JobId', example='dlc-20210126170216-mtl37ge7gkvdz'),
  reasonCode?: string(name='ReasonCode', example='1002300'),
  reasonMessage?: string(name='ReasonMessage', example='GPU利用率低'),
  ruleName?: string(name='RuleName', example='ProfileReport'),
}

model DebuggerResult {
  debuggerConfigContent?: string(name='DebuggerConfigContent', example='{\\"description\\":\\"这是一个新的pytorchjob模板\\"}'),
  debuggerJobIssues?: string(name='DebuggerJobIssues', example='{ "ProfileReport": { "Name": "CPUBottleneck","Triggered": 10,"Violations": 2,"Details": "{}"}, "LowCPU": { "Name": "CPUBottleneck","Triggered": 10,"Violations": 2,"Details": "{}"}}'),
  debuggerJobStatus?: string(name='DebuggerJobStatus', example='{"Running": 1, "Failed": 1, "Succeeded": 2}'),
  debuggerReportURL?: string(name='DebuggerReportURL', example='http://xxx.com/debug/report/download/new_xxxx.html'),
  jobDisplayName?: string(name='JobDisplayName', example='dlc debugger test'),
  jobId?: string(name='JobId', example='dlc-20210126170216-mtl37ge7gkvdz'),
  jobUserId?: string(name='JobUserId', example='12344556'),
}

model EcsSpec {
  acceleratorType?: string(name='AcceleratorType', example='GPU'),
  cpu?: int32(name='Cpu', example='12'),
  defaultGPUDriver?: string(name='DefaultGPUDriver', example='470.199.02'),
  gpu?: int32(name='Gpu', example='1'),
  gpuType?: string(name='GpuType', example='NVIDIA v100'),
  instanceType?: string(name='InstanceType', example='ecs.gn6e-c12g1.3xlarge'),
  isAvailable?: boolean(name='IsAvailable', example='true'),
  memory?: int32(name='Memory', example='92'),
  nonProtectSpotDiscount?: float(name='NonProtectSpotDiscount', example='0.1'),
  paymentTypes?: [ string ](name='PaymentTypes'),
  resourceType?: string(name='ResourceType', example='ECS'),
  spotStockStatus?: string(name='SpotStockStatus', example='WithStock'),
  supportedGPUDrivers?: [ string ](name='SupportedGPUDrivers'),
}

model EnvVar {
  name?: string(name='Name', example='ENABLE_DEBUG'),
  value?: string(name='Value', example='true'),
}

model EventInfo {
  content?: string(name='Content'),
  id?: string(name='Id'),
  podId?: string(name='PodId'),
  podUid?: string(name='PodUid'),
  time?: string(name='Time'),
}

model ExtraPodSpec {
  initContainers?: [
    ContainerSpec
  ](name='InitContainers'),
  lifecycle?: Lifecycle(name='Lifecycle'),
  podAnnotations?: map[string]string(name='PodAnnotations'),
  podLabels?: map[string]string(name='PodLabels'),
  sharedVolumeMountPaths?: [ string ](name='SharedVolumeMountPaths'),
  sideCarContainers?: [
    ContainerSpec
  ](name='SideCarContainers'),
}

model FreeResourceClusterControlItem {
  clusterID?: string(name='ClusterID'),
  clusterName?: string(name='ClusterName'),
  crossClusters?: boolean(name='CrossClusters'),
  enableFreeResource?: boolean(name='EnableFreeResource'),
  freeResourceClusterControlId?: string(name='FreeResourceClusterControlId', example='frcc-whateversth'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifyTime?: string(name='GmtModifyTime'),
  regionID?: string(name='RegionID'),
}

model FreeResourceDetail {
  amount?: int32(name='Amount', example='2'),
  resourceType?: string(name='ResourceType', example='CPU'),
}

model FreeResourceItem {
  availableNumber?: long(name='AvailableNumber', example='2'),
  clusterID?: string(name='ClusterID'),
  clusterName?: string(name='ClusterName'),
  freeResourceId?: string(name='FreeResourceId', example='freeres-whateversth'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-18T12:52:15Z'),
  gmtModifyTime?: string(name='GmtModifyTime', example='2021-01-18T12:52:15Z'),
  regionID?: string(name='RegionID', example='inner'),
  resourceType?: string(name='ResourceType', example='cpu'),
}

model GPUDetail {
  GPU?: string(name='GPU'),
  GPUType?: string(name='GPUType', example='Tesla-V100-32G'),
  GPUTypeFullName?: string(name='GPUTypeFullName', example='nvidia.com/gpu-tesla-v100-sxm2-16gb'),
}

model ImageConfig {
  auth?: string(name='Auth'),
  dockerRegistry?: string(name='DockerRegistry', example='registry.cn-hangzhou.aliyuncs.com'),
  password?: string(name='Password'),
  username?: string(name='Username'),
}

model ImageItem {
  acceleratorType?: string(name='AcceleratorType', example='gpu'),
  authorId?: string(name='AuthorId', example='ken'),
  framework?: string(name='Framework', example='PyTorchJob'),
  imageProviderType?: string(name='ImageProviderType', example='Community'),
  imageTag?: string(name='ImageTag', example='tensorflow-training:2.3-cpu-py36-ubuntu18.04'),
  imageUrl?: string(name='ImageUrl', example='registry.cn-beijing.aliyuncs.com/pai-dlc/tensorflow-training:2.3-cpu-py36-ubuntu18.04'),
  imageUrlVpc?: string(name='ImageUrlVpc', example='registry-vpc.cn-beijing.aliyuncs.com/pai-dlc/tensorflow-training:2.3-cpu-py36-ubuntu18.04'),
}

model JobDebuggerConfig {
  debuggerConfigContent?: string(name='DebuggerConfigContent'),
  debuggerConfigId?: string(name='DebuggerConfigId'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  jobId?: string(name='JobId'),
}

model JobElasticSpec {
  AIMasterDockerImage?: string(name='AIMasterDockerImage'),
  AIMasterType?: string(name='AIMasterType'),
  EDPMaxParallelism?: int32(name='EDPMaxParallelism', example='16'),
  EDPMinParallelism?: int32(name='EDPMinParallelism', example='8'),
  elasticStrategy?: string(name='ElasticStrategy'),
  enableAIMaster?: boolean(name='EnableAIMaster'),
  enableEDP?: boolean(name='EnableEDP', example='true'),
  enableElasticTraining?: boolean(name='EnableElasticTraining', example='true'),
  enablePsJobElasticPS?: boolean(name='EnablePsJobElasticPS', example='true'),
  enablePsJobElasticWorker?: boolean(name='EnablePsJobElasticWorker'),
  enablePsResourceEstimate?: boolean(name='EnablePsResourceEstimate', example='true'),
  maxParallelism?: int32(name='MaxParallelism', example='8'),
  minParallelism?: int32(name='MinParallelism', example='1'),
  PSMaxParallelism?: int32(name='PSMaxParallelism', example='10'),
  PSMinParallelism?: int32(name='PSMinParallelism', example='4'),
}

model JobItem {
  accessibility?: string(name='Accessibility', example='PUBLIC'),
  clusterId?: string(name='ClusterId'),
  codeSource?: {
    branch?: string(name='Branch', example='master'),
    codeSourceId?: string(name='CodeSourceId', example='code-20210111103721-85qz78ia96lu'),
    commit?: string(name='Commit', example='44da109b59f8596152987eaa8f3b2487bb72ea63'),
    mountPath?: string(name='MountPath', example='/mnt/data'),
  }(name='CodeSource'),
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  dataSources?: [ 
    {
      dataSourceId?: string(name='DataSourceId', example='data-20210114104214-vf9lowjt3pso'),
      mountPath?: string(name='MountPath', example='/mnt/data'),
    }
  ](name='DataSources'),
  displayName?: string(name='DisplayName', example='tf-mnist-test'),
  duration?: long(name='Duration', example='3602'),
  elasticSpec?: JobElasticSpec(name='ElasticSpec'),
  enablePreemptibleJob?: boolean(name='EnablePreemptibleJob', example='false'),
  enabledDebugger?: boolean(name='EnabledDebugger', example='false'),
  envs?: map[string]string(name='Envs'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:35:01Z'),
  gmtFailedTime?: string(name='GmtFailedTime', example='2021-01-12T14:35:01Z'),
  gmtFinishTime?: string(name='GmtFinishTime', example='2021-01-12T15:36:08Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2021-01-12T15:36:08Z'),
  gmtRunningTime?: string(name='GmtRunningTime', example='2021-01-12T14:35:01Z'),
  gmtStoppedTime?: string(name='GmtStoppedTime', example='2021-01-12T14:35:01Z'),
  gmtSubmittedTime?: string(name='GmtSubmittedTime', example='2021-01-12T14:35:01Z'),
  gmtSuccessedTime?: string(name='GmtSuccessedTime', example='2021-01-12T14:35:01Z'),
  isDeleted?: boolean(name='IsDeleted', example='false'),
  jobId?: string(name='JobId', example='dlc-20210126170216-mtl37ge7gkvdz'),
  jobMaxRunningTimeMinutes?: long(name='JobMaxRunningTimeMinutes', example='1'),
  jobSpecs?: [
    JobSpec
  ](name='JobSpecs'),
  jobType?: string(name='JobType', example='TFJob'),
  nodeCount?: string(name='NodeCount', example='1'),
  nodeNames?: [ string ](name='NodeNames'),
  pods?: [
    PodItem
  ](name='Pods'),
  priority?: int32(name='Priority', example='1'),
  reasonCode?: string(name='ReasonCode', example='JobStoppedByUser'),
  reasonMessage?: string(name='ReasonMessage', example='Job is stopped by user.'),
  requestCPU?: long(name='RequestCPU', example='1'),
  requestGPU?: string(name='RequestGPU', example='1'),
  requestMemory?: string(name='RequestMemory', example='1Gi'),
  resourceId?: string(name='ResourceId', example='dlc-quota'),
  resourceLevel?: string(name='ResourceLevel', example='L0'),
  resourceName?: string(name='ResourceName', example='my_resource_group'),
  resourceQuotaName?: string(name='ResourceQuotaName', example='test'),
  resourceType?: string(name='ResourceType', example='ECS'),
  restartTimes?: string(name='RestartTimes', example='1'),
  settings?: JobSettings(name='Settings'),
  status?: string(name='Status', example='Stopped'),
  statusHistory?: [
    StatusTransitionItem
  ](name='StatusHistory'),
  subStatus?: string(name='SubStatus', example='Restarting'),
  systemEnvs?: map[string]string(name='SystemEnvs'),
  tenantId?: string(name='TenantId'),
  thirdpartyLibDir?: string(name='ThirdpartyLibDir', example='/root/code/'),
  thirdpartyLibs?: [ string ](name='ThirdpartyLibs'),
  useOversoldResource?: boolean(name='UseOversoldResource', example='false'),
  userCommand?: string(name='UserCommand', example='python /root/code/mnist.py'),
  userId?: string(name='UserId', example='123456789'),
  userScript?: string(name='UserScript', example='ls'),
  userVpc?: string(name='UserVpc', example='vpc-1'),
  username?: string(name='Username', example='pai-dlc-role'),
  workingDir?: string(name='WorkingDir', example='/mnt/data'),
  workspaceId?: string(name='WorkspaceId', example='268'),
  workspaceName?: string(name='WorkspaceName', example='dlc-workspace'),
}

model JobSettings {
  advancedSettings?: map[string]any(name='AdvancedSettings'),
  businessUserId?: string(name='BusinessUserId', example='166924'),
  caller?: string(name='Caller', example='SilkFlow'),
  disableEcsStockCheck?: boolean(name='DisableEcsStockCheck', example='false'),
  driver?: string(name='Driver', example='535.54.03'),
  enableErrorMonitoringInAIMaster?: boolean(name='EnableErrorMonitoringInAIMaster', example='false'),
  enableOssAppend?: boolean(name='EnableOssAppend', example='true'),
  enableRDMA?: boolean(name='EnableRDMA', example='true'),
  enableSanityCheck?: boolean(name='EnableSanityCheck', example='true'),
  enableTideResource?: boolean(name='EnableTideResource', example='true'),
  errorMonitoringArgs?: string(name='ErrorMonitoringArgs', example='--enable-log-hang-detection true'),
  jobReservedMinutes?: int32(name='JobReservedMinutes', example='30'),
  jobReservedPolicy?: string(name='JobReservedPolicy', example='Always'),
  oversoldType?: string(name='OversoldType', example='AcceptQuotaOverSold'),
  pipelineId?: string(name='PipelineId', example='pid-123456'),
  sanityCheckArgs?: string(name='SanityCheckArgs', example='--sanity-check-timing=AfterJobFaultTolerant --sanity-check-timeout-ops=MarkJobFai'),
  tags?: map[string]string(name='Tags'),
}

model JobSpec {
  assignNodeSpec?: AssignNodeSpec(name='AssignNodeSpec'),
  ecsSpec?: string(name='EcsSpec', example='ecs.c6.large'),
  extraPodSpec?: ExtraPodSpec(name='ExtraPodSpec'),
  image?: string(name='Image', example='registry.cn-hangzhou.aliyuncs.com/pai-dlc/tensorflow-training:1.12.2PAI-cpu-py27-ubuntu16.04'),
  imageConfig?: ImageConfig(name='ImageConfig'),
  podCount?: long(name='PodCount', example='1'),
  resourceConfig?: ResourceConfig(name='ResourceConfig'),
  spotSpec?: SpotSpec(name='SpotSpec'),
  type?: string(name='Type', example='Worker'),
  useSpotInstance?: boolean(name='UseSpotInstance', example='false'),
}

model Lifecycle {
  postStart?: {
    exec?: {
      command?: [ string ](name='Command'),
    }(name='Exec'),
  }(name='PostStart'),
  preStop?: {
    exec?: {
      command?: [ string ](name='Command'),
    }(name='Exec'),
  }(name='PreStop'),
}

model LogInfo {
  content?: string(name='Content'),
  id?: string(name='Id'),
  podId?: string(name='PodId'),
  podUid?: string(name='PodUid'),
  source?: string(name='Source', example='stderr, stdout'),
  time?: string(name='Time'),
}

model Member {
  memberId?: string(name='MemberId', example='ken_12345'),
  memberType?: string(name='MemberType', example='WorkspaceAdmin'),
}

model Metric {
  time?: long(name='Time', example='1616987726587'),
  value?: float(name='Value', example='23.45'),
}

model NodeMetric {
  metrics?: [
    Metric
  ](name='Metrics'),
  nodeName?: string(name='NodeName', example='asi_xxx'),
}

model PodItem {
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:36:01Z'),
  gmtFinishTime?: string(name='GmtFinishTime', example='2021-01-12T15:36:05Z'),
  gmtStartTime?: string(name='GmtStartTime', example='2021-01-12T14:36:05Z'),
  historyPods?: [
    PodItem
  ](name='HistoryPods'),
  ip?: string(name='Ip', example='10.0.1.2'),
  podId?: string(name='PodId', example='dlc-20210126170216-mtl37ge7gkvdz-worker-0'),
  podUid?: string(name='PodUid', example='fe846462-af2c-4521-bd6f-96787a57591d'),
  status?: string(name='Status', example='Stopped'),
  type?: string(name='Type', example='Worker'),
}

model PodMetric {
  metrics?: [
    Metric
  ](name='Metrics'),
  podId?: string(name='PodId', example='dlc-20210329110128-746bf7cl47pr8-worker-0'),
}

model Quota {
  clusterId?: string(name='ClusterId'),
  clusterName?: string(name='ClusterName'),
  quotaConfig?: QuotaConfig(name='QuotaConfig'),
  quotaId?: string(name='QuotaId', example='quotamtl37ge7gkvdz'),
  quotaName?: string(name='QuotaName', example='dlc-quota'),
  quotaType?: string(name='QuotaType', example='asiquota'),
  totalQuota?: QuotaDetail(name='TotalQuota'),
  totalTideQuota?: QuotaDetail(name='TotalTideQuota'),
  usedQuota?: QuotaDetail(name='UsedQuota'),
  usedTideQuota?: QuotaDetail(name='UsedTideQuota'),
}

model QuotaConfig {
  allowedMaxPriority?: int32(name='AllowedMaxPriority'),
  enableDLC?: boolean(name='EnableDLC'),
  enableDSW?: boolean(name='EnableDSW'),
  enableTideResource?: boolean(name='EnableTideResource'),
  resourceLevel?: string(name='ResourceLevel'),
}

model QuotaDetail {
  CPU?: string(name='CPU', example='2'),
  GPU?: string(name='GPU', example='5'),
  GPUDetails?: [
    GPUDetail
  ](name='GPUDetails'),
  GPUType?: string(name='GPUType', example='Tesla-V100'),
  GPUTypeFullName?: string(name='GPUTypeFullName', example='nvidia.com/gpu'),
  memory?: string(name='Memory', example='10Gi'),
}

model ResourceConfig {
  CPU?: string(name='CPU', example='10'),
  GPU?: string(name='GPU', example='3'),
  GPUType?: string(name='GPUType', example='Tesla-V100-16G'),
  memory?: string(name='Memory', example='10Gi'),
  sharedMemory?: string(name='SharedMemory', example='5Gi'),
}

model ResourceRequirements {
  limits?: map[string]string(name='Limits'),
  requests?: map[string]string(name='Requests'),
}

model Resources {
  CPU?: string(name='CPU', example='10'),
  GPU?: string(name='GPU', example='8'),
  memory?: string(name='Memory', example='1024（单位GB）'),
}

model SanityCheckResultItem {
  checkNumber?: int32(name='CheckNumber', example='1'),
  finishedAt?: string(name='FinishedAt', example='”2023-11-30T16:47:30.378817+08:00"'),
  message?: string(name='Message'),
  phase?: string(name='Phase', example='CheckInit'),
  startedAt?: string(name='StartedAt', example='”2023-11-30T16:47:30.343005+08:00“'),
  status?: string(name='Status', example='Succeeded'),
}

model SmartCache {
  cacheWorkerNum?: long(name='CacheWorkerNum', example='10'),
  cacheWorkerSize?: long(name='CacheWorkerSize', example='100'),
  description?: string(name='Description', example='test'),
  displayName?: string(name='DisplayName', example='test'),
  duration?: string(name='Duration', example='123456'),
  endpoint?: string(name='Endpoint', example='oss-cn-beijing-internal.aliyuncs.com'),
  fileSystemId?: string(name='FileSystemId', example='1ca404****'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:36:01Z'),
  gmtModifyTime?: string(name='GmtModifyTime', example='2021-01-12T23:36:01Z'),
  mountPath?: string(name='MountPath', example='/root/data/'),
  options?: string(name='Options', example='{"num_threads": 32}'),
  path?: string(name='Path', example='oss://buc/path/to/dir'),
  smartCacheId?: string(name='SmartCacheId', example='smartcache-20210114104214-vf9lowjt3pso'),
  status?: string(name='Status', example='Running'),
  type?: string(name='Type', example='oss'),
  userId?: string(name='UserId', example='189xxx'),
}

model SpotSpec {
  spotDiscountLimit?: float(name='SpotDiscountLimit'),
  spotStrategy?: string(name='SpotStrategy'),
}

model StatusTransitionItem {
  endTime?: string(name='EndTime'),
  reasonCode?: string(name='ReasonCode'),
  reasonMessage?: string(name='ReasonMessage'),
  startTime?: string(name='StartTime'),
  status?: string(name='Status'),
}

model Tensorboard {
  accessibility?: string(name='Accessibility'),
  cpu?: long(name='Cpu'),
  dataSourceId?: string(name='DataSourceId', example='datasource-test'),
  dataSourceType?: string(name='DataSourceType'),
  displayName?: string(name='DisplayName', example='test'),
  duration?: string(name='Duration', example='1234567'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:35:00Z'),
  gmtFinishTime?: string(name='GmtFinishTime', example='2021-01-12T14:36:00Z'),
  gmtModifyTime?: string(name='GmtModifyTime', example='2021-01-12T14:36:00Z'),
  jobId?: string(name='JobId', example='dlc-20210114104214-vf9lowjt3pso'),
  maxRunningTimeMinutes?: long(name='MaxRunningTimeMinutes'),
  memory?: long(name='Memory'),
  options?: string(name='Options'),
  priority?: string(name='Priority'),
  quotaId?: string(name='QuotaId'),
  quotaName?: string(name='QuotaName'),
  reasonCode?: string(name='ReasonCode', example='Delete by user'),
  reasonMessage?: string(name='ReasonMessage', example='Tensorboard is deleted'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  status?: string(name='Status', example='running'),
  summaryPath?: string(name='SummaryPath', example='/root/data'),
  summaryRelativePath?: string(name='SummaryRelativePath'),
  tensorboardDataSources?: [
    TensorboardDataSourceSpec
  ](name='TensorboardDataSources'),
  tensorboardId?: string(name='TensorboardId', example='tensorboard-xxx'),
  tensorboardSpec?: TensorboardSpec(name='TensorboardSpec'),
  tensorboardUrl?: string(name='TensorboardUrl', example='http://xxxxxx'),
  token?: string(name='Token'),
  userId?: string(name='UserId', example='lycxxxxx'),
  username?: string(name='Username', example='tensorboard.pai'),
  workspaceId?: string(name='WorkspaceId'),
}

model TensorboardDataSourceSpec {
  dataSourceType?: string(name='DataSourceType', example='OSS'),
  directoryName?: string(name='DirectoryName', example='dlcJobName'),
  fullSummaryPath?: string(name='FullSummaryPath', example='oss://xxxxx/tensorboard/run1'),
  id?: string(name='Id', example='d-vf2fdhxxxxxx'),
  name?: string(name='Name', example='dlcJobName'),
  sourceType?: string(name='SourceType', example='datasource'),
  summaryPath?: string(name='SummaryPath', example='/tensorboard/run1'),
  uri?: string(name='Uri', example='oss://.oss-cn-shanghai-finance-1.aliyuncs.com/'),
}

model TensorboardSpec {
  ecsType?: string(name='EcsType', example='ecs.g6.large'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-xxxxx'),
  switchId?: string(name='SwitchId', example='vsw-xxxx'),
  vpcId?: string(name='VpcId', example='vpc-xxxx'),
}

model Workspace {
  creator?: string(name='Creator', example='ken'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:36:01Z'),
  gmtModifyTime?: string(name='GmtModifyTime', example='2021-01-12T14:36:01Z'),
  members?: [
    Member
  ](name='Members'),
  quotas?: [
    Quota
  ](name='Quotas'),
  totalResources?: Resources(name='TotalResources'),
  workspaceAdmins?: [
    Member
  ](name='WorkspaceAdmins'),
  workspaceId?: string(name='WorkspaceId', example='ws-20210126170216-mtl37ge7gkvdz'),
  workspaceName?: string(name='WorkspaceName', example='dlc-workspace'),
}

model CreateJobRequest {
  accessibility?: string(name='Accessibility'),
  codeSource?: {
    branch?: string(name='Branch', example='master'),
    codeSourceId?: string(name='CodeSourceId', example='code-20210111103721-xxxxxxx'),
    commit?: string(name='Commit', example='44da109b5******'),
    mountPath?: string(name='MountPath', example='/root/data'),
  }(name='CodeSource'),
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  dataSources?: [ 
    {
      dataSourceId?: string(name='DataSourceId', example='d-cn9dl*******'),
      mountPath?: string(name='MountPath', example='/root/data'),
      options?: string(name='Options'),
      uri?: string(name='Uri', example='oss://bucket.oss-cn-hangzhou-internal.aliyuncs.com/path/'),
    }
  ](name='DataSources'),
  debuggerConfigContent?: string(name='DebuggerConfigContent', example='“”'),
  displayName?: string(name='DisplayName', description='This parameter is required.', example='tf-mnist-test'),
  elasticSpec?: JobElasticSpec(name='ElasticSpec'),
  envs?: map[string]string(name='Envs'),
  jobMaxRunningTimeMinutes?: long(name='JobMaxRunningTimeMinutes', example='1024'),
  jobSpecs?: [
    JobSpec
  ](name='JobSpecs', description='This parameter is required.'),
  jobType?: string(name='JobType', description='This parameter is required.', example='TFJob'),
  options?: string(name='Options', example='key1=value1,key2=value2'),
  priority?: int32(name='Priority', example='8'),
  resourceId?: string(name='ResourceId', example='rs-xxx'),
  settings?: JobSettings(name='Settings'),
  successPolicy?: string(name='SuccessPolicy', example='AllWorkers'),
  thirdpartyLibDir?: string(name='ThirdpartyLibDir', example='/root/code/'),
  thirdpartyLibs?: [ string ](name='ThirdpartyLibs'),
  userCommand?: string(name='UserCommand', description='This parameter is required.', example='python /root/code/mnist.py'),
  userVpc?: {
    defaultRoute?: string(name='DefaultRoute'),
    extendedCIDRs?: [ string ](name='ExtendedCIDRs'),
    securityGroupId?: string(name='SecurityGroupId', example='sg-abcdef****'),
    switchId?: string(name='SwitchId', example='vs-abcdef****'),
    vpcId?: string(name='VpcId', example='vpc-abcdef****'),
  }(name='UserVpc'),
  workspaceId?: string(name='WorkspaceId', example='ws-20210126170216-xxxxxxx'),
}

model CreateJobResponseBody = {
  jobId?: string(name='JobId', example='dlc7*******'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-xxxxxxx'),
}

model CreateJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateJobResponseBody(name='body'),
}

/**
 * @summary 创建一个DLC作业
 *
 * @param request CreateJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateJobResponse
 */
async function createJobWithOptions(request: CreateJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.codeSource)) {
    body['CodeSource'] = request.codeSource;
  }
  if (!Util.isUnset(request.credentialConfig)) {
    body['CredentialConfig'] = request.credentialConfig;
  }
  if (!Util.isUnset(request.dataSources)) {
    body['DataSources'] = request.dataSources;
  }
  if (!Util.isUnset(request.debuggerConfigContent)) {
    body['DebuggerConfigContent'] = request.debuggerConfigContent;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.elasticSpec)) {
    body['ElasticSpec'] = request.elasticSpec;
  }
  if (!Util.isUnset(request.envs)) {
    body['Envs'] = request.envs;
  }
  if (!Util.isUnset(request.jobMaxRunningTimeMinutes)) {
    body['JobMaxRunningTimeMinutes'] = request.jobMaxRunningTimeMinutes;
  }
  if (!Util.isUnset(request.jobSpecs)) {
    body['JobSpecs'] = request.jobSpecs;
  }
  if (!Util.isUnset(request.jobType)) {
    body['JobType'] = request.jobType;
  }
  if (!Util.isUnset(request.options)) {
    body['Options'] = request.options;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.resourceId)) {
    body['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.settings)) {
    body['Settings'] = request.settings;
  }
  if (!Util.isUnset(request.successPolicy)) {
    body['SuccessPolicy'] = request.successPolicy;
  }
  if (!Util.isUnset(request.thirdpartyLibDir)) {
    body['ThirdpartyLibDir'] = request.thirdpartyLibDir;
  }
  if (!Util.isUnset(request.thirdpartyLibs)) {
    body['ThirdpartyLibs'] = request.thirdpartyLibs;
  }
  if (!Util.isUnset(request.userCommand)) {
    body['UserCommand'] = request.userCommand;
  }
  if (!Util.isUnset(request.userVpc)) {
    body['UserVpc'] = request.userVpc;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateJob',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建一个DLC作业
 *
 * @param request CreateJobRequest
 * @return CreateJobResponse
 */
async function createJob(request: CreateJobRequest): CreateJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createJobWithOptions(request, headers, runtime);
}

model CreateTensorboardRequest {
  accessibility?: string(name='Accessibility'),
  cpu?: long(name='Cpu', example='1'),
  dataSourceId?: string(name='DataSourceId', example='d-xxxxxxxx'),
  dataSourceType?: string(name='DataSourceType'),
  dataSources?: [
    DataSourceItem
  ](name='DataSources'),
  displayName?: string(name='DisplayName', example='tensorboard'),
  jobId?: string(name='JobId', example='dlc-20210126170216-mtl37ge7gkvdz'),
  maxRunningTimeMinutes?: long(name='MaxRunningTimeMinutes', example='240'),
  memory?: long(name='Memory', example='1000'),
  options?: string(name='Options', example='{"mountpath":"/root/data/"}'),
  priority?: string(name='Priority'),
  quotaId?: string(name='QuotaId'),
  sourceId?: string(name='SourceId', example='dlc-xxxxxx'),
  sourceType?: string(name='SourceType', example='job'),
  summaryPath?: string(name='SummaryPath', example='/root/data/'),
  summaryRelativePath?: string(name='SummaryRelativePath', example='/summary/'),
  tensorboardDataSources?: [
    TensorboardDataSourceSpec
  ](name='TensorboardDataSources'),
  tensorboardSpec?: TensorboardSpec(name='TensorboardSpec'),
  uri?: string(name='Uri', example='oss://.oss-cn-shanghai-finance-1.aliyuncs.com/'),
  workspaceId?: string(name='WorkspaceId', example='123***'),
}

model CreateTensorboardResponseBody = {
  dataSourceId?: string(name='DataSourceId', example='ds-20210126170216-xxxxxxxx'),
  jobId?: string(name='JobId', example='dlc-20210126170216-xxxxxxxx'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  tensorboardId?: string(name='TensorboardId', example='tbxxxxxxxx'),
}

model CreateTensorboardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTensorboardResponseBody(name='body'),
}

/**
 * @summary 创建一个Tensorboard
 *
 * @param request CreateTensorboardRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateTensorboardResponse
 */
async function createTensorboardWithOptions(request: CreateTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTensorboardResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.cpu)) {
    body['Cpu'] = request.cpu;
  }
  if (!Util.isUnset(request.dataSourceId)) {
    body['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    body['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.dataSources)) {
    body['DataSources'] = request.dataSources;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.maxRunningTimeMinutes)) {
    body['MaxRunningTimeMinutes'] = request.maxRunningTimeMinutes;
  }
  if (!Util.isUnset(request.memory)) {
    body['Memory'] = request.memory;
  }
  if (!Util.isUnset(request.options)) {
    body['Options'] = request.options;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.quotaId)) {
    body['QuotaId'] = request.quotaId;
  }
  if (!Util.isUnset(request.sourceId)) {
    body['SourceId'] = request.sourceId;
  }
  if (!Util.isUnset(request.sourceType)) {
    body['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.summaryPath)) {
    body['SummaryPath'] = request.summaryPath;
  }
  if (!Util.isUnset(request.summaryRelativePath)) {
    body['SummaryRelativePath'] = request.summaryRelativePath;
  }
  if (!Util.isUnset(request.tensorboardDataSources)) {
    body['TensorboardDataSources'] = request.tensorboardDataSources;
  }
  if (!Util.isUnset(request.tensorboardSpec)) {
    body['TensorboardSpec'] = request.tensorboardSpec;
  }
  if (!Util.isUnset(request.uri)) {
    body['Uri'] = request.uri;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTensorboard',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建一个Tensorboard
 *
 * @param request CreateTensorboardRequest
 * @return CreateTensorboardResponse
 */
async function createTensorboard(request: CreateTensorboardRequest): CreateTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTensorboardWithOptions(request, headers, runtime);
}

model DeleteJobResponseBody = {
  jobId?: string(name='JobId', example='dlc*************'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteJobResponseBody(name='body'),
}

/**
 * @summary 删除一个DLC作业
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteJobResponse
 */
async function deleteJobWithOptions(JobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteJobResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteJob',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${OpenApiUtil.getEncodeParam(JobId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除一个DLC作业
 *
 * @return DeleteJobResponse
 */
async function deleteJob(JobId: string): DeleteJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteJobWithOptions(JobId, headers, runtime);
}

model DeleteTensorboardRequest {
  workspaceId?: string(name='WorkspaceId', example='46099'),
}

model DeleteTensorboardResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  tensorboardId?: string(name='TensorboardId', example='tensorboard-20210114104214-vf9lowjt3pso'),
}

model DeleteTensorboardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTensorboardResponseBody(name='body'),
}

/**
 * @summary 删除一个数据源配置
 *
 * @param request DeleteTensorboardRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteTensorboardResponse
 */
async function deleteTensorboardWithOptions(TensorboardId: string, request: DeleteTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTensorboardResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTensorboard',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards/${OpenApiUtil.getEncodeParam(TensorboardId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除一个数据源配置
 *
 * @param request DeleteTensorboardRequest
 * @return DeleteTensorboardResponse
 */
async function deleteTensorboard(TensorboardId: string, request: DeleteTensorboardRequest): DeleteTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteTensorboardWithOptions(TensorboardId, request, headers, runtime);
}

model GetJobRequest {
  needDetail?: boolean(name='NeedDetail', example='true'),
}

model GetJobResponseBody = {
  accessibility?: string(name='Accessibility'),
  clusterId?: string(name='ClusterId', example='a*****'),
  codeSource?: {
    branch?: string(name='Branch', example='master'),
    codeSourceId?: string(name='CodeSourceId', example='code******'),
    commit?: string(name='Commit', example='44da109b59f8596152987eaa8f3b2487xxxxxx'),
    mountPath?: string(name='MountPath', example='/mnt/data'),
  }(name='CodeSource'),
  credentialConfig?: CredentialConfig(name='CredentialConfig'),
  dataSources?: [ 
    {
      dataSourceId?: string(name='DataSourceId', example='d*******'),
      mountPath?: string(name='MountPath', example='/mnt/data/'),
      uri?: string(name='Uri', example='oss://bucket.oss-cn-hangzhou-internal.aliyuncs.com/path/'),
    }
  ](name='DataSources'),
  displayName?: string(name='DisplayName', example='tf-mnist-test'),
  duration?: long(name='Duration', example='3602'),
  elasticSpec?: JobElasticSpec(name='ElasticSpec'),
  enabledDebugger?: boolean(name='EnabledDebugger', example='false'),
  envs?: map[string]string(name='Envs'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:35:01Z'),
  gmtFailedTime?: string(name='GmtFailedTime', example='2021-01-12T15:36:08Z'),
  gmtFinishTime?: string(name='GmtFinishTime', example='2021-01-12T15:36:08Z'),
  gmtRunningTime?: string(name='GmtRunningTime', example='2021-01-12T14:36:21Z'),
  gmtStoppedTime?: string(name='GmtStoppedTime', example='2021-01-12T15:36:08Z'),
  gmtSubmittedTime?: string(name='GmtSubmittedTime', example='2021-01-12T14:36:01Z'),
  gmtSuccessedTime?: string(name='GmtSuccessedTime', example='2021-01-12T15:36:08Z'),
  jobId?: string(name='JobId', example='dlc*******'),
  jobSpecs?: [
    JobSpec
  ](name='JobSpecs'),
  jobType?: string(name='JobType', example='TFJob'),
  pods?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:36:01Z'),
      gmtFinishTime?: string(name='GmtFinishTime', example='2021-01-12T15:36:05Z'),
      gmtStartTime?: string(name='GmtStartTime', example='2021-01-12T14:36:01Z'),
      historyPods?: [ 
        {
          gmtCreateTime?: string(name='GmtCreateTime', example='2021-01-12T14:36:01Z'),
          gmtFinishTime?: string(name='GmtFinishTime', example='2021-01-12T14:36:01Z'),
          gmtStartTime?: string(name='GmtStartTime', example='2021-01-12T14:36:01Z'),
          ip?: string(name='Ip', example='10.0.1.3'),
          podId?: string(name='PodId', example='Worker'),
          podUid?: string(name='PodUid', example='fe846462-af2c-4521-bd6f-96787a57591d'),
          resourceType?: string(name='ResourceType', example='Normal'),
          status?: string(name='Status', example='Failed'),
          subStatus?: string(name='SubStatus', example='Normal'),
          type?: string(name='Type', example='Worker'),
        }
      ](name='HistoryPods'),
      ip?: string(name='Ip', example='10.0.1.2'),
      podId?: string(name='PodId', example='Worker'),
      podUid?: string(name='PodUid', example='fe846462-af2c-4521-bd6f-96787a57591d'),
      resourceType?: string(name='ResourceType', example='Normal'),
      status?: string(name='Status', example='Running'),
      subStatus?: string(name='SubStatus', example='Normal'),
      type?: string(name='Type', example='Worker'),
    }
  ](name='Pods'),
  priority?: int32(name='Priority', example='1'),
  reasonCode?: string(name='ReasonCode', example='JobStoppedByUser'),
  reasonMessage?: string(name='ReasonMessage', example='Job is stopped by user.'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-xxxxxxxx'),
  resourceId?: string(name='ResourceId', example='r******'),
  resourceLevel?: string(name='ResourceLevel', example='L0'),
  resourceType?: string(name='ResourceType', example='ECS'),
  restartTimes?: string(name='RestartTimes', example='0/10'),
  settings?: JobSettings(name='Settings'),
  status?: string(name='Status', example='Stopped'),
  statusHistory?: [
    StatusTransitionItem
  ](name='StatusHistory'),
  subStatus?: string(name='SubStatus', example='Restarting'),
  tenantId?: string(name='TenantId'),
  thirdpartyLibDir?: string(name='ThirdpartyLibDir', example='/root/code/'),
  thirdpartyLibs?: [ string ](name='ThirdpartyLibs'),
  userCommand?: string(name='UserCommand', example='python /root/code/mnist.py'),
  userId?: string(name='UserId', example='12*********'),
  workspaceId?: string(name='WorkspaceId', example='268'),
  workspaceName?: string(name='WorkspaceName', example='dlc-workspace'),
}

model GetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobResponseBody(name='body'),
}

/**
 * @summary 获取一个DLC作业详情
 *
 * @param request GetJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetJobResponse
 */
async function getJobWithOptions(JobId: string, request: GetJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetJobResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.needDetail)) {
    query['NeedDetail'] = request.needDetail;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetJob',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${OpenApiUtil.getEncodeParam(JobId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取一个DLC作业详情
 *
 * @param request GetJobRequest
 * @return GetJobResponse
 */
async function getJob(JobId: string, request: GetJobRequest): GetJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getJobWithOptions(JobId, request, headers, runtime);
}

model GetJobEventsRequest {
  endTime?: string(name='EndTime', example='2020-11-08T18:00:00Z'),
  maxEventsNum?: int32(name='MaxEventsNum', example='100'),
  startTime?: string(name='StartTime', example='2020-11-08T16:00:00Z'),
}

model GetJobEventsResponseBody = {
  events?: [ string ](name='Events'),
  jobId?: string(name='JobId', example='dlc-20210126170216-******'),
  requestId?: string(name='RequestId', example='78F6FCE2-278F-4C4A-A6B7-DD8ECEA9C456'),
}

model GetJobEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobEventsResponseBody(name='body'),
}

/**
 * @summary 获取作业的事件
 *
 * @param request GetJobEventsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetJobEventsResponse
 */
async function getJobEventsWithOptions(JobId: string, request: GetJobEventsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetJobEventsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.maxEventsNum)) {
    query['MaxEventsNum'] = request.maxEventsNum;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetJobEvents',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${OpenApiUtil.getEncodeParam(JobId)}/events`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取作业的事件
 *
 * @param request GetJobEventsRequest
 * @return GetJobEventsResponse
 */
async function getJobEvents(JobId: string, request: GetJobEventsRequest): GetJobEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getJobEventsWithOptions(JobId, request, headers, runtime);
}

model GetJobMetricsRequest {
  endTime?: string(name='EndTime', example='2020-11-09T16:00:00Z'),
  metricType?: string(name='MetricType', description='This parameter is required.', example='GpuMemoryUsage'),
  startTime?: string(name='StartTime', example='2020-11-08T16:00:00Z'),
  timeStep?: string(name='TimeStep', example='5m'),
  token?: string(name='Token', example='eyXXXX-XXXX.XXXXX'),
}

model GetJobMetricsResponseBody = {
  jobId?: string(name='JobId', example='dlc-20210126170216-*******'),
  podMetrics?: [
    PodMetric
  ](name='PodMetrics'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model GetJobMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobMetricsResponseBody(name='body'),
}

/**
 * @summary 获取一个作业的资源监控指标
 *
 * @param request GetJobMetricsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetJobMetricsResponse
 */
async function getJobMetricsWithOptions(JobId: string, request: GetJobMetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetJobMetricsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.metricType)) {
    query['MetricType'] = request.metricType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.timeStep)) {
    query['TimeStep'] = request.timeStep;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetJobMetrics',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${OpenApiUtil.getEncodeParam(JobId)}/metrics`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取一个作业的资源监控指标
 *
 * @param request GetJobMetricsRequest
 * @return GetJobMetricsResponse
 */
async function getJobMetrics(JobId: string, request: GetJobMetricsRequest): GetJobMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getJobMetricsWithOptions(JobId, request, headers, runtime);
}

model GetJobSanityCheckResultRequest {
  sanityCheckNumber?: int32(name='SanityCheckNumber', description='This parameter is required.', example='1'),
  sanityCheckPhase?: string(name='SanityCheckPhase', example='DeviceCheck'),
  token?: string(name='Token'),
}

model GetJobSanityCheckResultResponseBody = {
  jobId?: string(name='JobId', example='dlc-20210126170216-xxxxxx'),
  requestID?: string(name='RequestID', example='B3789344-F1xxxBE-5xx2-A04D-xxxxx'),
  sanityCheckResult?: [
    SanityCheckResultItem
  ](name='SanityCheckResult'),
}

model GetJobSanityCheckResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobSanityCheckResultResponseBody(name='body'),
}

/**
 * @summary 获取DLC作业某次算力健康检测结果
 *
 * @param request GetJobSanityCheckResultRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetJobSanityCheckResultResponse
 */
async function getJobSanityCheckResultWithOptions(JobId: string, request: GetJobSanityCheckResultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetJobSanityCheckResultResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.sanityCheckNumber)) {
    query['SanityCheckNumber'] = request.sanityCheckNumber;
  }
  if (!Util.isUnset(request.sanityCheckPhase)) {
    query['SanityCheckPhase'] = request.sanityCheckPhase;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetJobSanityCheckResult',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${OpenApiUtil.getEncodeParam(JobId)}/sanitycheckresult`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取DLC作业某次算力健康检测结果
 *
 * @param request GetJobSanityCheckResultRequest
 * @return GetJobSanityCheckResultResponse
 */
async function getJobSanityCheckResult(JobId: string, request: GetJobSanityCheckResultRequest): GetJobSanityCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getJobSanityCheckResultWithOptions(JobId, request, headers, runtime);
}

model GetPodEventsRequest {
  endTime?: string(name='EndTime', example='2020-11-09T16:00:00Z'),
  maxEventsNum?: int32(name='MaxEventsNum', example='100'),
  podUid?: string(name='PodUid', example='dlc-20210126170216-*****-chief-0'),
  startTime?: string(name='StartTime', example='2020-11-08T16:00:00Z'),
}

model GetPodEventsResponseBody = {
  events?: [ string ](name='Events'),
  jobId?: string(name='JobId', example='dlc-20210126170216-*****'),
  podId?: string(name='PodId', description='This parameter is required.', example='dlc-20210126170216-*****-chief-0'),
  podUid?: string(name='PodUid', example='94a7cc7c-0033-48b5-85bd-71c63592c268'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model GetPodEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPodEventsResponseBody(name='body'),
}

/**
 * @summary 获取作业中一个运行实例的系统事件
 *
 * @param request GetPodEventsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPodEventsResponse
 */
async function getPodEventsWithOptions(JobId: string, PodId: string, request: GetPodEventsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPodEventsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.maxEventsNum)) {
    query['MaxEventsNum'] = request.maxEventsNum;
  }
  if (!Util.isUnset(request.podUid)) {
    query['PodUid'] = request.podUid;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPodEvents',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${OpenApiUtil.getEncodeParam(JobId)}/pods/${OpenApiUtil.getEncodeParam(PodId)}/events`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取作业中一个运行实例的系统事件
 *
 * @param request GetPodEventsRequest
 * @return GetPodEventsResponse
 */
async function getPodEvents(JobId: string, PodId: string, request: GetPodEventsRequest): GetPodEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPodEventsWithOptions(JobId, PodId, request, headers, runtime);
}

model GetPodLogsRequest {
  downloadToFile?: boolean(name='DownloadToFile', example='true'),
  endTime?: string(name='EndTime', example='2020-11-08T17:00:00Z'),
  maxLines?: int32(name='MaxLines', example='100'),
  podUid?: string(name='PodUid', example='fe846462-af2c-4521-bd6f-96787a57****'),
  startTime?: string(name='StartTime', example='2020-11-08T16:00:00Z'),
}

model GetPodLogsResponseBody = {
  jobId?: string(name='JobId', example='dlc-20210126170216-******'),
  logs?: [ string ](name='Logs'),
  podId?: string(name='PodId', example='dlc-20210126170216-****-chief-0'),
  podUid?: string(name='PodUid', example='94a7cc7c-0033-48b5-85bd-71c63592c268'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model GetPodLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPodLogsResponseBody(name='body'),
}

/**
 * @summary 获取作业中一个运行实例的日志
 *
 * @param request GetPodLogsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPodLogsResponse
 */
async function getPodLogsWithOptions(JobId: string, PodId: string, request: GetPodLogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPodLogsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.downloadToFile)) {
    query['DownloadToFile'] = request.downloadToFile;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.maxLines)) {
    query['MaxLines'] = request.maxLines;
  }
  if (!Util.isUnset(request.podUid)) {
    query['PodUid'] = request.podUid;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPodLogs',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${OpenApiUtil.getEncodeParam(JobId)}/pods/${OpenApiUtil.getEncodeParam(PodId)}/logs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取作业中一个运行实例的日志
 *
 * @param request GetPodLogsRequest
 * @return GetPodLogsResponse
 */
async function getPodLogs(JobId: string, PodId: string, request: GetPodLogsRequest): GetPodLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPodLogsWithOptions(JobId, PodId, request, headers, runtime);
}

model GetTensorboardRequest {
  jodId?: string(name='JodId', example='dlc-xxxxxxxx'),
  token?: string(name='Token'),
  workspaceId?: string(name='WorkspaceId', example='46099'),
}

model GetTensorboardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Tensorboard  
}

/**
 * @summary 获取一个Tensorboard
 *
 * @param request GetTensorboardRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTensorboardResponse
 */
async function getTensorboardWithOptions(TensorboardId: string, request: GetTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTensorboardResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.jodId)) {
    query['JodId'] = request.jodId;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTensorboard',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards/${OpenApiUtil.getEncodeParam(TensorboardId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取一个Tensorboard
 *
 * @param request GetTensorboardRequest
 * @return GetTensorboardResponse
 */
async function getTensorboard(TensorboardId: string, request: GetTensorboardRequest): GetTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTensorboardWithOptions(TensorboardId, request, headers, runtime);
}

model GetTensorboardSharedUrlRequest {
  expireTimeSeconds?: string(name='ExpireTimeSeconds', example='86400'),
}

model GetTensorboardSharedUrlResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  tensorboardSharedUrl?: string(name='TensorboardSharedUrl', example='http://pai-dlc-proxy-xxx.alicyuncs.com/xxx/xxx/token/'),
}

model GetTensorboardSharedUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTensorboardSharedUrlResponseBody(name='body'),
}

/**
 * @summary Get the shared url for tensorboard
 *
 * @param request GetTensorboardSharedUrlRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTensorboardSharedUrlResponse
 */
async function getTensorboardSharedUrlWithOptions(TensorboardId: string, request: GetTensorboardSharedUrlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTensorboardSharedUrlResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.expireTimeSeconds)) {
    query['ExpireTimeSeconds'] = request.expireTimeSeconds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTensorboardSharedUrl',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards/${OpenApiUtil.getEncodeParam(TensorboardId)}/sharedurl`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get the shared url for tensorboard
 *
 * @param request GetTensorboardSharedUrlRequest
 * @return GetTensorboardSharedUrlResponse
 */
async function getTensorboardSharedUrl(TensorboardId: string, request: GetTensorboardSharedUrlRequest): GetTensorboardSharedUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTensorboardSharedUrlWithOptions(TensorboardId, request, headers, runtime);
}

model GetTokenRequest {
  expireTime?: long(name='ExpireTime', example='60'),
  targetId?: string(name='TargetId', example='dlc*******'),
  targetType?: string(name='TargetType', example='job'),
}

model GetTokenResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-xxxxxxxx'),
  token?: string(name='Token', example='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9*****'),
}

model GetTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTokenResponseBody(name='body'),
}

/**
 * @summary 获取用户Token
 *
 * @param request GetTokenRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTokenResponse
 */
async function getTokenWithOptions(request: GetTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTokenResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.expireTime)) {
    query['ExpireTime'] = request.expireTime;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetToken',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tokens`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户Token
 *
 * @param request GetTokenRequest
 * @return GetTokenResponse
 */
async function getToken(request: GetTokenRequest): GetTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTokenWithOptions(request, headers, runtime);
}

model GetWebTerminalRequest {
  isShared?: boolean(name='IsShared'),
  podUid?: string(name='PodUid', description='Pod UID。', example='94a7cc7c-0033-48b5-85bd-71c63592c268'),
}

model GetWebTerminalResponseBody = {
  requestId?: string(name='RequestId'),
  webTerminalUrl?: string(name='WebTerminalUrl'),
}

model GetWebTerminalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWebTerminalResponseBody(name='body'),
}

/**
 * @summary Get the url for accessing pod's terminal in k8s
 *
 * @param request GetWebTerminalRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWebTerminalResponse
 */
async function getWebTerminalWithOptions(JobId: string, PodId: string, request: GetWebTerminalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetWebTerminalResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.isShared)) {
    query['IsShared'] = request.isShared;
  }
  if (!Util.isUnset(request.podUid)) {
    query['PodUid'] = request.podUid;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWebTerminal',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${OpenApiUtil.getEncodeParam(JobId)}/pods/${OpenApiUtil.getEncodeParam(PodId)}/webterminal`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get the url for accessing pod's terminal in k8s
 *
 * @param request GetWebTerminalRequest
 * @return GetWebTerminalResponse
 */
async function getWebTerminal(JobId: string, PodId: string, request: GetWebTerminalRequest): GetWebTerminalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getWebTerminalWithOptions(JobId, PodId, request, headers, runtime);
}

model ListEcsSpecsRequest {
  acceleratorType?: string(name='AcceleratorType', example='GPU'),
  instanceTypes?: string(name='InstanceTypes', example='ecs.g6.large,ecs.g6.xlarge'),
  order?: string(name='Order', example='desc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  resourceType?: string(name='ResourceType', example='ECS'),
  sortBy?: string(name='SortBy', example='Gpu'),
}

model ListEcsSpecsResponseBody = {
  ecsSpecs?: [
    EcsSpec
  ](name='EcsSpecs'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListEcsSpecsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEcsSpecsResponseBody(name='body'),
}

/**
 * @summary ListEcsSpecs
 *
 * @param request ListEcsSpecsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEcsSpecsResponse
 */
async function listEcsSpecsWithOptions(request: ListEcsSpecsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListEcsSpecsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.acceleratorType)) {
    query['AcceleratorType'] = request.acceleratorType;
  }
  if (!Util.isUnset(request.instanceTypes)) {
    query['InstanceTypes'] = request.instanceTypes;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEcsSpecs',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/ecsspecs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary ListEcsSpecs
 *
 * @param request ListEcsSpecsRequest
 * @return ListEcsSpecsResponse
 */
async function listEcsSpecs(request: ListEcsSpecsRequest): ListEcsSpecsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listEcsSpecsWithOptions(request, headers, runtime);
}

model ListJobSanityCheckResultsRequest {
  order?: string(name='Order', example='desc'),
}

model ListJobSanityCheckResultsResponseBody = {
  requestID?: string(name='RequestID', example='1AC9xxx-3xxx-5xxx2-xxxx-FA5'),
  sanityCheckResults?: [[
    SanityCheckResultItem
  ]  ](name='SanityCheckResults'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListJobSanityCheckResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListJobSanityCheckResultsResponseBody(name='body'),
}

/**
 * @summary 获取某个DLC作业的多次算力健康检测结果
 *
 * @param request ListJobSanityCheckResultsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListJobSanityCheckResultsResponse
 */
async function listJobSanityCheckResultsWithOptions(JobId: string, request: ListJobSanityCheckResultsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListJobSanityCheckResultsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListJobSanityCheckResults',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${OpenApiUtil.getEncodeParam(JobId)}/sanitycheckresults`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取某个DLC作业的多次算力健康检测结果
 *
 * @param request ListJobSanityCheckResultsRequest
 * @return ListJobSanityCheckResultsResponse
 */
async function listJobSanityCheckResults(JobId: string, request: ListJobSanityCheckResultsRequest): ListJobSanityCheckResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listJobSanityCheckResultsWithOptions(JobId, request, headers, runtime);
}

model ListJobsRequest {
  accessibility?: string(name='Accessibility'),
  businessUserId?: string(name='BusinessUserId', example='16****'),
  caller?: string(name='Caller', example='local'),
  displayName?: string(name='DisplayName', example='tf-mnist-test'),
  endTime?: string(name='EndTime', example='2020-11-09T14:45:00Z'),
  fromAllWorkspaces?: boolean(name='FromAllWorkspaces', example='false'),
  jobId?: string(name='JobId', example='dlc********'),
  jobType?: string(name='JobType', example='TFJob'),
  order?: string(name='Order', example='desc'),
  oversoldInfo?: string(name='OversoldInfo'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  pipelineId?: string(name='PipelineId', example='flow-*******'),
  resourceId?: string(name='ResourceId', example='r*****'),
  resourceQuotaName?: string(name='ResourceQuotaName'),
  showOwn?: boolean(name='ShowOwn', example='true'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
  startTime?: string(name='StartTime', example='2020-11-08T16:00:00Z'),
  status?: string(name='Status', example='Running'),
  tags?: map[string]string(name='Tags'),
  userIdForFilter?: string(name='UserIdForFilter'),
  username?: string(name='Username'),
  workspaceId?: string(name='WorkspaceId', example='1****'),
}

model ListJobsShrinkRequest {
  accessibility?: string(name='Accessibility'),
  businessUserId?: string(name='BusinessUserId', example='16****'),
  caller?: string(name='Caller', example='local'),
  displayName?: string(name='DisplayName', example='tf-mnist-test'),
  endTime?: string(name='EndTime', example='2020-11-09T14:45:00Z'),
  fromAllWorkspaces?: boolean(name='FromAllWorkspaces', example='false'),
  jobId?: string(name='JobId', example='dlc********'),
  jobType?: string(name='JobType', example='TFJob'),
  order?: string(name='Order', example='desc'),
  oversoldInfo?: string(name='OversoldInfo'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  pipelineId?: string(name='PipelineId', example='flow-*******'),
  resourceId?: string(name='ResourceId', example='r*****'),
  resourceQuotaName?: string(name='ResourceQuotaName'),
  showOwn?: boolean(name='ShowOwn', example='true'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
  startTime?: string(name='StartTime', example='2020-11-08T16:00:00Z'),
  status?: string(name='Status', example='Running'),
  tagsShrink?: string(name='Tags'),
  userIdForFilter?: string(name='UserIdForFilter'),
  username?: string(name='Username'),
  workspaceId?: string(name='WorkspaceId', example='1****'),
}

model ListJobsResponseBody = {
  jobs?: [
    JobItem
  ](name='Jobs'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', example='2'),
}

model ListJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListJobsResponseBody(name='body'),
}

/**
 * @summary 根据过滤条件获取DLC作业列表
 *
 * @param tmpReq ListJobsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListJobsResponse
 */
async function listJobsWithOptions(tmpReq: ListJobsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListJobsResponse {
  Util.validateModel(tmpReq);
  var request = new ListJobsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.accessibility)) {
    query['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.businessUserId)) {
    query['BusinessUserId'] = request.businessUserId;
  }
  if (!Util.isUnset(request.caller)) {
    query['Caller'] = request.caller;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.fromAllWorkspaces)) {
    query['FromAllWorkspaces'] = request.fromAllWorkspaces;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.jobType)) {
    query['JobType'] = request.jobType;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.oversoldInfo)) {
    query['OversoldInfo'] = request.oversoldInfo;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pipelineId)) {
    query['PipelineId'] = request.pipelineId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceQuotaName)) {
    query['ResourceQuotaName'] = request.resourceQuotaName;
  }
  if (!Util.isUnset(request.showOwn)) {
    query['ShowOwn'] = request.showOwn;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.userIdForFilter)) {
    query['UserIdForFilter'] = request.userIdForFilter;
  }
  if (!Util.isUnset(request.username)) {
    query['Username'] = request.username;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListJobs',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据过滤条件获取DLC作业列表
 *
 * @param request ListJobsRequest
 * @return ListJobsResponse
 */
async function listJobs(request: ListJobsRequest): ListJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listJobsWithOptions(request, headers, runtime);
}

model ListTensorboardsRequest {
  accessibility?: string(name='Accessibility'),
  displayName?: string(name='DisplayName', example='TestTensorboard'),
  endTime?: string(name='EndTime', example='2020-11-09T14:45:00Z'),
  jobId?: string(name='JobId', example='dlc-xxx'),
  order?: string(name='Order', example='desc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  paymentType?: string(name='PaymentType'),
  quotaId?: string(name='QuotaId'),
  showOwn?: boolean(name='ShowOwn'),
  sortBy?: string(name='SortBy', example='GmtCreateTime'),
  sourceId?: string(name='SourceId', example='dlc-xxxxxx'),
  sourceType?: string(name='SourceType', example='job'),
  startTime?: string(name='StartTime', example='2020-11-08T16:00:00Z'),
  status?: string(name='Status', example='Running'),
  tensorboardId?: string(name='TensorboardId', example='tensorboard-xxx'),
  userId?: string(name='UserId'),
  username?: string(name='Username'),
  verbose?: boolean(name='Verbose', example='true'),
  workspaceId?: string(name='WorkspaceId', example='380'),
}

model ListTensorboardsResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  tensorboards?: [
    Tensorboard
  ](name='Tensorboards'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListTensorboardsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTensorboardsResponseBody(name='body'),
}

/**
 * @summary 获取Tensorboard
 *
 * @param request ListTensorboardsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTensorboardsResponse
 */
async function listTensorboardsWithOptions(request: ListTensorboardsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTensorboardsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.accessibility)) {
    query['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.paymentType)) {
    query['PaymentType'] = request.paymentType;
  }
  if (!Util.isUnset(request.quotaId)) {
    query['QuotaId'] = request.quotaId;
  }
  if (!Util.isUnset(request.showOwn)) {
    query['ShowOwn'] = request.showOwn;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sourceId)) {
    query['SourceId'] = request.sourceId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tensorboardId)) {
    query['TensorboardId'] = request.tensorboardId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.username)) {
    query['Username'] = request.username;
  }
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTensorboards',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取Tensorboard
 *
 * @param request ListTensorboardsRequest
 * @return ListTensorboardsResponse
 */
async function listTensorboards(request: ListTensorboardsRequest): ListTensorboardsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTensorboardsWithOptions(request, headers, runtime);
}

model StartTensorboardRequest {
  workspaceId?: string(name='WorkspaceId', example='380'),
}

model StartTensorboardResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  tensorboardId?: string(name='TensorboardId', example='tensorboard-20210114104214-vf9lowjt3pso'),
}

model StartTensorboardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartTensorboardResponseBody(name='body'),
}

/**
 * @summary 开始运行tensorboard
 *
 * @param request StartTensorboardRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartTensorboardResponse
 */
async function startTensorboardWithOptions(TensorboardId: string, request: StartTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartTensorboardResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartTensorboard',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards/${OpenApiUtil.getEncodeParam(TensorboardId)}/start`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 开始运行tensorboard
 *
 * @param request StartTensorboardRequest
 * @return StartTensorboardResponse
 */
async function startTensorboard(TensorboardId: string, request: StartTensorboardRequest): StartTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startTensorboardWithOptions(TensorboardId, request, headers, runtime);
}

model StopJobResponseBody = {
  jobId?: string(name='JobId', example='dlc-20210126170216-xxxxxxx'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-xxxxxx'),
}

model StopJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopJobResponseBody(name='body'),
}

/**
 * @summary 停止一个DLC作业
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopJobResponse
 */
async function stopJobWithOptions(JobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopJobResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StopJob',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${OpenApiUtil.getEncodeParam(JobId)}/stop`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 停止一个DLC作业
 *
 * @return StopJobResponse
 */
async function stopJob(JobId: string): StopJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopJobWithOptions(JobId, headers, runtime);
}

model StopTensorboardRequest {
  workspaceId?: string(name='WorkspaceId', example='380'),
}

model StopTensorboardResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  tensorboardId?: string(name='TensorboardId', example='tensorboard-20210114104214-xxxxxxxx'),
}

model StopTensorboardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopTensorboardResponseBody(name='body'),
}

/**
 * @summary 停止运行tensorboard
 *
 * @param request StopTensorboardRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopTensorboardResponse
 */
async function stopTensorboardWithOptions(TensorboardId: string, request: StopTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopTensorboardResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopTensorboard',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards/${OpenApiUtil.getEncodeParam(TensorboardId)}/stop`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 停止运行tensorboard
 *
 * @param request StopTensorboardRequest
 * @return StopTensorboardResponse
 */
async function stopTensorboard(TensorboardId: string, request: StopTensorboardRequest): StopTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopTensorboardWithOptions(TensorboardId, request, headers, runtime);
}

model UpdateJobRequest {
  accessibility?: string(name='Accessibility'),
  priority?: int32(name='Priority', example='5'),
}

model UpdateJobResponseBody = {
  jobId?: string(name='JobId', example='dlc*************'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model UpdateJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateJobResponseBody(name='body'),
}

/**
 * @summary 更新一个Job
 *
 * @param request UpdateJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateJobResponse
 */
async function updateJobWithOptions(JobId: string, request: UpdateJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateJob',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${OpenApiUtil.getEncodeParam(JobId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新一个Job
 *
 * @param request UpdateJobRequest
 * @return UpdateJobResponse
 */
async function updateJob(JobId: string, request: UpdateJobRequest): UpdateJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateJobWithOptions(JobId, request, headers, runtime);
}

model UpdateTensorboardRequest {
  accessibility?: string(name='Accessibility'),
  maxRunningTimeMinutes?: long(name='MaxRunningTimeMinutes', example='MaxRunningTimeMinutes'),
  priority?: string(name='Priority'),
  workspaceId?: string(name='WorkspaceId', example='380'),
}

model UpdateTensorboardResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  tensorboardId?: string(name='TensorboardId', example='tensorboard-20210114104214-xxxxxxxx'),
}

model UpdateTensorboardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTensorboardResponseBody(name='body'),
}

/**
 * @summary 更新tensorboard
 *
 * @param request UpdateTensorboardRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateTensorboardResponse
 */
async function updateTensorboardWithOptions(TensorboardId: string, request: UpdateTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTensorboardResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.accessibility)) {
    query['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.maxRunningTimeMinutes)) {
    query['MaxRunningTimeMinutes'] = request.maxRunningTimeMinutes;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTensorboard',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards/${OpenApiUtil.getEncodeParam(TensorboardId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新tensorboard
 *
 * @param request UpdateTensorboardRequest
 * @return UpdateTensorboardResponse
 */
async function updateTensorboard(TensorboardId: string, request: UpdateTensorboardRequest): UpdateTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateTensorboardWithOptions(TensorboardId, request, headers, runtime);
}

