/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @signatureAlgorithm = 'v2';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'pai-dlc.aliyuncs.com',
    ap-northeast-2-pop = 'pai-dlc.aliyuncs.com',
    ap-south-1 = 'pai-dlc.aliyuncs.com',
    ap-southeast-2 = 'pai-dlc.aliyuncs.com',
    ap-southeast-3 = 'pai-dlc.aliyuncs.com',
    ap-southeast-5 = 'pai-dlc.aliyuncs.com',
    cn-beijing-finance-1 = 'pai-dlc.aliyuncs.com',
    cn-beijing-finance-pop = 'pai-dlc.aliyuncs.com',
    cn-beijing-gov-1 = 'pai-dlc.aliyuncs.com',
    cn-beijing-nu16-b01 = 'pai-dlc.aliyuncs.com',
    cn-chengdu = 'pai-dlc.aliyuncs.com',
    cn-edge-1 = 'pai-dlc.aliyuncs.com',
    cn-fujian = 'pai-dlc.aliyuncs.com',
    cn-haidian-cm12-c01 = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-finance = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-test-306 = 'pai-dlc.aliyuncs.com',
    cn-hongkong-finance-pop = 'pai-dlc.aliyuncs.com',
    cn-huhehaote = 'pai-dlc.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'pai-dlc.aliyuncs.com',
    cn-north-2-gov-1 = 'pai-dlc.aliyuncs.com',
    cn-qingdao = 'pai-dlc.aliyuncs.com',
    cn-qingdao-nebula = 'pai-dlc.aliyuncs.com',
    cn-shanghai-et15-b01 = 'pai-dlc.aliyuncs.com',
    cn-shanghai-et2-b01 = 'pai-dlc.aliyuncs.com',
    cn-shanghai-inner = 'pai-dlc.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'pai-dlc.aliyuncs.com',
    cn-shenzhen-finance-1 = 'pai-dlc.aliyuncs.com',
    cn-shenzhen-inner = 'pai-dlc.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'pai-dlc.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'pai-dlc.aliyuncs.com',
    cn-wuhan = 'pai-dlc.aliyuncs.com',
    cn-wulanchabu = 'pai-dlc.aliyuncs.com',
    cn-yushanfang = 'pai-dlc.aliyuncs.com',
    cn-zhangbei = 'pai-dlc.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'pai-dlc.aliyuncs.com',
    cn-zhangjiakou = 'pai-dlc.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'pai-dlc.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'pai-dlc.aliyuncs.com',
    eu-west-1 = 'pai-dlc.aliyuncs.com',
    eu-west-1-oxs = 'pai-dlc.aliyuncs.com',
    me-east-1 = 'pai-dlc.aliyuncs.com',
    rus-west-1-pop = 'pai-dlc.aliyuncs.com',
    us-east-1 = 'pai-dlc.aliyuncs.com',
    us-west-1 = 'pai-dlc.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('pai-dlc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AliyunAccounts {
  aliyunUid?: string(name='AliyunUid'),
  employeeId?: string(name='EmployeeId'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifyTime?: string(name='GmtModifyTime'),
}

model CodeSourceItem {
  codeBranch?: string(name='CodeBranch'),
  codeCommit?: string(name='CodeCommit'),
  codeRepo?: string(name='CodeRepo'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken'),
  codeRepoUserName?: string(name='CodeRepoUserName'),
  codeSourceId?: string(name='CodeSourceId'),
  description?: string(name='Description'),
  displayName?: string(name='DisplayName'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifyTime?: string(name='GmtModifyTime'),
  userId?: string(name='UserId'),
}

model ContainerSpec {
  args?: [ string ](name='Args'),
  command?: [ string ](name='Command'),
  env?: [
    EnvVar
  ](name='Env'),
  image?: string(name='Image'),
  name?: string(name='Name'),
  resources?: ResourceRequirements(name='Resources'),
  workingDir?: string(name='WorkingDir'),
}

model DataSourceItem {
  dataSourceId?: string(name='DataSourceId'),
  dataSourceType?: string(name='DataSourceType'),
  description?: string(name='Description'),
  displayName?: string(name='DisplayName'),
  endpoint?: string(name='Endpoint'),
  fileSystemId?: string(name='FileSystemId'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifyTime?: string(name='GmtModifyTime'),
  mountPath?: string(name='MountPath'),
  options?: string(name='Options'),
  path?: string(name='Path'),
  userId?: string(name='UserId'),
}

model DebuggerConfig {
  content?: string(name='Content'),
  debuggerConfigId?: string(name='DebuggerConfigId'),
  description?: string(name='Description'),
  displayName?: string(name='DisplayName'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifyTime?: string(name='GmtModifyTime'),
}

model DebuggerJob {
  debuggerJobId?: string(name='DebuggerJobId'),
  displayName?: string(name='DisplayName'),
  duration?: string(name='Duration'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtFailedTime?: string(name='GmtFailedTime'),
  gmtFinishTime?: string(name='GmtFinishTime'),
  gmtRunningTime?: string(name='GmtRunningTime'),
  gmtStoppedTime?: string(name='GmtStoppedTime'),
  gmtSubmittedTime?: string(name='GmtSubmittedTime'),
  gmtSucceedTime?: string(name='GmtSucceedTime'),
  status?: string(name='Status'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId'),
  workspaceName?: string(name='WorkspaceName'),
}

model DebuggerJobIssue {
  debuggerJobIssue?: string(name='DebuggerJobIssue'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  jobDebuggerIssueId?: string(name='JobDebuggerIssueId'),
  jobId?: string(name='JobId'),
  reasonCode?: string(name='ReasonCode'),
  reasonMessage?: string(name='ReasonMessage'),
  ruleName?: string(name='RuleName'),
}

model DebuggerResult {
  debuggerConfigContent?: string(name='DebuggerConfigContent'),
  debuggerJobIssues?: string(name='DebuggerJobIssues'),
  debuggerJobStatus?: string(name='DebuggerJobStatus'),
  debuggerReportURL?: string(name='DebuggerReportURL'),
  jobDisplayName?: string(name='JobDisplayName'),
  jobId?: string(name='JobId'),
  jobUserId?: string(name='JobUserId'),
}

model EcsSpec {
  acceleratorType?: string(name='AcceleratorType'),
  cpu?: int32(name='Cpu'),
  gpu?: int32(name='Gpu'),
  gpuType?: string(name='GpuType'),
  instanceType?: string(name='InstanceType'),
  isAvailable?: boolean(name='IsAvailable'),
  memory?: int32(name='Memory'),
}

model EnvVar {
  name?: string(name='Name'),
  value?: string(name='Value'),
}

model ExtraPodSpec {
  initContainers?: [
    ContainerSpec
  ](name='InitContainers'),
  podAnnotations?: map[string]string(name='PodAnnotations'),
  podLabels?: map[string]string(name='PodLabels'),
  sharedVolumeMountPaths?: [ string ](name='SharedVolumeMountPaths'),
  sideCarContainers?: [
    ContainerSpec
  ](name='SideCarContainers'),
}

model GPUDetail {
  GPU?: string(name='GPU'),
  GPUType?: string(name='GPUType'),
  GPUTypeFullName?: string(name='GPUTypeFullName'),
}

model ImageItem {
  acceleratorType?: string(name='AcceleratorType'),
  authorId?: string(name='AuthorId'),
  framework?: string(name='Framework'),
  imageProviderType?: string(name='ImageProviderType'),
  imageTag?: string(name='ImageTag'),
  imageUrl?: string(name='ImageUrl'),
  imageUrlVpc?: string(name='ImageUrlVpc'),
}

model JobDebuggerConfig {
  debuggerConfigContent?: string(name='DebuggerConfigContent'),
  debuggerConfigId?: string(name='DebuggerConfigId'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  jobId?: string(name='JobId'),
}

model JobElasticSpec {
  AIMasterType?: string(name='AIMasterType'),
  enableElasticTraining?: boolean(name='EnableElasticTraining'),
  maxParallelism?: int32(name='MaxParallelism'),
  minParallelism?: int32(name='MinParallelism'),
}

model JobItem {
  codeSource?: {
    branch?: string(name='Branch'),
    codeSourceId?: string(name='CodeSourceId'),
    commit?: string(name='Commit'),
    mountPath?: string(name='MountPath'),
  }(name='CodeSource'),
  dataSources?: [ 
    {
      dataSourceId?: string(name='DataSourceId'),
      mountPath?: string(name='MountPath'),
    }
  ](name='DataSources'),
  displayName?: string(name='DisplayName'),
  duration?: long(name='Duration'),
  enabledDebugger?: boolean(name='EnabledDebugger'),
  envs?: map[string]string(name='Envs'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtFailedTime?: string(name='GmtFailedTime'),
  gmtFinishTime?: string(name='GmtFinishTime'),
  gmtRunningTime?: string(name='GmtRunningTime'),
  gmtStoppedTime?: string(name='GmtStoppedTime'),
  gmtSubmittedTime?: string(name='GmtSubmittedTime'),
  gmtSuccessedTime?: string(name='GmtSuccessedTime'),
  jobId?: string(name='JobId'),
  jobSpecs?: [
    JobSpec
  ](name='JobSpecs'),
  jobType?: string(name='JobType'),
  priority?: int32(name='Priority'),
  reasonCode?: string(name='ReasonCode'),
  reasonMessage?: string(name='ReasonMessage'),
  resourceId?: string(name='ResourceId'),
  resourceLevel?: string(name='ResourceLevel'),
  resourceName?: string(name='ResourceName'),
  settings?: JobSettings(name='Settings'),
  status?: string(name='Status'),
  thirdpartyLibDir?: string(name='ThirdpartyLibDir'),
  thirdpartyLibs?: [ string ](name='ThirdpartyLibs'),
  userCommand?: string(name='UserCommand'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId'),
  workspaceName?: string(name='WorkspaceName'),
}

model JobSettings {
  businessUserId?: string(name='BusinessUserId'),
  caller?: string(name='Caller'),
  enableErrorMonitoringInAIMaster?: boolean(name='EnableErrorMonitoringInAIMaster'),
  enableOssAppend?: boolean(name='EnableOssAppend'),
  enableRDMA?: boolean(name='EnableRDMA'),
  enableTideResource?: boolean(name='EnableTideResource'),
  errorMonitoringArgs?: string(name='ErrorMonitoringArgs'),
  pipelineId?: string(name='PipelineId'),
  tags?: map[string]string(name='Tags'),
}

model JobSpec {
  ecsSpec?: string(name='EcsSpec'),
  extraPodSpec?: ExtraPodSpec(name='ExtraPodSpec'),
  image?: string(name='Image'),
  podCount?: long(name='PodCount'),
  resourceConfig?: ResourceConfig(name='ResourceConfig'),
  type?: string(name='Type'),
  useSpotInstance?: boolean(name='UseSpotInstance'),
}

model Member {
  memberId?: string(name='MemberId'),
  memberType?: string(name='MemberType'),
}

model Metric {
  time?: long(name='Time'),
  value?: float(name='Value'),
}

model NodeMetric {
  metrics?: [
    Metric
  ](name='Metrics'),
  nodeName?: string(name='NodeName'),
}

model PodMetric {
  metrics?: [
    Metric
  ](name='Metrics'),
  podId?: string(name='PodId'),
}

model Quota {
  clusterId?: string(name='ClusterId'),
  clusterName?: string(name='ClusterName'),
  quotaConfig?: QuotaConfig(name='QuotaConfig'),
  quotaId?: string(name='QuotaId'),
  quotaName?: string(name='QuotaName'),
  quotaType?: string(name='QuotaType'),
  totalQuota?: QuotaDetail(name='TotalQuota'),
  totalTideQuota?: QuotaDetail(name='TotalTideQuota'),
  usedQuota?: QuotaDetail(name='UsedQuota'),
  usedTideQuota?: QuotaDetail(name='UsedTideQuota'),
}

model QuotaConfig {
  allowedMaxPriority?: int32(name='AllowedMaxPriority'),
  enableDLC?: boolean(name='EnableDLC'),
  enableDSW?: boolean(name='EnableDSW'),
  enableTideResource?: boolean(name='EnableTideResource'),
  resourceLevel?: string(name='ResourceLevel'),
}

model QuotaDetail {
  CPU?: string(name='CPU'),
  GPU?: string(name='GPU'),
  GPUDetails?: [
    GPUDetail
  ](name='GPUDetails'),
  GPUType?: string(name='GPUType'),
  GPUTypeFullName?: string(name='GPUTypeFullName'),
  memory?: string(name='Memory'),
}

model ResourceConfig {
  CPU?: string(name='CPU'),
  GPU?: string(name='GPU'),
  GPUType?: string(name='GPUType'),
  memory?: string(name='Memory'),
  sharedMemory?: string(name='SharedMemory'),
}

model ResourceRequirements {
  limits?: map[string]string(name='Limits'),
  requests?: map[string]string(name='Requests'),
}

model Resources {
  CPU?: string(name='CPU'),
  GPU?: string(name='GPU'),
  memory?: string(name='Memory'),
}

model SmartCache {
  cacheWorkerNum?: long(name='CacheWorkerNum'),
  cacheWorkerSize?: long(name='CacheWorkerSize'),
  description?: string(name='Description'),
  displayName?: string(name='DisplayName'),
  duration?: string(name='Duration'),
  endpoint?: string(name='Endpoint'),
  fileSystemId?: string(name='FileSystemId'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifyTime?: string(name='GmtModifyTime'),
  mountPath?: string(name='MountPath'),
  options?: string(name='Options'),
  path?: string(name='Path'),
  smartCacheId?: string(name='SmartCacheId'),
  status?: string(name='Status'),
  type?: string(name='Type'),
  userId?: string(name='UserId'),
}

model Tensorboard {
  dataSourceId?: string(name='DataSourceId'),
  displayName?: string(name='DisplayName'),
  duration?: string(name='Duration'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifyTime?: string(name='GmtModifyTime'),
  jobId?: string(name='JobId'),
  reasonCode?: string(name='ReasonCode'),
  reasonMessage?: string(name='ReasonMessage'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  summaryPath?: string(name='SummaryPath'),
  tensorboardId?: string(name='TensorboardId'),
  tensorboardUrl?: string(name='TensorboardUrl'),
  userId?: string(name='UserId'),
}

model Workspace {
  creator?: string(name='Creator'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifyTime?: string(name='GmtModifyTime'),
  members?: [
    Member
  ](name='Members'),
  quotas?: [
    Quota
  ](name='Quotas'),
  totalResources?: Resources(name='TotalResources'),
  workspaceAdmins?: [
    Member
  ](name='WorkspaceAdmins'),
  workspaceId?: string(name='WorkspaceId'),
  workspaceName?: string(name='WorkspaceName'),
}

model CreateJobRequest {
  codeSource?: {
    branch?: string(name='Branch'),
    codeSourceId?: string(name='CodeSourceId'),
    commit?: string(name='Commit'),
    mountPath?: string(name='MountPath'),
  }(name='CodeSource'),
  dataSources?: [ 
    {
      dataSourceId?: string(name='DataSourceId'),
      mountPath?: string(name='MountPath'),
    }
  ](name='DataSources'),
  debuggerConfigContent?: string(name='DebuggerConfigContent'),
  displayName?: string(name='DisplayName'),
  elasticSpec?: JobElasticSpec(name='ElasticSpec'),
  envs?: map[string]string(name='Envs'),
  jobMaxRunningTimeMinutes?: long(name='JobMaxRunningTimeMinutes'),
  jobSpecs?: [
    JobSpec
  ](name='JobSpecs'),
  jobType?: string(name='JobType'),
  options?: string(name='Options'),
  priority?: int32(name='Priority'),
  resourceId?: string(name='ResourceId'),
  settings?: JobSettings(name='Settings'),
  thirdpartyLibDir?: string(name='ThirdpartyLibDir'),
  thirdpartyLibs?: [ string ](name='ThirdpartyLibs'),
  userCommand?: string(name='UserCommand'),
  userVpc?: {
    extendedCIDRs?: [ string ](name='ExtendedCIDRs'),
    securityGroupId?: string(name='SecurityGroupId'),
    switchId?: string(name='SwitchId'),
    vpcId?: string(name='VpcId'),
  }(name='UserVpc'),
  workspaceId?: string(name='WorkspaceId'),
}

model CreateJobResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
}

model CreateJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateJobResponseBody(name='body'),
}

async function createJob(request: CreateJobRequest): CreateJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createJobWithOptions(request, headers, runtime);
}

async function createJobWithOptions(request: CreateJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.codeSource)) {
    body['CodeSource'] = request.codeSource;
  }
  if (!Util.isUnset(request.dataSources)) {
    body['DataSources'] = request.dataSources;
  }
  if (!Util.isUnset(request.debuggerConfigContent)) {
    body['DebuggerConfigContent'] = request.debuggerConfigContent;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.elasticSpec)) {
    body['ElasticSpec'] = request.elasticSpec;
  }
  if (!Util.isUnset(request.envs)) {
    body['Envs'] = request.envs;
  }
  if (!Util.isUnset(request.jobMaxRunningTimeMinutes)) {
    body['JobMaxRunningTimeMinutes'] = request.jobMaxRunningTimeMinutes;
  }
  if (!Util.isUnset(request.jobSpecs)) {
    body['JobSpecs'] = request.jobSpecs;
  }
  if (!Util.isUnset(request.jobType)) {
    body['JobType'] = request.jobType;
  }
  if (!Util.isUnset(request.options)) {
    body['Options'] = request.options;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.resourceId)) {
    body['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.settings)) {
    body['Settings'] = request.settings;
  }
  if (!Util.isUnset(request.thirdpartyLibDir)) {
    body['ThirdpartyLibDir'] = request.thirdpartyLibDir;
  }
  if (!Util.isUnset(request.thirdpartyLibs)) {
    body['ThirdpartyLibs'] = request.thirdpartyLibs;
  }
  if (!Util.isUnset(request.userCommand)) {
    body['UserCommand'] = request.userCommand;
  }
  if (!Util.isUnset(request.userVpc)) {
    body['UserVpc'] = request.userVpc;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateJob',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateTensorboardRequest {
  dataSourceId?: string(name='DataSourceId'),
  dataSourceType?: string(name='DataSourceType'),
  dataSources?: [
    DataSourceItem
  ](name='DataSources'),
  displayName?: string(name='DisplayName'),
  jobId?: string(name='JobId'),
  maxRunningTimeMinutes?: long(name='MaxRunningTimeMinutes'),
  options?: string(name='Options'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  summaryPath?: string(name='SummaryPath'),
  summaryRelativePath?: string(name='SummaryRelativePath'),
  uri?: string(name='Uri'),
  workspaceId?: string(name='WorkspaceId'),
}

model CreateTensorboardResponseBody = {
  dataSourceId?: string(name='DataSourceId'),
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
  tensorboardId?: string(name='TensorboardId'),
}

model CreateTensorboardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTensorboardResponseBody(name='body'),
}

async function createTensorboard(request: CreateTensorboardRequest): CreateTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTensorboardWithOptions(request, headers, runtime);
}

async function createTensorboardWithOptions(request: CreateTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTensorboardResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.dataSourceId)) {
    body['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    body['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.dataSources)) {
    body['DataSources'] = request.dataSources;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.maxRunningTimeMinutes)) {
    body['MaxRunningTimeMinutes'] = request.maxRunningTimeMinutes;
  }
  if (!Util.isUnset(request.options)) {
    body['Options'] = request.options;
  }
  if (!Util.isUnset(request.sourceId)) {
    body['SourceId'] = request.sourceId;
  }
  if (!Util.isUnset(request.sourceType)) {
    body['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.summaryPath)) {
    body['SummaryPath'] = request.summaryPath;
  }
  if (!Util.isUnset(request.summaryRelativePath)) {
    body['SummaryRelativePath'] = request.summaryRelativePath;
  }
  if (!Util.isUnset(request.uri)) {
    body['Uri'] = request.uri;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTensorboard',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteJobResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
}

model DeleteJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteJobResponseBody(name='body'),
}

async function deleteJob(JobId: string): DeleteJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteJobWithOptions(JobId, headers, runtime);
}

async function deleteJobWithOptions(JobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteJobResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteJob',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${OpenApiUtil.getEncodeParam(JobId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteTensorboardRequest {
  workspaceId?: string(name='WorkspaceId'),
}

model DeleteTensorboardResponseBody = {
  requestId?: string(name='RequestId'),
  tensorboardId?: string(name='TensorboardId'),
}

model DeleteTensorboardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTensorboardResponseBody(name='body'),
}

async function deleteTensorboard(TensorboardId: string, request: DeleteTensorboardRequest): DeleteTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteTensorboardWithOptions(TensorboardId, request, headers, runtime);
}

async function deleteTensorboardWithOptions(TensorboardId: string, request: DeleteTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTensorboardResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTensorboard',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards/${OpenApiUtil.getEncodeParam(TensorboardId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetJobResponseBody = {
  clusterId?: string(name='ClusterId'),
  codeSource?: {
    branch?: string(name='Branch'),
    codeSourceId?: string(name='CodeSourceId'),
    commit?: string(name='Commit'),
    mountPath?: string(name='MountPath'),
  }(name='CodeSource'),
  dataSources?: [ 
    {
      dataSourceId?: string(name='DataSourceId'),
      mountPath?: string(name='MountPath'),
    }
  ](name='DataSources'),
  displayName?: string(name='DisplayName'),
  duration?: long(name='Duration'),
  elasticSpec?: JobElasticSpec(name='ElasticSpec'),
  enabledDebugger?: boolean(name='EnabledDebugger'),
  envs?: map[string]string(name='Envs'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtFailedTime?: string(name='GmtFailedTime'),
  gmtFinishTime?: string(name='GmtFinishTime'),
  gmtRunningTime?: string(name='GmtRunningTime'),
  gmtStoppedTime?: string(name='GmtStoppedTime'),
  gmtSubmittedTime?: string(name='GmtSubmittedTime'),
  gmtSuccessedTime?: string(name='GmtSuccessedTime'),
  jobId?: string(name='JobId'),
  jobSpecs?: [
    JobSpec
  ](name='JobSpecs'),
  jobType?: string(name='JobType'),
  pods?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime'),
      gmtFinishTime?: string(name='GmtFinishTime'),
      gmtStartTime?: string(name='GmtStartTime'),
      historyPods?: [ 
        {
          gmtCreateTime?: string(name='GmtCreateTime'),
          gmtFinishTime?: string(name='GmtFinishTime'),
          gmtStartTime?: string(name='GmtStartTime'),
          ip?: string(name='Ip'),
          podId?: string(name='PodId'),
          podUid?: string(name='PodUid'),
          status?: string(name='Status'),
          type?: string(name='Type'),
        }
      ](name='HistoryPods'),
      ip?: string(name='Ip'),
      podId?: string(name='PodId'),
      podUid?: string(name='PodUid'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='Pods'),
  priority?: int32(name='Priority'),
  reasonCode?: string(name='ReasonCode'),
  reasonMessage?: string(name='ReasonMessage'),
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
  resourceLevel?: string(name='ResourceLevel'),
  settings?: JobSettings(name='Settings'),
  status?: string(name='Status'),
  thirdpartyLibDir?: string(name='ThirdpartyLibDir'),
  thirdpartyLibs?: [ string ](name='ThirdpartyLibs'),
  userCommand?: string(name='UserCommand'),
  userId?: string(name='UserId'),
  workspaceId?: string(name='WorkspaceId'),
  workspaceName?: string(name='WorkspaceName'),
}

model GetJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetJobResponseBody(name='body'),
}

async function getJob(JobId: string): GetJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getJobWithOptions(JobId, headers, runtime);
}

async function getJobWithOptions(JobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetJobResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetJob',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${OpenApiUtil.getEncodeParam(JobId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetJobEventsRequest {
  endTime?: string(name='EndTime'),
  maxEventsNum?: int32(name='MaxEventsNum'),
  startTime?: string(name='StartTime'),
}

model GetJobEventsResponseBody = {
  events?: [ string ](name='Events'),
  jobId?: string(name='JobId'),
  requestId?: int32(name='RequestId'),
}

model GetJobEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetJobEventsResponseBody(name='body'),
}

async function getJobEvents(JobId: string, request: GetJobEventsRequest): GetJobEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getJobEventsWithOptions(JobId, request, headers, runtime);
}

async function getJobEventsWithOptions(JobId: string, request: GetJobEventsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetJobEventsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.maxEventsNum)) {
    query['MaxEventsNum'] = request.maxEventsNum;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetJobEvents',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${OpenApiUtil.getEncodeParam(JobId)}/events`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetJobMetricsRequest {
  endTime?: string(name='EndTime'),
  metricType?: string(name='MetricType'),
  startTime?: string(name='StartTime'),
  timeStep?: string(name='TimeStep'),
  token?: string(name='Token'),
}

model GetJobMetricsResponseBody = {
  jobId?: string(name='JobId'),
  podMetrics?: [
    PodMetric
  ](name='PodMetrics'),
  requestId?: string(name='RequestId'),
}

model GetJobMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetJobMetricsResponseBody(name='body'),
}

async function getJobMetrics(JobId: string, request: GetJobMetricsRequest): GetJobMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getJobMetricsWithOptions(JobId, request, headers, runtime);
}

async function getJobMetricsWithOptions(JobId: string, request: GetJobMetricsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetJobMetricsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.metricType)) {
    query['MetricType'] = request.metricType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.timeStep)) {
    query['TimeStep'] = request.timeStep;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetJobMetrics',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${OpenApiUtil.getEncodeParam(JobId)}/metrics`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPodEventsRequest {
  endTime?: string(name='EndTime'),
  maxEventsNum?: int32(name='MaxEventsNum'),
  podUid?: string(name='PodUid'),
  startTime?: string(name='StartTime'),
}

model GetPodEventsResponseBody = {
  events?: [ string ](name='Events'),
  jobId?: string(name='JobId'),
  podId?: string(name='PodId'),
  podUid?: string(name='PodUid'),
  requestId?: string(name='RequestId'),
}

model GetPodEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPodEventsResponseBody(name='body'),
}

async function getPodEvents(JobId: string, PodId: string, request: GetPodEventsRequest): GetPodEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPodEventsWithOptions(JobId, PodId, request, headers, runtime);
}

async function getPodEventsWithOptions(JobId: string, PodId: string, request: GetPodEventsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPodEventsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.maxEventsNum)) {
    query['MaxEventsNum'] = request.maxEventsNum;
  }
  if (!Util.isUnset(request.podUid)) {
    query['PodUid'] = request.podUid;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPodEvents',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${OpenApiUtil.getEncodeParam(JobId)}/pods/${OpenApiUtil.getEncodeParam(PodId)}/events`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPodLogsRequest {
  downloadToFile?: boolean(name='DownloadToFile'),
  endTime?: string(name='EndTime'),
  maxLines?: int32(name='MaxLines'),
  podUid?: string(name='PodUid'),
  startTime?: string(name='StartTime'),
}

model GetPodLogsResponseBody = {
  jobId?: string(name='JobId'),
  logs?: [ string ](name='Logs'),
  podId?: string(name='PodId'),
  podUid?: string(name='PodUid'),
  requestId?: string(name='RequestId'),
}

model GetPodLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPodLogsResponseBody(name='body'),
}

async function getPodLogs(JobId: string, PodId: string, request: GetPodLogsRequest): GetPodLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPodLogsWithOptions(JobId, PodId, request, headers, runtime);
}

async function getPodLogsWithOptions(JobId: string, PodId: string, request: GetPodLogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPodLogsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.downloadToFile)) {
    query['DownloadToFile'] = request.downloadToFile;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.maxLines)) {
    query['MaxLines'] = request.maxLines;
  }
  if (!Util.isUnset(request.podUid)) {
    query['PodUid'] = request.podUid;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPodLogs',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${OpenApiUtil.getEncodeParam(JobId)}/pods/${OpenApiUtil.getEncodeParam(PodId)}/logs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetTensorboardRequest {
  jodId?: string(name='JodId'),
  workspaceId?: string(name='WorkspaceId'),
}

model GetTensorboardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Tensorboard  
}

async function getTensorboard(TensorboardId: string, request: GetTensorboardRequest): GetTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTensorboardWithOptions(TensorboardId, request, headers, runtime);
}

async function getTensorboardWithOptions(TensorboardId: string, request: GetTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTensorboardResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.jodId)) {
    query['JodId'] = request.jodId;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTensorboard',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards/${OpenApiUtil.getEncodeParam(TensorboardId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListEcsSpecsRequest {
  acceleratorType?: string(name='AcceleratorType'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  sortBy?: string(name='SortBy'),
}

model ListEcsSpecsResponseBody = {
  ecsSpecs?: [
    EcsSpec
  ](name='EcsSpecs'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListEcsSpecsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEcsSpecsResponseBody(name='body'),
}

async function listEcsSpecs(request: ListEcsSpecsRequest): ListEcsSpecsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listEcsSpecsWithOptions(request, headers, runtime);
}

async function listEcsSpecsWithOptions(request: ListEcsSpecsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListEcsSpecsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.acceleratorType)) {
    query['AcceleratorType'] = request.acceleratorType;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEcsSpecs',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/ecsspecs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListJobsRequest {
  businessUserId?: string(name='BusinessUserId'),
  caller?: string(name='Caller'),
  displayName?: string(name='DisplayName'),
  endTime?: string(name='EndTime'),
  fromAllWorkspaces?: boolean(name='FromAllWorkspaces'),
  jobId?: string(name='JobId'),
  jobType?: string(name='JobType'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  pipelineId?: string(name='PipelineId'),
  resourceId?: string(name='ResourceId'),
  showOwn?: boolean(name='ShowOwn'),
  sortBy?: string(name='SortBy'),
  startTime?: string(name='StartTime'),
  status?: string(name='Status'),
  tags?: map[string]string(name='Tags'),
  workspaceId?: string(name='WorkspaceId'),
}

model ListJobsShrinkRequest {
  businessUserId?: string(name='BusinessUserId'),
  caller?: string(name='Caller'),
  displayName?: string(name='DisplayName'),
  endTime?: string(name='EndTime'),
  fromAllWorkspaces?: boolean(name='FromAllWorkspaces'),
  jobId?: string(name='JobId'),
  jobType?: string(name='JobType'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  pipelineId?: string(name='PipelineId'),
  resourceId?: string(name='ResourceId'),
  showOwn?: boolean(name='ShowOwn'),
  sortBy?: string(name='SortBy'),
  startTime?: string(name='StartTime'),
  status?: string(name='Status'),
  tagsShrink?: string(name='Tags'),
  workspaceId?: string(name='WorkspaceId'),
}

model ListJobsResponseBody = {
  jobs?: [
    JobItem
  ](name='Jobs'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListJobsResponseBody(name='body'),
}

async function listJobs(request: ListJobsRequest): ListJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listJobsWithOptions(request, headers, runtime);
}

async function listJobsWithOptions(tmpReq: ListJobsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListJobsResponse {
  Util.validateModel(tmpReq);
  var request = new ListJobsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.businessUserId)) {
    query['BusinessUserId'] = request.businessUserId;
  }
  if (!Util.isUnset(request.caller)) {
    query['Caller'] = request.caller;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.fromAllWorkspaces)) {
    query['FromAllWorkspaces'] = request.fromAllWorkspaces;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.jobType)) {
    query['JobType'] = request.jobType;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pipelineId)) {
    query['PipelineId'] = request.pipelineId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.showOwn)) {
    query['ShowOwn'] = request.showOwn;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListJobs',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListTensorboardsRequest {
  displayName?: string(name='DisplayName'),
  endTime?: string(name='EndTime'),
  jobId?: string(name='JobId'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  sortBy?: string(name='SortBy'),
  sourceId?: string(name='SourceId'),
  sourceType?: string(name='SourceType'),
  startTime?: string(name='StartTime'),
  status?: string(name='Status'),
  tensorboardId?: string(name='TensorboardId'),
  verbose?: boolean(name='Verbose'),
  workspaceId?: string(name='WorkspaceId'),
}

model ListTensorboardsResponseBody = {
  requestId?: string(name='RequestId'),
  tensorboards?: [
    Tensorboard
  ](name='Tensorboards'),
  totalCount?: long(name='TotalCount'),
}

model ListTensorboardsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTensorboardsResponseBody(name='body'),
}

async function listTensorboards(request: ListTensorboardsRequest): ListTensorboardsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTensorboardsWithOptions(request, headers, runtime);
}

async function listTensorboardsWithOptions(request: ListTensorboardsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTensorboardsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.sourceId)) {
    query['SourceId'] = request.sourceId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tensorboardId)) {
    query['TensorboardId'] = request.tensorboardId;
  }
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTensorboards',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StartTensorboardRequest {
  workspaceId?: string(name='WorkspaceId'),
}

model StartTensorboardResponseBody = {
  requestId?: string(name='RequestId'),
  tensorboardId?: string(name='TensorboardId'),
}

model StartTensorboardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartTensorboardResponseBody(name='body'),
}

async function startTensorboard(TensorboardId: string, request: StartTensorboardRequest): StartTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startTensorboardWithOptions(TensorboardId, request, headers, runtime);
}

async function startTensorboardWithOptions(TensorboardId: string, request: StartTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartTensorboardResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartTensorboard',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards/${OpenApiUtil.getEncodeParam(TensorboardId)}/start`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StopJobResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
}

model StopJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopJobResponseBody(name='body'),
}

async function stopJob(JobId: string): StopJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopJobWithOptions(JobId, headers, runtime);
}

async function stopJobWithOptions(JobId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopJobResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StopJob',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${OpenApiUtil.getEncodeParam(JobId)}/stop`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StopTensorboardRequest {
  workspaceId?: string(name='WorkspaceId'),
}

model StopTensorboardResponseBody = {
  requestId?: string(name='RequestId'),
  tensorboardId?: string(name='TensorboardId'),
}

model StopTensorboardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopTensorboardResponseBody(name='body'),
}

async function stopTensorboard(TensorboardId: string, request: StopTensorboardRequest): StopTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopTensorboardWithOptions(TensorboardId, request, headers, runtime);
}

async function stopTensorboardWithOptions(TensorboardId: string, request: StopTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopTensorboardResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopTensorboard',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards/${OpenApiUtil.getEncodeParam(TensorboardId)}/stop`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateJobRequest {
  priority?: int32(name='Priority'),
}

model UpdateJobResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
}

model UpdateJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateJobResponseBody(name='body'),
}

async function updateJob(JobId: string, request: UpdateJobRequest): UpdateJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateJobWithOptions(JobId, request, headers, runtime);
}

async function updateJobWithOptions(JobId: string, request: UpdateJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateJob',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/${OpenApiUtil.getEncodeParam(JobId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateTensorboardRequest {
  maxRunningTimeMinutes?: long(name='MaxRunningTimeMinutes'),
  workspaceId?: string(name='WorkspaceId'),
}

model UpdateTensorboardResponseBody = {
  requestId?: string(name='RequestId'),
  tensorboardId?: string(name='TensorboardId'),
}

model UpdateTensorboardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTensorboardResponseBody(name='body'),
}

async function updateTensorboard(TensorboardId: string, request: UpdateTensorboardRequest): UpdateTensorboardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateTensorboardWithOptions(TensorboardId, request, headers, runtime);
}

async function updateTensorboardWithOptions(TensorboardId: string, request: UpdateTensorboardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTensorboardResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.maxRunningTimeMinutes)) {
    query['MaxRunningTimeMinutes'] = request.maxRunningTimeMinutes;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTensorboard',
    version = '2020-12-03',
    protocol = 'HTTPS',
    pathname = `/api/v1/tensorboards/${OpenApiUtil.getEncodeParam(TensorboardId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

