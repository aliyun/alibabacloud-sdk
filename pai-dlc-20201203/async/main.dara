/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'pai-dlc';
  @version = '2020-12-03';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'pai-dlc.aliyuncs.com',
    ap-northeast-2-pop = 'pai-dlc.aliyuncs.com',
    ap-south-1 = 'pai-dlc.aliyuncs.com',
    ap-southeast-2 = 'pai-dlc.aliyuncs.com',
    ap-southeast-3 = 'pai-dlc.aliyuncs.com',
    ap-southeast-5 = 'pai-dlc.aliyuncs.com',
    cn-beijing-finance-1 = 'pai-dlc.aliyuncs.com',
    cn-beijing-finance-pop = 'pai-dlc.aliyuncs.com',
    cn-beijing-gov-1 = 'pai-dlc.aliyuncs.com',
    cn-beijing-nu16-b01 = 'pai-dlc.aliyuncs.com',
    cn-chengdu = 'pai-dlc.aliyuncs.com',
    cn-edge-1 = 'pai-dlc.aliyuncs.com',
    cn-fujian = 'pai-dlc.aliyuncs.com',
    cn-haidian-cm12-c01 = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-finance = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'pai-dlc.aliyuncs.com',
    cn-hangzhou-test-306 = 'pai-dlc.aliyuncs.com',
    cn-hongkong-finance-pop = 'pai-dlc.aliyuncs.com',
    cn-huhehaote = 'pai-dlc.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'pai-dlc.aliyuncs.com',
    cn-north-2-gov-1 = 'pai-dlc.aliyuncs.com',
    cn-qingdao = 'pai-dlc.aliyuncs.com',
    cn-qingdao-nebula = 'pai-dlc.aliyuncs.com',
    cn-shanghai-et15-b01 = 'pai-dlc.aliyuncs.com',
    cn-shanghai-et2-b01 = 'pai-dlc.aliyuncs.com',
    cn-shanghai-inner = 'pai-dlc.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'pai-dlc.aliyuncs.com',
    cn-shenzhen-finance-1 = 'pai-dlc.aliyuncs.com',
    cn-shenzhen-inner = 'pai-dlc.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'pai-dlc.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'pai-dlc.aliyuncs.com',
    cn-wuhan = 'pai-dlc.aliyuncs.com',
    cn-wulanchabu = 'pai-dlc.aliyuncs.com',
    cn-yushanfang = 'pai-dlc.aliyuncs.com',
    cn-zhangbei = 'pai-dlc.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'pai-dlc.aliyuncs.com',
    cn-zhangjiakou = 'pai-dlc.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'pai-dlc.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'pai-dlc.aliyuncs.com',
    eu-west-1 = 'pai-dlc.aliyuncs.com',
    eu-west-1-oxs = 'pai-dlc.aliyuncs.com',
    me-east-1 = 'pai-dlc.aliyuncs.com',
    rus-west-1-pop = 'pai-dlc.aliyuncs.com',
    us-east-1 = 'pai-dlc.aliyuncs.com',
    us-west-1 = 'pai-dlc.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AliyunAccounts {
  aliyunUid?: string(name='AliyunUid', description='Aliyun账号的UID'),
  employeeId?: string(name='EmployeeId', description='弹内用户的工号'),
  gmtCreateTime?: string(name='GmtCreateTime', description='这条记录的创建时间'),
  gmtModifyTime?: string(name='GmtModifyTime', description='这条记录的上次修改时间'),
}

model CodeSourceItem {
  codeBranch?: string(name='CodeBranch', description='代码分支', example='master'),
  codeCommit?: string(name='CodeCommit', description='代码Commit ID', example='44da1*******'),
  codeRepo?: string(name='CodeRepo', description='代码仓库地址', example='https://code.aliyun.com/pai-dlc/examples.git'),
  codeRepoAccessToken?: string(name='CodeRepoAccessToken', description='访问代码仓库所用的AccessToken'),
  codeRepoUserName?: string(name='CodeRepoUserName', description='访问代码仓库的用户名', example='user'),
  codeSourceId?: string(name='CodeSourceId', description='代码源ID', example='code-20210111103721-85qz*****'),
  description?: string(name='Description', description='代码源详细描述', example='code source of dlc examples'),
  displayName?: string(name='DisplayName', description='代码源配置的名字', example='MyCodeSourceName1'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间', example='2021-01-18T12:52:15Z'),
  gmtModifyTime?: string(name='GmtModifyTime', description='修改时间', example='2021-01-18T12:52:15Z'),
  userId?: string(name='UserId', description='代码源配置的用户ID', example='115**********'),
}

model ContainerSpec {
  args?: [ string ](name='Args', description='命令参数'),
  command?: [ string ](name='Command', description='用户命令'),
  env?: [
    EnvVar
  ](name='Env', description='环境变量'),
  image?: string(name='Image', description='容器镜像地址', example='registry.cn-hangzhou.aliyuncs.com/pai-dlc/curl:v1.0.0'),
  name?: string(name='Name', description='容器名称', example='data-init'),
  resources?: ResourceRequirements(name='Resources', description='容器资源'),
  workingDir?: string(name='WorkingDir', description='容器内工作目录', example='/root'),
}

model DataSourceItem {
  dataSourceId?: string(name='DataSourceId', description='数据源Id', example='data-20210114104214-vf9lowjt3pso'),
  dataSourceType?: string(name='DataSourceType', description='数据源类型', example='nas'),
  description?: string(name='Description', description='数据源描述', example='data source of dlc examples'),
  displayName?: string(name='DisplayName', description='数据源显示名称', example='nas-data'),
  endpoint?: string(name='Endpoint', description='阿里云OSS文件系统服务端点', example='oss-cn-beijing-internal.aliyuncs.com'),
  fileSystemId?: string(name='FileSystemId', description='阿里云NAS文件系统Id', example='1ca404****'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间（UTC）', example='2021-01-12T14:35:00Z'),
  gmtModifyTime?: string(name='GmtModifyTime', description='修改时间（UTC）', example='2021-01-12T14:36:00Z'),
  mountPath?: string(name='MountPath', description='本地挂载目录', example='/root/data/'),
  options?: string(name='Options', description='阿里云OSS文件系统配置选项', example='{"key": "value"}'),
  path?: string(name='Path', description='阿里云OSS文件系统路径', example='oss://mybucket/path/to/dir'),
  userId?: string(name='UserId', description='创建人Id', example='123456789'),
}

model DebuggerConfig {
  content?: string(name='Content', description='配置项细节，json结构', example='{\\"description\\":\\"这是一个新的pytorchjob模板\\"}'),
  debuggerConfigId?: string(name='DebuggerConfigId', description='系统生成的debug config唯一ID', example='dc-vf9lowjt3pso'),
  description?: string(name='Description', description='配置项描述', example='这是一个Pytorch的基础配置模板'),
  displayName?: string(name='DisplayName', description='模板配置项名称', example='Pytorch Experiment Config'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间（UTC）', example='2021-01-12T14:35:00Z'),
  gmtModifyTime?: string(name='GmtModifyTime', description='修改时间（UTC）', example='2021-01-12T14:36:00Z'),
}

model DebuggerJob {
  debuggerJobId?: string(name='DebuggerJobId', description='debugger分析作业ID', example='dlc20210126170216-mtl37ge7gkvdz'),
  displayName?: string(name='DisplayName', description='作业显示名', example='dlc debugger test'),
  duration?: string(name='Duration', description='作业运行的时长（单位秒）', example='2932'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间（UTC）', example='2021-01-12T14:35:00Z'),
  gmtFailedTime?: string(name='GmtFailedTime', description='失败时间（UTC）'),
  gmtFinishTime?: string(name='GmtFinishTime', description='任务完成时间（UTC）'),
  gmtRunningTime?: string(name='GmtRunningTime', description='运行开始时间（UTC）'),
  gmtStoppedTime?: string(name='GmtStoppedTime', description='结束时间（UTC）'),
  gmtSubmittedTime?: string(name='GmtSubmittedTime', description='提交时间（UTC）'),
  gmtSucceedTime?: string(name='GmtSucceedTime', description='成功结束时间（UTC）'),
  status?: string(name='Status', description='作业运行状态', example='Running'),
  userId?: string(name='UserId', description='用户ID', example='12344556'),
  workspaceId?: string(name='WorkspaceId', description='作业所属的运行工作空间', example='workspace01'),
  workspaceName?: string(name='WorkspaceName', description='作业所属的运行工作空间名称', example='public'),
}

model DebuggerJobIssue {
  debuggerJobIssue?: string(name='DebuggerJobIssue', description='规则报告的具体json描述', example='{"Name": "CPUBottleneck",  "Triggered": 10, "Violations": 2,  "Details": "{}"}'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间（UTC）', example='2021-01-12T14:35:00Z'),
  jobDebuggerIssueId?: string(name='JobDebuggerIssueId', description='event的全局唯一ID', example='de-826ca1bcfba30'),
  jobId?: string(name='JobId', description='作业ID', example='dlc-20210126170216-mtl37ge7gkvdz'),
  reasonCode?: string(name='ReasonCode', description='规则触发原因的编码', example='1002300'),
  reasonMessage?: string(name='ReasonMessage', description='规则触发的原因', example='GPU利用率低'),
  ruleName?: string(name='RuleName', description='规则名称', example='ProfileReport'),
}

model DebuggerResult {
  debuggerConfigContent?: string(name='DebuggerConfigContent', description='配置项细节，json结构', example='{\\"description\\":\\"这是一个新的pytorchjob模板\\"}'),
  debuggerJobIssues?: string(name='DebuggerJobIssues', description='规则报告细节信息', example='{ "ProfileReport": { "Name": "CPUBottleneck","Triggered": 10,"Violations": 2,"Details": "{}"}, "LowCPU": { "Name": "CPUBottleneck","Triggered": 10,"Violations": 2,"Details": "{}"}}'),
  debuggerJobStatus?: string(name='DebuggerJobStatus', description='debugger job运行状态描述', example='{"Running": 1, "Failed": 1, "Succeeded": 2}'),
  debuggerReportURL?: string(name='DebuggerReportURL', description='报告文件下载地址', example='http://xxx.com/debug/report/download/new_xxxx.html'),
  jobDisplayName?: string(name='JobDisplayName', description='作业显示名', example='dlc debugger test'),
  jobId?: string(name='JobId', description='作业ID', example='dlc-20210126170216-mtl37ge7gkvdz'),
  jobUserId?: string(name='JobUserId', description='用户ID', example='12344556'),
}

model EcsSpec {
  acceleratorType?: string(name='AcceleratorType', description='加速器类型', example='GPU'),
  cpu?: int32(name='Cpu', description='cpu数量', example='12'),
  gpu?: int32(name='Gpu', description='gpu数量', example='1'),
  gpuType?: string(name='GpuType', description='gpu类型', example='NVIDIA v100'),
  instanceType?: string(name='InstanceType', description='规格类型', example='ecs.gn6e-c12g1.3xlarge'),
  isAvailable?: boolean(name='IsAvailable', description='是否有库存', example='true'),
  memory?: int32(name='Memory', description='Memory数量', example='92'),
}

model EnvVar {
  name?: string(name='Name', description='环境变量名称', example='ENABLE_DEBUG'),
  value?: string(name='Value', description='环境变量值', example='true'),
}

model ExtraPodSpec {
  initContainers?: [
    ContainerSpec
  ](name='InitContainers', description='初始化容器'),
  podAnnotations?: map[string]string(name='PodAnnotations', description='Pod注解'),
  podLabels?: map[string]string(name='PodLabels', description='Pod标签'),
  sharedVolumeMountPaths?: [ string ](name='SharedVolumeMountPaths', description='容器间共享的本地目录'),
  sideCarContainers?: [
    ContainerSpec
  ](name='SideCarContainers', description='伴随容器'),
}

model GPUDetail {
  GPU?: string(name='GPU', description='GPU卡数'),
  GPUType?: string(name='GPUType', description='GPU卡型', example='Tesla-V100-32G'),
  GPUTypeFullName?: string(name='GPUTypeFullName', description='GPU卡型全名', example='nvidia.com/gpu-tesla-v100-sxm2-16gb'),
}

model ImageItem {
  acceleratorType?: string(name='AcceleratorType', description='加速器类型', example='gpu'),
  authorId?: string(name='AuthorId', description='镜像作者', example='ken'),
  framework?: string(name='Framework', description='镜像包含的框架类型', example='PyTorchJob'),
  imageProviderType?: string(name='ImageProviderType', description='镜像类型', example='Community'),
  imageTag?: string(name='ImageTag', description='镜像Tag', example='tensorflow-training:2.3-cpu-py36-ubuntu18.04'),
  imageUrl?: string(name='ImageUrl', description='镜像地址', example='registry.cn-beijing.aliyuncs.com/pai-dlc/tensorflow-training:2.3-cpu-py36-ubuntu18.04'),
  imageUrlVpc?: string(name='ImageUrlVpc', description='镜像vpc地址', example='registry-vpc.cn-beijing.aliyuncs.com/pai-dlc/tensorflow-training:2.3-cpu-py36-ubuntu18.04'),
}

model JobDebuggerConfig {
  debuggerConfigContent?: string(name='DebuggerConfigContent', description='debugger配置信息'),
  debuggerConfigId?: string(name='DebuggerConfigId', description='debugger配置项ID'),
  gmtCreateTime?: string(name='GmtCreateTime', description='debugger配置创建的时间'),
  jobId?: string(name='JobId', description='作业ID'),
}

model JobElasticSpec {
  AIMasterType?: string(name='AIMasterType', description='aimaster角色使用的资源规格'),
  enableElasticTraining?: boolean(name='EnableElasticTraining', description='打开弹性训练', example='true'),
  maxParallelism?: int32(name='MaxParallelism', description='最大并行度', example='8'),
  minParallelism?: int32(name='MinParallelism', description='最小并行度', example='1'),
}

model JobItem {
  codeSource?: {
    branch?: string(name='Branch', description='代码分支', example='master'),
    codeSourceId?: string(name='CodeSourceId', description='代码源Id', example='code-20210111103721-85qz78ia96lu'),
    commit?: string(name='Commit', description='代码Commit', example='44da109b59f8596152987eaa8f3b2487bb72ea63'),
    mountPath?: string(name='MountPath', description='本地挂载路径', example='/mnt/data'),
  }(name='CodeSource', description='代码源配置'),
  dataSources?: [ 
    {
      dataSourceId?: string(name='DataSourceId', description='数据源Id', example='data-20210114104214-vf9lowjt3pso'),
      mountPath?: string(name='MountPath', description='本地挂载路径', example='/mnt/data'),
    }
  ](name='DataSources', description='数据源配置列表'),
  displayName?: string(name='DisplayName', description='作业显示名称', example='tf-mnist-test'),
  duration?: long(name='Duration', description='作业运行时长，单位：秒', example='3602'),
  enabledDebugger?: boolean(name='EnabledDebugger', description='是否开启了debugger分析', example='false'),
  envs?: map[string]string(name='Envs', description='环境变量配置'),
  gmtCreateTime?: string(name='GmtCreateTime', description='作业创建时间（UTC）', example='2021-01-12T14:35:01Z'),
  gmtFailedTime?: string(name='GmtFailedTime', description='作业失败时间（UTC）', example='2021-01-12T14:35:01Z'),
  gmtFinishTime?: string(name='GmtFinishTime', description='作业结束时间（UTC）', example='2021-01-12T15:36:08Z'),
  gmtRunningTime?: string(name='GmtRunningTime', description='作业开始运行时间（UTC）', example='2021-01-12T14:35:01Z'),
  gmtStoppedTime?: string(name='GmtStoppedTime', description='作业停止时间（UTC）', example='2021-01-12T14:35:01Z'),
  gmtSubmittedTime?: string(name='GmtSubmittedTime', description='作业提交时间（UTC）', example='2021-01-12T14:35:01Z'),
  gmtSuccessedTime?: string(name='GmtSuccessedTime', description='作业成功完成时间（UTC）', example='2021-01-12T14:35:01Z'),
  jobId?: string(name='JobId', description='作业Id', example='dlc-20210126170216-mtl37ge7gkvdz'),
  jobSpecs?: [
    JobSpec
  ](name='JobSpecs', description='作业规格配置'),
  jobType?: string(name='JobType', description='作业类型', example='TFJob'),
  priority?: int32(name='Priority', description='任务优先级', example='1'),
  reasonCode?: string(name='ReasonCode', description='状态详情码', example='JobStoppedByUser'),
  reasonMessage?: string(name='ReasonMessage', description='状态详情', example='Job is stopped by user.'),
  resourceId?: string(name='ResourceId', description='作业运行所在的资源组ID', example='dlc-quota'),
  resourceLevel?: string(name='ResourceLevel', description='作业运行时的资源级别', example='L0'),
  resourceName?: string(name='ResourceName', description='作业运行的资源名称', example='my_resource_group'),
  settings?: JobSettings(name='Settings', description='作业额外参数'),
  status?: string(name='Status', description='作业状态', example='Stopped'),
  thirdpartyLibDir?: string(name='ThirdpartyLibDir', description='三方库(requirements.txt)文件路径', example='/root/code/'),
  thirdpartyLibs?: [ string ](name='ThirdpartyLibs', description='三方库配置列表'),
  userCommand?: string(name='UserCommand', description='用户命令', example='python /root/code/mnist.py'),
  userId?: string(name='UserId', description='作业提交人Id', example='123456789'),
  workspaceId?: string(name='WorkspaceId', description='作业所属工作空间ID', example='268'),
  workspaceName?: string(name='WorkspaceName', description='作业所属工作空间名称', example='dlc-workspace'),
}

model JobSettings {
  businessUserId?: string(name='BusinessUserId', description='作业关联用户ID', example='166924'),
  caller?: string(name='Caller', description='调用方', example='SilkFlow'),
  enableErrorMonitoringInAIMaster?: boolean(name='EnableErrorMonitoringInAIMaster', description='允许打开作业容错监控', example='false'),
  enableOssAppend?: boolean(name='EnableOssAppend', description='运行oss追加写', example='true'),
  enableRDMA?: boolean(name='EnableRDMA', description='允许作业使用RDMA', example='true'),
  enableTideResource?: boolean(name='EnableTideResource', description='允许作业使用潮汐资源', example='true'),
  errorMonitoringArgs?: string(name='ErrorMonitoringArgs', description='用户指定容错监控的配置参数，比如指定是否启动基于log hang的检测', example='--enable-log-hang-detection true'),
  pipelineId?: string(name='PipelineId', description='工作流ID', example='pid-123456'),
  tags?: map[string]string(name='Tags', description='自定义标签'),
}

model JobSpec {
  ecsSpec?: string(name='EcsSpec', description='Ecs实例规格', example='ecs.c6.large'),
  extraPodSpec?: ExtraPodSpec(name='ExtraPodSpec', description='额外的Pod配置'),
  image?: string(name='Image', description='镜像', example='registry.cn-hangzhou.aliyuncs.com/pai-dlc/tensorflow-training:1.12.2PAI-cpu-py27-ubuntu16.04'),
  podCount?: long(name='PodCount', description='实例数量', example='1'),
  resourceConfig?: ResourceConfig(name='ResourceConfig', description='资源配置'),
  type?: string(name='Type', description='类型', example='Worker'),
  useSpotInstance?: boolean(name='UseSpotInstance', description='是否使用竞价实例', example='false'),
}

model Member {
  memberId?: string(name='MemberId', description='成员id', example='ken_12345'),
  memberType?: string(name='MemberType', description='成员角色', example='WorkspaceAdmin'),
}

model Metric {
  time?: long(name='Time', description='时间戳（毫秒）', example='1616987726587'),
  value?: float(name='Value', description='样本值', example='23.45'),
}

model NodeMetric {
  metrics?: [
    Metric
  ](name='Metrics', description='监控指标样本序列'),
  nodeName?: string(name='NodeName', description='节点名称', example='asi_xxx'),
}

model PodMetric {
  metrics?: [
    Metric
  ](name='Metrics', description='监控指标样本序列'),
  podId?: string(name='PodId', description='Pod编号', example='dlc-20210329110128-746bf7cl47pr8-worker-0'),
}

model Quota {
  clusterId?: string(name='ClusterId', description='集群id'),
  clusterName?: string(name='ClusterName', description='集群名称'),
  quotaConfig?: QuotaConfig(name='QuotaConfig', description='资源配额设置'),
  quotaId?: string(name='QuotaId', description='资源配额id', example='quotamtl37ge7gkvdz'),
  quotaName?: string(name='QuotaName', description='资源配额名称', example='dlc-quota'),
  quotaType?: string(name='QuotaType', description='资源配额类型', example='asiquota'),
  totalQuota?: QuotaDetail(name='TotalQuota', description='资源总量'),
  totalTideQuota?: QuotaDetail(name='TotalTideQuota', description='潮汐资源总量'),
  usedQuota?: QuotaDetail(name='UsedQuota', description='资源用量'),
  usedTideQuota?: QuotaDetail(name='UsedTideQuota', description='潮汐资源用量'),
}

model QuotaConfig {
  allowedMaxPriority?: int32(name='AllowedMaxPriority', description='允许的最大优先级'),
  enableDLC?: boolean(name='EnableDLC', description='是否开启DLC'),
  enableDSW?: boolean(name='EnableDSW', description='是否开启DSW'),
  enableTideResource?: boolean(name='EnableTideResource', description='是否使用潮汐资源'),
  resourceLevel?: string(name='ResourceLevel', description='资源级别(L0, L1)'),
}

model QuotaDetail {
  CPU?: string(name='CPU', description='CPU核数', example='2'),
  GPU?: string(name='GPU', description='GPU卡数', example='5'),
  GPUDetails?: [
    GPUDetail
  ](name='GPUDetails', description='GPU详情'),
  GPUType?: string(name='GPUType', description='GPU卡型', example='Tesla-V100'),
  GPUTypeFullName?: string(name='GPUTypeFullName', description='GPU卡型全名', example='nvidia.com/gpu'),
  memory?: string(name='Memory', description='内存容量', example='10Gi'),
}

model ResourceConfig {
  CPU?: string(name='CPU', description='CPU核心数', example='10'),
  GPU?: string(name='GPU', description='GPU核心数', example='3'),
  GPUType?: string(name='GPUType', description='显卡类型', example='Tesla-V100-16G'),
  memory?: string(name='Memory', description='内存容量', example='10Gi'),
  sharedMemory?: string(name='SharedMemory', description='共享内存容量', example='5Gi'),
}

model ResourceRequirements {
  limits?: map[string]string(name='Limits', description='资源限制'),
  requests?: map[string]string(name='Requests', description='资源需求'),
}

model Resources {
  CPU?: string(name='CPU', description='CPU核心数', example='10'),
  GPU?: string(name='GPU', description='GPU卡数', example='8'),
  memory?: string(name='Memory', description='内存大小', example='1024（单位GB）'),
}

model SmartCache {
  cacheWorkerNum?: long(name='CacheWorkerNum', description='cache worker的数量单位是个', example='10'),
  cacheWorkerSize?: long(name='CacheWorkerSize', description='每个cache worker的cache大小单位是GB', example='100'),
  description?: string(name='Description', description='SmartCache 描述', example='test'),
  displayName?: string(name='DisplayName', description='SmartCache 名称', example='test'),
  duration?: string(name='Duration', description='已运行时长', example='123456'),
  endpoint?: string(name='Endpoint', description='OSS Endpoint', example='oss-cn-beijing-internal.aliyuncs.com'),
  fileSystemId?: string(name='FileSystemId', description='阿里云的NAS文件系统ID', example='1ca404****'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间（UTC）', example='2021-01-12T14:36:01Z'),
  gmtModifyTime?: string(name='GmtModifyTime', description='修改时间（UTC）', example='2021-01-12T23:36:01Z'),
  mountPath?: string(name='MountPath', description='数据源本地挂载目录', example='/root/data/'),
  options?: string(name='Options', description='可选的超参数', example='{"num_threads": 32}'),
  path?: string(name='Path', description='OSS数据源路径', example='oss://buc/path/to/dir'),
  smartCacheId?: string(name='SmartCacheId', description='SmartCacheId', example='smartcache-20210114104214-vf9lowjt3pso'),
  status?: string(name='Status', description='运行状态', example='Running'),
  type?: string(name='Type', description='挂载的数据类型', example='oss'),
  userId?: string(name='UserId', description='创建者Id', example='189xxx'),
}

model Tensorboard {
  dataSourceId?: string(name='DataSourceId', description='数据源Id', example='datasource-test'),
  displayName?: string(name='DisplayName', description='展示名称', example='test'),
  duration?: string(name='Duration', description='运行时长', example='1234567'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间（UTC）', example='2021-01-12T14:35:00Z'),
  gmtModifyTime?: string(name='GmtModifyTime', description='修改时间（UTC）', example='2021-01-12T14:36:00Z'),
  jobId?: string(name='JobId', description='任务Id', example='dlc-20210114104214-vf9lowjt3pso'),
  reasonCode?: string(name='ReasonCode', description='状态详情码', example='Delete by user'),
  reasonMessage?: string(name='ReasonMessage', description='状态详情', example='Tensorboard is deleted'),
  requestId?: string(name='RequestId', description='请求Id', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  status?: string(name='Status', description='状态', example='running'),
  summaryPath?: string(name='SummaryPath', description='文件路径', example='/root/data'),
  tensorboardId?: string(name='TensorboardId', description='Tensorboard Id', example='tensorboard-xxx'),
  tensorboardUrl?: string(name='TensorboardUrl', description='Tensorboard URL', example='http://xxxxxx'),
  userId?: string(name='UserId', description='创建者', example='lycxxxxx'),
}

model Workspace {
  creator?: string(name='Creator', description='创建者', example='ken'),
  gmtCreateTime?: string(name='GmtCreateTime', description='创建时间', example='2021-01-12T14:36:01Z'),
  gmtModifyTime?: string(name='GmtModifyTime', description='最近修改时间', example='2021-01-12T14:36:01Z'),
  members?: [
    Member
  ](name='Members', description='成员列表'),
  quotas?: [
    Quota
  ](name='Quotas', description='资源配额列表'),
  totalResources?: Resources(name='TotalResources', description='资源总量'),
  workspaceAdmins?: [
    Member
  ](name='WorkspaceAdmins', description='管理员列表'),
  workspaceId?: string(name='WorkspaceId', description='工作空间id', example='ws-20210126170216-mtl37ge7gkvdz'),
  workspaceName?: string(name='WorkspaceName', description='工作空间名称', example='dlc-workspace'),
}

model CreateJobRequest {
  codeSource?: {
    branch?: string(name='Branch', description='代码分支', example='master'),
    codeSourceId?: string(name='CodeSourceId', description='代码源Id', example='code-20210111103721-xxxxxxx'),
    commit?: string(name='Commit', description='代码Commit', example='44da109b5******'),
    mountPath?: string(name='MountPath', description='本地挂载路径', example='/root/data'),
  }(name='CodeSource', description='代码源配置', position='Body'),
  dataSources?: [ 
    {
      dataSourceId?: string(name='DataSourceId', description='数据源Id', example='d-cn9dl*******'),
      mountPath?: string(name='MountPath', description='本地挂载路径', example='/root/data'),
    }
  ](name='DataSources', description='数据源配置列表', position='Body'),
  debuggerConfigContent?: string(name='DebuggerConfigContent', description='debugger参数', example='“”', position='Body'),
  displayName: string(name='DisplayName', description='作业显示名称', example='tf-mnist-test', minLength=1, maxLength=1024, position='Body'),
  elasticSpec?: JobElasticSpec(name='ElasticSpec', position='Body'),
  envs?: map[string]string(name='Envs', description='环境变量配置', position='Body'),
  jobMaxRunningTimeMinutes?: long(name='JobMaxRunningTimeMinutes', description='作业最大运行时间', example='1024', minimum=1, position='Body'),
  jobSpecs: [
    JobSpec
  ](name='JobSpecs', description='作业规格配置', position='Body'),
  jobType: string(name='JobType', description='作业类型', example='TFJob', minLength=1, maxLength=32, position='Body'),
  options?: string(name='Options', example='key1=value1,key2=value2', position='Body'),
  priority?: int32(name='Priority', description='作业优先级', example='8', position='Body'),
  resourceId?: string(name='ResourceId', description='资源组编号', example='rs-xxx', position='Body'),
  settings?: JobSettings(name='Settings', position='Body'),
  successPolicy?: string(name='SuccessPolicy', position='Body'),
  thirdpartyLibDir?: string(name='ThirdpartyLibDir', description='三方库(requirements.txt)文件路径', example='/root/code/', position='Body'),
  thirdpartyLibs?: [ string ](name='ThirdpartyLibs', description='三方库配置列表', position='Body'),
  userCommand: string(name='UserCommand', description='作业命令', example='python /root/code/mnist.py', position='Body'),
  userVpc?: {
    extendedCIDRs?: [ string ](name='ExtendedCIDRs', description='扩展网段'),
    securityGroupId?: string(name='SecurityGroupId', description='用户安全组的id', example='sg-abcdef****'),
    switchId?: string(name='SwitchId', description='用户交换机的id', example='vs-abcdef****'),
    vpcId?: string(name='VpcId', description='用户VPC的id', example='vpc-abcdef****'),
  }(name='UserVpc', description='用户VPC', position='Body'),
  workspaceId?: string(name='WorkspaceId', description='工作空间编号', example='ws-20210126170216-xxxxxxx', position='Body'),
}

model CreateJobResponseBody = {
  jobId?: string(name='JobId', description='作业Id', example='dlc7*******'),
  requestId?: string(name='RequestId', description='请求Id', example='473469C7-AA6F-4DC5-B3DB-xxxxxxx'),
}

model CreateJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateJobResponseBody(name='body'),
}

async function createJob(request: CreateJobRequest): CreateJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateJob', 'POST', '/api/v1/jobs', 'json', false, 'json', request);
}

model CreateTensorboardRequest {
  dataSourceId?: string(name='DataSourceId', description='DataSource Id', example='d-xxxxxxxx', position='Body'),
  dataSourceType?: string(name='DataSourceType', example='oss', position='Body'),
  dataSources?: [
    DataSourceItem
  ](name='DataSources', position='Body'),
  displayName?: string(name='DisplayName', description='Tensorboard名称', example='tensorboard', position='Body'),
  jobId?: string(name='JobId', description='任务Id', example='dlc-20210126170216-mtl37ge7gkvdz', position='Body'),
  maxRunningTimeMinutes?: long(name='MaxRunningTimeMinutes', description='最长运行时长', example='240', position='Body'),
  options?: string(name='Options', example='{"mountpath":"/root/data/"}', position='Body'),
  sourceId?: string(name='SourceId', example='dlc-xxxxxx', position='Body'),
  sourceType?: string(name='SourceType', example='job', position='Body'),
  summaryPath?: string(name='SummaryPath', description='Summary 目录', example='/root/data/', position='Body'),
  summaryRelativePath?: string(name='SummaryRelativePath', example='/summary/', position='Body'),
  uri?: string(name='Uri', example='oss://.oss-cn-shanghai-finance-1.aliyuncs.com/', position='Body'),
  workspaceId?: string(name='WorkspaceId', example='123***', position='Body'),
}

model CreateTensorboardResponseBody = {
  dataSourceId?: string(name='DataSourceId', description='DataSourceId', example='ds-20210126170216-xxxxxxxx'),
  jobId?: string(name='JobId', description='任务Id', example='dlc-20210126170216-xxxxxxxx'),
  requestId?: string(name='RequestId', description='请求Id', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  tensorboardId?: string(name='TensorboardId', description='Tensorboard id', example='tbxxxxxxxx'),
}

model CreateTensorboardResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTensorboardResponseBody(name='body'),
}

async function createTensorboard(request: CreateTensorboardRequest): CreateTensorboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTensorboard', 'POST', '/api/v1/tensorboards', 'json', false, 'json', request);
}

model DeleteJobRequest {
  jobId?: string(name='JobId', description='作业Id', example='dlc*************', position='Path'),
}

model DeleteJobResponseBody = {
  jobId?: string(name='JobId', description='作业Id', example='dlc*************'),
  requestId?: string(name='RequestId', description='请求Id', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteJobResponseBody(name='body'),
}

async function deleteJob(request: DeleteJobRequest): DeleteJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteJob', 'DELETE', '/api/v1/jobs/{JobId}', 'json', false, 'json', request);
}

model DeleteTensorboardRequest {
  tensorboardId: string(name='TensorboardId', description='Tensorboad Id', example='tensorboard-20210114104214-xxxxxxxx', minLength=1, maxLength=256, position='Path'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID', example='46099', position='Query'),
}

model DeleteTensorboardResponseBody = {
  requestId?: string(name='RequestId', description='请求Id', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  tensorboardId?: string(name='TensorboardId', description='Tensorboad Id', example='tensorboard-20210114104214-vf9lowjt3pso'),
}

model DeleteTensorboardResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTensorboardResponseBody(name='body'),
}

async function deleteTensorboard(request: DeleteTensorboardRequest): DeleteTensorboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTensorboard', 'DELETE', '/api/v1/tensorboards/{TensorboardId}', 'json', false, 'json', request);
}

model GetJobRequest {
  jobId: string(name='JobId', description='作业Id', example='dlc*******', minLength=1, maxLength=256, position='Path'),
}

model GetJobResponseBody = {
  clusterId?: string(name='ClusterId', description='集群ID', example='a*****'),
  codeSource?: {
    branch?: string(name='Branch', description='代码分支', example='master'),
    codeSourceId?: string(name='CodeSourceId', description='代码源Id', example='code******'),
    commit?: string(name='Commit', description='代码Commit', example='44da109b59f8596152987eaa8f3b2487xxxxxx'),
    mountPath?: string(name='MountPath', description='本地挂载路径', example='/mnt/data'),
  }(name='CodeSource', description='代码源配置'),
  dataSources?: [ 
    {
      dataSourceId?: string(name='DataSourceId', description='数据源Id', example='d*******'),
      mountPath?: string(name='MountPath', description='本地挂载路径', example='/mnt/data/'),
    }
  ](name='DataSources', description='数据源配置列表'),
  displayName?: string(name='DisplayName', description='作业显示名称', example='tf-mnist-test'),
  duration?: long(name='Duration', description='作业运行时长（s）', example='3602'),
  elasticSpec?: JobElasticSpec(name='ElasticSpec', description='弹性任务参数'),
  enabledDebugger?: boolean(name='EnabledDebugger', description='是否开启debugger任务', example='false'),
  envs?: map[string]string(name='Envs', description='环境变量配置'),
  gmtCreateTime?: string(name='GmtCreateTime', description='作业创建时间（UTC）', example='2021-01-12T14:35:01Z'),
  gmtFailedTime?: string(name='GmtFailedTime', example='2021-01-12T15:36:08Z'),
  gmtFinishTime?: string(name='GmtFinishTime', description='作业结束时间（UTC）', example='2021-01-12T15:36:08Z'),
  gmtRunningTime?: string(name='GmtRunningTime', example='2021-01-12T14:36:21Z'),
  gmtStoppedTime?: string(name='GmtStoppedTime', example='2021-01-12T15:36:08Z'),
  gmtSubmittedTime?: string(name='GmtSubmittedTime', example='2021-01-12T14:36:01Z'),
  gmtSuccessedTime?: string(name='GmtSuccessedTime', example='2021-01-12T15:36:08Z'),
  jobId?: string(name='JobId', description='作业Id', example='dlc*******'),
  jobSpecs?: [
    JobSpec
  ](name='JobSpecs', description='作业规格配置'),
  jobType?: string(name='JobType', description='作业类型', example='TFJob'),
  pods?: [ 
    {
      gmtCreateTime?: string(name='GmtCreateTime', description='Pod创建时间（UTC）', example='2021-01-12T14:36:01Z'),
      gmtFinishTime?: string(name='GmtFinishTime', description='Pod结束时间（UTC）', example='2021-01-12T15:36:05Z'),
      gmtStartTime?: string(name='GmtStartTime', description='Pod启动时间（UTC）', example='2021-01-12T14:36:01Z'),
      historyPods?: [ 
        {
          gmtCreateTime?: string(name='GmtCreateTime', description='Pod创建时间（UTC）', example='2021-01-12T14:36:01Z'),
          gmtFinishTime?: string(name='GmtFinishTime', description='Pod结束时间（UTC）', example='2021-01-12T14:36:01Z'),
          gmtStartTime?: string(name='GmtStartTime', description='Pod启动时间（UTC）', example='2021-01-12T14:36:01Z'),
          ip?: string(name='Ip', description='Pod Ip', example='10.0.1.3'),
          podId?: string(name='PodId', description='Pod Id', example='Worker'),
          podUid?: string(name='PodUid', description='Pod UId', example='fe846462-af2c-4521-bd6f-96787a57591d'),
          status?: string(name='Status', description='Pod状态', example='Failed'),
          type?: string(name='Type', description='Pod类型', example='Worker'),
        }
      ](name='HistoryPods', description='历史Pods'),
      ip?: string(name='Ip', description='Pod Ip', example='10.0.1.2'),
      podId?: string(name='PodId', description='Pod Id', example='Worker'),
      podUid?: string(name='PodUid', description='Pod UId', example='fe846462-af2c-4521-bd6f-96787a57591d'),
      status?: string(name='Status', description='Pod状态', example='Running'),
      type?: string(name='Type', description='Pod类型', example='Worker'),
    }
  ](name='Pods', description='作业所以运行Pod列表'),
  priority?: int32(name='Priority', description='任务的优先级', example='1'),
  reasonCode?: string(name='ReasonCode', description='状态详情码', example='JobStoppedByUser'),
  reasonMessage?: string(name='ReasonMessage', description='状态详情', example='Job is stopped by user.'),
  requestId?: string(name='RequestId', description='请求Id', example='473469C7-AA6F-4DC5-B3DB-xxxxxxxx'),
  resourceId?: string(name='ResourceId', description='作业运行所在的资源组ID', example='r******'),
  resourceLevel?: string(name='ResourceLevel', description='作业运行时使用的资源级别', example='L0'),
  settings?: JobSettings(name='Settings', description='作业额外参数配置'),
  status?: string(name='Status', description='作业状态', example='Stopped'),
  thirdpartyLibDir?: string(name='ThirdpartyLibDir', description='三方库(requirements.txt)文件路径', example='/root/code/'),
  thirdpartyLibs?: [ string ](name='ThirdpartyLibs', description='三方库配置列表'),
  userCommand?: string(name='UserCommand', description='用户命令', example='python /root/code/mnist.py'),
  userId?: string(name='UserId', description='作业提交人Id', example='12*********'),
  workspaceId?: string(name='WorkspaceId', description='作业所属工作空间ID', example='268'),
  workspaceName?: string(name='WorkspaceName', description='作业所属工作空间名称', example='dlc-workspace'),
}

model GetJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobResponseBody(name='body'),
}

async function getJob(request: GetJobRequest): GetJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetJob', 'GET', '/api/v1/jobs/{JobId}', 'json', false, 'json', request);
}

model GetJobEventsRequest {
  jobId: string(name='JobId', description='作业ID', example='dlc-20210126170216-*******', position='Path'),
  endTime?: string(name='EndTime', description='查询事件的时间区间的截止时间，默认值是当前。', example='2020-11-08T18:00:00Z', position='Query'),
  maxEventsNum?: int32(name='MaxEventsNum', description='获取事件的最大数目，默认值：2000', example='100', minimum=1, maximum=10000, position='Query'),
  startTime?: string(name='StartTime', description='查询事件的时间区间的起始时间，默认值是7天前。', example='2020-11-08T16:00:00Z', position='Query'),
}

model GetJobEventsResponseBody = {
  events?: [ string ](name='Events', description='事件'),
  jobId?: string(name='JobId', description='作业ID', example='dlc-20210126170216-******'),
  requestId?: int32(name='RequestId', description='请求ID', example='78F6FCE2-278F-4C4A-A6B7-DD8ECEA9C456'),
}

model GetJobEventsResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobEventsResponseBody(name='body'),
}

async function getJobEvents(request: GetJobEventsRequest): GetJobEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetJobEvents', 'GET', '/api/v1/jobs/{JobId}/events', 'json', false, 'json', request);
}

model GetJobMetricsRequest {
  jobId: string(name='JobId', description='作业ID', example='dlc-20210126170216-*******', position='Path'),
  endTime?: string(name='EndTime', description='截止时间', example='2020-11-09T16:00:00Z', position='Query'),
  metricType: string(name='MetricType', description='指标类型', example='GpuMemoryUsage', position='Query'),
  startTime?: string(name='StartTime', description='起始时间', example='2020-11-08T16:00:00Z', position='Query'),
  timeStep?: string(name='TimeStep', description='时间间隔', example='5m', position='Query'),
  token?: string(name='Token', description='Token', example='eyXXXX-XXXX.XXXXX', position='Query'),
}

model GetJobMetricsResponseBody = {
  jobId?: string(name='JobId', description='作业ID', example='dlc-20210126170216-*******'),
  podMetrics?: [
    PodMetric
  ](name='PodMetrics', description='任务监控指标序列集合'),
  requestId?: string(name='RequestId', description='请求ID', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model GetJobMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobMetricsResponseBody(name='body'),
}

async function getJobMetrics(request: GetJobMetricsRequest): GetJobMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetJobMetrics', 'GET', '/api/v1/jobs/{JobId}/metrics', 'json', false, 'json', request);
}

model GetPodEventsRequest {
  jobId: string(name='JobId', description='作业ID', example='dlc-20210126170216-*****', position='Path'),
  podId: string(name='PodId', description='运行实例ID', example='dlc-20210126170216-mtl37ge7gkvdz-chief-0', position='Path'),
  endTime?: string(name='EndTime', description='截止时间', example='2020-11-09T16:00:00Z', position='Query'),
  maxEventsNum?: int32(name='MaxEventsNum', description='返回的事件最大数量', example='100', position='Query'),
  podUid?: string(name='PodUid', description='运行实例UID', example='dlc-20210126170216-*****-chief-0', position='Query'),
  startTime?: string(name='StartTime', description='起始时间', example='2020-11-08T16:00:00Z', position='Query'),
}

model GetPodEventsResponseBody = {
  events?: [ string ](name='Events', description='事件列表'),
  jobId?: string(name='JobId', description='作业ID', example='dlc-20210126170216-*****'),
  podId: string(name='PodId', description='运行示例ID', example='dlc-20210126170216-*****-chief-0'),
  podUid?: string(name='PodUid', example='94a7cc7c-0033-48b5-85bd-71c63592c268'),
  requestId?: string(name='RequestId', description='请求ID', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model GetPodEventsResponse = {
  headers: map[string]string(name='headers'),
  body: GetPodEventsResponseBody(name='body'),
}

async function getPodEvents(request: GetPodEventsRequest): GetPodEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPodEvents', 'GET', '/api/v1/jobs/{JobId}/pods/{PodId}/events', 'json', false, 'json', request);
}

model GetPodLogsRequest {
  jobId: string(name='JobId', description='作业ID', example='dlc-20210126170216-*****', position='Path'),
  podId: string(name='PodId', description='实例ID', example='dlc-20210126170216-*****-chief-0', position='Path'),
  downloadToFile?: boolean(name='DownloadToFile', description='是否下载日志文件，默认：false。', example='true', position='Query'),
  endTime?: string(name='EndTime', description='查询的截止时间，默认值：当前。', example='2020-11-08T17:00:00Z', position='Query'),
  maxLines?: int32(name='MaxLines', description='返回的日志的最大行数，默认值：2000。', example='100', position='Query'),
  podUid?: string(name='PodUid', position='Query'),
  startTime?: string(name='StartTime', description='查询的起始时间，默认值：7天前。', example='2020-11-08T16:00:00Z', position='Query'),
}

model GetPodLogsResponseBody = {
  jobId?: string(name='JobId', description='作业ID', example='dlc-20210126170216-******'),
  logs?: [ string ](name='Logs', description='日志列表'),
  podId?: string(name='PodId', description='实例ID', example='dlc-20210126170216-****-chief-0'),
  podUid?: string(name='PodUid', description='实例UID', example='94a7cc7c-0033-48b5-85bd-71c63592c268'),
  requestId?: string(name='RequestId', description='请求ID', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model GetPodLogsResponse = {
  headers: map[string]string(name='headers'),
  body: GetPodLogsResponseBody(name='body'),
}

async function getPodLogs(request: GetPodLogsRequest): GetPodLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPodLogs', 'GET', '/api/v1/jobs/{JobId}/pods/{PodId}/logs', 'json', false, 'json', request);
}

model GetTensorboardRequest {
  tensorboardId: string(name='TensorboardId', description='TensorboardId Id', example='tb-20210114104214-xxxxx', minLength=1, maxLength=256, position='Path'),
  jodId?: string(name='JodId', description='JodId', example='dlc-xxxxxxxx', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID', example='46099', position='Query'),
}

model GetTensorboardResponse = {
  headers: map[string]string(name='headers'),
  body: Tensorboard  
}

async function getTensorboard(request: GetTensorboardRequest): GetTensorboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTensorboard', 'GET', '/api/v1/tensorboards/{TensorboardId}', 'json', false, 'json', request);
}

model ListEcsSpecsRequest {
  acceleratorType?: string(name='AcceleratorType', description='按加速器类型过滤', example='GPU', position='Query'),
  order?: string(name='Order', description='排序顺序', example='desc', position='Query'),
  pageNumber?: int32(name='PageNumber', description='查询第几页数据', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='设置查询的分页大写', example='10', position='Query'),
  sortBy?: string(name='SortBy', description='按返回字段排序', example='Gpu', position='Query'),
}

model ListEcsSpecsResponseBody = {
  ecsSpecs?: [
    EcsSpec
  ](name='EcsSpecs', description='ECS规格列表'),
  requestId?: string(name='RequestId', description='请求Id', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的总数量', example='10'),
}

model ListEcsSpecsResponse = {
  headers: map[string]string(name='headers'),
  body: ListEcsSpecsResponseBody(name='body'),
}

async function listEcsSpecs(request: ListEcsSpecsRequest): ListEcsSpecsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEcsSpecs', 'GET', '/api/v1/ecsspecs', 'json', false, 'json', request);
}

model ListJobsRequest {
  businessUserId?: string(name='BusinessUserId', description='作业关联用户ID', example='166924', position='Query'),
  caller?: string(name='Caller', description='调用方', example='SilkFlow', position='Query'),
  displayName?: string(name='DisplayName', description='作业显示名称，支持模糊查询', example='tf-mnist-test', maxLength=1024, position='Query'),
  endTime?: string(name='EndTime', description='截止时间', example='2020-11-09T14:45:00Z', position='Query'),
  fromAllWorkspaces?: boolean(name='FromAllWorkspaces', position='Query'),
  jobId?: string(name='JobId', position='Query'),
  jobType?: string(name='JobType', description='作业类型', example='TFJob', maxLength=32, position='Query'),
  order?: string(name='Order', description='排序顺序', example='desc', position='Query'),
  pageNumber?: int32(name='PageNumber', description='当前页', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', description='每页返回的作业数', example='50', minimum=1, maximum=100, position='Query'),
  pipelineId?: string(name='PipelineId', description='工作流ID', example='pid-123456', position='Query'),
  resourceId?: string(name='ResourceId', description='资源组ID', example='dlc-quota', position='Query'),
  showOwn?: boolean(name='ShowOwn', description='是否只返回当前登录者所提交的作业', example='true', position='Query'),
  sortBy?: string(name='SortBy', description='按返回字段排序', example='GmtCreateTime', position='Query'),
  startTime?: string(name='StartTime', description='起始时间', example='2020-11-08T16:00:00Z', position='Query'),
  status?: string(name='Status', description='作业状态', example='Running', maxLength=32, position='Query'),
  tags?: map[string]string(name='Tags', description='自定义标签', shrink='json', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID', example='380', position='Query'),
}

model ListJobsResponseBody = {
  jobs?: [
    JobItem
  ](name='Jobs', description='作业列表'),
  requestId?: string(name='RequestId', description='请求Id', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', description='符合过滤条件的总作业数', example='2'),
}

model ListJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListJobsResponseBody(name='body'),
}

async function listJobs(request: ListJobsRequest): ListJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListJobs', 'GET', '/api/v1/jobs', 'json', false, 'json', request);
}

model ListTensorboardsRequest {
  displayName?: string(name='DisplayName', description='展示名称', example='TestTensorboard', position='Query'),
  endTime?: string(name='EndTime', description='截止时间', example='2020-11-09T14:45:00Z', position='Query'),
  jobId?: string(name='JobId', description='JobId', example='dlc-xxx', position='Query'),
  order?: string(name='Order', description='排序顺序', example='desc', position='Query'),
  pageNumber?: int32(name='PageNumber', description='当前页', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', description='每页返回的作业数', example='50', minimum=1, maximum=100, position='Query'),
  sortBy?: string(name='SortBy', description='按返回字段排序', example='GmtCreateTime', position='Query'),
  sourceId?: string(name='SourceId', example='dlc-xxxxxx', position='Query'),
  sourceType?: string(name='SourceType', example='job', position='Query'),
  startTime?: string(name='StartTime', description='起始时间', example='2020-11-08T16:00:00Z', position='Query'),
  status?: string(name='Status', description='根据状态过滤', example='Running', position='Query'),
  tensorboardId?: string(name='TensorboardId', description='TensorboardId', example='tensorboard-xxx', position='Query'),
  verbose?: boolean(name='Verbose', description='是否显示详情', example='true', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID', example='380', position='Query'),
}

model ListTensorboardsResponseBody = {
  requestId?: string(name='RequestId', description='请求Id', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  tensorboards?: [
    Tensorboard
  ](name='Tensorboards', description='Tensorboard 列表'),
  totalCount?: long(name='TotalCount', description='符合条件的数据源总数量', example='100'),
}

model ListTensorboardsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTensorboardsResponseBody(name='body'),
}

async function listTensorboards(request: ListTensorboardsRequest): ListTensorboardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTensorboards', 'GET', '/api/v1/tensorboards', 'json', false, 'json', request);
}

model StartTensorboardRequest {
  tensorboardId: string(name='TensorboardId', description='Tensorboad Id', example='tensorboard-20210114104214-vf9lowjt3pso', minLength=1, maxLength=256, position='Path'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID', example='380', position='Query'),
}

model StartTensorboardResponseBody = {
  requestId?: string(name='RequestId', description='请求Id', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  tensorboardId?: string(name='TensorboardId', description='Tensorboad Id', example='tensorboard-20210114104214-vf9lowjt3pso'),
}

model StartTensorboardResponse = {
  headers: map[string]string(name='headers'),
  body: StartTensorboardResponseBody(name='body'),
}

async function startTensorboard(request: StartTensorboardRequest): StartTensorboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartTensorboard', 'PUT', '/api/v1/tensorboards/{TensorboardId}/start', 'json', false, 'json', request);
}

model StopJobRequest {
  jobId?: string(name='JobId', description='作业Id', example='dlc-20210126170216-xxxxxx', position='Path'),
}

model StopJobResponseBody = {
  jobId?: string(name='JobId', description='作业Id', example='dlc-20210126170216-xxxxxxx'),
  requestId?: string(name='RequestId', description='请求Id', example='473469C7-AA6F-4DC5-B3DB-xxxxxx'),
}

model StopJobResponse = {
  headers: map[string]string(name='headers'),
  body: StopJobResponseBody(name='body'),
}

async function stopJob(request: StopJobRequest): StopJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopJob', 'POST', '/api/v1/jobs/{JobId}/stop', 'json', false, 'json', request);
}

model StopTensorboardRequest {
  tensorboardId: string(name='TensorboardId', description='Tensorboad Id', example='tensorboard-20210114104214-vf9lowjt3pso', minLength=1, maxLength=256, position='Path'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID', example='380', position='Query'),
}

model StopTensorboardResponseBody = {
  requestId?: string(name='RequestId', description='请求Id', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  tensorboardId?: string(name='TensorboardId', description='Tensorboad Id', example='tensorboard-20210114104214-xxxxxxxx'),
}

model StopTensorboardResponse = {
  headers: map[string]string(name='headers'),
  body: StopTensorboardResponseBody(name='body'),
}

async function stopTensorboard(request: StopTensorboardRequest): StopTensorboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopTensorboard', 'PUT', '/api/v1/tensorboards/{TensorboardId}/stop', 'json', false, 'json', request);
}

model UpdateJobRequest {
  jobId?: string(name='JobId', description='作业ID', example='dlc*************', position='Path'),
  priority?: int32(name='Priority', description='设置优先级', example='5', position='Body'),
}

model UpdateJobResponseBody = {
  jobId?: string(name='JobId', description='作业ID', example='dlc*************'),
  requestId?: string(name='RequestId', description='请求ID', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model UpdateJobResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateJobResponseBody(name='body'),
}

async function updateJob(request: UpdateJobRequest): UpdateJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateJob', 'PUT', '/api/v1/jobs/{JobId}', 'json', false, 'json', request);
}

model UpdateTensorboardRequest {
  tensorboardId: string(name='TensorboardId', description='Tensorboad Id', example='tensorboard-20210114104214-vf9lowjt3pso', minLength=1, maxLength=256, position='Path'),
  maxRunningTimeMinutes?: long(name='MaxRunningTimeMinutes', description='MaxRunningTimeMinutes', example='MaxRunningTimeMinutes', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='工作空间ID', example='380', position='Query'),
}

model UpdateTensorboardResponseBody = {
  requestId?: string(name='RequestId', description='请求Id', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  tensorboardId?: string(name='TensorboardId', description='Tensorboad Id', example='tensorboard-20210114104214-xxxxxxxx'),
}

model UpdateTensorboardResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTensorboardResponseBody(name='body'),
}

async function updateTensorboard(request: UpdateTensorboardRequest): UpdateTensorboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTensorboard', 'PUT', '/api/v1/tensorboards/{TensorboardId}', 'json', false, 'json', request);
}

