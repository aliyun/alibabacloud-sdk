/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('smartag', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ActivateSmartAccessGatewayRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model ActivateSmartAccessGatewayResponseBody = {
  requestId?: string(name='RequestId'),
}

model ActivateSmartAccessGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ActivateSmartAccessGatewayResponseBody(name='body'),
}

async function activateSmartAccessGatewayWithOptions(request: ActivateSmartAccessGatewayRequest, runtime: Util.RuntimeOptions): ActivateSmartAccessGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ActivateSmartAccessGateway',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function activateSmartAccessGateway(request: ActivateSmartAccessGatewayRequest): ActivateSmartAccessGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return activateSmartAccessGatewayWithOptions(request, runtime);
}

model ActiveFlowLogRequest {
  flowLogId?: string(name='FlowLogId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ActiveFlowLogResponseBody = {
  requestId?: string(name='RequestId'),
}

model ActiveFlowLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ActiveFlowLogResponseBody(name='body'),
}

async function activeFlowLogWithOptions(request: ActiveFlowLogRequest, runtime: Util.RuntimeOptions): ActiveFlowLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.flowLogId)) {
    query['FlowLogId'] = request.flowLogId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ActiveFlowLog',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function activeFlowLog(request: ActiveFlowLogRequest): ActiveFlowLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return activeFlowLogWithOptions(request, runtime);
}

model AddACLRuleRequest {
  aclId?: string(name='AclId'),
  description?: string(name='Description'),
  destCidr?: string(name='DestCidr'),
  destPortRange?: string(name='DestPortRange'),
  direction?: string(name='Direction'),
  dpiGroupIds?: [ string ](name='DpiGroupIds'),
  dpiSignatureIds?: [ string ](name='DpiSignatureIds'),
  ipProtocol?: string(name='IpProtocol'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  policy?: string(name='Policy'),
  priority?: int32(name='Priority'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceCidr?: string(name='SourceCidr'),
  sourcePortRange?: string(name='SourcePortRange'),
  type?: string(name='Type'),
}

model AddACLRuleResponseBody = {
  aclId?: string(name='AclId'),
  acrId?: string(name='AcrId'),
  description?: string(name='Description'),
  destCidr?: string(name='DestCidr'),
  destPortRange?: string(name='DestPortRange'),
  direction?: string(name='Direction'),
  dpiGroupIds?: {
    dpiGroupId?: [ string ](name='DpiGroupId')
  }(name='DpiGroupIds'),
  dpiSignatureIds?: {
    dpiSignatureId?: [ string ](name='DpiSignatureId')
  }(name='DpiSignatureIds'),
  gmtCreate?: long(name='GmtCreate'),
  ipProtocol?: string(name='IpProtocol'),
  name?: string(name='Name'),
  policy?: string(name='Policy'),
  priority?: int32(name='Priority'),
  requestId?: string(name='RequestId'),
  sourceCidr?: string(name='SourceCidr'),
  sourcePortRange?: string(name='SourcePortRange'),
  type?: string(name='Type'),
}

model AddACLRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddACLRuleResponseBody(name='body'),
}

async function addACLRuleWithOptions(request: AddACLRuleRequest, runtime: Util.RuntimeOptions): AddACLRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destCidr)) {
    query['DestCidr'] = request.destCidr;
  }
  if (!Util.isUnset(request.destPortRange)) {
    query['DestPortRange'] = request.destPortRange;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.dpiGroupIds)) {
    query['DpiGroupIds'] = request.dpiGroupIds;
  }
  if (!Util.isUnset(request.dpiSignatureIds)) {
    query['DpiSignatureIds'] = request.dpiSignatureIds;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceCidr)) {
    query['SourceCidr'] = request.sourceCidr;
  }
  if (!Util.isUnset(request.sourcePortRange)) {
    query['SourcePortRange'] = request.sourcePortRange;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddACLRule',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addACLRule(request: AddACLRuleRequest): AddACLRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addACLRuleWithOptions(request, runtime);
}

model AddDnatEntryRequest {
  externalIp?: string(name='ExternalIp'),
  externalPort?: string(name='ExternalPort'),
  internalIp?: string(name='InternalIp'),
  internalPort?: string(name='InternalPort'),
  ipProtocol?: string(name='IpProtocol'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sagId?: string(name='SagId'),
  type?: string(name='Type'),
}

model AddDnatEntryResponseBody = {
  dnatEntryId?: string(name='DnatEntryId'),
  requestId?: string(name='RequestId'),
}

model AddDnatEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDnatEntryResponseBody(name='body'),
}

async function addDnatEntryWithOptions(request: AddDnatEntryRequest, runtime: Util.RuntimeOptions): AddDnatEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.externalIp)) {
    query['ExternalIp'] = request.externalIp;
  }
  if (!Util.isUnset(request.externalPort)) {
    query['ExternalPort'] = request.externalPort;
  }
  if (!Util.isUnset(request.internalIp)) {
    query['InternalIp'] = request.internalIp;
  }
  if (!Util.isUnset(request.internalPort)) {
    query['InternalPort'] = request.internalPort;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sagId)) {
    query['SagId'] = request.sagId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddDnatEntry',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addDnatEntry(request: AddDnatEntryRequest): AddDnatEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDnatEntryWithOptions(request, runtime);
}

model AddSnatEntryRequest {
  cidrBlock?: string(name='CidrBlock'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  snatIp?: string(name='SnatIp'),
}

model AddSnatEntryResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model AddSnatEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddSnatEntryResponseBody(name='body'),
}

async function addSnatEntryWithOptions(request: AddSnatEntryRequest, runtime: Util.RuntimeOptions): AddSnatEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.snatIp)) {
    query['SnatIp'] = request.snatIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddSnatEntry',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addSnatEntry(request: AddSnatEntryRequest): AddSnatEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSnatEntryWithOptions(request, runtime);
}

model AssociateACLRequest {
  aclId?: string(name='AclId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model AssociateACLResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateACLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateACLResponseBody(name='body'),
}

async function associateACLWithOptions(request: AssociateACLRequest, runtime: Util.RuntimeOptions): AssociateACLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateACL',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateACL(request: AssociateACLRequest): AssociateACLResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateACLWithOptions(request, runtime);
}

model AssociateFlowLogRequest {
  flowLogId?: string(name='FlowLogId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model AssociateFlowLogResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateFlowLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateFlowLogResponseBody(name='body'),
}

async function associateFlowLogWithOptions(request: AssociateFlowLogRequest, runtime: Util.RuntimeOptions): AssociateFlowLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.flowLogId)) {
    query['FlowLogId'] = request.flowLogId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateFlowLog',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateFlowLog(request: AssociateFlowLogRequest): AssociateFlowLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateFlowLogWithOptions(request, runtime);
}

model AssociateQosRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  qosId?: string(name='QosId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model AssociateQosResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateQosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateQosResponseBody(name='body'),
}

async function associateQosWithOptions(request: AssociateQosRequest, runtime: Util.RuntimeOptions): AssociateQosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.qosId)) {
    query['QosId'] = request.qosId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateQos',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateQos(request: AssociateQosRequest): AssociateQosResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateQosWithOptions(request, runtime);
}

model AssociateSmartAGWithApplicationBandwidthPackageRequest {
  applicationBandwidthPackageId?: string(name='ApplicationBandwidthPackageId'),
  associateConfigs?: [ 
    {
      bandwidth?: int32(name='Bandwidth'),
      smartAGId?: string(name='SmartAGId'),
    }
  ](name='AssociateConfigs'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  regionId?: string(name='RegionId'),
}

model AssociateSmartAGWithApplicationBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateSmartAGWithApplicationBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateSmartAGWithApplicationBandwidthPackageResponseBody(name='body'),
}

async function associateSmartAGWithApplicationBandwidthPackageWithOptions(request: AssociateSmartAGWithApplicationBandwidthPackageRequest, runtime: Util.RuntimeOptions): AssociateSmartAGWithApplicationBandwidthPackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationBandwidthPackageId)) {
    query['ApplicationBandwidthPackageId'] = request.applicationBandwidthPackageId;
  }
  if (!Util.isUnset(request.associateConfigs)) {
    query['AssociateConfigs'] = request.associateConfigs;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateSmartAGWithApplicationBandwidthPackage',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateSmartAGWithApplicationBandwidthPackage(request: AssociateSmartAGWithApplicationBandwidthPackageRequest): AssociateSmartAGWithApplicationBandwidthPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateSmartAGWithApplicationBandwidthPackageWithOptions(request, runtime);
}

model BindSerialNumberRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serialNumber?: string(name='SerialNumber'),
  smartAGId?: string(name='SmartAGId'),
}

model BindSerialNumberResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindSerialNumberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindSerialNumberResponseBody(name='body'),
}

async function bindSerialNumberWithOptions(request: BindSerialNumberRequest, runtime: Util.RuntimeOptions): BindSerialNumberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindSerialNumber',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindSerialNumber(request: BindSerialNumberRequest): BindSerialNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindSerialNumberWithOptions(request, runtime);
}

model BindSmartAccessGatewayRequest {
  ccnId?: string(name='CcnId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGUid?: long(name='SmartAGUid'),
}

model BindSmartAccessGatewayResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindSmartAccessGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindSmartAccessGatewayResponseBody(name='body'),
}

async function bindSmartAccessGatewayWithOptions(request: BindSmartAccessGatewayRequest, runtime: Util.RuntimeOptions): BindSmartAccessGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ccnId)) {
    query['CcnId'] = request.ccnId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGUid)) {
    query['SmartAGUid'] = request.smartAGUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindSmartAccessGateway',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindSmartAccessGateway(request: BindSmartAccessGatewayRequest): BindSmartAccessGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindSmartAccessGatewayWithOptions(request, runtime);
}

model BindVbrRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGUid?: long(name='SmartAGUid'),
  vbrId?: string(name='VbrId'),
  vbrRegionId?: string(name='VbrRegionId'),
}

model BindVbrResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindVbrResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindVbrResponseBody(name='body'),
}

async function bindVbrWithOptions(request: BindVbrRequest, runtime: Util.RuntimeOptions): BindVbrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGUid)) {
    query['SmartAGUid'] = request.smartAGUid;
  }
  if (!Util.isUnset(request.vbrId)) {
    query['VbrId'] = request.vbrId;
  }
  if (!Util.isUnset(request.vbrRegionId)) {
    query['VbrRegionId'] = request.vbrRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindVbr',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindVbr(request: BindVbrRequest): BindVbrResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindVbrWithOptions(request, runtime);
}

model ClearSagCipherRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sagId?: string(name='SagId'),
  snNumber?: string(name='SnNumber'),
}

model ClearSagCipherResponseBody = {
  requestId?: string(name='RequestId'),
}

model ClearSagCipherResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ClearSagCipherResponseBody(name='body'),
}

async function clearSagCipherWithOptions(request: ClearSagCipherRequest, runtime: Util.RuntimeOptions): ClearSagCipherResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sagId)) {
    query['SagId'] = request.sagId;
  }
  if (!Util.isUnset(request.snNumber)) {
    query['SnNumber'] = request.snNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ClearSagCipher',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function clearSagCipher(request: ClearSagCipherRequest): ClearSagCipherResponse {
  var runtime = new Util.RuntimeOptions{};
  return clearSagCipherWithOptions(request, runtime);
}

model ClearSagRouteableAddressRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sagId?: string(name='SagId'),
}

model ClearSagRouteableAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model ClearSagRouteableAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ClearSagRouteableAddressResponseBody(name='body'),
}

async function clearSagRouteableAddressWithOptions(request: ClearSagRouteableAddressRequest, runtime: Util.RuntimeOptions): ClearSagRouteableAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sagId)) {
    query['SagId'] = request.sagId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ClearSagRouteableAddress',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function clearSagRouteableAddress(request: ClearSagRouteableAddressRequest): ClearSagRouteableAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return clearSagRouteableAddressWithOptions(request, runtime);
}

model CreateACLRequest {
  aclType?: string(name='AclType'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateACLResponseBody = {
  aclId?: string(name='AclId'),
  aclType?: string(name='AclType'),
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateACLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateACLResponseBody(name='body'),
}

async function createACLWithOptions(request: CreateACLRequest, runtime: Util.RuntimeOptions): CreateACLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclType)) {
    query['AclType'] = request.aclType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateACL',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createACL(request: CreateACLRequest): CreateACLResponse {
  var runtime = new Util.RuntimeOptions{};
  return createACLWithOptions(request, runtime);
}

model CreateCloudConnectNetworkRequest {
  cidrBlock?: string(name='CidrBlock'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  snatCidrBlock?: string(name='SnatCidrBlock'),
}

model CreateCloudConnectNetworkResponseBody = {
  ccnId?: string(name='CcnId'),
  cidrBlock?: string(name='CidrBlock'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  snatCidrBlock?: string(name='SnatCidrBlock'),
  status?: string(name='Status'),
}

model CreateCloudConnectNetworkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCloudConnectNetworkResponseBody(name='body'),
}

async function createCloudConnectNetworkWithOptions(request: CreateCloudConnectNetworkRequest, runtime: Util.RuntimeOptions): CreateCloudConnectNetworkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.snatCidrBlock)) {
    query['SnatCidrBlock'] = request.snatCidrBlock;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCloudConnectNetwork',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCloudConnectNetwork(request: CreateCloudConnectNetworkRequest): CreateCloudConnectNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCloudConnectNetworkWithOptions(request, runtime);
}

model CreateEnterpriseCodeRequest {
  clientToken?: string(name='ClientToken'),
  enterpriseCode?: string(name='EnterpriseCode'),
  regionId?: string(name='RegionId'),
}

model CreateEnterpriseCodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateEnterpriseCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEnterpriseCodeResponseBody(name='body'),
}

async function createEnterpriseCodeWithOptions(request: CreateEnterpriseCodeRequest, runtime: Util.RuntimeOptions): CreateEnterpriseCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.enterpriseCode)) {
    query['EnterpriseCode'] = request.enterpriseCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEnterpriseCode',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEnterpriseCode(request: CreateEnterpriseCodeRequest): CreateEnterpriseCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEnterpriseCodeWithOptions(request, runtime);
}

model CreateFlowLogRequest {
  activeAging?: int32(name='ActiveAging'),
  description?: string(name='Description'),
  inactiveAging?: int32(name='InactiveAging'),
  logstoreName?: string(name='LogstoreName'),
  name?: string(name='Name'),
  netflowServerIp?: string(name='NetflowServerIp'),
  netflowServerPort?: int32(name='NetflowServerPort'),
  netflowVersion?: string(name='NetflowVersion'),
  outputType?: string(name='OutputType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  projectName?: string(name='ProjectName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  slsRegionId?: string(name='SlsRegionId'),
}

model CreateFlowLogResponseBody = {
  flowLogId?: string(name='FlowLogId'),
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateFlowLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFlowLogResponseBody(name='body'),
}

async function createFlowLogWithOptions(request: CreateFlowLogRequest, runtime: Util.RuntimeOptions): CreateFlowLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.activeAging)) {
    query['ActiveAging'] = request.activeAging;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.inactiveAging)) {
    query['InactiveAging'] = request.inactiveAging;
  }
  if (!Util.isUnset(request.logstoreName)) {
    query['LogstoreName'] = request.logstoreName;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.netflowServerIp)) {
    query['NetflowServerIp'] = request.netflowServerIp;
  }
  if (!Util.isUnset(request.netflowServerPort)) {
    query['NetflowServerPort'] = request.netflowServerPort;
  }
  if (!Util.isUnset(request.netflowVersion)) {
    query['NetflowVersion'] = request.netflowVersion;
  }
  if (!Util.isUnset(request.outputType)) {
    query['OutputType'] = request.outputType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.slsRegionId)) {
    query['SlsRegionId'] = request.slsRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFlowLog',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFlowLog(request: CreateFlowLogRequest): CreateFlowLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFlowLogWithOptions(request, runtime);
}

model CreateHealthCheckRequest {
  description?: string(name='Description'),
  dstIpAddr?: string(name='DstIpAddr'),
  dstPort?: int32(name='DstPort'),
  failCountThreshold?: int32(name='FailCountThreshold'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  probeCount?: int32(name='ProbeCount'),
  probeInterval?: int32(name='ProbeInterval'),
  probeTimeout?: int32(name='ProbeTimeout'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  rttFailThreshold?: int32(name='RttFailThreshold'),
  rttThreshold?: int32(name='RttThreshold'),
  smartAGId?: string(name='SmartAGId'),
  srcIpAddr?: string(name='SrcIpAddr'),
  srcPort?: int32(name='SrcPort'),
  type?: string(name='Type'),
}

model CreateHealthCheckResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateHealthCheckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHealthCheckResponseBody(name='body'),
}

async function createHealthCheckWithOptions(request: CreateHealthCheckRequest, runtime: Util.RuntimeOptions): CreateHealthCheckResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dstIpAddr)) {
    query['DstIpAddr'] = request.dstIpAddr;
  }
  if (!Util.isUnset(request.dstPort)) {
    query['DstPort'] = request.dstPort;
  }
  if (!Util.isUnset(request.failCountThreshold)) {
    query['FailCountThreshold'] = request.failCountThreshold;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.probeCount)) {
    query['ProbeCount'] = request.probeCount;
  }
  if (!Util.isUnset(request.probeInterval)) {
    query['ProbeInterval'] = request.probeInterval;
  }
  if (!Util.isUnset(request.probeTimeout)) {
    query['ProbeTimeout'] = request.probeTimeout;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.rttFailThreshold)) {
    query['RttFailThreshold'] = request.rttFailThreshold;
  }
  if (!Util.isUnset(request.rttThreshold)) {
    query['RttThreshold'] = request.rttThreshold;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.srcIpAddr)) {
    query['SrcIpAddr'] = request.srcIpAddr;
  }
  if (!Util.isUnset(request.srcPort)) {
    query['SrcPort'] = request.srcPort;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateHealthCheck',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createHealthCheck(request: CreateHealthCheckRequest): CreateHealthCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHealthCheckWithOptions(request, runtime);
}

model CreateQosRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  qosDescription?: string(name='QosDescription'),
  qosName?: string(name='QosName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateQosResponseBody = {
  qosId?: string(name='QosId'),
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateQosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQosResponseBody(name='body'),
}

async function createQosWithOptions(request: CreateQosRequest, runtime: Util.RuntimeOptions): CreateQosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.qosDescription)) {
    query['QosDescription'] = request.qosDescription;
  }
  if (!Util.isUnset(request.qosName)) {
    query['QosName'] = request.qosName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateQos',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createQos(request: CreateQosRequest): CreateQosResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQosWithOptions(request, runtime);
}

model CreateQosCarRequest {
  description?: string(name='Description'),
  limitType?: string(name='LimitType'),
  maxBandwidthAbs?: int32(name='MaxBandwidthAbs'),
  maxBandwidthPercent?: int32(name='MaxBandwidthPercent'),
  minBandwidthAbs?: int32(name='MinBandwidthAbs'),
  minBandwidthPercent?: int32(name='MinBandwidthPercent'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  percentSourceType?: string(name='PercentSourceType'),
  priority?: int32(name='Priority'),
  qosId?: string(name='QosId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateQosCarResponseBody = {
  description?: string(name='Description'),
  limitType?: string(name='LimitType'),
  maxBandwidthAbs?: int32(name='MaxBandwidthAbs'),
  maxBandwidthPercent?: int32(name='MaxBandwidthPercent'),
  minBandwidthAbs?: int32(name='MinBandwidthAbs'),
  minBandwidthPercent?: int32(name='MinBandwidthPercent'),
  percentSourceType?: string(name='PercentSourceType'),
  priority?: int32(name='Priority'),
  qosCarId?: string(name='QosCarId'),
  qosId?: string(name='QosId'),
  requestId?: string(name='RequestId'),
}

model CreateQosCarResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQosCarResponseBody(name='body'),
}

async function createQosCarWithOptions(request: CreateQosCarRequest, runtime: Util.RuntimeOptions): CreateQosCarResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.limitType)) {
    query['LimitType'] = request.limitType;
  }
  if (!Util.isUnset(request.maxBandwidthAbs)) {
    query['MaxBandwidthAbs'] = request.maxBandwidthAbs;
  }
  if (!Util.isUnset(request.maxBandwidthPercent)) {
    query['MaxBandwidthPercent'] = request.maxBandwidthPercent;
  }
  if (!Util.isUnset(request.minBandwidthAbs)) {
    query['MinBandwidthAbs'] = request.minBandwidthAbs;
  }
  if (!Util.isUnset(request.minBandwidthPercent)) {
    query['MinBandwidthPercent'] = request.minBandwidthPercent;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.percentSourceType)) {
    query['PercentSourceType'] = request.percentSourceType;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.qosId)) {
    query['QosId'] = request.qosId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateQosCar',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createQosCar(request: CreateQosCarRequest): CreateQosCarResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQosCarWithOptions(request, runtime);
}

model CreateQosPolicyRequest {
  description?: string(name='Description'),
  destCidr?: string(name='DestCidr'),
  destPortRange?: string(name='DestPortRange'),
  dpiGroupIds?: [ string ](name='DpiGroupIds'),
  dpiSignatureIds?: [ string ](name='DpiSignatureIds'),
  endTime?: string(name='EndTime'),
  ipProtocol?: string(name='IpProtocol'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  priority?: int32(name='Priority'),
  qosId?: string(name='QosId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceCidr?: string(name='SourceCidr'),
  sourcePortRange?: string(name='SourcePortRange'),
  startTime?: string(name='StartTime'),
}

model CreateQosPolicyResponseBody = {
  description?: string(name='Description'),
  destCidr?: string(name='DestCidr'),
  destPortRange?: string(name='DestPortRange'),
  dpiGroupIds?: {
    dpiGroupId?: [ string ](name='DpiGroupId')
  }(name='DpiGroupIds'),
  dpiSignatureIds?: {
    dpiSignatureId?: [ string ](name='DpiSignatureId')
  }(name='DpiSignatureIds'),
  endTime?: string(name='EndTime'),
  ipProtocol?: string(name='IpProtocol'),
  name?: string(name='Name'),
  priority?: int32(name='Priority'),
  qosId?: string(name='QosId'),
  qosPolicyId?: string(name='QosPolicyId'),
  requestId?: string(name='RequestId'),
  sourceCidr?: string(name='SourceCidr'),
  sourcePortRange?: string(name='SourcePortRange'),
  startTime?: string(name='StartTime'),
}

model CreateQosPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQosPolicyResponseBody(name='body'),
}

async function createQosPolicyWithOptions(request: CreateQosPolicyRequest, runtime: Util.RuntimeOptions): CreateQosPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destCidr)) {
    query['DestCidr'] = request.destCidr;
  }
  if (!Util.isUnset(request.destPortRange)) {
    query['DestPortRange'] = request.destPortRange;
  }
  if (!Util.isUnset(request.dpiGroupIds)) {
    query['DpiGroupIds'] = request.dpiGroupIds;
  }
  if (!Util.isUnset(request.dpiSignatureIds)) {
    query['DpiSignatureIds'] = request.dpiSignatureIds;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.qosId)) {
    query['QosId'] = request.qosId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceCidr)) {
    query['SourceCidr'] = request.sourceCidr;
  }
  if (!Util.isUnset(request.sourcePortRange)) {
    query['SourcePortRange'] = request.sourcePortRange;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateQosPolicy',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createQosPolicy(request: CreateQosPolicyRequest): CreateQosPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQosPolicyWithOptions(request, runtime);
}

model CreateSagExpressConnectInterfaceRequest {
  IP?: string(name='IP'),
  mask?: string(name='Mask'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  portName?: string(name='PortName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
  vlan?: string(name='Vlan'),
}

model CreateSagExpressConnectInterfaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateSagExpressConnectInterfaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSagExpressConnectInterfaceResponseBody(name='body'),
}

async function createSagExpressConnectInterfaceWithOptions(request: CreateSagExpressConnectInterfaceRequest, runtime: Util.RuntimeOptions): CreateSagExpressConnectInterfaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.IP)) {
    query['IP'] = request.IP;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.portName)) {
    query['PortName'] = request.portName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  if (!Util.isUnset(request.vlan)) {
    query['Vlan'] = request.vlan;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSagExpressConnectInterface',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSagExpressConnectInterface(request: CreateSagExpressConnectInterfaceRequest): CreateSagExpressConnectInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSagExpressConnectInterfaceWithOptions(request, runtime);
}

model CreateSagStaticRouteRequest {
  destinationCidr?: string(name='DestinationCidr'),
  nextHop?: string(name='NextHop'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  portName?: string(name='PortName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
  vlan?: string(name='Vlan'),
}

model CreateSagStaticRouteResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateSagStaticRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSagStaticRouteResponseBody(name='body'),
}

async function createSagStaticRouteWithOptions(request: CreateSagStaticRouteRequest, runtime: Util.RuntimeOptions): CreateSagStaticRouteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationCidr)) {
    query['DestinationCidr'] = request.destinationCidr;
  }
  if (!Util.isUnset(request.nextHop)) {
    query['NextHop'] = request.nextHop;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.portName)) {
    query['PortName'] = request.portName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  if (!Util.isUnset(request.vlan)) {
    query['Vlan'] = request.vlan;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSagStaticRoute',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSagStaticRoute(request: CreateSagStaticRouteRequest): CreateSagStaticRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSagStaticRouteWithOptions(request, runtime);
}

model CreateSmartAccessGatewayRequest {
  alreadyHaveSag?: boolean(name='AlreadyHaveSag'),
  autoPay?: boolean(name='AutoPay'),
  buyerMessage?: string(name='BuyerMessage'),
  CPEVersion?: string(name='CPEVersion'),
  chargeType?: string(name='ChargeType'),
  description?: string(name='Description'),
  haType?: string(name='HaType'),
  hardWareSpec?: string(name='HardWareSpec'),
  maxBandWidth?: int32(name='MaxBandWidth'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period'),
  receiverAddress?: string(name='ReceiverAddress'),
  receiverCity?: string(name='ReceiverCity'),
  receiverCountry?: string(name='ReceiverCountry'),
  receiverDistrict?: string(name='ReceiverDistrict'),
  receiverEmail?: string(name='ReceiverEmail'),
  receiverMobile?: string(name='ReceiverMobile'),
  receiverName?: string(name='ReceiverName'),
  receiverPhone?: string(name='ReceiverPhone'),
  receiverState?: string(name='ReceiverState'),
  receiverTown?: string(name='ReceiverTown'),
  receiverZip?: string(name='ReceiverZip'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateSmartAccessGatewayResponseBody = {
  description?: string(name='Description'),
  name?: string(name='Name'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  smartAGId?: string(name='SmartAGId'),
}

model CreateSmartAccessGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSmartAccessGatewayResponseBody(name='body'),
}

async function createSmartAccessGatewayWithOptions(request: CreateSmartAccessGatewayRequest, runtime: Util.RuntimeOptions): CreateSmartAccessGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alreadyHaveSag)) {
    query['AlreadyHaveSag'] = request.alreadyHaveSag;
  }
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.buyerMessage)) {
    query['BuyerMessage'] = request.buyerMessage;
  }
  if (!Util.isUnset(request.CPEVersion)) {
    query['CPEVersion'] = request.CPEVersion;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.haType)) {
    query['HaType'] = request.haType;
  }
  if (!Util.isUnset(request.hardWareSpec)) {
    query['HardWareSpec'] = request.hardWareSpec;
  }
  if (!Util.isUnset(request.maxBandWidth)) {
    query['MaxBandWidth'] = request.maxBandWidth;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.receiverAddress)) {
    query['ReceiverAddress'] = request.receiverAddress;
  }
  if (!Util.isUnset(request.receiverCity)) {
    query['ReceiverCity'] = request.receiverCity;
  }
  if (!Util.isUnset(request.receiverCountry)) {
    query['ReceiverCountry'] = request.receiverCountry;
  }
  if (!Util.isUnset(request.receiverDistrict)) {
    query['ReceiverDistrict'] = request.receiverDistrict;
  }
  if (!Util.isUnset(request.receiverEmail)) {
    query['ReceiverEmail'] = request.receiverEmail;
  }
  if (!Util.isUnset(request.receiverMobile)) {
    query['ReceiverMobile'] = request.receiverMobile;
  }
  if (!Util.isUnset(request.receiverName)) {
    query['ReceiverName'] = request.receiverName;
  }
  if (!Util.isUnset(request.receiverPhone)) {
    query['ReceiverPhone'] = request.receiverPhone;
  }
  if (!Util.isUnset(request.receiverState)) {
    query['ReceiverState'] = request.receiverState;
  }
  if (!Util.isUnset(request.receiverTown)) {
    query['ReceiverTown'] = request.receiverTown;
  }
  if (!Util.isUnset(request.receiverZip)) {
    query['ReceiverZip'] = request.receiverZip;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSmartAccessGateway',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSmartAccessGateway(request: CreateSmartAccessGatewayRequest): CreateSmartAccessGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSmartAccessGatewayWithOptions(request, runtime);
}

model CreateSmartAccessGatewayClientUserRequest {
  bandwidth?: long(name='Bandwidth'),
  clientIp?: string(name='ClientIp'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  password?: string(name='Password'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  userMail?: string(name='UserMail'),
  userName?: string(name='UserName'),
}

model CreateSmartAccessGatewayClientUserResponseBody = {
  bandwidth?: int32(name='Bandwidth'),
  clientIp?: string(name='ClientIp'),
  requestId?: string(name='RequestId'),
  userMail?: string(name='UserMail'),
  userName?: string(name='UserName'),
}

model CreateSmartAccessGatewayClientUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSmartAccessGatewayClientUserResponseBody(name='body'),
}

async function createSmartAccessGatewayClientUserWithOptions(request: CreateSmartAccessGatewayClientUserRequest, runtime: Util.RuntimeOptions): CreateSmartAccessGatewayClientUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.userMail)) {
    query['UserMail'] = request.userMail;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSmartAccessGatewayClientUser',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSmartAccessGatewayClientUser(request: CreateSmartAccessGatewayClientUserRequest): CreateSmartAccessGatewayClientUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSmartAccessGatewayClientUserWithOptions(request, runtime);
}

model CreateSmartAccessGatewaySoftwareRequest {
  autoPay?: boolean(name='AutoPay'),
  chargeType?: string(name='ChargeType'),
  dataPlan?: long(name='DataPlan'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  userCount?: int32(name='UserCount'),
}

model CreateSmartAccessGatewaySoftwareResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  smartAGId?: string(name='SmartAGId'),
}

model CreateSmartAccessGatewaySoftwareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSmartAccessGatewaySoftwareResponseBody(name='body'),
}

async function createSmartAccessGatewaySoftwareWithOptions(request: CreateSmartAccessGatewaySoftwareRequest, runtime: Util.RuntimeOptions): CreateSmartAccessGatewaySoftwareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.dataPlan)) {
    query['DataPlan'] = request.dataPlan;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.userCount)) {
    query['UserCount'] = request.userCount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSmartAccessGatewaySoftware',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSmartAccessGatewaySoftware(request: CreateSmartAccessGatewaySoftwareRequest): CreateSmartAccessGatewaySoftwareResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSmartAccessGatewaySoftwareWithOptions(request, runtime);
}

model DeactiveFlowLogRequest {
  flowLogId?: string(name='FlowLogId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeactiveFlowLogResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeactiveFlowLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeactiveFlowLogResponseBody(name='body'),
}

async function deactiveFlowLogWithOptions(request: DeactiveFlowLogRequest, runtime: Util.RuntimeOptions): DeactiveFlowLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.flowLogId)) {
    query['FlowLogId'] = request.flowLogId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeactiveFlowLog',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deactiveFlowLog(request: DeactiveFlowLogRequest): DeactiveFlowLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return deactiveFlowLogWithOptions(request, runtime);
}

model DeleteACLRequest {
  aclId?: string(name='AclId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteACLResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteACLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteACLResponseBody(name='body'),
}

async function deleteACLWithOptions(request: DeleteACLRequest, runtime: Util.RuntimeOptions): DeleteACLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteACL',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteACL(request: DeleteACLRequest): DeleteACLResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteACLWithOptions(request, runtime);
}

model DeleteACLRuleRequest {
  aclId?: string(name='AclId'),
  acrId?: string(name='AcrId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteACLRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteACLRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteACLRuleResponseBody(name='body'),
}

async function deleteACLRuleWithOptions(request: DeleteACLRuleRequest, runtime: Util.RuntimeOptions): DeleteACLRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.acrId)) {
    query['AcrId'] = request.acrId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteACLRule',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteACLRule(request: DeleteACLRuleRequest): DeleteACLRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteACLRuleWithOptions(request, runtime);
}

model DeleteCloudConnectNetworkRequest {
  ccnId?: string(name='CcnId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteCloudConnectNetworkResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCloudConnectNetworkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCloudConnectNetworkResponseBody(name='body'),
}

async function deleteCloudConnectNetworkWithOptions(request: DeleteCloudConnectNetworkRequest, runtime: Util.RuntimeOptions): DeleteCloudConnectNetworkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ccnId)) {
    query['CcnId'] = request.ccnId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCloudConnectNetwork',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCloudConnectNetwork(request: DeleteCloudConnectNetworkRequest): DeleteCloudConnectNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCloudConnectNetworkWithOptions(request, runtime);
}

model DeleteDnatEntryRequest {
  dnatEntryId?: string(name='DnatEntryId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sagId?: string(name='SagId'),
}

model DeleteDnatEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDnatEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDnatEntryResponseBody(name='body'),
}

async function deleteDnatEntryWithOptions(request: DeleteDnatEntryRequest, runtime: Util.RuntimeOptions): DeleteDnatEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dnatEntryId)) {
    query['DnatEntryId'] = request.dnatEntryId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sagId)) {
    query['SagId'] = request.sagId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDnatEntry',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDnatEntry(request: DeleteDnatEntryRequest): DeleteDnatEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDnatEntryWithOptions(request, runtime);
}

model DeleteEnterpriseCodeRequest {
  clientToken?: string(name='ClientToken'),
  enterpriseCode?: string(name='EnterpriseCode'),
  regionId?: string(name='RegionId'),
}

model DeleteEnterpriseCodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteEnterpriseCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEnterpriseCodeResponseBody(name='body'),
}

async function deleteEnterpriseCodeWithOptions(request: DeleteEnterpriseCodeRequest, runtime: Util.RuntimeOptions): DeleteEnterpriseCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.enterpriseCode)) {
    query['EnterpriseCode'] = request.enterpriseCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEnterpriseCode',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEnterpriseCode(request: DeleteEnterpriseCodeRequest): DeleteEnterpriseCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEnterpriseCodeWithOptions(request, runtime);
}

model DeleteFlowLogRequest {
  flowLogId?: string(name='FlowLogId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteFlowLogResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteFlowLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFlowLogResponseBody(name='body'),
}

async function deleteFlowLogWithOptions(request: DeleteFlowLogRequest, runtime: Util.RuntimeOptions): DeleteFlowLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.flowLogId)) {
    query['FlowLogId'] = request.flowLogId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFlowLog',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFlowLog(request: DeleteFlowLogRequest): DeleteFlowLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFlowLogWithOptions(request, runtime);
}

model DeleteHealthCheckRequest {
  hcInstanceId?: string(name='HcInstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteHealthCheckResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteHealthCheckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHealthCheckResponseBody(name='body'),
}

async function deleteHealthCheckWithOptions(request: DeleteHealthCheckRequest, runtime: Util.RuntimeOptions): DeleteHealthCheckResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.hcInstanceId)) {
    query['HcInstanceId'] = request.hcInstanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHealthCheck',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteHealthCheck(request: DeleteHealthCheckRequest): DeleteHealthCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHealthCheckWithOptions(request, runtime);
}

model DeleteQosRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  qosId?: string(name='QosId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteQosResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteQosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQosResponseBody(name='body'),
}

async function deleteQosWithOptions(request: DeleteQosRequest, runtime: Util.RuntimeOptions): DeleteQosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.qosId)) {
    query['QosId'] = request.qosId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQos',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteQos(request: DeleteQosRequest): DeleteQosResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQosWithOptions(request, runtime);
}

model DeleteQosCarRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  qosCarId?: string(name='QosCarId'),
  qosId?: string(name='QosId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteQosCarResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteQosCarResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQosCarResponseBody(name='body'),
}

async function deleteQosCarWithOptions(request: DeleteQosCarRequest, runtime: Util.RuntimeOptions): DeleteQosCarResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.qosCarId)) {
    query['QosCarId'] = request.qosCarId;
  }
  if (!Util.isUnset(request.qosId)) {
    query['QosId'] = request.qosId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQosCar',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteQosCar(request: DeleteQosCarRequest): DeleteQosCarResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQosCarWithOptions(request, runtime);
}

model DeleteQosPolicyRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  qosId?: string(name='QosId'),
  qosPolicyId?: string(name='QosPolicyId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteQosPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteQosPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQosPolicyResponseBody(name='body'),
}

async function deleteQosPolicyWithOptions(request: DeleteQosPolicyRequest, runtime: Util.RuntimeOptions): DeleteQosPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.qosId)) {
    query['QosId'] = request.qosId;
  }
  if (!Util.isUnset(request.qosPolicyId)) {
    query['QosPolicyId'] = request.qosPolicyId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQosPolicy',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteQosPolicy(request: DeleteQosPolicyRequest): DeleteQosPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQosPolicyWithOptions(request, runtime);
}

model DeleteRouteDistributionStrategyRequest {
  destCidrBlock?: string(name='DestCidrBlock'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeSource?: string(name='RouteSource'),
  smartAGId?: string(name='SmartAGId'),
  sourceType?: string(name='SourceType'),
}

model DeleteRouteDistributionStrategyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRouteDistributionStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRouteDistributionStrategyResponseBody(name='body'),
}

async function deleteRouteDistributionStrategyWithOptions(request: DeleteRouteDistributionStrategyRequest, runtime: Util.RuntimeOptions): DeleteRouteDistributionStrategyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destCidrBlock)) {
    query['DestCidrBlock'] = request.destCidrBlock;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeSource)) {
    query['RouteSource'] = request.routeSource;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRouteDistributionStrategy',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRouteDistributionStrategy(request: DeleteRouteDistributionStrategyRequest): DeleteRouteDistributionStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRouteDistributionStrategyWithOptions(request, runtime);
}

model DeleteSagExpressConnectInterfaceRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  portName?: string(name='PortName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
  vlan?: string(name='Vlan'),
}

model DeleteSagExpressConnectInterfaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSagExpressConnectInterfaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSagExpressConnectInterfaceResponseBody(name='body'),
}

async function deleteSagExpressConnectInterfaceWithOptions(request: DeleteSagExpressConnectInterfaceRequest, runtime: Util.RuntimeOptions): DeleteSagExpressConnectInterfaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.portName)) {
    query['PortName'] = request.portName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  if (!Util.isUnset(request.vlan)) {
    query['Vlan'] = request.vlan;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSagExpressConnectInterface',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSagExpressConnectInterface(request: DeleteSagExpressConnectInterfaceRequest): DeleteSagExpressConnectInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSagExpressConnectInterfaceWithOptions(request, runtime);
}

model DeleteSagStaticRouteRequest {
  destinationCidr?: string(name='DestinationCidr'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  portName?: string(name='PortName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
  vlan?: string(name='Vlan'),
}

model DeleteSagStaticRouteResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSagStaticRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSagStaticRouteResponseBody(name='body'),
}

async function deleteSagStaticRouteWithOptions(request: DeleteSagStaticRouteRequest, runtime: Util.RuntimeOptions): DeleteSagStaticRouteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationCidr)) {
    query['DestinationCidr'] = request.destinationCidr;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.portName)) {
    query['PortName'] = request.portName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  if (!Util.isUnset(request.vlan)) {
    query['Vlan'] = request.vlan;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSagStaticRoute',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSagStaticRoute(request: DeleteSagStaticRouteRequest): DeleteSagStaticRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSagStaticRouteWithOptions(request, runtime);
}

model DeleteSmartAccessGatewayRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteSmartAccessGatewayResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSmartAccessGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSmartAccessGatewayResponseBody(name='body'),
}

async function deleteSmartAccessGatewayWithOptions(request: DeleteSmartAccessGatewayRequest, runtime: Util.RuntimeOptions): DeleteSmartAccessGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSmartAccessGateway',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSmartAccessGateway(request: DeleteSmartAccessGatewayRequest): DeleteSmartAccessGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSmartAccessGatewayWithOptions(request, runtime);
}

model DeleteSmartAccessGatewayClientUserRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  userName?: string(name='UserName'),
}

model DeleteSmartAccessGatewayClientUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSmartAccessGatewayClientUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSmartAccessGatewayClientUserResponseBody(name='body'),
}

async function deleteSmartAccessGatewayClientUserWithOptions(request: DeleteSmartAccessGatewayClientUserRequest, runtime: Util.RuntimeOptions): DeleteSmartAccessGatewayClientUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSmartAccessGatewayClientUser',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSmartAccessGatewayClientUser(request: DeleteSmartAccessGatewayClientUserRequest): DeleteSmartAccessGatewayClientUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSmartAccessGatewayClientUserWithOptions(request, runtime);
}

model DeleteSnatEntryRequest {
  instanceId?: string(name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model DeleteSnatEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSnatEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSnatEntryResponseBody(name='body'),
}

async function deleteSnatEntryWithOptions(request: DeleteSnatEntryRequest, runtime: Util.RuntimeOptions): DeleteSnatEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSnatEntry',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSnatEntry(request: DeleteSnatEntryRequest): DeleteSnatEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnatEntryWithOptions(request, runtime);
}

model DescribeACLAttributeRequest {
  aclId?: string(name='AclId'),
  direction?: string(name='Direction'),
  name?: string(name='Name'),
  order?: string(name='Order'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeACLAttributeResponseBody = {
  acrs?: {
    acr?: [ 
    {
      aclId?: string(name='AclId'),
      aclType?: string(name='AclType'),
      acrId?: string(name='AcrId'),
      description?: string(name='Description'),
      destCidr?: string(name='DestCidr'),
      destPortRange?: string(name='DestPortRange'),
      direction?: string(name='Direction'),
      dpiGroupIds?: {
        dpiGroupId?: [ string ](name='DpiGroupId')
      }(name='DpiGroupIds'),
      dpiSignatureIds?: {
        dpiSignatureId?: [ string ](name='DpiSignatureId')
      }(name='DpiSignatureIds'),
      gmtCreate?: long(name='GmtCreate'),
      ipProtocol?: string(name='IpProtocol'),
      name?: string(name='Name'),
      policy?: string(name='Policy'),
      priority?: int32(name='Priority'),
      sourceCidr?: string(name='SourceCidr'),
      sourcePortRange?: string(name='SourcePortRange'),
      type?: string(name='Type'),
    }
  ](name='Acr')
  }(name='Acrs'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeACLAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeACLAttributeResponseBody(name='body'),
}

async function describeACLAttributeWithOptions(request: DescribeACLAttributeRequest, runtime: Util.RuntimeOptions): DescribeACLAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeACLAttribute',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeACLAttribute(request: DescribeACLAttributeRequest): DescribeACLAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeACLAttributeWithOptions(request, runtime);
}

model DescribeACLsRequest {
  aclIds?: string(name='AclIds'),
  aclType?: string(name='AclType'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeACLsResponseBody = {
  acls?: {
    acl?: [ 
    {
      aclId?: string(name='AclId'),
      aclType?: string(name='AclType'),
      name?: string(name='Name'),
      resourceGroupId?: string(name='ResourceGroupId'),
      sagCount?: string(name='SagCount'),
    }
  ](name='Acl')
  }(name='Acls'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeACLsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeACLsResponseBody(name='body'),
}

async function describeACLsWithOptions(request: DescribeACLsRequest, runtime: Util.RuntimeOptions): DescribeACLsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclIds)) {
    query['AclIds'] = request.aclIds;
  }
  if (!Util.isUnset(request.aclType)) {
    query['AclType'] = request.aclType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeACLs',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeACLs(request: DescribeACLsRequest): DescribeACLsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeACLsWithOptions(request, runtime);
}

model DescribeBindableSmartAccessGatewaysRequest {
  ccnId?: string(name='CcnId'),
  crossAccount?: boolean(name='CrossAccount'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model DescribeBindableSmartAccessGatewaysResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  smartAccessGateways?: {
    smartAccessGateway?: [ 
    {
      name?: string(name='Name'),
      smartAGId?: string(name='SmartAGId'),
      smartAGUid?: long(name='SmartAGUid'),
    }
  ](name='SmartAccessGateway')
  }(name='SmartAccessGateways'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeBindableSmartAccessGatewaysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBindableSmartAccessGatewaysResponseBody(name='body'),
}

async function describeBindableSmartAccessGatewaysWithOptions(request: DescribeBindableSmartAccessGatewaysRequest, runtime: Util.RuntimeOptions): DescribeBindableSmartAccessGatewaysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ccnId)) {
    query['CcnId'] = request.ccnId;
  }
  if (!Util.isUnset(request.crossAccount)) {
    query['CrossAccount'] = request.crossAccount;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBindableSmartAccessGateways',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBindableSmartAccessGateways(request: DescribeBindableSmartAccessGatewaysRequest): DescribeBindableSmartAccessGatewaysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBindableSmartAccessGatewaysWithOptions(request, runtime);
}

model DescribeClientUserDNSRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model DescribeClientUserDNSResponseBody = {
  appDNS?: [ string ](name='AppDNS'),
  recoveredDNS?: [ string ](name='RecoveredDNS'),
  requestId?: string(name='RequestId'),
}

model DescribeClientUserDNSResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClientUserDNSResponseBody(name='body'),
}

async function describeClientUserDNSWithOptions(request: DescribeClientUserDNSRequest, runtime: Util.RuntimeOptions): DescribeClientUserDNSResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClientUserDNS',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClientUserDNS(request: DescribeClientUserDNSRequest): DescribeClientUserDNSResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClientUserDNSWithOptions(request, runtime);
}

model DescribeCloudConnectNetworksRequest {
  ccnId?: string(name='CcnId'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeCloudConnectNetworksResponseBody = {
  cloudConnectNetworks?: {
    cloudConnectNetwork?: [ 
    {
      associatedCenId?: string(name='AssociatedCenId'),
      associatedCenOwnerId?: string(name='AssociatedCenOwnerId'),
      associatedCloudBoxCount?: string(name='AssociatedCloudBoxCount'),
      availableCloudBoxCount?: string(name='AvailableCloudBoxCount'),
      ccnId?: string(name='CcnId'),
      cidrBlock?: string(name='CidrBlock'),
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      interworkingStatus?: string(name='InterworkingStatus'),
      name?: string(name='Name'),
      resourceGroupId?: string(name='ResourceGroupId'),
      snatCidrBlock?: string(name='SnatCidrBlock'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
    }
  ](name='CloudConnectNetwork')
  }(name='CloudConnectNetworks'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCloudConnectNetworksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudConnectNetworksResponseBody(name='body'),
}

async function describeCloudConnectNetworksWithOptions(request: DescribeCloudConnectNetworksRequest, runtime: Util.RuntimeOptions): DescribeCloudConnectNetworksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ccnId)) {
    query['CcnId'] = request.ccnId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudConnectNetworks',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudConnectNetworks(request: DescribeCloudConnectNetworksRequest): DescribeCloudConnectNetworksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudConnectNetworksWithOptions(request, runtime);
}

model DescribeDeviceAutoUpgradePolicyRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serialNumber?: string(name='SerialNumber'),
  smartAGId?: string(name='SmartAGId'),
  versionType?: string(name='VersionType'),
}

model DescribeDeviceAutoUpgradePolicyResponseBody = {
  cronExpression?: string(name='CronExpression'),
  duration?: string(name='Duration'),
  jitter?: string(name='Jitter'),
  requestId?: string(name='RequestId'),
  serialNumber?: string(name='SerialNumber'),
  smartAGId?: string(name='SmartAGId'),
  timeZone?: string(name='TimeZone'),
  upgradeType?: string(name='UpgradeType'),
}

model DescribeDeviceAutoUpgradePolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDeviceAutoUpgradePolicyResponseBody(name='body'),
}

async function describeDeviceAutoUpgradePolicyWithOptions(request: DescribeDeviceAutoUpgradePolicyRequest, runtime: Util.RuntimeOptions): DescribeDeviceAutoUpgradePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.versionType)) {
    query['VersionType'] = request.versionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDeviceAutoUpgradePolicy',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDeviceAutoUpgradePolicy(request: DescribeDeviceAutoUpgradePolicyRequest): DescribeDeviceAutoUpgradePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeviceAutoUpgradePolicyWithOptions(request, runtime);
}

model DescribeDnatEntriesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sagId?: string(name='SagId'),
  type?: string(name='Type'),
}

model DescribeDnatEntriesResponseBody = {
  dnatEntries?: {
    dnatEntry?: [ 
    {
      dnatEntryId?: string(name='DnatEntryId'),
      externalIp?: string(name='ExternalIp'),
      externalPort?: string(name='ExternalPort'),
      internalIp?: string(name='InternalIp'),
      internalPort?: string(name='InternalPort'),
      ipProtocol?: string(name='IpProtocol'),
      sagId?: string(name='SagId'),
      type?: string(name='Type'),
    }
  ](name='DnatEntry')
  }(name='DnatEntries'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDnatEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDnatEntriesResponseBody(name='body'),
}

async function describeDnatEntriesWithOptions(request: DescribeDnatEntriesRequest, runtime: Util.RuntimeOptions): DescribeDnatEntriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sagId)) {
    query['SagId'] = request.sagId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDnatEntries',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDnatEntries(request: DescribeDnatEntriesRequest): DescribeDnatEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnatEntriesWithOptions(request, runtime);
}

model DescribeFlowLogSagsRequest {
  flowLogId?: string(name='FlowLogId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeFlowLogSagsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  sags?: {
    sag?: [ 
    {
      description?: string(name='Description'),
      name?: string(name='Name'),
      smartAGId?: string(name='SmartAGId'),
    }
  ](name='Sag')
  }(name='Sags'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeFlowLogSagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFlowLogSagsResponseBody(name='body'),
}

async function describeFlowLogSagsWithOptions(request: DescribeFlowLogSagsRequest, runtime: Util.RuntimeOptions): DescribeFlowLogSagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.flowLogId)) {
    query['FlowLogId'] = request.flowLogId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFlowLogSags',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFlowLogSags(request: DescribeFlowLogSagsRequest): DescribeFlowLogSagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFlowLogSagsWithOptions(request, runtime);
}

model DescribeFlowLogsRequest {
  description?: string(name='Description'),
  flowLogId?: string(name='FlowLogId'),
  flowLogName?: string(name='FlowLogName'),
  outputType?: string(name='OutputType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
}

model DescribeFlowLogsResponseBody = {
  flowLogs?: {
    flowLogSetType?: [ 
    {
      activeAging?: int32(name='ActiveAging'),
      description?: string(name='Description'),
      flowLogId?: string(name='FlowLogId'),
      inactiveAging?: int32(name='InactiveAging'),
      logstoreName?: string(name='LogstoreName'),
      name?: string(name='Name'),
      netflowServerIp?: string(name='NetflowServerIp'),
      netflowServerPort?: string(name='NetflowServerPort'),
      netflowVersion?: string(name='NetflowVersion'),
      outputType?: string(name='OutputType'),
      projectName?: string(name='ProjectName'),
      resourceGroupId?: string(name='ResourceGroupId'),
      slsRegionId?: string(name='SlsRegionId'),
      status?: string(name='Status'),
      totalSagNum?: int32(name='TotalSagNum'),
    }
  ](name='FlowLogSetType')
  }(name='FlowLogs'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeFlowLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFlowLogsResponseBody(name='body'),
}

async function describeFlowLogsWithOptions(request: DescribeFlowLogsRequest, runtime: Util.RuntimeOptions): DescribeFlowLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.flowLogId)) {
    query['FlowLogId'] = request.flowLogId;
  }
  if (!Util.isUnset(request.flowLogName)) {
    query['FlowLogName'] = request.flowLogName;
  }
  if (!Util.isUnset(request.outputType)) {
    query['OutputType'] = request.outputType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFlowLogs',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFlowLogs(request: DescribeFlowLogsRequest): DescribeFlowLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFlowLogsWithOptions(request, runtime);
}

model DescribeGrantRulesRequest {
  associatedCcnId?: string(name='AssociatedCcnId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeGrantRulesResponseBody = {
  grantRules?: {
    grantRule?: [ 
    {
      ccnInstanceId?: string(name='CcnInstanceId'),
      ccnUid?: long(name='CcnUid'),
      cenInstanceId?: string(name='CenInstanceId'),
      cenUid?: long(name='CenUid'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      grantRuleId?: string(name='GrantRuleId'),
      grantTrafficService?: boolean(name='GrantTrafficService'),
      regionId?: string(name='RegionId'),
    }
  ](name='GrantRule')
  }(name='GrantRules'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeGrantRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGrantRulesResponseBody(name='body'),
}

async function describeGrantRulesWithOptions(request: DescribeGrantRulesRequest, runtime: Util.RuntimeOptions): DescribeGrantRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.associatedCcnId)) {
    query['AssociatedCcnId'] = request.associatedCcnId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGrantRules',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGrantRules(request: DescribeGrantRulesRequest): DescribeGrantRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGrantRulesWithOptions(request, runtime);
}

model DescribeGrantSagRulesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model DescribeGrantSagRulesResponseBody = {
  grantRules?: {
    grantRule?: [ 
    {
      ccnInstanceId?: string(name='CcnInstanceId'),
      ccnUid?: long(name='CcnUid'),
      createTime?: long(name='CreateTime'),
      grantTrafficService?: boolean(name='GrantTrafficService'),
      instanceId?: string(name='InstanceId'),
      smartAGId?: string(name='SmartAGId'),
    }
  ](name='GrantRule')
  }(name='GrantRules'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeGrantSagRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGrantSagRulesResponseBody(name='body'),
}

async function describeGrantSagRulesWithOptions(request: DescribeGrantSagRulesRequest, runtime: Util.RuntimeOptions): DescribeGrantSagRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGrantSagRules',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGrantSagRules(request: DescribeGrantSagRulesRequest): DescribeGrantSagRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGrantSagRulesWithOptions(request, runtime);
}

model DescribeGrantSagVbrRulesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  vbrInstanceId?: string(name='VbrInstanceId'),
}

model DescribeGrantSagVbrRulesResponseBody = {
  grantRules?: {
    grantRule?: [ 
    {
      bound?: boolean(name='Bound'),
      createTime?: long(name='CreateTime'),
      instanceId?: string(name='InstanceId'),
      smartAGId?: string(name='SmartAGId'),
      smartAGUid?: long(name='SmartAGUid'),
      vbrInstanceId?: string(name='VbrInstanceId'),
      vbrRegionId?: string(name='VbrRegionId'),
      vbrUid?: long(name='VbrUid'),
    }
  ](name='GrantRule')
  }(name='GrantRules'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeGrantSagVbrRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGrantSagVbrRulesResponseBody(name='body'),
}

async function describeGrantSagVbrRulesWithOptions(request: DescribeGrantSagVbrRulesRequest, runtime: Util.RuntimeOptions): DescribeGrantSagVbrRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.vbrInstanceId)) {
    query['VbrInstanceId'] = request.vbrInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGrantSagVbrRules',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGrantSagVbrRules(request: DescribeGrantSagVbrRulesRequest): DescribeGrantSagVbrRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGrantSagVbrRulesWithOptions(request, runtime);
}

model DescribeHealthCheckAttributeRequest {
  hcInstanceId?: string(name='HcInstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model DescribeHealthCheckAttributeResponseBody = {
  createTime?: long(name='CreateTime'),
  description?: string(name='Description'),
  dstIpAddr?: string(name='DstIpAddr'),
  dstPort?: int32(name='DstPort'),
  failCountThreshold?: int32(name='FailCountThreshold'),
  hcInstanceId?: string(name='HcInstanceId'),
  name?: string(name='Name'),
  probeCount?: int32(name='ProbeCount'),
  probeInterval?: int32(name='ProbeInterval'),
  probeTimeout?: int32(name='ProbeTimeout'),
  requestId?: string(name='RequestId'),
  rttFailThreshold?: int32(name='RttFailThreshold'),
  rttThreshold?: int32(name='RttThreshold'),
  smartAGId?: string(name='SmartAGId'),
  srcIpAddr?: string(name='SrcIpAddr'),
  srcPort?: int32(name='SrcPort'),
  type?: string(name='Type'),
}

model DescribeHealthCheckAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHealthCheckAttributeResponseBody(name='body'),
}

async function describeHealthCheckAttributeWithOptions(request: DescribeHealthCheckAttributeRequest, runtime: Util.RuntimeOptions): DescribeHealthCheckAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.hcInstanceId)) {
    query['HcInstanceId'] = request.hcInstanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHealthCheckAttribute',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHealthCheckAttribute(request: DescribeHealthCheckAttributeRequest): DescribeHealthCheckAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHealthCheckAttributeWithOptions(request, runtime);
}

model DescribeHealthChecksRequest {
  hcInstanceId?: string(name='HcInstanceId'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model DescribeHealthChecksResponseBody = {
  healthChecks?: {
    healthCheck?: [ 
    {
      description?: string(name='Description'),
      dstIpAddr?: string(name='DstIpAddr'),
      dstPort?: int32(name='DstPort'),
      failCountThreshold?: int32(name='FailCountThreshold'),
      hcInstanceId?: string(name='HcInstanceId'),
      name?: string(name='Name'),
      probeCount?: int32(name='ProbeCount'),
      probeInterval?: int32(name='ProbeInterval'),
      probeTimeout?: int32(name='ProbeTimeout'),
      relationCount?: int32(name='RelationCount'),
      rttFailThreshold?: int32(name='RttFailThreshold'),
      rttThreshold?: int32(name='RttThreshold'),
      smartAGId?: string(name='SmartAGId'),
      srcIpAddr?: string(name='SrcIpAddr'),
      srcPort?: int32(name='SrcPort'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='HealthCheck')
  }(name='HealthChecks'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeHealthChecksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHealthChecksResponseBody(name='body'),
}

async function describeHealthChecksWithOptions(request: DescribeHealthChecksRequest, runtime: Util.RuntimeOptions): DescribeHealthChecksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.hcInstanceId)) {
    query['HcInstanceId'] = request.hcInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHealthChecks',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHealthChecks(request: DescribeHealthChecksRequest): DescribeHealthChecksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHealthChecksWithOptions(request, runtime);
}

model DescribeQosCarsRequest {
  description?: string(name='Description'),
  order?: string(name='Order'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  qosCarId?: string(name='QosCarId'),
  qosId?: string(name='QosId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeQosCarsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  qosCars?: {
    qosCar?: [ 
    {
      description?: string(name='Description'),
      limitType?: string(name='LimitType'),
      maxBandwidthAbs?: int32(name='MaxBandwidthAbs'),
      maxBandwidthPercent?: int32(name='MaxBandwidthPercent'),
      minBandwidthAbs?: int32(name='MinBandwidthAbs'),
      minBandwidthPercent?: int32(name='MinBandwidthPercent'),
      name?: string(name='Name'),
      percentSourceType?: string(name='PercentSourceType'),
      priority?: int32(name='Priority'),
      qosCarId?: string(name='QosCarId'),
      qosId?: string(name='QosId'),
    }
  ](name='QosCar')
  }(name='QosCars'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeQosCarsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeQosCarsResponseBody(name='body'),
}

async function describeQosCarsWithOptions(request: DescribeQosCarsRequest, runtime: Util.RuntimeOptions): DescribeQosCarsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.qosCarId)) {
    query['QosCarId'] = request.qosCarId;
  }
  if (!Util.isUnset(request.qosId)) {
    query['QosId'] = request.qosId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeQosCars',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeQosCars(request: DescribeQosCarsRequest): DescribeQosCarsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeQosCarsWithOptions(request, runtime);
}

model DescribeQosPoliciesRequest {
  description?: string(name='Description'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  priority?: int32(name='Priority'),
  qosId?: string(name='QosId'),
  qosPolicyId?: string(name='QosPolicyId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeQosPoliciesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  qosPolicies?: {
    qosPolicy?: [ 
    {
      description?: string(name='Description'),
      destCidr?: string(name='DestCidr'),
      destPortRange?: string(name='DestPortRange'),
      dpiGroupIds?: {
        dpiGroupId?: [ string ](name='DpiGroupId')
      }(name='DpiGroupIds'),
      dpiSignatureIds?: {
        dpiSignatureId?: [ string ](name='DpiSignatureId')
      }(name='DpiSignatureIds'),
      endTime?: string(name='EndTime'),
      ipProtocol?: string(name='IpProtocol'),
      name?: string(name='Name'),
      priority?: int32(name='Priority'),
      qosId?: string(name='QosId'),
      qosPolicyId?: string(name='QosPolicyId'),
      sourceCidr?: string(name='SourceCidr'),
      sourcePortRange?: string(name='SourcePortRange'),
      startTime?: string(name='StartTime'),
    }
  ](name='QosPolicy')
  }(name='QosPolicies'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeQosPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeQosPoliciesResponseBody(name='body'),
}

async function describeQosPoliciesWithOptions(request: DescribeQosPoliciesRequest, runtime: Util.RuntimeOptions): DescribeQosPoliciesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.qosId)) {
    query['QosId'] = request.qosId;
  }
  if (!Util.isUnset(request.qosPolicyId)) {
    query['QosPolicyId'] = request.qosPolicyId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeQosPolicies',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeQosPolicies(request: DescribeQosPoliciesRequest): DescribeQosPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeQosPoliciesWithOptions(request, runtime);
}

model DescribeQosesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  qosIds?: string(name='QosIds'),
  qosName?: string(name='QosName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeQosesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  qoses?: {
    qos?: [ 
    {
      qosDescription?: string(name='QosDescription'),
      qosId?: string(name='QosId'),
      qosName?: string(name='QosName'),
      resourceGroupId?: string(name='ResourceGroupId'),
      sagCount?: string(name='SagCount'),
      smartAGIds?: string(name='SmartAGIds'),
    }
  ](name='Qos')
  }(name='Qoses'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeQosesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeQosesResponseBody(name='body'),
}

async function describeQosesWithOptions(request: DescribeQosesRequest, runtime: Util.RuntimeOptions): DescribeQosesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.qosIds)) {
    query['QosIds'] = request.qosIds;
  }
  if (!Util.isUnset(request.qosName)) {
    query['QosName'] = request.qosName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeQoses',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeQoses(request: DescribeQosesRequest): DescribeQosesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeQosesWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeRouteDistributionStrategiesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  sourceType?: string(name='SourceType'),
}

model DescribeRouteDistributionStrategiesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  strategies?: {
    strategy?: [ 
    {
      conflictInfo?: string(name='ConflictInfo'),
      createTime?: long(name='CreateTime'),
      destCidrBlock?: string(name='DestCidrBlock'),
      hcInstanceId?: string(name='HcInstanceId'),
      isConflict?: boolean(name='IsConflict'),
      routeDistribution?: string(name='RouteDistribution'),
      routeSource?: string(name='RouteSource'),
      smartAGId?: string(name='SmartAGId'),
      sourceType?: string(name='SourceType'),
      status?: string(name='Status'),
      strategyPublishStatus?: string(name='StrategyPublishStatus'),
    }
  ](name='Strategy')
  }(name='Strategies'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRouteDistributionStrategiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRouteDistributionStrategiesResponseBody(name='body'),
}

async function describeRouteDistributionStrategiesWithOptions(request: DescribeRouteDistributionStrategiesRequest, runtime: Util.RuntimeOptions): DescribeRouteDistributionStrategiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRouteDistributionStrategies',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRouteDistributionStrategies(request: DescribeRouteDistributionStrategiesRequest): DescribeRouteDistributionStrategiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRouteDistributionStrategiesWithOptions(request, runtime);
}

model DescribeSAGDeviceInfoRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model DescribeSAGDeviceInfoResponseBody = {
  controllerState?: string(name='ControllerState'),
  lastConnectedControllerTime?: string(name='LastConnectedControllerTime'),
  requestId?: string(name='RequestId'),
  resettableStatus?: string(name='ResettableStatus'),
  serviceIP?: string(name='ServiceIP'),
  smartAGType?: string(name='SmartAGType'),
  startupTime?: string(name='StartupTime'),
  synStatus?: string(name='SynStatus'),
  version?: string(name='Version'),
  vpnState?: string(name='VpnState'),
}

model DescribeSAGDeviceInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSAGDeviceInfoResponseBody(name='body'),
}

async function describeSAGDeviceInfoWithOptions(request: DescribeSAGDeviceInfoRequest, runtime: Util.RuntimeOptions): DescribeSAGDeviceInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSAGDeviceInfo',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSAGDeviceInfo(request: DescribeSAGDeviceInfoRequest): DescribeSAGDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSAGDeviceInfoWithOptions(request, runtime);
}

model DescribeSagCurrentDnsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model DescribeSagCurrentDnsResponseBody = {
  masterDns?: string(name='MasterDns'),
  requestId?: string(name='RequestId'),
  slaveDns?: string(name='SlaveDns'),
}

model DescribeSagCurrentDnsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagCurrentDnsResponseBody(name='body'),
}

async function describeSagCurrentDnsWithOptions(request: DescribeSagCurrentDnsRequest, runtime: Util.RuntimeOptions): DescribeSagCurrentDnsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagCurrentDns',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagCurrentDns(request: DescribeSagCurrentDnsRequest): DescribeSagCurrentDnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagCurrentDnsWithOptions(request, runtime);
}

model DescribeSagDropTopNRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  size?: int32(name='Size'),
}

model DescribeSagDropTopNResponseBody = {
  dropTopN?: [ 
    {
      dropRate?: string(name='DropRate'),
      instanceId?: string(name='InstanceId'),
      name?: string(name='Name'),
      regionId?: string(name='RegionId'),
    }
  ](name='DropTopN'),
  requestId?: string(name='RequestId'),
}

model DescribeSagDropTopNResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagDropTopNResponseBody(name='body'),
}

async function describeSagDropTopNWithOptions(request: DescribeSagDropTopNRequest, runtime: Util.RuntimeOptions): DescribeSagDropTopNResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.size)) {
    query['Size'] = request.size;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagDropTopN',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagDropTopN(request: DescribeSagDropTopNRequest): DescribeSagDropTopNResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagDropTopNWithOptions(request, runtime);
}

model DescribeSagExpressConnectInterfaceListRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  portName?: string(name='PortName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model DescribeSagExpressConnectInterfaceListResponseBody = {
  interfaces?: [ 
    {
      IP?: string(name='IP'),
      mask?: string(name='Mask'),
      vlan?: string(name='Vlan'),
    }
  ](name='Interfaces'),
  requestId?: string(name='RequestId'),
  taskStates?: [ 
    {
      createTime?: string(name='CreateTime'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      state?: string(name='State'),
    }
  ](name='TaskStates'),
}

model DescribeSagExpressConnectInterfaceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagExpressConnectInterfaceListResponseBody(name='body'),
}

async function describeSagExpressConnectInterfaceListWithOptions(request: DescribeSagExpressConnectInterfaceListRequest, runtime: Util.RuntimeOptions): DescribeSagExpressConnectInterfaceListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.portName)) {
    query['PortName'] = request.portName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagExpressConnectInterfaceList',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagExpressConnectInterfaceList(request: DescribeSagExpressConnectInterfaceListRequest): DescribeSagExpressConnectInterfaceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagExpressConnectInterfaceListWithOptions(request, runtime);
}

model DescribeSagGlobalRouteProtocolRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model DescribeSagGlobalRouteProtocolResponseBody = {
  requestId?: string(name='RequestId'),
  routeProtocol?: string(name='RouteProtocol'),
  taskStates?: [ 
    {
      createTime?: string(name='CreateTime'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      state?: string(name='State'),
    }
  ](name='TaskStates'),
}

model DescribeSagGlobalRouteProtocolResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagGlobalRouteProtocolResponseBody(name='body'),
}

async function describeSagGlobalRouteProtocolWithOptions(request: DescribeSagGlobalRouteProtocolRequest, runtime: Util.RuntimeOptions): DescribeSagGlobalRouteProtocolResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagGlobalRouteProtocol',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagGlobalRouteProtocol(request: DescribeSagGlobalRouteProtocolRequest): DescribeSagGlobalRouteProtocolResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagGlobalRouteProtocolWithOptions(request, runtime);
}

model DescribeSagHaRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model DescribeSagHaResponseBody = {
  mode?: string(name='Mode'),
  ports?: [ 
    {
      portName?: string(name='PortName'),
      virtualIp?: string(name='VirtualIp'),
    }
  ](name='Ports'),
  requestId?: string(name='RequestId'),
  taskStates?: [ 
    {
      createTime?: string(name='CreateTime'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      state?: string(name='State'),
    }
  ](name='TaskStates'),
}

model DescribeSagHaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagHaResponseBody(name='body'),
}

async function describeSagHaWithOptions(request: DescribeSagHaRequest, runtime: Util.RuntimeOptions): DescribeSagHaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagHa',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagHa(request: DescribeSagHaRequest): DescribeSagHaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagHaWithOptions(request, runtime);
}

model DescribeSagLanListRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model DescribeSagLanListResponseBody = {
  lans?: [ 
    {
      endIp?: string(name='EndIp'),
      IP?: string(name='IP'),
      IPType?: string(name='IPType'),
      lease?: string(name='Lease'),
      mask?: string(name='Mask'),
      portName?: string(name='PortName'),
      startIp?: string(name='StartIp'),
    }
  ](name='Lans'),
  requestId?: string(name='RequestId'),
  taskStates?: [ 
    {
      createTime?: string(name='CreateTime'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      state?: string(name='State'),
    }
  ](name='TaskStates'),
}

model DescribeSagLanListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagLanListResponseBody(name='body'),
}

async function describeSagLanListWithOptions(request: DescribeSagLanListRequest, runtime: Util.RuntimeOptions): DescribeSagLanListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagLanList',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagLanList(request: DescribeSagLanListRequest): DescribeSagLanListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagLanListWithOptions(request, runtime);
}

model DescribeSagManagementPortRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model DescribeSagManagementPortResponseBody = {
  gateway?: string(name='Gateway'),
  IP?: string(name='IP'),
  mask?: string(name='Mask'),
  requestId?: string(name='RequestId'),
  taskStates?: [ 
    {
      createTime?: string(name='CreateTime'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      state?: string(name='State'),
    }
  ](name='TaskStates'),
}

model DescribeSagManagementPortResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagManagementPortResponseBody(name='body'),
}

async function describeSagManagementPortWithOptions(request: DescribeSagManagementPortRequest, runtime: Util.RuntimeOptions): DescribeSagManagementPortResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagManagementPort',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagManagementPort(request: DescribeSagManagementPortRequest): DescribeSagManagementPortResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagManagementPortWithOptions(request, runtime);
}

model DescribeSagOnlineClientStatisticsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGIds?: [ string ](name='SmartAGIds'),
}

model DescribeSagOnlineClientStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  sagStatistics?: {
    statistics?: [ 
    {
      onlineCount?: string(name='OnlineCount'),
      smartAGId?: string(name='SmartAGId'),
    }
  ](name='Statistics')
  }(name='SagStatistics'),
}

model DescribeSagOnlineClientStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagOnlineClientStatisticsResponseBody(name='body'),
}

async function describeSagOnlineClientStatisticsWithOptions(request: DescribeSagOnlineClientStatisticsRequest, runtime: Util.RuntimeOptions): DescribeSagOnlineClientStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGIds)) {
    query['SmartAGIds'] = request.smartAGIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagOnlineClientStatistics',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagOnlineClientStatistics(request: DescribeSagOnlineClientStatisticsRequest): DescribeSagOnlineClientStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagOnlineClientStatisticsWithOptions(request, runtime);
}

model DescribeSagPortListRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model DescribeSagPortListResponseBody = {
  ports?: [ 
    {
      mac?: string(name='Mac'),
      portName?: string(name='PortName'),
      role?: string(name='Role'),
      status?: string(name='Status'),
    }
  ](name='Ports'),
  requestId?: string(name='RequestId'),
  taskStates?: [ 
    {
      createTime?: string(name='CreateTime'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      state?: string(name='State'),
    }
  ](name='TaskStates'),
}

model DescribeSagPortListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagPortListResponseBody(name='body'),
}

async function describeSagPortListWithOptions(request: DescribeSagPortListRequest, runtime: Util.RuntimeOptions): DescribeSagPortListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagPortList',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagPortList(request: DescribeSagPortListRequest): DescribeSagPortListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagPortListWithOptions(request, runtime);
}

model DescribeSagPortRouteProtocolListRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model DescribeSagPortRouteProtocolListResponseBody = {
  ports?: [ 
    {
      neighborIp?: string(name='NeighborIp'),
      portName?: string(name='PortName'),
      remoteAs?: string(name='RemoteAs'),
      remoteIp?: string(name='RemoteIp'),
      routeProtocol?: string(name='RouteProtocol'),
      status?: string(name='Status'),
      vlan?: string(name='Vlan'),
    }
  ](name='Ports'),
  requestId?: string(name='RequestId'),
  taskStates?: [ 
    {
      createTime?: string(name='CreateTime'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      state?: string(name='State'),
    }
  ](name='TaskStates'),
}

model DescribeSagPortRouteProtocolListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagPortRouteProtocolListResponseBody(name='body'),
}

async function describeSagPortRouteProtocolListWithOptions(request: DescribeSagPortRouteProtocolListRequest, runtime: Util.RuntimeOptions): DescribeSagPortRouteProtocolListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagPortRouteProtocolList',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagPortRouteProtocolList(request: DescribeSagPortRouteProtocolListRequest): DescribeSagPortRouteProtocolListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagPortRouteProtocolListWithOptions(request, runtime);
}

model DescribeSagRemoteAccessRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serialNumber?: string(name='SerialNumber'),
  smartAGId?: string(name='SmartAGId'),
}

model DescribeSagRemoteAccessResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  remoteAccesses?: {
    remoteAccess?: [ 
    {
      remoteAccessIp?: string(name='RemoteAccessIp'),
      serialNumber?: string(name='SerialNumber'),
    }
  ](name='RemoteAccess')
  }(name='RemoteAccesses'),
  requestId?: string(name='RequestId'),
  smartAGId?: string(name='SmartAGId'),
  success?: boolean(name='Success'),
}

model DescribeSagRemoteAccessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagRemoteAccessResponseBody(name='body'),
}

async function describeSagRemoteAccessWithOptions(request: DescribeSagRemoteAccessRequest, runtime: Util.RuntimeOptions): DescribeSagRemoteAccessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagRemoteAccess',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagRemoteAccess(request: DescribeSagRemoteAccessRequest): DescribeSagRemoteAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagRemoteAccessWithOptions(request, runtime);
}

model DescribeSagRouteListRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model DescribeSagRouteListResponseBody = {
  requestId?: string(name='RequestId'),
  routes?: [ 
    {
      conflictCidrs?: [ string ](name='ConflictCidrs'),
      cost?: string(name='Cost'),
      destinationCidr?: string(name='DestinationCidr'),
      nextHop?: string(name='NextHop'),
      portName?: string(name='PortName'),
      routeProtocol?: string(name='RouteProtocol'),
    }
  ](name='Routes'),
}

model DescribeSagRouteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagRouteListResponseBody(name='body'),
}

async function describeSagRouteListWithOptions(request: DescribeSagRouteListRequest, runtime: Util.RuntimeOptions): DescribeSagRouteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagRouteList',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagRouteList(request: DescribeSagRouteListRequest): DescribeSagRouteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagRouteListWithOptions(request, runtime);
}

model DescribeSagRouteProtocolBgpRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model DescribeSagRouteProtocolBgpResponseBody = {
  holdTime?: int32(name='HoldTime'),
  keepAlive?: int32(name='KeepAlive'),
  localAs?: int32(name='LocalAs'),
  requestId?: string(name='RequestId'),
  routerId?: string(name='RouterId'),
  taskStates?: [ 
    {
      createTime?: string(name='CreateTime'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      state?: string(name='State'),
    }
  ](name='TaskStates'),
}

model DescribeSagRouteProtocolBgpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagRouteProtocolBgpResponseBody(name='body'),
}

async function describeSagRouteProtocolBgpWithOptions(request: DescribeSagRouteProtocolBgpRequest, runtime: Util.RuntimeOptions): DescribeSagRouteProtocolBgpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagRouteProtocolBgp',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagRouteProtocolBgp(request: DescribeSagRouteProtocolBgpRequest): DescribeSagRouteProtocolBgpResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagRouteProtocolBgpWithOptions(request, runtime);
}

model DescribeSagRouteProtocolOspfRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model DescribeSagRouteProtocolOspfResponseBody = {
  areaId?: string(name='AreaId'),
  areaType?: string(name='AreaType'),
  authenticationType?: string(name='AuthenticationType'),
  deadTime?: int32(name='DeadTime'),
  helloTime?: int32(name='HelloTime'),
  md5Key?: string(name='Md5Key'),
  md5KeyId?: int32(name='Md5KeyId'),
  requestId?: string(name='RequestId'),
  routerId?: string(name='RouterId'),
  taskStates?: [ 
    {
      createTime?: string(name='CreateTime'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      state?: string(name='State'),
    }
  ](name='TaskStates'),
}

model DescribeSagRouteProtocolOspfResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagRouteProtocolOspfResponseBody(name='body'),
}

async function describeSagRouteProtocolOspfWithOptions(request: DescribeSagRouteProtocolOspfRequest, runtime: Util.RuntimeOptions): DescribeSagRouteProtocolOspfResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagRouteProtocolOspf',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagRouteProtocolOspf(request: DescribeSagRouteProtocolOspfRequest): DescribeSagRouteProtocolOspfResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagRouteProtocolOspfWithOptions(request, runtime);
}

model DescribeSagStaticRouteListRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model DescribeSagStaticRouteListResponseBody = {
  requestId?: string(name='RequestId'),
  staticRoutes?: [ 
    {
      destinationCidr?: string(name='DestinationCidr'),
      nextHop?: string(name='NextHop'),
      portName?: string(name='PortName'),
      vlan?: string(name='Vlan'),
    }
  ](name='StaticRoutes'),
  taskStates?: [ 
    {
      createTime?: string(name='CreateTime'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      state?: string(name='State'),
    }
  ](name='TaskStates'),
}

model DescribeSagStaticRouteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagStaticRouteListResponseBody(name='body'),
}

async function describeSagStaticRouteListWithOptions(request: DescribeSagStaticRouteListRequest, runtime: Util.RuntimeOptions): DescribeSagStaticRouteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagStaticRouteList',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagStaticRouteList(request: DescribeSagStaticRouteListRequest): DescribeSagStaticRouteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagStaticRouteListWithOptions(request, runtime);
}

model DescribeSagTrafficTopNRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  size?: int32(name='Size'),
}

model DescribeSagTrafficTopNResponseBody = {
  requestId?: string(name='RequestId'),
  trafficTopN?: [ 
    {
      instanceId?: string(name='InstanceId'),
      name?: string(name='Name'),
      regionId?: string(name='RegionId'),
      trafficRate?: string(name='TrafficRate'),
    }
  ](name='TrafficTopN'),
}

model DescribeSagTrafficTopNResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagTrafficTopNResponseBody(name='body'),
}

async function describeSagTrafficTopNWithOptions(request: DescribeSagTrafficTopNRequest, runtime: Util.RuntimeOptions): DescribeSagTrafficTopNResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.size)) {
    query['Size'] = request.size;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagTrafficTopN',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagTrafficTopN(request: DescribeSagTrafficTopNRequest): DescribeSagTrafficTopNResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagTrafficTopNWithOptions(request, runtime);
}

model DescribeSagUserDnsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model DescribeSagUserDnsResponseBody = {
  masterDns?: string(name='MasterDns'),
  requestId?: string(name='RequestId'),
  slaveDns?: string(name='SlaveDns'),
  taskStates?: [ 
    {
      createTime?: string(name='CreateTime'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      state?: string(name='State'),
    }
  ](name='TaskStates'),
}

model DescribeSagUserDnsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagUserDnsResponseBody(name='body'),
}

async function describeSagUserDnsWithOptions(request: DescribeSagUserDnsRequest, runtime: Util.RuntimeOptions): DescribeSagUserDnsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagUserDns',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagUserDns(request: DescribeSagUserDnsRequest): DescribeSagUserDnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagUserDnsWithOptions(request, runtime);
}

model DescribeSagVbrRelationsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vbrInstanceIds?: [ string ](name='VbrInstanceIds'),
  vbrRegionId?: string(name='VbrRegionId'),
}

model DescribeSagVbrRelationsResponseBody = {
  requestId?: string(name='RequestId'),
  sagVbrRelations?: [ 
    {
      sagInstanceId?: string(name='SagInstanceId'),
      sagUid?: string(name='SagUid'),
      vbrInstanceId?: string(name='VbrInstanceId'),
    }
  ](name='SagVbrRelations'),
}

model DescribeSagVbrRelationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagVbrRelationsResponseBody(name='body'),
}

async function describeSagVbrRelationsWithOptions(request: DescribeSagVbrRelationsRequest, runtime: Util.RuntimeOptions): DescribeSagVbrRelationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vbrInstanceIds)) {
    query['VbrInstanceIds'] = request.vbrInstanceIds;
  }
  if (!Util.isUnset(request.vbrRegionId)) {
    query['VbrRegionId'] = request.vbrRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagVbrRelations',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagVbrRelations(request: DescribeSagVbrRelationsRequest): DescribeSagVbrRelationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagVbrRelationsWithOptions(request, runtime);
}

model DescribeSagWan4GRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model DescribeSagWan4GResponseBody = {
  ip?: string(name='Ip'),
  mac?: string(name='Mac'),
  priority?: int32(name='Priority'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  strength?: string(name='Strength'),
  trafficState?: string(name='TrafficState'),
}

model DescribeSagWan4GResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagWan4GResponseBody(name='body'),
}

async function describeSagWan4GWithOptions(request: DescribeSagWan4GRequest, runtime: Util.RuntimeOptions): DescribeSagWan4GResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagWan4G',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagWan4G(request: DescribeSagWan4GRequest): DescribeSagWan4GResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagWan4GWithOptions(request, runtime);
}

model DescribeSagWanListRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model DescribeSagWanListResponseBody = {
  requestId?: string(name='RequestId'),
  taskStates?: [ 
    {
      createTime?: string(name='CreateTime'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      state?: string(name='State'),
    }
  ](name='TaskStates'),
  wans?: [ 
    {
      bandWidth?: int32(name='BandWidth'),
      gateway?: string(name='Gateway'),
      IP?: string(name='IP'),
      IPType?: string(name='IPType'),
      ISP?: string(name='ISP'),
      mask?: string(name='Mask'),
      portName?: string(name='PortName'),
      priority?: int32(name='Priority'),
      trafficState?: string(name='TrafficState'),
      username?: string(name='Username'),
      weight?: int32(name='Weight'),
    }
  ](name='Wans'),
}

model DescribeSagWanListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagWanListResponseBody(name='body'),
}

async function describeSagWanListWithOptions(request: DescribeSagWanListRequest, runtime: Util.RuntimeOptions): DescribeSagWanListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagWanList',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagWanList(request: DescribeSagWanListRequest): DescribeSagWanListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagWanListWithOptions(request, runtime);
}

model DescribeSagWanSnatRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model DescribeSagWanSnatResponseBody = {
  requestId?: string(name='RequestId'),
  snat?: string(name='Snat'),
  taskStates?: [ 
    {
      createTime?: string(name='CreateTime'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      state?: string(name='State'),
    }
  ](name='TaskStates'),
}

model DescribeSagWanSnatResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagWanSnatResponseBody(name='body'),
}

async function describeSagWanSnatWithOptions(request: DescribeSagWanSnatRequest, runtime: Util.RuntimeOptions): DescribeSagWanSnatResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagWanSnat',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagWanSnat(request: DescribeSagWanSnatRequest): DescribeSagWanSnatResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagWanSnatWithOptions(request, runtime);
}

model DescribeSagWifiRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model DescribeSagWifiResponseBody = {
  authenticationType?: string(name='AuthenticationType'),
  bandwidth?: string(name='Bandwidth'),
  channel?: string(name='Channel'),
  encryptAlgorithm?: string(name='EncryptAlgorithm'),
  isAuth?: string(name='IsAuth'),
  isBroadcast?: string(name='IsBroadcast'),
  isEnable?: string(name='IsEnable'),
  requestId?: string(name='RequestId'),
  ssid?: string(name='Ssid'),
  taskStates?: [ 
    {
      createTime?: string(name='CreateTime'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      state?: string(name='State'),
    }
  ](name='TaskStates'),
}

model DescribeSagWifiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSagWifiResponseBody(name='body'),
}

async function describeSagWifiWithOptions(request: DescribeSagWifiRequest, runtime: Util.RuntimeOptions): DescribeSagWifiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSagWifi',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSagWifi(request: DescribeSagWifiRequest): DescribeSagWifiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSagWifiWithOptions(request, runtime);
}

model DescribeSmartAccessGatewayAttributeRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model DescribeSmartAccessGatewayAttributeResponseBody = {
  accelerateBandwidth?: long(name='AccelerateBandwidth'),
  accessPointId?: string(name='AccessPointId'),
  aclIds?: {
    aclId?: [ string ](name='AclId')
  }(name='AclIds'),
  applicationBandwidthPackageBussinessStatus?: string(name='ApplicationBandwidthPackageBussinessStatus'),
  applicationBandwidthPackageId?: string(name='ApplicationBandwidthPackageId'),
  applicationBandwidthPackageName?: string(name='ApplicationBandwidthPackageName'),
  applicationBandwidthPackageOperationLocks?: {
    lockReason?: string(name='LockReason'),
    lockType?: string(name='LockType'),
  }(name='ApplicationBandwidthPackageOperationLocks'),
  associatedCcnId?: string(name='AssociatedCcnId'),
  associatedCcnName?: string(name='AssociatedCcnName'),
  backupBoxControllerIp?: string(name='BackupBoxControllerIp'),
  boxControllerIp?: string(name='BoxControllerIp'),
  cidrBlock?: string(name='CidrBlock'),
  city?: string(name='City'),
  createTime?: long(name='CreateTime'),
  dataPlan?: long(name='DataPlan'),
  description?: string(name='Description'),
  devices?: {
    device?: [ 
    {
      distributeSkStatus?: int32(name='DistributeSkStatus'),
      dpiSignatureDbVersion?: string(name='DpiSignatureDbVersion'),
      haState?: string(name='HaState'),
      hcState?: string(name='HcState'),
      monitorVersion?: string(name='MonitorVersion'),
      secretKey?: string(name='SecretKey'),
      serialNumber?: string(name='SerialNumber'),
      softwareVersion?: string(name='SoftwareVersion'),
    }
  ](name='Device')
  }(name='Devices'),
  enableOptimization?: boolean(name='EnableOptimization'),
  enableSoftwareConnectionAudit?: boolean(name='EnableSoftwareConnectionAudit'),
  endTime?: long(name='EndTime'),
  flowLogIds?: {
    flowLogId?: [ string ](name='FlowLogId')
  }(name='FlowLogIds'),
  instanceType?: string(name='InstanceType'),
  ipsecStatus?: string(name='IpsecStatus'),
  links?: {
    link?: [ 
    {
      bandwidth?: string(name='Bandwidth'),
      commodityType?: string(name='CommodityType'),
      endTime?: long(name='EndTime'),
      healthCheckTargetIp?: string(name='HealthCheckTargetIp'),
      instanceId?: string(name='InstanceId'),
      relateInstanceId?: string(name='RelateInstanceId'),
      relateInstanceRegionId?: string(name='RelateInstanceRegionId'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='Link')
  }(name='Links'),
  maxBandwidth?: string(name='MaxBandwidth'),
  name?: string(name='Name'),
  optimizationType?: boolean(name='OptimizationType'),
  position?: string(name='Position'),
  qosIds?: {
    qosId?: [ string ](name='QosId')
  }(name='QosIds'),
  requestId?: string(name='RequestId'),
  resellerInstanceId?: string(name='ResellerInstanceId'),
  resellerUid?: string(name='ResellerUid'),
  resourceGroupId?: string(name='ResourceGroupId'),
  routingStrategy?: string(name='RoutingStrategy'),
  securityLockThreshold?: int32(name='SecurityLockThreshold'),
  serialNumber?: string(name='SerialNumber'),
  smartAGId?: string(name='SmartAGId'),
  status?: string(name='Status'),
  trafficMasterSn?: string(name='TrafficMasterSn'),
  upBandwidth4G?: int32(name='UpBandwidth4G'),
  upBandwidthWan?: int32(name='UpBandwidthWan'),
  userCount?: int32(name='UserCount'),
  vpnStatus?: string(name='VpnStatus'),
}

model DescribeSmartAccessGatewayAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSmartAccessGatewayAttributeResponseBody(name='body'),
}

async function describeSmartAccessGatewayAttributeWithOptions(request: DescribeSmartAccessGatewayAttributeRequest, runtime: Util.RuntimeOptions): DescribeSmartAccessGatewayAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSmartAccessGatewayAttribute',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSmartAccessGatewayAttribute(request: DescribeSmartAccessGatewayAttributeRequest): DescribeSmartAccessGatewayAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSmartAccessGatewayAttributeWithOptions(request, runtime);
}

model DescribeSmartAccessGatewayClientUsersRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  userMail?: string(name='UserMail'),
  userName?: string(name='UserName'),
}

model DescribeSmartAccessGatewayClientUsersResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  users?: {
    user?: [ 
    {
      accelerateBandwidth?: long(name='AccelerateBandwidth'),
      bandwidth?: int32(name='Bandwidth'),
      clientIp?: string(name='ClientIp'),
      isStaticIp?: long(name='IsStaticIp'),
      state?: int32(name='State'),
      userMail?: string(name='UserMail'),
      userName?: string(name='UserName'),
    }
  ](name='User')
  }(name='Users'),
}

model DescribeSmartAccessGatewayClientUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSmartAccessGatewayClientUsersResponseBody(name='body'),
}

async function describeSmartAccessGatewayClientUsersWithOptions(request: DescribeSmartAccessGatewayClientUsersRequest, runtime: Util.RuntimeOptions): DescribeSmartAccessGatewayClientUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.userMail)) {
    query['UserMail'] = request.userMail;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSmartAccessGatewayClientUsers',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSmartAccessGatewayClientUsers(request: DescribeSmartAccessGatewayClientUsersRequest): DescribeSmartAccessGatewayClientUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSmartAccessGatewayClientUsersWithOptions(request, runtime);
}

model DescribeSmartAccessGatewayHaRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model DescribeSmartAccessGatewayHaResponseBody = {
  backupDeviceId?: string(name='BackupDeviceId'),
  deviceLevelBackupState?: string(name='DeviceLevelBackupState'),
  deviceLevelBackupType?: string(name='DeviceLevelBackupType'),
  linkBackupInfoList?: {
    linkBackupInfoList?: [ 
    {
      backupLinkId?: string(name='BackupLinkId'),
      backupLinkState?: string(name='BackupLinkState'),
      linkLevelBackupState?: string(name='LinkLevelBackupState'),
      linkLevelBackupType?: string(name='LinkLevelBackupType'),
      mainLinkId?: string(name='MainLinkId'),
      mainLinkState?: string(name='MainLinkState'),
    }
  ](name='LinkBackupInfoList')
  }(name='LinkBackupInfoList'),
  mainDeviceId?: string(name='MainDeviceId'),
  requestId?: string(name='RequestId'),
  smartAGId?: string(name='SmartAGId'),
}

model DescribeSmartAccessGatewayHaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSmartAccessGatewayHaResponseBody(name='body'),
}

async function describeSmartAccessGatewayHaWithOptions(request: DescribeSmartAccessGatewayHaRequest, runtime: Util.RuntimeOptions): DescribeSmartAccessGatewayHaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSmartAccessGatewayHa',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSmartAccessGatewayHa(request: DescribeSmartAccessGatewayHaRequest): DescribeSmartAccessGatewayHaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSmartAccessGatewayHaWithOptions(request, runtime);
}

model DescribeSmartAccessGatewayVersionsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
  versionType?: string(name='VersionType'),
}

model DescribeSmartAccessGatewayVersionsResponseBody = {
  requestId?: string(name='RequestId'),
  smartAGVersions?: {
    smartAGVersion?: [ 
    {
      createTime?: long(name='CreateTime'),
      type?: string(name='Type'),
      versionCode?: string(name='VersionCode'),
      versionName?: string(name='VersionName'),
    }
  ](name='SmartAGVersion')
  }(name='SmartAGVersions'),
}

model DescribeSmartAccessGatewayVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSmartAccessGatewayVersionsResponseBody(name='body'),
}

async function describeSmartAccessGatewayVersionsWithOptions(request: DescribeSmartAccessGatewayVersionsRequest, runtime: Util.RuntimeOptions): DescribeSmartAccessGatewayVersionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  if (!Util.isUnset(request.versionType)) {
    query['VersionType'] = request.versionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSmartAccessGatewayVersions',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSmartAccessGatewayVersions(request: DescribeSmartAccessGatewayVersionsRequest): DescribeSmartAccessGatewayVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSmartAccessGatewayVersionsWithOptions(request, runtime);
}

model DescribeSmartAccessGatewaysRequest {
  aclIds?: string(name='AclIds'),
  associatedCcnId?: string(name='AssociatedCcnId'),
  associatedCcnName?: string(name='AssociatedCcnName'),
  businessState?: string(name='BusinessState'),
  canAssociateQos?: boolean(name='CanAssociateQos'),
  hardwareType?: string(name='HardwareType'),
  instanceType?: string(name='InstanceType'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serialNumber?: string(name='SerialNumber'),
  smartAGId?: string(name='SmartAGId'),
  smartAGIds?: [ string ](name='SmartAGIds'),
  softwareVersion?: string(name='SoftwareVersion'),
  status?: string(name='Status'),
  unboundAclIds?: string(name='UnboundAclIds'),
  versionComparator?: string(name='VersionComparator'),
}

model DescribeSmartAccessGatewaysResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  smartAccessGateways?: {
    smartAccessGateway?: [ 
    {
      accelerateBandwidth?: long(name='AccelerateBandwidth'),
      accessPointId?: string(name='AccessPointId'),
      aclIds?: string(name='AclIds'),
      applicationBandwidthPackageId?: string(name='ApplicationBandwidthPackageId'),
      associatedCcnId?: string(name='AssociatedCcnId'),
      associatedCcnName?: string(name='AssociatedCcnName'),
      backupSoftwareVersion?: string(name='BackupSoftwareVersion'),
      backupStatus?: string(name='BackupStatus'),
      cidrBlock?: string(name='CidrBlock'),
      city?: string(name='City'),
      createTime?: long(name='CreateTime'),
      dataPlan?: long(name='DataPlan'),
      description?: string(name='Description'),
      dpiMonitorStatus?: string(name='DpiMonitorStatus'),
      dpiStatus?: string(name='DpiStatus'),
      enableSoftwareConnectionAudit?: boolean(name='EnableSoftwareConnectionAudit'),
      endTime?: long(name='EndTime'),
      enterpriseCode?: string(name='EnterpriseCode'),
      hardwareVersion?: string(name='HardwareVersion'),
      idaasApplicationId?: string(name='IdaasApplicationId'),
      idaasId?: string(name='IdaasId'),
      ipsecStatus?: string(name='IpsecStatus'),
      links?: {
        link?: [ 
        {
          bandwidth?: string(name='Bandwidth'),
          commodityType?: string(name='CommodityType'),
          endTime?: long(name='EndTime'),
          instanceId?: string(name='InstanceId'),
          relateInstanceId?: string(name='RelateInstanceId'),
          relateInstanceRegionId?: string(name='RelateInstanceRegionId'),
          status?: string(name='Status'),
          type?: string(name='Type'),
        }
      ](name='Link')
      }(name='Links'),
      maxBandwidth?: string(name='MaxBandwidth'),
      name?: string(name='Name'),
      qosIds?: string(name='QosIds'),
      resellerInstanceId?: string(name='ResellerInstanceId'),
      resellerUid?: string(name='ResellerUid'),
      resourceGroupId?: string(name='ResourceGroupId'),
      routingStrategy?: string(name='RoutingStrategy'),
      securityLockThreshold?: int32(name='SecurityLockThreshold'),
      serialNumber?: string(name='SerialNumber'),
      smartAGId?: string(name='SmartAGId'),
      smartAGUid?: long(name='SmartAGUid'),
      softwareVersion?: string(name='SoftwareVersion'),
      status?: string(name='Status'),
      upBandwidth4G?: int32(name='UpBandwidth4G'),
      upBandwidthWan?: int32(name='UpBandwidthWan'),
      userCount?: int32(name='UserCount'),
      vpnStatus?: string(name='VpnStatus'),
    }
  ](name='SmartAccessGateway')
  }(name='SmartAccessGateways'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSmartAccessGatewaysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSmartAccessGatewaysResponseBody(name='body'),
}

async function describeSmartAccessGatewaysWithOptions(request: DescribeSmartAccessGatewaysRequest, runtime: Util.RuntimeOptions): DescribeSmartAccessGatewaysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclIds)) {
    query['AclIds'] = request.aclIds;
  }
  if (!Util.isUnset(request.associatedCcnId)) {
    query['AssociatedCcnId'] = request.associatedCcnId;
  }
  if (!Util.isUnset(request.associatedCcnName)) {
    query['AssociatedCcnName'] = request.associatedCcnName;
  }
  if (!Util.isUnset(request.businessState)) {
    query['BusinessState'] = request.businessState;
  }
  if (!Util.isUnset(request.canAssociateQos)) {
    query['CanAssociateQos'] = request.canAssociateQos;
  }
  if (!Util.isUnset(request.hardwareType)) {
    query['HardwareType'] = request.hardwareType;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGIds)) {
    query['SmartAGIds'] = request.smartAGIds;
  }
  if (!Util.isUnset(request.softwareVersion)) {
    query['SoftwareVersion'] = request.softwareVersion;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.unboundAclIds)) {
    query['UnboundAclIds'] = request.unboundAclIds;
  }
  if (!Util.isUnset(request.versionComparator)) {
    query['VersionComparator'] = request.versionComparator;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSmartAccessGateways',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSmartAccessGateways(request: DescribeSmartAccessGatewaysRequest): DescribeSmartAccessGatewaysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSmartAccessGatewaysWithOptions(request, runtime);
}

model DescribeSnatEntriesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model DescribeSnatEntriesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  snatEntries?: {
    snatEntry?: [ 
    {
      cidrBlock?: string(name='CidrBlock'),
      createTime?: long(name='CreateTime'),
      instanceId?: string(name='InstanceId'),
      snatIp?: string(name='SnatIp'),
    }
  ](name='SnatEntry')
  }(name='SnatEntries'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSnatEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSnatEntriesResponseBody(name='body'),
}

async function describeSnatEntriesWithOptions(request: DescribeSnatEntriesRequest, runtime: Util.RuntimeOptions): DescribeSnatEntriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSnatEntries',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSnatEntries(request: DescribeSnatEntriesRequest): DescribeSnatEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnatEntriesWithOptions(request, runtime);
}

model DescribeUnbindFlowLogSagsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeUnbindFlowLogSagsResponseBody = {
  count?: int32(name='Count'),
  requestId?: string(name='RequestId'),
  sags?: {
    sag?: [ 
    {
      description?: string(name='Description'),
      name?: string(name='Name'),
      smartAGId?: string(name='SmartAGId'),
    }
  ](name='Sag')
  }(name='Sags'),
}

model DescribeUnbindFlowLogSagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUnbindFlowLogSagsResponseBody(name='body'),
}

async function describeUnbindFlowLogSagsWithOptions(request: DescribeUnbindFlowLogSagsRequest, runtime: Util.RuntimeOptions): DescribeUnbindFlowLogSagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUnbindFlowLogSags',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUnbindFlowLogSags(request: DescribeUnbindFlowLogSagsRequest): DescribeUnbindFlowLogSagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUnbindFlowLogSagsWithOptions(request, runtime);
}

model DescribeUserFlowStatisticsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  statisticsDate?: string(name='StatisticsDate'),
  userNames?: [ string ](name='UserNames'),
}

model DescribeUserFlowStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  sagStatistics?: {
    statistics?: [ 
    {
      totalBytes?: string(name='TotalBytes'),
      userName?: string(name='UserName'),
    }
  ](name='Statistics')
  }(name='SagStatistics'),
}

model DescribeUserFlowStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserFlowStatisticsResponseBody(name='body'),
}

async function describeUserFlowStatisticsWithOptions(request: DescribeUserFlowStatisticsRequest, runtime: Util.RuntimeOptions): DescribeUserFlowStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.statisticsDate)) {
    query['StatisticsDate'] = request.statisticsDate;
  }
  if (!Util.isUnset(request.userNames)) {
    query['UserNames'] = request.userNames;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserFlowStatistics',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserFlowStatistics(request: DescribeUserFlowStatisticsRequest): DescribeUserFlowStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserFlowStatisticsWithOptions(request, runtime);
}

model DescribeUserOnlineClientStatisticsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  userNames?: [ string ](name='UserNames'),
}

model DescribeUserOnlineClientStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  userStatistics?: {
    statistics?: [ 
    {
      onlineCount?: string(name='OnlineCount'),
      userName?: string(name='UserName'),
    }
  ](name='Statistics')
  }(name='UserStatistics'),
}

model DescribeUserOnlineClientStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserOnlineClientStatisticsResponseBody(name='body'),
}

async function describeUserOnlineClientStatisticsWithOptions(request: DescribeUserOnlineClientStatisticsRequest, runtime: Util.RuntimeOptions): DescribeUserOnlineClientStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.userNames)) {
    query['UserNames'] = request.userNames;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserOnlineClientStatistics',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserOnlineClientStatistics(request: DescribeUserOnlineClientStatisticsRequest): DescribeUserOnlineClientStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserOnlineClientStatisticsWithOptions(request, runtime);
}

model DescribeUserOnlineClientsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  userName?: string(name='UserName'),
}

model DescribeUserOnlineClientsResponseBody = {
  requestId?: string(name='RequestId'),
  users?: {
    user?: [ 
    {
      clientIp?: string(name='ClientIp'),
      onlineTime?: string(name='OnlineTime'),
    }
  ](name='User')
  }(name='Users'),
}

model DescribeUserOnlineClientsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserOnlineClientsResponseBody(name='body'),
}

async function describeUserOnlineClientsWithOptions(request: DescribeUserOnlineClientsRequest, runtime: Util.RuntimeOptions): DescribeUserOnlineClientsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserOnlineClients',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserOnlineClients(request: DescribeUserOnlineClientsRequest): DescribeUserOnlineClientsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserOnlineClientsWithOptions(request, runtime);
}

model DiagnoseSmartAccessGatewayRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model DiagnoseSmartAccessGatewayResponseBody = {
  requestId?: string(name='RequestId'),
}

model DiagnoseSmartAccessGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DiagnoseSmartAccessGatewayResponseBody(name='body'),
}

async function diagnoseSmartAccessGatewayWithOptions(request: DiagnoseSmartAccessGatewayRequest, runtime: Util.RuntimeOptions): DiagnoseSmartAccessGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DiagnoseSmartAccessGateway',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function diagnoseSmartAccessGateway(request: DiagnoseSmartAccessGatewayRequest): DiagnoseSmartAccessGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return diagnoseSmartAccessGatewayWithOptions(request, runtime);
}

model DisableSmartAGDpiMonitorRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model DisableSmartAGDpiMonitorResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableSmartAGDpiMonitorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableSmartAGDpiMonitorResponseBody(name='body'),
}

async function disableSmartAGDpiMonitorWithOptions(request: DisableSmartAGDpiMonitorRequest, runtime: Util.RuntimeOptions): DisableSmartAGDpiMonitorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableSmartAGDpiMonitor',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableSmartAGDpiMonitor(request: DisableSmartAGDpiMonitorRequest): DisableSmartAGDpiMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableSmartAGDpiMonitorWithOptions(request, runtime);
}

model DisableSmartAccessGatewayUserRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  userName?: string(name='UserName'),
}

model DisableSmartAccessGatewayUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableSmartAccessGatewayUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableSmartAccessGatewayUserResponseBody(name='body'),
}

async function disableSmartAccessGatewayUserWithOptions(request: DisableSmartAccessGatewayUserRequest, runtime: Util.RuntimeOptions): DisableSmartAccessGatewayUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableSmartAccessGatewayUser',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableSmartAccessGatewayUser(request: DisableSmartAccessGatewayUserRequest): DisableSmartAccessGatewayUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableSmartAccessGatewayUserWithOptions(request, runtime);
}

model DisassociateACLRequest {
  aclId?: string(name='AclId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model DisassociateACLResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisassociateACLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisassociateACLResponseBody(name='body'),
}

async function disassociateACLWithOptions(request: DisassociateACLRequest, runtime: Util.RuntimeOptions): DisassociateACLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisassociateACL',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disassociateACL(request: DisassociateACLRequest): DisassociateACLResponse {
  var runtime = new Util.RuntimeOptions{};
  return disassociateACLWithOptions(request, runtime);
}

model DisassociateFlowLogRequest {
  flowLogId?: string(name='FlowLogId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model DisassociateFlowLogResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisassociateFlowLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisassociateFlowLogResponseBody(name='body'),
}

async function disassociateFlowLogWithOptions(request: DisassociateFlowLogRequest, runtime: Util.RuntimeOptions): DisassociateFlowLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.flowLogId)) {
    query['FlowLogId'] = request.flowLogId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisassociateFlowLog',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disassociateFlowLog(request: DisassociateFlowLogRequest): DisassociateFlowLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return disassociateFlowLogWithOptions(request, runtime);
}

model DisassociateQosRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  qosId?: string(name='QosId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model DisassociateQosResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisassociateQosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisassociateQosResponseBody(name='body'),
}

async function disassociateQosWithOptions(request: DisassociateQosRequest, runtime: Util.RuntimeOptions): DisassociateQosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.qosId)) {
    query['QosId'] = request.qosId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisassociateQos',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disassociateQos(request: DisassociateQosRequest): DisassociateQosResponse {
  var runtime = new Util.RuntimeOptions{};
  return disassociateQosWithOptions(request, runtime);
}

model DiscribeSmartAccessGatewayDiagnosisReportRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model DiscribeSmartAccessGatewayDiagnosisReportResponseBody = {
  diagnoseResult?: {
    boxType?: string(name='BoxType'),
    boxVersion?: string(name='BoxVersion'),
    details?: [ 
      {
        items?: [ 
          {
            CN?: {
              advice?: [ string ](name='Advice'),
              details?: [ string ](name='Details'),
              itemLevel?: string(name='ItemLevel'),
              itemName?: string(name='ItemName'),
              itemType?: string(name='ItemType'),
            }(name='CN'),
            EN?: {
              advice?: [ string ](name='Advice'),
              details?: [ string ](name='Details'),
              itemLevel?: string(name='ItemLevel'),
              itemName?: string(name='ItemName'),
              itemType?: string(name='ItemType'),
            }(name='EN'),
            endTime?: long(name='EndTime'),
            itemName?: string(name='ItemName'),
            level?: string(name='Level'),
            startTime?: long(name='StartTime'),
            type?: string(name='Type'),
          }
        ](name='Items'),
        statistics?: {
          error?: int32(name='Error'),
          info?: int32(name='Info'),
          total?: int32(name='Total'),
          warning?: int32(name='Warning'),
        }(name='Statistics'),
        type?: string(name='Type'),
      }
    ](name='Details'),
    diagnoseId?: string(name='DiagnoseId'),
    endTime?: int32(name='EndTime'),
    finishedNumber?: int32(name='FinishedNumber'),
    instanceId?: string(name='InstanceId'),
    level?: {
      biz?: string(name='Biz'),
      configuration?: string(name='Configuration'),
      total?: string(name='Total'),
    }(name='Level'),
    monitorVersion?: string(name='MonitorVersion'),
    percent?: int32(name='Percent'),
    reportSLSSuccess?: int32(name='ReportSLSSuccess'),
    SN?: string(name='SN'),
    startTime?: int32(name='StartTime'),
    state?: string(name='State'),
    statistics?: {
      error?: int32(name='Error'),
      info?: int32(name='Info'),
      total?: int32(name='Total'),
      warning?: int32(name='Warning'),
    }(name='Statistics'),
    storeType?: string(name='StoreType'),
    totalNumber?: int32(name='TotalNumber'),
    UId?: string(name='UId'),
    userLevel?: string(name='UserLevel'),
  }(name='DiagnoseResult'),
  requestId?: string(name='RequestId'),
}

model DiscribeSmartAccessGatewayDiagnosisReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DiscribeSmartAccessGatewayDiagnosisReportResponseBody(name='body'),
}

async function discribeSmartAccessGatewayDiagnosisReportWithOptions(request: DiscribeSmartAccessGatewayDiagnosisReportRequest, runtime: Util.RuntimeOptions): DiscribeSmartAccessGatewayDiagnosisReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DiscribeSmartAccessGatewayDiagnosisReport',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function discribeSmartAccessGatewayDiagnosisReport(request: DiscribeSmartAccessGatewayDiagnosisReportRequest): DiscribeSmartAccessGatewayDiagnosisReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return discribeSmartAccessGatewayDiagnosisReportWithOptions(request, runtime);
}

model DissociateSmartAGFromApplicationBandwidthPackageRequest {
  applicationBandwidthPackageId?: string(name='ApplicationBandwidthPackageId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  regionId?: string(name='RegionId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGIdList?: [ string ](name='SmartAGIdList'),
}

model DissociateSmartAGFromApplicationBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId'),
}

model DissociateSmartAGFromApplicationBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DissociateSmartAGFromApplicationBandwidthPackageResponseBody(name='body'),
}

async function dissociateSmartAGFromApplicationBandwidthPackageWithOptions(request: DissociateSmartAGFromApplicationBandwidthPackageRequest, runtime: Util.RuntimeOptions): DissociateSmartAGFromApplicationBandwidthPackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationBandwidthPackageId)) {
    query['ApplicationBandwidthPackageId'] = request.applicationBandwidthPackageId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGIdList)) {
    query['SmartAGIdList'] = request.smartAGIdList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DissociateSmartAGFromApplicationBandwidthPackage',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function dissociateSmartAGFromApplicationBandwidthPackage(request: DissociateSmartAGFromApplicationBandwidthPackageRequest): DissociateSmartAGFromApplicationBandwidthPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociateSmartAGFromApplicationBandwidthPackageWithOptions(request, runtime);
}

model DowngradeSmartAccessGatewayRequest {
  autoPay?: boolean(name='AutoPay'),
  bandWidthSpec?: long(name='BandWidthSpec'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model DowngradeSmartAccessGatewayResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model DowngradeSmartAccessGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DowngradeSmartAccessGatewayResponseBody(name='body'),
}

async function downgradeSmartAccessGatewayWithOptions(request: DowngradeSmartAccessGatewayRequest, runtime: Util.RuntimeOptions): DowngradeSmartAccessGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.bandWidthSpec)) {
    query['BandWidthSpec'] = request.bandWidthSpec;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DowngradeSmartAccessGateway',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function downgradeSmartAccessGateway(request: DowngradeSmartAccessGatewayRequest): DowngradeSmartAccessGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return downgradeSmartAccessGatewayWithOptions(request, runtime);
}

model DowngradeSmartAccessGatewaySoftwareRequest {
  autoPay?: boolean(name='AutoPay'),
  dataPlan?: long(name='DataPlan'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  userCount?: int32(name='UserCount'),
}

model DowngradeSmartAccessGatewaySoftwareResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model DowngradeSmartAccessGatewaySoftwareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DowngradeSmartAccessGatewaySoftwareResponseBody(name='body'),
}

async function downgradeSmartAccessGatewaySoftwareWithOptions(request: DowngradeSmartAccessGatewaySoftwareRequest, runtime: Util.RuntimeOptions): DowngradeSmartAccessGatewaySoftwareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.dataPlan)) {
    query['DataPlan'] = request.dataPlan;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.userCount)) {
    query['UserCount'] = request.userCount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DowngradeSmartAccessGatewaySoftware',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function downgradeSmartAccessGatewaySoftware(request: DowngradeSmartAccessGatewaySoftwareRequest): DowngradeSmartAccessGatewaySoftwareResponse {
  var runtime = new Util.RuntimeOptions{};
  return downgradeSmartAccessGatewaySoftwareWithOptions(request, runtime);
}

model EnableSmartAGDpiMonitorRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  slsLogStore?: string(name='SlsLogStore'),
  slsProjectName?: string(name='SlsProjectName'),
  smartAGId?: string(name='SmartAGId'),
}

model EnableSmartAGDpiMonitorResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableSmartAGDpiMonitorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableSmartAGDpiMonitorResponseBody(name='body'),
}

async function enableSmartAGDpiMonitorWithOptions(request: EnableSmartAGDpiMonitorRequest, runtime: Util.RuntimeOptions): EnableSmartAGDpiMonitorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.slsLogStore)) {
    query['SlsLogStore'] = request.slsLogStore;
  }
  if (!Util.isUnset(request.slsProjectName)) {
    query['SlsProjectName'] = request.slsProjectName;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableSmartAGDpiMonitor',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableSmartAGDpiMonitor(request: EnableSmartAGDpiMonitorRequest): EnableSmartAGDpiMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSmartAGDpiMonitorWithOptions(request, runtime);
}

model EnableSmartAccessGatewayUserRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  userName?: string(name='UserName'),
}

model EnableSmartAccessGatewayUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableSmartAccessGatewayUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableSmartAccessGatewayUserResponseBody(name='body'),
}

async function enableSmartAccessGatewayUserWithOptions(request: EnableSmartAccessGatewayUserRequest, runtime: Util.RuntimeOptions): EnableSmartAccessGatewayUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableSmartAccessGatewayUser',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableSmartAccessGatewayUser(request: EnableSmartAccessGatewayUserRequest): EnableSmartAccessGatewayUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSmartAccessGatewayUserWithOptions(request, runtime);
}

model GetAclAttributeRequest {
  aclId?: string(name='AclId'),
  regionId?: string(name='RegionId'),
}

model GetAclAttributeResponseBody = {
  aclId?: string(name='AclId'),
  aclName?: string(name='AclName'),
  errorConfigSmartAGCount?: int32(name='ErrorConfigSmartAGCount'),
  requestId?: string(name='RequestId'),
}

model GetAclAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAclAttributeResponseBody(name='body'),
}

async function getAclAttributeWithOptions(request: GetAclAttributeRequest, runtime: Util.RuntimeOptions): GetAclAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAclAttribute',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAclAttribute(request: GetAclAttributeRequest): GetAclAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAclAttributeWithOptions(request, runtime);
}

model GetCloudConnectNetworkUseLimitRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetCloudConnectNetworkUseLimitResponseBody = {
  requestId?: string(name='RequestId'),
  totalAmount?: int32(name='TotalAmount'),
  usedAmount?: int32(name='UsedAmount'),
}

model GetCloudConnectNetworkUseLimitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCloudConnectNetworkUseLimitResponseBody(name='body'),
}

async function getCloudConnectNetworkUseLimitWithOptions(request: GetCloudConnectNetworkUseLimitRequest, runtime: Util.RuntimeOptions): GetCloudConnectNetworkUseLimitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCloudConnectNetworkUseLimit',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCloudConnectNetworkUseLimit(request: GetCloudConnectNetworkUseLimitRequest): GetCloudConnectNetworkUseLimitResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCloudConnectNetworkUseLimitWithOptions(request, runtime);
}

model GetQosAttributeRequest {
  qosId?: string(name='QosId'),
  regionId?: string(name='RegionId'),
}

model GetQosAttributeResponseBody = {
  errorConfigSmartAGCount?: int32(name='ErrorConfigSmartAGCount'),
  qosCars?: [ 
    {
      limitType?: string(name='LimitType'),
      maxBandwidthAbs?: int32(name='MaxBandwidthAbs'),
      maxBandwidthPercent?: int32(name='MaxBandwidthPercent'),
      minBandwidthAbs?: int32(name='MinBandwidthAbs'),
      minBandwidthPercent?: int32(name='MinBandwidthPercent'),
      percentSourceType?: string(name='PercentSourceType'),
      priority?: int32(name='Priority'),
      qosCarDescription?: string(name='QosCarDescription'),
      qosCarId?: string(name='QosCarId'),
      qosCarName?: string(name='QosCarName'),
    }
  ](name='QosCars'),
  qosDescription?: string(name='QosDescription'),
  qosName?: string(name='QosName'),
  qosPolicies?: [ 
    {
      destCidr?: string(name='DestCidr'),
      destPortRange?: string(name='DestPortRange'),
      endTime?: long(name='EndTime'),
      ipProtocol?: string(name='IpProtocol'),
      priority?: int32(name='Priority'),
      qosPolicieDescription?: string(name='QosPolicieDescription'),
      qosPolicieName?: string(name='QosPolicieName'),
      sourceCidr?: string(name='SourceCidr'),
      sourcePortRange?: string(name='SourcePortRange'),
      startTime?: long(name='StartTime'),
    }
  ](name='QosPolicies'),
  requestId?: string(name='RequestId'),
}

model GetQosAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQosAttributeResponseBody(name='body'),
}

async function getQosAttributeWithOptions(request: GetQosAttributeRequest, runtime: Util.RuntimeOptions): GetQosAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.qosId)) {
    query['QosId'] = request.qosId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetQosAttribute',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQosAttribute(request: GetQosAttributeRequest): GetQosAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQosAttributeWithOptions(request, runtime);
}

model GetSmartAGDpiAttributeRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model GetSmartAGDpiAttributeResponseBody = {
  dpiMonitorStatus?: string(name='DpiMonitorStatus'),
  dpiStatus?: string(name='DpiStatus'),
  logstoreName?: string(name='LogstoreName'),
  projectName?: string(name='ProjectName'),
  requestId?: string(name='RequestId'),
  slsRegion?: string(name='SlsRegion'),
}

model GetSmartAGDpiAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSmartAGDpiAttributeResponseBody(name='body'),
}

async function getSmartAGDpiAttributeWithOptions(request: GetSmartAGDpiAttributeRequest, runtime: Util.RuntimeOptions): GetSmartAGDpiAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSmartAGDpiAttribute',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSmartAGDpiAttribute(request: GetSmartAGDpiAttributeRequest): GetSmartAGDpiAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSmartAGDpiAttributeWithOptions(request, runtime);
}

model GetSmartAccessGatewayUseLimitRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetSmartAccessGatewayUseLimitResponseBody = {
  requestId?: string(name='RequestId'),
  totalAmount?: int32(name='TotalAmount'),
  usedAmount?: int32(name='UsedAmount'),
}

model GetSmartAccessGatewayUseLimitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSmartAccessGatewayUseLimitResponseBody(name='body'),
}

async function getSmartAccessGatewayUseLimitWithOptions(request: GetSmartAccessGatewayUseLimitRequest, runtime: Util.RuntimeOptions): GetSmartAccessGatewayUseLimitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSmartAccessGatewayUseLimit',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSmartAccessGatewayUseLimit(request: GetSmartAccessGatewayUseLimitRequest): GetSmartAccessGatewayUseLimitResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSmartAccessGatewayUseLimitWithOptions(request, runtime);
}

model GrantInstanceToCbnRequest {
  ccnInstanceId?: string(name='CcnInstanceId'),
  cenInstanceId?: string(name='CenInstanceId'),
  cenUid?: long(name='CenUid'),
  grantTrafficService?: boolean(name='GrantTrafficService'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GrantInstanceToCbnResponseBody = {
  requestId?: string(name='RequestId'),
}

model GrantInstanceToCbnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GrantInstanceToCbnResponseBody(name='body'),
}

async function grantInstanceToCbnWithOptions(request: GrantInstanceToCbnRequest, runtime: Util.RuntimeOptions): GrantInstanceToCbnResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ccnInstanceId)) {
    query['CcnInstanceId'] = request.ccnInstanceId;
  }
  if (!Util.isUnset(request.cenInstanceId)) {
    query['CenInstanceId'] = request.cenInstanceId;
  }
  if (!Util.isUnset(request.cenUid)) {
    query['CenUid'] = request.cenUid;
  }
  if (!Util.isUnset(request.grantTrafficService)) {
    query['GrantTrafficService'] = request.grantTrafficService;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GrantInstanceToCbn',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function grantInstanceToCbn(request: GrantInstanceToCbnRequest): GrantInstanceToCbnResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantInstanceToCbnWithOptions(request, runtime);
}

model GrantSagInstanceToCcnRequest {
  ccnInstanceId?: string(name='CcnInstanceId'),
  ccnUid?: long(name='CcnUid'),
  grantTrafficService?: boolean(name='GrantTrafficService'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model GrantSagInstanceToCcnResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model GrantSagInstanceToCcnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GrantSagInstanceToCcnResponseBody(name='body'),
}

async function grantSagInstanceToCcnWithOptions(request: GrantSagInstanceToCcnRequest, runtime: Util.RuntimeOptions): GrantSagInstanceToCcnResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ccnInstanceId)) {
    query['CcnInstanceId'] = request.ccnInstanceId;
  }
  if (!Util.isUnset(request.ccnUid)) {
    query['CcnUid'] = request.ccnUid;
  }
  if (!Util.isUnset(request.grantTrafficService)) {
    query['GrantTrafficService'] = request.grantTrafficService;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GrantSagInstanceToCcn',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function grantSagInstanceToCcn(request: GrantSagInstanceToCcnRequest): GrantSagInstanceToCcnResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantSagInstanceToCcnWithOptions(request, runtime);
}

model GrantSagInstanceToVbrRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  vbrInstanceId?: string(name='VbrInstanceId'),
  vbrRegionId?: string(name='VbrRegionId'),
  vbrUid?: long(name='VbrUid'),
}

model GrantSagInstanceToVbrResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model GrantSagInstanceToVbrResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GrantSagInstanceToVbrResponseBody(name='body'),
}

async function grantSagInstanceToVbrWithOptions(request: GrantSagInstanceToVbrRequest, runtime: Util.RuntimeOptions): GrantSagInstanceToVbrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.vbrInstanceId)) {
    query['VbrInstanceId'] = request.vbrInstanceId;
  }
  if (!Util.isUnset(request.vbrRegionId)) {
    query['VbrRegionId'] = request.vbrRegionId;
  }
  if (!Util.isUnset(request.vbrUid)) {
    query['VbrUid'] = request.vbrUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GrantSagInstanceToVbr',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function grantSagInstanceToVbr(request: GrantSagInstanceToVbrRequest): GrantSagInstanceToVbrResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantSagInstanceToVbrWithOptions(request, runtime);
}

model KickOutClientsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  username?: string(name='Username'),
}

model KickOutClientsResponseBody = {
  requestId?: string(name='RequestId'),
}

model KickOutClientsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: KickOutClientsResponseBody(name='body'),
}

async function kickOutClientsWithOptions(request: KickOutClientsRequest, runtime: Util.RuntimeOptions): KickOutClientsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.username)) {
    query['Username'] = request.username;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'KickOutClients',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function kickOutClients(request: KickOutClientsRequest): KickOutClientsResponse {
  var runtime = new Util.RuntimeOptions{};
  return kickOutClientsWithOptions(request, runtime);
}

model ListAccessPointNetworkQualitiesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model ListAccessPointNetworkQualitiesResponseBody = {
  accessPointNetworkQualities?: [ 
    {
      id?: int32(name='Id'),
      loss?: string(name='Loss'),
      rtt?: string(name='Rtt'),
    }
  ](name='AccessPointNetworkQualities'),
  requestId?: string(name='RequestId'),
}

model ListAccessPointNetworkQualitiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccessPointNetworkQualitiesResponseBody(name='body'),
}

async function listAccessPointNetworkQualitiesWithOptions(request: ListAccessPointNetworkQualitiesRequest, runtime: Util.RuntimeOptions): ListAccessPointNetworkQualitiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAccessPointNetworkQualities',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAccessPointNetworkQualities(request: ListAccessPointNetworkQualitiesRequest): ListAccessPointNetworkQualitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccessPointNetworkQualitiesWithOptions(request, runtime);
}

model ListAccessPointsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model ListAccessPointsResponseBody = {
  accessPoints?: [ 
    {
      accessPointId?: int32(name='AccessPointId'),
      activeSmartAGCount?: int32(name='ActiveSmartAGCount'),
      inactiveSmartAGCount?: int32(name='InactiveSmartAGCount'),
      latitude?: string(name='Latitude'),
      longitude?: string(name='Longitude'),
    }
  ](name='AccessPoints'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListAccessPointsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccessPointsResponseBody(name='body'),
}

async function listAccessPointsWithOptions(request: ListAccessPointsRequest, runtime: Util.RuntimeOptions): ListAccessPointsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAccessPoints',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAccessPoints(request: ListAccessPointsRequest): ListAccessPointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccessPointsWithOptions(request, runtime);
}

model ListDpiConfigErrorRequest {
  dpiConfigType?: string(name='DpiConfigType'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  ruleInstanceId?: string(name='RuleInstanceId'),
  smartAGId?: string(name='SmartAGId'),
}

model ListDpiConfigErrorResponseBody = {
  dpiConfigError?: [ 
    {
      errorType?: string(name='ErrorType'),
      ruleConfigErrorList?: [ 
        {
          dpiGroupIds?: [ string ](name='DpiGroupIds'),
          dpiSignatureIds?: [ string ](name='DpiSignatureIds'),
          ruleId?: string(name='RuleId'),
        }
      ](name='RuleConfigErrorList'),
      SN?: string(name='SN'),
      smartAGId?: string(name='SmartAGId'),
    }
  ](name='DpiConfigError'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model ListDpiConfigErrorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDpiConfigErrorResponseBody(name='body'),
}

async function listDpiConfigErrorWithOptions(request: ListDpiConfigErrorRequest, runtime: Util.RuntimeOptions): ListDpiConfigErrorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dpiConfigType)) {
    query['DpiConfigType'] = request.dpiConfigType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleInstanceId)) {
    query['RuleInstanceId'] = request.ruleInstanceId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDpiConfigError',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDpiConfigError(request: ListDpiConfigErrorRequest): ListDpiConfigErrorResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDpiConfigErrorWithOptions(request, runtime);
}

model ListDpiGroupsRequest {
  dpiGroupIds?: [ string ](name='DpiGroupIds'),
  dpiGroupNames?: [ string ](name='DpiGroupNames'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListDpiGroupsResponseBody = {
  dpiGroup?: [ 
    {
      dpiGroupId?: string(name='DpiGroupId'),
      dpiGroupName?: string(name='DpiGroupName'),
      minEngineVersion?: string(name='MinEngineVersion'),
      minSignatureDbVersion?: string(name='MinSignatureDbVersion'),
    }
  ](name='DpiGroup'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListDpiGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDpiGroupsResponseBody(name='body'),
}

async function listDpiGroupsWithOptions(request: ListDpiGroupsRequest, runtime: Util.RuntimeOptions): ListDpiGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dpiGroupIds)) {
    query['DpiGroupIds'] = request.dpiGroupIds;
  }
  if (!Util.isUnset(request.dpiGroupNames)) {
    query['DpiGroupNames'] = request.dpiGroupNames;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDpiGroups',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDpiGroups(request: ListDpiGroupsRequest): ListDpiGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDpiGroupsWithOptions(request, runtime);
}

model ListDpiSignaturesRequest {
  dpiGroupId?: string(name='DpiGroupId'),
  dpiSignatureIds?: [ string ](name='DpiSignatureIds'),
  dpiSignatureNames?: [ string ](name='DpiSignatureNames'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListDpiSignaturesResponseBody = {
  dpiSignature?: [ 
    {
      dpiGroupId?: string(name='DpiGroupId'),
      dpiSignatureId?: string(name='DpiSignatureId'),
      dpiSignatureName?: string(name='DpiSignatureName'),
      minEngineVersion?: string(name='MinEngineVersion'),
      minSignatureDbVersion?: string(name='MinSignatureDbVersion'),
    }
  ](name='DpiSignature'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListDpiSignaturesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDpiSignaturesResponseBody(name='body'),
}

async function listDpiSignaturesWithOptions(request: ListDpiSignaturesRequest, runtime: Util.RuntimeOptions): ListDpiSignaturesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dpiGroupId)) {
    query['DpiGroupId'] = request.dpiGroupId;
  }
  if (!Util.isUnset(request.dpiSignatureIds)) {
    query['DpiSignatureIds'] = request.dpiSignatureIds;
  }
  if (!Util.isUnset(request.dpiSignatureNames)) {
    query['DpiSignatureNames'] = request.dpiSignatureNames;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDpiSignatures',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDpiSignatures(request: ListDpiSignaturesRequest): ListDpiSignaturesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDpiSignaturesWithOptions(request, runtime);
}

model ListEnterpriseCodeRequest {
  enterpriseCode?: string(name='EnterpriseCode'),
  isDefault?: boolean(name='IsDefault'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
}

model ListEnterpriseCodeResponseBody = {
  enterpriseCodes?: [ 
    {
      enterpriseCode?: string(name='EnterpriseCode'),
      isDefault?: boolean(name='IsDefault'),
    }
  ](name='EnterpriseCodes'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListEnterpriseCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEnterpriseCodeResponseBody(name='body'),
}

async function listEnterpriseCodeWithOptions(request: ListEnterpriseCodeRequest, runtime: Util.RuntimeOptions): ListEnterpriseCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.enterpriseCode)) {
    query['EnterpriseCode'] = request.enterpriseCode;
  }
  if (!Util.isUnset(request.isDefault)) {
    query['IsDefault'] = request.isDefault;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEnterpriseCode',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEnterpriseCode(request: ListEnterpriseCodeRequest): ListEnterpriseCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnterpriseCodeWithOptions(request, runtime);
}

model ListSmartAGApiUnsupportedFeatureRequest {
  openApiName?: string(name='OpenApiName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serialNumber?: string(name='SerialNumber'),
  smartAGId?: string(name='SmartAGId'),
}

model ListSmartAGApiUnsupportedFeatureResponseBody = {
  features?: [ 
    {
      feature?: string(name='Feature'),
    }
  ](name='Features'),
  requestId?: string(name='RequestId'),
}

model ListSmartAGApiUnsupportedFeatureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSmartAGApiUnsupportedFeatureResponseBody(name='body'),
}

async function listSmartAGApiUnsupportedFeatureWithOptions(request: ListSmartAGApiUnsupportedFeatureRequest, runtime: Util.RuntimeOptions): ListSmartAGApiUnsupportedFeatureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.openApiName)) {
    query['OpenApiName'] = request.openApiName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSmartAGApiUnsupportedFeature',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSmartAGApiUnsupportedFeature(request: ListSmartAGApiUnsupportedFeatureRequest): ListSmartAGApiUnsupportedFeatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSmartAGApiUnsupportedFeatureWithOptions(request, runtime);
}

model ListSmartAGByAccessPointRequest {
  accessPointId?: int32(name='AccessPointId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGStatus?: string(name='SmartAGStatus'),
}

model ListSmartAGByAccessPointResponseBody = {
  requestId?: string(name='RequestId'),
  smartAccessGateways?: [ 
    {
      associatedCcnId?: string(name='AssociatedCcnId'),
      hardwareVersion?: string(name='HardwareVersion'),
      routingStrategy?: string(name='RoutingStrategy'),
      smartAGDescription?: string(name='SmartAGDescription'),
      smartAGId?: string(name='SmartAGId'),
      smartAGName?: string(name='SmartAGName'),
      smartAGStatus?: string(name='SmartAGStatus'),
    }
  ](name='SmartAccessGateways'),
  totalCount?: int32(name='TotalCount'),
}

model ListSmartAGByAccessPointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSmartAGByAccessPointResponseBody(name='body'),
}

async function listSmartAGByAccessPointWithOptions(request: ListSmartAGByAccessPointRequest, runtime: Util.RuntimeOptions): ListSmartAGByAccessPointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessPointId)) {
    query['AccessPointId'] = request.accessPointId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGStatus)) {
    query['SmartAGStatus'] = request.smartAGStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSmartAGByAccessPoint',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSmartAGByAccessPoint(request: ListSmartAGByAccessPointRequest): ListSmartAGByAccessPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSmartAGByAccessPointWithOptions(request, runtime);
}

model ModifyACLRequest {
  aclId?: string(name='AclId'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyACLResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyACLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyACLResponseBody(name='body'),
}

async function modifyACLWithOptions(request: ModifyACLRequest, runtime: Util.RuntimeOptions): ModifyACLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyACL',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyACL(request: ModifyACLRequest): ModifyACLResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyACLWithOptions(request, runtime);
}

model ModifyACLRuleRequest {
  aclId?: string(name='AclId'),
  acrId?: string(name='AcrId'),
  description?: string(name='Description'),
  destCidr?: string(name='DestCidr'),
  destPortRange?: string(name='DestPortRange'),
  direction?: string(name='Direction'),
  dpiGroupIds?: [ string ](name='DpiGroupIds'),
  dpiSignatureIds?: [ string ](name='DpiSignatureIds'),
  ipProtocol?: string(name='IpProtocol'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  policy?: string(name='Policy'),
  priority?: int32(name='Priority'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceCidr?: string(name='SourceCidr'),
  sourcePortRange?: string(name='SourcePortRange'),
  type?: string(name='Type'),
}

model ModifyACLRuleResponseBody = {
  aclId?: string(name='AclId'),
  acrId?: string(name='AcrId'),
  description?: string(name='Description'),
  destCidr?: string(name='DestCidr'),
  destPortRange?: string(name='DestPortRange'),
  direction?: string(name='Direction'),
  dpiGroupIds?: {
    dpiGroupId?: [ string ](name='DpiGroupId')
  }(name='DpiGroupIds'),
  dpiSignatureIds?: {
    dpiSignatureId?: [ string ](name='DpiSignatureId')
  }(name='DpiSignatureIds'),
  gmtCreate?: long(name='GmtCreate'),
  ipProtocol?: string(name='IpProtocol'),
  name?: string(name='Name'),
  policy?: string(name='Policy'),
  priority?: int32(name='Priority'),
  requestId?: string(name='RequestId'),
  sourceCidr?: string(name='SourceCidr'),
  sourcePortRange?: string(name='SourcePortRange'),
}

model ModifyACLRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyACLRuleResponseBody(name='body'),
}

async function modifyACLRuleWithOptions(request: ModifyACLRuleRequest, runtime: Util.RuntimeOptions): ModifyACLRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclId)) {
    query['AclId'] = request.aclId;
  }
  if (!Util.isUnset(request.acrId)) {
    query['AcrId'] = request.acrId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destCidr)) {
    query['DestCidr'] = request.destCidr;
  }
  if (!Util.isUnset(request.destPortRange)) {
    query['DestPortRange'] = request.destPortRange;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.dpiGroupIds)) {
    query['DpiGroupIds'] = request.dpiGroupIds;
  }
  if (!Util.isUnset(request.dpiSignatureIds)) {
    query['DpiSignatureIds'] = request.dpiSignatureIds;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceCidr)) {
    query['SourceCidr'] = request.sourceCidr;
  }
  if (!Util.isUnset(request.sourcePortRange)) {
    query['SourcePortRange'] = request.sourcePortRange;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyACLRule',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyACLRule(request: ModifyACLRuleRequest): ModifyACLRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyACLRuleWithOptions(request, runtime);
}

model ModifyClientUserDNSRequest {
  appDNS?: [ string ](name='AppDNS'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  recoveredDNS?: [ string ](name='RecoveredDNS'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model ModifyClientUserDNSResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyClientUserDNSResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClientUserDNSResponseBody(name='body'),
}

async function modifyClientUserDNSWithOptions(request: ModifyClientUserDNSRequest, runtime: Util.RuntimeOptions): ModifyClientUserDNSResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appDNS)) {
    query['AppDNS'] = request.appDNS;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.recoveredDNS)) {
    query['RecoveredDNS'] = request.recoveredDNS;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClientUserDNS',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyClientUserDNS(request: ModifyClientUserDNSRequest): ModifyClientUserDNSResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyClientUserDNSWithOptions(request, runtime);
}

model ModifyCloudConnectNetworkRequest {
  ccnId?: string(name='CcnId'),
  cidrBlock?: string(name='CidrBlock'),
  description?: string(name='Description'),
  interworkingStatus?: string(name='InterworkingStatus'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyCloudConnectNetworkResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCloudConnectNetworkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCloudConnectNetworkResponseBody(name='body'),
}

async function modifyCloudConnectNetworkWithOptions(request: ModifyCloudConnectNetworkRequest, runtime: Util.RuntimeOptions): ModifyCloudConnectNetworkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ccnId)) {
    query['CcnId'] = request.ccnId;
  }
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.interworkingStatus)) {
    query['InterworkingStatus'] = request.interworkingStatus;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCloudConnectNetwork',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCloudConnectNetwork(request: ModifyCloudConnectNetworkRequest): ModifyCloudConnectNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCloudConnectNetworkWithOptions(request, runtime);
}

model ModifyDeviceAutoUpgradePolicyRequest {
  cronExpression?: string(name='CronExpression'),
  duration?: int32(name='Duration'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serialNumber?: string(name='SerialNumber'),
  smartAGId?: string(name='SmartAGId'),
  timeZone?: string(name='TimeZone'),
  upgradeType?: string(name='UpgradeType'),
  versionType?: string(name='VersionType'),
}

model ModifyDeviceAutoUpgradePolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDeviceAutoUpgradePolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDeviceAutoUpgradePolicyResponseBody(name='body'),
}

async function modifyDeviceAutoUpgradePolicyWithOptions(request: ModifyDeviceAutoUpgradePolicyRequest, runtime: Util.RuntimeOptions): ModifyDeviceAutoUpgradePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cronExpression)) {
    query['CronExpression'] = request.cronExpression;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.timeZone)) {
    query['TimeZone'] = request.timeZone;
  }
  if (!Util.isUnset(request.upgradeType)) {
    query['UpgradeType'] = request.upgradeType;
  }
  if (!Util.isUnset(request.versionType)) {
    query['VersionType'] = request.versionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDeviceAutoUpgradePolicy',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDeviceAutoUpgradePolicy(request: ModifyDeviceAutoUpgradePolicyRequest): ModifyDeviceAutoUpgradePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDeviceAutoUpgradePolicyWithOptions(request, runtime);
}

model ModifyFlowLogAttributeRequest {
  activeAging?: int32(name='ActiveAging'),
  description?: string(name='Description'),
  flowLogId?: string(name='FlowLogId'),
  inactiveAging?: int32(name='InactiveAging'),
  logstoreName?: string(name='LogstoreName'),
  name?: string(name='Name'),
  netflowServerIp?: string(name='NetflowServerIp'),
  netflowServerPort?: int32(name='NetflowServerPort'),
  netflowVersion?: string(name='NetflowVersion'),
  outputType?: string(name='OutputType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  projectName?: string(name='ProjectName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  slsRegionId?: string(name='SlsRegionId'),
}

model ModifyFlowLogAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyFlowLogAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyFlowLogAttributeResponseBody(name='body'),
}

async function modifyFlowLogAttributeWithOptions(request: ModifyFlowLogAttributeRequest, runtime: Util.RuntimeOptions): ModifyFlowLogAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.activeAging)) {
    query['ActiveAging'] = request.activeAging;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.flowLogId)) {
    query['FlowLogId'] = request.flowLogId;
  }
  if (!Util.isUnset(request.inactiveAging)) {
    query['InactiveAging'] = request.inactiveAging;
  }
  if (!Util.isUnset(request.logstoreName)) {
    query['LogstoreName'] = request.logstoreName;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.netflowServerIp)) {
    query['NetflowServerIp'] = request.netflowServerIp;
  }
  if (!Util.isUnset(request.netflowServerPort)) {
    query['NetflowServerPort'] = request.netflowServerPort;
  }
  if (!Util.isUnset(request.netflowVersion)) {
    query['NetflowVersion'] = request.netflowVersion;
  }
  if (!Util.isUnset(request.outputType)) {
    query['OutputType'] = request.outputType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.slsRegionId)) {
    query['SlsRegionId'] = request.slsRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyFlowLogAttribute',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyFlowLogAttribute(request: ModifyFlowLogAttributeRequest): ModifyFlowLogAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyFlowLogAttributeWithOptions(request, runtime);
}

model ModifyHealthCheckRequest {
  description?: string(name='Description'),
  dstIpAddr?: string(name='DstIpAddr'),
  dstPort?: int32(name='DstPort'),
  failCountThreshold?: int32(name='FailCountThreshold'),
  hcInstanceId?: string(name='HcInstanceId'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  probeCount?: int32(name='ProbeCount'),
  probeInterval?: int32(name='ProbeInterval'),
  probeTimeout?: int32(name='ProbeTimeout'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  rttFailThreshold?: int32(name='RttFailThreshold'),
  rttThreshold?: int32(name='RttThreshold'),
  smartAGId?: string(name='SmartAGId'),
  srcIpAddr?: string(name='SrcIpAddr'),
  srcPort?: int32(name='SrcPort'),
  type?: string(name='Type'),
}

model ModifyHealthCheckResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyHealthCheckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyHealthCheckResponseBody(name='body'),
}

async function modifyHealthCheckWithOptions(request: ModifyHealthCheckRequest, runtime: Util.RuntimeOptions): ModifyHealthCheckResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dstIpAddr)) {
    query['DstIpAddr'] = request.dstIpAddr;
  }
  if (!Util.isUnset(request.dstPort)) {
    query['DstPort'] = request.dstPort;
  }
  if (!Util.isUnset(request.failCountThreshold)) {
    query['FailCountThreshold'] = request.failCountThreshold;
  }
  if (!Util.isUnset(request.hcInstanceId)) {
    query['HcInstanceId'] = request.hcInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.probeCount)) {
    query['ProbeCount'] = request.probeCount;
  }
  if (!Util.isUnset(request.probeInterval)) {
    query['ProbeInterval'] = request.probeInterval;
  }
  if (!Util.isUnset(request.probeTimeout)) {
    query['ProbeTimeout'] = request.probeTimeout;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.rttFailThreshold)) {
    query['RttFailThreshold'] = request.rttFailThreshold;
  }
  if (!Util.isUnset(request.rttThreshold)) {
    query['RttThreshold'] = request.rttThreshold;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.srcIpAddr)) {
    query['SrcIpAddr'] = request.srcIpAddr;
  }
  if (!Util.isUnset(request.srcPort)) {
    query['SrcPort'] = request.srcPort;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyHealthCheck',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyHealthCheck(request: ModifyHealthCheckRequest): ModifyHealthCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHealthCheckWithOptions(request, runtime);
}

model ModifyQosRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  qosDescription?: string(name='QosDescription'),
  qosId?: string(name='QosId'),
  qosName?: string(name='QosName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyQosResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyQosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyQosResponseBody(name='body'),
}

async function modifyQosWithOptions(request: ModifyQosRequest, runtime: Util.RuntimeOptions): ModifyQosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.qosDescription)) {
    query['QosDescription'] = request.qosDescription;
  }
  if (!Util.isUnset(request.qosId)) {
    query['QosId'] = request.qosId;
  }
  if (!Util.isUnset(request.qosName)) {
    query['QosName'] = request.qosName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyQos',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyQos(request: ModifyQosRequest): ModifyQosResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyQosWithOptions(request, runtime);
}

model ModifyQosCarRequest {
  description?: string(name='Description'),
  limitType?: string(name='LimitType'),
  maxBandwidthAbs?: int32(name='MaxBandwidthAbs'),
  maxBandwidthPercent?: int32(name='MaxBandwidthPercent'),
  minBandwidthAbs?: int32(name='MinBandwidthAbs'),
  minBandwidthPercent?: int32(name='MinBandwidthPercent'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  percentSourceType?: string(name='PercentSourceType'),
  priority?: int32(name='Priority'),
  qosCarId?: string(name='QosCarId'),
  qosId?: string(name='QosId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyQosCarResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyQosCarResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyQosCarResponseBody(name='body'),
}

async function modifyQosCarWithOptions(request: ModifyQosCarRequest, runtime: Util.RuntimeOptions): ModifyQosCarResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.limitType)) {
    query['LimitType'] = request.limitType;
  }
  if (!Util.isUnset(request.maxBandwidthAbs)) {
    query['MaxBandwidthAbs'] = request.maxBandwidthAbs;
  }
  if (!Util.isUnset(request.maxBandwidthPercent)) {
    query['MaxBandwidthPercent'] = request.maxBandwidthPercent;
  }
  if (!Util.isUnset(request.minBandwidthAbs)) {
    query['MinBandwidthAbs'] = request.minBandwidthAbs;
  }
  if (!Util.isUnset(request.minBandwidthPercent)) {
    query['MinBandwidthPercent'] = request.minBandwidthPercent;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.percentSourceType)) {
    query['PercentSourceType'] = request.percentSourceType;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.qosCarId)) {
    query['QosCarId'] = request.qosCarId;
  }
  if (!Util.isUnset(request.qosId)) {
    query['QosId'] = request.qosId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyQosCar',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyQosCar(request: ModifyQosCarRequest): ModifyQosCarResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyQosCarWithOptions(request, runtime);
}

model ModifyQosPolicyRequest {
  description?: string(name='Description'),
  destCidr?: string(name='DestCidr'),
  destPortRange?: string(name='DestPortRange'),
  dpiGroupIds?: [ string ](name='DpiGroupIds'),
  dpiSignatureIds?: [ string ](name='DpiSignatureIds'),
  endTime?: string(name='EndTime'),
  ipProtocol?: string(name='IpProtocol'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  priority?: int32(name='Priority'),
  qosId?: string(name='QosId'),
  qosPolicyId?: string(name='QosPolicyId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceCidr?: string(name='SourceCidr'),
  sourcePortRange?: string(name='SourcePortRange'),
  startTime?: string(name='StartTime'),
}

model ModifyQosPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyQosPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyQosPolicyResponseBody(name='body'),
}

async function modifyQosPolicyWithOptions(request: ModifyQosPolicyRequest, runtime: Util.RuntimeOptions): ModifyQosPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destCidr)) {
    query['DestCidr'] = request.destCidr;
  }
  if (!Util.isUnset(request.destPortRange)) {
    query['DestPortRange'] = request.destPortRange;
  }
  if (!Util.isUnset(request.dpiGroupIds)) {
    query['DpiGroupIds'] = request.dpiGroupIds;
  }
  if (!Util.isUnset(request.dpiSignatureIds)) {
    query['DpiSignatureIds'] = request.dpiSignatureIds;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.qosId)) {
    query['QosId'] = request.qosId;
  }
  if (!Util.isUnset(request.qosPolicyId)) {
    query['QosPolicyId'] = request.qosPolicyId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceCidr)) {
    query['SourceCidr'] = request.sourceCidr;
  }
  if (!Util.isUnset(request.sourcePortRange)) {
    query['SourcePortRange'] = request.sourcePortRange;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyQosPolicy',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyQosPolicy(request: ModifyQosPolicyRequest): ModifyQosPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyQosPolicyWithOptions(request, runtime);
}

model ModifyRouteDistributionStrategyRequest {
  destCidrBlock?: string(name='DestCidrBlock'),
  hcInstanceId?: string(name='HcInstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeDistribution?: string(name='RouteDistribution'),
  routeSource?: string(name='RouteSource'),
  smartAGId?: string(name='SmartAGId'),
  sourceType?: string(name='SourceType'),
}

model ModifyRouteDistributionStrategyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyRouteDistributionStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRouteDistributionStrategyResponseBody(name='body'),
}

async function modifyRouteDistributionStrategyWithOptions(request: ModifyRouteDistributionStrategyRequest, runtime: Util.RuntimeOptions): ModifyRouteDistributionStrategyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destCidrBlock)) {
    query['DestCidrBlock'] = request.destCidrBlock;
  }
  if (!Util.isUnset(request.hcInstanceId)) {
    query['HcInstanceId'] = request.hcInstanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeDistribution)) {
    query['RouteDistribution'] = request.routeDistribution;
  }
  if (!Util.isUnset(request.routeSource)) {
    query['RouteSource'] = request.routeSource;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyRouteDistributionStrategy',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyRouteDistributionStrategy(request: ModifyRouteDistributionStrategyRequest): ModifyRouteDistributionStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRouteDistributionStrategyWithOptions(request, runtime);
}

model ModifySAGAdminPasswordRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  password?: string(name='Password'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model ModifySAGAdminPasswordResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySAGAdminPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySAGAdminPasswordResponseBody(name='body'),
}

async function modifySAGAdminPasswordWithOptions(request: ModifySAGAdminPasswordRequest, runtime: Util.RuntimeOptions): ModifySAGAdminPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySAGAdminPassword',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySAGAdminPassword(request: ModifySAGAdminPasswordRequest): ModifySAGAdminPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySAGAdminPasswordWithOptions(request, runtime);
}

model ModifySagExpressConnectInterfaceRequest {
  IP?: string(name='IP'),
  mask?: string(name='Mask'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  portName?: string(name='PortName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
  vlan?: string(name='Vlan'),
}

model ModifySagExpressConnectInterfaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySagExpressConnectInterfaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySagExpressConnectInterfaceResponseBody(name='body'),
}

async function modifySagExpressConnectInterfaceWithOptions(request: ModifySagExpressConnectInterfaceRequest, runtime: Util.RuntimeOptions): ModifySagExpressConnectInterfaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.IP)) {
    query['IP'] = request.IP;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.portName)) {
    query['PortName'] = request.portName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  if (!Util.isUnset(request.vlan)) {
    query['Vlan'] = request.vlan;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySagExpressConnectInterface',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySagExpressConnectInterface(request: ModifySagExpressConnectInterfaceRequest): ModifySagExpressConnectInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySagExpressConnectInterfaceWithOptions(request, runtime);
}

model ModifySagGlobalRouteProtocolRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeProtocol?: string(name='RouteProtocol'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model ModifySagGlobalRouteProtocolResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySagGlobalRouteProtocolResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySagGlobalRouteProtocolResponseBody(name='body'),
}

async function modifySagGlobalRouteProtocolWithOptions(request: ModifySagGlobalRouteProtocolRequest, runtime: Util.RuntimeOptions): ModifySagGlobalRouteProtocolResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeProtocol)) {
    query['RouteProtocol'] = request.routeProtocol;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySagGlobalRouteProtocol',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySagGlobalRouteProtocol(request: ModifySagGlobalRouteProtocolRequest): ModifySagGlobalRouteProtocolResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySagGlobalRouteProtocolWithOptions(request, runtime);
}

model ModifySagHaRequest {
  mode?: string(name='Mode'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  portName?: string(name='PortName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
  virtualIp?: string(name='VirtualIp'),
}

model ModifySagHaResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySagHaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySagHaResponseBody(name='body'),
}

async function modifySagHaWithOptions(request: ModifySagHaRequest, runtime: Util.RuntimeOptions): ModifySagHaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.portName)) {
    query['PortName'] = request.portName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  if (!Util.isUnset(request.virtualIp)) {
    query['VirtualIp'] = request.virtualIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySagHa',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySagHa(request: ModifySagHaRequest): ModifySagHaResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySagHaWithOptions(request, runtime);
}

model ModifySagLanRequest {
  endIp?: string(name='EndIp'),
  IP?: string(name='IP'),
  IPType?: string(name='IPType'),
  lease?: string(name='Lease'),
  mask?: string(name='Mask'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  portName?: string(name='PortName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
  startIp?: string(name='StartIp'),
}

model ModifySagLanResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySagLanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySagLanResponseBody(name='body'),
}

async function modifySagLanWithOptions(request: ModifySagLanRequest, runtime: Util.RuntimeOptions): ModifySagLanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endIp)) {
    query['EndIp'] = request.endIp;
  }
  if (!Util.isUnset(request.IP)) {
    query['IP'] = request.IP;
  }
  if (!Util.isUnset(request.IPType)) {
    query['IPType'] = request.IPType;
  }
  if (!Util.isUnset(request.lease)) {
    query['Lease'] = request.lease;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.portName)) {
    query['PortName'] = request.portName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  if (!Util.isUnset(request.startIp)) {
    query['StartIp'] = request.startIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySagLan',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySagLan(request: ModifySagLanRequest): ModifySagLanResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySagLanWithOptions(request, runtime);
}

model ModifySagManagementPortRequest {
  gateway?: string(name='Gateway'),
  IP?: string(name='IP'),
  mask?: string(name='Mask'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model ModifySagManagementPortResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySagManagementPortResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySagManagementPortResponseBody(name='body'),
}

async function modifySagManagementPortWithOptions(request: ModifySagManagementPortRequest, runtime: Util.RuntimeOptions): ModifySagManagementPortResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gateway)) {
    query['Gateway'] = request.gateway;
  }
  if (!Util.isUnset(request.IP)) {
    query['IP'] = request.IP;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySagManagementPort',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySagManagementPort(request: ModifySagManagementPortRequest): ModifySagManagementPortResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySagManagementPortWithOptions(request, runtime);
}

model ModifySagPortRoleRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  portName?: string(name='PortName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  role?: string(name='Role'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model ModifySagPortRoleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySagPortRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySagPortRoleResponseBody(name='body'),
}

async function modifySagPortRoleWithOptions(request: ModifySagPortRoleRequest, runtime: Util.RuntimeOptions): ModifySagPortRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.portName)) {
    query['PortName'] = request.portName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.role)) {
    query['Role'] = request.role;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySagPortRole',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySagPortRole(request: ModifySagPortRoleRequest): ModifySagPortRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySagPortRoleWithOptions(request, runtime);
}

model ModifySagPortRouteProtocolRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  portName?: string(name='PortName'),
  regionId?: string(name='RegionId'),
  remoteAs?: string(name='RemoteAs'),
  remoteIp?: string(name='RemoteIp'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeProtocol?: string(name='RouteProtocol'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
  vlan?: string(name='Vlan'),
}

model ModifySagPortRouteProtocolResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySagPortRouteProtocolResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySagPortRouteProtocolResponseBody(name='body'),
}

async function modifySagPortRouteProtocolWithOptions(request: ModifySagPortRouteProtocolRequest, runtime: Util.RuntimeOptions): ModifySagPortRouteProtocolResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.portName)) {
    query['PortName'] = request.portName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remoteAs)) {
    query['RemoteAs'] = request.remoteAs;
  }
  if (!Util.isUnset(request.remoteIp)) {
    query['RemoteIp'] = request.remoteIp;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeProtocol)) {
    query['RouteProtocol'] = request.routeProtocol;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  if (!Util.isUnset(request.vlan)) {
    query['Vlan'] = request.vlan;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySagPortRouteProtocol',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySagPortRouteProtocol(request: ModifySagPortRouteProtocolRequest): ModifySagPortRouteProtocolResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySagPortRouteProtocolWithOptions(request, runtime);
}

model ModifySagRemoteAccessRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  remoteAccessIp?: string(name='RemoteAccessIp'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serialNumber?: string(name='SerialNumber'),
  smartAGId?: string(name='SmartAGId'),
}

model ModifySagRemoteAccessResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  remoteAccessIp?: string(name='RemoteAccessIp'),
  requestId?: string(name='RequestId'),
  serialNumber?: string(name='SerialNumber'),
  success?: boolean(name='Success'),
}

model ModifySagRemoteAccessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySagRemoteAccessResponseBody(name='body'),
}

async function modifySagRemoteAccessWithOptions(request: ModifySagRemoteAccessRequest, runtime: Util.RuntimeOptions): ModifySagRemoteAccessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.remoteAccessIp)) {
    query['RemoteAccessIp'] = request.remoteAccessIp;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySagRemoteAccess',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySagRemoteAccess(request: ModifySagRemoteAccessRequest): ModifySagRemoteAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySagRemoteAccessWithOptions(request, runtime);
}

model ModifySagRouteProtocolBgpRequest {
  holdTime?: int32(name='HoldTime'),
  keepAlive?: int32(name='KeepAlive'),
  localAs?: long(name='LocalAs'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routerId?: string(name='RouterId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model ModifySagRouteProtocolBgpResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySagRouteProtocolBgpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySagRouteProtocolBgpResponseBody(name='body'),
}

async function modifySagRouteProtocolBgpWithOptions(request: ModifySagRouteProtocolBgpRequest, runtime: Util.RuntimeOptions): ModifySagRouteProtocolBgpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.holdTime)) {
    query['HoldTime'] = request.holdTime;
  }
  if (!Util.isUnset(request.keepAlive)) {
    query['KeepAlive'] = request.keepAlive;
  }
  if (!Util.isUnset(request.localAs)) {
    query['LocalAs'] = request.localAs;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routerId)) {
    query['RouterId'] = request.routerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySagRouteProtocolBgp',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySagRouteProtocolBgp(request: ModifySagRouteProtocolBgpRequest): ModifySagRouteProtocolBgpResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySagRouteProtocolBgpWithOptions(request, runtime);
}

model ModifySagRouteProtocolOspfRequest {
  areaId?: int32(name='AreaId'),
  authenticationType?: string(name='AuthenticationType'),
  deadTime?: int32(name='DeadTime'),
  helloTime?: int32(name='HelloTime'),
  md5Key?: string(name='Md5Key'),
  md5KeyId?: int32(name='Md5KeyId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  password?: string(name='Password'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routerId?: string(name='RouterId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model ModifySagRouteProtocolOspfResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySagRouteProtocolOspfResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySagRouteProtocolOspfResponseBody(name='body'),
}

async function modifySagRouteProtocolOspfWithOptions(request: ModifySagRouteProtocolOspfRequest, runtime: Util.RuntimeOptions): ModifySagRouteProtocolOspfResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.areaId)) {
    query['AreaId'] = request.areaId;
  }
  if (!Util.isUnset(request.authenticationType)) {
    query['AuthenticationType'] = request.authenticationType;
  }
  if (!Util.isUnset(request.deadTime)) {
    query['DeadTime'] = request.deadTime;
  }
  if (!Util.isUnset(request.helloTime)) {
    query['HelloTime'] = request.helloTime;
  }
  if (!Util.isUnset(request.md5Key)) {
    query['Md5Key'] = request.md5Key;
  }
  if (!Util.isUnset(request.md5KeyId)) {
    query['Md5KeyId'] = request.md5KeyId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routerId)) {
    query['RouterId'] = request.routerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySagRouteProtocolOspf',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySagRouteProtocolOspf(request: ModifySagRouteProtocolOspfRequest): ModifySagRouteProtocolOspfResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySagRouteProtocolOspfWithOptions(request, runtime);
}

model ModifySagStaticRouteRequest {
  destinationCidr?: string(name='DestinationCidr'),
  nextHop?: string(name='NextHop'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  portName?: string(name='PortName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
  vlan?: string(name='Vlan'),
}

model ModifySagStaticRouteResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySagStaticRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySagStaticRouteResponseBody(name='body'),
}

async function modifySagStaticRouteWithOptions(request: ModifySagStaticRouteRequest, runtime: Util.RuntimeOptions): ModifySagStaticRouteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationCidr)) {
    query['DestinationCidr'] = request.destinationCidr;
  }
  if (!Util.isUnset(request.nextHop)) {
    query['NextHop'] = request.nextHop;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.portName)) {
    query['PortName'] = request.portName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  if (!Util.isUnset(request.vlan)) {
    query['Vlan'] = request.vlan;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySagStaticRoute',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySagStaticRoute(request: ModifySagStaticRouteRequest): ModifySagStaticRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySagStaticRouteWithOptions(request, runtime);
}

model ModifySagUserDnsRequest {
  masterDns?: string(name='MasterDns'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  slaveDns?: string(name='SlaveDns'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model ModifySagUserDnsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySagUserDnsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySagUserDnsResponseBody(name='body'),
}

async function modifySagUserDnsWithOptions(request: ModifySagUserDnsRequest, runtime: Util.RuntimeOptions): ModifySagUserDnsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.masterDns)) {
    query['MasterDns'] = request.masterDns;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.slaveDns)) {
    query['SlaveDns'] = request.slaveDns;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySagUserDns',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySagUserDns(request: ModifySagUserDnsRequest): ModifySagUserDnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySagUserDnsWithOptions(request, runtime);
}

model ModifySagWanRequest {
  bandwidth?: int32(name='Bandwidth'),
  gateway?: string(name='Gateway'),
  IP?: string(name='IP'),
  IPType?: string(name='IPType'),
  ISP?: string(name='ISP'),
  mask?: string(name='Mask'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  password?: string(name='Password'),
  portName?: string(name='PortName'),
  priority?: int32(name='Priority'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
  username?: string(name='Username'),
  weight?: int32(name='Weight'),
}

model ModifySagWanResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySagWanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySagWanResponseBody(name='body'),
}

async function modifySagWanWithOptions(request: ModifySagWanRequest, runtime: Util.RuntimeOptions): ModifySagWanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.gateway)) {
    query['Gateway'] = request.gateway;
  }
  if (!Util.isUnset(request.IP)) {
    query['IP'] = request.IP;
  }
  if (!Util.isUnset(request.IPType)) {
    query['IPType'] = request.IPType;
  }
  if (!Util.isUnset(request.ISP)) {
    query['ISP'] = request.ISP;
  }
  if (!Util.isUnset(request.mask)) {
    query['Mask'] = request.mask;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.portName)) {
    query['PortName'] = request.portName;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  if (!Util.isUnset(request.username)) {
    query['Username'] = request.username;
  }
  if (!Util.isUnset(request.weight)) {
    query['Weight'] = request.weight;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySagWan',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySagWan(request: ModifySagWanRequest): ModifySagWanResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySagWanWithOptions(request, runtime);
}

model ModifySagWanSnatRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
  snat?: string(name='Snat'),
}

model ModifySagWanSnatResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySagWanSnatResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySagWanSnatResponseBody(name='body'),
}

async function modifySagWanSnatWithOptions(request: ModifySagWanSnatRequest, runtime: Util.RuntimeOptions): ModifySagWanSnatResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  if (!Util.isUnset(request.snat)) {
    query['Snat'] = request.snat;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySagWanSnat',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySagWanSnat(request: ModifySagWanSnatRequest): ModifySagWanSnatResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySagWanSnatWithOptions(request, runtime);
}

model ModifySagWifiRequest {
  authenticationType?: string(name='AuthenticationType'),
  bandwidth?: string(name='Bandwidth'),
  channel?: string(name='Channel'),
  encryptAlgorithm?: string(name='EncryptAlgorithm'),
  isAuth?: string(name='IsAuth'),
  isBroadcast?: string(name='IsBroadcast'),
  isEnable?: string(name='IsEnable'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  password?: string(name='Password'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  SSID?: string(name='SSID'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model ModifySagWifiResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySagWifiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySagWifiResponseBody(name='body'),
}

async function modifySagWifiWithOptions(request: ModifySagWifiRequest, runtime: Util.RuntimeOptions): ModifySagWifiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authenticationType)) {
    query['AuthenticationType'] = request.authenticationType;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.channel)) {
    query['Channel'] = request.channel;
  }
  if (!Util.isUnset(request.encryptAlgorithm)) {
    query['EncryptAlgorithm'] = request.encryptAlgorithm;
  }
  if (!Util.isUnset(request.isAuth)) {
    query['IsAuth'] = request.isAuth;
  }
  if (!Util.isUnset(request.isBroadcast)) {
    query['IsBroadcast'] = request.isBroadcast;
  }
  if (!Util.isUnset(request.isEnable)) {
    query['IsEnable'] = request.isEnable;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.SSID)) {
    query['SSID'] = request.SSID;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySagWifi',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySagWifi(request: ModifySagWifiRequest): ModifySagWifiResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySagWifiWithOptions(request, runtime);
}

model ModifySmartAccessGatewayRequest {
  cidrBlock?: string(name='CidrBlock'),
  description?: string(name='Description'),
  enableSoftwareConnectionAudit?: boolean(name='EnableSoftwareConnectionAudit'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  position?: string(name='Position'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routingStrategy?: string(name='RoutingStrategy'),
  securityLockThreshold?: int32(name='SecurityLockThreshold'),
  smartAGId?: string(name='SmartAGId'),
}

model ModifySmartAccessGatewayResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySmartAccessGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySmartAccessGatewayResponseBody(name='body'),
}

async function modifySmartAccessGatewayWithOptions(request: ModifySmartAccessGatewayRequest, runtime: Util.RuntimeOptions): ModifySmartAccessGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.enableSoftwareConnectionAudit)) {
    query['EnableSoftwareConnectionAudit'] = request.enableSoftwareConnectionAudit;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.position)) {
    query['Position'] = request.position;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routingStrategy)) {
    query['RoutingStrategy'] = request.routingStrategy;
  }
  if (!Util.isUnset(request.securityLockThreshold)) {
    query['SecurityLockThreshold'] = request.securityLockThreshold;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySmartAccessGateway',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySmartAccessGateway(request: ModifySmartAccessGatewayRequest): ModifySmartAccessGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySmartAccessGatewayWithOptions(request, runtime);
}

model ModifySmartAccessGatewayClientUserRequest {
  bandwidth?: int32(name='Bandwidth'),
  email?: string(name='Email'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  userName?: string(name='UserName'),
}

model ModifySmartAccessGatewayClientUserResponseBody = {
  bandwidth?: int32(name='Bandwidth'),
  clientIp?: string(name='ClientIp'),
  requestId?: string(name='RequestId'),
  userMail?: string(name='UserMail'),
  userName?: string(name='UserName'),
}

model ModifySmartAccessGatewayClientUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySmartAccessGatewayClientUserResponseBody(name='body'),
}

async function modifySmartAccessGatewayClientUserWithOptions(request: ModifySmartAccessGatewayClientUserRequest, runtime: Util.RuntimeOptions): ModifySmartAccessGatewayClientUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySmartAccessGatewayClientUser',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySmartAccessGatewayClientUser(request: ModifySmartAccessGatewayClientUserRequest): ModifySmartAccessGatewayClientUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySmartAccessGatewayClientUserWithOptions(request, runtime);
}

model ModifySmartAccessGatewayUpBandwidthRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  upBandwidth4G?: int32(name='UpBandwidth4G'),
  upBandwidthWan?: int32(name='UpBandwidthWan'),
}

model ModifySmartAccessGatewayUpBandwidthResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySmartAccessGatewayUpBandwidthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySmartAccessGatewayUpBandwidthResponseBody(name='body'),
}

async function modifySmartAccessGatewayUpBandwidthWithOptions(request: ModifySmartAccessGatewayUpBandwidthRequest, runtime: Util.RuntimeOptions): ModifySmartAccessGatewayUpBandwidthResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.upBandwidth4G)) {
    query['UpBandwidth4G'] = request.upBandwidth4G;
  }
  if (!Util.isUnset(request.upBandwidthWan)) {
    query['UpBandwidthWan'] = request.upBandwidthWan;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySmartAccessGatewayUpBandwidth',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySmartAccessGatewayUpBandwidth(request: ModifySmartAccessGatewayUpBandwidthRequest): ModifySmartAccessGatewayUpBandwidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySmartAccessGatewayUpBandwidthWithOptions(request, runtime);
}

model MoveResourceGroupRequest {
  newResourceGroupId?: string(name='NewResourceGroupId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceId?: string(name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroupWithOptions(request: MoveResourceGroupRequest, runtime: Util.RuntimeOptions): MoveResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.newResourceGroupId)) {
    query['NewResourceGroupId'] = request.newResourceGroupId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MoveResourceGroup',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveResourceGroupWithOptions(request, runtime);
}

model ProbeAccessPointNetworkQualityRequest {
  accessPointIds?: [ int32 ](name='AccessPointIds'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model ProbeAccessPointNetworkQualityResponseBody = {
  requestId?: string(name='RequestId'),
}

model ProbeAccessPointNetworkQualityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ProbeAccessPointNetworkQualityResponseBody(name='body'),
}

async function probeAccessPointNetworkQualityWithOptions(request: ProbeAccessPointNetworkQualityRequest, runtime: Util.RuntimeOptions): ProbeAccessPointNetworkQualityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessPointIds)) {
    query['AccessPointIds'] = request.accessPointIds;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ProbeAccessPointNetworkQuality',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function probeAccessPointNetworkQuality(request: ProbeAccessPointNetworkQualityRequest): ProbeAccessPointNetworkQualityResponse {
  var runtime = new Util.RuntimeOptions{};
  return probeAccessPointNetworkQualityWithOptions(request, runtime);
}

model RebootSmartAccessGatewayRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serialNumber?: string(name='SerialNumber'),
  smartAGId?: string(name='SmartAGId'),
}

model RebootSmartAccessGatewayResponseBody = {
  requestId?: string(name='RequestId'),
}

model RebootSmartAccessGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebootSmartAccessGatewayResponseBody(name='body'),
}

async function rebootSmartAccessGatewayWithOptions(request: RebootSmartAccessGatewayRequest, runtime: Util.RuntimeOptions): RebootSmartAccessGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebootSmartAccessGateway',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rebootSmartAccessGateway(request: RebootSmartAccessGatewayRequest): RebootSmartAccessGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootSmartAccessGatewayWithOptions(request, runtime);
}

model ResetSmartAccessGatewayClientUserPasswordRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  password?: string(name='Password'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  userName?: string(name='UserName'),
}

model ResetSmartAccessGatewayClientUserPasswordResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetSmartAccessGatewayClientUserPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetSmartAccessGatewayClientUserPasswordResponseBody(name='body'),
}

async function resetSmartAccessGatewayClientUserPasswordWithOptions(request: ResetSmartAccessGatewayClientUserPasswordRequest, runtime: Util.RuntimeOptions): ResetSmartAccessGatewayClientUserPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetSmartAccessGatewayClientUserPassword',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetSmartAccessGatewayClientUserPassword(request: ResetSmartAccessGatewayClientUserPasswordRequest): ResetSmartAccessGatewayClientUserPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetSmartAccessGatewayClientUserPasswordWithOptions(request, runtime);
}

model RevokeInstanceFromCbnRequest {
  ccnInstanceId?: string(name='CcnInstanceId'),
  cenInstanceId?: string(name='CenInstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RevokeInstanceFromCbnResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeInstanceFromCbnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeInstanceFromCbnResponseBody(name='body'),
}

async function revokeInstanceFromCbnWithOptions(request: RevokeInstanceFromCbnRequest, runtime: Util.RuntimeOptions): RevokeInstanceFromCbnResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ccnInstanceId)) {
    query['CcnInstanceId'] = request.ccnInstanceId;
  }
  if (!Util.isUnset(request.cenInstanceId)) {
    query['CenInstanceId'] = request.cenInstanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeInstanceFromCbn',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeInstanceFromCbn(request: RevokeInstanceFromCbnRequest): RevokeInstanceFromCbnResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeInstanceFromCbnWithOptions(request, runtime);
}

model RevokeInstanceFromVbrRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  vbrInstanceId?: string(name='VbrInstanceId'),
}

model RevokeInstanceFromVbrResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeInstanceFromVbrResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeInstanceFromVbrResponseBody(name='body'),
}

async function revokeInstanceFromVbrWithOptions(request: RevokeInstanceFromVbrRequest, runtime: Util.RuntimeOptions): RevokeInstanceFromVbrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.vbrInstanceId)) {
    query['VbrInstanceId'] = request.vbrInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeInstanceFromVbr',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeInstanceFromVbr(request: RevokeInstanceFromVbrRequest): RevokeInstanceFromVbrResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeInstanceFromVbrWithOptions(request, runtime);
}

model RevokeSagInstanceFromCcnRequest {
  ccnInstanceId?: string(name='CcnInstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model RevokeSagInstanceFromCcnResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeSagInstanceFromCcnResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeSagInstanceFromCcnResponseBody(name='body'),
}

async function revokeSagInstanceFromCcnWithOptions(request: RevokeSagInstanceFromCcnRequest, runtime: Util.RuntimeOptions): RevokeSagInstanceFromCcnResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ccnInstanceId)) {
    query['CcnInstanceId'] = request.ccnInstanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeSagInstanceFromCcn',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeSagInstanceFromCcn(request: RevokeSagInstanceFromCcnRequest): RevokeSagInstanceFromCcnResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeSagInstanceFromCcnWithOptions(request, runtime);
}

model RoamClientUserRequest {
  originRegionId?: string(name='OriginRegionId'),
  originSmartAGId?: string(name='OriginSmartAGId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  targetSmartAGId?: string(name='TargetSmartAGId'),
  userName?: string(name='UserName'),
}

model RoamClientUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model RoamClientUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RoamClientUserResponseBody(name='body'),
}

async function roamClientUserWithOptions(request: RoamClientUserRequest, runtime: Util.RuntimeOptions): RoamClientUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.originRegionId)) {
    query['OriginRegionId'] = request.originRegionId;
  }
  if (!Util.isUnset(request.originSmartAGId)) {
    query['OriginSmartAGId'] = request.originSmartAGId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.targetSmartAGId)) {
    query['TargetSmartAGId'] = request.targetSmartAGId;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RoamClientUser',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function roamClientUser(request: RoamClientUserRequest): RoamClientUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return roamClientUserWithOptions(request, runtime);
}

model SynchronizeSmartAGWebConfigRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGSn?: string(name='SmartAGSn'),
}

model SynchronizeSmartAGWebConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SynchronizeSmartAGWebConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SynchronizeSmartAGWebConfigResponseBody(name='body'),
}

async function synchronizeSmartAGWebConfigWithOptions(request: SynchronizeSmartAGWebConfigRequest, runtime: Util.RuntimeOptions): SynchronizeSmartAGWebConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGSn)) {
    query['SmartAGSn'] = request.smartAGSn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SynchronizeSmartAGWebConfig',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function synchronizeSmartAGWebConfig(request: SynchronizeSmartAGWebConfigRequest): SynchronizeSmartAGWebConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return synchronizeSmartAGWebConfigWithOptions(request, runtime);
}

model UnbindSerialNumberRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serialNumber?: string(name='SerialNumber'),
  smartAGId?: string(name='SmartAGId'),
}

model UnbindSerialNumberResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindSerialNumberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindSerialNumberResponseBody(name='body'),
}

async function unbindSerialNumberWithOptions(request: UnbindSerialNumberRequest, runtime: Util.RuntimeOptions): UnbindSerialNumberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindSerialNumber',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindSerialNumber(request: UnbindSerialNumberRequest): UnbindSerialNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindSerialNumberWithOptions(request, runtime);
}

model UnbindSmartAccessGatewayRequest {
  ccnId?: string(name='CcnId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGUid?: long(name='SmartAGUid'),
}

model UnbindSmartAccessGatewayResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindSmartAccessGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindSmartAccessGatewayResponseBody(name='body'),
}

async function unbindSmartAccessGatewayWithOptions(request: UnbindSmartAccessGatewayRequest, runtime: Util.RuntimeOptions): UnbindSmartAccessGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ccnId)) {
    query['CcnId'] = request.ccnId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGUid)) {
    query['SmartAGUid'] = request.smartAGUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindSmartAccessGateway',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindSmartAccessGateway(request: UnbindSmartAccessGatewayRequest): UnbindSmartAccessGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindSmartAccessGatewayWithOptions(request, runtime);
}

model UnbindVbrRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  smartAGUid?: long(name='SmartAGUid'),
  vbrId?: string(name='VbrId'),
  vbrRegionId?: string(name='VbrRegionId'),
}

model UnbindVbrResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindVbrResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindVbrResponseBody(name='body'),
}

async function unbindVbrWithOptions(request: UnbindVbrRequest, runtime: Util.RuntimeOptions): UnbindVbrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.smartAGUid)) {
    query['SmartAGUid'] = request.smartAGUid;
  }
  if (!Util.isUnset(request.vbrId)) {
    query['VbrId'] = request.vbrId;
  }
  if (!Util.isUnset(request.vbrRegionId)) {
    query['VbrRegionId'] = request.vbrRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindVbr',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindVbr(request: UnbindVbrRequest): UnbindVbrResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindVbrWithOptions(request, runtime);
}

model UnlockSmartAccessGatewayRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model UnlockSmartAccessGatewayResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnlockSmartAccessGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnlockSmartAccessGatewayResponseBody(name='body'),
}

async function unlockSmartAccessGatewayWithOptions(request: UnlockSmartAccessGatewayRequest, runtime: Util.RuntimeOptions): UnlockSmartAccessGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnlockSmartAccessGateway',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unlockSmartAccessGateway(request: UnlockSmartAccessGatewayRequest): UnlockSmartAccessGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return unlockSmartAccessGatewayWithOptions(request, runtime);
}

model UpdateEnterpriseCodeRequest {
  clientToken?: string(name='ClientToken'),
  enterpriseCode?: string(name='EnterpriseCode'),
  isDefault?: boolean(name='IsDefault'),
  regionId?: string(name='RegionId'),
}

model UpdateEnterpriseCodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateEnterpriseCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEnterpriseCodeResponseBody(name='body'),
}

async function updateEnterpriseCodeWithOptions(request: UpdateEnterpriseCodeRequest, runtime: Util.RuntimeOptions): UpdateEnterpriseCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.enterpriseCode)) {
    query['EnterpriseCode'] = request.enterpriseCode;
  }
  if (!Util.isUnset(request.isDefault)) {
    query['IsDefault'] = request.isDefault;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEnterpriseCode',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEnterpriseCode(request: UpdateEnterpriseCodeRequest): UpdateEnterpriseCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEnterpriseCodeWithOptions(request, runtime);
}

model UpdateSmartAGAccessPointRequest {
  accessPointId?: int32(name='AccessPointId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model UpdateSmartAGAccessPointResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateSmartAGAccessPointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSmartAGAccessPointResponseBody(name='body'),
}

async function updateSmartAGAccessPointWithOptions(request: UpdateSmartAGAccessPointRequest, runtime: Util.RuntimeOptions): UpdateSmartAGAccessPointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessPointId)) {
    query['AccessPointId'] = request.accessPointId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSmartAGAccessPoint',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSmartAGAccessPoint(request: UpdateSmartAGAccessPointRequest): UpdateSmartAGAccessPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSmartAGAccessPointWithOptions(request, runtime);
}

model UpdateSmartAGDpiAttributeRequest {
  clientToken?: string(name='ClientToken'),
  dpiEnabled?: boolean(name='DpiEnabled'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model UpdateSmartAGDpiAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateSmartAGDpiAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSmartAGDpiAttributeResponseBody(name='body'),
}

async function updateSmartAGDpiAttributeWithOptions(request: UpdateSmartAGDpiAttributeRequest, runtime: Util.RuntimeOptions): UpdateSmartAGDpiAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dpiEnabled)) {
    query['DpiEnabled'] = request.dpiEnabled;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSmartAGDpiAttribute',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSmartAGDpiAttribute(request: UpdateSmartAGDpiAttributeRequest): UpdateSmartAGDpiAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSmartAGDpiAttributeWithOptions(request, runtime);
}

model UpdateSmartAGEnterpriseCodeRequest {
  clientToken?: string(name='ClientToken'),
  enterpriseCode?: string(name='EnterpriseCode'),
  regionId?: string(name='RegionId'),
  smartAGId?: string(name='SmartAGId'),
}

model UpdateSmartAGEnterpriseCodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateSmartAGEnterpriseCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSmartAGEnterpriseCodeResponseBody(name='body'),
}

async function updateSmartAGEnterpriseCodeWithOptions(request: UpdateSmartAGEnterpriseCodeRequest, runtime: Util.RuntimeOptions): UpdateSmartAGEnterpriseCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.enterpriseCode)) {
    query['EnterpriseCode'] = request.enterpriseCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSmartAGEnterpriseCode',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSmartAGEnterpriseCode(request: UpdateSmartAGEnterpriseCodeRequest): UpdateSmartAGEnterpriseCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSmartAGEnterpriseCodeWithOptions(request, runtime);
}

model UpdateSmartAGUserAccelerateConfigRequest {
  bandwidth?: int32(name='Bandwidth'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  regionId?: string(name='RegionId'),
  smartAGId?: string(name='SmartAGId'),
  userName?: string(name='UserName'),
}

model UpdateSmartAGUserAccelerateConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateSmartAGUserAccelerateConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSmartAGUserAccelerateConfigResponseBody(name='body'),
}

async function updateSmartAGUserAccelerateConfigWithOptions(request: UpdateSmartAGUserAccelerateConfigRequest, runtime: Util.RuntimeOptions): UpdateSmartAGUserAccelerateConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSmartAGUserAccelerateConfig',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSmartAGUserAccelerateConfig(request: UpdateSmartAGUserAccelerateConfigRequest): UpdateSmartAGUserAccelerateConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSmartAGUserAccelerateConfigWithOptions(request, runtime);
}

model UpdateSmartAccessGatewayVersionRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serialNumber?: string(name='SerialNumber'),
  smartAGId?: string(name='SmartAGId'),
  versionCode?: string(name='VersionCode'),
  versionType?: string(name='VersionType'),
}

model UpdateSmartAccessGatewayVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateSmartAccessGatewayVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSmartAccessGatewayVersionResponseBody(name='body'),
}

async function updateSmartAccessGatewayVersionWithOptions(request: UpdateSmartAccessGatewayVersionRequest, runtime: Util.RuntimeOptions): UpdateSmartAccessGatewayVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.versionCode)) {
    query['VersionCode'] = request.versionCode;
  }
  if (!Util.isUnset(request.versionType)) {
    query['VersionType'] = request.versionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSmartAccessGatewayVersion',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSmartAccessGatewayVersion(request: UpdateSmartAccessGatewayVersionRequest): UpdateSmartAccessGatewayVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSmartAccessGatewayVersionWithOptions(request, runtime);
}

model UpgradeSmartAccessGatewayRequest {
  autoPay?: boolean(name='AutoPay'),
  bandWidthSpec?: long(name='BandWidthSpec'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
}

model UpgradeSmartAccessGatewayResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model UpgradeSmartAccessGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeSmartAccessGatewayResponseBody(name='body'),
}

async function upgradeSmartAccessGatewayWithOptions(request: UpgradeSmartAccessGatewayRequest, runtime: Util.RuntimeOptions): UpgradeSmartAccessGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.bandWidthSpec)) {
    query['BandWidthSpec'] = request.bandWidthSpec;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeSmartAccessGateway',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeSmartAccessGateway(request: UpgradeSmartAccessGatewayRequest): UpgradeSmartAccessGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeSmartAccessGatewayWithOptions(request, runtime);
}

model UpgradeSmartAccessGatewaySoftwareRequest {
  autoPay?: boolean(name='AutoPay'),
  dataPlan?: long(name='DataPlan'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smartAGId?: string(name='SmartAGId'),
  userCount?: int32(name='UserCount'),
}

model UpgradeSmartAccessGatewaySoftwareResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model UpgradeSmartAccessGatewaySoftwareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeSmartAccessGatewaySoftwareResponseBody(name='body'),
}

async function upgradeSmartAccessGatewaySoftwareWithOptions(request: UpgradeSmartAccessGatewaySoftwareRequest, runtime: Util.RuntimeOptions): UpgradeSmartAccessGatewaySoftwareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.dataPlan)) {
    query['DataPlan'] = request.dataPlan;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.smartAGId)) {
    query['SmartAGId'] = request.smartAGId;
  }
  if (!Util.isUnset(request.userCount)) {
    query['UserCount'] = request.userCount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeSmartAccessGatewaySoftware',
    version = '2018-03-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeSmartAccessGatewaySoftware(request: UpgradeSmartAccessGatewaySoftwareRequest): UpgradeSmartAccessGatewaySoftwareResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeSmartAccessGatewaySoftwareWithOptions(request, runtime);
}

