/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'OpenPlatform';
  @version = '2019-12-19';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AuthorizeFileUploadRequest {
  product: string(name='Product', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model AuthorizeFileUploadResponseBody = {
  accessKeyId?: string(name='AccessKeyId'),
  bucket?: string(name='Bucket'),
  encodedPolicy?: string(name='EncodedPolicy'),
  endpoint?: string(name='Endpoint'),
  objectKey?: string(name='ObjectKey'),
  requestId?: string(name='RequestId'),
  signature?: string(name='Signature'),
  useAccelerate?: boolean(name='UseAccelerate'),
}

model AuthorizeFileUploadResponse = {
  headers: map[string]string(name='headers'),
  body: AuthorizeFileUploadResponseBody(name='body'),
}

async function authorizeFileUpload(request: AuthorizeFileUploadRequest): AuthorizeFileUploadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeFileUpload', 'GET', '/', 'json', false, 'json', request);
}

