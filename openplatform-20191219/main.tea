import Util;

import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('openplatform', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model AuthorizeFileUploadRequest = {
  product: string(name='Product'),
  regionId?: string(name='RegionId'),
}

model AuthorizeFileUploadResponse = {
  accessKeyId: string(name='AccessKeyId'),
  bucket: string(name='Bucket'),
  encodedPolicy: string(name='EncodedPolicy'),
  endpoint: string(name='Endpoint'),
  objectKey: string(name='ObjectKey'),
  requestId: string(name='RequestId'),
  signature: string(name='Signature'),
  useAccelerate: boolean(name='UseAccelerate'),
}

async function authorizeFileUploadWithOptions(request: AuthorizeFileUploadRequest, runtime: Util.RuntimeOptions): AuthorizeFileUploadResponse {
  Util.validateModel(request);
  return doRequest('AuthorizeFileUpload', 'HTTPS', 'GET', '2019-12-19', 'AK', request, null, runtime);
}

async function authorizeFileUpload(request: AuthorizeFileUploadRequest): AuthorizeFileUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  return authorizeFileUploadWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}