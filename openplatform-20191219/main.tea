import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint(@productId, @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model AuthorizeFileUploadRequest = {
  product: string(name='Product', description='product'),
  regionId?: string(name='RegionId', description='regionId'),
}

model AuthorizeFileUploadResponse = {
  accessKeyId: string(name='AccessKeyId', description='data.accessKeyId'),
  bucket: string(name='Bucket', description='data.bucket'),
  encodedPolicy: string(name='EncodedPolicy', description='data.encodedPolicy'),
  endpoint: string(name='Endpoint', description='data.endpoint'),
  objectKey: string(name='ObjectKey', description='data.objectKey'),
  requestId: string(name='RequestId', description='requestId'),
  signature: string(name='Signature', description='data.signature'),
  useAccelerate: boolean(name='UseAccelerate', description='data.useAccelerate'),
}

async function authorizeFileUpload(request: AuthorizeFileUploadRequest, runtime: Util.RuntimeOptions): AuthorizeFileUploadResponse {
  Util.validateModel(request);
  return doRequest('AuthorizeFileUpload', 'HTTPS', 'GET', '2019-12-19', 'AK', request, null, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
