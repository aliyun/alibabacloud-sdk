/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ledgerdb';
  @version = '2019-11-22';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AcceptMemberRequest {
  keyType?: string(name='KeyType', position='Body'),
  ledgerId: string(name='LedgerId', position='Body'),
  publicKey?: string(name='PublicKey', position='Body'),
}

model AcceptMemberResponseBody = {
  memberId?: string(name='MemberId'),
  requestId?: string(name='RequestId'),
}

model AcceptMemberResponse = {
  headers: map[string]string(name='headers'),
  body: AcceptMemberResponseBody(name='body'),
}

async function acceptMember(request: AcceptMemberRequest): AcceptMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AcceptMember', 'POST', '/', 'json', true, 'form', request);
}

model CreateVpcEndpointRequest {
  clientToken?: string(name='ClientToken', position='Body'),
  ledgerId: string(name='LedgerId', position='Body'),
  vSwitchId: string(name='VSwitchId', position='Body'),
  vpcId: string(name='VpcId', position='Body'),
}

model CreateVpcEndpointResponseBody = {
  requestId?: string(name='RequestId'),
  vpcEndpointId?: string(name='VpcEndpointId'),
}

model CreateVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpcEndpointResponseBody(name='body'),
}

async function createVpcEndpoint(request: CreateVpcEndpointRequest): CreateVpcEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpcEndpoint', 'POST', '/', 'json', true, 'form', request);
}

model DeleteLedgerRequest {
  ledgerId: string(name='LedgerId', position='Query'),
}

model DeleteLedgerResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLedgerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLedgerResponseBody(name='body'),
}

async function deleteLedger(request: DeleteLedgerRequest): DeleteLedgerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLedger', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMemberRequest {
  ledgerId: string(name='LedgerId', position='Query'),
  memberId: string(name='MemberId', position='Query'),
}

model DeleteMemberResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteMemberResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMemberResponseBody(name='body'),
}

async function deleteMember(request: DeleteMemberRequest): DeleteMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMember', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpcEndpointRequest {
  ledgerId: string(name='LedgerId', position='Query'),
  vSwitchId: string(name='VSwitchId', position='Query'),
  vpcEndpointId: string(name='VpcEndpointId', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
}

model DeleteVpcEndpointResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVpcEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpcEndpointResponseBody(name='body'),
}

async function deleteVpcEndpoint(request: DeleteVpcEndpointRequest): DeleteVpcEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpcEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLedgerRequest {
  ledgerId: string(name='LedgerId', position='Query'),
}

model DescribeLedgerResponseBody = {
  ledger?: {
    createTime?: string(name='CreateTime'),
    journalCount?: long(name='JournalCount'),
    lastTimeAnchor?: {
      journalId?: string(name='JournalId'),
      ledgerDigest?: string(name='LedgerDigest'),
      ledgerDigestType?: string(name='LedgerDigestType'),
      ledgerVersion?: string(name='LedgerVersion'),
      proof?: string(name='Proof'),
      timeStamp?: string(name='TimeStamp'),
    }(name='LastTimeAnchor'),
    ledgerDescription?: string(name='LedgerDescription'),
    ledgerId?: string(name='LedgerId'),
    ledgerName?: string(name='LedgerName'),
    ledgerStatus?: string(name='LedgerStatus'),
    ledgerType?: string(name='LedgerType'),
    memberCount?: long(name='MemberCount'),
    ownerAliUid?: string(name='OwnerAliUid'),
    regionId?: string(name='RegionId'),
    storageClass?: string(name='StorageClass'),
    timeAnchorCount?: long(name='TimeAnchorCount'),
    updateTime?: string(name='UpdateTime'),
    zoneId?: string(name='ZoneId'),
  }(name='Ledger'),
  requestId?: string(name='RequestId'),
}

model DescribeLedgerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLedgerResponseBody(name='body'),
}

async function describeLedger(request: DescribeLedgerRequest): DescribeLedgerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLedger', 'GET', '/', 'json', false, 'json', request);
}

model DescribeLedgersRequest {
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
}

model DescribeLedgersResponseBody = {
  ledgers?: [ 
    {
      createTime?: string(name='CreateTime'),
      journalCount?: long(name='JournalCount'),
      lastTimeAnchor?: {
        journalId?: string(name='JournalId'),
        ledgerDigest?: string(name='LedgerDigest'),
        ledgerDigestType?: string(name='LedgerDigestType'),
        ledgerVersion?: string(name='LedgerVersion'),
        proof?: string(name='Proof'),
        timeStamp?: string(name='TimeStamp'),
      }(name='LastTimeAnchor'),
      ledgerDescription?: string(name='LedgerDescription'),
      ledgerId?: string(name='LedgerId'),
      ledgerName?: string(name='LedgerName'),
      ledgerStatus?: string(name='LedgerStatus'),
      ledgerType?: string(name='LedgerType'),
      memberCount?: long(name='MemberCount'),
      ownerAliUid?: string(name='OwnerAliUid'),
      regionId?: string(name='RegionId'),
      storageClass?: string(name='StorageClass'),
      timeAnchorCount?: long(name='TimeAnchorCount'),
      updateTime?: string(name='UpdateTime'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Ledgers'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeLedgersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLedgersResponseBody(name='body'),
}

async function describeLedgers(request: DescribeLedgersRequest): DescribeLedgersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLedgers', 'GET', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeRegionsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTSARequest {
  sequenceWithinLedger: long(name='SequenceWithinLedger', minimum=1, maximum=1844674407370955161, position='Query'),
}

model DescribeTSAResponseBody = {
  requestId?: string(name='RequestId'),
  TSADetail?: {
    blockNumber?: long(name='BlockNumber'),
    CTSR?: string(name='CTSR'),
    rootHash?: string(name='RootHash'),
    SN?: string(name='SN'),
    TS?: long(name='TS'),
  }(name='TSADetail'),
}

model DescribeTSAResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTSAResponseBody(name='body'),
}

async function describeTSA(request: DescribeTSARequest): DescribeTSAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTSA', 'POST', '/', 'json', false, 'json', request);
}

model DisableMemberRequest {
  ledgerId: string(name='LedgerId', position='Body'),
  memberId: string(name='MemberId', position='Body'),
}

model DisableMemberResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableMemberResponse = {
  headers: map[string]string(name='headers'),
  body: DisableMemberResponseBody(name='body'),
}

async function disableMember(request: DisableMemberRequest): DisableMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableMember', 'POST', '/', 'json', true, 'form', request);
}

model EnableMemberRequest {
  ledgerId: string(name='LedgerId', position='Body'),
  memberId: string(name='MemberId', position='Body'),
}

model EnableMemberResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableMemberResponse = {
  headers: map[string]string(name='headers'),
  body: EnableMemberResponseBody(name='body'),
}

async function enableMember(request: EnableMemberRequest): EnableMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableMember', 'POST', '/', 'json', true, 'form', request);
}

model GetAccessAttributeRequest {
  ledgerId: string(name='LedgerId', position='Query'),
}

model GetAccessAttributeResponseBody = {
  enableOpenAccess?: string(name='EnableOpenAccess'),
  ledgerId?: string(name='LedgerId'),
  openUri?: string(name='OpenUri'),
  requestId?: string(name='RequestId'),
}

model GetAccessAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccessAttributeResponseBody(name='body'),
}

async function getAccessAttribute(request: GetAccessAttributeRequest): GetAccessAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccessAttribute', 'GET', '/', 'json', false, 'json', request);
}

model GetIpWhiteListRequest {
  ledgerId: string(name='LedgerId', position='Query'),
}

model GetIpWhiteListResponseBody = {
  ipList?: string(name='IpList'),
  ledgerId?: string(name='LedgerId'),
  requestId?: string(name='RequestId'),
}

model GetIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: GetIpWhiteListResponseBody(name='body'),
}

async function getIpWhiteList(request: GetIpWhiteListRequest): GetIpWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIpWhiteList', 'GET', '/', 'json', false, 'json', request);
}

model GetJournalRequest {
  journalId: long(name='JournalId', position='Query'),
  ledgerId: string(name='LedgerId', position='Query'),
}

model GetJournalResponseBody = {
  journal?: {
    clientId?: string(name='ClientId'),
    clues?: [ string ](name='Clues'),
    journalHash?: string(name='JournalHash'),
    journalId?: string(name='JournalId'),
    ledgerId?: string(name='LedgerId'),
    memberId?: string(name='MemberId'),
    payloadJsonString?: string(name='PayloadJsonString'),
    payloadType?: string(name='PayloadType'),
    timestamp?: long(name='Timestamp'),
  }(name='Journal'),
  requestId?: string(name='RequestId'),
}

model GetJournalResponse = {
  headers: map[string]string(name='headers'),
  body: GetJournalResponseBody(name='body'),
}

async function getJournal(request: GetJournalRequest): GetJournalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJournal', 'GET', '/', 'json', false, 'json', request);
}

model GetJournalProofRequest {
  journalSequence: long(name='JournalSequence', position='Query'),
  ledgerId: string(name='LedgerId', position='Query'),
}

model GetJournalProofResponseBody = {
  journalSequence?: long(name='JournalSequence'),
  ledgerId?: string(name='LedgerId'),
  proofPath?: string(name='ProofPath'),
  requestId?: string(name='RequestId'),
  rootHash?: string(name='RootHash'),
  writerPubKey?: string(name='WriterPubKey'),
}

model GetJournalProofResponse = {
  headers: map[string]string(name='headers'),
  body: GetJournalProofResponseBody(name='body'),
}

async function getJournalProof(request: GetJournalProofRequest): GetJournalProofResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJournalProof', 'GET', '/', 'json', false, 'json', request);
}

model GetMemberRequest {
  ledgerId: string(name='LedgerId', position='Query'),
  memberId: string(name='MemberId', position='Query'),
}

model GetMemberResponseBody = {
  aliUid?: string(name='AliUid'),
  createTime?: long(name='CreateTime'),
  KMSKeyId?: string(name='KMSKeyId'),
  KMSKeyVersion?: string(name='KMSKeyVersion'),
  keyMeta?: string(name='KeyMeta'),
  keySource?: string(name='KeySource'),
  keyType?: string(name='KeyType'),
  ledgerId?: string(name='LedgerId'),
  memberId?: string(name='MemberId'),
  publicKey?: string(name='PublicKey'),
  requestId?: string(name='RequestId'),
  role?: string(name='Role'),
  state?: string(name='State'),
  updateTime?: long(name='UpdateTime'),
}

model GetMemberResponse = {
  headers: map[string]string(name='headers'),
  body: GetMemberResponseBody(name='body'),
}

async function getMember(request: GetMemberRequest): GetMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMember', 'GET', '/', 'json', false, 'json', request);
}

model GrantServiceLinkedRoleRequest {
  ledgerId: string(name='LedgerId', position='Query'),
}

model GrantServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId'),
  SLRStatus?: string(name='SLRStatus'),
}

model GrantServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: GrantServiceLinkedRoleResponseBody(name='body'),
}

async function grantServiceLinkedRole(request: GrantServiceLinkedRoleRequest): GrantServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model InviteMembersRequest {
  aliUids: string(name='AliUids', position='Body'),
  ledgerId: string(name='LedgerId', position='Body'),
}

model InviteMembersResponseBody = {
  requestId?: string(name='RequestId'),
}

model InviteMembersResponse = {
  headers: map[string]string(name='headers'),
  body: InviteMembersResponseBody(name='body'),
}

async function inviteMembers(request: InviteMembersRequest): InviteMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InviteMembers', 'POST', '/', 'json', true, 'form', request);
}

model ListJournalsRequest {
  clue?: string(name='Clue', position='Query'),
  ledgerId: string(name='LedgerId', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  memberId?: string(name='MemberId', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  reverse?: boolean(name='Reverse', position='Query'),
}

model ListJournalsResponseBody = {
  journals?: [ 
    {
      clientId?: string(name='ClientId'),
      clues?: [ string ](name='Clues'),
      journalHash?: string(name='JournalHash'),
      journalId?: string(name='JournalId'),
      ledgerId?: string(name='LedgerId'),
      memberId?: string(name='MemberId'),
      payloadJsonString?: string(name='PayloadJsonString'),
      payloadType?: string(name='PayloadType'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Journals'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListJournalsResponse = {
  headers: map[string]string(name='headers'),
  body: ListJournalsResponseBody(name='body'),
}

async function listJournals(request: ListJournalsRequest): ListJournalsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListJournals', 'GET', '/', 'json', false, 'json', request);
}

model ListMembersRequest {
  ledgerId: string(name='LedgerId', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
}

model ListMembersResponseBody = {
  maxResults?: int32(name='MaxResults'),
  members?: [ 
    {
      aliUid?: string(name='AliUid'),
      createTime?: long(name='CreateTime'),
      keyType?: string(name='KeyType'),
      ledgerId?: string(name='LedgerId'),
      memberId?: string(name='MemberId'),
      publicKey?: string(name='PublicKey'),
      role?: string(name='Role'),
      state?: string(name='State'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='Members'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListMembersResponse = {
  headers: map[string]string(name='headers'),
  body: ListMembersResponseBody(name='body'),
}

async function listMembers(request: ListMembersRequest): ListMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMembers', 'GET', '/', 'json', false, 'json', request);
}

model ListTimeAnchorsRequest {
  ledgerId: string(name='LedgerId', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  reverse?: boolean(name='Reverse', position='Query'),
}

model ListTimeAnchorsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  timeAnchors?: [ 
    {
      journalId?: long(name='JournalId'),
      ledgerDigest?: string(name='LedgerDigest'),
      ledgerDigestType?: string(name='LedgerDigestType'),
      ledgerVersion?: long(name='LedgerVersion'),
      proof?: string(name='Proof'),
      timeStamp?: long(name='TimeStamp'),
    }
  ](name='TimeAnchors'),
}

model ListTimeAnchorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTimeAnchorsResponseBody(name='body'),
}

async function listTimeAnchors(request: ListTimeAnchorsRequest): ListTimeAnchorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTimeAnchors', 'GET', '/', 'json', false, 'json', request);
}

model ListVpcEndpointsRequest {
  ledgerId: string(name='LedgerId', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
}

model ListVpcEndpointsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  vpcEndpoints?: [ 
    {
      address?: string(name='Address'),
      createTime?: long(name='CreateTime'),
      ledgerId?: string(name='LedgerId'),
      memberId?: string(name='MemberId'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      vSwitchId?: string(name='VSwitchId'),
      vpcEndpointId?: string(name='VpcEndpointId'),
      vpcId?: string(name='VpcId'),
    }
  ](name='VpcEndpoints'),
}

model ListVpcEndpointsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcEndpointsResponseBody(name='body'),
}

async function listVpcEndpoints(request: ListVpcEndpointsRequest): ListVpcEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpcEndpoints', 'GET', '/', 'json', false, 'json', request);
}

model ModifyAccessAttributeRequest {
  enableOpenAccess: boolean(name='EnableOpenAccess', position='Body'),
  ledgerId: string(name='LedgerId', position='Body'),
}

model ModifyAccessAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccessAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccessAttributeResponseBody(name='body'),
}

async function modifyAccessAttribute(request: ModifyAccessAttributeRequest): ModifyAccessAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccessAttribute', 'POST', '/', 'json', true, 'form', request);
}

model ModifyIpWhiteListRequest {
  ipList: string(name='IpList', position='Body'),
  ledgerId: string(name='LedgerId', position='Body'),
  modifyType: string(name='ModifyType', position='Body'),
}

model ModifyIpWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIpWhiteListResponseBody(name='body'),
}

async function modifyIpWhiteList(request: ModifyIpWhiteListRequest): ModifyIpWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIpWhiteList', 'POST', '/', 'json', true, 'form', request);
}

model ModifyLedgerAttributeRequest {
  ledgerDescription?: string(name='LedgerDescription', position='Body'),
  ledgerId: string(name='LedgerId', position='Body'),
  ledgerName?: string(name='LedgerName', position='Body'),
}

model ModifyLedgerAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLedgerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLedgerAttributeResponseBody(name='body'),
}

async function modifyLedgerAttribute(request: ModifyLedgerAttributeRequest): ModifyLedgerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLedgerAttribute', 'POST', '/', 'json', true, 'form', request);
}

model ModifyMemberACLsRequest {
  ledgerId: string(name='LedgerId', position='Body'),
  memberId: string(name='MemberId', position='Body'),
  role: string(name='Role', position='Body'),
}

model ModifyMemberACLsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyMemberACLsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyMemberACLsResponseBody(name='body'),
}

async function modifyMemberACLs(request: ModifyMemberACLsRequest): ModifyMemberACLsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyMemberACLs', 'POST', '/', 'json', true, 'form', request);
}

model ModifyMemberKeyRequest {
  keyType?: string(name='KeyType', position='Body'),
  ledgerId: string(name='LedgerId', position='Body'),
  memberId: string(name='MemberId', position='Body'),
  publicKey: string(name='PublicKey', position='Body'),
}

model ModifyMemberKeyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyMemberKeyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyMemberKeyResponseBody(name='body'),
}

async function modifyMemberKey(request: ModifyMemberKeyRequest): ModifyMemberKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyMemberKey', 'POST', '/', 'json', true, 'form', request);
}

model UpdateMemberKeyByKMSRequest {
  KMSKeyId: string(name='KMSKeyId', position='Body'),
  KMSKeyVersion?: string(name='KMSKeyVersion', position='Body'),
  keyType?: string(name='KeyType', position='Body'),
  ledgerId: string(name='LedgerId', position='Body'),
  memberId: string(name='MemberId', position='Body'),
}

model UpdateMemberKeyByKMSResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateMemberKeyByKMSResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateMemberKeyByKMSResponseBody(name='body'),
}

async function updateMemberKeyByKMS(request: UpdateMemberKeyByKMSRequest): UpdateMemberKeyByKMSResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMemberKeyByKMS', 'POST', '/', 'json', true, 'form', request);
}

