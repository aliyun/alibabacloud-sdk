/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'dataworks-public';
  @version = '2024-05-18';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'dataworks.ap-northeast-1.aliyuncs.com',
    'ap-south-1' = 'dataworks.ap-south-1.aliyuncs.com',
    'ap-southeast-1' = 'dataworks.ap-southeast-1.aliyuncs.com',
    'ap-southeast-2' = 'dataworks.ap-southeast-2.aliyuncs.com',
    'ap-southeast-3' = 'dataworks.ap-southeast-3.aliyuncs.com',
    'ap-southeast-5' = 'dataworks.ap-southeast-5.aliyuncs.com',
    'cn-beijing' = 'dataworks.cn-beijing.aliyuncs.com',
    'cn-chengdu' = 'dataworks.cn-chengdu.aliyuncs.com',
    'cn-hangzhou' = 'dataworks.cn-hangzhou.aliyuncs.com',
    'cn-hongkong' = 'dataworks.cn-hongkong.aliyuncs.com',
    'cn-huhehaote' = 'dataworks.aliyuncs.com',
    'cn-qingdao' = 'dataworks.aliyuncs.com',
    'cn-shanghai' = 'dataworks.cn-shanghai.aliyuncs.com',
    'cn-shenzhen' = 'dataworks.cn-shenzhen.aliyuncs.com',
    'cn-zhangjiakou' = 'dataworks.aliyuncs.com',
    'eu-central-1' = 'dataworks.eu-central-1.aliyuncs.com',
    'eu-west-1' = 'dataworks.eu-west-1.aliyuncs.com',
    'me-east-1' = 'dataworks.me-east-1.aliyuncs.com',
    'us-east-1' = 'dataworks.us-east-1.aliyuncs.com',
    'us-west-1' = 'dataworks.us-west-1.aliyuncs.com',
    'cn-hangzhou-finance' = 'dataworks.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'dataworks.aliyuncs.com',
    'cn-shanghai-finance-1' = 'dataworks.aliyuncs.com',
    'cn-north-2-gov-1' = 'dataworks.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AbolishDeploymentRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='1606087c-9ac4-43f0-83a8-0b5ced21XXXX', position='Body'),
  projectId: string(name='ProjectId', example='10000', position='Body'),
}

model AbolishDeploymentResponseBody = {
  requestId?: string(name='RequestId', example='55D786C9-DD57-524D-884C-C5239278XXXX'),
  success?: boolean(name='Success', example='true'),
}

model AbolishDeploymentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AbolishDeploymentResponseBody(name='body'),
}

async function abolishDeployment(request: AbolishDeploymentRequest): AbolishDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AbolishDeployment', 'POST', '/', 'json', true, 'form', request);
}

model CreateDeploymentRequest {
  regionId?: string(name='RegionId', description='区域id', position='Host'),
  description?: string(name='Description', position='Body'),
  objectIds: [ string ](name='ObjectIds', shrink='json', position='Body'),
  projectId: string(name='ProjectId', description='项目Id', example='10000', position='Body'),
  type: string(name='Type', example='Online', position='Body'),
}

model CreateDeploymentResponseBody = {
  id?: string(name='Id', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX'),
  requestId?: string(name='RequestId', example='7C352CB7-CD88-50CF-9D0D-E81BDF02XXXX'),
}

model CreateDeploymentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDeploymentResponseBody(name='body'),
}

async function createDeployment(request: CreateDeploymentRequest): CreateDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDeployment', 'POST', '/', 'json', true, 'form', request);
}

model CreateFunctionRequest {
  regionId?: string(name='RegionId', position='Host'),
  projectId: string(name='ProjectId', example='12345', position='Body'),
  spec: string(name='Spec', position='Body'),
}

model CreateFunctionResponseBody = {
  id?: string(name='Id', example='580667964888595XXXX'),
  requestId?: string(name='RequestId', example='AE49C88D-5BEE-5ADD-8B8C-C4BBC0D7XXXX'),
}

model CreateFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFunctionResponseBody(name='body'),
}

async function createFunction(request: CreateFunctionRequest): CreateFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFunction', 'POST', '/', 'json', true, 'form', request);
}

model CreateNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  containerId?: string(name='ContainerId', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX', position='Body'),
  projectId: string(name='ProjectId', example='123456', position='Body'),
  scene: string(name='Scene', example='DATAWORKS_PROJECT', position='Body'),
  spec: string(name='Spec', position='Body'),
}

model CreateNodeResponseBody = {
  id?: string(name='Id', example='860438872620113XXXX'),
  requestId?: string(name='RequestId', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
}

model CreateNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNodeResponseBody(name='body'),
}

async function createNode(request: CreateNodeRequest): CreateNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNode', 'POST', '/', 'json', true, 'form', request);
}

model CreateResourceRequest {
  regionId?: string(name='RegionId', description='代表region的资源属性字段', position='Host'),
  projectId: string(name='ProjectId', description='资源文件的项目id', example='123456', position='Body'),
  spec: string(name='Spec', position='Body'),
}

model CreateResourceResponseBody = {
  id?: string(name='Id', example='631478864897630XXXX'),
  requestId?: string(name='RequestId', example='A5B97987-66EA-5563-9599-A2752292XXXX'),
}

model CreateResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceResponseBody(name='body'),
}

async function createResource(request: CreateResourceRequest): CreateResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateResource', 'POST', '/', 'json', true, 'form', request);
}

model CreateWorkflowDefinitionRequest {
  regionId?: string(name='RegionId', position='Host'),
  projectId: string(name='ProjectId', example='10000', position='Body'),
  spec: string(name='Spec', position='Body'),
}

model CreateWorkflowDefinitionResponseBody = {
  id?: string(name='Id', example='463497880880954XXXX'),
  requestId?: string(name='RequestId', example='0EF298E5-0940-5AC7-9CB0-65025070XXXX'),
}

model CreateWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkflowDefinitionResponseBody(name='body'),
}

async function createWorkflowDefinition(request: CreateWorkflowDefinitionRequest): CreateWorkflowDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWorkflowDefinition', 'POST', '/', 'json', true, 'form', request);
}

model DeleteFunctionRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='860438872620113XXXX', position='Body'),
  projectId: string(name='ProjectId', example='10000', position='Body'),
}

model DeleteFunctionResponseBody = {
  requestId?: string(name='RequestId', example='88198F19-A36B-52A9-AE44-4518A688XXXX'),
  success?: boolean(name='Success', example='true'),
}

model DeleteFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFunctionResponseBody(name='body'),
}

async function deleteFunction(request: DeleteFunctionRequest): DeleteFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFunction', 'POST', '/', 'json', true, 'form', request);
}

model DeleteNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='860438872620113XXXX', position='Body'),
  projectId: string(name='ProjectId', example='10000', position='Body'),
}

model DeleteNodeResponseBody = {
  requestId?: string(name='RequestId', example='A1E54497-5122-505E-91C6-BAC14980XXXX'),
  success?: boolean(name='Success', example='true'),
}

model DeleteNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNodeResponseBody(name='body'),
}

async function deleteNode(request: DeleteNodeRequest): DeleteNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNode', 'POST', '/', 'json', true, 'form', request);
}

model DeleteResourceRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='860438872620113XXXX', position='Body'),
  projectId: string(name='ProjectId', example='10000', position='Body'),
}

model DeleteResourceResponseBody = {
  requestId?: string(name='RequestId', example='88198F19-A36B-52A9-AE44-4518A688XXXX'),
  success?: boolean(name='Success', example='true'),
}

model DeleteResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceResponseBody(name='body'),
}

async function deleteResource(request: DeleteResourceRequest): DeleteResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteResource', 'POST', '/', 'json', true, 'form', request);
}

model DeleteWorkflowDefinitionRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='860438872620113XXXX', position='Body'),
  projectId: string(name='ProjectId', example='10000', position='Body'),
}

model DeleteWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', example='B17730C0-D959-548A-AE23-E754177CXXXX'),
  success?: boolean(name='Success', example='true'),
}

model DeleteWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkflowDefinitionResponseBody(name='body'),
}

async function deleteWorkflowDefinition(request: DeleteWorkflowDefinitionRequest): DeleteWorkflowDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWorkflowDefinition', 'POST', '/', 'json', true, 'form', request);
}

model ExecDeploymentStageRequest {
  regionId?: string(name='RegionId', position='Host'),
  code: string(name='Code', example='DEV_CHECK', position='Body'),
  id: string(name='Id', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX', position='Body'),
  projectId: string(name='ProjectId', example='10000', position='Query'),
}

model ExecDeploymentStageResponseBody = {
  requestId?: string(name='RequestId', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
  success?: boolean(name='Success', example='true'),
}

model ExecDeploymentStageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecDeploymentStageResponseBody(name='body'),
}

async function execDeploymentStage(request: ExecDeploymentStageRequest): ExecDeploymentStageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecDeploymentStage', 'POST', '/', 'json', true, 'form', request);
}

model GetDeploymentRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX', position='Query'),
  projectId: string(name='ProjectId', example='10000', position='Query'),
}

model GetDeploymentResponseBody = {
  pipeline?: {
    createTime?: long(name='CreateTime', description='发布包创建时间戳', example='1724984066000'),
    creator?: string(name='Creator', description='创建人', example='137946317766XXXX'),
    id?: string(name='Id', description='发布流程Id', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX'),
    message?: string(name='Message'),
    modifyTime?: long(name='ModifyTime', description='修改时间', example='1724984066000'),
    projectId?: string(name='ProjectId', example='56160'),
    stages?: [ 
      {
        code?: string(name='Code', description='阶段代号', example='DEV_CHECK'),
        description?: string(name='Description', description='阶段描述'),
        detail?: map[string]any(name='Detail'),
        message?: string(name='Message', description='阶段信息'),
        name?: string(name='Name', description='阶段名称'),
        status?: string(name='Status', description='阶段状态', example='INIT'),
        step?: int32(name='Step', description='步骤', example='1'),
        type?: string(name='Type', description='阶段类型', example='BUILD'),
      }
    ](name='Stages', description='步骤详情'),
    status?: string(name='Status', description='发布流程状态', example='RUNNING'),
  }(name='Pipeline'),
  requestId?: string(name='RequestId', example='08468352-032C-5262-AEDC-68C9FA05XXXX'),
}

model GetDeploymentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeploymentResponseBody(name='body'),
}

async function getDeployment(request: GetDeploymentRequest): GetDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeployment', 'GET', '/', 'json', false, 'json', request);
}

model GetFunctionRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='860438872620113XXXX', position='Query'),
  projectId?: string(name='ProjectId', example='10000', position='Query'),
}

model GetFunctionResponseBody = {
  function?: {
    createTime?: long(name='CreateTime', example='1724505917000'),
    id?: string(name='Id', example='860438872620113XXXX'),
    modifyTime?: long(name='ModifyTime', example='1724506661000'),
    name?: string(name='Name'),
    owner?: string(name='Owner', example='110755000425XXXX'),
    projectId?: string(name='ProjectId', example='10000'),
    spec?: string(name='Spec'),
  }(name='Function'),
  requestId?: string(name='RequestId', example='6CF95929-6D12-5A88-8CC3-4B2F4C2EXXXX'),
}

model GetFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFunctionResponseBody(name='body'),
}

async function getFunction(request: GetFunctionRequest): GetFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFunction', 'GET', '/', 'json', false, 'json', request);
}

model GetNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='860438872620113XXXX', position='Query'),
  projectId?: string(name='ProjectId', example='10000', position='Query'),
}

model GetNodeResponseBody = {
  node?: {
    createTime?: long(name='CreateTime', example='1700539206000'),
    id?: string(name='Id', example='860438872620113XXXX'),
    modifyTime?: long(name='ModifyTime', example='1700539206000'),
    name?: string(name='Name'),
    owner?: string(name='Owner', example='196596664824XXXX'),
    projectId?: string(name='ProjectId', example='10000'),
    spec?: string(name='Spec'),
  }(name='Node'),
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model GetNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeResponseBody(name='body'),
}

async function getNode(request: GetNodeRequest): GetNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNode', 'GET', '/', 'json', false, 'json', request);
}

model GetResourceRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='860438872620113XXXX', position='Query'),
  projectId?: string(name='ProjectId', example='10000', position='Query'),
}

model GetResourceResponseBody = {
  requestId?: string(name='RequestId', example='E871F6C0-2EFF-5790-A00D-C57543EEXXXX'),
  resource?: {
    createTime?: long(name='CreateTime', example='1700539206000'),
    id?: string(name='Id', example='860438872620113XXXX'),
    modifyTime?: long(name='ModifyTime', example='1700539206000'),
    name?: string(name='Name'),
    owner?: string(name='Owner', example='110755000425XXXX'),
    projectId?: string(name='ProjectId', example='10000'),
    spec?: string(name='Spec'),
  }(name='Resource'),
}

model GetResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceResponseBody(name='body'),
}

async function getResource(request: GetResourceRequest): GetResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResource', 'GET', '/', 'json', false, 'json', request);
}

model GetWorkflowDefinitionRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='860438872620113XXXX', position='Query'),
  projectId?: string(name='ProjectId', example='10000', position='Query'),
}

model GetWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', example='F2BDD628-8A21-5BD1-B930-1A2D5989XXXX'),
  workflowDefinition?: {
    createTime?: long(name='CreateTime', example='1708481905000'),
    id?: string(name='Id', example='463497880880954XXXX'),
    modifyTime?: long(name='ModifyTime', example='1708481905000'),
    name?: string(name='Name'),
    owner?: string(name='Owner', example='110755000425XXXX'),
    projectId?: string(name='ProjectId', example='307XXX'),
    spec?: string(name='Spec'),
  }(name='WorkflowDefinition'),
}

model GetWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkflowDefinitionResponseBody(name='body'),
}

async function getWorkflowDefinition(request: GetWorkflowDefinitionRequest): GetWorkflowDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWorkflowDefinition', 'GET', '/', 'json', false, 'json', request);
}

model ListDeploymentsRequest {
  regionId?: string(name='RegionId', position='Host'),
  creator?: string(name='Creator', example='110755000425XXXX', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=100, position='Query'),
  projectId: string(name='ProjectId', example='10000', position='Query'),
  status?: string(name='Status', example='RUNNING', position='Query'),
}

model ListDeploymentsResponseBody = {
  pagingInfo?: {
    deployments?: [ 
      {
        createTime?: long(name='CreateTime', description='发布包创建时间戳', example='1702736654000'),
        creator?: string(name='Creator', description='创建人', example='110755000425XXXX'),
        id?: string(name='Id', description='发布流程Id', example='ddf354a5-03df-48fc-94c1-cc973f79XXXX'),
        message?: string(name='Message'),
        modifyTime?: long(name='ModifyTime', description='修改时间', example='1702736654000'),
        projectId?: string(name='ProjectId', description='项目Id', example='44683'),
        stages?: [ 
          {
            code?: string(name='Code', description='阶段代号', example='DEV_CHECK'),
            description?: string(name='Description', description='阶段描述'),
            detail?: map[string]any(name='Detail', description='阶段详细信息'),
            message?: string(name='Message', description='阶段信息'),
            name?: string(name='Name', description='阶段名称'),
            status?: string(name='Status', description='阶段状态', example='RUNNING'),
            step?: int32(name='Step', description='步骤', example='1'),
            type?: string(name='Type', description='阶段类型', example='CHECK'),
          }
        ](name='Stages', description='步骤详情'),
        status?: string(name='Status', description='发布流程状态', example='RUNNING'),
      }
    ](name='Deployments'),
    pageNumber?: string(name='PageNumber', example='1'),
    pageSize?: string(name='PageSize', example='10'),
    totalCount?: string(name='TotalCount', example='2524'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='7C352CB7-CD88-50CF-9D0D-E81BDF02XXXX'),
}

model ListDeploymentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeploymentsResponseBody(name='body'),
}

async function listDeployments(request: ListDeploymentsRequest): ListDeploymentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeployments', 'GET', '/', 'json', false, 'json', request);
}

model ListFunctionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  owner?: string(name='Owner', example='110755000425XXXX', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=100, position='Query'),
  projectId: string(name='ProjectId', example='12345', position='Query'),
  type?: string(name='Type', example='MATH', position='Query'),
}

model ListFunctionsResponseBody = {
  pagingInfo?: {
    functions?: [ 
      {
        armResource?: string(name='ArmResource', description='ARM集群资源文件列表', example='xxx.jar,yyy.jar'),
        className?: string(name='ClassName', description='函数实现类名', example='com.demo.Main'),
        commandDescription?: string(name='CommandDescription', description='命令描述', example='testUdf(xx,yy)'),
        createTime?: long(name='CreateTime', description='代表创建时间的资源属性字段', example='1655953028000'),
        dataSource?: {
          name?: string(name='Name', description='数据源名称', example='odps_first'),
          type?: string(name='Type', description='数据源类型', example='odps'),
        }(name='DataSource', description='函数注册到的数据源信息'),
        databaseName?: string(name='DatabaseName', description='数据库名，可选', example='odps_first'),
        description?: string(name='Description', description='对funciotn的描述'),
        embeddedCode?: string(name='EmbeddedCode', description='嵌套函数代码内容', example='print(\\"hello,world!\\")'),
        embeddedCodeType?: string(name='EmbeddedCodeType', description='嵌套代码类型', example='Python2'),
        embeddedResourceType?: string(name='EmbeddedResourceType', description='嵌套资源类型', example='File'),
        exampleDescription?: string(name='ExampleDescription', description='示例说明'),
        fileResource?: string(name='FileResource', description='函数的实现代码', example='xxx.jar,yyy.jar'),
        id?: string(name='Id', description='代表资源一级ID的资源属性字段', example='580667964888595XXXX'),
        modifyTime?: long(name='ModifyTime', description='修改时间', example='1655953028000'),
        name?: string(name='Name', description='代表资源名称的资源属性字段'),
        owner?: string(name='Owner', description='函数责任人', example='110755000425XXXX'),
        parameterDescription?: string(name='ParameterDescription', description='命令描述'),
        projectId?: string(name='ProjectId', description='项目Id', example='307XXX'),
        returnValueDescription?: string(name='ReturnValueDescription', description='返回值说明'),
        runtimeResource?: {
          resourceGroupId?: string(name='ResourceGroupId', description='运行时资源组Id', example='S_resgrop_xxx'),
        }(name='RuntimeResource', description='运行时资源组信息'),
        script?: {
          id?: string(name='Id', description='脚本的id', example='652567824470354XXXX'),
          path?: string(name='Path', description='脚本路径'),
          runtime?: {
            command?: string(name='Command', description='脚本所属类型', example='ODPS_FUNCTION'),
          }(name='Runtime', description='脚本的运行时信息'),
        }(name='Script', description='工作流的脚本信息'),
        type?: string(name='Type', description='函数类型', example='MATH'),
      }
    ](name='Functions'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='294'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='89FB2BF0-EB00-5D03-9C34-05931001XXXX'),
}

model ListFunctionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFunctionsResponseBody(name='body'),
}

async function listFunctions(request: ListFunctionsRequest): ListFunctionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFunctions', 'GET', '/', 'json', false, 'json', request);
}

model ListNodeDependenciesRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='860438872620113XXXX', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=100, position='Query'),
  projectId: string(name='ProjectId', example='10001', position='Query'),
}

model ListNodeDependenciesResponseBody = {
  pagingInfo?: {
    nodes?: [ 
      {
        createTime?: long(name='CreateTime', description='节点的创建时间', example='1724505917000'),
        dataSource?: {
          name?: string(name='Name', description='数据源名称', example='odps_first'),
          type?: string(name='Type', description='数据源类型', example='odps'),
        }(name='DataSource', description='数据源信息'),
        description?: string(name='Description', description='描述'),
        id?: string(name='Id', example='723932906364267XXXX'),
        inputs?: {
          nodeOutputs?: [ 
            {
              data?: string(name='Data', description='节点输出', example='860438872620113XXXX'),
            }
          ](name='NodeOutputs', description='节点输出列表'),
          tables?: [ 
            {
              guid?: string(name='Guid', description='表id', example='odps.autotest.test_output_table_1'),
            }
          ](name='Tables', description='表列表'),
          variables?: [ 
            {
              artifactType?: string(name='ArtifactType', description='制品类型', example='Variable'),
              id?: string(name='Id', description='变量id', example='543218872620113XXXX'),
              name?: string(name='Name', description='变量名', example='input'),
              node?: {
                output?: string(name='Output', description='节点输出', example='860438872620113XXXX'),
              }(name='Node', description='变量所属节点'),
              scope?: string(name='Scope', description='范围', example='NodeParameter'),
              type?: string(name='Type', description='类型', example='Constant'),
              value?: string(name='Value', description='变量值', example='111'),
            }
          ](name='Variables', description='变量列表'),
        }(name='Inputs', description='节点输入'),
        modifyTime?: long(name='ModifyTime', description='属性修改时间', example='1724505917000'),
        name?: string(name='Name', description='节点名'),
        outputs?: {
          nodeOutputs?: [ 
            {
              data?: string(name='Data', description='节点输出', example='463497880880954XXXX'),
            }
          ](name='NodeOutputs', description='节点输出列表'),
          tables?: [ 
            {
              guid?: string(name='Guid', description='表id', example='odps.autotest.test_output_table_1'),
            }
          ](name='Tables', description='表列表'),
          variables?: [ 
            {
              artifactType?: string(name='ArtifactType', description='制品类型', example='Variable'),
              id?: string(name='Id', description='变量id', example='543217824470354XXXX'),
              name?: string(name='Name', description='变量名', example='output'),
              node?: {
                output?: string(name='Output', description='节点输出', example='463497880880954XXXX'),
              }(name='Node', description='变量所属节点'),
              scope?: string(name='Scope', description='范围', example='NodeParameter'),
              type?: string(name='Type', description='类型', example='Constant'),
              value?: string(name='Value', description='变量值', example='111'),
            }
          ](name='Variables', description='变量列表'),
        }(name='Outputs', description='节点输出'),
        owner?: string(name='Owner', description='节点的责任人', example='110755000425XXXX'),
        projectId?: string(name='ProjectId', example='65133'),
        recurrence?: string(name='Recurrence', example='Normal'),
        runtimeResource?: {
          resourceGroupId?: string(name='ResourceGroupId', description='资源组id', example='S_res_group_XXXX_XXXX'),
        }(name='RuntimeResource', description='资源组信息'),
        script?: {
          id?: string(name='Id', description='脚本的id', example='853573334108680XXXX'),
          path?: string(name='Path', description='脚本路径', example='root/demo'),
          runtime?: {
            command?: string(name='Command', description='脚本所属类型', example='ODPS_SQL'),
          }(name='Runtime', description='脚本的运行时信息'),
        }(name='Script', description='工作流的脚本信息'),
        strategy?: {
          instanceMode?: string(name='InstanceMode', description='生成实例的模式', example='T+1'),
          rerunInterval?: int32(name='RerunInterval', description='重试时间间隔', example='180000'),
          rerunMode?: string(name='RerunMode', description='允许重跑的模式', example='Allowed'),
          rerunTimes?: int32(name='RerunTimes', description='重试次数', example='3'),
          timeout?: int32(name='Timeout', description='超时时间', example='0'),
        }(name='Strategy', description='调度策略'),
        tags?: [ 
          {
            key?: string(name='Key', description='标签键', example='null'),
            value?: string(name='Value', description='标签值', example='null'),
          }
        ](name='Tags', description='标签信息'),
        taskId?: string(name='TaskId', description='调度任务Id', example='580667964888595XXXX'),
        trigger?: {
          cron?: string(name='Cron', description='触发器的cron表达式', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', description='结束时间，格式为yyyy-MM-dd HH:mm:ss', example='9999-01-01 00:00:00'),
          id?: string(name='Id', description='触发器id', example='543680677872062XXXX'),
          startTime?: string(name='StartTime', description='开始时间，格式为yyyy-MM-dd HH:mm:ss', example='1970-01-01 00:00:00'),
          timezone?: string(name='Timezone', description='时区', example='Asia/Shanghai'),
          type?: string(name='Type', description='触发器类型', example='Scheduler'),
        }(name='Trigger', description='触发器信息'),
      }
    ](name='Nodes'),
    pageNumber?: string(name='PageNumber', example='1'),
    pageSize?: string(name='PageSize', example='10'),
    totalCount?: string(name='TotalCount', example='90'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='204EAF68-CCE3-5112-8DA0-E7A60F02XXXX'),
}

model ListNodeDependenciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodeDependenciesResponseBody(name='body'),
}

async function listNodeDependencies(request: ListNodeDependenciesRequest): ListNodeDependenciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodeDependencies', 'GET', '/', 'json', false, 'json', request);
}

model ListNodesRequest {
  regionId?: string(name='RegionId', position='Host'),
  containerId?: string(name='ContainerId', example='860438872620113XXXX', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=100, position='Query'),
  projectId: string(name='ProjectId', example='12345', position='Query'),
  rerunMode?: string(name='RerunMode', example='Allowed', position='Query'),
  rerurrence?: string(name='Rerurrence', example='Normal', position='Query'),
  scene?: string(name='Scene', example='DATAWORKS_PROJECT', position='Query'),
}

model ListNodesResponseBody = {
  pagingInfo?: {
    nodes?: [ 
      {
        createTime?: long(name='CreateTime', description='节点的创建时间', example='1722910655000'),
        dataSource?: {
          name?: string(name='Name', description='数据源名称', example='odps_first'),
          type?: string(name='Type', description='数据源类型', example='odps'),
        }(name='DataSource', description='数据源信息'),
        description?: string(name='Description', description='描述'),
        id?: string(name='Id', example='860438872620113XXXX'),
        inputs?: {
          nodeOutputs?: [ 
            {
              data?: string(name='Data', description='节点输出', example='623731286945488XXXX'),
            }
          ](name='NodeOutputs', description='节点输出列表'),
          tables?: [ 
            {
              guid?: string(name='Guid', description='表id', example='odps.autotest.test_output_table_1'),
            }
          ](name='Tables', description='表列表'),
          variables?: [ 
            {
              artifactType?: string(name='ArtifactType', description='制品类型', example='Variable'),
              id?: string(name='Id', description='变量id', example='543211286945488XXXX'),
              name?: string(name='Name', description='变量名', example='input'),
              node?: {
                output?: string(name='Output', description='节点输出', example='623731286945488XXXX'),
              }(name='Node', description='变量所属节点'),
              scope?: string(name='Scope', description='范围', example='NodeParameter'),
              type?: string(name='Type', description='类型', example='Constant'),
              value?: string(name='Value', description='变量值', example='222'),
            }
          ](name='Variables', description='变量列表'),
        }(name='Inputs', description='节点输入'),
        modifyTime?: long(name='ModifyTime', description='属性修改时间', example='1722910655000'),
        name?: string(name='Name', description='节点名', example='test'),
        outputs?: {
          nodeOutputs?: [ 
            {
              data?: string(name='Data', description='节点输出', example='860438872620113XXXX'),
            }
          ](name='NodeOutputs', description='节点输出列表'),
          tables?: [ 
            {
              guid?: string(name='Guid', description='表id', example='odps.autotest.test_output_table_1'),
            }
          ](name='Tables', description='表列表'),
          variables?: [ 
            {
              artifactType?: string(name='ArtifactType', description='制品类型', example='Variable'),
              id?: string(name='Id', description='变量id', example='623731286945488XXXX'),
              name?: string(name='Name', description='变量名', example='output'),
              node?: {
                output?: string(name='Output', description='节点输出', example='860438872620113XXXX'),
              }(name='Node', description='变量所属节点'),
              scope?: string(name='Scope', description='范围', example='NodeParameter'),
              type?: string(name='Type', description='类型', example='Constant'),
              value?: string(name='Value', description='变量值', example='111'),
            }
          ](name='Variables', description='变量列表'),
        }(name='Outputs', description='节点输出'),
        owner?: string(name='Owner', description='节点的责任人', example='110755000425XXXX'),
        projectId?: string(name='ProjectId', example='33233'),
        recurrence?: string(name='Recurrence', example='Normal'),
        runtimeResource?: {
          resourceGroupId?: string(name='ResourceGroupId', description='资源组id', example='S_resgrop_xxx'),
        }(name='RuntimeResource', description='资源组信息'),
        script?: {
          id?: string(name='Id', description='脚本的id', example='853573334108680XXXX'),
          path?: string(name='Path', description='脚本路径', example='root/demo'),
          runtime?: {
            command?: string(name='Command', description='脚本所属类型', example='ODPS_SQL'),
          }(name='Runtime', description='脚本的运行时信息'),
        }(name='Script', description='工作流的脚本信息'),
        strategy?: {
          instanceMode?: string(name='InstanceMode', description='生成实例的模式', example='T+1'),
          rerunInterval?: int32(name='RerunInterval', description='重试时间间隔', example='180000'),
          rerunMode?: string(name='RerunMode', description='允许重跑的模式', example='Allowed'),
          rerunTimes?: int32(name='RerunTimes', description='重试次数', example='3'),
          timeout?: int32(name='Timeout', description='超时时间', example='0'),
        }(name='Strategy', description='调度策略'),
        tags?: [ 
          {
            key?: string(name='Key', description='标签键', example='null'),
            value?: string(name='Value', description='标签值', example='null'),
          }
        ](name='Tags', description='标签信息'),
        taskId?: string(name='TaskId', description='调度任务Id', example='88888888888'),
        trigger?: {
          cron?: string(name='Cron', description='触发器的cron表达式', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', description='结束时间，格式为yyyy-MM-dd HH:mm:ss', example='9999-01-01 00:00:00'),
          id?: string(name='Id', description='触发器id', example='543680677872062XXXX'),
          startTime?: string(name='StartTime', description='开始时间，格式为yyyy-MM-dd HH:mm:ss', example='1970-01-01 00:00:00'),
          timezone?: string(name='Timezone', description='时区', example='Asia/Shanghai'),
          type?: string(name='Type', description='触发器类型', example='Scheduler'),
        }(name='Trigger', description='触发器信息'),
      }
    ](name='Nodes'),
    pageNumber?: string(name='PageNumber', example='1'),
    pageSize?: string(name='PageSize', example='10'),
    totalCount?: string(name='TotalCount', example='42'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='2197B9C4-39CE-55EA-8EEA-FDBAE52DXXXX'),
}

model ListNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodesResponseBody(name='body'),
}

async function listNodes(request: ListNodesRequest): ListNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodes', 'GET', '/', 'json', false, 'json', request);
}

model ListResourcesRequest {
  regionId?: string(name='RegionId', position='Host'),
  owner?: string(name='Owner', example='110755000425XXXX', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=100, position='Query'),
  projectId: string(name='ProjectId', example='10002', position='Query'),
  type?: string(name='Type', example='python', position='Query'),
}

model ListResourcesResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    resources?: [ 
      {
        createTime?: long(name='CreateTime', example='1724505917000'),
        dataSource?: {
          name?: string(name='Name', description='数据源名称', example='odps_first'),
          type?: string(name='Type', description='数据源类型', example='odps'),
        }(name='DataSource', description='函数注册到的数据源信息'),
        id?: string(name='Id', description='代表资源组的资源属性字段', example='631478864897630XXXX'),
        modifyTime?: long(name='ModifyTime', description='资源文件的最近修改时间', example='1724505917000'),
        name?: string(name='Name', description='代表资源名称的资源属性字段', example='math.py'),
        owner?: string(name='Owner', description='资源文件的责任人', example='110755000425XXXX'),
        projectId?: string(name='ProjectId', description='资源文件的项目id', example='344247'),
        script?: {
          id?: string(name='Id', description='工作流脚本的id', example='123348864897630XXXX'),
          path?: string(name='Path', description='工作流的脚本路径', example='root/demo'),
          runtime?: {
            command?: string(name='Command', description='脚本所属类型', example='ODPS_PYTHON'),
          }(name='Runtime', description='脚本的运行时信息'),
        }(name='Script', description='工作流的脚本信息'),
        sourcePath?: string(name='SourcePath', description='文件目标存储路径', example='XXX/unknown/ide/1/XXX/20240820200851_963a9da676de44ef8d06a6576a8c4d6a.py'),
        sourceType?: string(name='SourceType', description='文件资源来源存储类型', example='local'),
        targetPath?: string(name='TargetPath', description='文件来源路径', example='XXX/unknown/ide/1/XXX/20240820200851_963a9da676de44ef8d06a6576a8c4d6a.py'),
        targetType?: string(name='TargetType', description='文件目标存储类型', example='oss'),
        type?: string(name='Type', description='资源类型', example='jar'),
      }
    ](name='Resources'),
    totalCount?: int32(name='TotalCount', example='131'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='99EBE7CF-69C0-5089-BE3E-79563C31XXXX'),
}

model ListResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourcesResponseBody(name='body'),
}

async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResources', 'GET', '/', 'json', false, 'json', request);
}

model ListWorkflowDefinitionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  owner?: string(name='Owner', example='110755000425XXXX', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=100, position='Query'),
  projectId: string(name='ProjectId', example='10000', position='Query'),
  type?: string(name='Type', example='CycleWorkflow', position='Query'),
}

model ListWorkflowDefinitionsResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='227'),
    workflowDefinitions?: [ 
      {
        createTime?: long(name='CreateTime', description='工作流的创建时间', example='1698057323000'),
        description?: string(name='Description', description='工作流的描述'),
        id?: string(name='Id', description='工作流定义的唯一ID', example='463497880880954XXXX'),
        modifyTime?: long(name='ModifyTime', description='工作流的最近修改时间', example='1698057323000'),
        name?: string(name='Name', description='工作流的名称'),
        owner?: string(name='Owner', description='工作流的责任人', example='110755000425XXXX'),
        projectId: string(name='ProjectId', description='工作流定义的所属项目空间', example='4710'),
        script?: {
          id?: string(name='Id', description='工作流脚本的id', example='698002781368644XXXX'),
          path?: string(name='Path', description='工作流的脚本路径'),
          runtime?: {
            command?: string(name='Command', description='脚本所属类型', example='WORKFLOW'),
          }(name='Runtime', description='脚本的运行时信息'),
        }(name='Script', description='工作流的脚本信息'),
        type?: string(name='Type', description='工作流类型，可选值：CycleWorkflow、ManualWorkflow，分别表示周期工作流和手动工作流', example='CycleWorkflow'),
      }
    ](name='WorkflowDefinitions'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='8C3ED0C5-ABAB-55E1-854B-DAC02B11XXXX'),
}

model ListWorkflowDefinitionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkflowDefinitionsResponseBody(name='body'),
}

async function listWorkflowDefinitions(request: ListWorkflowDefinitionsRequest): ListWorkflowDefinitionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWorkflowDefinitions', 'GET', '/', 'json', false, 'json', request);
}

model MoveFunctionRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='543217824470354XXXX', position='Body'),
  path: string(name='Path', example='root/demo', position='Body'),
  projectId: string(name='ProjectId', example='12345', position='Body'),
}

model MoveFunctionResponseBody = {
  requestId?: string(name='RequestId', example='48C0E2F0-52BA-5888-BDFA-28F1B9AFXXXX'),
  success?: boolean(name='Success', example='true'),
}

model MoveFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveFunctionResponseBody(name='body'),
}

async function moveFunction(request: MoveFunctionRequest): MoveFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveFunction', 'POST', '/', 'json', true, 'form', request);
}

model MoveNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='652567824470354XXXX', position='Body'),
  path: string(name='Path', example='root/demo', position='Body'),
  projectId: string(name='ProjectId', example='10000', position='Body'),
}

model MoveNodeResponseBody = {
  requestId?: string(name='RequestId', example='C99E2BE6-9DEA-5C2E-8F51-1DDCFEADXXXX'),
  success?: boolean(name='Success', example='true'),
}

model MoveNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveNodeResponseBody(name='body'),
}

async function moveNode(request: MoveNodeRequest): MoveNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveNode', 'POST', '/', 'json', true, 'form', request);
}

model MoveResourceRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='652567824470354XXXX', position='Body'),
  path: string(name='Path', example='root/demo', position='Body'),
  projectId: string(name='ProjectId', example='10000', position='Body'),
}

model MoveResourceResponseBody = {
  requestId?: string(name='RequestId', example='F332BED4-DD73-5972-A9C2-642BA6CFXXXX'),
  success?: boolean(name='Success', example='true'),
}

model MoveResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveResourceResponseBody(name='body'),
}

async function moveResource(request: MoveResourceRequest): MoveResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResource', 'POST', '/', 'json', true, 'form', request);
}

model MoveWorkflowDefinitionRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='543217824470354XXXX', position='Body'),
  path: string(name='Path', example='root/demo', position='Body'),
  projectId: string(name='ProjectId', example='10001', position='Body'),
}

model MoveWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', example='05ADAF4F-7709-5FB1-B606-3513483FXXXX'),
  success?: boolean(name='Success', example='true'),
}

model MoveWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveWorkflowDefinitionResponseBody(name='body'),
}

async function moveWorkflowDefinition(request: MoveWorkflowDefinitionRequest): MoveWorkflowDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveWorkflowDefinition', 'POST', '/', 'json', true, 'form', request);
}

model RenameFunctionRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='543217824470354XXXX', position='Body'),
  name: string(name='Name', position='Body'),
  projectId: string(name='ProjectId', example='10002', position='Body'),
}

model RenameFunctionResponseBody = {
  requestId?: string(name='RequestId', example='1ED4C97F-BA2A-57C5-BA7C-8853627EXXXX'),
  success?: string(name='Success', example='true'),
}

model RenameFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameFunctionResponseBody(name='body'),
}

async function renameFunction(request: RenameFunctionRequest): RenameFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenameFunction', 'POST', '/', 'json', true, 'form', request);
}

model RenameNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='652567824470354XXXX', position='Body'),
  name: string(name='Name', position='Body'),
  projectId: string(name='ProjectId', example='12345', position='Body'),
}

model RenameNodeResponseBody = {
  requestId?: string(name='RequestId', example='4CDF7B72-020B-542A-8465-21CFFA81XXXX'),
  success?: boolean(name='Success', example='true'),
}

model RenameNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameNodeResponseBody(name='body'),
}

async function renameNode(request: RenameNodeRequest): RenameNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenameNode', 'POST', '/', 'json', true, 'form', request);
}

model RenameResourceRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='543217824470354XXXX', position='Body'),
  name: string(name='Name', position='Body'),
  projectId: string(name='ProjectId', example='10000', position='Body'),
}

model RenameResourceResponseBody = {
  requestId?: string(name='RequestId', example='4CDF7B72-020B-542A-8465-21CFFA8XXXXX'),
  success?: boolean(name='Success', example='true'),
}

model RenameResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameResourceResponseBody(name='body'),
}

async function renameResource(request: RenameResourceRequest): RenameResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenameResource', 'POST', '/', 'json', true, 'form', request);
}

model RenameWorkflowDefinitionRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='463497880880954XXXX', position='Query'),
  name: string(name='Name', position='Query'),
  projectId: string(name='ProjectId', example='10000', position='Query'),
}

model RenameWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', example='975BD43D-C421-595C-A29C-565A8AD5XXXX'),
  success?: boolean(name='Success', example='true'),
}

model RenameWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameWorkflowDefinitionResponseBody(name='body'),
}

async function renameWorkflowDefinition(request: RenameWorkflowDefinitionRequest): RenameWorkflowDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenameWorkflowDefinition', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFunctionRequest {
  regionId?: string(name='RegionId', description='代表region的资源属性字段', position='Host'),
  id: string(name='Id', example='463497880880954XXXX', position='Body'),
  projectId: string(name='ProjectId', example='10000', position='Body'),
  spec: string(name='Spec', position='Body'),
}

model UpdateFunctionResponseBody = {
  requestId?: string(name='RequestId', example='12123960-CB2C-5086-868E-C6C1D024XXXX'),
  success?: boolean(name='Success', example='true'),
}

model UpdateFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFunctionResponseBody(name='body'),
}

async function updateFunction(request: UpdateFunctionRequest): UpdateFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFunction', 'POST', '/', 'json', true, 'form', request);
}

model UpdateNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', example='652567824470354XXXX', position='Body'),
  projectId: string(name='ProjectId', example='10000', position='Body'),
  spec: string(name='Spec', position='Body'),
}

model UpdateNodeResponseBody = {
  requestId?: string(name='RequestId', example='99EBE7CF-69C0-5089-BE3E-79563C31XXXX'),
  success?: boolean(name='Success', example='true'),
}

model UpdateNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNodeResponseBody(name='body'),
}

async function updateNode(request: UpdateNodeRequest): UpdateNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNode', 'POST', '/', 'json', true, 'form', request);
}

model UpdateResourceRequest {
  regionId?: string(name='RegionId', description='代表region的资源属性字段', position='Host'),
  id: string(name='Id', example='543217824470354XXXX', position='Body'),
  projectId: string(name='ProjectId', example='10000', position='Body'),
  spec: string(name='Spec', position='Body'),
}

model UpdateResourceResponseBody = {
  requestId?: string(name='RequestId', example='4CDF7B72-020B-542A-8465-21CFFA81XXXX'),
  success?: boolean(name='Success', example='true'),
}

model UpdateResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourceResponseBody(name='body'),
}

async function updateResource(request: UpdateResourceRequest): UpdateResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateResource', 'POST', '/', 'json', true, 'form', request);
}

model UpdateWorkflowDefinitionRequest {
  regionId?: string(name='RegionId', description='代表region的资源属性字段', position='Host'),
  id: string(name='Id', example='652567824470354XXXX', position='Body'),
  projectId: string(name='ProjectId', example='10001', position='Body'),
  spec: string(name='Spec', position='Body'),
}

model UpdateWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', example='20BF7E80-668A-5620-8AD8-879B8FEAXXXX'),
  success?: boolean(name='Success', example='true'),
}

model UpdateWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkflowDefinitionResponseBody(name='body'),
}

async function updateWorkflowDefinition(request: UpdateWorkflowDefinitionRequest): UpdateWorkflowDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWorkflowDefinition', 'POST', '/', 'json', true, 'form', request);
}

