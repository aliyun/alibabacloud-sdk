/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'dataworks-public';
  @version = '2024-05-18';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'dataworks.ap-northeast-1.aliyuncs.com',
    'ap-south-1' = 'dataworks.ap-south-1.aliyuncs.com',
    'ap-southeast-1' = 'dataworks.ap-southeast-1.aliyuncs.com',
    'ap-southeast-2' = 'dataworks.ap-southeast-2.aliyuncs.com',
    'ap-southeast-3' = 'dataworks.ap-southeast-3.aliyuncs.com',
    'ap-southeast-5' = 'dataworks.ap-southeast-5.aliyuncs.com',
    'cn-beijing' = 'dataworks.cn-beijing.aliyuncs.com',
    'cn-chengdu' = 'dataworks.cn-chengdu.aliyuncs.com',
    'cn-hangzhou' = 'dataworks.cn-hangzhou.aliyuncs.com',
    'cn-hongkong' = 'dataworks.cn-hongkong.aliyuncs.com',
    'cn-huhehaote' = 'dataworks.aliyuncs.com',
    'cn-qingdao' = 'dataworks.aliyuncs.com',
    'cn-shanghai' = 'dataworks.cn-shanghai.aliyuncs.com',
    'cn-shenzhen' = 'dataworks.cn-shenzhen.aliyuncs.com',
    'cn-zhangjiakou' = 'dataworks.aliyuncs.com',
    'eu-central-1' = 'dataworks.eu-central-1.aliyuncs.com',
    'eu-west-1' = 'dataworks.eu-west-1.aliyuncs.com',
    'me-east-1' = 'dataworks.me-east-1.aliyuncs.com',
    'us-east-1' = 'dataworks.us-east-1.aliyuncs.com',
    'us-west-1' = 'dataworks.us-west-1.aliyuncs.com',
    'cn-hangzhou-finance' = 'dataworks.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'dataworks.aliyuncs.com',
    'cn-shanghai-finance-1' = 'dataworks.aliyuncs.com',
    'cn-north-2-gov-1' = 'dataworks.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model DataQualityEvaluationTask {
  dataSourceId?: long(name='DataSourceId', example='201'),
  description?: string(name='Description', example='This is a daily run data quality evaluation plan.'),
  hooks?: [ 
    {
      condition?: string(name='Condition', example='${severity} == "High" AND ${status} == "Critical"'),
      type?: string(name='Type', example='BlockTaskInstance'),
    }
  ](name='Hooks'),
  id?: long(name='Id', example='10001'),
  name?: string(name='Name', example='质量校验任务'),
  notifications?: [ 
    {
      condition?: string(name='Condition', example='${blockType} == "Strong"'),
      notifications?: [ 
        {
          notificationChannels?: [ 
            {
              channels?: [ string ](name='Channels'),
            }
          ](name='NotificationChannels'),
          notificationReceivers?: [ 
            {
              extension?: string(name='Extension', example='{"atAll":"true"}'),
              receiverType?: string(name='ReceiverType', example='AliUid'),
              receiverValues?: [ string ](name='ReceiverValues'),
            }
          ](name='NotificationReceivers'),
        }
      ](name='Notifications'),
    }
  ](name='Notifications'),
  projectId?: long(name='ProjectId', example='100'),
  runtimeConf?: string(name='RuntimeConf', example='{ "queue": "default", "sqlEngine": "SPARK_SQL" }'),
  target?: {
    databaseType?: string(name='DatabaseType', example='maxcompute'),
    partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
    tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
    type?: string(name='Type', example='Table'),
  }(name='Target'),
  tenantId?: long(name='TenantId', example='10'),
  trigger?: {
    taskIds?: [ long ](name='TaskIds'),
    type?: string(name='Type', example='ByScheduledTaskInstance'),
  }(name='Trigger'),
}

model DataQualityEvaluationTaskInstance {
  createTime?: long(name='CreateTime', example='1710239005403'),
  finishTime?: long(name='FinishTime', example='1710239005403'),
  id?: long(name='Id', example='10001'),
  status?: string(name='Status', example='Passed'),
  task?: {
    dataSourceId?: long(name='DataSourceId', example='201'),
    hooks?: [ 
      {
        condition?: string(name='Condition', example='${severity} == "High" AND ${status} == "Critical"'),
        type?: string(name='Type', example='BlockTaskInstance'),
      }
    ](name='Hooks'),
    id?: long(name='Id', example='10001'),
    name?: string(name='Name', example='质量校验任务'),
    notifications?: [ 
      {
        condition?: string(name='Condition', example='${blockType} == "Strong"'),
        notifications?: [ 
          {
            notificationChannels?: [ 
              {
                channels?: [ string ](name='Channels'),
              }
            ](name='NotificationChannels'),
            notificationReceivers?: [ 
              {
                extension?: string(name='Extension', example='{"atAll":"true"}'),
                receiverType?: string(name='ReceiverType', example='AliUid'),
                receiverValues?: [ string ](name='ReceiverValues'),
              }
            ](name='NotificationReceivers'),
          }
        ](name='Notifications'),
      }
    ](name='Notifications'),
    projectId?: long(name='ProjectId'),
    runtimeConf?: string(name='RuntimeConf', example='{ "queue": "default", "sqlEngine": "SPARK_SQL" }'),
    target?: {
      databaseType?: string(name='DatabaseType', example='maxcompute'),
      partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
      tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
      type?: string(name='Type', example='Table'),
    }(name='Target'),
    tenantId?: long(name='TenantId'),
    trigger?: {
      taskIds?: [ long ](name='TaskIds'),
      type?: string(name='Type', example='ByScheduledTaskInstance'),
    }(name='Trigger'),
  }(name='Task'),
}

model DataQualityResult {
  details?: [ 
    {
      checkedValue?: string(name='CheckedValue', example='100.0'),
      referencedValue?: string(name='ReferencedValue', example='0.0'),
      status?: string(name='Status', example='Passed'),
    }
  ](name='Details'),
  id?: long(name='Id', example='10001'),
  rule?: {
    checkingConfig?: {
      referencedSamplesFilter?: string(name='ReferencedSamplesFilter', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
      thresholds?: {
        critical?: {
          operator?: string(name='Operator', example='>'),
          value?: string(name='Value', example='100.0'),
        }(name='Critical'),
        expected?: {
          operator?: string(name='Operator', example='>'),
          value?: string(name='Value', example='100.0'),
        }(name='Expected'),
        warned?: {
          operator?: string(name='Operator', example='>'),
          value?: string(name='Value', example='100.0'),
        }(name='Warned'),
      }(name='Thresholds'),
      type?: string(name='Type', example='Fixed'),
    }(name='CheckingConfig'),
    description?: string(name='Description', example='this is a odps _sql task'),
    enabled?: boolean(name='Enabled', example='true'),
    errorHandlers?: [ 
      {
        errorDataFilter?: string(name='ErrorDataFilter', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
        type?: string(name='Type', example='SaveErrorData'),
      }
    ](name='ErrorHandlers'),
    id?: long(name='Id', example='100001'),
    name?: string(name='Name', example='表不能为空'),
    projectId?: long(name='ProjectId', example='100'),
    samplingConfig?: {
      metric?: string(name='Metric', example='Min'),
      metricParameters?: string(name='MetricParameters', example='{ "Columns": [ "id", "name" ] }'),
      samplingFilter?: string(name='SamplingFilter', example='id IS NULL'),
      settingConfig?: string(name='SettingConfig', example='SET odps.sql.udf.timeout=600s;'),
    }(name='SamplingConfig'),
    severity?: string(name='Severity', example='High'),
    target?: {
      databaseType?: string(name='DatabaseType', example='maxcompute'),
      partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
      tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
      type?: string(name='Type', example='Table'),
    }(name='Target'),
    templateCode?: string(name='TemplateCode', example='SYSTEM:user_defined_sql'),
    tenantId?: long(name='TenantId', example='1'),
  }(name='Rule'),
  sample?: string(name='Sample', example='[   {     "gender": "male",     "_count": 100   }, {     "gender": "female",     "_count": 100   } ]'),
  status?: string(name='Status', example='Passed'),
  taskInstanceId?: long(name='TaskInstanceId', example='20001'),
}

model DataQualityRule {
  checkingConfig?: {
    referencedSamplesFilter?: string(name='ReferencedSamplesFilter', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
    thresholds?: {
      critical?: {
        operator?: string(name='Operator', example='>'),
        value?: string(name='Value', example='100.0'),
      }(name='Critical'),
      expected?: {
        operator?: string(name='Operator', example='>'),
        value?: string(name='Value', example='100.0'),
      }(name='Expected'),
      warned?: {
        operator?: string(name='Operator', example='>'),
        value?: string(name='Value', example='100.0'),
      }(name='Warned'),
    }(name='Thresholds'),
    type?: string(name='Type', example='Fixed'),
  }(name='CheckingConfig'),
  description?: string(name='Description', example='this is a odps _sql task'),
  enabled?: boolean(name='Enabled', example='true'),
  errorHandlers?: [ 
    {
      errorDataFilter?: string(name='ErrorDataFilter', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
      type?: string(name='Type', example='SaveErrorData'),
    }
  ](name='ErrorHandlers'),
  id?: long(name='Id', example='1'),
  name?: string(name='Name', example='表不能为空'),
  projectId?: long(name='ProjectId', example='100'),
  samplingConfig?: {
    metric?: string(name='Metric', example='Min'),
    metricParameters?: string(name='MetricParameters', example='{ "Columns": [ "id", "name" ] }'),
    samplingFilter?: string(name='SamplingFilter', example='id IS NULL'),
    settingConfig?: string(name='SettingConfig', example='SET odps.sql.udf.timeout=600s;'),
  }(name='SamplingConfig'),
  severity?: string(name='Severity', example='High'),
  target?: {
    databaseType?: string(name='DatabaseType', example='maxcompute'),
    partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
    tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
    type?: string(name='Type', example='Table'),
  }(name='Target'),
  templateCode?: string(name='TemplateCode', example='SYSTEM:user_defined_sql'),
  tenantId?: long(name='TenantId', example='1'),
}

model AbolishDeploymentRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the process.

This parameter is required.', example='1606087c-9ac4-43f0-83a8-0b5ced21XXXX', position='Body'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000', position='Body'),
}

model AbolishDeploymentResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='55D786C9-DD57-524D-884C-C5239278XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model AbolishDeploymentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AbolishDeploymentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AbolishDeployment  AbolishDeploymentRequest
  * @return AbolishDeploymentResponse
 */
async function abolishDeployment(request: AbolishDeploymentRequest): AbolishDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AbolishDeployment', 'POST', '/', 'json', true, 'form', request);
}

model AssociateProjectToResourceGroupRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  projectId: long(name='ProjectId', description='The ID of the DataWorks workspace with which you want to associate the resource group.

This parameter is required.', example='1000', position='Body'),
  resourceGroupId: string(name='ResourceGroupId', description='The ID of the resource group.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX', position='Body'),
}

model AssociateProjectToResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model AssociateProjectToResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateProjectToResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AssociateProjectToResourceGroup  AssociateProjectToResourceGroupRequest
  * @return AssociateProjectToResourceGroupResponse
 */
async function associateProjectToResourceGroup(request: AssociateProjectToResourceGroupRequest): AssociateProjectToResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateProjectToResourceGroup', 'POST', '/', 'json', true, 'form', request);
}

model CloneDataSourceRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  cloneDataSourceName?: string(name='CloneDataSourceName', example='demo_holo_datasource', position='Query'),
  id?: long(name='Id', example='16036', position='Query'),
}

model CloneDataSourceResponseBody = {
  id?: long(name='Id', example='19715'),
  requestId?: string(name='RequestId', example='FCD583B9-346B-5E75-82C1-4A7C192C48DB'),
}

model CloneDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloneDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CloneDataSource  CloneDataSourceRequest
  * @return CloneDataSourceResponse
 */
async function cloneDataSource(request: CloneDataSourceRequest): CloneDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloneDataSource', 'POST', '/', 'json', false, 'json', request);
}

model CreateAlertRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  enabled: boolean(name='Enabled', description='This parameter is required.', example='true', position='Query'),
  name: string(name='Name', description='This parameter is required.', example='xm_create_test', position='Query'),
  notification?: {
    channels: [ string ](name='Channels', description='This parameter is required.'),
    intervalInMinutes?: int32(name='IntervalInMinutes', example='30'),
    maximum?: int32(name='Maximum', example='3'),
    receivers: [ 
      {
        extension?: string(name='Extension', example='{"atAll":true}'),
        receiverType?: string(name='ReceiverType', example='TaskOwner'),
        receiverValues?: [ string ](name='ReceiverValues'),
      }
    ](name='Receivers', description='This parameter is required.'),
    silenceEndTime?: string(name='SilenceEndTime', example='00:00:00'),
    silenceStartTime?: string(name='SilenceStartTime', example='00:00:00'),
  }(name='Notification', shrink='json', position='Query'),
  owner: string(name='Owner', description='This parameter is required.', example='279114181716147735', position='Query'),
  triggerCondition: {
    extension?: {
      cycleUnfinished?: {
        cycleAndTime?: [ 
          {
            cycleId?: int32(name='CycleId', example='1'),
            time?: string(name='Time', example='12:00'),
          }
        ](name='CycleAndTime'),
      }(name='CycleUnfinished'),
      error?: {
        autoRerunAlert?: boolean(name='AutoRerunAlert', example='false'),
        streamTaskIds?: [ long ](name='StreamTaskIds'),
      }(name='Error'),
      instanceErrorCount?: {
        count?: int32(name='Count', example='5'),
      }(name='InstanceErrorCount'),
      instanceErrorPercentage?: {
        percentage?: int32(name='Percentage', example='5'),
      }(name='InstanceErrorPercentage'),
      instanceTransferFluctuate?: {
        percentage?: int32(name='Percentage', example='10'),
        trend?: string(name='Trend', example='abs'),
      }(name='InstanceTransferFluctuate'),
      timeout?: {
        timeoutInMinutes?: int32(name='TimeoutInMinutes', example='10'),
      }(name='Timeout'),
      unFinished?: {
        unFinishedTime?: string(name='UnFinishedTime', example='30:00'),
      }(name='UnFinished'),
    }(name='Extension'),
    target?: {
      allowTasks?: [ long ](name='AllowTasks'),
      ids?: [ long ](name='Ids'),
      type?: string(name='Type', example='Task'),
    }(name='Target'),
    type?: string(name='Type', example='Error'),
  }(name='TriggerCondition', description='This parameter is required.', shrink='json', position='Query'),
}

model CreateAlertRuleResponseBody = {
  id?: long(name='Id', example='123123'),
  requestId?: string(name='RequestId', example='A6C6B486-E3A2-5D52-9E76-D9380485D946'),
}

model CreateAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAlertRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAlertRule  CreateAlertRuleRequest
  * @return CreateAlertRuleResponse
 */
async function createAlertRule(request: CreateAlertRuleRequest): CreateAlertRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAlertRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateDIAlarmRuleRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  clientToken?: string(name='ClientToken', example='ABFUOEUOTRTRJKE', position='Query'),
  DIJobId: long(name='DIJobId', description='任务ID，是告警规则关联的任务ID。

This parameter is required.', example='1', position='Query'),
  description?: string(name='Description', description='描述。', position='Query'),
  enabled?: boolean(name='Enabled', description='告警规则是否启用，默认不开启。', example='true', position='Query'),
  metricType: string(name='MetricType', description='告警指标类型，可选的枚举值：
- Heartbeat（任务状态报警）
- FailoverCount（failover次数报警）
- Delay（任务延迟报警）

This parameter is required.', example='Heartbeat', position='Query'),
  name: string(name='Name', description='This parameter is required.', example='alartRule', position='Query'),
  notificationSettings: {
    inhibitionInterval?: int32(name='InhibitionInterval', example='5'),
    notificationChannels?: [ 
      {
        channels?: [ string ](name='Channels'),
        severity?: string(name='Severity', example='Warning'),
      }
    ](name='NotificationChannels'),
    notificationReceivers?: [ 
      {
        receiverType?: string(name='ReceiverType', example='DingToken'),
        receiverValues?: [ string ](name='ReceiverValues'),
      }
    ](name='NotificationReceivers'),
  }(name='NotificationSettings', description='This parameter is required.', shrink='json', position='Query'),
  triggerConditions: [ 
    {
      ddlReportTags?: [ string ](name='DdlReportTags'),
      duration?: long(name='Duration', example='10'),
      severity?: string(name='Severity', example='Warning'),
      threshold?: long(name='Threshold', example='10'),
    }
  ](name='TriggerConditions', description='This parameter is required.', shrink='json', position='Query'),
}

model CreateDIAlarmRuleResponseBody = {
  DIAlarmRuleId?: string(name='DIAlarmRuleId', description='代表资源一级ID的资源属性字段', example='1'),
  requestId?: string(name='RequestId', example='C636A747-7E4E-594D-94CD-2B4F8A9A9A63'),
}

model CreateDIAlarmRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDIAlarmRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDIAlarmRule  CreateDIAlarmRuleRequest
  * @return CreateDIAlarmRuleResponse
 */
async function createDIAlarmRule(request: CreateDIAlarmRuleRequest): CreateDIAlarmRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDIAlarmRule', 'GET', '/', 'json', false, 'json', request);
}

model CreateDIJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', position='Query'),
  destinationDataSourceSettings: [ 
    {
      dataSourceName?: string(name='DataSourceName', example='holo_datasource_1'),
    }
  ](name='DestinationDataSourceSettings', description='This parameter is required.', shrink='json', position='Query'),
  destinationDataSourceType: string(name='DestinationDataSourceType', description='This parameter is required.', example='Hologres', position='Query'),
  jobName: string(name='JobName', description='This parameter is required.', example='mysql_to_holo_sync_8772', position='Query'),
  jobSettings?: {
    channelSettings?: string(name='ChannelSettings', example='{"structInfo":"MANAGED","storageType":"TEXTFILE","writeMode":"APPEND","partitionColumns":[{"columnName":"pt","columnType":"STRING","comment":""}],"fieldDelimiter":""}'),
    columnDataTypeSettings?: [ 
      {
        destinationDataType?: string(name='DestinationDataType', example='text'),
        sourceDataType?: string(name='SourceDataType', example='bigint'),
      }
    ](name='ColumnDataTypeSettings'),
    cycleScheduleSettings?: {
      cycleMigrationType?: string(name='CycleMigrationType', example='Full'),
      scheduleParameters?: string(name='ScheduleParameters', example='bizdate=$bizdate'),
    }(name='CycleScheduleSettings'),
    ddlHandlingSettings?: [ 
      {
        action?: string(name='Action', example='Critical'),
        type?: string(name='Type', example='AddColumn'),
      }
    ](name='DdlHandlingSettings'),
    runtimeSettings?: [ 
      {
        name?: string(name='Name', example='runtime.offline.concurrent'),
        value?: string(name='Value', example='1'),
      }
    ](name='RuntimeSettings'),
  }(name='JobSettings', shrink='json', position='Query'),
  migrationType: string(name='MigrationType', description='This parameter is required.', example='FullAndRealtimeIncremental', position='Query'),
  projectId?: long(name='ProjectId', example='10000', position='Query'),
  resourceSettings: {
    offlineResourceSettings?: {
      requestedCu?: double(name='RequestedCu', example='2.0'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='S_res_group_111_222'),
    }(name='OfflineResourceSettings'),
    realtimeResourceSettings?: {
      requestedCu?: double(name='RequestedCu', example='2.0'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='S_res_group_111_222'),
    }(name='RealtimeResourceSettings'),
    scheduleResourceSettings?: {
      requestedCu?: double(name='RequestedCu', example='2.0'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='S_res_group_235454102432001_1579085295030'),
    }(name='ScheduleResourceSettings'),
  }(name='ResourceSettings', description='This parameter is required.', shrink='json', position='Query'),
  sourceDataSourceSettings: [ 
    {
      dataSourceName?: string(name='DataSourceName', example='mysql_datasource_1'),
      dataSourceProperties?: {
        encoding?: string(name='Encoding', example='UTF-8'),
        timezone?: string(name='Timezone', example='GMT+8'),
      }(name='DataSourceProperties'),
    }
  ](name='SourceDataSourceSettings', description='This parameter is required.', shrink='json', position='Query'),
  sourceDataSourceType: string(name='SourceDataSourceType', description='This parameter is required.', example='MySQL', position='Query'),
  tableMappings: [ 
    {
      sourceObjectSelectionRules?: [ 
        {
          action?: string(name='Action', example='Include'),
          expression?: string(name='Expression', example='mysql_table_1'),
          expressionType?: string(name='ExpressionType', example='Exact'),
          objectType?: string(name='ObjectType', example='Table'),
        }
      ](name='SourceObjectSelectionRules'),
      transformationRules?: [ 
        {
          ruleActionType?: string(name='RuleActionType', example='Rename'),
          ruleName?: string(name='RuleName', example='rename_rule_1'),
          ruleTargetType?: string(name='RuleTargetType', example='Table'),
        }
      ](name='TransformationRules'),
    }
  ](name='TableMappings', description='This parameter is required.', shrink='json', position='Query'),
  transformationRules?: [ 
    {
      ruleActionType?: string(name='RuleActionType', example='Rename'),
      ruleExpression?: string(name='RuleExpression', example='{"expression":"${srcDatasoureName}_${srcDatabaseName}"}'),
      ruleName?: string(name='RuleName', example='rename_rule_1'),
      ruleTargetType?: string(name='RuleTargetType', example='Table'),
    }
  ](name='TransformationRules', shrink='json', position='Query'),
}

model CreateDIJobResponseBody = {
  DIJobId?: long(name='DIJobId', example='11792'),
  requestId?: string(name='RequestId', example='4F6AB6B3-41FB-5EBB-AFB2-0C98D49DA2BB'),
}

model CreateDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDIJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDIJob  CreateDIJobRequest
  * @return CreateDIJobResponse
 */
async function createDIJob(request: CreateDIJobRequest): CreateDIJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDIJob', 'GET', '/', 'json', false, 'json', request);
}

model CreateDataSourceRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  connectionProperties: string(name='ConnectionProperties', description='This parameter is required.', example='{
	"envType": "Prod",
	"regionId": "cn-beijing",
    "instanceId": "hgprecn-cn-x0r3oun4k001",
    "database": "testdb",
    "securityProtocol": "authTypeNone",
    "authType": "Executor",
    "authIdentity": "1107550004253538"
}', position='Query'),
  connectionPropertiesMode: string(name='ConnectionPropertiesMode', description='This parameter is required.', example='UrlMode', position='Query'),
  description?: string(name='Description', example='this is a holo datasource', position='Query'),
  name: string(name='Name', description='This parameter is required.', example='demo_holo_datasource', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='2', minimum=0, position='Query'),
  type: string(name='Type', description='This parameter is required.', example='hologres', position='Query'),
}

model CreateDataSourceResponseBody = {
  id?: long(name='Id', example='22130'),
  requestId?: string(name='RequestId', example='B62EC203-B39E-5DC1-B5B8-EB3C61707009'),
}

model CreateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataSource  CreateDataSourceRequest
  * @return CreateDataSourceResponse
 */
async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataSource', 'POST', '/', 'json', false, 'json', request);
}

model CreateDataSourceSharedRuleRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  dataSourceId: long(name='DataSourceId', description='This parameter is required.', example='144544', position='Query'),
  envType: string(name='EnvType', description='This parameter is required.', example='Dev', position='Query'),
  sharedUser?: string(name='SharedUser', example='1107550004253538', position='Query'),
  targetProjectId: long(name='TargetProjectId', description='This parameter is required.', example='106560', position='Query'),
}

model CreateDataSourceSharedRuleResponseBody = {
  id?: long(name='Id', example='105412'),
  requestId?: string(name='RequestId', example='46F594E6-84AB-5FA5-8144-6F3D149961E1'),
}

model CreateDataSourceSharedRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSourceSharedRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataSourceSharedRule  CreateDataSourceSharedRuleRequest
  * @return CreateDataSourceSharedRuleResponse
 */
async function createDataSourceSharedRule(request: CreateDataSourceSharedRuleRequest): CreateDataSourceSharedRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataSourceSharedRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateDeploymentRequest {
  regionId?: string(name='RegionId', description='区域id

This parameter is required.', position='Host'),
  description?: string(name='Description', description='The description of the process.', position='Body'),
  objectIds: [ string ](name='ObjectIds', description='The IDs of entities to which you want to apply the process.

>  A process can be applied to only a single entity and its child entities. If you specify multiple entities in the array, the process is applied only to the first entity in the array and its child entities. Make sure that the array in your request contains only one element. Extra elements will be ignored.

This parameter is required.', shrink='json', position='Body'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000', position='Body'),
  type: string(name='Type', description='Specifies whether to deploy or undeploy the entity. Valid values:

*   Online: deploys the entity.
*   Offline: undeploys the entity.

This parameter is required.', example='Online', position='Body'),
}

model CreateDeploymentResponseBody = {
  id?: string(name='Id', description='The ID of the process.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX'),
  requestId?: string(name='RequestId', description='The request ID.', example='7C352CB7-CD88-50CF-9D0D-E81BDF02XXXX'),
}

model CreateDeploymentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDeploymentResponseBody(name='body'),
}

/**
  * @description >  You cannot use this API operation to create a process for multiple entities at a time. If you specify multiple entities in a request, the system creates a process only for the first entity.
  * @param request  the request parameters of CreateDeployment  CreateDeploymentRequest
  * @return CreateDeploymentResponse
 */
async function createDeployment(request: CreateDeploymentRequest): CreateDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDeployment', 'POST', '/', 'json', true, 'form', request);
}

model CreateFunctionRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='12345', position='Body'),
  spec: string(name='Spec', description='The FlowSpec field information about the UDF. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.', position='Body'),
}

model CreateFunctionResponseBody = {
  id?: string(name='Id', description='The ID of the UDF.', example='580667964888595XXXX'),
  requestId?: string(name='RequestId', description='The request ID.', example='AE49C88D-5BEE-5ADD-8B8C-C4BBC0D7XXXX'),
}

model CreateFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFunctionResponseBody(name='body'),
}

/**
  * @description >  You cannot use this API operation to create multiple UDFs at a time. If you specify multiple UDFs by using FlowSpec, the system creates only the first specified UDF.
  * @param request  the request parameters of CreateFunction  CreateFunctionRequest
  * @return CreateFunctionResponse
 */
async function createFunction(request: CreateFunctionRequest): CreateFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFunction', 'POST', '/', 'json', true, 'form', request);
}

model CreateNetworkRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  clientToken: string(name='ClientToken', description='This parameter is required.', example='eb870033-74c8-4b1b-9664-04c4e7cc3465', position='Body'),
  resourceGroupId: string(name='ResourceGroupId', description='This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX', position='Body'),
  vpcId: string(name='VpcId', description='This parameter is required.', example='vpc-m2et4f3oc8msfbccXXXXX', position='Body'),
  vswitchId: string(name='VswitchId', description='This parameter is required.', example='vsw-uf8usrhs7hjd9amsXXXXX', position='Body'),
}

model CreateNetworkResponseBody = {
  networkId?: long(name='NetworkId', example='1000'),
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', example='true'),
}

model CreateNetworkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNetworkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateNetwork  CreateNetworkRequest
  * @return CreateNetworkResponse
 */
async function createNetwork(request: CreateNetworkRequest): CreateNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNetwork', 'POST', '/', 'json', true, 'form', request);
}

model CreateNodeRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  containerId?: string(name='ContainerId', description='The container ID. If you want to create a node in a container, you must configure this parameter to specify the container. The container can be a workflow or a node in a container.

>  If you configure this parameter, the path field defined in FlowSpec becomes invalid.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX', position='Body'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='123456', position='Body'),
  scene: string(name='Scene', description='The scene of the node. This parameter determines the location (the DataStudio pane or the Manual pane) of the node. You can set this parameter to DATAWORKS_MANUAL_WORKFLOW only if the ContainerId parameter is configured and the container specified by ContainerId is a manually triggered workflow.

Valid values:

*   DATAWORKS_PROJECT
*   DATAWORKS_MANUAL_WORKFLOW
*   DATAWORKS_MANUAL_TASK

This parameter is required.', example='DATAWORKS_PROJECT', position='Body'),
  spec: string(name='Spec', description='The FlowSpec field information about the node. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.', position='Body'),
}

model CreateNodeResponseBody = {
  id?: string(name='Id', description='The ID of the node.', example='860438872620113XXXX'),
  requestId?: string(name='RequestId', description='The request ID.', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
}

model CreateNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNodeResponseBody(name='body'),
}

/**
  * @description >  You cannot use this API operation to create multiple nodes at a time. If you specify multiple nodes by using FlowSpec, the system creates only the first specified node.
  * @param request  the request parameters of CreateNode  CreateNodeRequest
  * @return CreateNodeResponse
 */
async function createNode(request: CreateNodeRequest): CreateNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNode', 'POST', '/', 'json', true, 'form', request);
}

model CreateProjectRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', example='rg-acfmzbn7pti3zff', position='Body'),
  aliyunResourceTags?: [ 
    {
      key?: string(name='Key', example='batch'),
      value?: string(name='Value', example='blue'),
    }
  ](name='AliyunResourceTags', shrink='json', position='Body'),
  description?: string(name='Description', position='Body'),
  devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', example='false', position='Body'),
  devRoleDisabled?: boolean(name='DevRoleDisabled', example='true', position='Body'),
  displayName: string(name='DisplayName', description='This parameter is required.', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='sora_finance', position='Body'),
  paiTaskEnabled?: boolean(name='PaiTaskEnabled', example='true', position='Body'),
}

model CreateProjectResponseBody = {
  projectId?: long(name='ProjectId', example='123456'),
  requestId?: string(name='RequestId', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
}

model CreateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateProject  CreateProjectRequest
  * @return CreateProjectResponse
 */
async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProject', 'POST', '/', 'json', true, 'form', request);
}

model CreateProjectMemberRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='24054', position='Body'),
  roleCodes: [ string ](name='RoleCodes', description='This parameter is required.', shrink='json', position='Body'),
  userId: string(name='UserId', description='This parameter is required.', example='123422344899', position='Body'),
}

model CreateProjectMemberResponseBody = {
  requestId?: string(name='RequestId', example='2B2F0B26-9253-5780-B6DB-F1A886D44D6F'),
}

model CreateProjectMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProjectMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateProjectMember  CreateProjectMemberRequest
  * @return CreateProjectMemberResponse
 */
async function createProjectMember(request: CreateProjectMemberRequest): CreateProjectMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProjectMember', 'POST', '/', 'json', true, 'form', request);
}

model CreateResourceRequest {
  regionId?: string(name='RegionId', description='代表region的资源属性字段

This parameter is required.', position='Host'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='123456', position='Body'),
  spec: string(name='Spec', description='The FlowSpec field information about the file resource. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.', position='Body'),
}

model CreateResourceResponseBody = {
  id?: string(name='Id', description='The ID of the file resource.', example='631478864897630XXXX'),
  requestId?: string(name='RequestId', description='The request ID.', example='A5B97987-66EA-5563-9599-A2752292XXXX'),
}

model CreateResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceResponseBody(name='body'),
}

/**
  * @description >  You cannot use this API operation to create multiple file resources at a time. If you specify multiple file resources by using FlowSpec, the system creates only the first specified resource.
  * @param request  the request parameters of CreateResource  CreateResourceRequest
  * @return CreateResourceResponse
 */
async function createResource(request: CreateResourceRequest): CreateResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateResource', 'POST', '/', 'json', true, 'form', request);
}

model CreateResourceGroupRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  autoRenew?: boolean(name='AutoRenew', example='true', position='Body'),
  clientToken: string(name='ClientToken', description='This parameter is required.', example='eb870033-74c8-4b1b-9664-04c4e7cc3465', position='Body'),
  name: string(name='Name', description='This parameter is required.', example='common_resource_group', position='Body'),
  paymentDuration?: int32(name='PaymentDuration', example='1', position='Body'),
  paymentDurationUnit?: string(name='PaymentDurationUnit', example='Month', position='Body'),
  paymentType: string(name='PaymentType', description='This parameter is required.', example='PrePaid', position='Body'),
  remark?: string(name='Remark', example='创建用于普通任务的通用资源组', position='Body'),
  spec?: int32(name='Spec', example='2', position='Body'),
  vpcId: string(name='VpcId', description='This parameter is required.', example='vpc-m2et4f3oc8msfbccXXXXX', position='Body'),
  vswitchId: string(name='VswitchId', description='This parameter is required.', example='vsw-uf8usrhs7hjd9amsXXXXX', position='Body'),
}

model CreateResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  resourceGroupOrder?: {
    id?: string(name='Id', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
    orderId?: long(name='OrderId', example='2391982058XXXXX'),
    orderInstanceId?: string(name='OrderInstanceId', example='c442b330-3b10-4584-959e-736e4edXXXXX'),
  }(name='ResourceGroupOrder'),
  success?: boolean(name='Success', example='true'),
}

model CreateResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateResourceGroup  CreateResourceGroupRequest
  * @return CreateResourceGroupResponse
 */
async function createResourceGroup(request: CreateResourceGroupRequest): CreateResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateResourceGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateRouteRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  destinationCidr: string(name='DestinationCidr', description='This parameter is required.', example='192.168.0.0/16', position='Body'),
  networkId: long(name='NetworkId', description='This parameter is required.', example='1000', position='Body'),
}

model CreateRouteResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  routeId?: long(name='RouteId', example='1000'),
  success?: boolean(name='Success', example='true'),
}

model CreateRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRouteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRoute  CreateRouteRequest
  * @return CreateRouteResponse
 */
async function createRoute(request: CreateRouteRequest): CreateRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRoute', 'POST', '/', 'json', true, 'form', request);
}

model CreateWorkflowDefinitionRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000', position='Body'),
  spec: string(name='Spec', description='The FlowSpec field information about the workflow. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow/).

This parameter is required.', position='Body'),
}

model CreateWorkflowDefinitionResponseBody = {
  id?: string(name='Id', description='The ID of the workflow.', example='463497880880954XXXX'),
  requestId?: string(name='RequestId', description='The request ID.', example='0EF298E5-0940-5AC7-9CB0-65025070XXXX'),
}

model CreateWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkflowDefinitionResponseBody(name='body'),
}

/**
  * @description > You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system creates only the first specified workflow. Other specified workflows and the nodes in the workflows are ignored. You can call the CreateNode operation to create a node.
  * @param request  the request parameters of CreateWorkflowDefinition  CreateWorkflowDefinitionRequest
  * @return CreateWorkflowDefinitionResponse
 */
async function createWorkflowDefinition(request: CreateWorkflowDefinitionRequest): CreateWorkflowDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWorkflowDefinition', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAlertRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  id?: long(name='Id', example='105412', position='Body'),
}

model DeleteAlertRuleResponseBody = {
  requestId?: string(name='RequestId', example='8754EE08-4AA2-5F77-ADD7-754DBBDA9F75'),
  success?: boolean(name='Success', example='true'),
}

model DeleteAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAlertRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAlertRule  DeleteAlertRuleRequest
  * @return DeleteAlertRuleResponse
 */
async function deleteAlertRule(request: DeleteAlertRuleRequest): DeleteAlertRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAlertRule', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDIAlarmRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  DIAlarmRuleId?: long(name='DIAlarmRuleId', description='The ID of the alert rule.', example='2', position='Query'),
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='1', position='Query'),
}

model DeleteDIAlarmRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='C99E2BE6-9DEA-5C2E-8F51-1DDCFEADE490'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteDIAlarmRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDIAlarmRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDIAlarmRule  DeleteDIAlarmRuleRequest
  * @return DeleteDIAlarmRuleResponse
 */
async function deleteDIAlarmRule(request: DeleteDIAlarmRuleRequest): DeleteDIAlarmRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDIAlarmRule', 'GET', '/', 'json', false, 'json', request);
}

model DeleteDIJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  DIJobId: long(name='DIJobId', description='This parameter is required.', example='11126', position='Query'),
  projectId?: long(name='ProjectId', position='Query'),
}

model DeleteDIJobResponseBody = {
  requestId?: string(name='RequestId', example='D33D4A51-5845-579A-B4BA-FAADD0F83D53'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDIJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDIJob  DeleteDIJobRequest
  * @return DeleteDIJobResponse
 */
async function deleteDIJob(request: DeleteDIJobRequest): DeleteDIJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDIJob', 'GET', '/', 'json', false, 'json', request);
}

model DeleteDataSourceRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id?: long(name='Id', example='1234', position='Query'),
}

model DeleteDataSourceResponseBody = {
  requestId?: string(name='RequestId', example='B56432E0-2112-5C97-88D0-AA0AE5C75C74'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDataSource  DeleteDataSourceRequest
  * @return DeleteDataSourceResponse
 */
async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataSource', 'GET', '/', 'json', false, 'json', request);
}

model DeleteDataSourceSharedRuleRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='22127', position='Query'),
}

model DeleteDataSourceSharedRuleResponseBody = {
  requestId?: string(name='RequestId', example='64B-587A-8CED-969E1973887FXXX-TT'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataSourceSharedRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceSharedRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDataSourceSharedRule  DeleteDataSourceSharedRuleRequest
  * @return DeleteDataSourceSharedRuleResponse
 */
async function deleteDataSourceSharedRule(request: DeleteDataSourceSharedRuleRequest): DeleteDataSourceSharedRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataSourceSharedRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFunctionRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the UDF.

This parameter is required.', example='860438872620113XXXX', position='Body'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000', position='Body'),
}

model DeleteFunctionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='88198F19-A36B-52A9-AE44-4518A688XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFunctionResponseBody(name='body'),
}

/**
  * @description >  A UDF that is deployed cannot be deleted. If you want to delete such a UDF, you must first undeploy the UDF.
  * @param request  the request parameters of DeleteFunction  DeleteFunctionRequest
  * @return DeleteFunctionResponse
 */
async function deleteFunction(request: DeleteFunctionRequest): DeleteFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFunction', 'POST', '/', 'json', true, 'form', request);
}

model DeleteNetworkRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='1000', position='Body'),
}

model DeleteNetworkResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', example='true'),
}

model DeleteNetworkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNetworkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteNetwork  DeleteNetworkRequest
  * @return DeleteNetworkResponse
 */
async function deleteNetwork(request: DeleteNetworkRequest): DeleteNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNetwork', 'POST', '/', 'json', true, 'form', request);
}

model DeleteNodeRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the node.

This parameter is required.', example='860438872620113XXXX', position='Body'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000', position='Body'),
}

model DeleteNodeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A1E54497-5122-505E-91C6-BAC14980XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true\\
false', example='true'),
}

model DeleteNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNodeResponseBody(name='body'),
}

/**
  * @description >  A node that is deployed cannot be deleted. If you want to delete such a node, you must first undeploy the node.
  * @param request  the request parameters of DeleteNode  DeleteNodeRequest
  * @return DeleteNodeResponse
 */
async function deleteNode(request: DeleteNodeRequest): DeleteNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNode', 'POST', '/', 'json', true, 'form', request);
}

model DeleteProjectRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='123456', position='Body'),
}

model DeleteProjectResponseBody = {
  requestId?: string(name='RequestId', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
}

model DeleteProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteProject  DeleteProjectRequest
  * @return DeleteProjectResponse
 */
async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProject', 'POST', '/', 'json', true, 'form', request);
}

model DeleteProjectMemberRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  projectId: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='534752', position='Body'),
  userId: string(name='UserId', description='The ID of the account used by the member in the workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console?spm=openapi-amp.newDocPublishment.0.0.51d7281fjgBRmo), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the ID of the account used by the member in the workspace.

This parameter is required.', example='123422344899', position='Body'),
}

model DeleteProjectMemberResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='1FF0465F-209C-5964-8F30-FAF21B677CC6'),
}

model DeleteProjectMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProjectMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteProjectMember  DeleteProjectMemberRequest
  * @return DeleteProjectMemberResponse
 */
async function deleteProjectMember(request: DeleteProjectMemberRequest): DeleteProjectMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProjectMember', 'POST', '/', 'json', true, 'form', request);
}

model DeleteResourceRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the file resource.

This parameter is required.', example='860438872620113XXXX', position='Body'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000', position='Body'),
}

model DeleteResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='88198F19-A36B-52A9-AE44-4518A688XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceResponseBody(name='body'),
}

/**
  * @description >  A file resource that is deployed cannot be deleted. If you want to delete such a file resource, you must first undeploy the file resource.
  * @param request  the request parameters of DeleteResource  DeleteResourceRequest
  * @return DeleteResourceResponse
 */
async function deleteResource(request: DeleteResourceRequest): DeleteResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteResource', 'POST', '/', 'json', true, 'form', request);
}

model DeleteResourceGroupRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the resource group.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX', position='Body'),
}

model DeleteResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model DeleteResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteResourceGroup  DeleteResourceGroupRequest
  * @return DeleteResourceGroupResponse
 */
async function deleteResourceGroup(request: DeleteResourceGroupRequest): DeleteResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteResourceGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteRouteRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='1000', position='Body'),
}

model DeleteRouteResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', example='true'),
}

model DeleteRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRouteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRoute  DeleteRouteRequest
  * @return DeleteRouteResponse
 */
async function deleteRoute(request: DeleteRouteRequest): DeleteRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRoute', 'POST', '/', 'json', true, 'form', request);
}

model DeleteTaskRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='1234', position='Query'),
  projectEnv?: string(name='ProjectEnv', example='Prod', position='Query'),
}

model DeleteTaskResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  success?: boolean(name='Success', example='true'),
}

model DeleteTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTask  DeleteTaskRequest
  * @return DeleteTaskResponse
 */
async function deleteTask(request: DeleteTaskRequest): DeleteTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteWorkflowDefinitionRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the workflow.

This parameter is required.', example='860438872620113XXXX', position='Body'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000', position='Body'),
}

model DeleteWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B17730C0-D959-548A-AE23-E754177CXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkflowDefinitionResponseBody(name='body'),
}

/**
  * @description >  A workflow that is deployed cannot be deleted. If you want to delete such a workflow, you must first undeploy the workflow.
  * @param request  the request parameters of DeleteWorkflowDefinition  DeleteWorkflowDefinitionRequest
  * @return DeleteWorkflowDefinitionResponse
 */
async function deleteWorkflowDefinition(request: DeleteWorkflowDefinitionRequest): DeleteWorkflowDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWorkflowDefinition', 'POST', '/', 'json', true, 'form', request);
}

model DissociateProjectFromResourceGroupRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  projectId: long(name='ProjectId', description='The ID of the workspace from which you want to disassociate the resource group.

This parameter is required.', example='1000', position='Body'),
  resourceGroupId: string(name='ResourceGroupId', description='The ID of the resource group.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX', position='Body'),
}

model DissociateProjectFromResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model DissociateProjectFromResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DissociateProjectFromResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DissociateProjectFromResourceGroup  DissociateProjectFromResourceGroupRequest
  * @return DissociateProjectFromResourceGroupResponse
 */
async function dissociateProjectFromResourceGroup(request: DissociateProjectFromResourceGroupRequest): DissociateProjectFromResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DissociateProjectFromResourceGroup', 'POST', '/', 'json', true, 'form', request);
}

model ExecDeploymentStageRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  code: string(name='Code', description='The code of the stage in the process. You can call the GetDeployment operation to query the code.

This parameter is required.', example='DEV_CHECK', position='Body'),
  id: string(name='Id', description='The ID of the process.

This parameter is required.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX', position='Body'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000', position='Query'),
}

model ExecDeploymentStageResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true

*   false

    **

    **Note:** The value of this parameter indicates only whether the stage is triggered but does not indicate whether the execution of the stage is successful.', example='true'),
}

model ExecDeploymentStageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecDeploymentStageResponseBody(name='body'),
}

/**
  * @description >  The stages in a process are sequential. For more information, see the GetDeployment operation. Skipping or repeating a stage is not allowed.
  * >  The execution of a stage is asynchronous. The response of this operation indicates only whether a stage is triggered but does not indicate whether the execution of the stage is successful. You can call the GetDeployment operation to check whether the execution is successful.
  * @param request  the request parameters of ExecDeploymentStage  ExecDeploymentStageRequest
  * @return ExecDeploymentStageResponse
 */
async function execDeploymentStage(request: ExecDeploymentStageRequest): ExecDeploymentStageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecDeploymentStage', 'POST', '/', 'json', true, 'form', request);
}

model GetAlertRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  id?: string(name='Id', example='28547072', position='Query'),
}

model GetAlertRuleResponseBody = {
  alertRule?: {
    enabled?: boolean(name='Enabled', example='true'),
    id?: long(name='Id', example='16035'),
    name?: string(name='Name', example='error_rule'),
    notification?: {
      channels?: [ string ](name='Channels'),
      intervalInMinutes?: int32(name='IntervalInMinutes', example='30'),
      maximum?: int32(name='Maximum', example='3'),
      receivers?: [ 
        {
          extension?: string(name='Extension', example='{"atAll":true}'),
          receiverType?: string(name='ReceiverType', example='WebhookUrl'),
          receiverValues?: [ string ](name='ReceiverValues'),
        }
      ](name='Receivers'),
      silenceEndTime?: string(name='SilenceEndTime', example='00:00:00'),
      silenceStartTime?: string(name='SilenceStartTime', example='00:00:00'),
    }(name='Notification'),
    owner?: string(name='Owner', example='279961421580845157'),
    triggerCondition?: {
      extension?: {
        cycleUnfinished?: {
          cycleAndTime?: [ 
            {
              cycleId?: int32(name='CycleId', example='1'),
              time?: string(name='Time', example='12:00'),
            }
          ](name='CycleAndTime'),
        }(name='CycleUnfinished'),
        error?: {
          autoRerunAlert?: boolean(name='AutoRerunAlert', example='false'),
          streamTaskIds?: [ long ](name='StreamTaskIds'),
        }(name='Error'),
        instanceErrorCount?: {
          count?: int32(name='Count', example='10'),
        }(name='InstanceErrorCount'),
        instanceErrorPercentage?: {
          percentage?: int32(name='Percentage', example='10'),
        }(name='InstanceErrorPercentage'),
        instanceTransferFluctuate?: {
          percentage?: int32(name='Percentage', example='10'),
          trend?: string(name='Trend', example='10'),
        }(name='InstanceTransferFluctuate'),
        timeout?: {
          timeoutInMinutes?: int32(name='TimeoutInMinutes', example='10'),
        }(name='Timeout'),
        unFinished?: {
          unFinishedTime?: string(name='UnFinishedTime', example='12:00'),
        }(name='UnFinished'),
      }(name='Extension'),
      target?: {
        allowTasks?: [ long ](name='AllowTasks'),
        ids?: [ long ](name='Ids'),
        type?: string(name='Type', example='Task'),
      }(name='Target'),
      type?: string(name='Type', example='Error'),
    }(name='TriggerCondition'),
  }(name='AlertRule'),
  requestId?: string(name='RequestId', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model GetAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlertRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAlertRule  GetAlertRuleRequest
  * @return GetAlertRuleResponse
 */
async function getAlertRule(request: GetAlertRuleRequest): GetAlertRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAlertRule', 'GET', '/', 'json', false, 'json', request);
}

model GetDIJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  DIJobId?: long(name='DIJobId', example='11588', position='Query'),
  projectId?: long(name='ProjectId', position='Query'),
  withDetails?: boolean(name='WithDetails', example='true', position='Query'),
}

model GetDIJobResponseBody = {
  pagingInfo?: {
    DIJobId?: string(name='DIJobId', example='32601'),
    description?: string(name='Description', example='description'),
    destinationDataSourceSettings?: [ 
      {
        dataSourceName?: string(name='DataSourceName', example='dw_mysql'),
      }
    ](name='DestinationDataSourceSettings'),
    destinationDataSourceType?: string(name='DestinationDataSourceType', example='Hologres'),
    jobName?: string(name='JobName', example='imp_ods_dms_det_dealer_info_df'),
    jobSettings?: {
      channelSettings?: string(name='ChannelSettings', example='{"structInfo":"MANAGED","storageType":"TEXTFILE","writeMode":"APPEND","partitionColumns":[{"columnName":"pt","columnType":"STRING","comment":""}],"fieldDelimiter":""}'),
      columnDataTypeSettings?: [ 
        {
          destinationDataType?: string(name='DestinationDataType', example='text'),
          sourceDataType?: string(name='SourceDataType', example='bigint'),
        }
      ](name='ColumnDataTypeSettings'),
      cycleScheduleSettings?: {
        cycleMigrationType?: string(name='CycleMigrationType', example='Full'),
        scheduleParameters?: string(name='ScheduleParameters', example='bizdate=$bizdate'),
      }(name='CycleScheduleSettings'),
      ddlHandlingSettings?: [ 
        {
          action?: string(name='Action', example='Ignore'),
          type?: string(name='Type', example='CreateTable'),
        }
      ](name='DdlHandlingSettings'),
      runtimeSettings?: [ 
        {
          name?: string(name='Name', example='runtime.offline.concurrent'),
          value?: string(name='Value', example='1'),
        }
      ](name='RuntimeSettings'),
    }(name='JobSettings'),
    jobStatus?: string(name='JobStatus'),
    migrationType?: string(name='MigrationType', example='FullAndRealtimeIncremental'),
    projectId?: long(name='ProjectId', example='98330'),
    resourceSettings?: {
      offlineResourceSettings?: {
        requestedCu?: double(name='RequestedCu', example='2.0'),
        resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='S_res_group_7708_1667792816832'),
      }(name='OfflineResourceSettings'),
      realtimeResourceSettings?: {
        requestedCu?: double(name='RequestedCu', example='2.0'),
        resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='S_res_group_235454102432001_1579085295030'),
      }(name='RealtimeResourceSettings'),
      scheduleResourceSettings?: {
        requestedCu?: double(name='RequestedCu', example='2.0'),
        resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='S_res_group_235454102432001_1718359176885'),
      }(name='ScheduleResourceSettings'),
    }(name='ResourceSettings'),
    sourceDataSourceSettings?: [ 
      {
        dataSourceName?: string(name='DataSourceName', example='dw_mysql'),
        dataSourceProperties?: {
          encoding?: string(name='Encoding', example='UTF-8'),
          timezone?: string(name='Timezone', example='GMT+8'),
        }(name='DataSourceProperties'),
      }
    ](name='SourceDataSourceSettings'),
    sourceDataSourceType?: string(name='SourceDataSourceType', example='Mysql'),
    tableMappings?: [ 
      {
        sourceObjectSelectionRules?: [ 
          {
            action?: string(name='Action', example='Include'),
            expression?: string(name='Expression', example='mysql_table_1'),
            expressionType?: string(name='ExpressionType', example='Exact'),
            objectType?: string(name='ObjectType', example='Table'),
          }
        ](name='SourceObjectSelectionRules'),
        transformationRules?: [ 
          {
            ruleActionType?: string(name='RuleActionType', example='AddColumn'),
            ruleName?: string(name='RuleName', example='rename_rule_1'),
            ruleTargetType?: string(name='RuleTargetType', example='Table'),
          }
        ](name='TransformationRules'),
      }
    ](name='TableMappings'),
    transformationRules?: [ 
      {
        ruleActionType?: string(name='RuleActionType', example='Rename'),
        ruleExpression?: string(name='RuleExpression', example='{"expression":"${srcDatasoureName}_${srcDatabaseName}"}'),
        ruleName?: string(name='RuleName', example='rename_rule_1'),
        ruleTargetType?: string(name='RuleTargetType', example='Table'),
      }
    ](name='TransformationRules'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', description='代表创建时间的资源属性字段', example='C99E2BE6-9DEA-5C2E-8F51-1DDCFEADE490'),
}

model GetDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDIJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDIJob  GetDIJobRequest
  * @return GetDIJobResponse
 */
async function getDIJob(request: GetDIJobRequest): GetDIJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDIJob', 'GET', '/', 'json', false, 'json', request);
}

model GetDIJobLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  DIJobId: long(name='DIJobId', description='The ID of the synchronization task.

This parameter is required.', example='10000', position='Query'),
  failoverId?: long(name='FailoverId', description='The failover ID.', example='10', position='Query'),
  instanceId?: long(name='InstanceId', description='The instance ID.', example='6153616438', position='Query'),
}

model GetDIJobLogResponseBody = {
  log?: string(name='Log', description='The log.', example='>>>>>>>> stdout:n++++++++++++++++++executing sql: create database if not exists jindo_test location \\"oss://pangbei-hdfs/tmp/hive\\" n++n'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='1AFAE64E-D1BE-432B-A9****'),
}

model GetDIJobLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDIJobLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDIJobLog  GetDIJobLogRequest
  * @return GetDIJobLogResponse
 */
async function getDIJobLog(request: GetDIJobLogRequest): GetDIJobLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDIJobLog', 'GET', '/', 'json', false, 'json', request);
}

model GetDataSourceRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: long(name='Id', description='The data source ID.

This parameter is required.', example='16035', position='Query'),
}

model GetDataSourceResponseBody = {
  dataSource?: {
    connectionProperties?: any(name='ConnectionProperties', description='The connection properties of the data source.', example='{
	"envType": "Prod",
	"regionId": "cn-beijing",
    "instanceId": "hgprecn-cn-x0r3oun4k001",
    "database": "testdb",
    "securityProtocol": "authTypeNone",
    "authType": "Executor",
    "authIdentity": "1107550004253538"
}'),
    connectionPropertiesMode?: string(name='ConnectionPropertiesMode', description='The mode in which the data source is added. The mode varies based on the data source type. Valid values:

*   InstanceMode: instance mode
*   UrlMode: connection string mode
*   CdhMode: CDH cluster mode', example='UrlMode'),
    createTime?: long(name='CreateTime', description='The time when the data source was added. This value is a UNIX timestamp.', example='1698286929333'),
    createUser?: string(name='CreateUser', description='The ID of the user who adds the data source.', example='1107550004253538'),
    description?: string(name='Description', description='The description of the data source.', example='test'),
    id?: long(name='Id', description='The data source ID.', example='16738'),
    modifyTime?: long(name='ModifyTime', description='The time when the data source was last modified. This value is a UNIX timestamp.', example='1698286929333'),
    modifyUser?: string(name='ModifyUser', description='The ID of the user who modifies the data source.', example='1107550004253538'),
    name?: string(name='Name', description='The name of the data source.', example='test'),
    projectId?: long(name='ProjectId', description='The ID of the workspace with which the data source is associated.', example='52660'),
    qualifiedName?: string(name='QualifiedName', description='The unique business key of the data source. For example, the unique business key of a Hologres data source is in the ${tenantOwnerId}:${regionId}:${type}:${instanceId}:${database} format.', example='1107550004253538:cn-beijing:holo:hgprecn-cn-x0r3oun4k001:testdb'),
    type?: string(name='Type', description='The type of the data source.', example='hologres'),
  }(name='DataSource'),
  requestId?: string(name='RequestId', description='The request ID.', example='9252F32F-D855-549E-8898-61CF5A733050'),
}

model GetDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataSourceResponseBody(name='body'),
}

/**
  * @description You can call this operation only if you are assigned one of the following roles in DataWorks:
  * *   Tenant Owner, Workspace Administrator, Deployment, Development, Project Owner, and O\\&M
  * @param request  the request parameters of GetDataSource  GetDataSourceRequest
  * @return GetDataSourceResponse
 */
async function getDataSource(request: GetDataSourceRequest): GetDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataSource', 'GET', '/', 'json', false, 'json', request);
}

model GetDeploymentRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the process.

This parameter is required.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX', position='Query'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000', position='Query'),
}

model GetDeploymentResponseBody = {
  pipeline?: {
    createTime?: long(name='CreateTime', description='The time when the process was created. This value is a UNIX timestamp.', example='1724984066000'),
    creator?: string(name='Creator', description='The creator of the process.', example='137946317766XXXX'),
    id?: string(name='Id', description='The ID of the process.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX'),
    message?: string(name='Message', description='The error message returned when the process fails.'),
    modifyTime?: long(name='ModifyTime', description='The time when the process was modified. This value is a UNIX timestamp.', example='1724984066000'),
    projectId?: string(name='ProjectId', description='The DataWorks workspace ID.', example='56160'),
    stages?: [ 
      {
        code?: string(name='Code', description='The code of the stage.', example='DEV_CHECK'),
        description?: string(name='Description', description='The description of the stage.'),
        detail?: map[string]any(name='Detail', description='The details of the stage.'),
        message?: string(name='Message', description='The error message returned for the stage.'),
        name?: string(name='Name', description='The name of the stage.'),
        status?: string(name='Status', description='The status of the stage.

Valid values:

*   INIT
*   RUNNING
*   SUCCESS
*   FAIL
*   TERMINATION
*   CANCEL', example='INIT'),
        step?: int32(name='Step', description='The step number of the stage.', example='1'),
        type?: string(name='Type', description='The type of the stage.

Valid values:

*   DELETE
*   BUILD
*   CHECK
*   DEPLOY
*   OFFLINE', example='BUILD'),
      }
    ](name='Stages', description='The information about stages in the process.'),
    status?: string(name='Status', description='The status of the process.

Valid values:

*   INIT
*   RUNNING
*   SUCCESS
*   FAIL
*   TERMINATION
*   CANCEL', example='RUNNING'),
  }(name='Pipeline', description='The information about the process.'),
  requestId?: string(name='RequestId', description='The request ID.', example='08468352-032C-5262-AEDC-68C9FA05XXXX'),
}

model GetDeploymentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeploymentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDeployment  GetDeploymentRequest
  * @return GetDeploymentResponse
 */
async function getDeployment(request: GetDeploymentRequest): GetDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeployment', 'GET', '/', 'json', false, 'json', request);
}

model GetFunctionRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the UDF.

This parameter is required.', example='860438872620113XXXX', position='Query'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000', position='Query'),
}

model GetFunctionResponseBody = {
  function?: {
    createTime?: long(name='CreateTime', description='The time when the UDF was created. This value is a UNIX timestamp.', example='1724505917000'),
    id?: string(name='Id', description='The ID of the UDF.', example='860438872620113XXXX'),
    modifyTime?: long(name='ModifyTime', description='The time when the UDF was last modified. This value is a UNIX timestamp.', example='1724506661000'),
    name?: string(name='Name', description='The name of the UDF.'),
    owner?: string(name='Owner', description='The owner of the UDF.', example='110755000425XXXX'),
    projectId?: string(name='ProjectId', description='The ID of the DataWorks workspace to which the UDF belongs.', example='10000'),
    spec?: string(name='Spec', description='The FlowSpec field information about the UDF. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).'),
  }(name='Function', description='The information about the UDF.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6CF95929-6D12-5A88-8CC3-4B2F4C2EXXXX'),
}

model GetFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFunctionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetFunction  GetFunctionRequest
  * @return GetFunctionResponse
 */
async function getFunction(request: GetFunctionRequest): GetFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFunction', 'GET', '/', 'json', false, 'json', request);
}

model GetJobStatusRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  jobId: string(name='JobId', description='This parameter is required.', example='70ecdaec-bf21-4c11-8ecb-4f77453ceea8', position='Query'),
}

model GetJobStatusResponseBody = {
  jobStatus?: {
    completed?: string(name='Completed', example='False'),
    createTime?: string(name='CreateTime', example='1729063449802'),
    error?: string(name='Error', example='Not Found'),
    jobId?: string(name='JobId', example='C664CDE3-9C0B-5792-B17F-6C543783BBBC'),
    jobType?: string(name='JobType', example='Create'),
    status?: string(name='Status', example='Success'),
  }(name='JobStatus'),
  requestId?: string(name='RequestId', example='5E2BFE96-C0E0-5A98-85C8-633EC803198D'),
}

model GetJobStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetJobStatus  GetJobStatusRequest
  * @return GetJobStatusResponse
 */
async function getJobStatus(request: GetJobStatusRequest): GetJobStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJobStatus', 'GET', '/', 'json', false, 'json', request);
}

model GetNetworkRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='1000', position='Query'),
}

model GetNetworkResponseBody = {
  network?: {
    createTime?: long(name='CreateTime', example='1727055811000'),
    createUser?: string(name='CreateUser', example='11075500042XXXXX'),
    id?: long(name='Id', example='1000'),
    resourceGroupId?: string(name='ResourceGroupId', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
    securityGroupId?: string(name='SecurityGroupId', example='sg-2ze13vamugr7jenXXXXX'),
    status?: string(name='Status', example='Running'),
    vpcId?: string(name='VpcId', example='vpc-m2et4f3oc8msfbccXXXXX'),
    vswitchId?: string(name='VswitchId', example='vsw-uf8usrhs7hjd9amsXXXXX'),
  }(name='Network'),
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', example='true'),
}

model GetNetworkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNetworkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetNetwork  GetNetworkRequest
  * @return GetNetworkResponse
 */
async function getNetwork(request: GetNetworkRequest): GetNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNetwork', 'GET', '/', 'json', false, 'json', request);
}

model GetNodeRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the node.

This parameter is required.', example='860438872620113XXXX', position='Query'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000', position='Query'),
}

model GetNodeResponseBody = {
  node?: {
    createTime?: long(name='CreateTime', description='The time when the node was created. This value is a UNIX timestamp.', example='1700539206000'),
    id?: string(name='Id', description='The ID of the node.', example='860438872620113XXXX'),
    modifyTime?: long(name='ModifyTime', description='The time when the node was last modified. This value is a UNIX timestamp.', example='1700539206000'),
    name?: string(name='Name', description='The name of the node.'),
    owner?: string(name='Owner', description='The owner of the node.', example='196596664824XXXX'),
    projectId?: string(name='ProjectId', description='The DataWorks workspace ID.', example='10000'),
    spec?: string(name='Spec', description='The FlowSpec field information about this node. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow).'),
  }(name='Node', description='The information about the node.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model GetNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetNode  GetNodeRequest
  * @return GetNodeResponse
 */
async function getNode(request: GetNodeRequest): GetNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNode', 'GET', '/', 'json', false, 'json', request);
}

model GetProjectRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: long(name='Id', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='123456', position='Query'),
}

model GetProjectResponseBody = {
  project?: {
    aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='The ID of the Alibaba Cloud resource group to which the workspace belongs.', example='rg-acfmzbn7pti3zfa'),
    aliyunResourceTags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='batch'),
        value?: string(name='Value', description='The tag value.', example='blue'),
      }
    ](name='AliyunResourceTags', description='The tags.'),
    description?: string(name='Description', description='The description of the workspace.'),
    devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', description='Indicates whether the development environment is enabled. Valid values:

*   true: The development environment is enabled. In this case, the development environment is isolated from the production environment in the workspace.
*   false: The development environment is disabled. In this case, only the production environment is used in the workspace.', example='true'),
    devRoleDisabled?: boolean(name='DevRoleDisabled', description='Indicates whether the Develop role is disabled. Valid values:

*   false
*   true', example='false'),
    displayName?: string(name='DisplayName', description='The display name of the workspace.'),
    id?: long(name='Id', description='The workspace ID.', example='28477242'),
    name?: string(name='Name', description='The name of the workspace.', example='sora_finance'),
    owner?: string(name='Owner', description='The ID of the Alibaba Cloud account to which the workspace belongs.', example='207947397706614299'),
    paiTaskEnabled?: boolean(name='PaiTaskEnabled', description='Indicates whether scheduling of Platform for AI (PAI) tasks is enabled. Valid values:

*   true: Scheduling of PAI tasks is enabled. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
*   false: Scheduling of PAI tasks is disabled.', example='true'),
    status?: string(name='Status', description='The status of the workspace. Valid values:

*   Available
*   Initializing
*   InitFailed
*   Forbidden
*   Deleting
*   DeleteFailed
*   Frozen
*   Updating
*   UpdateFailed

<!---->

*
*
*
*
*
*
*
*
*', example='Available'),
  }(name='Project', description='The information about the workspace.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model GetProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetProject  GetProjectRequest
  * @return GetProjectResponse
 */
async function getProject(request: GetProjectRequest): GetProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProject', 'GET', '/', 'json', false, 'json', request);
}

model GetProjectMemberRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  projectId: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='88757', position='Body'),
  userId: string(name='UserId', description='The ID of the account used by the member in the workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console?spm=openapi-amp.newDocPublishment.0.0.39e9281f3mhq4J), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the ID of the account used by the member in the workspace.

This parameter is required.', example='123422344899', position='Body'),
}

model GetProjectMemberResponseBody = {
  projectMember?: {
    projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='88757'),
    roles?: [ 
      {
        code?: string(name='Code', description='The code of the role. Valid values:

*   role_project_admin: Workspace Administrator
*   role_project_dev: Develop
*   role_project_dg_admin: Data Governance Administrator
*   role_project_guest: Visitor
*   role_project_security: Security Administrator
*   role_project_deploy: Deploy
*   role_project_owner: Workspace Owner
*   role_project_data_analyst: Data Analyst
*   role_project_pe: O\\&M
*   role_project_erd: Model Designer', example='role_project_guest'),
        name?: string(name='Name', description='The name of the role.'),
        type?: string(name='Type', description='The type of the role. Valid values:

*   UserCustom: custom role
*   System: built-in role', example='System'),
      }
    ](name='Roles', description='The roles that are assigned to the member in the workspace.'),
    status?: string(name='Status', description='The status of the member.

*   Normal
*   Forbidden', example='Normal'),
    userId?: string(name='UserId', description='The ID of the account used by the member in the workspace.', example='123422344899'),
  }(name='ProjectMember', description='The details about the member in the workspace.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model GetProjectMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetProjectMember  GetProjectMemberRequest
  * @return GetProjectMemberResponse
 */
async function getProjectMember(request: GetProjectMemberRequest): GetProjectMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProjectMember', 'POST', '/', 'json', true, 'form', request);
}

model GetProjectRoleRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  code: string(name='Code', description='This parameter is required.', example='role_project_guest', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='10002', position='Query'),
}

model GetProjectRoleResponseBody = {
  projectRole?: {
    code?: string(name='Code', example='role_project_guest'),
    name?: string(name='Name'),
    projectId?: long(name='ProjectId', example='10002'),
    type?: string(name='Type', example='System'),
  }(name='ProjectRole'),
  requestId?: string(name='RequestId', example='82F28E60-CF48-5EDF-AB25-D806847B97D1'),
}

model GetProjectRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetProjectRole  GetProjectRoleRequest
  * @return GetProjectRoleResponse
 */
async function getProjectRole(request: GetProjectRoleRequest): GetProjectRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProjectRole', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the file resource.

This parameter is required.', example='860438872620113XXXX', position='Query'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000', position='Query'),
}

model GetResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='E871F6C0-2EFF-5790-A00D-C57543EEXXXX'),
  resource?: {
    createTime?: long(name='CreateTime', description='The time when the file resource was created. This value is a UNIX timestamp.', example='1700539206000'),
    id?: string(name='Id', description='The ID of the file resource.', example='860438872620113XXXX'),
    modifyTime?: long(name='ModifyTime', description='The time when the file resource was last modified. This value is a UNIX timestamp.', example='1700539206000'),
    name?: string(name='Name', description='The name of the file resource.'),
    owner?: string(name='Owner', description='The owner of the file resource.', example='110755000425XXXX'),
    projectId?: string(name='ProjectId', description='The ID of the workspace to which the file resource belongs.', example='10000'),
    spec?: string(name='Spec', description='The FlowSpec field information about the file resource. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow).'),
  }(name='Resource', description='The information about the file resource.'),
}

model GetResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetResource  GetResourceRequest
  * @return GetResourceResponse
 */
async function getResource(request: GetResourceRequest): GetResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResource', 'GET', '/', 'json', false, 'json', request);
}

model GetResourceGroupRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX', position='Query'),
}

model GetResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  resourceGroup?: {
    createTime?: long(name='CreateTime', example='1727055811000'),
    createUser?: string(name='CreateUser', example='11075500042XXXXX'),
    defaultVpcId?: string(name='DefaultVpcId', example='vpc-m2et4f3oc8msfbccXXXXX'),
    defaultVswitchId?: string(name='DefaultVswitchId', example='vsw-uf8usrhs7hjd9amsXXXXX'),
    id?: string(name='Id', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
    name?: string(name='Name', example='common_resource_group'),
    orderInstanceId?: string(name='OrderInstanceId', example='c442b330-3b10-4584-959e-736e4edXXXXX'),
    paymentType?: string(name='PaymentType', example='PrePaid'),
    remark?: string(name='Remark', example='创建用于普通任务的通用资源组'),
    resourceGroupType?: string(name='ResourceGroupType', example='CommonV2'),
    spec?: {
      amount?: int32(name='Amount', example='1'),
      standard?: string(name='Standard', example='2CU'),
    }(name='Spec'),
    status?: string(name='Status', example='Normal'),
  }(name='ResourceGroup'),
  success?: boolean(name='Success', example='true'),
}

model GetResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetResourceGroup  GetResourceGroupRequest
  * @return GetResourceGroupResponse
 */
async function getResourceGroup(request: GetResourceGroupRequest): GetResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceGroup', 'GET', '/', 'json', false, 'json', request);
}

model GetRouteRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='1000', position='Query'),
}

model GetRouteResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  route?: {
    createTime?: long(name='CreateTime', example='1727055811000'),
    destinationCidr?: string(name='DestinationCidr', example='192.168.0.0/16'),
    id?: long(name='Id', example='1000'),
    networkId?: long(name='NetworkId', example='1000'),
    resourceGroupId?: string(name='ResourceGroupId', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
    resourceId?: string(name='ResourceId', example='ns-679XXXXX'),
  }(name='Route'),
  success?: boolean(name='Success', example='true'),
}

model GetRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRouteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRoute  GetRouteRequest
  * @return GetRouteResponse
 */
async function getRoute(request: GetRouteRequest): GetRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRoute', 'GET', '/', 'json', false, 'json', request);
}

model GetTaskRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='1234', position='Query'),
  projectEnv?: string(name='ProjectEnv', example='Prod', position='Query'),
}

model GetTaskResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  task?: {
    baselineId?: long(name='BaselineId', example='1234'),
    createTime?: long(name='CreateTime', example='1710239005403'),
    createUser?: string(name='CreateUser', example='1000'),
    dataSource?: {
      name?: string(name='Name', example='mysql_test'),
    }(name='DataSource'),
    dependencies?: [ 
      {
        type?: string(name='Type', example='Normal'),
        upstreamOutput?: string(name='UpstreamOutput'),
        upstreamTaskId?: string(name='UpstreamTaskId'),
      }
    ](name='Dependencies'),
    description?: string(name='Description', example='test'),
    id?: long(name='Id', example='1234'),
    inputs?: {
      variables?: [ 
        {
          name?: string(name='Name', example='key1'),
          type?: string(name='Type', example='Constant'),
          value?: string(name='Value', example='Value1'),
        }
      ](name='Variables'),
    }(name='Inputs'),
    instanceMode?: string(name='InstanceMode'),
    modifyTime?: long(name='ModifyTime', example='1710239005403'),
    modifyUser?: string(name='ModifyUser', example='1000'),
    name?: string(name='Name'),
    outputs?: {
      taskOutputs?: [ 
        {
          output?: string(name='Output', example='pre.odps_sql_demo_0'),
        }
      ](name='TaskOutputs'),
      variables?: [ 
        {
          name?: string(name='Name', example='key1'),
          type?: string(name='Type', example='Constant'),
          value?: string(name='Value', example='value1'),
        }
      ](name='Variables'),
    }(name='Outputs'),
    owner?: string(name='Owner', example='1000'),
    priority?: int32(name='Priority', example='1'),
    projectEnv?: string(name='ProjectEnv', example='Prod'),
    projectId?: long(name='ProjectId', example='100'),
    rerunInterval?: int32(name='RerunInterval', example='60'),
    rerunMode?: string(name='RerunMode', example='AllAllowed'),
    rerunTimes?: int32(name='RerunTimes', example='3'),
    runtimeResource?: {
      cu?: string(name='Cu', example='0.25'),
      image?: string(name='Image', example='i-xxxxxx'),
      resourceGroupId?: string(name='ResourceGroupId', example='S_res_group_524258031846018_1684XXXXXXXXX'),
    }(name='RuntimeResource'),
    script?: {
      content?: string(name='Content', example='echo "helloWorld"'),
      parameters?: string(name='Parameters', example='para1=$bizdate'),
    }(name='Script'),
    subTasks?: {
      subTasks?: [ 
        {
          baselineId?: long(name='BaselineId'),
          createTime?: long(name='CreateTime', example='1710239005403'),
          createUser?: string(name='CreateUser', example='1000'),
          dataSource?: {
            name?: string(name='Name', example='mysql_test'),
          }(name='DataSource'),
          description?: string(name='Description', example='test'),
          id?: long(name='Id', example='1234'),
          modifyTime?: long(name='ModifyTime', example='1710239005403'),
          modifyUser?: string(name='ModifyUser', example='1000'),
          name?: string(name='Name'),
          owner?: string(name='Owner', example='1000'),
          priority?: int32(name='Priority', example='1'),
          projectEnv?: string(name='ProjectEnv', example='Prod'),
          projectId?: long(name='ProjectId', example='100'),
          rerunInterval?: int32(name='RerunInterval', example='180'),
          rerunMode?: string(name='RerunMode', example='AllAllowed'),
          rerunTimes?: int32(name='RerunTimes', example='3'),
          runtimeResource?: {
            cu?: string(name='Cu', example='0.25'),
            image?: string(name='Image', example='i-xxxxxx'),
            resourceGroupId?: string(name='ResourceGroupId', example='S_res_group_524258031846018_1684XXXXXXXXX'),
          }(name='RuntimeResource'),
          tenantId?: long(name='TenantId', example='1'),
          timeout?: int32(name='Timeout', example='3600'),
          trigger?: {
            cron?: string(name='Cron', example='00 00 00 * * ?'),
            endTime?: string(name='EndTime', example='9999-01-01 00:00:00'),
            recurrence?: string(name='Recurrence', example='Normal'),
            startTime?: string(name='StartTime', example='1970-01-01 00:00:00'),
            type?: string(name='Type', example='Scheduler'),
          }(name='Trigger'),
          type?: string(name='Type', example='ODPS_SQL'),
          workflowId?: long(name='WorkflowId', example='1234'),
        }
      ](name='SubTasks'),
      type?: string(name='Type', example='Combined'),
    }(name='SubTasks'),
    tags?: [ 
      {
        key?: string(name='Key', example='key1'),
        value?: string(name='Value', example='value1'),
      }
    ](name='Tags'),
    tenantId?: long(name='TenantId', example='1'),
    timeout?: int32(name='Timeout', example='3600'),
    trigger?: {
      cron?: string(name='Cron', example='00 00 00 * * ?'),
      endTime?: string(name='EndTime', example='9999-01-01 00:00:00'),
      recurrence?: string(name='Recurrence', example='Normal'),
      startTime?: string(name='StartTime', example='1970-01-01 00:00:00'),
      type?: string(name='Type', example='Scheduler'),
    }(name='Trigger'),
    type?: string(name='Type', example='ODPS_SQL'),
    workflowId?: long(name='WorkflowId', example='1234'),
  }(name='Task'),
}

model GetTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTask  GetTaskRequest
  * @return GetTaskResponse
 */
async function getTask(request: GetTaskRequest): GetTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTask', 'GET', '/', 'json', false, 'json', request);
}

model GetTaskInstanceRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: long(name='Id', description='The instance ID.

This parameter is required.', example='1234', position='Query'),
}

model GetTaskInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  taskInstance?: {
    baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
    bizdate?: long(name='Bizdate', description='The data timestamp.', example='1710239005403'),
    createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
    createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
    dataSource?: {
      name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
    }(name='DataSource', description='The information about the associated data source.'),
    description?: string(name='Description', description='The description.', example='test'),
    finishedTime?: long(name='FinishedTime', description='The time when the instance finished running.', example='1710239005403'),
    id?: long(name='Id', description='The instance ID.', example='1234'),
    inputs?: {
      variables?: [ 
        {
          name?: string(name='Name', description='The name of the variable.', example='Key1'),
          type?: string(name='Type', description='The type. Valid values:

*   Constant: constant
*   PassThrough: node output
*   System: variable
*   NodeOutput: script output', example='Constant'),
          value?: string(name='Value', description='The value of the variable.', example='Value1'),
        }
      ](name='Variables', description='The variables.'),
    }(name='Inputs', description='The input information.'),
    modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
    modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
    outputs?: {
      taskOutputs?: [ 
        {
          output?: string(name='Output', description='The output identifier.', example='pre.odps_sql_demo_0'),
        }
      ](name='TaskOutputs', description='The task outputs.'),
      variables?: [ 
        {
          name?: string(name='Name', description='The name of the variable.', example='key1'),
          type?: string(name='Type', description='The type. Valid values:

*   Constant: constant
*   PassThrough: node output
*   System: variable
*   NodeOutput: script output', example='Constant'),
          value?: string(name='Value', description='The value of the variable.', example='value1'),
        }
      ](name='Variables', description='The variables.'),
    }(name='Outputs', description='The output information.'),
    owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
    periodNumber?: int32(name='PeriodNumber'),
    priority?: int32(name='Priority', description='The task priority. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
    projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
    projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
    rerunMode?: string(name='RerunMode', description='The rerun mode. Valid values:

*   AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
*   AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.', example='AllAllowed'),
    runNumber?: int32(name='RunNumber', description='The number of times the instance is run. By default, the value starts from 1.', example='1'),
    runtime?: {
      gateway?: string(name='Gateway', description='The host for running.', example='cn-shanghai.1.2'),
      processId?: string(name='ProcessId', description='The instance run ID.', example='T3_123'),
    }(name='Runtime', description='The runtime information about the instance.'),
    runtimeResource?: {
      cu?: string(name='Cu', description='The default number of CUs configured for task running.', example='0.25'),
      image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
    }(name='RuntimeResource', description='The information about the resource group with which the instance is associated.'),
    script?: {
      content?: string(name='Content', description='The script content.', example='echo "helloWorld"'),
      parameters?: string(name='Parameters', description='The script parameters.', example='para1=$bizdate'),
    }(name='Script', description='The script information.'),
    startedTime?: long(name='StartedTime', description='The time when the instance started to run.', example='1710239005403'),
    status?: string(name='Status', description='The status of the instance. Valid values:

*   NotRun: The instance is not run.
*   Running: The instance is running.
*   WaitTime: The instance is waiting for the scheduling time to arrive.
*   CheckingCondition: Branch conditions are being checked for the instance.
*   WaitResource: The instance is waiting for resources.
*   Failure: The instance fails to be run.
*   Success: The instance is successfully run.
*   Checking: Data quality is being checked for the instance.', example='Success'),
    tags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='key1'),
        value?: string(name='Value', description='The tag value.', example='value1'),
      }
    ](name='Tags', description='The tags of the task.'),
    taskId?: long(name='TaskId', description='The ID of the task for which the instance is generated.', example='1234'),
    taskName?: string(name='TaskName', description='The name of the task for which the instance is generated.'),
    taskType?: string(name='TaskType', description='The type of the task for which the instance is generated.', example='ODPS_SQL'),
    tenantId?: long(name='TenantId', description='The tenant ID.', example='1'),
    timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='1'),
    triggerRecurrence?: string(name='TriggerRecurrence', description='The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler. Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
    triggerTime?: long(name='TriggerTime', description='The scheduling time.', example='1710239005403'),
    triggerType?: string(name='TriggerType', description='The method to trigger instance scheduling. The value of the Trigger.Type parameter in the response of the GetTask operation is used. Valid values:

*   Scheduler
*   Manual', example='Scheduler'),
    workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs.', example='1234'),
    workflowInstanceId?: long(name='WorkflowInstanceId', description='The workflow instance ID.', example='1234'),
    workflowInstanceType?: string(name='WorkflowInstanceType', description='The type of the workflow instance. Valid values:

*   SmokeTest
*   SupplementData
*   Manual
*   ManualWorkflow
*   Normal
*   ManualFlow', example='Normal'),
    workflowName?: string(name='WorkflowName', description='The name of the workflow to which the instance belongs.'),
  }(name='TaskInstance', description='The details of the instance.'),
}

model GetTaskInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTaskInstance  GetTaskInstanceRequest
  * @return GetTaskInstanceResponse
 */
async function getTaskInstance(request: GetTaskInstanceRequest): GetTaskInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTaskInstance', 'GET', '/', 'json', false, 'json', request);
}

model GetTaskInstanceLogRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='1234', position='Query'),
  runNumber?: int32(name='RunNumber', example='1', position='Query'),
}

model GetTaskInstanceLogResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  taskInstanceLog?: string(name='TaskInstanceLog', example='This is running log'),
}

model GetTaskInstanceLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskInstanceLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTaskInstanceLog  GetTaskInstanceLogRequest
  * @return GetTaskInstanceLogResponse
 */
async function getTaskInstanceLog(request: GetTaskInstanceLogRequest): GetTaskInstanceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTaskInstanceLog', 'GET', '/', 'json', false, 'json', request);
}

model GetWorkflowDefinitionRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the workflow.

This parameter is required.', example='860438872620113XXXX', position='Query'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000', position='Query'),
}

model GetWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F2BDD628-8A21-5BD1-B930-1A2D5989XXXX'),
  workflowDefinition?: {
    createTime?: long(name='CreateTime', description='The time when the workflow was created. This value is a UNIX timestamp.', example='1708481905000'),
    id?: string(name='Id', description='The ID of the workflow.', example='463497880880954XXXX'),
    modifyTime?: long(name='ModifyTime', description='The time when the workflow was last modified. This value is a UNIX timestamp.', example='1708481905000'),
    name?: string(name='Name', description='The name of the workflow.'),
    owner?: string(name='Owner', description='The owner of the workflow.', example='110755000425XXXX'),
    projectId?: string(name='ProjectId', description='The ID of the workspace to which the workflow belongs.', example='307XXX'),
    spec?: string(name='Spec', description='The FlowSpec field information about the workflow. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow/).'),
  }(name='WorkflowDefinition', description='The information about the workflow.'),
}

model GetWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkflowDefinitionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetWorkflowDefinition  GetWorkflowDefinitionRequest
  * @return GetWorkflowDefinitionResponse
 */
async function getWorkflowDefinition(request: GetWorkflowDefinitionRequest): GetWorkflowDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWorkflowDefinition', 'GET', '/', 'json', false, 'json', request);
}

model GrantMemberProjectRolesRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  projectId: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='105149', position='Body'),
  roleCodes: [ string ](name='RoleCodes', description='The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/zh/dataworks/developer-reference/api-dataworks-public-2024-05-18-listprojectroles?spm=a2c4g.11186623.0.0.43841daeywTtF3) operation to query the codes of all roles in the workspace.

You must configure this parameter to specify the roles that you want to assign to members in the workspace.

This parameter is required.', shrink='json', position='Body'),
  userId: string(name='UserId', description='The IDs of the accounts used by the members in the workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console?spm=openapi-amp.newDocPublishment.0.0.51d7281fjgBRmo), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the IDs of the accounts used by the members in the workspace.

This parameter is required.', example='123422344899', position='Body'),
}

model GrantMemberProjectRolesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='2d9ced66-38ef-4923-baf6-391dd3a7e656'),
}

model GrantMemberProjectRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantMemberProjectRolesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GrantMemberProjectRoles  GrantMemberProjectRolesRequest
  * @return GrantMemberProjectRolesResponse
 */
async function grantMemberProjectRoles(request: GrantMemberProjectRolesRequest): GrantMemberProjectRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantMemberProjectRoles', 'POST', '/', 'json', true, 'form', request);
}

model ImportWorkflowDefinitionRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  projectId: string(name='ProjectId', description='This parameter is required.', example='123456', position='Body'),
  spec: string(name='Spec', description='This parameter is required.', position='Body'),
}

model ImportWorkflowDefinitionResponseBody = {
  asyncJob?: {
    completed?: boolean(name='Completed', example='false'),
    createTime?: long(name='CreateTime', example='1706581425000'),
    error?: string(name='Error', example='target folder already exists: XXXX'),
    id?: string(name='Id', example='1234567691239009XXXX'),
    progress?: int32(name='Progress', example='0'),
    response?: string(name='Response', example='632647691239009XXXX'),
    status?: string(name='Status', example='Running'),
    type?: string(name='Type', example='Create'),
  }(name='AsyncJob'),
  requestId?: string(name='RequestId', example='7C352CB7-CD88-50CF-9D0D-E81BDF020E7F'),
}

model ImportWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportWorkflowDefinitionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ImportWorkflowDefinition  ImportWorkflowDefinitionRequest
  * @return ImportWorkflowDefinitionResponse
 */
async function importWorkflowDefinition(request: ImportWorkflowDefinitionRequest): ImportWorkflowDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportWorkflowDefinition', 'POST', '/', 'json', true, 'form', request);
}

model ListAlertRulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  name?: string(name='Name', example='error_rule', position='Query'),
  owner?: string(name='Owner', example='1933790683****', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='10', maximum=100, position='Query'),
  receiver?: string(name='Receiver', example='1933790683****', position='Query'),
  taskIds?: [ long ](name='TaskIds', shrink='json', position='Query'),
  types?: [ string ](name='Types', shrink='json', position='Query'),
}

model ListAlertRulesResponseBody = {
  pagingInfo?: {
    alertRules?: [ 
      {
        enabled?: boolean(name='Enabled', example='true'),
        id?: long(name='Id', example='22125'),
        name?: string(name='Name', example='error_test'),
        owner?: string(name='Owner', example='1933790683****'),
        triggerCondition?: {
          extension?: {
            cycleUnfinished?: {
              cycleAndTime?: [ 
                {
                  cycleId?: int32(name='CycleId', example='1'),
                  time?: string(name='Time', example='01:00'),
                }
              ](name='CycleAndTime'),
            }(name='CycleUnfinished'),
            error?: {
              autoRerunAlert?: boolean(name='AutoRerunAlert', example='false'),
              streamTaskIds?: [ long ](name='StreamTaskIds'),
            }(name='Error'),
            instanceErrorCount?: {
              count?: int32(name='Count', example='10'),
            }(name='InstanceErrorCount'),
            instanceErrorPercentage?: {
              percentage?: int32(name='Percentage', example='10'),
            }(name='InstanceErrorPercentage'),
            instanceTransferFluctuate?: {
              percentage?: int32(name='Percentage', example='10'),
              trend?: string(name='Trend', example='abs'),
            }(name='InstanceTransferFluctuate'),
            timeout?: {
              timeoutInMinutes?: int32(name='TimeoutInMinutes', example='10'),
            }(name='Timeout'),
            unFinished?: {
              unFinishedTime?: string(name='UnFinishedTime', example='12:00'),
            }(name='UnFinished'),
          }(name='Extension'),
          target?: {
            allowTasks?: [ long ](name='AllowTasks'),
            ids?: [ long ](name='Ids'),
            type?: string(name='Type', example='Task'),
          }(name='Target'),
          type?: string(name='Type', example='Error'),
        }(name='TriggerCondition'),
      }
    ](name='AlertRules'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='5'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='A6C6B486-E3A2-5D52-9E76-D9380485D946'),
}

model ListAlertRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAlertRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAlertRules  ListAlertRulesRequest
  * @return ListAlertRulesResponse
 */
async function listAlertRules(request: ListAlertRulesRequest): ListAlertRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAlertRules', 'POST', '/', 'json', false, 'json', request);
}

model ListDIAlarmRulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  DIAlarmRuleId?: long(name='DIAlarmRuleId', example='34988', position='Query'),
  jobId?: long(name='JobId', example='1000001', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListDIAlarmRulesResponseBody = {
  pagingInfo?: {
    DIJobAlarmRules?: [ 
      {
        DIAlarmRuleId?: long(name='DIAlarmRuleId', example='72402'),
        DIJobId?: long(name='DIJobId', example='32594'),
        description?: string(name='Description', example='rule descrition'),
        enabled?: boolean(name='Enabled', example='True'),
        metricType?: string(name='MetricType', example='Heartbeat'),
        name?: string(name='Name', example='rule_name'),
        notificationSettings?: {
          inhibitionInterval?: long(name='InhibitionInterval', example='5'),
          notificationChannels?: [ 
            {
              channels?: [ string ](name='Channels'),
              severity?: string(name='Severity', example='Critical'),
            }
          ](name='NotificationChannels'),
          notificationReceivers?: [ 
            {
              receiverType?: string(name='ReceiverType', example='DingToken'),
              receiverValues?: [ string ](name='ReceiverValues'),
            }
          ](name='NotificationReceivers'),
        }(name='NotificationSettings'),
        triggerConditions?: [ 
          {
            ddlReportTags?: [ string ](name='DdlReportTags'),
            duration?: long(name='Duration', example='1'),
            severity?: string(name='Severity', example='Critical'),
            threshold?: long(name='Threshold', example='5'),
          }
        ](name='TriggerConditions'),
      }
    ](name='DIJobAlarmRules'),
    pageNumber?: long(name='PageNumber', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='90'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='74C2FECD-5B3A-554A-BCF5-351A36DE9815'),
}

model ListDIAlarmRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIAlarmRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDIAlarmRules  ListDIAlarmRulesRequest
  * @return ListDIAlarmRulesResponse
 */
async function listDIAlarmRules(request: ListDIAlarmRulesRequest): ListDIAlarmRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDIAlarmRules', 'GET', '/', 'json', false, 'json', request);
}

model ListDIJobEventsRequest {
  regionId?: string(name='RegionId', position='Host'),
  DIJobId?: long(name='DIJobId', example='11588', position='Query'),
  endTime: long(name='EndTime', description='This parameter is required.', example='1717971005', position='Query'),
  eventType: string(name='EventType', description='This parameter is required.', example='Alarm', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  startTime: long(name='StartTime', description='This parameter is required.', example='1716971005', position='Query'),
}

model ListDIJobEventsResponseBody = {
  pagingInfo?: {
    DIJobEvent?: [ 
      {
        action?: string(name='Action', example='Ignore'),
        channels?: string(name='Channels', example='Phone'),
        createTime?: string(name='CreateTime', example='1663573162'),
        detail?: string(name='Detail'),
        dstSql?: string(name='DstSql', example='alter table table2 ***'),
        dstTable?: string(name='DstTable', example='table2'),
        failoverMessage?: string(name='FailoverMessage', example='2024-05-29 15:11:31,377 [main] INFO com.*.**.di.core.metrics.:21 []  {****} 
2024-05-29 15:11:31,384 [main] INFO *.aliyun.*.di.*.*.metrics.*:27 [] - Open MarioDiReporter 
2024-05-29 15:11:33,248 [flink-akka.*.*-dispatcher-17] INFO'),
        id?: string(name='Id', example='1'),
        severity?: string(name='Severity', example='Warning'),
        srcSql?: string(name='SrcSql', example='alter table table1 ***'),
        srcTable?: string(name='SrcTable', example='table1'),
        status?: string(name='Status', example='Success'),
        type?: string(name='Type', example='Delay'),
      }
    ](name='DIJobEvent'),
    pageNumber?: long(name='PageNumber', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='2524'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='645F6D68-9C29-5961-80B1-BDD4B794C22D'),
}

model ListDIJobEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIJobEventsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDIJobEvents  ListDIJobEventsRequest
  * @return ListDIJobEventsResponse
 */
async function listDIJobEvents(request: ListDIJobEventsRequest): ListDIJobEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDIJobEvents', 'GET', '/', 'json', false, 'json', request);
}

model ListDIJobMetricsRequest {
  regionId?: string(name='RegionId', position='Host'),
  DIJobId?: long(name='DIJobId', example='11265', position='Query'),
  endTime: long(name='EndTime', description='This parameter is required.', example='1712205941', position='Query'),
  metricName: [ string ](name='MetricName', description='This parameter is required.', shrink='json', position='Query'),
  startTime: long(name='StartTime', description='This parameter is required.', example='1586509407', position='Query'),
}

model ListDIJobMetricsResponseBody = {
  pagingInfo?: {
    jobMetrics?: [ 
      {
        name?: string(name='Name', example='JobDelay'),
        seriesList?: [ 
          {
            time?: long(name='Time', example='1716881141'),
            value?: double(name='Value', example='10'),
          }
        ](name='SeriesList'),
      }
    ](name='JobMetrics'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='691CA452-D37A-4ED0-9441'),
}

model ListDIJobMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIJobMetricsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDIJobMetrics  ListDIJobMetricsRequest
  * @return ListDIJobMetricsResponse
 */
async function listDIJobMetrics(request: ListDIJobMetricsRequest): ListDIJobMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDIJobMetrics', 'GET', '/', 'json', false, 'json', request);
}

model ListDIJobRunDetailsRequest {
  regionId?: string(name='RegionId', position='Host'),
  DIJobId: long(name='DIJobId', description='This parameter is required.', example='11265', position='Query'),
  instanceId?: long(name='InstanceId', example='1234', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  sourceDataSourceName?: string(name='SourceDataSourceName', example='ds_name', position='Query'),
  sourceDatabaseName?: string(name='SourceDatabaseName', example='db_name', position='Query'),
  sourceSchemaName?: string(name='SourceSchemaName', example='schema_name', position='Query'),
  sourceTableName?: string(name='SourceTableName', example='table_name', position='Query'),
}

model ListDIJobRunDetailsResponseBody = {
  pagingInfo?: {
    jobRunInfos?: [ 
      {
        destinationDatabaseName?: string(name='DestinationDatabaseName', example='dst_db'),
        destinationDatasourceName?: string(name='DestinationDatasourceName', example='dst_name'),
        destinationSchemaName?: string(name='DestinationSchemaName', example='dst_schema'),
        destinationTableName?: string(name='DestinationTableName', example='dst_name'),
        fullMigrationErrorMessage?: string(name='FullMigrationErrorMessage', example='sync table t1 fail.'),
        fullMigrationStatus?: string(name='FullMigrationStatus', example='Finished'),
        offlineErrorRecords?: long(name='OfflineErrorRecords', example='0'),
        offlineTotalBytes?: long(name='OfflineTotalBytes', example='100'),
        offlineTotalRecords?: long(name='OfflineTotalRecords', example='10'),
        realtimeMigrationErrorMessage?: string(name='RealtimeMigrationErrorMessage', example='sync table t1 fail.'),
        realtimeMigrationStatus?: string(name='RealtimeMigrationStatus', example='Running'),
        sourceDatabaseName?: string(name='SourceDatabaseName', example='db_name'),
        sourceDatasourceName?: string(name='SourceDatasourceName', example='ds_name'),
        sourceSchemaName?: string(name='SourceSchemaName', example='schema_name'),
        sourceTableName?: string(name='SourceTableName', example='table_name'),
        structureMigrationErrorMessage?: string(name='StructureMigrationErrorMessage', example='create table t1 fail.'),
        structureMigrationStatus?: string(name='StructureMigrationStatus', example='Finished'),
      }
    ](name='JobRunInfos'),
    pageNumber?: string(name='PageNumber', example='1'),
    pageSize?: string(name='PageSize', example='10'),
    totalCount?: string(name='TotalCount', example='131'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='691CA452-D37A-4ED0-9441'),
}

model ListDIJobRunDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIJobRunDetailsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDIJobRunDetails  ListDIJobRunDetailsRequest
  * @return ListDIJobRunDetailsResponse
 */
async function listDIJobRunDetails(request: ListDIJobRunDetailsRequest): ListDIJobRunDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDIJobRunDetails', 'GET', '/', 'json', false, 'json', request);
}

model ListDIJobsRequest {
  regionId?: string(name='RegionId', position='Host'),
  destinationDataSourceType?: string(name='DestinationDataSourceType', description='The destination type. If you do not configure this parameter, no limits are imposed on the tasks.', example='Hologres', position='Query'),
  migrationType?: string(name='MigrationType', description='The synchronization type. Valid values:

*   FullAndRealtimeIncremental: one-time full synchronization and real-time incremental synchronization
*   RealtimeIncremental: real-time incremental synchronization
*   Full: full synchronization
*   OfflineIncremental: batch incremental synchronization
*   FullAndOfflineIncremental: one-time full synchronization and batch incremental synchronization', example='FullAndRealtimeIncremental', position='Query'),
  name?: string(name='Name', description='The name of the export task.

The name of each export task must be unique. You must make sure that the names of the export tasks in the current workspace are unique.', example='test_export_01', position='Query'),
  pageNumber?: long(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10', position='Query'),
  projectId: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='1967', position='Query'),
  sourceDataSourceType?: string(name='SourceDataSourceType', description='The source type. If you do not configure this parameter, no limits are imposed on the tasks.', example='MySQL', position='Query'),
}

model ListDIJobsResponseBody = {
  pagingInfo?: {
    DIJobs?: [ 
      {
        DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='32599'),
        destinationDataSourceType?: string(name='DestinationDataSourceType', description='The destination type. Valid values: Hologres and Hive.', example='Hologres'),
        jobName?: string(name='JobName', description='The name of the synchronization task.', example='mysql_to_holo_sync_35197'),
        jobStatus?: string(name='JobStatus', description='The status of the synchronization task. Valid values:

*   Finished
*   Initialized
*   Stopped
*   Failed
*   Running
*   Stopping', example='Running'),
        migrationType?: string(name='MigrationType', description='The synchronization type. Valid values:

*   FullAndRealtimeIncremental: one-time full synchronization and real-time incremental synchronization
*   RealtimeIncremental: real-time incremental synchronization
*   Full: full synchronization
*   OfflineIncremental: batch incremental synchronization
*   FullAndOfflineIncremental: one-time full synchronization and batch incremental synchronization', example='FullAndRealtimeIncremental'),
        projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace to which the synchronization task belongs.', example='26442'),
        sourceDataSourceType?: string(name='SourceDataSourceType', description='The source type. The value MySQL is returned.', example='Mysql'),
      }
    ](name='DIJobs', description='The synchronization tasks returned.'),
    pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='12'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7263E4AC-9D2E-5B29-B8AF-7C5012E92A41'),
}

model ListDIJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDIJobs  ListDIJobsRequest
  * @return ListDIJobsResponse
 */
async function listDIJobs(request: ListDIJobsRequest): ListDIJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDIJobs', 'GET', '/', 'json', false, 'json', request);
}

model ListDataQualityEvaluationTaskInstancesRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizdateFrom?: string(name='BizdateFrom', description='The start time of the data quality monitoring task.', example='2024-04-01', position='Query'),
  bizdateTo?: string(name='BizdateTo', description='The end time of the data quality monitoring task.', example='2024-05-01', position='Query'),
  createTimeFrom?: long(name='CreateTimeFrom', description='The earliest start time at which the instances are generated.', example='1710239005403', position='Query'),
  createTimeTo?: long(name='CreateTimeTo', description='The latest start time at which the instances are generated.', example='1710239005403', position='Query'),
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', description='The ID of the data quality monitoring task.', example='10000', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10', minimum=1, maximum=200, position='Query'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='100', position='Query'),
  tableGuid?: string(name='TableGuid', description='The ID of the table in Data Map.', example='odps.unit_test.tb_unit_test', position='Query'),
  triggerClient?: string(name='TriggerClient', description='The name of the trigger module of the instance.', example='CWF2', position='Query'),
  triggerClientId?: string(name='TriggerClientId', description='The ID of the instance that is generated by the task.', example='1001', position='Query'),
}

model ListDataQualityEvaluationTaskInstancesResponseBody = {
  pagingInfo?: {
    dataQualityEvaluationTaskInstances?: [ 
      {
        createTime?: long(name='CreateTime', description='The time at which the instance was generated.', example='1710239005403'),
        finishTime?: long(name='FinishTime', description='The time at which the instance finished running.', example='1710239005403'),
        id?: long(name='Id', description='The ID of the instance.', example='10001'),
        parameters?: string(name='Parameters', description='The parameters configured for the instance.', example='{
  "bizdate": "20240517",
  "triggerTime": "1710239005403"
}'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='100'),
        status?: string(name='Status', description='The status of the instance. Valid values:

*   Running
*   Error
*   Passed
*   Warned
*   Critical', example='Critical'),
        task?: {
          description?: string(name='Description', description='The description of the task.', example='This is a daily run data quality evaluation plan.'),
          hooks?: [ 
            {
              condition?: string(name='Condition', description='The trigger configuration of the callback event.', example='${severity} == "High" AND ${status} == "Critical"'),
              type?: string(name='Type', description='The type of the callback event.

*   Valid values: BlockTaskInstance. The value indicates that an auto triggered node is blocked.', example='BlockTaskInstance'),
            }
          ](name='Hooks', description='The callback configurations of the task during the instance lifecycle. Blocking an auto triggered node is a type of callback event. Only this type is supported.'),
          id?: long(name='Id', description='The task ID.', example='10001'),
          name: string(name='Name', description='The name of the task.

This parameter is required.'),
          notifications?: {
            condition?: string(name='Condition', description='The trigger condition of the alert notification.', example='${severity} == "High"'),
            notifications?: [ 
              {
                nofiticationReceivers?: [ 
                  {
                    extension?: string(name='Extension', description='The extended information in the JSON format. For example, the DingTalk chatbot can remind all members in a DingTalk group by using the at sign (@).', example='{"atAll":"true"}'),
                    receiverType?: string(name='ReceiverType', description='The type of the alert recipient. Valid values:

*   AliUid: Alibaba Cloud account ID
*   WebhookUrl: URL of a custom webhook
*   DingdingUrl: DingTalk chatbot URL
*   FeishuUrl: Lark chatbot URL
*   WeixinUrl: WeCom chatbot URL', example='AliUid'),
                    receiverValues?: [ string ](name='ReceiverValues', description='The alert recipients.'),
                  }
                ](name='NofiticationReceivers', description='The alert recipients.'),
                notificationChannels?: [ 
                  {
                    channels?: [ string ](name='Channels', description='The alert notification methods.'),
                  }
                ](name='NotificationChannels', description='The alert notification methods.'),
              }
            ](name='Notifications', description='The configurations for the alert notification.'),
          }(name='Notifications', description='The configurations for alert notifications.'),
          projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
          regionId?: string(name='RegionId', description='The region ID.', example='cn-shanghai'),
          runtimeConf?: string(name='RuntimeConf', description='The configuration of the data source. The value of the queue field is default, and that of the sqlEngine field is SPARK-SQL. The value default indicates the YARN queue for E-MapReduce (EMR) tasks, and the value SPARK-SQL indicates the SQL engine that is used to collect EMR data.', example='{ "queue": "default", "sqlEngine": "SPARK-SQL" }'),
          target?: {
            databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs. Valid values:

*   maxcompute
*   emr
*   cdh
*   hologres
*   analyticdb_for_postgresql
*   analyticdb_for_mysql
*   starrocks', example='maxcompute'),
            partitionSpec?: string(name='PartitionSpec', description='The configuration of the partitioned table.', example='ds=$[yyyymmdd-1]'),
            tableGuid?: string(name='TableGuid', description='The ID of the table in Data Map.', example='odps.unit_test.tb_unit_test'),
            type?: string(name='Type', description='The type of the monitored object. Valid values:

*   Table', example='Table'),
          }(name='Target', description='The monitored object of the task.'),
          tenantId?: long(name='TenantId', description='The tenant ID.', example='10'),
          trigger?: {
            taskIds?: [ long ](name='TaskIds', description='The IDs of the auto triggered nodes of which the instances are successfully run.'),
            type?: string(name='Type', description='The trigger condition of the task.

*   Valid values: ByScheduledTaskInstance. The value indicates that the task is triggered when the instance of an auto triggered node is successfully run.', example='ByScheduledTaskInstance'),
          }(name='Trigger', description='The trigger configuration of the task.'),
        }(name='Task', description='The snapshot of the configurations for the task when the task starts.'),
        triggerContext?: string(name='TriggerContext', description='The information about the trigger module of the instance.', example='{
  "TriggerClientId": 10001,
  "TriggerClient": "CWF2"
}'),
      }
    ](name='DataQualityEvaluationTaskInstances', description='The instances generated by the task.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='294'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
}

model ListDataQualityEvaluationTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityEvaluationTaskInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataQualityEvaluationTaskInstances  ListDataQualityEvaluationTaskInstancesRequest
  * @return ListDataQualityEvaluationTaskInstancesResponse
 */
async function listDataQualityEvaluationTaskInstances(request: ListDataQualityEvaluationTaskInstancesRequest): ListDataQualityEvaluationTaskInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataQualityEvaluationTaskInstances', 'GET', '/', 'json', false, 'json', request);
}

model ListDataQualityEvaluationTasksRequest {
  regionId?: string(name='RegionId', position='Host'),
  name?: string(name='Name', description='The name of the data quality monitoring task. Fuzzy match is supported.', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10', minimum=1, maximum=200, position='Query'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='100', position='Query'),
  tableGuid?: string(name='TableGuid', description='The ID of the table in Data Map.', example='odps.unit_test.tb_unit_test', position='Query'),
}

model ListDataQualityEvaluationTasksResponseBody = {
  pagingInfo?: {
    dataQualityEvaluationTasks?: [ 
      {
        description?: string(name='Description', description='The description of the data quality monitoring task. The description can be up to 65,535 characters in length.', example='This is a daily run data quality evaluation plan'),
        hooks?: [ 
          {
            condition?: string(name='Condition', description='The trigger configuration of the callback event.', example='${severity} == "High" AND ${status} == "Critical"'),
            type?: string(name='Type', description='The type of the callback event.

*   Valid values: BlockTaskInstance. The value indicates that an auto triggered node is blocked.', example='BlockTaskInstance'),
          }
        ](name='Hooks', description='The callback configurations of the task during the instance lifecycle. Blocking an auto triggered node is a type of callback event. Only this type is supported.'),
        id?: long(name='Id', description='The ID of the data quality monitoring task.', example='10001'),
        name?: string(name='Name', description='The name of the data quality monitoring task. The name can be up to 255 characters in length and can contain digits, letters, and punctuation marks.'),
        notifications?: {
          condition?: string(name='Condition', description='The trigger condition of the alert notification.', example='${severity} == "High"'),
          notifications?: [ 
            {
              notificationChannels?: [ 
                {
                  channels?: [ string ](name='Channels', description='The alert notification methods.'),
                }
              ](name='NotificationChannels', description='The alert notification methods.'),
              notificationReceivers?: [ 
                {
                  extension?: string(name='Extension', description='The extended information in the JSON format. For example, the DingTalk chatbot can remind all members in a DingTalk group by using the at sign (@).', example='{"atAll":"true"}'),
                  receiverType?: string(name='ReceiverType', description='The type of the alert recipient. Valid values:

*   AliUid: Alibaba Cloud account ID
*   WebhookUrl: URL of a custom webhook
*   DingdingUrl: DingTalk chatbot URL
*   FeishuUrl: Lark chatbot URL
*   WeixinUrl: WeCom chatbot URL', example='AliUid'),
                  receiverValues?: [ string ](name='ReceiverValues', description='The alert recipients.'),
                }
              ](name='NotificationReceivers', description='The alert recipients.'),
            }
          ](name='Notifications', description='The configurations for the alert notification.'),
        }(name='Notifications', description='The configurations for alert notifications.'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='100'),
        runtimeConf?: string(name='RuntimeConf', description='The configuration of the data source. The value of the queue field is default, and that of the sqlEngine field is SPARK-SQL. The value default indicates the YARN queue for E-MapReduce (EMR) tasks, and the value SPARK-SQL indicates the SQL engine that is used to collect EMR data.', example='{ "queue": "default", "sqlEngine": "SPARK-SQL" }'),
        target?: {
          databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs. Valid values:

*   maxcompute
*   emr
*   cdh
*   hologres
*   analyticdb_for_postgresql
*   analyticdb_for_mysql
*   starrocks', example='maxcompute'),
          partitionSpec?: string(name='PartitionSpec', description='The configuration of the partitioned table.', example='ds=$[yyyymmdd-1]'),
          tableGuid?: string(name='TableGuid', description='The ID of the table in Data Map.', example='odps.unit_test.tb_unit_test'),
          type?: string(name='Type', description='The type of the monitored object. Valid values:

*   Table', example='Table'),
        }(name='Target', description='The monitored object of the task.'),
        tenantId?: long(name='TenantId', description='The DataWorks tenant ID.', example='10'),
        trigger?: {
          taskIds?: [ long ](name='TaskIds', description='The IDs of the auto triggered nodes of which the instances are successfully run. This parameter takes effect only if the Type parameter is set to ByScheduledTaskInstance.'),
          type?: string(name='Type', description='The trigger condition of the task.

*   Valid values: ByScheduledTaskInstance. The value indicates that the task is triggered when the instance of an auto triggered node is successfully run.', example='ByScheduledTaskInstance'),
        }(name='Trigger', description='The trigger configuration of the task.'),
      }
    ](name='DataQualityEvaluationTasks', description='The data quality monitoring tasks.'),
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='131'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
}

model ListDataQualityEvaluationTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityEvaluationTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataQualityEvaluationTasks  ListDataQualityEvaluationTasksRequest
  * @return ListDataQualityEvaluationTasksResponse
 */
async function listDataQualityEvaluationTasks(request: ListDataQualityEvaluationTasksRequest): ListDataQualityEvaluationTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataQualityEvaluationTasks', 'GET', '/', 'json', false, 'json', request);
}

model ListDataQualityResultsRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizdateFrom?: string(name='BizdateFrom', description='The beginning of the time range to query.', example='2024-05-01', position='Query'),
  bizdateTo?: string(name='BizdateTo', description='The end of the time range to query.', example='2024-05-04', position='Query'),
  createTimeFrom?: long(name='CreateTimeFrom', example='1710239005403', position='Query'),
  createTimeTo?: long(name='CreateTimeTo', example='1710239005403', position='Query'),
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', example='200001', position='Query'),
  dataQualityEvaluationTaskInstanceId?: long(name='DataQualityEvaluationTaskInstanceId', example='10001', position='Query'),
  dataQualityRuleId?: long(name='DataQualityRuleId', example='100001', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=200, position='Query'),
  projectId?: long(name='ProjectId', example='100', position='Query'),
}

model ListDataQualityResultsResponseBody = {
  pagingInfo?: {
    dataQualityResults?: [ 
      {
        createTime?: long(name='CreateTime', example='1708284916414'),
        details?: [ 
          {
            checkedValue?: string(name='CheckedValue', example='100.0'),
            referencedValue?: string(name='ReferencedValue', example='0.0'),
            status?: string(name='Status', description='The comparison result between the value of CheckedValue and the threshold. Valid values:

*   Error
*   Passed
*   Warned
*   Critical', example='PASSED'),
          }
        ](name='Details', description='The check details.'),
        id?: long(name='Id', example='16033'),
        rule?: {
          checkingConfig?: {
            referencedSamplesFilter?: string(name='ReferencedSamplesFilter', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
            thresholds?: {
              critical?: {
                operator?: string(name='Operator', description='*   \\>
*   \\>=
*   <
*   <=
*   !=
*   \\=', example='>'),
                value?: string(name='Value', example='100.0'),
              }(name='Critical'),
              expected?: {
                operator?: string(name='Operator', description='*   \\>
*   \\>=
*   <
*   <=
*   !=
*   \\=', example='>'),
                value?: string(name='Value', example='100.0'),
              }(name='Expected'),
              warned?: {
                operator?: string(name='Operator', description='*   \\>
*   \\>=
*   <
*   <=
*   !=
*   \\=', example='>'),
                value?: string(name='Value', example='100.0'),
              }(name='Warned'),
            }(name='Thresholds'),
            type?: string(name='Type', description='The threshold calculation method. Valid values:

*   Fixed
*   Fluctation
*   FluctationDiscreate
*   Auto
*   Average
*   Variance', example='FIXED'),
          }(name='CheckingConfig', description='The check settings for sample data.'),
          description?: string(name='Description', example='this is a odps _sql task'),
          enabled?: boolean(name='Enabled', example='true'),
          errorHandlers?: [ 
            {
              errorDataFilter?: string(name='ErrorDataFilter', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
              type?: string(name='Type', description='The type of the operation. Valid values:

*   SaveErrorData', example='SAVE_ERROR_DATA'),
            }
          ](name='ErrorHandlers', description='The operations that you can perform after the rule-based check fails.'),
          id?: long(name='Id', example='100001'),
          name?: string(name='Name'),
          projectId?: long(name='ProjectId', example='100'),
          samplingConfig?: {
            metric?: string(name='Metric', description='The metrics used for sampling. Valid values:

*   Count: the number of rows in the table.
*   Min: the minimum value of the field.
*   Max: the maximum value of the field.
*   Avg: the average value of the field.
*   DistinctCount: the number of unique values of the field after deduplication.
*   DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
*   DuplicatedCount: the number of duplicated values of the field.
*   DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
*   TableSize: the table size.
*   NullValueCount: the number of rows in which the field value is null.
*   NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
*   GroupCount: the field value and the number of rows for each field value.
*   CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
*   CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
*   UserDefinedSql: indicates that data is sampled by executing custom SQL statements.', example='COUNT'),
            metricParameters?: string(name='MetricParameters', example='{ "columns": [ "id", "name" ] }'),
            samplingFilter?: string(name='SamplingFilter', example='id IS NULL'),
            settingConfig?: string(name='SettingConfig', example='SET odps.sql.udf.timeout=600s;'),
          }(name='SamplingConfig', description='The sampling settings.'),
          severity?: string(name='Severity', description='The strength of the rule. Valid values:

*   High
*   Normal', example='NORMAL'),
          target?: {
            databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs. Valid values:

*   maxcompute
*   emr
*   cdh
*   hologres
*   analyticdb_for_postgresql
*   analyticdb_for_mysql
*   starrocks', example='MAX_COMPUTE'),
            partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
            tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
            type?: string(name='Type', description='The type of the monitored object. Valid values:

*   Table', example='TABLE'),
          }(name='Target', description='The monitored object of the rule.'),
          templateCode?: string(name='TemplateCode', example='system::user_defined'),
          tenantId?: long(name='TenantId', example='1'),
        }(name='Rule', description='The snapshot of the rule configuration when the check starts.'),
        sample?: string(name='Sample', example='[
  {
    "gender": "male",
    "_count": 100
  }, {
    "gender": "female",
    "_count": 100
  }
]'),
        status?: string(name='Status', description='The status of the check result. Valid values:

*   Running
*   Error
*   Passed
*   Warned
*   Critical', example='PASSED'),
        taskInstanceId?: long(name='TaskInstanceId', example='200001'),
      }
    ](name='DataQualityResults', description='The data quality check results.'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='219'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
}

model ListDataQualityResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityResultsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataQualityResults  ListDataQualityResultsRequest
  * @return ListDataQualityResultsResponse
 */
async function listDataQualityResults(request: ListDataQualityResultsRequest): ListDataQualityResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataQualityResults', 'GET', '/', 'json', false, 'json', request);
}

model ListDataQualityRulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', description='The ID of the data quality monitoring task that is associated with the rule.', example='10000', position='Query'),
  name?: string(name='Name', description='The name of the rule. Fuzzy match is supported.', example='unit_test', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 200.', example='10', minimum=1, maximum=200, position='Query'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='10002', position='Query'),
  tableGuid?: string(name='TableGuid', description='The ID of the table that is limited by the rule in Data Map.', example='odps.unit_test.tb_unit_test', position='Query'),
}

model ListDataQualityRulesResponseBody = {
  pagingInfo?: {
    dataQualityRules?: [ 
      {
        checkingConfig?: {
          referencedSamplesFilter?: string(name='ReferencedSamplesFilter', description='The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference values. In this example, an expression is used to indicate the query method of referenced samples.', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
          thresholds?: {
            critical?: {
              operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\>
*   \\>=
*   <
*   <=
*   !=
*   \\=', example='>'),
              value?: string(name='Value', description='The threshold value.', example='100.0'),
            }(name='Critical', description='The threshold settings for critical alerts.'),
            expected?: {
              operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\>
*   \\>=
*   <
*   <=
*   !=
*   \\=', example='>'),
              value?: string(name='Value', description='The threshold value.', example='100.0'),
            }(name='Expected', description='The expected threshold setting.'),
            warned?: {
              operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\>
*   \\>=
*   <
*   <=
*   !=
*   \\=', example='>'),
              value?: string(name='Value', description='The threshold value.', example='100.0'),
            }(name='Warned', description='The threshold settings for normal alerts.'),
          }(name='Thresholds', description='The threshold settings.'),
          type?: string(name='Type', description='The threshold calculation method. Valid values:

*   Fixed
*   Fluctation
*   FluctationDiscreate
*   Auto
*   Average
*   Variance', example='Fixed'),
        }(name='CheckingConfig', description='The check settings for sample data.'),
        description?: string(name='Description', description='The description of the rule. The description can be up to 500 characters in length.', example='this is a odps _sql task'),
        enabled?: boolean(name='Enabled', description='Indicates whether the rule is enabled.', example='true'),
        errorHandlers?: [ 
          {
            errorDataFilter?: string(name='ErrorDataFilter', description='The SQL statement that is used to filter failed tasks. If the rule is defined by custom SQL statements, you must specify an SQL statement to filter failed tasks.', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
            type?: string(name='Type', description='The type of the operation. Valid values:

*   SaveErrorData', example='SaveErrorData'),
          }
        ](name='ErrorHandlers', description='The operations that you can perform after the rule-based check fails.'),
        id?: long(name='Id', description='The rule ID.', example='22130'),
        name?: string(name='Name', description='The rule name.'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='100001'),
        samplingConfig?: {
          metric?: string(name='Metric', description='The metrics used for sampling. Valid values:

*   Count: the number of rows in the table.
*   Min: the minimum value of the field.
*   Max: the maximum value of the field.
*   Avg: the average value of the field.
*   DistinctCount: the number of unique values of the field after deduplication.
*   DistinctPercent: the percentage of the number of unique values of the field after deduplication to the number of rows in the table.
*   DuplicatedCount: the number of duplicated values in the field.
*   DuplicatedPercent: the percentage of the number of duplicated values of the field to the number of rows in the table.
*   TableSize: the table size.
*   NullValueCount: the number of rows in which the field is set to null.
*   NullValuePercent: the percentage of the number of rows in which the field is set to null to the number of rows in the table.
*   GroupCount: the field value and the number of rows for each field value.
*   CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
*   CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
*   UserDefinedSql: indicates that the data is sampled by executing custom SQL statements.', example='Max'),
          metricParameters?: string(name='MetricParameters', description='The parameters required for sampling.', example='{ "Columns": [ "id", "name" ] , "SQL": "select count(1) from table;"}'),
          samplingFilter?: string(name='SamplingFilter', description='The statements that are used to filter unnecessary data during sampling. The statements can be up to 16,777,215 characters in length.', example='id IS NULL'),
          settingConfig?: string(name='SettingConfig', description='The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.', example='SET odps.sql.udf.timeout=600s; 
SET odps.sql.python.version=cp27;'),
        }(name='SamplingConfig', description='The settings for sampling.'),
        severity?: string(name='Severity', description='The strength of the rule. Valid values:

*   Normal
*   High', example='High'),
        target?: {
          databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs. Valid values:

*   maxcompute
*   emr
*   cdh
*   hologres
*   analyticdb_for_postgresql
*   analyticdb_for_mysql
*   starrocks', example='maxcompute'),
          partitionSpec?: string(name='PartitionSpec', description='The configuration of the partitioned table.', example='ds=$[yyyymmdd-1]'),
          tableGuid?: string(name='TableGuid', description='The ID of the table that is limited by the rule in Data Map.', example='odps.unit_test.tb_unit_test'),
          type?: string(name='Type', description='The type of the monitored object. Valid values:

*   Table', example='Table'),
        }(name='Target', description='The monitored object of the rule.'),
        templateCode?: string(name='TemplateCode', description='The ID of the template used by the rule.', example='system::user_defined'),
        tenantId?: long(name='TenantId', description='The ID of the DataWorks tenant.', example='100001'),
      }
    ](name='DataQualityRules', description='The rules.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='294'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
}

model ListDataQualityRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataQualityRules  ListDataQualityRulesRequest
  * @return ListDataQualityRulesResponse
 */
async function listDataQualityRules(request: ListDataQualityRulesRequest): ListDataQualityRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataQualityRules', 'GET', '/', 'json', false, 'json', request);
}

model ListDataSourceSharedRulesRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  dataSourceId: long(name='DataSourceId', description='This parameter is required.', example='1', position='Query'),
  targetProjectId?: long(name='TargetProjectId', example='1', position='Query'),
}

model ListDataSourceSharedRulesResponseBody = {
  dataSourceSharedRules?: [ 
    {
      createTime?: long(name='CreateTime', example='1724379762000'),
      createUser?: string(name='CreateUser', example='1'),
      dataSourceId?: long(name='DataSourceId', example='1'),
      envType?: string(name='EnvType', example='Dev'),
      id?: long(name='Id', example='1'),
      sharedDataSourceName?: string(name='SharedDataSourceName', example='targetProject.datasource'),
      sharedUser?: string(name='SharedUser', example='1'),
      sourceProjectId?: long(name='SourceProjectId', example='1'),
      targetProjectId?: long(name='TargetProjectId', example='1'),
    }
  ](name='DataSourceSharedRules'),
  requestId?: string(name='RequestId', description='Id of the request', example='0000-ABCD-EFG****'),
}

model ListDataSourceSharedRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourceSharedRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataSourceSharedRules  ListDataSourceSharedRulesRequest
  * @return ListDataSourceSharedRulesResponse
 */
async function listDataSourceSharedRules(request: ListDataSourceSharedRulesRequest): ListDataSourceSharedRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataSourceSharedRules', 'GET', '/', 'json', false, 'json', request);
}

model ListDataSourcesRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  envType?: string(name='EnvType', example='Prod', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  order?: string(name='Order', example='Asc', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='17820', position='Query'),
  sortBy?: string(name='SortBy', example='Id', position='Query'),
  tags?: string(name='Tags', example='["tag1", "tag2", "tag3"]', position='Query'),
  types?: [ string ](name='Types', shrink='simple', position='Query'),
}

model ListDataSourcesResponseBody = {
  pagingInfo?: {
    dataSources?: [ 
      {
        dataSource?: [ 
          {
            connectionProperties?: any(name='ConnectionProperties', example='{
	"envType": "Prod",
	"regionId": "cn-beijing",
    "instanceId": "hgprecn-cn-x0r3oun4k001",
    "database": "testdb",
    "securityProtocol": "authTypeNone",
    "authType": "Executor",
    "authIdentity": "1107550004253538"
}'),
            connectionPropertiesMode?: string(name='ConnectionPropertiesMode', example='UrlMode'),
            createTime?: long(name='CreateTime', example='1648711113000'),
            createUser?: string(name='CreateUser', example='1624387842781448'),
            description?: string(name='Description', example='test'),
            id?: long(name='Id', example='16035'),
            modifyTime?: long(name='ModifyTime', example='1648711113000'),
            modifyUser?: string(name='ModifyUser', example='1624387842781448'),
            qualifiedName?: string(name='QualifiedName', example='1648711121000:cn-beijing:odps:yongxunQA_beijing_standard'),
          }
        ](name='DataSource'),
        name?: string(name='Name', example='test'),
        type?: string(name='Type', example='mysql'),
      }
    ](name='DataSources'),
    pageNumber?: long(name='PageNumber', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='131'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='7BE1433F-6D55-5D86-9344-CA6F7DD19B13'),
}

model ListDataSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataSources  ListDataSourcesRequest
  * @return ListDataSourcesResponse
 */
async function listDataSources(request: ListDataSourcesRequest): ListDataSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataSources', 'GET', '/', 'json', false, 'json', request);
}

model ListDeploymentsRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  creator?: string(name='Creator', description='The ID of the user who creates the processes. This parameter specifies a filter condition.', example='110755000425XXXX', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10', minimum=10, maximum=100, position='Query'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000', position='Query'),
  status?: string(name='Status', description='The status of the processes. This parameter specifies a filter condition.

Valid values:

*   INIT
*   RUNNING
*   SUCCESS
*   FAIL
*   TERMINATION
*   CANCEL', example='RUNNING', position='Query'),
}

model ListDeploymentsResponseBody = {
  pagingInfo?: {
    deployments?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the process was created. This value is a UNIX timestamp.', example='1702736654000'),
        creator?: string(name='Creator', description='The ID of the user who creates the process.', example='110755000425XXXX'),
        id?: string(name='Id', description='The process ID.', example='ddf354a5-03df-48fc-94c1-cc973f79XXXX'),
        message?: string(name='Message', description='The error message returned if the process fails.'),
        modifyTime?: long(name='ModifyTime', description='The time when the process was last modified. This value is a UNIX timestamp.', example='1702736654000'),
        projectId?: string(name='ProjectId', description='The DataWorks workspace ID.', example='44683'),
        stages?: [ 
          {
            code?: string(name='Code', description='The code of the stage.', example='DEV_CHECK'),
            description?: string(name='Description', description='The description of the stage.'),
            detail?: map[string]any(name='Detail', description='The additional information about the stage.'),
            message?: string(name='Message', description='The error message returned during the stage.'),
            name?: string(name='Name', description='The name of the stage.'),
            status?: string(name='Status', description='The status of the stage.

Valid values:

*   INIT
*   RUNNING
*   SUCCESS
*   FAIL
*   TERMINATION
*   CANCEL', example='RUNNING'),
            step?: int32(name='Step', description='The step number of the stage.', example='1'),
            type?: string(name='Type', description='The type of the stage. This parameter indicates the operation type in the stage.

Valid values:

*   DEPLOY
*   CHECK
*   OFFLINE.
*   BUILD
*   DELETE', example='CHECK'),
          }
        ](name='Stages', description='The stages of the process.'),
        status?: string(name='Status', description='The status of the process.

Valid values:

*   INIT
*   RUNNING
*   FAIL
*   SUCCESS
*   TERMINATION
*   CANCEL', example='RUNNING'),
      }
    ](name='Deployments', description='The processes.'),
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='2524'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7C352CB7-CD88-50CF-9D0D-E81BDF02XXXX'),
}

model ListDeploymentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeploymentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDeployments  ListDeploymentsRequest
  * @return ListDeploymentsResponse
 */
async function listDeployments(request: ListDeploymentsRequest): ListDeploymentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeployments', 'GET', '/', 'json', false, 'json', request);
}

model ListDownstreamTaskInstancesRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='1234', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListDownstreamTaskInstancesResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    taskInstances?: [ 
      {
        baselineId?: long(name='BaselineId', example='1234'),
        bizdate?: long(name='Bizdate', example='1710239005403'),
        createTime?: long(name='CreateTime', example='1710239005403'),
        createUser?: string(name='CreateUser', example='1000'),
        dataSource?: {
          name?: string(name='Name', example='mysql_test'),
        }(name='DataSource'),
        description?: string(name='Description', example='test'),
        finishedTime?: long(name='FinishedTime', example='1710239005403'),
        id?: long(name='Id', example='1234'),
        modifyTime?: long(name='ModifyTime', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', example='1000'),
        owner?: string(name='Owner', example='100'),
        periodNumber?: int32(name='PeriodNumber'),
        priority?: int32(name='Priority', example='1'),
        projectEnv?: string(name='ProjectEnv', example='Prod'),
        projectId?: long(name='ProjectId', example='100'),
        rerunMode?: string(name='RerunMode', example='AllAllowed'),
        runNumber?: int32(name='RunNumber', example='1'),
        runtime?: {
          gateway?: string(name='Gateway', example='cn-shanghai.1.2'),
          processId?: string(name='ProcessId', example='T3_123'),
        }(name='Runtime'),
        runtimeResource?: {
          cu?: string(name='Cu', example='0.25'),
          image?: string(name='Image', example='i-xxxxxx'),
          resourceGroupId?: string(name='ResourceGroupId', example='S_res_group_524258031846018_1684XXXXXXXXX'),
        }(name='RuntimeResource'),
        startedTime?: long(name='StartedTime', example='1710239005403'),
        status?: string(name='Status', example='Success'),
        taskId?: long(name='TaskId', example='1234'),
        taskName?: string(name='TaskName'),
        taskType?: string(name='TaskType', example='ODPS_SQL'),
        tenantId?: long(name='TenantId', example='1'),
        timeout?: int32(name='Timeout', example='1'),
        triggerRecurrence?: string(name='TriggerRecurrence', example='Normal'),
        triggerTime?: long(name='TriggerTime', example='1710239005403'),
        triggerType?: string(name='TriggerType', example='Scheduler'),
        workflowId?: long(name='WorkflowId', example='1234'),
        workflowInstanceId?: long(name='WorkflowInstanceId', example='1234'),
        workflowInstanceType?: string(name='WorkflowInstanceType', example='Normal'),
        workflowName?: string(name='WorkflowName'),
      }
    ](name='TaskInstances'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListDownstreamTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDownstreamTaskInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDownstreamTaskInstances  ListDownstreamTaskInstancesRequest
  * @return ListDownstreamTaskInstancesResponse
 */
async function listDownstreamTaskInstances(request: ListDownstreamTaskInstancesRequest): ListDownstreamTaskInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDownstreamTaskInstances', 'GET', '/', 'json', false, 'json', request);
}

model ListDownstreamTasksRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='1234', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  projectEnv?: string(name='ProjectEnv', example='Prod', position='Query'),
}

model ListDownstreamTasksResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    tasks?: [ 
      {
        baselineId?: long(name='BaselineId', example='1234'),
        createTime?: long(name='CreateTime', example='1710239005403'),
        createUser?: string(name='CreateUser', example='1000'),
        dataSource?: {
          name?: string(name='Name', example='mysql_test'),
        }(name='DataSource'),
        description?: string(name='Description', example='test'),
        id?: long(name='Id', example='1234'),
        instanceMode?: string(name='InstanceMode'),
        modifyTime?: long(name='ModifyTime', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', example='1000'),
        name?: string(name='Name'),
        owner?: string(name='Owner', example='1000'),
        priority?: int32(name='Priority', example='1'),
        projectEnv?: string(name='ProjectEnv', example='Prod'),
        projectId?: long(name='ProjectId', example='100'),
        rerunInterval?: int32(name='RerunInterval', example='60'),
        rerunMode?: string(name='RerunMode', example='AllAllowed'),
        rerunTimes?: int32(name='RerunTimes', example='3'),
        runtimeResource?: {
          cu?: string(name='Cu', example='0.25'),
          image?: string(name='Image', example='i-xxxxxx'),
          resourceGroupId?: string(name='ResourceGroupId', example='S_res_group_524258031846018_1684XXXXXXXXX'),
        }(name='RuntimeResource'),
        stepType?: string(name='StepType'),
        tenantId?: long(name='TenantId', example='1'),
        timeout?: int32(name='Timeout', example='3600'),
        trigger?: {
          cron?: string(name='Cron', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', example='9999-01-01 00:00:00'),
          recurrence?: string(name='Recurrence', example='Normal'),
          startTime?: string(name='StartTime', example='1970-01-01 00:00:00'),
          timezone?: string(name='Timezone', example='Asia/Shanghai'),
          type?: string(name='Type', example='Scheduler'),
        }(name='Trigger'),
        type?: string(name='Type', example='ODPS_SQL'),
        workflowId?: long(name='WorkflowId', example='1234'),
      }
    ](name='Tasks'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListDownstreamTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDownstreamTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDownstreamTasks  ListDownstreamTasksRequest
  * @return ListDownstreamTasksResponse
 */
async function listDownstreamTasks(request: ListDownstreamTasksRequest): ListDownstreamTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDownstreamTasks', 'GET', '/', 'json', false, 'json', request);
}

model ListFunctionsRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  owner?: string(name='Owner', description='The ID of the owner of the UDF. This parameter specifies a filter condition.', example='110755000425XXXX', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1. Minimum value: 1.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10', minimum=10, maximum=100, position='Query'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='12345', position='Query'),
  type?: string(name='Type', description='The UDF type. This parameter specifies a filter condition.

Valid values:

*   MATH: mathematical operation function
*   AGGREGATE: aggregate function
*   STRING: string processing function
*   DATE: date function
*   ANALYTIC: window function
*   OTHER: others', example='MATH', position='Query'),
}

model ListFunctionsResponseBody = {
  pagingInfo?: {
    functions?: [ 
      {
        armResource?: string(name='ArmResource', description='The file resources in an Advanced RISC Machines (ARM) cluster.', example='xxx.jar,yyy.jar'),
        className?: string(name='ClassName', description='The fully qualified class name of the UDF.', example='com.demo.Main'),
        commandDescription?: string(name='CommandDescription', description='The description of the command.', example='testUdf(xx,yy)'),
        createTime?: long(name='CreateTime', description='The time when the UDF was created. This value is a UNIX timestamp.', example='1655953028000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='odps_first'),
          type?: string(name='Type', description='The type of the data source.', example='odps'),
        }(name='DataSource', description='The data source information about the UDF.'),
        databaseName?: string(name='DatabaseName', description='The name of the database. This parameter is returned for E-MapReduce (EMR) functions.', example='odps_first'),
        description?: string(name='Description', description='The overall description of the UDF.'),
        embeddedCode?: string(name='EmbeddedCode', description='The code of the embedded UDF.', example='print(\\"hello,world!\\")'),
        embeddedCodeType?: string(name='EmbeddedCodeType', description='The type of the nested code.

Valid values:

*   Python2
*   Python3
*   Java8
*   Java11
*   Java17', example='Python2'),
        embeddedResourceType?: string(name='EmbeddedResourceType', description='The type of the nested resource.

Valid values:

*   File: general resources
*   Embedded: embedded resources', example='File'),
        exampleDescription?: string(name='ExampleDescription', description='The description of the example.'),
        fileResource?: string(name='FileResource', description='The files resources.', example='xxx.jar,yyy.jar'),
        id?: string(name='Id', description='The ID of the UDF.', example='580667964888595XXXX'),
        modifyTime?: long(name='ModifyTime', description='The time when the UDF was last modified. This value is a UNIX timestamp.', example='1655953028000'),
        name?: string(name='Name', description='The name of the UDF.'),
        owner?: string(name='Owner', description='The owner of the UDF.', example='110755000425XXXX'),
        parameterDescription?: string(name='ParameterDescription', description='The description of the parameter.'),
        projectId?: string(name='ProjectId', description='The ID of the workspace to which the UDF belongs.', example='307XXX'),
        returnValueDescription?: string(name='ReturnValueDescription', description='The description of the return value.'),
        runtimeResource?: {
          resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group used when you run the UDF.', example='S_resgrop_xxx'),
        }(name='RuntimeResource', description='The information about the resource group used when you run the UDF.'),
        script?: {
          id?: string(name='Id', description='The script ID.', example='652567824470354XXXX'),
          path?: string(name='Path', description='The script path.'),
          runtime?: {
            command?: string(name='Command', description='The command.', example='ODPS_FUNCTION'),
          }(name='Runtime', description='The runtime.'),
        }(name='Script', description='The script information about the UDF.'),
        type?: string(name='Type', description='The UDF type.

Valid values:

*   MATH: mathematical operation function
*   AGGREGATE: aggregate function
*   STRING: string processing function
*   DATE: date function
*   ANALYTIC: window function
*   OTHER: others', example='MATH'),
      }
    ](name='Functions', description='The UDFs.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='294'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='89FB2BF0-EB00-5D03-9C34-05931001XXXX'),
}

model ListFunctionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFunctionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFunctions  ListFunctionsRequest
  * @return ListFunctionsResponse
 */
async function listFunctions(request: ListFunctionsRequest): ListFunctionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFunctions', 'GET', '/', 'json', false, 'json', request);
}

model ListNetworksRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  resourceGroupId: string(name='ResourceGroupId', description='This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX', position='Query'),
}

model ListNetworksResponseBody = {
  networkList?: [ 
    {
      createTime?: long(name='CreateTime', example='1727055811000'),
      createUser?: string(name='CreateUser', example='11075500042XXXXX'),
      id?: long(name='Id', example='1000'),
      resourceGroupId?: string(name='ResourceGroupId', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
      securityGroupId?: string(name='SecurityGroupId', example='sg-2ze13vamugr7jenXXXXX'),
      status?: string(name='Status', example='Running'),
      vpcId?: string(name='VpcId', example='vpc-m2et4f3oc8msfbccXXXXX'),
      vswitchId?: string(name='VswitchId', example='vsw-uf8usrhs7hjd9amsXXXXX'),
    }
  ](name='NetworkList'),
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', example='true'),
}

model ListNetworksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNetworksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNetworks  ListNetworksRequest
  * @return ListNetworksResponse
 */
async function listNetworks(request: ListNetworksRequest): ListNetworksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNetworks', 'GET', '/', 'json', false, 'json', request);
}

model ListNodeDependenciesRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the node.

This parameter is required.', example='860438872620113XXXX', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10', minimum=10, maximum=100, position='Query'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10001', position='Query'),
}

model ListNodeDependenciesResponseBody = {
  pagingInfo?: {
    nodes?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the node was created. This value is a UNIX timestamp.', example='1724505917000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='odps_first'),
          type?: string(name='Type', description='The type of the data source.', example='odps'),
        }(name='DataSource', description='The information about the data source.'),
        description?: string(name='Description', description='The description of the node.'),
        id?: string(name='Id', description='The ID of the node.', example='723932906364267XXXX'),
        inputs?: {
          nodeOutputs?: [ 
            {
              data?: string(name='Data', description='The node output.', example='860438872620113XXXX'),
            }
          ](name='NodeOutputs', description='The node outputs.'),
          tables?: [ 
            {
              guid?: string(name='Guid', description='The table ID.', example='odps.autotest.test_output_table_1'),
            }
          ](name='Tables', description='The tables.'),
          variables?: [ 
            {
              artifactType?: string(name='ArtifactType', description='The artifact type.', example='Variable'),
              id?: string(name='Id', description='The variable ID.', example='543218872620113XXXX'),
              name?: string(name='Name', description='The name of the variable.', example='input'),
              node?: {
                output?: string(name='Output', description='The output of the node.', example='860438872620113XXXX'),
              }(name='Node', description='The node to which the variable belongs.'),
              scope?: string(name='Scope', description='The scope of the variable.

Valid values:

*   NodeParameter
*   NodeContext
*   Workflow
*   Workspace', example='NodeParameter'),
              type?: string(name='Type', description='The type of the variable.

Valid values:

*   NoKvVariableExpression
*   Constant
*   PassThrough
*   System
*   NodeOutput', example='Constant'),
              value?: string(name='Value', description='The value of the variable.', example='111'),
            }
          ](name='Variables', description='The variables.'),
        }(name='Inputs', description='The input of the node.'),
        modifyTime?: long(name='ModifyTime', description='The time when the node was last modified. This value is a UNIX timestamp.', example='1724505917000'),
        name?: string(name='Name', description='The name of the node.'),
        outputs?: {
          nodeOutputs?: [ 
            {
              data?: string(name='Data', description='The node output.', example='463497880880954XXXX'),
            }
          ](name='NodeOutputs', description='The node outputs.'),
          tables?: [ 
            {
              guid?: string(name='Guid', description='The table ID.', example='odps.autotest.test_output_table_1'),
            }
          ](name='Tables', description='The tables.'),
          variables?: [ 
            {
              artifactType?: string(name='ArtifactType', description='The artifact type.', example='Variable'),
              id?: string(name='Id', description='The variable ID.', example='543217824470354XXXX'),
              name?: string(name='Name', description='The name of the variable.', example='output'),
              node?: {
                output?: string(name='Output', description='The output of the node to which the variable belongs.', example='463497880880954XXXX'),
              }(name='Node', description='The node to which the variable belongs.'),
              scope?: string(name='Scope', description='The scope of the variable.

Valid values:

*   NodeParameter
*   NodeContext
*   Workflow
*   Workspace', example='NodeParameter'),
              type?: string(name='Type', description='The type of the variable.

Valid values:

*   NoKvVariableExpression
*   Constant
*   PassThrough
*   System
*   NodeOutput', example='Constant'),
              value?: string(name='Value', description='The value of the variable.', example='111'),
            }
          ](name='Variables', description='The variables.'),
        }(name='Outputs', description='The output of the node.'),
        owner?: string(name='Owner', description='The owner of the node.', example='110755000425XXXX'),
        projectId?: string(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='65133'),
        recurrence?: string(name='Recurrence', description='The scheduling type.

Valid values:

*   Normal: The node is scheduled as expected.
*   Pause: The node is paused, and the running of its descendant nodes is blocked.
*   Skip: The node is dry run. The system does not actually run the node but directly prompts that the node is successfully run. The running duration of the node is 0 seconds. In addition, the node does not occupy resources or block the running of its descendant nodes.', example='Normal'),
        runtimeResource?: {
          resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='S_res_group_XXXX_XXXX'),
        }(name='RuntimeResource', description='The information about the resource group.'),
        script?: {
          id?: string(name='Id', description='The script ID.', example='853573334108680XXXX'),
          path?: string(name='Path', description='The script path.', example='root/demo'),
          runtime?: {
            command?: string(name='Command', description='The command used to distinguish node types.', example='ODPS_SQL'),
          }(name='Runtime', description='The runtime.'),
        }(name='Script', description='The script information.'),
        strategy?: {
          instanceMode?: string(name='InstanceMode', description='The instance generation mode.', example='T+1'),
          rerunInterval?: int32(name='RerunInterval', description='The rerun interval after a failure. Unit: milliseconds.', example='180000'),
          rerunMode?: string(name='RerunMode', description='The rerun mode.', example='Allowed'),
          rerunTimes?: int32(name='RerunTimes', description='The number of reruns after a failure.', example='3'),
          timeout?: int32(name='Timeout', description='The timeout period. Unit: milliseconds.', example='0'),
        }(name='Strategy', description='The scheduling policy.'),
        tags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='null'),
            value?: string(name='Value', description='The tag value', example='null'),
          }
        ](name='Tags', description='The tags. This parameter is not in use.'),
        taskId?: string(name='TaskId', description='The scheduling task ID.', example='580667964888595XXXX'),
        trigger?: {
          cron?: string(name='Cron', description='The CRON expression for scheduling.', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', description='The end time of the validity period of the scheduling. The time is in the yyyy-MM-dd HH:mm:ss format.', example='9999-01-01 00:00:00'),
          id?: string(name='Id', description='The trigger ID.', example='543680677872062XXXX'),
          startTime?: string(name='StartTime', description='The start time of the validity period of the scheduling. The time is in the yyyy-MM-dd HH:mm:ss format.', example='1970-01-01 00:00:00'),
          timezone?: string(name='Timezone', description='The time zone.', example='Asia/Shanghai'),
          type?: string(name='Type', description='The type of the trigger.

Valid values:

*   Scheduler
*   Manual
*   Streaming', example='Scheduler'),
        }(name='Trigger', description='The trigger.'),
      }
    ](name='Nodes', description='The descendant nodes.'),
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='90'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='204EAF68-CCE3-5112-8DA0-E7A60F02XXXX'),
}

model ListNodeDependenciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodeDependenciesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNodeDependencies  ListNodeDependenciesRequest
  * @return ListNodeDependenciesResponse
 */
async function listNodeDependencies(request: ListNodeDependenciesRequest): ListNodeDependenciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodeDependencies', 'GET', '/', 'json', false, 'json', request);
}

model ListNodesRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  containerId?: string(name='ContainerId', description='The container ID. This parameter specifies a filter condition.', example='860438872620113XXXX', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10', minimum=10, maximum=100, position='Query'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='12345', position='Query'),
  recurrence?: string(name='Recurrence', position='Query'),
  rerunMode?: string(name='RerunMode', description='The rerun mode. Valid values:

*   Allowed: The nodes can be rerun regardless of whether they are successfully run or fail to run.
*   FailureAllowed: The nodes can be rerun only after they fail to run.
*   Denied: The nodes cannot be rerun regardless of whether they are successfully run or fail to run.', example='Allowed', position='Query'),
  scene?: string(name='Scene', description='The scene of nodes. This parameter specifies a filter condition.

Valid values:

*   DATAWORKS_PROJECT
*   MANUAL_WORKFLOW
*   MANUAL_NODE', example='DATAWORKS_PROJECT', position='Query'),
}

model ListNodesResponseBody = {
  pagingInfo?: {
    nodes?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the node was created. This value is a UNIX timestamp.', example='1722910655000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='odps_first'),
          type?: string(name='Type', description='The type of the data source.', example='odps'),
        }(name='DataSource', description='The information about the data source.'),
        description?: string(name='Description', description='The description of the node.'),
        id?: string(name='Id', description='The ID of the node.', example='860438872620113XXXX'),
        inputs?: {
          nodeOutputs?: [ 
            {
              data?: string(name='Data', description='The node output.', example='623731286945488XXXX'),
            }
          ](name='NodeOutputs', description='The node outputs.'),
          tables?: [ 
            {
              guid?: string(name='Guid', description='The table ID.', example='odps.autotest.test_output_table_1'),
            }
          ](name='Tables', description='The tables.'),
          variables?: [ 
            {
              artifactType?: string(name='ArtifactType', description='The artifact type.', example='Variable'),
              id?: string(name='Id', description='The variable ID.', example='543211286945488XXXX'),
              name?: string(name='Name', description='The name of the variable.', example='input'),
              node?: {
                output?: string(name='Output', description='The output of the node.', example='623731286945488XXXX'),
              }(name='Node', description='The node to which the variable belongs.'),
              scope?: string(name='Scope', description='The scope of the variable.

Valid values:

*   WorkSpace
*   NodeParameter
*   NodeContext
*   Workflow', example='NodeParameter'),
              type?: string(name='Type', description='The type of the variable.

Valid values:

*   NoKvVariableExpression
*   Constant
*   PassThrough
*   System
*   NodeOutput', example='Constant'),
              value?: string(name='Value', description='The value of the variable.', example='222'),
            }
          ](name='Variables', description='The variables.'),
        }(name='Inputs', description='The input of the node.'),
        modifyTime?: long(name='ModifyTime', description='The time when the node was last modified. This value is a UNIX timestamp.', example='1722910655000'),
        name?: string(name='Name', description='The name of the node.', example='test'),
        outputs?: {
          nodeOutputs?: [ 
            {
              data?: string(name='Data', description='The node output.', example='860438872620113XXXX'),
            }
          ](name='NodeOutputs', description='The node outputs.'),
          tables?: [ 
            {
              guid?: string(name='Guid', description='The table ID.', example='odps.autotest.test_output_table_1'),
            }
          ](name='Tables', description='The tables.'),
          variables?: [ 
            {
              artifactType?: string(name='ArtifactType', description='The artifact type.', example='Variable'),
              id?: string(name='Id', description='The variable ID.', example='623731286945488XXXX'),
              name?: string(name='Name', description='The name of the variable.', example='output'),
              node?: {
                output?: string(name='Output', description='The output of the node.', example='860438872620113XXXX'),
              }(name='Node', description='The node to which the variable belongs.'),
              scope?: string(name='Scope', description='The scope of the variable.

Valid values:

*   NodeParameter
*   NodeContext
*   Workflow
*   Workspace', example='NodeParameter'),
              type?: string(name='Type', description='The type of the variable.

Valid values:

*   NoKvVariableExpression
*   Constant
*   PassThrough
*   System
*   NodeOutput', example='Constant'),
              value?: string(name='Value', description='The value of the variable.', example='111'),
            }
          ](name='Variables', description='The variables.'),
        }(name='Outputs', description='The output of the node.'),
        owner?: string(name='Owner', description='The owner of the node.', example='110755000425XXXX'),
        projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.', example='33233'),
        recurrence?: string(name='Recurrence', description='The scheduling type.

Valid values:

*   Normal: The node is scheduled as expected.
*   Pause: The node is paused, and the running of its descendant nodes is blocked.
*   Skip: The node is dry run. The system does not actually run the node but directly prompts that the node is successfully run. The running duration of the node is 0 seconds. In addition, the node does not occupy resources or block the running of its descendant nodes.', example='Normal'),
        runtimeResource?: {
          resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='S_resgrop_xxx'),
        }(name='RuntimeResource', description='The information about the resource group.'),
        script?: {
          id?: string(name='Id', description='The script ID.', example='853573334108680XXXX'),
          path?: string(name='Path', description='The script path.', example='root/demo'),
          runtime?: {
            command?: string(name='Command', description='The command used to distinguish node types.', example='ODPS_SQL'),
          }(name='Runtime', description='The runtime.'),
        }(name='Script', description='The script information.'),
        strategy?: {
          instanceMode?: string(name='InstanceMode', description='The instance generation mode.', example='T+1'),
          rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: milliseconds.', example='180000'),
          rerunMode?: string(name='RerunMode', description='The rerun mode.', example='Allowed'),
          rerunTimes?: int32(name='RerunTimes', description='The number of reruns.', example='3'),
          timeout?: int32(name='Timeout', description='The timeout period.', example='0'),
        }(name='Strategy', description='The scheduling policy.'),
        tags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='null'),
            value?: string(name='Value', description='The tag value.', example='null'),
          }
        ](name='Tags', description='The tags. This parameter is not in use.'),
        taskId?: string(name='TaskId', description='The scheduling task ID.', example='88888888888'),
        trigger?: {
          cron?: string(name='Cron', description='The CRON expression for scheduling.', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', description='The end time of the validity period of the trigger.', example='9999-01-01 00:00:00'),
          id?: string(name='Id', description='The trigger ID.', example='543680677872062XXXX'),
          startTime?: string(name='StartTime', description='The start time of the validity period of the trigger.', example='1970-01-01 00:00:00'),
          timezone?: string(name='Timezone', description='The time zone.', example='Asia/Shanghai'),
          type?: string(name='Type', description='The type of the trigger.

Valid values:

*   Scheduler
*   Manual
*   Steaming

<!---->

*
*
*', example='Scheduler'),
        }(name='Trigger', description='The trigger.'),
      }
    ](name='Nodes', description='The nodes.'),
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='42'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2197B9C4-39CE-55EA-8EEA-FDBAE52DXXXX'),
}

model ListNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNodes  ListNodesRequest
  * @return ListNodesResponse
 */
async function listNodes(request: ListNodesRequest): ListNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodes', 'GET', '/', 'json', false, 'json', request);
}

model ListProjectMembersRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10', position='Body'),
  projectId: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='62136', position='Body'),
  roleCodes?: [ string ](name='RoleCodes', description='The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/zh/dataworks/developer-reference/api-dataworks-public-2024-05-18-listprojectroles?spm=a2c4g.11186623.0.0.43841daeywTtF3) operation to query the codes of all roles in the workspace.', shrink='json', position='Body'),
  userIds?: [ string ](name='UserIds', description='The IDs of the accounts used by the members in the workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console?spm=a2c4g.11186623.0.0.7f96340a3HFgqS), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the IDs of the accounts used by the members in the workspace.', shrink='json', position='Body'),
}

model ListProjectMembersResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    projectMembers?: [ 
      {
        projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='62136'),
        roles?: [ 
          {
            code?: string(name='Code', description='The code of the role.', example='role_project_guest'),
            name?: string(name='Name', description='The name of the role.'),
            type?: string(name='Type', description='The type of the role. Valid values:

*   UserCustom: custom role
*   System: built-in role', example='System'),
          }
        ](name='Roles', description='The roles that are assigned to the member.'),
        status?: string(name='Status', description='The status of the member. Valid values:

*   Normal
*   Forbidden', example='Normal'),
        userId?: string(name='UserId', description='The ID of the account used by the member.', example='123422344899'),
      }
    ](name='ProjectMembers', description='The members in the workspace.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='12'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='9FBBBB1F-DD5E-5D8E-8F50-37F77460F056'),
}

model ListProjectMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectMembersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListProjectMembers  ListProjectMembersRequest
  * @return ListProjectMembersResponse
 */
async function listProjectMembers(request: ListProjectMembersRequest): ListProjectMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProjectMembers', 'POST', '/', 'json', true, 'form', request);
}

model ListProjectRolesRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  codes?: [ string ](name='Codes', shrink='json', position='Body'),
  names?: [ string ](name='Names', shrink='json', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='21229', position='Body'),
  type?: string(name='Type', example='System', position='Body'),
}

model ListProjectRolesResponseBody = {
  pagingInfo?: {
    pageNumber?: string(name='PageNumber', example='1'),
    pageSize?: string(name='PageSize', example='10'),
    projectRoles?: [ 
      {
        code?: string(name='Code', example='role_project_guest'),
        name?: string(name='Name'),
        projectId?: long(name='ProjectId', example='21229'),
        type?: string(name='Type', example='System'),
      }
    ](name='ProjectRoles'),
    totalCount?: string(name='TotalCount', example='42'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='61649187-0BCF-5E75-8D4B-64FDBEBBB447'),
}

model ListProjectRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectRolesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListProjectRoles  ListProjectRolesRequest
  * @return ListProjectRolesResponse
 */
async function listProjectRoles(request: ListProjectRolesRequest): ListProjectRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProjectRoles', 'POST', '/', 'json', true, 'form', request);
}

model ListProjectsRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', example='rg-acfmzbn7pti3zff', position='Body'),
  aliyunResourceTags?: [ 
    {
      key?: string(name='Key', example='batch'),
      value?: string(name='Value', example='blue'),
    }
  ](name='AliyunResourceTags', shrink='json', position='Body'),
  devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', example='true', position='Body'),
  devRoleDisabled?: boolean(name='DevRoleDisabled', example='false', position='Body'),
  ids?: [ long ](name='Ids', shrink='json', position='Body'),
  names?: [ string ](name='Names', shrink='json', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  paiTaskEnabled?: boolean(name='PaiTaskEnabled', example='true', position='Body'),
  status?: string(name='Status', example='Available', position='Body'),
}

model ListProjectsResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', example='10'),
    pageSize?: int32(name='PageSize', example='1'),
    projects?: [ 
      {
        aliyunResourceGroupId?: string(name='AliyunResourceGroupId', example='rg-acfmzbn7pti3zfa'),
        aliyunResourceTags?: [ 
          {
            key?: string(name='Key', example='batch'),
            value?: string(name='Value', example='blue'),
          }
        ](name='AliyunResourceTags'),
        description?: string(name='Description'),
        devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', example='true'),
        devRoleDisabled?: boolean(name='DevRoleDisabled', example='false'),
        displayName?: string(name='DisplayName'),
        id?: long(name='Id', example='123456'),
        name?: string(name='Name', example='sora_finance'),
        owner?: string(name='Owner', example='123532153125'),
        paiTaskEnabled?: boolean(name='PaiTaskEnabled', example='true'),
        status?: string(name='Status', example='Available'),
      }
    ](name='Projects'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='6D24AD9A-652F-59E2-AC1F-05029300F8A4'),
}

model ListProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListProjects  ListProjectsRequest
  * @return ListProjectsResponse
 */
async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProjects', 'POST', '/', 'json', true, 'form', request);
}

model ListResourceGroupsRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  name?: string(name='Name', example='Resource', position='Query'),
  paymentType?: string(name='PaymentType', example='PrePaid', position='Query'),
  projectId?: long(name='ProjectId', example='1000', position='Query'),
  resourceGroupTypes?: [ string ](name='ResourceGroupTypes', shrink='json', position='Query'),
  statuses?: [ string ](name='Statuses', shrink='json', position='Query'),
}

model ListResourceGroupsResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  resourceGroupList?: [ 
    {
      createTime?: long(name='CreateTime', example='1727055811000'),
      createUser?: string(name='CreateUser', example='11075500042XXXXX'),
      defaultVpcId?: string(name='DefaultVpcId', example='vpc-m2et4f3oc8msfbccXXXXX'),
      defaultVswicthId?: string(name='DefaultVswicthId', example='vsw-uf8usrhs7hjd9amsXXXXX'),
      id?: string(name='Id', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
      name?: string(name='Name', example='common_resource_group'),
      orderInstanceId?: string(name='OrderInstanceId', example='c442b330-3b10-4584-959e-736e4edXXXXX'),
      paymentType?: string(name='PaymentType', example='PrePaid'),
      remark?: string(name='Remark', example='创建用于普通任务的通用资源组'),
      resourceGroupType?: string(name='ResourceGroupType', example='CommonV2'),
      spec?: {
        amount?: int32(name='Amount', example='1'),
        standard?: string(name='Standard', example='2CU'),
      }(name='Spec'),
      status?: string(name='Status', example='Normal'),
    }
  ](name='ResourceGroupList'),
  success?: boolean(name='Success', example='true'),
}

model ListResourceGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourceGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListResourceGroups  ListResourceGroupsRequest
  * @return ListResourceGroupsResponse
 */
async function listResourceGroups(request: ListResourceGroupsRequest): ListResourceGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourceGroups', 'GET', '/', 'json', false, 'json', request);
}

model ListResourcesRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the workspace administrator. You can log on to the Alibaba Cloud Management Console and view the ID on the Security Settings page.', example='110755000425XXXX', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10', minimum=10, maximum=100, position='Query'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10002', position='Query'),
  type?: string(name='Type', description='The resource type. This parameter specifies a filter condition.

Valid values:

*   Python
*   Jar
*   Archive
*   File', example='python', position='Query'),
}

model ListResourcesResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    resources?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the file resource was created. This value is a UNIX timestamp.', example='1724505917000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='odps_first'),
          type?: string(name='Type', description='The type of the data source.', example='odps'),
        }(name='DataSource', description='The information about the data source.'),
        id?: string(name='Id', description='The ID of the file resource.', example='631478864897630XXXX'),
        modifyTime?: long(name='ModifyTime', description='The times when the file resource was last modified. This value is a UNIX timestamp.', example='1724505917000'),
        name?: string(name='Name', description='The name of the file resource.', example='math.py'),
        owner?: string(name='Owner', description='The owner of the file resource.', example='110755000425XXXX'),
        projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.', example='344247'),
        script?: {
          id?: string(name='Id', description='The script ID.', example='123348864897630XXXX'),
          path?: string(name='Path', description='The script path.', example='root/demo'),
          runtime?: {
            command?: string(name='Command', description='The command used to distinguish file resource types.', example='ODPS_PYTHON'),
          }(name='Runtime', description='The runtime.'),
        }(name='Script', description='The script information.'),
        sourcePath?: string(name='SourcePath', description='The path of the source of the file resource. If the SourecType parameter is set to Local, this parameter is left empty.', example='XXX/unknown/ide/1/XXX/20240820200851_963a9da676de44ef8d06a6576a8c4d6a.py'),
        sourceType?: string(name='SourceType', description='The storage type of the source of the file resource.

Valid values:

*   Local
*   Oss', example='local'),
        targetPath?: string(name='TargetPath', description='The storage path of the destination of the file resource.', example='XXX/unknown/ide/1/XXX/20240820200851_963a9da676de44ef8d06a6576a8c4d6a.py'),
        targetType?: string(name='TargetType', description='The storage type of the destination of the file resource.

Valid values:

*   Gateway
*   Oss
*   Hdfs', example='oss'),
        type?: string(name='Type', description='The type of the file resource.

Valid values:

*   Python
*   Jar
*   Archive
*   File', example='jar'),
      }
    ](name='Resources', description='The file resources.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='131'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='99EBE7CF-69C0-5089-BE3E-79563C31XXXX'),
}

model ListResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListResources  ListResourcesRequest
  * @return ListResourcesResponse
 */
async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResources', 'GET', '/', 'json', false, 'json', request);
}

model ListRoutesRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  networkId: long(name='NetworkId', description='This parameter is required.', example='1000', position='Query'),
}

model ListRoutesResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  routeList?: [ 
    {
      createTime?: long(name='CreateTime', example='1727055811000'),
      destinationCidr?: string(name='DestinationCidr', example='192.168.0.0/16'),
      id?: long(name='Id', example='1000'),
      networkId?: long(name='NetworkId', example='1000'),
      resourceGroupId?: string(name='ResourceGroupId', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
      resourceId?: string(name='ResourceId', example='ns-679XXXXXX'),
    }
  ](name='RouteList'),
  success?: boolean(name='Success', example='true'),
}

model ListRoutesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRoutesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRoutes  ListRoutesRequest
  * @return ListRoutesResponse
 */
async function listRoutes(request: ListRoutesRequest): ListRoutesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRoutes', 'GET', '/', 'json', false, 'json', request);
}

model ListTaskInstanceOperationLogsRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  date?: long(name='Date', example='1710239005403', position='Query'),
  id: long(name='Id', description='This parameter is required.', example='1234', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListTaskInstanceOperationLogsResponseBody = {
  pagingInfo?: {
    operationLogs?: [ 
      {
        createTime?: long(name='CreateTime', example='1710239005403'),
        operationContent?: string(name='OperationContent'),
        operationSeq?: long(name='OperationSeq', example='1111'),
        taskInstanceId?: long(name='TaskInstanceId', example='1234'),
        user?: string(name='User', example='1000'),
      }
    ](name='OperationLogs'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListTaskInstanceOperationLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskInstanceOperationLogsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTaskInstanceOperationLogs  ListTaskInstanceOperationLogsRequest
  * @return ListTaskInstanceOperationLogsResponse
 */
async function listTaskInstanceOperationLogs(request: ListTaskInstanceOperationLogsRequest): ListTaskInstanceOperationLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskInstanceOperationLogs', 'GET', '/', 'json', false, 'json', request);
}

model ListTaskInstancesRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  bizdate: long(name='Bizdate', description='This parameter is required.', example='1710239005403', position='Body'),
  id?: long(name='Id', example='1234', position='Body'),
  ids?: [ long ](name='Ids', shrink='json', position='Body'),
  owner?: string(name='Owner', example='1000', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  projectEnv?: string(name='ProjectEnv', example='Prod', position='Body'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='100', position='Body'),
  runtimeResource?: string(name='RuntimeResource', example='S_res_group_524258031846018_1684XXXXXXXXX', position='Body'),
  sortBy?: string(name='SortBy', example='Id Desc', position='Body'),
  taskId?: long(name='TaskId', example='1234', position='Body'),
  taskIds?: [ long ](name='TaskIds', shrink='json', position='Body'),
  taskName?: string(name='TaskName', position='Body'),
  taskType?: string(name='TaskType', example='ODPS_SQL', position='Body'),
  triggerRecurrence?: string(name='TriggerRecurrence', position='Body'),
  triggerType?: string(name='TriggerType', position='Body'),
  workflowId?: long(name='WorkflowId', example='1234', position='Body'),
  workflowInstanceId?: long(name='WorkflowInstanceId', example='1234', position='Body'),
  workflowInstanceType?: string(name='WorkflowInstanceType', example='Normal', position='Body'),
}

model ListTaskInstancesResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    taskInstances?: [ 
      {
        baselineId?: long(name='BaselineId', example='1234'),
        bizdate?: long(name='Bizdate', example='1710239005403'),
        createTime?: long(name='CreateTime', example='1710239005403'),
        createUser?: string(name='CreateUser', example='1000'),
        dataSource?: {
          name?: string(name='Name', example='mysql_test'),
        }(name='DataSource'),
        description?: string(name='Description', example='test'),
        finishedTime?: long(name='FinishedTime', example='1710239005403'),
        id?: long(name='Id', example='1234'),
        modifyTime?: long(name='ModifyTime', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', example='1000'),
        owner?: string(name='Owner', example='1000'),
        periodNumber?: int32(name='PeriodNumber'),
        priority?: int32(name='Priority', example='1'),
        projectEnv?: string(name='ProjectEnv', example='Prod'),
        projectId?: long(name='ProjectId', example='100'),
        rerunMode?: string(name='RerunMode', example='AllAllowed'),
        runNumber?: int32(name='RunNumber', example='1'),
        runtime?: {
          gateway?: string(name='Gateway', example='cn-shanghai.1.2'),
          processId?: string(name='ProcessId', example='T3_123'),
        }(name='Runtime'),
        runtimeResource?: {
          cu?: string(name='Cu', example='0.25'),
          image?: string(name='Image', example='i-xxxxxx'),
          resourceGroupId?: string(name='ResourceGroupId', example='S_res_group_524258031846018_1684XXXXXXXXX'),
        }(name='RuntimeResource'),
        startedTime?: long(name='StartedTime', example='1710239005403'),
        status?: string(name='Status', example='Success'),
        taskId?: long(name='TaskId', example='1234'),
        taskName?: string(name='TaskName'),
        taskType?: string(name='TaskType', example='ODPS_SQL'),
        tenantId?: long(name='TenantId', example='1'),
        timeout?: int32(name='Timeout', example='1'),
        triggerRecurrence?: string(name='TriggerRecurrence', example='Normal'),
        triggerTime?: long(name='TriggerTime', example='1710239005403'),
        triggerType?: string(name='TriggerType', example='Scheduler'),
        workflowId?: long(name='WorkflowId', example='1234'),
        workflowInstanceId?: long(name='WorkflowInstanceId', example='1234'),
        workflowInstanceType?: string(name='WorkflowInstanceType', example='Normal'),
        workflowName?: string(name='WorkflowName'),
      }
    ](name='TaskInstances'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTaskInstances  ListTaskInstancesRequest
  * @return ListTaskInstancesResponse
 */
async function listTaskInstances(request: ListTaskInstancesRequest): ListTaskInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskInstances', 'POST', '/', 'json', true, 'form', request);
}

model ListTaskOperationLogsRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  date?: long(name='Date', example='1710239005403', position='Query'),
  id: long(name='Id', description='This parameter is required.', example='1234', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  projectEnv?: string(name='ProjectEnv', example='Prod', position='Query'),
}

model ListTaskOperationLogsResponseBody = {
  pagingInfo?: {
    operationLogs?: [ 
      {
        createTime?: long(name='CreateTime', example='1710239005403'),
        operationContent?: string(name='OperationContent'),
        operationSeq?: long(name='OperationSeq', example='1111'),
        taskId?: long(name='TaskId', example='1234'),
        user?: string(name='User', example='1000'),
      }
    ](name='OperationLogs'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListTaskOperationLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskOperationLogsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTaskOperationLogs  ListTaskOperationLogsRequest
  * @return ListTaskOperationLogsResponse
 */
async function listTaskOperationLogs(request: ListTaskOperationLogsRequest): ListTaskOperationLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskOperationLogs', 'GET', '/', 'json', false, 'json', request);
}

model ListTasksRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  name?: string(name='Name', position='Body'),
  owner?: string(name='Owner', example='1000', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  projectEnv?: string(name='ProjectEnv', example='Prod', position='Body'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='100', position='Body'),
  runtimeResource?: string(name='RuntimeResource', example='S_res_group_524258031846018_1684XXXXXXXXX', position='Body'),
  sortBy?: string(name='SortBy', example='Id Desc', position='Body'),
  taskType?: string(name='TaskType', example='ODPS_SQL', position='Body'),
  triggerRecurrence?: string(name='TriggerRecurrence', example='Normal', position='Body'),
  triggerType?: string(name='TriggerType', example='Scheduler', position='Body'),
  workflowId?: long(name='WorkflowId', example='1234', position='Body'),
}

model ListTasksResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    tasks?: [ 
      {
        baselineId?: long(name='BaselineId', example='1234'),
        createTime?: long(name='CreateTime', example='1710239005403'),
        createUser?: string(name='CreateUser', example='1000'),
        dataSource?: {
          name?: string(name='Name', example='mysql_test'),
        }(name='DataSource'),
        description?: string(name='Description', example='test'),
        id?: long(name='Id', example='1234'),
        instanceMode?: string(name='InstanceMode'),
        modifyTime?: long(name='ModifyTime', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', example='1000'),
        name?: string(name='Name'),
        owner?: string(name='Owner', example='1000'),
        priority?: int32(name='Priority', example='1'),
        projectEnv?: string(name='ProjectEnv', example='Prod'),
        projectId?: long(name='ProjectId', example='100'),
        rerunInterval?: int32(name='RerunInterval', example='60'),
        rerunMode?: string(name='RerunMode', example='AllAllowed'),
        rerunTimes?: int32(name='RerunTimes', example='3'),
        runtimeResource?: {
          cu?: string(name='Cu', example='0.25'),
          image?: string(name='Image', example='i-xxxxxx'),
          resourceGroupId?: string(name='ResourceGroupId', example='S_res_group_524258031846018_1684XXXXXXXXX'),
        }(name='RuntimeResource'),
        tenantId?: long(name='TenantId', example='1'),
        timeout?: int32(name='Timeout', example='3600'),
        trigger?: {
          cron?: string(name='Cron', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', example='9999-01-01 00:00:00'),
          recurrence?: string(name='Recurrence', example='Normal'),
          startTime?: string(name='StartTime', example='1970-01-01 00:00:00'),
          type?: string(name='Type', example='Scheduler'),
        }(name='Trigger'),
        type?: string(name='Type', example='ODPS_SQL'),
        workflowId?: long(name='WorkflowId', example='1234'),
      }
    ](name='Tasks'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTasks  ListTasksRequest
  * @return ListTasksResponse
 */
async function listTasks(request: ListTasksRequest): ListTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTasks', 'POST', '/', 'json', true, 'form', request);
}

model ListUpstreamTaskInstancesRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='1234', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListUpstreamTaskInstancesResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    taskInstances?: [ 
      {
        baselineId?: long(name='BaselineId', example='1234'),
        bizdate?: long(name='Bizdate', example='1710239005403'),
        createTime?: long(name='CreateTime', example='1710239005403'),
        createUser?: string(name='CreateUser', example='1000'),
        dataSource?: {
          name?: string(name='Name', example='mysql_test'),
        }(name='DataSource'),
        description?: string(name='Description', example='test'),
        finishedTime?: long(name='FinishedTime', example='1710239005403'),
        id?: long(name='Id', example='1234'),
        modifyTime?: long(name='ModifyTime', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', example='1000'),
        owner?: string(name='Owner', example='1000'),
        periodNumber?: int32(name='PeriodNumber'),
        priority?: int32(name='Priority', example='1'),
        projectEnv?: string(name='ProjectEnv', example='Prod'),
        projectId?: long(name='ProjectId', example='100'),
        rerunMode?: string(name='RerunMode', example='AllAllowed'),
        runNumber?: int32(name='RunNumber', example='1'),
        runtime?: {
          gateway?: string(name='Gateway', example='cn-shanghai.1.2'),
          processId?: string(name='ProcessId', example='T3_123'),
        }(name='Runtime'),
        runtimeResource?: {
          cu?: string(name='Cu', example='0.25'),
          image?: string(name='Image', example='i-xxxxxx'),
          resourceGroupId?: string(name='ResourceGroupId', example='S_res_group_524258031846018_1684XXXXXXXXX'),
        }(name='RuntimeResource'),
        startedTime?: long(name='StartedTime', example='1710239005403'),
        status?: string(name='Status', example='Success'),
        taskId?: long(name='TaskId', example='1234'),
        taskName?: string(name='TaskName'),
        taskType?: string(name='TaskType', example='ODPS_SQL'),
        tenantId?: long(name='TenantId', example='1'),
        timeout?: int32(name='Timeout', example='1'),
        triggerRecurrence?: string(name='TriggerRecurrence', example='Normal'),
        triggerTime?: long(name='TriggerTime', example='1710239005403'),
        triggerType?: string(name='TriggerType', example='Scheduler'),
        workflowId?: long(name='WorkflowId', example='1234'),
        workflowInstanceId?: long(name='WorkflowInstanceId', example='1234'),
        workflowInstanceType?: string(name='WorkflowInstanceType', example='Normal'),
        workflowName?: string(name='WorkflowName'),
      }
    ](name='TaskInstances'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListUpstreamTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUpstreamTaskInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUpstreamTaskInstances  ListUpstreamTaskInstancesRequest
  * @return ListUpstreamTaskInstancesResponse
 */
async function listUpstreamTaskInstances(request: ListUpstreamTaskInstancesRequest): ListUpstreamTaskInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUpstreamTaskInstances', 'GET', '/', 'json', false, 'json', request);
}

model ListUpstreamTasksRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: long(name='Id', description='This parameter is required.', example='1234', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  projectEnv?: string(name='ProjectEnv', example='Prod', position='Query'),
}

model ListUpstreamTasksResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    tasks?: [ 
      {
        baselineId?: long(name='BaselineId', example='1234'),
        createTime?: long(name='CreateTime', example='1710239005403'),
        createUser?: string(name='CreateUser', example='1000'),
        dataSource?: {
          name?: string(name='Name', example='mysql_test'),
        }(name='DataSource'),
        description?: string(name='Description', example='test'),
        id?: long(name='Id', example='1234'),
        instanceMode?: string(name='InstanceMode'),
        modifyTime?: long(name='ModifyTime', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', example='1000'),
        name?: string(name='Name'),
        owner?: string(name='Owner', example='1000'),
        priority?: int32(name='Priority', example='1'),
        projectEnv?: string(name='ProjectEnv', example='Prod'),
        projectId?: long(name='ProjectId', example='100'),
        rerunInterval?: int32(name='RerunInterval', example='60'),
        rerunMode?: string(name='RerunMode', example='AllAllowed'),
        rerunTimes?: int32(name='RerunTimes', example='3'),
        runtimeResource?: {
          cu?: string(name='Cu', example='0.25'),
          image?: string(name='Image', example='i-xxxxxx'),
          resourceGroupId?: string(name='ResourceGroupId', example='S_res_group_524258031846018_1684XXXXXXXXX'),
        }(name='RuntimeResource'),
        stepType?: string(name='StepType'),
        tenantId?: long(name='TenantId', example='1'),
        timeout?: int32(name='Timeout', example='3600'),
        trigger?: {
          cron?: string(name='Cron', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', example='9999-01-01 00:00:00'),
          recurrence?: string(name='Recurrence', example='Normal'),
          startTime?: string(name='StartTime', example='1970-01-01 00:00:00'),
          timezone?: string(name='Timezone', example='Asia/Shanghai'),
          type?: string(name='Type', example='Scheduler'),
        }(name='Trigger'),
        type?: string(name='Type', example='ODPS_SQL'),
        workflowId?: long(name='WorkflowId', example='1234'),
      }
    ](name='Tasks'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListUpstreamTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUpstreamTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUpstreamTasks  ListUpstreamTasksRequest
  * @return ListUpstreamTasksResponse
 */
async function listUpstreamTasks(request: ListUpstreamTasksRequest): ListUpstreamTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUpstreamTasks', 'GET', '/', 'json', false, 'json', request);
}

model ListWorkflowDefinitionsRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the workspace administrator. You can log on to the Alibaba Cloud Management Console and view the ID on the Security Settings page.', example='110755000425XXXX', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10', minimum=10, maximum=100, position='Query'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000', position='Query'),
  type?: string(name='Type', description='The workflow type. This parameter specifies a filter condition.

Valid values:

*   CycleWorkflow
*   ManualWorkflow', example='CycleWorkflow', position='Query'),
}

model ListWorkflowDefinitionsResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='227'),
    workflowDefinitions?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the workflow was created. This value is a UNIX timestamp.', example='1698057323000'),
        description?: string(name='Description', description='The description of the workflow.'),
        id?: string(name='Id', description='The ID of the workflow.', example='463497880880954XXXX'),
        modifyTime?: long(name='ModifyTime', description='The times when the workflow was last modified. This value is a UNIX timestamp.', example='1698057323000'),
        name?: string(name='Name', description='The name of the workflow.'),
        owner?: string(name='Owner', description='The owner.', example='110755000425XXXX'),
        projectId: string(name='ProjectId', description='The ID of the DataWorks workspace to which the workflow belongs.

This parameter is required.', example='4710'),
        script?: {
          id?: string(name='Id', description='The script ID.', example='698002781368644XXXX'),
          path?: string(name='Path', description='The script path.'),
          runtime?: {
            command?: string(name='Command', description='The command.', example='WORKFLOW'),
          }(name='Runtime', description='The runtime.'),
        }(name='Script', description='The script information.'),
        type?: string(name='Type', description='The type of the workflow.

Valid values:

*   CycleWorkflow
*   ManualWorkflow', example='CycleWorkflow'),
      }
    ](name='WorkflowDefinitions', description='The workflows.'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='8C3ED0C5-ABAB-55E1-854B-DAC02B11XXXX'),
}

model ListWorkflowDefinitionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkflowDefinitionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWorkflowDefinitions  ListWorkflowDefinitionsRequest
  * @return ListWorkflowDefinitionsResponse
 */
async function listWorkflowDefinitions(request: ListWorkflowDefinitionsRequest): ListWorkflowDefinitionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWorkflowDefinitions', 'GET', '/', 'json', false, 'json', request);
}

model MoveFunctionRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the UDF.

This parameter is required.', example='543217824470354XXXX', position='Body'),
  path: string(name='Path', description='The path to which you want to move the UDF. You do not need to specify a UDF name in the path.

For example, if you want to move the test UDF to root/demo/test, you must set this parameter to root/demo.

This parameter is required.', example='root/demo', position='Body'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='12345', position='Body'),
}

model MoveFunctionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='48C0E2F0-52BA-5888-BDFA-28F1B9AFXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model MoveFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveFunctionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MoveFunction  MoveFunctionRequest
  * @return MoveFunctionResponse
 */
async function moveFunction(request: MoveFunctionRequest): MoveFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveFunction', 'POST', '/', 'json', true, 'form', request);
}

model MoveNodeRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the node.

This parameter is required.', example='652567824470354XXXX', position='Body'),
  path: string(name='Path', description='The path to which you want to move the node. You do not need to specify a node name in the path.

For example, if you want to move the test node to root/demo/test, you must set this parameter to root/demo.

This parameter is required.', example='root/demo', position='Body'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000', position='Body'),
}

model MoveNodeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C99E2BE6-9DEA-5C2E-8F51-1DDCFEADXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model MoveNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveNodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MoveNode  MoveNodeRequest
  * @return MoveNodeResponse
 */
async function moveNode(request: MoveNodeRequest): MoveNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveNode', 'POST', '/', 'json', true, 'form', request);
}

model MoveResourceRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the file resource.

This parameter is required.', example='652567824470354XXXX', position='Body'),
  path: string(name='Path', description='The path to which you want to move the file resource. You do not need to specify a file resource name in the path.

For example, if you want to move the test file resource to root/demo/test, you must set this parameter to root/demo.

This parameter is required.', example='root/demo', position='Body'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000', position='Body'),
}

model MoveResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F332BED4-DD73-5972-A9C2-642BA6CFXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model MoveResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MoveResource  MoveResourceRequest
  * @return MoveResourceResponse
 */
async function moveResource(request: MoveResourceRequest): MoveResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResource', 'POST', '/', 'json', true, 'form', request);
}

model MoveWorkflowDefinitionRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the workflow.

This parameter is required.', example='543217824470354XXXX', position='Body'),
  path: string(name='Path', description='The path to which you want to move the workflow. You do not need to specify a workflow name in the path.

For example, if you want to move the test workflow to root/demo/test, you must set this parameter to root/demo.

This parameter is required.', example='root/demo', position='Body'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10001', position='Body'),
}

model MoveWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='05ADAF4F-7709-5FB1-B606-3513483FXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model MoveWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveWorkflowDefinitionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MoveWorkflowDefinition  MoveWorkflowDefinitionRequest
  * @return MoveWorkflowDefinitionResponse
 */
async function moveWorkflowDefinition(request: MoveWorkflowDefinitionRequest): MoveWorkflowDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveWorkflowDefinition', 'POST', '/', 'json', true, 'form', request);
}

model RemoveTaskInstanceDependenciesRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  comment?: string(name='Comment', example='this is a comment', position='Body'),
  id: long(name='Id', description='This parameter is required.', example='1234', position='Query'),
  upstreamTaskInstanceIds?: [ long ](name='UpstreamTaskInstanceIds', shrink='json', position='Body'),
}

model RemoveTaskInstanceDependenciesResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  success?: boolean(name='Success', example='true'),
}

model RemoveTaskInstanceDependenciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveTaskInstanceDependenciesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveTaskInstanceDependencies  RemoveTaskInstanceDependenciesRequest
  * @return RemoveTaskInstanceDependenciesResponse
 */
async function removeTaskInstanceDependencies(request: RemoveTaskInstanceDependenciesRequest): RemoveTaskInstanceDependenciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveTaskInstanceDependencies', 'POST', '/', 'json', true, 'form', request);
}

model RenameFunctionRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the UDF.

This parameter is required.', example='543217824470354XXXX', position='Body'),
  name: string(name='Name', description='The new name.

This parameter is required.', position='Body'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10002', position='Body'),
}

model RenameFunctionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1ED4C97F-BA2A-57C5-BA7C-8853627EXXXX'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model RenameFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameFunctionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenameFunction  RenameFunctionRequest
  * @return RenameFunctionResponse
 */
async function renameFunction(request: RenameFunctionRequest): RenameFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenameFunction', 'POST', '/', 'json', true, 'form', request);
}

model RenameNodeRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the node.

This parameter is required.', example='652567824470354XXXX', position='Body'),
  name: string(name='Name', description='The new name.

This parameter is required.', position='Body'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='12345', position='Body'),
}

model RenameNodeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4CDF7B72-020B-542A-8465-21CFFA81XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model RenameNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameNodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenameNode  RenameNodeRequest
  * @return RenameNodeResponse
 */
async function renameNode(request: RenameNodeRequest): RenameNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenameNode', 'POST', '/', 'json', true, 'form', request);
}

model RenameResourceRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the file resource.

This parameter is required.', example='543217824470354XXXX', position='Body'),
  name: string(name='Name', description='The new name.

This parameter is required.', position='Body'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000', position='Body'),
}

model RenameResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4CDF7B72-020B-542A-8465-21CFFA8XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model RenameResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenameResource  RenameResourceRequest
  * @return RenameResourceResponse
 */
async function renameResource(request: RenameResourceRequest): RenameResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenameResource', 'POST', '/', 'json', true, 'form', request);
}

model RenameWorkflowDefinitionRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The unique identifier of the workflow.

This parameter is required.', example='463497880880954XXXX', position='Query'),
  name: string(name='Name', description='The new name.

This parameter is required.', position='Query'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000', position='Query'),
}

model RenameWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can troubleshoot issues based on the ID.', example='975BD43D-C421-595C-A29C-565A8AD5XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model RenameWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameWorkflowDefinitionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenameWorkflowDefinition  RenameWorkflowDefinitionRequest
  * @return RenameWorkflowDefinitionResponse
 */
async function renameWorkflowDefinition(request: RenameWorkflowDefinitionRequest): RenameWorkflowDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenameWorkflowDefinition', 'POST', '/', 'json', false, 'json', request);
}

model RerunTaskInstancesRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  comment?: string(name='Comment', example='this is a comment', position='Body'),
  ids?: [ long ](name='Ids', shrink='json', position='Body'),
}

model RerunTaskInstancesResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo'),
}

model RerunTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RerunTaskInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RerunTaskInstances  RerunTaskInstancesRequest
  * @return RerunTaskInstancesResponse
 */
async function rerunTaskInstances(request: RerunTaskInstancesRequest): RerunTaskInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RerunTaskInstances', 'POST', '/', 'json', true, 'form', request);
}

model ResumeTaskInstancesRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  comment?: string(name='Comment', example='this is a comment', position='Body'),
  ids?: [ long ](name='Ids', shrink='json', position='Body'),
}

model ResumeTaskInstancesResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo'),
}

model ResumeTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResumeTaskInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResumeTaskInstances  ResumeTaskInstancesRequest
  * @return ResumeTaskInstancesResponse
 */
async function resumeTaskInstances(request: ResumeTaskInstancesRequest): ResumeTaskInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeTaskInstances', 'POST', '/', 'json', true, 'form', request);
}

model RevokeMemberProjectRolesRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  projectId: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to query the ID.

This parameter is required.', example='105149', position='Body'),
  roleCodes: [ string ](name='RoleCodes', description='The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/zh/dataworks/developer-reference/api-dataworks-public-2024-05-18-listprojectroles?spm=a2c4g.11186623.0.0.43841daeywTtF3) operation to query the codes of all roles in the workspace.

You must configure this parameter to specify the roles that you want to revoke from the member in the workspace.

This parameter is required.', shrink='json', position='Body'),
  userId: string(name='UserId', description='The ID of the account used by the member in the workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console?spm=openapi-amp.newDocPublishment.0.0.51d7281fjgBRmo), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the ID of the account used by the member in the workspace.

This parameter is required.', example='123422344899', position='Body'),
}

model RevokeMemberProjectRolesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='676271D6-53B4-57BE-89FA-72F7AE1418DF'),
}

model RevokeMemberProjectRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeMemberProjectRolesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RevokeMemberProjectRoles  RevokeMemberProjectRolesRequest
  * @return RevokeMemberProjectRolesResponse
 */
async function revokeMemberProjectRoles(request: RevokeMemberProjectRolesRequest): RevokeMemberProjectRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeMemberProjectRoles', 'POST', '/', 'json', true, 'form', request);
}

model SetSuccessTaskInstancesRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  comment?: string(name='Comment', example='this is a comment', position='Body'),
  ids?: [ long ](name='Ids', shrink='json', position='Body'),
}

model SetSuccessTaskInstancesResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo'),
}

model SetSuccessTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetSuccessTaskInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetSuccessTaskInstances  SetSuccessTaskInstancesRequest
  * @return SetSuccessTaskInstancesResponse
 */
async function setSuccessTaskInstances(request: SetSuccessTaskInstancesRequest): SetSuccessTaskInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetSuccessTaskInstances', 'POST', '/', 'json', true, 'form', request);
}

model StartDIJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  DIJobId?: long(name='DIJobId', description='The instance ID.', example='10000', position='Query'),
  forceToRerun?: boolean(name='ForceToRerun', example='false', position='Query'),
  realtimeStartSettings?: {
    failoverSettings?: {
      interval?: long(name='Interval', example='10'),
      upperLimit?: long(name='UpperLimit', example='30'),
    }(name='FailoverSettings'),
    startTime?: long(name='StartTime', example='1671516776'),
  }(name='RealtimeStartSettings', shrink='json', position='Query'),
}

model StartDIJobResponseBody = {
  requestId?: string(name='RequestId', example='999431B2-6013-577F-B684-36F7433C753B'),
  success?: boolean(name='Success', example='true'),
}

model StartDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartDIJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartDIJob  StartDIJobRequest
  * @return StartDIJobResponse
 */
async function startDIJob(request: StartDIJobRequest): StartDIJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDIJob', 'GET', '/', 'json', false, 'json', request);
}

model StopDIJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='11668', position='Query'),
  instanceId?: long(name='InstanceId', description='The instance ID.', example='1234', position='Query'),
}

model StopDIJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='92F778C7-8F00-53B1-AE1A-B3B17101247D'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model StopDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDIJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopDIJob  StopDIJobRequest
  * @return StopDIJobResponse
 */
async function stopDIJob(request: StopDIJobRequest): StopDIJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDIJob', 'GET', '/', 'json', false, 'json', request);
}

model StopTaskInstancesRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  comment?: string(name='Comment', example='this is a comment', position='Body'),
  ids?: [ long ](name='Ids', shrink='json', position='Body'),
}

model StopTaskInstancesResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo'),
}

model StopTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopTaskInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopTaskInstances  StopTaskInstancesRequest
  * @return StopTaskInstancesResponse
 */
async function stopTaskInstances(request: StopTaskInstancesRequest): StopTaskInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopTaskInstances', 'POST', '/', 'json', true, 'form', request);
}

model SuspendTaskInstancesRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  comment?: string(name='Comment', example='this is a comment', position='Body'),
  ids?: [ long ](name='Ids', shrink='json', position='Body'),
}

model SuspendTaskInstancesResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo'),
}

model SuspendTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SuspendTaskInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SuspendTaskInstances  SuspendTaskInstancesRequest
  * @return SuspendTaskInstancesResponse
 */
async function suspendTaskInstances(request: SuspendTaskInstancesRequest): SuspendTaskInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SuspendTaskInstances', 'POST', '/', 'json', true, 'form', request);
}

model TriggerSchedulerTaskInstanceRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  taskId: long(name='TaskId', description='This parameter is required.', example='1234', position='Body'),
  triggerTime: long(name='TriggerTime', description='This parameter is required.', example='1710239005403', position='Body'),
}

model TriggerSchedulerTaskInstanceResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  success?: boolean(name='Success', example='true'),
}

model TriggerSchedulerTaskInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TriggerSchedulerTaskInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TriggerSchedulerTaskInstance  TriggerSchedulerTaskInstanceRequest
  * @return TriggerSchedulerTaskInstanceResponse
 */
async function triggerSchedulerTaskInstance(request: TriggerSchedulerTaskInstanceRequest): TriggerSchedulerTaskInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TriggerSchedulerTaskInstance', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAlertRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  enabled?: boolean(name='Enabled', example='true', position='Query'),
  id?: long(name='Id', example='105412', position='Query'),
  name?: string(name='Name', example='collection_name', position='Query'),
  notification?: {
    channels?: [ string ](name='Channels'),
    intervalInMinutes?: int32(name='IntervalInMinutes', example='30'),
    maximum?: int32(name='Maximum', example='3'),
    receivers?: [ 
      {
        extension?: string(name='Extension', example='{"atAll":true}'),
        receiverType?: string(name='ReceiverType', example='TaskOwner'),
        receiverValues?: [ string ](name='ReceiverValues'),
      }
    ](name='Receivers'),
    silenceEndTime?: string(name='SilenceEndTime', example='00:00:00'),
    silenceStartTime?: string(name='SilenceStartTime', example='00:00:00'),
  }(name='Notification', shrink='json', position='Query'),
  owner?: string(name='Owner', example='193379****', position='Query'),
  triggerCondition?: {
    extension?: {
      cycleUnfinished?: {
        cycleAndTime?: [ 
          {
            cycleId?: int32(name='CycleId', example='1'),
            time?: string(name='Time', example='01:00'),
          }
        ](name='CycleAndTime'),
      }(name='CycleUnfinished'),
      error?: {
        autoRerunAlert?: boolean(name='AutoRerunAlert', example='true'),
        streamTaskIds?: [ long ](name='StreamTaskIds'),
      }(name='Error'),
      instanceErrorCount?: {
        count?: int32(name='Count', example='10'),
      }(name='InstanceErrorCount'),
      instanceErrorPercentage?: {
        percentage?: int32(name='Percentage', example='10'),
      }(name='InstanceErrorPercentage'),
      instanceTransferFluctuate?: {
        percentage?: int32(name='Percentage', example='10'),
        trend?: string(name='Trend', example='abs'),
      }(name='InstanceTransferFluctuate'),
      timeout?: {
        timeoutInMinutes?: int32(name='TimeoutInMinutes', example='10'),
      }(name='Timeout'),
      unFinished?: {
        unFinishedTime?: string(name='UnFinishedTime', example='12:00'),
      }(name='UnFinished'),
    }(name='Extension'),
    target?: {
      allowTasks?: [ long ](name='AllowTasks'),
      ids?: [ long ](name='Ids'),
      type?: string(name='Type', example='Task'),
    }(name='Target'),
    type?: string(name='Type', example='ERROR'),
  }(name='TriggerCondition', shrink='json', position='Query'),
}

model UpdateAlertRuleResponseBody = {
  requestId?: string(name='RequestId', example='D85FEE2B-6174-5817-AF9E-FDD02FEDA5BC'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAlertRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAlertRule  UpdateAlertRuleRequest
  * @return UpdateAlertRuleResponse
 */
async function updateAlertRule(request: UpdateAlertRuleRequest): UpdateAlertRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAlertRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDIAlarmRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  DIAlarmRuleId: long(name='DIAlarmRuleId', description='This parameter is required.', example='34982', position='Query'),
  DIJobId?: long(name='DIJobId', example='1', position='Query'),
  description?: string(name='Description', position='Query'),
  enabled?: boolean(name='Enabled', example='true', position='Query'),
  metricType?: string(name='MetricType', example='Heartbeat', position='Query'),
  name?: string(name='Name', example='alarm_rule_name', position='Query'),
  notificationSettings?: {
    inhibitionInterval?: long(name='InhibitionInterval', example='5'),
    notificationChannels?: [ 
      {
        channels?: [ string ](name='Channels'),
        severity?: string(name='Severity', example='Warning'),
      }
    ](name='NotificationChannels'),
    notificationReceivers?: [ 
      {
        receiverType?: string(name='ReceiverType', example='DingToken'),
        receiverValues?: [ string ](name='ReceiverValues'),
      }
    ](name='NotificationReceivers'),
  }(name='NotificationSettings', shrink='json', position='Query'),
  triggerConditions?: [ 
    {
      ddlReportTags?: [ string ](name='DdlReportTags'),
      duration?: long(name='Duration', example='15'),
      severity?: string(name='Severity', example='Warning'),
      threshold?: long(name='Threshold', example='5'),
    }
  ](name='TriggerConditions', shrink='json', position='Query'),
}

model UpdateDIAlarmRuleResponseBody = {
  requestId?: string(name='RequestId', example='A6C6B486-E3A2-5D52-9E76-D9380485D946'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDIAlarmRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDIAlarmRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDIAlarmRule  UpdateDIAlarmRuleRequest
  * @return UpdateDIAlarmRuleResponse
 */
async function updateDIAlarmRule(request: UpdateDIAlarmRuleRequest): UpdateDIAlarmRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDIAlarmRule', 'GET', '/', 'json', false, 'json', request);
}

model UpdateDIJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  DIJobId: long(name='DIJobId', description='This parameter is required.', example='11588', position='Query'),
  description?: string(name='Description', position='Query'),
  jobSettings?: {
    channelSettings?: string(name='ChannelSettings', example='{"structInfo":"MANAGED","storageType":"TEXTFILE","writeMode":"APPEND","partitionColumns":[{"columnName":"pt","columnType":"STRING","comment":""}],"fieldDelimiter":""}'),
    columnDataTypeSettings?: [ 
      {
        destinationDataType?: string(name='DestinationDataType', example='text'),
        sourceDataType?: string(name='SourceDataType', example='bigint'),
      }
    ](name='ColumnDataTypeSettings'),
    cycleScheduleSettings?: {
      scheduleParameters?: string(name='ScheduleParameters', example='bizdate=$bizdate'),
    }(name='CycleScheduleSettings'),
    ddlHandlingSettings?: [ 
      {
        action?: string(name='Action', example='Critical'),
        type?: string(name='Type', example='AddColumn'),
      }
    ](name='DdlHandlingSettings'),
    runtimeSettings?: [ 
      {
        name?: string(name='Name', example='runtime.offline.concurrent'),
        value?: string(name='Value', example='1'),
      }
    ](name='RuntimeSettings'),
  }(name='JobSettings', shrink='json', position='Query'),
  projectId?: long(name='ProjectId', position='Query'),
  resourceSettings?: {
    offlineResourceSettings?: {
      requestedCu?: long(name='RequestedCu', example='2.0'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='S_res_group_111_222'),
    }(name='OfflineResourceSettings'),
    realtimeResourceSettings?: {
      requestedCu?: long(name='RequestedCu', example='2.0'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='S_res_group_111_222'),
    }(name='RealtimeResourceSettings'),
    scheduleResourceSettings?: {
      requestedCu?: long(name='RequestedCu', example='2.0'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='S_res_group_235454102432001_1721021993437'),
    }(name='ScheduleResourceSettings'),
  }(name='ResourceSettings', shrink='json', position='Query'),
  tableMappings?: [ 
    {
      sourceObjectSelectionRules?: [ 
        {
          action?: string(name='Action', example='Include'),
          expression?: string(name='Expression', example='mysql_table_1'),
          expressionType?: string(name='ExpressionType', example='Exact'),
          objectType?: string(name='ObjectType', example='Table'),
        }
      ](name='SourceObjectSelectionRules'),
      transformationRules?: [ 
        {
          ruleActionType?: string(name='RuleActionType', example='Rename'),
          ruleName?: string(name='RuleName', example='rename_rule_1'),
          ruleTargetType?: string(name='RuleTargetType', example='Table'),
        }
      ](name='TransformationRules'),
    }
  ](name='TableMappings', shrink='json', position='Query'),
  transformationRules?: [ 
    {
      ruleActionType?: string(name='RuleActionType', example='Rename'),
      ruleExpression?: string(name='RuleExpression', example='{"expression":"${srcDatasoureName}_${srcDatabaseName}"}'),
      ruleName?: string(name='RuleName', example='rename_rule_1'),
      ruleTargetType?: string(name='RuleTargetType', example='Table'),
    }
  ](name='TransformationRules', shrink='json', position='Query'),
}

model UpdateDIJobResponseBody = {
  requestId?: string(name='RequestId', example='AAC30B35-820D-5F3E-A42C-E96BB6379325'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDIJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDIJob  UpdateDIJobRequest
  * @return UpdateDIJobResponse
 */
async function updateDIJob(request: UpdateDIJobRequest): UpdateDIJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDIJob', 'GET', '/', 'json', false, 'json', request);
}

model UpdateDataSourceRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  connectionProperties: string(name='ConnectionProperties', description='This parameter is required.', example='{
	"envType": "Prod",
	"regionId": "cn-beijing",
    "instanceId": "hgprecn-cn-x0r3oun4k001",
    "database": "testdb",
    "securityProtocol": "authTypeNone",
    "authType": "Executor",
    "authIdentity": "1107550004253538"
}', position='Query'),
  connectionPropertiesMode?: string(name='ConnectionPropertiesMode', example='UrlMode', position='Query'),
  description?: string(name='Description', example='test', position='Query'),
  id: long(name='Id', description='This parameter is required.', example='16033', position='Query'),
  projectId: long(name='ProjectId', description='This parameter is required.', example='5678', position='Query'),
}

model UpdateDataSourceResponseBody = {
  requestId?: string(name='RequestId', example='102E8E24-0387-531D-8A75-1C0AE7DD03E5'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataSource  UpdateDataSourceRequest
  * @return UpdateDataSourceResponse
 */
async function updateDataSource(request: UpdateDataSourceRequest): UpdateDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataSource', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFunctionRequest {
  regionId?: string(name='RegionId', description='代表region的资源属性字段

This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the UDF.

This parameter is required.', example='463497880880954XXXX', position='Body'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000', position='Body'),
  spec: string(name='Spec', description='The FlowSpec field information about the UDF. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.', position='Body'),
}

model UpdateFunctionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='12123960-CB2C-5086-868E-C6C1D024XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true

false', example='true'),
}

model UpdateFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFunctionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateFunction  UpdateFunctionRequest
  * @return UpdateFunctionResponse
 */
async function updateFunction(request: UpdateFunctionRequest): UpdateFunctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFunction', 'POST', '/', 'json', true, 'form', request);
}

model UpdateNodeRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the node.

This parameter is required.', example='652567824470354XXXX', position='Body'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000', position='Body'),
  spec: string(name='Spec', description='The FlowSpec field information about the node. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.', position='Body'),
}

model UpdateNodeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='99EBE7CF-69C0-5089-BE3E-79563C31XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateNode  UpdateNodeRequest
  * @return UpdateNodeResponse
 */
async function updateNode(request: UpdateNodeRequest): UpdateNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNode', 'POST', '/', 'json', true, 'form', request);
}

model UpdateProjectRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  description?: string(name='Description', position='Body'),
  devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', example='true', position='Body'),
  devRoleDisabled?: boolean(name='DevRoleDisabled', example='true', position='Body'),
  displayName?: string(name='DisplayName', position='Body'),
  id: long(name='Id', description='This parameter is required.', example='123456', position='Body'),
  paiTaskEnabled?: boolean(name='PaiTaskEnabled', example='true', position='Body'),
  status?: string(name='Status', example='Forbidden', position='Body'),
}

model UpdateProjectResponseBody = {
  requestId?: string(name='RequestId', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
}

model UpdateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateProject  UpdateProjectRequest
  * @return UpdateProjectResponse
 */
async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProject', 'POST', '/', 'json', true, 'form', request);
}

model UpdateResourceRequest {
  regionId?: string(name='RegionId', description='代表region的资源属性字段

This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the file resource.

This parameter is required.', example='543217824470354XXXX', position='Body'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000', position='Body'),
  spec: string(name='Spec', description='The FlowSpec field information about the file resource. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.', position='Body'),
}

model UpdateResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4CDF7B72-020B-542A-8465-21CFFA81XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateResource  UpdateResourceRequest
  * @return UpdateResourceResponse
 */
async function updateResource(request: UpdateResourceRequest): UpdateResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateResource', 'POST', '/', 'json', true, 'form', request);
}

model UpdateResourceGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', description='The ID of the resource group.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX', position='Body'),
  name?: string(name='Name', description='The new name that you want to change for the resource group.', example='common_resource_group', position='Body'),
  remark?: string(name='Remark', description='The new remarks that you want to modify for the resource group.', example='创建用于普通任务的通用资源组', position='Body'),
}

model UpdateResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model UpdateResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateResourceGroup  UpdateResourceGroupRequest
  * @return UpdateResourceGroupResponse
 */
async function updateResourceGroup(request: UpdateResourceGroupRequest): UpdateResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateResourceGroup', 'POST', '/', 'json', true, 'form', request);
}

model UpdateRouteRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  destinationCidr: string(name='DestinationCidr', description='This parameter is required.', example='192.168.0.0/16', position='Body'),
  id: long(name='Id', description='This parameter is required.', example='1000', position='Body'),
}

model UpdateRouteResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', example='true'),
}

model UpdateRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRouteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateRoute  UpdateRouteRequest
  * @return UpdateRouteResponse
 */
async function updateRoute(request: UpdateRouteRequest): UpdateRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRoute', 'POST', '/', 'json', true, 'form', request);
}

model UpdateTaskInstancesRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  comment?: string(name='Comment', example='this is a comment', position='Body'),
  taskInstances?: [ 
    {
      dataSource?: {
        name?: string(name='Name', example='mysql_test'),
      }(name='DataSource'),
      id: long(name='Id', description='This parameter is required.', example='1234'),
      priority?: int32(name='Priority', example='1'),
      runtimeResource?: string(name='RuntimeResource', example='S_res_group_524258031846018_1684XXXXXXXXX'),
    }
  ](name='TaskInstances', shrink='json', position='Body'),
}

model UpdateTaskInstancesResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo'),
}

model UpdateTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTaskInstances  UpdateTaskInstancesRequest
  * @return UpdateTaskInstancesResponse
 */
async function updateTaskInstances(request: UpdateTaskInstancesRequest): UpdateTaskInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskInstances', 'POST', '/', 'json', true, 'form', request);
}

model UpdateWorkflowDefinitionRequest {
  regionId?: string(name='RegionId', description='代表region的资源属性字段

This parameter is required.', position='Host'),
  id: string(name='Id', description='The ID of the workflow.

This parameter is required.', example='652567824470354XXXX', position='Body'),
  projectId: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10001', position='Body'),
  spec: string(name='Spec', description='The FlowSpec field information about the workflow. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.', position='Body'),
}

model UpdateWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20BF7E80-668A-5620-8AD8-879B8FEAXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkflowDefinitionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateWorkflowDefinition  UpdateWorkflowDefinitionRequest
  * @return UpdateWorkflowDefinitionResponse
 */
async function updateWorkflowDefinition(request: UpdateWorkflowDefinitionRequest): UpdateWorkflowDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWorkflowDefinition', 'POST', '/', 'json', true, 'form', request);
}

model SuccessInfoValue = {
  success?: boolean(name='Success', example='true'),
  message?: string(name='Message'),
}

