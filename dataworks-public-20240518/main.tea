/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'dataworks.ap-northeast-1.aliyuncs.com',
    ap-south-1 = 'dataworks.ap-south-1.aliyuncs.com',
    ap-southeast-1 = 'dataworks.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'dataworks.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'dataworks.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'dataworks.ap-southeast-5.aliyuncs.com',
    cn-beijing = 'dataworks.cn-beijing.aliyuncs.com',
    cn-chengdu = 'dataworks.cn-chengdu.aliyuncs.com',
    cn-hangzhou = 'dataworks.cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'dataworks.cn-hongkong.aliyuncs.com',
    cn-huhehaote = 'dataworks.aliyuncs.com',
    cn-qingdao = 'dataworks.aliyuncs.com',
    cn-shanghai = 'dataworks.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'dataworks.cn-shenzhen.aliyuncs.com',
    cn-zhangjiakou = 'dataworks.aliyuncs.com',
    eu-central-1 = 'dataworks.eu-central-1.aliyuncs.com',
    eu-west-1 = 'dataworks.eu-west-1.aliyuncs.com',
    me-east-1 = 'dataworks.me-east-1.aliyuncs.com',
    us-east-1 = 'dataworks.us-east-1.aliyuncs.com',
    us-west-1 = 'dataworks.us-west-1.aliyuncs.com',
    cn-hangzhou-finance = 'dataworks.aliyuncs.com',
    cn-shenzhen-finance-1 = 'dataworks.aliyuncs.com',
    cn-shanghai-finance-1 = 'dataworks.aliyuncs.com',
    cn-north-2-gov-1 = 'dataworks.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('dataworks-public', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DataQualityEvaluationTask {
  dataSourceId?: long(name='DataSourceId', example='201'),
  description?: string(name='Description', example='This is a daily run data quality evaluation plan.'),
  hooks?: [ 
    {
      condition?: string(name='Condition', example='${severity} == "High" AND ${status} == "Critical"'),
      type?: string(name='Type', example='BlockTaskInstance'),
    }
  ](name='Hooks'),
  id?: long(name='Id', example='10001'),
  name?: string(name='Name', example='质量校验任务'),
  notifications?: [ 
    {
      condition?: string(name='Condition', example='${blockType} == "Strong"'),
      notifications?: [ 
        {
          notificationChannels?: [ 
            {
              channels?: [ string ](name='Channels'),
            }
          ](name='NotificationChannels'),
          notificationReceivers?: [ 
            {
              extension?: string(name='Extension', example='{"atAll":"true"}'),
              receiverType?: string(name='ReceiverType', example='AliUid'),
              receiverValues?: [ string ](name='ReceiverValues'),
            }
          ](name='NotificationReceivers'),
        }
      ](name='Notifications'),
    }
  ](name='Notifications'),
  projectId?: long(name='ProjectId', example='100'),
  runtimeConf?: string(name='RuntimeConf', example='{ "queue": "default", "sqlEngine": "SPARK_SQL" }'),
  target?: {
    databaseType?: string(name='DatabaseType', example='maxcompute'),
    partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
    tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
    type?: string(name='Type', example='Table'),
  }(name='Target'),
  tenantId?: long(name='TenantId', example='10'),
  trigger?: {
    taskIds?: [ long ](name='TaskIds'),
    type?: string(name='Type', example='ByScheduledTaskInstance'),
  }(name='Trigger'),
}

model DataQualityEvaluationTaskInstance {
  createTime?: long(name='CreateTime', example='1710239005403'),
  finishTime?: long(name='FinishTime', example='1710239005403'),
  id?: long(name='Id', example='10001'),
  status?: string(name='Status', example='Passed'),
  task?: {
    dataSourceId?: long(name='DataSourceId', example='201'),
    hooks?: [ 
      {
        condition?: string(name='Condition', example='${severity} == "High" AND ${status} == "Critical"'),
        type?: string(name='Type', example='BlockTaskInstance'),
      }
    ](name='Hooks'),
    id?: long(name='Id', example='10001'),
    name?: string(name='Name', example='质量校验任务'),
    notifications?: [ 
      {
        condition?: string(name='Condition', example='${blockType} == "Strong"'),
        notifications?: [ 
          {
            notificationChannels?: [ 
              {
                channels?: [ string ](name='Channels'),
              }
            ](name='NotificationChannels'),
            notificationReceivers?: [ 
              {
                extension?: string(name='Extension', example='{"atAll":"true"}'),
                receiverType?: string(name='ReceiverType', example='AliUid'),
                receiverValues?: [ string ](name='ReceiverValues'),
              }
            ](name='NotificationReceivers'),
          }
        ](name='Notifications'),
      }
    ](name='Notifications'),
    projectId?: long(name='ProjectId'),
    runtimeConf?: string(name='RuntimeConf', example='{ "queue": "default", "sqlEngine": "SPARK_SQL" }'),
    target?: {
      databaseType?: string(name='DatabaseType', example='maxcompute'),
      partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
      tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
      type?: string(name='Type', example='Table'),
    }(name='Target'),
    tenantId?: long(name='TenantId'),
    trigger?: {
      taskIds?: [ long ](name='TaskIds'),
      type?: string(name='Type', example='ByScheduledTaskInstance'),
    }(name='Trigger'),
  }(name='Task'),
}

model DataQualityResult {
  details?: [ 
    {
      checkedValue?: string(name='CheckedValue', example='100.0'),
      referencedValue?: string(name='ReferencedValue', example='0.0'),
      status?: string(name='Status', example='Passed'),
    }
  ](name='Details'),
  id?: long(name='Id', example='10001'),
  rule?: {
    checkingConfig?: {
      referencedSamplesFilter?: string(name='ReferencedSamplesFilter', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
      thresholds?: {
        critical?: {
          operator?: string(name='Operator', example='>'),
          value?: string(name='Value', example='100.0'),
        }(name='Critical'),
        expected?: {
          operator?: string(name='Operator', example='>'),
          value?: string(name='Value', example='100.0'),
        }(name='Expected'),
        warned?: {
          operator?: string(name='Operator', example='>'),
          value?: string(name='Value', example='100.0'),
        }(name='Warned'),
      }(name='Thresholds'),
      type?: string(name='Type', example='Fixed'),
    }(name='CheckingConfig'),
    description?: string(name='Description', example='this is a odps _sql task'),
    enabled?: boolean(name='Enabled', example='true'),
    errorHandlers?: [ 
      {
        errorDataFilter?: string(name='ErrorDataFilter', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
        type?: string(name='Type', example='SaveErrorData'),
      }
    ](name='ErrorHandlers'),
    id?: long(name='Id', example='100001'),
    name?: string(name='Name', example='表不能为空'),
    projectId?: long(name='ProjectId', example='100'),
    samplingConfig?: {
      metric?: string(name='Metric', example='Min'),
      metricParameters?: string(name='MetricParameters', example='{ "Columns": [ "id", "name" ] }'),
      samplingFilter?: string(name='SamplingFilter', example='id IS NULL'),
      settingConfig?: string(name='SettingConfig', example='SET odps.sql.udf.timeout=600s;'),
    }(name='SamplingConfig'),
    severity?: string(name='Severity', example='High'),
    target?: {
      databaseType?: string(name='DatabaseType', example='maxcompute'),
      partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
      tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
      type?: string(name='Type', example='Table'),
    }(name='Target'),
    templateCode?: string(name='TemplateCode', example='system::user_defined'),
    tenantId?: long(name='TenantId', example='1'),
  }(name='Rule'),
  sample?: string(name='Sample', example='[   {     "gender": "male",     "_count": 100   }, {     "gender": "female",     "_count": 100   } ]'),
  status?: string(name='Status', example='Passed'),
  taskInstanceId?: long(name='TaskInstanceId', example='20001'),
}

model DataQualityRule {
  checkingConfig?: {
    referencedSamplesFilter?: string(name='ReferencedSamplesFilter', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
    thresholds?: {
      critical?: {
        operator?: string(name='Operator', example='>'),
        value?: string(name='Value', example='100.0'),
      }(name='Critical'),
      expected?: {
        operator?: string(name='Operator', example='>'),
        value?: string(name='Value', example='100.0'),
      }(name='Expected'),
      warned?: {
        operator?: string(name='Operator', example='>'),
        value?: string(name='Value', example='100.0'),
      }(name='Warned'),
    }(name='Thresholds'),
    type?: string(name='Type', example='Fixed'),
  }(name='CheckingConfig'),
  description?: string(name='Description', example='this is a odps _sql task'),
  enabled?: boolean(name='Enabled', example='true'),
  errorHandlers?: [ 
    {
      errorDataFilter?: string(name='ErrorDataFilter', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
      type?: string(name='Type', example='SaveErrorData'),
    }
  ](name='ErrorHandlers'),
  id?: long(name='Id', example='1'),
  name?: string(name='Name', example='表不能为空'),
  projectId?: long(name='ProjectId', example='100'),
  samplingConfig?: {
    metric?: string(name='Metric', example='Min'),
    metricParameters?: string(name='MetricParameters', example='{ "Columns": [ "id", "name" ] }'),
    samplingFilter?: string(name='SamplingFilter', example='id IS NULL'),
    settingConfig?: string(name='SettingConfig', example='SET odps.sql.udf.timeout=600s;'),
  }(name='SamplingConfig'),
  severity?: string(name='Severity', example='High'),
  target?: {
    databaseType?: string(name='DatabaseType', example='maxcompute'),
    partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
    tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
    type?: string(name='Type', example='Table'),
  }(name='Target'),
  templateCode?: string(name='TemplateCode', example='system::user_defined'),
  tenantId?: long(name='TenantId', example='1'),
}

model AbolishDeploymentRequest {
  id?: string(name='Id', description='The ID of the process.

This parameter is required.', example='1606087c-9ac4-43f0-83a8-0b5ced21XXXX'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model AbolishDeploymentResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='55D786C9-DD57-524D-884C-C5239278XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model AbolishDeploymentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AbolishDeploymentResponseBody(name='body'),
}

/**
 * @summary Terminates the process for deploying or undeploying an entity. The process is not deleted and can still be queried by calling query operations.
 *
 * @param request AbolishDeploymentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AbolishDeploymentResponse
 */
async function abolishDeploymentWithOptions(request: AbolishDeploymentRequest, runtime: Util.RuntimeOptions): AbolishDeploymentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AbolishDeployment',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Terminates the process for deploying or undeploying an entity. The process is not deleted and can still be queried by calling query operations.
 *
 * @param request AbolishDeploymentRequest
 * @return AbolishDeploymentResponse
 */
async function abolishDeployment(request: AbolishDeploymentRequest): AbolishDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return abolishDeploymentWithOptions(request, runtime);
}

model AssociateProjectToResourceGroupRequest {
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace with which you want to associate the resource group.

This parameter is required.', example='1000'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
}

model AssociateProjectToResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model AssociateProjectToResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateProjectToResourceGroupResponseBody(name='body'),
}

/**
 * @summary Associates a resource group with a workspace.
 *
 * @param request AssociateProjectToResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AssociateProjectToResourceGroupResponse
 */
async function associateProjectToResourceGroupWithOptions(request: AssociateProjectToResourceGroupRequest, runtime: Util.RuntimeOptions): AssociateProjectToResourceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AssociateProjectToResourceGroup',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Associates a resource group with a workspace.
 *
 * @param request AssociateProjectToResourceGroupRequest
 * @return AssociateProjectToResourceGroupResponse
 */
async function associateProjectToResourceGroup(request: AssociateProjectToResourceGroupRequest): AssociateProjectToResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateProjectToResourceGroupWithOptions(request, runtime);
}

model CloneDataSourceRequest {
  cloneDataSourceName?: string(name='CloneDataSourceName', example='demo_holo_datasource'),
  id?: long(name='Id', example='16036'),
}

model CloneDataSourceResponseBody = {
  id?: long(name='Id', example='19715'),
  requestId?: string(name='RequestId', example='FCD583B9-346B-5E75-82C1-4A7C192C48DB'),
}

model CloneDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloneDataSourceResponseBody(name='body'),
}

/**
 * @summary 验证用
 *
 * @param request CloneDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CloneDataSourceResponse
 */
async function cloneDataSourceWithOptions(request: CloneDataSourceRequest, runtime: Util.RuntimeOptions): CloneDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cloneDataSourceName)) {
    query['CloneDataSourceName'] = request.cloneDataSourceName;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CloneDataSource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 验证用
 *
 * @param request CloneDataSourceRequest
 * @return CloneDataSourceResponse
 */
async function cloneDataSource(request: CloneDataSourceRequest): CloneDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return cloneDataSourceWithOptions(request, runtime);
}

model CreateDIAlarmRuleRequest {
  clientToken?: string(name='ClientToken', example='ABFUOEUOTRTRJKE'),
  DIJobId?: long(name='DIJobId', description='任务ID，是告警规则关联的任务ID。

This parameter is required.', example='1'),
  description?: string(name='Description', description='描述。'),
  enabled?: boolean(name='Enabled', description='告警规则是否启用，默认不开启。', example='true'),
  metricType?: string(name='MetricType', description='告警指标类型，可选的枚举值：
- Heartbeat（任务状态报警）
- FailoverCount（failover次数报警）
- Delay（任务延迟报警）

This parameter is required.', example='Heartbeat'),
  name?: string(name='Name', description='This parameter is required.', example='alartRule'),
  notificationSettings?: {
    inhibitionInterval?: int32(name='InhibitionInterval', example='5'),
    notificationChannels?: [ 
      {
        channels?: [ string ](name='Channels'),
        severity?: string(name='Severity', example='Warning'),
      }
    ](name='NotificationChannels'),
    notificationReceivers?: [ 
      {
        receiverType?: string(name='ReceiverType', example='DingToken'),
        receiverValues?: [ string ](name='ReceiverValues'),
      }
    ](name='NotificationReceivers'),
  }(name='NotificationSettings', description='This parameter is required.'),
  triggerConditions?: [ 
    {
      ddlReportTags?: [ string ](name='DdlReportTags'),
      duration?: long(name='Duration', example='10'),
      severity?: string(name='Severity', example='Warning'),
      threshold?: long(name='Threshold', example='10'),
    }
  ](name='TriggerConditions', description='This parameter is required.'),
}

model CreateDIAlarmRuleShrinkRequest {
  clientToken?: string(name='ClientToken', example='ABFUOEUOTRTRJKE'),
  DIJobId?: long(name='DIJobId', description='任务ID，是告警规则关联的任务ID。

This parameter is required.', example='1'),
  description?: string(name='Description', description='描述。'),
  enabled?: boolean(name='Enabled', description='告警规则是否启用，默认不开启。', example='true'),
  metricType?: string(name='MetricType', description='告警指标类型，可选的枚举值：
- Heartbeat（任务状态报警）
- FailoverCount（failover次数报警）
- Delay（任务延迟报警）

This parameter is required.', example='Heartbeat'),
  name?: string(name='Name', description='This parameter is required.', example='alartRule'),
  notificationSettingsShrink?: string(name='NotificationSettings', description='This parameter is required.'),
  triggerConditionsShrink?: string(name='TriggerConditions', description='This parameter is required.'),
}

model CreateDIAlarmRuleResponseBody = {
  DIAlarmRuleId?: string(name='DIAlarmRuleId', description='代表资源一级ID的资源属性字段', example='1'),
  requestId?: string(name='RequestId', example='C636A747-7E4E-594D-94CD-2B4F8A9A9A63'),
}

model CreateDIAlarmRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDIAlarmRuleResponseBody(name='body'),
}

/**
 * @summary 创建数据集成报警规则
 *
 * @param tmpReq CreateDIAlarmRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDIAlarmRuleResponse
 */
async function createDIAlarmRuleWithOptions(tmpReq: CreateDIAlarmRuleRequest, runtime: Util.RuntimeOptions): CreateDIAlarmRuleResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDIAlarmRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.notificationSettings)) {
    request.notificationSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notificationSettings, 'NotificationSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.triggerConditions)) {
    request.triggerConditionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.triggerConditions, 'TriggerConditions', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDIAlarmRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建数据集成报警规则
 *
 * @param request CreateDIAlarmRuleRequest
 * @return CreateDIAlarmRuleResponse
 */
async function createDIAlarmRule(request: CreateDIAlarmRuleRequest): CreateDIAlarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDIAlarmRuleWithOptions(request, runtime);
}

model CreateDIJobRequest {
  description?: string(name='Description'),
  destinationDataSourceSettings?: [ 
    {
      dataSourceName?: string(name='DataSourceName', example='holo_datasource_1'),
    }
  ](name='DestinationDataSourceSettings', description='This parameter is required.'),
  destinationDataSourceType?: string(name='DestinationDataSourceType', description='This parameter is required.', example='Hologres'),
  jobName?: string(name='JobName', description='This parameter is required.', example='mysql_to_holo_sync_8772'),
  jobSettings?: {
    channelSettings?: string(name='ChannelSettings', example='{"structInfo":"MANAGED","storageType":"TEXTFILE","writeMode":"APPEND","partitionColumns":[{"columnName":"pt","columnType":"STRING","comment":""}],"fieldDelimiter":""}'),
    columnDataTypeSettings?: [ 
      {
        destinationDataType?: string(name='DestinationDataType', example='text'),
        sourceDataType?: string(name='SourceDataType', example='bigint'),
      }
    ](name='ColumnDataTypeSettings'),
    cycleScheduleSettings?: {
      cycleMigrationType?: string(name='CycleMigrationType', example='Full'),
      scheduleParameters?: string(name='ScheduleParameters', example='bizdate=$bizdate'),
    }(name='CycleScheduleSettings'),
    ddlHandlingSettings?: [ 
      {
        action?: string(name='Action', example='Critical'),
        type?: string(name='Type', example='AddColumn'),
      }
    ](name='DdlHandlingSettings'),
    runtimeSettings?: [ 
      {
        name?: string(name='Name', example='runtime.offline.concurrent'),
        value?: string(name='Value', example='1'),
      }
    ](name='RuntimeSettings'),
  }(name='JobSettings'),
  migrationType?: string(name='MigrationType', description='This parameter is required.', example='FullAndRealtimeIncremental'),
  projectId?: long(name='ProjectId', example='10000'),
  resourceSettings?: {
    offlineResourceSettings?: {
      requestedCu?: double(name='RequestedCu', example='2.0'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='S_res_group_111_222'),
    }(name='OfflineResourceSettings'),
    realtimeResourceSettings?: {
      requestedCu?: double(name='RequestedCu', example='2.0'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='S_res_group_111_222'),
    }(name='RealtimeResourceSettings'),
    scheduleResourceSettings?: {
      requestedCu?: double(name='RequestedCu', example='2.0'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='S_res_group_235454102432001_1579085295030'),
    }(name='ScheduleResourceSettings'),
  }(name='ResourceSettings', description='This parameter is required.'),
  sourceDataSourceSettings?: [ 
    {
      dataSourceName?: string(name='DataSourceName', example='mysql_datasource_1'),
      dataSourceProperties?: {
        encoding?: string(name='Encoding', example='UTF-8'),
        timezone?: string(name='Timezone', example='GMT+8'),
      }(name='DataSourceProperties'),
    }
  ](name='SourceDataSourceSettings', description='This parameter is required.'),
  sourceDataSourceType?: string(name='SourceDataSourceType', description='This parameter is required.', example='MySQL'),
  tableMappings?: [ 
    {
      sourceObjectSelectionRules?: [ 
        {
          action?: string(name='Action', example='Include'),
          expression?: string(name='Expression', example='mysql_table_1'),
          expressionType?: string(name='ExpressionType', example='Exact'),
          objectType?: string(name='ObjectType', example='Table'),
        }
      ](name='SourceObjectSelectionRules'),
      transformationRules?: [ 
        {
          ruleActionType?: string(name='RuleActionType', example='Rename'),
          ruleName?: string(name='RuleName', example='rename_rule_1'),
          ruleTargetType?: string(name='RuleTargetType', example='Table'),
        }
      ](name='TransformationRules'),
    }
  ](name='TableMappings', description='This parameter is required.'),
  transformationRules?: [ 
    {
      ruleActionType?: string(name='RuleActionType', example='Rename'),
      ruleExpression?: string(name='RuleExpression', example='{"expression":"${srcDatasoureName}_${srcDatabaseName}"}'),
      ruleName?: string(name='RuleName', example='rename_rule_1'),
      ruleTargetType?: string(name='RuleTargetType', example='Table'),
    }
  ](name='TransformationRules'),
}

model CreateDIJobShrinkRequest {
  description?: string(name='Description'),
  destinationDataSourceSettingsShrink?: string(name='DestinationDataSourceSettings', description='This parameter is required.'),
  destinationDataSourceType?: string(name='DestinationDataSourceType', description='This parameter is required.', example='Hologres'),
  jobName?: string(name='JobName', description='This parameter is required.', example='mysql_to_holo_sync_8772'),
  jobSettingsShrink?: string(name='JobSettings'),
  migrationType?: string(name='MigrationType', description='This parameter is required.', example='FullAndRealtimeIncremental'),
  projectId?: long(name='ProjectId', example='10000'),
  resourceSettingsShrink?: string(name='ResourceSettings', description='This parameter is required.'),
  sourceDataSourceSettingsShrink?: string(name='SourceDataSourceSettings', description='This parameter is required.'),
  sourceDataSourceType?: string(name='SourceDataSourceType', description='This parameter is required.', example='MySQL'),
  tableMappingsShrink?: string(name='TableMappings', description='This parameter is required.'),
  transformationRulesShrink?: string(name='TransformationRules'),
}

model CreateDIJobResponseBody = {
  DIJobId?: long(name='DIJobId', example='11792'),
  requestId?: string(name='RequestId', example='4F6AB6B3-41FB-5EBB-AFB2-0C98D49DA2BB'),
}

model CreateDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDIJobResponseBody(name='body'),
}

/**
 * @summary 创建数据集成任务
 *
 * @param tmpReq CreateDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDIJobResponse
 */
async function createDIJobWithOptions(tmpReq: CreateDIJobRequest, runtime: Util.RuntimeOptions): CreateDIJobResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDIJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.destinationDataSourceSettings)) {
    request.destinationDataSourceSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.destinationDataSourceSettings, 'DestinationDataSourceSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.jobSettings)) {
    request.jobSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.jobSettings, 'JobSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.resourceSettings)) {
    request.resourceSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceSettings, 'ResourceSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.sourceDataSourceSettings)) {
    request.sourceDataSourceSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceDataSourceSettings, 'SourceDataSourceSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.tableMappings)) {
    request.tableMappingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tableMappings, 'TableMappings', 'json');
  }
  if (!Util.isUnset(tmpReq.transformationRules)) {
    request.transformationRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.transformationRules, 'TransformationRules', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDIJob',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建数据集成任务
 *
 * @param request CreateDIJobRequest
 * @return CreateDIJobResponse
 */
async function createDIJob(request: CreateDIJobRequest): CreateDIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDIJobWithOptions(request, runtime);
}

model CreateDataSourceRequest {
  connectionProperties?: string(name='ConnectionProperties', description='This parameter is required.', example='{
	"envType": "Prod",
	"regionId": "cn-beijing",
    "instanceId": "hgprecn-cn-x0r3oun4k001",
    "database": "testdb",
    "securityProtocol": "authTypeNone",
    "authType": "Executor",
    "authIdentity": "1107550004253538"
}'),
  connectionPropertiesMode?: string(name='ConnectionPropertiesMode', description='This parameter is required.', example='UrlMode'),
  description?: string(name='Description', example='this is a holo datasource'),
  name?: string(name='Name', description='This parameter is required.', example='demo_holo_datasource'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='2'),
  type?: string(name='Type', description='This parameter is required.', example='hologres'),
}

model CreateDataSourceResponseBody = {
  id?: long(name='Id', example='22130'),
  requestId?: string(name='RequestId', example='B62EC203-B39E-5DC1-B5B8-EB3C61707009'),
}

model CreateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSourceResponseBody(name='body'),
}

/**
 * @summary 验证用
 *
 * @param request CreateDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataSourceResponse
 */
async function createDataSourceWithOptions(request: CreateDataSourceRequest, runtime: Util.RuntimeOptions): CreateDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionProperties)) {
    query['ConnectionProperties'] = request.connectionProperties;
  }
  if (!Util.isUnset(request.connectionPropertiesMode)) {
    query['ConnectionPropertiesMode'] = request.connectionPropertiesMode;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataSource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 验证用
 *
 * @param request CreateDataSourceRequest
 * @return CreateDataSourceResponse
 */
async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataSourceWithOptions(request, runtime);
}

model CreateDataSourceSharedRuleRequest {
  dataSourceId?: long(name='DataSourceId', description='This parameter is required.', example='144544'),
  envType?: string(name='EnvType', description='This parameter is required.', example='Dev'),
  sharedUser?: string(name='SharedUser', example='1107550004253538'),
  targetProjectId?: long(name='TargetProjectId', description='This parameter is required.', example='106560'),
}

model CreateDataSourceSharedRuleResponseBody = {
  id?: long(name='Id', example='105412'),
  requestId?: string(name='RequestId', example='46F594E6-84AB-5FA5-8144-6F3D149961E1'),
}

model CreateDataSourceSharedRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSourceSharedRuleResponseBody(name='body'),
}

/**
 * @summary 验证用
 *
 * @param request CreateDataSourceSharedRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataSourceSharedRuleResponse
 */
async function createDataSourceSharedRuleWithOptions(request: CreateDataSourceSharedRuleRequest, runtime: Util.RuntimeOptions): CreateDataSourceSharedRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.sharedUser)) {
    query['SharedUser'] = request.sharedUser;
  }
  if (!Util.isUnset(request.targetProjectId)) {
    query['TargetProjectId'] = request.targetProjectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataSourceSharedRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 验证用
 *
 * @param request CreateDataSourceSharedRuleRequest
 * @return CreateDataSourceSharedRuleResponse
 */
async function createDataSourceSharedRule(request: CreateDataSourceSharedRuleRequest): CreateDataSourceSharedRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataSourceSharedRuleWithOptions(request, runtime);
}

model CreateDeploymentRequest {
  description?: string(name='Description', description='The description of the process.'),
  objectIds?: [ string ](name='ObjectIds', description='The IDs of entities to which you want to apply the process.

>  A process can be applied to only a single entity and its child entities. If you specify multiple entities in the array, the process is applied only to the first entity in the array and its child entities. Make sure that the array in your request contains only one element. Extra elements will be ignored.

This parameter is required.'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  type?: string(name='Type', description='Specifies whether to deploy or undeploy the entity. Valid values:

*   Online: deploys the entity.
*   Offline: undeploys the entity.

This parameter is required.', example='Online'),
}

model CreateDeploymentShrinkRequest {
  description?: string(name='Description', description='The description of the process.'),
  objectIdsShrink?: string(name='ObjectIds', description='The IDs of entities to which you want to apply the process.

>  A process can be applied to only a single entity and its child entities. If you specify multiple entities in the array, the process is applied only to the first entity in the array and its child entities. Make sure that the array in your request contains only one element. Extra elements will be ignored.

This parameter is required.'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  type?: string(name='Type', description='Specifies whether to deploy or undeploy the entity. Valid values:

*   Online: deploys the entity.
*   Offline: undeploys the entity.

This parameter is required.', example='Online'),
}

model CreateDeploymentResponseBody = {
  id?: string(name='Id', description='The ID of the process.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX'),
  requestId?: string(name='RequestId', description='The request ID.', example='7C352CB7-CD88-50CF-9D0D-E81BDF02XXXX'),
}

model CreateDeploymentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDeploymentResponseBody(name='body'),
}

/**
 * @summary Creates a process for deploying or undeploying an entity in DataStudio.
 *
 * @description >  You cannot use this API operation to create a process for multiple entities at a time. If you specify multiple entities in a request, the system creates a process only for the first entity.
 *
 * @param tmpReq CreateDeploymentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDeploymentResponse
 */
async function createDeploymentWithOptions(tmpReq: CreateDeploymentRequest, runtime: Util.RuntimeOptions): CreateDeploymentResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDeploymentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.objectIds)) {
    request.objectIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.objectIds, 'ObjectIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.objectIdsShrink)) {
    body['ObjectIds'] = request.objectIdsShrink;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDeployment',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a process for deploying or undeploying an entity in DataStudio.
 *
 * @description >  You cannot use this API operation to create a process for multiple entities at a time. If you specify multiple entities in a request, the system creates a process only for the first entity.
 *
 * @param request CreateDeploymentRequest
 * @return CreateDeploymentResponse
 */
async function createDeployment(request: CreateDeploymentRequest): CreateDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeploymentWithOptions(request, runtime);
}

model CreateFunctionRequest {
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='12345'),
  spec?: string(name='Spec', description='The FlowSpec field information about the UDF. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.'),
}

model CreateFunctionResponseBody = {
  id?: string(name='Id', description='The ID of the UDF.', example='580667964888595XXXX'),
  requestId?: string(name='RequestId', description='The request ID.', example='AE49C88D-5BEE-5ADD-8B8C-C4BBC0D7XXXX'),
}

model CreateFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFunctionResponseBody(name='body'),
}

/**
 * @summary Creates a user-defined function (UDF) in DataStudio. The information about the UDF is described by using FlowSpec.
 *
 * @description >  You cannot use this API operation to create multiple UDFs at a time. If you specify multiple UDFs by using FlowSpec, the system creates only the first specified UDF.
 *
 * @param request CreateFunctionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFunctionResponse
 */
async function createFunctionWithOptions(request: CreateFunctionRequest, runtime: Util.RuntimeOptions): CreateFunctionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFunction',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a user-defined function (UDF) in DataStudio. The information about the UDF is described by using FlowSpec.
 *
 * @description >  You cannot use this API operation to create multiple UDFs at a time. If you specify multiple UDFs by using FlowSpec, the system creates only the first specified UDF.
 *
 * @param request CreateFunctionRequest
 * @return CreateFunctionResponse
 */
async function createFunction(request: CreateFunctionRequest): CreateFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFunctionWithOptions(request, runtime);
}

model CreateNetworkRequest {
  clientToken?: string(name='ClientToken', description='This parameter is required.', example='eb870033-74c8-4b1b-9664-04c4e7cc3465'),
  resourceGroupId?: string(name='ResourceGroupId', description='This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
  vpcId?: string(name='VpcId', description='This parameter is required.', example='vpc-m2et4f3oc8msfbccXXXXX'),
  vswitchId?: string(name='VswitchId', description='This parameter is required.', example='vsw-uf8usrhs7hjd9amsXXXXX'),
}

model CreateNetworkResponseBody = {
  networkId?: long(name='NetworkId', example='1000'),
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', example='true'),
}

model CreateNetworkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNetworkResponseBody(name='body'),
}

/**
 * @summary 创建并绑定通用资源组网络资源。
 *
 * @param request CreateNetworkRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateNetworkResponse
 */
async function createNetworkWithOptions(request: CreateNetworkRequest, runtime: Util.RuntimeOptions): CreateNetworkResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vswitchId)) {
    body['VswitchId'] = request.vswitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateNetwork',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建并绑定通用资源组网络资源。
 *
 * @param request CreateNetworkRequest
 * @return CreateNetworkResponse
 */
async function createNetwork(request: CreateNetworkRequest): CreateNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNetworkWithOptions(request, runtime);
}

model CreateNodeRequest {
  containerId?: string(name='ContainerId', description='The container ID. If you want to create a node in a container, you must configure this parameter to specify the container. The container can be a workflow or a node in a container.

>  If you configure this parameter, the path field defined in FlowSpec becomes invalid.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='123456'),
  scene?: string(name='Scene', description='The scene of the node. This parameter determines the location (the DataStudio pane or the Manual pane) of the node. You can set this parameter to DATAWORKS_MANUAL_WORKFLOW only if the ContainerId parameter is configured and the container specified by ContainerId is a manually triggered workflow.

Valid values:

*   DATAWORKS_PROJECT
*   DATAWORKS_MANUAL_WORKFLOW
*   DATAWORKS_MANUAL_TASK

This parameter is required.', example='DATAWORKS_PROJECT'),
  spec?: string(name='Spec', description='The FlowSpec field information about the node. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.'),
}

model CreateNodeResponseBody = {
  id?: string(name='Id', description='The ID of the node.', example='860438872620113XXXX'),
  requestId?: string(name='RequestId', description='The request ID.', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
}

model CreateNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNodeResponseBody(name='body'),
}

/**
 * @summary Creates a node in DataStudio. The information about the node is described by using FlowSpec.
 *
 * @description >  You cannot use this API operation to create multiple nodes at a time. If you specify multiple nodes by using FlowSpec, the system creates only the first specified node.
 *
 * @param request CreateNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateNodeResponse
 */
async function createNodeWithOptions(request: CreateNodeRequest, runtime: Util.RuntimeOptions): CreateNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.containerId)) {
    body['ContainerId'] = request.containerId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.scene)) {
    body['Scene'] = request.scene;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateNode',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a node in DataStudio. The information about the node is described by using FlowSpec.
 *
 * @description >  You cannot use this API operation to create multiple nodes at a time. If you specify multiple nodes by using FlowSpec, the system creates only the first specified node.
 *
 * @param request CreateNodeRequest
 * @return CreateNodeResponse
 */
async function createNode(request: CreateNodeRequest): CreateNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNodeWithOptions(request, runtime);
}

model CreateProjectRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', example='rg-acfmzbn7pti3zff'),
  aliyunResourceTags?: [ 
    {
      key?: string(name='Key', example='batch'),
      value?: string(name='Value', example='blue'),
    }
  ](name='AliyunResourceTags'),
  description?: string(name='Description'),
  devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', example='false'),
  devRoleDisabled?: boolean(name='DevRoleDisabled', example='true'),
  displayName?: string(name='DisplayName', description='This parameter is required.'),
  name?: string(name='Name', description='This parameter is required.', example='sora_finance'),
  paiTaskEnabled?: boolean(name='PaiTaskEnabled', example='true'),
}

model CreateProjectShrinkRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', example='rg-acfmzbn7pti3zff'),
  aliyunResourceTagsShrink?: string(name='AliyunResourceTags'),
  description?: string(name='Description'),
  devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', example='false'),
  devRoleDisabled?: boolean(name='DevRoleDisabled', example='true'),
  displayName?: string(name='DisplayName', description='This parameter is required.'),
  name?: string(name='Name', description='This parameter is required.', example='sora_finance'),
  paiTaskEnabled?: boolean(name='PaiTaskEnabled', example='true'),
}

model CreateProjectResponseBody = {
  projectId?: long(name='ProjectId', example='123456'),
  requestId?: string(name='RequestId', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
}

model CreateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProjectResponseBody(name='body'),
}

/**
 * @summary 创建工作空间
 *
 * @param tmpReq CreateProjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateProjectResponse
 */
async function createProjectWithOptions(tmpReq: CreateProjectRequest, runtime: Util.RuntimeOptions): CreateProjectResponse {
  Util.validateModel(tmpReq);
  var request = new CreateProjectShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.aliyunResourceTags)) {
    request.aliyunResourceTagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.aliyunResourceTags, 'AliyunResourceTags', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.aliyunResourceGroupId)) {
    body['AliyunResourceGroupId'] = request.aliyunResourceGroupId;
  }
  if (!Util.isUnset(request.aliyunResourceTagsShrink)) {
    body['AliyunResourceTags'] = request.aliyunResourceTagsShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.devEnvironmentEnabled)) {
    body['DevEnvironmentEnabled'] = request.devEnvironmentEnabled;
  }
  if (!Util.isUnset(request.devRoleDisabled)) {
    body['DevRoleDisabled'] = request.devRoleDisabled;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.paiTaskEnabled)) {
    body['PaiTaskEnabled'] = request.paiTaskEnabled;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateProject',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建工作空间
 *
 * @param request CreateProjectRequest
 * @return CreateProjectResponse
 */
async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProjectWithOptions(request, runtime);
}

model CreateProjectMemberRequest {
  projectId?: long(name='ProjectId', description='This parameter is required.', example='24054'),
  roleCodes?: [ string ](name='RoleCodes', description='This parameter is required.'),
  userId?: string(name='UserId', description='This parameter is required.', example='123422344899'),
}

model CreateProjectMemberShrinkRequest {
  projectId?: long(name='ProjectId', description='This parameter is required.', example='24054'),
  roleCodesShrink?: string(name='RoleCodes', description='This parameter is required.'),
  userId?: string(name='UserId', description='This parameter is required.', example='123422344899'),
}

model CreateProjectMemberResponseBody = {
  requestId?: string(name='RequestId', example='2B2F0B26-9253-5780-B6DB-F1A886D44D6F'),
}

model CreateProjectMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProjectMemberResponseBody(name='body'),
}

/**
 * @summary 添加工作空间成员
 *
 * @param tmpReq CreateProjectMemberRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateProjectMemberResponse
 */
async function createProjectMemberWithOptions(tmpReq: CreateProjectMemberRequest, runtime: Util.RuntimeOptions): CreateProjectMemberResponse {
  Util.validateModel(tmpReq);
  var request = new CreateProjectMemberShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.roleCodes)) {
    request.roleCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roleCodes, 'RoleCodes', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.roleCodesShrink)) {
    body['RoleCodes'] = request.roleCodesShrink;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateProjectMember',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 添加工作空间成员
 *
 * @param request CreateProjectMemberRequest
 * @return CreateProjectMemberResponse
 */
async function createProjectMember(request: CreateProjectMemberRequest): CreateProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProjectMemberWithOptions(request, runtime);
}

model CreateResourceRequest {
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='123456'),
  spec?: string(name='Spec', description='The FlowSpec field information about the file resource. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.'),
}

model CreateResourceResponseBody = {
  id?: string(name='Id', description='The ID of the file resource.', example='631478864897630XXXX'),
  requestId?: string(name='RequestId', description='The request ID.', example='A5B97987-66EA-5563-9599-A2752292XXXX'),
}

model CreateResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceResponseBody(name='body'),
}

/**
 * @summary Creates a file resource in DataStudio. The information about the file resource is described by using FlowSpec.
 *
 * @description >  You cannot use this API operation to create multiple file resources at a time. If you specify multiple file resources by using FlowSpec, the system creates only the first specified resource.
 *
 * @param request CreateResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateResourceResponse
 */
async function createResourceWithOptions(request: CreateResourceRequest, runtime: Util.RuntimeOptions): CreateResourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateResource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a file resource in DataStudio. The information about the file resource is described by using FlowSpec.
 *
 * @description >  You cannot use this API operation to create multiple file resources at a time. If you specify multiple file resources by using FlowSpec, the system creates only the first specified resource.
 *
 * @param request CreateResourceRequest
 * @return CreateResourceResponse
 */
async function createResource(request: CreateResourceRequest): CreateResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResourceWithOptions(request, runtime);
}

model CreateResourceGroupRequest {
  autoRenew?: boolean(name='AutoRenew', example='true'),
  clientToken?: string(name='ClientToken', description='This parameter is required.', example='eb870033-74c8-4b1b-9664-04c4e7cc3465'),
  name?: string(name='Name', description='This parameter is required.', example='common_resource_group'),
  paymentDuration?: int32(name='PaymentDuration', example='1'),
  paymentDurationUnit?: string(name='PaymentDurationUnit', example='Month'),
  paymentType?: string(name='PaymentType', description='This parameter is required.', example='PrePaid'),
  remark?: string(name='Remark', example='创建用于普通任务的通用资源组'),
  spec?: int32(name='Spec', example='2'),
  vpcId?: string(name='VpcId', description='This parameter is required.', example='vpc-m2et4f3oc8msfbccXXXXX'),
  vswitchId?: string(name='VswitchId', description='This parameter is required.', example='vsw-uf8usrhs7hjd9amsXXXXX'),
}

model CreateResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  resourceGroupOrder?: {
    id?: string(name='Id', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
    orderId?: long(name='OrderId', example='2391982058XXXXX'),
    orderInstanceId?: string(name='OrderInstanceId', example='c442b330-3b10-4584-959e-736e4edXXXXX'),
  }(name='ResourceGroupOrder'),
  success?: boolean(name='Success', example='true'),
}

model CreateResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceGroupResponseBody(name='body'),
}

/**
 * @summary 创建通用资源组。
 *
 * @param request CreateResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateResourceGroupResponse
 */
async function createResourceGroupWithOptions(request: CreateResourceGroupRequest, runtime: Util.RuntimeOptions): CreateResourceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoRenew)) {
    body['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.paymentDuration)) {
    body['PaymentDuration'] = request.paymentDuration;
  }
  if (!Util.isUnset(request.paymentDurationUnit)) {
    body['PaymentDurationUnit'] = request.paymentDurationUnit;
  }
  if (!Util.isUnset(request.paymentType)) {
    body['PaymentType'] = request.paymentType;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vswitchId)) {
    body['VswitchId'] = request.vswitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateResourceGroup',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建通用资源组。
 *
 * @param request CreateResourceGroupRequest
 * @return CreateResourceGroupResponse
 */
async function createResourceGroup(request: CreateResourceGroupRequest): CreateResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResourceGroupWithOptions(request, runtime);
}

model CreateRouteRequest {
  destinationCidr?: string(name='DestinationCidr', description='This parameter is required.', example='192.168.0.0/16'),
  networkId?: long(name='NetworkId', description='This parameter is required.', example='1000'),
}

model CreateRouteResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  routeId?: long(name='RouteId', example='1000'),
  success?: boolean(name='Success', example='true'),
}

model CreateRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRouteResponseBody(name='body'),
}

/**
 * @summary 创建网络资源的路由。
 *
 * @param request CreateRouteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRouteResponse
 */
async function createRouteWithOptions(request: CreateRouteRequest, runtime: Util.RuntimeOptions): CreateRouteResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.destinationCidr)) {
    body['DestinationCidr'] = request.destinationCidr;
  }
  if (!Util.isUnset(request.networkId)) {
    body['NetworkId'] = request.networkId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRoute',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建网络资源的路由。
 *
 * @param request CreateRouteRequest
 * @return CreateRouteResponse
 */
async function createRoute(request: CreateRouteRequest): CreateRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRouteWithOptions(request, runtime);
}

model CreateWorkflowDefinitionRequest {
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000'),
  spec?: string(name='Spec', description='The FlowSpec field information about the workflow. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow/).

This parameter is required.'),
}

model CreateWorkflowDefinitionResponseBody = {
  id?: string(name='Id', description='The ID of the workflow.', example='463497880880954XXXX'),
  requestId?: string(name='RequestId', description='The request ID.', example='0EF298E5-0940-5AC7-9CB0-65025070XXXX'),
}

model CreateWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary Creates a workflow in a directory of DataStudio.
 *
 * @description > You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system creates only the first specified workflow. Other specified workflows and the nodes in the workflows are ignored. You can call the CreateNode operation to create a node.
 *
 * @param request CreateWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWorkflowDefinitionResponse
 */
async function createWorkflowDefinitionWithOptions(request: CreateWorkflowDefinitionRequest, runtime: Util.RuntimeOptions): CreateWorkflowDefinitionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a workflow in a directory of DataStudio.
 *
 * @description > You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system creates only the first specified workflow. Other specified workflows and the nodes in the workflows are ignored. You can call the CreateNode operation to create a node.
 *
 * @param request CreateWorkflowDefinitionRequest
 * @return CreateWorkflowDefinitionResponse
 */
async function createWorkflowDefinition(request: CreateWorkflowDefinitionRequest): CreateWorkflowDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWorkflowDefinitionWithOptions(request, runtime);
}

model DeleteDIAlarmRuleRequest {
  DIAlarmRuleId?: long(name='DIAlarmRuleId', description='The ID of the alert rule.', example='2'),
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='1'),
}

model DeleteDIAlarmRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='C99E2BE6-9DEA-5C2E-8F51-1DDCFEADE490'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteDIAlarmRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDIAlarmRuleResponseBody(name='body'),
}

/**
 * @summary Deletes an alert rule configured for a synchronization task.
 *
 * @param request DeleteDIAlarmRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDIAlarmRuleResponse
 */
async function deleteDIAlarmRuleWithOptions(request: DeleteDIAlarmRuleRequest, runtime: Util.RuntimeOptions): DeleteDIAlarmRuleResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDIAlarmRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes an alert rule configured for a synchronization task.
 *
 * @param request DeleteDIAlarmRuleRequest
 * @return DeleteDIAlarmRuleResponse
 */
async function deleteDIAlarmRule(request: DeleteDIAlarmRuleRequest): DeleteDIAlarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDIAlarmRuleWithOptions(request, runtime);
}

model DeleteDIJobRequest {
  DIJobId?: long(name='DIJobId', description='This parameter is required.', example='11126'),
  projectId?: long(name='ProjectId'),
}

model DeleteDIJobResponseBody = {
  requestId?: string(name='RequestId', example='D33D4A51-5845-579A-B4BA-FAADD0F83D53'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDIJobResponseBody(name='body'),
}

/**
 * @summary 删除数据集成任务
 *
 * @param request DeleteDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDIJobResponse
 */
async function deleteDIJobWithOptions(request: DeleteDIJobRequest, runtime: Util.RuntimeOptions): DeleteDIJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDIJob',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除数据集成任务
 *
 * @param request DeleteDIJobRequest
 * @return DeleteDIJobResponse
 */
async function deleteDIJob(request: DeleteDIJobRequest): DeleteDIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDIJobWithOptions(request, runtime);
}

model DeleteDataSourceRequest {
  id?: long(name='Id', example='1234'),
}

model DeleteDataSourceResponseBody = {
  requestId?: string(name='RequestId', example='B56432E0-2112-5C97-88D0-AA0AE5C75C74'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceResponseBody(name='body'),
}

/**
 * @summary 验证用
 *
 * @param request DeleteDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataSourceResponse
 */
async function deleteDataSourceWithOptions(request: DeleteDataSourceRequest, runtime: Util.RuntimeOptions): DeleteDataSourceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataSource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 验证用
 *
 * @param request DeleteDataSourceRequest
 * @return DeleteDataSourceResponse
 */
async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataSourceWithOptions(request, runtime);
}

model DeleteDataSourceSharedRuleRequest {
  id?: long(name='Id', description='This parameter is required.', example='22127'),
}

model DeleteDataSourceSharedRuleResponseBody = {
  requestId?: string(name='RequestId', example='64B-587A-8CED-969E1973887FXXX-TT'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataSourceSharedRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceSharedRuleResponseBody(name='body'),
}

/**
 * @summary 验证用
 *
 * @param request DeleteDataSourceSharedRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataSourceSharedRuleResponse
 */
async function deleteDataSourceSharedRuleWithOptions(request: DeleteDataSourceSharedRuleRequest, runtime: Util.RuntimeOptions): DeleteDataSourceSharedRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataSourceSharedRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 验证用
 *
 * @param request DeleteDataSourceSharedRuleRequest
 * @return DeleteDataSourceSharedRuleResponse
 */
async function deleteDataSourceSharedRule(request: DeleteDataSourceSharedRuleRequest): DeleteDataSourceSharedRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataSourceSharedRuleWithOptions(request, runtime);
}

model DeleteFunctionRequest {
  id?: string(name='Id', description='The ID of the UDF.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model DeleteFunctionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='88198F19-A36B-52A9-AE44-4518A688XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFunctionResponseBody(name='body'),
}

/**
 * @summary Deletes a user-defined function (UDF) in DataStudio.
 *
 * @description >  A UDF that is deployed cannot be deleted. If you want to delete such a UDF, you must first undeploy the UDF.
 *
 * @param request DeleteFunctionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFunctionResponse
 */
async function deleteFunctionWithOptions(request: DeleteFunctionRequest, runtime: Util.RuntimeOptions): DeleteFunctionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFunction',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a user-defined function (UDF) in DataStudio.
 *
 * @description >  A UDF that is deployed cannot be deleted. If you want to delete such a UDF, you must first undeploy the UDF.
 *
 * @param request DeleteFunctionRequest
 * @return DeleteFunctionResponse
 */
async function deleteFunction(request: DeleteFunctionRequest): DeleteFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFunctionWithOptions(request, runtime);
}

model DeleteNetworkRequest {
  id?: long(name='Id', description='This parameter is required.', example='1000'),
}

model DeleteNetworkResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', example='true'),
}

model DeleteNetworkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNetworkResponseBody(name='body'),
}

/**
 * @summary 解绑并删除通用资源组网络资源。
 *
 * @param request DeleteNetworkRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteNetworkResponse
 */
async function deleteNetworkWithOptions(request: DeleteNetworkRequest, runtime: Util.RuntimeOptions): DeleteNetworkResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNetwork',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 解绑并删除通用资源组网络资源。
 *
 * @param request DeleteNetworkRequest
 * @return DeleteNetworkResponse
 */
async function deleteNetwork(request: DeleteNetworkRequest): DeleteNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkWithOptions(request, runtime);
}

model DeleteNodeRequest {
  id?: string(name='Id', description='The ID of the node.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model DeleteNodeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A1E54497-5122-505E-91C6-BAC14980XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true\\\\
false', example='true'),
}

model DeleteNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNodeResponseBody(name='body'),
}

/**
 * @summary Deletes a node from DataStudio.
 *
 * @description >  A node that is deployed cannot be deleted. If you want to delete such a node, you must first undeploy the node.
 *
 * @param request DeleteNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteNodeResponse
 */
async function deleteNodeWithOptions(request: DeleteNodeRequest, runtime: Util.RuntimeOptions): DeleteNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNode',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a node from DataStudio.
 *
 * @description >  A node that is deployed cannot be deleted. If you want to delete such a node, you must first undeploy the node.
 *
 * @param request DeleteNodeRequest
 * @return DeleteNodeResponse
 */
async function deleteNode(request: DeleteNodeRequest): DeleteNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNodeWithOptions(request, runtime);
}

model DeleteProjectRequest {
  id?: long(name='Id', description='This parameter is required.', example='123456'),
}

model DeleteProjectResponseBody = {
  requestId?: string(name='RequestId', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
}

model DeleteProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProjectResponseBody(name='body'),
}

/**
 * @summary 销毁工作空间
 *
 * @param request DeleteProjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteProjectResponse
 */
async function deleteProjectWithOptions(request: DeleteProjectRequest, runtime: Util.RuntimeOptions): DeleteProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProject',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 销毁工作空间
 *
 * @param request DeleteProjectRequest
 * @return DeleteProjectResponse
 */
async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProjectWithOptions(request, runtime);
}

model DeleteProjectMemberRequest {
  projectId?: long(name='ProjectId', description='This parameter is required.', example='534752'),
  userId?: string(name='UserId', description='This parameter is required.', example='123422344899'),
}

model DeleteProjectMemberResponseBody = {
  requestId?: string(name='RequestId', example='1FF0465F-209C-5964-8F30-FAF21B677CC6'),
}

model DeleteProjectMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProjectMemberResponseBody(name='body'),
}

/**
 * @summary 移除工作空间成员
 *
 * @param request DeleteProjectMemberRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteProjectMemberResponse
 */
async function deleteProjectMemberWithOptions(request: DeleteProjectMemberRequest, runtime: Util.RuntimeOptions): DeleteProjectMemberResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProjectMember',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 移除工作空间成员
 *
 * @param request DeleteProjectMemberRequest
 * @return DeleteProjectMemberResponse
 */
async function deleteProjectMember(request: DeleteProjectMemberRequest): DeleteProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProjectMemberWithOptions(request, runtime);
}

model DeleteResourceRequest {
  id?: string(name='Id', description='The ID of the file resource.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model DeleteResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='88198F19-A36B-52A9-AE44-4518A688XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceResponseBody(name='body'),
}

/**
 * @summary Deletes a file resource from DataStudio.
 *
 * @description >  A file resource that is deployed cannot be deleted. If you want to delete such a file resource, you must first undeploy the file resource.
 *
 * @param request DeleteResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteResourceResponse
 */
async function deleteResourceWithOptions(request: DeleteResourceRequest, runtime: Util.RuntimeOptions): DeleteResourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteResource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a file resource from DataStudio.
 *
 * @description >  A file resource that is deployed cannot be deleted. If you want to delete such a file resource, you must first undeploy the file resource.
 *
 * @param request DeleteResourceRequest
 * @return DeleteResourceResponse
 */
async function deleteResource(request: DeleteResourceRequest): DeleteResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteResourceWithOptions(request, runtime);
}

model DeleteResourceGroupRequest {
  id?: string(name='Id', description='The ID of the resource group.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
}

model DeleteResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model DeleteResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceGroupResponseBody(name='body'),
}

/**
 * @summary Deletes a serverless resource group.
 *
 * @param request DeleteResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteResourceGroupResponse
 */
async function deleteResourceGroupWithOptions(request: DeleteResourceGroupRequest, runtime: Util.RuntimeOptions): DeleteResourceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteResourceGroup',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a serverless resource group.
 *
 * @param request DeleteResourceGroupRequest
 * @return DeleteResourceGroupResponse
 */
async function deleteResourceGroup(request: DeleteResourceGroupRequest): DeleteResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteResourceGroupWithOptions(request, runtime);
}

model DeleteRouteRequest {
  id?: long(name='Id', description='This parameter is required.', example='1000'),
}

model DeleteRouteResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', example='true'),
}

model DeleteRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRouteResponseBody(name='body'),
}

/**
 * @summary 删除网络资源的路由。
 *
 * @param request DeleteRouteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRouteResponse
 */
async function deleteRouteWithOptions(request: DeleteRouteRequest, runtime: Util.RuntimeOptions): DeleteRouteResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRoute',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除网络资源的路由。
 *
 * @param request DeleteRouteRequest
 * @return DeleteRouteResponse
 */
async function deleteRoute(request: DeleteRouteRequest): DeleteRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRouteWithOptions(request, runtime);
}

model DeleteWorkflowDefinitionRequest {
  id?: string(name='Id', description='The ID of the workflow.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000'),
}

model DeleteWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B17730C0-D959-548A-AE23-E754177CXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary Deletes a workflow from DataStudio.
 *
 * @description >  A workflow that is deployed cannot be deleted. If you want to delete such a workflow, you must first undeploy the workflow.
 *
 * @param request DeleteWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWorkflowDefinitionResponse
 */
async function deleteWorkflowDefinitionWithOptions(request: DeleteWorkflowDefinitionRequest, runtime: Util.RuntimeOptions): DeleteWorkflowDefinitionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a workflow from DataStudio.
 *
 * @description >  A workflow that is deployed cannot be deleted. If you want to delete such a workflow, you must first undeploy the workflow.
 *
 * @param request DeleteWorkflowDefinitionRequest
 * @return DeleteWorkflowDefinitionResponse
 */
async function deleteWorkflowDefinition(request: DeleteWorkflowDefinitionRequest): DeleteWorkflowDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWorkflowDefinitionWithOptions(request, runtime);
}

model DissociateProjectFromResourceGroupRequest {
  projectId?: long(name='ProjectId', description='The ID of the workspace from which you want to disassociate the resource group.

This parameter is required.', example='1000'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
}

model DissociateProjectFromResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model DissociateProjectFromResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DissociateProjectFromResourceGroupResponseBody(name='body'),
}

/**
 * @summary Disassociates a resource group from a workspace.
 *
 * @param request DissociateProjectFromResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DissociateProjectFromResourceGroupResponse
 */
async function dissociateProjectFromResourceGroupWithOptions(request: DissociateProjectFromResourceGroupRequest, runtime: Util.RuntimeOptions): DissociateProjectFromResourceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DissociateProjectFromResourceGroup',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Disassociates a resource group from a workspace.
 *
 * @param request DissociateProjectFromResourceGroupRequest
 * @return DissociateProjectFromResourceGroupResponse
 */
async function dissociateProjectFromResourceGroup(request: DissociateProjectFromResourceGroupRequest): DissociateProjectFromResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociateProjectFromResourceGroupWithOptions(request, runtime);
}

model ExecDeploymentStageRequest {
  code?: string(name='Code', description='The code of the stage in the process. You can call the GetDeployment operation to query the code.

This parameter is required.', example='DEV_CHECK'),
  id?: string(name='Id', description='The ID of the process.

This parameter is required.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model ExecDeploymentStageResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true

*   false

    **

    **Note:** The value of this parameter indicates only whether the stage is triggered but does not indicate whether the execution of the stage is successful.', example='true'),
}

model ExecDeploymentStageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecDeploymentStageResponseBody(name='body'),
}

/**
 * @summary Executes a stage in a process.
 *
 * @description >  The stages in a process are sequential. For more information, see the GetDeployment operation. Skipping or repeating a stage is not allowed.
 * >  The execution of a stage is asynchronous. The response of this operation indicates only whether a stage is triggered but does not indicate whether the execution of the stage is successful. You can call the GetDeployment operation to check whether the execution is successful.
 *
 * @param request ExecDeploymentStageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExecDeploymentStageResponse
 */
async function execDeploymentStageWithOptions(request: ExecDeploymentStageRequest, runtime: Util.RuntimeOptions): ExecDeploymentStageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['Code'] = request.code;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ExecDeploymentStage',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Executes a stage in a process.
 *
 * @description >  The stages in a process are sequential. For more information, see the GetDeployment operation. Skipping or repeating a stage is not allowed.
 * >  The execution of a stage is asynchronous. The response of this operation indicates only whether a stage is triggered but does not indicate whether the execution of the stage is successful. You can call the GetDeployment operation to check whether the execution is successful.
 *
 * @param request ExecDeploymentStageRequest
 * @return ExecDeploymentStageResponse
 */
async function execDeploymentStage(request: ExecDeploymentStageRequest): ExecDeploymentStageResponse {
  var runtime = new Util.RuntimeOptions{};
  return execDeploymentStageWithOptions(request, runtime);
}

model GetDIJobRequest {
  DIJobId?: long(name='DIJobId', example='11588'),
  projectId?: long(name='ProjectId'),
  withDetails?: boolean(name='WithDetails', example='true'),
}

model GetDIJobResponseBody = {
  pagingInfo?: {
    DIJobId?: string(name='DIJobId', example='32601'),
    description?: string(name='Description', example='description'),
    destinationDataSourceSettings?: [ 
      {
        dataSourceName?: string(name='DataSourceName', example='dw_mysql'),
      }
    ](name='DestinationDataSourceSettings'),
    destinationDataSourceType?: string(name='DestinationDataSourceType', example='Hologres'),
    jobName?: string(name='JobName', example='imp_ods_dms_det_dealer_info_df'),
    jobSettings?: {
      channelSettings?: string(name='ChannelSettings', example='{"structInfo":"MANAGED","storageType":"TEXTFILE","writeMode":"APPEND","partitionColumns":[{"columnName":"pt","columnType":"STRING","comment":""}],"fieldDelimiter":""}'),
      columnDataTypeSettings?: [ 
        {
          destinationDataType?: string(name='DestinationDataType', example='text'),
          sourceDataType?: string(name='SourceDataType', example='bigint'),
        }
      ](name='ColumnDataTypeSettings'),
      cycleScheduleSettings?: {
        cycleMigrationType?: string(name='CycleMigrationType', example='Full'),
        scheduleParameters?: string(name='ScheduleParameters', example='bizdate=$bizdate'),
      }(name='CycleScheduleSettings'),
      ddlHandlingSettings?: [ 
        {
          action?: string(name='Action', example='Ignore'),
          type?: string(name='Type', example='CreateTable'),
        }
      ](name='DdlHandlingSettings'),
      runtimeSettings?: [ 
        {
          name?: string(name='Name', example='runtime.offline.concurrent'),
          value?: string(name='Value', example='1'),
        }
      ](name='RuntimeSettings'),
    }(name='JobSettings'),
    jobStatus?: string(name='JobStatus'),
    migrationType?: string(name='MigrationType', example='FullAndRealtimeIncremental'),
    projectId?: long(name='ProjectId', example='98330'),
    resourceSettings?: {
      offlineResourceSettings?: {
        requestedCu?: double(name='RequestedCu', example='2.0'),
        resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='S_res_group_7708_1667792816832'),
      }(name='OfflineResourceSettings'),
      realtimeResourceSettings?: {
        requestedCu?: double(name='RequestedCu', example='2.0'),
        resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='S_res_group_235454102432001_1579085295030'),
      }(name='RealtimeResourceSettings'),
      scheduleResourceSettings?: {
        requestedCu?: double(name='RequestedCu', example='2.0'),
        resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='S_res_group_235454102432001_1718359176885'),
      }(name='ScheduleResourceSettings'),
    }(name='ResourceSettings'),
    sourceDataSourceSettings?: [ 
      {
        dataSourceName?: string(name='DataSourceName', example='dw_mysql'),
        dataSourceProperties?: {
          encoding?: string(name='Encoding', example='UTF-8'),
          timezone?: string(name='Timezone', example='GMT+8'),
        }(name='DataSourceProperties'),
      }
    ](name='SourceDataSourceSettings'),
    sourceDataSourceType?: string(name='SourceDataSourceType', example='Mysql'),
    tableMappings?: [ 
      {
        sourceObjectSelectionRules?: [ 
          {
            action?: string(name='Action', example='Include'),
            expression?: string(name='Expression', example='mysql_table_1'),
            expressionType?: string(name='ExpressionType', example='Exact'),
            objectType?: string(name='ObjectType', example='Table'),
          }
        ](name='SourceObjectSelectionRules'),
        transformationRules?: [ 
          {
            ruleActionType?: string(name='RuleActionType', example='AddColumn'),
            ruleName?: string(name='RuleName', example='rename_rule_1'),
            ruleTargetType?: string(name='RuleTargetType', example='Table'),
          }
        ](name='TransformationRules'),
      }
    ](name='TableMappings'),
    transformationRules?: [ 
      {
        ruleActionType?: string(name='RuleActionType', example='Rename'),
        ruleExpression?: string(name='RuleExpression', example='{"expression":"${srcDatasoureName}_${srcDatabaseName}"}'),
        ruleName?: string(name='RuleName', example='rename_rule_1'),
        ruleTargetType?: string(name='RuleTargetType', example='Table'),
      }
    ](name='TransformationRules'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', description='代表创建时间的资源属性字段', example='C99E2BE6-9DEA-5C2E-8F51-1DDCFEADE490'),
}

model GetDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDIJobResponseBody(name='body'),
}

/**
 * @summary 查看数据集成任务
 *
 * @param request GetDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDIJobResponse
 */
async function getDIJobWithOptions(request: GetDIJobRequest, runtime: Util.RuntimeOptions): GetDIJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDIJob',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看数据集成任务
 *
 * @param request GetDIJobRequest
 * @return GetDIJobResponse
 */
async function getDIJob(request: GetDIJobRequest): GetDIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDIJobWithOptions(request, runtime);
}

model GetDIJobLogRequest {
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.

This parameter is required.', example='10000'),
  failoverId?: long(name='FailoverId', description='The failover ID.', example='10'),
  instanceId?: long(name='InstanceId', description='The instance ID.', example='6153616438'),
}

model GetDIJobLogResponseBody = {
  log?: string(name='Log', description='The log.', example='>>>>>>>> stdout:n++++++++++++++++++executing sql: create database if not exists jindo_test location \\\\"oss://pangbei-hdfs/tmp/hive\\\\" n++n'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='1AFAE64E-D1BE-432B-A9****'),
}

model GetDIJobLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDIJobLogResponseBody(name='body'),
}

/**
 * @summary Obtains logs generated for a synchronization task.
 *
 * @param request GetDIJobLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDIJobLogResponse
 */
async function getDIJobLogWithOptions(request: GetDIJobLogRequest, runtime: Util.RuntimeOptions): GetDIJobLogResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDIJobLog',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains logs generated for a synchronization task.
 *
 * @param request GetDIJobLogRequest
 * @return GetDIJobLogResponse
 */
async function getDIJobLog(request: GetDIJobLogRequest): GetDIJobLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDIJobLogWithOptions(request, runtime);
}

model GetDataSourceRequest {
  id?: long(name='Id', description='The data source ID.

This parameter is required.', example='16035'),
}

model GetDataSourceResponseBody = {
  dataSource?: {
    connectionProperties?: any(name='ConnectionProperties', description='The connection properties of the data source.', example='{
	"envType": "Prod",
	"regionId": "cn-beijing",
    "instanceId": "hgprecn-cn-x0r3oun4k001",
    "database": "testdb",
    "securityProtocol": "authTypeNone",
    "authType": "Executor",
    "authIdentity": "1107550004253538"
}'),
    connectionPropertiesMode?: string(name='ConnectionPropertiesMode', description='The mode in which the data source is added. The mode varies based on the data source type. Valid values:

*   InstanceMode: instance mode
*   UrlMode: connection string mode
*   CdhMode: CDH cluster mode', example='UrlMode'),
    createTime?: long(name='CreateTime', description='The time when the data source was added. This value is a UNIX timestamp.', example='1698286929333'),
    createUser?: string(name='CreateUser', description='The ID of the user who adds the data source.', example='1107550004253538'),
    description?: string(name='Description', description='The description of the data source.', example='test'),
    id?: long(name='Id', description='The data source ID.', example='16738'),
    modifyTime?: long(name='ModifyTime', description='The time when the data source was last modified. This value is a UNIX timestamp.', example='1698286929333'),
    modifyUser?: string(name='ModifyUser', description='The ID of the user who modifies the data source.', example='1107550004253538'),
    name?: string(name='Name', description='The name of the data source.', example='test'),
    projectId?: long(name='ProjectId', description='The ID of the workspace with which the data source is associated.', example='52660'),
    qualifiedName?: string(name='QualifiedName', description='The unique business key of the data source. For example, the unique business key of a Hologres data source is in the ${tenantOwnerId}:${regionId}:${type}:${instanceId}:${database} format.', example='1107550004253538:cn-beijing:holo:hgprecn-cn-x0r3oun4k001:testdb'),
    type?: string(name='Type', description='The type of the data source.', example='hologres'),
  }(name='DataSource'),
  requestId?: string(name='RequestId', description='The request ID.', example='9252F32F-D855-549E-8898-61CF5A733050'),
}

model GetDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataSourceResponseBody(name='body'),
}

/**
 * @summary Queries a data source by ID.
 *
 * @description You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Deployment, Development, Project Owner, and O\\&M
 *
 * @param request GetDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataSourceResponse
 */
async function getDataSourceWithOptions(request: GetDataSourceRequest, runtime: Util.RuntimeOptions): GetDataSourceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataSource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a data source by ID.
 *
 * @description You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Deployment, Development, Project Owner, and O\\&M
 *
 * @param request GetDataSourceRequest
 * @return GetDataSourceResponse
 */
async function getDataSource(request: GetDataSourceRequest): GetDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataSourceWithOptions(request, runtime);
}

model GetDeploymentRequest {
  id?: string(name='Id', description='The ID of the process.

This parameter is required.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model GetDeploymentResponseBody = {
  pipeline?: {
    createTime?: long(name='CreateTime', description='The time when the process was created. This value is a UNIX timestamp.', example='1724984066000'),
    creator?: string(name='Creator', description='The creator of the process.', example='137946317766XXXX'),
    id?: string(name='Id', description='The ID of the process.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX'),
    message?: string(name='Message', description='The error message returned when the process fails.'),
    modifyTime?: long(name='ModifyTime', description='The time when the process was modified. This value is a UNIX timestamp.', example='1724984066000'),
    projectId?: string(name='ProjectId', description='The DataWorks workspace ID.', example='56160'),
    stages?: [ 
      {
        code?: string(name='Code', description='The code of the stage.', example='DEV_CHECK'),
        description?: string(name='Description', description='The description of the stage.'),
        detail?: map[string]any(name='Detail', description='The details of the stage.'),
        message?: string(name='Message', description='The error message returned for the stage.'),
        name?: string(name='Name', description='The name of the stage.'),
        status?: string(name='Status', description='The status of the stage.

Valid values:

*   INIT
*   RUNNING
*   SUCCESS
*   FAIL
*   TERMINATION
*   CANCEL', example='INIT'),
        step?: int32(name='Step', description='The step number of the stage.', example='1'),
        type?: string(name='Type', description='The type of the stage.

Valid values:

*   DELETE
*   BUILD
*   CHECK
*   DEPLOY
*   OFFLINE', example='BUILD'),
      }
    ](name='Stages', description='The information about stages in the process.'),
    status?: string(name='Status', description='The status of the process.

Valid values:

*   INIT
*   RUNNING
*   SUCCESS
*   FAIL
*   TERMINATION
*   CANCEL', example='RUNNING'),
  }(name='Pipeline', description='The information about the process.'),
  requestId?: string(name='RequestId', description='The request ID.', example='08468352-032C-5262-AEDC-68C9FA05XXXX'),
}

model GetDeploymentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeploymentResponseBody(name='body'),
}

/**
 * @summary Queries the information about a process for deploying or undeploying an entity.
 *
 * @param request GetDeploymentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDeploymentResponse
 */
async function getDeploymentWithOptions(request: GetDeploymentRequest, runtime: Util.RuntimeOptions): GetDeploymentResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeployment',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a process for deploying or undeploying an entity.
 *
 * @param request GetDeploymentRequest
 * @return GetDeploymentResponse
 */
async function getDeployment(request: GetDeploymentRequest): GetDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeploymentWithOptions(request, runtime);
}

model GetFunctionRequest {
  id?: string(name='Id', description='The ID of the UDF.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000'),
}

model GetFunctionResponseBody = {
  function?: {
    createTime?: long(name='CreateTime', description='The time when the UDF was created. This value is a UNIX timestamp.', example='1724505917000'),
    id?: string(name='Id', description='The ID of the UDF.', example='860438872620113XXXX'),
    modifyTime?: long(name='ModifyTime', description='The time when the UDF was last modified. This value is a UNIX timestamp.', example='1724506661000'),
    name?: string(name='Name', description='The name of the UDF.'),
    owner?: string(name='Owner', description='The owner of the UDF.', example='110755000425XXXX'),
    projectId?: string(name='ProjectId', description='The ID of the DataWorks workspace to which the UDF belongs.', example='10000'),
    spec?: string(name='Spec', description='The FlowSpec field information about the UDF. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).'),
  }(name='Function', description='The information about the UDF.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6CF95929-6D12-5A88-8CC3-4B2F4C2EXXXX'),
}

model GetFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFunctionResponseBody(name='body'),
}

/**
 * @summary Queries the information about a user-defined function (UDF) in DataStudio.
 *
 * @param request GetFunctionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFunctionResponse
 */
async function getFunctionWithOptions(request: GetFunctionRequest, runtime: Util.RuntimeOptions): GetFunctionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFunction',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a user-defined function (UDF) in DataStudio.
 *
 * @param request GetFunctionRequest
 * @return GetFunctionResponse
 */
async function getFunction(request: GetFunctionRequest): GetFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFunctionWithOptions(request, runtime);
}

model GetJobStatusRequest {
  jobId?: string(name='JobId', description='This parameter is required.', example='70ecdaec-bf21-4c11-8ecb-4f77453ceea8'),
}

model GetJobStatusResponseBody = {
  jobStatus?: {
    completed?: string(name='Completed', example='False'),
    createTime?: string(name='CreateTime', example='1729063449802'),
    error?: string(name='Error', example='Not Found'),
    jobId?: string(name='JobId', example='C664CDE3-9C0B-5792-B17F-6C543783BBBC'),
    jobType?: string(name='JobType', example='Create'),
    status?: string(name='Status', example='Success'),
  }(name='JobStatus'),
  requestId?: string(name='RequestId', example='5E2BFE96-C0E0-5A98-85C8-633EC803198D'),
}

model GetJobStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobStatusResponseBody(name='body'),
}

/**
 * @summary 返回异步任务的状态信息
 *
 * @param request GetJobStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetJobStatusResponse
 */
async function getJobStatusWithOptions(request: GetJobStatusRequest, runtime: Util.RuntimeOptions): GetJobStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetJobStatus',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 返回异步任务的状态信息
 *
 * @param request GetJobStatusRequest
 * @return GetJobStatusResponse
 */
async function getJobStatus(request: GetJobStatusRequest): GetJobStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobStatusWithOptions(request, runtime);
}

model GetNetworkRequest {
  id?: long(name='Id', description='This parameter is required.', example='1000'),
}

model GetNetworkResponseBody = {
  network?: {
    createTime?: long(name='CreateTime', example='1727055811000'),
    createUser?: string(name='CreateUser', example='11075500042XXXXX'),
    id?: long(name='Id', example='1000'),
    resourceGroupId?: string(name='ResourceGroupId', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
    securityGroupId?: string(name='SecurityGroupId', example='sg-2ze13vamugr7jenXXXXX'),
    status?: string(name='Status', example='Running'),
    vpcId?: string(name='VpcId', example='vpc-m2et4f3oc8msfbccXXXXX'),
    vswitchId?: string(name='VswitchId', example='vsw-uf8usrhs7hjd9amsXXXXX'),
  }(name='Network'),
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', example='true'),
}

model GetNetworkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNetworkResponseBody(name='body'),
}

/**
 * @summary 获取某个网络资源详细信息。
 *
 * @param request GetNetworkRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNetworkResponse
 */
async function getNetworkWithOptions(request: GetNetworkRequest, runtime: Util.RuntimeOptions): GetNetworkResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetNetwork',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取某个网络资源详细信息。
 *
 * @param request GetNetworkRequest
 * @return GetNetworkResponse
 */
async function getNetwork(request: GetNetworkRequest): GetNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNetworkWithOptions(request, runtime);
}

model GetNodeRequest {
  id?: string(name='Id', description='The ID of the node.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000'),
}

model GetNodeResponseBody = {
  node?: {
    createTime?: long(name='CreateTime', description='The time when the node was created. This value is a UNIX timestamp.', example='1700539206000'),
    id?: string(name='Id', description='The ID of the node.', example='860438872620113XXXX'),
    modifyTime?: long(name='ModifyTime', description='The time when the node was last modified. This value is a UNIX timestamp.', example='1700539206000'),
    name?: string(name='Name', description='The name of the node.'),
    owner?: string(name='Owner', description='The owner of the node.', example='196596664824XXXX'),
    projectId?: string(name='ProjectId', description='The DataWorks workspace ID.', example='10000'),
    spec?: string(name='Spec', description='The FlowSpec field information about this node. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow).'),
  }(name='Node', description='The information about the node.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model GetNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeResponseBody(name='body'),
}

/**
 * @summary Queries the information about a node in DataStudio.
 *
 * @param request GetNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNodeResponse
 */
async function getNodeWithOptions(request: GetNodeRequest, runtime: Util.RuntimeOptions): GetNodeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetNode',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a node in DataStudio.
 *
 * @param request GetNodeRequest
 * @return GetNodeResponse
 */
async function getNode(request: GetNodeRequest): GetNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeWithOptions(request, runtime);
}

model GetProjectRequest {
  id?: long(name='Id', description='This parameter is required.', example='123456'),
}

model GetProjectResponseBody = {
  project?: {
    aliyunResourceGroupId?: string(name='AliyunResourceGroupId', example='rg-acfmzbn7pti3zfa'),
    aliyunResourceTags?: [ 
      {
        key?: string(name='Key', example='batch'),
        value?: string(name='Value', example='blue'),
      }
    ](name='AliyunResourceTags'),
    description?: string(name='Description'),
    devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', example='true'),
    devRoleDisabled?: boolean(name='DevRoleDisabled', example='false'),
    displayName?: string(name='DisplayName'),
    id?: long(name='Id', example='28477242'),
    name?: string(name='Name', example='sora_finance'),
    owner?: string(name='Owner', example='207947397706614299'),
    paiTaskEnabled?: boolean(name='PaiTaskEnabled', example='true'),
    status?: string(name='Status', example='Available'),
  }(name='Project'),
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model GetProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectResponseBody(name='body'),
}

/**
 * @summary 查询工作空间详情
 *
 * @param request GetProjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetProjectResponse
 */
async function getProjectWithOptions(request: GetProjectRequest, runtime: Util.RuntimeOptions): GetProjectResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProject',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询工作空间详情
 *
 * @param request GetProjectRequest
 * @return GetProjectResponse
 */
async function getProject(request: GetProjectRequest): GetProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProjectWithOptions(request, runtime);
}

model GetProjectMemberRequest {
  projectId?: long(name='ProjectId', description='This parameter is required.', example='88757'),
  userId?: string(name='UserId', description='This parameter is required.', example='123422344899'),
}

model GetProjectMemberResponseBody = {
  projectMember?: {
    projectId?: long(name='ProjectId', example='88757'),
    roles?: [ 
      {
        code?: string(name='Code', example='role_project_guest'),
        name?: string(name='Name'),
        type?: string(name='Type', example='System'),
      }
    ](name='Roles'),
    status?: string(name='Status', example='Normal'),
    userId?: string(name='UserId', example='123422344899'),
  }(name='ProjectMember'),
  requestId?: string(name='RequestId', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model GetProjectMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectMemberResponseBody(name='body'),
}

/**
 * @summary 查询工作空间成员详情
 *
 * @param request GetProjectMemberRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetProjectMemberResponse
 */
async function getProjectMemberWithOptions(request: GetProjectMemberRequest, runtime: Util.RuntimeOptions): GetProjectMemberResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetProjectMember',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询工作空间成员详情
 *
 * @param request GetProjectMemberRequest
 * @return GetProjectMemberResponse
 */
async function getProjectMember(request: GetProjectMemberRequest): GetProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProjectMemberWithOptions(request, runtime);
}

model GetProjectRoleRequest {
  code?: string(name='Code', description='This parameter is required.', example='role_project_guest'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='10002'),
}

model GetProjectRoleResponseBody = {
  projectRole?: {
    code?: string(name='Code', example='role_project_guest'),
    name?: string(name='Name'),
    projectId?: long(name='ProjectId', example='10002'),
    type?: string(name='Type', example='System'),
  }(name='ProjectRole'),
  requestId?: string(name='RequestId', example='82F28E60-CF48-5EDF-AB25-D806847B97D1'),
}

model GetProjectRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectRoleResponseBody(name='body'),
}

/**
 * @summary 查询工作空间角色详情
 *
 * @param request GetProjectRoleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetProjectRoleResponse
 */
async function getProjectRoleWithOptions(request: GetProjectRoleRequest, runtime: Util.RuntimeOptions): GetProjectRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.code)) {
    query['Code'] = request.code;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProjectRole',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询工作空间角色详情
 *
 * @param request GetProjectRoleRequest
 * @return GetProjectRoleResponse
 */
async function getProjectRole(request: GetProjectRoleRequest): GetProjectRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProjectRoleWithOptions(request, runtime);
}

model GetResourceRequest {
  id?: string(name='Id', description='The ID of the file resource.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000'),
}

model GetResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='E871F6C0-2EFF-5790-A00D-C57543EEXXXX'),
  resource?: {
    createTime?: long(name='CreateTime', description='The time when the file resource was created. This value is a UNIX timestamp.', example='1700539206000'),
    id?: string(name='Id', description='The ID of the file resource.', example='860438872620113XXXX'),
    modifyTime?: long(name='ModifyTime', description='The time when the file resource was last modified. This value is a UNIX timestamp.', example='1700539206000'),
    name?: string(name='Name', description='The name of the file resource.'),
    owner?: string(name='Owner', description='The owner of the file resource.', example='110755000425XXXX'),
    projectId?: string(name='ProjectId', description='The ID of the workspace to which the file resource belongs.', example='10000'),
    spec?: string(name='Spec', description='The FlowSpec field information about the file resource. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow).'),
  }(name='Resource', description='The information about the file resource.'),
}

model GetResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceResponseBody(name='body'),
}

/**
 * @summary Queries the information about a file resource.
 *
 * @param request GetResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetResourceResponse
 */
async function getResourceWithOptions(request: GetResourceRequest, runtime: Util.RuntimeOptions): GetResourceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a file resource.
 *
 * @param request GetResourceRequest
 * @return GetResourceResponse
 */
async function getResource(request: GetResourceRequest): GetResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceWithOptions(request, runtime);
}

model GetResourceGroupRequest {
  id?: string(name='Id', description='This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
}

model GetResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  resourceGroup?: {
    createTime?: long(name='CreateTime', example='1727055811000'),
    createUser?: string(name='CreateUser', example='11075500042XXXXX'),
    defaultVpcId?: string(name='DefaultVpcId', example='vpc-m2et4f3oc8msfbccXXXXX'),
    defaultVswitchId?: string(name='DefaultVswitchId', example='vsw-uf8usrhs7hjd9amsXXXXX'),
    id?: string(name='Id', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
    name?: string(name='Name', example='common_resource_group'),
    orderInstanceId?: string(name='OrderInstanceId', example='c442b330-3b10-4584-959e-736e4edXXXXX'),
    paymentType?: string(name='PaymentType', example='PrePaid'),
    remark?: string(name='Remark', example='创建用于普通任务的通用资源组'),
    resourceGroupType?: string(name='ResourceGroupType', example='CommonV2'),
    spec?: {
      amount?: int32(name='Amount', example='1'),
      standard?: string(name='Standard', example='2CU'),
    }(name='Spec'),
    status?: string(name='Status', example='Normal'),
  }(name='ResourceGroup'),
  success?: boolean(name='Success', example='true'),
}

model GetResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceGroupResponseBody(name='body'),
}

/**
 * @summary 根据id获取指定资源组。
 *
 * @param request GetResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetResourceGroupResponse
 */
async function getResourceGroupWithOptions(request: GetResourceGroupRequest, runtime: Util.RuntimeOptions): GetResourceGroupResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourceGroup',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据id获取指定资源组。
 *
 * @param request GetResourceGroupRequest
 * @return GetResourceGroupResponse
 */
async function getResourceGroup(request: GetResourceGroupRequest): GetResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceGroupWithOptions(request, runtime);
}

model GetRouteRequest {
  id?: long(name='Id', description='This parameter is required.', example='1000'),
}

model GetRouteResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  route?: {
    createTime?: long(name='CreateTime', example='1727055811000'),
    destinationCidr?: string(name='DestinationCidr', example='192.168.0.0/16'),
    id?: long(name='Id', example='1000'),
    networkId?: long(name='NetworkId', example='1000'),
    resourceGroupId?: string(name='ResourceGroupId', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
    resourceId?: string(name='ResourceId', example='ns-679XXXXX'),
  }(name='Route'),
  success?: boolean(name='Success', example='true'),
}

model GetRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRouteResponseBody(name='body'),
}

/**
 * @summary 根据id获取指定路由。
 *
 * @param request GetRouteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRouteResponse
 */
async function getRouteWithOptions(request: GetRouteRequest, runtime: Util.RuntimeOptions): GetRouteResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRoute',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据id获取指定路由。
 *
 * @param request GetRouteRequest
 * @return GetRouteResponse
 */
async function getRoute(request: GetRouteRequest): GetRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRouteWithOptions(request, runtime);
}

model GetWorkflowDefinitionRequest {
  id?: string(name='Id', description='The ID of the workflow.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000'),
}

model GetWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F2BDD628-8A21-5BD1-B930-1A2D5989XXXX'),
  workflowDefinition?: {
    createTime?: long(name='CreateTime', description='The time when the workflow was created. This value is a UNIX timestamp.', example='1708481905000'),
    id?: string(name='Id', description='The ID of the workflow.', example='463497880880954XXXX'),
    modifyTime?: long(name='ModifyTime', description='The time when the workflow was last modified. This value is a UNIX timestamp.', example='1708481905000'),
    name?: string(name='Name', description='The name of the workflow.'),
    owner?: string(name='Owner', description='The owner of the workflow.', example='110755000425XXXX'),
    projectId?: string(name='ProjectId', description='The ID of the workspace to which the workflow belongs.', example='307XXX'),
    spec?: string(name='Spec', description='The FlowSpec field information about the workflow. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow/).'),
  }(name='WorkflowDefinition', description='The information about the workflow.'),
}

model GetWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary Queries the infomation about a workflow.
 *
 * @param request GetWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWorkflowDefinitionResponse
 */
async function getWorkflowDefinitionWithOptions(request: GetWorkflowDefinitionRequest, runtime: Util.RuntimeOptions): GetWorkflowDefinitionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the infomation about a workflow.
 *
 * @param request GetWorkflowDefinitionRequest
 * @return GetWorkflowDefinitionResponse
 */
async function getWorkflowDefinition(request: GetWorkflowDefinitionRequest): GetWorkflowDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWorkflowDefinitionWithOptions(request, runtime);
}

model GrantMemberProjectRolesRequest {
  projectId?: long(name='ProjectId', description='This parameter is required.', example='105149'),
  roleCodes?: [ string ](name='RoleCodes', description='This parameter is required.'),
  userId?: string(name='UserId', description='This parameter is required.', example='123422344899'),
}

model GrantMemberProjectRolesShrinkRequest {
  projectId?: long(name='ProjectId', description='This parameter is required.', example='105149'),
  roleCodesShrink?: string(name='RoleCodes', description='This parameter is required.'),
  userId?: string(name='UserId', description='This parameter is required.', example='123422344899'),
}

model GrantMemberProjectRolesResponseBody = {
  requestId?: string(name='RequestId', example='2d9ced66-38ef-4923-baf6-391dd3a7e656'),
}

model GrantMemberProjectRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantMemberProjectRolesResponseBody(name='body'),
}

/**
 * @summary 授予工作空间成员角色
 *
 * @param tmpReq GrantMemberProjectRolesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GrantMemberProjectRolesResponse
 */
async function grantMemberProjectRolesWithOptions(tmpReq: GrantMemberProjectRolesRequest, runtime: Util.RuntimeOptions): GrantMemberProjectRolesResponse {
  Util.validateModel(tmpReq);
  var request = new GrantMemberProjectRolesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.roleCodes)) {
    request.roleCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roleCodes, 'RoleCodes', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.roleCodesShrink)) {
    body['RoleCodes'] = request.roleCodesShrink;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GrantMemberProjectRoles',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 授予工作空间成员角色
 *
 * @param request GrantMemberProjectRolesRequest
 * @return GrantMemberProjectRolesResponse
 */
async function grantMemberProjectRoles(request: GrantMemberProjectRolesRequest): GrantMemberProjectRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantMemberProjectRolesWithOptions(request, runtime);
}

model ImportWorkflowDefinitionRequest {
  projectId?: string(name='ProjectId', description='This parameter is required.', example='123456'),
  spec?: string(name='Spec', description='This parameter is required.'),
}

model ImportWorkflowDefinitionResponseBody = {
  asyncJob?: {
    completed?: boolean(name='Completed', example='false'),
    createTime?: long(name='CreateTime', example='1706581425000'),
    error?: string(name='Error', example='target folder already exists: XXXX'),
    id?: string(name='Id', example='1234567691239009XXXX'),
    progress?: int32(name='Progress', example='0'),
    response?: string(name='Response', example='632647691239009XXXX'),
    status?: string(name='Status', example='Running'),
    type?: string(name='Type', example='Create'),
  }(name='AsyncJob'),
  requestId?: string(name='RequestId', example='7C352CB7-CD88-50CF-9D0D-E81BDF020E7F'),
}

model ImportWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary 调用此接口，可以将通过FlowSpec定义的工作流节点和其内部的子节点都导入到数据开发中
 *
 * @param request ImportWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ImportWorkflowDefinitionResponse
 */
async function importWorkflowDefinitionWithOptions(request: ImportWorkflowDefinitionRequest, runtime: Util.RuntimeOptions): ImportWorkflowDefinitionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ImportWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 调用此接口，可以将通过FlowSpec定义的工作流节点和其内部的子节点都导入到数据开发中
 *
 * @param request ImportWorkflowDefinitionRequest
 * @return ImportWorkflowDefinitionResponse
 */
async function importWorkflowDefinition(request: ImportWorkflowDefinitionRequest): ImportWorkflowDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return importWorkflowDefinitionWithOptions(request, runtime);
}

model ListDIAlarmRulesRequest {
  DIAlarmRuleId?: long(name='DIAlarmRuleId', example='34988'),
  jobId?: long(name='JobId', example='1000001'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListDIAlarmRulesResponseBody = {
  pagingInfo?: {
    DIJobAlarmRules?: [ 
      {
        DIAlarmRuleId?: long(name='DIAlarmRuleId', example='72402'),
        DIJobId?: long(name='DIJobId', example='32594'),
        description?: string(name='Description', example='rule descrition'),
        enabled?: boolean(name='Enabled', example='True'),
        metricType?: string(name='MetricType', example='Heartbeat'),
        name?: string(name='Name', example='rule_name'),
        notificationSettings?: {
          inhibitionInterval?: long(name='InhibitionInterval', example='5'),
          notificationChannels?: [ 
            {
              channels?: [ string ](name='Channels'),
              severity?: string(name='Severity', example='Critical'),
            }
          ](name='NotificationChannels'),
          notificationReceivers?: [ 
            {
              receiverType?: string(name='ReceiverType', example='DingToken'),
              receiverValues?: [ string ](name='ReceiverValues'),
            }
          ](name='NotificationReceivers'),
        }(name='NotificationSettings'),
        triggerConditions?: [ 
          {
            ddlReportTags?: [ string ](name='DdlReportTags'),
            duration?: long(name='Duration', example='1'),
            severity?: string(name='Severity', example='Critical'),
            threshold?: long(name='Threshold', example='5'),
          }
        ](name='TriggerConditions'),
      }
    ](name='DIJobAlarmRules'),
    pageNumber?: long(name='PageNumber', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='90'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='74C2FECD-5B3A-554A-BCF5-351A36DE9815'),
}

model ListDIAlarmRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIAlarmRulesResponseBody(name='body'),
}

/**
 * @summary 查看数据集成报警规则
 *
 * @param request ListDIAlarmRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDIAlarmRulesResponse
 */
async function listDIAlarmRulesWithOptions(request: ListDIAlarmRulesRequest, runtime: Util.RuntimeOptions): ListDIAlarmRulesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDIAlarmRules',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看数据集成报警规则
 *
 * @param request ListDIAlarmRulesRequest
 * @return ListDIAlarmRulesResponse
 */
async function listDIAlarmRules(request: ListDIAlarmRulesRequest): ListDIAlarmRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDIAlarmRulesWithOptions(request, runtime);
}

model ListDIJobEventsRequest {
  DIJobId?: long(name='DIJobId', example='11588'),
  endTime?: long(name='EndTime', description='This parameter is required.', example='1717971005'),
  eventType?: string(name='EventType', description='This parameter is required.', example='Alarm'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  startTime?: long(name='StartTime', description='This parameter is required.', example='1716971005'),
}

model ListDIJobEventsResponseBody = {
  pagingInfo?: {
    DIJobEvent?: [ 
      {
        action?: string(name='Action', example='Ignore'),
        channels?: string(name='Channels', example='Phone'),
        createTime?: string(name='CreateTime', example='1663573162'),
        detail?: string(name='Detail'),
        dstSql?: string(name='DstSql', example='alter table table2 ***'),
        dstTable?: string(name='DstTable', example='table2'),
        failoverMessage?: string(name='FailoverMessage', example='2024-05-29 15:11:31,377 [main] INFO com.*.**.di.core.metrics.:21 []  {****} 
2024-05-29 15:11:31,384 [main] INFO *.aliyun.*.di.*.*.metrics.*:27 [] - Open MarioDiReporter 
2024-05-29 15:11:33,248 [flink-akka.*.*-dispatcher-17] INFO'),
        id?: string(name='Id', example='1'),
        severity?: string(name='Severity', example='Warning'),
        srcSql?: string(name='SrcSql', example='alter table table1 ***'),
        srcTable?: string(name='SrcTable', example='table1'),
        status?: string(name='Status', example='Success'),
        type?: string(name='Type', example='Delay'),
      }
    ](name='DIJobEvent'),
    pageNumber?: long(name='PageNumber', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='2524'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='645F6D68-9C29-5961-80B1-BDD4B794C22D'),
}

model ListDIJobEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIJobEventsResponseBody(name='body'),
}

/**
 * @summary 获取数据集成任务事件
 *
 * @param request ListDIJobEventsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDIJobEventsResponse
 */
async function listDIJobEventsWithOptions(request: ListDIJobEventsRequest, runtime: Util.RuntimeOptions): ListDIJobEventsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDIJobEvents',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据集成任务事件
 *
 * @param request ListDIJobEventsRequest
 * @return ListDIJobEventsResponse
 */
async function listDIJobEvents(request: ListDIJobEventsRequest): ListDIJobEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDIJobEventsWithOptions(request, runtime);
}

model ListDIJobMetricsRequest {
  DIJobId?: long(name='DIJobId', example='11265'),
  endTime?: long(name='EndTime', description='This parameter is required.', example='1712205941'),
  metricName?: [ string ](name='MetricName', description='This parameter is required.'),
  startTime?: long(name='StartTime', description='This parameter is required.', example='1586509407'),
}

model ListDIJobMetricsShrinkRequest {
  DIJobId?: long(name='DIJobId', example='11265'),
  endTime?: long(name='EndTime', description='This parameter is required.', example='1712205941'),
  metricNameShrink?: string(name='MetricName', description='This parameter is required.'),
  startTime?: long(name='StartTime', description='This parameter is required.', example='1586509407'),
}

model ListDIJobMetricsResponseBody = {
  pagingInfo?: {
    jobMetrics?: [ 
      {
        name?: string(name='Name', example='JobDelay'),
        seriesList?: [ 
          {
            time?: long(name='Time', example='1716881141'),
            value?: double(name='Value', example='10'),
          }
        ](name='SeriesList'),
      }
    ](name='JobMetrics'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='691CA452-D37A-4ED0-9441'),
}

model ListDIJobMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIJobMetricsResponseBody(name='body'),
}

/**
 * @summary 获取数据集成任务指标
 *
 * @param tmpReq ListDIJobMetricsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDIJobMetricsResponse
 */
async function listDIJobMetricsWithOptions(tmpReq: ListDIJobMetricsRequest, runtime: Util.RuntimeOptions): ListDIJobMetricsResponse {
  Util.validateModel(tmpReq);
  var request = new ListDIJobMetricsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.metricName)) {
    request.metricNameShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.metricName, 'MetricName', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDIJobMetrics',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据集成任务指标
 *
 * @param request ListDIJobMetricsRequest
 * @return ListDIJobMetricsResponse
 */
async function listDIJobMetrics(request: ListDIJobMetricsRequest): ListDIJobMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDIJobMetricsWithOptions(request, runtime);
}

model ListDIJobRunDetailsRequest {
  DIJobId?: long(name='DIJobId', description='This parameter is required.', example='11265'),
  instanceId?: long(name='InstanceId', example='1234'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  sourceDataSourceName?: string(name='SourceDataSourceName', example='ds_name'),
  sourceDatabaseName?: string(name='SourceDatabaseName', example='db_name'),
  sourceSchemaName?: string(name='SourceSchemaName', example='schema_name'),
  sourceTableName?: string(name='SourceTableName', example='table_name'),
}

model ListDIJobRunDetailsResponseBody = {
  pagingInfo?: {
    jobRunInfos?: [ 
      {
        destinationDatabaseName?: string(name='DestinationDatabaseName', example='dst_db'),
        destinationDatasourceName?: string(name='DestinationDatasourceName', example='dst_name'),
        destinationSchemaName?: string(name='DestinationSchemaName', example='dst_schema'),
        destinationTableName?: string(name='DestinationTableName', example='dst_name'),
        fullMigrationErrorMessage?: string(name='FullMigrationErrorMessage', example='sync table t1 fail.'),
        fullMigrationStatus?: string(name='FullMigrationStatus', example='Finished'),
        offlineErrorRecords?: long(name='OfflineErrorRecords', example='0'),
        offlineTotalBytes?: long(name='OfflineTotalBytes', example='100'),
        offlineTotalRecords?: long(name='OfflineTotalRecords', example='10'),
        realtimeMigrationErrorMessage?: string(name='RealtimeMigrationErrorMessage', example='sync table t1 fail.'),
        realtimeMigrationStatus?: string(name='RealtimeMigrationStatus', example='Running'),
        sourceDatabaseName?: string(name='SourceDatabaseName', example='db_name'),
        sourceDatasourceName?: string(name='SourceDatasourceName', example='ds_name'),
        sourceSchemaName?: string(name='SourceSchemaName', example='schema_name'),
        sourceTableName?: string(name='SourceTableName', example='table_name'),
        structureMigrationErrorMessage?: string(name='StructureMigrationErrorMessage', example='create table t1 fail.'),
        structureMigrationStatus?: string(name='StructureMigrationStatus', example='Finished'),
      }
    ](name='JobRunInfos'),
    pageNumber?: string(name='PageNumber', example='1'),
    pageSize?: string(name='PageSize', example='10'),
    totalCount?: string(name='TotalCount', example='131'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='691CA452-D37A-4ED0-9441'),
}

model ListDIJobRunDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIJobRunDetailsResponseBody(name='body'),
}

/**
 * @summary 获取数据集成运行信息
 *
 * @param request ListDIJobRunDetailsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDIJobRunDetailsResponse
 */
async function listDIJobRunDetailsWithOptions(request: ListDIJobRunDetailsRequest, runtime: Util.RuntimeOptions): ListDIJobRunDetailsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDIJobRunDetails',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据集成运行信息
 *
 * @param request ListDIJobRunDetailsRequest
 * @return ListDIJobRunDetailsResponse
 */
async function listDIJobRunDetails(request: ListDIJobRunDetailsRequest): ListDIJobRunDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDIJobRunDetailsWithOptions(request, runtime);
}

model ListDIJobsRequest {
  destinationDataSourceType?: string(name='DestinationDataSourceType', description='The destination type. If you do not configure this parameter, no limits are imposed on the tasks.', example='Hologres'),
  migrationType?: string(name='MigrationType', description='The synchronization type. Valid values:

*   FullAndRealtimeIncremental: one-time full synchronization and real-time incremental synchronization
*   RealtimeIncremental: real-time incremental synchronization
*   Full: full synchronization
*   OfflineIncremental: batch incremental synchronization
*   FullAndOfflineIncremental: one-time full synchronization and batch incremental synchronization', example='FullAndRealtimeIncremental'),
  name?: string(name='Name', description='The name of the export task.

The name of each export task must be unique. You must make sure that the names of the export tasks in the current workspace are unique.', example='test_export_01'),
  pageNumber?: long(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='1967'),
  sourceDataSourceType?: string(name='SourceDataSourceType', description='The source type. If you do not configure this parameter, no limits are imposed on the tasks.', example='MySQL'),
}

model ListDIJobsResponseBody = {
  pagingInfo?: {
    DIJobs?: [ 
      {
        DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='32599'),
        destinationDataSourceType?: string(name='DestinationDataSourceType', description='The destination type. Valid values: Hologres and Hive.', example='Hologres'),
        jobName?: string(name='JobName', description='The name of the synchronization task.', example='mysql_to_holo_sync_35197'),
        jobStatus?: string(name='JobStatus', description='The status of the synchronization task. Valid values:

*   Finished
*   Initialized
*   Stopped
*   Failed
*   Running
*   Stopping', example='Running'),
        migrationType?: string(name='MigrationType', description='The synchronization type. Valid values:

*   FullAndRealtimeIncremental: one-time full synchronization and real-time incremental synchronization
*   RealtimeIncremental: real-time incremental synchronization
*   Full: full synchronization
*   OfflineIncremental: batch incremental synchronization
*   FullAndOfflineIncremental: one-time full synchronization and batch incremental synchronization', example='FullAndRealtimeIncremental'),
        projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace to which the synchronization task belongs.', example='26442'),
        sourceDataSourceType?: string(name='SourceDataSourceType', description='The source type. The value MySQL is returned.', example='Mysql'),
      }
    ](name='DIJobs', description='The synchronization tasks returned.'),
    pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='12'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7263E4AC-9D2E-5B29-B8AF-7C5012E92A41'),
}

model ListDIJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIJobsResponseBody(name='body'),
}

/**
 * @summary Queries a list of synchronization tasks.
 *
 * @param request ListDIJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDIJobsResponse
 */
async function listDIJobsWithOptions(request: ListDIJobsRequest, runtime: Util.RuntimeOptions): ListDIJobsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDIJobs',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of synchronization tasks.
 *
 * @param request ListDIJobsRequest
 * @return ListDIJobsResponse
 */
async function listDIJobs(request: ListDIJobsRequest): ListDIJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDIJobsWithOptions(request, runtime);
}

model ListDataQualityEvaluationTaskInstancesRequest {
  bizdateFrom?: string(name='BizdateFrom', example='2024-04-01'),
  bizdateTo?: string(name='BizdateTo', example='2024-05-01'),
  createTimeFrom?: long(name='CreateTimeFrom', example='1710239005403'),
  createTimeTo?: long(name='CreateTimeTo', example='1710239005403'),
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', example='10000'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='100'),
  tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
  triggerClient?: string(name='TriggerClient', example='CWF2'),
  triggerClientId?: string(name='TriggerClientId', example='1001'),
}

model ListDataQualityEvaluationTaskInstancesResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message'),
  pagingInfo?: {
    dataQualityEvaluationTaskInstances?: [ 
      {
        createTime?: long(name='CreateTime', example='1710239005403'),
        finishTime?: long(name='FinishTime', example='1710239005403'),
        id?: long(name='Id', example='10001'),
        parameters?: string(name='Parameters', example='{
  "bizdate": "20240517",
  "triggerTime": "1710239005403"
}'),
        projectId?: long(name='ProjectId', example='100'),
        status?: string(name='Status', example='Critical'),
        task?: {
          description?: string(name='Description', description='质量监控任务描述', example='This is a daily run data quality evaluation plan.'),
          hooks?: [ 
            {
              condition?: string(name='Condition', description='Hook触发条件', example='${severity} == "High" AND ${status} == "Critical"'),
              type?: string(name='Type', description='Hook类型', example='BlockTaskInstance'),
            }
          ](name='Hooks', description='数据质量校验任务实例生命周期中的回调设置，目前只支持一个阻塞调度任务的Hook'),
          id?: long(name='Id', description='代表资源一级ID的资源属性字段', example='10001'),
          name?: string(name='Name', description='质量监控任务名称

This parameter is required.'),
          notifications?: {
            condition?: string(name='Condition', description='通知触发条件', example='${severity} == "High"'),
            notifications?: [ 
              {
                nofiticationReceivers?: [ 
                  {
                    extension?: string(name='Extension', description='扩展信息，格式为 json，例如钉钉机器人支持 at 所有人', example='{"atAll":"true"}'),
                    receiverType?: string(name='ReceiverType', description='告警接收人类型', example='AliUid'),
                    receiverValues?: [ string ](name='ReceiverValues', description='告警接收人'),
                  }
                ](name='NofiticationReceivers', description='告警接收人设置'),
                notificationChannels?: [ 
                  {
                    channels?: [ string ](name='Channels', description='通知方式'),
                  }
                ](name='NotificationChannels', description='通知方式'),
              }
            ](name='Notifications', description='具体的消息通知设置'),
          }(name='Notifications', description='数据质量校验任务通知订阅配置'),
          projectId?: long(name='ProjectId', description='项目空间Id', example='100'),
          regionId?: string(name='RegionId', description='代表region的资源属性字段', example='cn-shanghai'),
          runtimeConf?: string(name='RuntimeConf', description='使用数据源时的一些设置，目前只支持指定EMR的yarn队列、采集EMR表时把SQL引擎指定为SPARK-SQL', example='{ "queue": "default", "sqlEngine": "SPARK-SQL" }'),
          target?: {
            databaseType?: string(name='DatabaseType', description='表所属的数据库类型', example='maxcompute'),
            partitionSpec?: string(name='PartitionSpec', description='分区表的分区设置', example='ds=$[yyyymmdd-1]'),
            tableGuid?: string(name='TableGuid', description='表在数据地图中的唯一ID', example='odps.unit_test.tb_unit_test'),
            type?: string(name='Type', description='监控对象类型', example='Table'),
          }(name='Target', description='参看 DataQualityTarget示例	数据质量校验任务的监控对象，参考 DataQualityTarget'),
          tenantId?: long(name='TenantId', description='租户Id', example='10'),
          trigger?: {
            taskIds?: [ long ](name='TaskIds', description='具体指明哪些调度节点的实例执行成功后可以触发'),
            type?: string(name='Type', description='何种事件可以触发质量校验任务执行', example='ByScheduledTaskInstance'),
          }(name='Trigger', description='数据质量校验任务的触发配置'),
        }(name='Task'),
        triggerContext?: string(name='TriggerContext', example='{
  "TriggerClientId": 10001,
  "TriggerClient": "CWF2"
}'),
      }
    ](name='DataQualityEvaluationTaskInstances'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='294'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='691CA452-D37A-4ED0-9441'),
}

model ListDataQualityEvaluationTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityEvaluationTaskInstancesResponseBody(name='body'),
}

/**
 * @summary ListDataQualityEvaluationTaskInstances
 *
 * @param request ListDataQualityEvaluationTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataQualityEvaluationTaskInstancesResponse
 */
async function listDataQualityEvaluationTaskInstancesWithOptions(request: ListDataQualityEvaluationTaskInstancesRequest, runtime: Util.RuntimeOptions): ListDataQualityEvaluationTaskInstancesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataQualityEvaluationTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary ListDataQualityEvaluationTaskInstances
 *
 * @param request ListDataQualityEvaluationTaskInstancesRequest
 * @return ListDataQualityEvaluationTaskInstancesResponse
 */
async function listDataQualityEvaluationTaskInstances(request: ListDataQualityEvaluationTaskInstancesRequest): ListDataQualityEvaluationTaskInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataQualityEvaluationTaskInstancesWithOptions(request, runtime);
}

model ListDataQualityEvaluationTasksRequest {
  name?: string(name='Name'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='100'),
  tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
}

model ListDataQualityEvaluationTasksResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message'),
  pagingInfo?: {
    dataQualityEvaluationTasks?: [ 
      {
        description?: string(name='Description', example='This is a daily run data quality evaluation plan'),
        hooks?: [ 
          {
            condition?: string(name='Condition', example='${severity} == "High" AND ${status} == "Critical"'),
            type?: string(name='Type', example='BlockTaskInstance'),
          }
        ](name='Hooks'),
        id?: long(name='Id', example='10001'),
        name?: string(name='Name'),
        notifications?: {
          condition?: string(name='Condition', example='${severity} == "High"'),
          notifications?: [ 
            {
              notificationChannels?: [ 
                {
                  channels?: [ string ](name='Channels'),
                }
              ](name='NotificationChannels'),
              notificationReceivers?: [ 
                {
                  extension?: string(name='Extension', example='{"atAll":"true"}'),
                  receiverType?: string(name='ReceiverType', example='AliUid'),
                  receiverValues?: [ string ](name='ReceiverValues'),
                }
              ](name='NotificationReceivers'),
            }
          ](name='Notifications'),
        }(name='Notifications'),
        projectId?: long(name='ProjectId', example='100'),
        runtimeConf?: string(name='RuntimeConf', example='{ "queue": "default", "sqlEngine": "SPARK-SQL" }'),
        target?: {
          databaseType?: string(name='DatabaseType', example='maxcompute'),
          partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
          tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
          type?: string(name='Type', example='Table'),
        }(name='Target'),
        tenantId?: long(name='TenantId', example='10'),
        trigger?: {
          taskIds?: [ long ](name='TaskIds'),
          type?: string(name='Type', example='ByScheduledTaskInstance'),
        }(name='Trigger'),
      }
    ](name='DataQualityEvaluationTasks'),
    pageNumber?: string(name='PageNumber', example='1'),
    pageSize?: string(name='PageSize', example='10'),
    totalCount?: string(name='TotalCount', example='131'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='691CA452-D37A-4ED0-9441'),
}

model ListDataQualityEvaluationTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityEvaluationTasksResponseBody(name='body'),
}

/**
 * @param request ListDataQualityEvaluationTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataQualityEvaluationTasksResponse
 */
async function listDataQualityEvaluationTasksWithOptions(request: ListDataQualityEvaluationTasksRequest, runtime: Util.RuntimeOptions): ListDataQualityEvaluationTasksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataQualityEvaluationTasks',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request ListDataQualityEvaluationTasksRequest
 * @return ListDataQualityEvaluationTasksResponse
 */
async function listDataQualityEvaluationTasks(request: ListDataQualityEvaluationTasksRequest): ListDataQualityEvaluationTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataQualityEvaluationTasksWithOptions(request, runtime);
}

model ListDataQualityResultsRequest {
  bizdateFrom?: string(name='BizdateFrom', example='2024-05-01'),
  bizdateTo?: string(name='BizdateTo', example='2024-05-04'),
  createTimeFrom?: long(name='CreateTimeFrom', example='1710239005403'),
  createTimeTo?: long(name='CreateTimeTo', example='1710239005403'),
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', example='200001'),
  dataQualityEvaluationTaskInstanceId?: long(name='DataQualityEvaluationTaskInstanceId', example='10001'),
  dataQualityRuleId?: long(name='DataQualityRuleId', example='100001'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='100'),
}

model ListDataQualityResultsResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message'),
  pagingInfo?: {
    dataQualityResults?: [ 
      {
        createTime?: long(name='CreateTime', example='1708284916414'),
        details?: [ 
          {
            checkedValue?: string(name='CheckedValue', example='100.0'),
            referencedValue?: string(name='ReferencedValue', example='0.0'),
            status?: string(name='Status', description='*   ERROR
*   PASSED
*   WARNED
*   CRITICAL', example='PASSED'),
          }
        ](name='Details'),
        id?: long(name='Id', example='16033'),
        rule?: {
          checkingConfig?: {
            referencedSamplesFilter?: string(name='ReferencedSamplesFilter', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
            thresholds?: {
              critical?: {
                operator?: string(name='Operator', description='*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
                value?: string(name='Value', example='100.0'),
              }(name='Critical'),
              expected?: {
                operator?: string(name='Operator', description='*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
                value?: string(name='Value', example='100.0'),
              }(name='Expected'),
              warned?: {
                operator?: string(name='Operator', description='*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
                value?: string(name='Value', example='100.0'),
              }(name='Warned'),
            }(name='Thresholds'),
            type?: string(name='Type', description='*   FIXED
*   FLUCTATION
*   AUTO
*   AVERAGE
*   VARIANCE
*   FLUCTATION_DISCREATE', example='FIXED'),
          }(name='CheckingConfig'),
          description?: string(name='Description', example='this is a odps _sql task'),
          enabled?: boolean(name='Enabled', example='true'),
          errorHandlers?: [ 
            {
              errorDataFilter?: string(name='ErrorDataFilter', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
              type?: string(name='Type', description='*   SAVE_ERROR_DATA', example='SAVE_ERROR_DATA'),
            }
          ](name='ErrorHandlers'),
          id?: long(name='Id', example='100001'),
          name?: string(name='Name'),
          projectId?: long(name='ProjectId', example='100'),
          samplingConfig?: {
            metric?: string(name='Metric', description='*
*
*
*
*
*
*
*
*
*
*
*
*
*', example='COUNT'),
            metricParameters?: string(name='MetricParameters', example='{ "columns": [ "id", "name" ] }'),
            samplingFilter?: string(name='SamplingFilter', example='id IS NULL'),
            settingConfig?: string(name='SettingConfig', example='SET odps.sql.udf.timeout=600s;'),
          }(name='SamplingConfig'),
          severity?: string(name='Severity', description='*   HIGH
*   NORMAL', example='NORMAL'),
          target?: {
            databaseType?: string(name='DatabaseType', description='*   MAX_COMPUTE
*   EMR
*   CDH
*   HOLOGRES
*   ANALYTICDB_FOR_POSTGRESQL
*   ANALYTICDB_FOR_MYSQL
*   STAR_ROCKS', example='MAX_COMPUTE'),
            partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
            tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
            type?: string(name='Type', description='*   TABLE', example='TABLE'),
          }(name='Target'),
          templateCode?: string(name='TemplateCode', example='system::user_defined'),
          tenantId?: long(name='TenantId', example='1'),
        }(name='Rule'),
        sample?: string(name='Sample', example='[
  {
    "gender": "male",
    "_count": 100
  }, {
    "gender": "female",
    "_count": 100
  }
]'),
        status?: string(name='Status', description='*   RUNNING
*   ERROR
*   PASSED
*   WARNED
*   CRITICAL', example='PASSED'),
        taskInstanceId?: long(name='TaskInstanceId', example='200001'),
      }
    ](name='DataQualityResults'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='219'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='691CA452-D37A-4ED0-9441'),
}

model ListDataQualityResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityResultsResponseBody(name='body'),
}

/**
 * @param request ListDataQualityResultsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataQualityResultsResponse
 */
async function listDataQualityResultsWithOptions(request: ListDataQualityResultsRequest, runtime: Util.RuntimeOptions): ListDataQualityResultsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataQualityResults',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request ListDataQualityResultsRequest
 * @return ListDataQualityResultsResponse
 */
async function listDataQualityResults(request: ListDataQualityResultsRequest): ListDataQualityResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataQualityResultsWithOptions(request, runtime);
}

model ListDataQualityRulesRequest {
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', example='10000'),
  name?: string(name='Name', example='unit_test'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='10002'),
  tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
}

model ListDataQualityRulesResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message'),
  pagingInfo?: {
    dataQualityRules?: [ 
      {
        checkingConfig?: {
          referencedSamplesFilter?: string(name='ReferencedSamplesFilter', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
          thresholds?: {
            critical?: {
              operator?: string(name='Operator', example='>'),
              value?: string(name='Value', example='100.0'),
            }(name='Critical'),
            expected?: {
              operator?: string(name='Operator', example='>'),
              value?: string(name='Value', example='100.0'),
            }(name='Expected'),
            warned?: {
              operator?: string(name='Operator', example='>'),
              value?: string(name='Value', example='100.0'),
            }(name='Warned'),
          }(name='Thresholds'),
          type?: string(name='Type', example='Fixed'),
        }(name='CheckingConfig'),
        description?: string(name='Description', example='this is a odps _sql task'),
        enabled?: boolean(name='Enabled', example='true'),
        errorHandlers?: [ 
          {
            errorDataFilter?: string(name='ErrorDataFilter', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
            type?: string(name='Type', example='SaveErrorData'),
          }
        ](name='ErrorHandlers'),
        id?: long(name='Id', example='22130'),
        name?: string(name='Name'),
        projectId?: long(name='ProjectId', example='100001'),
        samplingConfig?: {
          metric?: string(name='Metric', example='Max'),
          metricParameters?: string(name='MetricParameters', example='{ "Columns": [ "id", "name" ] , "SQL": "select count(1) from table;"}'),
          samplingFilter?: string(name='SamplingFilter', example='id IS NULL'),
          settingConfig?: string(name='SettingConfig', example='SET odps.sql.udf.timeout=600s; 
SET odps.sql.python.version=cp27;'),
        }(name='SamplingConfig'),
        severity?: string(name='Severity', example='High'),
        target?: {
          databaseType?: string(name='DatabaseType', example='maxcompute'),
          partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
          tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
          type?: string(name='Type', example='Table'),
        }(name='Target'),
        templateCode?: string(name='TemplateCode', example='system::user_defined'),
        tenantId?: long(name='TenantId', example='100001'),
      }
    ](name='DataQualityRules'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='294'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='691CA452-D37A-4ED0-9441'),
}

model ListDataQualityRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityRulesResponseBody(name='body'),
}

/**
 * @summary 质量监控规则分页查询
 *
 * @param request ListDataQualityRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataQualityRulesResponse
 */
async function listDataQualityRulesWithOptions(request: ListDataQualityRulesRequest, runtime: Util.RuntimeOptions): ListDataQualityRulesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataQualityRules',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 质量监控规则分页查询
 *
 * @param request ListDataQualityRulesRequest
 * @return ListDataQualityRulesResponse
 */
async function listDataQualityRules(request: ListDataQualityRulesRequest): ListDataQualityRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataQualityRulesWithOptions(request, runtime);
}

model ListDataSourceSharedRulesRequest {
  dataSourceId?: long(name='DataSourceId', description='This parameter is required.', example='1'),
  targetProjectId?: long(name='TargetProjectId', example='1'),
}

model ListDataSourceSharedRulesResponseBody = {
  dataSourceSharedRules?: [ 
    {
      createTime?: long(name='CreateTime', example='1724379762000'),
      createUser?: string(name='CreateUser', example='1'),
      dataSourceId?: long(name='DataSourceId', example='1'),
      envType?: string(name='EnvType', example='Dev'),
      id?: long(name='Id', example='1'),
      sharedDataSourceName?: string(name='SharedDataSourceName', example='targetProject.datasource'),
      sharedUser?: string(name='SharedUser', example='1'),
      sourceProjectId?: long(name='SourceProjectId', example='1'),
      targetProjectId?: long(name='TargetProjectId', example='1'),
    }
  ](name='DataSourceSharedRules'),
  requestId?: string(name='RequestId', description='Id of the request', example='0000-ABCD-EFG****'),
}

model ListDataSourceSharedRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourceSharedRulesResponseBody(name='body'),
}

/**
 * @summary 验证用
 *
 * @param request ListDataSourceSharedRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataSourceSharedRulesResponse
 */
async function listDataSourceSharedRulesWithOptions(request: ListDataSourceSharedRulesRequest, runtime: Util.RuntimeOptions): ListDataSourceSharedRulesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataSourceSharedRules',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 验证用
 *
 * @param request ListDataSourceSharedRulesRequest
 * @return ListDataSourceSharedRulesResponse
 */
async function listDataSourceSharedRules(request: ListDataSourceSharedRulesRequest): ListDataSourceSharedRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataSourceSharedRulesWithOptions(request, runtime);
}

model ListDataSourcesRequest {
  envType?: string(name='EnvType', example='Prod'),
  name?: string(name='Name', example='test'),
  order?: string(name='Order', example='Asc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='17820'),
  sortBy?: string(name='SortBy', example='Id'),
  tags?: string(name='Tags', example='["tag1", "tag2", "tag3"]'),
  types?: [ string ](name='Types'),
}

model ListDataSourcesShrinkRequest {
  envType?: string(name='EnvType', example='Prod'),
  name?: string(name='Name', example='test'),
  order?: string(name='Order', example='Asc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='17820'),
  sortBy?: string(name='SortBy', example='Id'),
  tags?: string(name='Tags', example='["tag1", "tag2", "tag3"]'),
  typesShrink?: string(name='Types'),
}

model ListDataSourcesResponseBody = {
  pagingInfo?: {
    dataSources?: [ 
      {
        dataSource?: [ 
          {
            connectionProperties?: any(name='ConnectionProperties', example='{
	"envType": "Prod",
	"regionId": "cn-beijing",
    "instanceId": "hgprecn-cn-x0r3oun4k001",
    "database": "testdb",
    "securityProtocol": "authTypeNone",
    "authType": "Executor",
    "authIdentity": "1107550004253538"
}'),
            connectionPropertiesMode?: string(name='ConnectionPropertiesMode', example='UrlMode'),
            createTime?: long(name='CreateTime', example='1648711113000'),
            createUser?: string(name='CreateUser', example='1624387842781448'),
            description?: string(name='Description', example='test'),
            id?: long(name='Id', example='16035'),
            modifyTime?: long(name='ModifyTime', example='1648711113000'),
            modifyUser?: string(name='ModifyUser', example='1624387842781448'),
            qualifiedName?: string(name='QualifiedName', example='1648711121000:cn-beijing:odps:yongxunQA_beijing_standard'),
          }
        ](name='DataSource'),
        name?: string(name='Name', example='test'),
        type?: string(name='Type', example='mysql'),
      }
    ](name='DataSources'),
    pageNumber?: long(name='PageNumber', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='131'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='7BE1433F-6D55-5D86-9344-CA6F7DD19B13'),
}

model ListDataSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourcesResponseBody(name='body'),
}

/**
 * @summary 验证用
 *
 * @param tmpReq ListDataSourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataSourcesResponse
 */
async function listDataSourcesWithOptions(tmpReq: ListDataSourcesRequest, runtime: Util.RuntimeOptions): ListDataSourcesResponse {
  Util.validateModel(tmpReq);
  var request = new ListDataSourcesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.types)) {
    request.typesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.types, 'Types', 'simple');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataSources',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 验证用
 *
 * @param request ListDataSourcesRequest
 * @return ListDataSourcesResponse
 */
async function listDataSources(request: ListDataSourcesRequest): ListDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataSourcesWithOptions(request, runtime);
}

model ListDeploymentsRequest {
  creator?: string(name='Creator', description='The ID of the user who creates the processes. This parameter specifies a filter condition.', example='110755000425XXXX'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  status?: string(name='Status', description='The status of the processes. This parameter specifies a filter condition.

Valid values:

*   INIT
*   RUNNING
*   SUCCESS
*   FAIL
*   TERMINATION
*   CANCEL', example='RUNNING'),
}

model ListDeploymentsResponseBody = {
  pagingInfo?: {
    deployments?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the process was created. This value is a UNIX timestamp.', example='1702736654000'),
        creator?: string(name='Creator', description='The ID of the user who creates the process.', example='110755000425XXXX'),
        id?: string(name='Id', description='The process ID.', example='ddf354a5-03df-48fc-94c1-cc973f79XXXX'),
        message?: string(name='Message', description='The error message returned if the process fails.'),
        modifyTime?: long(name='ModifyTime', description='The time when the process was last modified. This value is a UNIX timestamp.', example='1702736654000'),
        projectId?: string(name='ProjectId', description='The DataWorks workspace ID.', example='44683'),
        stages?: [ 
          {
            code?: string(name='Code', description='The code of the stage.', example='DEV_CHECK'),
            description?: string(name='Description', description='The description of the stage.'),
            detail?: map[string]any(name='Detail', description='The additional information about the stage.'),
            message?: string(name='Message', description='The error message returned during the stage.'),
            name?: string(name='Name', description='The name of the stage.'),
            status?: string(name='Status', description='The status of the stage.

Valid values:

*   INIT
*   RUNNING
*   SUCCESS
*   FAIL
*   TERMINATION
*   CANCEL', example='RUNNING'),
            step?: int32(name='Step', description='The step number of the stage.', example='1'),
            type?: string(name='Type', description='The type of the stage. This parameter indicates the operation type in the stage.

Valid values:

*   DEPLOY
*   CHECK
*   OFFLINE.
*   BUILD
*   DELETE', example='CHECK'),
          }
        ](name='Stages', description='The stages of the process.'),
        status?: string(name='Status', description='The status of the process.

Valid values:

*   INIT
*   RUNNING
*   FAIL
*   SUCCESS
*   TERMINATION
*   CANCEL', example='RUNNING'),
      }
    ](name='Deployments', description='The processes.'),
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='2524'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7C352CB7-CD88-50CF-9D0D-E81BDF02XXXX'),
}

model ListDeploymentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeploymentsResponseBody(name='body'),
}

/**
 * @summary Queries a list of processes that are used to deploy or undeploy entities in DataStudio. You can also specify filter conditions to query specific processes.
 *
 * @param request ListDeploymentsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDeploymentsResponse
 */
async function listDeploymentsWithOptions(request: ListDeploymentsRequest, runtime: Util.RuntimeOptions): ListDeploymentsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDeployments',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of processes that are used to deploy or undeploy entities in DataStudio. You can also specify filter conditions to query specific processes.
 *
 * @param request ListDeploymentsRequest
 * @return ListDeploymentsResponse
 */
async function listDeployments(request: ListDeploymentsRequest): ListDeploymentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeploymentsWithOptions(request, runtime);
}

model ListFunctionsRequest {
  owner?: string(name='Owner', description='The ID of the owner of the UDF. This parameter specifies a filter condition.', example='110755000425XXXX'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1. Minimum value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='12345'),
  type?: string(name='Type', description='The UDF type. This parameter specifies a filter condition.

Valid values:

*   MATH: mathematical operation function
*   AGGREGATE: aggregate function
*   STRING: string processing function
*   DATE: date function
*   ANALYTIC: window function
*   OTHER: others', example='MATH'),
}

model ListFunctionsResponseBody = {
  pagingInfo?: {
    functions?: [ 
      {
        armResource?: string(name='ArmResource', description='The file resources in an Advanced RISC Machines (ARM) cluster.', example='xxx.jar,yyy.jar'),
        className?: string(name='ClassName', description='The fully qualified class name of the UDF.', example='com.demo.Main'),
        commandDescription?: string(name='CommandDescription', description='The description of the command.', example='testUdf(xx,yy)'),
        createTime?: long(name='CreateTime', description='The time when the UDF was created. This value is a UNIX timestamp.', example='1655953028000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='odps_first'),
          type?: string(name='Type', description='The type of the data source.', example='odps'),
        }(name='DataSource', description='The data source information about the UDF.'),
        databaseName?: string(name='DatabaseName', description='The name of the database. This parameter is returned for E-MapReduce (EMR) functions.', example='odps_first'),
        description?: string(name='Description', description='The overall description of the UDF.'),
        embeddedCode?: string(name='EmbeddedCode', description='The code of the embedded UDF.', example='print(\\\\"hello,world!\\\\")'),
        embeddedCodeType?: string(name='EmbeddedCodeType', description='The type of the nested code.

Valid values:

*   Python2
*   Python3
*   Java8
*   Java11
*   Java17', example='Python2'),
        embeddedResourceType?: string(name='EmbeddedResourceType', description='The type of the nested resource.

Valid values:

*   File: general resources
*   Embedded: embedded resources', example='File'),
        exampleDescription?: string(name='ExampleDescription', description='The description of the example.'),
        fileResource?: string(name='FileResource', description='The files resources.', example='xxx.jar,yyy.jar'),
        id?: string(name='Id', description='The ID of the UDF.', example='580667964888595XXXX'),
        modifyTime?: long(name='ModifyTime', description='The time when the UDF was last modified. This value is a UNIX timestamp.', example='1655953028000'),
        name?: string(name='Name', description='The name of the UDF.'),
        owner?: string(name='Owner', description='The owner of the UDF.', example='110755000425XXXX'),
        parameterDescription?: string(name='ParameterDescription', description='The description of the parameter.'),
        projectId?: string(name='ProjectId', description='The ID of the workspace to which the UDF belongs.', example='307XXX'),
        returnValueDescription?: string(name='ReturnValueDescription', description='The description of the return value.'),
        runtimeResource?: {
          resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group used when you run the UDF.', example='S_resgrop_xxx'),
        }(name='RuntimeResource', description='The information about the resource group used when you run the UDF.'),
        script?: {
          id?: string(name='Id', description='The script ID.', example='652567824470354XXXX'),
          path?: string(name='Path', description='The script path.'),
          runtime?: {
            command?: string(name='Command', description='The command.', example='ODPS_FUNCTION'),
          }(name='Runtime', description='The runtime.'),
        }(name='Script', description='The script information about the UDF.'),
        type?: string(name='Type', description='The UDF type.

Valid values:

*   MATH: mathematical operation function
*   AGGREGATE: aggregate function
*   STRING: string processing function
*   DATE: date function
*   ANALYTIC: window function
*   OTHER: others', example='MATH'),
      }
    ](name='Functions', description='The UDFs.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='294'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='89FB2BF0-EB00-5D03-9C34-05931001XXXX'),
}

model ListFunctionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFunctionsResponseBody(name='body'),
}

/**
 * @summary Queries a list of user-defined functions (UDFs) in DataStudio. You can also specify filter conditions to query specific UDFs.
 *
 * @param request ListFunctionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFunctionsResponse
 */
async function listFunctionsWithOptions(request: ListFunctionsRequest, runtime: Util.RuntimeOptions): ListFunctionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFunctions',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of user-defined functions (UDFs) in DataStudio. You can also specify filter conditions to query specific UDFs.
 *
 * @param request ListFunctionsRequest
 * @return ListFunctionsResponse
 */
async function listFunctions(request: ListFunctionsRequest): ListFunctionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFunctionsWithOptions(request, runtime);
}

model ListNetworksRequest {
  resourceGroupId?: string(name='ResourceGroupId', description='This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
}

model ListNetworksResponseBody = {
  networkList?: [ 
    {
      createTime?: long(name='CreateTime', example='1727055811000'),
      createUser?: string(name='CreateUser', example='11075500042XXXXX'),
      id?: long(name='Id', example='1000'),
      resourceGroupId?: string(name='ResourceGroupId', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
      securityGroupId?: string(name='SecurityGroupId', example='sg-2ze13vamugr7jenXXXXX'),
      status?: string(name='Status', example='Running'),
      vpcId?: string(name='VpcId', example='vpc-m2et4f3oc8msfbccXXXXX'),
      vswitchId?: string(name='VswitchId', example='vsw-uf8usrhs7hjd9amsXXXXX'),
    }
  ](name='NetworkList'),
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', example='true'),
}

model ListNetworksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNetworksResponseBody(name='body'),
}

/**
 * @summary 获取通用资源组网络资源列表。
 *
 * @param request ListNetworksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNetworksResponse
 */
async function listNetworksWithOptions(request: ListNetworksRequest, runtime: Util.RuntimeOptions): ListNetworksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNetworks',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取通用资源组网络资源列表。
 *
 * @param request ListNetworksRequest
 * @return ListNetworksResponse
 */
async function listNetworks(request: ListNetworksRequest): ListNetworksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNetworksWithOptions(request, runtime);
}

model ListNodeDependenciesRequest {
  id?: string(name='Id', description='The ID of the node.

This parameter is required.', example='860438872620113XXXX'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10001'),
}

model ListNodeDependenciesResponseBody = {
  pagingInfo?: {
    nodes?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the node was created. This value is a UNIX timestamp.', example='1724505917000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='odps_first'),
          type?: string(name='Type', description='The type of the data source.', example='odps'),
        }(name='DataSource', description='The information about the data source.'),
        description?: string(name='Description', description='The description of the node.'),
        id?: string(name='Id', description='The ID of the node.', example='723932906364267XXXX'),
        inputs?: {
          nodeOutputs?: [ 
            {
              data?: string(name='Data', description='The node output.', example='860438872620113XXXX'),
            }
          ](name='NodeOutputs', description='The node outputs.'),
          tables?: [ 
            {
              guid?: string(name='Guid', description='The table ID.', example='odps.autotest.test_output_table_1'),
            }
          ](name='Tables', description='The tables.'),
          variables?: [ 
            {
              artifactType?: string(name='ArtifactType', description='The artifact type.', example='Variable'),
              id?: string(name='Id', description='The variable ID.', example='543218872620113XXXX'),
              name?: string(name='Name', description='The name of the variable.', example='input'),
              node?: {
                output?: string(name='Output', description='The output of the node.', example='860438872620113XXXX'),
              }(name='Node', description='The node to which the variable belongs.'),
              scope?: string(name='Scope', description='The scope of the variable.

Valid values:

*   NodeParameter
*   NodeContext
*   Workflow
*   Workspace', example='NodeParameter'),
              type?: string(name='Type', description='The type of the variable.

Valid values:

*   NoKvVariableExpression
*   Constant
*   PassThrough
*   System
*   NodeOutput', example='Constant'),
              value?: string(name='Value', description='The value of the variable.', example='111'),
            }
          ](name='Variables', description='The variables.'),
        }(name='Inputs', description='The input of the node.'),
        modifyTime?: long(name='ModifyTime', description='The time when the node was last modified. This value is a UNIX timestamp.', example='1724505917000'),
        name?: string(name='Name', description='The name of the node.'),
        outputs?: {
          nodeOutputs?: [ 
            {
              data?: string(name='Data', description='The node output.', example='463497880880954XXXX'),
            }
          ](name='NodeOutputs', description='The node outputs.'),
          tables?: [ 
            {
              guid?: string(name='Guid', description='The table ID.', example='odps.autotest.test_output_table_1'),
            }
          ](name='Tables', description='The tables.'),
          variables?: [ 
            {
              artifactType?: string(name='ArtifactType', description='The artifact type.', example='Variable'),
              id?: string(name='Id', description='The variable ID.', example='543217824470354XXXX'),
              name?: string(name='Name', description='The name of the variable.', example='output'),
              node?: {
                output?: string(name='Output', description='The output of the node to which the variable belongs.', example='463497880880954XXXX'),
              }(name='Node', description='The node to which the variable belongs.'),
              scope?: string(name='Scope', description='The scope of the variable.

Valid values:

*   NodeParameter
*   NodeContext
*   Workflow
*   Workspace', example='NodeParameter'),
              type?: string(name='Type', description='The type of the variable.

Valid values:

*   NoKvVariableExpression
*   Constant
*   PassThrough
*   System
*   NodeOutput', example='Constant'),
              value?: string(name='Value', description='The value of the variable.', example='111'),
            }
          ](name='Variables', description='The variables.'),
        }(name='Outputs', description='The output of the node.'),
        owner?: string(name='Owner', description='The owner of the node.', example='110755000425XXXX'),
        projectId?: string(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='65133'),
        recurrence?: string(name='Recurrence', description='The scheduling type.

Valid values:

*   Normal: The node is scheduled as expected.
*   Pause: The node is paused, and the running of its descendant nodes is blocked.
*   Skip: The node is dry run. The system does not actually run the node but directly prompts that the node is successfully run. The running duration of the node is 0 seconds. In addition, the node does not occupy resources or block the running of its descendant nodes.', example='Normal'),
        runtimeResource?: {
          resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='S_res_group_XXXX_XXXX'),
        }(name='RuntimeResource', description='The information about the resource group.'),
        script?: {
          id?: string(name='Id', description='The script ID.', example='853573334108680XXXX'),
          path?: string(name='Path', description='The script path.', example='root/demo'),
          runtime?: {
            command?: string(name='Command', description='The command used to distinguish node types.', example='ODPS_SQL'),
          }(name='Runtime', description='The runtime.'),
        }(name='Script', description='The script information.'),
        strategy?: {
          instanceMode?: string(name='InstanceMode', description='The instance generation mode.', example='T+1'),
          rerunInterval?: int32(name='RerunInterval', description='The rerun interval after a failure. Unit: milliseconds.', example='180000'),
          rerunMode?: string(name='RerunMode', description='The rerun mode.', example='Allowed'),
          rerunTimes?: int32(name='RerunTimes', description='The number of reruns after a failure.', example='3'),
          timeout?: int32(name='Timeout', description='The timeout period. Unit: milliseconds.', example='0'),
        }(name='Strategy', description='The scheduling policy.'),
        tags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='null'),
            value?: string(name='Value', description='The tag value', example='null'),
          }
        ](name='Tags', description='The tags. This parameter is not in use.'),
        taskId?: string(name='TaskId', description='The scheduling task ID.', example='580667964888595XXXX'),
        trigger?: {
          cron?: string(name='Cron', description='The CRON expression for scheduling.', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', description='The end time of the validity period of the scheduling. The time is in the yyyy-MM-dd HH:mm:ss format.', example='9999-01-01 00:00:00'),
          id?: string(name='Id', description='The trigger ID.', example='543680677872062XXXX'),
          startTime?: string(name='StartTime', description='The start time of the validity period of the scheduling. The time is in the yyyy-MM-dd HH:mm:ss format.', example='1970-01-01 00:00:00'),
          timezone?: string(name='Timezone', description='The time zone.', example='Asia/Shanghai'),
          type?: string(name='Type', description='The type of the trigger.

Valid values:

*   Scheduler
*   Manual
*   Streaming', example='Scheduler'),
        }(name='Trigger', description='The trigger.'),
      }
    ](name='Nodes', description='The descendant nodes.'),
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='90'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='204EAF68-CCE3-5112-8DA0-E7A60F02XXXX'),
}

model ListNodeDependenciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodeDependenciesResponseBody(name='body'),
}

/**
 * @summary Queries a list of descendant nodes of a node in DataStudio.
 *
 * @param request ListNodeDependenciesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNodeDependenciesResponse
 */
async function listNodeDependenciesWithOptions(request: ListNodeDependenciesRequest, runtime: Util.RuntimeOptions): ListNodeDependenciesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeDependencies',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of descendant nodes of a node in DataStudio.
 *
 * @param request ListNodeDependenciesRequest
 * @return ListNodeDependenciesResponse
 */
async function listNodeDependencies(request: ListNodeDependenciesRequest): ListNodeDependenciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeDependenciesWithOptions(request, runtime);
}

model ListNodesRequest {
  containerId?: string(name='ContainerId', description='The container ID. This parameter specifies a filter condition.', example='860438872620113XXXX'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='12345'),
  recurrence?: string(name='Recurrence'),
  rerunMode?: string(name='RerunMode', description='The rerun mode. Valid values:

*   Allowed: The nodes can be rerun regardless of whether they are successfully run or fail to run.
*   FailureAllowed: The nodes can be rerun only after they fail to run.
*   Denied: The nodes cannot be rerun regardless of whether they are successfully run or fail to run.', example='Allowed'),
  scene?: string(name='Scene', description='The scene of nodes. This parameter specifies a filter condition.

Valid values:

*   DATAWORKS_PROJECT
*   MANUAL_WORKFLOW
*   MANUAL_NODE', example='DATAWORKS_PROJECT'),
}

model ListNodesResponseBody = {
  pagingInfo?: {
    nodes?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the node was created. This value is a UNIX timestamp.', example='1722910655000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='odps_first'),
          type?: string(name='Type', description='The type of the data source.', example='odps'),
        }(name='DataSource', description='The information about the data source.'),
        description?: string(name='Description', description='The description of the node.'),
        id?: string(name='Id', description='The ID of the node.', example='860438872620113XXXX'),
        inputs?: {
          nodeOutputs?: [ 
            {
              data?: string(name='Data', description='The node output.', example='623731286945488XXXX'),
            }
          ](name='NodeOutputs', description='The node outputs.'),
          tables?: [ 
            {
              guid?: string(name='Guid', description='The table ID.', example='odps.autotest.test_output_table_1'),
            }
          ](name='Tables', description='The tables.'),
          variables?: [ 
            {
              artifactType?: string(name='ArtifactType', description='The artifact type.', example='Variable'),
              id?: string(name='Id', description='The variable ID.', example='543211286945488XXXX'),
              name?: string(name='Name', description='The name of the variable.', example='input'),
              node?: {
                output?: string(name='Output', description='The output of the node.', example='623731286945488XXXX'),
              }(name='Node', description='The node to which the variable belongs.'),
              scope?: string(name='Scope', description='The scope of the variable.

Valid values:

*   WorkSpace
*   NodeParameter
*   NodeContext
*   Workflow', example='NodeParameter'),
              type?: string(name='Type', description='The type of the variable.

Valid values:

*   NoKvVariableExpression
*   Constant
*   PassThrough
*   System
*   NodeOutput', example='Constant'),
              value?: string(name='Value', description='The value of the variable.', example='222'),
            }
          ](name='Variables', description='The variables.'),
        }(name='Inputs', description='The input of the node.'),
        modifyTime?: long(name='ModifyTime', description='The time when the node was last modified. This value is a UNIX timestamp.', example='1722910655000'),
        name?: string(name='Name', description='The name of the node.', example='test'),
        outputs?: {
          nodeOutputs?: [ 
            {
              data?: string(name='Data', description='The node output.', example='860438872620113XXXX'),
            }
          ](name='NodeOutputs', description='The node outputs.'),
          tables?: [ 
            {
              guid?: string(name='Guid', description='The table ID.', example='odps.autotest.test_output_table_1'),
            }
          ](name='Tables', description='The tables.'),
          variables?: [ 
            {
              artifactType?: string(name='ArtifactType', description='The artifact type.', example='Variable'),
              id?: string(name='Id', description='The variable ID.', example='623731286945488XXXX'),
              name?: string(name='Name', description='The name of the variable.', example='output'),
              node?: {
                output?: string(name='Output', description='The output of the node.', example='860438872620113XXXX'),
              }(name='Node', description='The node to which the variable belongs.'),
              scope?: string(name='Scope', description='The scope of the variable.

Valid values:

*   NodeParameter
*   NodeContext
*   Workflow
*   Workspace', example='NodeParameter'),
              type?: string(name='Type', description='The type of the variable.

Valid values:

*   NoKvVariableExpression
*   Constant
*   PassThrough
*   System
*   NodeOutput', example='Constant'),
              value?: string(name='Value', description='The value of the variable.', example='111'),
            }
          ](name='Variables', description='The variables.'),
        }(name='Outputs', description='The output of the node.'),
        owner?: string(name='Owner', description='The owner of the node.', example='110755000425XXXX'),
        projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.', example='33233'),
        recurrence?: string(name='Recurrence', description='The scheduling type.

Valid values:

*   Normal: The node is scheduled as expected.
*   Pause: The node is paused, and the running of its descendant nodes is blocked.
*   Skip: The node is dry run. The system does not actually run the node but directly prompts that the node is successfully run. The running duration of the node is 0 seconds. In addition, the node does not occupy resources or block the running of its descendant nodes.', example='Normal'),
        runtimeResource?: {
          resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='S_resgrop_xxx'),
        }(name='RuntimeResource', description='The information about the resource group.'),
        script?: {
          id?: string(name='Id', description='The script ID.', example='853573334108680XXXX'),
          path?: string(name='Path', description='The script path.', example='root/demo'),
          runtime?: {
            command?: string(name='Command', description='The command used to distinguish node types.', example='ODPS_SQL'),
          }(name='Runtime', description='The runtime.'),
        }(name='Script', description='The script information.'),
        strategy?: {
          instanceMode?: string(name='InstanceMode', description='The instance generation mode.', example='T+1'),
          rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: milliseconds.', example='180000'),
          rerunMode?: string(name='RerunMode', description='The rerun mode.', example='Allowed'),
          rerunTimes?: int32(name='RerunTimes', description='The number of reruns.', example='3'),
          timeout?: int32(name='Timeout', description='The timeout period.', example='0'),
        }(name='Strategy', description='The scheduling policy.'),
        tags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='null'),
            value?: string(name='Value', description='The tag value.', example='null'),
          }
        ](name='Tags', description='The tags. This parameter is not in use.'),
        taskId?: string(name='TaskId', description='The scheduling task ID.', example='88888888888'),
        trigger?: {
          cron?: string(name='Cron', description='The CRON expression for scheduling.', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', description='The end time of the validity period of the trigger.', example='9999-01-01 00:00:00'),
          id?: string(name='Id', description='The trigger ID.', example='543680677872062XXXX'),
          startTime?: string(name='StartTime', description='The start time of the validity period of the trigger.', example='1970-01-01 00:00:00'),
          timezone?: string(name='Timezone', description='The time zone.', example='Asia/Shanghai'),
          type?: string(name='Type', description='The type of the trigger.

Valid values:

*   Scheduler
*   Manual
*   Steaming

<!---->

*
*
*', example='Scheduler'),
        }(name='Trigger', description='The trigger.'),
      }
    ](name='Nodes', description='The nodes.'),
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='42'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2197B9C4-39CE-55EA-8EEA-FDBAE52DXXXX'),
}

model ListNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodesResponseBody(name='body'),
}

/**
 * @summary Queries a list of nodes in DataStudio. You can also specify filter conditions to query specific nodes.
 *
 * @param request ListNodesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNodesResponse
 */
async function listNodesWithOptions(request: ListNodesRequest, runtime: Util.RuntimeOptions): ListNodesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNodes',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of nodes in DataStudio. You can also specify filter conditions to query specific nodes.
 *
 * @param request ListNodesRequest
 * @return ListNodesResponse
 */
async function listNodes(request: ListNodesRequest): ListNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodesWithOptions(request, runtime);
}

model ListProjectMembersRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='62136'),
  roleCodes?: [ string ](name='RoleCodes'),
  userIds?: [ string ](name='UserIds'),
}

model ListProjectMembersShrinkRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='62136'),
  roleCodesShrink?: string(name='RoleCodes'),
  userIdsShrink?: string(name='UserIds'),
}

model ListProjectMembersResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    projectMembers?: [ 
      {
        projectId?: long(name='ProjectId', example='62136'),
        roles?: [ 
          {
            code?: string(name='Code', example='role_project_guest'),
            name?: string(name='Name'),
            type?: string(name='Type', example='System'),
          }
        ](name='Roles'),
        status?: string(name='Status', example='Normal'),
        userId?: string(name='UserId', example='123422344899'),
      }
    ](name='ProjectMembers'),
    totalCount?: int32(name='TotalCount', example='12'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='9FBBBB1F-DD5E-5D8E-8F50-37F77460F056'),
}

model ListProjectMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectMembersResponseBody(name='body'),
}

/**
 * @summary 分页查询工作空间成员详情
 *
 * @param tmpReq ListProjectMembersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProjectMembersResponse
 */
async function listProjectMembersWithOptions(tmpReq: ListProjectMembersRequest, runtime: Util.RuntimeOptions): ListProjectMembersResponse {
  Util.validateModel(tmpReq);
  var request = new ListProjectMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.roleCodes)) {
    request.roleCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roleCodes, 'RoleCodes', 'json');
  }
  if (!Util.isUnset(tmpReq.userIds)) {
    request.userIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userIds, 'UserIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.roleCodesShrink)) {
    body['RoleCodes'] = request.roleCodesShrink;
  }
  if (!Util.isUnset(request.userIdsShrink)) {
    body['UserIds'] = request.userIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListProjectMembers',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 分页查询工作空间成员详情
 *
 * @param request ListProjectMembersRequest
 * @return ListProjectMembersResponse
 */
async function listProjectMembers(request: ListProjectMembersRequest): ListProjectMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectMembersWithOptions(request, runtime);
}

model ListProjectRolesRequest {
  codes?: [ string ](name='Codes'),
  names?: [ string ](name='Names'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='21229'),
  type?: string(name='Type', example='System'),
}

model ListProjectRolesShrinkRequest {
  codesShrink?: string(name='Codes'),
  namesShrink?: string(name='Names'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='21229'),
  type?: string(name='Type', example='System'),
}

model ListProjectRolesResponseBody = {
  pagingInfo?: {
    pageNumber?: string(name='PageNumber', example='1'),
    pageSize?: string(name='PageSize', example='10'),
    projectRoles?: [ 
      {
        code?: string(name='Code', example='role_project_guest'),
        name?: string(name='Name'),
        projectId?: long(name='ProjectId', example='21229'),
        type?: string(name='Type', example='System'),
      }
    ](name='ProjectRoles'),
    totalCount?: string(name='TotalCount', example='42'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='61649187-0BCF-5E75-8D4B-64FDBEBBB447'),
}

model ListProjectRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectRolesResponseBody(name='body'),
}

/**
 * @summary 分页查询工作空间角色详情
 *
 * @param tmpReq ListProjectRolesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProjectRolesResponse
 */
async function listProjectRolesWithOptions(tmpReq: ListProjectRolesRequest, runtime: Util.RuntimeOptions): ListProjectRolesResponse {
  Util.validateModel(tmpReq);
  var request = new ListProjectRolesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.codes)) {
    request.codesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.codes, 'Codes', 'json');
  }
  if (!Util.isUnset(tmpReq.names)) {
    request.namesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.names, 'Names', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.codesShrink)) {
    body['Codes'] = request.codesShrink;
  }
  if (!Util.isUnset(request.namesShrink)) {
    body['Names'] = request.namesShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListProjectRoles',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 分页查询工作空间角色详情
 *
 * @param request ListProjectRolesRequest
 * @return ListProjectRolesResponse
 */
async function listProjectRoles(request: ListProjectRolesRequest): ListProjectRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectRolesWithOptions(request, runtime);
}

model ListProjectsRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', example='rg-acfmzbn7pti3zff'),
  aliyunResourceTags?: [ 
    {
      key?: string(name='Key', example='batch'),
      value?: string(name='Value', example='blue'),
    }
  ](name='AliyunResourceTags'),
  devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', example='true'),
  devRoleDisabled?: boolean(name='DevRoleDisabled', example='false'),
  ids?: [ long ](name='Ids'),
  names?: [ string ](name='Names'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  paiTaskEnabled?: boolean(name='PaiTaskEnabled', example='true'),
  status?: string(name='Status', example='Available'),
}

model ListProjectsShrinkRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', example='rg-acfmzbn7pti3zff'),
  aliyunResourceTagsShrink?: string(name='AliyunResourceTags'),
  devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', example='true'),
  devRoleDisabled?: boolean(name='DevRoleDisabled', example='false'),
  idsShrink?: string(name='Ids'),
  namesShrink?: string(name='Names'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  paiTaskEnabled?: boolean(name='PaiTaskEnabled', example='true'),
  status?: string(name='Status', example='Available'),
}

model ListProjectsResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', example='10'),
    pageSize?: int32(name='PageSize', example='1'),
    projects?: [ 
      {
        aliyunResourceGroupId?: string(name='AliyunResourceGroupId', example='rg-acfmzbn7pti3zfa'),
        aliyunResourceTags?: [ 
          {
            key?: string(name='Key', example='batch'),
            value?: string(name='Value', example='blue'),
          }
        ](name='AliyunResourceTags'),
        description?: string(name='Description'),
        devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', example='true'),
        devRoleDisabled?: boolean(name='DevRoleDisabled', example='false'),
        displayName?: string(name='DisplayName'),
        id?: long(name='Id', example='123456'),
        name?: string(name='Name', example='sora_finance'),
        owner?: string(name='Owner', example='123532153125'),
        paiTaskEnabled?: boolean(name='PaiTaskEnabled', example='true'),
        status?: string(name='Status', example='Available'),
      }
    ](name='Projects'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='6D24AD9A-652F-59E2-AC1F-05029300F8A4'),
}

model ListProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectsResponseBody(name='body'),
}

/**
 * @summary 分页查询工作空间详情
 *
 * @param tmpReq ListProjectsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProjectsResponse
 */
async function listProjectsWithOptions(tmpReq: ListProjectsRequest, runtime: Util.RuntimeOptions): ListProjectsResponse {
  Util.validateModel(tmpReq);
  var request = new ListProjectsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.aliyunResourceTags)) {
    request.aliyunResourceTagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.aliyunResourceTags, 'AliyunResourceTags', 'json');
  }
  if (!Util.isUnset(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  if (!Util.isUnset(tmpReq.names)) {
    request.namesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.names, 'Names', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.aliyunResourceGroupId)) {
    body['AliyunResourceGroupId'] = request.aliyunResourceGroupId;
  }
  if (!Util.isUnset(request.aliyunResourceTagsShrink)) {
    body['AliyunResourceTags'] = request.aliyunResourceTagsShrink;
  }
  if (!Util.isUnset(request.devEnvironmentEnabled)) {
    body['DevEnvironmentEnabled'] = request.devEnvironmentEnabled;
  }
  if (!Util.isUnset(request.devRoleDisabled)) {
    body['DevRoleDisabled'] = request.devRoleDisabled;
  }
  if (!Util.isUnset(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  if (!Util.isUnset(request.namesShrink)) {
    body['Names'] = request.namesShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.paiTaskEnabled)) {
    body['PaiTaskEnabled'] = request.paiTaskEnabled;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListProjects',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 分页查询工作空间详情
 *
 * @param request ListProjectsRequest
 * @return ListProjectsResponse
 */
async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectsWithOptions(request, runtime);
}

model ListResourceGroupsRequest {
  name?: string(name='Name', example='Resource'),
  paymentType?: string(name='PaymentType', example='PrePaid'),
  projectId?: long(name='ProjectId', example='1000'),
  resourceGroupTypes?: [ string ](name='ResourceGroupTypes'),
  statuses?: [ string ](name='Statuses'),
}

model ListResourceGroupsShrinkRequest {
  name?: string(name='Name', example='Resource'),
  paymentType?: string(name='PaymentType', example='PrePaid'),
  projectId?: long(name='ProjectId', example='1000'),
  resourceGroupTypesShrink?: string(name='ResourceGroupTypes'),
  statusesShrink?: string(name='Statuses'),
}

model ListResourceGroupsResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  resourceGroupList?: [ 
    {
      createTime?: long(name='CreateTime', example='1727055811000'),
      createUser?: string(name='CreateUser', example='11075500042XXXXX'),
      defaultVpcId?: string(name='DefaultVpcId', example='vpc-m2et4f3oc8msfbccXXXXX'),
      defaultVswicthId?: string(name='DefaultVswicthId', example='vsw-uf8usrhs7hjd9amsXXXXX'),
      id?: string(name='Id', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
      name?: string(name='Name', example='common_resource_group'),
      orderInstanceId?: string(name='OrderInstanceId', example='c442b330-3b10-4584-959e-736e4edXXXXX'),
      paymentType?: string(name='PaymentType', example='PrePaid'),
      remark?: string(name='Remark', example='创建用于普通任务的通用资源组'),
      resourceGroupType?: string(name='ResourceGroupType', example='CommonV2'),
      spec?: {
        amount?: int32(name='Amount', example='1'),
        standard?: string(name='Standard', example='2CU'),
      }(name='Spec'),
      status?: string(name='Status', example='Normal'),
    }
  ](name='ResourceGroupList'),
  success?: boolean(name='Success', example='true'),
}

model ListResourceGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourceGroupsResponseBody(name='body'),
}

/**
 * @summary 获取资源组列表。
 *
 * @param tmpReq ListResourceGroupsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListResourceGroupsResponse
 */
async function listResourceGroupsWithOptions(tmpReq: ListResourceGroupsRequest, runtime: Util.RuntimeOptions): ListResourceGroupsResponse {
  Util.validateModel(tmpReq);
  var request = new ListResourceGroupsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resourceGroupTypes)) {
    request.resourceGroupTypesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceGroupTypes, 'ResourceGroupTypes', 'json');
  }
  if (!Util.isUnset(tmpReq.statuses)) {
    request.statusesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.statuses, 'Statuses', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResourceGroups',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取资源组列表。
 *
 * @param request ListResourceGroupsRequest
 * @return ListResourceGroupsResponse
 */
async function listResourceGroups(request: ListResourceGroupsRequest): ListResourceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceGroupsWithOptions(request, runtime);
}

model ListResourcesRequest {
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the workspace administrator. You can log on to the Alibaba Cloud Management Console and view the ID on the Security Settings page.', example='110755000425XXXX'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10002'),
  type?: string(name='Type', description='The resource type. This parameter specifies a filter condition.

Valid values:

*   Python
*   Jar
*   Archive
*   File', example='python'),
}

model ListResourcesResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    resources?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the file resource was created. This value is a UNIX timestamp.', example='1724505917000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='odps_first'),
          type?: string(name='Type', description='The type of the data source.', example='odps'),
        }(name='DataSource', description='The information about the data source.'),
        id?: string(name='Id', description='The ID of the file resource.', example='631478864897630XXXX'),
        modifyTime?: long(name='ModifyTime', description='The times when the file resource was last modified. This value is a UNIX timestamp.', example='1724505917000'),
        name?: string(name='Name', description='The name of the file resource.', example='math.py'),
        owner?: string(name='Owner', description='The owner of the file resource.', example='110755000425XXXX'),
        projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.', example='344247'),
        script?: {
          id?: string(name='Id', description='The script ID.', example='123348864897630XXXX'),
          path?: string(name='Path', description='The script path.', example='root/demo'),
          runtime?: {
            command?: string(name='Command', description='The command used to distinguish file resource types.', example='ODPS_PYTHON'),
          }(name='Runtime', description='The runtime.'),
        }(name='Script', description='The script information.'),
        sourcePath?: string(name='SourcePath', description='The path of the source of the file resource. If the SourecType parameter is set to Local, this parameter is left empty.', example='XXX/unknown/ide/1/XXX/20240820200851_963a9da676de44ef8d06a6576a8c4d6a.py'),
        sourceType?: string(name='SourceType', description='The storage type of the source of the file resource.

Valid values:

*   Local
*   Oss', example='local'),
        targetPath?: string(name='TargetPath', description='The storage path of the destination of the file resource.', example='XXX/unknown/ide/1/XXX/20240820200851_963a9da676de44ef8d06a6576a8c4d6a.py'),
        targetType?: string(name='TargetType', description='The storage type of the destination of the file resource.

Valid values:

*   Gateway
*   Oss
*   Hdfs', example='oss'),
        type?: string(name='Type', description='The type of the file resource.

Valid values:

*   Python
*   Jar
*   Archive
*   File', example='jar'),
      }
    ](name='Resources', description='The file resources.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='131'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='99EBE7CF-69C0-5089-BE3E-79563C31XXXX'),
}

model ListResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourcesResponseBody(name='body'),
}

/**
 * @summary Queries a list of file resources in DataStudio. You can also specify filter conditions to query specific file resources.
 *
 * @param request ListResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListResourcesResponse
 */
async function listResourcesWithOptions(request: ListResourcesRequest, runtime: Util.RuntimeOptions): ListResourcesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResources',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of file resources in DataStudio. You can also specify filter conditions to query specific file resources.
 *
 * @param request ListResourcesRequest
 * @return ListResourcesResponse
 */
async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourcesWithOptions(request, runtime);
}

model ListRoutesRequest {
  networkId?: long(name='NetworkId', description='This parameter is required.', example='1000'),
}

model ListRoutesResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  routeList?: [ 
    {
      createTime?: long(name='CreateTime', example='1727055811000'),
      destinationCidr?: string(name='DestinationCidr', example='192.168.0.0/16'),
      id?: long(name='Id', example='1000'),
      networkId?: long(name='NetworkId', example='1000'),
      resourceGroupId?: string(name='ResourceGroupId', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
      resourceId?: string(name='ResourceId', example='ns-679XXXXXX'),
    }
  ](name='RouteList'),
  success?: boolean(name='Success', example='true'),
}

model ListRoutesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRoutesResponseBody(name='body'),
}

/**
 * @summary 获取网络资源的路由列表。
 *
 * @param request ListRoutesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRoutesResponse
 */
async function listRoutesWithOptions(request: ListRoutesRequest, runtime: Util.RuntimeOptions): ListRoutesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRoutes',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取网络资源的路由列表。
 *
 * @param request ListRoutesRequest
 * @return ListRoutesResponse
 */
async function listRoutes(request: ListRoutesRequest): ListRoutesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRoutesWithOptions(request, runtime);
}

model ListWorkflowDefinitionsRequest {
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the workspace administrator. You can log on to the Alibaba Cloud Management Console and view the ID on the Security Settings page.', example='110755000425XXXX'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  type?: string(name='Type', description='The workflow type. This parameter specifies a filter condition.

Valid values:

*   CycleWorkflow
*   ManualWorkflow', example='CycleWorkflow'),
}

model ListWorkflowDefinitionsResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='227'),
    workflowDefinitions?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the workflow was created. This value is a UNIX timestamp.', example='1698057323000'),
        description?: string(name='Description', description='The description of the workflow.'),
        id?: string(name='Id', description='The ID of the workflow.', example='463497880880954XXXX'),
        modifyTime?: long(name='ModifyTime', description='The times when the workflow was last modified. This value is a UNIX timestamp.', example='1698057323000'),
        name?: string(name='Name', description='The name of the workflow.'),
        owner?: string(name='Owner', description='The owner.', example='110755000425XXXX'),
        projectId?: string(name='ProjectId', description='The ID of the DataWorks workspace to which the workflow belongs.

This parameter is required.', example='4710'),
        script?: {
          id?: string(name='Id', description='The script ID.', example='698002781368644XXXX'),
          path?: string(name='Path', description='The script path.'),
          runtime?: {
            command?: string(name='Command', description='The command.', example='WORKFLOW'),
          }(name='Runtime', description='The runtime.'),
        }(name='Script', description='The script information.'),
        type?: string(name='Type', description='The type of the workflow.

Valid values:

*   CycleWorkflow
*   ManualWorkflow', example='CycleWorkflow'),
      }
    ](name='WorkflowDefinitions', description='The workflows.'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='8C3ED0C5-ABAB-55E1-854B-DAC02B11XXXX'),
}

model ListWorkflowDefinitionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkflowDefinitionsResponseBody(name='body'),
}

/**
 * @summary Queries a list of workflows in DataStudio. You can also specify filter conditions to query specific workflows.
 *
 * @param request ListWorkflowDefinitionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWorkflowDefinitionsResponse
 */
async function listWorkflowDefinitionsWithOptions(request: ListWorkflowDefinitionsRequest, runtime: Util.RuntimeOptions): ListWorkflowDefinitionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWorkflowDefinitions',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of workflows in DataStudio. You can also specify filter conditions to query specific workflows.
 *
 * @param request ListWorkflowDefinitionsRequest
 * @return ListWorkflowDefinitionsResponse
 */
async function listWorkflowDefinitions(request: ListWorkflowDefinitionsRequest): ListWorkflowDefinitionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWorkflowDefinitionsWithOptions(request, runtime);
}

model MoveFunctionRequest {
  id?: string(name='Id', description='The ID of the UDF.

This parameter is required.', example='543217824470354XXXX'),
  path?: string(name='Path', description='The path to which you want to move the UDF. You do not need to specify a UDF name in the path.

For example, if you want to move the test UDF to root/demo/test, you must set this parameter to root/demo.

This parameter is required.', example='root/demo'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='12345'),
}

model MoveFunctionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='48C0E2F0-52BA-5888-BDFA-28F1B9AFXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model MoveFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveFunctionResponseBody(name='body'),
}

/**
 * @summary Moves a user-defined function (UDF) to a path in DataStudio.
 *
 * @param request MoveFunctionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MoveFunctionResponse
 */
async function moveFunctionWithOptions(request: MoveFunctionRequest, runtime: Util.RuntimeOptions): MoveFunctionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.path)) {
    body['Path'] = request.path;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MoveFunction',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Moves a user-defined function (UDF) to a path in DataStudio.
 *
 * @param request MoveFunctionRequest
 * @return MoveFunctionResponse
 */
async function moveFunction(request: MoveFunctionRequest): MoveFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveFunctionWithOptions(request, runtime);
}

model MoveNodeRequest {
  id?: string(name='Id', description='The ID of the node.

This parameter is required.', example='652567824470354XXXX'),
  path?: string(name='Path', description='The path to which you want to move the node. You do not need to specify a node name in the path.

For example, if you want to move the test node to root/demo/test, you must set this parameter to root/demo.

This parameter is required.', example='root/demo'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model MoveNodeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C99E2BE6-9DEA-5C2E-8F51-1DDCFEADXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model MoveNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveNodeResponseBody(name='body'),
}

/**
 * @summary Moves a node to a path in DataStudio.
 *
 * @param request MoveNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MoveNodeResponse
 */
async function moveNodeWithOptions(request: MoveNodeRequest, runtime: Util.RuntimeOptions): MoveNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.path)) {
    body['Path'] = request.path;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MoveNode',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Moves a node to a path in DataStudio.
 *
 * @param request MoveNodeRequest
 * @return MoveNodeResponse
 */
async function moveNode(request: MoveNodeRequest): MoveNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveNodeWithOptions(request, runtime);
}

model MoveResourceRequest {
  id?: string(name='Id', description='The ID of the file resource.

This parameter is required.', example='652567824470354XXXX'),
  path?: string(name='Path', description='The path to which you want to move the file resource. You do not need to specify a file resource name in the path.

For example, if you want to move the test file resource to root/demo/test, you must set this parameter to root/demo.

This parameter is required.', example='root/demo'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model MoveResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F332BED4-DD73-5972-A9C2-642BA6CFXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model MoveResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveResourceResponseBody(name='body'),
}

/**
 * @summary Moves a file resource to a path in DataStudio.
 *
 * @param request MoveResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MoveResourceResponse
 */
async function moveResourceWithOptions(request: MoveResourceRequest, runtime: Util.RuntimeOptions): MoveResourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.path)) {
    body['Path'] = request.path;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MoveResource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Moves a file resource to a path in DataStudio.
 *
 * @param request MoveResourceRequest
 * @return MoveResourceResponse
 */
async function moveResource(request: MoveResourceRequest): MoveResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveResourceWithOptions(request, runtime);
}

model MoveWorkflowDefinitionRequest {
  id?: string(name='Id', description='The ID of the workflow.

This parameter is required.', example='543217824470354XXXX'),
  path?: string(name='Path', description='The path to which you want to move the workflow. You do not need to specify a workflow name in the path.

For example, if you want to move the test workflow to root/demo/test, you must set this parameter to root/demo.

This parameter is required.', example='root/demo'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10001'),
}

model MoveWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='05ADAF4F-7709-5FB1-B606-3513483FXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model MoveWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary Moves a workflow to a path in DataStudio.
 *
 * @param request MoveWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MoveWorkflowDefinitionResponse
 */
async function moveWorkflowDefinitionWithOptions(request: MoveWorkflowDefinitionRequest, runtime: Util.RuntimeOptions): MoveWorkflowDefinitionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.path)) {
    body['Path'] = request.path;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MoveWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Moves a workflow to a path in DataStudio.
 *
 * @param request MoveWorkflowDefinitionRequest
 * @return MoveWorkflowDefinitionResponse
 */
async function moveWorkflowDefinition(request: MoveWorkflowDefinitionRequest): MoveWorkflowDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveWorkflowDefinitionWithOptions(request, runtime);
}

model RenameFunctionRequest {
  id?: string(name='Id', description='The ID of the UDF.

This parameter is required.', example='543217824470354XXXX'),
  name?: string(name='Name', description='The new name.

This parameter is required.'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10002'),
}

model RenameFunctionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1ED4C97F-BA2A-57C5-BA7C-8853627EXXXX'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model RenameFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameFunctionResponseBody(name='body'),
}

/**
 * @summary Renames a user-defined function (UDF) in DataStudio.
 *
 * @param request RenameFunctionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RenameFunctionResponse
 */
async function renameFunctionWithOptions(request: RenameFunctionRequest, runtime: Util.RuntimeOptions): RenameFunctionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RenameFunction',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Renames a user-defined function (UDF) in DataStudio.
 *
 * @param request RenameFunctionRequest
 * @return RenameFunctionResponse
 */
async function renameFunction(request: RenameFunctionRequest): RenameFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return renameFunctionWithOptions(request, runtime);
}

model RenameNodeRequest {
  id?: string(name='Id', description='The ID of the node.

This parameter is required.', example='652567824470354XXXX'),
  name?: string(name='Name', description='The new name.

This parameter is required.'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='12345'),
}

model RenameNodeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4CDF7B72-020B-542A-8465-21CFFA81XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model RenameNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameNodeResponseBody(name='body'),
}

/**
 * @summary Renames a node in DataStudio.
 *
 * @param request RenameNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RenameNodeResponse
 */
async function renameNodeWithOptions(request: RenameNodeRequest, runtime: Util.RuntimeOptions): RenameNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RenameNode',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Renames a node in DataStudio.
 *
 * @param request RenameNodeRequest
 * @return RenameNodeResponse
 */
async function renameNode(request: RenameNodeRequest): RenameNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return renameNodeWithOptions(request, runtime);
}

model RenameResourceRequest {
  id?: string(name='Id', description='The ID of the file resource.

This parameter is required.', example='543217824470354XXXX'),
  name?: string(name='Name', description='The new name.

This parameter is required.'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model RenameResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4CDF7B72-020B-542A-8465-21CFFA8XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model RenameResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameResourceResponseBody(name='body'),
}

/**
 * @summary Renames a file resource in DataStudio.
 *
 * @param request RenameResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RenameResourceResponse
 */
async function renameResourceWithOptions(request: RenameResourceRequest, runtime: Util.RuntimeOptions): RenameResourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RenameResource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Renames a file resource in DataStudio.
 *
 * @param request RenameResourceRequest
 * @return RenameResourceResponse
 */
async function renameResource(request: RenameResourceRequest): RenameResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renameResourceWithOptions(request, runtime);
}

model RenameWorkflowDefinitionRequest {
  id?: string(name='Id', description='The unique identifier of the workflow.

This parameter is required.', example='463497880880954XXXX'),
  name?: string(name='Name', description='The new name.

This parameter is required.'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model RenameWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can troubleshoot issues based on the ID.', example='975BD43D-C421-595C-A29C-565A8AD5XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model RenameWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary Renames a workflow in DataStudio.
 *
 * @param request RenameWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RenameWorkflowDefinitionResponse
 */
async function renameWorkflowDefinitionWithOptions(request: RenameWorkflowDefinitionRequest, runtime: Util.RuntimeOptions): RenameWorkflowDefinitionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenameWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Renames a workflow in DataStudio.
 *
 * @param request RenameWorkflowDefinitionRequest
 * @return RenameWorkflowDefinitionResponse
 */
async function renameWorkflowDefinition(request: RenameWorkflowDefinitionRequest): RenameWorkflowDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return renameWorkflowDefinitionWithOptions(request, runtime);
}

model RevokeMemberProjectRolesRequest {
  projectId?: long(name='ProjectId', description='This parameter is required.', example='105149'),
  roleCodes?: [ string ](name='RoleCodes', description='This parameter is required.'),
  userId?: string(name='UserId', description='This parameter is required.', example='123422344899'),
}

model RevokeMemberProjectRolesShrinkRequest {
  projectId?: long(name='ProjectId', description='This parameter is required.', example='105149'),
  roleCodesShrink?: string(name='RoleCodes', description='This parameter is required.'),
  userId?: string(name='UserId', description='This parameter is required.', example='123422344899'),
}

model RevokeMemberProjectRolesResponseBody = {
  requestId?: string(name='RequestId', example='676271D6-53B4-57BE-89FA-72F7AE1418DF'),
}

model RevokeMemberProjectRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeMemberProjectRolesResponseBody(name='body'),
}

/**
 * @summary 撤销工作空间成员的角色
 *
 * @param tmpReq RevokeMemberProjectRolesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RevokeMemberProjectRolesResponse
 */
async function revokeMemberProjectRolesWithOptions(tmpReq: RevokeMemberProjectRolesRequest, runtime: Util.RuntimeOptions): RevokeMemberProjectRolesResponse {
  Util.validateModel(tmpReq);
  var request = new RevokeMemberProjectRolesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.roleCodes)) {
    request.roleCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roleCodes, 'RoleCodes', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.roleCodesShrink)) {
    body['RoleCodes'] = request.roleCodesShrink;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RevokeMemberProjectRoles',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 撤销工作空间成员的角色
 *
 * @param request RevokeMemberProjectRolesRequest
 * @return RevokeMemberProjectRolesResponse
 */
async function revokeMemberProjectRoles(request: RevokeMemberProjectRolesRequest): RevokeMemberProjectRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeMemberProjectRolesWithOptions(request, runtime);
}

model StartDIJobRequest {
  DIJobId?: long(name='DIJobId', description='The instance ID.', example='10000'),
  forceToRerun?: boolean(name='ForceToRerun', example='false'),
  realtimeStartSettings?: {
    failoverSettings?: {
      interval?: long(name='Interval', example='10'),
      upperLimit?: long(name='UpperLimit', example='30'),
    }(name='FailoverSettings'),
    startTime?: long(name='StartTime', example='1671516776'),
  }(name='RealtimeStartSettings'),
}

model StartDIJobShrinkRequest {
  DIJobId?: long(name='DIJobId', description='The instance ID.', example='10000'),
  forceToRerun?: boolean(name='ForceToRerun', example='false'),
  realtimeStartSettingsShrink?: string(name='RealtimeStartSettings'),
}

model StartDIJobResponseBody = {
  requestId?: string(name='RequestId', example='999431B2-6013-577F-B684-36F7433C753B'),
  success?: boolean(name='Success', example='true'),
}

model StartDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartDIJobResponseBody(name='body'),
}

/**
 * @summary 启动数据集成任务
 *
 * @param tmpReq StartDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartDIJobResponse
 */
async function startDIJobWithOptions(tmpReq: StartDIJobRequest, runtime: Util.RuntimeOptions): StartDIJobResponse {
  Util.validateModel(tmpReq);
  var request = new StartDIJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.realtimeStartSettings)) {
    request.realtimeStartSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.realtimeStartSettings, 'RealtimeStartSettings', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDIJob',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 启动数据集成任务
 *
 * @param request StartDIJobRequest
 * @return StartDIJobResponse
 */
async function startDIJob(request: StartDIJobRequest): StartDIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDIJobWithOptions(request, runtime);
}

model StopDIJobRequest {
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='11668'),
  instanceId?: long(name='InstanceId', description='The instance ID.', example='1234'),
}

model StopDIJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='92F778C7-8F00-53B1-AE1A-B3B17101247D'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model StopDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDIJobResponseBody(name='body'),
}

/**
 * @summary Stops a synchronization task.
 *
 * @param request StopDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopDIJobResponse
 */
async function stopDIJobWithOptions(request: StopDIJobRequest, runtime: Util.RuntimeOptions): StopDIJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDIJob',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Stops a synchronization task.
 *
 * @param request StopDIJobRequest
 * @return StopDIJobResponse
 */
async function stopDIJob(request: StopDIJobRequest): StopDIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDIJobWithOptions(request, runtime);
}

model UpdateDIAlarmRuleRequest {
  DIAlarmRuleId?: long(name='DIAlarmRuleId', description='This parameter is required.', example='34982'),
  DIJobId?: long(name='DIJobId', example='1'),
  description?: string(name='Description'),
  enabled?: boolean(name='Enabled', example='true'),
  metricType?: string(name='MetricType', example='Heartbeat'),
  name?: string(name='Name', example='alarm_rule_name'),
  notificationSettings?: {
    inhibitionInterval?: long(name='InhibitionInterval', example='5'),
    notificationChannels?: [ 
      {
        channels?: [ string ](name='Channels'),
        severity?: string(name='Severity', example='Warning'),
      }
    ](name='NotificationChannels'),
    notificationReceivers?: [ 
      {
        receiverType?: string(name='ReceiverType', example='DingToken'),
        receiverValues?: [ string ](name='ReceiverValues'),
      }
    ](name='NotificationReceivers'),
  }(name='NotificationSettings'),
  triggerConditions?: [ 
    {
      ddlReportTags?: [ string ](name='DdlReportTags'),
      duration?: long(name='Duration', example='15'),
      severity?: string(name='Severity', example='Warning'),
      threshold?: long(name='Threshold', example='5'),
    }
  ](name='TriggerConditions'),
}

model UpdateDIAlarmRuleShrinkRequest {
  DIAlarmRuleId?: long(name='DIAlarmRuleId', description='This parameter is required.', example='34982'),
  DIJobId?: long(name='DIJobId', example='1'),
  description?: string(name='Description'),
  enabled?: boolean(name='Enabled', example='true'),
  metricType?: string(name='MetricType', example='Heartbeat'),
  name?: string(name='Name', example='alarm_rule_name'),
  notificationSettingsShrink?: string(name='NotificationSettings'),
  triggerConditionsShrink?: string(name='TriggerConditions'),
}

model UpdateDIAlarmRuleResponseBody = {
  requestId?: string(name='RequestId', example='A6C6B486-E3A2-5D52-9E76-D9380485D946'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDIAlarmRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDIAlarmRuleResponseBody(name='body'),
}

/**
 * @summary 更新数据集成报警规则
 *
 * @param tmpReq UpdateDIAlarmRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDIAlarmRuleResponse
 */
async function updateDIAlarmRuleWithOptions(tmpReq: UpdateDIAlarmRuleRequest, runtime: Util.RuntimeOptions): UpdateDIAlarmRuleResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDIAlarmRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.notificationSettings)) {
    request.notificationSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notificationSettings, 'NotificationSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.triggerConditions)) {
    request.triggerConditionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.triggerConditions, 'TriggerConditions', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDIAlarmRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新数据集成报警规则
 *
 * @param request UpdateDIAlarmRuleRequest
 * @return UpdateDIAlarmRuleResponse
 */
async function updateDIAlarmRule(request: UpdateDIAlarmRuleRequest): UpdateDIAlarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDIAlarmRuleWithOptions(request, runtime);
}

model UpdateDIJobRequest {
  DIJobId?: long(name='DIJobId', description='This parameter is required.', example='11588'),
  description?: string(name='Description'),
  jobSettings?: {
    channelSettings?: string(name='ChannelSettings', example='{"structInfo":"MANAGED","storageType":"TEXTFILE","writeMode":"APPEND","partitionColumns":[{"columnName":"pt","columnType":"STRING","comment":""}],"fieldDelimiter":""}'),
    columnDataTypeSettings?: [ 
      {
        destinationDataType?: string(name='DestinationDataType', example='text'),
        sourceDataType?: string(name='SourceDataType', example='bigint'),
      }
    ](name='ColumnDataTypeSettings'),
    cycleScheduleSettings?: {
      scheduleParameters?: string(name='ScheduleParameters', example='bizdate=$bizdate'),
    }(name='CycleScheduleSettings'),
    ddlHandlingSettings?: [ 
      {
        action?: string(name='Action', example='Critical'),
        type?: string(name='Type', example='AddColumn'),
      }
    ](name='DdlHandlingSettings'),
    runtimeSettings?: [ 
      {
        name?: string(name='Name', example='runtime.offline.concurrent'),
        value?: string(name='Value', example='1'),
      }
    ](name='RuntimeSettings'),
  }(name='JobSettings'),
  projectId?: long(name='ProjectId'),
  resourceSettings?: {
    offlineResourceSettings?: {
      requestedCu?: long(name='RequestedCu', example='2.0'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='S_res_group_111_222'),
    }(name='OfflineResourceSettings'),
    realtimeResourceSettings?: {
      requestedCu?: long(name='RequestedCu', example='2.0'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='S_res_group_111_222'),
    }(name='RealtimeResourceSettings'),
    scheduleResourceSettings?: {
      requestedCu?: long(name='RequestedCu', example='2.0'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='S_res_group_235454102432001_1721021993437'),
    }(name='ScheduleResourceSettings'),
  }(name='ResourceSettings'),
  tableMappings?: [ 
    {
      sourceObjectSelectionRules?: [ 
        {
          action?: string(name='Action', example='Include'),
          expression?: string(name='Expression', example='mysql_table_1'),
          expressionType?: string(name='ExpressionType', example='Exact'),
          objectType?: string(name='ObjectType', example='Table'),
        }
      ](name='SourceObjectSelectionRules'),
      transformationRules?: [ 
        {
          ruleActionType?: string(name='RuleActionType', example='Rename'),
          ruleName?: string(name='RuleName', example='rename_rule_1'),
          ruleTargetType?: string(name='RuleTargetType', example='Table'),
        }
      ](name='TransformationRules'),
    }
  ](name='TableMappings'),
  transformationRules?: [ 
    {
      ruleActionType?: string(name='RuleActionType', example='Rename'),
      ruleExpression?: string(name='RuleExpression', example='{"expression":"${srcDatasoureName}_${srcDatabaseName}"}'),
      ruleName?: string(name='RuleName', example='rename_rule_1'),
      ruleTargetType?: string(name='RuleTargetType', example='Table'),
    }
  ](name='TransformationRules'),
}

model UpdateDIJobShrinkRequest {
  DIJobId?: long(name='DIJobId', description='This parameter is required.', example='11588'),
  description?: string(name='Description'),
  jobSettingsShrink?: string(name='JobSettings'),
  projectId?: long(name='ProjectId'),
  resourceSettingsShrink?: string(name='ResourceSettings'),
  tableMappingsShrink?: string(name='TableMappings'),
  transformationRulesShrink?: string(name='TransformationRules'),
}

model UpdateDIJobResponseBody = {
  requestId?: string(name='RequestId', example='AAC30B35-820D-5F3E-A42C-E96BB6379325'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDIJobResponseBody(name='body'),
}

/**
 * @summary 更新数据集成任务
 *
 * @param tmpReq UpdateDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDIJobResponse
 */
async function updateDIJobWithOptions(tmpReq: UpdateDIJobRequest, runtime: Util.RuntimeOptions): UpdateDIJobResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDIJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.jobSettings)) {
    request.jobSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.jobSettings, 'JobSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.resourceSettings)) {
    request.resourceSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceSettings, 'ResourceSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.tableMappings)) {
    request.tableMappingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tableMappings, 'TableMappings', 'json');
  }
  if (!Util.isUnset(tmpReq.transformationRules)) {
    request.transformationRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.transformationRules, 'TransformationRules', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDIJob',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新数据集成任务
 *
 * @param request UpdateDIJobRequest
 * @return UpdateDIJobResponse
 */
async function updateDIJob(request: UpdateDIJobRequest): UpdateDIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDIJobWithOptions(request, runtime);
}

model UpdateDataSourceRequest {
  connectionProperties?: string(name='ConnectionProperties', description='This parameter is required.', example='{
	"envType": "Prod",
	"regionId": "cn-beijing",
    "instanceId": "hgprecn-cn-x0r3oun4k001",
    "database": "testdb",
    "securityProtocol": "authTypeNone",
    "authType": "Executor",
    "authIdentity": "1107550004253538"
}'),
  connectionPropertiesMode?: string(name='ConnectionPropertiesMode', example='UrlMode'),
  description?: string(name='Description', example='test'),
  id?: long(name='Id', description='This parameter is required.', example='16033'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='5678'),
}

model UpdateDataSourceResponseBody = {
  requestId?: string(name='RequestId', example='102E8E24-0387-531D-8A75-1C0AE7DD03E5'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSourceResponseBody(name='body'),
}

/**
 * @summary 验证用
 *
 * @param request UpdateDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataSourceResponse
 */
async function updateDataSourceWithOptions(request: UpdateDataSourceRequest, runtime: Util.RuntimeOptions): UpdateDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionProperties)) {
    query['ConnectionProperties'] = request.connectionProperties;
  }
  if (!Util.isUnset(request.connectionPropertiesMode)) {
    query['ConnectionPropertiesMode'] = request.connectionPropertiesMode;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataSource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 验证用
 *
 * @param request UpdateDataSourceRequest
 * @return UpdateDataSourceResponse
 */
async function updateDataSource(request: UpdateDataSourceRequest): UpdateDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataSourceWithOptions(request, runtime);
}

model UpdateFunctionRequest {
  id?: string(name='Id', description='The ID of the UDF.

This parameter is required.', example='463497880880954XXXX'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000'),
  spec?: string(name='Spec', description='The FlowSpec field information about the UDF. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.'),
}

model UpdateFunctionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='12123960-CB2C-5086-868E-C6C1D024XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true

false', example='true'),
}

model UpdateFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFunctionResponseBody(name='body'),
}

/**
 * @summary Updates the basic information about a user-defined function (UDF) in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateFunctionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateFunctionResponse
 */
async function updateFunctionWithOptions(request: UpdateFunctionRequest, runtime: Util.RuntimeOptions): UpdateFunctionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFunction',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the basic information about a user-defined function (UDF) in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateFunctionRequest
 * @return UpdateFunctionResponse
 */
async function updateFunction(request: UpdateFunctionRequest): UpdateFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFunctionWithOptions(request, runtime);
}

model UpdateNodeRequest {
  id?: string(name='Id', description='The ID of the node.

This parameter is required.', example='652567824470354XXXX'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000'),
  spec?: string(name='Spec', description='The FlowSpec field information about the node. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.'),
}

model UpdateNodeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='99EBE7CF-69C0-5089-BE3E-79563C31XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNodeResponseBody(name='body'),
}

/**
 * @summary Updates the basic information about a node in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateNodeResponse
 */
async function updateNodeWithOptions(request: UpdateNodeRequest, runtime: Util.RuntimeOptions): UpdateNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNode',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the basic information about a node in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateNodeRequest
 * @return UpdateNodeResponse
 */
async function updateNode(request: UpdateNodeRequest): UpdateNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNodeWithOptions(request, runtime);
}

model UpdateProjectRequest {
  description?: string(name='Description'),
  devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', example='true'),
  devRoleDisabled?: boolean(name='DevRoleDisabled', example='true'),
  displayName?: string(name='DisplayName'),
  id?: long(name='Id', description='This parameter is required.', example='123456'),
  paiTaskEnabled?: boolean(name='PaiTaskEnabled', example='true'),
  status?: string(name='Status', example='Forbidden'),
}

model UpdateProjectResponseBody = {
  requestId?: string(name='RequestId', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
}

model UpdateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProjectResponseBody(name='body'),
}

/**
 * @summary 更新工作空间
 *
 * @param request UpdateProjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateProjectResponse
 */
async function updateProjectWithOptions(request: UpdateProjectRequest, runtime: Util.RuntimeOptions): UpdateProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.devEnvironmentEnabled)) {
    body['DevEnvironmentEnabled'] = request.devEnvironmentEnabled;
  }
  if (!Util.isUnset(request.devRoleDisabled)) {
    body['DevRoleDisabled'] = request.devRoleDisabled;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.paiTaskEnabled)) {
    body['PaiTaskEnabled'] = request.paiTaskEnabled;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProject',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新工作空间
 *
 * @param request UpdateProjectRequest
 * @return UpdateProjectResponse
 */
async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProjectWithOptions(request, runtime);
}

model UpdateResourceRequest {
  id?: string(name='Id', description='The ID of the file resource.

This parameter is required.', example='543217824470354XXXX'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000'),
  spec?: string(name='Spec', description='The FlowSpec field information about the file resource. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.'),
}

model UpdateResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4CDF7B72-020B-542A-8465-21CFFA81XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourceResponseBody(name='body'),
}

/**
 * @summary Updates the basic information about a file resource in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateResourceResponse
 */
async function updateResourceWithOptions(request: UpdateResourceRequest, runtime: Util.RuntimeOptions): UpdateResourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateResource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the basic information about a file resource in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateResourceRequest
 * @return UpdateResourceResponse
 */
async function updateResource(request: UpdateResourceRequest): UpdateResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateResourceWithOptions(request, runtime);
}

model UpdateResourceGroupRequest {
  id?: string(name='Id', description='The ID of the resource group.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
  name?: string(name='Name', description='The new name that you want to change for the resource group.', example='common_resource_group'),
  remark?: string(name='Remark', description='The new remarks that you want to modify for the resource group.', example='创建用于普通任务的通用资源组'),
}

model UpdateResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model UpdateResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourceGroupResponseBody(name='body'),
}

/**
 * @summary Updates basic information about a resource group.
 *
 * @param request UpdateResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateResourceGroupResponse
 */
async function updateResourceGroupWithOptions(request: UpdateResourceGroupRequest, runtime: Util.RuntimeOptions): UpdateResourceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateResourceGroup',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates basic information about a resource group.
 *
 * @param request UpdateResourceGroupRequest
 * @return UpdateResourceGroupResponse
 */
async function updateResourceGroup(request: UpdateResourceGroupRequest): UpdateResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateResourceGroupWithOptions(request, runtime);
}

model UpdateRouteRequest {
  destinationCidr?: string(name='DestinationCidr', description='This parameter is required.', example='192.168.0.0/16'),
  id?: long(name='Id', description='This parameter is required.', example='1000'),
}

model UpdateRouteResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', example='true'),
}

model UpdateRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRouteResponseBody(name='body'),
}

/**
 * @summary 更新网络资源的路由。
 *
 * @param request UpdateRouteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateRouteResponse
 */
async function updateRouteWithOptions(request: UpdateRouteRequest, runtime: Util.RuntimeOptions): UpdateRouteResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.destinationCidr)) {
    body['DestinationCidr'] = request.destinationCidr;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRoute',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新网络资源的路由。
 *
 * @param request UpdateRouteRequest
 * @return UpdateRouteResponse
 */
async function updateRoute(request: UpdateRouteRequest): UpdateRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRouteWithOptions(request, runtime);
}

model UpdateWorkflowDefinitionRequest {
  id?: string(name='Id', description='The ID of the workflow.

This parameter is required.', example='652567824470354XXXX'),
  projectId?: string(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10001'),
  spec?: string(name='Spec', description='The FlowSpec field information about the workflow. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.'),
}

model UpdateWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20BF7E80-668A-5620-8AD8-879B8FEAXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary Updates the basic information about a workflow in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWorkflowDefinitionResponse
 */
async function updateWorkflowDefinitionWithOptions(request: UpdateWorkflowDefinitionRequest, runtime: Util.RuntimeOptions): UpdateWorkflowDefinitionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the basic information about a workflow in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateWorkflowDefinitionRequest
 * @return UpdateWorkflowDefinitionResponse
 */
async function updateWorkflowDefinition(request: UpdateWorkflowDefinitionRequest): UpdateWorkflowDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWorkflowDefinitionWithOptions(request, runtime);
}

