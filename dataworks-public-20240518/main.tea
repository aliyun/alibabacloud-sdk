/**
 *
 */
import Util;
import XML;
import Credential;
import FileForm;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'dataworks.ap-northeast-1.aliyuncs.com',
    'ap-south-1' = 'dataworks.ap-south-1.aliyuncs.com',
    'ap-southeast-1' = 'dataworks.ap-southeast-1.aliyuncs.com',
    'ap-southeast-2' = 'dataworks.ap-southeast-2.aliyuncs.com',
    'ap-southeast-3' = 'dataworks.ap-southeast-3.aliyuncs.com',
    'ap-southeast-5' = 'dataworks.ap-southeast-5.aliyuncs.com',
    'cn-beijing' = 'dataworks.cn-beijing.aliyuncs.com',
    'cn-chengdu' = 'dataworks.cn-chengdu.aliyuncs.com',
    'cn-hangzhou' = 'dataworks.cn-hangzhou.aliyuncs.com',
    'cn-hongkong' = 'dataworks.cn-hongkong.aliyuncs.com',
    'cn-huhehaote' = 'dataworks.aliyuncs.com',
    'cn-qingdao' = 'dataworks.aliyuncs.com',
    'cn-shanghai' = 'dataworks.cn-shanghai.aliyuncs.com',
    'cn-shenzhen' = 'dataworks.cn-shenzhen.aliyuncs.com',
    'cn-zhangjiakou' = 'dataworks.aliyuncs.com',
    'eu-central-1' = 'dataworks.eu-central-1.aliyuncs.com',
    'eu-west-1' = 'dataworks.eu-west-1.aliyuncs.com',
    'me-east-1' = 'dataworks.me-east-1.aliyuncs.com',
    'us-east-1' = 'dataworks.us-east-1.aliyuncs.com',
    'us-west-1' = 'dataworks.us-west-1.aliyuncs.com',
    'cn-hangzhou-finance' = 'dataworks.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'dataworks.aliyuncs.com',
    'cn-shanghai-finance-1' = 'dataworks.aliyuncs.com',
    'cn-north-2-gov-1' = 'dataworks.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('dataworks-public', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model Catalog {
  comment?: string(name='Comment'),
  createTime?: long(name='CreateTime'),
  id?: string(name='Id'),
  modifyTime?: long(name='ModifyTime'),
  name?: string(name='Name'),
  parentMetaEntityId?: string(name='ParentMetaEntityId'),
  type?: string(name='Type'),
}

model Column {
  businessMetadata?: {
    description?: string(name='Description', example='字段1的业务描述'),
  }(name='BusinessMetadata'),
  comment?: string(name='Comment', example='字段1'),
  foreignKey?: boolean(name='ForeignKey', example='false'),
  id?: string(name='Id', example='maxcompute-column:123456::test_project:default:test_tbl:col1'),
  name?: string(name='Name', example='col1'),
  partitionKey?: boolean(name='PartitionKey', example='false'),
  position?: int32(name='Position', example='1'),
  primaryKey?: boolean(name='PrimaryKey', example='false'),
  tableId?: string(name='TableId', example='maxcompute-table:123456::test_project:default:test_tbl'),
  type?: string(name='Type', example='bigint'),
}

model CrawlerType {
  displayName?: string(name='DisplayName', example='Data Lake Formation'),
  supportedEntityTypes?: [ 
    {
      optional?: boolean(name='Optional', example='如对于maxcompute-schema类型，schema层级是否存在可选（是否开启三层模型）'),
      parentSubType?: string(name='ParentSubType', example='database'),
      subType?: string(name='SubType', example='table'),
      type?: string(name='Type', example='dlf-table'),
    }
  ](name='SupportedEntityTypes'),
  type?: string(name='Type', example='dlf'),
}

model DataQualityEvaluationTask {
  dataSourceId?: long(name='DataSourceId', example='201'),
  description?: string(name='Description', example='This is a daily run data quality evaluation plan.'),
  hooks?: [ 
    {
      condition?: string(name='Condition', example='${severity} == "High" AND ${status} == "Critical"'),
      type?: string(name='Type', example='BlockTaskInstance'),
    }
  ](name='Hooks'),
  id?: long(name='Id', example='10001'),
  name?: string(name='Name', example='质量校验任务'),
  notifications?: [ 
    {
      condition?: string(name='Condition', example='${blockType} == "Strong"'),
      notifications?: [ 
        {
          notificationChannels?: [ 
            {
              channels?: [ string ](name='Channels'),
            }
          ](name='NotificationChannels'),
          notificationReceivers?: [ 
            {
              extension?: string(name='Extension', example='{"atAll":"true"}'),
              receiverType?: string(name='ReceiverType', example='AliUid'),
              receiverValues?: [ string ](name='ReceiverValues'),
            }
          ](name='NotificationReceivers'),
        }
      ](name='Notifications'),
    }
  ](name='Notifications'),
  projectId?: long(name='ProjectId', example='100'),
  runtimeConf?: string(name='RuntimeConf', example='{ "queue": "default", "sqlEngine": "SPARK_SQL" }'),
  target?: {
    databaseType?: string(name='DatabaseType', example='maxcompute'),
    partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
    tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
    type?: string(name='Type', example='Table'),
  }(name='Target'),
  tenantId?: long(name='TenantId', example='10'),
  trigger?: {
    taskIds?: [ long ](name='TaskIds'),
    type?: string(name='Type', example='ByScheduledTaskInstance'),
  }(name='Trigger'),
}

model DataQualityEvaluationTaskInstance {
  createTime?: long(name='CreateTime', example='1710239005403'),
  finishTime?: long(name='FinishTime', example='1710239005403'),
  id?: long(name='Id', example='10001'),
  status?: string(name='Status', example='Passed'),
  task?: {
    dataSourceId?: long(name='DataSourceId', example='201'),
    hooks?: [ 
      {
        condition?: string(name='Condition', example='${severity} == "High" AND ${status} == "Critical"'),
        type?: string(name='Type', example='BlockTaskInstance'),
      }
    ](name='Hooks'),
    id?: long(name='Id', example='10001'),
    name?: string(name='Name', example='质量校验任务'),
    notifications?: [ 
      {
        condition?: string(name='Condition', example='${blockType} == "Strong"'),
        notifications?: [ 
          {
            notificationChannels?: [ 
              {
                channels?: [ string ](name='Channels'),
              }
            ](name='NotificationChannels'),
            notificationReceivers?: [ 
              {
                extension?: string(name='Extension', example='{"atAll":"true"}'),
                receiverType?: string(name='ReceiverType', example='AliUid'),
                receiverValues?: [ string ](name='ReceiverValues'),
              }
            ](name='NotificationReceivers'),
          }
        ](name='Notifications'),
      }
    ](name='Notifications'),
    projectId?: long(name='ProjectId'),
    runtimeConf?: string(name='RuntimeConf', example='{ "queue": "default", "sqlEngine": "SPARK_SQL" }'),
    target?: {
      databaseType?: string(name='DatabaseType', example='maxcompute'),
      partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
      tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
      type?: string(name='Type', example='Table'),
    }(name='Target'),
    tenantId?: long(name='TenantId'),
    trigger?: {
      taskIds?: [ long ](name='TaskIds'),
      type?: string(name='Type', example='ByScheduledTaskInstance'),
    }(name='Trigger'),
  }(name='Task'),
}

model DataQualityResult {
  details?: [ 
    {
      checkedValue?: string(name='CheckedValue', example='100.0'),
      referencedValue?: string(name='ReferencedValue', example='0.0'),
      status?: string(name='Status', example='Passed'),
    }
  ](name='Details'),
  id?: long(name='Id', example='10001'),
  rule?: {
    checkingConfig?: {
      referencedSamplesFilter?: string(name='ReferencedSamplesFilter', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
      thresholds?: {
        critical?: {
          operator?: string(name='Operator', example='>'),
          value?: string(name='Value', example='100.0'),
        }(name='Critical'),
        expected?: {
          operator?: string(name='Operator', example='>'),
          value?: string(name='Value', example='100.0'),
        }(name='Expected'),
        warned?: {
          operator?: string(name='Operator', example='>'),
          value?: string(name='Value', example='100.0'),
        }(name='Warned'),
      }(name='Thresholds'),
      type?: string(name='Type', example='Fixed'),
    }(name='CheckingConfig'),
    description?: string(name='Description', example='this is a odps _sql task'),
    enabled?: boolean(name='Enabled', example='true'),
    errorHandlers?: [ 
      {
        errorDataFilter?: string(name='ErrorDataFilter', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
        type?: string(name='Type', example='SaveErrorData'),
      }
    ](name='ErrorHandlers'),
    id?: long(name='Id', example='100001'),
    name?: string(name='Name', example='表不能为空'),
    projectId?: long(name='ProjectId', example='100'),
    samplingConfig?: {
      metric?: string(name='Metric', example='Min'),
      metricParameters?: string(name='MetricParameters', example='{ "Columns": [ "id", "name" ] }'),
      samplingFilter?: string(name='SamplingFilter', example='id IS NULL'),
      settingConfig?: string(name='SettingConfig', example='SET odps.sql.udf.timeout=600s;'),
    }(name='SamplingConfig'),
    severity?: string(name='Severity', example='High'),
    target?: {
      databaseType?: string(name='DatabaseType', example='maxcompute'),
      partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
      tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
      type?: string(name='Type', example='Table'),
    }(name='Target'),
    templateCode?: string(name='TemplateCode', example='SYSTEM:user_defined_sql'),
    tenantId?: long(name='TenantId', example='1'),
  }(name='Rule'),
  sample?: string(name='Sample', example='[   {     "gender": "male",     "_count": 100   }, {     "gender": "female",     "_count": 100   } ]'),
  status?: string(name='Status', example='Passed'),
  taskInstanceId?: long(name='TaskInstanceId', example='20001'),
}

model DataQualityRule {
  checkingConfig?: {
    referencedSamplesFilter?: string(name='ReferencedSamplesFilter', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
    thresholds?: {
      critical?: {
        expression?: string(name='Expression', example='波动率类型规则使用，通过表达式来表示波动阈值。如：波动上升大于0.01： $checkValue > 0.01  波动下降大于0.01：$checkValue < -0.01   波动率绝对值：abs($checkValue) > 0.01'),
        operator?: string(name='Operator', example='>'),
        value?: string(name='Value', example='100.0'),
      }(name='Critical'),
      expected?: {
        expression?: string(name='Expression', example='波动率类型规则使用，通过表达式来表示波动阈值。如：波动上升大于0.01： $checkValue > 0.01  波动下降大于0.01：$checkValue < -0.01   波动率绝对值：abs($checkValue) > 0.01'),
        operator?: string(name='Operator', example='>'),
        value?: string(name='Value', example='100.0'),
      }(name='Expected'),
      warned?: {
        expression?: string(name='Expression', example='波动率类型规则使用，通过表达式来表示波动阈值。如：波动上升大于0.01： $checkValue > 0.01  波动下降大于0.01：$checkValue < -0.01   波动率绝对值：abs($checkValue) > 0.01'),
        operator?: string(name='Operator', example='>'),
        value?: string(name='Value', example='100.0'),
      }(name='Warned'),
    }(name='Thresholds'),
    type?: string(name='Type', example='Fixed'),
  }(name='CheckingConfig'),
  description?: string(name='Description', example='this is a odps _sql task'),
  enabled?: boolean(name='Enabled', example='true'),
  errorHandlers?: [ 
    {
      errorDataFilter?: string(name='ErrorDataFilter', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
      type?: string(name='Type', example='SaveErrorData'),
    }
  ](name='ErrorHandlers'),
  id?: long(name='Id', example='1'),
  name?: string(name='Name', example='表不能为空'),
  projectId?: long(name='ProjectId', example='100'),
  samplingConfig?: {
    metric?: string(name='Metric', example='Min'),
    metricParameters?: string(name='MetricParameters', example='{ "Columns": [ "id", "name" ] }'),
    samplingFilter?: string(name='SamplingFilter', example='id IS NULL'),
    settingConfig?: string(name='SettingConfig', example='SET odps.sql.udf.timeout=600s;'),
  }(name='SamplingConfig'),
  severity?: string(name='Severity', example='High'),
  target?: {
    databaseType?: string(name='DatabaseType', example='maxcompute'),
    partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
    tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
    type?: string(name='Type', example='Table'),
  }(name='Target'),
  templateCode?: string(name='TemplateCode', example='SYSTEM:user_defined_sql'),
  tenantId?: long(name='TenantId', example='1'),
}

model DataQualityRuleTemplate {
  checkingConfig?: {
    referencedSamplesFilter?: string(name='ReferencedSamplesFilter', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
    type?: string(name='Type', example='Fixed'),
  }(name='CheckingConfig'),
  code?: string(name='Code'),
  directoryPath?: string(name='DirectoryPath', example='/ods/订单数据'),
  name?: string(name='Name'),
  projectId?: long(name='ProjectId'),
  samplingConfig?: {
    metric?: string(name='Metric', example='Min'),
    metricParameters?: string(name='MetricParameters', example='{ "SQL": "SELECT min(id) from table;" }'),
    settingConfig?: string(name='SettingConfig', example='SET odps.sql.udf.timeout=600s;'),
  }(name='SamplingConfig'),
  tenantId?: long(name='TenantId'),
  visibleScope?: string(name='VisibleScope', example='Project'),
}

model Database {
  comment?: string(name='Comment', example='test comment'),
  createTime?: long(name='CreateTime', example='1736852168000'),
  id?: string(name='Id', example='holo-database:h-xxxx::test_db'),
  locationUri?: string(name='LocationUri', example='oss://test-bucket/test_db'),
  modifyTime?: long(name='ModifyTime', example='1736852168000'),
  name?: string(name='Name', example='test_db'),
  parentMetaEntityId?: string(name='ParentMetaEntityId', example='holo:h-xxxx'),
}

model LineageEntity {
  attributes?: map[string]string(name='Attributes', example='{"key1":"value1"}'),
  id?: string(name='Id', example='maxcompute-table:123456::test_project::test_tbl'),
  name?: string(name='Name', example='test_tbl'),
}

model LineageRelationship {
  createTime?: long(name='CreateTime', example='1743040581000'),
  dstEntity?: LineageEntity(name='DstEntity'),
  id?: string(name='Id', example='maxcompute-table.p.table:custom-table.xxx:custom-sql.123'),
  srcEntity?: LineageEntity(name='SrcEntity'),
  task?: LineageTask(name='Task'),
}

model LineageTask {
  attributes?: map[string]string(name='Attributes'),
  id?: string(name='Id', example='12345'),
  type?: string(name='Type', example='custom-sql'),
}

model Partition {
  createTime?: long(name='CreateTime', example='1700192563000'),
  dataSize?: long(name='DataSize', example='4096'),
  modifyTime?: long(name='ModifyTime', example='1700192563000'),
  name?: string(name='Name', example='ds=20250101'),
  recordCount?: long(name='RecordCount', example='1000000'),
  tableId?: string(name='TableId', example='maxcompute-table:accountId::project::table'),
}

model Schema {
  comment?: string(name='Comment', example='test comment'),
  createTime?: long(name='CreateTime', example='1736852168000'),
  id?: string(name='Id', example='maxcompute-schema:123456::test_project:default'),
  modifyTime?: long(name='ModifyTime', example='1736852168000'),
  name?: string(name='Name', example='test_db'),
  parentMetaEntityId?: string(name='ParentMetaEntityId', example='maxcompute-project:123456::test_project'),
  type?: string(name='Type', example='MANAGED'),
}

model Table {
  businessMetadata?: {
    categories?: [[ 
      {
        id?: string(name='Id', example='CATEGORY.456'),
        name?: string(name='Name', example='测试类目'),
        parentId?: string(name='ParentId', example='CATEGORY.123'),
      }
    ]    ](name='Categories'),
    extension?: {
      envType?: string(name='EnvType', example='Dev'),
      favorCount?: long(name='FavorCount', example='0'),
      projectId?: long(name='ProjectId', example='234'),
      readCount?: long(name='ReadCount', example='0'),
      viewCount?: long(name='ViewCount', example='0'),
    }(name='Extension'),
    readme?: string(name='Readme', example='## 使用说明'),
    tags?: [ 
      {
        key?: string(name='Key', example='tag_key'),
        value?: string(name='Value', example='tag_value', nullable=true),
      }
    ](name='Tags'),
    upstreamTasks?: [ 
      {
        id?: long(name='Id', example='123456'),
        name?: string(name='Name', example='test_task'),
      }
    ](name='UpstreamTasks'),
  }(name='BusinessMetadata'),
  comment?: string(name='Comment', example='测试表'),
  createTime?: long(name='CreateTime', example='1736852168000'),
  id?: string(name='Id', example='maxcompute-table:123456::test_project::test_tbl'),
  modifyTime?: long(name='ModifyTime', example='1736852168000'),
  name?: string(name='Name', example='test_tbl'),
  parentMetaEntityId?: string(name='ParentMetaEntityId', example='maxcompute-project:123456::test_project'),
  partitionKeys?: [ string ](name='PartitionKeys'),
  tableType?: string(name='TableType', example='TABLE'),
  technicalMetadata?: {
    compressed?: boolean(name='Compressed', example='false'),
    inputFormat?: string(name='InputFormat', example='org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat'),
    location?: string(name='Location', example='oss://test-bucket/test_tbl'),
    outputFormat?: string(name='OutputFormat', example='org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat'),
    owner?: string(name='Owner', example='123456789'),
    parameters?: map[string]string(name='Parameters'),
    serializationLibrary?: string(name='SerializationLibrary', example='org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe'),
  }(name='TechnicalMetadata'),
}

model SuccessInfoValue = {
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
  message?: string(name='Message', description='The error message.', example='The task does not exist.'),
}

model AbolishPipelineRunRequest {
  id?: string(name='Id', description='The ID of the process.

This parameter is required.', example='1606087c-9ac4-43f0-83a8-0b5ced21XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model AbolishPipelineRunResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='55D786C9-DD57-524D-884C-C5239278XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model AbolishPipelineRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AbolishPipelineRunResponseBody(name='body'),
}

/**
 * @summary Terminates the process for deploying or undeploying an entity. The process is not deleted and can still be queried by calling query operations.
 *
 * @param request AbolishPipelineRunRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AbolishPipelineRunResponse
 */
async function abolishPipelineRunWithOptions(request: AbolishPipelineRunRequest, runtime: Util.RuntimeOptions): AbolishPipelineRunResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AbolishPipelineRun',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Terminates the process for deploying or undeploying an entity. The process is not deleted and can still be queried by calling query operations.
 *
 * @param request AbolishPipelineRunRequest
 * @return AbolishPipelineRunResponse
 */
async function abolishPipelineRun(request: AbolishPipelineRunRequest): AbolishPipelineRunResponse {
  var runtime = new Util.RuntimeOptions{};
  return abolishPipelineRunWithOptions(request, runtime);
}

model AddEntityIntoMetaCollectionRequest {
  id?: string(name='Id', description='The entity ID. Currently, entities can only be tables. You can call the ListTables operation to query the ID.

This parameter is required.', example='maxcompute-table'),
  metaCollectionId?: string(name='MetaCollectionId', description='The collection ID. You can call the ListMetaCollections operation to query the ID.

This parameter is required.', example='category.123'),
  remark?: string(name='Remark'),
}

model AddEntityIntoMetaCollectionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='C99E2BE6-9DEA-5C2E-8F51-1DDCFEADE490'),
}

model AddEntityIntoMetaCollectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddEntityIntoMetaCollectionResponseBody(name='body'),
}

/**
 * @summary 从集合中移除实体对象
 *
 * @param request AddEntityIntoMetaCollectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddEntityIntoMetaCollectionResponse
 */
async function addEntityIntoMetaCollectionWithOptions(request: AddEntityIntoMetaCollectionRequest, runtime: Util.RuntimeOptions): AddEntityIntoMetaCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.metaCollectionId)) {
    query['MetaCollectionId'] = request.metaCollectionId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddEntityIntoMetaCollection',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 从集合中移除实体对象
 *
 * @param request AddEntityIntoMetaCollectionRequest
 * @return AddEntityIntoMetaCollectionResponse
 */
async function addEntityIntoMetaCollection(request: AddEntityIntoMetaCollectionRequest): AddEntityIntoMetaCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return addEntityIntoMetaCollectionWithOptions(request, runtime);
}

model AssociateProjectToResourceGroupRequest {
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace with which you want to associate the resource group.

This parameter is required.', example='1000'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
}

model AssociateProjectToResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model AssociateProjectToResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateProjectToResourceGroupResponseBody(name='body'),
}

/**
 * @summary Associates a resource group with a workspace.
 *
 * @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 * 2.  Your account must be assigned one of the following roles of the desired workspace:
 * *   Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request AssociateProjectToResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AssociateProjectToResourceGroupResponse
 */
async function associateProjectToResourceGroupWithOptions(request: AssociateProjectToResourceGroupRequest, runtime: Util.RuntimeOptions): AssociateProjectToResourceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AssociateProjectToResourceGroup',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Associates a resource group with a workspace.
 *
 * @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 * 2.  Your account must be assigned one of the following roles of the desired workspace:
 * *   Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request AssociateProjectToResourceGroupRequest
 * @return AssociateProjectToResourceGroupResponse
 */
async function associateProjectToResourceGroup(request: AssociateProjectToResourceGroupRequest): AssociateProjectToResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateProjectToResourceGroupWithOptions(request, runtime);
}

model AttachDataQualityRulesToEvaluationTaskRequest {
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', description='The ID of the data quality monitoring task that is associated with the rule.

This parameter is required.', example='200001'),
  dataQualityRuleIds?: [ long ](name='DataQualityRuleIds', description='The IDs of the monitoring rules.

This parameter is required.'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model AttachDataQualityRulesToEvaluationTaskShrinkRequest {
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', description='The ID of the data quality monitoring task that is associated with the rule.

This parameter is required.', example='200001'),
  dataQualityRuleIdsShrink?: string(name='DataQualityRuleIds', description='The IDs of the monitoring rules.

This parameter is required.'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model AttachDataQualityRulesToEvaluationTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='E6F0DBDD-5AD8-4870-A6A0'),
  success?: boolean(name='Success', description='The value of the association is as follows:
- true: The call is successful.
- false: the call failed.', example='true'),
}

model AttachDataQualityRulesToEvaluationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachDataQualityRulesToEvaluationTaskResponseBody(name='body'),
}

/**
 * @summary Associates monitoring rules with a data quality monitoring task.
 *
 * @param tmpReq AttachDataQualityRulesToEvaluationTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AttachDataQualityRulesToEvaluationTaskResponse
 */
async function attachDataQualityRulesToEvaluationTaskWithOptions(tmpReq: AttachDataQualityRulesToEvaluationTaskRequest, runtime: Util.RuntimeOptions): AttachDataQualityRulesToEvaluationTaskResponse {
  Util.validateModel(tmpReq);
  var request = new AttachDataQualityRulesToEvaluationTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dataQualityRuleIds)) {
    request.dataQualityRuleIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataQualityRuleIds, 'DataQualityRuleIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dataQualityEvaluationTaskId)) {
    body['DataQualityEvaluationTaskId'] = request.dataQualityEvaluationTaskId;
  }
  if (!Util.isUnset(request.dataQualityRuleIdsShrink)) {
    body['DataQualityRuleIds'] = request.dataQualityRuleIdsShrink;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AttachDataQualityRulesToEvaluationTask',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Associates monitoring rules with a data quality monitoring task.
 *
 * @param request AttachDataQualityRulesToEvaluationTaskRequest
 * @return AttachDataQualityRulesToEvaluationTaskResponse
 */
async function attachDataQualityRulesToEvaluationTask(request: AttachDataQualityRulesToEvaluationTaskRequest): AttachDataQualityRulesToEvaluationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachDataQualityRulesToEvaluationTaskWithOptions(request, runtime);
}

model BatchUpdateTasksRequest {
  comment?: string(name='Comment', description='The remarks.', example='this is a comment'),
  tasks?: [ 
    {
      dataSource?: {
        name?: string(name='Name', description='The name of the data source.', example='odps_test'),
      }(name='DataSource', description='The information about the associated data source.'),
      description?: string(name='Description', description='The description.', example='test'),
      envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
      id?: long(name='Id', description='The task ID.

This parameter is required.', example='1234'),
      name?: string(name='Name', description='The name.', example='SQL node'),
      owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
      rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: seconds.', example='60'),
      rerunMode?: string(name='RerunMode', description='The rerun mode. Valid values:

*   AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.
*   AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to run.', example='AllAllowed'),
      rerunTimes?: int32(name='RerunTimes', description='The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.', example='3'),
      runtimeResource?: {
        cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
        image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
      }(name='RuntimeResource', description='The configurations of the runtime environment, such as the resource group information.'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.

This parameter is required.', example='key1'),
          value?: string(name='Value', description='The tag value.', example='value1'),
        }
      ](name='Tags', description='The tags.'),
      timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='3600'),
      trigger?: {
        cron?: string(name='Cron', description='The CRON expression. This parameter takes effect only if the Type parameter is set to Scheduler.', example='00 00 00 * * ?'),
        endTime?: string(name='EndTime', description='The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler. The value of this parameter is in the `yyyy-mm-dd hh:mm:ss`.', example='9999-01-01 00:00:00'),
        recurrence?: string(name='Recurrence', description='The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler. Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
        startTime?: string(name='StartTime', description='The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler. The value of this parameter is in the `yyyy-mm-dd hh:mm:ss`.', example='1970-01-01 00:00:00'),
        type?: string(name='Type', description='The trigger type. Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
      }(name='Trigger', description='The trigger method.'),
    }
  ](name='Tasks', description='The tasks.'),
}

model BatchUpdateTasksShrinkRequest {
  comment?: string(name='Comment', description='The remarks.', example='this is a comment'),
  tasksShrink?: string(name='Tasks', description='The tasks.'),
}

model BatchUpdateTasksResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo', description='The result of the batch operation, which is in the MAP structure. The task ID serves as a key, and the result serves as a value.'),
}

model BatchUpdateTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchUpdateTasksResponseBody(name='body'),
}

/**
 * @summary Performs incremental updates on multiple tasks at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq BatchUpdateTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchUpdateTasksResponse
 */
async function batchUpdateTasksWithOptions(tmpReq: BatchUpdateTasksRequest, runtime: Util.RuntimeOptions): BatchUpdateTasksResponse {
  Util.validateModel(tmpReq);
  var request = new BatchUpdateTasksShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tasks)) {
    request.tasksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tasks, 'Tasks', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.tasksShrink)) {
    body['Tasks'] = request.tasksShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchUpdateTasks',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Performs incremental updates on multiple tasks at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request BatchUpdateTasksRequest
 * @return BatchUpdateTasksResponse
 */
async function batchUpdateTasks(request: BatchUpdateTasksRequest): BatchUpdateTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUpdateTasksWithOptions(request, runtime);
}

model CloneDataSourceRequest {
  cloneDataSourceName?: string(name='CloneDataSourceName', description='The name of the destination data source The name can contain letters, digits, and underscores (_), and must start with a letter. It cannot exceed 60 characters in length.

This parameter is required.', example='demo_holo_datasource'),
  id?: long(name='Id', description='The data source ID.

This parameter is required.', example='16036'),
}

model CloneDataSourceResponseBody = {
  id?: long(name='Id', description='The ID of the cloned data source.', example='19715'),
  requestId?: string(name='RequestId', description='The ID of the request. It is used to locate logs and troubleshoot problems.', example='FCD583B9-346B-5E75-82C1-4A7C192C48DB'),
}

model CloneDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloneDataSourceResponseBody(name='body'),
}

/**
 * @summary Clones an existing data source.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request CloneDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CloneDataSourceResponse
 */
async function cloneDataSourceWithOptions(request: CloneDataSourceRequest, runtime: Util.RuntimeOptions): CloneDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cloneDataSourceName)) {
    query['CloneDataSourceName'] = request.cloneDataSourceName;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CloneDataSource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Clones an existing data source.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request CloneDataSourceRequest
 * @return CloneDataSourceResponse
 */
async function cloneDataSource(request: CloneDataSourceRequest): CloneDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return cloneDataSourceWithOptions(request, runtime);
}

model CreateAlertRuleRequest {
  enabled?: boolean(name='Enabled', description='Indicates whether the rule is enabled.

This parameter is required.', example='true'),
  name?: string(name='Name', description='The name of the rule.

This parameter is required.', example='xm_create_test'),
  notification?: {
    channels?: [ string ](name='Channels', description='The alert notification channels.

This parameter is required.'),
    intervalInMinutes?: int32(name='IntervalInMinutes', description='The interval at which an alert notification is sent. Unit: minutes. Valid values: [5,10000].', example='30'),
    maximum?: int32(name='Maximum', description='The maximum number of times an alert notification can be sent within a calendar day. Valid values: [1, 10000].', example='3'),
    receivers?: [ 
      {
        extension?: string(name='Extension', description='The additional configuration of the alert recipient. If the ReceiverType parameter is set to DingdingUrl, you can set this parameter to {"atAll":true} to remind all members in a DingTalk group.', example='{"atAll":true}'),
        receiverType?: string(name='ReceiverType', description='The type of the alert recipient. Valid valves:

*   AliUid: Alibaba Cloud account ID.
*   Shift Schedules: the personnel in a shift schedule.
*   TaskOwner: the task owner. The task owner can receive custom alerts and event alerts.
*   Owner: the baseline owner. The baseline owner can receive baseline alerts.
*   WebhookUrl: URL of a custom webhook.
*   DingdingUrl: DingTalk webhook URL.
*   FeishuUrl: Lark webhook URL.
*   WeixinUrl: WeCom webhook URL.', example='TaskOwner'),
        receiverValues?: [ string ](name='ReceiverValues', description='The ID of the alert recipient.'),
      }
    ](name='Receivers', description='The alert recipients.

This parameter is required.'),
    silenceEndTime?: string(name='SilenceEndTime', description='The end time for silence. The time is in the HH:mm format.', example='00:00:00'),
    silenceStartTime?: string(name='SilenceStartTime', description='The start time for silence. The time is in the HH:mm format.', example='00:00:00'),
  }(name='Notification', description='The configuration for the alert notification.'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the owner of the rule.

This parameter is required.', example='279114181716147735'),
  triggerCondition?: {
    extension?: {
      cycleUnfinished?: {
        cycleAndTime?: [ 
          {
            cycleId?: int32(name='CycleId', description='The ID of the scheduling cycle of the instance. Valid values: [1,288].', example='1'),
            time?: string(name='Time', description='The latest completion time of the instance within the scheduling cycle. The time is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='12:00'),
          }
        ](name='CycleAndTime', description='The configurations of the scheduling cycle and timeout period of the instance.'),
      }(name='CycleUnfinished', description='The configuration for an alert of the CycleUnfinished type.'),
      error?: {
        autoRerunAlertEnabled?: boolean(name='AutoRerunAlertEnabled', description='Specifies whether to trigger an alert if a batch synchronization task is automatically rerun upon a failure.', example='false'),
        streamTaskIds?: [ long ](name='StreamTaskIds', description='The IDs of the real-time computing tasks. This parameter is required when you monitor real-time computing tasks.'),
      }(name='Error', description='The configuration for an alert of the Error type.'),
      instanceErrorCount?: {
        count?: int32(name='Count', description='The maximum number of instances on which an error occurs. Valid values: [1,10000].', example='5'),
      }(name='InstanceErrorCount', description='The configuration for an alert of the InstanceErrorCount type.'),
      instanceErrorPercentage?: {
        percentage?: int32(name='Percentage', description='The maximum percentage of instances on which an error occurs in the workspace to the total number of instances. Valid values: [1-100].', example='5'),
      }(name='InstanceErrorPercentage', description='The configuration for an alert of the InstanceErrorPercentage type.'),
      instanceTransferFluctuate?: {
        percentage?: int32(name='Percentage', description='The maximum percentage of fluctuation in the number of auto triggered node instances that are generated in your workspace. Valid values: [1-100].', example='10'),
        trend?: string(name='Trend', description='The way in which the number of auto triggered node instances that are generated in your workspace fluctuates. Valid values:

*   abs: the absolute value. The number of instances increases or decreases.
*   increase: The number of instances increases.
*   decrease: The number of instances decreases.', example='abs'),
      }(name='InstanceTransferFluctuate', description='The configuration for an alert of the InstanceTransferFluctuate type.'),
      timeout?: {
        timeoutInMinutes?: int32(name='TimeoutInMinutes', description='The timeout period. Unit: minutes. Valid values: [1, 21600].', example='10'),
      }(name='Timeout', description='The configuration for an alert of the Timeout type.'),
      unFinished?: {
        unFinishedTime?: string(name='UnFinishedTime', description='The latest completion time of the instance. The period is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='30:00'),
      }(name='UnFinished', description='The configuration for an alert of the UnFinished type.'),
    }(name='Extension', description='The extended information about the rule. This parameter is required for specific types of alerts.'),
    target?: {
      allowTasks?: [ long ](name='AllowTasks', description='The nodes that are not to be monitored.'),
      ids?: [ long ](name='Ids', description='The IDs of monitored objects.'),
      type?: string(name='Type', description='The type of the monitored objects. Valid values:

*   Task: node
*   Baseline: baseline
*   Project: workspace
*   BizProcess: workflow', example='Task'),
    }(name='Target', description='The monitored objects.'),
    type?: string(name='Type', description='The alert type. Valid values:

*   Finished: An instance is successfully run.
*   UnFinished: An instance does not finish running before a specified point in time.
*   Error: An error occurs on an instance.
*   CycleUnfinished: An instance does not finish running as expected within a specific cycle.
*   Timeout: An instance times out.
*   InstanceTransferComplete: An instance is generated by the auto triggered node.
*   InstanceTransferFluctuate: The number of generated instances fluctuates.
*   ExhaustedError: An error persists after an instance is automatically rerun.
*   InstanceKeyword: An instance with errors contains specified keywords.
*   InstanceErrorCount: The number of instances on which an error occurs reaches a specified threshold.
*   InstanceErrorPercentage: The proportion of instances on which an error occurs in the workspace to the total number of instances reaches a specified threshold.
*   ResourceGroupPercentage: The usage rate of the resource group reaches a specified threshold.
*   ResourceGroupWaitCount: The number of instances that are waiting for resources in the resource group reaches a specified threshold.', example='Error'),
  }(name='TriggerCondition', description='The alert triggering condition.

This parameter is required.'),
}

model CreateAlertRuleShrinkRequest {
  enabled?: boolean(name='Enabled', description='Indicates whether the rule is enabled.

This parameter is required.', example='true'),
  name?: string(name='Name', description='The name of the rule.

This parameter is required.', example='xm_create_test'),
  notificationShrink?: string(name='Notification', description='The configuration for the alert notification.'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the owner of the rule.

This parameter is required.', example='279114181716147735'),
  triggerConditionShrink?: string(name='TriggerCondition', description='The alert triggering condition.

This parameter is required.'),
}

model CreateAlertRuleResponseBody = {
  id?: long(name='Id', description='The rule ID.', example='123123'),
  requestId?: string(name='RequestId', description='The request ID.', example='A6C6B486-E3A2-5D52-9E76-D9380485D946'),
}

model CreateAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAlertRuleResponseBody(name='body'),
}

/**
 * @summary Creates a custom monitoring alert rule.
 *
 * @param tmpReq CreateAlertRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAlertRuleResponse
 */
async function createAlertRuleWithOptions(tmpReq: CreateAlertRuleRequest, runtime: Util.RuntimeOptions): CreateAlertRuleResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAlertRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.notification)) {
    request.notificationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notification, 'Notification', 'json');
  }
  if (!Util.isUnset(tmpReq.triggerCondition)) {
    request.triggerConditionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.triggerCondition, 'TriggerCondition', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.notificationShrink)) {
    query['Notification'] = request.notificationShrink;
  }
  if (!Util.isUnset(request.owner)) {
    query['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.triggerConditionShrink)) {
    query['TriggerCondition'] = request.triggerConditionShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAlertRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a custom monitoring alert rule.
 *
 * @param request CreateAlertRuleRequest
 * @return CreateAlertRuleResponse
 */
async function createAlertRule(request: CreateAlertRuleRequest): CreateAlertRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAlertRuleWithOptions(request, runtime);
}

model CreateBusinessRequest {
  businessName?: string(name='BusinessName', description='This parameter is required.', example='My business process'),
  description?: string(name='Description'),
  owner?: string(name='Owner', example='1000000000001'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
  useType?: string(name='UseType', example='NORMAL'),
}

model CreateBusinessResponseBody = {
  businessId?: long(name='BusinessId', example='100001'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model CreateBusinessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBusinessResponseBody(name='body'),
}

/**
 * @param request CreateBusinessRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateBusinessResponse
 */
async function createBusinessWithOptions(request: CreateBusinessRequest, runtime: Util.RuntimeOptions): CreateBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessName)) {
    body['BusinessName'] = request.businessName;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.useType)) {
    body['UseType'] = request.useType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateBusiness',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateBusinessRequest
 * @return CreateBusinessResponse
 */
async function createBusiness(request: CreateBusinessRequest): CreateBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBusinessWithOptions(request, runtime);
}

model CreateComponentRequest {
  clientToken?: string(name='ClientToken', example='1AFAE64E-D1BE-432B-A9****'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='10000'),
  spec?: string(name='Spec', description='This parameter is required.', example='{
    "kind": "Component",
    "name": "com1",
    "spec": {
        "components": [
            {
                "name": "test11",
                "id": "1234",
                "owner": "1234456",
                "description": "",
                "script": {
                    "language": "odps-sql",
                    "path": "test11",
                    "content": "select \\\\"@@{bizdate}\\\\", \\\\"@@{my_input_table}\\\\"",
                    "runtime": {
                        "command": "SQL_COMPONENT"
                    }
                },
                "inputs": [
                    {
                        "name": "bizdate",
                        "type": "string"
                    },
                    {
                        "name": "my_input_table",
                        "type": "string"
                    }
                ],
                "outputs": [
                    {
                        "name": "my_output_table1",
                        "type": "string"
                    }
                ]
            }
        ]
    }
}'),
}

model CreateComponentResponseBody = {
  componentId?: string(name='ComponentId', example='123123123123123'),
  requestId?: string(name='RequestId', description='Id of the request', example='adssd****'),
}

model CreateComponentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateComponentResponseBody(name='body'),
}

/**
 * @summary 创建组件
 *
 * @param request CreateComponentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateComponentResponse
 */
async function createComponentWithOptions(request: CreateComponentRequest, runtime: Util.RuntimeOptions): CreateComponentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateComponent',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建组件
 *
 * @param request CreateComponentRequest
 * @return CreateComponentResponse
 */
async function createComponent(request: CreateComponentRequest): CreateComponentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createComponentWithOptions(request, runtime);
}

model CreateDIAlarmRuleRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='ABFUOEUOTRTRJKE'),
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task with which the alert rule is associated.

This parameter is required.', example='1'),
  description?: string(name='Description', description='The description of the alert rule.', example='The description of the alert rule.'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the alert rule. By default, the alert rule is disabled.', example='true'),
  metricType?: string(name='MetricType', description='The metric type in the alert rule. Valid values:

*   Heartbeat
*   FailoverCount
*   Delay
*   DdlReport
*   ResourceUtilization

This parameter is required.', example='Heartbeat'),
  name?: string(name='Name', description='The name of the alert rule.

This parameter is required.', example='alartRule'),
  notificationSettings?: {
    inhibitionInterval?: int32(name='InhibitionInterval', description='This parameter is deprecated and replaced by the MuteInterval parameter.', example='5', deprecated=true),
    muteInterval?: int32(name='MuteInterval', description='The duration of the alert suppression interval. Default value: 5. Unit: minutes.', example='5'),
    notificationChannels?: [ 
      {
        channels?: [ string ](name='Channels', description='The alert notification method. Valid values:

*   Mail
*   Phone
*   Sms
*   Ding'),
        severity?: string(name='Severity', description='The severity level. Valid values:

*   Warning
*   Critical', example='Warning'),
      }
    ](name='NotificationChannels', description='The alert notification methods.'),
    notificationReceivers?: [ 
      {
        receiverType?: string(name='ReceiverType', description='The recipient type. Valid values: AliyunUid, DingToken, FeishuToken, and WebHookUrl.', example='DingToken'),
        receiverValues?: [ string ](name='ReceiverValues', description='The recipient.

*   If the ReceiverType parameter is set to AliyunUid, set this parameter to the Alibaba Cloud account ID of a user.
*   If the ReceiverType parameter is set to DingToken, set this parameter to the token of a DingTalk chatbot.'),
      }
    ](name='NotificationReceivers', description='The settings of alert notification recipients.'),
  }(name='NotificationSettings', description='The alert notification settings.

This parameter is required.'),
  triggerConditions?: [ 
    {
      ddlReportTags?: [ string ](name='DdlReportTags', description='This parameter is deprecated and replaced by the DdlTypes parameter.', deprecated=true),
      ddlTypes?: [ string ](name='DdlTypes', description='The types of DDL operations for which the alert rule takes effect.'),
      duration?: long(name='Duration', description='The time interval for alert calculation. Unit: minutes.', example='10'),
      severity?: string(name='Severity', description='The severity level. Valid values:

*   Warning
*   Critical', example='Warning'),
      threshold?: long(name='Threshold', description='The alert threshold.

*   If the alert rule is for task status, you do not need to specify a threshold.
*   If the alert rule is for failovers, you must specify the number of failovers.
*   If the alert rule is for latency, you must specify the latency duration, in seconds.', example='10'),
    }
  ](name='TriggerConditions', description='The conditions that can trigger the alert rule.

This parameter is required.'),
}

model CreateDIAlarmRuleShrinkRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='ABFUOEUOTRTRJKE'),
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task with which the alert rule is associated.

This parameter is required.', example='1'),
  description?: string(name='Description', description='The description of the alert rule.', example='The description of the alert rule.'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the alert rule. By default, the alert rule is disabled.', example='true'),
  metricType?: string(name='MetricType', description='The metric type in the alert rule. Valid values:

*   Heartbeat
*   FailoverCount
*   Delay
*   DdlReport
*   ResourceUtilization

This parameter is required.', example='Heartbeat'),
  name?: string(name='Name', description='The name of the alert rule.

This parameter is required.', example='alartRule'),
  notificationSettingsShrink?: string(name='NotificationSettings', description='The alert notification settings.

This parameter is required.'),
  triggerConditionsShrink?: string(name='TriggerConditions', description='The conditions that can trigger the alert rule.

This parameter is required.'),
}

model CreateDIAlarmRuleResponseBody = {
  DIAlarmRuleId?: string(name='DIAlarmRuleId', description='This parameter is deprecated and is replaced by the Id parameter.', example='1', deprecated=true),
  id?: long(name='Id', description='The ID of the alert rule.', example='1'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='C636A747-7E4E-594D-94CD-2B4F8A9A9A63'),
}

model CreateDIAlarmRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDIAlarmRuleResponseBody(name='body'),
}

/**
 * @summary Creates an alert rule for a synchronization task.
 *
 * @param tmpReq CreateDIAlarmRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDIAlarmRuleResponse
 */
async function createDIAlarmRuleWithOptions(tmpReq: CreateDIAlarmRuleRequest, runtime: Util.RuntimeOptions): CreateDIAlarmRuleResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDIAlarmRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.notificationSettings)) {
    request.notificationSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notificationSettings, 'NotificationSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.triggerConditions)) {
    request.triggerConditionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.triggerConditions, 'TriggerConditions', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDIAlarmRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an alert rule for a synchronization task.
 *
 * @param request CreateDIAlarmRuleRequest
 * @return CreateDIAlarmRuleResponse
 */
async function createDIAlarmRule(request: CreateDIAlarmRuleRequest): CreateDIAlarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDIAlarmRuleWithOptions(request, runtime);
}

model CreateDIJobRequest {
  description?: string(name='Description'),
  destinationDataSourceSettings?: [ 
    {
      dataSourceName?: string(name='DataSourceName'),
    }
  ](name='DestinationDataSourceSettings', description='This parameter is required.'),
  destinationDataSourceType?: string(name='DestinationDataSourceType', description='The destination type. Valid values: Hologres, OSS-HDFS, OSS, MaxCompute, LogHub, StarRocks, DataHub, AnalyticDB for MySQL, Kafka, and Hive.

This parameter is required.', example='Hologres'),
  jobName?: string(name='JobName', description='This parameter is deprecated and is replaced by the Name parameter.', example='mysql_to_holo_sync_8772', deprecated=true),
  jobSettings?: {
    channelSettings?: string(name='ChannelSettings'),
    columnDataTypeSettings?: [ 
      {
        destinationDataType?: string(name='DestinationDataType'),
        sourceDataType?: string(name='SourceDataType'),
      }
    ](name='ColumnDataTypeSettings'),
    cycleScheduleSettings?: {
      cycleMigrationType?: string(name='CycleMigrationType'),
      scheduleParameters?: string(name='ScheduleParameters'),
    }(name='CycleScheduleSettings'),
    ddlHandlingSettings?: [ 
      {
        action?: string(name='Action'),
        type?: string(name='Type'),
      }
    ](name='DdlHandlingSettings'),
    runtimeSettings?: [ 
      {
        name?: string(name='Name'),
        value?: string(name='Value'),
      }
    ](name='RuntimeSettings'),
  }(name='JobSettings'),
  jobType?: string(name='JobType', description='The type of the synchronization task. Valid values:

*   DatabaseRealtimeMigration: A real-time synchronization task used to synchronize only full data, only incremental data, or full and incremental data in multiple tables of multiple databases in the source.
*   DatabaseOfflineMigration: A batch synchronization task used to synchronize only full data, only incremental data, or full and incremental data in multiple tables of multiple databases in the source.
*   SingleTableRealtimeMigration: A real-time synchronization task used to synchronize data only in a single table in the source.', example='DatabaseRealtimeMigration'),
  migrationType?: string(name='MigrationType', description='The synchronization type. Valid values:

*   FullAndRealtimeIncremental
*   RealtimeIncremental
*   Full
*   OfflineIncremental
*   FullAndOfflineIncremental

This parameter is required.', example='FullAndRealtimeIncremental'),
  name?: string(name='Name', description='The name of the synchronization task.', example='mysql_to_holo_sync_8772'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000'),
  resourceSettings?: {
    offlineResourceSettings?: {
      requestedCu?: double(name='RequestedCu'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier'),
    }(name='OfflineResourceSettings'),
    realtimeResourceSettings?: {
      requestedCu?: double(name='RequestedCu'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier'),
    }(name='RealtimeResourceSettings'),
    scheduleResourceSettings?: {
      requestedCu?: double(name='RequestedCu'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier'),
    }(name='ScheduleResourceSettings'),
  }(name='ResourceSettings', description='This parameter is required.'),
  sourceDataSourceSettings?: [ 
    {
      dataSourceName?: string(name='DataSourceName'),
      dataSourceProperties?: {
        encoding?: string(name='Encoding'),
        timezone?: string(name='Timezone'),
      }(name='DataSourceProperties'),
    }
  ](name='SourceDataSourceSettings', description='This parameter is required.'),
  sourceDataSourceType?: string(name='SourceDataSourceType', description='The source type. Valid values: PolarDB, MySQL, Kafka, LogHub, Hologres, Oracle, OceanBase, MongoDB, Redshift, Hive, SQL Server, Doris, and ClickHouse.

This parameter is required.', example='MySQL'),
  tableMappings?: [ 
    {
      sourceObjectSelectionRules?: [ 
        {
          action?: string(name='Action'),
          expression?: string(name='Expression'),
          expressionType?: string(name='ExpressionType'),
          objectType?: string(name='ObjectType'),
        }
      ](name='SourceObjectSelectionRules'),
      transformationRules?: [ 
        {
          ruleActionType?: string(name='RuleActionType'),
          ruleName?: string(name='RuleName'),
          ruleTargetType?: string(name='RuleTargetType'),
        }
      ](name='TransformationRules'),
    }
  ](name='TableMappings', description='This parameter is required.'),
  transformationRules?: [ 
    {
      ruleActionType?: string(name='RuleActionType'),
      ruleExpression?: string(name='RuleExpression'),
      ruleName?: string(name='RuleName'),
      ruleTargetType?: string(name='RuleTargetType'),
    }
  ](name='TransformationRules'),
}

model CreateDIJobShrinkRequest {
  description?: string(name='Description'),
  destinationDataSourceSettingsShrink?: string(name='DestinationDataSourceSettings', description='This parameter is required.'),
  destinationDataSourceType?: string(name='DestinationDataSourceType', description='The destination type. Valid values: Hologres, OSS-HDFS, OSS, MaxCompute, LogHub, StarRocks, DataHub, AnalyticDB for MySQL, Kafka, and Hive.

This parameter is required.', example='Hologres'),
  jobName?: string(name='JobName', description='This parameter is deprecated and is replaced by the Name parameter.', example='mysql_to_holo_sync_8772', deprecated=true),
  jobSettingsShrink?: string(name='JobSettings'),
  jobType?: string(name='JobType', description='The type of the synchronization task. Valid values:

*   DatabaseRealtimeMigration: A real-time synchronization task used to synchronize only full data, only incremental data, or full and incremental data in multiple tables of multiple databases in the source.
*   DatabaseOfflineMigration: A batch synchronization task used to synchronize only full data, only incremental data, or full and incremental data in multiple tables of multiple databases in the source.
*   SingleTableRealtimeMigration: A real-time synchronization task used to synchronize data only in a single table in the source.', example='DatabaseRealtimeMigration'),
  migrationType?: string(name='MigrationType', description='The synchronization type. Valid values:

*   FullAndRealtimeIncremental
*   RealtimeIncremental
*   Full
*   OfflineIncremental
*   FullAndOfflineIncremental

This parameter is required.', example='FullAndRealtimeIncremental'),
  name?: string(name='Name', description='The name of the synchronization task.', example='mysql_to_holo_sync_8772'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000'),
  resourceSettingsShrink?: string(name='ResourceSettings', description='This parameter is required.'),
  sourceDataSourceSettingsShrink?: string(name='SourceDataSourceSettings', description='This parameter is required.'),
  sourceDataSourceType?: string(name='SourceDataSourceType', description='The source type. Valid values: PolarDB, MySQL, Kafka, LogHub, Hologres, Oracle, OceanBase, MongoDB, Redshift, Hive, SQL Server, Doris, and ClickHouse.

This parameter is required.', example='MySQL'),
  tableMappingsShrink?: string(name='TableMappings', description='This parameter is required.'),
  transformationRulesShrink?: string(name='TransformationRules'),
}

model CreateDIJobResponseBody = {
  DIJobId?: long(name='DIJobId', description='This parameter is deprecated and is replaced by the Id parameter.', example='11792', deprecated=true),
  id?: long(name='Id', description='The ID of the synchronization task.', example='11792'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='4F6AB6B3-41FB-5EBB-AFB2-0C98D49DA2BB'),
}

model CreateDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDIJobResponseBody(name='body'),
}

/**
 * @summary Creates a new-version synchronization task.
 *
 * @description *   This API operation is available for all DataWorks editions.
 * *   You can call this API operation to create a synchronization task. When you call this API operation, you must configure parameters such as SourceDataSourceSettings, DestinationDataSourceSettings, MigrationType, TransformationRules, TableMappings, and JobSettings. The SourceDataSourceSettings parameter defines the settings related to the source. The DestinationDataSourceSettings parameter defines the settings related to the destination. The MigrationType parameter defines the synchronization task type. The TransformationRules parameter defines the transformation rules for objects involved in the synchronization task. The TableMappings parameter defines the mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. The JobSettings parameter defines the settings for the dimension of the synchronization task, including policies for data type mappings between source fields and destination fields and settings for periodic scheduling.
 *
 * @param tmpReq CreateDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDIJobResponse
 */
async function createDIJobWithOptions(tmpReq: CreateDIJobRequest, runtime: Util.RuntimeOptions): CreateDIJobResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDIJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.destinationDataSourceSettings)) {
    request.destinationDataSourceSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.destinationDataSourceSettings, 'DestinationDataSourceSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.jobSettings)) {
    request.jobSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.jobSettings, 'JobSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.resourceSettings)) {
    request.resourceSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceSettings, 'ResourceSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.sourceDataSourceSettings)) {
    request.sourceDataSourceSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceDataSourceSettings, 'SourceDataSourceSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.tableMappings)) {
    request.tableMappingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tableMappings, 'TableMappings', 'json');
  }
  if (!Util.isUnset(tmpReq.transformationRules)) {
    request.transformationRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.transformationRules, 'TransformationRules', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.destinationDataSourceType)) {
    query['DestinationDataSourceType'] = request.destinationDataSourceType;
  }
  if (!Util.isUnset(request.jobName)) {
    query['JobName'] = request.jobName;
  }
  if (!Util.isUnset(request.jobType)) {
    query['JobType'] = request.jobType;
  }
  if (!Util.isUnset(request.migrationType)) {
    query['MigrationType'] = request.migrationType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.sourceDataSourceType)) {
    query['SourceDataSourceType'] = request.sourceDataSourceType;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.destinationDataSourceSettingsShrink)) {
    body['DestinationDataSourceSettings'] = request.destinationDataSourceSettingsShrink;
  }
  if (!Util.isUnset(request.jobSettingsShrink)) {
    body['JobSettings'] = request.jobSettingsShrink;
  }
  if (!Util.isUnset(request.resourceSettingsShrink)) {
    body['ResourceSettings'] = request.resourceSettingsShrink;
  }
  if (!Util.isUnset(request.sourceDataSourceSettingsShrink)) {
    body['SourceDataSourceSettings'] = request.sourceDataSourceSettingsShrink;
  }
  if (!Util.isUnset(request.tableMappingsShrink)) {
    body['TableMappings'] = request.tableMappingsShrink;
  }
  if (!Util.isUnset(request.transformationRulesShrink)) {
    body['TransformationRules'] = request.transformationRulesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDIJob',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a new-version synchronization task.
 *
 * @description *   This API operation is available for all DataWorks editions.
 * *   You can call this API operation to create a synchronization task. When you call this API operation, you must configure parameters such as SourceDataSourceSettings, DestinationDataSourceSettings, MigrationType, TransformationRules, TableMappings, and JobSettings. The SourceDataSourceSettings parameter defines the settings related to the source. The DestinationDataSourceSettings parameter defines the settings related to the destination. The MigrationType parameter defines the synchronization task type. The TransformationRules parameter defines the transformation rules for objects involved in the synchronization task. The TableMappings parameter defines the mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. The JobSettings parameter defines the settings for the dimension of the synchronization task, including policies for data type mappings between source fields and destination fields and settings for periodic scheduling.
 *
 * @param request CreateDIJobRequest
 * @return CreateDIJobResponse
 */
async function createDIJob(request: CreateDIJobRequest): CreateDIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDIJobWithOptions(request, runtime);
}

model CreateDataAssetTagRequest {
  description?: string(name='Description', description='The description of the tag.', example='This is a description'),
  key?: string(name='Key', description='The tag key.

This parameter is required.', example='key1'),
  managers?: [ string ](name='Managers', description='The tag administrators.'),
  valueType?: string(name='ValueType', description='The type of the tag value. Valid values:

*   Boolean
*   Int
*   String
*   Double', example='String'),
  values?: [ string ](name='Values', description='The tag values.'),
}

model CreateDataAssetTagShrinkRequest {
  description?: string(name='Description', description='The description of the tag.', example='This is a description'),
  key?: string(name='Key', description='The tag key.

This parameter is required.', example='key1'),
  managersShrink?: string(name='Managers', description='The tag administrators.'),
  valueType?: string(name='ValueType', description='The type of the tag value. Valid values:

*   Boolean
*   Int
*   String
*   Double', example='String'),
  valuesShrink?: string(name='Values', description='The tag values.'),
}

model CreateDataAssetTagResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateDataAssetTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataAssetTagResponseBody(name='body'),
}

/**
 * @summary Creates a tag.
 *
 * @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
 *
 * @param tmpReq CreateDataAssetTagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataAssetTagResponse
 */
async function createDataAssetTagWithOptions(tmpReq: CreateDataAssetTagRequest, runtime: Util.RuntimeOptions): CreateDataAssetTagResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDataAssetTagShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.managers)) {
    request.managersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.managers, 'Managers', 'json');
  }
  if (!Util.isUnset(tmpReq.values)) {
    request.valuesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.values, 'Values', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.managersShrink)) {
    query['Managers'] = request.managersShrink;
  }
  if (!Util.isUnset(request.valueType)) {
    query['ValueType'] = request.valueType;
  }
  if (!Util.isUnset(request.valuesShrink)) {
    query['Values'] = request.valuesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataAssetTag',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a tag.
 *
 * @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
 *
 * @param request CreateDataAssetTagRequest
 * @return CreateDataAssetTagResponse
 */
async function createDataAssetTag(request: CreateDataAssetTagRequest): CreateDataAssetTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataAssetTagWithOptions(request, runtime);
}

model CreateDataQualityAlertRuleRequest {
  condition?: string(name='Condition', description='The alert condition of the data quality monitoring rule.

This parameter is required.', example='results.any { r -> r.status == \\\\"fail\\\\" && r.rule.severity == \\\\"High\\\\" }'),
  notification?: {
    channels?: [ string ](name='Channels', description='The list of alert channels. You can set both `Email` and `Sms` at the same time. In other cases, only one channel can be set.

This parameter is required.'),
    receivers?: [ 
      {
        extension?: string(name='Extension', description='Additional configurations required for the alert recipients. When ReceiverType is DingdingUrl, you can set `{"atAll":true}` to mention all members.', example='{"atAll":true}'),
        receiverType?: string(name='ReceiverType', description='The type of alert recipients.

*   AliUid
*   WebhookUrl
*   DingdingUrl
*   WeixinUrl
*   FeishuUrl
*   TaskOwner
*   DataQualityScanOwner
*   ShiftSchedule

This parameter is required.', example='TaskOwner'),
        receiverValues?: [ string ](name='ReceiverValues', description='The value of alert recipients.'),
      }
    ](name='Receivers', description='The alert recipients.

This parameter is required.'),
  }(name='Notification', description='The list of alert channels.

This parameter is required.'),
  projectId?: long(name='ProjectId', description='The project ID.

This parameter is required.', example='10001'),
  target?: {
    ids?: [ long ](name='Ids', description='The list of monitored target IDs. Currently, only one ID can be set.

This parameter is required.'),
    type?: string(name='Type', description='The type of the monitored target. Only DataQualityScan is supported.

This parameter is required.', example='DataQualityScan'),
  }(name='Target', description='The monitored target of the data quality monitoring rule.

This parameter is required.'),
}

model CreateDataQualityAlertRuleShrinkRequest {
  condition?: string(name='Condition', description='The alert condition of the data quality monitoring rule.

This parameter is required.', example='results.any { r -> r.status == \\\\"fail\\\\" && r.rule.severity == \\\\"High\\\\" }'),
  notificationShrink?: string(name='Notification', description='The list of alert channels.

This parameter is required.'),
  projectId?: long(name='ProjectId', description='The project ID.

This parameter is required.', example='10001'),
  targetShrink?: string(name='Target', description='The monitored target of the data quality monitoring rule.

This parameter is required.'),
}

model CreateDataQualityAlertRuleResponseBody = {
  id?: long(name='Id', description='The user-defined rule ID returned after the monitoring rule is successfully created.', example='1010543619'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc14115***159376359'),
}

model CreateDataQualityAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataQualityAlertRuleResponseBody(name='body'),
}

/**
 * @summary Creates a data quality monitoring alert rule in a project.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq CreateDataQualityAlertRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataQualityAlertRuleResponse
 */
async function createDataQualityAlertRuleWithOptions(tmpReq: CreateDataQualityAlertRuleRequest, runtime: Util.RuntimeOptions): CreateDataQualityAlertRuleResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDataQualityAlertRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.notification)) {
    request.notificationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notification, 'Notification', 'json');
  }
  if (!Util.isUnset(tmpReq.target)) {
    request.targetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.target, 'Target', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.condition)) {
    body['Condition'] = request.condition;
  }
  if (!Util.isUnset(request.notificationShrink)) {
    body['Notification'] = request.notificationShrink;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.targetShrink)) {
    body['Target'] = request.targetShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataQualityAlertRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a data quality monitoring alert rule in a project.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request CreateDataQualityAlertRuleRequest
 * @return CreateDataQualityAlertRuleResponse
 */
async function createDataQualityAlertRule(request: CreateDataQualityAlertRuleRequest): CreateDataQualityAlertRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataQualityAlertRuleWithOptions(request, runtime);
}

model CreateDataQualityEvaluationTaskRequest {
  dataQualityRules?: [ 
    {
      checkingConfig?: {
        referencedSamplesFilter?: string(name='ReferencedSamplesFilter', description='The method that is used to query the referenced samples. To obtain specific types of thresholds, you must query reference values. In this example, an expression is used to specify the query method of referenced samples.', example='{"bizdate": ["-1"]}'),
        thresholds?: {
          critical?: {
            expression?: string(name='Expression', description='The threshold expression.

If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:

*   $checkValue > 0.01
*   $checkValue < -0.01
*   abs($checkValue) > 0.01

If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.', example='$checkValue > 0.01'),
            operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
            value?: string(name='Value', description='The threshold value.', example='0.01'),
          }(name='Critical', description='The threshold settings for critical alerts.'),
          expected?: {
            expression?: string(name='Expression', description='The threshold expression.

If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:

*   $checkValue > 0.01
*   $checkValue < -0.01
*   abs($checkValue) > 0.01

If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.', example='$checkValue > 0.01'),
            operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='='),
            value?: string(name='Value', description='The threshold value.', example='0'),
          }(name='Expected', description='The expected threshold setting.'),
          warned?: {
            expression?: string(name='Expression', description='The threshold expression.

If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:

*   $checkValue > 0.01
*   $checkValue < -0.01
*   abs($checkValue) > 0.01

If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.', example='$checkValue > 0.01'),
            operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
            value?: string(name='Value', description='The threshold value.', example='0.001'),
          }(name='Warned', description='The threshold settings for normal alerts.'),
        }(name='Thresholds', description='The threshold settings.'),
        type?: string(name='Type', description='The threshold calculation method. Valid values:

*   Fixed
*   Fluctation
*   FluctationDiscreate
*   Auto
*   Average', example='Fixed'),
      }(name='CheckingConfig', description='The check settings for sample data.'),
      description?: string(name='Description', description='The description of the monitoring rule.', example='OpenAPI test rules'),
      enabled?: boolean(name='Enabled', description='Specifies whether to enable the monitoring rule.', example='true'),
      errorHandlers?: [ 
        {
          errorDataFilter?: string(name='ErrorDataFilter', description='The SQL statement that is used to filter failed tasks. If you define the rule by using custom SQL statements, you must specify an SQL statement to filter failed tasks.', example='SELECT * FROM ods_api_log WHERE status = \\\\"Error\\\\";'),
          type?: string(name='Type', description='The type of the operation. Valid values:

*   SaveErrorData', example='SaveErrorData'),
        }
      ](name='ErrorHandlers', description='The operations that you can perform after the rule-based check fails.'),
      id?: long(name='Id', description='The rule ID.', example='2176'),
      name?: string(name='Name', description='The name of the monitoring rule.', example='OpenAPI test rules'),
      samplingConfig?: {
        metric?: string(name='Metric', description='The metrics used for sampling. Valid values:

*   Count: the number of rows in the table.
*   Min: the minimum value of the field.
*   Max: the maximum value of the field.
*   Avg: the average value of the field.
*   DistinctCount: the number of unique values of the field after deduplication.
*   DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
*   DuplicatedCount: the number of duplicated values of the field.
*   DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
*   TableSize: the table size.
*   NullValueCount: the number of rows in which the field value is null.
*   NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
*   GroupCount: the field value and the number of rows for each field value.
*   CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
*   CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
*   UserDefinedSql: specifies that data is sampled by executing custom SQL statements.', example='NullValueCount'),
        metricParameters?: string(name='MetricParameters', description='The parameters required for sampling.', example='{ "Columns": [ "id", "name" ] , "SQL": "select count(1) from table;"}'),
        samplingFilter?: string(name='SamplingFilter', description='The statements that are used to filter unnecessary data during sampling. The statements can be up to 16,777,215 characters in length.', example='status != \\\\"Succeeded\\\\"'),
        settingConfig?: string(name='SettingConfig', description='The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.', example='odps.sql.type.system.odps2=True,odps.sql.hive.compatible=True'),
      }(name='SamplingConfig', description='The parameters required for sampling.'),
      severity?: string(name='Severity', description='The strength of the monitoring rule. Valid values:

*   Normal
*   High', example='High'),
      templateCode?: string(name='TemplateCode', description='The ID of the template used by the monitoring rule.', example='SYSTEM:field:null_value:fixed:0'),
    }
  ](name='DataQualityRules', description='The list of monitoring rules that are associated with the monitor. If you configure the ID of a monitoring rule by using the DataQualityRule.Id parameter, the system associates the rule with a created monitor. If you do not configure the ID of a monitoring rule, the system creates a new monitoring rule by using other fields and associates the rule with a created monitor.'),
  dataSourceId?: long(name='DataSourceId', description='The data source ID. You can call the [ListDataSources](https://help.aliyun.com/document_detail/211431.html) operation to query the ID.

This parameter is required.', example='1'),
  description?: string(name='Description', description='The description of the monitor.', example='OpenAPI create a data quality monitoring test'),
  hooks?: [ 
    {
      condition?: string(name='Condition', description='The hook trigger condition. When this condition is met, the hook action is triggered. Only two conditional expressions are supported:

1.  Specify only one group of rule strength type and rule check status, such as `${severity} == "High" AND ${status} == "Critical"`. In this expression, the hook trigger condition is met if severity is High and status is Critical.
2.  Specify multiple groups of rule strength types and rule check status, such as `(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")`. In this expression, the hook trigger condition is met if severity is High and status is Critical, severity is Normal and status is Critical, or severity is Normal and status is Error. The enumeration of severity in a conditional expression is the same as the enumeration of severity in DataQualityRule. The enumeration of status in a conditional expression is the same as the enumeration of status in DataQualityResult.', example='(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")'),
      type?: string(name='Type', description='The hook type. Only one hook type is supported.

*   BlockTaskInstance: Blocks the running of scheduling tasks. A monitor is triggered by scheduling tasks. After a monitor finishes running, the monitor determines whether to block the running of scheduling tasks based on the hook condition.', example='BlockTaskInstance'),
    }
  ](name='Hooks', description='The hook.'),
  name?: string(name='Name', description='The name of the monitor.

This parameter is required.', example='OpenAPI create a data quality monitoring test'),
  notifications?: {
    condition?: string(name='Condition', description='The notification trigger condition. When this condition is met, the alert notification is triggered. Only two conditional expressions are supported:

Specify only one group of rule strength type and rule check status, such as `${severity} == "High" AND ${status} == "Critical"`. In this expression, the hook trigger condition is met if severity is High and status is Critical. Specify multiple groups of rule strength types and rule check status, such as `(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")`. In this expression, the hook trigger condition is met if severity is High and status is Critical, severity is Normal and status is Critical, or severity is Normal and status is Error. The enumeration of severity in a conditional expression is the same as the enumeration of severity in DataQualityRule. The enumeration of status in a conditional expression is the same as the enumeration of status in DataQualityResult.', example='(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")'),
    notifications?: [ 
      {
        notificationChannels?: [ 
          {
            channels?: [ string ](name='Channels', description='The alert notification methods.'),
          }
        ](name='NotificationChannels', description='The alert notification methods.'),
        notificationReceivers?: [ 
          {
            extension?: string(name='Extension', description='The additional parameters that are required when alerts are sent. The parameters are JSON-formatted strings. The following keys are supported:

*   atAll: specifies that all members in a group are mentioned when alerts are sent by using DingTalk. This parameter is valid only if you set ReceiverType to DingdingUrl.', example='{  "atAll": true }'),
            receiverType?: string(name='ReceiverType', description='The type of the alert recipient. Valid values:

*   WebhookUrl
*   FeishuUrl
*   DingdingUrl
*   WeixinUrl
*   AliUid', example='DingdingUrl'),
            receiverValues?: [ string ](name='ReceiverValues', description='The alert recipient.'),
          }
        ](name='NotificationReceivers', description='The configurations of alert recipients.'),
      }
    ](name='Notifications', description='The configurations of the alert notification.'),
  }(name='Notifications', description='The configurations of alert notifications.'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You can use this parameter to specify the DataWorks workspace on which you want to perform the API operation.

This parameter is required.', example='10000'),
  runtimeConf?: string(name='RuntimeConf', description='The extended configurations in JSON-formatted strings. You can use this parameter only for monitors that are used to monitor the quality of E-MapReduce (EMR) data.

*   queue: The Yarn queue used when a monitor checks the quality of EMR data. By default, the queue configured for the current workspace is used.

*   sqlEngine: The SQL engine used when a monitor checks the quality of EMR data.

    *   HIVE_SQL
    *   SPARK_SQL', example='{ "queue": "default", "sqlEngine": "SPARK_SQL" }'),
  target?: {
    databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs. Valid values:

*   maxcompute
*   hologres
*   cdh
*   analyticdb_for_mysql
*   starrocks
*   emr
*   analyticdb_for_postgresql

This parameter is required.', example='maxcompute'),
    partitionSpec?: string(name='PartitionSpec', description='The configuration of the partitioned table.', example='pt=$[yyyymmdd-1]'),
    tableGuid?: string(name='TableGuid', description='The ID of the table in Data Map.

This parameter is required.', example='odps.api_test.ods_openapi_log_d'),
  }(name='Target', description='The monitored object of the monitor.

This parameter is required.'),
  trigger?: {
    taskIds?: [ long ](name='TaskIds', description='The IDs of scheduling tasks. This parameter is valid only if you set Type to ByScheduledTaskInstance.'),
    type?: string(name='Type', description='The trigger type of the monitor. Valid values:

*   ByManual (default): The monitor is manually triggered.
*   ByScheduledTaskInstance: The monitor is triggered by the associated scheduling tasks.', example='ByScheduledTaskInstance'),
  }(name='Trigger', description='The trigger configuration of the monitor.'),
}

model CreateDataQualityEvaluationTaskShrinkRequest {
  dataQualityRulesShrink?: string(name='DataQualityRules', description='The list of monitoring rules that are associated with the monitor. If you configure the ID of a monitoring rule by using the DataQualityRule.Id parameter, the system associates the rule with a created monitor. If you do not configure the ID of a monitoring rule, the system creates a new monitoring rule by using other fields and associates the rule with a created monitor.'),
  dataSourceId?: long(name='DataSourceId', description='The data source ID. You can call the [ListDataSources](https://help.aliyun.com/document_detail/211431.html) operation to query the ID.

This parameter is required.', example='1'),
  description?: string(name='Description', description='The description of the monitor.', example='OpenAPI create a data quality monitoring test'),
  hooksShrink?: string(name='Hooks', description='The hook.'),
  name?: string(name='Name', description='The name of the monitor.

This parameter is required.', example='OpenAPI create a data quality monitoring test'),
  notificationsShrink?: string(name='Notifications', description='The configurations of alert notifications.'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You can use this parameter to specify the DataWorks workspace on which you want to perform the API operation.

This parameter is required.', example='10000'),
  runtimeConf?: string(name='RuntimeConf', description='The extended configurations in JSON-formatted strings. You can use this parameter only for monitors that are used to monitor the quality of E-MapReduce (EMR) data.

*   queue: The Yarn queue used when a monitor checks the quality of EMR data. By default, the queue configured for the current workspace is used.

*   sqlEngine: The SQL engine used when a monitor checks the quality of EMR data.

    *   HIVE_SQL
    *   SPARK_SQL', example='{ "queue": "default", "sqlEngine": "SPARK_SQL" }'),
  targetShrink?: string(name='Target', description='The monitored object of the monitor.

This parameter is required.'),
  triggerShrink?: string(name='Trigger', description='The trigger configuration of the monitor.'),
}

model CreateDataQualityEvaluationTaskResponseBody = {
  id?: long(name='Id', description='The ID of the new monitor.', example='10001'),
  requestId?: string(name='RequestId', description='Id of the request', example='2d9ce-38ef-4923-baf6-391a7e656'),
}

model CreateDataQualityEvaluationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataQualityEvaluationTaskResponseBody(name='body'),
}

/**
 * @summary Creates a monitor in DataWorks Data Quality.
 *
 * @description This API operation is supported in all DataWorks editions.
 *
 * @param tmpReq CreateDataQualityEvaluationTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataQualityEvaluationTaskResponse
 */
async function createDataQualityEvaluationTaskWithOptions(tmpReq: CreateDataQualityEvaluationTaskRequest, runtime: Util.RuntimeOptions): CreateDataQualityEvaluationTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDataQualityEvaluationTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dataQualityRules)) {
    request.dataQualityRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataQualityRules, 'DataQualityRules', 'json');
  }
  if (!Util.isUnset(tmpReq.hooks)) {
    request.hooksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hooks, 'Hooks', 'json');
  }
  if (!Util.isUnset(tmpReq.notifications)) {
    request.notificationsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notifications, 'Notifications', 'json');
  }
  if (!Util.isUnset(tmpReq.target)) {
    request.targetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.target, 'Target', 'json');
  }
  if (!Util.isUnset(tmpReq.trigger)) {
    request.triggerShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.trigger, 'Trigger', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dataQualityRulesShrink)) {
    body['DataQualityRules'] = request.dataQualityRulesShrink;
  }
  if (!Util.isUnset(request.dataSourceId)) {
    body['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.hooksShrink)) {
    body['Hooks'] = request.hooksShrink;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.notificationsShrink)) {
    body['Notifications'] = request.notificationsShrink;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.runtimeConf)) {
    body['RuntimeConf'] = request.runtimeConf;
  }
  if (!Util.isUnset(request.targetShrink)) {
    body['Target'] = request.targetShrink;
  }
  if (!Util.isUnset(request.triggerShrink)) {
    body['Trigger'] = request.triggerShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataQualityEvaluationTask',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a monitor in DataWorks Data Quality.
 *
 * @description This API operation is supported in all DataWorks editions.
 *
 * @param request CreateDataQualityEvaluationTaskRequest
 * @return CreateDataQualityEvaluationTaskResponse
 */
async function createDataQualityEvaluationTask(request: CreateDataQualityEvaluationTaskRequest): CreateDataQualityEvaluationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataQualityEvaluationTaskWithOptions(request, runtime);
}

model CreateDataQualityEvaluationTaskInstanceRequest {
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', description='The ID of the data quality monitoring task.

This parameter is required.', example='200001'),
  parameters?: string(name='Parameters', description='Data quality verification execution parameters in JSON format. The available keys are as follows:
- triggerTime: the millisecond timestamp of the trigger time. The baseline time of the $[yyyymmdd] expression in the data range of data quality monitoring. Required.

This parameter is required.', example='{ "triggerTime": 1733284062000 }'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the workspace management page to obtain the ID.

This parameter is used to determine the DataWorks workspaces used for this API call.

This parameter is required.', example='10000'),
  runtimeResource?: {
    cu?: double(name='Cu', description='The task runs to configure CU consumption. If Serverless resource groups are used, you must specify this parameter.', example='0.25'),
    resourceGroupId?: string(name='ResourceGroupId', description='The identifier of the scheduling resource group configured for running the task.', example='63900680'),
  }(name='RuntimeResource', description='Resource Group information, which must be filled in when running non-MaxCompute data quality verification.'),
}

model CreateDataQualityEvaluationTaskInstanceShrinkRequest {
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', description='The ID of the data quality monitoring task.

This parameter is required.', example='200001'),
  parameters?: string(name='Parameters', description='Data quality verification execution parameters in JSON format. The available keys are as follows:
- triggerTime: the millisecond timestamp of the trigger time. The baseline time of the $[yyyymmdd] expression in the data range of data quality monitoring. Required.

This parameter is required.', example='{ "triggerTime": 1733284062000 }'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the workspace management page to obtain the ID.

This parameter is used to determine the DataWorks workspaces used for this API call.

This parameter is required.', example='10000'),
  runtimeResourceShrink?: string(name='RuntimeResource', description='Resource Group information, which must be filled in when running non-MaxCompute data quality verification.'),
}

model CreateDataQualityEvaluationTaskInstanceResponseBody = {
  id?: long(name='Id', description='The ID of the data quality monitoring instance.', example='22130'),
  requestId?: string(name='RequestId', description='Id of the request', example='ecb967ec-c137-48****'),
}

model CreateDataQualityEvaluationTaskInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataQualityEvaluationTaskInstanceResponseBody(name='body'),
}

/**
 * @summary Creates a monitor instance.
 *
 * @param tmpReq CreateDataQualityEvaluationTaskInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataQualityEvaluationTaskInstanceResponse
 */
async function createDataQualityEvaluationTaskInstanceWithOptions(tmpReq: CreateDataQualityEvaluationTaskInstanceRequest, runtime: Util.RuntimeOptions): CreateDataQualityEvaluationTaskInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDataQualityEvaluationTaskInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.runtimeResource)) {
    request.runtimeResourceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.runtimeResource, 'RuntimeResource', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dataQualityEvaluationTaskId)) {
    body['DataQualityEvaluationTaskId'] = request.dataQualityEvaluationTaskId;
  }
  if (!Util.isUnset(request.parameters)) {
    body['Parameters'] = request.parameters;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.runtimeResourceShrink)) {
    body['RuntimeResource'] = request.runtimeResourceShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataQualityEvaluationTaskInstance',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a monitor instance.
 *
 * @param request CreateDataQualityEvaluationTaskInstanceRequest
 * @return CreateDataQualityEvaluationTaskInstanceResponse
 */
async function createDataQualityEvaluationTaskInstance(request: CreateDataQualityEvaluationTaskInstanceRequest): CreateDataQualityEvaluationTaskInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataQualityEvaluationTaskInstanceWithOptions(request, runtime);
}

model CreateDataQualityRuleRequest {
  checkingConfig?: {
    referencedSamplesFilter?: string(name='ReferencedSamplesFilter', description='The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference samples and perform aggregate operations on the reference values. In this example, an expression is used to specify the query method of referenced samples.', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
    thresholds?: {
      critical?: {
        expression?: string(name='Expression', description='The threshold expression.

If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Example:

*   $checkValue > 0.01
*   $checkValue < -0.01
*   abs($checkValue) > 0.01

If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.', example='$checkValue > 0.05'),
        operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
        value?: string(name='Value', description='The threshold value.', example='100.0'),
      }(name='Critical', description='The threshold settings for critical alerts.'),
      expected?: {
        expression?: string(name='Expression', description='The threshold expression.

If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Example:

*   $checkValue > 0.01
*   $checkValue < -0.01
*   abs($checkValue) > 0.01

If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.', example='$checkValue <= 0.01'),
        operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
        value?: string(name='Value', description='The threshold value.', example='100.0'),
      }(name='Expected', description='The expected threshold setting.'),
      warned?: {
        expression?: string(name='Expression', description='The threshold expression.

If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Example:

*   $checkValue > 0.01
*   $checkValue < -0.01
*   abs($checkValue) > 0.01

If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.', example='$checkValue > 0.01'),
        operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
        value?: string(name='Value', description='The threshold value.', example='100.0'),
      }(name='Warned', description='The threshold settings for normal alerts.'),
    }(name='Thresholds', description='The threshold settings.'),
    type?: string(name='Type', description='The method that is used to calculate a threshold. You can leave this parameter empty if you use a rule template. Valid values:

*   Fixed
*   Fluctation
*   FluctationDiscreate
*   Auto
*   Average
*   Variance', example='Fixed'),
  }(name='CheckingConfig', description='The check settings for sample data.'),
  description?: string(name='Description', description='The description of the rule. The description can be up to 500 characters in length.', example='this is a odps _sql task'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the monitoring rule.', example='true'),
  errorHandlers?: [ 
    {
      errorDataFilter?: string(name='ErrorDataFilter', description='The SQL statement that is used to filter failed tasks. If you define the rule by using custom SQL statements, you must specify an SQL statement to filter failed tasks.', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
      type?: string(name='Type', description='The type of the operation. Valid values:

*   SaveErrorData', example='SaveErrorData'),
    }
  ](name='ErrorHandlers', description='The operations that you can perform after the rule-based check fails.'),
  name?: string(name='Name', description='The name of the rule.

This parameter is required.', example='The table cannot be empty.'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='10726'),
  samplingConfig?: {
    metric?: string(name='Metric', description='The metrics used for sampling. You can leave this parameter empty if you use a rule template. Valid values:

*   Count: the number of rows in the table.
*   Min: the minimum value of the field.
*   Max: the maximum value of the field.
*   Avg: the average value of the field.
*   DistinctCount: the number of unique values of the field after deduplication.
*   DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
*   DuplicatedCount: the number of duplicated values of the field.
*   DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
*   TableSize: the table size.
*   NullValueCount: the number of rows in which the field value is null.
*   NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
*   GroupCount: the field value and the number of rows for each field value.
*   CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
*   CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
*   UserDefinedSql: specifies that data is sampled by executing custom SQL statements.', example='Count'),
    metricParameters?: string(name='MetricParameters', description='The parameters required for sampling.', example='{ "Columns": [ "id", "name" ] , "SQL": "select count(1) from table;"}'),
    samplingFilter?: string(name='SamplingFilter', description='The statements that are used to filter unnecessary data during sampling. The statements can be up to 16,777,215 characters in length.', example='id IS NULL'),
    settingConfig?: string(name='SettingConfig', description='The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.', example='SET odps.sql.udf.timeout=600s; 
SET odps.sql.python.version=cp27;'),
  }(name='SamplingConfig', description='The sampling settings.'),
  severity?: string(name='Severity', description='The strength of the rule. Valid values:

*   Normal
*   High', example='Normal'),
  target?: {
    databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs. Valid values:

*   maxcompute
*   emr
*   cdh
*   hologres
*   analyticdb_for_postgresql
*   analyticdb_for_mysql
*   starrocks', example='maxcompute'),
    partitionSpec?: string(name='PartitionSpec', description='The configuration of the partitioned table.', example='ds=$[yyyymmdd-1]'),
    tableGuid?: string(name='TableGuid', description='The ID of the table that is limited by the rule in Data Map.

This parameter is required.', example='odps.unit_test.tb_unit_test'),
    type?: string(name='Type', description='The type of the monitored object. Valid values:

*   Table', example='Table'),
  }(name='Target', description='The monitored object of the rule.'),
  templateCode?: string(name='TemplateCode', description='The ID of the template used by the rule.', example='system::user_defined'),
}

model CreateDataQualityRuleShrinkRequest {
  checkingConfigShrink?: string(name='CheckingConfig', description='The check settings for sample data.'),
  description?: string(name='Description', description='The description of the rule. The description can be up to 500 characters in length.', example='this is a odps _sql task'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the monitoring rule.', example='true'),
  errorHandlersShrink?: string(name='ErrorHandlers', description='The operations that you can perform after the rule-based check fails.'),
  name?: string(name='Name', description='The name of the rule.

This parameter is required.', example='The table cannot be empty.'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='10726'),
  samplingConfigShrink?: string(name='SamplingConfig', description='The sampling settings.'),
  severity?: string(name='Severity', description='The strength of the rule. Valid values:

*   Normal
*   High', example='Normal'),
  targetShrink?: string(name='Target', description='The monitored object of the rule.'),
  templateCode?: string(name='TemplateCode', description='The ID of the template used by the rule.', example='system::user_defined'),
}

model CreateDataQualityRuleResponseBody = {
  id?: long(name='Id', description='The ID of the rule.', example='19715'),
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
}

model CreateDataQualityRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataQualityRuleResponseBody(name='body'),
}

/**
 * @summary Creates a data quality monitoring rule.
 *
 * @param tmpReq CreateDataQualityRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataQualityRuleResponse
 */
async function createDataQualityRuleWithOptions(tmpReq: CreateDataQualityRuleRequest, runtime: Util.RuntimeOptions): CreateDataQualityRuleResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDataQualityRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.checkingConfig)) {
    request.checkingConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.checkingConfig, 'CheckingConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.errorHandlers)) {
    request.errorHandlersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.errorHandlers, 'ErrorHandlers', 'json');
  }
  if (!Util.isUnset(tmpReq.samplingConfig)) {
    request.samplingConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.samplingConfig, 'SamplingConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.target)) {
    request.targetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.target, 'Target', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkingConfigShrink)) {
    body['CheckingConfig'] = request.checkingConfigShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.enabled)) {
    body['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.errorHandlersShrink)) {
    body['ErrorHandlers'] = request.errorHandlersShrink;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.samplingConfigShrink)) {
    body['SamplingConfig'] = request.samplingConfigShrink;
  }
  if (!Util.isUnset(request.severity)) {
    body['Severity'] = request.severity;
  }
  if (!Util.isUnset(request.targetShrink)) {
    body['Target'] = request.targetShrink;
  }
  if (!Util.isUnset(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataQualityRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a data quality monitoring rule.
 *
 * @param request CreateDataQualityRuleRequest
 * @return CreateDataQualityRuleResponse
 */
async function createDataQualityRule(request: CreateDataQualityRuleRequest): CreateDataQualityRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataQualityRuleWithOptions(request, runtime);
}

model CreateDataQualityRuleTemplateRequest {
  checkingConfig?: {
    referencedSamplesFilter?: string(name='ReferencedSamplesFilter', description='The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference samples and perform aggregate operations on the reference values. In this example, an expression is used to specify the query method of referenced samples.', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
    type?: string(name='Type', description='The threshold calculation method. Valid values:

*   Fixed
*   Fluctation
*   FluctationDiscreate
*   Auto
*   Average
*   Variance', example='Fixed'),
  }(name='CheckingConfig', description='The check settings for sample data.'),
  directoryPath?: string(name='DirectoryPath', description='The directory in which the template is stored. Slashes (/) are used to separate directory levels. The name of each directory level can be up to 1,024 characters in length. It cannot contain whitespace characters or slashes (/).', example='/ods/order_data'),
  name?: string(name='Name', description='The name of the template. The name can be up to 512 characters in length and can contain digits, letters, and punctuation marks.

This parameter is required.', example='Table row Count Verification'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='12345'),
  samplingConfig?: {
    metric?: string(name='Metric', description='The metrics used for sampling. Valid values:

*   Count: the number of rows in the table.
*   Min: the minimum value of the field.
*   Max: the maximum value of the field.
*   Avg: the average value of the field.
*   DistinctCount: the number of unique values of the field after deduplication.
*   DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
*   DuplicatedCount: the number of duplicated values of the field.
*   DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
*   TableSize: the table size.
*   NullValueCount: the number of rows in which the field value is null.
*   NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
*   GroupCount: the field value and the number of rows for each field value.
*   CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
*   CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
*   UserDefinedSql: specifies that data is sampled by executing custom SQL statements.', example='Count'),
    metricParameters?: string(name='MetricParameters', description='The parameters required for sampling.', example='{"SQL": "select count(1) from table;"}'),
    settingConfig?: string(name='SettingConfig', description='The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.', example='SET odps.sql.udf.timeout=600s; 
SET odps.sql.python.version=cp27;'),
  }(name='SamplingConfig', description='The sampling settings.'),
  visibleScope?: string(name='VisibleScope', description='The applicable scope of the template. Valid values:

*   Tenant: The template is available in all workspaces in the current tenant.
*   Project: The template is available only in the current workspace.', example='Project'),
}

model CreateDataQualityRuleTemplateShrinkRequest {
  checkingConfigShrink?: string(name='CheckingConfig', description='The check settings for sample data.'),
  directoryPath?: string(name='DirectoryPath', description='The directory in which the template is stored. Slashes (/) are used to separate directory levels. The name of each directory level can be up to 1,024 characters in length. It cannot contain whitespace characters or slashes (/).', example='/ods/order_data'),
  name?: string(name='Name', description='The name of the template. The name can be up to 512 characters in length and can contain digits, letters, and punctuation marks.

This parameter is required.', example='Table row Count Verification'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='12345'),
  samplingConfigShrink?: string(name='SamplingConfig', description='The sampling settings.'),
  visibleScope?: string(name='VisibleScope', description='The applicable scope of the template. Valid values:

*   Tenant: The template is available in all workspaces in the current tenant.
*   Project: The template is available only in the current workspace.', example='Project'),
}

model CreateDataQualityRuleTemplateResponseBody = {
  code?: string(name='Code', description='The Code of the rule template.', example='UserDefined:3001'),
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
}

model CreateDataQualityRuleTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataQualityRuleTemplateResponseBody(name='body'),
}

/**
 * @summary Creates a data quality monitoring rule template.
 *
 * @param tmpReq CreateDataQualityRuleTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataQualityRuleTemplateResponse
 */
async function createDataQualityRuleTemplateWithOptions(tmpReq: CreateDataQualityRuleTemplateRequest, runtime: Util.RuntimeOptions): CreateDataQualityRuleTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDataQualityRuleTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.checkingConfig)) {
    request.checkingConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.checkingConfig, 'CheckingConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.samplingConfig)) {
    request.samplingConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.samplingConfig, 'SamplingConfig', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkingConfigShrink)) {
    body['CheckingConfig'] = request.checkingConfigShrink;
  }
  if (!Util.isUnset(request.directoryPath)) {
    body['DirectoryPath'] = request.directoryPath;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.samplingConfigShrink)) {
    body['SamplingConfig'] = request.samplingConfigShrink;
  }
  if (!Util.isUnset(request.visibleScope)) {
    body['VisibleScope'] = request.visibleScope;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataQualityRuleTemplate',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a data quality monitoring rule template.
 *
 * @param request CreateDataQualityRuleTemplateRequest
 * @return CreateDataQualityRuleTemplateResponse
 */
async function createDataQualityRuleTemplate(request: CreateDataQualityRuleTemplateRequest): CreateDataQualityRuleTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataQualityRuleTemplateWithOptions(request, runtime);
}

model CreateDataQualityScanRequest {
  clientToken?: string(name='ClientToken', description='The idempotency token.

This parameter is required.', example='a-customized-uuid'),
  computeResource?: {
    envType?: string(name='EnvType', description='The workspace environment to which the compute engine belongs.

Valid values:

*   Prod: production environment .
*   Dev: development environment.', example='Dev'),
    name?: string(name='Name', description='The name of the compute engine, which is a unique identifier.', example='emr_first'),
    runtime?: {
      engine?: string(name='Engine', description='The type of the compute engine. Only EMR compute engines support these settings.

Valid values:

*   Hive: Hive SQL
*   Spark: Spark SQL
*   Kyuubi', example='Hive'),
      hiveConf?: map[string]any(name='HiveConf', description='Additional Hive engine parameters. Currently, only the mapreduce.job.queuename parameter is supported.', example='mapreduce.job.queuename=dq_queue'),
      sparkConf?: map[string]any(name='SparkConf', description='Additional Spark engine parameters. Currently, only the spark.yarn.queue parameter is supported.', example='spark.yarn.queue=dq_queue'),
    }(name='Runtime', description='More settings for data quality monitoring at runtime.'),
  }(name='ComputeResource', description='The compute engine used at runtime. If not specified, the data source defined in the Spec is used.'),
  description?: string(name='Description', description='The description of the data quality monitor.', example='Daily data quality scanning of ods tables.'),
  hooks?: [ 
    {
      condition?: string(name='Condition', description='The Hook trigger condition. The hook will run if the condition is met. Currently, only one type of expression syntax is supported:

You can specify multiple combinations of rule severity levels and validation statuses using an expression such as `results.any { r -> r.status == \\\\"Fail\\\\" && r.rule.severity == \\\\"Normal\\\\" || r.status == \\\\"Error\\\\" && r.rule.severity == \\\\"High\\\\" || r.status == \\\\"Warn\\\\" && r.rule.severity == \\\\"High\\\\" }`. This expression means the condition is met if any executed rule has a result of Fail with severity Normal, Error with severity High, or Warn with severity High. In the condition expression, the values of severity and status are predefined enums. The values of severity must match those defined in the Spec, and the values of status must match those in DataQualityResult.', example='results.any { r -> r.status == \\\\"Fail\\\\" && r.rule.severity == \\\\"Normal\\\\" || r.status == \\\\"Error\\\\" && r.rule.severity == \\\\"High\\\\" || r.status == \\\\"Warn\\\\" && r.rule.severity == \\\\"High\\\\" }'),
      type?: string(name='Type', description='The type of the Hook.

Valid values:

*   BlockTaskInstance: Blocks the scheduling of the task instance.', example='BlockTaskInstance'),
    }
  ](name='Hooks', description='The Hook configurations after the data quality monitoring run ends.'),
  name?: string(name='Name', description='The data quality monitoring name.', example='data_quality_scan_001'),
  owner?: string(name='Owner', description='The ID of the user who owns of the data quality monitor.', example='95279527****'),
  parameters?: [ 
    {
      name?: string(name='Name', description='The parameter name.', example='triggerTime'),
      value?: string(name='Value', description='The parameter values.', example='$[yyyymmdd-1]'),
    }
  ](name='Parameters', description='The definition of execution parameters for the data quality monitoring.'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console and go to the workspace configuration page to obtain the workspace ID. This parameter is required to specify the target DataWorks workspace for this API operation.', example='101'),
  runtimeResource?: {
    cu?: float(name='Cu', description='The default number of CUs configured for task running.', example='0.25'),
    id?: string(name='Id', description='The resource group ID.', example='0525242e-d0ee-4bda-bc73-765d82f6a34a'),
    image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
  }(name='RuntimeResource', description='The resource group used during execution of the data quality monitoring.'),
  spec?: string(name='Spec', description='Spec code for the content of the data quality monitoring.', example='{
    "datasets": [
        {
            "type": "Table",
            "dataSource": {
                "name": "odps_first",
                "envType": "Prod"
            },
            "tables": [
                "ods_d_user_info"
            ],
            "filter": "pt = $[yyyymmdd-1]"
        }
    ],
    "rules": [
        {
            "assertion": "row_count > 0"
        }, {
            "templateId": "SYSTEM:field:null_value:fixed",
            "pass": "when = 0",
            "name": "The id cannot be empty.",
            "severity": "High",
             "identity": "a-customized-data-quality-rule-uuid"
        }
    ]
}'),
  trigger?: {
    taskIds?: [ long ](name='TaskIds', description='If the trigger mode is set to BySchedule, the scheduling task ID must be specified.'),
    type?: string(name='Type', description='The trigger mode of the monitoring task.

Valid values:

*   ByManual: Manual trigger. This is the default setting.
*   BySchedule: Triggered by a scheduled task instance.', example='BySchedule'),
  }(name='Trigger', description='The trigger configurations of the data quality monitoring task.'),
}

model CreateDataQualityScanShrinkRequest {
  clientToken?: string(name='ClientToken', description='The idempotency token.

This parameter is required.', example='a-customized-uuid'),
  computeResourceShrink?: string(name='ComputeResource', description='The compute engine used at runtime. If not specified, the data source defined in the Spec is used.'),
  description?: string(name='Description', description='The description of the data quality monitor.', example='Daily data quality scanning of ods tables.'),
  hooksShrink?: string(name='Hooks', description='The Hook configurations after the data quality monitoring run ends.'),
  name?: string(name='Name', description='The data quality monitoring name.', example='data_quality_scan_001'),
  owner?: string(name='Owner', description='The ID of the user who owns of the data quality monitor.', example='95279527****'),
  parametersShrink?: string(name='Parameters', description='The definition of execution parameters for the data quality monitoring.'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console and go to the workspace configuration page to obtain the workspace ID. This parameter is required to specify the target DataWorks workspace for this API operation.', example='101'),
  runtimeResourceShrink?: string(name='RuntimeResource', description='The resource group used during execution of the data quality monitoring.'),
  spec?: string(name='Spec', description='Spec code for the content of the data quality monitoring.', example='{
    "datasets": [
        {
            "type": "Table",
            "dataSource": {
                "name": "odps_first",
                "envType": "Prod"
            },
            "tables": [
                "ods_d_user_info"
            ],
            "filter": "pt = $[yyyymmdd-1]"
        }
    ],
    "rules": [
        {
            "assertion": "row_count > 0"
        }, {
            "templateId": "SYSTEM:field:null_value:fixed",
            "pass": "when = 0",
            "name": "The id cannot be empty.",
            "severity": "High",
             "identity": "a-customized-data-quality-rule-uuid"
        }
    ]
}'),
  triggerShrink?: string(name='Trigger', description='The trigger configurations of the data quality monitoring task.'),
}

model CreateDataQualityScanResponseBody = {
  id?: long(name='Id', description='Returns the ID of the created data source sharing rule, which uniquely identifies the rule.', example='676303114031776'),
  requestId?: string(name='RequestId', description='Id of the request', example='0000-ABCD-EFG****'),
}

model CreateDataQualityScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataQualityScanResponseBody(name='body'),
}

/**
 * @summary Creates a data quality monitor.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq CreateDataQualityScanRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataQualityScanResponse
 */
async function createDataQualityScanWithOptions(tmpReq: CreateDataQualityScanRequest, runtime: Util.RuntimeOptions): CreateDataQualityScanResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDataQualityScanShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.computeResource)) {
    request.computeResourceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.computeResource, 'ComputeResource', 'json');
  }
  if (!Util.isUnset(tmpReq.hooks)) {
    request.hooksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hooks, 'Hooks', 'json');
  }
  if (!Util.isUnset(tmpReq.parameters)) {
    request.parametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.parameters, 'Parameters', 'json');
  }
  if (!Util.isUnset(tmpReq.runtimeResource)) {
    request.runtimeResourceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.runtimeResource, 'RuntimeResource', 'json');
  }
  if (!Util.isUnset(tmpReq.trigger)) {
    request.triggerShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.trigger, 'Trigger', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.computeResourceShrink)) {
    body['ComputeResource'] = request.computeResourceShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.hooksShrink)) {
    body['Hooks'] = request.hooksShrink;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.parametersShrink)) {
    body['Parameters'] = request.parametersShrink;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.runtimeResourceShrink)) {
    body['RuntimeResource'] = request.runtimeResourceShrink;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  if (!Util.isUnset(request.triggerShrink)) {
    body['Trigger'] = request.triggerShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataQualityScan',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a data quality monitor.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request CreateDataQualityScanRequest
 * @return CreateDataQualityScanResponse
 */
async function createDataQualityScan(request: CreateDataQualityScanRequest): CreateDataQualityScanResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataQualityScanWithOptions(request, runtime);
}

model CreateDataQualityScanRunRequest {
  dataQualityScanId?: long(name='DataQualityScanId', description='The ID of the data quality monitor.', example='20000001'),
  parameters?: [ 
    {
      name?: string(name='Name', description='The parameter name.', example='regiondt'),
      value?: string(name='Value', description='The parameter value. You can use a scheduling time expression.', example='cn-shanghai$[yyyy-mm-dd-1]'),
    }
  ](name='Parameters', description='The parameter settings used during the actual run. The `triggerTime` parameter is required.'),
  projectId?: long(name='ProjectId', description='The project ID.', example='10000'),
  runtimeResource?: {
    cu?: float(name='Cu', description='The Compute Resources (CUs) reserved for running the data quality monitor in the resource group.', example='0.25'),
    id?: string(name='Id', description='The resource group ID.', example='e9455a13-ff00-4965-833c-337546ba4854'),
    image?: string(name='Image', description='The image settings used when running the data quality monitor in the resource group.', example='i-xxxxxx'),
  }(name='RuntimeResource', description='The scheduling resource group used when running the data quality monitor. This resource group uses the same data structure as in the scheduling API.'),
}

model CreateDataQualityScanRunShrinkRequest {
  dataQualityScanId?: long(name='DataQualityScanId', description='The ID of the data quality monitor.', example='20000001'),
  parametersShrink?: string(name='Parameters', description='The parameter settings used during the actual run. The `triggerTime` parameter is required.'),
  projectId?: long(name='ProjectId', description='The project ID.', example='10000'),
  runtimeResourceShrink?: string(name='RuntimeResource', description='The scheduling resource group used when running the data quality monitor. This resource group uses the same data structure as in the scheduling API.'),
}

model CreateDataQualityScanRunResponseBody = {
  id?: long(name='Id', description='The RunId that was successfully triggered.', example='248840'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc14115***159376359'),
}

model CreateDataQualityScanRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataQualityScanRunResponseBody(name='body'),
}

/**
 * @summary Triggers a data quality monitoring task and returns the run instance ID.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq CreateDataQualityScanRunRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataQualityScanRunResponse
 */
async function createDataQualityScanRunWithOptions(tmpReq: CreateDataQualityScanRunRequest, runtime: Util.RuntimeOptions): CreateDataQualityScanRunResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDataQualityScanRunShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.parameters)) {
    request.parametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.parameters, 'Parameters', 'json');
  }
  if (!Util.isUnset(tmpReq.runtimeResource)) {
    request.runtimeResourceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.runtimeResource, 'RuntimeResource', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dataQualityScanId)) {
    body['DataQualityScanId'] = request.dataQualityScanId;
  }
  if (!Util.isUnset(request.parametersShrink)) {
    body['Parameters'] = request.parametersShrink;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.runtimeResourceShrink)) {
    body['RuntimeResource'] = request.runtimeResourceShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataQualityScanRun',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Triggers a data quality monitoring task and returns the run instance ID.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request CreateDataQualityScanRunRequest
 * @return CreateDataQualityScanRunResponse
 */
async function createDataQualityScanRun(request: CreateDataQualityScanRunRequest): CreateDataQualityScanRunResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataQualityScanRunWithOptions(request, runtime);
}

model CreateDataQualityTemplateRequest {
  owner?: string(name='Owner', description='The owner ID.', example='1000000000001'),
  projectId?: long(name='ProjectId', description='The project ID.', example='10000'),
  spec?: string(name='Spec', description='Detailed configuration Spec code of the rule template. For more information, see [Data quality Spec configuration description](~2963394~).', example='{
    "assertion": "anomaly detection fro id_not_null_cnt",
    "id_not_null_cnt": {
        "query": "SELECT COUNT(*) AS cnt FROM ${tableName} WHERE dt = \\\\"$[yyyymmdd-1]\\\\";"
    },
    "identity": "819cf1f8-29be-4f94-a9d0-c5c06c0c3d2a"
}'),
}

model CreateDataQualityTemplateResponseBody = {
  id?: string(name='Id', description='The unique identifier of the newly created rule template.', example='USER-DEFINED:2001'),
  requestId?: string(name='RequestId', description='The API request ID, which is generated as a UUID.', example='0bc14115***159376359'),
}

model CreateDataQualityTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataQualityTemplateResponseBody(name='body'),
}

/**
 * @summary Creates a data quality template.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request CreateDataQualityTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataQualityTemplateResponse
 */
async function createDataQualityTemplateWithOptions(request: CreateDataQualityTemplateRequest, runtime: Util.RuntimeOptions): CreateDataQualityTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataQualityTemplate',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a data quality template.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request CreateDataQualityTemplateRequest
 * @return CreateDataQualityTemplateResponse
 */
async function createDataQualityTemplate(request: CreateDataQualityTemplateRequest): CreateDataQualityTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataQualityTemplateWithOptions(request, runtime);
}

model CreateDataSourceRequest {
  connectionProperties?: string(name='ConnectionProperties', description='The connection configurations of the data source, including the connection address, access identity, and environment information. The envType parameter specifies the environment in which the data source is used. Valid values of the envType parameter:

*   Dev: development environment
*   Prod: production environment

The parameters that you need to configure for the data source vary based on the mode in which the data source is added. For more information, see [Data source connection information (ConnectionProperties)](https://help.aliyun.com/document_detail/2852465.html).

This parameter is required.', example='{
	"envType": "Prod",
	"regionId": "cn-beijing",
    "instanceId": "hgprecn-cn-x0r3oun4k001",
    "database": "testdb",
    "securityProtocol": "authTypeNone",
    "authType": "Executor",
    "authIdentity": "1107550004253538"
}'),
  connectionPropertiesMode?: string(name='ConnectionPropertiesMode', description='The mode in which you want to add the data source. The mode varies based on the data source type. Valid values for MySQL data sources:

*   InstanceMode: instance mode
*   UrlMode: connection string mode

This parameter is required.', example='UrlMode'),
  description?: string(name='Description', description='The description of the data source. The description cannot exceed 3,000 characters in length.', example='this is a holo datasource'),
  name?: string(name='Name', description='The name of the data source. The name can be up to 255 characters in length and can contain letters, digits, and underscores (_). The name must start with a letter.

This parameter is required.', example='demo_holo_datasource'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/overview) and go to the workspace management page to obtain the ID.

This parameter is used to determine the DataWorks workspaces used for this API call.

This parameter is required.', example='2'),
  type?: string(name='Type', description='The type of the data source. More than 70 types of data sources are supported in DataWorks. For more information, see [Data source types](https://help.aliyun.com/document_detail/2852465.html).

This parameter is required.', example='hologres'),
}

model CreateDataSourceResponseBody = {
  id?: long(name='Id', description='The data source ID.', example='22130'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='B62EC203-B39E-5DC1-B5B8-EB3C61707009'),
}

model CreateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSourceResponseBody(name='body'),
}

/**
 * @summary Adds a data source to the development environment or production environment of a workspace.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request CreateDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataSourceResponse
 */
async function createDataSourceWithOptions(request: CreateDataSourceRequest, runtime: Util.RuntimeOptions): CreateDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionProperties)) {
    query['ConnectionProperties'] = request.connectionProperties;
  }
  if (!Util.isUnset(request.connectionPropertiesMode)) {
    query['ConnectionPropertiesMode'] = request.connectionPropertiesMode;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataSource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds a data source to the development environment or production environment of a workspace.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request CreateDataSourceRequest
 * @return CreateDataSourceResponse
 */
async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataSourceWithOptions(request, runtime);
}

model CreateDataSourceSharedRuleRequest {
  dataSourceId?: long(name='DataSourceId', description='The data source ID.

This parameter is required.', example='144544'),
  envType?: string(name='EnvType', description='Share data sources to the target project environment, including
- Dev (Development Environment)
- Prod (production environment)

This parameter is required.', example='Dev'),
  sharedUser?: string(name='SharedUser', description='The user with which you want to share the data source. If you do not configure this parameter, the data source is shared to an entire workspace.', example='1107550004253538'),
  targetProjectId?: long(name='TargetProjectId', description='The ID of the workspace to which you want to share the data source. You cannot share the data source to the workspace with which the data source is associated.

This parameter is required.', example='106560'),
}

model CreateDataSourceSharedRuleResponseBody = {
  id?: long(name='Id', description='The sharing rule ID.', example='105412'),
  requestId?: string(name='RequestId', description='The ID of the request. It is used to locate logs and troubleshoot problems.', example='46F594E6-84AB-5FA5-8144-6F3D149961E1'),
}

model CreateDataSourceSharedRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSourceSharedRuleResponseBody(name='body'),
}

/**
 * @summary Creates a rule for sharing a data source to other workspaces or RAM users.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  If you want to share a data source from Workspace A to Workspace B, you must have the permissions to share the data source in both workspaces. You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
 *
 * @param request CreateDataSourceSharedRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataSourceSharedRuleResponse
 */
async function createDataSourceSharedRuleWithOptions(request: CreateDataSourceSharedRuleRequest, runtime: Util.RuntimeOptions): CreateDataSourceSharedRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.sharedUser)) {
    query['SharedUser'] = request.sharedUser;
  }
  if (!Util.isUnset(request.targetProjectId)) {
    query['TargetProjectId'] = request.targetProjectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataSourceSharedRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a rule for sharing a data source to other workspaces or RAM users.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  If you want to share a data source from Workspace A to Workspace B, you must have the permissions to share the data source in both workspaces. You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
 *
 * @param request CreateDataSourceSharedRuleRequest
 * @return CreateDataSourceSharedRuleResponse
 */
async function createDataSourceSharedRule(request: CreateDataSourceSharedRuleRequest): CreateDataSourceSharedRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataSourceSharedRuleWithOptions(request, runtime);
}

model CreateFileRequest {
  advancedSettings?: string(name='AdvancedSettings', example='{"queue":"default","SPARK_CONF":"--conf spark.driver.memory=2g"}'),
  applyScheduleImmediately?: boolean(name='ApplyScheduleImmediately', example='true'),
  autoParsing?: boolean(name='AutoParsing', example='true'),
  autoRerunIntervalMillis?: int32(name='AutoRerunIntervalMillis', example='120000'),
  autoRerunTimes?: int32(name='AutoRerunTimes', example='3'),
  connectionName?: string(name='ConnectionName', example='odps_source'),
  content?: string(name='Content', example='SHOW TABLES;'),
  createFolderIfNotExists?: boolean(name='CreateFolderIfNotExists', example='false'),
  cronExpress?: string(name='CronExpress', example='00 05 00 * * ?'),
  cycleType?: string(name='CycleType', example='DAY'),
  dependentNodeIdList?: string(name='DependentNodeIdList', example='abc'),
  dependentType?: string(name='DependentType', example='NONE'),
  endEffectDate?: long(name='EndEffectDate', example='1671694850000'),
  fileDescription?: string(name='FileDescription'),
  fileFolderPath?: string(name='FileFolderPath', example='Business_process/First_Business_Process/MaxCompute/Folder_1/Folder_2'),
  fileName?: string(name='FileName', description='This parameter is required.', example='File name'),
  fileType?: int32(name='FileType', description='This parameter is required.', example='10'),
  ignoreParentSkipRunningProperty?: boolean(name='IgnoreParentSkipRunningProperty', example='false'),
  imageId?: string(name='ImageId', example='m-bp1h4b5a8ogkbll2f3tr'),
  inputList?: string(name='InputList', example='project_root,project.file1,project.001_out'),
  inputParameters?: string(name='InputParameters', example='[{"ValueSource": "project_001.first_node:bizdate_param","ParameterName": "bizdate_input"}]'),
  outputParameters?: string(name='OutputParameters', example='[{"Type": 1,"Value": "${bizdate}","ParameterName": "bizdate_param"}]'),
  owner?: string(name='Owner', example='1000000000001'),
  paraValue?: string(name='ParaValue', example='a=x b=y'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
  rerunMode?: string(name='RerunMode', example='ALL_ALLOWED'),
  resourceGroupId?: long(name='ResourceGroupId', example='375827434852437'),
  resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The resource group for the task deployed from the file. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the workspace configuration page. In the left-side navigation pane, click **Resource Group** to obtain the ID of the resource group associated with the current workspace.', example='S_res_group_559_1613715566828'),
  schedulerType?: string(name='SchedulerType', example='NORMAL'),
  startEffectDate?: long(name='StartEffectDate', example='1671608450000'),
  startImmediately?: boolean(name='StartImmediately', example='true'),
  stop?: boolean(name='Stop', example='false'),
  timeout?: int32(name='Timeout', example='1'),
}

model CreateFileResponseBody = {
  data?: long(name='Data', example='1000001'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', example='true'),
}

model CreateFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFileResponseBody(name='body'),
}

/**
 * @param request CreateFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFileResponse
 */
async function createFileWithOptions(request: CreateFileRequest, runtime: Util.RuntimeOptions): CreateFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.advancedSettings)) {
    body['AdvancedSettings'] = request.advancedSettings;
  }
  if (!Util.isUnset(request.applyScheduleImmediately)) {
    body['ApplyScheduleImmediately'] = request.applyScheduleImmediately;
  }
  if (!Util.isUnset(request.autoParsing)) {
    body['AutoParsing'] = request.autoParsing;
  }
  if (!Util.isUnset(request.autoRerunIntervalMillis)) {
    body['AutoRerunIntervalMillis'] = request.autoRerunIntervalMillis;
  }
  if (!Util.isUnset(request.autoRerunTimes)) {
    body['AutoRerunTimes'] = request.autoRerunTimes;
  }
  if (!Util.isUnset(request.connectionName)) {
    body['ConnectionName'] = request.connectionName;
  }
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.createFolderIfNotExists)) {
    body['CreateFolderIfNotExists'] = request.createFolderIfNotExists;
  }
  if (!Util.isUnset(request.cronExpress)) {
    body['CronExpress'] = request.cronExpress;
  }
  if (!Util.isUnset(request.cycleType)) {
    body['CycleType'] = request.cycleType;
  }
  if (!Util.isUnset(request.dependentNodeIdList)) {
    body['DependentNodeIdList'] = request.dependentNodeIdList;
  }
  if (!Util.isUnset(request.dependentType)) {
    body['DependentType'] = request.dependentType;
  }
  if (!Util.isUnset(request.endEffectDate)) {
    body['EndEffectDate'] = request.endEffectDate;
  }
  if (!Util.isUnset(request.fileDescription)) {
    body['FileDescription'] = request.fileDescription;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileType)) {
    body['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.ignoreParentSkipRunningProperty)) {
    body['IgnoreParentSkipRunningProperty'] = request.ignoreParentSkipRunningProperty;
  }
  if (!Util.isUnset(request.imageId)) {
    body['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.inputList)) {
    body['InputList'] = request.inputList;
  }
  if (!Util.isUnset(request.inputParameters)) {
    body['InputParameters'] = request.inputParameters;
  }
  if (!Util.isUnset(request.outputParameters)) {
    body['OutputParameters'] = request.outputParameters;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.paraValue)) {
    body['ParaValue'] = request.paraValue;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.rerunMode)) {
    body['RerunMode'] = request.rerunMode;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceGroupIdentifier)) {
    body['ResourceGroupIdentifier'] = request.resourceGroupIdentifier;
  }
  if (!Util.isUnset(request.schedulerType)) {
    body['SchedulerType'] = request.schedulerType;
  }
  if (!Util.isUnset(request.startEffectDate)) {
    body['StartEffectDate'] = request.startEffectDate;
  }
  if (!Util.isUnset(request.startImmediately)) {
    body['StartImmediately'] = request.startImmediately;
  }
  if (!Util.isUnset(request.stop)) {
    body['Stop'] = request.stop;
  }
  if (!Util.isUnset(request.timeout)) {
    body['Timeout'] = request.timeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFile',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateFileRequest
 * @return CreateFileResponse
 */
async function createFile(request: CreateFileRequest): CreateFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFileWithOptions(request, runtime);
}

model CreateFolderRequest {
  folderPath?: string(name='FolderPath', description='This parameter is required.', example='Business_process/System_Data/MaxCompute/import_layer'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model CreateFolderResponseBody = {
  data?: string(name='Data', example='bdfd68****'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', example='true'),
}

model CreateFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFolderResponseBody(name='body'),
}

/**
 * @param request CreateFolderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFolderResponse
 */
async function createFolderWithOptions(request: CreateFolderRequest, runtime: Util.RuntimeOptions): CreateFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderPath)) {
    body['FolderPath'] = request.folderPath;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFolder',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateFolderRequest
 * @return CreateFolderResponse
 */
async function createFolder(request: CreateFolderRequest): CreateFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFolderWithOptions(request, runtime);
}

model CreateFunctionRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='12345'),
  spec?: string(name='Spec', description='The FlowSpec field information about the UDF. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.', example='{
  "version": "1.1.0",
  "kind": "Function",
  "spec": {
    "functions": [
      {
        "name": "function name",
        "script": {
          "content": "{\\\\"name\\\\": \\\\"function name\\\\", \\\\"datasource\\\\": {\\\\"type\\\\": \\\\"ODPS\\\\", \\\\"name\\\\": \\\\"ODPS_first\\\\"}, \\\\"runtimeResource\\\\": {\\\\"resourceGroup\\\\": \\\\"s_res_group_xx_xxxx\\\\"}}",
          "path": "XXX/OpenAPI/function/function name",
          "runtime": {
            "command": "ODPS_FUNCTION"
          }
        },
        "datasource": {
          "name": "ODPS_first",
          "type": "ODPS"
        },
        "runtimeResource": {
          "resourceGroup": "S_res_group_XXXX_XXXX"
        }
      }
    ]
  }
}'),
}

model CreateFunctionResponseBody = {
  id?: long(name='Id', description='The ID of the UDF.', example='580667964888595XXXX'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='AE49C88D-5BEE-5ADD-8B8C-C4BBC0D7XXXX'),
}

model CreateFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFunctionResponseBody(name='body'),
}

/**
 * @summary Creates a user-defined function (UDF) in DataStudio. The information about the UDF is described by using FlowSpec.
 *
 * @description >  You cannot use this API operation to create multiple UDFs at a time. If you specify multiple UDFs by using FlowSpec, the system creates only the first specified UDF.
 *
 * @param request CreateFunctionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFunctionResponse
 */
async function createFunctionWithOptions(request: CreateFunctionRequest, runtime: Util.RuntimeOptions): CreateFunctionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFunction',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a user-defined function (UDF) in DataStudio. The information about the UDF is described by using FlowSpec.
 *
 * @description >  You cannot use this API operation to create multiple UDFs at a time. If you specify multiple UDFs by using FlowSpec, the system creates only the first specified UDF.
 *
 * @param request CreateFunctionRequest
 * @return CreateFunctionResponse
 */
async function createFunction(request: CreateFunctionRequest): CreateFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFunctionWithOptions(request, runtime);
}

model CreateLineageRelationshipRequest {
  dstEntity?: LineageEntity(name='DstEntity'),
  srcEntity?: LineageEntity(name='SrcEntity'),
  task?: LineageTask(name='Task', description='The task information.'),
}

model CreateLineageRelationshipShrinkRequest {
  dstEntityShrink?: string(name='DstEntity'),
  srcEntityShrink?: string(name='SrcEntity'),
  taskShrink?: string(name='Task', description='The task information.'),
}

model CreateLineageRelationshipResponseBody = {
  id?: string(name='Id', description='The lineage ID.', example='110xxxx:custom-table.xxxxx:maxcompute-table.project.test_big_lineage_080901:custom-sqlxx.00001'),
  requestId?: string(name='RequestId', example='C99E2BE6-9DEA-5C2E-8F51-1DDCFEADE490'),
  success?: boolean(name='Success', example='true'),
}

model CreateLineageRelationshipResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLineageRelationshipResponseBody(name='body'),
}

/**
 * @summary Creates a lineage between a source entity and a destination entity. Either the source or destination entity must be a custom entity.
 *
 * @param tmpReq CreateLineageRelationshipRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateLineageRelationshipResponse
 */
async function createLineageRelationshipWithOptions(tmpReq: CreateLineageRelationshipRequest, runtime: Util.RuntimeOptions): CreateLineageRelationshipResponse {
  Util.validateModel(tmpReq);
  var request = new CreateLineageRelationshipShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dstEntity)) {
    request.dstEntityShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dstEntity, 'DstEntity', 'json');
  }
  if (!Util.isUnset(tmpReq.srcEntity)) {
    request.srcEntityShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.srcEntity, 'SrcEntity', 'json');
  }
  if (!Util.isUnset(tmpReq.task)) {
    request.taskShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.task, 'Task', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.dstEntityShrink)) {
    query['DstEntity'] = request.dstEntityShrink;
  }
  if (!Util.isUnset(request.srcEntityShrink)) {
    query['SrcEntity'] = request.srcEntityShrink;
  }
  if (!Util.isUnset(request.taskShrink)) {
    query['Task'] = request.taskShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLineageRelationship',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a lineage between a source entity and a destination entity. Either the source or destination entity must be a custom entity.
 *
 * @param request CreateLineageRelationshipRequest
 * @return CreateLineageRelationshipResponse
 */
async function createLineageRelationship(request: CreateLineageRelationshipRequest): CreateLineageRelationshipResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLineageRelationshipWithOptions(request, runtime);
}

model CreateMetaCollectionRequest {
  description?: string(name='Description', example='test comment'),
  name?: string(name='Name', description='This parameter is required.', example='test_album'),
  parentId?: string(name='ParentId', description='The ID of the collection of an ancestor node.', example='category.123'),
  type?: string(name='Type', description='This parameter is required.', example='Category'),
}

model CreateMetaCollectionResponseBody = {
  id?: string(name='Id', description='The ID of the created collection.', example='category.123'),
  requestId?: string(name='RequestId', description='Id of the request', example='E6F0DBDD-5AD****'),
}

model CreateMetaCollectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMetaCollectionResponseBody(name='body'),
}

/**
 * @summary Creates a collection in Data Map. Collections include categories, subcategories, data albums, and categories that are created in the data albums.
 *
 * @param request CreateMetaCollectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMetaCollectionResponse
 */
async function createMetaCollectionWithOptions(request: CreateMetaCollectionRequest, runtime: Util.RuntimeOptions): CreateMetaCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentId)) {
    query['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMetaCollection',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a collection in Data Map. Collections include categories, subcategories, data albums, and categories that are created in the data albums.
 *
 * @param request CreateMetaCollectionRequest
 * @return CreateMetaCollectionResponse
 */
async function createMetaCollection(request: CreateMetaCollectionRequest): CreateMetaCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMetaCollectionWithOptions(request, runtime);
}

model CreateNetworkRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

This parameter is required.', example='eb870033-74c8-4b1b-9664-04c4e7cc3465'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the serverless resource group.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).

This parameter is required.', example='vpc-m2et4f3oc8msfbccXXXXX'),
  vswitchId?: string(name='VswitchId', description='The VSwitch ID.

This parameter is required.', example='vsw-uf8usrhs7hjd9amsXXXXX'),
}

model CreateNetworkResponseBody = {
  id?: long(name='Id', description='The network ID.', example='1000'),
  requestId?: string(name='RequestId', description='The request ID.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateNetworkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNetworkResponseBody(name='body'),
}

/**
 * @summary Creates a network and associates the network with a general resource group.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request CreateNetworkRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateNetworkResponse
 */
async function createNetworkWithOptions(request: CreateNetworkRequest, runtime: Util.RuntimeOptions): CreateNetworkResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vswitchId)) {
    body['VswitchId'] = request.vswitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateNetwork',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a network and associates the network with a general resource group.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request CreateNetworkRequest
 * @return CreateNetworkResponse
 */
async function createNetwork(request: CreateNetworkRequest): CreateNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNetworkWithOptions(request, runtime);
}

model CreateNodeRequest {
  containerId?: long(name='ContainerId', description='The container ID. If you want to create a node in a container, you must configure this parameter to specify the container. The container can be a workflow or a node in a container.

>  If you configure this parameter, the path field defined in FlowSpec becomes invalid.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='123456'),
  scene?: string(name='Scene', description='The scene of the node. This parameter determines the location (the DataStudio pane or the Manual pane) of the node. You can set this parameter to DataworksManualWorkflow only if the ContainerId parameter is configured and the container specified by ContainerId is a manually triggered workflow.

Valid values:

*   DataworksProject
*   DataworksManualWorkflow
*   DataworksManualTask

This parameter is required.', example='DATAWORKS_PROJECT'),
  spec?: string(name='Spec', description='{ "type": "object", "description": "CycleWorkflow the structure of the workflow configurations", "properties": { "version": { "type": "string", "description": "the version ID of the workflow configuration files" }, "kind": { "type": "string", "description": "the category ID of the workflow", "enum": [ "CycleWorkflow", "ManualWorkflow", "ManualNode", "TemporaryWorkflow", "PaiFlow", "BatchDeployment", "DataSource", "DataQuality", "DataService", "DataCatalog", "Table", "Node", "Component", "Resource", "Function", "Workflow" ] }, "spec": { "type": "object", "description": "the key configurations of the workflow", "properties": { "name": { "type": "string", "description": "the readable name identifier of the workflow" }, "id": { "type": "string", "description": "the UUID of the workflow" }, "type": { "type": "string", "description": "the type of the workflow instance", "enum": [ "CycleWorkflow", "ManualWorkflow" ] }, "owner": { "type": "string", "description": "the system user ID of the workflow owner" }, "description": { "type": "string", "description": "the detailed description of the features and usage of the workflow" }, "workflows": { "type": "array", "description": an array of node configurations in the workflow. The workflows can be run at the same time", "items": { "type": "object", "properties": { "script": { "type": "object", "description": "the script parameters", "properties": { "path": { "type": "string", "description": "the storage path of the script file. Example: HDFS/S3" }, "runtime": { "type": "object", "description": "the parameter settings for the runtime environment, such as the specifications of computing resources" }, "id": { "type": "string", "description": "the unique identifiers of the script parameters" } } }, "id": { "type": "string", "description": "the ID of the node in the workflow" }, "trigger": { "type": "object", "description": "the rule configurations to trigger the node“, "properties": { "type": { "type": "string", "enum": [ "Scheduler", "Manual", "Streaming", "None" ], "description": "the trigger type. Valid values: Scheduler, Manual, Streaming, and None" }, "id": { "type": "string", "description": "the trigger ID" }, "cron": { "type": "string", "description": "the scheduling rule of the node. The rule is in the cron expression format" }, "startTime": { "type": "string", "description": "the start time for scheduling. The value is in the ISO 8601 format" }, "endTime": { "type": "string", "description": "the end time for scheduling. The value is in the ISO 8601 format" }, "timezone": { "type": "string", "description": "the time zone. Example: UTC+8" }, "delaySeconds": { "type": "number", "description": "the delayed execution time. Unit: seconds" } } }, "strategy": { "type": "object", "description": "the execution policy parameters", "properties": { "timeout": { "type": "number", "description": "the timeout period. Unit: seconds" }, "instanceMode": { "type": "string", "enum": [ "T+1", "Immediately" ], "description": "the instance scheduling mode. Valid values: T+1 and Immediately" }, "rerunMode": { "type": "string", "enum": [ "Allowed", "Denied", "FailureAllowed" ], "description": "the rerun mode. Valid values: Allowed, Denied, and FailureAllowed" }, "rerunTimes": { "type": "number", "description": "the maximum number of reruns allowed after a failure" }, "rerunInterval": { "type": "number", "description": "the rerun interval. Unit: seconds" }, "failureStrategy": { "type": "string", "enum": [ "Continue", "Break" ], "description": "the failure handling policy. Valid values: Continue and Break" }, "recurrenceType": { "type": "string", "enum": [ "Normal", "Pause", "Skip", "NoneAuto" ], "description": "the running mode of the auto triggered node. Valid values: Normal, Pause, Skip, and NoneAuto" } } }, "name": { "type": "string", "description": "the readable name of the node" }, "owner": { "type": "string", "description": "the system ID of the node owner" }, "description": { "type": "string", "description": "the feature description of the node" }, "citable": { "type": "boolean", "description": "specifies whether the node can be referenced by other workflows. Valid values: true and false" }, "metadata": { "type": "object", "description": "the container that stores the metadata information", "properties": { "owner": { "type": "string", "description": "the metadata owner ID" }, "project": { "type": "object", "properties": { "projectIdentifier": { "type": "string", "description": "the unique code of the project" }, "projectName": { "type": "string", "description": "the project name" }, "projectId": { "type": "string", "Description": "the project ID" } } }, "ownerName": { "type": "string", "description": "the name of the project owner" }, "projectId": { "type": "string", "description": "the ID of the associated project" } } }, "inputs": { "type": "object", "description": "the structure of the node input", "properties": { "nodeOutputs": { "type": "array", "description": "the configuration items for node input", "items": { "type": "object", "properties": { "data": { "type": "string", "description": "the content of the node input" }, "artifactType": { "type": "string", "enum": [ "Table", "File", "NodeOutput", "Variable" ], "description": "the type of the node input. Valid values: Table, File, NodeOutput, and Variable" }, "refTableName": { "type": "string", "description": "the name of the referenced table" }, "isDefault": { "type": "boolean", "description": "specifies whether the table is the default output“ } } } }, "tables": { "type": "array", "description": "the metadata collection in the input table", "items": { "type": "object", "properties": { "artifactType": { "type": "string", "enum": [ "Table", "File", "NodeOutput", "Variable" ], "description": "the type of the table" }, "guid": { "type": "string", "description": "the GUID of the table" } } } } } }, "outputs": { "type": "object", "description": "the structure of the node output", "properties": { "nodeOutputs": { "type": "array", "description": "the configuration items for node output", "items": { "type": "object", "properties": { "data": { "type": "string", "description": "the content of the node output" }, "artifactType": { "type": "string", "enum": [ "Table", "File", "NodeOutput", "Variable" ], "description": "the type of the node output. Valid values: Table, File, NodeOutput, and Variable" }, "refTableName": { "type": "string", "description": "the name of the referenced table" }, "isDefault": { "type": "boolean", "description": "specifies whether the table is the default output“ } } } }, "tables": { "type": "array", "description": "the metadata collection in the output table", "items": { "type": "object", "properties": { "artifactType": { "type": "string", "enum": [ "Table", "File", "NodeOutput", "Variable" ], "description": "the type of the table" }, "guid": { "type": "string", "description": "the GUID of the table" } } } } } }, "nodes": { "type": "array", "description": "the configuration items for descendant nodes that are used for workflow nesting", "items": { "type": "object", "properties": { "recurrence": { "type": "string", "enum": [ "Normal", "Pause", "Skip", "NoneAuto" ], "description": "the running mode of the descendant node" }, "id": { "type": "string", "description": "the descendant node ID" }, "timeout": { "type": "number", "description": "the timeout period of the descendant node. Unit: seconds" }, "instanceMode": { "type": "string", "enum": [ "T+1", "Immediately" ], "description": "the instance scheduling mode of the descendant node. Valid values: T+1 and Immediately" }, "rerunMode": { "type": "string", "enum": [ "Allowed", "Denied", "FailureAllowed" ], "description": "the rerun mode of the descendant node" }, "rerunTimes": { "type": "number", "description": "the maximum number of reruns allowed after a failure for the descendant node" }, "rerunInterval": { "type": "number", "description": "the rerun interval" }, "datasource": { "type": "object", "description": "the parameters of the associated data source", "properties": { "name": { "type": "string", "description": "the name of the data source" }, "type": { "type": "string", "description": "the type of the data source. Examples: MySQL and Oracle" } } }, "script": { "type": "object", "description": "the script configurations of the node", "properties": { "language": { "type": "string", "enum": [ "python2", "python3", "java8", "java11", "java17" ], "description": "the programming language of the script" }, "path": { "type": "string", "description": "the storage path of the code" }, "runtime": { "type": "object", "description": "the configurations of the runtime environment" }, "content": { "type": "string", "description": "the content of the inline script" }, "id": { "type": "string", "description": "the identifier of the script content" }, "parameters": { "type": "array", "description": "the parameters for initialization", "items": { "type": "object", "properties": { "name": { "type": "string", "description": "the identifier of the parameter name" }, "artifactType": { "type": "string", "enum": [ "Table", "File", "NodeOutput", "Variable" ], "description": "the identifier of the data type" }, "scope": { "type": "string", "enum": [ "Tenant", "Workspace", "Workflow", "NodeParameter", "NodeContext" ], "description": "the application scope of the parameter" }, "type": { "type": "string", "enum": [ "NoKvVariableExpression", "System", "Constant", "NodeOutput", "PaiOutput", "PassThrough" ], "description": "the type of the parameter" }, "value": { "type": "string", "description": "the default value of the parameter" }, "id": { "type": "string", "description": "the parameter ID" } } } } } }, "trigger": { "type": "object", "description": "the configurations of the trigger at the node level. You can overwrite or inherit the configurations" }, "runtimeResource": { "type": "object", "description": "the configurations of computing resources, such as CPU and memory" }, "name": { "type": "string", "description": "the readable name of the descendant node" }, "owner": { "type": "string", "description": "the ID of the descendant node owner" }, "metadata": { "type": "object", "description": "the extended metadata of the descendant node" }, "inputs": { "type": "object", "description": "the parameter definitions of the node input" }, "outputs": { "type": "object", "description": "the parameter definitions of the node output" } } } }, "dependencies": { "type": "array", "description": "the node dependencies", "items": { "type": "object", "properties": { "nodeId": { "type": "string", "description": "the ID of the current node" }, "depends": { "type": "array", "description": "the ancestor node output", "items": { "type": "object", "properties": { "type": { "type": "string", "enum": [ "Normal", "CrossCycleDependsOnSelf", "CrossCycleDependsOnChildren", "CrossCycleDependsOnOtherNode" ], "description": "the dependency type. Valid values: Normal, CrossCycleDependsOnSelf, CrossCycleDependsOnChildren, and CrossCycleDependsOnOtherNode" }, "output": { "type": "string", "description": "the unique identifier of the ancestor node output" }, "refTableName": { "type": "string", "description": "the identifier of the referenced table name" } } } } } } } } } }, "metadata": { "type": "object", "description": "the high-level metadata of the workflow", "properties": { "innerVersion": { "type": "object", "description": "the mappings between the versions of components", "additionalProperties": { "type": "number" } }, "gmtModified": { "type": "number", "description": "the last modification time. The value is a UNIX timestamp" }, "projectId": { "type": "string", "description": "the ID of the associated project" }, "uuid": { "type": "string", "description": "the GUID of the instance" } } } } } }, "required": [ "version", "kind", "spec" ] }

This parameter is required.', example='{
  "version": "1.1.0",
  "kind": "Node",
  "spec": {
    "nodes": [
      {
        "id": "860438872620113XXXX",
        "recurrence": "Normal",
        "timeout": 0,
        "instanceMode": "T+1",
        "rerunMode": "Allowed",
        "rerunTimes": 3,
        "rerunInterval": 180000,
        "datasource": {
          "name": "ODPS_test",
          "type": "ODPS"
        },
        "script": {
          "path": "XX/OpenAPI test/odpsSQL test",
          "runtime": {
            "command": "ODPS_SQL"
          },
          "content": "select now();"
        },
        "trigger": {
          "type": "Scheduler",
          "cron": "00 00 00 * * ?",
          "startTime": "1970-01-01 00:00:00",
          "endTime": "9999-01-01 00:00:00",
          "timezone": "Asia/Shanghai",
          "delaySeconds": 0
        },
        "runtimeResource": {
          "resourceGroup": "S_res_group_XXXX_XXXX"
        },
        "name": "odpsSQL test",
        "inputs": {
          "nodeOutputs": [
            {
              "data": "lwttest_standard_root",
              "artifactType": "NodeOutput"
            }
          ]
        },
        "outputs": {
          "nodeOutputs": [
            {
              "data": "output_data",
              "artifactType": "NodeOutput",
              "refTableName": "odpsSQL test"
            }
          ]
        }
      }
    ],
    "flow": [
      {
        "nodeId": "860438872620113XXXX",
        "depends": [
          {
            "type": "Normal",
            "output": "project_root"
          }
        ]
      }
    ]
  }
}'),
}

model CreateNodeResponseBody = {
  id?: long(name='Id', description='The ID of the node.', example='860438872620113XXXX'),
  requestId?: string(name='RequestId', description='The request ID.', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
}

model CreateNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNodeResponseBody(name='body'),
}

/**
 * @summary Creates a node in DataStudio. The information about the node is described by using FlowSpec.
 *
 * @description >  You cannot use this API operation to create multiple nodes at a time. If you specify multiple nodes by using FlowSpec, the system creates only the first specified node.
 *
 * @param request CreateNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateNodeResponse
 */
async function createNodeWithOptions(request: CreateNodeRequest, runtime: Util.RuntimeOptions): CreateNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.containerId)) {
    body['ContainerId'] = request.containerId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.scene)) {
    body['Scene'] = request.scene;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateNode',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a node in DataStudio. The information about the node is described by using FlowSpec.
 *
 * @description >  You cannot use this API operation to create multiple nodes at a time. If you specify multiple nodes by using FlowSpec, the system creates only the first specified node.
 *
 * @param request CreateNodeRequest
 * @return CreateNodeResponse
 */
async function createNode(request: CreateNodeRequest): CreateNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNodeWithOptions(request, runtime);
}

model CreatePipelineRunRequest {
  description?: string(name='Description', description='The description of the process.', example='This is a OdpsSQL-node publishing process. The function is XXXX.'),
  objectIds?: [ string ](name='ObjectIds', description='The IDs of entities to which you want to apply the process.

>  A process can be applied to only a single entity and its child entities. If you specify multiple entities in the array, the process is applied only to the first entity in the array and its child entities. Make sure that the array in your request contains only one element. Extra elements will be ignored.

This parameter is required.'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  type?: string(name='Type', description='Specifies whether to deploy or undeploy the entity. Valid values:

*   Online: deploys the entity.
*   Offline: undeploys the entity.

This parameter is required.', example='Online'),
}

model CreatePipelineRunShrinkRequest {
  description?: string(name='Description', description='The description of the process.', example='This is a OdpsSQL-node publishing process. The function is XXXX.'),
  objectIdsShrink?: string(name='ObjectIds', description='The IDs of entities to which you want to apply the process.

>  A process can be applied to only a single entity and its child entities. If you specify multiple entities in the array, the process is applied only to the first entity in the array and its child entities. Make sure that the array in your request contains only one element. Extra elements will be ignored.

This parameter is required.'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  type?: string(name='Type', description='Specifies whether to deploy or undeploy the entity. Valid values:

*   Online: deploys the entity.
*   Offline: undeploys the entity.

This parameter is required.', example='Online'),
}

model CreatePipelineRunResponseBody = {
  id?: string(name='Id', description='The ID of the process.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX'),
  requestId?: string(name='RequestId', description='The request ID.', example='7C352CB7-CD88-50CF-9D0D-E81BDF02XXXX'),
}

model CreatePipelineRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePipelineRunResponseBody(name='body'),
}

/**
 * @summary Creates a process for deploying or undeploying an entity in Data Studio.
 *
 * @description >  You cannot use this API operation to create a process for multiple entities at a time. If you specify multiple entities in a request, the system creates a process only for the first entity.
 *
 * @param tmpReq CreatePipelineRunRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePipelineRunResponse
 */
async function createPipelineRunWithOptions(tmpReq: CreatePipelineRunRequest, runtime: Util.RuntimeOptions): CreatePipelineRunResponse {
  Util.validateModel(tmpReq);
  var request = new CreatePipelineRunShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.objectIds)) {
    request.objectIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.objectIds, 'ObjectIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.objectIdsShrink)) {
    body['ObjectIds'] = request.objectIdsShrink;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePipelineRun',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a process for deploying or undeploying an entity in Data Studio.
 *
 * @description >  You cannot use this API operation to create a process for multiple entities at a time. If you specify multiple entities in a request, the system creates a process only for the first entity.
 *
 * @param request CreatePipelineRunRequest
 * @return CreatePipelineRunResponse
 */
async function createPipelineRun(request: CreatePipelineRunRequest): CreatePipelineRunResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPipelineRunWithOptions(request, runtime);
}

model CreateProjectRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='The ID of the Alibaba Cloud resource group to which the workspace belongs. You can log on to the [Resource Management console](https://resourcemanager.console.aliyun.com/resource-groups) and go to the Resource Group page to query the ID.

You must configure this parameter to specify an Alibaba Cloud resource group for the workspace that you want to create.', example='rg-acfmzbn7pti3zff'),
  aliyunResourceTags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='batch'),
      value?: string(name='Value', description='The tag value.', example='blue'),
    }
  ](name='AliyunResourceTags', description='The tags.'),
  description?: string(name='Description', description='The description of the workspace.', example='Financial analysis group project data development'),
  devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', description='Specifies whether to enable the development environment. Valid values:

*   true : enables the development environment. In this case, the development environment is isolated from the production environment in the workspace.
*   false: disables the development environment. In this case, only the production environment is used in the workspace.', example='false'),
  devRoleDisabled?: boolean(name='DevRoleDisabled', description='Specifies whether to disable the Develop role. Valid values:

*   false (default)
*   true', example='true'),
  displayName?: string(name='DisplayName', description='The display name of the workspace.

This parameter is required.', example='Sora financial analysis'),
  name?: string(name='Name', description='The name of the workspace.

Limits:

*   The workspace name must be unqiue in a region.
*   The workspace name can contain letters, digits, and underscores (_), and must start with a letter.
*   The workspace name must be 3 to 28 characters in length.

This parameter is required.', example='sora_finance'),
  paiTaskEnabled?: boolean(name='PaiTaskEnabled', description='Specifies whether to enable scheduling of Platform for AI (PAI) tasks. Valid values:

*   true: enables scheduling of PAI tasks. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
*   false: disables scheduling of PAI tasks.', example='true'),
}

model CreateProjectShrinkRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='The ID of the Alibaba Cloud resource group to which the workspace belongs. You can log on to the [Resource Management console](https://resourcemanager.console.aliyun.com/resource-groups) and go to the Resource Group page to query the ID.

You must configure this parameter to specify an Alibaba Cloud resource group for the workspace that you want to create.', example='rg-acfmzbn7pti3zff'),
  aliyunResourceTagsShrink?: string(name='AliyunResourceTags', description='The tags.'),
  description?: string(name='Description', description='The description of the workspace.', example='Financial analysis group project data development'),
  devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', description='Specifies whether to enable the development environment. Valid values:

*   true : enables the development environment. In this case, the development environment is isolated from the production environment in the workspace.
*   false: disables the development environment. In this case, only the production environment is used in the workspace.', example='false'),
  devRoleDisabled?: boolean(name='DevRoleDisabled', description='Specifies whether to disable the Develop role. Valid values:

*   false (default)
*   true', example='true'),
  displayName?: string(name='DisplayName', description='The display name of the workspace.

This parameter is required.', example='Sora financial analysis'),
  name?: string(name='Name', description='The name of the workspace.

Limits:

*   The workspace name must be unqiue in a region.
*   The workspace name can contain letters, digits, and underscores (_), and must start with a letter.
*   The workspace name must be 3 to 28 characters in length.

This parameter is required.', example='sora_finance'),
  paiTaskEnabled?: boolean(name='PaiTaskEnabled', description='Specifies whether to enable scheduling of Platform for AI (PAI) tasks. Valid values:

*   true: enables scheduling of PAI tasks. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
*   false: disables scheduling of PAI tasks.', example='true'),
}

model CreateProjectResponseBody = {
  id?: long(name='Id', description='The workspace ID.', example='123456'),
  projectId?: long(name='ProjectId', description='The workspace ID. Note: This parameter is deprecated and is replaced by the Id parameter.', example='123456', deprecated=true),
  requestId?: string(name='RequestId', description='The request ID.', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
}

model CreateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProjectResponseBody(name='body'),
}

/**
 * @summary Creates a workspace.
 *
 * @param tmpReq CreateProjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateProjectResponse
 */
async function createProjectWithOptions(tmpReq: CreateProjectRequest, runtime: Util.RuntimeOptions): CreateProjectResponse {
  Util.validateModel(tmpReq);
  var request = new CreateProjectShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.aliyunResourceTags)) {
    request.aliyunResourceTagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.aliyunResourceTags, 'AliyunResourceTags', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.aliyunResourceGroupId)) {
    body['AliyunResourceGroupId'] = request.aliyunResourceGroupId;
  }
  if (!Util.isUnset(request.aliyunResourceTagsShrink)) {
    body['AliyunResourceTags'] = request.aliyunResourceTagsShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.devEnvironmentEnabled)) {
    body['DevEnvironmentEnabled'] = request.devEnvironmentEnabled;
  }
  if (!Util.isUnset(request.devRoleDisabled)) {
    body['DevRoleDisabled'] = request.devRoleDisabled;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.paiTaskEnabled)) {
    body['PaiTaskEnabled'] = request.paiTaskEnabled;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateProject',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a workspace.
 *
 * @param request CreateProjectRequest
 * @return CreateProjectResponse
 */
async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProjectWithOptions(request, runtime);
}

model CreateProjectMemberRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='24054'),
  roleCodes?: [ string ](name='RoleCodes', description='The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.

This parameter specifies the roles that you can assign to a member when you add the member.

This parameter is required.'),
  userId?: string(name='UserId', description='The ID of the account that you want to add to the workspace as a member. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click **Tenant Members and Roles**. On the Tenant Members and Roles page, view the ID of the account that you want to add to the workspace as a member.

This parameter is required.', example='123422344899'),
}

model CreateProjectMemberShrinkRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='24054'),
  roleCodesShrink?: string(name='RoleCodes', description='The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.

This parameter specifies the roles that you can assign to a member when you add the member.

This parameter is required.'),
  userId?: string(name='UserId', description='The ID of the account that you want to add to the workspace as a member. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click **Tenant Members and Roles**. On the Tenant Members and Roles page, view the ID of the account that you want to add to the workspace as a member.

This parameter is required.', example='123422344899'),
}

model CreateProjectMemberResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='2B2F0B26-9253-5780-B6DB-F1A886D44D6F'),
}

model CreateProjectMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProjectMemberResponseBody(name='body'),
}

/**
 * @summary Adds a workspace member and assigns a workspace-level role to the member.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq CreateProjectMemberRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateProjectMemberResponse
 */
async function createProjectMemberWithOptions(tmpReq: CreateProjectMemberRequest, runtime: Util.RuntimeOptions): CreateProjectMemberResponse {
  Util.validateModel(tmpReq);
  var request = new CreateProjectMemberShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.roleCodes)) {
    request.roleCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roleCodes, 'RoleCodes', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.roleCodesShrink)) {
    body['RoleCodes'] = request.roleCodesShrink;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateProjectMember',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds a workspace member and assigns a workspace-level role to the member.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request CreateProjectMemberRequest
 * @return CreateProjectMemberResponse
 */
async function createProjectMember(request: CreateProjectMemberRequest): CreateProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProjectMemberWithOptions(request, runtime);
}

model CreateResourceRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='123456'),
  resourceFile?: string(name='ResourceFile'),
  spec?: string(name='Spec', description='The FlowSpec field information about the file resource. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.', example='{
    "version": "1.1.0",
    "kind": "Resource",
    "spec": {
        "fileResources": [
            {
                "name": "OpenAPITestResource.py",
                "script": {
                    "content": "",
                    "path": "XX/OpenAPITest/ResourcesTest/OpenAPITestResource.py",
                    "runtime": {
                        "command": "ODPS_PYTHON"
                    }
                },
                "type": "python",
                "file": {
                    "storage": {}
                },
                "datasource": {
                    "name": "odps_first",
                    "type": "odps"
                }
            }
        ]
    }
}'),
}

model CreateResourceAdvanceRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='123456'),
  resourceFileObject?: readable(name='ResourceFile'),
  spec?: string(name='Spec', description='The FlowSpec field information about the file resource. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.', example='{
    "version": "1.1.0",
    "kind": "Resource",
    "spec": {
        "fileResources": [
            {
                "name": "OpenAPITestResource.py",
                "script": {
                    "content": "",
                    "path": "XX/OpenAPITest/ResourcesTest/OpenAPITestResource.py",
                    "runtime": {
                        "command": "ODPS_PYTHON"
                    }
                },
                "type": "python",
                "file": {
                    "storage": {}
                },
                "datasource": {
                    "name": "odps_first",
                    "type": "odps"
                }
            }
        ]
    }
}'),
}

model CreateResourceResponseBody = {
  id?: long(name='Id', description='The ID of the file resource.', example='631478864897630XXXX'),
  requestId?: string(name='RequestId', description='A5B97987-66EA-5563-9599-A2752292XXXX', example='The ID of the file resource.'),
}

model CreateResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceResponseBody(name='body'),
}

/**
 * @summary >  You cannot use this API operation to create multiple file resources at a time. If you specify multiple file resources by using FlowSpec, the system creates only the first specified resource.
 *
 * @description Private
 *
 * @param request CreateResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateResourceResponse
 */
async function createResourceWithOptions(request: CreateResourceRequest, runtime: Util.RuntimeOptions): CreateResourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.resourceFile)) {
    body['ResourceFile'] = request.resourceFile;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateResource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary >  You cannot use this API operation to create multiple file resources at a time. If you specify multiple file resources by using FlowSpec, the system creates only the first specified resource.
 *
 * @description Private
 *
 * @param request CreateResourceRequest
 * @return CreateResourceResponse
 */
async function createResource(request: CreateResourceRequest): CreateResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResourceWithOptions(request, runtime);
}

async function createResourceAdvance(request: CreateResourceAdvanceRequest, runtime: Util.RuntimeOptions): CreateResourceResponse {
  // Step 0: init client
  var credentialModel: Credential.CredentialModel = null;
  if (Util.isUnset(@credential)) {
    throw {
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.empty(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'dataworks-public',
    RegionId = @regionId,
  };
  var authReq = new OpenApi.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApi.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new FileForm.FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var createResourceReq = new CreateResourceRequest{};
  OpenApiUtil.convert(request, createResourceReq);

  if(!Util.isUnset(request.resourceFileObject)) {
    var tmpResp0: any = authClient.callApi(authParams, authReq, runtime);
    authResponse = Util.assertAsMap(tmpResp0);
    tmpBody = Util.assertAsMap(authResponse['body']);
    useAccelerate = Util.assertAsBoolean(tmpBody['UseAccelerate']);
    authResponseBody = Util.stringifyMapValue(tmpBody);
    fileObj = new FileForm.FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.resourceFileObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    createResourceReq.resourceFile = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var createResourceResp = createResourceWithOptions(createResourceReq, runtime);
  return createResourceResp;
}

model CreateResourceFileRequest {
  content?: string(name='Content', description='The code for the file. The code format varies based on the file type. To view the code format for a specific file type, go to Operation Center, open the directed acyclic graph (DAG) of a node of the file type, right-click the node, and then select View Code.', example='SHOW TABLES;'),
  fileDescription?: string(name='FileDescription', description='The description of the file.', example='This is a description'),
  fileFolderPath?: string(name='FileFolderPath', description='The path of the file.

This parameter is required.', example='Business_process/First_Business_Process/MaxCompute/Folder_1/Folder_2'),
  fileName?: string(name='FileName', description='The name of the file.

This parameter is required.', example='Filename'),
  fileType?: int32(name='FileType', description='The type of the code for the file.

The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html). You can call the [ListFileType](https://help.aliyun.com/document_detail/212428.html) operation to query the type of the code for the file.

This parameter is required.', example='10'),
  originResourceName?: string(name='OriginResourceName', description='The name of the original resource file.

This parameter is required.', example='origin_file_name.sql'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the file owner. If this parameter is not configured, the ID of the Alibaba Cloud account of the user who calls the operation is used by default.', example='1000000000001'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the operation is applied.

This parameter is required.', example='10000'),
  registerToCalcEngine?: boolean(name='RegisterToCalcEngine', description='Specifies whether to upload the resource file to a desired compute engine.

This parameter is required.', example='false'),
  resourceFile?: string(name='ResourceFile', description='The URL of the Object Storage Service (OSS) bucket to which you upload the file. The URL is provided by the POP platform.', example='http://bucketname1.oss-cn-shanghai.aliyuncs.com/example'),
  storageURL?: string(name='StorageURL', description='The storage path of the resource file in a desired compute engine. This parameter takes effect only for E-MapReduce (EMR) and Cloudera\\\\"s Distribution including Apache Hadoop (CDH) compute engines. In an EMR compute engine, this parameter is configured in the [osshdfs]://path/to/object format. In a CDH compute engine, this parameter is set to /user/admin/lib by default.', example='oss://oss-cn-shanghai.aliyuncs.com/emr-test'),
  uploadMode?: boolean(name='UploadMode', description='The upload mode of MaxCompute file resources. This parameter takes effect only for MaxCompute file resources. Valid values:

*   true: indicates the resource upload and download mode.
*   false: indicates the online editing mode.', example='false'),
}

model CreateResourceFileAdvanceRequest {
  content?: string(name='Content', description='The code for the file. The code format varies based on the file type. To view the code format for a specific file type, go to Operation Center, open the directed acyclic graph (DAG) of a node of the file type, right-click the node, and then select View Code.', example='SHOW TABLES;'),
  fileDescription?: string(name='FileDescription', description='The description of the file.', example='This is a description'),
  fileFolderPath?: string(name='FileFolderPath', description='The path of the file.

This parameter is required.', example='Business_process/First_Business_Process/MaxCompute/Folder_1/Folder_2'),
  fileName?: string(name='FileName', description='The name of the file.

This parameter is required.', example='Filename'),
  fileType?: int32(name='FileType', description='The type of the code for the file.

The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html). You can call the [ListFileType](https://help.aliyun.com/document_detail/212428.html) operation to query the type of the code for the file.

This parameter is required.', example='10'),
  originResourceName?: string(name='OriginResourceName', description='The name of the original resource file.

This parameter is required.', example='origin_file_name.sql'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the file owner. If this parameter is not configured, the ID of the Alibaba Cloud account of the user who calls the operation is used by default.', example='1000000000001'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the DataWorks console and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the operation is applied.

This parameter is required.', example='10000'),
  registerToCalcEngine?: boolean(name='RegisterToCalcEngine', description='Specifies whether to upload the resource file to a desired compute engine.

This parameter is required.', example='false'),
  resourceFileObject?: readable(name='ResourceFile', description='The URL of the Object Storage Service (OSS) bucket to which you upload the file. The URL is provided by the POP platform.', example='http://bucketname1.oss-cn-shanghai.aliyuncs.com/example'),
  storageURL?: string(name='StorageURL', description='The storage path of the resource file in a desired compute engine. This parameter takes effect only for E-MapReduce (EMR) and Cloudera\\\\"s Distribution including Apache Hadoop (CDH) compute engines. In an EMR compute engine, this parameter is configured in the [osshdfs]://path/to/object format. In a CDH compute engine, this parameter is set to /user/admin/lib by default.', example='oss://oss-cn-shanghai.aliyuncs.com/emr-test'),
  uploadMode?: boolean(name='UploadMode', description='The upload mode of MaxCompute file resources. This parameter takes effect only for MaxCompute file resources. Valid values:

*   true: indicates the resource upload and download mode.
*   false: indicates the online editing mode.', example='false'),
}

model CreateResourceFileResponseBody = {
  data?: long(name='Data', description='The ID of the file that is created.', example='1000001'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG'),
}

model CreateResourceFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceFileResponseBody(name='body'),
}

/**
 * @summary Creates a resource file in DataStudio. The following types are supported: JAR, Archive, File, and Python.
 *
 * @param request CreateResourceFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateResourceFileResponse
 */
async function createResourceFileWithOptions(request: CreateResourceFileRequest, runtime: Util.RuntimeOptions): CreateResourceFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.fileDescription)) {
    body['FileDescription'] = request.fileDescription;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileType)) {
    body['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.originResourceName)) {
    body['OriginResourceName'] = request.originResourceName;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.registerToCalcEngine)) {
    body['RegisterToCalcEngine'] = request.registerToCalcEngine;
  }
  if (!Util.isUnset(request.resourceFile)) {
    body['ResourceFile'] = request.resourceFile;
  }
  if (!Util.isUnset(request.storageURL)) {
    body['StorageURL'] = request.storageURL;
  }
  if (!Util.isUnset(request.uploadMode)) {
    body['UploadMode'] = request.uploadMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateResourceFile',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a resource file in DataStudio. The following types are supported: JAR, Archive, File, and Python.
 *
 * @param request CreateResourceFileRequest
 * @return CreateResourceFileResponse
 */
async function createResourceFile(request: CreateResourceFileRequest): CreateResourceFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResourceFileWithOptions(request, runtime);
}

async function createResourceFileAdvance(request: CreateResourceFileAdvanceRequest, runtime: Util.RuntimeOptions): CreateResourceFileResponse {
  // Step 0: init client
  var credentialModel: Credential.CredentialModel = null;
  if (Util.isUnset(@credential)) {
    throw {
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.empty(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'dataworks-public',
    RegionId = @regionId,
  };
  var authReq = new OpenApi.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApi.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new FileForm.FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var createResourceFileReq = new CreateResourceFileRequest{};
  OpenApiUtil.convert(request, createResourceFileReq);

  if(!Util.isUnset(request.resourceFileObject)) {
    var tmpResp0: any = authClient.callApi(authParams, authReq, runtime);
    authResponse = Util.assertAsMap(tmpResp0);
    tmpBody = Util.assertAsMap(authResponse['body']);
    useAccelerate = Util.assertAsBoolean(tmpBody['UseAccelerate']);
    authResponseBody = Util.stringifyMapValue(tmpBody);
    fileObj = new FileForm.FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.resourceFileObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    createResourceFileReq.resourceFile = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var createResourceFileResp = createResourceFileWithOptions(createResourceFileReq, runtime);
  return createResourceFileResp;
}

model CreateResourceGroupRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='The ID of the Alibaba Cloud resource group.', example='rg-aek2kqofrgXXXXX'),
  aliyunResourceTags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='key'),
      value?: string(name='Value', description='The tag value.', example='value'),
    }
  ](name='AliyunResourceTags', description='The tags.'),
  autoRenewEnabled?: boolean(name='AutoRenewEnabled', description='Specifies whether to enable auto-renewal.'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

This parameter is required.', example='eb870033-74c8-4b1b-9664-04c4e7cc3465'),
  name?: string(name='Name', description='The name of the serverless resource group. The name can be a maximum of 128 characters in length and can contain letters, digits, and underscores (_). The name must start with a letter.

This parameter is required.', example='common_resource_group'),
  paymentDuration?: int32(name='PaymentDuration', description='The subscription duration.', example='1'),
  paymentDurationUnit?: string(name='PaymentDurationUnit', description='The unit of the subscription duration. Valid values: Month and Year.', example='Month'),
  paymentType?: string(name='PaymentType', description='The billing method of the serverless resource group. Valid values: PrePaid and PostPaid. The value PrePaid indicates the subscription billing method, and the value PostPaid indicates the pay-as-you-go billing method.

This parameter is required.', example='PrePaid'),
  remark?: string(name='Remark', description='The description of the serverless resource group. The description can be a maximum of 128 characters in length and can contain letters, digits, and underscores (_).', example='Create a serverless resource group for common tasks'),
  spec?: int32(name='Spec', description='The specifications of the serverless resource group. Unit: CU. This parameter is required only if you set the PaymentType parameter to PrePaid.', example='2'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) with which the serverless resource group is associated by default.

This parameter is required.', example='vpc-m2et4f3oc8msfbccXXXXX'),
  vswitchId?: string(name='VswitchId', description='The ID of the vSwitch with which the serverless resource group is associated by default.

This parameter is required.', example='vsw-uf8usrhs7hjd9amsXXXXX'),
}

model CreateResourceGroupShrinkRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='The ID of the Alibaba Cloud resource group.', example='rg-aek2kqofrgXXXXX'),
  aliyunResourceTagsShrink?: string(name='AliyunResourceTags', description='The tags.'),
  autoRenewEnabled?: boolean(name='AutoRenewEnabled', description='Specifies whether to enable auto-renewal.'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

This parameter is required.', example='eb870033-74c8-4b1b-9664-04c4e7cc3465'),
  name?: string(name='Name', description='The name of the serverless resource group. The name can be a maximum of 128 characters in length and can contain letters, digits, and underscores (_). The name must start with a letter.

This parameter is required.', example='common_resource_group'),
  paymentDuration?: int32(name='PaymentDuration', description='The subscription duration.', example='1'),
  paymentDurationUnit?: string(name='PaymentDurationUnit', description='The unit of the subscription duration. Valid values: Month and Year.', example='Month'),
  paymentType?: string(name='PaymentType', description='The billing method of the serverless resource group. Valid values: PrePaid and PostPaid. The value PrePaid indicates the subscription billing method, and the value PostPaid indicates the pay-as-you-go billing method.

This parameter is required.', example='PrePaid'),
  remark?: string(name='Remark', description='The description of the serverless resource group. The description can be a maximum of 128 characters in length and can contain letters, digits, and underscores (_).', example='Create a serverless resource group for common tasks'),
  spec?: int32(name='Spec', description='The specifications of the serverless resource group. Unit: CU. This parameter is required only if you set the PaymentType parameter to PrePaid.', example='2'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) with which the serverless resource group is associated by default.

This parameter is required.', example='vpc-m2et4f3oc8msfbccXXXXX'),
  vswitchId?: string(name='VswitchId', description='The ID of the vSwitch with which the serverless resource group is associated by default.

This parameter is required.', example='vsw-uf8usrhs7hjd9amsXXXXX'),
}

model CreateResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  resourceGroupOrder?: {
    id?: string(name='Id', description='The ID of the serverless resource group.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
    orderId?: long(name='OrderId', description='The ID of the order that is used to create the serverless resource group.', example='2391982058XXXXX'),
    orderInstanceId?: string(name='OrderInstanceId', description='The instance ID of the order that is used to create the serverless resource group.', example='c442b330-3b10-4584-959e-736e4edXXXXX'),
  }(name='ResourceGroupOrder', description='The information about the order that is used to create the serverless resource group.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceGroupResponseBody(name='body'),
}

/**
 * @summary Creates a serverless resource group.
 *
 * @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 * 2.  **Before you call this API operation, you must make sure that you have a good command of the billing details and [pricing](https://help.aliyun.com/document_detail/2680173.html) of serverless resource groups.
 *
 * @param tmpReq CreateResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateResourceGroupResponse
 */
async function createResourceGroupWithOptions(tmpReq: CreateResourceGroupRequest, runtime: Util.RuntimeOptions): CreateResourceGroupResponse {
  Util.validateModel(tmpReq);
  var request = new CreateResourceGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.aliyunResourceTags)) {
    request.aliyunResourceTagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.aliyunResourceTags, 'AliyunResourceTags', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.aliyunResourceGroupId)) {
    body['AliyunResourceGroupId'] = request.aliyunResourceGroupId;
  }
  if (!Util.isUnset(request.aliyunResourceTagsShrink)) {
    body['AliyunResourceTags'] = request.aliyunResourceTagsShrink;
  }
  if (!Util.isUnset(request.autoRenewEnabled)) {
    body['AutoRenewEnabled'] = request.autoRenewEnabled;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.paymentDuration)) {
    body['PaymentDuration'] = request.paymentDuration;
  }
  if (!Util.isUnset(request.paymentDurationUnit)) {
    body['PaymentDurationUnit'] = request.paymentDurationUnit;
  }
  if (!Util.isUnset(request.paymentType)) {
    body['PaymentType'] = request.paymentType;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vswitchId)) {
    body['VswitchId'] = request.vswitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateResourceGroup',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a serverless resource group.
 *
 * @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 * 2.  **Before you call this API operation, you must make sure that you have a good command of the billing details and [pricing](https://help.aliyun.com/document_detail/2680173.html) of serverless resource groups.
 *
 * @param request CreateResourceGroupRequest
 * @return CreateResourceGroupResponse
 */
async function createResourceGroup(request: CreateResourceGroupRequest): CreateResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResourceGroupWithOptions(request, runtime);
}

model CreateRouteRequest {
  destinationCidr?: string(name='DestinationCidr', description='The CIDR blocks of the destination-based route.

This parameter is required.', example='192.168.0.0/16'),
  networkId?: long(name='NetworkId', description='The network ID.

This parameter is required.', example='1000'),
  resourceGroupId?: string(name='ResourceGroupId', description='Unique identifier of the serverless resource group.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
}

model CreateRouteResponseBody = {
  id?: long(name='Id', description='The route ID.', example='1000'),
  requestId?: string(name='RequestId', description='The request ID.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRouteResponseBody(name='body'),
}

/**
 * @summary Creates a route for a network.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request CreateRouteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRouteResponse
 */
async function createRouteWithOptions(request: CreateRouteRequest, runtime: Util.RuntimeOptions): CreateRouteResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.destinationCidr)) {
    body['DestinationCidr'] = request.destinationCidr;
  }
  if (!Util.isUnset(request.networkId)) {
    body['NetworkId'] = request.networkId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRoute',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a route for a network.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request CreateRouteRequest
 * @return CreateRouteResponse
 */
async function createRoute(request: CreateRouteRequest): CreateRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRouteWithOptions(request, runtime);
}

model CreateUdfFileRequest {
  className?: string(name='ClassName', description='This parameter is required.', example='com.alibaba.DataWorks.api.udf.StringConcat'),
  cmdDescription?: string(name='CmdDescription', example='StringConcat(String... substrs)'),
  createFolderIfNotExists?: boolean(name='CreateFolderIfNotExists', example='false'),
  example?: string(name='Example', example='StringConcat(\\\\"a\\\\", \\\\"b\\\\", \\\\"c\\\\")'),
  fileFolderPath?: string(name='FileFolderPath', description='This parameter is required.', example='Business_process/First_Business_Process/function/string_processing'),
  fileName?: string(name='FileName', description='This parameter is required.', example='StringConcat'),
  functionType?: string(name='FunctionType', description='This parameter is required.', example='STRING'),
  parameterDescription?: string(name='ParameterDescription', example='List of strings to be connected'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
  resources?: string(name='Resources', description='This parameter is required.', example='string-concat-1.0.0.jar,commons-lang-2.6.jar'),
  returnValue?: string(name='ReturnValue', example='New strings generated by concatenating all strings before and after the input order'),
  udfDescription?: string(name='UdfDescription', example='Concatenate several strings to generate a new string'),
}

model CreateUdfFileResponseBody = {
  data?: long(name='Data', example='100000002'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model CreateUdfFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUdfFileResponseBody(name='body'),
}

/**
 * @param request CreateUdfFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateUdfFileResponse
 */
async function createUdfFileWithOptions(request: CreateUdfFileRequest, runtime: Util.RuntimeOptions): CreateUdfFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.className)) {
    body['ClassName'] = request.className;
  }
  if (!Util.isUnset(request.cmdDescription)) {
    body['CmdDescription'] = request.cmdDescription;
  }
  if (!Util.isUnset(request.createFolderIfNotExists)) {
    body['CreateFolderIfNotExists'] = request.createFolderIfNotExists;
  }
  if (!Util.isUnset(request.example)) {
    body['Example'] = request.example;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.functionType)) {
    body['FunctionType'] = request.functionType;
  }
  if (!Util.isUnset(request.parameterDescription)) {
    body['ParameterDescription'] = request.parameterDescription;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.resources)) {
    body['Resources'] = request.resources;
  }
  if (!Util.isUnset(request.returnValue)) {
    body['ReturnValue'] = request.returnValue;
  }
  if (!Util.isUnset(request.udfDescription)) {
    body['UdfDescription'] = request.udfDescription;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateUdfFile',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateUdfFileRequest
 * @return CreateUdfFileResponse
 */
async function createUdfFile(request: CreateUdfFileRequest): CreateUdfFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUdfFileWithOptions(request, runtime);
}

model CreateWorkflowDefinitionRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000'),
  spec?: string(name='Spec', description='The FlowSpec field information about the workflow. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow/).

This parameter is required.', example='{
    "kind": "CycleWorkflow",
    "version": "1.1.0",
    "spec": {
        "name": "OpenAPITestWorkflowDemo",
        "type": "CycleWorkflow",
        "workflows": [
            {
                "script": {
                    "path": "XX/OpenAPITest/WorkflowTest/OpenAPITestWorkflowDemo",
                    "runtime": {
                        "command": "WORKFLOW"
                    }
                },
                "trigger": {
                    "type": "Scheduler",
                    "cron": "00 02 00 * * ?",
                    "startTime": "1970-01-01 00:00:00",
                    "endTime": "9999-01-01 00:00:00",
                    "timezone": "Asia/Shanghai",
                    "delaySeconds": 0
                },
                "strategy": {
                    "timeout": 0,
                    "instanceMode": "T+1",
                    "rerunMode": "Allowed",
                    "rerunTimes": 3,
                    "rerunInterval": 180000,
                    "failureStrategy": "Break"
                },
                "name": "OpenAPITestWorkflowDemo",
                "inputs": {},
                "outputs": {
                    "nodeOutputs": [
                        {
                            "data": "workflow_output",
                            "artifactType": "NodeOutput",
                            "refTableName": "OpenAPITestWorkflowDemo"
                        }
                    ]
                },
                "nodes": [],
                "dependencies": []
            }
        ]
    }
}'),
}

model CreateWorkflowDefinitionResponseBody = {
  id?: long(name='Id', description='The ID of the workflow.', example='463497880880954XXXX'),
  requestId?: string(name='RequestId', description='The request ID.', example='0EF298E5-0940-5AC7-9CB0-65025070XXXX'),
}

model CreateWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary Creates a workflow in a directory of DataStudio.
 *
 * @description > You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system creates only the first specified workflow. Other specified workflows and the nodes in the workflows are ignored. You can call the CreateNode operation to create a node.
 *
 * @param request CreateWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWorkflowDefinitionResponse
 */
async function createWorkflowDefinitionWithOptions(request: CreateWorkflowDefinitionRequest, runtime: Util.RuntimeOptions): CreateWorkflowDefinitionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a workflow in a directory of DataStudio.
 *
 * @description > You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system creates only the first specified workflow. Other specified workflows and the nodes in the workflows are ignored. You can call the CreateNode operation to create a node.
 *
 * @param request CreateWorkflowDefinitionRequest
 * @return CreateWorkflowDefinitionResponse
 */
async function createWorkflowDefinition(request: CreateWorkflowDefinitionRequest): CreateWorkflowDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWorkflowDefinitionWithOptions(request, runtime);
}

model CreateWorkflowInstancesRequest {
  autoStartEnabled?: boolean(name='AutoStartEnabled', description='The default value is true.', example='true'),
  comment?: string(name='Comment', description='The reason for the creation.', example='create for test'),
  defaultRunProperties?: {
    alert?: {
      noticeType?: string(name='NoticeType', description='The alert notification method. Valid values:

*   Sms: SMS only.
*   Mail: mail only.
*   SmsMail: SMS and mail.', example='Sms'),
      type?: string(name='Type', description='The alerting policy. Valid values:

*   Success: Alerts on success.
*   Failure: Alerts on failure.
*   SuccessFailure: Alerts on both success and failure.', example='Succes'),
    }(name='Alert', description='The alert settings.'),
    analysis?: {
      blocked?: boolean(name='Blocked', description='Specifies whether to block execution if the analysis fails. Required when Type is set to SupplementData.', example='true'),
      enabled?: boolean(name='Enabled', description='Specifies whether to enable the analysis feature. Required when Type is set to SupplementData.', example='true'),
    }(name='Analysis', description='The analysis configuration. Required when Type is set to SupplementData.'),
    excludeProjectIds?: [ long ](name='ExcludeProjectIds', description='The IDs of the projects not to run.'),
    excludeTaskIds?: [ long ](name='ExcludeTaskIds', description='The IDs of the tasks not to run.'),
    includeProjectIds?: [ long ](name='IncludeProjectIds', description='The IDs of the projects to run.'),
    includeTaskIds?: [ long ](name='IncludeTaskIds', description='The IDs of the tasks to run.'),
    mode?: string(name='Mode', description='The data backfill mode. Default value: ManualSelection. Required when Type is set to SupplementData.

*   General: You can specify only one value for `RootTaskIds`. The `IncludeTaskIds` parameter is optional. If it\\\\"s not specified, it defaults to including `RootTaskIds`.
*   ManualSelection: You can specify multiple values for `RootTaskIds`. The `IncludeTaskIds` parameter is optional. If it is not specified, it defaults to including `RootTaskIds`.
*   Chain: If you set the Mode parameter to Chain, leave the `RootTaskIds` parameter empty and set the `IncludeTaskIds` parameter to the start task ID and the end task ID.
*   AllDownstream: Only one `RootTaskId` can be specified.', example='ManualSelection'),
    order?: string(name='Order', description='The execution order. Default value: Asc.

*   Asc: ascending by business date.
*   Desc: descending by business date.', example='Asc'),
    parallelism?: int32(name='Parallelism', description='The task concurrency. Values from 2 to 10 indicate concurrency. A value of 1 indicates sequential execution. Required when Type = SupplementData.', example='2'),
    priority?: int32(name='Priority', description='The execution priority, range: 1–11. A higher value indicates higher priority.', example='1'),
    priorityWeightStrategy?: string(name='PriorityWeightStrategy', description='The priority weighting policy.

*   `Disable` (default): Do not enable.
*   `Upstream`: The priority is based on the total weight of upstream nodes. The deeper the hierarchy, the higher the weight.', example='Upstream'),
    rootTaskIds?: [ long ](name='RootTaskIds', description='The list of root task IDs.

*   When Type is set to SupplementData, RootTaskIds is required unless Mode is set to Chain.
*   When Type is set to ManualWorkflow, RootTaskIds is optional. If it is not specified, the default root nodes of the manual workflow are used.
*   When Type is set to Manual, RootTaskIds is required and specifies the list of manual tasks to run.
*   When Type is set to SmokeTest, RootTaskIds is required and specifies the list of test tasks to run.'),
    runPolicy?: {
      endTime?: string(name='EndTime', description='The end time of running. Configure this parameter in the `hh:mm:ss` format (24-hour clock). This parameter is required if you configure the RunPolicy parameter.', example='23:59:59'),
      immediately?: boolean(name='Immediately', description='Specifies whether a task whose scheduled run time is in the future can be run immediately. Default value: false.', example='false'),
      startTime?: string(name='StartTime', description='The start time of running. Configure this parameter in the `hh:mm:ss` format (24-hour clock). This parameter is required if you configure the RunPolicy parameter.', example='00:00:00'),
      type?: string(name='Type', description='The time period type. This parameter is required if you configure the RunPolicy parameter. Valid values:

*   Daily
*   Weekend', example='Daily'),
    }(name='RunPolicy', description='The run policy. If the parameter is left empty, the task configuration is used.'),
    runtimeResource?: string(name='RuntimeResource', description='Custom scheduling resource group ID. If left empty, the task configuration is used.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
  }(name='DefaultRunProperties', description='The runtime configuration.'),
  envType?: string(name='EnvType', description='The project environment.

*   Prod
*   Dev', example='Prod'),
  name?: string(name='Name', description='The name.

This parameter is required.', example='WorkflowInstance1'),
  periods?: {
    bizDates?: [ 
      {
        endBizDate?: string(name='EndBizDate', description='The data timestamp at which data is no longer backfilled. Configure this parameter in the `yyyy-mm-dd` format.

This parameter is required.', example='2024-11-24'),
        startBizDate?: string(name='StartBizDate', description='The data timestamp at which the data starts to be backfilled. Configure this parameter in the `yyyy-mm-dd` format.

This parameter is required.', example='2024-11-20'),
      }
    ](name='BizDates', description='The data timestamps. You can specify up to seven data timestamps.

This parameter is required.'),
    endTime?: string(name='EndTime', description='The end time of data backfill. Configure this parameter in the `hh:mm:ss` format. The time must be in the 24-hour clock. Default value: 23:59:59.

If you configure this parameter, you must also configure the StartTime parameter.', example='23:59:59'),
    startTime?: string(name='StartTime', description='The start time of data backfill. Configure this parameter in the `hh:mm:ss` format. The time must be in the 24-hour clock. Default value: 00:00:00.

If you configure this parameter, you must also configure the EndTime parameter.', example='00:00:00'),
  }(name='Periods', description='The configuration of the data backfilling period.'),
  projectId?: long(name='ProjectId', description='The project ID.

This parameter is required.', example='100'),
  tagCreationPolicy?: string(name='TagCreationPolicy', description='The tag creation policy. Valid values:

*   Append: New tags are added on top of the existing tags of the manual workflow.
*   Overwrite: Existing tags of the manual workflow are not inherited. New tags are created directly.', example='Append'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='tagKey'),
      value?: string(name='Value', description='The tag value.', example='tagValue'),
    }
  ](name='Tags', description='The task tag list.'),
  taskParameters?: string(name='TaskParameters', description='The task-specific parameters. The value is in the JSON format. The key specifies the task ID. You can call the GetTask operation to obtain the format of the value by querying the script parameters.', example='{
  "1001": "key1=val2 key2=val2", 
  "1002": "key1=val2 key2=val2"
}'),
  type?: string(name='Type', description='The type of the workflow instance. Valid values:

*   SupplementData: Data backfill. The usage of RootTaskIds and IncludeTaskIds varies based on the backfill mode. See the description of the DefaultRunProperties.Mode parameter.
*   ManualWorkflow: Manual workflow. WorkflowId is required for a manual workflow. RootTaskIds is optional. If not specified, the system uses the default root task list of the manual workflow.
*   Manual: Manual task. You only need to specify RootTaskIds. This is the list of manual tasks to run.
*   SmokeTest: Smoke test. You only need to specify RootTaskIds. This is the list of test tasks to run.

This parameter is required.', example='SupplementData'),
  workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs. This parameter is set to 1 for auto triggered tasks.

This parameter is required.', example='1'),
  workflowParameters?: string(name='WorkflowParameters', description='The workflow parameters. This parameter takes effect only when you set the `WorkflowId` parameter to a value other than 1. If your workflow is an auto triggered workflow, configure this parameter in the key=value format. The parameters that you configure in this parameter have a lower priority than task parameters. If your workflow is a manually triggered workflow, configure this parameter in the JSON format. The parameters that you configure in this parameter have a higher priority than task parameters.', example='{ 
  "key1": "value1", 
  "key2": "value2" 
}'),
}

model CreateWorkflowInstancesShrinkRequest {
  autoStartEnabled?: boolean(name='AutoStartEnabled', description='The default value is true.', example='true'),
  comment?: string(name='Comment', description='The reason for the creation.', example='create for test'),
  defaultRunPropertiesShrink?: string(name='DefaultRunProperties', description='The runtime configuration.'),
  envType?: string(name='EnvType', description='The project environment.

*   Prod
*   Dev', example='Prod'),
  name?: string(name='Name', description='The name.

This parameter is required.', example='WorkflowInstance1'),
  periodsShrink?: string(name='Periods', description='The configuration of the data backfilling period.'),
  projectId?: long(name='ProjectId', description='The project ID.

This parameter is required.', example='100'),
  tagCreationPolicy?: string(name='TagCreationPolicy', description='The tag creation policy. Valid values:

*   Append: New tags are added on top of the existing tags of the manual workflow.
*   Overwrite: Existing tags of the manual workflow are not inherited. New tags are created directly.', example='Append'),
  tagsShrink?: string(name='Tags', description='The task tag list.'),
  taskParameters?: string(name='TaskParameters', description='The task-specific parameters. The value is in the JSON format. The key specifies the task ID. You can call the GetTask operation to obtain the format of the value by querying the script parameters.', example='{
  "1001": "key1=val2 key2=val2", 
  "1002": "key1=val2 key2=val2"
}'),
  type?: string(name='Type', description='The type of the workflow instance. Valid values:

*   SupplementData: Data backfill. The usage of RootTaskIds and IncludeTaskIds varies based on the backfill mode. See the description of the DefaultRunProperties.Mode parameter.
*   ManualWorkflow: Manual workflow. WorkflowId is required for a manual workflow. RootTaskIds is optional. If not specified, the system uses the default root task list of the manual workflow.
*   Manual: Manual task. You only need to specify RootTaskIds. This is the list of manual tasks to run.
*   SmokeTest: Smoke test. You only need to specify RootTaskIds. This is the list of test tasks to run.

This parameter is required.', example='SupplementData'),
  workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs. This parameter is set to 1 for auto triggered tasks.

This parameter is required.', example='1'),
  workflowParameters?: string(name='WorkflowParameters', description='The workflow parameters. This parameter takes effect only when you set the `WorkflowId` parameter to a value other than 1. If your workflow is an auto triggered workflow, configure this parameter in the key=value format. The parameters that you configure in this parameter have a lower priority than task parameters. If your workflow is a manually triggered workflow, configure this parameter in the JSON format. The parameters that you configure in this parameter have a higher priority than task parameters.', example='{ 
  "key1": "value1", 
  "key2": "value2" 
}'),
}

model CreateWorkflowInstancesResponseBody = {
  operationId?: string(name='OperationId', description='The ID of the operation. You can use this field to query the results of the creation operation through the GetCreateWorkflowInstancesResult interface.', example='e15ad21c-b0e9-4792-8f55-b037xxxxxxxx'),
  requestId?: string(name='RequestId', description='The ID of the request. It is used to locate logs and troubleshoot problems.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model CreateWorkflowInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkflowInstancesResponseBody(name='body'),
}

/**
 * @summary Creates a workflow instance, such as a data backfill workflow instance, based on configurations.
 *
 * @param tmpReq CreateWorkflowInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWorkflowInstancesResponse
 */
async function createWorkflowInstancesWithOptions(tmpReq: CreateWorkflowInstancesRequest, runtime: Util.RuntimeOptions): CreateWorkflowInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new CreateWorkflowInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.defaultRunProperties)) {
    request.defaultRunPropertiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.defaultRunProperties, 'DefaultRunProperties', 'json');
  }
  if (!Util.isUnset(tmpReq.periods)) {
    request.periodsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.periods, 'Periods', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoStartEnabled)) {
    body['AutoStartEnabled'] = request.autoStartEnabled;
  }
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.defaultRunPropertiesShrink)) {
    body['DefaultRunProperties'] = request.defaultRunPropertiesShrink;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.periodsShrink)) {
    body['Periods'] = request.periodsShrink;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tagCreationPolicy)) {
    body['TagCreationPolicy'] = request.tagCreationPolicy;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    body['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.taskParameters)) {
    body['TaskParameters'] = request.taskParameters;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  if (!Util.isUnset(request.workflowId)) {
    body['WorkflowId'] = request.workflowId;
  }
  if (!Util.isUnset(request.workflowParameters)) {
    body['WorkflowParameters'] = request.workflowParameters;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateWorkflowInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a workflow instance, such as a data backfill workflow instance, based on configurations.
 *
 * @param request CreateWorkflowInstancesRequest
 * @return CreateWorkflowInstancesResponse
 */
async function createWorkflowInstances(request: CreateWorkflowInstancesRequest): CreateWorkflowInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWorkflowInstancesWithOptions(request, runtime);
}

model DeleteAlertRuleRequest {
  id?: long(name='Id', description='The rule ID.', example='105412'),
}

model DeleteAlertRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='8754EE08-4AA2-5F77-ADD7-754DBBDA9F75'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAlertRuleResponseBody(name='body'),
}

/**
 * @summary Deletes a custom monitoring alert rule.
 *
 * @param request DeleteAlertRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAlertRuleResponse
 */
async function deleteAlertRuleWithOptions(request: DeleteAlertRuleRequest, runtime: Util.RuntimeOptions): DeleteAlertRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAlertRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a custom monitoring alert rule.
 *
 * @param request DeleteAlertRuleRequest
 * @return DeleteAlertRuleResponse
 */
async function deleteAlertRule(request: DeleteAlertRuleRequest): DeleteAlertRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAlertRuleWithOptions(request, runtime);
}

model DeleteBusinessRequest {
  businessId?: long(name='BusinessId', description='This parameter is required.', example='1000001'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model DeleteBusinessResponseBody = {
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteBusinessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBusinessResponseBody(name='body'),
}

/**
 * @param request DeleteBusinessRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteBusinessResponse
 */
async function deleteBusinessWithOptions(request: DeleteBusinessRequest, runtime: Util.RuntimeOptions): DeleteBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessId)) {
    body['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBusiness',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeleteBusinessRequest
 * @return DeleteBusinessResponse
 */
async function deleteBusiness(request: DeleteBusinessRequest): DeleteBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBusinessWithOptions(request, runtime);
}

model DeleteCertificateRequest {
  id?: long(name='Id', description='The ID of the certificate file.

This parameter is required.', example='676303114031776'),
  projectId?: long(name='ProjectId', description='The ID of the workspace to which the certificate file belongs.', example='106560'),
}

model DeleteCertificateResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D9A61DC0-B922-421B-B706'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCertificateResponseBody(name='body'),
}

/**
 * @summary Deletes a certificate file.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M.
 *
 * @param request DeleteCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCertificateResponse
 */
async function deleteCertificateWithOptions(request: DeleteCertificateRequest, runtime: Util.RuntimeOptions): DeleteCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCertificate',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a certificate file.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M.
 *
 * @param request DeleteCertificateRequest
 * @return DeleteCertificateResponse
 */
async function deleteCertificate(request: DeleteCertificateRequest): DeleteCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCertificateWithOptions(request, runtime);
}

model DeleteComponentRequest {
  componentId?: string(name='ComponentId', description='The component ID. It can be used as a request parameter for querying the list of production studio components and modifying production studio components.

This parameter is required.', example='123123123123'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter specifies the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='1000'),
}

model DeleteComponentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='0000-ABCD-EF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteComponentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteComponentResponseBody(name='body'),
}

/**
 * @summary Deletes a component.
 *
 * @description >  A UDF that is deployed cannot be deleted. If you want to delete such a UDF, you must first undeploy the UDF.
 *
 * @param request DeleteComponentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteComponentResponse
 */
async function deleteComponentWithOptions(request: DeleteComponentRequest, runtime: Util.RuntimeOptions): DeleteComponentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.componentId)) {
    body['ComponentId'] = request.componentId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteComponent',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a component.
 *
 * @description >  A UDF that is deployed cannot be deleted. If you want to delete such a UDF, you must first undeploy the UDF.
 *
 * @param request DeleteComponentRequest
 * @return DeleteComponentResponse
 */
async function deleteComponent(request: DeleteComponentRequest): DeleteComponentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteComponentWithOptions(request, runtime);
}

model DeleteDIAlarmRuleRequest {
  DIAlarmRuleId?: long(name='DIAlarmRuleId', description='This parameter is deprecated. Use the Id parameter instead.', example='2', deprecated=true),
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='1'),
  id?: long(name='Id', description='The ID of the synchronization task.', example='2'),
}

model DeleteDIAlarmRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='C99E2BE6-9DEA-5C2E-8F51-1DDCFEADE490'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteDIAlarmRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDIAlarmRuleResponseBody(name='body'),
}

/**
 * @summary Deletes an alert rule configured for a synchronization task.
 *
 * @param request DeleteDIAlarmRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDIAlarmRuleResponse
 */
async function deleteDIAlarmRuleWithOptions(request: DeleteDIAlarmRuleRequest, runtime: Util.RuntimeOptions): DeleteDIAlarmRuleResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDIAlarmRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes an alert rule configured for a synchronization task.
 *
 * @param request DeleteDIAlarmRuleRequest
 * @return DeleteDIAlarmRuleResponse
 */
async function deleteDIAlarmRule(request: DeleteDIAlarmRuleRequest): DeleteDIAlarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDIAlarmRuleWithOptions(request, runtime);
}

model DeleteDIJobRequest {
  DIJobId?: long(name='DIJobId', description='This parameter is deprecated. Use the Id parameter instead.', example='11126', deprecated=true),
  id?: long(name='Id', description='The ID of the synchronization task.', example='11126'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='108864'),
}

model DeleteDIJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can troubleshoot issues based on the ID.', example='D33D4A51-5845-579A-B4BA-FAADD0F83D53'),
  success?: boolean(name='Success', description='true', example='true'),
}

model DeleteDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDIJobResponseBody(name='body'),
}

/**
 * @summary Deletes a new-version synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDIJobResponse
 */
async function deleteDIJobWithOptions(request: DeleteDIJobRequest, runtime: Util.RuntimeOptions): DeleteDIJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDIJob',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a new-version synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteDIJobRequest
 * @return DeleteDIJobResponse
 */
async function deleteDIJob(request: DeleteDIJobRequest): DeleteDIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDIJobWithOptions(request, runtime);
}

model DeleteDataAssetTagRequest {
  key?: string(name='Key', description='The tag key.

This parameter is required.', example='key1'),
  values?: [ string ](name='Values', description='The tag values.'),
}

model DeleteDataAssetTagShrinkRequest {
  key?: string(name='Key', description='The tag key.

This parameter is required.', example='key1'),
  valuesShrink?: string(name='Values', description='The tag values.'),
}

model DeleteDataAssetTagResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1411515937635973****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteDataAssetTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataAssetTagResponseBody(name='body'),
}

/**
 * @summary Deletes a tag.
 *
 * @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
 *
 * @param tmpReq DeleteDataAssetTagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataAssetTagResponse
 */
async function deleteDataAssetTagWithOptions(tmpReq: DeleteDataAssetTagRequest, runtime: Util.RuntimeOptions): DeleteDataAssetTagResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteDataAssetTagShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.values)) {
    request.valuesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.values, 'Values', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.valuesShrink)) {
    query['Values'] = request.valuesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataAssetTag',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a tag.
 *
 * @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
 *
 * @param request DeleteDataAssetTagRequest
 * @return DeleteDataAssetTagResponse
 */
async function deleteDataAssetTag(request: DeleteDataAssetTagRequest): DeleteDataAssetTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataAssetTagWithOptions(request, runtime);
}

model DeleteDataQualityAlertRuleRequest {
  id?: long(name='Id', description='The ID of the data quality rule template.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX'),
}

model DeleteDataQualityAlertRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0bc14115***159376359'),
  success?: boolean(name='Success', description='Indicates whether the alert rule is deleted.', example='true'),
}

model DeleteDataQualityAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataQualityAlertRuleResponseBody(name='body'),
}

/**
 * @summary Deletes a data quality alert rule by ID.
 *
 * @description Subscribe to DataWorks Basic Edition or a higher version to use this API.
 *
 * @param request DeleteDataQualityAlertRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataQualityAlertRuleResponse
 */
async function deleteDataQualityAlertRuleWithOptions(request: DeleteDataQualityAlertRuleRequest, runtime: Util.RuntimeOptions): DeleteDataQualityAlertRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataQualityAlertRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a data quality alert rule by ID.
 *
 * @description Subscribe to DataWorks Basic Edition or a higher version to use this API.
 *
 * @param request DeleteDataQualityAlertRuleRequest
 * @return DeleteDataQualityAlertRuleResponse
 */
async function deleteDataQualityAlertRule(request: DeleteDataQualityAlertRuleRequest): DeleteDataQualityAlertRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataQualityAlertRuleWithOptions(request, runtime);
}

model DeleteDataQualityEvaluationTaskRequest {
  id?: long(name='Id', description='The ID of the data quality monitor.', example='123123'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the workspace management page to obtain the ID.

This parameter is used to determine the DataWorks workspaces used for this API call.', example='10000'),
}

model DeleteDataQualityEvaluationTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='0bc1ec92159376****'),
  success?: boolean(name='Success', description='Whether the deletion is successful.
- true: Successful
- false: Failed', example='true'),
}

model DeleteDataQualityEvaluationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataQualityEvaluationTaskResponseBody(name='body'),
}

/**
 * @summary Deletes a data quality monitoring task.
 *
 * @param request DeleteDataQualityEvaluationTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataQualityEvaluationTaskResponse
 */
async function deleteDataQualityEvaluationTaskWithOptions(request: DeleteDataQualityEvaluationTaskRequest, runtime: Util.RuntimeOptions): DeleteDataQualityEvaluationTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataQualityEvaluationTask',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a data quality monitoring task.
 *
 * @param request DeleteDataQualityEvaluationTaskRequest
 * @return DeleteDataQualityEvaluationTaskResponse
 */
async function deleteDataQualityEvaluationTask(request: DeleteDataQualityEvaluationTaskRequest): DeleteDataQualityEvaluationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataQualityEvaluationTaskWithOptions(request, runtime);
}

model DeleteDataQualityRuleRequest {
  id?: long(name='Id', description='The rule ID.

This parameter is required.', example='19715'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='17302'),
}

model DeleteDataQualityRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteDataQualityRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataQualityRuleResponseBody(name='body'),
}

/**
 * @summary Deletes a data quality monitoring rule.
 *
 * @param request DeleteDataQualityRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataQualityRuleResponse
 */
async function deleteDataQualityRuleWithOptions(request: DeleteDataQualityRuleRequest, runtime: Util.RuntimeOptions): DeleteDataQualityRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataQualityRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a data quality monitoring rule.
 *
 * @param request DeleteDataQualityRuleRequest
 * @return DeleteDataQualityRuleResponse
 */
async function deleteDataQualityRule(request: DeleteDataQualityRuleRequest): DeleteDataQualityRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataQualityRuleWithOptions(request, runtime);
}

model DeleteDataQualityRuleTemplateRequest {
  code?: string(name='Code', description='The code for the template.

This parameter is required.', example='USER_DEFINED:123'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='10001'),
}

model DeleteDataQualityRuleTemplateResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteDataQualityRuleTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataQualityRuleTemplateResponseBody(name='body'),
}

/**
 * @summary Deletes a data quality monitoring rule template.
 *
 * @param request DeleteDataQualityRuleTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataQualityRuleTemplateResponse
 */
async function deleteDataQualityRuleTemplateWithOptions(request: DeleteDataQualityRuleTemplateRequest, runtime: Util.RuntimeOptions): DeleteDataQualityRuleTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.code)) {
    query['Code'] = request.code;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataQualityRuleTemplate',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a data quality monitoring rule template.
 *
 * @param request DeleteDataQualityRuleTemplateRequest
 * @return DeleteDataQualityRuleTemplateResponse
 */
async function deleteDataQualityRuleTemplate(request: DeleteDataQualityRuleTemplateRequest): DeleteDataQualityRuleTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataQualityRuleTemplateWithOptions(request, runtime);
}

model DeleteDataQualityScanRequest {
  description?: string(name='Description', description='The deprecated parameter. No configuration is required.', example='null'),
  id?: long(name='Id', description='The ID of the data quality monitor.', example='123123'),
}

model DeleteDataQualityScanResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='2197B9C4-39CE-55EA-8EEA-FDBAE52DXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:', example='true'),
}

model DeleteDataQualityScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataQualityScanResponseBody(name='body'),
}

/**
 * @summary Deletes a data quality monitor.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteDataQualityScanRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataQualityScanResponse
 */
async function deleteDataQualityScanWithOptions(request: DeleteDataQualityScanRequest, runtime: Util.RuntimeOptions): DeleteDataQualityScanResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataQualityScan',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a data quality monitor.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteDataQualityScanRequest
 * @return DeleteDataQualityScanResponse
 */
async function deleteDataQualityScan(request: DeleteDataQualityScanRequest): DeleteDataQualityScanResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataQualityScanWithOptions(request, runtime);
}

model DeleteDataQualityTemplateRequest {
  id?: string(name='Id', description='The ID of the custom rule template.', example='USER_DEFINED:2001'),
}

model DeleteDataQualityTemplateResponseBody = {
  requestId?: string(name='RequestId', description='The API request ID, which is generated as a UUID.', example='0bc14115****159376359'),
  success?: boolean(name='Success', description='Deleted', example='true'),
}

model DeleteDataQualityTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataQualityTemplateResponseBody(name='body'),
}

/**
 * @summary Deletes a data quality rule template by ID.
 *
 * @description ## [](#)Request description
 * *   **Id**: the unique identifier of the user-defined rule template, in the format `USER_DEFINED:<template_id>`.
 * *   **ProjectId**: The ID of the DataWorks project to which the rule template belongs.
 * This API is used to remove data quality rule templates that are no longer needed from the system. Make sure the provided `Id` and `ProjectId` are correct when calling this API operation; otherwise, the deletion may fail or lead to unexpected data loss. Use this function with caution and verify the exact information of the template before performing the operation.
 *
 * @param request DeleteDataQualityTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataQualityTemplateResponse
 */
async function deleteDataQualityTemplateWithOptions(request: DeleteDataQualityTemplateRequest, runtime: Util.RuntimeOptions): DeleteDataQualityTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataQualityTemplate',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a data quality rule template by ID.
 *
 * @description ## [](#)Request description
 * *   **Id**: the unique identifier of the user-defined rule template, in the format `USER_DEFINED:<template_id>`.
 * *   **ProjectId**: The ID of the DataWorks project to which the rule template belongs.
 * This API is used to remove data quality rule templates that are no longer needed from the system. Make sure the provided `Id` and `ProjectId` are correct when calling this API operation; otherwise, the deletion may fail or lead to unexpected data loss. Use this function with caution and verify the exact information of the template before performing the operation.
 *
 * @param request DeleteDataQualityTemplateRequest
 * @return DeleteDataQualityTemplateResponse
 */
async function deleteDataQualityTemplate(request: DeleteDataQualityTemplateRequest): DeleteDataQualityTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataQualityTemplateWithOptions(request, runtime);
}

model DeleteDataSourceRequest {
  id?: long(name='Id', description='The data source ID.

This parameter is required.', example='1234'),
}

model DeleteDataSourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='B56432E0-2112-5C97-88D0-AA0AE5C75C74'),
  success?: boolean(name='Success', description='Whether the call is successful.
- true: Successful
- false: Failed', example='true'),
}

model DeleteDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceResponseBody(name='body'),
}

/**
 * @summary Removes a data source by ID.
 *
 * @description 1.  This API operation is available for all Dataworks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request DeleteDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataSourceResponse
 */
async function deleteDataSourceWithOptions(request: DeleteDataSourceRequest, runtime: Util.RuntimeOptions): DeleteDataSourceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataSource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Removes a data source by ID.
 *
 * @description 1.  This API operation is available for all Dataworks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request DeleteDataSourceRequest
 * @return DeleteDataSourceResponse
 */
async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataSourceWithOptions(request, runtime);
}

model DeleteDataSourceSharedRuleRequest {
  id?: long(name='Id', description='The sharing rule ID.

This parameter is required.', example='22127'),
}

model DeleteDataSourceSharedRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='64B-587A-8CED-969E1973887FXXX-TT'),
  success?: boolean(name='Success', description='Whether the data source sharing rule is deleted successfully. The value is as follows:
-true: The request is successful.
-false: The request failed.', example='true'),
}

model DeleteDataSourceSharedRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceSharedRuleResponseBody(name='body'),
}

/**
 * @summary Deletes a sharing rule of a data source by ID.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  If you want to delete a sharing rule of a data source from Workspace A to Workspace B, you must have the permissions to share the data source in Workspace A or Workspace B. You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
 *
 * @param request DeleteDataSourceSharedRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataSourceSharedRuleResponse
 */
async function deleteDataSourceSharedRuleWithOptions(request: DeleteDataSourceSharedRuleRequest, runtime: Util.RuntimeOptions): DeleteDataSourceSharedRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataSourceSharedRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a sharing rule of a data source by ID.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  If you want to delete a sharing rule of a data source from Workspace A to Workspace B, you must have the permissions to share the data source in Workspace A or Workspace B. You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
 *
 * @param request DeleteDataSourceSharedRuleRequest
 * @return DeleteDataSourceSharedRuleResponse
 */
async function deleteDataSourceSharedRule(request: DeleteDataSourceSharedRuleRequest): DeleteDataSourceSharedRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataSourceSharedRuleWithOptions(request, runtime);
}

model DeleteFileRequest {
  fileId?: long(name='FileId', description='This parameter is required.', example='10000201'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model DeleteFileResponseBody = {
  deploymentId?: long(name='DeploymentId', example='1000000001'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFileResponseBody(name='body'),
}

/**
 * @param request DeleteFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFileResponse
 */
async function deleteFileWithOptions(request: DeleteFileRequest, runtime: Util.RuntimeOptions): DeleteFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFile',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeleteFileRequest
 * @return DeleteFileResponse
 */
async function deleteFile(request: DeleteFileRequest): DeleteFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFileWithOptions(request, runtime);
}

model DeleteFolderRequest {
  folderId?: string(name='FolderId', description='This parameter is required.', example='2eb6f9****'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model DeleteFolderResponseBody = {
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFolderResponseBody(name='body'),
}

/**
 * @param request DeleteFolderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFolderResponse
 */
async function deleteFolderWithOptions(request: DeleteFolderRequest, runtime: Util.RuntimeOptions): DeleteFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFolder',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeleteFolderRequest
 * @return DeleteFolderResponse
 */
async function deleteFolder(request: DeleteFolderRequest): DeleteFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFolderWithOptions(request, runtime);
}

model DeleteFunctionRequest {
  id?: long(name='Id', description='The ID of the UDF.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID. You can use this parameter to specify the DataWorks workspace on which you want to perform the API operation.

This parameter is required.', example='10000'),
}

model DeleteFunctionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='88198F19-A36B-52A9-AE44-4518A688XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFunctionResponseBody(name='body'),
}

/**
 * @summary Deletes a user-defined function (UDF) in DataStudio.
 *
 * @description >  A UDF that is deployed cannot be deleted. If you want to delete such a UDF, you must first undeploy the UDF.
 *
 * @param request DeleteFunctionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFunctionResponse
 */
async function deleteFunctionWithOptions(request: DeleteFunctionRequest, runtime: Util.RuntimeOptions): DeleteFunctionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFunction',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a user-defined function (UDF) in DataStudio.
 *
 * @description >  A UDF that is deployed cannot be deleted. If you want to delete such a UDF, you must first undeploy the UDF.
 *
 * @param request DeleteFunctionRequest
 * @return DeleteFunctionResponse
 */
async function deleteFunction(request: DeleteFunctionRequest): DeleteFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFunctionWithOptions(request, runtime);
}

model DeleteLineageRelationshipRequest {
  id?: string(name='Id', description='The lineage ID. For more information, see the response returned by the ListLineageRelationships operation.

This parameter is required.', example='110xxxx:custom-table.xxxxx:maxcompute-table.project.test_big_lineage_080901:custom-sqlxx.00001'),
}

model DeleteLineageRelationshipResponseBody = {
  requestId?: string(name='RequestId', example='952795279527ab****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteLineageRelationshipResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLineageRelationshipResponseBody(name='body'),
}

/**
 * @summary 删除血缘关系
 *
 * @param request DeleteLineageRelationshipRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteLineageRelationshipResponse
 */
async function deleteLineageRelationshipWithOptions(request: DeleteLineageRelationshipRequest, runtime: Util.RuntimeOptions): DeleteLineageRelationshipResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLineageRelationship',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除血缘关系
 *
 * @param request DeleteLineageRelationshipRequest
 * @return DeleteLineageRelationshipResponse
 */
async function deleteLineageRelationship(request: DeleteLineageRelationshipRequest): DeleteLineageRelationshipResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLineageRelationshipWithOptions(request, runtime);
}

model DeleteMetaCollectionRequest {
  id?: string(name='Id', description='The collection ID.

This parameter is required.', example='category.123'),
}

model DeleteMetaCollectionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='45D14A7A-7C28-5547-AB0A-35FBCD9DE7B5'),
}

model DeleteMetaCollectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMetaCollectionResponseBody(name='body'),
}

/**
 * @summary 删除集合
 *
 * @param request DeleteMetaCollectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMetaCollectionResponse
 */
async function deleteMetaCollectionWithOptions(request: DeleteMetaCollectionRequest, runtime: Util.RuntimeOptions): DeleteMetaCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMetaCollection',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除集合
 *
 * @param request DeleteMetaCollectionRequest
 * @return DeleteMetaCollectionResponse
 */
async function deleteMetaCollection(request: DeleteMetaCollectionRequest): DeleteMetaCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMetaCollectionWithOptions(request, runtime);
}

model DeleteNetworkRequest {
  id?: long(name='Id', description='The ID of the network that you want to delete.

This parameter is required.', example='1000'),
}

model DeleteNetworkResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteNetworkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNetworkResponseBody(name='body'),
}

/**
 * @summary Disassociates and deletes a network from a general resource group.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteNetworkRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteNetworkResponse
 */
async function deleteNetworkWithOptions(request: DeleteNetworkRequest, runtime: Util.RuntimeOptions): DeleteNetworkResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNetwork',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Disassociates and deletes a network from a general resource group.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteNetworkRequest
 * @return DeleteNetworkResponse
 */
async function deleteNetwork(request: DeleteNetworkRequest): DeleteNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkWithOptions(request, runtime);
}

model DeleteNodeRequest {
  id?: long(name='Id', description='The ID of the node.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID.

You can use this parameter to specify the DataWorks workspace on which you want to perform the API operation.

This parameter is required.', example='10000'),
}

model DeleteNodeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A1E54497-5122-505E-91C6-BAC14980XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true\\\\
false', example='true'),
}

model DeleteNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNodeResponseBody(name='body'),
}

/**
 * @summary Deletes a node from DataStudio.
 *
 * @description >  A node that is deployed cannot be deleted. If you want to delete such a node, you must first undeploy the node.
 *
 * @param request DeleteNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteNodeResponse
 */
async function deleteNodeWithOptions(request: DeleteNodeRequest, runtime: Util.RuntimeOptions): DeleteNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNode',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a node from DataStudio.
 *
 * @description >  A node that is deployed cannot be deleted. If you want to delete such a node, you must first undeploy the node.
 *
 * @param request DeleteNodeRequest
 * @return DeleteNodeResponse
 */
async function deleteNode(request: DeleteNodeRequest): DeleteNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNodeWithOptions(request, runtime);
}

model DeleteProjectRequest {
  id?: long(name='Id', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='123456'),
}

model DeleteProjectResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
}

model DeleteProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProjectResponseBody(name='body'),
}

/**
 * @summary Deletes a DataWorks workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteProjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteProjectResponse
 */
async function deleteProjectWithOptions(request: DeleteProjectRequest, runtime: Util.RuntimeOptions): DeleteProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProject',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a DataWorks workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteProjectRequest
 * @return DeleteProjectResponse
 */
async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProjectWithOptions(request, runtime);
}

model DeleteProjectMemberRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='534752'),
  userId?: string(name='UserId', description='The ID of the account used by the member in the workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the **Tenant Members and Roles** page, view the ID of the account used by the member in the workspace.

This parameter is required.', example='123422344899'),
}

model DeleteProjectMemberResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='1FF0465F-209C-5964-8F30-FAF21B677CC6'),
}

model DeleteProjectMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProjectMemberResponseBody(name='body'),
}

/**
 * @summary Removes a workspace member and the workspace-level roles that are assigned to the member.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteProjectMemberRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteProjectMemberResponse
 */
async function deleteProjectMemberWithOptions(request: DeleteProjectMemberRequest, runtime: Util.RuntimeOptions): DeleteProjectMemberResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProjectMember',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Removes a workspace member and the workspace-level roles that are assigned to the member.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteProjectMemberRequest
 * @return DeleteProjectMemberResponse
 */
async function deleteProjectMember(request: DeleteProjectMemberRequest): DeleteProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProjectMemberWithOptions(request, runtime);
}

model DeleteResourceRequest {
  id?: long(name='Id', description='The ID of the file resource.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID. You can use this parameter to specify the DataWorks workspace on which you want to perform the API operation.

This parameter is required.', example='10000'),
}

model DeleteResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='88198F19-A36B-52A9-AE44-4518A688XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceResponseBody(name='body'),
}

/**
 * @summary Deletes a file resource from DataStudio.
 *
 * @description >  A file resource that is deployed cannot be deleted. If you want to delete such a file resource, you must first undeploy the file resource.
 *
 * @param request DeleteResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteResourceResponse
 */
async function deleteResourceWithOptions(request: DeleteResourceRequest, runtime: Util.RuntimeOptions): DeleteResourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteResource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a file resource from DataStudio.
 *
 * @description >  A file resource that is deployed cannot be deleted. If you want to delete such a file resource, you must first undeploy the file resource.
 *
 * @param request DeleteResourceRequest
 * @return DeleteResourceResponse
 */
async function deleteResource(request: DeleteResourceRequest): DeleteResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteResourceWithOptions(request, runtime);
}

model DeleteResourceGroupRequest {
  id?: string(name='Id', description='The ID of the resource group.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
}

model DeleteResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceGroupResponseBody(name='body'),
}

/**
 * @summary Deletes a serverless resource group.
 *
 * @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 * 2.  **Before you call this API operation, you must make sure that you have a good command of the billing details and [pricing](https://help.aliyun.com/document_detail/2680173.html) of serverless resource groups.
 *
 * @param request DeleteResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteResourceGroupResponse
 */
async function deleteResourceGroupWithOptions(request: DeleteResourceGroupRequest, runtime: Util.RuntimeOptions): DeleteResourceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteResourceGroup',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a serverless resource group.
 *
 * @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 * 2.  **Before you call this API operation, you must make sure that you have a good command of the billing details and [pricing](https://help.aliyun.com/document_detail/2680173.html) of serverless resource groups.
 *
 * @param request DeleteResourceGroupRequest
 * @return DeleteResourceGroupResponse
 */
async function deleteResourceGroup(request: DeleteResourceGroupRequest): DeleteResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteResourceGroupWithOptions(request, runtime);
}

model DeleteRouteRequest {
  id?: long(name='Id', description='The route ID.

This parameter is required.', example='1000'),
}

model DeleteRouteResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRouteResponseBody(name='body'),
}

/**
 * @summary Deletes a route from a network resource.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteRouteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRouteResponse
 */
async function deleteRouteWithOptions(request: DeleteRouteRequest, runtime: Util.RuntimeOptions): DeleteRouteResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRoute',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a route from a network resource.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteRouteRequest
 * @return DeleteRouteResponse
 */
async function deleteRoute(request: DeleteRouteRequest): DeleteRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRouteWithOptions(request, runtime);
}

model DeleteTaskRequest {
  id?: long(name='Id', description='The task ID.

This parameter is required.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
}

model DeleteTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTaskResponseBody(name='body'),
}

/**
 * @summary Deletes a task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteTaskResponse
 */
async function deleteTaskWithOptions(request: DeleteTaskRequest, runtime: Util.RuntimeOptions): DeleteTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectEnv)) {
    query['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTask',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteTaskRequest
 * @return DeleteTaskResponse
 */
async function deleteTask(request: DeleteTaskRequest): DeleteTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTaskWithOptions(request, runtime);
}

model DeleteWorkflowRequest {
  clientUniqueCode?: string(name='ClientUniqueCode', description='The unique code of the client. This parameter is used to create a workflow asynchronously and implement the idempotence of the workflow. If you do not specify this parameter when you create the workflow, the system automatically generates a unique code. The unique code is uniquely associated with the workflow ID. If you specify this parameter when you update or delete the workflow, the value of this parameter must be the unique code that is used to create the workflow.', example='Workflow_0bc5213917368545132902xxxxxxxx'),
  envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
  id?: long(name='Id', description='The workflow ID.

This parameter is required.', example='1234'),
}

model DeleteWorkflowResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteWorkflowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkflowResponseBody(name='body'),
}

/**
 * @summary Deletes a workflow.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteWorkflowRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWorkflowResponse
 */
async function deleteWorkflowWithOptions(request: DeleteWorkflowRequest, runtime: Util.RuntimeOptions): DeleteWorkflowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientUniqueCode)) {
    body['ClientUniqueCode'] = request.clientUniqueCode;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWorkflow',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a workflow.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteWorkflowRequest
 * @return DeleteWorkflowResponse
 */
async function deleteWorkflow(request: DeleteWorkflowRequest): DeleteWorkflowResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWorkflowWithOptions(request, runtime);
}

model DeleteWorkflowDefinitionRequest {
  id?: long(name='Id', description='The ID of the workflow.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000'),
}

model DeleteWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B17730C0-D959-548A-AE23-E754177CXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary Deletes a workflow from DataStudio.
 *
 * @description >  A workflow that is deployed cannot be deleted. If you want to delete such a workflow, you must first undeploy the workflow.
 *
 * @param request DeleteWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWorkflowDefinitionResponse
 */
async function deleteWorkflowDefinitionWithOptions(request: DeleteWorkflowDefinitionRequest, runtime: Util.RuntimeOptions): DeleteWorkflowDefinitionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a workflow from DataStudio.
 *
 * @description >  A workflow that is deployed cannot be deleted. If you want to delete such a workflow, you must first undeploy the workflow.
 *
 * @param request DeleteWorkflowDefinitionRequest
 * @return DeleteWorkflowDefinitionResponse
 */
async function deleteWorkflowDefinition(request: DeleteWorkflowDefinitionRequest): DeleteWorkflowDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWorkflowDefinitionWithOptions(request, runtime);
}

model DeployFileRequest {
  comment?: string(name='Comment', example='First release task'),
  fileId?: long(name='FileId', example='10000001'),
  nodeId?: long(name='NodeId', example='2000001'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model DeployFileResponseBody = {
  data?: long(name='Data', example='30000001'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model DeployFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeployFileResponseBody(name='body'),
}

/**
 * @param request DeployFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeployFileResponse
 */
async function deployFileWithOptions(request: DeployFileRequest, runtime: Util.RuntimeOptions): DeployFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeployFile',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeployFileRequest
 * @return DeployFileResponse
 */
async function deployFile(request: DeployFileRequest): DeployFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployFileWithOptions(request, runtime);
}

model DetachDataQualityRulesFromEvaluationTaskRequest {
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', description='The ID of the data quality monitoring task that is associated with the rule.

This parameter is required.', example='10000'),
  dataQualityRuleIds?: [ long ](name='DataQualityRuleIds', description='The IDs of the monitoring rules.

This parameter is required.'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the workspace configuration page to obtain the workspace ID.

This parameter is required.', example='10002'),
}

model DetachDataQualityRulesFromEvaluationTaskShrinkRequest {
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', description='The ID of the data quality monitoring task that is associated with the rule.

This parameter is required.', example='10000'),
  dataQualityRuleIdsShrink?: string(name='DataQualityRuleIds', description='The IDs of the monitoring rules.

This parameter is required.'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the workspace configuration page to obtain the workspace ID.

This parameter is required.', example='10002'),
}

model DetachDataQualityRulesFromEvaluationTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
  success?: boolean(name='Success', description='Whether the call is successful. The values are as follows:
- true: The call is successful.
- false: the call failed.', example='true'),
}

model DetachDataQualityRulesFromEvaluationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachDataQualityRulesFromEvaluationTaskResponseBody(name='body'),
}

/**
 * @summary Disassociates monitoring rules from a data quality monitoring task.
 *
 * @param tmpReq DetachDataQualityRulesFromEvaluationTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetachDataQualityRulesFromEvaluationTaskResponse
 */
async function detachDataQualityRulesFromEvaluationTaskWithOptions(tmpReq: DetachDataQualityRulesFromEvaluationTaskRequest, runtime: Util.RuntimeOptions): DetachDataQualityRulesFromEvaluationTaskResponse {
  Util.validateModel(tmpReq);
  var request = new DetachDataQualityRulesFromEvaluationTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dataQualityRuleIds)) {
    request.dataQualityRuleIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataQualityRuleIds, 'DataQualityRuleIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dataQualityEvaluationTaskId)) {
    body['DataQualityEvaluationTaskId'] = request.dataQualityEvaluationTaskId;
  }
  if (!Util.isUnset(request.dataQualityRuleIdsShrink)) {
    body['DataQualityRuleIds'] = request.dataQualityRuleIdsShrink;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DetachDataQualityRulesFromEvaluationTask',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Disassociates monitoring rules from a data quality monitoring task.
 *
 * @param request DetachDataQualityRulesFromEvaluationTaskRequest
 * @return DetachDataQualityRulesFromEvaluationTaskResponse
 */
async function detachDataQualityRulesFromEvaluationTask(request: DetachDataQualityRulesFromEvaluationTaskRequest): DetachDataQualityRulesFromEvaluationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachDataQualityRulesFromEvaluationTaskWithOptions(request, runtime);
}

model DissociateProjectFromResourceGroupRequest {
  projectId?: long(name='ProjectId', description='The ID of the workspace from which you want to disassociate the resource group.

This parameter is required.', example='1000'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
}

model DissociateProjectFromResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DissociateProjectFromResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DissociateProjectFromResourceGroupResponseBody(name='body'),
}

/**
 * @summary Disassociates a resource group from a workspace.
 *
 * @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 * 2.  Your account must be assigned one of the following roles of the desired workspace:
 * *   Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request DissociateProjectFromResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DissociateProjectFromResourceGroupResponse
 */
async function dissociateProjectFromResourceGroupWithOptions(request: DissociateProjectFromResourceGroupRequest, runtime: Util.RuntimeOptions): DissociateProjectFromResourceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DissociateProjectFromResourceGroup',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Disassociates a resource group from a workspace.
 *
 * @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 * 2.  Your account must be assigned one of the following roles of the desired workspace:
 * *   Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request DissociateProjectFromResourceGroupRequest
 * @return DissociateProjectFromResourceGroupResponse
 */
async function dissociateProjectFromResourceGroup(request: DissociateProjectFromResourceGroupRequest): DissociateProjectFromResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociateProjectFromResourceGroupWithOptions(request, runtime);
}

model EstablishRelationTableToBusinessRequest {
  businessId?: string(name='BusinessId', description='This parameter is required.', example='1000001'),
  folderId?: string(name='FolderId', example='2eb6f9****'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw'),
  tableGuid?: string(name='TableGuid', description='This parameter is required.', example='odps.dw_project.tb1'),
}

model EstablishRelationTableToBusinessResponseBody = {
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG'),
  success?: boolean(name='Success', example='true'),
}

model EstablishRelationTableToBusinessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EstablishRelationTableToBusinessResponseBody(name='body'),
}

/**
 * @param request EstablishRelationTableToBusinessRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EstablishRelationTableToBusinessResponse
 */
async function establishRelationTableToBusinessWithOptions(request: EstablishRelationTableToBusinessRequest, runtime: Util.RuntimeOptions): EstablishRelationTableToBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessId)) {
    body['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.tableGuid)) {
    body['TableGuid'] = request.tableGuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EstablishRelationTableToBusiness',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request EstablishRelationTableToBusinessRequest
 * @return EstablishRelationTableToBusinessResponse
 */
async function establishRelationTableToBusiness(request: EstablishRelationTableToBusinessRequest): EstablishRelationTableToBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return establishRelationTableToBusinessWithOptions(request, runtime);
}

model ExecPipelineRunStageRequest {
  code?: string(name='Code', description='The code of the stage in the process. You can call the GetDeployment operation to query the code.

This parameter is required.', example='DEV_CHECK'),
  id?: string(name='Id', description='The ID of the process.

This parameter is required.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000'),
}

model ExecPipelineRunStageResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true

*   false

    **

    **Note:** The value of this parameter indicates only whether the stage is triggered but does not indicate whether the execution of the stage is successful.', example='true'),
}

model ExecPipelineRunStageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecPipelineRunStageResponseBody(name='body'),
}

/**
 * @summary Executes a stage in a process.
 *
 * @description >  The stages in a process are sequential. For more information, see the GetDeployment operation. Skipping or repeating a stage is not allowed.
 * >  The execution of a stage is asynchronous. The response of this operation indicates only whether a stage is triggered but does not indicate whether the execution of the stage is successful. You can call the GetDeployment operation to check whether the execution is successful.
 *
 * @param request ExecPipelineRunStageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExecPipelineRunStageResponse
 */
async function execPipelineRunStageWithOptions(request: ExecPipelineRunStageRequest, runtime: Util.RuntimeOptions): ExecPipelineRunStageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.code)) {
    body['Code'] = request.code;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ExecPipelineRunStage',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Executes a stage in a process.
 *
 * @description >  The stages in a process are sequential. For more information, see the GetDeployment operation. Skipping or repeating a stage is not allowed.
 * >  The execution of a stage is asynchronous. The response of this operation indicates only whether a stage is triggered but does not indicate whether the execution of the stage is successful. You can call the GetDeployment operation to check whether the execution is successful.
 *
 * @param request ExecPipelineRunStageRequest
 * @return ExecPipelineRunStageResponse
 */
async function execPipelineRunStage(request: ExecPipelineRunStageRequest): ExecPipelineRunStageResponse {
  var runtime = new Util.RuntimeOptions{};
  return execPipelineRunStageWithOptions(request, runtime);
}

model ExecuteAdhocWorkflowInstanceRequest {
  bizDate?: long(name='BizDate', description='The data timestamp.', example='1710239005403'),
  envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
  name?: string(name='Name', description='The name of the workflow instance.

This parameter is required.', example='WorkflowInstance1'),
  owner?: string(name='Owner', description='The account ID of the owner.

This parameter is required.', example='1000'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='100'),
  tasks?: [ 
    {
      clientUniqueCode?: string(name='ClientUniqueCode', description='The unique code of the client. This code uniquely identifies a task.

This parameter is required.', example='Task_0bc5213917368545132902xxxxxxxx'),
      dataSource?: {
        name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
      }(name='DataSource', description='The information about the associated data source.'),
      dependencies?: [ 
        {
          upstreamOutput?: string(name='UpstreamOutput', description='The identifier of the output of the ancestor task.', example='pre.odps_sql_demo_0'),
        }
      ](name='Dependencies', description='The dependency information.'),
      inputs?: {
        variables?: [ 
          {
            name?: string(name='Name', description='The name of the variable.', example='key1'),
            value?: string(name='Value', description='The value of the variable. You must configure this parameter in the `The ancestor output: The output variable name of the ancestor task` format.', example='Value1'),
          }
        ](name='Variables', description='The variables.'),
      }(name='Inputs', description='The input information.'),
      name?: string(name='Name', description='The name of the task.

This parameter is required.', example='SQL node.'),
      outputs?: {
        taskOutputs?: [ 
          {
            output?: string(name='Output', description='The identifier of the output.', example='pre.odps_sql_demo_0'),
          }
        ](name='TaskOutputs', description='The task outputs.'),
        variables?: [ 
          {
            name?: string(name='Name', description='The name of the variable.', example='key1'),
            type?: string(name='Type', description='The type. Valid values:

*   System
*   Constant
*   NodeOutput
*   PassThrough', example='Constant'),
            value?: string(name='Value', description='The value of the variable.', example='value1'),
          }
        ](name='Variables', description='The variables.'),
      }(name='Outputs', description='The output information.'),
      owner?: string(name='Owner', description='The account ID of the owner.

This parameter is required.', example='1000'),
      runtimeResource?: {
        cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
        image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.

This parameter is required.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
      }(name='RuntimeResource', description='The configurations of the runtime environment, such as the resource group information.

This parameter is required.'),
      script?: {
        content?: string(name='Content', description='The script content.', example='echo "helloWorld"'),
        parameters?: string(name='Parameters', description='The script parameters.', example='para1=$bizdate'),
      }(name='Script', description='The script information.'),
      timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='3600'),
      type?: string(name='Type', description='The type of the task.

This parameter is required.', example='ODPS_SQL'),
    }
  ](name='Tasks', description='The tasks.

This parameter is required.'),
}

model ExecuteAdhocWorkflowInstanceShrinkRequest {
  bizDate?: long(name='BizDate', description='The data timestamp.', example='1710239005403'),
  envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
  name?: string(name='Name', description='The name of the workflow instance.

This parameter is required.', example='WorkflowInstance1'),
  owner?: string(name='Owner', description='The account ID of the owner.

This parameter is required.', example='1000'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='100'),
  tasksShrink?: string(name='Tasks', description='The tasks.

This parameter is required.'),
}

model ExecuteAdhocWorkflowInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  workflowInstanceId?: long(name='WorkflowInstanceId', description='The workflow instance ID.', example='1234'),
}

model ExecuteAdhocWorkflowInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteAdhocWorkflowInstanceResponseBody(name='body'),
}

/**
 * @summary Create a temporary workflow instance based on configurations.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq ExecuteAdhocWorkflowInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExecuteAdhocWorkflowInstanceResponse
 */
async function executeAdhocWorkflowInstanceWithOptions(tmpReq: ExecuteAdhocWorkflowInstanceRequest, runtime: Util.RuntimeOptions): ExecuteAdhocWorkflowInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new ExecuteAdhocWorkflowInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tasks)) {
    request.tasksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tasks, 'Tasks', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tasksShrink)) {
    body['Tasks'] = request.tasksShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteAdhocWorkflowInstance',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create a temporary workflow instance based on configurations.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ExecuteAdhocWorkflowInstanceRequest
 * @return ExecuteAdhocWorkflowInstanceResponse
 */
async function executeAdhocWorkflowInstance(request: ExecuteAdhocWorkflowInstanceRequest): ExecuteAdhocWorkflowInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeAdhocWorkflowInstanceWithOptions(request, runtime);
}

model GetAlertRuleRequest {
  id?: string(name='Id', description='The rule ID.', example='28547072'),
}

model GetAlertRuleResponseBody = {
  alertRule?: {
    enabled?: boolean(name='Enabled', description='Indicates whether the rule is enabled.', example='true'),
    id?: long(name='Id', description='The rule ID.', example='16035'),
    name?: string(name='Name', description='The name of the rule.', example='error_rule'),
    notification?: {
      channels?: [ string ](name='Channels', description='The alert notification channels.'),
      intervalInMinutes?: int32(name='IntervalInMinutes', description='The interval at which an alert notification is sent. Unit: minutes. Valid values: [5,10000].', example='30'),
      maximum?: int32(name='Maximum', description='The maximum number of times an alert notification can be sent within a calendar day. Valid values: [1, 10000].', example='3'),
      receivers?: [ 
        {
          extension?: string(name='Extension', description='The additional configuration of the alert recipient. If the ReceiverType parameter is set to DingdingUrl, you can set this parameter to {"atAll":true} to remind all members in a DingTalk group.', example='{"atAll":true}'),
          receiverType?: string(name='ReceiverType', description='The type of the alert recipient. Valid valves:

*   AliUid: Alibaba Cloud account ID.
*   Shift Schedules: the personnel in a shift schedule.
*   TaskOwner: the task owner. The task owner can receive custom alerts and event alerts.
*   Owner: the baseline owner. The baseline owner can receive baseline alerts.
*   WebhookUrl: URL of a custom webhook.
*   DingdingUrl: DingTalk webhook URL.
*   FeishuUrl: Lark webhook URL.
*   WeixinUrl: WeCom webhook URL.', example='WebhookUrl'),
          receiverValues?: [ string ](name='ReceiverValues', description='The alert recipients.'),
        }
      ](name='Receivers', description='The alert recipients.'),
      silenceEndTime?: string(name='SilenceEndTime', description='The end time for silence. The time is in the HH:mm:ss format.', example='00:00:00'),
      silenceStartTime?: string(name='SilenceStartTime', description='The start time for silence. The time is in the HH:mm:ss format.', example='00:00:00'),
    }(name='Notification', description='The configuration for the alert notification.'),
    owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the owner of the rule.', example='279961421580845157'),
    triggerCondition?: {
      extension?: {
        cycleUnfinished?: {
          cycleAndTime?: [ 
            {
              cycleId?: int32(name='CycleId', description='The ID of the scheduling cycle of the instance. Valid values: [1,288].', example='1'),
              time?: string(name='Time', description='The latest completion time of the instance within the scheduling cycle. The time is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='12:00'),
            }
          ](name='CycleAndTime', description='The configurations of the scheduling cycle and timeout period of the instance.'),
        }(name='CycleUnfinished', description='The configuration for an alert of the CycleUnfinished type.'),
        error?: {
          autoRerunAlertEnabled?: boolean(name='AutoRerunAlertEnabled', description='Indicates whether an alert is triggered if a batch synchronization task is automatically rerun upon a failure.', example='false'),
          streamTaskIds?: [ long ](name='StreamTaskIds', description='The IDs of the real-time computing tasks. This parameter is required when you monitor real-time computing tasks.'),
        }(name='Error', description='The configuration for an alert of the Error type.'),
        instanceErrorCount?: {
          count?: int32(name='Count', description='The maximum number of instances on which an error occurs. Valid values: [1,10000].', example='10'),
        }(name='InstanceErrorCount', description='The configuration for an alert of the InstanceErrorCount type.'),
        instanceErrorPercentage?: {
          percentage?: int32(name='Percentage', description='The maximum percentage of instances on which an error occurs in the workspace to the total number of instances. Valid values: [1-100].', example='10'),
        }(name='InstanceErrorPercentage', description='The configuration for an alert of the InstanceErrorPercentage type.'),
        instanceTransferFluctuate?: {
          percentage?: int32(name='Percentage', description='The maximum percentage of fluctuation in the number of auto triggered node instances that are generated in your workspace. Valid values: [1-100].', example='10'),
          trend?: string(name='Trend', description='The way in which the number of auto triggered node instances that are generated in your workspace fluctuates. Valid values:

*   abs: the absolute value. The number of instances increases or decreases.
*   increase: The number of instances increases.
*   decrease: The number of instances decreases.', example='10'),
        }(name='InstanceTransferFluctuate', description='The configuration for an alert of the InstanceTransferFluctuate type.'),
        timeout?: {
          timeoutInMinutes?: int32(name='TimeoutInMinutes', description='The timeout period. Unit: minutes. Valid values: [1, 21600].', example='10'),
        }(name='Timeout', description='The configuration for an alert of the Timeout type.'),
        unFinished?: {
          unFinishedTime?: string(name='UnFinishedTime', description='The latest completion time of the instance. The period is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='12:00'),
        }(name='UnFinished', description='The configuration for an alert of the UnFinished type.'),
      }(name='Extension', description='The extended information about the rule. This parameter is required for specific types of alerts.'),
      target?: {
        allowTasks?: [ long ](name='AllowTasks', description='The nodes that are not to be monitored.'),
        ids?: [ long ](name='Ids', description='The IDs of monitored objects.'),
        type?: string(name='Type', description='The type of the monitored objects. Valid values:

*   Task: node
*   Baseline: baseline
*   project: workspace
*   BizProcess: workflow', example='Task'),
      }(name='Target', description='The monitored objects.'),
      type?: string(name='Type', description='The alert type. Valid values:

*   Finished: An instance is successfully run.
*   UnFinished: An instance does not finish running before a specified point in time.
*   Error: An error occurs on an instance.
*   CycleUnfinished: An instance does not finish running as expected within a specific cycle.
*   Timeout: An instance times out.
*   InstanceTransferComplete: An instance is generated by the auto triggered node.
*   InstanceTransferFluctuate: The number of generated instances fluctuates.
*   ExhaustedError: An error persists after an instance is automatically rerun.
*   InstanceKeyword: An instance with errors contains specified keywords.
*   InstanceErrorCount: The number of instances on which an error occurs reaches a specified threshold.
*   InstanceErrorPercentage: The proportion of instances on which an error occurs in the workspace to the total number of instances reaches a specified threshold.
*   ResourceGroupPercentage: The usage rate of the resource group reaches a specified threshold.
*   ResourceGroupWaitCount: The number of instances that are waiting for resources in the resource group reaches a specified threshold.', example='Error'),
    }(name='TriggerCondition', description='The alert triggering condition.'),
  }(name='AlertRule', description='The information about the rule.'),
  requestId?: string(name='RequestId', description='The request ID.', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model GetAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlertRuleResponseBody(name='body'),
}

/**
 * @summary Queries a custom alert monitoring rule.
 *
 * @param request GetAlertRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAlertRuleResponse
 */
async function getAlertRuleWithOptions(request: GetAlertRuleRequest, runtime: Util.RuntimeOptions): GetAlertRuleResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAlertRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a custom alert monitoring rule.
 *
 * @param request GetAlertRuleRequest
 * @return GetAlertRuleResponse
 */
async function getAlertRule(request: GetAlertRuleRequest): GetAlertRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAlertRuleWithOptions(request, runtime);
}

model GetBusinessRequest {
  businessId?: long(name='BusinessId', description='This parameter is required.', example='1000000111'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model GetBusinessResponseBody = {
  data?: {
    businessId?: long(name='BusinessId', example='1000001'),
    businessName?: string(name='BusinessName', example='The first business process'),
    description?: string(name='Description', example='This is my first business process.'),
    owner?: string(name='Owner', example='20000****'),
    projectId?: string(name='ProjectId', example='10000'),
    useType?: string(name='UseType', example='NORMAL'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model GetBusinessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBusinessResponseBody(name='body'),
}

/**
 * @param request GetBusinessRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetBusinessResponse
 */
async function getBusinessWithOptions(request: GetBusinessRequest, runtime: Util.RuntimeOptions): GetBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessId)) {
    body['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBusiness',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request GetBusinessRequest
 * @return GetBusinessResponse
 */
async function getBusiness(request: GetBusinessRequest): GetBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBusinessWithOptions(request, runtime);
}

model GetCatalogRequest {
  id?: string(name='Id', description='Data catalog entity ID. Currently, only DLF and StarRocks types are supported. You can refer to the response of the ListCatalogs operation and [the description of metadata entity concepts.](https://help.aliyun.com/document_detail/2880092.html)

*   For the DLF type, the format is `dlf-catalog::catalog_id`.
*   For the StarRocks type, the format is `starrocks-catalog:(instance_id|encoded_jdbc_url):catalog_name`.

>  Parameter descriptions:\\\\
`catalog_id`: The DLF catalog ID.\\\\
`instance_id`: The instance ID, required for the data source registered in instance mode.\\\\
`encoded_jdbc_url`: The JDBC connection string that has been URL encoded, required for the data source registered via a connection string.\\\\
`catalog_name`: The name of the StarRocks catalog.

This parameter is required.', example='dlf-catalog:123456XXX:test_catalog
starrocks-catalog:c-abc123xxx:default_catalog'),
}

model GetCatalogResponseBody = {
  catalog?: Catalog(name='Catalog'),
  requestId?: string(name='RequestId', example='1AFAE64E-D1BE-432B-A9****'),
  success?: boolean(name='Success', example='true'),
}

model GetCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCatalogResponseBody(name='body'),
}

/**
 * @summary 获取数据目录详情
 *
 * @param request GetCatalogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCatalogResponse
 */
async function getCatalogWithOptions(request: GetCatalogRequest, runtime: Util.RuntimeOptions): GetCatalogResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCatalog',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据目录详情
 *
 * @param request GetCatalogRequest
 * @return GetCatalogResponse
 */
async function getCatalog(request: GetCatalogRequest): GetCatalogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCatalogWithOptions(request, runtime);
}

model GetCertificateRequest {
  id?: long(name='Id', description='The ID of the certificate file.

This parameter is required.', example='676303114031776'),
  projectId?: long(name='ProjectId', description='The ID of the workspace to which the certificate file belongs.', example='1065601'),
}

model GetCertificateResponseBody = {
  certificate?: {
    createTime?: long(name='CreateTime', description='The time when the certificate file was created. The value is a UNIX timestamp. Unit: milliseconds.', example='1730217600000'),
    createUser?: string(name='CreateUser', description='The ID of the user who created the certificate file.', example='1107550004253538'),
    description?: string(name='Description', description='The description.', example='This is a file'),
    fileSizeInBytes?: long(name='FileSizeInBytes', description='The size of the certificate file, in bytes.', example='77549'),
    id?: long(name='Id', description='The ID of the certificate file.', example='676303114031776'),
    name?: string(name='Name', description='The name of the certificate file.', example='ca1.crt'),
    projectId?: long(name='ProjectId', description='The ID of the workspace to which the certificate file belongs.', example='177161'),
  }(name='Certificate', description='The details of the certificate file.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
}

model GetCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCertificateResponseBody(name='body'),
}

/**
 * @summary Queries a certificate file.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Deploy, Develop, Workspace Owner, and O\\&M.
 *
 * @param request GetCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCertificateResponse
 */
async function getCertificateWithOptions(request: GetCertificateRequest, runtime: Util.RuntimeOptions): GetCertificateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCertificate',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a certificate file.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Deploy, Develop, Workspace Owner, and O\\&M.
 *
 * @param request GetCertificateRequest
 * @return GetCertificateResponse
 */
async function getCertificate(request: GetCertificateRequest): GetCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCertificateWithOptions(request, runtime);
}

model GetColumnRequest {
  id?: string(name='Id', description='The ID. You can refer to the response of the ListColumns operation and the [description of concepts related to metadata entities.](https://help.aliyun.com/document_detail/2880092.html)

The format: `${EntityType}:${Instance ID or escaped URL}:${Catalog name}:${Database name}`. Use empty strings as placeholders for levels that do not exist.

>  For the MaxCompute and DLF types, the instance ID level must be left empty. For the MaxCompute type, the instance ID level is represented by an empty string. The database name is the name of the MaxCompute project with schema enabled.

>  The catalog identifier of the StarRocks is the catalog name, and the catalog identifier of the DLF type is the catalog ID. Other types do not support catalog levels and can use empty strings as placeholders.

Examples of common ID formats

`maxcompute-column:::project_name:[schema_name]:table_name:column_name`

`dlf-column::catalog_id:database_name::table_name:column_name`

`hms-column:instance_id::database_name::table_name:column_name`

`holo-column:instance_id::database_name:schema_name:table_name:column_name`

`mysql-column:(instance_id|encoded_jdbc_url)::database_name::table_name:column_name`

> \\\\
`instance_id`: the ID of the instance, which is required when the data source is registered in instance mode.\\\\
`encoded_jdbc_url`: the URL-encoded JDBC connection string, which is required when the data source is registered via a connection string.\\\\
`catalog_id`: The DLF catalog ID.\\\\
`project_name`: The MaxCompute project name.\\\\
`database_name`: The database name.\\\\
`schema_name`: The schema name. For the MaxCompute type, this is required only if the project has enabled schema; otherwise, use an empty string as a placeholder.\\\\
`table_name`: The table name.\\\\
`column_name`: The field name.

This parameter is required.', example='maxcompute-column:11075xxxx::test_project:test_schema:test_table:test_column'),
}

model GetColumnResponseBody = {
  column?: Column(name='Column'),
  requestId?: string(name='RequestId', example='D1E2E5BC-xxxx-xxxx-xxxx-xxxxxx'),
  success?: boolean(name='Success', example='true'),
}

model GetColumnResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetColumnResponseBody(name='body'),
}

/**
 * @summary 获取字段详情
 *
 * @param request GetColumnRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetColumnResponse
 */
async function getColumnWithOptions(request: GetColumnRequest, runtime: Util.RuntimeOptions): GetColumnResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetColumn',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取字段详情
 *
 * @param request GetColumnRequest
 * @return GetColumnResponse
 */
async function getColumn(request: GetColumnRequest): GetColumnResponse {
  var runtime = new Util.RuntimeOptions{};
  return getColumnWithOptions(request, runtime);
}

model GetComponentRequest {
  componentId?: string(name='ComponentId', description='This parameter is required.', example='1112312312312'),
  projectId?: long(name='ProjectId', example='10000'),
}

model GetComponentResponseBody = {
  component?: {
    componentId?: string(name='ComponentId', example='43cd873b-235c-44f8-be07-e4d4cf7e73b0'),
    createTime?: string(name='CreateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mm:ss.SSSZ', example='2017-04-27T05:37:05Z'),
    description?: string(name='Description', example='None'),
    modifyTime?: string(name='ModifyTime', description='Use the UTC time format: yyyy-MM-ddTHH:mm:ss.SSSZ', example='2024-01-26T07:44:21Z'),
    name?: string(name='Name', example='dim_whse_epet_warehouse_jz_storage_stock_lot_relation_id'),
    owner?: string(name='Owner', example='207316543660665792'),
    projectId?: long(name='ProjectId', example='64623'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    spec?: string(name='Spec', example='{
    "kind": "Component",
    "name": "com1",
    "spec": {
        "components": [
            {
                "name": "test11",
                "id": "8196828925037*****",
                "owner": "054664",
                "description": "",
                "script": {
                    "language": "odps-sql",
                    "path": "test11",
                    "content": "select \\\\"@@{bizdate}\\\\", \\\\"@@{my_input_table}\\\\"",
                    "runtime": {
                        "command": "SQL_COMPONENT"
                    }
                },
                "inputs": [
                    {
                        "name": "bizdate",
                        "type": "string"
                    },
                    {
                        "name": "my_input_table",
                        "type": "string"
                    }
                ],
                "outputs": [
                    {
                        "name": "my_output_table1",
                        "type": "string"
                    }
                ]
            }
        ]
    }
}'),
  }(name='Component'),
  requestId?: string(name='RequestId', description='Id of the request', example='0000-ABCD-EFG****'),
}

model GetComponentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetComponentResponseBody(name='body'),
}

/**
 * @summary 获取组件信息
 *
 * @param request GetComponentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetComponentResponse
 */
async function getComponentWithOptions(request: GetComponentRequest, runtime: Util.RuntimeOptions): GetComponentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.componentId)) {
    query['ComponentId'] = request.componentId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetComponent',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取组件信息
 *
 * @param request GetComponentRequest
 * @return GetComponentResponse
 */
async function getComponent(request: GetComponentRequest): GetComponentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getComponentWithOptions(request, runtime);
}

model GetCreateWorkflowInstancesResultRequest {
  operationId?: string(name='OperationId', description='The operation ID. This parameter is used to query the result of asynchronously creating a workflow instance. You can call the CreateWorkflowInstances operation to query the ID.

This parameter is required.', example='e15ad21c-b0e9-4792-8f55-b037xxxxxxxx'),
}

model GetCreateWorkflowInstancesResultResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  result?: {
    failureMessage?: string(name='FailureMessage', description='The error message. This parameter is returned only if the creation fails.', example='Invalid Param xxx'),
    status?: string(name='Status', description='The creation status. Valid values:

*   Creating
*   Created
*   CreateFailure', example='Created'),
    workflowInstanceIds?: [ long ](name='WorkflowInstanceIds', description='The workflow instance IDs. This parameter is returned only if the creation is successful.'),
  }(name='Result', description='The result of asynchronously creating a workflow instance.'),
}

model GetCreateWorkflowInstancesResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCreateWorkflowInstancesResultResponseBody(name='body'),
}

/**
 * @summary Queries the result of asynchronously creating a workflow instance.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetCreateWorkflowInstancesResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCreateWorkflowInstancesResultResponse
 */
async function getCreateWorkflowInstancesResultWithOptions(request: GetCreateWorkflowInstancesResultRequest, runtime: Util.RuntimeOptions): GetCreateWorkflowInstancesResultResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCreateWorkflowInstancesResult',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the result of asynchronously creating a workflow instance.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetCreateWorkflowInstancesResultRequest
 * @return GetCreateWorkflowInstancesResultResponse
 */
async function getCreateWorkflowInstancesResult(request: GetCreateWorkflowInstancesResultRequest): GetCreateWorkflowInstancesResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCreateWorkflowInstancesResultWithOptions(request, runtime);
}

model GetDIJobRequest {
  DIJobId?: long(name='DIJobId', description='This parameter is deprecated. Use the Id parameter instead.', example='11588', deprecated=true),
  id?: long(name='Id', description='The ID of the synchronization task.', example='11588'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000'),
  withDetails?: boolean(name='WithDetails', description='Specifies whether to return detailed configuration information, including TransformationRules, TableMappings, and JobSettings. Valid values: true and false. Default value: true.', example='true'),
}

model GetDIJobResponseBody = {
  pagingInfo?: {
    DIJobId?: string(name='DIJobId', description='This parameter is deprecated. Use the Id parameter instead.', example='32601', deprecated=true),
    description?: string(name='Description', description='The description of the synchronization task.', example='description'),
    destinationDataSourceSettings?: [ 
      {
        dataSourceName?: string(name='DataSourceName', description='The name of the data source.', example='dw_mysql'),
      }
    ](name='DestinationDataSourceSettings', description='The properties of the destination.'),
    destinationDataSourceType?: string(name='DestinationDataSourceType', description='The destination type. Valid values: Hologres, OSS-HDFS, OSS, MaxCompute, LogHub, StarRocks, DataHub, AnalyticDB_For_MySQL, Kafka, Hive.', example='Hologres'),
    id?: long(name='Id', description='The ID of the synchronization task.', example='32601'),
    jobName?: string(name='JobName', description='The name of the synchronization task.', example='imp_ods_dms_det_dealer_info_df'),
    jobSettings?: {
      channelSettings?: string(name='ChannelSettings', description='The channel control settings for the synchronization task. You can configure special channel control settings for the following synchronization links: data synchronization between Hologres data sources and data synchronization from Hologres to Kafka.

1.  Holo2Kafka

*   Example: {"destinationChannelSettings":{"kafkaClientProperties":[{"key":"linger.ms","value":"100"}],"keyColumns":["col3"],"writeMode":"canal"}}
*   kafkaClientProperties: the parameters related to a Kafka producer, which are used when you write data to a Kafka data source.
*   keyColumns: the names of Kafka columns to which data is written.
*   writeMode: the writing format. Valid values: json and canal.

2.  Holo2Holo

*   Example: {"destinationChannelSettings":{"conflictMode":"replace","dynamicColumnAction":"replay","writeMode":"replay"}}
*   conflictMode: the policy used to handle a conflict that occurs during data writing to Hologres. Valid values: replace and ignore.
*   writeMode: the mode in which data is written to Hologres. Valid values: replay and insert.
*   dynamicColumnAction: the mode in which data is written to dynamic columns in a Hologres table. Valid values: replay, insert, and ignore.', example='{"structInfo":"MANAGED","storageType":"TEXTFILE","writeMode":"APPEND","partitionColumns":[{"columnName":"pt","columnType":"STRING","comment":""}],"fieldDelimiter":""}'),
      columnDataTypeSettings?: [ 
        {
          destinationDataType?: string(name='DestinationDataType', description='The data type of the destination field. Valid values: bigint, boolean, string, text, datetime, timestamp, decimal, and binary. Different types of data sources support different data types.', example='text'),
          sourceDataType?: string(name='SourceDataType', description='The data type of the source field. Valid values: bigint, boolean, string, text, datetime, timestamp, decimal, and binary. Different types of data sources support different data types.', example='bigint'),
        }
      ](name='ColumnDataTypeSettings', description='The data type mappings between source fields and destination fields.'),
      cycleScheduleSettings?: {
        cycleMigrationType?: string(name='CycleMigrationType', description='The synchronization type that requires periodic scheduling. Valid values:

*   Full: full synchronization
*   OfflineIncremental: batch incremental synchronization', example='Full'),
        scheduleParameters?: string(name='ScheduleParameters', description='The scheduling parameters.', example='bizdate=$bizdate'),
      }(name='CycleScheduleSettings', description='The settings for periodic scheduling.'),
      ddlHandlingSettings?: [ 
        {
          action?: string(name='Action', description='The processing policy for a specific type of DDL message. Valid values:

*   Ignore: ignores a DDL message.
*   Critical: reports an error for a DDL message.
*   Normal: normally processes a DDL message.', example='Ignore'),
          type?: string(name='Type', description='The DDL operation type. Valid values:

*   RenameColumn
*   ModifyColumn
*   CreateTable
*   TruncateTable
*   DropTable', example='CreateTable'),
        }
      ](name='DdlHandlingSettings', description='The DDL operation types. Valid values:

*   RenameColumn
*   ModifyColumn
*   CreateTable
*   TruncateTable
*   DropTable
*   DropColumn
*   AddColumn'),
      runtimeSettings?: [ 
        {
          name?: string(name='Name', description='The name of the configuration item. Valid values:

*   src.offline.datasource.max.connection: indicates the maximum number of connections that are allowed for reading data from the source of a batch synchronization task.
*   dst.offline.truncate: indicates whether to clear the destination table before data writing.
*   runtime.offline.speed.limit.enable: indicates whether throttling is enabled for a batch synchronization task.
*   runtime.offline.concurrent: indicates the maximum number of parallel threads that are allowed for a batch synchronization task.
*   runtime.enable.auto.create.schema: indicates whether schemas are automatically created in the destination of a synchronization task.
*   runtime.realtime.concurrent: indicates the maximum number of parallel threads that are allowed for a real-time synchronization task.
*   runtime.realtime.failover.minute.dataxcdc: indicates the maximum waiting duration before a synchronization task retries the next restart if the previous restart fails after failover occurs. Unit: minutes.
*   runtime.realtime.failover.times.dataxcdc: indicates the maximum number of failures that are allowed for restarting a synchronization task after failovers occur.', example='runtime.offline.concurrent'),
          value?: string(name='Value', description='The value of the configuration item.', example='1'),
        }
      ](name='RuntimeSettings', description='The runtime settings.'),
    }(name='JobSettings', description='The runtime settings.'),
    jobStatus?: string(name='JobStatus', description='The status of the job.', example='Running'),
    jobType?: string(name='JobType', description='任务类型

- DatabaseRealtimeMigration(整库实时):将源端多个库的多个表进行流同步，支持仅全量，仅增量，或全量+增量。

- DatabaseOfflineMigration(整库离线):将源端多个库的多个表进行批同步，支持仅全量，仅增量，或全量+增量。

- SingleTableRealtimeMigration(单表实时):将源端单个表进行流同步。', example='DatabaseRealtimeMigration'),
    migrationType?: string(name='MigrationType', description='The synchronization type. Valid values:

*   FullAndRealtimeIncremental: full synchronization and real-time incremental synchronization of data in an entire database
*   RealtimeIncremental: real-time incremental synchronization of data in a single table
*   Full: full batch synchronization of data in an entire database
*   OfflineIncremental: batch incremental synchronization of data in an entire database
*   FullAndOfflineIncremental: full synchronization and batch incremental synchronization of data in an entire database', example='FullAndRealtimeIncremental'),
    projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter indicates the DataWorks workspace to which the API operation is applied.', example='98330'),
    resourceSettings?: {
      offlineResourceSettings?: {
        requestedCu?: double(name='RequestedCu', description='The number of compute units (CUs) in the resource group for scheduling that are used for batch synchronization.', example='2.0'),
        resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group for Data Integration used for batch synchronization.', example='S_res_group_7708_1667792816832'),
      }(name='OfflineResourceSettings', description='The resource used for batch synchronization.'),
      realtimeResourceSettings?: {
        requestedCu?: double(name='RequestedCu', description='The number of CUs in the resource group for Data Integration that are used for real-time synchronization.', example='2.0'),
        resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group for Data Integration used for real-time synchronization.', example='S_res_group_235454102432001_1579085295030'),
      }(name='RealtimeResourceSettings', description='The resource used for real-time synchronization.'),
      scheduleResourceSettings?: {
        requestedCu?: double(name='RequestedCu', description='The number of CUs in the resource group for Data Integration that are used for scheduling.', example='2.0'),
        resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group for scheduling used by the synchronization task.', example='S_res_group_235454102432001_1718359176885'),
      }(name='ScheduleResourceSettings', description='The resource used for scheduling.'),
    }(name='ResourceSettings', description='The resource settings.'),
    sourceDataSourceSettings?: [ 
      {
        dataSourceName?: string(name='DataSourceName', description='The name of the data source.', example='dw_mysql'),
        dataSourceProperties?: {
          encoding?: string(name='Encoding', description='The encoding format of the database.', example='UTF-8'),
          timezone?: string(name='Timezone', description='The time zone.', example='GMT+8'),
        }(name='DataSourceProperties', description='The properties of the data source.'),
      }
    ](name='SourceDataSourceSettings', description='The settings of the source. Only a single source is supported.'),
    sourceDataSourceType?: string(name='SourceDataSourceType', description='The source type. Valid values: PolarDB, MySQL, Kafka, LogHub, Hologres, Oracle, OceanBase, MongoDB, RedShift, Hive, SQLServer, Doris, ClickHouse.', example='Mysql'),
    tableMappings?: [ 
      {
        sourceObjectSelectionRules?: [ 
          {
            action?: string(name='Action', description='The operation that is performed to select objects. Valid values: Include and Exclude.', example='Include'),
            expression?: string(name='Expression', description='The expression.', example='mysql_table_1'),
            expressionType?: string(name='ExpressionType', description='The expression type. Valid values: Exact and Regex.', example='Exact'),
            objectType?: string(name='ObjectType', description='The object type. Valid values:

*   Table
*   Schema
*   Database', example='Table'),
          }
        ](name='SourceObjectSelectionRules', description='The list of rules used to select synchronization objects in the source.'),
        transformationRules?: [ 
          {
            ruleActionType?: string(name='RuleActionType', description='The action type. Valid values:

*   DefinePrimaryKey
*   Rename
*   AddColumn
*   HandleDml', example='AddColumn'),
            ruleName?: string(name='RuleName', description='The name of the rule. If the values of the RuleActionType parameter and the RuleTargetType parameter are the same for multiple transformation rules, you must make sure that the transformation rule names are unique.', example='rename_rule_1'),
            ruleTargetType?: string(name='RuleTargetType', description='The type of the object on which the action is performed. Valid values:

*   Table
*   Schema
*   Database', example='Table'),
          }
        ](name='TransformationRules', description='The list of transformation rules that are applied to the synchronization objects selected from the source. Each entry in the list defines a transformation rule.'),
      }
    ](name='TableMappings', description='The list of mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. Each entry in the list displays a mapping between a rule used to select synchronization objects and a transformation rule applied to the selected synchronization objects.

>  [ { "SourceObjectSelectionRules":[ { "ObjectType":"Database", "Action":"Include", "ExpressionType":"Exact", "Expression":"biz_db" }, { "ObjectType":"Schema", "Action":"Include", "ExpressionType":"Exact", "Expression":"s1" }, { "ObjectType":"Table", "Action":"Include", "ExpressionType":"Exact", "Expression":"table1" } ], "TransformationRuleNames":[ { "RuleName":"my_database_rename_rule", "RuleActionType":"Rename", "RuleTargetType":"Schema" } ] } ]'),
    transformationRules?: [ 
      {
        ruleActionType?: string(name='RuleActionType', description='The action type. Valid values:

*   DefinePrimaryKey
*   Rename
*   AddColumn
*   HandleDml
*   DefineIncrementalCondition
*   DefineCycleScheduleSettings
*   DefinePartitionKey', example='Rename'),
        ruleExpression?: string(name='RuleExpression', description='The expression of the rule. The expression is a JSON string.

1.  Example of a renaming rule

*   Example: {"expression":"${srcDatasourceName}_${srcDatabaseName}_0922" }
*   expression: the expression of the renaming rule. You can use the following variables in an expression: ${srcDatasourceName}, ${srcDatabaseName}, and ${srcTableName}. ${srcDatasourceName} indicates the name of the source. ${srcDatabaseName} indicates the name of a source database. ${srcTableName} indicates the name of a source table.

2.  Example of a column addition rule

*   Example: {"columns":[{"columnName":"my_add_column","columnValueType":"Constant","columnValue":"123"}]}
*   If no rule of this type is configured, no fields are added to the destination and no values are assigned by default.
*   columnName: the name of the field that is added.
*   columnValueType: the value type of the field. Valid values: Constant and Variable.
*   columnValue: the value of the field. If the columnValueType parameter is set to Constant, the value of the columnValue parameter is a constant of the STRING data type. If the columnValueType parameter is set to Variable, the value of the columnValue parameter is a built-in variable. The following built-in variables are supported: EXECUTE_TIME (LONG data type), DB_NAME_SRC (STRING data type), DATASOURCE_NAME_SRC (STRING data type), TABLE_NAME_SRC (STRING data type), DB_NAME_DEST (STRING data type), DATASOURCE_NAME_DEST (STRING data type), TABLE_NAME_DEST (STRING data type), and DB_NAME_SRC_TRANSED (STRING data type). EXECUTE_TIME indicates the execution time. DB_NAME_SRC indicates the name of a source database. DATASOURCE_NAME_SRC indicates the name of the source. TABLE_NAME_SRC indicates the name of a source table. DB_NAME_DEST indicates the name of a destination database. DATASOURCE_NAME_DEST indicates the name of the destination. TABLE_NAME_DEST indicates the name of a destination table. DB_NAME_SRC_TRANSED indicates the database name obtained after a transformation.

3.  Example of a rule used to specify primary key fields for a destination table

*   Example: {"columns":["ukcolumn1","ukcolumn2"]}
*   If no rule of this type is configured, the primary key fields in the mapped source table are used for the destination table by default.
*   If the destination table is an existing table, Data Integration does not modify the schema of the destination table. If the specified primary key fields do not exist in the destination table, an error is reported when the synchronization task starts to run.
*   If the destination table is automatically created by the system, Data Integration automatically creates the schema of the destination table. The schema contains the primary key fields that you specify. If the specified primary key fields do not exist in the destination table, an error is reported when the synchronization task starts to run.

4.  Example of a rule used to process DML messages

*   Example: {"dmlPolicies":[{"dmlType":"Delete","dmlAction":"Filter","filterCondition":"id > 1"}]}
*   If no rule of this type is configured, the default processing policy for messages generated for insert, update, and delete operations is Normal.
*   dmlType: the DML operation. Valid values: Insert, Update, and Delete.
*   dmlAction: the processing policy for DML messages. Valid values: Normal, Ignore, Filter, and LogicalDelete. Filter indicates conditional processing. The value Filter is returned for the dmlAction parameter only when the value of the dmlType parameter is Update or Delete.
*   filterCondition: the condition used to filter DML messages. This parameter is returned only when the value of the dmlAction parameter is Filter.

5.  Example of a rule used to perform incremental synchronization

*   Example: {"where":"id > 0"}
*   The rule used to perform incremental synchronization is returned.

6.  Example of a rule used to configure scheduling parameters for an auto triggered task

*   Example: {"cronExpress":" \\\\* \\\\* \\\\* \\\\* \\\\* \\\\*", "cycleType":"1"}
*   The rule used to configure scheduling parameters for an auto triggered task is returned.

7.  Example of a rule used to specify a partition key

*   Example: {"columns":["id"]}
*   The rule used to specify a partition key is returned.', example='{"expression":"${srcDatasoureName}_${srcDatabaseName}"}'),
        ruleName?: string(name='RuleName', description='The name of the rule. If the values of the RuleActionType parameter and the RuleTargetType parameter are the same for multiple transformation rules, you must make sure that the transformation rule names are unique.', example='rename_rule_1'),
        ruleTargetType?: string(name='RuleTargetType', description='The type of the object on which the action is performed. Valid values:

*   Table
*   Schema
*   Database', example='Table'),
      }
    ](name='TransformationRules', description='The list of transformation rules that are applied to the synchronization objects selected from the source.

>  [ { "RuleName":"my_database_rename_rule", "RuleActionType":"Rename", "RuleTargetType":"Schema", "RuleExpression":"{"expression":"${srcDatasoureName}_${srcDatabaseName}"}" } ]'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='C99E2BE6-9DEA-5C2E-8F51-1DDCFEADE490'),
}

model GetDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDIJobResponseBody(name='body'),
}

/**
 * @summary Queries the information about a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDIJobResponse
 */
async function getDIJobWithOptions(request: GetDIJobRequest, runtime: Util.RuntimeOptions): GetDIJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDIJob',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDIJobRequest
 * @return GetDIJobResponse
 */
async function getDIJob(request: GetDIJobRequest): GetDIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDIJobWithOptions(request, runtime);
}

model GetDIJobLogRequest {
  DIJobId?: long(name='DIJobId', description='This parameter is deprecated. Use the Id parameter instead.', example='10000', deprecated=true),
  failoverId?: long(name='FailoverId', description='The failover ID.', example='10'),
  id?: long(name='Id', description='The ID of the synchronization task.', example='10000'),
  instanceId?: long(name='InstanceId', description='The instance ID.', example='6153616438'),
  nodeType?: string(name='NodeType', description='The type of the node. This parameter is applicable only to the tasks that are run on serverless resource groups. Valid values:

*   **MASTER**: the master node, which is used to query the logs of JobManagers.
*   **WORKER**: the worker node, which is used to query the logs of TaskManagers.', example='MASTER'),
  pageNumber?: int32(name='PageNumber', description='The page number of the pagination query. The value is a positive integer greater than or equal to 1.', example='1'),
}

model GetDIJobLogResponseBody = {
  log?: string(name='Log', description='The log.', example='>>>>>>>> stdout:n++++++++++++++++++executing sql: create database if not exists jindo_test location \\\\"oss://pangbei-hdfs/tmp/hive\\\\" n++n'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='1AFAE64E-D1BE-432B-A9****'),
}

model GetDIJobLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDIJobLogResponseBody(name='body'),
}

/**
 * @summary Obtains logs generated for a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDIJobLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDIJobLogResponse
 */
async function getDIJobLogWithOptions(request: GetDIJobLogRequest, runtime: Util.RuntimeOptions): GetDIJobLogResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDIJobLog',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains logs generated for a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDIJobLogRequest
 * @return GetDIJobLogResponse
 */
async function getDIJobLog(request: GetDIJobLogRequest): GetDIJobLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDIJobLogWithOptions(request, runtime);
}

model GetDataQualityAlertRuleRequest {
  id?: long(name='Id', description='The data quality monitoring alert rule ID.', example='113642'),
}

model GetDataQualityAlertRuleResponseBody = {
  dataQualityAlertRule?: {
    condition?: string(name='Condition', description='Alert conditions of the data quality monitoring alert rule.', example='results.any { r -> r.status == \\\\"fail\\\\" && r.rule.severity == \\\\"High\\\\" }'),
    id?: long(name='Id', description='The ID of the data quality monitoring alert rule.', example='21045'),
    notification?: {
      channels?: [ string ](name='Channels', description='In Channels, you can set both Email and Sms at the same time. In other cases, only one channel can be set.'),
      receivers?: [ 
        {
          extension?: string(name='Extension', description='Additional configurations required for the alert recipients. When ReceiverType is DingdingUrl, you can set `{"atAll":true}` to mention all members.', example='{"atAll":true}'),
          receiverType?: string(name='ReceiverType', description='The type of alert recipients.

*   ShiftSchedule
*   WebhookUrl
*   FeishuUrl
*   TaskOwner
*   WeixinUrl
*   DingdingUrl
*   DataQualityScanOwner
*   AliUid', example='TaskOwner'),
          receiverValues?: [ string ](name='ReceiverValues', description='The value of alert recipients.'),
        }
      ](name='Receivers', description='The alert recipients.'),
    }(name='Notification', description='Alert notification settings.'),
    projectId?: long(name='ProjectId', description='The project ID.', example='90912'),
    target?: {
      ids?: [ long ](name='Ids', description='The list of monitored target IDs.'),
      type?: string(name='Type', description='The type of the monitored target. Only `DataQualityScan` is supported.', example='DataQualityScan'),
    }(name='Target', description='The monitored target of the data quality monitoring alert rule.'),
  }(name='DataQualityAlertRule', description='Data quality monitoring alert rules.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc14115****159376359'),
}

model GetDataQualityAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataQualityAlertRuleResponseBody(name='body'),
}

/**
 * @summary Queries the details of a data quality monitoring and alerting rule by alert rule ID.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDataQualityAlertRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataQualityAlertRuleResponse
 */
async function getDataQualityAlertRuleWithOptions(request: GetDataQualityAlertRuleRequest, runtime: Util.RuntimeOptions): GetDataQualityAlertRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataQualityAlertRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details of a data quality monitoring and alerting rule by alert rule ID.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDataQualityAlertRuleRequest
 * @return GetDataQualityAlertRuleResponse
 */
async function getDataQualityAlertRule(request: GetDataQualityAlertRuleRequest): GetDataQualityAlertRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataQualityAlertRuleWithOptions(request, runtime);
}

model GetDataQualityEvaluationTaskRequest {
  id?: long(name='Id', description='The ID of the data quality monitor.', example='1006455182'),
}

model GetDataQualityEvaluationTaskResponseBody = {
  dataQualityEvaluationTask?: {
    dataSourceId?: long(name='DataSourceId', description='The ID of the data source used for the monitor.', example='45238'),
    description?: string(name='Description', description='The description of the monitor.', example='The description of the quality monitoring task.'),
    hooks?: [ 
      {
        condition?: string(name='Condition', description='The hook trigger condition. When this condition is met, the hook action is triggered. Only two conditional expressions are supported:

*   Specify only one group of rule strength type and rule check status, such as `${severity} == "High" AND ${status} == "Critical"`. In this expression, the hook trigger condition is met if severity is High and status is Critical.
*   Specify multiple groups of rule strength types and rule check status, such as `(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")`. In this expression, the hook trigger condition is met if severity is High and status is Critical, severity is Normal and status is Critical, or severity is Normal and status is Error. The enumeration of severity in a conditional expression is the same as the enumeration of severity in DataQualityRule. The enumeration of status in a conditional expression is the same as the enumeration of status in DataQualityResult.', example='(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")'),
        type?: string(name='Type', description='The hook type. Only one hook type is supported.

*   BlockTaskInstance: Blocks the running of scheduling tasks. A monitor is triggered by scheduling tasks. After a monitor finishes running, the monitor determines whether to block the running of scheduling tasks based on the hook condition.', example='BlockTaskInstance'),
      }
    ](name='Hooks', description='The hook.'),
    id?: long(name='Id', description='The ID of the data quality monitor.', example='2178'),
    name?: string(name='Name', description='The name of the monitor.

This parameter is required.', example='OpenAPI create a data quality monitoring test'),
    notifications?: {
      condition?: string(name='Condition', description='The notification trigger condition. When this condition is met, the alert notification is triggered. Only two conditional expressions are supported:

*   Specify only one group of rule strength type and rule check status, such as `${severity} == "High" AND ${status} == "Critical"`. In this expression, the hook trigger condition is met if severity is High and status is Critical.
*   Specify multiple groups of rule strength types and rule check status, such as `(${severity} == "High"AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")`. In this expression, the hook trigger condition is met if severity is High and status is Critical, severity is Normal and status is Critical, or severity is Normal and status is Error. The enumeration of severity in a conditional expression is the same as the enumeration of severity in DataQualityRule. The enumeration of status in a conditional expression is the same as the enumeration of status in DataQualityResult.', example='(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")'),
      notifications?: [ 
        {
          notificationChannels?: [ 
            {
              channels?: [ string ](name='Channels', description='The alert notification methods.'),
            }
          ](name='NotificationChannels', description='The alert notification methods.'),
          notificationReceivers?: [ 
            {
              extension?: string(name='Extension', description='The extended information.', example='{  "atAll": true }'),
              receiverType?: string(name='ReceiverType', description='The additional parameters that are required when alerts are sent. The parameters are JSON-formatted strings. The following keys are supported:

*   atAll: specifies that all members in a group are mentioned when alerts are sent by using DingTalk. This parameter is valid only if you set ReceiverType to DingdingUrl.

Valid values:

*   WebhookUrl
*   FeishuUrl
*   DingdingUrl
*   WeixinUrl
*   AliUid', example='DingdingUrl'),
              receiverValues?: [ string ](name='ReceiverValues', description='The alert recipients.'),
            }
          ](name='NotificationReceivers', description='The configurations of alert recipients.'),
        }
      ](name='Notifications', description='The configurations of alert notifications.'),
    }(name='Notifications', description='The configurations of alert notifications.'),
    projectId?: long(name='ProjectId', description='The workspace ID.', example='2626'),
    runtimeConf?: string(name='RuntimeConf', description='Extended configuration, JSON-formatted string, takes effect only for EMR-type data quality monitoring.

- queue: the yarn queue used when performing EMR data quality verification. The default queue is the queue configured for this project.
- sqlEngine: SQL engine used when performing EMR data verification
    - HIVE_ SQL
    - SPARK_ SQL', example='{ "queue": "default", "sqlEngine": "SPARK_SQL" }'),
    target?: {
      databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs. Valid values:

*   maxcompute
*   hologres
*   cdh
*   analyticdb_for_mysql
*   starrocks
*   emr
*   analyticdb_for_postgresql', example='maxcompute'),
      partitionSpec?: string(name='PartitionSpec', description='Data quality monitoring partition range settings.', example='pt=$[yyyymmdd-1]'),
      tableGuid?: string(name='TableGuid', description='The ID of the table in Data Map.', example='odps.meta_open_api_test_sz.test_partition_tbl'),
      type?: string(name='Type', description='The type of the monitoring object.

- Table: Table.', example='Table'),
    }(name='Target', description='The monitored object of the monitor.'),
    trigger?: {
      taskIds?: [ long ](name='TaskIds', description='The IDs of scheduling tasks. This parameter is valid only if you set Type to ByScheduledTaskInstance.'),
      type?: string(name='Type', description='The trigger type of the monitor. Valid values:

*   ByManual: The monitor is manually triggered.
*   ByScheduledTaskInstance: The monitor is triggered by associated scheduling tasks.
*   ByQualityNode: The monitor is triggered by created data quality monitoring nodes.', example='ByScheduledTaskInstance'),
    }(name='Trigger', description='The trigger configuration of the monitor.'),
  }(name='DataQualityEvaluationTask', description='The details of the monitor.'),
  requestId?: string(name='RequestId', description='Id of the request', example='SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF'),
}

model GetDataQualityEvaluationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataQualityEvaluationTaskResponseBody(name='body'),
}

/**
 * @summary Queries the details of a monitor.
 *
 * @param request GetDataQualityEvaluationTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataQualityEvaluationTaskResponse
 */
async function getDataQualityEvaluationTaskWithOptions(request: GetDataQualityEvaluationTaskRequest, runtime: Util.RuntimeOptions): GetDataQualityEvaluationTaskResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataQualityEvaluationTask',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details of a monitor.
 *
 * @param request GetDataQualityEvaluationTaskRequest
 * @return GetDataQualityEvaluationTaskResponse
 */
async function getDataQualityEvaluationTask(request: GetDataQualityEvaluationTaskRequest): GetDataQualityEvaluationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataQualityEvaluationTaskWithOptions(request, runtime);
}

model GetDataQualityEvaluationTaskInstanceRequest {
  id?: long(name='Id', description='The ID of the data quality monitoring instance.

This parameter is required.', example='7227550902'),
}

model GetDataQualityEvaluationTaskInstanceResponseBody = {
  dataQualityEvaluationTaskInstance?: {
    createTime?: long(name='CreateTime', description='The creation time.', example='1716344665000'),
    finishTime?: long(name='FinishTime', description='The end time of the instance.', example='1716344665000'),
    id?: long(name='Id', description='The ID of the data quality monitoring instance.', example='7234231689'),
    parameters?: string(name='Parameters', description='Data quality verification execution parameters in JSON format. The available keys are as follows:
- triggerTime: the millisecond timestamp of the trigger time. The baseline time of the $[yyyymmdd] expression in the data range of data quality monitoring. Required.', example='{ "triggerTime": 1733284062000 }'),
    projectId?: long(name='ProjectId', description='The ID of the workspace.', example='98330'),
    results?: [ 
      {
        createTime?: long(name='CreateTime'),
        details?: [ 
          {
            checkedValue?: string(name='CheckedValue'),
            referencedValue?: string(name='ReferencedValue'),
            status?: string(name='Status'),
          }
        ](name='Details'),
        id?: long(name='Id'),
        rule?: {
          checkingConfig?: {
            referencedSamplesFilter?: string(name='ReferencedSamplesFilter'),
            thresholds?: {
              critical?: {
                expression?: string(name='Expression'),
                operator?: string(name='Operator'),
                value?: string(name='Value'),
              }(name='Critical'),
              expected?: {
                expression?: string(name='Expression'),
                operator?: string(name='Operator'),
                value?: string(name='Value'),
              }(name='Expected'),
              warned?: {
                expression?: string(name='Expression'),
                operator?: string(name='Operator'),
                value?: string(name='Value'),
              }(name='Warned'),
            }(name='Thresholds'),
            type?: string(name='Type'),
          }(name='CheckingConfig'),
          description?: string(name='Description'),
          enabled?: boolean(name='Enabled'),
          errorHandlers?: [ 
            {
              errorDataFilter?: string(name='ErrorDataFilter'),
              type?: string(name='Type'),
            }
          ](name='ErrorHandlers'),
          id?: long(name='Id'),
          name?: string(name='Name'),
          projectId?: long(name='ProjectId'),
          samplingConfig?: {
            metric?: string(name='Metric'),
            metricParameters?: string(name='MetricParameters'),
            samplingFilter?: string(name='SamplingFilter'),
            settingConfig?: string(name='SettingConfig'),
          }(name='SamplingConfig'),
          severity?: string(name='Severity'),
          target?: {
            databaseType?: string(name='DatabaseType'),
            tableGuid?: string(name='TableGuid'),
            type?: string(name='Type'),
          }(name='Target'),
          templateCode?: string(name='TemplateCode'),
        }(name='Rule'),
        sample?: string(name='Sample'),
        status?: string(name='Status'),
        taskInstanceId?: long(name='TaskInstanceId'),
      }
    ](name='Results'),
    status?: string(name='Status', description='The status of the data quality monitoring instance.
- Running: Verifying
- Error: A rule verification Error occurred.
- Passed: all rules are verified
- Warned: normal alarm threshold triggered by rules
- Critical: Threshold for serious alerts triggered by rules', example='Passed'),
    task?: {
      description?: string(name='Description', description='The description of the monitor.', example='OpenAPI quality monitoring test'),
      hooks?: [ 
        {
          condition?: string(name='Condition', description='The hook trigger condition. When this condition is met, the hook action is triggered. Only two conditional expressions are supported:

*   Specify only one group of rule strength type and rule check status, such as `${severity} == "High" AND ${status} == "Critical"`. In this expression, the hook trigger condition is met if severity is High and status is Critical.
*   Specify multiple groups of rule strength types and rule check status, such as `(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")`. In this expression, the hook trigger condition is met if severity is High and status is Critical, severity is Normal and status is Critical, or severity is Normal and status is Error. The enumeration of severity in a conditional expression is the same as the enumeration of severity in DataQualityRule. The enumeration of status in a conditional expression is the same as the enumeration of status in DataQualityResult.', example='(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")'),
          type?: string(name='Type', description='Hook type. Currently, only one type is supported:

- BlockTaskInstance: the blocking scheduling task continues to run. Data quality monitoring is triggered by the scheduling task. After the data quality monitoring is completed, the Hook.Condition is used to determine whether the blocking scheduling task continues to run.', example='BlockTaskInstance'),
        }
      ](name='Hooks', description='The hook.'),
      id?: long(name='Id', description='The ID of the data quality monitor.', example='28544990'),
      name?: string(name='Name', description='The name of the monitor.', example='Data quality OpenAPI monitoring test'),
      notifications?: {
        condition?: string(name='Condition', description='The notification trigger condition. When this condition is met, the alert notification is triggered. Only two conditional expressions are supported:

*   Specify only one group of rule strength type and rule check status, such as `${severity} == "High" AND ${status} == "Critical"`. In this expression, the hook trigger condition is met if severity is High and status is Critical.
*   Specify multiple groups of rule strength types and rule check status, such as `(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")`. In this expression, the hook trigger condition is met if severity is High and status is Critical, severity is Normal and status is Critical, or severity is Normal and status is Error. The enumeration of severity in a conditional expression is the same as the enumeration of severity in DataQualityRule. The enumeration of status in a conditional expression is the same as the enumeration of status in DataQualityResult.', example='${severity} == "High" AND ${status} == "Critical"'),
        notifications?: [ 
          {
            notificationChannels?: [ 
              {
                channels?: [ string ](name='Channels', description='The notification method.'),
              }
            ](name='NotificationChannels', description='The notification method.'),
            notificationReceivers?: [ 
              {
                extension?: string(name='Extension', description='Additional parameter settings for sending alerts in json format. The supported keys are as follows:

- atAll: when sending DingTalk alerts, do you need to @ everyone in the group. It takes effect when ReceiverType is DingdingUrl.', example='{ "atAll": true }'),
                receiverType?: string(name='ReceiverType', description='The type of alert recipient.', example='DingdingUrl'),
                receiverValues?: [ string ](name='ReceiverValues', description='The recipient of the alert.'),
              }
            ](name='NotificationReceivers', description='The value of the receiver.'),
          }
        ](name='Notifications', description='The alert notification methods.'),
      }(name='Notifications', description='The configurations of alert notifications.'),
      projectId?: long(name='ProjectId', description='The ID of the workspace.', example='20629'),
      runtimeConf?: string(name='RuntimeConf', description='Extended configuration, JSON-formatted string, takes effect only for EMR-type data quality monitoring.

- queue: the yarn queue used when performing EMR data quality verification. The default queue is the queue configured for this project.
- sqlEngine: SQL engine used when performing EMR data verification
  - HIVE_ SQL
  - SPARK_ SQL', example='{ "queue": "default" }'),
      target?: {
        databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs.', example='maxcompute'),
        partitionSpec?: string(name='PartitionSpec', description='The partition range monitored.', example='pt=$[yyyymmdd-1]'),
        tableGuid?: string(name='TableGuid', description='The unique ID of the table in the data map.', example='odps.api_trace.ods_d_api_log'),
        type?: string(name='Type', description='The type of the monitoring object.
- Table: Table', example='Table'),
      }(name='Target', description='The monitored object of the monitor.'),
      trigger?: {
        taskIds?: [ long ](name='TaskIds', description='The Id list of the scheduled task, which is valid when the Type is ByScheduledTaskInstance.'),
        type?: string(name='Type', description='The trigger type of the monitor. Valid values:

*   ByManual (default): The monitor is manually triggered.
*   ByScheduledTaskInstance: The monitor is triggered by the associated scheduling tasks.', example='ByScheduledTaskInstance'),
      }(name='Trigger', description='The trigger configuration of the monitor.'),
    }(name='Task', description='The monitor.'),
    triggerContext?: string(name='TriggerContext', description='The context information when the instance is triggered, in JSON format. The possible keys are as follows:
- TriggerClient: the trigger source of the data quality monitoring instance, such as CWF2 (scheduling system), may be added later.
- TriggerClientId: associated with a specific business resource in the source system. For example, if TriggerClient is CWF2, the ID of the scheduling task is recorded here.', example='{ "triggerClient": "CWF2", "triggerClientId": 70001238945 }'),
  }(name='DataQualityEvaluationTaskInstance', description='The details of the monitor instance.'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model GetDataQualityEvaluationTaskInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataQualityEvaluationTaskInstanceResponseBody(name='body'),
}

/**
 * @summary Queries the details of a monitor instance.
 *
 * @param request GetDataQualityEvaluationTaskInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataQualityEvaluationTaskInstanceResponse
 */
async function getDataQualityEvaluationTaskInstanceWithOptions(request: GetDataQualityEvaluationTaskInstanceRequest, runtime: Util.RuntimeOptions): GetDataQualityEvaluationTaskInstanceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataQualityEvaluationTaskInstance',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details of a monitor instance.
 *
 * @param request GetDataQualityEvaluationTaskInstanceRequest
 * @return GetDataQualityEvaluationTaskInstanceResponse
 */
async function getDataQualityEvaluationTaskInstance(request: GetDataQualityEvaluationTaskInstanceRequest): GetDataQualityEvaluationTaskInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataQualityEvaluationTaskInstanceWithOptions(request, runtime);
}

model GetDataQualityRuleRequest {
  id?: long(name='Id', description='The rule ID.

This parameter is required.', example='19715'),
}

model GetDataQualityRuleResponseBody = {
  dataQualityRule?: {
    checkingConfig?: {
      referencedSamplesFilter?: string(name='ReferencedSamplesFilter', description='The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference values. In this example, an expression is used to indicate the query method of referenced samples.', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
      thresholds?: {
        critical?: {
          expression?: string(name='Expression', description='The threshold expression.', example='$checkValue > 0.05'),
          operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
          value?: string(name='Value', description='The threshold value.', example='100.0'),
        }(name='Critical', description='The threshold settings for critical alerts.'),
        expected?: {
          expression?: string(name='Expression', description='The threshold expression.', example='$checkValue <= 0.01'),
          operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
          value?: string(name='Value', description='The threshold value.', example='100.0'),
        }(name='Expected', description='The expected threshold setting.'),
        warned?: {
          expression?: string(name='Expression', description='The threshold expression.', example='$checkValue > 0.01'),
          operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
          value?: string(name='Value', description='The threshold value.', example='100.0'),
        }(name='Warned', description='The threshold settings for normal alerts.'),
      }(name='Thresholds', description='The threshold settings.'),
      type?: string(name='Type', description='The threshold calculation method. Valid values:

*   Fixed
*   Fluctation
*   FluctationDiscreate
*   Auto
*   Average
*   Variance', example='Fixed'),
    }(name='CheckingConfig', description='The check settings for sample data.'),
    description?: string(name='Description', description='The description of the rule. The description can be up to 500 characters in length.', example='this is a odps _sql task'),
    enabled?: boolean(name='Enabled', description='Indicates whether the rule is enabled.', example='true'),
    errorHandlers?: [ 
      {
        errorDataFilter?: string(name='ErrorDataFilter', description='The SQL statement that is used to filter failed tasks. If you define the rule by using custom SQL statements, you must specify an SQL statement to filter failed tasks.', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
        type?: string(name='Type', description='Processor type:
- SaveErrorData', example='SaveErrorData'),
      }
    ](name='ErrorHandlers', description='The operations that you can perform after the rule-based check fails.'),
    id?: long(name='Id', description='The rule ID.', example='16033'),
    name?: string(name='Name', description='The rule name.', example='The table cannot be empty.'),
    projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='1948'),
    samplingConfig?: {
      metric?: string(name='Metric', description='The metrics used for sampling. Valid values:

*   Count: the number of rows in the table.
*   Min: the minimum value of the field.
*   Max: the maximum value of the field.
*   Avg: the average value of the field.
*   DistinctCount: the number of unique values of the field after deduplication.
*   DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
*   DuplicatedCount: the number of duplicated values of the field.
*   DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
*   TableSize: the table size.
*   NullValueCount: the number of rows in which the field value is null.
*   NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
*   GroupCount: the field value and the number of rows for each field value.
*   CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
*   CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
*   UserDefinedSql: indicates that data is sampled by executing custom SQL statements.', example='Max'),
      metricParameters?: string(name='MetricParameters', description='The parameters required for sampling.', example='{ "Columns": [ "id", "name" ] , "SQL": "select count(1) from table;"}'),
      samplingFilter?: string(name='SamplingFilter', description='The statements that are used to filter unnecessary data during sampling. The statements can be up to 16,777,215 characters in length.', example='id IS NULL'),
      settingConfig?: string(name='SettingConfig', description='The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.', example='SET odps.sql.udf.timeout=600s; 
SET odps.sql.python.version=cp27;'),
    }(name='SamplingConfig', description='The sampling settings.'),
    severity?: string(name='Severity', description='Rule for the business level (corresponding to the strong and weak rules on the page), optional enumeration value:
- Normal
- High', example='High'),
    target?: {
      databaseType?: string(name='DatabaseType', description='The dataset of the table type. The database type to which the table belongs.
- maxcompute
- emr
- cdh
- hologres
- analyticdb_for_postgresql
- analyticdb_for_mysql
- starrocks', example='maxcompute'),
      partitionSpec?: string(name='PartitionSpec', description='The configuration of the partitioned table.', example='ds=$[yyyymmdd-1]'),
      tableGuid?: string(name='TableGuid', description='The ID of the table that is limited by the rule in Data Map.', example='odps.unit_test.tb_unit_test'),
      type?: string(name='Type', description='Monitoring object type

- Table', example='Table'),
    }(name='Target', description='The monitored object of the rule.'),
    templateCode?: string(name='TemplateCode', description='The ID of the template used by the rule.', example='system::user_defined'),
  }(name='DataQualityRule', description='The information about the rule.'),
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
}

model GetDataQualityRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataQualityRuleResponseBody(name='body'),
}

/**
 * @summary Queries the information about a data quality monitoring rule.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDataQualityRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataQualityRuleResponse
 */
async function getDataQualityRuleWithOptions(request: GetDataQualityRuleRequest, runtime: Util.RuntimeOptions): GetDataQualityRuleResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataQualityRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a data quality monitoring rule.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDataQualityRuleRequest
 * @return GetDataQualityRuleResponse
 */
async function getDataQualityRule(request: GetDataQualityRuleRequest): GetDataQualityRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataQualityRuleWithOptions(request, runtime);
}

model GetDataQualityRuleTemplateRequest {
  code?: string(name='Code', description='The code for the template.

This parameter is required.', example='USER_DEFINED:123'),
}

model GetDataQualityRuleTemplateResponseBody = {
  dataQualityRuleTemplate?: {
    checkingConfig?: {
      referencedSamplesFilter?: string(name='ReferencedSamplesFilter', description='The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference samples and perform aggregate operations on the reference values. In this example, an expression is used to indicate the query method of referenced samples.', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
      type?: string(name='Type', description='The threshold calculation method. Valid values:

*   Fixed
*   Fluctation
*   FluctationDiscreate
*   Auto
*   Average
*   Variance', example='Fixed'),
    }(name='CheckingConfig', description='The check settings for sample data.'),
    code?: string(name='Code', description='The code for the template.', example='USER_DEFINED:123'),
    directoryPath?: string(name='DirectoryPath', description='The directory in which the template is stored. Slashes (/) are used to separate directory levels. The name of each directory level can be up to 1,024 characters in length. It cannot contain whitespace characters or slashes (/).', example='/ods/order_data'),
    name?: string(name='Name', description='The name of the template. The name can be up to 512 characters in length and can contain digits, letters, and punctuation marks.', example='Table row Count Verification'),
    projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='4020'),
    samplingConfig?: {
      metric?: string(name='Metric', description='The metrics used for sampling. Valid values:

*   Count: the number of rows in the table.
*   Min: the minimum value of the field.
*   Max: the maximum value of the field.
*   Avg: the average value of the field.
*   DistinctCount: the number of unique values of the field after deduplication.
*   DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
*   DuplicatedCount: the number of duplicated values of the field.
*   DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
*   TableSize: the table size.
*   NullValueCount: the number of rows in which the field value is null.
*   NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
*   GroupCount: the field value and the number of rows for each field value.
*   CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
*   CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
*   UserDefinedSql: indicates that data is sampled by executing custom SQL statements.', example='Max'),
      metricParameters?: string(name='MetricParameters', description='The parameters required for sampling.', example='{"SQL": "select count(1) from table;"}'),
      settingConfig?: string(name='SettingConfig', description='The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.', example='SET odps.sql.udf.timeout=600s; 
SET odps.sql.python.version=cp27;'),
    }(name='SamplingConfig', description='The sampling settings.'),
    visibleScope?: string(name='VisibleScope', description='Available range of templates:
- Tenant: all tenants are available
- Project: only available in the current Project', example='Project'),
  }(name='DataQualityRuleTemplate', description='The information about the template.'),
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
}

model GetDataQualityRuleTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataQualityRuleTemplateResponseBody(name='body'),
}

/**
 * @summary Queries the information about a data quality monitoring rule template.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDataQualityRuleTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataQualityRuleTemplateResponse
 */
async function getDataQualityRuleTemplateWithOptions(request: GetDataQualityRuleTemplateRequest, runtime: Util.RuntimeOptions): GetDataQualityRuleTemplateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataQualityRuleTemplate',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a data quality monitoring rule template.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDataQualityRuleTemplateRequest
 * @return GetDataQualityRuleTemplateResponse
 */
async function getDataQualityRuleTemplate(request: GetDataQualityRuleTemplateRequest): GetDataQualityRuleTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataQualityRuleTemplateWithOptions(request, runtime);
}

model GetDataQualityScanRequest {
  id?: long(name='Id', description='The ID of the monitor.', example='10001'),
}

model GetDataQualityScanResponseBody = {
  dataQualityScan?: {
    computeResource?: {
      envType?: string(name='EnvType', description='The workspace environment to which the compute engine belongs.

Valid values:

*   Prod: production environment .
*   Dev: development environment.', example='Prod'),
      name?: string(name='Name', description='The name of the compute engine, which is a unique identifier.', example='polardb_to_holo'),
      runtime?: {
        engine?: string(name='Engine', description='The type of the compute engine. Only EMR compute engines support these settings.

Valid values:

*   Hive: Hive SQL
*   Spark: Spark SQL
*   Kyuubi', example='Hive'),
        hiveConf?: map[string]any(name='HiveConf', description='Additional Hive engine parameters. Currently, only the mapreduce.job.queuename parameter is supported.', example='mapreduce.job.queuename=dq_queue'),
        sparkConf?: map[string]any(name='SparkConf', description='Additional Spark engine parameters. Currently, only the spark.yarn.queue parameter is supported.', example='spark.yarn.queue=dq_queue'),
      }(name='Runtime', description='More settings for data quality monitor at runtime.'),
    }(name='ComputeResource', description='The compute engine used at runtime. Optional. If not specified, the data source defined in the Spec is used.'),
    createTime?: long(name='CreateTime', description='The creation time of the data quality monitor.', example='1731550150000'),
    createUser?: string(name='CreateUser', description='The ID of the user who creates the data quality monitor.', example='2374924198591250'),
    description?: string(name='Description', description='The data quality monitor description.', example='aily data quality scanning of ods tables.'),
    hooks?: [ 
      {
        condition?: string(name='Condition', description='The Hook trigger condition. The hook will run if the condition is met. Currently, only one type of expression syntax is supported:

*   You can specify multiple combinations of rule severity levels and validation statuses using an expression such as `results.any { r -> r.status == \\\\"Fail\\\\" && r.rule.severity == \\\\"Normal\\\\" || r.status == \\\\"Error\\\\" && r.rule.severity == \\\\"High\\\\" || r.status == \\\\"Warn\\\\" && r.rule.severity == \\\\"High\\\\" }`. This expression means the condition is met if any executed rule has a result of Fail with severity Normal, Error with severity High, or Warn with severity High. In the condition expression, the values of severity and status are predefined enums. The values of severity must match those defined in the Spec, and the values of status must match those in DataQualityResult.', example='results.any { r -> r.status == \\\\"Fail\\\\" && r.rule.severity == \\\\"Normal\\\\" || r.status == \\\\"Error\\\\" && r.rule.severity == \\\\"High\\\\" || r.status == \\\\"Warn\\\\" && r.rule.severity == \\\\"High\\\\" }'),
        type?: string(name='Type', description='The type of the Hook.

Valid values:

*   BlockTaskInstance: BlockTaskInstance: Blocks the scheduling of the task instance.', example='BlockTaskInstance'),
      }
    ](name='Hooks', description='The Hook configurations after the data quality monitoring run ends.'),
    id?: long(name='Id', description='The data quality monitoring ID.', example='10001'),
    modifyTime?: long(name='ModifyTime', description='Last modified time of the data quality monitor.', example='1731550150000'),
    modifyUser?: string(name='ModifyUser', description='The ID of the user who last modifies the data quality monitor.', example='23482597582479'),
    name?: string(name='Name', description='The data quality monitor name.', example='data_quality_scan_001'),
    owner?: string(name='Owner', description='The ID of the user who owns the data quality monitor.', example='231263586109857423'),
    parameters?: [ 
      {
        name?: string(name='Name', description='The parameter value.', example='e2e_autolabel'),
        value?: string(name='Value', description='The parameter name.', example='10'),
      }
    ](name='Parameters', description='The definition of execution parameters for the data quality monitor.'),
    projectId?: long(name='ProjectId', description='The workspace ID where the data quality monitor resides. You can obtain the workspace ID by calling the [ListProjects](https://help.aliyun.com/document_detail/2780068.html) operation.', example='101'),
    runtimeResource?: {
      cu?: float(name='Cu', description='Reserved compute units (CU) for the resource group.', example='10'),
      id?: string(name='Id', description='The resource group ID.', example='122878'),
      image?: string(name='Image', description='The image ID used in the runtime configuration.', example='hp-tlp-e2e-repo-registry-vpc.cn-heyuan-acdr-1.cr.aliyuncs.com/hp-service/worker:9b28b6d-202506091008'),
    }(name='RuntimeResource', description='The resource group used during the running of the data quality monitor.'),
    spec?: string(name='Spec', description='Spec code for the content of the data quality monitoring.', example='{
    "datasets": [
        {
            "type": "Table",
            "dataSource": {
                "name": "odps_first",
                "envType": "Prod"
            },
            "tables": [
                "ods_d_user_info"
            ],
            "filter": "pt = $[yyyymmdd-1]"
        }
    ],
    "rules": [
        {
            "assertion": "row_count > 0"
        }, {
            "templateId": "SYSTEM:field:null_value:fixed",
            "pass": "when = 0",
            "name": "The id cannot be empty.",
            "severity": "High",
             "identity": "a-customized-data-quality-rule-uuid"
        }
    ]
}'),
    trigger?: {
      taskIds?: [ long ](name='TaskIds', description='If the trigger mode is set to BySchedule, the scheduling task ID must be specified.'),
      type?: string(name='Type', description='The trigger mode of the monitoring task.

Valid values:

*   ByManual: Manual trigger. This is the default setting.
*   BySchedule: Triggered by a scheduled task instance.', example='BySchedule'),
    }(name='Trigger', description='The trigger configurations of the data quality monitoring task.'),
  }(name='DataQualityScan', description='Data quality monitoring details.'),
  requestId?: string(name='RequestId', description='Id of the request', example='204EAF68-CCE3-5112-8DA0-E7A60F02XXXX'),
}

model GetDataQualityScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataQualityScanResponseBody(name='body'),
}

/**
 * @summary Gets data quality monitoring details.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDataQualityScanRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataQualityScanResponse
 */
async function getDataQualityScanWithOptions(request: GetDataQualityScanRequest, runtime: Util.RuntimeOptions): GetDataQualityScanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataQualityScan',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Gets data quality monitoring details.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDataQualityScanRequest
 * @return GetDataQualityScanResponse
 */
async function getDataQualityScan(request: GetDataQualityScanRequest): GetDataQualityScanResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataQualityScanWithOptions(request, runtime);
}

model GetDataQualityScanRunRequest {
  id?: long(name='Id', description='The data quality monitoring run record ID.', example='1006059507'),
}

model GetDataQualityScanRunResponseBody = {
  dataQualityScanRun?: {
    createTime?: long(name='CreateTime', description='The time when the data quality monitor starts running.', example='1706247622000'),
    finishTime?: long(name='FinishTime', description='The time when the data quality monitor stops.', example='1706247622000'),
    id?: long(name='Id', description='The running record ID.', example='1016440997'),
    parameters?: [ 
      {
        name?: string(name='Name', description='The parameter name.', example='dt'),
        value?: string(name='Value', description='The parameter value.', example='$[yyyy-mm-dd-1]'),
      }
    ](name='Parameters', description='The parameter settings used during the actual running.'),
    results?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the validation result is generated.', example='1725506795000'),
        details?: [ 
          {
            checkValue?: string(name='CheckValue', description='The final value used for comparison with the threshold.', example='100.0'),
            referenceValue?: string(name='ReferenceValue', description='The reference sample used as the baseline for calculating the CheckedValue.', example='0.0'),
            status?: string(name='Status', description='The final comparison result status.

*   Pass
*   Error
*   Warn
*   Fail', example='Fail'),
          }
        ](name='Details', description='The information about the data quality check.'),
        rule?: string(name='Rule', description='The snapshot of the rule Spec at the start of the validation.', example='{
    "templateId": "SYSTEM:field:null_value:fixed",
    "pass": "when = 0",
    "name": "The id cannot be empty.",
    "severity": "High",
    "identity": "a-customized-data-quality-rule-uuid"
}'),
        sample?: string(name='Sample', description='The sample value used in the validation.', example='{
  "value": "100.0"
}'),
        status?: string(name='Status', description='The validation result status.

*   Pass
*   Running
*   Error
*   Warn
*   Fail', example='Fail'),
      }
    ](name='Results', description='The validation results of each rule.'),
    scan?: {
      computeResource?: {
        envType?: string(name='EnvType', description='The workspace environment to which the compute engine belongs.

*   Prod
*   Dev', example='Dev'),
        name?: string(name='Name', description='The name of the computing resource, which corresponds to the Name attribute in the ComputeResource data structure of the computing resource API.', example='emr_cluster_001'),
        runtime?: {
          engine?: string(name='Engine', description='The type of the compute engine. Only EMR compute engines support these settings.

*   Hive
*   Spark
*   Kyuubi', example='Hive'),
          hiveConf?: map[string]any(name='HiveConf', description='Additional parameters for the Hive engine. Currently, only mapreduce.job.queuename is supported to specify the queue.', example='mapreduce.job.queuename=dq_queue'),
          sparkConf?: map[string]any(name='SparkConf', description='Additional parameters for the Spark engine. Currently, only spark.yarn.queue is supported to specify the queue.', example='spark.yarn.queue=dq_queue'),
        }(name='Runtime', description='The additional runtime settings of the data quality monitor.'),
      }(name='ComputeResource', description='The computing resource settings of the data quality monitor.'),
      createTime?: long(name='CreateTime', description='The creation time of the data quality monitor.', example='1706247622000'),
      createUser?: string(name='CreateUser', description='The creator of the data quality monitor.', example='7892346529452'),
      description?: string(name='Description', description='The description of the data quality validation task. Maximum length: 65,535 characters.', example='This is a hourly run data quality evaluation plan.'),
      hooks?: [ 
        {
          condition?: string(name='Condition', description='The hook trigger condition. Currently, only one type of expression syntax is supported:

*   Specify combinations of severity levels and validation statuses for multiple rules, such as `results.any { r -> r.status == \\\\"Fail\\\\" && r.rule.severity == \\\\"Normal\\\\" || r.status == \\\\"Error\\\\" && r.rule.severity == \\\\"High\\\\" || r.status == \\\\"Warn\\\\" && r.rule.severity == \\\\"High\\\\" }`. This means the hook is triggered if any executed rule has Fail with Normal severity, Error with High severity, or Warn with High severity. In the conditional expression, the severity value matches that in the Spec code, and the status value matches that in DataQualityResult.', example='results.any { r -> r.status == \\\\"fail\\\\" && r.rule.severity == \\\\"High\\\\" }'),
          type?: string(name='Type', description='The type of the hook.

*   BlockTaskInstance', example='BlockTaskInstance'),
        }
      ](name='Hooks', description='The hook configurations after the data quality monitor stops.'),
      id?: long(name='Id', description='The data quality monitor ID.', example='21077'),
      modifyTime?: long(name='ModifyTime', description='The last update time of the data quality monitor.', example='1706247622000'),
      modifyUser?: string(name='ModifyUser', description='The last updater of the data quality monitor.', example='7892346529452'),
      name?: string(name='Name', description='The name of the data quality validation task. It can contain digits, letters, Chinese characters, and both half-width and full-width punctuation marks, with a maximum length of 255 characters.', example='Hourly partition quality monitoring'),
      owner?: string(name='Owner', description='The owner of the data quality monitor.', example='7892346529452'),
      parameters?: [ 
        {
          name?: string(name='Name', description='The parameter name.', example='dt'),
          value?: string(name='Value', description='The parameter value.', example='$[yyyy-mm-dd-1]'),
        }
      ](name='Parameters', description='The parameter settings of the data quality monitor.'),
      projectId?: long(name='ProjectId', description='The project ID.', example='164024'),
      runtimeResource?: {
        cu?: float(name='Cu', description='Reserved CUs for the resource group.', example='1'),
        id?: string(name='Id', description='The resource group ID.', example='60597'),
        image?: string(name='Image', description='The image ID of the run configuration.', example='i-xxxx'),
      }(name='RuntimeResource', description='The resource group used for running the data quality monitor.'),
      spec?: string(name='Spec', description='The data quality monitor Spec. For more information, see [Data quality Spec configuration description](https://help.aliyun.com/document_detail/2963394.html).', example='{
    "datasets": [
        {
            "type": "Table",
            "dataSource": {
                "name": "odps_first",
                "envType": "Prod"
            },
            "tables": [
                "ods_d_user_info"
            ],
            "filter": "pt = $[yyyymmdd-1]"
        }
    ],
    "rules": [
        {
            "assertion": "row_count > 0"
        }, {
            "templateId": "SYSTEM:field:null_value:fixed",
            "pass": "when = 0",
            "name": "The id cannot be empty.",
            "severity": "High",
             "identity": "a-customized-data-quality-rule-uuid"
        }
    ]
}'),
      trigger?: {
        taskIds?: [ long ](name='TaskIds', description='If the trigger mode is set to BySchedule, the scheduling task ID must be specified.'),
        type?: string(name='Type', description='The trigger method of the data quality monitor.

*   ByManual
*   BySchedule', example='BySchedule'),
      }(name='Trigger', description='The trigger configurations of the data quality monitor.'),
    }(name='Scan', description='The snapshot of the data quality monitor configuration at the start of the validation.'),
    status?: string(name='Status', description='The current running status.

*   Pass
*   Running
*   Error
*   Warn
*   Fail', example='Fail'),
  }(name='DataQualityScanRun', description='Data quality monitoring running records.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc14115****159376359'),
}

model GetDataQualityScanRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataQualityScanRunResponseBody(name='body'),
}

/**
 * @summary Creates a data quality monitoring run instance.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDataQualityScanRunRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataQualityScanRunResponse
 */
async function getDataQualityScanRunWithOptions(request: GetDataQualityScanRunRequest, runtime: Util.RuntimeOptions): GetDataQualityScanRunResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataQualityScanRun',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a data quality monitoring run instance.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDataQualityScanRunRequest
 * @return GetDataQualityScanRunResponse
 */
async function getDataQualityScanRun(request: GetDataQualityScanRunRequest): GetDataQualityScanRunResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataQualityScanRunWithOptions(request, runtime);
}

model GetDataQualityScanRunLogRequest {
  id?: long(name='Id', description='The ID of the data quality monitor run record.', example='10001'),
  offset?: long(name='Offset', description='The starting position of the log, in bytes, relative to the beginning of the file. Each query returns a maximum of 512 KB of content.', example='200'),
}

model GetDataQualityScanRunLogResponseBody = {
  logSegment?: {
    log?: string(name='Log', description='The task log.', example='Running on Serverless_resource_group_xxxxx
Begin to check rule ***'),
    nextOffset?: long(name='NextOffset', description='The starting offset of the next log segment. A value of -1 indicates that all logs have been read.', example='512000'),
  }(name='LogSegment', description='The task log information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc14115***159376359'),
}

model GetDataQualityScanRunLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataQualityScanRunLogResponseBody(name='body'),
}

/**
 * @summary Queries the log of a specific task instance that monitors data quality.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDataQualityScanRunLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataQualityScanRunLogResponse
 */
async function getDataQualityScanRunLogWithOptions(request: GetDataQualityScanRunLogRequest, runtime: Util.RuntimeOptions): GetDataQualityScanRunLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.offset)) {
    query['Offset'] = request.offset;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataQualityScanRunLog',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the log of a specific task instance that monitors data quality.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDataQualityScanRunLogRequest
 * @return GetDataQualityScanRunLogResponse
 */
async function getDataQualityScanRunLog(request: GetDataQualityScanRunLogRequest): GetDataQualityScanRunLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataQualityScanRunLogWithOptions(request, runtime);
}

model GetDataQualityTemplateRequest {
  id?: string(name='Id', description='The data quality rule template ID.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX'),
}

model GetDataQualityTemplateResponseBody = {
  dataQualityTemplate?: {
    createTime?: long(name='CreateTime', description='The time when the data quality rule template was created.', example='1606724043000'),
    createUser?: string(name='CreateUser', description='The creator of the data quality rule template.', example='238428342865'),
    id?: string(name='Id', description='The ID of the data quality rule template.', example='10001'),
    modifyTime?: long(name='ModifyTime', description='The time when the data quality rule template was updated.', example='1606724043000'),
    modifyUser?: string(name='ModifyUser', description='The last updater of the data quality rule template.', example='238428342865'),
    owner?: string(name='Owner', description='The owner of the data quality rule template.', example='238428342865'),
    projectId?: long(name='ProjectId', description='The project ID.', example='97535'),
    spec?: string(name='Spec', description='Specific configurations of the data quality rule template. For more information, see [Data quality Spec configuration description](~2963394~).', example='{
    "assertion": "anomaly detection fro id_not_null_cnt",
    "id_not_null_cnt": {
        "query": "SELECT COUNT(*) AS cnt FROM ${tableName} WHERE dt = \\\\"$[yyyymmdd-1]\\\\";"
    },
    "identity": "819cf1f8-29be-4f94-a9d0-c5c06c0c3d2a"
}'),
  }(name='DataQualityTemplate', description='The data quality rule template.'),
  requestId?: string(name='RequestId', description='The API request ID, which is generated as a UUID.', example='0bc14115***159376359'),
}

model GetDataQualityTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataQualityTemplateResponseBody(name='body'),
}

/**
 * @summary Queries the details of a data quality rule template by ID.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDataQualityTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataQualityTemplateResponse
 */
async function getDataQualityTemplateWithOptions(request: GetDataQualityTemplateRequest, runtime: Util.RuntimeOptions): GetDataQualityTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataQualityTemplate',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details of a data quality rule template by ID.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDataQualityTemplateRequest
 * @return GetDataQualityTemplateResponse
 */
async function getDataQualityTemplate(request: GetDataQualityTemplateRequest): GetDataQualityTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataQualityTemplateWithOptions(request, runtime);
}

model GetDataSourceRequest {
  id?: long(name='Id', description='The data source ID.

This parameter is required.', example='16035'),
}

model GetDataSourceResponseBody = {
  dataSource?: {
    connectionProperties?: any(name='ConnectionProperties', description='The connection configurations of the data source, including the connection address, access identity, and environment information. The envType parameter specifies the environment in which the data source is used. Valid values of the envType parameter:

*   Dev: development environment
*   Prod: production environment

The parameters that you need to configure for the data source vary based on the mode in which the data source is added. For more information, see [Data source connection information (ConnectionProperties)](https://help.aliyun.com/document_detail/2852465.html).', example='{
	"envType": "Prod",
	"regionId": "cn-beijing",
    "instanceId": "hgprecn-cn-x0r3oun4k001",
    "database": "testdb",
    "securityProtocol": "authTypeNone",
    "authType": "Executor",
    "authIdentity": "1107550004253538"
}'),
    connectionPropertiesMode?: string(name='ConnectionPropertiesMode', description='The mode in which the data source is added. The mode varies based on the data source type. Valid values:

*   InstanceMode: instance mode
*   UrlMode: connection string mode
*   CdhMode: CDH cluster mode', example='UrlMode'),
    createTime?: long(name='CreateTime', description='The time when the data source was added. This value is a UNIX timestamp.', example='1698286929333'),
    createUser?: string(name='CreateUser', description='The ID of the user who adds the data source.', example='1107550004253538'),
    description?: string(name='Description', description='The description of the data source.', example='test'),
    id?: long(name='Id', description='The data source ID.', example='16738'),
    modifyTime?: long(name='ModifyTime', description='The time when the data source was last modified. This value is a UNIX timestamp.', example='1698286929333'),
    modifyUser?: string(name='ModifyUser', description='The ID of the user who modifies the data source.', example='1107550004253538'),
    name?: string(name='Name', description='The name of the data source.', example='test'),
    projectId?: long(name='ProjectId', description='The ID of the workspace with which the data source is associated.', example='52660'),
    qualifiedName?: string(name='QualifiedName', description='The unique business key of the data source. For example, the unique business key of a Hologres data source is in the `${tenantOwnerId}:${regionId}:${type}:${instanceId}:${database}` format.', example='1107550004253538:cn-beijing:holo:hgprecn-cn-x0r3oun4k001:testdb'),
    type?: string(name='Type', description='The type of the data source.', example='hologres'),
  }(name='DataSource', description='The information about the data source.'),
  requestId?: string(name='RequestId', description='The request ID.', example='9252F32F-D855-549E-8898-61CF5A733050'),
}

model GetDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataSourceResponseBody(name='body'),
}

/**
 * @summary Queries a data source by ID.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Deployment, Development, Project Owner, and O\\&M
 *
 * @param request GetDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataSourceResponse
 */
async function getDataSourceWithOptions(request: GetDataSourceRequest, runtime: Util.RuntimeOptions): GetDataSourceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDataSource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a data source by ID.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Deployment, Development, Project Owner, and O\\&M
 *
 * @param request GetDataSourceRequest
 * @return GetDataSourceResponse
 */
async function getDataSource(request: GetDataSourceRequest): GetDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataSourceWithOptions(request, runtime);
}

model GetDatabaseRequest {
  id?: string(name='Id', description='Database entity ID. You can refer to the response of the ListDatabases operation and [the description of metadata entity concepts.](https://help.aliyun.com/document_detail/2880092.html)

The format is `${EntityType}:${Instance ID or encoded URL}:${Catalog identifier}:${Database name}`. Use empty strings as placeholders for non-existent levels.

>  For StarRocks, the catalog identifier is the catalog name. For DLF, the catalog identifier is the catalog ID. For other types, catalog hierarchy is not supported, and an empty string can be used as a placeholder.

Examples of common ID formats

`dlf-database::catalog_id:database_name`

`holo-database:instance_id::database_name`

`mysql-database:(instance_id|encoded_jdbc_url)::database_name`

>  Parameter descriptions\\\\
`catalog_id`: The DLF catalog ID.\\\\
`instance_id`: The instance ID, required for a data source registered in instance mode.\\\\
`encoded_jdbc_url`: The JDBC connection string that has been URL encoded. This parameter is required for the data source registered via a connection string.\\\\
`database_name`: The database name.

This parameter is required.', example='mysql-database:rm-abc123xxx::test_db'),
}

model GetDatabaseResponseBody = {
  database?: Database(name='Database'),
  requestId?: string(name='RequestId', example='1AFAE64E-D1BE-432B-A9****'),
  success?: boolean(name='Success', example='true'),
}

model GetDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatabaseResponseBody(name='body'),
}

/**
 * @summary 获取数据库详情
 *
 * @param request GetDatabaseRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDatabaseResponse
 */
async function getDatabaseWithOptions(request: GetDatabaseRequest, runtime: Util.RuntimeOptions): GetDatabaseResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDatabase',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据库详情
 *
 * @param request GetDatabaseRequest
 * @return GetDatabaseResponse
 */
async function getDatabase(request: GetDatabaseRequest): GetDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDatabaseWithOptions(request, runtime);
}

model GetDeploymentPackageRequest {
  deploymentId?: long(name='DeploymentId', description='This parameter is required.', example='1000000001'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model GetDeploymentPackageResponseBody = {
  data?: {
    deployedItems?: [ 
      {
        fileId?: long(name='FileId', example='5076****'),
        fileVersion?: long(name='FileVersion', example='7'),
        status?: int32(name='Status', example='1'),
      }
    ](name='DeployedItems'),
    deployment?: {
      checkingStatus?: int32(name='CheckingStatus', example='7'),
      createTime?: long(name='CreateTime', example='1593877765000'),
      creatorId?: string(name='CreatorId', example='20030****'),
      errorMessage?: string(name='ErrorMessage', example='Success'),
      executeTime?: long(name='ExecuteTime', example='1593877765000'),
      fromEnvironment?: int32(name='FromEnvironment', example='0'),
      handlerId?: string(name='HandlerId', example='2003****'),
      name?: string(name='Name', example='ods_user_info_d-2020-07-04_20030****'),
      status?: int32(name='Status', example='1'),
      toEnvironment?: int32(name='ToEnvironment', example='1'),
    }(name='Deployment'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='You have no permission.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0bc1ec92159376****'),
  success?: boolean(name='Success', example='true'),
}

model GetDeploymentPackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeploymentPackageResponseBody(name='body'),
}

/**
 * @param request GetDeploymentPackageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDeploymentPackageResponse
 */
async function getDeploymentPackageWithOptions(request: GetDeploymentPackageRequest, runtime: Util.RuntimeOptions): GetDeploymentPackageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deploymentId)) {
    body['DeploymentId'] = request.deploymentId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDeploymentPackage',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request GetDeploymentPackageRequest
 * @return GetDeploymentPackageResponse
 */
async function getDeploymentPackage(request: GetDeploymentPackageRequest): GetDeploymentPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeploymentPackageWithOptions(request, runtime);
}

model GetFileRequest {
  fileId?: long(name='FileId', description='The file ID. You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to query the ID.', example='100000001'),
  nodeId?: long(name='NodeId', description='The ID of the node that is scheduled. You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to query the ID.', example='200000001'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure either this parameter or the ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the name.

You must configure either this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model GetFileResponseBody = {
  data?: {
    file?: {
      advancedSettings?: string(name='AdvancedSettings', description='The advanced configurations of the node.

This parameter is valid for an EMR node. This parameter corresponds to the Advanced Settings tab in the right-side navigation pane on the configuration tab of the node in the [DataWorks console](https://workbench.data.aliyun.com/console).

>  You cannot configure advanced parameters for EMR Shell nodes.

For information about the advanced parameters of each type of EMR node, see [Develop EMR tasks](https://help.aliyun.com/document_detail/473077.html).', example='{\\\\"priority\\\\":\\\\"1\\\\",\\\\"ENABLE_SPARKSQL_JDBC\\\\":false,\\\\"FLOW_SKIP_SQL_ANALYZE\\\\":false,\\\\"queue\\\\":\\\\"default\\\\"}'),
      autoParsing?: boolean(name='AutoParsing', description='Indicates whether the automatic parsing feature is enabled for the file. Valid values:

*   true
*   false

This parameter corresponds to the Automatic Parsing From Code Before Node Committing parameter that is displayed after you select Same Cycle in the Dependencies section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='true'),
      bizId?: long(name='BizId', description='The ID of the workflow to which the file belongs. This parameter is deprecated and replaced by the BusinessId parameter.', example='1000001'),
      businessId?: long(name='BusinessId', description='The ID of the workflow to which the file belongs.', example='1000001'),
      commitStatus?: int32(name='CommitStatus', description='Indicates whether the latest code in the file is committed. Valid values: 0 and 1. The value 0 indicates that the latest code in the file is not committed. The value 1 indicates that the latest code in the file is committed.', example='0'),
      connectionName?: string(name='ConnectionName', description='The name of the data source that is used to run the node that corresponds to the file.', example='odps_source'),
      content?: string(name='Content', description='The code in the file.', example='SHOW TABLES;'),
      createTime?: long(name='CreateTime', description='The time when the file was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593879116000'),
      createUser?: string(name='CreateUser', description='The ID of the Alibaba Cloud account used to create the file.', example='424732****'),
      currentVersion?: int32(name='CurrentVersion', description='The latest version number of the file.', example='3'),
      deletedStatus?: string(name='DeletedStatus', description='The status of the file. Valid values:

*   NORMAL: The file is not deleted.
*   RECYCLE_BIN: The file is stored in the recycle bin.
*   DELETED: The file is deleted.', example='RECYCLE'),
      fileDescription?: string(name='FileDescription', description='The description of the file.', example='My first DataWorks file'),
      fileFolderId?: string(name='FileFolderId', description='The ID of the folder to which the file belongs.', example='2735c2****'),
      fileId?: long(name='FileId', description='The file ID.', example='100000001'),
      fileName?: string(name='FileName', description='The name of the file.', example='ods_user_info_d'),
      fileType?: int32(name='FileType', description='The type of the code for the file. The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html).', example='10'),
      isMaxCompute?: boolean(name='IsMaxCompute', description='Indicates whether the resource file needs to be uploaded to MaxCompute. This parameter is returned only if the file is a MaxCompute resource file.', example='true'),
      lastEditTime?: long(name='LastEditTime', description='The time when the file was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593879116000'),
      lastEditUser?: string(name='LastEditUser', description='The ID of the Alibaba Cloud account used to last modify the file.', example='424732****'),
      nodeId?: long(name='NodeId', description='The ID of the auto triggered node that is generated in the scheduling system after the file is committed.', example='300001'),
      owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the file owner.', example='7775674356****'),
      parentId?: long(name='ParentId', description='The ID of the node group file to which the current file belongs. This parameter is returned only if the current file is an inner file of the node group file.', example='-1'),
      useType?: string(name='UseType', description='The module to which the file belongs. Valid values:

*   NORMAL: The file is used for DataStudio.
*   MANUAL: The file is used for a manually triggered node.
*   MANUAL_BIZ: The file is used for a manually triggered workflow.
*   SKIP: The file is used for a dry-run node in DataStudio.
*   ADHOCQUERY: The file is used for an ad hoc query.
*   COMPONENT: The file is used for a script template.', example='NORMAL'),
    }(name='File', description='The basic information about the file.'),
    nodeConfiguration?: {
      applyScheduleImmediately?: string(name='ApplyScheduleImmediately', description='Indicates whether scheduling configurations immediately take effect after the deployment.', example='true'),
      autoRerunIntervalMillis?: int32(name='AutoRerunIntervalMillis', description='The interval between automatic reruns after an error occurs. Unit: milliseconds.

This parameter corresponds to the Rerun interval parameter that is displayed after the Auto Rerun upon Failure check box is selected in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console). The interval that you specify in the DataWorks console is measured in minutes. Pay attention to the conversion between the units of time when you call the operation.', example='120000'),
      autoRerunTimes?: int32(name='AutoRerunTimes', description='The number of automatic reruns that are allowed after an error occurs.', example='3'),
      cronExpress?: string(name='CronExpress', description='The cron expression that represents the periodic scheduling policy of the node.', example='00 05 00 * * ?'),
      cycleType?: string(name='CycleType', description='The type of the scheduling cycle. Valid values: NOT_DAY and DAY. The value NOT_DAY indicates that the node is scheduled to run by minute or hour. The value DAY indicates that the node is scheduled to run by day, week, or month.

This parameter corresponds to the Scheduling Cycle parameter in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='DAY'),
      dependentNodeIdList?: string(name='DependentNodeIdList', description='The ID of the node on which the node that corresponds to the file depends when the DependentType parameter is set to USER_DEFINE. Multiple IDs are separated by commas (,).

The value of this parameter is equivalent to the ID of the node that you specified after you select Previous Cycle and set Depend On to Other Nodes in the Dependencies section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='5,10,15,20'),
      dependentType?: string(name='DependentType', description='The type of the cross-cycle scheduling dependency of the node. Valid values:

*   SELF: The instance generated for the node in the current cycle depends on the instance generated for the node in the previous cycle.
*   CHILD: The instance generated for the node in the current cycle depends on the instances generated for the descendant nodes at the nearest level of the node in the previous cycle.
*   USER_DEFINE: The instance generated for the node in the current cycle depends on the instances generated for one or more specified nodes in the previous cycle.
*   NONE: No cross-cycle scheduling dependency type is selected for the node.', example='USER_DEFINE'),
      endEffectDate?: long(name='EndEffectDate', description='The end of the time range for automatic scheduling. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

Configuring this parameter is equivalent to specifying an end time for the Validity Period parameter in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='4155787800000'),
      ignoreParentSkipRunningProperty?: string(name='IgnoreParentSkipRunningProperty', description='Indicates whether the dry-run property of the ancestor nodes of the node is skipped. This parameter corresponds to the Skip the dry-run property of the ancestor node parameter that is displayed after you configure the Depend On parameter in the Dependencies section of the Properties tab on the DataStudio page in the DataWorks console.', example='true'),
      imageId?: string(name='ImageId', description='The custom image ID.', example='m-bp1h4b5a8ogkbll2f3tr'),
      inputList?: [ 
        {
          input?: string(name='Input', description='The output name of the parent file on which the current file depends.

This parameter corresponds to the Output Name of Ancestor Node parameter under Parent Nodes after Same Cycle is selected in the Dependencies section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='project.001_out'),
          parseType?: string(name='ParseType', description='The mode of the configuration file dependency. Valid values:

*   MANUAL: Scheduling dependencies are manually configured.
*   AUTO: Scheduling dependencies are automatically parsed.', example='MANUAL'),
        }
      ](name='InputList', description='The output information about the parent files on which the current file depends.'),
      inputParameters?: [ 
        {
          parameterName?: string(name='ParameterName', description='The name of the input parameter of the node. In the code, you can use the ${...} method to reference the input parameter of the node.

This parameter corresponds to the Parameter Name parameter in the Input Parameters table in the Input and Output Parameters section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='input'),
          valueSource?: string(name='ValueSource', description='The value source of the input parameter of the node.

This parameter corresponds to the Value Source parameter in the Input Parameters table in the Input and Output Parameters section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='project_001.parent_node:outputs'),
        }
      ](name='InputParameters', description='The input parameters of the node.'),
      outputList?: [ 
        {
          output?: string(name='Output', description='The output name of the current file.

This parameter corresponds to the Output Name parameter under Output after Same Cycle is selected in the Dependencies section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='dw_project.002_out'),
          refTableName?: string(name='RefTableName', description='The output table name of the current file.

This parameter corresponds to the Output Table Name parameter under Output after Same Cycle is selected in the Dependencies section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='ods_user_info_d'),
        }
      ](name='OutputList', description='The output information about the current file.'),
      outputParameters?: [ 
        {
          description?: string(name='Description', description='The description of the output parameter of the node.', example='It\\\\"s a context output parameter.'),
          parameterName?: string(name='ParameterName', description='The name of the output parameter of the node.

This parameter corresponds to the Parameter Name parameter in the Output Parameters table in the Input and Output Parameters section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='output'),
          type?: string(name='Type', description='The type of the output parameter of the node. Valid values:

*   1: indicates a constant.
*   2: indicates a variable.
*   3: indicates a pass-through variable.

This parameter corresponds to the Type parameter in the Output Parameters table in the Input and Output Parameters section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='1'),
          value?: string(name='Value', description='The value of the output parameter of the node.

This parameter corresponds to the Value parameter in the Output Parameters table in the Input and Output Parameters section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='${bizdate}'),
        }
      ](name='OutputParameters', description='The output parameters of the node.'),
      paraValue?: string(name='ParaValue', description='The scheduling parameters of the node.

This parameter corresponds to the Scheduling Parameter section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console). For more information about the configurations of scheduling parameters, see [Configure scheduling parameters](https://help.aliyun.com/document_detail/137548.html).', example='a=x b=y'),
      rerunMode?: string(name='RerunMode', description='Indicates whether the node that corresponds to the file can be rerun. Valid values:

*   ALL_ALLOWED: The node can be rerun regardless of whether it is successfully run or fails to run.
*   FAILURE_ALLOWED: The node can be rerun only after it fails to run.
*   ALL_DENIED: The node cannot be rerun regardless of whether it is successfully run or fails to run.

This parameter corresponds to the Rerun parameter in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='ALL_ALLOWED'),
      resourceGroupId?: long(name='ResourceGroupId', description='The ID of the resource group that is used to run the node that corresponds to the file. You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/173913.html) operation to query the available resource groups in the workspace.', example='375827434852437'),
      schedulerType?: string(name='SchedulerType', description='The scheduling type of the node. Valid values:

*   NORMAL: The node is an auto triggered node.
*   MANUAL: The node is a manually triggered node. Manually triggered nodes cannot be automatically triggered. They correspond to the nodes in the Manually Triggered Workflows pane.
*   PAUSE: The node is a paused node.
*   SKIP: The node is a dry-run node. Dry-run nodes are started as scheduled, but the system sets the status of the nodes to successful when it starts to run them.', example='NORMAL'),
      startEffectDate?: long(name='StartEffectDate', description='The beginning of the time range for automatic scheduling. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

Configuring this parameter is equivalent to specifying a start time for the Validity Period parameter in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='936923400000'),
      startImmediately?: boolean(name='StartImmediately', description='Indicates whether a node is immediately run after the node is deployed to the production environment.

This parameter is valid only for an EMR Spark Streaming node or an EMR Streaming SQL node. This parameter corresponds to the Start Method parameter in the Schedule section of the Configure tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='true'),
      stop?: boolean(name='Stop', description='Indicates whether the scheduling for the node is suspended Valid values:

*   true
*   false

This parameter corresponds to the Recurrence parameter in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='false'),
      timeout?: int32(name='Timeout', description='The timeout period.', example='1'),
    }(name='NodeConfiguration', description='The scheduling configurations of the file.'),
    resourceDownloadLink?: {
      downloadLink?: string(name='downloadLink', description='The download URL of the resource.', example='http://xx'),
    }(name='ResourceDownloadLink', description='The download URL of the resource.'),
  }(name='Data', description='The details of the file.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GetFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFileResponseBody(name='body'),
}

/**
 * @summary Queries the information about a file.
 *
 * @param request GetFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFileResponse
 */
async function getFileWithOptions(request: GetFileRequest, runtime: Util.RuntimeOptions): GetFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFile',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a file.
 *
 * @param request GetFileRequest
 * @return GetFileResponse
 */
async function getFile(request: GetFileRequest): GetFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileWithOptions(request, runtime);
}

model GetFileVersionRequest {
  fileId?: long(name='FileId', description='The file ID. You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to query the ID.

This parameter is required.', example='1000001'),
  fileVersion?: int32(name='FileVersion', description='The file version whose information you want to query.

This parameter is required.', example='2'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can click the Workspace Manage icon in the upper-right corner of the DataStudio page to go to the Workspace page and query the workspace ID.', example='1000011'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The unique identifier of the DataWorks workspace. You can view the identifier in the upper part of the DataStudio page. You can also select another identifier to switch to another workspace.

You must configure either this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model GetFileVersionResponseBody = {
  data?: {
    changeType?: string(name='ChangeType', description='The type of the change to the file of the current version. Valid values: CREATE, UPDATE, and DELETE.', example='UPDATE'),
    comment?: string(name='Comment', description='The description of the file version.', example='Second version submission'),
    commitTime?: long(name='CommitTime', description='The time when the file version was generated. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1593881265000'),
    commitUser?: string(name='CommitUser', description='The ID of the Alibaba Cloud account that is used to generate the file of the current version.', example='7384234****'),
    fileContent?: string(name='FileContent', description='The code in the file of the current version.', example='SHOW TABLES;'),
    fileName?: string(name='FileName', description='The name of the file of the current version.', example='ods_user_info_d'),
    filePropertyContent?: string(name='FilePropertyContent', description='The basic information about the file of the current version.', example='{"fileName":"ods_user_info_d","fileType":10}'),
    fileVersion?: int32(name='FileVersion', description='The file version.', example='2'),
    isCurrentProd?: boolean(name='IsCurrentProd', description='Indicates whether the version is the latest version in the production environment. Valid values:

*   true
*   false', example='true'),
    nodeContent?: string(name='NodeContent', description='The scheduling configurations of the node that corresponds to the file of the current version.', example='{"cycleType":0,"cronExpress":"00 05 00 * * ?"}'),
    nodeId?: long(name='NodeId', description='The ID of the node that corresponds to the file version.', example='3000001'),
    status?: string(name='Status', description='The status of the file version. Valid values:

*   COMMITTING
*   COMMITTED or CHECK_OK
*   PACKAGED
*   DEPLOYING
*   DEPLOYED
*   CANCELLED', example='COMMITTED'),
    useType?: string(name='UseType', description='The module to which the file belongs. Valid values:

*   0: NORMAL, which indicates that the file is used for DataStudio.
*   1: MANUAL, which indicates that the file is used for a manually triggered node.
*   2: MANUAL_BIZ, which indicates that the file is used for a manually triggered workflow.
*   3: SKIP, which indicates that the file is used for a dry-run node in DataStudio.
*   10: ADHOCQUERY, which indicates that the file is used for an ad hoc query.
*   30: COMPONENT, which indicates that the file is used for a script template.', example='0'),
  }(name='Data', description='The details of the file version.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GetFileVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFileVersionResponseBody(name='body'),
}

/**
 * @summary Queries the information about a file version.
 *
 * @param request GetFileVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFileVersionResponse
 */
async function getFileVersionWithOptions(request: GetFileVersionRequest, runtime: Util.RuntimeOptions): GetFileVersionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.fileVersion)) {
    body['FileVersion'] = request.fileVersion;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFileVersion',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a file version.
 *
 * @param request GetFileVersionRequest
 * @return GetFileVersionResponse
 */
async function getFileVersion(request: GetFileVersionRequest): GetFileVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileVersionWithOptions(request, runtime);
}

model GetFolderRequest {
  folderId?: string(name='FolderId', example='273****'),
  folderPath?: string(name='FolderPath', example='Business_process/my_first_business_process/MaxCompute/ods_layer'),
  projectId?: long(name='ProjectId', example='1000011'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model GetFolderResponseBody = {
  data?: {
    folderId?: string(name='FolderId', example='2735****'),
    folderPath?: string(name='FolderPath', example='Business_process/my_first_business_process/MaxCompute/ods_layer'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model GetFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFolderResponseBody(name='body'),
}

/**
 * @param request GetFolderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFolderResponse
 */
async function getFolderWithOptions(request: GetFolderRequest, runtime: Util.RuntimeOptions): GetFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.folderPath)) {
    body['FolderPath'] = request.folderPath;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFolder',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request GetFolderRequest
 * @return GetFolderResponse
 */
async function getFolder(request: GetFolderRequest): GetFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFolderWithOptions(request, runtime);
}

model GetFunctionRequest {
  id?: long(name='Id', description='The ID of the UDF.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000'),
}

model GetFunctionResponseBody = {
  function?: {
    createTime?: long(name='CreateTime', description='The time when the UDF was created. This value is a UNIX timestamp.', example='1724505917000'),
    id?: long(name='Id', description='The ID of the UDF.', example='860438872620113XXXX'),
    modifyTime?: long(name='ModifyTime', description='The time when the UDF was last modified. This value is a UNIX timestamp.', example='1724506661000'),
    name?: string(name='Name', description='The name of the UDF.', example='Function name'),
    owner?: string(name='Owner', description='The owner of the UDF.', example='110755000425XXXX'),
    projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace to which the UDF belongs.', example='10000'),
    spec?: string(name='Spec', description='The FlowSpec field information about the UDF. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).', example='{
    "version": "1.1.0",
    "kind": "Function",
    "spec": {
        "functions": [
            {
                "name": "Function_Name",
                "id": "580667964888595XXXX",
                "script": {
                    "content": "{  \\\\"uuid\\\\": \\\\"580667964888595XXXX\\\\",  \\\\"name\\\\": \\\\"Function_Name\\\\",  \\\\"datasource\\\\": {    \\\\"type\\\\": \\\\"odps\\\\",    \\\\"name\\\\": \\\\"odps_first\\\\"  },  \\\\"runtimeResource\\\\": {    \\\\"resourceGroup\\\\": \\\\"S_res_group_XXXX_XXXX\\\\",    \\\\"resourceGroupId\\\\": 6591XXXX  }}",
                    "path": "XXX/OpenAPI/Function/Function_Name",
                    "runtime": {
                        "command": "ODPS_FUNCTION"
                    }
                },
                "datasource": {
                    "name": "odps_first",
                    "type": "odps"
                },
                "runtimeResource": {
                    "resourceGroup": "S_res_group_XXXX_XXXX",
                    "id": "723932906364267XXXX",
                    "resourceGroupId": "6591XXXX"
                },
                "metadata": {
                    "owner": "110755000425XXXX"
                }
            }
        ]
    }
}'),
  }(name='Function', description='The information about the UDF.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6CF95929-6D12-5A88-8CC3-4B2F4C2EXXXX'),
}

model GetFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFunctionResponseBody(name='body'),
}

/**
 * @summary Queries the information about a user-defined function (UDF) in DataStudio.
 *
 * @param request GetFunctionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFunctionResponse
 */
async function getFunctionWithOptions(request: GetFunctionRequest, runtime: Util.RuntimeOptions): GetFunctionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFunction',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a user-defined function (UDF) in DataStudio.
 *
 * @param request GetFunctionRequest
 * @return GetFunctionResponse
 */
async function getFunction(request: GetFunctionRequest): GetFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFunctionWithOptions(request, runtime);
}

model GetIDEEventDetailRequest {
  messageId?: string(name='MessageId', description='The message ID in DataWorks OpenEvent. You can obtain the ID from a received message when an extension point event is triggered.

This parameter is required.', example='8abcb91f-d266-4073-b907-2ed67****1'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can obtain the ID from the message.

This parameter is required.', example='10000'),
}

model GetIDEEventDetailResponseBody = {
  eventDetail?: {
    committedFile?: {
      changeType?: string(name='ChangeType', description='The type of the change to the file of the current version. Valid values: CREATE, UPDATE, and DELETE.', example='UPDATE'),
      comment?: string(name='Comment', description='The description of the file version.', example='Second version submission'),
      committor?: string(name='Committor', description='The ID of the Alibaba Cloud account that is used to generate the file of the current version.', example='7384234****'),
      content?: string(name='Content', description='The code in the file of the current version.', example='SHOW TABLES;'),
      fileId?: long(name='FileId', description='The file ID.', example='1234123'),
      fileName?: string(name='FileName', description='The name of the file.', example='hello_dataworks.sql'),
      filePropertyContent?: {
        businessId?: long(name='BusinessId', description='The ID of the workflow to which the file belongs.', example='74328'),
        currentVersion?: long(name='CurrentVersion', description='The latest version number of the file.', example='1'),
        dataSourceName?: string(name='DataSourceName', description='The name of the data source with which the file is associated.', example='odps_source'),
        folderId?: string(name='FolderId', description='The ID of the folder to which the file belongs. You can call the [GetFolder](https://help.aliyun.com/document_detail/173952.html) operation to query the details of the file based on the folder ID.', example='aldurie78l2falure'),
        owner?: string(name='Owner', description='The file owner.', example='7384234****'),
        parentFileId?: long(name='ParentFileId', description='The ID of the do-while node or for-each node that corresponds to the file.', example='1234122'),
      }(name='FilePropertyContent', description='The details of the file.'),
      fileType?: long(name='FileType', description='The file type. The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html).', example='10'),
      nodeConfiguration?: {
        autoRerunIntervalMillis?: long(name='AutoRerunIntervalMillis', description='The interval at which the node corresponding to the file is rerun. Unit: milliseconds.', example='120000'),
        autoRerunTimes?: long(name='AutoRerunTimes', description='The number of times that the node corresponding to the file can be rerun.', example='3'),
        cronExpress?: string(name='CronExpress', description='The cron expression that is used to schedule the node corresponding to the file.', example='00 05 00 * * ?'),
        cycleType?: string(name='CycleType', description='The type of the scheduling cycle of the node that corresponds to the file. Valid values: NOT_DAY and DAY. The value NOT_DAY indicates that the node is scheduled to run by minute or hour. The value DAY indicates that the node is scheduled to run by day, week, or month.

This parameter corresponds to the Scheduling Cycle parameter in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='DAY'),
        dependentNodeIdList?: string(name='DependentNodeIdList', description='The ID of the node on which the node that corresponds to the file depends when the DependentType parameter is set to USER_DEFINE. Multiple IDs are separated by commas (,).

The value of this parameter is equivalent to the ID of the node that you specified after you select Other Nodes for Cross-Cycle Dependency (Original Previous-Cycle Dependency) in the Dependencies section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='5,10,15,20'),
        dependentType?: string(name='DependentType', description='The type of the cross-cycle scheduling dependency of the node. Valid values:

*   SELF: The instance generated for the node in the current cycle depends on the instance generated for the node in the previous cycle.
*   CHILD: The instance generated for the node in the current cycle depends on the instances generated for the descendant nodes at the nearest level of the node in the previous cycle.
*   USER_DEFINE: The instance generated for the node in the current cycle depends on the instances generated for one or more specified nodes in the previous cycle.
*   NONE: No cross-cycle scheduling dependency type is selected for the node.', example='USER_DEFINE'),
        inputList?: [ 
          {
            input?: string(name='Input', description='The output name of the parent file on which the current file depends.

This parameter corresponds to the Output Name of Ancestor Node parameter under Parent Nodes in the Dependencies section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='dw_project_root'),
            parseType?: string(name='ParseType', description='The mode of the configuration file dependency. Valid values:

*   MANUAL: Scheduling dependencies are manually configured.
*   AUTO: Scheduling dependencies are automatically parsed.', example='MANUAL'),
          }
        ](name='InputList', description='The output information about the parent files on which the current file depends.'),
        outputList?: [ 
          {
            output?: string(name='Output', description='The output name of the current file.

This parameter corresponds to the Output Name parameter under Output Name of Current Node in the Dependencies section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='dw_project.002_out'),
            refTableName?: string(name='RefTableName', description='The output table name of the current file.

This parameter corresponds to the Output Table Name parameter under Output Name of Current Node in the Dependencies section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='ods_user_info_d'),
          }
        ](name='OutputList', description='The output information about the current file.'),
        paraValue?: string(name='ParaValue', description='The scheduling parameters of the node.

This parameter corresponds to the Scheduling Parameter section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console). For more information about the configurations of scheduling parameters, see [Configure scheduling parameters](https://help.aliyun.com/document_detail/137548.html).', example='a=x b=y'),
        rerunMode?: string(name='RerunMode', description='Indicates whether the node that corresponds to the file can be rerun. Valid values:

*   ALL_ALLOWED: The node can be rerun regardless of whether it is successfully run or fails to run.
*   FAILURE_ALLOWED: The node can be rerun only after it fails to run.
*   ALL_DENIED: The node cannot be rerun regardless of whether it is successfully run or fails to run.

This parameter corresponds to the Rerun parameter in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).', example='ALL_ALLOWED'),
        resourceGroupId?: long(name='ResourceGroupId', description='The ID of the resource group that is used to run the node that corresponds to the file. You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/173913.html) operation to query the available resource groups in the workspace.', example='375827434852437'),
        schedulerType?: string(name='SchedulerType', description='The scheduling type of the node. Valid values:

*   NORMAL: The node is an auto triggered node.
*   MANUAL: The node is a manually triggered node. Manually triggered nodes cannot be automatically triggered. They correspond to the nodes in the Manually Triggered Workflows pane.
*   PAUSE: The node is a paused node.
*   SKIP: The node is a dry-run node. Dry-run nodes are started as scheduled, but the system sets the status of the nodes to successful when it starts to run them.', example='NORMAL'),
      }(name='NodeConfiguration', description='The scheduling properties of the node that corresponds to the file.'),
      nodeId?: long(name='NodeId', description='The ID of the node that is scheduled.', example='421429'),
      useType?: string(name='UseType', description='The module to which the file belongs. Valid values:

*   NORMAL: The file is used for DataStudio.
*   MANUAL: The file is used for a manually triggered node.
*   MANUAL_BIZ: The file is used for a manually triggered workflow.
*   SKIP: The file is used for a dry-run node in DataStudio.
*   ADHOCQUERY: The file is used for an ad hoc query.
*   COMPONENT: The file is used for a script template.', example='NORMAL'),
    }(name='CommittedFile', description='The data snapshot when the file is committed and deployed.

This parameter is valid only if the message type is IDE_FILE_SUBMIT_BEFORE or IDE_FILE_DEPLOY_BEFORE.'),
    deletedFile?: {
      businessId?: long(name='BusinessId', description='The ID of the workflow to which the file belongs.', example='74328'),
      content?: string(name='Content', description='The code in the file of the current version.', example='SHOW TABLES;'),
      currentVersion?: long(name='CurrentVersion', description='The latest version number of the file.', example='1'),
      dataSourceName?: string(name='DataSourceName', description='The name of the data source with which the file is associated.', example='odps_source'),
      fileId?: long(name='FileId', description='The file ID.', example='1234123'),
      fileName?: string(name='FileName', description='The name of the file.', example='hello_dataworks.sql'),
      fileType?: long(name='FileType', description='The file type. The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html).', example='10'),
      folderId?: string(name='FolderId', description='The ID of the folder to which the file belongs. You can call the [GetFolder](https://help.aliyun.com/document_detail/173952.html) operation to query the details of the file based on the folder ID.', example='aldurie78l2falure'),
      nodeId?: long(name='NodeId', description='The ID of the node that is scheduled.', example='421429'),
      owner?: string(name='Owner', description='The file owner.', example='7384234****'),
      parentFileId?: long(name='ParentFileId', description='The ID of the do-while node or for-each node that corresponds to the file.', example='1234122'),
      useType?: string(name='UseType', description='The module to which the file belongs. Valid values:

*   NORMAL: The file is used for DataStudio.
*   MANUAL: The file is used for a manually triggered node.
*   MANUAL_BIZ: The file is used for a manually triggered workflow.
*   SKIP: The file is used for a dry-run node in DataStudio.
*   ADHOCQUERY: The file is used for an ad hoc query.
*   COMPONENT: The file is used for a script template.', example='NORMAL'),
    }(name='DeletedFile', description='The data snapshot when the file is deleted. This parameter is valid only if the message type is IDE_FILE_DELETE_BEFORE.'),
    fileExecutionCommand?: {
      content?: string(name='Content', description='The code in the file of the current version.', example='SHOW TABLES;'),
      dataSourceName?: string(name='DataSourceName', description='The name of the data source with which the file is associated.', example='odps_source'),
      fileId?: long(name='FileId', description='The file ID.', example='1234123'),
      fileType?: long(name='FileType', description='The file type. The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html).', example='10'),
    }(name='FileExecutionCommand', description='The data snapshot when the code in the file is run. This parameter is valid only if the message type is IDE_FILE_EXECUTE_BEFORE.'),
    tableModel?: {
      columns?: [ 
        {
          columnName?: string(name='ColumnName', description='The name of the column.', example='ID'),
          columnType?: string(name='ColumnType', description='The data type of the column.', example='BIGINT'),
          comment?: string(name='Comment', description='The remarks of the column.', example='ID'),
          isPartitionColumn?: boolean(name='IsPartitionColumn', description='Indicates whether the column is a partition key column. Valid values:

*   true
*   false', example='false'),
        }
      ](name='Columns', description='The columns in the table.'),
      comment?: string(name='Comment', description='The remarks of the table.', example='A new table'),
      dataSourceName?: string(name='DataSourceName', description='The name of the data source to which the table belongs.', example='odps_source'),
      env?: string(name='Env', description='The environment in which the table is used. Valid values:

*   DEV
*   PROD', example='DEV'),
      lifeCycle?: long(name='LifeCycle', description='The lifecycle of the table. Unit: day.', example='7'),
      location?: string(name='Location', description='The path of the table.', example='hdfs://path/to/object'),
      tableName?: string(name='TableName', description='The name of the table.', example='tb_hello'),
    }(name='TableModel', description='The data snapshot when the table is committed and deployed. This parameter is valid only if the message type is IDE_TABLE_SUBMIT_BEFORE or IDE_TABLE_DEPLOY_BEFORE.'),
  }(name='EventDetail', description='The data snapshot that is generated when an extension point event is triggered.

The fields contained in data snapshots vary based on the types of the triggered extension point events. For more information, see the description of the fields.'),
  requestId?: string(name='RequestId', description='The request ID.', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model GetIDEEventDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIDEEventDetailResponseBody(name='body'),
}

/**
 * @summary Queries the data snapshot of an extension point based on the ID of a message in DataWorks OpenEvent when the related extension point event is triggered.
 *
 * @param request GetIDEEventDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetIDEEventDetailResponse
 */
async function getIDEEventDetailWithOptions(request: GetIDEEventDetailRequest, runtime: Util.RuntimeOptions): GetIDEEventDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.messageId)) {
    body['MessageId'] = request.messageId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetIDEEventDetail',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the data snapshot of an extension point based on the ID of a message in DataWorks OpenEvent when the related extension point event is triggered.
 *
 * @param request GetIDEEventDetailRequest
 * @return GetIDEEventDetailResponse
 */
async function getIDEEventDetail(request: GetIDEEventDetailRequest): GetIDEEventDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIDEEventDetailWithOptions(request, runtime);
}

model GetJobStatusRequest {
  jobId?: string(name='JobId', description='The ID of the asynchronous task that is generated after you call an asynchronous operation.

This parameter is required.', example='70ecdaec-bf21-4c11-8ecb-4f77453ceea8'),
}

model GetJobStatusResponseBody = {
  jobStatus?: {
    completed?: string(name='Completed', description='Indicates whether the asynchronous task is complete. Valid values: True False', example='False'),
    createTime?: string(name='CreateTime', description='The time when the asynchronous task was created.', example='1729063449802'),
    error?: string(name='Error', description='The error message returned if the asynchronous task fails.', example='Not Found'),
    jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='C664CDE3-9C0B-5792-B17F-6C543783BBBC'),
    jobType?: string(name='JobType', description='The type of the asynchronous task. Valid values:

*   **Create**: The asynchronous task is used to create an object.
*   **Update**: The asynchronous task is used to update an object.
*   **Cancel**: The asynchronous task is used to cancel an operation.', example='Create'),
    status?: string(name='Status', description='The status of the asynchronous task. Valid values:

*   **Success**
*   **Fail**
*   **Cancel**
*   **Running**', example='Success'),
  }(name='JobStatus', description='The real-time status information of the asynchronous task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5E2BFE96-C0E0-5A98-85C8-633EC803198D'),
}

model GetJobStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobStatusResponseBody(name='body'),
}

/**
 * @summary Queries the status information of an asynchronous task. After you call an asynchronous operation, an asynchronous task is generated. You can call the GetJobStatus operation to query the status of the asynchronous task.
 *
 * @param request GetJobStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetJobStatusResponse
 */
async function getJobStatusWithOptions(request: GetJobStatusRequest, runtime: Util.RuntimeOptions): GetJobStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetJobStatus',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the status information of an asynchronous task. After you call an asynchronous operation, an asynchronous task is generated. You can call the GetJobStatus operation to query the status of the asynchronous task.
 *
 * @param request GetJobStatusRequest
 * @return GetJobStatusResponse
 */
async function getJobStatus(request: GetJobStatusRequest): GetJobStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobStatusWithOptions(request, runtime);
}

model GetLineageRelationshipRequest {
  id?: string(name='Id', description='The lineage ID. For more information, see the response returned by the ListLineageRelationships operation.

This parameter is required.', example='110xxxx:custom-table.xxxxx:maxcompute-table.project.test_big_lineage_080901:custom-sqlxx.00001'),
}

model GetLineageRelationshipResponseBody = {
  lineageRelationship?: LineageRelationship(name='LineageRelationship'),
  requestId?: string(name='RequestId', example='58D5334A-B013-430E'),
}

model GetLineageRelationshipResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLineageRelationshipResponseBody(name='body'),
}

/**
 * @summary 获取血缘关系详情
 *
 * @param request GetLineageRelationshipRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetLineageRelationshipResponse
 */
async function getLineageRelationshipWithOptions(request: GetLineageRelationshipRequest, runtime: Util.RuntimeOptions): GetLineageRelationshipResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLineageRelationship',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取血缘关系详情
 *
 * @param request GetLineageRelationshipRequest
 * @return GetLineageRelationshipResponse
 */
async function getLineageRelationship(request: GetLineageRelationshipRequest): GetLineageRelationshipResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLineageRelationshipWithOptions(request, runtime);
}

model GetMetaCollectionRequest {
  id?: string(name='Id', description='The collection ID.

This parameter is required.', example='category.123'),
}

model GetMetaCollectionResponseBody = {
  metaCollection?: {
    administrators?: [ long ](name='Administrators'),
    createTime?: long(name='CreateTime', example='1668568601000'),
    createUser?: string(name='CreateUser', example='456789'),
    description?: string(name='Description'),
    id?: string(name='Id', description='The collection ID.', example='category.123'),
    modifyTime?: long(name='ModifyTime', example='1668568601000'),
    name?: string(name='Name', example='test_category'),
    parentId?: string(name='ParentId', description='The ID of the collection of the ancestor node. This parameter can be left empty.', example='category.12'),
    type?: string(name='Type', example='Category'),
  }(name='MetaCollection', description='The information about the collection.'),
  requestId?: string(name='RequestId', description='Id of the request', example='1AFAE64E-D1BE-432B-A9****'),
}

model GetMetaCollectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetaCollectionResponseBody(name='body'),
}

/**
 * @summary Queries the information about a collection in Data Map. Collections include categories and data albums.
 *
 * @param request GetMetaCollectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMetaCollectionResponse
 */
async function getMetaCollectionWithOptions(request: GetMetaCollectionRequest, runtime: Util.RuntimeOptions): GetMetaCollectionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMetaCollection',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a collection in Data Map. Collections include categories and data albums.
 *
 * @param request GetMetaCollectionRequest
 * @return GetMetaCollectionResponse
 */
async function getMetaCollection(request: GetMetaCollectionRequest): GetMetaCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMetaCollectionWithOptions(request, runtime);
}

model GetNetworkRequest {
  id?: long(name='Id', description='The network ID.

This parameter is required.', example='1000'),
}

model GetNetworkResponseBody = {
  network?: {
    createTime?: long(name='CreateTime', description='The time when the network resource was created. The value is a 64-bit timestamp.', example='1727055811000'),
    createUser?: string(name='CreateUser', description='The ID of the user who creates the network resource.', example='11075500042XXXXX'),
    id?: long(name='Id', description='The network ID.', example='1000'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the serverless resource group.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
    securityGroupId?: string(name='SecurityGroupId', description='The security group ID.', example='sg-2ze13vamugr7jenXXXXX'),
    status?: string(name='Status', description='The status of the network resource. Valid values:

*   Pending: The network resource is waiting to be created.
*   Creating: The network resource is being created.
*   Running: The network resource is running as expected.
*   Deleting: The network resource is being deleted.
*   Deleted: The network resource is deleted.', example='Running'),
    vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-m2et4f3oc8msfbccXXXXX'),
    vswitchId?: string(name='VswitchId', description='The VSwitch ID.', example='vsw-uf8usrhs7hjd9amsXXXXX'),
  }(name='Network', description='The information about the network resource.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetNetworkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNetworkResponseBody(name='body'),
}

/**
 * @summary Queries the information about a network resource.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetNetworkRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNetworkResponse
 */
async function getNetworkWithOptions(request: GetNetworkRequest, runtime: Util.RuntimeOptions): GetNetworkResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetNetwork',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a network resource.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetNetworkRequest
 * @return GetNetworkResponse
 */
async function getNetwork(request: GetNetworkRequest): GetNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNetworkWithOptions(request, runtime);
}

model GetNodeRequest {
  id?: long(name='Id', description='The ID of the node.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000'),
}

model GetNodeResponseBody = {
  node?: {
    createTime?: long(name='CreateTime', description='The time when the node was created. This value is a UNIX timestamp.', example='1700539206000'),
    id?: long(name='Id', description='The ID of the node.', example='860438872620113XXXX'),
    modifyTime?: long(name='ModifyTime', description='The time when the node was last modified. This value is a UNIX timestamp.', example='1700539206000'),
    name?: string(name='Name', description='The name of the node.', example='Node name'),
    owner?: string(name='Owner', description='The owner of the node.', example='196596664824XXXX'),
    projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='10000'),
    spec?: string(name='Spec', description='The FlowSpec field information about this node. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow).', example='{
    "version": "1.1.0",
    "kind": "Node",
    "spec": {
        "nodes": [
            {
                "recurrence": "Normal",
                "id": "860438872620113XXXX",
                "timeout": 0,
                "instanceMode": "T+1",
                "rerunMode": "Allowed",
                "rerunTimes": 3,
                "rerunInterval": 180000,
                "datasource": {
                    "name": "odps_test",
                    "type": "odps"
                },
                "script": {
                    "language": "odps-sql",
                    "path": "XX/OpenAPI_Test/ODPS_SQL_Test",
                    "runtime": {
                        "command": "ODPS_SQL",
                        "commandTypeId": 10
                    },
                    "content": "select now();",
                    "id": "853573334108680XXXX"
                },
                "trigger": {
                    "type": "Scheduler",
                    "id": "543680677872062XXXX",
                    "cron": "00 00 00 * * ?",
                    "startTime": "1970-01-01 00:00:00",
                    "endTime": "9999-01-01 00:00:00",
                    "timezone": "Asia/Shanghai",
                    "delaySeconds": 0
                },
                "runtimeResource": {
                    "resourceGroup": "S_res_group_XXXX_XXXX",
                    "id": "623731286945488XXXX",
                    "resourceGroupId": "7201XXXX"
                },
                "name": "ODPS_SQL_Test",
                "owner": "110755000425XXXX",
                "metadata": {
                    "owner": "110755000425XXXX",
                    "ownerName": "XXXXX@test.XXX.com",
                    "projectId": "307XXX"
                },
                "inputs": {
                    "nodeOutputs": [
                        {
                            "data": "lwttest_standard_root",
                            "artifactType": "NodeOutput"
                        }
                    ]
                },
                "outputs": {
                    "nodeOutputs": [
                        {
                            "data": "860438872620113XXXX",
                            "artifactType": "NodeOutput",
                            "refTableName": "ODPS_SQL_Test",
                            "isDefault": true
                        }
                    ]
                }
            }
        ],
        "flow": [
            {
                "nodeId": "860438872620113XXXX",
                "depends": [
                    {
                        "type": "Normal",
                        "output": "lwttest_standard_root"
                    }
                ]
            }
        ]
    },
    "metadata": {
        "uuid": "860438872620113XXXX"
    }
}'),
    taskId?: long(name='TaskId', description='The Id of the scheduled task after the node is published.', example='700006680527'),
  }(name='Node', description='The information about the node.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model GetNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeResponseBody(name='body'),
}

/**
 * @summary Queries the information about a node in DataStudio.
 *
 * @param request GetNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNodeResponse
 */
async function getNodeWithOptions(request: GetNodeRequest, runtime: Util.RuntimeOptions): GetNodeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetNode',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a node in DataStudio.
 *
 * @param request GetNodeRequest
 * @return GetNodeResponse
 */
async function getNode(request: GetNodeRequest): GetNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeWithOptions(request, runtime);
}

model GetPartitionRequest {
  name?: string(name='Name', description='This parameter is required.', example='ds=20250101'),
  tableId?: string(name='TableId', description='The table ID. For more details, refer to the response of the ListTables operation and [description of concepts related to metadata entities.](https://help.aliyun.com/document_detail/2880092.html)

This parameter is required.', example='maxcompute-column:11075xxxx::test_project:test_schema:test_table'),
}

model GetPartitionResponseBody = {
  partition?: Partition(name='Partition'),
  requestId?: string(name='RequestId', example='D1E2E5BC-xxxx-xxxx-xxxx-xxxxxx'),
  success?: boolean(name='Success', example='true'),
}

model GetPartitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPartitionResponseBody(name='body'),
}

/**
 * @summary 获取数据表的分区详情
 *
 * @param request GetPartitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPartitionResponse
 */
async function getPartitionWithOptions(request: GetPartitionRequest, runtime: Util.RuntimeOptions): GetPartitionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPartition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据表的分区详情
 *
 * @param request GetPartitionRequest
 * @return GetPartitionResponse
 */
async function getPartition(request: GetPartitionRequest): GetPartitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPartitionWithOptions(request, runtime);
}

model GetPipelineRunRequest {
  id?: string(name='Id', description='The ID of the process.

This parameter is required.', example='a7ef0634-20ec-4a7c-a214-54020f****'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model GetPipelineRunResponseBody = {
  pipeline?: {
    createTime?: long(name='CreateTime', description='The time when the process was created. This value is a UNIX timestamp.', example='1724984066000'),
    creator?: string(name='Creator', description='The creator of the process.', example='137946317766XXXX'),
    id?: string(name='Id', description='The process ID.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX'),
    message?: string(name='Message', description='The error message returned when the process fails.', example='Error message'),
    modifyTime?: long(name='ModifyTime', description='The time when the process was modified. This value is a UNIX timestamp.', example='1724984066000'),
    projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='56160'),
    stages?: [ 
      {
        code?: string(name='Code', description='The code of the stage.', example='DEV_CHECK'),
        description?: string(name='Description', description='The description of the stage.', example='Phase description'),
        detail?: map[string]any(name='Detail', description='The details of the stage.'),
        message?: string(name='Message', description='The error message returned for the stage.', example='Exception information XXX'),
        name?: string(name='Name', description='The name of the stage.', example='Publish package build'),
        status?: string(name='Status', description='The status of the stage.

Valid values:

*   Init
*   Running
*   Success
*   Fail
*   Termination
*   Cancel', example='Running'),
        step?: int32(name='Step', description='The step number of the stage.', example='1'),
        type?: string(name='Type', description='The type of the stage.

Valid values:

*   Deploy
*   Check
*   Offline
*   Build
*   Delete', example='Check'),
      }
    ](name='Stages', description='The information about stages in the process.'),
    status?: string(name='Status', description='The status of the process.

Valid values:

*   Init
*   Running
*   Success
*   Fail
*   Termination
*   Cancel', example='Running'),
  }(name='Pipeline', description='The information about the process.'),
  requestId?: string(name='RequestId', description='The request ID.', example='08468352-032C-5262-AEDC-68C9FA05XXXX'),
}

model GetPipelineRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPipelineRunResponseBody(name='body'),
}

/**
 * @summary Queries the information about a process for deploying or undeploying an entity.
 *
 * @param request GetPipelineRunRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPipelineRunResponse
 */
async function getPipelineRunWithOptions(request: GetPipelineRunRequest, runtime: Util.RuntimeOptions): GetPipelineRunResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPipelineRun',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a process for deploying or undeploying an entity.
 *
 * @param request GetPipelineRunRequest
 * @return GetPipelineRunResponse
 */
async function getPipelineRun(request: GetPipelineRunRequest): GetPipelineRunResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPipelineRunWithOptions(request, runtime);
}

model GetProjectRequest {
  id?: long(name='Id', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='123456'),
}

model GetProjectResponseBody = {
  project?: {
    aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='The ID of the Alibaba Cloud resource group to which the workspace belongs.', example='rg-acfmzbn7pti3zfa'),
    aliyunResourceTags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='batch'),
        value?: string(name='Value', description='The tag value.', example='blue'),
      }
    ](name='AliyunResourceTags', description='The tags.'),
    description?: string(name='Description', description='The description of the workspace.', example='Financial analysis group project data development'),
    devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', description='Indicates whether the development environment is enabled. Valid values:

*   true: The development environment is enabled. In this case, the development environment is isolated from the production environment in the workspace.
*   false: The development environment is disabled. In this case, only the production environment is used in the workspace.', example='true'),
    devRoleDisabled?: boolean(name='DevRoleDisabled', description='Indicates whether the Develop role is disabled. Valid values:

*   false
*   true', example='false'),
    displayName?: string(name='DisplayName', description='The display name of the workspace.', example='Sora financial analysis'),
    id?: long(name='Id', description='The workspace ID.', example='28477242'),
    name?: string(name='Name', description='The name of the workspace.', example='sora_finance'),
    owner?: string(name='Owner', description='The ID of the Alibaba Cloud account to which the workspace belongs.', example='207947397706614299'),
    paiTaskEnabled?: boolean(name='PaiTaskEnabled', description='Indicates whether scheduling of PAI tasks is enabled. Valid values:

*   true: Scheduling of PAI tasks is enabled. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
*   false: Scheduling of PAI tasks is disabled.', example='true'),
    status?: string(name='Status', description='The status of the workspace. Valid values:

*   Available
*   Initializing
*   InitFailed
*   Forbidden
*   Deleting
*   DeleteFailed
*   Frozen
*   Updating
*   UpdateFailed', example='Available'),
  }(name='Project', description='The information about the workspace.'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model GetProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectResponseBody(name='body'),
}

/**
 * @summary Queries the information about a DataWorks workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetProjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetProjectResponse
 */
async function getProjectWithOptions(request: GetProjectRequest, runtime: Util.RuntimeOptions): GetProjectResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProject',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a DataWorks workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetProjectRequest
 * @return GetProjectResponse
 */
async function getProject(request: GetProjectRequest): GetProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProjectWithOptions(request, runtime);
}

model GetProjectMemberRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='88757'),
  userId?: string(name='UserId', description='The ID of the account used by the member in the workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the ID of the account used by the member in the workspace.

This parameter is required.', example='123422344899'),
}

model GetProjectMemberResponseBody = {
  projectMember?: {
    projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='88757'),
    roles?: [ 
      {
        code?: string(name='Code', description='The code of the role. Valid values:

*   role_project_admin: Workspace Administrator
*   role_project_dev: Develop
*   role_project_dg_admin: Data Governance Administrator
*   role_project_guest: Visitor
*   role_project_security: Security Administrator
*   role_project_deploy: Deploy
*   role_project_owner: Workspace Owner
*   role_project_data_analyst: Data Analyst
*   role_project_pe: O\\\\&M
*   role_project_erd: Model Designer', example='role_project_guest'),
        name?: string(name='Name', description='The name of the role.', example='Visitors'),
        type?: string(name='Type', description='The type of the role. Valid values:

*   UserCustom: custom role
*   System: built-in role', example='System'),
      }
    ](name='Roles', description='The roles that are assigned to the member in the workspace.'),
    status?: string(name='Status', description='The status of the member.

*   Normal
*   Forbidden', example='Normal'),
    userId?: string(name='UserId', description='The ID of the account used by the member in the workspace.', example='123422344899'),
    userName?: string(name='UserName'),
  }(name='ProjectMember', description='The details about the member in the workspace.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model GetProjectMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectMemberResponseBody(name='body'),
}

/**
 * @summary Queries the details about a member in a workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetProjectMemberRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetProjectMemberResponse
 */
async function getProjectMemberWithOptions(request: GetProjectMemberRequest, runtime: Util.RuntimeOptions): GetProjectMemberResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetProjectMember',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details about a member in a workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetProjectMemberRequest
 * @return GetProjectMemberResponse
 */
async function getProjectMember(request: GetProjectMemberRequest): GetProjectMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProjectMemberWithOptions(request, runtime);
}

model GetProjectRoleRequest {
  code?: string(name='Code', description='The code of the role in the DataWorks workspace. Valid values:

*   role_project_admin: workspace administrator
*   role_project_dev: developer
*   role_project_dg_admin: data governance administrator
*   role_project_guest: visitor
*   role_project_security: security administrator
*   role_project_deploy: deployer
*   role_project_owner: workspace owner
*   role_project_data_analyst: data analyst
*   role_project_pe: O\\\\&M engineer
*   role_project_erd: model designer

This parameter is required.', example='role_project_guest'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10002'),
}

model GetProjectRoleResponseBody = {
  projectRole?: {
    code?: string(name='Code', description='The code of the role in the DataWorks workspace.', example='role_project_guest'),
    name?: string(name='Name', description='The name of the role in the DataWorks workspace.', example='Visitors'),
    projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='10002'),
    type?: string(name='Type', description='The type of the role in the DataWorks workspace. Valid values:

*   UserCustom: user-defined role
*   System: system role', example='System'),
  }(name='ProjectRole', description='The role in the DataWorks workspace.'),
  requestId?: string(name='RequestId', description='The request ID.', example='82F28E60-CF48-5EDF-AB25-D806847B97D1'),
}

model GetProjectRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectRoleResponseBody(name='body'),
}

/**
 * @summary Queries the information about a role in a DataWorks workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetProjectRoleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetProjectRoleResponse
 */
async function getProjectRoleWithOptions(request: GetProjectRoleRequest, runtime: Util.RuntimeOptions): GetProjectRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.code)) {
    query['Code'] = request.code;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProjectRole',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a role in a DataWorks workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetProjectRoleRequest
 * @return GetProjectRoleResponse
 */
async function getProjectRole(request: GetProjectRoleRequest): GetProjectRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProjectRoleWithOptions(request, runtime);
}

model GetRerunWorkflowInstancesResultRequest {
  operationId?: string(name='OperationId', description='The operation ID used to asynchronously query the result of the workflow instance rerun. This value is obtained from the RerunWorkflowInstances operation.

This parameter is required.', example='e15ad21c-b0e9-4792-8f55-b037xxxxxxxx'),
}

model GetRerunWorkflowInstancesResultResponseBody = {
  requestId?: string(name='RequestId', description='The request ID, used for log tracing and troubleshooting.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  result?: {
    failureMessage?: string(name='FailureMessage', description='The failure message. Returned if the rerun fails.', example='Invalid Param xxx'),
    status?: string(name='Status', description='The status. NotRun Success Failure', example='Success'),
  }(name='Result', description='The result of the workflow instance rerun.'),
}

model GetRerunWorkflowInstancesResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRerunWorkflowInstancesResultResponseBody(name='body'),
}

/**
 * @summary Query the result of asynchronous workflow instance reruns.
 *
 * @param request GetRerunWorkflowInstancesResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRerunWorkflowInstancesResultResponse
 */
async function getRerunWorkflowInstancesResultWithOptions(request: GetRerunWorkflowInstancesResultRequest, runtime: Util.RuntimeOptions): GetRerunWorkflowInstancesResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.operationId)) {
    query['OperationId'] = request.operationId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRerunWorkflowInstancesResult',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query the result of asynchronous workflow instance reruns.
 *
 * @param request GetRerunWorkflowInstancesResultRequest
 * @return GetRerunWorkflowInstancesResultResponse
 */
async function getRerunWorkflowInstancesResult(request: GetRerunWorkflowInstancesResultRequest): GetRerunWorkflowInstancesResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRerunWorkflowInstancesResultWithOptions(request, runtime);
}

model GetResourceRequest {
  id?: long(name='Id', description='The ID of the file resource.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000'),
}

model GetResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='E871F6C0-2EFF-5790-A00D-C57543EEXXXX'),
  resource?: {
    createTime?: long(name='CreateTime', description='The time when the file resource was created. This value is a UNIX timestamp.', example='1700539206000'),
    id?: long(name='Id', description='The ID of the file resource.', example='860438872620113XXXX'),
    modifyTime?: long(name='ModifyTime', description='The time when the file resource was last modified. This value is a UNIX timestamp.', example='1700539206000'),
    name?: string(name='Name', description='The name of the file resource.', example='OpenAPI_Test_Resource. py'),
    owner?: string(name='Owner', description='The owner of the file resource.', example='110755000425XXXX'),
    projectId?: long(name='ProjectId', description='The ID of the workspace to which the file resource belongs.', example='10000'),
    spec?: string(name='Spec', description='The FlowSpec field information about the file resource. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow).', example='{
    "version": "1.1.0",
    "kind": "Resource",
    "spec": {
        "fileResources": [
            {
                "name": "OpenAPI_Test_Resource.py",
                "id": "631478864897630XXXX",
                "script": {
                    "content": "",
                    "path": "XX/OpenAPI_Test/Resource_Test/OpenAPI_Test_Resource.py",
                    "runtime": {
                        "command": "ODPS_PYTHON"
                    }
                },
                "type": "python",
                "file": {
                    "storage": {}
                },
                "datasource": {
                    "name": "odps_first",
                    "type": "odps"
                },
                "metadata": {
                    "owner": "110755000425XXXX"
                }
            }
        ]
    }
}'),
  }(name='Resource', description='The information about the file resource.'),
}

model GetResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceResponseBody(name='body'),
}

/**
 * @summary Queries the information about a file resource.
 *
 * @param request GetResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetResourceResponse
 */
async function getResourceWithOptions(request: GetResourceRequest, runtime: Util.RuntimeOptions): GetResourceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a file resource.
 *
 * @param request GetResourceRequest
 * @return GetResourceResponse
 */
async function getResource(request: GetResourceRequest): GetResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceWithOptions(request, runtime);
}

model GetResourceGroupRequest {
  id?: string(name='Id', description='The ID of the resource group.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
}

model GetResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  resourceGroup?: {
    aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='The ID of the Alibaba Cloud resource group.', example='rg-aek2kqofrgXXXXX'),
    aliyunResourceTags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='key'),
        value?: string(name='Value', description='The tag value.', example='value'),
      }
    ](name='AliyunResourceTags', description='The tags.'),
    createTime?: long(name='CreateTime', description='The time when the resource group was created. The value is a 64-bit timestamp.', example='1727055811000'),
    createUser?: string(name='CreateUser', description='The ID of the account that is used to create the resource group.', example='11075500042XXXXX'),
    defaultVpcId?: string(name='DefaultVpcId', description='The ID of the virtual private cloud (VPC) with which the resource group is associated by default.', example='vpc-m2et4f3oc8msfbccXXXXX'),
    defaultVswitchId?: string(name='DefaultVswitchId', description='The ID of the vSwitch with which the resource group is associated by default.', example='vsw-uf8usrhs7hjd9amsXXXXX'),
    id?: string(name='Id', description='The ID of the resource group.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
    name?: string(name='Name', description='The name of the resource group.', example='common_resource_group'),
    orderInstanceId?: string(name='OrderInstanceId', description='The instance ID of the order that is used to create the resource group.', example='c442b330-3b10-4584-959e-736e4edXXXXX'),
    paymentType?: string(name='PaymentType', description='The billing method of the resource group. Valid values: PrePaid and PostPaid. The value PrePaid indicates the subscription billing method, and the value PostPaid indicates the pay-as-you-go billing method.', example='PrePaid'),
    remark?: string(name='Remark', description='The description of the resource group.', example='Create a common resource group for common tasks'),
    resourceGroupType?: string(name='ResourceGroupType', description='The type of the resource group. Valid values:

*   CommonV2: Serverless resource group.
*   ExclusiveDataIntegration: Exclusive resource group for Data Integration.
*   ExclusiveScheduler: Exclusive resource group for scheduling.
*   ExclusiveDataService: Exclusive resource group for DataService Studio.', example='CommonV2'),
    spec?: {
      amount?: int32(name='Amount', description='The number of resources in the resource group.', example='1'),
      standard?: string(name='Standard', description='The number of compute units (CUs) in the resource group.', example='2CU'),
    }(name='Spec', description='The specifications of the resource group.'),
    status?: string(name='Status', description='The status of the resource group. Valid values:

*   Normal: The resource group is running or in use.
*   Stop: The resource group is expired.
*   Deleted: The resource group is released or destroyed.
*   Creating: The resource group is being created.
*   CreateFailed: The resource group fails to be created.
*   Updating: The resource group is being scaled in or out, or the configurations of the resource group are being changed.
*   UpdateFailed: The resource group fails to be scaled out or upgraded.
*   Deleting: The resource group is being released or destroyed.
*   DeleteFailed: The resource group fails to be released or destroyed.
*   Timeout: The operations that are performed on the resource group time out.
*   Freezed: The resource group is frozen.
*   Starting: The resource group is being started.', example='Normal'),
  }(name='ResourceGroup', description='The details about the resource group.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceGroupResponseBody(name='body'),
}

/**
 * @summary Queries the information about a resource group based on its ID.
 *
 * @description You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 *
 * @param request GetResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetResourceGroupResponse
 */
async function getResourceGroupWithOptions(request: GetResourceGroupRequest, runtime: Util.RuntimeOptions): GetResourceGroupResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourceGroup',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a resource group based on its ID.
 *
 * @description You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 *
 * @param request GetResourceGroupRequest
 * @return GetResourceGroupResponse
 */
async function getResourceGroup(request: GetResourceGroupRequest): GetResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceGroupWithOptions(request, runtime);
}

model GetRouteRequest {
  id?: long(name='Id', description='The route ID.

This parameter is required.', example='1000'),
}

model GetRouteResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  route?: {
    createTime?: long(name='CreateTime', description='The time when the route was created. The value is a 64-bit timestamp.', example='1727055811000'),
    destinationCidr?: string(name='DestinationCidr', description='The CIDR block of the destination-based route.', example='192.168.0.0/16'),
    id?: long(name='Id', description='The route ID.', example='1000'),
    networkId?: long(name='NetworkId', description='The network ID.', example='1000'),
    resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
    resourceId?: string(name='ResourceId', description='The network resource ID.', example='ns-679XXXXX'),
  }(name='Route', description='The information about the route.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRouteResponseBody(name='body'),
}

/**
 * @summary Queries the information about a route based on its ID.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetRouteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRouteResponse
 */
async function getRouteWithOptions(request: GetRouteRequest, runtime: Util.RuntimeOptions): GetRouteResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRoute',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a route based on its ID.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetRouteRequest
 * @return GetRouteResponse
 */
async function getRoute(request: GetRouteRequest): GetRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRouteWithOptions(request, runtime);
}

model GetSchemaRequest {
  id?: string(name='Id', description='The schema ID. You can call the ListSchemas operation to query the ID. For more information, see [Concepts related to metadata entities](https://help.aliyun.com/document_detail/2880092.html).

The common format of this parameter is `${Entity type}:${Instance ID or escaped URL}:${Catalog identifier}:${Database name}:${Schema name}`. If a level does not exist, specify an empty string as a placeholder.

>  For MaxCompute tables, specify an empty string at the Instance ID level and a MaxCompute project name at the Database name level. Make sure that the three-layer model is enabled for the MaxCompute project.

You can configure this parameter in one of the following formats based on your data source type:

`maxcompute-schema:::project_name:schema_name` (Three-layer model is enabled for the MaxCompute project.)

`holo-schema:instance_id::database_name:schema_name`

> \\\\
`instance_id`: the ID of a Hologres instance\\\\
`database_name`: the name of a database\\\\
`project_name`: the name of a MaxCompute project\\\\
`schema_name`: the name of a schema

This parameter is required.', example='maxcompute-schema:123456XXX::test_project:default
holo-schema:h-abc123xxx::test_db:test_schema'),
}

model GetSchemaResponseBody = {
  requestId?: string(name='RequestId', example='A89B5D9D-74EA-XXXXXX'),
  schema?: Schema(name='Schema'),
  success?: boolean(name='Success', example='true'),
}

model GetSchemaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSchemaResponseBody(name='body'),
}

/**
 * @summary Queries the information about a schema in Data Map. You can call this API operation to query the information only about MaxCompute and Hologres schemas.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this API operation to query the information only about MaxCompute and Hologres schemas.
 *
 * @param request GetSchemaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSchemaResponse
 */
async function getSchemaWithOptions(request: GetSchemaRequest, runtime: Util.RuntimeOptions): GetSchemaResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSchema',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a schema in Data Map. You can call this API operation to query the information only about MaxCompute and Hologres schemas.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this API operation to query the information only about MaxCompute and Hologres schemas.
 *
 * @param request GetSchemaRequest
 * @return GetSchemaResponse
 */
async function getSchema(request: GetSchemaRequest): GetSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSchemaWithOptions(request, runtime);
}

model GetTableRequest {
  id?: string(name='Id', description='The table ID. For more information, see [Concepts related to metadata entities](https://help.aliyun.com/document_detail/2880092.html).

The common format of this parameter is `${Entity type}:${Instance ID or escaped URL}:${Catalog identifier}:${Database name}:${Schema name}:${Table name}`. If a level does not exist, specify an empty string as a placeholder.

>  For MaxCompute and DLF data sources, specify an empty string at the Instance ID level.

>  For StarRocks data sources, specify a catalog name at the Catalog identifier level. For DLF data sources, specify a catalog ID at the Catalog identifier level. Other types of data sources do not support the Catalog identifier level. You can specify an empty string as a placeholder.

>  For MaxCompute data sources, specify a MaxCompute project name at the Database name level. If the three-layer model is enabled for your MaxCompute project, you must specify a schema name at the Schema name level. Otherwise, you can specify an empty string as a placeholder.

You can configure this parameter in one of the following formats based on your data source type:

`maxcompute-table:::project_name:[schema_name]:table_name`

`dlf-table::catalog_id:database_name::table_name`

`hms-table:instance_id::database_name::table_name`

`holo-table:instance_id::database_name:schema_name:table_name`

`mysql-table:(instance_id|encoded_jdbc_url)::database_name::table_name`

> \\\\
`instance_id`: the ID of an instance. If the related data source is added to DataWorks in Alibaba Cloud instance mode, you must configure this parameter.\\\\
`encoded_jdbc_url`: the JDBC connection string that is URL-encoded. If the related data source is added to DataWorks in connection string mode, you must configure this parameter.\\\\
`catalog_id`: the ID of a DLF catalog.\\\\
`project_name`: the name of a MaxCompute project.\\\\
`database_name`: the name of a database.\\\\
`schema_name`: the name of a schema. For a MaxCompute table, if the three-layer model is enabled for the MaxCompute project to which the table belongs, you must configure this parameter. Otherwise, you can specify an empty string for schema_name as a placeholder.\\\\
`table_name`: the name of a table.

This parameter is required.', example='maxcompute-table:123456XXX::test_project::test_tbl
dlf-table:123456XXX:test_catalog:test_db::test_tbl
hms-table:c-abc123xxx::test_db::test_tbl
holo-table:h-abc123xxx::test_db:test_schema:test_tbl'),
  includeBusinessMetadata?: boolean(name='IncludeBusinessMetadata', example='true'),
}

model GetTableResponseBody = {
  requestId?: string(name='RequestId', example='7B3435F4-2D91-XXX'),
  success?: boolean(name='Success', example='true'),
  table?: Table(name='Table'),
}

model GetTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableResponseBody(name='body'),
}

/**
 * @summary 获取表详情
 *
 * @param request GetTableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTableResponse
 */
async function getTableWithOptions(request: GetTableRequest, runtime: Util.RuntimeOptions): GetTableResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTable',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取表详情
 *
 * @param request GetTableRequest
 * @return GetTableResponse
 */
async function getTable(request: GetTableRequest): GetTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTableWithOptions(request, runtime);
}

model GetTaskRequest {
  id?: long(name='Id', description='The task ID.

This parameter is required.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
}

model GetTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  task?: {
    baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
    createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
    createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
    dataSource?: {
      name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
    }(name='DataSource', description='The information about the associated data source.'),
    dependencies?: [ 
      {
        type?: string(name='Type', description='The dependency type. Valid values:

*   CrossCycleDependsOnChildren: cross-cycle dependency on level-1 descendant nodes
*   CrossCycleDependsOnSelf: cross-cycle dependency on the current node
*   CrossCycleDependsOnOtherNode: cross-cycle dependency on other nodes
*   Normal: same-cycle scheduling dependency', example='Normal'),
        upstreamOutput?: string(name='UpstreamOutput', description='The identifier of the output of the ancestor task. This parameter is returned only if `same-cycle scheduling dependencies` and the node input are configured.', example='pre.odps_sql_demo_0'),
        upstreamTaskId?: string(name='UpstreamTaskId', description='The ancestor task ID. This parameter is returned only if `cross-cycle scheduling dependencies` or `same-cycle scheduling dependencies` and the node input are not configured.', example='1234'),
      }
    ](name='Dependencies', description='The dependency information.'),
    description?: string(name='Description', description='The description of the task.', example='test'),
    envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
    id?: long(name='Id', description='The instance ID.', example='1234'),
    inputs?: {
      variables?: [ 
        {
          name?: string(name='Name', description='The name of the variable.', example='key1'),
          type?: string(name='Type', description='The type. Valid values:

*   Constant: constant
*   PassThrough: node output
*   System: variable
*   NodeOutput: script output', example='Constant'),
          value?: string(name='Value', description='The value of the variable.', example='Value1'),
        }
      ](name='Variables', description='The variables.'),
    }(name='Inputs', description='The input information.', nullable=false),
    instanceMode?: string(name='InstanceMode', description='The instance generation mode. Valid values:

*   T+1
*   Immediately', example='T+1'),
    modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
    modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
    name?: string(name='Name', description='The name of the task.', example='SQL node'),
    outputs?: {
      taskOutputs?: [ 
        {
          output?: string(name='Output', description='The identifier of the output.', example='pre.odps_sql_demo_0'),
        }
      ](name='TaskOutputs', description='The task outputs.'),
      variables?: [ 
        {
          name?: string(name='Name', description='The name of the variable.', example='key1'),
          type?: string(name='Type', description='The type. Valid values:

*   Constant: constant
*   PassThrough: node output
*   System: variable
*   NodeOutput: script output', example='Constant'),
          value?: string(name='Value', description='The value of the variable.', example='value1'),
        }
      ](name='Variables', description='The variables.'),
    }(name='Outputs', description='The output information.'),
    owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
    priority?: int32(name='Priority', description='The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
    projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. This parameter is deprecated and replaced by the EnvType parameter. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod', deprecated=true),
    projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
    rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: seconds.', example='60'),
    rerunMode?: string(name='RerunMode', description='The rerun mode. Valid values:

*   AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to be run.
*   FailureAllowed: The task can be rerun only after it fails to be run.
*   AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to be run.', example='AllAllowed'),
    rerunTimes?: int32(name='RerunTimes', description='The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.', example='3'),
    runtimeResource?: {
      cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
      image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
    }(name='RuntimeResource', description='The configurations of the runtime environment, such as the resource group information.'),
    script?: {
      content?: string(name='Content', description='The script content.', example='echo "helloWorld"'),
      parameters?: string(name='Parameters', description='The script parameters.', example='para1=$bizdate'),
    }(name='Script', description='The script information.'),
    subTasks?: {
      subTasks?: [ 
        {
          baselineId?: long(name='BaselineId', description='The baseline ID.', example='The baseline ID.'),
          createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
          createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
          dataSource?: {
            name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
          }(name='DataSource', description='The information about the associated data source.'),
          description?: string(name='Description', description='The description of the task.', example='test'),
          envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
          id?: long(name='Id', description='The task ID.', example='1234'),
          modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
          modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
          name?: string(name='Name', description='The name of the task.', example='SQL node'),
          owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
          priority?: int32(name='Priority', description='The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
          projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. This parameter is deprecated and replaced by the EnvType parameter. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod', deprecated=true),
          projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
          rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: seconds.', example='180'),
          rerunMode?: string(name='RerunMode', description='The rerun mode. Valid values:

*   AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to be run.
*   FailureAllowed: The task can be rerun only after it fails to be run.
*   AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to be run.', example='AllAllowed'),
          rerunTimes?: int32(name='RerunTimes', description='The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.', example='3'),
          runtimeResource?: {
            cu?: string(name='Cu', description='The default number of CUs configured for task running.', example='0.25'),
            image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
            resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
          }(name='RuntimeResource', description='The runtime environment configuration of the task, such as the resource group.'),
          timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='3600'),
          trigger?: {
            cron?: string(name='Cron', description='The CRON expression of the task. This parameter takes effect only if the Type parameter is set to Scheduler.', example='00 00 00 * * ?'),
            endTime?: string(name='EndTime', description='The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='9999-01-01 00:00:00'),
            recurrence?: string(name='Recurrence', description='The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler. Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
            startTime?: string(name='StartTime', description='The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='1970-01-01 00:00:00'),
            type?: string(name='Type', description='The trigger type. Valid values:

*   Scheduler: periodic scheduling
*   Manual: manual scheduling', example='Scheduler'),
          }(name='Trigger', description='The method to trigger task scheduling.'),
          type?: string(name='Type', description='The type of the task.', example='ODPS_SQL'),
          workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the task belongs.', example='1234'),
        }
      ](name='SubTasks', description='The subtasks.'),
      type?: string(name='Type', description='The type of the subtask. Valid values:

*   DoWhile: do-while node
*   Combined: node group
*   ForEach: for-each node', example='Combined'),
    }(name='SubTasks', description='The configurations of the subtasks, such as a do-while node.'),
    tags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='key1'),
        value?: string(name='Value', description='The tag value.', example='value1'),
      }
    ](name='Tags', description='The tags.'),
    timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='3600'),
    trigger?: {
      cron?: string(name='Cron', description='The CRON expression of the task. This parameter takes effect only if the Type parameter is set to Scheduler.', example='00 00 00 * * ?'),
      endTime?: string(name='EndTime', description='The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='9999-01-01 00:00:00'),
      recurrence?: string(name='Recurrence', description='The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler. Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
      startTime?: string(name='StartTime', description='The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='1970-01-01 00:00:00'),
      type?: string(name='Type', description='The trigger type. Valid values:

*   Scheduler: periodic scheduling
*   Manual: manual scheduling', example='Scheduler'),
    }(name='Trigger', description='The method to trigger task scheduling.'),
    type?: string(name='Type', description='The type of the task.', example='ODPS_SQL'),
    workflowId?: long(name='WorkflowId', description='The workflow ID.', example='1234'),
  }(name='Task', description='The details of the task.'),
}

model GetTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskResponseBody(name='body'),
}

/**
 * @summary Queries the information about a task.
 *
 * @param request GetTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTaskResponse
 */
async function getTaskWithOptions(request: GetTaskRequest, runtime: Util.RuntimeOptions): GetTaskResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTask',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a task.
 *
 * @param request GetTaskRequest
 * @return GetTaskResponse
 */
async function getTask(request: GetTaskRequest): GetTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskWithOptions(request, runtime);
}

model GetTaskInstanceRequest {
  id?: long(name='Id', description='The instance ID.

This parameter is required.', example='1234'),
}

model GetTaskInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  taskInstance?: {
    baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
    bizdate?: long(name='Bizdate', description='The data timestamp.', example='1710239005403'),
    createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
    createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
    dataSource?: {
      name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
    }(name='DataSource', description='The information about the associated data source.'),
    description?: string(name='Description', description='The description.', example='test'),
    finishedTime?: long(name='FinishedTime', description='The time when the instance finished running.', example='1710239005403'),
    id?: long(name='Id', description='The instance ID.', example='1234'),
    inputs?: {
      variables?: [ 
        {
          name?: string(name='Name', description='The name of the variable.', example='Key1'),
          type?: string(name='Type', description='The type. Valid values:

*   Constant: constant
*   PassThrough: node output
*   System: variable
*   NodeOutput: script output', example='Constant'),
          value?: string(name='Value', description='The value of the variable.', example='Value1'),
        }
      ](name='Variables', description='The variables.'),
    }(name='Inputs', description='The input information.'),
    modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
    modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
    outputs?: {
      taskOutputs?: [ 
        {
          output?: string(name='Output', description='The output identifier.', example='pre.odps_sql_demo_0'),
        }
      ](name='TaskOutputs', description='The task outputs.'),
      variables?: [ 
        {
          name?: string(name='Name', description='The name of the variable.', example='key1'),
          type?: string(name='Type', description='The type. Valid values:

*   Constant: constant
*   PassThrough: node output
*   System: variable
*   NodeOutput: script output', example='Constant'),
          value?: string(name='Value', description='The value of the variable.', example='value1'),
        }
      ](name='Variables', description='The variables.'),
    }(name='Outputs', description='The output information.'),
    owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
    periodNumber?: int32(name='PeriodNumber', description='The sequence number of the cycle. This parameter indicates the cycle of the task instance on the current day.', example='1'),
    priority?: int32(name='Priority', description='The task priority. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
    projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
    projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
    rerunMode?: string(name='RerunMode', description='The rerun mode. Valid values:

*   AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
*   AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.', example='AllAllowed'),
    runNumber?: int32(name='RunNumber', description='The number of times the instance is run. By default, the value starts from 1.', example='1'),
    runtime?: {
      gateway?: string(name='Gateway', description='The host for running.', example='cn-shanghai.1.2'),
      processId?: string(name='ProcessId', description='The instance run ID.', example='T3_123'),
    }(name='Runtime', description='The runtime information about the instance.'),
    runtimeResource?: {
      cu?: string(name='Cu', description='The default number of CUs configured for task running.', example='0.25'),
      image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
    }(name='RuntimeResource', description='The information about the resource group with which the instance is associated.'),
    script?: {
      content?: string(name='Content', description='The script content.', example='echo "helloWorld"'),
      parameters?: string(name='Parameters', description='The script parameters.', example='para1=$bizdate'),
    }(name='Script', description='The script information.'),
    startedTime?: long(name='StartedTime', description='The time when the instance started to run.', example='1710239005403'),
    status?: string(name='Status', description='The status of the instance. Valid values:

*   NotRun: The instance is not run.
*   Running: The instance is running.
*   WaitTime: The instance is waiting for the scheduling time to arrive.
*   CheckingCondition: Branch conditions are being checked for the instance.
*   WaitResource: The instance is waiting for resources.
*   Failure: The instance fails to be run.
*   Success: The instance is successfully run.
*   Checking: Data quality is being checked for the instance.', example='Success'),
    tags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='key1'),
        value?: string(name='Value', description='The tag value.', example='value1'),
      }
    ](name='Tags', description='The tags of the task.'),
    taskId?: long(name='TaskId', description='The ID of the task for which the instance is generated.', example='1234'),
    taskName?: string(name='TaskName', description='The name of the task for which the instance is generated.', example='SQL node'),
    taskType?: string(name='TaskType', description='The type of the task for which the instance is generated.', example='ODPS_SQL'),
    timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.

Note: The value of this parameter is rounded up by hour.', example='1'),
    triggerRecurrence?: string(name='TriggerRecurrence', description='The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler. Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
    triggerTime?: long(name='TriggerTime', description='The scheduling time.', example='1710239005403'),
    triggerType?: string(name='TriggerType', description='The method to trigger instance scheduling. The value of the Trigger.Type parameter in the response of the GetTask operation is used. Valid values:

*   Scheduler
*   Manual', example='Scheduler'),
    waitingResourceTime?: long(name='WaitingResourceTime', example='1710239005403'),
    waitingTriggerTime?: long(name='WaitingTriggerTime', example='1710239005403'),
    workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs.', example='1234'),
    workflowInstanceId?: long(name='WorkflowInstanceId', description='The workflow instance ID.', example='1234'),
    workflowInstanceType?: string(name='WorkflowInstanceType', description='The type of the workflow instance. Valid values:

*   SmokeTest
*   SupplementData
*   Manual
*   ManualWorkflow
*   Normal
*   ManualFlow', example='Normal'),
    workflowName?: string(name='WorkflowName', description='The name of the workflow to which the instance belongs.', example='Test workflow'),
  }(name='TaskInstance', description='The details of the task instance.'),
}

model GetTaskInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskInstanceResponseBody(name='body'),
}

/**
 * @summary Queries the information about an instance.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetTaskInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTaskInstanceResponse
 */
async function getTaskInstanceWithOptions(request: GetTaskInstanceRequest, runtime: Util.RuntimeOptions): GetTaskInstanceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTaskInstance',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about an instance.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetTaskInstanceRequest
 * @return GetTaskInstanceResponse
 */
async function getTaskInstance(request: GetTaskInstanceRequest): GetTaskInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskInstanceWithOptions(request, runtime);
}

model GetTaskInstanceLogRequest {
  id?: long(name='Id', description='The instance ID.

This parameter is required.', example='1234'),
  runNumber?: int32(name='RunNumber', description='The sequence number of an instance run. Minimum value: 1. By default, the latest run is used.', example='1'),
}

model GetTaskInstanceLogResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  taskInstanceLog?: string(name='TaskInstanceLog', description='The run log of the instance.', example='This is running log'),
}

model GetTaskInstanceLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskInstanceLogResponseBody(name='body'),
}

/**
 * @summary Queries the run log generated during a specific run of an instance.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetTaskInstanceLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTaskInstanceLogResponse
 */
async function getTaskInstanceLogWithOptions(request: GetTaskInstanceLogRequest, runtime: Util.RuntimeOptions): GetTaskInstanceLogResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTaskInstanceLog',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the run log generated during a specific run of an instance.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetTaskInstanceLogRequest
 * @return GetTaskInstanceLogResponse
 */
async function getTaskInstanceLog(request: GetTaskInstanceLogRequest): GetTaskInstanceLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskInstanceLogWithOptions(request, runtime);
}

model GetWorkflowRequest {
  envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
  id?: long(name='Id', description='The workflow ID.

This parameter is required.', example='1234'),
}

model GetWorkflowResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  workflow?: {
    clientUniqueCode?: string(name='ClientUniqueCode', description='The unique code of the client. This parameter is used to create a workflow asynchronously and implement the idempotence of the workflow. If you do not specify this parameter when you create the workflow, the system automatically generates a unique code. The unique code is uniquely associated with the workflow ID. If you specify this parameter when you update or delete the workflow, the value of this parameter must be the unique code that is used to create the workflow.', example='Workflow_0bc5213917368545132902xxxxxxxx'),
    createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
    createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
    dependencies?: [ 
      {
        type?: string(name='Type', description='The scheduling dependency type. Valid values:

*   CrossCycleDependsOnChildren: cross-cycle dependency on the level-1 descendant nodes of a node
*   CrossCycleDependsOnSelf: cross-cycle dependency on the current node
*   CrossCycleDependsOnOtherNode: cross-cycle dependency on other nodes
*   Normal: same-cycle scheduling dependency', example='Normal'),
        upstreamOutput?: string(name='UpstreamOutput', description='The identifier of the output of the ancestor task. This parameter is returned only if `same-cycle scheduling dependencies` and the node input are configured.', example='pre.odps_sql_demo_0'),
        upstreamTaskId?: long(name='UpstreamTaskId', description='The ancestor task ID. This parameter is returned only if `cross-cycle scheduling dependencies` or `same-cycle scheduling dependencies` and the node input are not configured.', example='1234'),
      }
    ](name='Dependencies', description='The dependency information.'),
    description?: string(name='Description', description='The description of the workflow.', example='Test workflow'),
    envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
    id?: long(name='Id', description='The workflow ID.', example='1234'),
    modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
    modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
    name?: string(name='Name', description='The name of the workflow.', example='Workflow'),
    outputs?: {
      taskOutputs?: [ 
        {
          output?: string(name='Output', description='The identifier of the output.', example='pre.odps_sql_demo_0'),
        }
      ](name='TaskOutputs', description='The task outputs.'),
    }(name='Outputs', description='The output information.'),
    owner?: string(name='Owner', description='The account ID of the workflow owner.', example='1000'),
    parameters?: string(name='Parameters', description='The parameters.', example='para1=$bizdate para2=$[yyyymmdd]'),
    projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
    tags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='key1'),
        value?: string(name='Value', description='The tag value.', example='value1'),
      }
    ](name='Tags', description='The tags.'),
    tasks?: [ 
      {
        baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
        clientUniqueCode?: string(name='ClientUniqueCode', description='The unique code of the client. This parameter is used to create a task asynchronously and implement the idempotence of the task. If you do not specify this parameter when you create the task, the system automatically generates a unique code. The unique code is uniquely associated with the task ID. If you specify this parameter when you update or delete the task, the value of this parameter must be the unique code that is used to create the task.', example='Task_0bc5213917368545132902xxxxxxxx'),
        createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
        createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
        }(name='DataSource', description='The information about the associated data source.'),
        description?: string(name='Description', description='The description of the task.', example='Test'),
        envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod
*   Dev', example='Prod'),
        id?: long(name='Id', description='The task ID.', example='1234'),
        modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
        name?: string(name='Name', description='The name of the task.', example='SQL node'),
        owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
        priority?: int32(name='Priority', description='The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
        rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: seconds.', example='60'),
        rerunMode?: string(name='RerunMode', description='The rerun mode. Valid values:

*   AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.
*   AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to run.', example='AllAllowed'),
        rerunTimes?: int32(name='RerunTimes', description='The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.', example='3'),
        runtimeResource?: {
          cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
          image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
          resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
        }(name='RuntimeResource', description='The configurations of the runtime environment, such as the resource group information.'),
        timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='3600'),
        triggerRecurrence?: string(name='TriggerRecurrence', description='The running mode of the task after it is triggered. Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
        type?: string(name='Type', description='The type of the task.', example='ODPS_SQL'),
        workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the task belongs.', example='1234'),
      }
    ](name='Tasks', description='The tasks.'),
    trigger?: {
      cron?: string(name='Cron', description='The CRON expression. This parameter takes effect only if the Type parameter is set to Scheduler.', example='00 00 00 * * ?'),
      endTime?: string(name='EndTime', description='The end time of the time range during which the workflow is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='1970-01-01 00:00:00'),
      recurrence?: string(name='Recurrence', description='The running mode of the workflow after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler. Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
      startTime?: string(name='StartTime', description='The start time of the time range during which the workflow is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='1970-01-01 00:00:00'),
      type?: string(name='Type', description='The trigger type. Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
    }(name='Trigger', description='The trigger method.'),
  }(name='Workflow', description='The information about the workflow.'),
}

model GetWorkflowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkflowResponseBody(name='body'),
}

/**
 * @summary Queries the information about a workflow.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetWorkflowRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWorkflowResponse
 */
async function getWorkflowWithOptions(request: GetWorkflowRequest, runtime: Util.RuntimeOptions): GetWorkflowResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWorkflow',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a workflow.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetWorkflowRequest
 * @return GetWorkflowResponse
 */
async function getWorkflow(request: GetWorkflowRequest): GetWorkflowResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWorkflowWithOptions(request, runtime);
}

model GetWorkflowDefinitionRequest {
  id?: long(name='Id', description='The ID of the workflow.

This parameter is required.', example='860438872620113XXXX'),
  includeScriptContent?: boolean(name='IncludeScriptContent', description='查询结果是否包含工作流内部节点的脚本内容（对于内容较多的节点，可能存在较长的网络传输延时）。', example='false'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000'),
}

model GetWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F2BDD628-8A21-5BD1-B930-1A2D5989XXXX'),
  workflowDefinition?: {
    createTime?: long(name='CreateTime', description='The time when the workflow was created. This value is a UNIX timestamp.', example='1708481905000'),
    id?: long(name='Id', description='The ID of the workflow.', example='463497880880954XXXX'),
    modifyTime?: long(name='ModifyTime', description='The time when the workflow was last modified. This value is a UNIX timestamp.', example='1708481905000'),
    name?: string(name='Name', description='The name of the workflow.', example='OpenAPI test workflow Demo'),
    owner?: string(name='Owner', description='The owner of the workflow.', example='110755000425XXXX'),
    projectId?: long(name='ProjectId', description='The ID of the workspace to which the workflow belongs.', example='307XXX'),
    spec?: string(name='Spec', description='The FlowSpec field information about the workflow. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow/).', example='{
    "metadata": {
        "tenantId": "52425742456XXXX",
        "projectId": "307XXXX",
        "uuid": "463497880880954XXXX"
    },
    "kind": "CycleWorkflow",
    "version": "1.1.0",
    "spec": {
        "name": "OpenAPI_Test_Workflow_Demo",
        "id": "463497880880954XXXX",
        "type": "CycleWorkflow",
        "owner": "110755000425XXXX",
        "workflows": [
            {
                "script": {
                    "path": "XX/OpenAPI_Test/Workflow_Test/OpenAPI_Test_Workflow_Demo",
                    "runtime": {
                        "command": "WORKFLOW"
                    },
                    "id": "698002781368644XXXX"
                },
                "id": "463497880880954XXXX",
                "trigger": {
                    "type": "Scheduler",
                    "id": "652567824470354XXXX",
                    "cron": "00 02 00 * * ?",
                    "startTime": "1970-01-01 00:00:00",
                    "endTime": "9999-01-01 00:00:00",
                    "timezone": "Asia/Shanghai",
                    "delaySeconds": 0
                },
                "strategy": {
                    "timeout": 0,
                    "instanceMode": "T+1",
                    "rerunMode": "Allowed",
                    "rerunTimes": 3,
                    "rerunInterval": 180000,
                    "failureStrategy": "Break"
                },
                "name": "OpenAPI_Test_Workflow_Demo",
                "owner": "110755000425XXXX",
                "metadata": {
                    "owner": "110755000425XXXX",
                    "ownerName": "XXXX@test.XXXX.com",
                    "tenantId": "52425742456XXXX",
                    "project": {
                        "mode": "STANDARD",
                        "projectId": "307303",
                        "projectIdentifier": "lwttest_standard",
                        "projectName": "XXXX",
                        "projectOwnerId": "110755000425XXXX",
                        "simple": false,
                        "tenantId": "52425742456XXXX"
                    },
                    "projectId": "307XXXX"
                },
                "inputs": {},
                "outputs": {
                    "nodeOutputs": [
                        {
                            "data": "463497880880954XXXX",
                            "artifactType": "NodeOutput",
                            "refTableName": "OpenAPI_Test_Workflow_Demo",
                            "isDefault": true
                        }
                    ]
                },
                "nodes": [],
                "dependencies": []
            }
        ]
    }
}'),
    workflowId?: long(name='WorkflowId', description='The ID of the workflow on the scheduling side after publishing.', example='700006657495'),
  }(name='WorkflowDefinition', description='The information about the workflow.'),
}

model GetWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary Queries the information about a workflow.
 *
 * @param request GetWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWorkflowDefinitionResponse
 */
async function getWorkflowDefinitionWithOptions(request: GetWorkflowDefinitionRequest, runtime: Util.RuntimeOptions): GetWorkflowDefinitionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a workflow.
 *
 * @param request GetWorkflowDefinitionRequest
 * @return GetWorkflowDefinitionResponse
 */
async function getWorkflowDefinition(request: GetWorkflowDefinitionRequest): GetWorkflowDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWorkflowDefinitionWithOptions(request, runtime);
}

model GetWorkflowInstanceRequest {
  id?: long(name='Id', description='The ID of the workflow instance.

This parameter is required.', example='1234'),
}

model GetWorkflowInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  workflowInstance?: {
    bizDate?: long(name='BizDate', description='The data timestamp.', example='1710239005403'),
    createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
    createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
    envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod
*   Dev', example='Prod'),
    finishedTime?: long(name='FinishedTime', description='The time when the instance finished running.', example='1710239005403'),
    id?: long(name='Id', description='The ID of the workflow instance.', example='1234'),
    modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
    modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
    name?: string(name='Name', description='The name of the workflow instance.', example='WorkInstance1'),
    projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
    startedTime?: long(name='StartedTime', description='The time when the instance started to run.', example='1710239005403'),
    status?: string(name='Status', description='The status of the workflow instance. Valid values:

*   NotRun: The instance is not run.
*   Running: The instance is running.
*   WaitTime: The instance is waiting for the scheduling time to arrive.
*   CheckingCondition: Branch conditions are being checked for the instance.
*   WaitResource: The instance is waiting for resources.
*   Failure: The instance fails to be run.
*   Success: The instance is successfully run.
*   Checking: Data quality is being checked for the instance.', example='Success'),
    tags?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Tags'),
    type?: string(name='Type', description='The type of the workflow instance. Valid values:

*   Normal
*   Manual
*   SmokeTest
*   SupplementData
*   ManualWorkflow', example='Normal'),
    workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs.', example='1234'),
    workflowParameters?: string(name='WorkflowParameters'),
  }(name='WorkflowInstance', description='The information about the workflow instance.'),
}

model GetWorkflowInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkflowInstanceResponseBody(name='body'),
}

/**
 * @summary Queries the information about a workflow instance.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetWorkflowInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWorkflowInstanceResponse
 */
async function getWorkflowInstanceWithOptions(request: GetWorkflowInstanceRequest, runtime: Util.RuntimeOptions): GetWorkflowInstanceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWorkflowInstance',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a workflow instance.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetWorkflowInstanceRequest
 * @return GetWorkflowInstanceResponse
 */
async function getWorkflowInstance(request: GetWorkflowInstanceRequest): GetWorkflowInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWorkflowInstanceWithOptions(request, runtime);
}

model GrantMemberProjectRolesRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='105149'),
  roleCodes?: [ string ](name='RoleCodes', description='The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.

You must configure this parameter to specify the roles that you want to assign to members in the workspace.

This parameter is required.'),
  userId?: string(name='UserId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the IDs of the accounts used by the members in the workspace.

This parameter is required.', example='123422344899'),
}

model GrantMemberProjectRolesShrinkRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='105149'),
  roleCodesShrink?: string(name='RoleCodes', description='The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.

You must configure this parameter to specify the roles that you want to assign to members in the workspace.

This parameter is required.'),
  userId?: string(name='UserId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the IDs of the accounts used by the members in the workspace.

This parameter is required.', example='123422344899'),
}

model GrantMemberProjectRolesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='2d9ced66-38ef-4923-baf6-391dd3a7e656'),
}

model GrantMemberProjectRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantMemberProjectRolesResponseBody(name='body'),
}

/**
 * @summary Assigns roles to members in a workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq GrantMemberProjectRolesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GrantMemberProjectRolesResponse
 */
async function grantMemberProjectRolesWithOptions(tmpReq: GrantMemberProjectRolesRequest, runtime: Util.RuntimeOptions): GrantMemberProjectRolesResponse {
  Util.validateModel(tmpReq);
  var request = new GrantMemberProjectRolesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.roleCodes)) {
    request.roleCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roleCodes, 'RoleCodes', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.roleCodesShrink)) {
    body['RoleCodes'] = request.roleCodesShrink;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GrantMemberProjectRoles',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Assigns roles to members in a workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GrantMemberProjectRolesRequest
 * @return GrantMemberProjectRolesResponse
 */
async function grantMemberProjectRoles(request: GrantMemberProjectRolesRequest): GrantMemberProjectRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantMemberProjectRolesWithOptions(request, runtime);
}

model ImportCertificateRequest {
  certificateFile?: string(name='CertificateFile', description='This parameter is required.', example='-'),
  description?: string(name='Description', example='This is a file'),
  name?: string(name='Name', description='This parameter is required.', example='ca1.crt'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='106560'),
}

model ImportCertificateAdvanceRequest {
  certificateFileObject?: readable(name='CertificateFile', description='This parameter is required.', example='-'),
  description?: string(name='Description', example='This is a file'),
  name?: string(name='Name', description='This parameter is required.', example='ca1.crt'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='106560'),
}

model ImportCertificateResponseBody = {
  id?: long(name='Id', example='676303114031776'),
  requestId?: string(name='RequestId', example='7C352CB7-CD88-50CF-9D0D-E81BDF020E7F'),
}

model ImportCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportCertificateResponseBody(name='body'),
}

/**
 * @summary Imports a certificate file.
 *
 * @param request ImportCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ImportCertificateResponse
 */
async function importCertificateWithOptions(request: ImportCertificateRequest, runtime: Util.RuntimeOptions): ImportCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certificateFile)) {
    query['CertificateFile'] = request.certificateFile;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportCertificate',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Imports a certificate file.
 *
 * @param request ImportCertificateRequest
 * @return ImportCertificateResponse
 */
async function importCertificate(request: ImportCertificateRequest): ImportCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return importCertificateWithOptions(request, runtime);
}

async function importCertificateAdvance(request: ImportCertificateAdvanceRequest, runtime: Util.RuntimeOptions): ImportCertificateResponse {
  // Step 0: init client
  var credentialModel: Credential.CredentialModel = null;
  if (Util.isUnset(@credential)) {
    throw {
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.empty(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'dataworks-public',
    RegionId = @regionId,
  };
  var authReq = new OpenApi.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApi.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new FileForm.FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var importCertificateReq = new ImportCertificateRequest{};
  OpenApiUtil.convert(request, importCertificateReq);

  if(!Util.isUnset(request.certificateFileObject)) {
    var tmpResp0: any = authClient.callApi(authParams, authReq, runtime);
    authResponse = Util.assertAsMap(tmpResp0);
    tmpBody = Util.assertAsMap(authResponse['body']);
    useAccelerate = Util.assertAsBoolean(tmpBody['UseAccelerate']);
    authResponseBody = Util.stringifyMapValue(tmpBody);
    fileObj = new FileForm.FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.certificateFileObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    importCertificateReq.certificateFile = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var importCertificateResp = importCertificateWithOptions(importCertificateReq, runtime);
  return importCertificateResp;
}

model ImportWorkflowDefinitionRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='123456'),
  spec?: string(name='Spec', description='The FlowSpec field information about the workflow. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow/).

This parameter is required.', example='{
    "version": "1.1.0",
    "kind": "CycleWorkflow",
    "spec": {
        "name": "Asynchronous_Workflow_Creation_Test",
        "id": "632647691239009XXXX",
        "type": "CycleWorkflow",
        "workflows": [
            {
                "script": {
                    "path": "XX/OpenAPI_Test/Workflow_Test/Asynchronous_Workflow_Creation_Test",
                    "runtime": {
                        "command": "WORKFLOW"
                    }
                },
                "id": "632647691239009XXXX",
                "trigger": {
                    "type": "Scheduler",
                    "cron": "00 03 00 * * ?",
                    "startTime": "1970-01-01 00:00:00",
                    "endTime": "9999-01-01 00:00:00",
                    "timezone": "Asia/Shanghai",
                    "delaySeconds": 0
                },
                "strategy": {
                    "timeout": 0,
                    "instanceMode": "T+1",
                    "rerunMode": "Allowed",
                    "rerunTimes": 3,
                    "rerunInterval": 180000,
                    "failureStrategy": "Break"
                },
                "name": "Asynchronous_Workflow_Creation_Test",
                "inputs": {},
                "outputs": {
                    "nodeOutputs": [
                        {
                            "data": "632647691239009XXXX",
                            "artifactType": "NodeOutput",
                            "refTableName": "Asynchronous_Workflow_Creation_Test"
                        }
                    ]
                },
                "nodes": [
                    {
                        "recurrence": "Normal",
                        "id": "742981001612325XXXX",
                        "timeout": 0,
                        "instanceMode": "T+1",
                        "rerunMode": "Allowed",
                        "rerunTimes": 3,
                        "rerunInterval": 180000,
                        "script": {
                            "path": "XX/OpenAPI_Test/Workflow_Test/Asynchronous_Workflow_Creation_Test/111",
                            "runtime": {
                                "command": "ODPS_SQL"
                            },
                            "content": "select now();\\\\n"
                        },
                        "trigger": {
                            "type": "Scheduler",
                            "cron": "00 24 00 * * ?",
                            "startTime": "1970-01-01 00:00:00",
                            "endTime": "9999-01-01 00:00:00",
                            "timezone": "Asia/Shanghai",
                            "delaySeconds": 0
                        },
                        "name": "111",
                        "inputs": {},
                        "outputs": {
                            "nodeOutputs": [
                                {
                                    "data": "742981001612325XXXX",
                                    "artifactType": "NodeOutput",
                                    "refTableName": "111"
                                }
                            ]
                        }
                    },
                    {
                        "recurrence": "Normal",
                        "id": "595182137303408XXXX",
                        "timeout": 0,
                        "instanceMode": "T+1",
                        "rerunMode": "Allowed",
                        "rerunTimes": 3,
                        "rerunInterval": 180000,
                        "script": {
                            "path": "XX/OpenAPI_Test/Workflow_Test/Asynchronous_Workflow_Creation_Test/222",
                            "runtime": {
                                "command": "ODPS_SQL"
                            },
                            "content": "select now();\\\\n select 1;"
                        },
                        "trigger": {
                            "type": "Scheduler",
                            "cron": "00 00 00 * * ?",
                            "startTime": "1970-01-01 00:00:00",
                            "endTime": "9999-01-01 00:00:00",
                            "timezone": "Asia/Shanghai",
                            "delaySeconds": 0
                        },
                        "name": "222",
                        "inputs": {},
                        "outputs": {
                            "nodeOutputs": [
                                {
                                    "data": "595182137303408XXXX",
                                    "artifactType": "NodeOutput",
                                    "refTableName": "222"                                
                                }
                            ]
                        }
                    }
                ],
                "dependencies": [
                    {
                        "nodeId": "595182137303408XXXX",
                        "depends": [
                            {
                                "type": "Normal",
                                "output": "742981001612325XXXX",
                                "refTableName": "111"
                            }
                        ]
                    }
                ]
            }
        ]
    }
}'),
}

model ImportWorkflowDefinitionResponseBody = {
  asyncJob?: {
    completed?: boolean(name='Completed', description='Indicates whether the asynchronous task is complete.', example='false'),
    createTime?: long(name='CreateTime', description='The time when the asynchronous task was created. This value is a UNIX timestamp.', example='1706581425000'),
    error?: string(name='Error', description='The error message returned if the asynchronous task fails.', example='target folder already exists: XXXX'),
    id?: string(name='Id', description='The ID of the asynchronous task.', example='1234567691239009XXXX'),
    progress?: int32(name='Progress', description='The progress of the asynchronous task. Valid values: 0 to 100.', example='0'),
    response?: string(name='Response', description='The response.

>  The workflow ID is returned.', example='632647691239009XXXX'),
    status?: string(name='Status', description='The status of the asynchronous task.

Valid values:

*   Running: The asynchronous task is running.
*   Success: The asynchronous task is complete.
*   Fail: The asynchronous task fails.
*   Cancel: The asynchronous task is canceled.', example='Running'),
    type?: string(name='Type', description='The type of the asynchronous task.

Valid values:

*   Create: The asynchronous task is used to create an object.
*   Cancel: The asynchronous task is used to cancel an operation.', example='Create'),
  }(name='AsyncJob', description='The status information of the asynchronous task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7C352CB7-CD88-50CF-9D0D-E81BDF020E7F'),
}

model ImportWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary Imports a workflow and its child nodes that are specified by the FlowSpec field to DataStudio.
 *
 * @description > 
 * *   You cannot use this API operation to import multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system imports only the first specified workflow.
 * *   ImportWorkflowDefinition is an asynchronous operation. After you send a request, an asynchronous task is generated, and the system returns the ID of the asynchronous task. You can call the GetJobStatus operation to query the status of the asynchronous task.
 *
 * @param request ImportWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ImportWorkflowDefinitionResponse
 */
async function importWorkflowDefinitionWithOptions(request: ImportWorkflowDefinitionRequest, runtime: Util.RuntimeOptions): ImportWorkflowDefinitionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ImportWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Imports a workflow and its child nodes that are specified by the FlowSpec field to DataStudio.
 *
 * @description > 
 * *   You cannot use this API operation to import multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system imports only the first specified workflow.
 * *   ImportWorkflowDefinition is an asynchronous operation. After you send a request, an asynchronous task is generated, and the system returns the ID of the asynchronous task. You can call the GetJobStatus operation to query the status of the asynchronous task.
 *
 * @param request ImportWorkflowDefinitionRequest
 * @return ImportWorkflowDefinitionResponse
 */
async function importWorkflowDefinition(request: ImportWorkflowDefinitionRequest): ImportWorkflowDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return importWorkflowDefinitionWithOptions(request, runtime);
}

model ListAlertRulesRequest {
  name?: string(name='Name', description='The name of the rule.', example='error_rule'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the owner of the rule.', example='1933790683****'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1.

This parameter is required.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Maximum value: 100.

This parameter is required.', example='10'),
  receiver?: string(name='Receiver', description='The ID of the Alibaba Cloud account used by the alert recipient.', example='1933790683****'),
  taskIds?: [ long ](name='TaskIds', description='The IDs of the scheduling tasks.'),
  types?: [ string ](name='Types', description='The alert triggering condition.'),
}

model ListAlertRulesShrinkRequest {
  name?: string(name='Name', description='The name of the rule.', example='error_rule'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the owner of the rule.', example='1933790683****'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1.

This parameter is required.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Maximum value: 100.

This parameter is required.', example='10'),
  receiver?: string(name='Receiver', description='The ID of the Alibaba Cloud account used by the alert recipient.', example='1933790683****'),
  taskIdsShrink?: string(name='TaskIds', description='The IDs of the scheduling tasks.'),
  typesShrink?: string(name='Types', description='The alert triggering condition.'),
}

model ListAlertRulesResponseBody = {
  pagingInfo?: {
    alertRules?: [ 
      {
        enabled?: boolean(name='Enabled', description='Indicates whether the rule is enabled.', example='true'),
        id?: long(name='Id', description='The rule ID.', example='22125'),
        name?: string(name='Name', description='The name of the rule.', example='error_test'),
        owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the owner of the rule.', example='1933790683****'),
        triggerCondition?: {
          extension?: {
            cycleUnfinished?: {
              cycleAndTime?: [ 
                {
                  cycleId?: int32(name='CycleId', description='The ID of the scheduling cycle of the instance. Valid values: [1,288].', example='1'),
                  time?: string(name='Time', description='The latest completion time of the instance within the scheduling cycle. The time is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='01:00'),
                }
              ](name='CycleAndTime', description='The configurations of the scheduling cycle and timeout period of the instance.'),
            }(name='CycleUnfinished', description='The configuration for an alert of the CycleUnfinished type.'),
            error?: {
              autoRerunAlertEnabled?: boolean(name='AutoRerunAlertEnabled', description='Indicates whether an alert is triggered if a batch synchronization task is automatically rerun upon a failure.', example='false'),
              streamTaskIds?: [ long ](name='StreamTaskIds', description='The IDs of the real-time computing tasks. This parameter is required when you monitor real-time computing tasks.'),
            }(name='Error', description='The configuration for an alert of the Error type.'),
            instanceErrorCount?: {
              count?: int32(name='Count', description='The maximum number of instances on which an error occurs. Valid values: [1,10000].', example='10'),
            }(name='InstanceErrorCount', description='The configuration for an alert of the InstanceErrorCount type.'),
            instanceErrorPercentage?: {
              percentage?: int32(name='Percentage', description='The maximum percentage of instances on which an error occurs in the workspace to the total number of instances. Valid values: [1-100].', example='10'),
            }(name='InstanceErrorPercentage', description='The configuration for an alert of the InstanceErrorPercentage type.'),
            instanceTransferFluctuate?: {
              percentage?: int32(name='Percentage', description='The maximum percentage of fluctuation in the number of auto triggered node instances that are generated in your workspace. Valid values: [1-100].', example='10'),
              trend?: string(name='Trend', description='The way in which the number of auto triggered node instances that are generated in your workspace fluctuates. Valid values:

*   abs: the absolute value. The number of instances increases or decreases.
*   increase: The number of instances increases.
*   decrease: The number of instances decreases.', example='abs'),
            }(name='InstanceTransferFluctuate', description='The configuration for an alert of the InstanceTransferFluctuate type.'),
            timeout?: {
              timeoutInMinutes?: int32(name='TimeoutInMinutes', description='The timeout period. Unit: minutes.', example='10'),
            }(name='Timeout', description='The configuration for an alert of the Timeout type.'),
            unFinished?: {
              unFinishedTime?: string(name='UnFinishedTime', description='The latest completion time of the instance. The period is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='12:00'),
            }(name='UnFinished', description='The configuration for an alert of the UnFinished type.'),
          }(name='Extension', description='The extended information about the rule. This parameter is required for specific types of alerts.'),
          target?: {
            allowTasks?: [ long ](name='AllowTasks', description='The nodes that are not to be monitored.'),
            ids?: [ long ](name='Ids', description='The IDs of monitored objects.'),
            type?: string(name='Type', description='The type of the monitored objects. Valid values:

*   Task: node
*   Baseline: baseline
*   Project: workspace
*   BizProcess: workflow', example='Task'),
          }(name='Target', description='The monitored objects.'),
          type?: string(name='Type', description='The alert type. Valid values:

*   Finished: An instance is successfully run.
*   UnFinished: An instance does not finish running before a specified point in time.
*   Error: An error occurs on an instance.
*   CycleUnfinished: An instance does not finish running as expected within a specific cycle.
*   Timeout: An instance times out.
*   InstanceTransferComplete: An instance is generated by the auto triggered node.
*   InstanceTransferFluctuate: The number of generated instances fluctuates.
*   ExhaustedError: An error persists after an instance is automatically rerun.
*   InstanceKeyword: An instance with errors contains specified keywords.
*   InstanceErrorCount: The number of instances on which an error occurs reaches a specified threshold.
*   InstanceErrorPercentage: The proportion of instances on which an error occurs in the workspace to the total number of instances reaches a specified threshold.
*   ResourceGroupPercentage: The usage rate of the resource group reaches a specified threshold.
*   ResourceGroupWaitCount: The number of instances that are waiting for resources in the resource group reaches a specified threshold.', example='Error'),
        }(name='TriggerCondition', description='The alert triggering condition.'),
      }
    ](name='AlertRules', description='The rules.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='5'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='A6C6B486-E3A2-5D52-9E76-D9380485D946'),
}

model ListAlertRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAlertRulesResponseBody(name='body'),
}

/**
 * @summary Queries a list of custom monitoring alert rules.
 *
 * @param tmpReq ListAlertRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAlertRulesResponse
 */
async function listAlertRulesWithOptions(tmpReq: ListAlertRulesRequest, runtime: Util.RuntimeOptions): ListAlertRulesResponse {
  Util.validateModel(tmpReq);
  var request = new ListAlertRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.taskIds)) {
    request.taskIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.taskIds, 'TaskIds', 'json');
  }
  if (!Util.isUnset(tmpReq.types)) {
    request.typesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.types, 'Types', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.owner)) {
    query['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.receiver)) {
    query['Receiver'] = request.receiver;
  }
  if (!Util.isUnset(request.taskIdsShrink)) {
    query['TaskIds'] = request.taskIdsShrink;
  }
  if (!Util.isUnset(request.typesShrink)) {
    query['Types'] = request.typesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAlertRules',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of custom monitoring alert rules.
 *
 * @param request ListAlertRulesRequest
 * @return ListAlertRulesResponse
 */
async function listAlertRules(request: ListAlertRulesRequest): ListAlertRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAlertRulesWithOptions(request, runtime);
}

model ListBusinessRequest {
  keyword?: string(name='Keyword', example='my'),
  pageNumber?: int32(name='PageNumber', description='This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='This parameter is required.', example='10'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model ListBusinessResponseBody = {
  data?: {
    business?: [ 
      {
        businessId?: long(name='BusinessId', example='3000001'),
        businessName?: string(name='BusinessName'),
        description?: string(name='Description'),
        owner?: string(name='Owner', example='34824327****'),
        projectId?: long(name='ProjectId', example='10000'),
        useType?: string(name='UseType', example='NORMAL'),
      }
    ](name='Business'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='13'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model ListBusinessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBusinessResponseBody(name='body'),
}

/**
 * @param request ListBusinessRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListBusinessResponse
 */
async function listBusinessWithOptions(request: ListBusinessRequest, runtime: Util.RuntimeOptions): ListBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListBusiness',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request ListBusinessRequest
 * @return ListBusinessResponse
 */
async function listBusiness(request: ListBusinessRequest): ListBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBusinessWithOptions(request, runtime);
}

model ListCatalogsRequest {
  comment?: string(name='Comment', example='this is a comment'),
  name?: string(name='Name', example='abc'),
  order?: string(name='Order', example='Asc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  parentMetaEntityId?: string(name='ParentMetaEntityId', description='The parent entity ID. For more information, see [Concepts related to metadata entities](https://help.aliyun.com/document_detail/2880092.html).

Only DLF and StarRocks data sources support this parameter.

*   For DLF data sources, you can call this API operation to query all catalogs. In this case, you must set the `ParentMetaEntityId` parameter to `dlf`.
*   For StarRocks data sources, you can call this API operation to query the catalogs in a specific instance. In this case, you can configure the `ParentMetaEntityId` parameter in the `starrocks:(instance_id|encoded_jdbc_url)` format.

> \\\\
`instance_id`: the ID of an instance. If the related data source is added to DataWorks in Alibaba Cloud instance mode, you must configure this parameter.\\\\
`encoded_jdbc_url`: the JDBC connection string that is URL-encoded. If the related data source is added to DataWorks in connection string mode, you must configure this parameter.

This parameter is required.', example='dlf
starrocks:c-abc123xxx'),
  sortBy?: string(name='SortBy', example='CreateTime'),
  types?: [ string ](name='Types'),
}

model ListCatalogsShrinkRequest {
  comment?: string(name='Comment', example='this is a comment'),
  name?: string(name='Name', example='abc'),
  order?: string(name='Order', example='Asc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  parentMetaEntityId?: string(name='ParentMetaEntityId', description='The parent entity ID. For more information, see [Concepts related to metadata entities](https://help.aliyun.com/document_detail/2880092.html).

Only DLF and StarRocks data sources support this parameter.

*   For DLF data sources, you can call this API operation to query all catalogs. In this case, you must set the `ParentMetaEntityId` parameter to `dlf`.
*   For StarRocks data sources, you can call this API operation to query the catalogs in a specific instance. In this case, you can configure the `ParentMetaEntityId` parameter in the `starrocks:(instance_id|encoded_jdbc_url)` format.

> \\\\
`instance_id`: the ID of an instance. If the related data source is added to DataWorks in Alibaba Cloud instance mode, you must configure this parameter.\\\\
`encoded_jdbc_url`: the JDBC connection string that is URL-encoded. If the related data source is added to DataWorks in connection string mode, you must configure this parameter.

This parameter is required.', example='dlf
starrocks:c-abc123xxx'),
  sortBy?: string(name='SortBy', example='CreateTime'),
  typesShrink?: string(name='Types'),
}

model ListCatalogsResponseBody = {
  pagingInfo?: {
    catalogs?: [
      Catalog
    ](name='Catalogs'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='1'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='317CD7D0-AB36-XXXXXX'),
  success?: boolean(name='Success', example='true'),
}

model ListCatalogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCatalogsResponseBody(name='body'),
}

/**
 * @summary 查询数据目录列表
 *
 * @param tmpReq ListCatalogsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCatalogsResponse
 */
async function listCatalogsWithOptions(tmpReq: ListCatalogsRequest, runtime: Util.RuntimeOptions): ListCatalogsResponse {
  Util.validateModel(tmpReq);
  var request = new ListCatalogsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.types)) {
    request.typesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.types, 'Types', 'simple');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCatalogs',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询数据目录列表
 *
 * @param request ListCatalogsRequest
 * @return ListCatalogsResponse
 */
async function listCatalogs(request: ListCatalogsRequest): ListCatalogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCatalogsWithOptions(request, runtime);
}

model ListCertificatesRequest {
  createUser?: string(name='CreateUser', description='The ID of the user who created the certificate files.', example='1107550004253538'),
  endCreateTime?: long(name='EndCreateTime', description='The time when the certificate file was created. You can call this operation to query the files that are created before the time. Unit: milliseconds.', example='1593877765000'),
  name?: string(name='Name', description='The name of the certificate file. Fuzzy match by file name is supported.', example='xm_create_test'),
  order?: string(name='Order', description='The order in which you want to sort the certificate files. Valid values: Desc: descending order ASC: ascending order Default value: Asc', example='Asc'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the workspace to which the certificate file belongs.

This parameter is required.', example='10000'),
  sortBy?: string(name='SortBy', description='The field used to sort the certificate files. Valid values: CreateTime Id Name Default value: Id', example='Id'),
  startCreateTime?: long(name='StartCreateTime', description='The time when the certificate file was created. You can call this operation to query the files that are created after the time. Unit: milliseconds.', example='1730217600000'),
}

model ListCertificatesResponseBody = {
  pagingInfo?: {
    certificates?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the certificate file was created. This value is a UNIX timestamp.', example='1730217600000'),
        createUser?: string(name='CreateUser', description='The ID of the user who created the certificate file.', example='1107550004253538'),
        description?: string(name='Description', description='The description.', example='This is a file'),
        fileSizeInBytes?: long(name='FileSizeInBytes', description='The size of the certificate file, in bytes.', example='1024'),
        id?: long(name='Id', description='The ID of the certificate file.', example='676303114031776'),
        name?: string(name='Name', description='The name of the certificate file.', example='ca1.crt'),
      }
    ](name='Certificates', description='The certificate files.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='ecb967ec-c137-48****'),
}

model ListCertificatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCertificatesResponseBody(name='body'),
}

/**
 * @summary Queries a list of certificate files.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Deploy, Develop, Visitor, Workspace Owner, O\\&M, Model Designer, Security Administrator, Data Analyst, OpenPlatform Administrator, and Data Governance Administrator.
 *
 * @param request ListCertificatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCertificatesResponse
 */
async function listCertificatesWithOptions(request: ListCertificatesRequest, runtime: Util.RuntimeOptions): ListCertificatesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCertificates',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of certificate files.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Deploy, Develop, Visitor, Workspace Owner, O\\&M, Model Designer, Security Administrator, Data Analyst, OpenPlatform Administrator, and Data Governance Administrator.
 *
 * @param request ListCertificatesRequest
 * @return ListCertificatesResponse
 */
async function listCertificates(request: ListCertificatesRequest): ListCertificatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCertificatesWithOptions(request, runtime);
}

model ListColumnsRequest {
  comment?: string(name='Comment', example='test comment'),
  name?: string(name='Name', example='test_table'),
  order?: string(name='Order', example='Asc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  sortBy?: string(name='SortBy', example='Position'),
  tableId?: string(name='TableId', description='The ID of the table to which the columns belong. You can call the ListTables operation to query the ID. For more information, see [Concepts related to metadata entities](https://help.aliyun.com/document_detail/2880092.html).

This parameter is required.', example='maxcompute-column:11075xxxx::test_project:test_schema:test_table'),
}

model ListColumnsResponseBody = {
  pagingInfo?: {
    columns?: [
      Column
    ](name='Columns'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='1'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='D1E2E5BC-xxxx-xxxx-xxxx-xxxxxx'),
  success?: boolean(name='Success', example='true'),
}

model ListColumnsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListColumnsResponseBody(name='body'),
}

/**
 * @summary 查询字段列表
 *
 * @param request ListColumnsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListColumnsResponse
 */
async function listColumnsWithOptions(request: ListColumnsRequest, runtime: Util.RuntimeOptions): ListColumnsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListColumns',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询字段列表
 *
 * @param request ListColumnsRequest
 * @return ListColumnsResponse
 */
async function listColumns(request: ListColumnsRequest): ListColumnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listColumnsWithOptions(request, runtime);
}

model ListComponentsRequest {
  name?: string(name='Name', example='xm_create_test'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1000'),
  projectId?: long(name='ProjectId', example='100001'),
}

model ListComponentsResponseBody = {
  pagingInfo?: {
    components?: [ 
      {
        componentId?: string(name='ComponentId', example='12312313123'),
        createTime?: string(name='CreateTime', description='Use the UTC time format: yyyy-MM-ddTHH:mm:ss.SSSZ', example='2023-03-13 16:35:59'),
        description?: string(name='Description', description='对组件的描述', example='vpc peering management_staging'),
        inputs?: [ 
          {
            defaultValue?: string(name='DefaultValue', description='输入参数的默认值', example='mdb.shard.2x.2xlarge.d'),
            description?: string(name='Description', description='输入参数的描述信息', example='None'),
            name?: string(name='Name', description='输入参数的名称', example='auto_updateAlertRule_test_bULIRo'),
            type?: string(name='Type', description='输入参数的数据类型', example='string'),
          }
        ](name='Inputs', description='组件的输入参数列表'),
        modifyTime?: string(name='ModifyTime', description='Use the UTC time format: yyyy-MM-ddTHH:mm:ss.SSSZ', example='2023-11-30T13:30:58Z'),
        name?: string(name='Name', description='代表资源名称的资源属性字段', example='auto_updateAlertRule_test_lJd81f'),
        outputs?: [ 
          {
            defaultValue?: string(name='DefaultValue', description='输出参数的默认值', example='32000'),
            description?: string(name='Description', description='输出参数的描述信息', example='zdy'),
            name?: string(name='Name', description='输出参数的名称', example='auto_updateAlertRule_test_bULIRo'),
            type?: string(name='Type', description='输出参数的数据类型', example='string'),
          }
        ](name='Outputs', description='组件的输出参数列表'),
        owner?: string(name='Owner', description='组件责任人', example='252675537980665607'),
        projectId?: long(name='ProjectId', example='199925'),
        script?: {
          id?: string(name='Id', description='ID', example='348100'),
          path?: string(name='Path', description='脚本路径', example='/'),
          runtime?: {
            command?: string(name='Command', description='脚本所属类型', example='SQL_COMPONENT'),
          }(name='Runtime', description='脚本的运行时信息'),
        }(name='Script', description='工作流的脚本信息'),
      }
    ](name='Components'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='952795279527ab****'),
}

model ListComponentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListComponentsResponseBody(name='body'),
}

/**
 * @summary 获取组件列表
 *
 * @param request ListComponentsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListComponentsResponse
 */
async function listComponentsWithOptions(request: ListComponentsRequest, runtime: Util.RuntimeOptions): ListComponentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListComponents',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取组件列表
 *
 * @param request ListComponentsRequest
 * @return ListComponentsResponse
 */
async function listComponents(request: ListComponentsRequest): ListComponentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listComponentsWithOptions(request, runtime);
}

model ListCrawlerTypesResponseBody = {
  crawlerTypes?: [
    CrawlerType
  ](name='CrawlerTypes'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model ListCrawlerTypesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCrawlerTypesResponseBody(name='body'),
}

/**
 * @summary 查询元数据采集器类型列表
 *
 * @param request ListCrawlerTypesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCrawlerTypesResponse
 */
async function listCrawlerTypesWithOptions(runtime: Util.RuntimeOptions): ListCrawlerTypesResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListCrawlerTypes',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询元数据采集器类型列表
 *
 * @return ListCrawlerTypesResponse
 */
async function listCrawlerTypes(): ListCrawlerTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCrawlerTypesWithOptions(runtime);
}

model ListDIAlarmRulesRequest {
  DIAlarmRuleId?: long(name='DIAlarmRuleId', description='The ID of the alert rule. If you leave this parameter empty, all alert rules of the task are queried.', example='34988'),
  jobId?: long(name='JobId', description='The ID of the task for which alert rules are configured.', example='1000001'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
}

model ListDIAlarmRulesResponseBody = {
  pagingInfo?: {
    DIJobAlarmRules?: [ 
      {
        DIAlarmRuleId?: long(name='DIAlarmRuleId', description='This parameter is deprecated. Use the Id parameter instead.', example='72402', deprecated=true),
        DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='32594'),
        description?: string(name='Description', description='The description of the alert rule.', example='rule descrition'),
        enabled?: boolean(name='Enabled', description='Indicates whether the alert rule is enabled. Valid values: True and False.', example='True'),
        id?: long(name='Id', description='The ID of the alert rule.', example='72402'),
        metricType?: string(name='MetricType', description='The metric type in the alert rule. Valid values:

*   Heartbeat
*   FailoverCount
*   Delay
*   DdlReport
*   ResourceUtilization', example='Heartbeat'),
        name?: string(name='Name', description='The name of the alert rule.', example='rule_name'),
        notificationSettings?: {
          inhibitionInterval?: long(name='InhibitionInterval', description='This parameter is deprecated and replaced by the MuteInterval parameter.', example='5', deprecated=true),
          muteInterval?: long(name='MuteInterval', description='The duration of the alert suppression interval. Unit: minutes.', example='5'),
          notificationChannels?: [ 
            {
              channels?: [ string ](name='Channels', description='The alert notification methods.'),
              severity?: string(name='Severity', description='The severity level. Valid values:

*   Warning
*   Critical', example='Critical'),
            }
          ](name='NotificationChannels', description='The alert notification methods.'),
          notificationReceivers?: [ 
            {
              receiverType?: string(name='ReceiverType', description='The recipient type. Valid values: AliyunUid, DingToken, FeishuToken, and WebHookUrl.', example='DingToken'),
              receiverValues?: [ string ](name='ReceiverValues', description='The recipient.

*   If the value of the ReceiverType parameter is AliyunUid, the value of this parameter is the Alibaba Cloud account ID of a user.
*   If the value of the ReceiverType parameter is DingToken, the value of this parameter is the token of a DingTalk chatbot.'),
            }
          ](name='NotificationReceivers', description='The settings of alert notification recipients.'),
        }(name='NotificationSettings', description='The alert notification method and recipient settings.'),
        triggerConditions?: [ 
          {
            ddlReportTags?: [ string ](name='DdlReportTags', description='This parameter is deprecated and replaced by the DdlTypes parameter.', deprecated=true),
            ddlTypes?: [ string ](name='DdlTypes', description='The types of DDL operations for which the alert rule takes effect. This parameter is returned only if the MetricType parameter is set to DdlReport.'),
            duration?: long(name='Duration', description='The time interval for alert calculation. Unit: minutes.', example='1'),
            severity?: string(name='Severity', description='The severity level. Valid values:

*   Warning
*   Critical', example='Critical'),
            threshold?: long(name='Threshold', description='The alert threshold.

*   If the alert rule is for task status, no threshold is used.
*   If the alert rule is for failovers, the threshold is the number of failovers.
*   If the alert rule is for latency, the threshold is the latency duration, in seconds.', example='5'),
          }
        ](name='TriggerConditions', description='The conditions that are used to trigger the alert rule.'),
      }
    ](name='DIJobAlarmRules', description='The alert rules.'),
    pageNumber?: long(name='PageNumber', description='The page number. Pages start from page 1.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='90'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='74C2FECD-5B3A-554A-BCF5-351A36DE9815'),
}

model ListDIAlarmRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIAlarmRulesResponseBody(name='body'),
}

/**
 * @summary Views alert rules configured for a synchronization task.
 *
 * @param request ListDIAlarmRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDIAlarmRulesResponse
 */
async function listDIAlarmRulesWithOptions(request: ListDIAlarmRulesRequest, runtime: Util.RuntimeOptions): ListDIAlarmRulesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDIAlarmRules',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Views alert rules configured for a synchronization task.
 *
 * @param request ListDIAlarmRulesRequest
 * @return ListDIAlarmRulesResponse
 */
async function listDIAlarmRules(request: ListDIAlarmRulesRequest): ListDIAlarmRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDIAlarmRulesWithOptions(request, runtime);
}

model ListDIJobEventsRequest {
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='11588'),
  endTime?: long(name='EndTime', description='The end of the time range to query.

This parameter is required.', example='1717971005'),
  eventType?: string(name='EventType', description='The type of event that you want to query. Valid values: Failover, Alarm, and DDL.

This parameter is required.', example='Alarm'),
  pageNumber?: long(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query.

This parameter is required.', example='1716971005'),
}

model ListDIJobEventsResponseBody = {
  pagingInfo?: {
    DIJobEvent?: [ 
      {
        action?: string(name='Action', description='The processing result of the DDL event. Valid values: Critical, Ignore, Normal, and Warning.', example='Ignore'),
        channels?: string(name='Channels', description='The alert notification method. Valid values: Phone, Mail, Sms, Ding, and Webhook.', example='Phone'),
        createTime?: string(name='CreateTime', description='The time when the event was created.', example='1663573162'),
        detail?: string(name='Detail', description='The alert details.', example='aggregator:avg [**] for 5 minutes, service maybe abnormal'),
        dstSql?: string(name='DstSql', description='The DDL statement of the destination table.', example='alter table table2 ***'),
        dstTable?: string(name='DstTable', description='The name of the destination table.', example='table2'),
        failoverMessage?: string(name='FailoverMessage', description='The error logs for failovers.', example='2024-05-29 15:11:31,377 [main] INFO com.*.**.di.core.metrics.:21 []  {****} 
2024-05-29 15:11:31,384 [main] INFO *.aliyun.*.di.*.*.metrics.*:27 [] - Open MarioDiReporter 
2024-05-29 15:11:33,248 [flink-akka.*.*-dispatcher-17] INFO'),
        id?: string(name='Id', description='The event ID.', example='1'),
        severity?: string(name='Severity', description='The severity level of the alert. Valid values: Warning and Critical.', example='Warning'),
        srcSql?: string(name='SrcSql', description='The DDL statement of the source table.', example='alter table table1 ***'),
        srcTable?: string(name='SrcTable', description='The name of the source table.', example='table1'),
        status?: string(name='Status', description='The sending status of an alert notification. Valid values: Success, Fail, and Silence.', example='Success'),
        type?: string(name='Type', description='The type of the alert event.

*   Heartbeat
*   Delay
*   FailoverCount
*   DdlReport
*   ResourceUtilization', example='Delay'),
      }
    ](name='DIJobEvent', description='The events returned. The value of this parameter is an array.'),
    pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='2524'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='645F6D68-9C29-5961-80B1-BDD4B794C22D'),
}

model ListDIJobEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIJobEventsResponseBody(name='body'),
}

/**
 * @summary Queries events for a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDIJobEventsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDIJobEventsResponse
 */
async function listDIJobEventsWithOptions(request: ListDIJobEventsRequest, runtime: Util.RuntimeOptions): ListDIJobEventsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDIJobEvents',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries events for a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDIJobEventsRequest
 * @return ListDIJobEventsResponse
 */
async function listDIJobEvents(request: ListDIJobEventsRequest): ListDIJobEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDIJobEventsWithOptions(request, runtime);
}

model ListDIJobMetricsRequest {
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='11265'),
  endTime?: long(name='EndTime', description='The end of the time range to query.

This parameter is required.', example='1712205941'),
  metricName?: [ string ](name='MetricName', description='The metrics that you want to query.

This parameter is required.'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query.

This parameter is required.', example='1586509407'),
}

model ListDIJobMetricsShrinkRequest {
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='11265'),
  endTime?: long(name='EndTime', description='The end of the time range to query.

This parameter is required.', example='1712205941'),
  metricNameShrink?: string(name='MetricName', description='The metrics that you want to query.

This parameter is required.'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query.

This parameter is required.', example='1586509407'),
}

model ListDIJobMetricsResponseBody = {
  pagingInfo?: {
    jobMetrics?: [ 
      {
        name?: string(name='Name', description='The name of the metric.', example='JobDelay'),
        seriesList?: [ 
          {
            time?: long(name='Time', description='The point in time at which data is sampled based on the metric.', example='1716881141'),
            value?: double(name='Value', description='The sample value.', example='10'),
          }
        ](name='SeriesList', description='The metric data.'),
      }
    ](name='JobMetrics', description='The metrics returned.'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='691CA452-D37A-4ED0-9441'),
}

model ListDIJobMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIJobMetricsResponseBody(name='body'),
}

/**
 * @summary Queries metrics for a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq ListDIJobMetricsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDIJobMetricsResponse
 */
async function listDIJobMetricsWithOptions(tmpReq: ListDIJobMetricsRequest, runtime: Util.RuntimeOptions): ListDIJobMetricsResponse {
  Util.validateModel(tmpReq);
  var request = new ListDIJobMetricsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.metricName)) {
    request.metricNameShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.metricName, 'MetricName', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDIJobMetrics',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries metrics for a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDIJobMetricsRequest
 * @return ListDIJobMetricsResponse
 */
async function listDIJobMetrics(request: ListDIJobMetricsRequest): ListDIJobMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDIJobMetricsWithOptions(request, runtime);
}

model ListDIJobRunDetailsRequest {
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.

This parameter is required.', example='11265'),
  instanceId?: long(name='InstanceId', description='The instance ID.', example='1234'),
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  sourceDataSourceName?: string(name='SourceDataSourceName', description='The name of the source.', example='ds_name'),
  sourceDatabaseName?: string(name='SourceDatabaseName', description='The name of the database in the source.', example='db_name'),
  sourceSchemaName?: string(name='SourceSchemaName', description='The name of the schema of the source.', example='schema_name'),
  sourceTableName?: string(name='SourceTableName', description='The name of the table in the source.', example='table_name'),
}

model ListDIJobRunDetailsResponseBody = {
  pagingInfo?: {
    jobRunInfos?: [ 
      {
        destinationDatabaseName?: string(name='DestinationDatabaseName', description='The name of the database in the destination.', example='dst_db'),
        destinationDatasourceName?: string(name='DestinationDatasourceName', description='The name of the destination.', example='dst_name'),
        destinationSchemaName?: string(name='DestinationSchemaName', description='The name of the schema of the destination.', example='dst_schema'),
        destinationTableName?: string(name='DestinationTableName', description='The name of the table in the destination.', example='dst_name'),
        fullMigrationErrorMessage?: string(name='FullMigrationErrorMessage', description='The error message that is returned if an error occurs during full batch synchronization. If no error occurs, no value is returned for this parameter.', example='sync table t1 fail.'),
        fullMigrationStatus?: string(name='FullMigrationStatus', description='The status of full batch synchronization.', example='Finished'),
        offlineErrorRecords?: long(name='OfflineErrorRecords', description='The total number of errors that occur during full synchronization.', example='0'),
        offlineTotalBytes?: long(name='OfflineTotalBytes', description='The total number of bytes that are synchronized during full synchronization.', example='100'),
        offlineTotalRecords?: long(name='OfflineTotalRecords', description='The total number of data records that are synchronized during full synchronization.', example='10'),
        realtimeMigrationErrorMessage?: string(name='RealtimeMigrationErrorMessage', description='The error message that is returned if an error occurs during real-time synchronization. If no error occurs, no value is returned for this parameter.', example='sync table t1 fail.'),
        realtimeMigrationStatus?: string(name='RealtimeMigrationStatus', description='The status of real-time synchronization.', example='Running'),
        sourceDatabaseName?: string(name='SourceDatabaseName', description='The name of the database in the source.', example='db_name'),
        sourceDatasourceName?: string(name='SourceDatasourceName', description='The name of the source.', example='ds_name'),
        sourceSchemaName?: string(name='SourceSchemaName', description='The name of the schema of the source.', example='schema_name'),
        sourceTableName?: string(name='SourceTableName', description='The name of the table in the source.', example='table_name'),
        structureMigrationErrorMessage?: string(name='StructureMigrationErrorMessage', description='The error message that is returned if an error occurs during schema synchronization. If no error occurs, no value is returned for this parameter.', example='create table t1 fail.'),
        structureMigrationStatus?: string(name='StructureMigrationStatus', description='The synchronization status of the schema.', example='Finished'),
      }
    ](name='JobRunInfos', description='The running information about the synchronization task.'),
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='131'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='691CA452-D37A-4ED0-9441'),
}

model ListDIJobRunDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIJobRunDetailsResponseBody(name='body'),
}

/**
 * @summary Queries the running information about a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDIJobRunDetailsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDIJobRunDetailsResponse
 */
async function listDIJobRunDetailsWithOptions(request: ListDIJobRunDetailsRequest, runtime: Util.RuntimeOptions): ListDIJobRunDetailsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDIJobRunDetails',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the running information about a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDIJobRunDetailsRequest
 * @return ListDIJobRunDetailsResponse
 */
async function listDIJobRunDetails(request: ListDIJobRunDetailsRequest): ListDIJobRunDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDIJobRunDetailsWithOptions(request, runtime);
}

model ListDIJobsRequest {
  destinationDataSourceType?: string(name='DestinationDataSourceType', description='The destination type. Valid values: Hologres, OSS-HDFS, OSS, MaxCompute, Loghub, STARROCKS, Datahub, ANALYTICDB_FOR_MYSQL, Kafka, and Hive. If you do not configure this parameter, the API operation queries synchronization tasks that use all type of destinations.', example='Hologres'),
  migrationType?: string(name='MigrationType', description='The synchronization type. Valid values:

*   FullAndRealtimeIncremental: one-time full synchronization and real-time incremental synchronization
*   RealtimeIncremental: real-time incremental synchronization
*   Full: full synchronization
*   OfflineIncremental: batch incremental synchronization
*   FullAndOfflineIncremental: one-time full synchronization and batch incremental synchronization', example='FullAndRealtimeIncremental'),
  name?: string(name='Name', description='The name of the export task.

The name of each export task must be unique. You must make sure that the names of the export tasks in the current workspace are unique.', example='test_export_01'),
  pageNumber?: long(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='1967'),
  sourceDataSourceType?: string(name='SourceDataSourceType', description='The source type. Valid values: PolarDB, MySQL, Kafka, Loghub, Hologres, Oracle, OceanBase, MongoDB, RedShift, Hive, SqlServer, Doris, and ClickHouse. If you do not configure this parameter, the API operation queries synchronization tasks that use all types of sources.', example='MySQL'),
}

model ListDIJobsResponseBody = {
  pagingInfo?: {
    DIJobs?: [ 
      {
        DIJobId?: long(name='DIJobId', description='This parameter is deprecated. Use the Id parameter instead.', example='32599', deprecated=true),
        destinationDataSourceType?: string(name='DestinationDataSourceType', description='The destination type. Valid values: Hologres, OSS-HDFS, OSS, MaxCompute, Loghub, STARROCKS, DataHub, ANALYTICDB_FOR_MYSQL, Kafka, and Hive.', example='Hologres'),
        id?: long(name='Id', description='The ID of the synchronization task.', example='32599'),
        jobName?: string(name='JobName', description='The name of the synchronization task.', example='mysql_to_holo_sync_35197'),
        jobStatus?: string(name='JobStatus', description='The status of the synchronization task. Valid values:

*   Finished
*   Initialized
*   Stopped
*   Failed
*   Running
*   Stopping', example='Running'),
        migrationType?: string(name='MigrationType', description='The synchronization type. Valid values:

*   FullAndRealtimeIncremental: one-time full synchronization and real-time incremental synchronization
*   RealtimeIncremental: real-time incremental synchronization
*   Full: full synchronization
*   OfflineIncremental: batch incremental synchronization
*   FullAndOfflineIncremental: one-time full synchronization and batch incremental synchronization', example='FullAndRealtimeIncremental'),
        projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace to which the synchronization task belongs.', example='26442'),
        sourceDataSourceType?: string(name='SourceDataSourceType', description='The source type. Valid values: PolarDB, MySQL, Kafka, Loghub, Hologres, Oracle, OceanBase, MongoDB, RedShift, Hive, SqlServer, Doris, and ClickHouse. If you do not configure this parameter, the API operation returns synchronization tasks that use all types of sources.', example='Mysql'),
      }
    ](name='DIJobs', description='The synchronization tasks returned.'),
    pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='12'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7263E4AC-9D2E-5B29-B8AF-7C5012E92A41'),
}

model ListDIJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIJobsResponseBody(name='body'),
}

/**
 * @summary Queries a list of new-version synchronization tasks in Data Integration. A new-version synchronization task can be a real-time synchronization task used to synchronize full or incremental data in a database, a batch synchronization task used to synchronize full or incremental data in a database, or a real-time synchronization task used to synchronize incremental data in a single table.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDIJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDIJobsResponse
 */
async function listDIJobsWithOptions(request: ListDIJobsRequest, runtime: Util.RuntimeOptions): ListDIJobsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDIJobs',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of new-version synchronization tasks in Data Integration. A new-version synchronization task can be a real-time synchronization task used to synchronize full or incremental data in a database, a batch synchronization task used to synchronize full or incremental data in a database, or a real-time synchronization task used to synchronize incremental data in a single table.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDIJobsRequest
 * @return ListDIJobsResponse
 */
async function listDIJobs(request: ListDIJobsRequest): ListDIJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDIJobsWithOptions(request, runtime);
}

model ListDataAssetTagsRequest {
  category?: string(name='Category', description='The type of the tag. Valid values:

*   Normal
*   System', example='Normal'),
  key?: string(name='Key', description='The tag key.', example='key1'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
}

model ListDataAssetTagsResponseBody = {
  pagingInfo?: {
    dataAssetTags?: [ 
      {
        category?: string(name='Category', description='The type of the tag.

Valid values:

*   Normal
*   System', example='Normal'),
        createTime?: long(name='CreateTime', description='The time when the tag was created.', example='1735890003000'),
        createUser?: string(name='CreateUser', description='The creator of the tag.', example='12345'),
        description?: string(name='Description', description='The description of the tag.', example='This is a description'),
        key?: string(name='Key', description='The tag key.', example='key1'),
        managers?: [ string ](name='Managers', description='The tag administrators.'),
        modifyTime?: long(name='ModifyTime', description='The time when the tag was last modified.', example='1735890003000'),
        modifyUser?: string(name='ModifyUser', description='The user who last modified the tag.', example='1234'),
        valueType?: string(name='ValueType', description='The type of the tag value.', example='String'),
        values?: [ string ](name='Values', description='The tag values.'),
      }
    ](name='DataAssetTags', description='The tags.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2524'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376****'),
}

model ListDataAssetTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataAssetTagsResponseBody(name='body'),
}

/**
 * @summary Queries a list of tags.
 *
 * @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
 *
 * @param request ListDataAssetTagsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataAssetTagsResponse
 */
async function listDataAssetTagsWithOptions(request: ListDataAssetTagsRequest, runtime: Util.RuntimeOptions): ListDataAssetTagsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataAssetTags',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of tags.
 *
 * @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
 *
 * @param request ListDataAssetTagsRequest
 * @return ListDataAssetTagsResponse
 */
async function listDataAssetTags(request: ListDataAssetTagsRequest): ListDataAssetTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataAssetTagsWithOptions(request, runtime);
}

model ListDataAssetsRequest {
  dataAssetIds?: [ string ](name='DataAssetIds', description='The data asset IDs.'),
  dataAssetType?: string(name='DataAssetType', description='The type of the data asset. Valid values:

*   ACS::DataWorks::Table
*   ACS::DataWorks::Task', example='ACS::DataWorks::Task'),
  envType?: string(name='EnvType', description='The environment of the workspace to which the data asset belongs. Valid values:

*   Dev: development environment
*   Prod: production environment', example='Prod'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='10000'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.

The tag key can be up to 64 characters in length and can contain letters, digits, and the following characters: `-@#*<>|[]()+=&%$!~`. It cannot start with `dw:`.

This parameter is required.', example='key'),
      value?: string(name='Value', description='The tag value.', example='value'),
    }
  ](name='Tags', description='The tags that are added to data assets. This parameter specifies a filter condition.

*   You can specify multiple tags, which are in the logical OR relation. For example, you can query the data assets that contain one of the following tags: `["key1:v1", "key2:v1", "key3:v1"]`.
*   If you do not configure this parameter, tag-based filtering is not performed.

This parameter is required.'),
}

model ListDataAssetsShrinkRequest {
  dataAssetIdsShrink?: string(name='DataAssetIds', description='The data asset IDs.'),
  dataAssetType?: string(name='DataAssetType', description='The type of the data asset. Valid values:

*   ACS::DataWorks::Table
*   ACS::DataWorks::Task', example='ACS::DataWorks::Task'),
  envType?: string(name='EnvType', description='The environment of the workspace to which the data asset belongs. Valid values:

*   Dev: development environment
*   Prod: production environment', example='Prod'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='10000'),
  tagsShrink?: string(name='Tags', description='The tags that are added to data assets. This parameter specifies a filter condition.

*   You can specify multiple tags, which are in the logical OR relation. For example, you can query the data assets that contain one of the following tags: `["key1:v1", "key2:v1", "key3:v1"]`.
*   If you do not configure this parameter, tag-based filtering is not performed.

This parameter is required.'),
}

model ListDataAssetsResponseBody = {
  pagingInfo?: {
    dataAssets?: [ 
      {
        dataAssetTagMappings?: [ 
          {
            autoTraceEnabled?: boolean(name='AutoTraceEnabled', description='Indicates whether the lineage-based automatic backtrack feature is enabled for the mapping.', example='false'),
            creator?: string(name='Creator', description='The creator of the mapping between the data asset and the tag.', example='12345'),
            dataAssetId?: string(name='DataAssetId', description='The data asset ID.', example='7259557313'),
            key?: string(name='Key', description='The tag key.', example='key'),
            tagSource?: string(name='TagSource', description='The way in which the mapping between the data asset and the tag is created. Valid values:

*   System
*   UserDefined', example='UserDefined'),
            value?: string(name='Value', description='The tag value.', example='value'),
          }
        ](name='DataAssetTagMappings', description='The mappings between data assets and tags.'),
        envType?: string(name='EnvType', description='The environment of the workspace to which the data asset belongs. Valid values:

*   Dev: development environment
*   Prod: production environment', example='Prod'),
        id?: string(name='Id', description='The data asset ID.', example='7259557313'),
        name?: string(name='Name', description='The name of the data asset.', example='ali_cn_es_gfn'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='54275'),
        type?: string(name='Type', description='The type of the data asset. Valid values:

*   ACS::DataWorks::Table
*   ACS::DataWorks::Task', example='ACS::DataWorks::Task'),
      }
    ](name='DataAssets', description='The data assets.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376'),
}

model ListDataAssetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataAssetsResponseBody(name='body'),
}

/**
 * @summary Queries the information about DataWorks data assets to which tags are added by page.
 *
 * @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
 *
 * @param tmpReq ListDataAssetsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataAssetsResponse
 */
async function listDataAssetsWithOptions(tmpReq: ListDataAssetsRequest, runtime: Util.RuntimeOptions): ListDataAssetsResponse {
  Util.validateModel(tmpReq);
  var request = new ListDataAssetsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dataAssetIds)) {
    request.dataAssetIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataAssetIds, 'DataAssetIds', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataAssets',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about DataWorks data assets to which tags are added by page.
 *
 * @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
 *
 * @param request ListDataAssetsRequest
 * @return ListDataAssetsResponse
 */
async function listDataAssets(request: ListDataAssetsRequest): ListDataAssetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataAssetsWithOptions(request, runtime);
}

model ListDataQualityAlertRulesRequest {
  dataQualityScanId?: long(name='DataQualityScanId', description='The ID of the data quality monitor that the alert rule targets.', example='10001'),
  pageNumber?: int32(name='PageNumber', description='The page number of the results.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of records to return on each page.

This parameter is required.', example='10'),
  projectId?: long(name='ProjectId', description='The project ID.

This parameter is required.', example='10001'),
  sortBy?: string(name='SortBy', description='The list of sorting fields. Supports fields such as last modified time and creation time. Format: "SortField+SortOrder (Desc/Asc)", where Asc is the default. Valid values:

*   CreateTime (Desc/Asc)
*   Id (Desc/Asc)', example='CreateTime Desc'),
}

model ListDataQualityAlertRulesResponseBody = {
  pageInfo?: {
    dataQualityAlertRules?: [ 
      {
        condition?: string(name='Condition', description='The alert conditions.', example='results.any { r -> r.status == \\\\"fail\\\\" && r.rule.severity == \\\\"High\\\\" }'),
        id?: long(name='Id', description='The ID of the data quality monitor alert rule.', example='26433'),
        notification?: {
          channels?: [ string ](name='Channels', description='In Channels, you can set both Email and Sms at the same time. In other cases, only one channel can be set.'),
          receivers?: [ 
            {
              extension?: string(name='Extension', description='Additional configurations required for the alert recipients. When ReceiverType is DingdingUrl, you can set `{"atAll":true}` to mention all members.', example='{"atAll":true}'),
              receiverType?: string(name='ReceiverType', description='The type of alert recipients.

*   ShiftSchedule
*   WebhookUrl
*   FeishuUrl
*   TaskOwner
*   WeixinUrl
*   DingdingUrl
*   DataQualityScanOwner
*   AliUid', example='AliUid'),
              receiverValues?: [ string ](name='ReceiverValues', description='The value of alert recipients.'),
            }
          ](name='Receivers', description='The alert recipients.'),
        }(name='Notification', description='Alert notification configurations.'),
        projectId?: long(name='ProjectId', description='The project ID.', example='59094'),
        target?: {
          ids?: [ long ](name='Ids', description='The list of monitored target IDs'),
          type?: string(name='Type', description='The type of the monitored target. Only DataQualityScan is supported.', example='DataQualityScan'),
        }(name='Target', description='Monitored targets of the data quality alert rule.'),
      }
    ](name='DataQualityAlertRules', description='The list of alert rule configurations.'),
    pageNumber?: int32(name='PageNumber', description='The current page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of records per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='335'),
  }(name='PageInfo', description='Alert rule configurations.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc14115***159376359'),
}

model ListDataQualityAlertRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityAlertRulesResponseBody(name='body'),
}

/**
 * @summary Queries the list of data quality alert rules in a project.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityAlertRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataQualityAlertRulesResponse
 */
async function listDataQualityAlertRulesWithOptions(request: ListDataQualityAlertRulesRequest, runtime: Util.RuntimeOptions): ListDataQualityAlertRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataQualityScanId)) {
    query['DataQualityScanId'] = request.dataQualityScanId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataQualityAlertRules',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the list of data quality alert rules in a project.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityAlertRulesRequest
 * @return ListDataQualityAlertRulesResponse
 */
async function listDataQualityAlertRules(request: ListDataQualityAlertRulesRequest): ListDataQualityAlertRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataQualityAlertRulesWithOptions(request, runtime);
}

model ListDataQualityEvaluationTaskInstancesRequest {
  bizdateFrom?: string(name='BizdateFrom', description='The start time of the data quality monitoring task.', example='2024-04-01'),
  bizdateTo?: string(name='BizdateTo', description='The end time of the data quality monitoring task.', example='2024-05-01'),
  createTimeFrom?: long(name='CreateTimeFrom', description='The earliest start time at which the instances are generated.', example='1710239005403'),
  createTimeTo?: long(name='CreateTimeTo', description='The latest start time at which the instances are generated.', example='1710239005403'),
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', description='The ID of the data quality monitoring task.', example='10000'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='100'),
  tableGuid?: string(name='TableGuid', description='The ID of the table in Data Map.', example='odps.unit_test.tb_unit_test'),
  triggerClient?: string(name='TriggerClient', description='The name of the trigger module of the instance.', example='CWF2'),
  triggerClientId?: string(name='TriggerClientId', description='The ID of the instance that is generated by the task.', example='1001'),
}

model ListDataQualityEvaluationTaskInstancesResponseBody = {
  pagingInfo?: {
    dataQualityEvaluationTaskInstances?: [ 
      {
        createTime?: long(name='CreateTime', description='The time at which the instance was generated.', example='1710239005403'),
        finishTime?: long(name='FinishTime', description='The time at which the instance finished running.', example='1710239005403'),
        id?: long(name='Id', description='The ID of the instance.', example='10001'),
        parameters?: string(name='Parameters', description='The parameters configured for the instance.', example='{
  "bizdate": "20240517",
  "triggerTime": "1710239005403"
}'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='100'),
        status?: string(name='Status', description='The status of the instance. Valid values:

*   Running
*   Error
*   Passed
*   Warned
*   Critical', example='Critical'),
        task?: {
          description?: string(name='Description', description='The description of the task.', example='This is a daily run data quality evaluation plan.'),
          hooks?: [ 
            {
              condition?: string(name='Condition', description='The trigger configuration of the callback event.', example='${severity} == "High" AND ${status} == "Critical"'),
              type?: string(name='Type', description='The type of the callback event. Valid values:

*   BlockTaskInstance. The value indicates that an auto triggered node is blocked.', example='BlockTaskInstance'),
            }
          ](name='Hooks', description='The callback configurations of the task during the instance lifecycle. Blocking an auto triggered node is a type of callback event. Only this type is supported.'),
          id?: long(name='Id', description='The task ID.', example='10001'),
          name?: string(name='Name', description='The name of the monitor.

This parameter is required.', example='Quality verification task'),
          notifications?: {
            condition?: string(name='Condition', description='The trigger condition of the alert notification.', example='${severity} == "High"'),
            notifications?: [ 
              {
                nofiticationReceivers?: [ 
                  {
                    extension?: string(name='Extension', description='The extended information in the JSON format. For example, the DingTalk chatbot can remind all members in a DingTalk group by using the at sign (@).', example='{"atAll":"true"}'),
                    receiverType?: string(name='ReceiverType', description='The type of the alert recipient. Valid values:

*   AliUid: Alibaba Cloud account ID
*   WebhookUrl: URL of a custom webhook
*   DingdingUrl: DingTalk chatbot URL
*   FeishuUrl: Lark chatbot URL
*   WeixinUrl: WeCom chatbot URL', example='AliUid'),
                    receiverValues?: [ string ](name='ReceiverValues', description='The alert recipients.'),
                  }
                ](name='NofiticationReceivers', description='The alert recipients.'),
                notificationChannels?: [ 
                  {
                    channels?: [ string ](name='Channels', description='The alert notification methods.'),
                  }
                ](name='NotificationChannels', description='The alert notification methods.'),
              }
            ](name='Notifications', description='The configurations for the alert notification.'),
          }(name='Notifications', description='The configurations for alert notifications.'),
          projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
          runtimeConf?: string(name='RuntimeConf', description='The configuration of the data source. The value of the queue field is default, and that of the sqlEngine field can be set to SPARK_SQL, KYUUBI, PRESTO_SQL, or HIVE_SQL. The value default indicates the YARN queue for E-MapReduce (EMR) tasks.', example='{ "queue": "default", "sqlEngine": "SPARK-SQL" }'),
          target?: {
            databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs. Valid values:

*   maxcompute
*   emr
*   cdh
*   hologres
*   analyticdb_for_postgresql
*   analyticdb_for_mysql
*   starrocks', example='maxcompute'),
            partitionSpec?: string(name='PartitionSpec', description='The configuration of the partitioned table.', example='ds=$[yyyymmdd-1]'),
            tableGuid?: string(name='TableGuid', description='The ID of the table in Data Map.', example='odps.unit_test.tb_unit_test'),
            type?: string(name='Type', description='The type of the monitored object. Valid values:

*   Table', example='Table'),
          }(name='Target', description='The monitored object of the task.'),
          trigger?: {
            taskIds?: [ long ](name='TaskIds', description='The IDs of the auto triggered nodes of which the instances are successfully run.'),
            type?: string(name='Type', description='The trigger condition of the task. Valid values:

*   ByScheduledTaskInstance. The value indicates that the task is triggered when the instance of an auto triggered node is successfully run.', example='ByScheduledTaskInstance'),
          }(name='Trigger', description='The trigger configuration of the task.'),
        }(name='Task', description='The snapshot of the configurations for the task when the task starts.'),
        triggerContext?: string(name='TriggerContext', description='The information about the trigger module of the instance.', example='{
  "TriggerClientId": 10001,
  "TriggerClient": "CWF2"
}'),
      }
    ](name='DataQualityEvaluationTaskInstances', description='The instances generated by the task.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='294'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
}

model ListDataQualityEvaluationTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityEvaluationTaskInstancesResponseBody(name='body'),
}

/**
 * @summary Queries a list of instances generated by a data quality monitoring task by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityEvaluationTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataQualityEvaluationTaskInstancesResponse
 */
async function listDataQualityEvaluationTaskInstancesWithOptions(request: ListDataQualityEvaluationTaskInstancesRequest, runtime: Util.RuntimeOptions): ListDataQualityEvaluationTaskInstancesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataQualityEvaluationTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of instances generated by a data quality monitoring task by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityEvaluationTaskInstancesRequest
 * @return ListDataQualityEvaluationTaskInstancesResponse
 */
async function listDataQualityEvaluationTaskInstances(request: ListDataQualityEvaluationTaskInstancesRequest): ListDataQualityEvaluationTaskInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataQualityEvaluationTaskInstancesWithOptions(request, runtime);
}

model ListDataQualityEvaluationTasksRequest {
  name?: string(name='Name', description='The name of the data quality monitoring task. Fuzzy match is supported.', example='Test'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='100'),
  tableGuid?: string(name='TableGuid', description='The ID of the table in Data Map.', example='odps.unit_test.tb_unit_test'),
}

model ListDataQualityEvaluationTasksResponseBody = {
  pagingInfo?: {
    dataQualityEvaluationTasks?: [ 
      {
        dataSourceId?: long(name='DataSourceId'),
        description?: string(name='Description', description='The description of the data quality monitoring task. The description can be up to 65,535 characters in length.', example='This is a daily run data quality evaluation plan'),
        hooks?: [ 
          {
            condition?: string(name='Condition', description='The trigger configuration of the callback event.', example='${severity} == "High" AND ${status} == "Critical"'),
            type?: string(name='Type', description='The type of the callback event. Valid values:

*   BlockTaskInstance. The value indicates that an auto triggered node is blocked.', example='BlockTaskInstance'),
          }
        ](name='Hooks', description='The callback configurations of the task during the instance lifecycle. Blocking an auto triggered node is a type of callback event. Only this type is supported.'),
        id?: long(name='Id', description='The ID of the data quality monitoring task.', example='10001'),
        name?: string(name='Name', description='The name of the data quality monitoring task. The name can be up to 255 characters in length and can contain digits, letters, and punctuation marks.', example='Data quality verification task'),
        notifications?: {
          condition?: string(name='Condition', description='The trigger condition of the alert notification.', example='${severity} == "High"'),
          notifications?: [ 
            {
              notificationChannels?: [ 
                {
                  channels?: [ string ](name='Channels', description='The alert notification methods.'),
                }
              ](name='NotificationChannels', description='The alert notification methods.'),
              notificationReceivers?: [ 
                {
                  extension?: string(name='Extension', description='The extended information in the JSON format. For example, the DingTalk chatbot can remind all members in a DingTalk group by using the at sign (@).', example='{"atAll":"true"}'),
                  receiverType?: string(name='ReceiverType', description='The type of the alert recipient. Valid values:

*   AliUid: Alibaba Cloud account ID
*   WebhookUrl: URL of a custom webhook
*   DingdingUrl: DingTalk chatbot URL
*   FeishuUrl: Lark chatbot URL
*   WeixinUrl: WeCom chatbot URL', example='AliUid'),
                  receiverValues?: [ string ](name='ReceiverValues', description='The alert recipients.'),
                }
              ](name='NotificationReceivers', description='The alert recipients.'),
            }
          ](name='Notifications', description='The configurations for the alert notification.'),
        }(name='Notifications', description='The configurations for alert notifications.'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='100'),
        runtimeConf?: string(name='RuntimeConf', description='The configuration of the data source. The value of the queue field is default, and that of the sqlEngine field can be set to SPARK_SQL, KYUUBI, PRESTO_SQL, or HIVE_SQL. The value default indicates the YARN queue for E-MapReduce (EMR) tasks.', example='{ "queue": "default", "sqlEngine": "SPARK-SQL" }'),
        target?: {
          databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs. Valid values:

*   maxcompute
*   emr
*   cdh
*   hologres
*   analyticdb_for_postgresql
*   analyticdb_for_mysql
*   starrocks', example='maxcompute'),
          partitionSpec?: string(name='PartitionSpec', description='The configuration of the partitioned table.', example='ds=$[yyyymmdd-1]'),
          tableGuid?: string(name='TableGuid', description='The ID of the table in Data Map.', example='odps.unit_test.tb_unit_test'),
          type?: string(name='Type', description='The type of the monitored object. Valid values:

*   Table', example='Table'),
        }(name='Target', description='The monitored object of the task.'),
        trigger?: {
          taskIds?: [ long ](name='TaskIds', description='The IDs of the auto triggered nodes of which the instances are successfully run. This parameter takes effect only if the Type parameter is set to ByScheduledTaskInstance.'),
          type?: string(name='Type', description='The trigger condition of the task. Valid values:

*   ByScheduledTaskInstance. The value indicates that the task is triggered when the instance of an auto triggered node is successfully run.', example='ByScheduledTaskInstance'),
        }(name='Trigger', description='The trigger configuration of the task.'),
      }
    ](name='DataQualityEvaluationTasks', description='The data quality monitoring tasks.'),
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='131'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
}

model ListDataQualityEvaluationTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityEvaluationTasksResponseBody(name='body'),
}

/**
 * @summary Queries a list of data quality monitoring tasks by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityEvaluationTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataQualityEvaluationTasksResponse
 */
async function listDataQualityEvaluationTasksWithOptions(request: ListDataQualityEvaluationTasksRequest, runtime: Util.RuntimeOptions): ListDataQualityEvaluationTasksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataQualityEvaluationTasks',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of data quality monitoring tasks by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityEvaluationTasksRequest
 * @return ListDataQualityEvaluationTasksResponse
 */
async function listDataQualityEvaluationTasks(request: ListDataQualityEvaluationTasksRequest): ListDataQualityEvaluationTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataQualityEvaluationTasksWithOptions(request, runtime);
}

model ListDataQualityResultsRequest {
  bizdateFrom?: string(name='BizdateFrom', description='The beginning of the time range to query.', example='2024-05-01'),
  bizdateTo?: string(name='BizdateTo', description='The end of the time range to query.', example='2024-05-04'),
  createTimeFrom?: long(name='CreateTimeFrom', description='The earliest time when the data quality check result was generated.', example='1710239005403'),
  createTimeTo?: long(name='CreateTimeTo', description='The latest time when the data quality check result was generated.', example='1710239005403'),
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', description='The ID of the data quality monitoring task.', example='200001'),
  dataQualityEvaluationTaskInstanceId?: long(name='DataQualityEvaluationTaskInstanceId', description='The ID of the instance generated by the check.', example='10001'),
  dataQualityRuleId?: long(name='DataQualityRuleId', description='The ID of the data quality monitoring rule.', example='100001'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='100'),
}

model ListDataQualityResultsResponseBody = {
  pagingInfo?: {
    dataQualityResults?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the data quality check result was generated.', example='1708284916414'),
        details?: [ 
          {
            checkedValue?: string(name='CheckedValue', description='The value that is used for comparison with the threshold.', example='100.0'),
            referencedValue?: string(name='ReferencedValue', description='The value that is calculated based on sample data. The value serves as a baseline value during the calculation of the value of the CheckedValue parameter.', example='0.0'),
            status?: string(name='Status', description='The comparison result between the value of CheckedValue and the threshold. Valid values:

*   Error
*   Passed
*   Warned
*   Critical', example='PASSED'),
          }
        ](name='Details', description='The information about the data quality check.'),
        id?: long(name='Id', description='The ID of the check result.', example='16033'),
        rule?: {
          checkingConfig?: {
            referencedSamplesFilter?: string(name='ReferencedSamplesFilter', description='The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference samples and perform aggregate operations on the reference values. In this example, an expression is used to indicate the query method of referenced samples.', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
            thresholds?: {
              critical?: {
                expression?: string(name='Expression', description='The threshold expression.

If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:

*   $checkValue > 0.01
*   $checkValue < -0.01
*   abs($checkValue) > 0.01

If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.', example='$checkValue > 0.01'),
                operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
                value?: string(name='Value', description='The threshold value.', example='100.0'),
              }(name='Critical', description='The threshold settings for critical alerts.'),
              expected?: {
                expression?: string(name='Expression', description='The threshold expression.

If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:

*   $checkValue > 0.01
*   $checkValue < -0.01
*   abs($checkValue) > 0.01

If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.', example='$checkValue > 0.01'),
                operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
                value?: string(name='Value', description='The threshold value.', example='100.0'),
              }(name='Expected', description='The expected threshold setting.'),
              warned?: {
                expression?: string(name='Expression', description='The threshold expression.

If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:

*   $checkValue > 0.01
*   $checkValue < -0.01
*   abs($checkValue) > 0.01

If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.', example='$checkValue > 0.01'),
                operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
                value?: string(name='Value', description='The threshold value.', example='100.0'),
              }(name='Warned', description='The threshold settings for normal alerts.'),
            }(name='Thresholds', description='The threshold settings.'),
            type?: string(name='Type', description='The threshold calculation method. Valid values:

*   Fixed
*   Fluctation
*   FluctationDiscreate
*   Auto
*   Average
*   Variance', example='FIXED'),
          }(name='CheckingConfig', description='The check settings for sample data.'),
          description?: string(name='Description', description='The description of the rule. The description can be up to 500 characters in length.', example='this is a odps _sql task'),
          enabled?: boolean(name='Enabled', description='Indicates whether the rule is enabled.', example='true'),
          errorHandlers?: [ 
            {
              errorDataFilter?: string(name='ErrorDataFilter', description='The SQL statement that is used to filter failed tasks. If the rule is defined by custom SQL statements, you must specify an SQL statement to filter failed tasks.', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
              type?: string(name='Type', description='The type of the operation. Valid values:

*   SaveErrorData', example='SAVE_ERROR_DATA'),
            }
          ](name='ErrorHandlers', description='The operations that you can perform after the rule-based check fails.'),
          id?: long(name='Id', description='The rule ID.', example='100001'),
          name?: string(name='Name', description='The name of the rule. The name can be up to 255 characters in length and can contain digits, letters, and punctuation marks.', example='The table cannot be empty.'),
          projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='100'),
          samplingConfig?: {
            metric?: string(name='Metric', description='The metrics used for sampling. Valid values:

*   Count: the number of rows in the table.
*   Min: the minimum value of the field.
*   Max: the maximum value of the field.
*   Avg: the average value of the field.
*   DistinctCount: the number of unique values of the field after deduplication.
*   DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
*   DuplicatedCount: the number of duplicated values of the field.
*   DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
*   TableSize: the table size.
*   NullValueCount: the number of rows in which the field value is null.
*   NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
*   GroupCount: the field value and the number of rows for each field value.
*   CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
*   CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
*   UserDefinedSql: indicates that data is sampled by executing custom SQL statements.', example='COUNT'),
            metricParameters?: string(name='MetricParameters', description='The parameters required for sampling.', example='{ "columns": [ "id", "name" ] }'),
            samplingFilter?: string(name='SamplingFilter', description='The statements that are used to filter unnecessary data during sampling. The statements can be up to 16,777,215 characters in length.', example='id IS NULL'),
            settingConfig?: string(name='SettingConfig', description='The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.', example='SET odps.sql.udf.timeout=600s;'),
          }(name='SamplingConfig', description='The sampling settings.'),
          severity?: string(name='Severity', description='The strength of the rule. Valid values:

*   High
*   Normal', example='NORMAL'),
          target?: {
            databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs. Valid values:

*   maxcompute
*   emr
*   cdh
*   hologres
*   analyticdb_for_postgresql
*   analyticdb_for_mysql
*   starrocks', example='MAX_COMPUTE'),
            tableGuid?: string(name='TableGuid', description='The ID of the table in Data Map.', example='odps.unit_test.tb_unit_test'),
            type?: string(name='Type', description='The type of the monitored object. Valid values:

*   Table', example='TABLE'),
          }(name='Target', description='The monitored object of the rule.'),
          templateCode?: string(name='TemplateCode', description='The code of the template that is referenced when you create a rule.', example='system::user_defined'),
        }(name='Rule', description='The snapshot of the rule configuration when the check starts.'),
        sample?: string(name='Sample', description='The sample values used for the check.', example='[
  {
    "gender": "male",
    "_count": 100
  }, {
    "gender": "female",
    "_count": 100
  }
]'),
        status?: string(name='Status', description='The status of the check result. Valid values:

*   Running
*   Error
*   Passed
*   Warned
*   Critical', example='PASSED'),
        taskInstanceId?: long(name='TaskInstanceId', description='The ID of the instance generated by the check.', example='200001'),
      }
    ](name='DataQualityResults', description='The data quality check results.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='219'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
}

model ListDataQualityResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityResultsResponseBody(name='body'),
}

/**
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityResultsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataQualityResultsResponse
 */
async function listDataQualityResultsWithOptions(request: ListDataQualityResultsRequest, runtime: Util.RuntimeOptions): ListDataQualityResultsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataQualityResults',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityResultsRequest
 * @return ListDataQualityResultsResponse
 */
async function listDataQualityResults(request: ListDataQualityResultsRequest): ListDataQualityResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataQualityResultsWithOptions(request, runtime);
}

model ListDataQualityRuleTemplatesRequest {
  creationSource?: string(name='CreationSource', description='The source of the template. This parameter is required. Valid values:

*   System
*   UserDefined', example='System'),
  directoryPath?: string(name='DirectoryPath', description='The directory in which the template is stored. Slashes (/) are used to separate directory levels. The name of each directory level can be up to 1,024 characters in length. It cannot contain whitespace characters or slashes (/).', example='/ods/order_data'),
  name?: string(name='Name', description='The name of the template. If you want to query a system template, set this parameter to the name of the system template. Fuzzy match is supported.', example='Table rows'),
  pageNumber?: int32(name='PageNumber', description='The number of entries per page. Default value: 10.', example='10'),
  pageSize?: int32(name='PageSize', description='The page number. Default value: 1.', example='1'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='10000'),
}

model ListDataQualityRuleTemplatesResponseBody = {
  pagingInfo?: {
    dataQualityRuleTemplates?: [ 
      {
        checkingConfig?: {
          referencedSamplesFilter?: string(name='ReferencedSamplesFilter', description='Some types of thresholds need to query some reference samples, and then summarize the values of the reference samples to obtain the threshold for comparison. Here, an expression is used to represent the query method of the reference samples.', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
          type?: string(name='Type', description='Threshold Calculation method
- Fixed
- Fluctation
- FluctationDiscreate
- Auto
- Average
- Variance', example='Fixed'),
        }(name='CheckingConfig', description='Sample verification settings'),
        code?: string(name='Code', description='Rule template Code', example='USER_DEFINED:123'),
        directoryPath?: string(name='DirectoryPath', description='The directory in which the template is stored. Slashes (/) are used to separate directory levels. The name of each directory level can be up to 1,024 characters in length. It cannot contain whitespace characters or slashes (/).', example='/ods/order_data'),
        name?: string(name='Name', description='The name of the template. The name can be up to 512 characters in length and can contain digits, letters, and punctuation marks.', example='Table row Count Verification'),
        projectId?: long(name='ProjectId', description='DataWorks workspace ID', example='2043'),
        samplingConfig?: {
          metric?: string(name='Metric', description='The name of the sampled metric.
- Count: number of table rows
- Min: minimum value of the field
- Max: The maximum value of the field.
- Avg: field mean
- DistinctCount: number of unique field values
- DistinctPercent: the ratio of the number of unique field values to the number of data rows.
- DuplicatedCount: number of duplicate field values
- DuplicatedPercent: the ratio of the number of duplicate field values to the number of data rows.
- TableSize: table size
- NullValueCount: number of rows with empty fields
- NullValuePercent: the proportion of fields that are empty.
- GroupCount: aggregate each value by field value and the corresponding number of data rows
- CountNotIn: the enumerated value does not match the number of rows.
- CountDistinctNotIn: the number of unique values that the enumerated values do not match.
- UserDefinedSql: use custom SQL to collect samples', example='Max'),
          metricParameters?: string(name='MetricParameters', description='Parameters required for sample collection', example='{"Sql": "select count(1) from table;"}'),
          settingConfig?: string(name='SettingConfig', description='Before executing the sample statement, insert some runtime parameter setting statements, which can be up to 1000 characters in length. Currently, only MaxCompute are supported.', example='SET odps.sql.udf.timeout=600s; 
SET odps.sql.python.version=cp27;'),
        }(name='SamplingConfig', description='Settings required for sample collection'),
        visibleScope?: string(name='VisibleScope', description='Available range of templates:
- Tenant: all tenants are available
- Project: only available in the current Project', example='Project'),
      }
    ](name='DataQualityRuleTemplates', description='The templates.'),
    pageNumber?: int32(name='PageNumber', description='Page number', example='1'),
    pageSize?: int32(name='PageSize', description='Page size', example='10'),
    totalCount?: int32(name='TotalCount', description='Total number of entries', example='42'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
}

model ListDataQualityRuleTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityRuleTemplatesResponseBody(name='body'),
}

/**
 * @summary Queries a list of data quality monitoring rule templates.
 *
 * @param request ListDataQualityRuleTemplatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataQualityRuleTemplatesResponse
 */
async function listDataQualityRuleTemplatesWithOptions(request: ListDataQualityRuleTemplatesRequest, runtime: Util.RuntimeOptions): ListDataQualityRuleTemplatesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataQualityRuleTemplates',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of data quality monitoring rule templates.
 *
 * @param request ListDataQualityRuleTemplatesRequest
 * @return ListDataQualityRuleTemplatesResponse
 */
async function listDataQualityRuleTemplates(request: ListDataQualityRuleTemplatesRequest): ListDataQualityRuleTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataQualityRuleTemplatesWithOptions(request, runtime);
}

model ListDataQualityRulesRequest {
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', description='The ID of the data quality monitoring task that is associated with the rule.', example='10000'),
  name?: string(name='Name', description='The name of the rule. Fuzzy match is supported.', example='unit_test'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 200.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='10002'),
  tableGuid?: string(name='TableGuid', description='The ID of the table that is limited by the rule in Data Map.', example='odps.unit_test.tb_unit_test'),
}

model ListDataQualityRulesResponseBody = {
  pagingInfo?: {
    dataQualityRules?: [ 
      {
        checkingConfig?: {
          referencedSamplesFilter?: string(name='ReferencedSamplesFilter', description='The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference values. In this example, an expression is used to indicate the query method of referenced samples.', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
          thresholds?: {
            critical?: {
              expression?: string(name='Expression', description='The threshold expression.

If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:

*   $checkValue > 0.01
*   $checkValue < -0.01
*   abs($checkValue) > 0.01

If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.', example='$checkValue > 0.01'),
              operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
              value?: string(name='Value', description='The threshold value.', example='100.0'),
            }(name='Critical', description='The threshold settings for critical alerts.'),
            expected?: {
              expression?: string(name='Expression', description='The threshold expression.

If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:

*   $checkValue > 0.01
*   $checkValue < -0.01
*   abs($checkValue) > 0.01

If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.', example='$checkValue > 0.01'),
              operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
              value?: string(name='Value', description='The threshold value.', example='100.0'),
            }(name='Expected', description='The expected threshold setting.'),
            warned?: {
              expression?: string(name='Expression', description='The threshold expression.

If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:

*   $checkValue > 0.01
*   $checkValue < -0.01
*   abs($checkValue) > 0.01

If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.', example='$checkValue > 0.01'),
              operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
              value?: string(name='Value', description='The threshold value.', example='100.0'),
            }(name='Warned', description='The threshold settings for normal alerts.'),
          }(name='Thresholds', description='The threshold settings.'),
          type?: string(name='Type', description='The threshold calculation method. Valid values:

*   Fixed
*   Fluctation
*   FluctationDiscreate
*   Auto
*   Average
*   Variance', example='Fixed'),
        }(name='CheckingConfig', description='The check settings for sample data.'),
        description?: string(name='Description', description='The description of the rule. The description can be up to 500 characters in length.', example='this is a odps _sql task'),
        enabled?: boolean(name='Enabled', description='Indicates whether the rule is enabled.', example='true'),
        errorHandlers?: [ 
          {
            errorDataFilter?: string(name='ErrorDataFilter', description='The SQL statement that is used to filter failed tasks. If the rule is defined by custom SQL statements, you must specify an SQL statement to filter failed tasks.', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
            type?: string(name='Type', description='The type of the operation. Valid values:

*   SaveErrorData', example='SaveErrorData'),
          }
        ](name='ErrorHandlers', description='The operations that you can perform after the rule-based check fails.'),
        id?: long(name='Id', description='The rule ID.', example='22130'),
        name?: string(name='Name', description='The rule name.', example='The table cannot be empty.'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='100001'),
        samplingConfig?: {
          metric?: string(name='Metric', description='The metrics used for sampling. Valid values:

*   Count: the number of rows in the table.
*   Min: the minimum value of the field.
*   Max: the maximum value of the field.
*   Avg: the average value of the field.
*   DistinctCount: the number of unique values of the field after deduplication.
*   DistinctPercent: the percentage of the number of unique values of the field after deduplication to the number of rows in the table.
*   DuplicatedCount: the number of duplicated values in the field.
*   DuplicatedPercent: the percentage of the number of duplicated values of the field to the number of rows in the table.
*   TableSize: the table size.
*   NullValueCount: the number of rows in which the field is set to null.
*   NullValuePercent: the percentage of the number of rows in which the field is set to null to the number of rows in the table.
*   GroupCount: the field value and the number of rows for each field value.
*   CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
*   CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
*   UserDefinedSql: indicates that the data is sampled by executing custom SQL statements.', example='Max'),
          metricParameters?: string(name='MetricParameters', description='The parameters required for sampling.', example='{ "Columns": [ "id", "name" ] , "SQL": "select count(1) from table;"}'),
          samplingFilter?: string(name='SamplingFilter', description='The statements that are used to filter unnecessary data during sampling. The statements can be up to 16,777,215 characters in length.', example='id IS NULL'),
          settingConfig?: string(name='SettingConfig', description='The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.', example='SET odps.sql.udf.timeout=600s; 
SET odps.sql.python.version=cp27;'),
        }(name='SamplingConfig', description='The settings for sampling.'),
        severity?: string(name='Severity', description='The strength of the rule. Valid values:

*   Normal
*   High', example='High'),
        target?: {
          databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs. Valid values:

*   maxcompute
*   emr
*   cdh
*   hologres
*   analyticdb_for_postgresql
*   analyticdb_for_mysql
*   starrocks', example='maxcompute'),
          tableGuid?: string(name='TableGuid', description='The ID of the table that is limited by the rule in Data Map.', example='odps.unit_test.tb_unit_test'),
          type?: string(name='Type', description='The type of the monitored object. Valid values:

*   Table', example='Table'),
        }(name='Target', description='The monitored object of the rule.'),
        templateCode?: string(name='TemplateCode', description='The ID of the template used by the rule.', example='system::user_defined'),
      }
    ](name='DataQualityRules', description='The rules.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='294'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
}

model ListDataQualityRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityRulesResponseBody(name='body'),
}

/**
 * @summary Queries a list of data quality monitoring rules by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataQualityRulesResponse
 */
async function listDataQualityRulesWithOptions(request: ListDataQualityRulesRequest, runtime: Util.RuntimeOptions): ListDataQualityRulesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataQualityRules',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of data quality monitoring rules by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityRulesRequest
 * @return ListDataQualityRulesResponse
 */
async function listDataQualityRules(request: ListDataQualityRulesRequest): ListDataQualityRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataQualityRulesWithOptions(request, runtime);
}

model ListDataQualityScanRunsRequest {
  createTimeFrom?: long(name='CreateTimeFrom', description='The earliest time when the data quality monitor starts to run.', example='1710239005403'),
  createTimeTo?: long(name='CreateTimeTo', description='The latest time when the data quality monitor starts to run.', example='1710239005403'),
  dataQualityScanId?: long(name='DataQualityScanId', description='The ID of the data quality monitor.', example='10001'),
  pageNumber?: int32(name='PageNumber', description='The page number of the results. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of records per page. Default value: 10.', example='20'),
  projectId?: long(name='ProjectId', description='The project ID.

This parameter is required.', example='12345'),
  sortBy?: string(name='SortBy', description='The list of sorting fields. Supports fields such as last modified time and creation time. Format: "SortField+SortOrder (Desc/Asc)", where Asc is the default. Valid values:

*   CreateTime (Desc/Asc)
*   Id (Desc/Asc)', example='CreateTime Desc'),
  status?: string(name='Status', description='The status of the data quality check result.

*   Pass
*   Running
*   Error
*   Fail
*   Warn', example='Fail'),
}

model ListDataQualityScanRunsResponseBody = {
  pageInfo?: {
    dataQualityScanRuns?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the data quality monitor starts running.', example='1710239005403'),
        finishTime?: long(name='FinishTime', description='The time when the data quality monitor stops.', example='1710239005403'),
        id?: long(name='Id', description='The ID of the data quality monitor running record.', example='3155'),
        parameters?: [ 
          {
            name?: string(name='Name', description='The parameter name.', example='dt'),
            value?: string(name='Value', description='The parameter value. You can use a scheduling time expression.', example='$[yyyy-mm-dd-1]'),
          }
        ](name='Parameters', description='The parameters configured for the instance.'),
        status?: string(name='Status', description='The status of the instance.

*   Pass
*   Running
*   Error
*   Warn
*   Fail', example='Fail'),
      }
    ](name='DataQualityScanRuns', description='The list of data quality monitor run records.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the results. Default value: 1.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of records per page. Default value: 10.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of records returned.', example='324'),
  }(name='PageInfo', description='The page information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0bc14115***159376359'),
}

model ListDataQualityScanRunsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityScanRunsResponseBody(name='body'),
}

/**
 * @summary Queries the execution records of data quality scans in a project.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityScanRunsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataQualityScanRunsResponse
 */
async function listDataQualityScanRunsWithOptions(request: ListDataQualityScanRunsRequest, runtime: Util.RuntimeOptions): ListDataQualityScanRunsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createTimeFrom)) {
    query['CreateTimeFrom'] = request.createTimeFrom;
  }
  if (!Util.isUnset(request.createTimeTo)) {
    query['CreateTimeTo'] = request.createTimeTo;
  }
  if (!Util.isUnset(request.dataQualityScanId)) {
    query['DataQualityScanId'] = request.dataQualityScanId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataQualityScanRuns',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the execution records of data quality scans in a project.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityScanRunsRequest
 * @return ListDataQualityScanRunsResponse
 */
async function listDataQualityScanRuns(request: ListDataQualityScanRunsRequest): ListDataQualityScanRunsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataQualityScanRunsWithOptions(request, runtime);
}

model ListDataQualityScansRequest {
  name?: string(name='Name', description='The data quality scan task name for fuzzy match.', example='test'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.

This parameter is required.', example='10'),
  projectId?: long(name='ProjectId', description='The project ID.

This parameter is required.', example='10000'),
  sortBy?: string(name='SortBy', description='The list of sorting fields. Supports fields such as last modified time and creation time. Format: "SortField+SortOrder (Desc/Asc)", where Asc is the default. Valid values:

*   ModifyTime (Desc/Asc)
*   CreateTime (Desc/Asc)
*   Id (Desc/Asc)', example='ModifyTime Desc'),
  table?: string(name='Table', description='Fuzzy match for the monitored table name.', example='video_album'),
}

model ListDataQualityScansResponseBody = {
  pageInfo?: {
    dataQualityScans?: [ 
      {
        computeResource?: {
          envType?: string(name='EnvType', description='Workspace environment of the compute engine. Valid values:

*   Prod
*   Dev', example='Prod'),
          name?: string(name='Name', description='The name of the computing engine. Uniquely identifies the engine.', example='emr_cluster_001'),
          runtime?: {
            engine?: string(name='Engine', description='The engine type. These settings are only supported for the EMR compute engine. Valid values:

*   Hive: Hive SQL
*   Spark: Spark SQL
*   Kyuubi', example='Hive'),
            hiveConf?: string(name='HiveConf', description='Additional parameters for the Hive engine. Currently, only mapreduce.job.queuename is supported to set the queue.', example='mapreduce.job.queuename=dq_queue'),
            sparkConf?: string(name='SparkConf', description='Additional parameters for the Spark engine. Currently, only spark.yarn.queue is supported to set the queue.', example='spark.yarn.queue=dq_queue'),
          }(name='Runtime', description='Additional runtime settings for the data quality monitor.'),
        }(name='ComputeResource', description='The compute engine used during execution. If it is not specified, the data source connection defined in the Spec will be used.'),
        createTime?: long(name='CreateTime', description='The creation time of the data quality monitor.', example='1694512304000'),
        createUser?: string(name='CreateUser', description='The creator of the data quality monitor.', example='7892346529452'),
        description?: string(name='Description', description='The description of the data quality scan task. Maximum length: 65,535 characters.', example='This is a hourly run data quality evaluation plan.'),
        hooks?: [ 
          {
            condition?: string(name='Condition', description='The hook trigger condition. When this condition is met, the hook is triggered. Valid expression format:

Specifies multiple combinations of rule severity levels and rule validation statuses, such as `results.any { r -> r.status == \\\\"Fail\\\\" && r.rule.severity == \\\\"Normal\\\\" || r.status == \\\\"Error\\\\" && r.rule.severity == \\\\"High\\\\" || r.status == \\\\"Warn\\\\" && r.rule.severity == \\\\"High\\\\" }`. This means the hook is triggered if any executed rule has Fail with Normal severity, Error with High severity, or Warn with High severity. The severity values must match those defined in the Spec. The status values must match those in DataQualityResult.', example='results.any { r -> r.status == \\\\"Fail\\\\" && r.rule.severity == \\\\"Normal\\\\" || r.status == \\\\"Error\\\\" && r.rule.severity == \\\\"High\\\\" || r.status == \\\\"Warn\\\\" && r.rule.severity == \\\\"High\\\\" }'),
            type?: string(name='Type', description='The type of the hook. Valid values:

*   BlockTaskInstance: Blocks the scheduling of the task instance.', example='BlockTaskInstance'),
          }
        ](name='Hooks', description='The hook configuration after the data quality monitor stops.'),
        id?: long(name='Id', description='The ID of the data quality monitor.', example='26433'),
        modifyTime?: long(name='ModifyTime', description='Last update time of the data quality monitor.', example='17236236472'),
        modifyUser?: string(name='ModifyUser', description='The user ID of the last person who updated the data quality monitor.', example='23782382795249'),
        name?: string(name='Name', description='The name of the data quality scan task. Can include digits, letters, Chinese characters, and both half-width and full-width punctuation marks. Maximum length: 255 characters.', example='Hourly partition quality monitoring'),
        owner?: string(name='Owner', description='The user ID of the owner responsible for the data quality monitor.', example='23782382795249'),
        parameters?: [ 
          {
            name?: string(name='Name', description='The parameter name.', example='dt'),
            value?: string(name='Value', description='The parameter value.', example='$[yyyy-mm-dd-1]'),
          }
        ](name='Parameters', description='Execution parameter definitions for the data quality monitor.'),
        projectId?: long(name='ProjectId', description='The project ID.', example='59094'),
        runtimeResource?: {
          cu?: float(name='Cu', description='CU consumption for task running.', example='0.25'),
          id?: string(name='Id', description='The ID of the resource group.', example='Serverless_resource_group_xxxxx'),
          image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxx'),
        }(name='RuntimeResource', description='The resource group used during the execution of the data quality monitor.'),
        trigger?: {
          taskIds?: [ long ](name='TaskIds', description='If the trigger mode is BySchedule, the ID of the scheduling task that triggers the monitor must be configured.'),
          type?: string(name='Type', description='The trigger mode of the data quality monitor. Valid values:

*   ByManual: Manually triggered. Default setting.
*   BySchedule: Triggered by a scheduled task instance.', example='BySchedule'),
        }(name='Trigger', description='Trigger settings for the data quality monitor.'),
      }
    ](name='DataQualityScans', description='The list of data quality monitors.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of records per page. Default value: 10.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of records returned.', example='1'),
  }(name='PageInfo', description='The page information.'),
  requestId?: string(name='RequestId', description='The API request ID, which is generated as a UUID.', example='0bc14115***159376359'),
}

model ListDataQualityScansResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityScansResponseBody(name='body'),
}

/**
 * @summary Queries the list of data quality scan tasks in a project.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityScansRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataQualityScansResponse
 */
async function listDataQualityScansWithOptions(request: ListDataQualityScansRequest, runtime: Util.RuntimeOptions): ListDataQualityScansResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.table)) {
    query['Table'] = request.table;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataQualityScans',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the list of data quality scan tasks in a project.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityScansRequest
 * @return ListDataQualityScansResponse
 */
async function listDataQualityScans(request: ListDataQualityScansRequest): ListDataQualityScansResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataQualityScansWithOptions(request, runtime);
}

model ListDataQualityTemplatesRequest {
  catalog?: string(name='Catalog', description='The directory path to which the data quality template belongs.', example='/timeliness/ods_layer'),
  name?: string(name='Name', description='Fuzzy match for the template rule name.', example='table_rows'),
  pageNumber?: int32(name='PageNumber', description='The number of records per page. Default value: 10.', example='1'),
  pageSize?: int32(name='PageSize', description='The page number of the results. Default value: 1.', example='10'),
  projectId?: long(name='ProjectId', description='The project ID.', example='10000'),
}

model ListDataQualityTemplatesResponseBody = {
  pageInfo?: {
    dataQualityTemplates?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the data quality rule template was created.', example='1729816478147'),
        createUser?: string(name='CreateUser', description='The creator of the data quality rule template.', example='7892346529452'),
        id?: string(name='Id', description='The ID of the data quality rule template.', example='819cf1f8-29be-4f94-a9d0-c5c06c0c3d2a'),
        modifyTime?: long(name='ModifyTime', description='The time when the data quality rule template was updated.', example='1729816478147'),
        modifyUser?: string(name='ModifyUser', description='The last updater of the data quality rule template.', example='205250754596036836'),
        owner?: string(name='Owner', description='The owner of the data quality rule template.', example='205250754596036836'),
        projectId?: long(name='ProjectId', description='The project ID.', example='7635'),
        spec?: string(name='Spec', description='Specific configurations of the data quality rule template. For more information, see [Data quality Spec configuration description](~2963394~).', example='{
    "assertion": "anomaly detection fro id_not_null_cnt",
    "id_not_null_cnt": {
        "query": "SELECT COUNT(*) AS cnt FROM ${tableName} WHERE dt = \\\\"$[yyyymmdd-1]\\\\";"
    },
    "identity": "819cf1f8-29be-4f94-a9d0-c5c06c0c3d2a"
}'),
      }
    ](name='DataQualityTemplates', description='The list of rule templates.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of pages.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of records.', example='10'),
  }(name='PageInfo', description='Paged query results of data quality rule templates.'),
  requestId?: string(name='RequestId', description='The API request ID, which is generated as a UUID.', example='0bc14115***159376359'),
}

model ListDataQualityTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityTemplatesResponseBody(name='body'),
}

/**
 * @summary Queries the list of data quality rule templates in a project.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityTemplatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataQualityTemplatesResponse
 */
async function listDataQualityTemplatesWithOptions(request: ListDataQualityTemplatesRequest, runtime: Util.RuntimeOptions): ListDataQualityTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.catalog)) {
    query['Catalog'] = request.catalog;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataQualityTemplates',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the list of data quality rule templates in a project.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityTemplatesRequest
 * @return ListDataQualityTemplatesResponse
 */
async function listDataQualityTemplates(request: ListDataQualityTemplatesRequest): ListDataQualityTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataQualityTemplatesWithOptions(request, runtime);
}

model ListDataSourceSharedRulesRequest {
  dataSourceId?: long(name='DataSourceId', description='The data source ID.

This parameter is required.', example='1'),
  targetProjectId?: long(name='TargetProjectId', description='The ID of the workspace to which the data source is shared. You cannot share the data source to the workspace with which the data source is associated.', example='1'),
}

model ListDataSourceSharedRulesResponseBody = {
  dataSourceSharedRules?: [ 
    {
      createTime?: long(name='CreateTime', description='The time when the rule was created. This value is a UNIX timestamp.', example='1724379762000'),
      createUser?: string(name='CreateUser', description='The ID of the user who creates the rule.', example='1'),
      dataSourceId?: long(name='DataSourceId', description='The data source ID. You can call the [ListDataSources](https://help.aliyun.com/document_detail/211431.html) operation to query the ID.', example='1'),
      envType?: string(name='EnvType', description='The environment to which the target data source belongs. The values are as follows:
- Dev: the development environment.
- Prod: the production environment.', example='Dev'),
      id?: long(name='Id', description='The rule ID.', example='1'),
      sharedDataSourceName?: string(name='SharedDataSourceName', description='The name of the data source in the destination workspace.', example='targetProject.datasource'),
      sharedUser?: string(name='SharedUser', description='The user in the workspace to which the data source is shared. If the data source is shared to the entire workspace, this parameter is left empty.', example='1'),
      sourceProjectId?: long(name='SourceProjectId', description='The ID of the workspace with which the data source is associated.', example='1'),
      targetProjectId?: long(name='TargetProjectId', description='The ID of the workspace to which the data source is shared.', example='1'),
    }
  ](name='DataSourceSharedRules', description='The sharing rules of the data source.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
}

model ListDataSourceSharedRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourceSharedRulesResponseBody(name='body'),
}

/**
 * @summary Queries a list of sharing rules of a data source.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  If you want to query the sharing rules of a data source that is associated with Workspace A, you must have the permissions to share the data source in Workspace A. You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
 *
 * @param request ListDataSourceSharedRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataSourceSharedRulesResponse
 */
async function listDataSourceSharedRulesWithOptions(request: ListDataSourceSharedRulesRequest, runtime: Util.RuntimeOptions): ListDataSourceSharedRulesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataSourceSharedRules',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of sharing rules of a data source.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  If you want to query the sharing rules of a data source that is associated with Workspace A, you must have the permissions to share the data source in Workspace A. You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
 *
 * @param request ListDataSourceSharedRulesRequest
 * @return ListDataSourceSharedRulesResponse
 */
async function listDataSourceSharedRules(request: ListDataSourceSharedRulesRequest): ListDataSourceSharedRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataSourceSharedRulesWithOptions(request, runtime);
}

model ListDataSourcesRequest {
  envType?: string(name='EnvType', description='The environment in which the data sources are used. Valid values:

*   Dev: development environment
*   Prod: production environment', example='Prod'),
  name?: string(name='Name', description='The name of the data source. Fuzzy match by data source name is supported.', example='test'),
  order?: string(name='Order', description='The order in which you want to sort the data sources. Valid values:

*   Desc: descending order
*   Asc: ascending order

Default value: Desc', example='Asc'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='17820'),
  sortBy?: string(name='SortBy', description='The field that you want to use to sort the data sources. Valid values:

*   CreateTime
*   Id
*   Name

Default value: CreateTime', example='Id'),
  tags?: string(name='Tags', description='The tag of the data source. This parameter specifies a filter condition.

*   You can specify multiple tags, which are in the logical AND relation. For example, you can query the data sources that contain the following tags: `["tag1", "tag2", "tag3"]`.
*   If you do not configure this parameter, tag-based filtering is not performed. You can specify up to 10 tags.', example='["tag1", "tag2", "tag3"]'),
  types?: [ string ](name='Types', description='The data source types. This parameter specifies a filter condition. You can specify multiple data source types.'),
}

model ListDataSourcesShrinkRequest {
  envType?: string(name='EnvType', description='The environment in which the data sources are used. Valid values:

*   Dev: development environment
*   Prod: production environment', example='Prod'),
  name?: string(name='Name', description='The name of the data source. Fuzzy match by data source name is supported.', example='test'),
  order?: string(name='Order', description='The order in which you want to sort the data sources. Valid values:

*   Desc: descending order
*   Asc: ascending order

Default value: Desc', example='Asc'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='17820'),
  sortBy?: string(name='SortBy', description='The field that you want to use to sort the data sources. Valid values:

*   CreateTime
*   Id
*   Name

Default value: CreateTime', example='Id'),
  tags?: string(name='Tags', description='The tag of the data source. This parameter specifies a filter condition.

*   You can specify multiple tags, which are in the logical AND relation. For example, you can query the data sources that contain the following tags: `["tag1", "tag2", "tag3"]`.
*   If you do not configure this parameter, tag-based filtering is not performed. You can specify up to 10 tags.', example='["tag1", "tag2", "tag3"]'),
  typesShrink?: string(name='Types', description='The data source types. This parameter specifies a filter condition. You can specify multiple data source types.'),
}

model ListDataSourcesResponseBody = {
  pagingInfo?: {
    dataSources?: [ 
      {
        dataSource?: [ 
          {
            connectionProperties?: any(name='ConnectionProperties', description='The connection configurations of the data source, including the connection address, access identity, and environment information. The envType parameter specifies the environment in which the data source is used. Valid values of the envType parameter:

*   Dev: development environment
*   Prod: production environment

The parameters that you need to configure for the data source vary based on the mode in which the data source is added. For more information, see [Data source connection information (ConnectionProperties)](https://help.aliyun.com/document_detail/2852465.html).', example='{
	"envType": "Prod",
	"regionId": "cn-beijing",
    "instanceId": "hgprecn-cn-x0r3oun4k001",
    "database": "testdb",
    "securityProtocol": "authTypeNone",
    "authType": "Executor",
    "authIdentity": "1107550004253538"
}'),
            connectionPropertiesMode?: string(name='ConnectionPropertiesMode', description='The mode in which the data source is added. The mode varies based on the data source type. Valid values:

*   InstanceMode: instance mode
*   UrlMode: connection string mode', example='UrlMode'),
            createTime?: long(name='CreateTime', description='The time when the data source was added. This value is a UNIX timestamp.', example='1648711113000'),
            createUser?: string(name='CreateUser', description='The ID of the user who adds the data source.', example='1624387842781448'),
            description?: string(name='Description', description='The description of the data source.', example='test'),
            id?: long(name='Id', description='The ID of the data source.', example='16035'),
            modifyTime?: long(name='ModifyTime', description='The time when the data source was last modified. This value is a UNIX timestamp.', example='1648711113000'),
            modifyUser?: string(name='ModifyUser', description='The ID of the user who modifies the data source.', example='1624387842781448'),
            qualifiedName?: string(name='QualifiedName', description='The unique business key of the data source. For example, the unique business key of a Hologres data source is in the `${tenantOwnerId}:${regionId}:${type}:${instanceId}:${database}` format.', example='1648711121000:cn-beijing:odps:yongxunQA_beijing_standard'),
          }
        ](name='DataSource', description='The data sources. Each element is the information of a single data source with a unique data source ID.'),
        name?: string(name='Name', description='The name of the data source.', example='test'),
        type?: string(name='Type', description='The type of the data source.', example='mysql'),
      }
    ](name='DataSources', description='The data source groups. Each element in the array indicates a data source group. Each data source group contains data sources in the development environment (if any) and the production environment.'),
    pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='131'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7BE1433F-6D55-5D86-9344-CA6F7DD19B13'),
}

model ListDataSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourcesResponseBody(name='body'),
}

/**
 * @summary Queries a list of data sources based on the business information of data sources.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Deploy, Develop, Visitor, Workspace Owner, O\\&M, Model Designer, Security Administrator, Data Analyst, OpenPlatform Administrator, and Data Governance Administrator
 *
 * @param tmpReq ListDataSourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataSourcesResponse
 */
async function listDataSourcesWithOptions(tmpReq: ListDataSourcesRequest, runtime: Util.RuntimeOptions): ListDataSourcesResponse {
  Util.validateModel(tmpReq);
  var request = new ListDataSourcesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.types)) {
    request.typesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.types, 'Types', 'simple');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataSources',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of data sources based on the business information of data sources.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Deploy, Develop, Visitor, Workspace Owner, O\\&M, Model Designer, Security Administrator, Data Analyst, OpenPlatform Administrator, and Data Governance Administrator
 *
 * @param request ListDataSourcesRequest
 * @return ListDataSourcesResponse
 */
async function listDataSources(request: ListDataSourcesRequest): ListDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataSourcesWithOptions(request, runtime);
}

model ListDatabasesRequest {
  comment?: string(name='Comment', example='test comment'),
  name?: string(name='Name', example='test_tbl'),
  order?: string(name='Order', example='Asc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  parentMetaEntityId?: string(name='ParentMetaEntityId', description='The parent entity ID. For more information, see [description of concepts related to metadata entities.](https://help.aliyun.com/document_detail/2880092.html)

The type of the parent entity can be found in the response of the ListCrawlerTypes operation.

*   If the parent entity is a catalog, the format of `ParentMetaEntityId` follows the response of the ListCatalogs API.
*   If the parent entity is a metadata crawler, the format of `ParentMetaEntityId` is `${CrawlerType}:${Instance ID or encoded URL}.`

ParentMetaEntityId format examples

`dlf-catalog::catalog_id`

`holo:instance_id`

`mysql:(instance_id|encoded_jdbc_url)`

> \\\\
`catalog_id`: The DLF catalog ID.\\\\
`instance_id`: The instance ID, required for the data source registered in instance mode.\\\\
`encoded_jdbc_url`: The JDBC connection string that has been URL encoded, required for the data source registered via a connection string.

This parameter is required.', example='mysql:rm-abc123xxx
dlf-catalog:123456XXX:test_catalog'),
  sortBy?: string(name='SortBy', example='CreateTime'),
}

model ListDatabasesResponseBody = {
  pagingInfo?: {
    databases?: [
      Database
    ](name='Databases'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='1'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='9DD08926-38B9-XXXXXXX'),
  success?: boolean(name='Success', example='true'),
}

model ListDatabasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatabasesResponseBody(name='body'),
}

/**
 * @summary 查询数据库列表
 *
 * @param request ListDatabasesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDatabasesResponse
 */
async function listDatabasesWithOptions(request: ListDatabasesRequest, runtime: Util.RuntimeOptions): ListDatabasesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDatabases',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询数据库列表
 *
 * @param request ListDatabasesRequest
 * @return ListDatabasesResponse
 */
async function listDatabases(request: ListDatabasesRequest): ListDatabasesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDatabasesWithOptions(request, runtime);
}

model ListDeploymentPackageFilesRequest {
  businessId?: long(name='BusinessId', description='The workflow ID. You can call the [ListBusiness](https://help.aliyun.com/document_detail/173945.html) operation to query the workflow ID by name.', example='100001'),
  changeType?: int32(name='ChangeType', description='The change type. Valid values:

*   0: addition
*   1: update
*   2: deletion', example='0'),
  commitFrom?: string(name='CommitFrom', description='The start date for committing. Specify the date in the yyyy-MM-dd format.', example='2025-01-01'),
  commitTo?: string(name='CommitTo', description='The end date (included) for committing. Specify the date in the yyyy-MM-dd format.', example='2025-01-31'),
  commitUserId?: string(name='CommitUserId', description='The ID of the user who commits the file.', example='2003****'),
  fileIds?: [ string ](name='FileIds', description='The IDs of the files to be queried.'),
  fileName?: string(name='FileName', description='The name of the file.', example='Filename'),
  fileType?: int32(name='FileType', description='The type of the code for the file.

The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html). You can call the [ListFileType](https://help.aliyun.com/document_detail/212428.html) operation to query the type of the code for the file.', example='10'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='20'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='12345'),
  solutionId?: long(name='SolutionId', description='The solution ID.', example='8065'),
}

model ListDeploymentPackageFilesShrinkRequest {
  businessId?: long(name='BusinessId', description='The workflow ID. You can call the [ListBusiness](https://help.aliyun.com/document_detail/173945.html) operation to query the workflow ID by name.', example='100001'),
  changeType?: int32(name='ChangeType', description='The change type. Valid values:

*   0: addition
*   1: update
*   2: deletion', example='0'),
  commitFrom?: string(name='CommitFrom', description='The start date for committing. Specify the date in the yyyy-MM-dd format.', example='2025-01-01'),
  commitTo?: string(name='CommitTo', description='The end date (included) for committing. Specify the date in the yyyy-MM-dd format.', example='2025-01-31'),
  commitUserId?: string(name='CommitUserId', description='The ID of the user who commits the file.', example='2003****'),
  fileIdsShrink?: string(name='FileIds', description='The IDs of the files to be queried.'),
  fileName?: string(name='FileName', description='The name of the file.', example='Filename'),
  fileType?: int32(name='FileType', description='The type of the code for the file.

The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html). You can call the [ListFileType](https://help.aliyun.com/document_detail/212428.html) operation to query the type of the code for the file.', example='10'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='20'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='12345'),
  solutionId?: long(name='SolutionId', description='The solution ID.', example='8065'),
}

model ListDeploymentPackageFilesResponseBody = {
  pagingInfo?: {
    deploymentPackageFiles?: [ 
      {
        changeType?: int32(name='ChangeType', description='The change type, which is an integer. Valid values:

*   0: addition
*   1: update
*   2: deletion', example='0'),
        comment?: string(name='Comment', description='The comment for committing.'),
        commitTime?: string(name='CommitTime', description='The time for committing.', example='2025-04-10 15:55:47'),
        commitUser?: string(name='CommitUser', description='The ID of the Alibaba Cloud account used by the user who committed the file.', example='446***'),
        commitUserName?: string(name='CommitUserName', description='The name of the Alibaba Cloud account used by the user who committed the file.', example='user***'),
        fileId?: long(name='FileId', description='The file ID.', example='520246913'),
        fileName?: string(name='FileName', description='The name of the file of the current version.', example='bak_part_basc_person_relation_all_da'),
        fileType?: int32(name='FileType', description='The file type. The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html).', example='13'),
        fileVersion?: long(name='FileVersion', description='The file version.', example='34'),
        id?: long(name='Id', description='The unique ID.', example='650433503'),
        isSameAsProductionVersion?: boolean(name='IsSameAsProductionVersion', description='Indicates whether the version is a version in the production environment of the scheduling system.', example='true'),
        nodeConfiguration?: string(name='NodeConfiguration', description='The scheduling property configurations of the node that corresponds to the file, which is a JSON string.', example='{
	"tagList": [],
	"fileId": -1,
	"taskRerunTime": 0,
	"taskRerunInterval": 0,
	"reRunAble": 1,
	"nodeId": 125803000,
	"nodeName": "new",
	"nodeType": 0,
	"isStop": 0,
	"paraValue": "",
	"startEffectDate": "1970-01-01 00:00:00",
	"endEffectDate": "9999-01-01 00:00:00",
	"cronExpress": "00 26 00 * * ?",
	"owner": "1107550004250000",
	"resgroupId": 6300000,
	"cu": "0.25",
	"appId": 170000,
	"tenantId": 524257424560000,
	"createTime": "2025-04-10 15:55:01",
	"createUser": "1107550004250000",
	"lastModifyTime": "2025-04-10 15:55:41",
	"cycleType": 0,
	"dependentType": 0,
	"dependentTypeList": [0],
	"lastModifyUser": "1107550004250000",
	"dependentDataNode": "",
	"input": "[{\\\\"regionId\\\\":\\\\"cn-hangzhou\\\\",\\\\"str\\\\":\\\\"root_input\\\\",\\\\"parseType\\\\":1}]",
	"output": "[{\\\\"str\\\\":\\\\"project_root.526586287_out\\\\",\\\\"parseType\\\\":2},{\\\\"str\\\\":\\\\"project_root.new\\\\",\\\\"parseType\\\\":1}]",
	"inputList": [{
		"regionId": "cn-hangzhou",
		"str": "root_input",
		"parseType": 1
	}],
	"outputList": [{
		"str": "project_root.526586287_out",
		"parseType": 2
	}, {
		"str": "project_root.new",
		"parseType": 1
	}],
	"isAutoParse": 1,
	"startRightNow": false,
	"extConfig": "{\\\\"openCustomCron\\\\":false,\\\\"formCron\\\\":\\\\"\\\\"}",
	"inputContextList": [],
	"outputContextList": []
}'),
        nodeId?: long(name='NodeId', description='The ID of the auto triggered node that corresponds to the file.', example='700005008419'),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='27595'),
        smokeTestStatus?: string(name='SmokeTestStatus', description='The test status in the development environment.'),
        status?: int32(name='Status', description='The status of the code file of the current version. Valid values:

*   2: Commit check in progress.
*   3: Commit check passed.
*   4: Commit check failed.
*   10: Committing.
*   11: Committed.
*   20: Approved.
*   21: Rejected.
*   22: Warning detected during checking.
*   23: Under code review.
*   24: Code review rejected.
*   80: Deployment package created.
*   100: Deploying.
*   101: Deployed to the production environment.
*   200: Cancelled.', example='100'),
        tenantId?: long(name='TenantId', description='The DataWorks tenant ID.', example='639415964191360'),
        useType?: string(name='UseType', description='The module to which the file belongs. Valid values:

*   NORMAL: The file is used for DataStudio.
*   MANUAL: The file is used for a manually triggered node.
*   MANUAL_BIZ: The file is used for a manually triggered workflow.
*   SKIP: The file is used for a dry-run node in DataStudio.
*   ADHOCQUERY: The file is used for an ad hoc query.
*   COMPONENT: The file is used for a script template.', example='NORMAL'),
      }
    ](name='DeploymentPackageFiles', description='The list of files pending deployment.'),
    pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PagingInfo', description='The pagination details.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
}

model ListDeploymentPackageFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeploymentPackageFilesResponseBody(name='body'),
}

/**
 * @summary Queries a list of versions of files to be deployed.
 *
 * @param tmpReq ListDeploymentPackageFilesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDeploymentPackageFilesResponse
 */
async function listDeploymentPackageFilesWithOptions(tmpReq: ListDeploymentPackageFilesRequest, runtime: Util.RuntimeOptions): ListDeploymentPackageFilesResponse {
  Util.validateModel(tmpReq);
  var request = new ListDeploymentPackageFilesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.fileIds)) {
    request.fileIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fileIds, 'FileIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.businessId)) {
    query['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.changeType)) {
    query['ChangeType'] = request.changeType;
  }
  if (!Util.isUnset(request.commitFrom)) {
    query['CommitFrom'] = request.commitFrom;
  }
  if (!Util.isUnset(request.commitTo)) {
    query['CommitTo'] = request.commitTo;
  }
  if (!Util.isUnset(request.commitUserId)) {
    query['CommitUserId'] = request.commitUserId;
  }
  if (!Util.isUnset(request.fileIdsShrink)) {
    query['FileIds'] = request.fileIdsShrink;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileType)) {
    query['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.solutionId)) {
    query['SolutionId'] = request.solutionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDeploymentPackageFiles',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of versions of files to be deployed.
 *
 * @param request ListDeploymentPackageFilesRequest
 * @return ListDeploymentPackageFilesResponse
 */
async function listDeploymentPackageFiles(request: ListDeploymentPackageFilesRequest): ListDeploymentPackageFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeploymentPackageFilesWithOptions(request, runtime);
}

model ListDeploymentPackagesRequest {
  creator?: string(name='Creator', example='110755000425****'),
  endCreateTime?: long(name='EndCreateTime', example='1593877765000'),
  endExecuteTime?: long(name='EndExecuteTime', example='1593877765000'),
  executor?: string(name='Executor', example='2003****'),
  keyword?: string(name='Keyword', example='abc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='10003'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
  status?: int32(name='Status', example='1'),
}

model ListDeploymentPackagesResponseBody = {
  data?: {
    deployments?: [ 
      {
        createTime?: long(name='CreateTime', example='1593877765000'),
        creator?: string(name='Creator', example='2003****'),
        errorMessage?: string(name='ErrorMessage', example='OK'),
        executeTime?: long(name='ExecuteTime', example='1593877765000'),
        executor?: string(name='Executor', example='2003****'),
        id?: long(name='Id', example='11111'),
        name?: string(name='Name', example='auto_created'),
        status?: int32(name='Status', example='1'),
      }
    ](name='Deployments'),
    pageNumber?: long(name='PageNumber', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='20'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='952795279527ab****'),
}

model ListDeploymentPackagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeploymentPackagesResponseBody(name='body'),
}

/**
 * @summary 查询发布包列表
 *
 * @param request ListDeploymentPackagesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDeploymentPackagesResponse
 */
async function listDeploymentPackagesWithOptions(request: ListDeploymentPackagesRequest, runtime: Util.RuntimeOptions): ListDeploymentPackagesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.creator)) {
    body['Creator'] = request.creator;
  }
  if (!Util.isUnset(request.endCreateTime)) {
    body['EndCreateTime'] = request.endCreateTime;
  }
  if (!Util.isUnset(request.endExecuteTime)) {
    body['EndExecuteTime'] = request.endExecuteTime;
  }
  if (!Util.isUnset(request.executor)) {
    body['Executor'] = request.executor;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDeploymentPackages',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询发布包列表
 *
 * @param request ListDeploymentPackagesRequest
 * @return ListDeploymentPackagesResponse
 */
async function listDeploymentPackages(request: ListDeploymentPackagesRequest): ListDeploymentPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeploymentPackagesWithOptions(request, runtime);
}

model ListDownstreamTaskInstancesRequest {
  id?: long(name='Id', description='The instance ID.

This parameter is required.', example='1234'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
}

model ListDownstreamTaskInstancesResponseBody = {
  pagingInfo?: {
    downstreamTaskInstances?: [ 
      {
        dependencyType?: string(name='DependencyType', description='The scheduling dependency type. Valid values:

*   Normal
*   CrossCycle', example='Normal'),
        taskInstance?: {
          baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
          bizdate?: long(name='Bizdate', description='The data timestamp.', example='1710239005403'),
          createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
          createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
          dataSource?: {
            name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
          }(name='DataSource', description='The information about the associated data source.'),
          description?: string(name='Description', description='The description.', example='test'),
          envType?: string(name='EnvType', description='The environment in which the data source is used. Valid values:

*   Dev
*   Prod', example='Prod'),
          finishedTime?: long(name='FinishedTime', description='The time when the instance finished running.', example='1710239005403'),
          id?: long(name='Id', description='The instance ID.', example='1234'),
          modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
          modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
          owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
          periodNumber?: int32(name='PeriodNumber', description='The sequence number of the cycle. This parameter indicates the cycle of the task instance on the current day.', example='1'),
          priority?: int32(name='Priority', description='The priority of the task. Minimum value: 1. Maximum value: 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
          projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
          rerunMode?: string(name='RerunMode', description='The rerun mode.', example='AllAllowed'),
          runNumber?: int32(name='RunNumber', description='The number of times the instance is run. By default, the value starts from 1.', example='1'),
          runtime?: {
            gateway?: string(name='Gateway', description='The host for running.', example='cn-shanghai.1.2'),
            processId?: string(name='ProcessId', description='The instance run ID.', example='T3_123'),
          }(name='Runtime', description='The runtime information about the instance.'),
          runtimeResource?: {
            cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
            image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
            resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
          }(name='RuntimeResource', description='The configurations of the runtime environment, such as the resource group information.'),
          startedTime?: long(name='StartedTime', description='The time when the instance started to run.', example='1710239005403'),
          status?: string(name='Status', description='The status of the instance. Valid values:

*   NotRun: The instance is not run.
*   Running: The instance is running.
*   WaitTime: The instance is waiting for the scheduling time to arrive.
*   CheckingCondition: Branch conditions are being checked for the instance.
*   WaitResource: The instance is waiting for resources.
*   Failure: The instance fails to be run.
*   Success: The instance is successfully run.
*   Checking: Data quality is being checked for the instance.
*   WaitTrigger: The instance is waiting to be triggered by external scheduling systems.', example='Success'),
          taskId?: long(name='TaskId', description='The ID of the task for which the instance is generated.', example='1234'),
          taskName?: string(name='TaskName', description='The name of the task for which the instance is generated.', example='SQL node'),
          taskType?: string(name='TaskType', description='The type of the task for which the instance is generated.', example='ODPS_SQL'),
          timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.

Note: The value of this parameter is rounded up by hour.', example='3600'),
          triggerRecurrence?: string(name='TriggerRecurrence', description='The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler. Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
          triggerTime?: long(name='TriggerTime', description='The scheduling time.', example='1710239005403'),
          triggerType?: string(name='TriggerType', description='The trigger type. Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
          workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs.', example='1234'),
          workflowInstanceId?: long(name='WorkflowInstanceId', description='The workflow instance ID.', example='1234'),
          workflowInstanceType?: string(name='WorkflowInstanceType', description='The type of the workflow instance. Valid values:

*   Normal
*   Manual
*   SmokeTest
*   SupplementData
*   ManualWorkflow', example='Normal'),
          workflowName?: string(name='WorkflowName', description='The name of the workflow to which the instance belongs.', example='Test workflow'),
        }(name='TaskInstance', description='The information about a task instance.'),
      }
    ](name='DownstreamTaskInstances', description='The descendant instances.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    taskInstances?: [ 
      {
        baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
        bizdate?: long(name='Bizdate', description='The data timestamp.', example='1710239005403'),
        createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
        createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
        }(name='DataSource', description='The information about the associated data source.'),
        description?: string(name='Description', description='The description.', example='test'),
        envType?: string(name='EnvType', description='The environment in which the data source is used. Valid values:

*   Dev
*   Prod', example='Prod'),
        finishedTime?: long(name='FinishedTime', description='The time when the instance finished running.', example='1710239005403'),
        id?: long(name='Id', description='The instance ID.', example='1234'),
        modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
        owner?: string(name='Owner', description='The account ID of the task owner.', example='100'),
        periodNumber?: int32(name='PeriodNumber', description='The sequence number of the cycle. This parameter indicates the cycle of the task instance on the current day.', example='1'),
        priority?: int32(name='Priority', description='The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
        projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. This parameter is deprecated and replaced by the EnvType parameter. Valid values:', example='Prod', deprecated=true),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
        rerunMode?: string(name='RerunMode', description='The rerun mode.

Valid values:

*   AllDenied: The task cannot be rerun regardless of whether it is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.
*   AllAllowed: The task can be rerun regardless of whether it is successfully run or fails to run.', example='AllAllowed'),
        runNumber?: int32(name='RunNumber', description='The number of times the instance is run. By default, the value starts from 1.', example='1'),
        runtime?: {
          gateway?: string(name='Gateway', description='The host for running.', example='cn-shanghai.1.2'),
          processId?: string(name='ProcessId', description='The instance run ID.', example='T3_123'),
        }(name='Runtime', description='The runtime information about the instance.'),
        runtimeResource?: {
          cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
          image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
          resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
        }(name='RuntimeResource', description='The information about the resource group with which the instance is associated.'),
        startedTime?: long(name='StartedTime', description='The time when the instance started to run.', example='1710239005403'),
        status?: string(name='Status', description='The status of the instance. Valid values:

*   NotRun: The instance is not run.
*   Running: The instance is running.
*   WaitTime: The instance is waiting for the scheduling time to arrive.
*   CheckingCondition: Branch conditions are being checked for the instance.
*   WaitResource: The instance is waiting for resources.
*   Failure: The instance fails to be run.
*   Success: The instance is successfully run.
*   Checking: Data quality is being checked for the instance.
*   WaitTrigger: The instance is waiting to be triggered by external scheduling systems.', example='Success'),
        stepType?: string(name='StepType', description='The scheduling dependency type. Valid values:

*   Normal: same-cycle scheduling dependency
*   CrossCycle: cross-cycle scheduling dependency', example='Normal'),
        taskId?: long(name='TaskId', description='The ID of the task for which the instance is generated.', example='1234'),
        taskName?: string(name='TaskName', description='The name of the task for which the instance is generated.', example='SQL node'),
        taskType?: string(name='TaskType', description='The type of the task for which the instance is generated.', example='ODPS_SQL'),
        timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.

Note: The value of this parameter is rounded up by hour.', example='1'),
        triggerRecurrence?: string(name='TriggerRecurrence', description='The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler.

Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
        triggerTime?: long(name='TriggerTime', description='The scheduling time.', example='1710239005403'),
        triggerType?: string(name='TriggerType', description='The method to trigger instance scheduling.

Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
        workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs.', example='1234'),
        workflowInstanceId?: long(name='WorkflowInstanceId', description='The workflow instance ID.', example='1234'),
        workflowInstanceType?: string(name='WorkflowInstanceType', description='The type of the workflow instance.

Valid values:

*   SmokeTest
*   SupplementData
*   Manual
*   ManualWorkflow
*   Normal
*   ManualFlow', example='Normal'),
        workflowName?: string(name='WorkflowName', description='The name of the workflow to which the instance belongs.', example='Test workflow'),
      }
    ](name='TaskInstances', description='The instances. This parameter is deprecated and replaced by the DownstreamTaskInstances parameter.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListDownstreamTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDownstreamTaskInstancesResponseBody(name='body'),
}

/**
 * @summary Queries a list of descendant instances of an instance by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDownstreamTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDownstreamTaskInstancesResponse
 */
async function listDownstreamTaskInstancesWithOptions(request: ListDownstreamTaskInstancesRequest, runtime: Util.RuntimeOptions): ListDownstreamTaskInstancesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDownstreamTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of descendant instances of an instance by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDownstreamTaskInstancesRequest
 * @return ListDownstreamTaskInstancesResponse
 */
async function listDownstreamTaskInstances(request: ListDownstreamTaskInstancesRequest): ListDownstreamTaskInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDownstreamTaskInstancesWithOptions(request, runtime);
}

model ListDownstreamTasksRequest {
  id?: long(name='Id', description='The task ID.

This parameter is required.', example='1234'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
}

model ListDownstreamTasksResponseBody = {
  pagingInfo?: {
    downstreamTasks?: [ 
      {
        dependencyType?: string(name='DependencyType', description='The scheduling dependency type. Valid values:

*   Normal: same-cycle scheduling dependency
*   CrossCycle: cross-cycle scheduling dependency', example='Normal'),
        task?: {
          baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
          createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
          createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
          dataSource?: {
            name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
          }(name='DataSource', description='The information about the associated data source.'),
          description?: string(name='Description', description='The description.', example='test'),
          envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod
*   Dev', example='Prod'),
          id?: long(name='Id', description='The task ID.', example='1234'),
          instanceMode?: string(name='InstanceMode', description='The instance generation mode. Valid values:

*   T+1
*   Immediately', example='T+1'),
          modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
          modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
          name?: string(name='Name', description='The name of the task.', example='SQL node'),
          owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
          priority?: int32(name='Priority', description='The priority of the task. Valid values: 1 to 8.', example='1'),
          projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
          rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: seconds.', example='60'),
          rerunMode?: string(name='RerunMode', description='The rerun mode. Valid values:

*   AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.
*   AllAllowed: The task can be rerun regardless of whether it is successfully run or fails to run.', example='AllAllowed'),
          rerunTimes?: int32(name='RerunTimes', description='The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.', example='3'),
          runtimeResource?: {
            cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
            image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
            resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
          }(name='RuntimeResource', description='The configurations of the runtime environment, such as the resource group information.'),
          timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='3600'),
          trigger?: {
            cron?: string(name='Cron', description='The CRON expression. This parameter takes effect only if the Type parameter is set to Scheduler.', example='00 00 00 * * ?'),
            endTime?: string(name='EndTime', description='The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='9999-01-01 00:00:00'),
            recurrence?: string(name='Recurrence', description='The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler. Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
            startTime?: string(name='StartTime', description='The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='1970-01-01 00:00:00'),
            timezone?: string(name='Timezone', description='The time zone.', example='Asia/Shanghai'),
            type?: string(name='Type', description='The trigger type. Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
          }(name='Trigger', description='The trigger method.'),
          type?: string(name='Type', description='The type of the task.', example='ODPS_SQL'),
          workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the task belongs.', example='1234'),
        }(name='Task', description='The information about the task.'),
      }
    ](name='DownstreamTasks', description='The descendant tasks.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    tasks?: [ 
      {
        baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
        createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
        createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
        }(name='DataSource', description='The information about the associated data source.'),
        description?: string(name='Description', description='The description of the task.', example='test'),
        envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod
*   Dev', example='Prod'),
        id?: long(name='Id', description='The task ID.', example='1234'),
        instanceMode?: string(name='InstanceMode', description='The instance generation mode. Valid values:

*   T+1
*   Immediately', example='T+1'),
        modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
        name?: string(name='Name', description='The name of the task.', example='SQL node'),
        owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
        priority?: int32(name='Priority', description='The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
        projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. This parameter is deprecated and replaced by the EnvType parameter.

Valid values:

*   Prod
*   Dev', example='Prod', deprecated=true),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
        rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: seconds.', example='60'),
        rerunMode?: string(name='RerunMode', description='The rerun mode.

Valid values:

*   AllDenied: The task cannot be rerun regardless of whether it is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.
*   AllAllowed: The task can be rerun regardless of whether it is successfully run or fails to run.', example='AllAllowed'),
        rerunTimes?: int32(name='RerunTimes', description='The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.', example='3'),
        runtimeResource?: {
          cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
          image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
          resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
        }(name='RuntimeResource', description='The configurations of the runtime environment, such as the resource group information.'),
        stepType?: string(name='StepType', description='The scheduling dependency type. Valid values:

*   Normal: same-cycle scheduling dependency
*   CrossCycle: cross-cycle scheduling dependency', example='Normal'),
        timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='3600'),
        trigger?: {
          cron?: string(name='Cron', description='The CRON expression of the task. This parameter takes effect only if the Type parameter is set to Scheduler.', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', description='The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='9999-01-01 00:00:00'),
          recurrence?: string(name='Recurrence', description='The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler.

Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
          startTime?: string(name='StartTime', description='The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='1970-01-01 00:00:00'),
          timezone?: string(name='Timezone', description='The time zone.', example='Asia/Shanghai'),
          type?: string(name='Type', description='The trigger type.

Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
        }(name='Trigger', description='The method to trigger task scheduling.'),
        type?: string(name='Type', description='The type of the task.', example='ODPS_SQL'),
        workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the task belongs.', example='1234'),
      }
    ](name='Tasks', description='The tasks. This parameter is deprecated and replaced by the DownstreamTasks parameter.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListDownstreamTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDownstreamTasksResponseBody(name='body'),
}

/**
 * @summary Queries a list of descendant tasks of a task by page.
 *
 * @param request ListDownstreamTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDownstreamTasksResponse
 */
async function listDownstreamTasksWithOptions(request: ListDownstreamTasksRequest, runtime: Util.RuntimeOptions): ListDownstreamTasksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDownstreamTasks',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of descendant tasks of a task by page.
 *
 * @param request ListDownstreamTasksRequest
 * @return ListDownstreamTasksResponse
 */
async function listDownstreamTasks(request: ListDownstreamTasksRequest): ListDownstreamTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDownstreamTasksWithOptions(request, runtime);
}

model ListEntitiesInMetaCollectionRequest {
  entityDescription?: string(name='EntityDescription'),
  entityName?: string(name='EntityName', example='test1'),
  entityType?: string(name='EntityType', example='dlf-table'),
  id?: string(name='Id', description='The collection ID.

This parameter is required.', example='category.123'),
  order?: string(name='Order', example='Asc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  sortBy?: string(name='SortBy', example='Name'),
}

model ListEntitiesInMetaCollectionResponseBody = {
  pagingInfo?: {
    entities?: [ 
      {
        comment?: string(name='Comment'),
        createTime?: long(name='CreateTime', example='1737078994080'),
        description?: string(name='Description'),
        id?: string(name='Id', description='The entity ID. Entities can only be tables. This parameter is left empty if the entity is deleted.', example='dlf-table:123456789:test_catalog:test_database::test_table'),
        modifyTime?: long(name='ModifyTime', example='1737078994080'),
        name?: string(name='Name', example='test_table'),
        type?: string(name='Type', description='The type of the entity.', example='dlf-table'),
      }
    ](name='Entities', description='The entities in the collection.'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='1'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='Id of the request', example='F05080B0-CCE6-5D22-B284-34A51C5D4E28'),
}

model ListEntitiesInMetaCollectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEntitiesInMetaCollectionResponseBody(name='body'),
}

/**
 * @summary Queries a list of entities in a collection in Data Map. Collections include categories and data albums. Entities can only be tables.
 *
 * @param request ListEntitiesInMetaCollectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEntitiesInMetaCollectionResponse
 */
async function listEntitiesInMetaCollectionWithOptions(request: ListEntitiesInMetaCollectionRequest, runtime: Util.RuntimeOptions): ListEntitiesInMetaCollectionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEntitiesInMetaCollection',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of entities in a collection in Data Map. Collections include categories and data albums. Entities can only be tables.
 *
 * @param request ListEntitiesInMetaCollectionRequest
 * @return ListEntitiesInMetaCollectionResponse
 */
async function listEntitiesInMetaCollection(request: ListEntitiesInMetaCollectionRequest): ListEntitiesInMetaCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEntitiesInMetaCollectionWithOptions(request, runtime);
}

model ListFileVersionsRequest {
  fileId?: long(name='FileId', description='This parameter is required.', example='100000001'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='100001'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model ListFileVersionsResponseBody = {
  data?: {
    fileVersions?: [ 
      {
        changeType?: string(name='ChangeType', example='UPDATE'),
        comment?: string(name='Comment', example='Second version submission'),
        commitTime?: long(name='CommitTime', example='1593881265000'),
        commitUser?: string(name='CommitUser', example='73842342****'),
        fileContent?: string(name='FileContent', example='SHOW TABLES;'),
        fileName?: string(name='FileName', example='ods_user_info_d'),
        filePropertyContent?: string(name='FilePropertyContent', example='{"fileName":"ods_user_info_d","fileType":10}'),
        fileVersion?: int32(name='FileVersion', example='2'),
        isCurrentProd?: boolean(name='IsCurrentProd', example='false'),
        nodeContent?: string(name='NodeContent', example='{"cycleType":0,"cronExpress":"00 05 00 * * ?"}'),
        nodeId?: long(name='NodeId', example='1234'),
        status?: string(name='Status', example='COMMITTED'),
        useType?: string(name='UseType', example='NORMAL'),
      }
    ](name='FileVersions'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='13'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model ListFileVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFileVersionsResponseBody(name='body'),
}

/**
 * @param request ListFileVersionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFileVersionsResponse
 */
async function listFileVersionsWithOptions(request: ListFileVersionsRequest, runtime: Util.RuntimeOptions): ListFileVersionsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFileVersions',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request ListFileVersionsRequest
 * @return ListFileVersionsResponse
 */
async function listFileVersions(request: ListFileVersionsRequest): ListFileVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFileVersionsWithOptions(request, runtime);
}

model ListFilesRequest {
  commitStatus?: int32(name='CommitStatus', example='1'),
  exactFileName?: string(name='ExactFileName', example='ods_create.sql'),
  fileFolderPath?: string(name='FileFolderPath', example='Business_process/my_first_business_process/MaxCompute/ods_layer'),
  fileIdIn?: string(name='FileIdIn', example='78237,816123'),
  fileTypes?: string(name='FileTypes', example='10,23'),
  keyword?: string(name='Keyword', example='ods'),
  lastEditUser?: string(name='LastEditUser', example='11233***'),
  needAbsoluteFolderPath?: boolean(name='NeedAbsoluteFolderPath', example='false'),
  needContent?: boolean(name='NeedContent', example='false'),
  nodeId?: long(name='NodeId', example='123541234'),
  owner?: string(name='Owner', example='3726346****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
  useType?: string(name='UseType', example='NORMAL'),
}

model ListFilesResponseBody = {
  data?: {
    files?: [ 
      {
        absoluteFolderPath?: string(name='AbsoluteFolderPath', example='Business_process/my_first_business_process/MaxCompute/ods_layer'),
        autoParsing?: boolean(name='AutoParsing', example='true'),
        bizId?: long(name='BizId', example='300000'),
        businessId?: long(name='BusinessId', example='300000'),
        commitStatus?: int32(name='CommitStatus', example='1'),
        connectionName?: string(name='ConnectionName', example='odps_source'),
        content?: string(name='Content', example='SHOW TABLES;'),
        createTime?: long(name='CreateTime', example='1593950832000'),
        createUser?: string(name='CreateUser', example='382762****'),
        currentVersion?: int32(name='CurrentVersion', example='2'),
        fileDescription?: string(name='FileDescription', example='my test datastudio file'),
        fileFolderId?: string(name='FileFolderId', example='2735c2****'),
        fileId?: long(name='FileId', example='10000001'),
        fileName?: string(name='FileName', example='ods_user_info_d'),
        fileType?: int32(name='FileType', example='10'),
        isMaxCompute?: boolean(name='IsMaxCompute', example='false'),
        lastEditTime?: long(name='LastEditTime', example='1593950832000'),
        lastEditUser?: string(name='LastEditUser', example='382762****'),
        nodeId?: long(name='NodeId', example='300001'),
        owner?: string(name='Owner', example='3872572****'),
        parentId?: long(name='ParentId', example='-1'),
        useType?: string(name='UseType', example='NORMAL'),
      }
    ](name='Files'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='13'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-****'),
  success?: boolean(name='Success', example='true'),
}

model ListFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFilesResponseBody(name='body'),
}

/**
 * @param request ListFilesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFilesResponse
 */
async function listFilesWithOptions(request: ListFilesRequest, runtime: Util.RuntimeOptions): ListFilesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.commitStatus)) {
    body['CommitStatus'] = request.commitStatus;
  }
  if (!Util.isUnset(request.exactFileName)) {
    body['ExactFileName'] = request.exactFileName;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileIdIn)) {
    body['FileIdIn'] = request.fileIdIn;
  }
  if (!Util.isUnset(request.fileTypes)) {
    body['FileTypes'] = request.fileTypes;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lastEditUser)) {
    body['LastEditUser'] = request.lastEditUser;
  }
  if (!Util.isUnset(request.needAbsoluteFolderPath)) {
    body['NeedAbsoluteFolderPath'] = request.needAbsoluteFolderPath;
  }
  if (!Util.isUnset(request.needContent)) {
    body['NeedContent'] = request.needContent;
  }
  if (!Util.isUnset(request.nodeId)) {
    body['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.useType)) {
    body['UseType'] = request.useType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFiles',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request ListFilesRequest
 * @return ListFilesResponse
 */
async function listFiles(request: ListFilesRequest): ListFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFilesWithOptions(request, runtime);
}

model ListFoldersRequest {
  pageNumber?: int32(name='PageNumber', description='This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='This parameter is required.', example='10'),
  parentFolderPath?: string(name='ParentFolderPath', description='This parameter is required.', example='Business_process/my_first_business_process/MaxCompute'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model ListFoldersResponseBody = {
  data?: {
    folders?: [ 
      {
        folderId?: string(name='FolderId', example='2735c2****'),
        folderPath?: string(name='FolderPath', example='Business_process/my_first_business_process/MaxCompute/ods_layer'),
      }
    ](name='Folders'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='13'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-****'),
  success?: boolean(name='Success', example='true'),
}

model ListFoldersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFoldersResponseBody(name='body'),
}

/**
 * @param request ListFoldersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFoldersResponse
 */
async function listFoldersWithOptions(request: ListFoldersRequest, runtime: Util.RuntimeOptions): ListFoldersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentFolderPath)) {
    body['ParentFolderPath'] = request.parentFolderPath;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFolders',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request ListFoldersRequest
 * @return ListFoldersResponse
 */
async function listFolders(request: ListFoldersRequest): ListFoldersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFoldersWithOptions(request, runtime);
}

model ListFunctionsRequest {
  name?: string(name='Name'),
  owner?: string(name='Owner', description='The ID of the owner of the UDF. This parameter specifies a filter condition.', example='110755000425XXXX'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1. Minimum value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='12345'),
  type?: string(name='Type', description='The user-defined function (UDF) type. This parameter specifies a filter condition.

Valid values:

*   Math: mathematical operation function
*   Aggregate: aggregate function
*   String: string processing function
*   Date: date function
*   Analytic: window function
*   Other: other functions', example='MATH'),
}

model ListFunctionsResponseBody = {
  pagingInfo?: {
    functions?: [ 
      {
        armResource?: string(name='ArmResource', description='The file resources in an Advanced RISC Machines (ARM) cluster.', example='xxx.jar,yyy.jar'),
        className?: string(name='ClassName', description='The fully qualified class name of the UDF.', example='com.demo.Main'),
        commandDescription?: string(name='CommandDescription', description='The description of the command.', example='testUdf(xx,yy)'),
        createTime?: long(name='CreateTime', description='The time when the UDF was created. This value is a UNIX timestamp.', example='1655953028000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='odps_first'),
          type?: string(name='Type', description='The type of the data source.', example='odps'),
        }(name='DataSource', description='The data source information about the UDF.'),
        databaseName?: string(name='DatabaseName', description='The name of the database. This parameter is returned for E-MapReduce (EMR) functions.', example='odps_first'),
        description?: string(name='Description', description='The overall description of the UDF.', example='Description'),
        embeddedCode?: string(name='EmbeddedCode', description='The code of the embedded UDF.', example='print(\\\\"hello,world!\\\\")'),
        embeddedCodeType?: string(name='EmbeddedCodeType', description='The type of the nested code.

Valid values:

*   Python2
*   Python3
*   Java8
*   Java11
*   Java17', example='Python2'),
        embeddedResourceType?: string(name='EmbeddedResourceType', description='The type of the nested resource.

Valid values:

*   File: general resources
*   Embedded: embedded resources', example='File'),
        exampleDescription?: string(name='ExampleDescription', description='The description of the example.', example='Example description >>> select tsetUdf(xx,yy);
abc'),
        fileResource?: string(name='FileResource', description='The files resources.', example='xxx.jar,yyy.jar'),
        id?: long(name='Id', description='The ID of the UDF.', example='580667964888595XXXX'),
        modifyTime?: long(name='ModifyTime', description='The time when the UDF was last modified. This value is a UNIX timestamp.', example='1655953028000'),
        name?: string(name='Name', description='The name of the UDF.', example='Function name'),
        owner?: string(name='Owner', description='The owner of the UDF.', example='110755000425XXXX'),
        parameterDescription?: string(name='ParameterDescription', description='The description of the parameter.', example='xx: parameter information XXX
yy: parameter information YYY'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the UDF belongs.', example='307XXX'),
        returnValueDescription?: string(name='ReturnValueDescription', description='The description of the return value.', example='The return value is a string.'),
        runtimeResource?: {
          resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group used when you run the UDF.', example='S_resgrop_xxx'),
        }(name='RuntimeResource', description='The information about the resource group used when you run the UDF.'),
        script?: {
          id?: long(name='Id', description='The script ID.', example='652567824470354XXXX'),
          path?: string(name='Path', description='The script path.', example='XXX/OpenAPI/function/function_name'),
          runtime?: {
            command?: string(name='Command', description='The command.', example='ODPS_FUNCTION'),
          }(name='Runtime', description='The runtime.'),
        }(name='Script', description='The script information about the UDF.'),
        type?: string(name='Type', description='The UDF type.

Valid values:

*   Math: mathematical operation function
*   Aggregate: aggregate function
*   String: string processing function
*   Date: date function
*   Analytic: window function
*   Other: other functions', example='MATH'),
      }
    ](name='Functions', description='The UDFs.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='294'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='89FB2BF0-EB00-5D03-9C34-05931001XXXX'),
}

model ListFunctionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFunctionsResponseBody(name='body'),
}

/**
 * @summary Queries a list of user-defined functions (UDFs) in DataStudio. You can also specify filter conditions to query specific UDFs.
 *
 * @param request ListFunctionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFunctionsResponse
 */
async function listFunctionsWithOptions(request: ListFunctionsRequest, runtime: Util.RuntimeOptions): ListFunctionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFunctions',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of user-defined functions (UDFs) in DataStudio. You can also specify filter conditions to query specific UDFs.
 *
 * @param request ListFunctionsRequest
 * @return ListFunctionsResponse
 */
async function listFunctions(request: ListFunctionsRequest): ListFunctionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFunctionsWithOptions(request, runtime);
}

model ListLineageRelationshipsRequest {
  dstEntityId?: string(name='DstEntityId', description='The destination entity ID. For more information, see the table ID or field ID in the response returned by the ListTables or ListColumns operation. You can also specify a custom entity ID.

This parameter is required.', example='maxcompute-table:123456XXX::test_project::test_tbl
dlf-table:123456XXX:test_catalog:test_db::test_tbl
hms-table:c-abc123xxx::test_db::test_tbl
holo-table:h-abc123xxx::test_db:test_schema:test_tbl
custom-api:api123
custom-table:table456'),
  dstEntityName?: string(name='DstEntityName', description='The destination entity name. Supports fuzzy matching.', example='dstName'),
  order?: string(name='Order', description='The order in which schemas are sorted. Default value: Asc. Valid values:

*   Asc: ascending.
*   Desc: descending.', example='Asc'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  sortBy?: string(name='SortBy', description='The sort field. Default value: Name.', example='Name'),
  srcEntityId?: string(name='SrcEntityId', description='The source entity ID. For more information, see the table ID or field ID in the response returned by the ListTables or ListColumns operation. You can also specify a custom entity ID.

This parameter is required.', example='maxcompute-table:123456XXX::test_project::test_tbl
dlf-table:123456XXX:test_catalog:test_db::test_tbl
hms-table:c-abc123xxx::test_db::test_tbl
holo-table:h-abc123xxx::test_db:test_schema:test_tbl
custom-api:api123
custom-table:table456'),
  srcEntityName?: string(name='SrcEntityName', description='The source entity name. Supports fuzzy matching.', example='srcName'),
}

model ListLineageRelationshipsResponseBody = {
  pagingInfo?: {
    lineageRelationships?: [
      LineageRelationship
    ](name='LineageRelationships', description='The list of data tables.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The page size.', example='10'),
    totalCount?: long(name='TotalCount', description='The total count.', example='123'),
  }(name='PagingInfo', description='The pagination result.'),
  requestId?: string(name='RequestId', description='The request ID. Used for locating and troubleshooting issues.', example='SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListLineageRelationshipsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLineageRelationshipsResponseBody(name='body'),
}

/**
 * @summary 查询血缘关系
 *
 * @param request ListLineageRelationshipsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLineageRelationshipsResponse
 */
async function listLineageRelationshipsWithOptions(request: ListLineageRelationshipsRequest, runtime: Util.RuntimeOptions): ListLineageRelationshipsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLineageRelationships',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询血缘关系
 *
 * @param request ListLineageRelationshipsRequest
 * @return ListLineageRelationshipsResponse
 */
async function listLineageRelationships(request: ListLineageRelationshipsRequest): ListLineageRelationshipsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLineageRelationshipsWithOptions(request, runtime);
}

model ListLineagesRequest {
  dstEntityId?: string(name='DstEntityId', description='The destination entity ID. For more information, see the table ID or field ID in the response returned by the ListTables or ListColumns operation. You can also specify a custom entity ID.', example='maxcompute-table:123456XXX::test_project::test_tbl
dlf-table:123456XXX:test_catalog:test_db::test_tbl
hms-table:c-abc123xxx::test_db::test_tbl
holo-table:h-abc123xxx::test_db:test_schema:test_tbl
custom-api:api123
custom-table:table456'),
  dstEntityName?: string(name='DstEntityName', example='dstName1'),
  needAttachRelationship?: boolean(name='NeedAttachRelationship', example='false'),
  order?: string(name='Order', example='Asc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  sortBy?: string(name='SortBy', example='Name'),
  srcEntityId?: string(name='SrcEntityId', description='The source entity ID. For more information, see the table ID or field ID in the response returned by the ListTables or ListColumns operation. You can also specify a custom entity ID.', example='maxcompute-table:123456XXX::test_project::test_tbl
dlf-table:123456XXX:test_catalog:test_db::test_tbl
hms-table:c-abc123xxx::test_db::test_tbl
holo-table:h-abc123xxx::test_db:test_schema:test_tbl
custom-api:api123
custom-table:table456'),
  srcEntityName?: string(name='SrcEntityName', example='srcName1'),
}

model ListLineagesResponseBody = {
  pagingInfo?: {
    lineages?: [ 
      {
        dstEntity?: LineageEntity(name='DstEntity'),
        relationships?: [
          LineageRelationship
        ](name='Relationships'),
        srcEntity?: LineageEntity(name='SrcEntity'),
      }
    ](name='Lineages'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='12'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model ListLineagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLineagesResponseBody(name='body'),
}

/**
 * @summary Queries a list of ancestor and descendant entities of an entity in Data Map. You can specify whether to return the lineage between the entities.
 *
 * @param request ListLineagesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLineagesResponse
 */
async function listLineagesWithOptions(request: ListLineagesRequest, runtime: Util.RuntimeOptions): ListLineagesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLineages',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of ancestor and descendant entities of an entity in Data Map. You can specify whether to return the lineage between the entities.
 *
 * @param request ListLineagesRequest
 * @return ListLineagesResponse
 */
async function listLineages(request: ListLineagesRequest): ListLineagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLineagesWithOptions(request, runtime);
}

model ListMetaCollectionsRequest {
  administrator?: string(name='Administrator', example='12345'),
  createUser?: string(name='CreateUser', example='123456'),
  description?: string(name='Description'),
  name?: string(name='Name', example='test'),
  order?: string(name='Order', example='Asc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  parentId?: string(name='ParentId', description='The ID of the collection of an ancestor node.', example='category.123'),
  sortBy?: string(name='SortBy', example='Name'),
  type?: string(name='Type', description='The type of the collection. Valid values:

*   Category
*   Album
*   AlbumCategory

This parameter is required.', example='Category'),
}

model ListMetaCollectionsResponseBody = {
  data?: {
    metaCollections?: [ 
      {
        administrators?: [ string ](name='Administrators'),
        createTime?: long(name='CreateTime', description='The time when the collection was created. The value is a UNIX timestamp. Unit: milliseconds.', example='1668568601000'),
        createUser?: string(name='CreateUser', example='456789'),
        description?: string(name='Description'),
        id?: string(name='Id', description='The ID of the collection.', example='category.123'),
        modifyTime?: long(name='ModifyTime', description='The time when the collection was modified. The value is a UNIX timestamp. Unit: milliseconds.', example='1668568601000'),
        name?: string(name='Name', example='test_category'),
        parentId?: string(name='ParentId', description='The ID of the collection of the ancestor node. This parameter can be left empty.', example='category.1'),
        type?: string(name='Type', example='Category'),
      }
    ](name='MetaCollections', description='The collections.'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data', description='The data.'),
  requestId?: string(name='RequestId', description='Id of the request', example='E25887B7-579C-54A5-9C4F-83A0DE367DDE'),
}

model ListMetaCollectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMetaCollectionsResponseBody(name='body'),
}

/**
 * @summary Queries a list of collections in Data Map. Collections include categories and data albums.
 *
 * @param request ListMetaCollectionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMetaCollectionsResponse
 */
async function listMetaCollectionsWithOptions(request: ListMetaCollectionsRequest, runtime: Util.RuntimeOptions): ListMetaCollectionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMetaCollections',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of collections in Data Map. Collections include categories and data albums.
 *
 * @param request ListMetaCollectionsRequest
 * @return ListMetaCollectionsResponse
 */
async function listMetaCollections(request: ListMetaCollectionsRequest): ListMetaCollectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMetaCollectionsWithOptions(request, runtime);
}

model ListNetworksRequest {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
  sortBy?: string(name='SortBy', description='The fields used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:

*   Id (Desc/Asc): the network ID
*   Status (Desc/Asc): the network status
*   CreateUser (Desc/Asc): the user who created the network
*   CreateTime (Desc/Asc): the time when the network was created

Default value: CreateTime Asc.', example='CreateTime Asc'),
}

model ListNetworksResponseBody = {
  pagingInfo?: {
    networkList?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the network resource was created. The value is a 64-bit timestamp.', example='1727055811000'),
        createUser?: string(name='CreateUser', description='The ID of the user who creates the network resource.', example='11075500042XXXXX'),
        id?: long(name='Id', description='The network ID.', example='1000'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of the serverless resource group.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
        securityGroupId?: string(name='SecurityGroupId', description='The security group ID.', example='sg-2ze13vamugr7jenXXXXX'),
        status?: string(name='Status', description='The status of the network resource. Valid values: Pending, Creating, Running, Deleting, and Deleted.', example='Running'),
        vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-m2et4f3oc8msfbccXXXXX'),
        vswitchId?: string(name='VswitchId', description='The VSwitch ID.', example='vsw-uf8usrhs7hjd9amsXXXXX'),
      }
    ](name='NetworkList', description='The network resources of the serverless resource group.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='100'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request. It is used to locate logs and troubleshoot problems.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListNetworksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNetworksResponseBody(name='body'),
}

/**
 * @summary Queries a list of network resources of a serverless resource group.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListNetworksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNetworksResponse
 */
async function listNetworksWithOptions(request: ListNetworksRequest, runtime: Util.RuntimeOptions): ListNetworksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNetworks',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of network resources of a serverless resource group.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListNetworksRequest
 * @return ListNetworksResponse
 */
async function listNetworks(request: ListNetworksRequest): ListNetworksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNetworksWithOptions(request, runtime);
}

model ListNodeDependenciesRequest {
  id?: long(name='Id', description='The ID of the node.

This parameter is required.', example='860438872620113XXXX'),
  pageNumber?: int32(name='PageNumber', description='The page number, starting from 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10001'),
}

model ListNodeDependenciesResponseBody = {
  pagingInfo?: {
    nodes?: [ 
      {
        createTime?: long(name='CreateTime', description='The timestamp when the node was created.', example='1724505917000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='odps_first'),
          type?: string(name='Type', description='The type of the data source.', example='odps'),
        }(name='DataSource', description='The data source.'),
        description?: string(name='Description', description='The description of the node.', example='Node description'),
        id?: long(name='Id', description='The ID of the node.', example='723932906364267XXXX'),
        inputs?: {
          nodeOutputs?: [ 
            {
              data?: string(name='Data', description='The node output.', example='860438872620113XXXX'),
            }
          ](name='NodeOutputs', description='The list of node outputs.'),
          tables?: [ 
            {
              guid?: string(name='Guid', description='The table ID.', example='odps.autotest.test_output_table_1'),
            }
          ](name='Tables', description='The table list.'),
          variables?: [ 
            {
              artifactType?: string(name='ArtifactType', description='The artifact type.', example='Variable'),
              id?: long(name='Id', description='The variable ID.', example='543218872620113XXXX'),
              name?: string(name='Name', description='The variable name.', example='input'),
              node?: {
                output?: string(name='Output', description='The output of the node.', example='860438872620113XXXX'),
              }(name='Node', description='The node to which the variable belongs.'),
              scope?: string(name='Scope', description='The scope of the variable. Valid values:

*   NodeParameter
*   NodeContext
*   Workflow
*   Workspace', example='NodeParameter'),
              type?: string(name='Type', description='The type of the variable. Valid values:

*   NoKvVariableExpression
*   Constant
*   PassThrough
*   System
*   NodeOutput', example='Constant'),
              value?: string(name='Value', description='The variable name.', example='111'),
            }
          ](name='Variables', description='The variable list.'),
        }(name='Inputs', description='The input of the node.'),
        modifyTime?: long(name='ModifyTime', description='The timestamp when the node was last modified.', example='1724505917000'),
        name?: string(name='Name', description='The name of the node.', example='Node name'),
        outputs?: {
          nodeOutputs?: [ 
            {
              data?: string(name='Data', description='The output of the node.', example='463497880880954XXXX'),
            }
          ](name='NodeOutputs', description='The list of node outputs.'),
          tables?: [ 
            {
              guid?: string(name='Guid', description='The table ID.', example='odps.autotest.test_output_table_1'),
            }
          ](name='Tables', description='The table list.'),
          variables?: [ 
            {
              artifactType?: string(name='ArtifactType', description='The artifact type.', example='Variable'),
              id?: long(name='Id', description='The variable ID.', example='543217824470354XXXX'),
              name?: string(name='Name', description='The variable name.', example='output'),
              node?: {
                output?: string(name='Output', description='The node output corresponding to the variable.', example='463497880880954XXXX'),
              }(name='Node', description='The node to which the variable belongs.'),
              scope?: string(name='Scope', description='The scope of the variable. Valid values:

*   NodeParameter
*   NodeContext
*   Workflow
*   Workspace', example='NodeParameter'),
              type?: string(name='Type', description='The type of the variable. Valid values:

*   NoKvVariableExpression
*   Constant
*   PassThrough
*   System
*   NodeOutput', example='Constant'),
              value?: string(name='Value', description='The value of the variable.', example='111'),
            }
          ](name='Variables', description='The variable list.'),
        }(name='Outputs', description='The output of the node.'),
        owner?: string(name='Owner', description='The owner of the node.', example='110755000425XXXX'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='65133'),
        recurrence?: string(name='Recurrence', description='The scheduling type.

Valid values:

*   Normal: Nodes are scheduled as expected.
*   Pause: Nodes are paused, and the running of their descendant nodes is blocked.
*   Skip: Nodes are dry run. The system does not actually run the nodes but directly prompts that the nodes are successfully run. The running duration of the nodes is 0 seconds. In addition, the nodes do not occupy resources or block the running of their descendant nodes.', example='Normal'),
        runtimeResource?: {
          resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='S_res_group_XXXX_XXXX'),
        }(name='RuntimeResource', description='The information about the resource group.'),
        script?: {
          id?: long(name='Id', description='The script ID.', example='853573334108680XXXX'),
          path?: string(name='Path', description='The script path.', example='root/demo'),
          runtime?: {
            command?: string(name='Command', description='The command used to distinguish node types.', example='ODPS_SQL'),
          }(name='Runtime', description='The runtime.'),
        }(name='Script', description='The script information.'),
        strategy?: {
          instanceMode?: string(name='InstanceMode', description='The instance generation mode. Valid values:

*   T+1
*   Immediately', example='T+1'),
          rerunInterval?: int32(name='RerunInterval', description='The interval between retries after failure. Unit: milliseconds.', example='180000'),
          rerunMode?: string(name='RerunMode', description='The rerun mode. Valid values:

*   Allowed
*   Denied
*   FailureAllowed', example='Allowed'),
          rerunTimes?: int32(name='RerunTimes', description='The number of retries after failure.', example='3'),
          timeout?: int32(name='Timeout', description='The timeout period. Unit: milliseconds.', example='0'),
        }(name='Strategy', description='The scheduling policy.'),
        tags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='null'),
            value?: string(name='Value', description='The tag value.', example='null'),
          }
        ](name='Tags', description='The tags. This parameter is not in use.'),
        taskId?: long(name='TaskId', description='The scheduling task ID.', example='580667964888595XXXX'),
        trigger?: {
          cron?: string(name='Cron', description='The cron expression for scheduling.', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', description='The effective end time of the schedule, in the format yyyy-MM-dd HH:mm:ss.', example='9999-01-01 00:00:00'),
          id?: long(name='Id', description='The unique identifier of the trigger.', example='543680677872062XXXX'),
          startTime?: string(name='StartTime', description='The effective start time of the schedule, in the format yyyy-MM-dd HH:mm:ss.', example='1970-01-01 00:00:00'),
          timezone?: string(name='Timezone', description='The time zone.', example='Asia/Shanghai'),
          type?: string(name='Type', description='The trigger type.

Valid values:

*   Scheduler: periodic scheduling.
*   Manual: manual scheduling.
*   Streaming: streaming scheduler.', example='Scheduler'),
        }(name='Trigger', description='The trigger.'),
      }
    ](name='Nodes', description='The list of dependent nodes.'),
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='90'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='204EAF68-CCE3-5112-8DA0-E7A60F02XXXX'),
}

model ListNodeDependenciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodeDependenciesResponseBody(name='body'),
}

/**
 * @summary Queries a list of descendant nodes of a node in DataStudio.
 *
 * @param request ListNodeDependenciesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNodeDependenciesResponse
 */
async function listNodeDependenciesWithOptions(request: ListNodeDependenciesRequest, runtime: Util.RuntimeOptions): ListNodeDependenciesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeDependencies',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of descendant nodes of a node in DataStudio.
 *
 * @param request ListNodeDependenciesRequest
 * @return ListNodeDependenciesResponse
 */
async function listNodeDependencies(request: ListNodeDependenciesRequest): ListNodeDependenciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeDependenciesWithOptions(request, runtime);
}

model ListNodesRequest {
  containerId?: long(name='ContainerId', description='The container ID, which is a filter condition. If you do not want to use this condition for filtering, you do not need to configure this parameter. The container ID that you specify is unrelated to the resource group ID indicated by the ResourceGroupId parameter.', example='860438872620113XXXX'),
  name?: string(name='Name', description='The name of the node. Fuzzy search is supported.', example='test'),
  pageNumber?: int32(name='PageNumber', description='The page number of the data to retrieve, used for pagination.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default is 10, and the maximum is 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='12345'),
  recurrence?: string(name='Recurrence', description='The scheduling type, which is a filter condition. Valid values:

*   Normal: The nodes are scheduled as expected.
*   Pause: The nodes are paused, and the running of their descendant nodes is blocked.
*   Skip: The nodes are dry run. The system does not actually run the nodes, but directly returns a success response. The running duration of the nodes is 0 seconds. In addition, the nodes do not occupy resources or block the running of their descendant nodes.', example='Normal'),
  rerunMode?: string(name='RerunMode', description='The rerun property, which is a filter condition. If you do not want to use this condition for filtering, you do not need to configure this parameter. Valid values:

*   Allowed: The nodes can be rerun regardless of whether they are successfully run or fail to run.
*   FailureAllowed: The nodes can be rerun only after they fail to run.
*   Denied: The nodes cannot be rerun regardless of whether they are successfully run or fail to run.', example='Allowed'),
  scene?: string(name='Scene', description='The location of the nodes in the left-side navigation pane of the Data Studio page, which is a filter condition. If you do not want to use this condition for filtering, you do not need to configure this parameter. Valid values:

*   DataworksProject
*   DataworksManualWorkflow
*   DataworksManualTask', example='DATAWORKS_PROJECT'),
}

model ListNodesResponseBody = {
  pagingInfo?: {
    nodes?: [ 
      {
        createTime?: long(name='CreateTime', description='The timestamp when the node in DataStudio was created.', example='1722910655000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='odps_first'),
          type?: string(name='Type', description='The type of the data source.', example='odps'),
        }(name='DataSource', description='The data source.'),
        description?: string(name='Description', description='The description of the node.', example='Node description'),
        id?: long(name='Id', description='The ID of the node.', example='860438872620113XXXX'),
        inputs?: {
          nodeOutputs?: [ 
            {
              data?: string(name='Data', description='The node output.', example='623731286945488XXXX'),
            }
          ](name='NodeOutputs', description='The node output list.'),
          tables?: [ 
            {
              guid?: string(name='Guid', description='The table ID.', example='odps.autotest.test_output_table_1'),
            }
          ](name='Tables', description='The table list.'),
          variables?: [ 
            {
              artifactType?: string(name='ArtifactType', description='The artifact type.', example='Variable'),
              id?: long(name='Id', description='The variable ID.', example='543211286945488XXXX'),
              name?: string(name='Name', description='The name of the variable.', example='input'),
              node?: {
                output?: string(name='Output', description='The node output.', example='623731286945488XXXX'),
              }(name='Node', description='The node to which the variable belongs.'),
              scope?: string(name='Scope', description='The scope of the variable. Valid values:

*   WorkSpace
*   NodeParameter
*   NodeContext
*   Workflow', example='NodeParameter'),
              type?: string(name='Type', description='The type of the variable. Valid values:

*   NoKvVariableExpression
*   Constant
*   PassThrough
*   System
*   NodeOutput', example='Constant'),
              value?: string(name='Value', description='The variable value.', example='222'),
            }
          ](name='Variables', description='The variable list.'),
        }(name='Inputs', description='The node input.'),
        modifyTime?: long(name='ModifyTime', description='The timestamp when the node in DataStudio was last modified.', example='1722910655000'),
        name?: string(name='Name', description='The name of the node.', example='test'),
        outputs?: {
          nodeOutputs?: [ 
            {
              data?: string(name='Data', description='The node output.', example='860438872620113XXXX'),
            }
          ](name='NodeOutputs', description='The node output list.'),
          tables?: [ 
            {
              guid?: string(name='Guid', description='The table ID.', example='odps.autotest.test_output_table_1'),
            }
          ](name='Tables', description='The table list.'),
          variables?: [ 
            {
              artifactType?: string(name='ArtifactType', description='The artifact type.', example='Variable'),
              id?: long(name='Id', description='The variable ID.', example='623731286945488XXXX'),
              name?: string(name='Name', description='The name of the variable.', example='output'),
              node?: {
                output?: string(name='Output', description='The node output.', example='860438872620113XXXX'),
              }(name='Node', description='The node to which the variable belongs.'),
              scope?: string(name='Scope', description='The variable scope. Valid values:

*   NodeParameter
*   NodeContext
*   Workflow
*   Workspace', example='NodeParameter'),
              type?: string(name='Type', description='The variable type. Valid values:

*   NoKvVariableExpression
*   Constant
*   PassThrough
*   System
*   NodeOutput', example='Constant'),
              value?: string(name='Value', description='The variable value.', example='111'),
            }
          ](name='Variables', description='The variable list.'),
        }(name='Outputs', description='The node output.'),
        owner?: string(name='Owner', description='The owner of nodes in DataStudio.', example='110755000425XXXX'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.', example='33233'),
        recurrence?: string(name='Recurrence', description='The scheduling type.

Valid values:

*   Normal: The node is scheduled as expected.
*   Pause: The node is paused, and the running of its descendant nodes is blocked.
*   Skip: The node is dry run. The system does not actually run the node but directly prompts that the node is successfully run. The running duration of the node is 0 seconds. In addition, the node does not occupy resources or block the running of its descendant nodes.', example='Normal'),
        runtimeResource?: {
          resourceGroup?: string(name='ResourceGroup', description='The identifier of the resource group. You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/173913.html) operation to query the identifier of the resource group.', example='S_res_group_XXXX'),
          resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='S_resgrop_xxx'),
        }(name='RuntimeResource', description='The information about the resource group.'),
        script?: {
          id?: long(name='Id', description='The script ID.', example='853573334108680XXXX'),
          path?: string(name='Path', description='The script path.', example='root/demo'),
          runtime?: {
            command?: string(name='Command', description='The command used to distinguish node types.', example='ODPS_SQL'),
          }(name='Runtime', description='The runtime.'),
        }(name='Script', description='The script information.'),
        strategy?: {
          instanceMode?: string(name='InstanceMode', description='The instance generation mode. Valid values:

*   T+1
*   Immediately', example='T+1'),
          rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: milliseconds.', example='180000'),
          rerunMode?: string(name='RerunMode', description='The rerun mode. Valid values:

*   Allowed
*   Denied
*   FailureAllowed', example='Allowed'),
          rerunTimes?: int32(name='RerunTimes', description='The number of reruns.', example='3'),
          timeout?: int32(name='Timeout', description='Timeout.', example='0'),
        }(name='Strategy', description='The scheduling policy.'),
        tags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='null'),
            value?: string(name='Value', description='The tag value.', example='null'),
          }
        ](name='Tags', description='The tag information (not in use).'),
        taskId?: long(name='TaskId', description='The scheduling task ID.', example='88888888888'),
        trigger?: {
          cron?: string(name='Cron', description='The cron expression for scheduling', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', description='The end time of the validity period of the trigger.', example='9999-01-01 00:00:00'),
          id?: long(name='Id', description='The trigger ID.', example='543680677872062XXXX'),
          startTime?: string(name='StartTime', description='The start time of the validity period of the trigger.', example='1970-01-01 00:00:00'),
          timezone?: string(name='Timezone', description='The time zone.', example='Asia/Shanghai'),
          type?: string(name='Type', description='The trigger type.

Valid values:

*   Scheduler: periodic scheduling
*   Manual: manual trigger
*   Streaming: streaming task', example='Scheduler'),
        }(name='Trigger', description='The trigger.'),
      }
    ](name='Nodes', description='The list of nodes in DataStudio.'),
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='42'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2197B9C4-39CE-55EA-8EEA-FDBAE52DXXXX'),
}

model ListNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodesResponseBody(name='body'),
}

/**
 * @summary Queries a list of nodes in DataStudio. You can also specify filter conditions to query specific nodes.
 *
 * @param request ListNodesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNodesResponse
 */
async function listNodesWithOptions(request: ListNodesRequest, runtime: Util.RuntimeOptions): ListNodesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNodes',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of nodes in DataStudio. You can also specify filter conditions to query specific nodes.
 *
 * @param request ListNodesRequest
 * @return ListNodesResponse
 */
async function listNodes(request: ListNodesRequest): ListNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodesWithOptions(request, runtime);
}

model ListPartitionsRequest {
  name?: string(name='Name', example='ds=20250101'),
  order?: string(name='Order', example='Asc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  sortBy?: string(name='SortBy', example='CreateTime'),
  tableId?: string(name='TableId', description='The ID of the table to which the partitions belong. You can call the ListTables operation to query the ID. For more information, see [Concepts related to metadata entities](https://help.aliyun.com/document_detail/2880092.html).

This parameter is required.', example='maxcompute-column:11075xxxx::test_project:test_schema:test_table'),
}

model ListPartitionsResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    partitionList?: [
      Partition
    ](name='PartitionList'),
    totalCount?: long(name='TotalCount', example='1'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='D1E2E5BC-xxxx-xxxx-xxxx-xxxxxx'),
  success?: boolean(name='Success', example='true'),
}

model ListPartitionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPartitionsResponseBody(name='body'),
}

/**
 * @summary 查询数据表的分区列表
 *
 * @param request ListPartitionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPartitionsResponse
 */
async function listPartitionsWithOptions(request: ListPartitionsRequest, runtime: Util.RuntimeOptions): ListPartitionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPartitions',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询数据表的分区列表
 *
 * @param request ListPartitionsRequest
 * @return ListPartitionsResponse
 */
async function listPartitions(request: ListPartitionsRequest): ListPartitionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPartitionsWithOptions(request, runtime);
}

model ListPipelineRunItemsRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  pipelineRunId?: string(name='PipelineRunId', description='This parameter is required.', example='097c73fe-ed6e-4fb1-b109-a5d59e46cd58'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='10001'),
}

model ListPipelineRunItemsResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    pipelineRunItems?: [ 
      {
        createTime?: long(name='CreateTime', description='发布包创建时间戳', example='1724984066000'),
        id?: long(name='Id', example='860438872620113XXXX'),
        message?: string(name='Message', description='创建人', example='Error Message'),
        modifyTime?: long(name='ModifyTime', description='修改时间', example='1724984066000'),
        name?: string(name='Name', example='test'),
        spec?: string(name='Spec', example='{ "version": "1.1.0", "kind": "Node", "spec": { "nodes": [ { "recurrence": "Normal", "id": "860438872620113XXXX", "timeout": 0, "instanceMode": "T+1", "rerunMode": "Allowed", "rerunTimes": 3, "rerunInterval": 180000, "datasource": { "name": "odps_test", "type": "odps" }, "script": { "language": "odps-sql", "path": "XX/OpenAPI_Test/ODPS_SQL_Test", "runtime": { "command": "ODPS_SQL", "commandTypeId": 10 }, "content": "select now();", "id": "853573334108680XXXX" }, "trigger": { "type": "Scheduler", "id": "543680677872062XXXX", "cron": "00 00 00 * * ?", "startTime": "1970-01-01 00:00:00", "endTime": "9999-01-01 00:00:00", "timezone": "Asia/Shanghai", "delaySeconds": 0 }, "runtimeResource": { "resourceGroup": "S_res_group_XXXX_XXXX", "id": "623731286945488XXXX", "resourceGroupId": "7201XXXX" }, "name": "ODPS_SQL_Test", "owner": "110755000425XXXX", "metadata": { "owner": "110755000425XXXX", "ownerName": "XXXXX@test.XXX.com", "projectId": "307XXX" }, "inputs": { "nodeOutputs": [ { "data": "lwttest_standard_root", "artifactType": "NodeOutput" } ] }, "outputs": { "nodeOutputs": [ { "data": "860438872620113XXXX", "artifactType": "NodeOutput", "refTableName": "ODPS_SQL_Test", "isDefault": true } ] } } ], "flow": [ { "nodeId": "860438872620113XXXX", "depends": [ { "type": "Normal", "output": "lwttest_standard_root" } ] } ] }, "metadata": { "uuid": "860438872620113XXXX" } }'),
        status?: string(name='Status', description='发布流程状态', example='Running'),
        type?: string(name='Type', example='Node'),
        version?: long(name='Version', description='项目Id', example='1'),
      }
    ](name='PipelineRunItems'),
    totalCount?: int32(name='TotalCount', example='12'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='C99E2BE6-9DEA-5C2E-8F51-1DDCFEADE490'),
}

model ListPipelineRunItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPipelineRunItemsResponseBody(name='body'),
}

/**
 * @summary 通过发布流程的ID获取发布内容
 *
 * @param request ListPipelineRunItemsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPipelineRunItemsResponse
 */
async function listPipelineRunItemsWithOptions(request: ListPipelineRunItemsRequest, runtime: Util.RuntimeOptions): ListPipelineRunItemsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelineRunItems',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 通过发布流程的ID获取发布内容
 *
 * @param request ListPipelineRunItemsRequest
 * @return ListPipelineRunItemsResponse
 */
async function listPipelineRunItems(request: ListPipelineRunItemsRequest): ListPipelineRunItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPipelineRunItemsWithOptions(request, runtime);
}

model ListPipelineRunsRequest {
  creator?: string(name='Creator', description='The ID of the user who creates the processes. This parameter specifies a filter condition.', example='110755000425****'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  status?: string(name='Status', description='The status of the processes. This parameter specifies a filter condition.

Valid values:

*   Init
*   Running
*   Success
*   Fail
*   Termination
*   Cancel', example='Running'),
}

model ListPipelineRunsResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    pipelineRuns?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the process was created. This value is a UNIX timestamp.', example='1702736654000'),
        creator?: string(name='Creator', description='The creator of the process.', example='110755000425XXXX'),
        id?: string(name='Id', description='The process ID.', example='097c73fe-ed6e-4fb1-b109-a5d59e46cd58'),
        message?: string(name='Message', description='The error message returned during the stage.', example='Error message'),
        modifyTime?: long(name='ModifyTime', description='The time when the process was modified. This value is a UNIX timestamp.', example='1702736654000'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='70199'),
        stages?: [ 
          {
            code?: string(name='Code', description='The code of the stage.', example='DEV_CHECK'),
            description?: string(name='Description', description='The description of the stage.', example='Check before going online to development'),
            detail?: map[string]any(name='Detail', description='The additional information about the stage.'),
            message?: string(name='Message', description='The error message returned during the stage.', example='Error message'),
            name?: string(name='Name', description='The name of the stage.', example='Check before going online to development'),
            status?: string(name='Status', description='The status of the stage.

Valid values:

*   Init
*   Running
*   Success
*   Fail
*   Termination
*   Cancel', example='Running'),
            step?: int32(name='Step', description='The step number of the stage.', example='1'),
            type?: string(name='Type', description='The type of the stage. This parameter indicates the operation type in the stage.

Valid values:

*   Deploy
*   Check
*   Offline
*   Build
*   Delete', example='Check'),
          }
        ](name='Stages', description='The stages of the process.'),
        status?: string(name='Status', description='The status of the process.

Valid values:

*   Init
*   Running
*   Success
*   Fail
*   Termination
*   Cancel', example='Running'),
      }
    ](name='PipelineRuns', description='The processes.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2524'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7C352CB7-CD88-50CF-9D0D-E81BDF02XXXX'),
}

model ListPipelineRunsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPipelineRunsResponseBody(name='body'),
}

/**
 * @summary Queries a list of processes that are used to deploy or undeploy entities in DataStudio. You can also specify filter conditions to query specific processes.
 *
 * @param request ListPipelineRunsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPipelineRunsResponse
 */
async function listPipelineRunsWithOptions(request: ListPipelineRunsRequest, runtime: Util.RuntimeOptions): ListPipelineRunsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelineRuns',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of processes that are used to deploy or undeploy entities in DataStudio. You can also specify filter conditions to query specific processes.
 *
 * @param request ListPipelineRunsRequest
 * @return ListPipelineRunsResponse
 */
async function listPipelineRuns(request: ListPipelineRunsRequest): ListPipelineRunsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPipelineRunsWithOptions(request, runtime);
}

model ListProjectMembersRequest {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='62136'),
  roleCodes?: [ string ](name='RoleCodes', description='The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.'),
  userIds?: [ string ](name='UserIds', description='The IDs of the accounts used by the members in the workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the IDs of the accounts used by the members in the workspace.'),
}

model ListProjectMembersShrinkRequest {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='62136'),
  roleCodesShrink?: string(name='RoleCodes', description='The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.'),
  userIdsShrink?: string(name='UserIds', description='The IDs of the accounts used by the members in the workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the IDs of the accounts used by the members in the workspace.'),
}

model ListProjectMembersResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    projectMembers?: [ 
      {
        projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='62136'),
        roles?: [ 
          {
            code?: string(name='Code', description='The code of the role.', example='role_project_guest'),
            name?: string(name='Name', description='The name of the role.', example='Visitors'),
            type?: string(name='Type', description='The type of the role. Valid values:

*   UserCustom: user-defined role
*   System: system role', example='System'),
          }
        ](name='Roles', description='The roles that are assigned to the member.'),
        status?: string(name='Status', description='The status of the member. Valid values:

*   Normal
*   Forbidden', example='Normal'),
        userId?: string(name='UserId', description='The ID of the account used by the member.', example='123422344899'),
        userName?: string(name='UserName'),
      }
    ](name='ProjectMembers', description='The members in the workspace.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='12'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='9FBBBB1F-DD5E-5D8E-8F50-37F77460F056'),
}

model ListProjectMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectMembersResponseBody(name='body'),
}

/**
 * @summary Queries details about members in a workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq ListProjectMembersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProjectMembersResponse
 */
async function listProjectMembersWithOptions(tmpReq: ListProjectMembersRequest, runtime: Util.RuntimeOptions): ListProjectMembersResponse {
  Util.validateModel(tmpReq);
  var request = new ListProjectMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.roleCodes)) {
    request.roleCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roleCodes, 'RoleCodes', 'json');
  }
  if (!Util.isUnset(tmpReq.userIds)) {
    request.userIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userIds, 'UserIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.roleCodesShrink)) {
    body['RoleCodes'] = request.roleCodesShrink;
  }
  if (!Util.isUnset(request.userIdsShrink)) {
    body['UserIds'] = request.userIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListProjectMembers',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries details about members in a workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListProjectMembersRequest
 * @return ListProjectMembersResponse
 */
async function listProjectMembers(request: ListProjectMembersRequest): ListProjectMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectMembersWithOptions(request, runtime);
}

model ListProjectRolesRequest {
  codes?: [ string ](name='Codes', description='The codes of roles in the DataWorks workspace.'),
  names?: [ string ](name='Names', description='The names of roles in the DataWorks workspace.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='21229'),
  type?: string(name='Type', description='The type of the role. Valid values:

*   UserCustom: user-defined role
*   System: system role', example='System'),
}

model ListProjectRolesShrinkRequest {
  codesShrink?: string(name='Codes', description='The codes of roles in the DataWorks workspace.'),
  namesShrink?: string(name='Names', description='The names of roles in the DataWorks workspace.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='21229'),
  type?: string(name='Type', description='The type of the role. Valid values:

*   UserCustom: user-defined role
*   System: system role', example='System'),
}

model ListProjectRolesResponseBody = {
  pagingInfo?: {
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    projectRoles?: [ 
      {
        code?: string(name='Code', description='The code of the role in the DataWorks workspace.', example='role_project_guest'),
        name?: string(name='Name', description='The name of the role.', example='Visitors'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='21229'),
        type?: string(name='Type', description='The type of the role in the DataWorks workspace.', example='System'),
      }
    ](name='ProjectRoles', description='The roles in the DataWorks workspace.'),
    totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='42'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='61649187-0BCF-5E75-8D4B-64FDBEBBB447'),
}

model ListProjectRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectRolesResponseBody(name='body'),
}

/**
 * @summary Queries the information about roles in a DataWorks workspace by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq ListProjectRolesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProjectRolesResponse
 */
async function listProjectRolesWithOptions(tmpReq: ListProjectRolesRequest, runtime: Util.RuntimeOptions): ListProjectRolesResponse {
  Util.validateModel(tmpReq);
  var request = new ListProjectRolesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.codes)) {
    request.codesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.codes, 'Codes', 'json');
  }
  if (!Util.isUnset(tmpReq.names)) {
    request.namesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.names, 'Names', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.codesShrink)) {
    body['Codes'] = request.codesShrink;
  }
  if (!Util.isUnset(request.namesShrink)) {
    body['Names'] = request.namesShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListProjectRoles',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about roles in a DataWorks workspace by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListProjectRolesRequest
 * @return ListProjectRolesResponse
 */
async function listProjectRoles(request: ListProjectRolesRequest): ListProjectRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectRolesWithOptions(request, runtime);
}

model ListProjectsRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='The ID of the Alibaba Cloud resource group to which the workspaces belong. You can log on to the [Resource Management console](https://resourcemanager.console.aliyun.com/resource-groups) and go to the Resource Group page to query the ID.

This parameter is used to query the information about workspaces that belong to a specific resource group.', example='rg-acfmzbn7pti3zff'),
  aliyunResourceTags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='batch'),
      value?: string(name='Value', description='The tag value.', example='blue'),
    }
  ](name='AliyunResourceTags', description='The tags.'),
  devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', description='Specifies whether the development environment is enabled. Valid values:

*   true: The development environment is enabled. In this case, the development environment is isolated from the production environment in a workspace.
*   false: The development environment is disabled. In this case, only the production environment is used in a workspace.', example='true'),
  devRoleDisabled?: boolean(name='DevRoleDisabled', description='Specifies whether the Develop role is disabled. Valid values:

*   false (default)
*   true', example='false'),
  ids?: [ long ](name='Ids', description='The IDs of the DataWorks workspaces.'),
  names?: [ string ](name='Names', description='The names of the DataWorks workspaces.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  paiTaskEnabled?: boolean(name='PaiTaskEnabled', description='Specifies whether scheduling of Platform for AI (PAI) tasks is enabled. Valid values:

*   true: Scheduling of PAI tasks is enabled. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
*   false: Scheduling of PAI tasks is disabled.', example='true'),
  status?: string(name='Status', description='The status of the workspaces. Valid values:

*   Available
*   Initializing
*   InitFailed
*   Forbidden
*   Deleting
*   DeleteFailed
*   Frozen
*   Updating
*   UpdateFailed', example='Available'),
}

model ListProjectsShrinkRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='The ID of the Alibaba Cloud resource group to which the workspaces belong. You can log on to the [Resource Management console](https://resourcemanager.console.aliyun.com/resource-groups) and go to the Resource Group page to query the ID.

This parameter is used to query the information about workspaces that belong to a specific resource group.', example='rg-acfmzbn7pti3zff'),
  aliyunResourceTagsShrink?: string(name='AliyunResourceTags', description='The tags.'),
  devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', description='Specifies whether the development environment is enabled. Valid values:

*   true: The development environment is enabled. In this case, the development environment is isolated from the production environment in a workspace.
*   false: The development environment is disabled. In this case, only the production environment is used in a workspace.', example='true'),
  devRoleDisabled?: boolean(name='DevRoleDisabled', description='Specifies whether the Develop role is disabled. Valid values:

*   false (default)
*   true', example='false'),
  idsShrink?: string(name='Ids', description='The IDs of the DataWorks workspaces.'),
  namesShrink?: string(name='Names', description='The names of the DataWorks workspaces.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  paiTaskEnabled?: boolean(name='PaiTaskEnabled', description='Specifies whether scheduling of Platform for AI (PAI) tasks is enabled. Valid values:

*   true: Scheduling of PAI tasks is enabled. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
*   false: Scheduling of PAI tasks is disabled.', example='true'),
  status?: string(name='Status', description='The status of the workspaces. Valid values:

*   Available
*   Initializing
*   InitFailed
*   Forbidden
*   Deleting
*   DeleteFailed
*   Frozen
*   Updating
*   UpdateFailed', example='Available'),
}

model ListProjectsResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='10'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='1'),
    projects?: [ 
      {
        aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='The ID of the Alibaba Cloud resource group to which the workspace belongs.', example='rg-acfmzbn7pti3zfa'),
        aliyunResourceTags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='batch'),
            value?: string(name='Value', description='The tag value.', example='blue'),
          }
        ](name='AliyunResourceTags', description='The tags.'),
        description?: string(name='Description', description='The description of the workspace.', example='Financial analysis group project data development'),
        devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', description='Indicates whether the development environment is enabled. Valid values:

*   true: The development environment is enabled. In this case, the development environment is isolated from the production environment in the workspace.
*   false: The development environment is disabled. In this case, only the production environment is used in the workspace.', example='true'),
        devRoleDisabled?: boolean(name='DevRoleDisabled', description='Indicates whether the Develop role is disabled. Valid values:

*   false (default)
*   true', example='false'),
        displayName?: string(name='DisplayName', description='The display name of the workspace.', example='Sora financial analysis'),
        id?: long(name='Id', description='The workspace ID.', example='123456'),
        name?: string(name='Name', description='The name of the workspace.', example='sora_finance'),
        owner?: string(name='Owner', description='The ID of the Alibaba Cloud account to which the workspace belongs.', example='123532153125'),
        paiTaskEnabled?: boolean(name='PaiTaskEnabled', description='Indicates whether scheduling of PAI tasks is enabled. Valid values:

*   true: Scheduling of PAI tasks is enabled. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
*   false: Scheduling of PAI tasks is disabled.', example='true'),
        status?: string(name='Status', description='The status of the workspace. Valid values:

*   Available
*   Initializing
*   InitFailed
*   Forbidden
*   Deleting
*   DeleteFailed
*   Frozen
*   Updating
*   UpdateFailed', example='Available'),
      }
    ](name='Projects', description='The workspaces.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6D24AD9A-652F-59E2-AC1F-05029300F8A4'),
}

model ListProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectsResponseBody(name='body'),
}

/**
 * @summary Queries a list of DataWorks workspaces of the tenant to which your account belongs.
 *
 * @param tmpReq ListProjectsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProjectsResponse
 */
async function listProjectsWithOptions(tmpReq: ListProjectsRequest, runtime: Util.RuntimeOptions): ListProjectsResponse {
  Util.validateModel(tmpReq);
  var request = new ListProjectsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.aliyunResourceTags)) {
    request.aliyunResourceTagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.aliyunResourceTags, 'AliyunResourceTags', 'json');
  }
  if (!Util.isUnset(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  if (!Util.isUnset(tmpReq.names)) {
    request.namesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.names, 'Names', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.aliyunResourceGroupId)) {
    body['AliyunResourceGroupId'] = request.aliyunResourceGroupId;
  }
  if (!Util.isUnset(request.aliyunResourceTagsShrink)) {
    body['AliyunResourceTags'] = request.aliyunResourceTagsShrink;
  }
  if (!Util.isUnset(request.devEnvironmentEnabled)) {
    body['DevEnvironmentEnabled'] = request.devEnvironmentEnabled;
  }
  if (!Util.isUnset(request.devRoleDisabled)) {
    body['DevRoleDisabled'] = request.devRoleDisabled;
  }
  if (!Util.isUnset(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  if (!Util.isUnset(request.namesShrink)) {
    body['Names'] = request.namesShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.paiTaskEnabled)) {
    body['PaiTaskEnabled'] = request.paiTaskEnabled;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListProjects',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of DataWorks workspaces of the tenant to which your account belongs.
 *
 * @param request ListProjectsRequest
 * @return ListProjectsResponse
 */
async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectsWithOptions(request, runtime);
}

model ListResourceGroupsRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='Alibaba Cloud Resource Group ID', example='rg-aek2kqofrgXXXXX'),
  aliyunResourceTags?: [ 
    {
      key?: string(name='Key', description='Tag Key', example='key'),
      value?: string(name='Value', description='Tag Value', example='value'),
    }
  ](name='AliyunResourceTags', description='Alibaba Cloud tag list'),
  name?: string(name='Name', description='The name of a resource group, which is used for fuzzy match.', example='Resource'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='100'),
  paymentType?: string(name='PaymentType', description='The billing method of resource groups. Valid values:

*   PrePaid
*   PostPaid', example='PrePaid'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='1000'),
  resourceGroupTypes?: [ string ](name='ResourceGroupTypes', description='The types of resource groups to query. If you do not configure this parameter, only serverless resource groups are returned by default.'),
  sortBy?: string(name='SortBy', description='The list of fields used for sorting. Fields such as TriggerTime and StartedTime are supported. You must configure this parameter in the Sorting field + Sort by (Desc/Asc). By default, results are sorted in ascending order. Valid values:

*   Id (Desc/Asc): the resource group ID
*   Name (Desc/Asc): the name of the resource group
*   Remark (Desc/Asc): the remarks of the resource group
*   Type (Desc/Asc): the type of the resource group
*   Status (Desc/Asc): the status of the resource group
*   Spec (Desc/Asc): the specifications of the resource group
*   CreateUser (Desc/Asc): the creator of the resource group
*   CreateTime (Desc/Asc): the time when the resource group is created

Default value: CreateTime Asc', example='CreateTime Asc'),
  statuses?: [ string ](name='Statuses', description='The statuses of resource groups.'),
}

model ListResourceGroupsShrinkRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='Alibaba Cloud Resource Group ID', example='rg-aek2kqofrgXXXXX'),
  aliyunResourceTagsShrink?: string(name='AliyunResourceTags', description='Alibaba Cloud tag list'),
  name?: string(name='Name', description='The name of a resource group, which is used for fuzzy match.', example='Resource'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='100'),
  paymentType?: string(name='PaymentType', description='The billing method of resource groups. Valid values:

*   PrePaid
*   PostPaid', example='PrePaid'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='1000'),
  resourceGroupTypesShrink?: string(name='ResourceGroupTypes', description='The types of resource groups to query. If you do not configure this parameter, only serverless resource groups are returned by default.'),
  sortBy?: string(name='SortBy', description='The list of fields used for sorting. Fields such as TriggerTime and StartedTime are supported. You must configure this parameter in the Sorting field + Sort by (Desc/Asc). By default, results are sorted in ascending order. Valid values:

*   Id (Desc/Asc): the resource group ID
*   Name (Desc/Asc): the name of the resource group
*   Remark (Desc/Asc): the remarks of the resource group
*   Type (Desc/Asc): the type of the resource group
*   Status (Desc/Asc): the status of the resource group
*   Spec (Desc/Asc): the specifications of the resource group
*   CreateUser (Desc/Asc): the creator of the resource group
*   CreateTime (Desc/Asc): the time when the resource group is created

Default value: CreateTime Asc', example='CreateTime Asc'),
  statusesShrink?: string(name='Statuses', description='The statuses of resource groups.'),
}

model ListResourceGroupsResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='100'),
    resourceGroupList?: [ 
      {
        aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='Alibaba Cloud Resource Group ID', example='rg-aek2kqofrgXXXXX'),
        aliyunResourceTags?: [ 
          {
            key?: string(name='Key', description='Tag Key', example='Key'),
            value?: string(name='Value', description='Tag Value', example='Value'),
          }
        ](name='AliyunResourceTags', description='Alibaba Cloud tag list'),
        createTime?: long(name='CreateTime', description='The creation time, which is a 64-bit timestamp.', example='1727055811000'),
        createUser?: string(name='CreateUser', description='The ID of the user who created the resource group.', example='11075500042XXXXX'),
        defaultVpcId?: string(name='DefaultVpcId', description='Default VPC ID bound to a common resource group', example='vpc-m2et4f3oc8msfbccXXXXX'),
        defaultVswicthId?: string(name='DefaultVswicthId', description='The default switch ID bound to the common resource group.', example='vsw-uf8usrhs7hjd9amsXXXXX'),
        id?: string(name='Id', description='Unique identifier of a resource group', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
        name?: string(name='Name', description='The name of the resource group.', example='common_resource_group'),
        orderInstanceId?: string(name='OrderInstanceId', description='The order instance ID of the resource group.', example='c442b330-3b10-4584-959e-736e4edXXXXX'),
        paymentType?: string(name='PaymentType', description='The billing method of the resource group. Valid values: PrePaid and PostPaid. The value PrePaid indicates the subscription billing method, and the value PostPaid indicates the pay-as-you-go billing method.', example='PrePaid'),
        remark?: string(name='Remark', description='Remarks for resource groups', example='Create a common resource group for common tasks'),
        resourceGroupType?: string(name='ResourceGroupType', description='Resource group types:

*   CommonV2: Serverless resource group
*   ExclusiveDataIntegration: Exclusive resource group for Data Integration
*   ExclusiveScheduler: Exclusive resource group for scheduling
*   ExclusiveDataService: Exclusive resource group for DataService Studio', example='CommonV2'),
        spec?: {
          amount?: int32(name='Amount', description='Quantity', example='1'),
          standard?: string(name='Standard', description='Specification details', example='2CU'),
        }(name='Spec', description='Resource Group specifications'),
        status?: string(name='Status', description='The status of the resource group. Valid values:

*   Normal: The resource group is running or in use.
*   Stop: The resource group is expired.
*   Deleted: The resource group is released or destroyed.
*   Creating: The resource group is being created.
*   CreateFailed: The resource group fails to be created.
*   Updating: The resource group is being scaled in or out, or the configurations of the resource group are being changed.
*   UpdateFailed: The resource group fails to be scaled out or upgraded.
*   Deleting: The resource group is being released or destroyed.
*   DeleteFailed: The resource group fails to be released or destroyed.
*   Timeout: The operations that are performed on the resource group time out.
*   Freezed: The resource group is frozen.
*   Starting: The resource group is being started.', example='Normal'),
      }
    ](name='ResourceGroupList', description='The resource groups returned.'),
    totalCount?: int32(name='TotalCount', description='All data entries', example='100'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model ListResourceGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourceGroupsResponseBody(name='body'),
}

/**
 * @summary Queries a list of resource groups.
 *
 * @param tmpReq ListResourceGroupsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListResourceGroupsResponse
 */
async function listResourceGroupsWithOptions(tmpReq: ListResourceGroupsRequest, runtime: Util.RuntimeOptions): ListResourceGroupsResponse {
  Util.validateModel(tmpReq);
  var request = new ListResourceGroupsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.aliyunResourceTags)) {
    request.aliyunResourceTagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.aliyunResourceTags, 'AliyunResourceTags', 'json');
  }
  if (!Util.isUnset(tmpReq.resourceGroupTypes)) {
    request.resourceGroupTypesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceGroupTypes, 'ResourceGroupTypes', 'json');
  }
  if (!Util.isUnset(tmpReq.statuses)) {
    request.statusesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.statuses, 'Statuses', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResourceGroups',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of resource groups.
 *
 * @param request ListResourceGroupsRequest
 * @return ListResourceGroupsResponse
 */
async function listResourceGroups(request: ListResourceGroupsRequest): ListResourceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceGroupsWithOptions(request, runtime);
}

model ListResourcesRequest {
  name?: string(name='Name'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the workspace administrator. You can log on to the Alibaba Cloud Management Console and view the ID on the Security Settings page.', example='110755000425XXXX'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 100. Default value: 10.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10002'),
  type?: string(name='Type', description='The resource type. This parameter specifies a filter condition.

Valid values:

*   Python
*   Jar
*   Archive
*   File', example='python'),
}

model ListResourcesResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    resources?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the file resource was created. This value is a UNIX timestamp.', example='1724505917000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='odps_first'),
          type?: string(name='Type', description='The type of the data source.', example='odps'),
        }(name='DataSource', description='The information about the data source.'),
        id?: long(name='Id', description='The ID of the file resource.', example='631478864897630XXXX'),
        modifyTime?: long(name='ModifyTime', description='The times when the file resource was last modified. This value is a UNIX timestamp.', example='1724505917000'),
        name?: string(name='Name', description='The name of the file resource.', example='math.py'),
        owner?: string(name='Owner', description='The owner of the file resource.', example='110755000425XXXX'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID.', example='344247'),
        script?: {
          id?: long(name='Id', description='The script ID.', example='123348864897630XXXX'),
          path?: string(name='Path', description='The script path.', example='root/demo'),
          runtime?: {
            command?: string(name='Command', description='The command used to distinguish file resource types.', example='ODPS_PYTHON'),
          }(name='Runtime', description='The runtime.'),
        }(name='Script', description='The script information.'),
        sourcePath?: string(name='SourcePath', description='The path of the source of the file resource. If the SourecType parameter is set to Local, this parameter is left empty.', example='XXX/unknown/ide/1/XXX/20240820200851_963a9da676de44ef8d06a6576a8c4d6a.py'),
        sourceType?: string(name='SourceType', description='The storage type of the source of the file resource.

Valid values:

*   Local
*   Oss', example='local'),
        targetPath?: string(name='TargetPath', description='The storage path of the destination of the file resource.', example='XXX/unknown/ide/1/XXX/20240820200851_963a9da676de44ef8d06a6576a8c4d6a.py'),
        targetType?: string(name='TargetType', description='The storage type of the destination of the file resource.

Valid values:

*   Gateway
*   Oss
*   Hdfs', example='oss'),
        type?: string(name='Type', description='The type of the file resource.

Valid values:

*   Python
*   Jar
*   Archive
*   File', example='jar'),
      }
    ](name='Resources', description='The queried file resources.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='131'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='99EBE7CF-69C0-5089-BE3E-79563C31XXXX'),
}

model ListResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourcesResponseBody(name='body'),
}

/**
 * @summary Queries a list of file resources in DataStudio. You can also specify filter conditions to query specific file resources.
 *
 * @param request ListResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListResourcesResponse
 */
async function listResourcesWithOptions(request: ListResourcesRequest, runtime: Util.RuntimeOptions): ListResourcesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResources',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of file resources in DataStudio. You can also specify filter conditions to query specific file resources.
 *
 * @param request ListResourcesRequest
 * @return ListResourcesResponse
 */
async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourcesWithOptions(request, runtime);
}

model ListRoutesRequest {
  networkId?: long(name='NetworkId', description='The network ID.', example='1000'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='100'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
  sortBy?: string(name='SortBy', description='The fields used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:

*   Id (Desc/Asc): the route ID
*   DestinationCidr (Desc/Asc): the destination CIDR block of the route
*   CreateTime (Desc/Asc): the time when the route is created

Default value: CreateTime Asc.', example='CreateTime Asc'),
}

model ListRoutesResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='100'),
    routeList?: [ 
      {
        createTime?: long(name='CreateTime', description='The creation time, which is a 64-bit timestamp.', example='1727055811000'),
        destinationCidr?: string(name='DestinationCidr', description='Route destination CIDR', example='192.168.0.0/16'),
        id?: long(name='Id', description='Route ID', example='1000'),
        networkId?: long(name='NetworkId', description='Network Resource ID', example='1000'),
        resourceGroupId?: string(name='ResourceGroupId', description='Unique identifier of the resource group to which it belongs', example='Serverless_res_group_524257424564736_6831777003****'),
        resourceId?: string(name='ResourceId', description='Unique identifier of network resource', example='ns-679XXXXXX'),
      }
    ](name='RouteList', description='The list of network resource routing information obtained.'),
    totalCount?: int32(name='TotalCount', description='All data entries', example='100'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request. It is used to locate logs and troubleshoot problems.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListRoutesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRoutesResponseBody(name='body'),
}

/**
 * @summary Queries a list of routes of a network resource.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListRoutesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRoutesResponse
 */
async function listRoutesWithOptions(request: ListRoutesRequest, runtime: Util.RuntimeOptions): ListRoutesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRoutes',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of routes of a network resource.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListRoutesRequest
 * @return ListRoutesResponse
 */
async function listRoutes(request: ListRoutesRequest): ListRoutesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRoutesWithOptions(request, runtime);
}

model ListSchemasRequest {
  comment?: string(name='Comment', description='The comment. Fuzzy match is supported.', example='test comment'),
  name?: string(name='Name', description='The name. Fuzzy match is supported.', example='abc'),
  order?: string(name='Order', description='The order in which schemas are sorted. Default value: Asc. Valid values:

*   Asc: ascending order
*   Desc: descending order', example='Asc'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  parentMetaEntityId?: string(name='ParentMetaEntityId', description='The parent entity ID. For more information, see [Concepts related to metadata entities](https://help.aliyun.com/document_detail/2880092.html). For the Hologres metadata crawler type, you can call the ListDatabases operation to query the settings of the `ParentMetaEntityId` parameter.

Configure the `ParentMetaEntityId` parameter in the `${EntityType}:${Instance ID or escaped URL}:${Catalog identifier}:${Database name}` format. If a level does not exist, leave the level empty.

>  If you want to query the information about a MaxCompute schema, specify an empty string at the Instance ID level as a placeholder and a MaxCompute project name at the Database name level. Make sure that the schema feature is enabled for the MaxCompute project.

This parameter is required.', example='maxcompute-project:123456XXX::test_project
holo-database:h-abc123xxx::test_db'),
  sortBy?: string(name='SortBy', description='The field used for sorting. Default value: CreateTime. Valid values:

*   CreateTime
*   ModifyTime
*   Name
*   Type', example='CreateTime'),
  types?: [ string ](name='Types', description='The types. Exact match is supported. If this parameter is left empty, all types are queried.'),
}

model ListSchemasShrinkRequest {
  comment?: string(name='Comment', description='The comment. Fuzzy match is supported.', example='test comment'),
  name?: string(name='Name', description='The name. Fuzzy match is supported.', example='abc'),
  order?: string(name='Order', description='The order in which schemas are sorted. Default value: Asc. Valid values:

*   Asc: ascending order
*   Desc: descending order', example='Asc'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  parentMetaEntityId?: string(name='ParentMetaEntityId', description='The parent entity ID. For more information, see [Concepts related to metadata entities](https://help.aliyun.com/document_detail/2880092.html). For the Hologres metadata crawler type, you can call the ListDatabases operation to query the settings of the `ParentMetaEntityId` parameter.

Configure the `ParentMetaEntityId` parameter in the `${EntityType}:${Instance ID or escaped URL}:${Catalog identifier}:${Database name}` format. If a level does not exist, leave the level empty.

>  If you want to query the information about a MaxCompute schema, specify an empty string at the Instance ID level as a placeholder and a MaxCompute project name at the Database name level. Make sure that the schema feature is enabled for the MaxCompute project.

This parameter is required.', example='maxcompute-project:123456XXX::test_project
holo-database:h-abc123xxx::test_db'),
  sortBy?: string(name='SortBy', description='The field used for sorting. Default value: CreateTime. Valid values:

*   CreateTime
*   ModifyTime
*   Name
*   Type', example='CreateTime'),
  typesShrink?: string(name='Types', description='The types. Exact match is supported. If this parameter is left empty, all types are queried.'),
}

model ListSchemasResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    schemas?: [
      Schema
    ](name='Schemas', description='The schemas.'),
    totalCount?: long(name='TotalCount', example='1'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='235BBA5E-3428-XXXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListSchemasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSchemasResponseBody(name='body'),
}

/**
 * @summary Queries a list of schemas in a database or a MaxCompute project in Data Map. Only schemas of the MaxCompute and Hologres metadata crawler types are supported.
 *
 * @param tmpReq ListSchemasRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSchemasResponse
 */
async function listSchemasWithOptions(tmpReq: ListSchemasRequest, runtime: Util.RuntimeOptions): ListSchemasResponse {
  Util.validateModel(tmpReq);
  var request = new ListSchemasShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.types)) {
    request.typesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.types, 'Types', 'simple');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSchemas',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of schemas in a database or a MaxCompute project in Data Map. Only schemas of the MaxCompute and Hologres metadata crawler types are supported.
 *
 * @param request ListSchemasRequest
 * @return ListSchemasResponse
 */
async function listSchemas(request: ListSchemasRequest): ListSchemasResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSchemasWithOptions(request, runtime);
}

model ListTablesRequest {
  comment?: string(name='Comment', example='this is a comment'),
  name?: string(name='Name', example='abc'),
  order?: string(name='Order', example='Asc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  parentMetaEntityId?: string(name='ParentMetaEntityId', description='The parent metadata entity ID. You can refer to the responses of the ListDatabases or ListSchemas operation and [Description of concepts related to metadata entities.](https://help.aliyun.com/document_detail/2880092.html)

*   The parent metadata entity is a database: The format of `ParentMetaEntityId` is `${EntityType}:${Instance ID or encoded URL}:${Catalog Identifier}:${Database Name}`. Use an empty string (\\\\`""\\\\`) as a placeholder for any non-existent level.
*   The parent metadata entity is a database schema:. The format of `ParentMetaEntityId` is `${EntityType}:${Instance ID or encoded URL}:${Catalog Identifier}:${Database Name}:${Schema Name}`. Use an empty string (\\\\`""\\\\`) as a placeholder for any non-existent level.

>  The schema level in `ParentMetaEntityId` is supported only for database types that support schemas, such as MaxCompute (with schema enabled), Hologres, PostgreSQL, SQL Server, HybridDB for PostgreSQL, and Oracle.``

>  For MaxCompute and DLF types, use empty strings as the instance ID. For MaxCompute, the database name is the same as the project name.

>  For the StarRocks type, the catalog identifier is the catalog name. For the DLF type, it refers to the catalog ID. Other types do not support a catalog-level hierarchy and the catalog identifier must be replaced with an empty string as a placeholder.

Examples of common ParentMetaEntityId formats

`maxcompute-project:::project_name`

`maxcompute-schema:::project_name:schema_name` (for MaxCompute projects with schema enabled)

`dlf-database::catalog_id:database_name`

`hms-database:instance_id::database_name`

`holo-schema:instance_id::database_name:schema_name`

`mysql-database:(instance_id|encoded_jdbc_url)::database_name`

> \\\\
`instance_id`: The instance ID, required when the data source is registered in instance mode.\\\\
`encoded_jdbc_url`: The JDBC connection string that has been URL encoded, required for the data source registered via a connection string.\\\\
`catalog_id`: The DLF catalog ID.\\\\
`project_name`: The MaxCompute project name.\\\\
`database_name`: The database name.\\\\
`schema_name`: The schema name.

This parameter is required.', example='maxcompute-schema:123456XXX::test_project_with_schema:default
maxcompute-project:123456XXX::test_project_without_schema
dlf-database:123456XXX:test_catalog:test_db
hms-database:c-abc123xxx::test_db
holo-schema:h-abc123xxx::test_db:test_schema
mysql-database:jdbc%3Amysql%3A%2F%2F127.0.0.1%3A3306%2Ftest_db::test_db'),
  sortBy?: string(name='SortBy', example='CreateTime'),
  tableTypes?: [ string ](name='TableTypes'),
}

model ListTablesShrinkRequest {
  comment?: string(name='Comment', example='this is a comment'),
  name?: string(name='Name', example='abc'),
  order?: string(name='Order', example='Asc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  parentMetaEntityId?: string(name='ParentMetaEntityId', description='The parent metadata entity ID. You can refer to the responses of the ListDatabases or ListSchemas operation and [Description of concepts related to metadata entities.](https://help.aliyun.com/document_detail/2880092.html)

*   The parent metadata entity is a database: The format of `ParentMetaEntityId` is `${EntityType}:${Instance ID or encoded URL}:${Catalog Identifier}:${Database Name}`. Use an empty string (\\\\`""\\\\`) as a placeholder for any non-existent level.
*   The parent metadata entity is a database schema:. The format of `ParentMetaEntityId` is `${EntityType}:${Instance ID or encoded URL}:${Catalog Identifier}:${Database Name}:${Schema Name}`. Use an empty string (\\\\`""\\\\`) as a placeholder for any non-existent level.

>  The schema level in `ParentMetaEntityId` is supported only for database types that support schemas, such as MaxCompute (with schema enabled), Hologres, PostgreSQL, SQL Server, HybridDB for PostgreSQL, and Oracle.``

>  For MaxCompute and DLF types, use empty strings as the instance ID. For MaxCompute, the database name is the same as the project name.

>  For the StarRocks type, the catalog identifier is the catalog name. For the DLF type, it refers to the catalog ID. Other types do not support a catalog-level hierarchy and the catalog identifier must be replaced with an empty string as a placeholder.

Examples of common ParentMetaEntityId formats

`maxcompute-project:::project_name`

`maxcompute-schema:::project_name:schema_name` (for MaxCompute projects with schema enabled)

`dlf-database::catalog_id:database_name`

`hms-database:instance_id::database_name`

`holo-schema:instance_id::database_name:schema_name`

`mysql-database:(instance_id|encoded_jdbc_url)::database_name`

> \\\\
`instance_id`: The instance ID, required when the data source is registered in instance mode.\\\\
`encoded_jdbc_url`: The JDBC connection string that has been URL encoded, required for the data source registered via a connection string.\\\\
`catalog_id`: The DLF catalog ID.\\\\
`project_name`: The MaxCompute project name.\\\\
`database_name`: The database name.\\\\
`schema_name`: The schema name.

This parameter is required.', example='maxcompute-schema:123456XXX::test_project_with_schema:default
maxcompute-project:123456XXX::test_project_without_schema
dlf-database:123456XXX:test_catalog:test_db
hms-database:c-abc123xxx::test_db
holo-schema:h-abc123xxx::test_db:test_schema
mysql-database:jdbc%3Amysql%3A%2F%2F127.0.0.1%3A3306%2Ftest_db::test_db'),
  sortBy?: string(name='SortBy', example='CreateTime'),
  tableTypesShrink?: string(name='TableTypes'),
}

model ListTablesResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    tables?: [
      Table
    ](name='Tables'),
    totalCount?: long(name='TotalCount', example='100'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='E25887B7-579C-54A5-9C4F-83A****'),
  success?: boolean(name='Success', example='true'),
}

model ListTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTablesResponseBody(name='body'),
}

/**
 * @summary 查询数据表列表
 *
 * @param tmpReq ListTablesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTablesResponse
 */
async function listTablesWithOptions(tmpReq: ListTablesRequest, runtime: Util.RuntimeOptions): ListTablesResponse {
  Util.validateModel(tmpReq);
  var request = new ListTablesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tableTypes)) {
    request.tableTypesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tableTypes, 'TableTypes', 'simple');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTables',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询数据表列表
 *
 * @param request ListTablesRequest
 * @return ListTablesResponse
 */
async function listTables(request: ListTablesRequest): ListTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTablesWithOptions(request, runtime);
}

model ListTaskInstanceOperationLogsRequest {
  date?: long(name='Date', description='The operation date, accurate to the day. The default value is the current day. You can query only the operation logs generated within the previous 31 days. This value is a UNIX timestamp.', example='1710239005403'),
  id?: long(name='Id', description='The instance ID.

This parameter is required.', example='1234'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
}

model ListTaskInstanceOperationLogsResponseBody = {
  pagingInfo?: {
    operationLogs?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the operation log was generated.', example='1710239005403'),
        operationContent?: string(name='OperationContent', description='The operation content.', example='Freeze tasks'),
        operationSeq?: long(name='OperationSeq', description='The serial number of the operation.', example='1111'),
        taskInstanceId?: long(name='TaskInstanceId', description='The ID of the instance on which the operation was performed.', example='1234'),
        user?: string(name='User', description='The account ID of the operator.', example='1000'),
      }
    ](name='OperationLogs', description='The operation logs.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListTaskInstanceOperationLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskInstanceOperationLogsResponseBody(name='body'),
}

/**
 * @summary Queries a list of operation logs of an instance by page.
 *
 * @description This API operation is available for all DataWorks editions.
 * You can call this operation to query only the operation logs generated within the previous 31 days.
 *
 * @param request ListTaskInstanceOperationLogsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTaskInstanceOperationLogsResponse
 */
async function listTaskInstanceOperationLogsWithOptions(request: ListTaskInstanceOperationLogsRequest, runtime: Util.RuntimeOptions): ListTaskInstanceOperationLogsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTaskInstanceOperationLogs',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of operation logs of an instance by page.
 *
 * @description This API operation is available for all DataWorks editions.
 * You can call this operation to query only the operation logs generated within the previous 31 days.
 *
 * @param request ListTaskInstanceOperationLogsRequest
 * @return ListTaskInstanceOperationLogsResponse
 */
async function listTaskInstanceOperationLogs(request: ListTaskInstanceOperationLogsRequest): ListTaskInstanceOperationLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTaskInstanceOperationLogsWithOptions(request, runtime);
}

model ListTaskInstancesRequest {
  bizdate?: long(name='Bizdate', description='The data timestamp. The value of this parameter is 00:00:00 of the day before the scheduling time of the instance. The value is a UNIX timestamp. Unit: milliseconds. Example: 1743350400000.

This parameter is required.', example='1710239005403'),
  id?: long(name='Id', description='The ID of the instance. The instance may be rerun. If the instance is rerun and you configure this parameter, the system returns the historical information of the instance, including the rerun information. You can use the RunNumber parameter to distinguish each entry in the historical information.', example='1234'),
  ids?: [ long ](name='Ids', description='The IDs of the instances. You can query multiple instances at a time by instance ID.'),
  owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='100'),
  runtimeResource?: string(name='RuntimeResource', description='The information about the resource group. Set this parameter to the identifier of a resource group for scheduling.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
  sortBy?: string(name='SortBy', description='The field used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:

*   `TriggerTime (Desc/Asc)`

*   `StartedTime (Desc/Asc)`

*   `FinishedTime (Desc/Asc)`

*   `CreateTime (Desc/Asc)`

*   `Id (Desc/Asc)`

    Default value: `Id Desc`.', example='Id Desc'),
  status?: string(name='Status', example='Success'),
  taskId?: long(name='TaskId', description='The ID of the task for which the instance is generated.', example='1234'),
  taskIds?: [ long ](name='TaskIds', description='The IDs of the tasks. You can query multiple instances at a time by task ID.'),
  taskName?: string(name='TaskName', description='The name of the task. Fuzzy match is supported.', example='SQL node'),
  taskType?: string(name='TaskType', description='The type of the task for which the instance is generated.', example='ODPS_SQL'),
  triggerRecurrence?: string(name='TriggerRecurrence', description='The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler. Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
  triggerType?: string(name='TriggerType', description='The trigger type. Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Normal'),
  workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs.', example='1234'),
  workflowInstanceId?: long(name='WorkflowInstanceId', description='The workflow instance ID.', example='1234'),
  workflowInstanceType?: string(name='WorkflowInstanceType', description='The type of the workflow instance. Valid values:

*   SmokeTest
*   Manual
*   SupplementData
*   ManualWorkflow
*   Normal', example='Normal'),
}

model ListTaskInstancesShrinkRequest {
  bizdate?: long(name='Bizdate', description='The data timestamp. The value of this parameter is 00:00:00 of the day before the scheduling time of the instance. The value is a UNIX timestamp. Unit: milliseconds. Example: 1743350400000.

This parameter is required.', example='1710239005403'),
  id?: long(name='Id', description='The ID of the instance. The instance may be rerun. If the instance is rerun and you configure this parameter, the system returns the historical information of the instance, including the rerun information. You can use the RunNumber parameter to distinguish each entry in the historical information.', example='1234'),
  idsShrink?: string(name='Ids', description='The IDs of the instances. You can query multiple instances at a time by instance ID.'),
  owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='100'),
  runtimeResource?: string(name='RuntimeResource', description='The information about the resource group. Set this parameter to the identifier of a resource group for scheduling.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
  sortBy?: string(name='SortBy', description='The field used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:

*   `TriggerTime (Desc/Asc)`

*   `StartedTime (Desc/Asc)`

*   `FinishedTime (Desc/Asc)`

*   `CreateTime (Desc/Asc)`

*   `Id (Desc/Asc)`

    Default value: `Id Desc`.', example='Id Desc'),
  status?: string(name='Status', example='Success'),
  taskId?: long(name='TaskId', description='The ID of the task for which the instance is generated.', example='1234'),
  taskIdsShrink?: string(name='TaskIds', description='The IDs of the tasks. You can query multiple instances at a time by task ID.'),
  taskName?: string(name='TaskName', description='The name of the task. Fuzzy match is supported.', example='SQL node'),
  taskType?: string(name='TaskType', description='The type of the task for which the instance is generated.', example='ODPS_SQL'),
  triggerRecurrence?: string(name='TriggerRecurrence', description='The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler. Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
  triggerType?: string(name='TriggerType', description='The trigger type. Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Normal'),
  workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs.', example='1234'),
  workflowInstanceId?: long(name='WorkflowInstanceId', description='The workflow instance ID.', example='1234'),
  workflowInstanceType?: string(name='WorkflowInstanceType', description='The type of the workflow instance. Valid values:

*   SmokeTest
*   Manual
*   SupplementData
*   ManualWorkflow
*   Normal', example='Normal'),
}

model ListTaskInstancesResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    taskInstances?: [ 
      {
        baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
        bizdate?: long(name='Bizdate', description='The data timestamp.', example='1710239005403'),
        createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
        createUser?: string(name='CreateUser', description='The account ID of the user who creates the instance.', example='1000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
        }(name='DataSource', description='The information about the associated data source.'),
        description?: string(name='Description', description='The description.', example='test'),
        finishedTime?: long(name='FinishedTime', description='The time when the instance finished running.', example='1710239005403'),
        id?: long(name='Id', description='The instance ID.', example='1234'),
        modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', description='The account ID of the user who modifies the instance.', example='1000'),
        owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
        periodNumber?: int32(name='PeriodNumber', description='The sequence number of the cycle. This parameter indicates the cycle of the task instance on the current day.', example='1'),
        priority?: int32(name='Priority', description='The priority of the task. Minimum value: 1. Maximum value: 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
        projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='100'),
        rerunMode?: string(name='RerunMode', description='The rerun mode

Valid values:

*   AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.
*   AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to run.', example='AllAllowed'),
        runNumber?: int32(name='RunNumber', description='The number of times the task is run. By default, the value starts from 1.', example='1'),
        runtime?: {
          gateway?: string(name='Gateway', description='The host for running.', example='cn-shanghai.1.2'),
          processId?: string(name='ProcessId', description='The instance run ID.', example='T3_123'),
        }(name='Runtime', description='The runtime information about the instance.'),
        runtimeResource?: {
          cu?: string(name='Cu', description='The default number of CUs configured for task running.', example='0.25'),
          image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
          resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
        }(name='RuntimeResource', description='The information about the resource group with which the instance is associated.'),
        scriptParameters?: string(name='ScriptParameters', example='para1=val1 para2=val2'),
        startedTime?: long(name='StartedTime', description='The time when the instance started to run.', example='1710239005403'),
        status?: string(name='Status', description='The status of the instance.

Valid values:

*   NotRun: The instance is not run.
*   Running: The instance is running.
*   WaitTime: The instance is waiting for the scheduling time to arrive.
*   CheckingCondition: Branch conditions are being checked for the instance.
*   WaitResource: The instance is waiting for resources.
*   Failure: The instance fails to be run.
*   Success: The instance is successfully run.
*   Checking: Data quality is being checked for the instance.', example='Success'),
        taskId?: long(name='TaskId', description='The ID of the task for which the instance is generated.', example='1234'),
        taskName?: string(name='TaskName', description='The name of the task for which the instance is generated.', example='SQL node'),
        taskType?: string(name='TaskType', description='The type of the task for which the instance is generated.', example='ODPS_SQL'),
        timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.

Note: The value of this parameter is rounded up by hour.', example='1'),
        triggerRecurrence?: string(name='TriggerRecurrence', description='The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler.

Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
        triggerTime?: long(name='TriggerTime', description='The scheduling time.', example='1710239005403'),
        triggerType?: string(name='TriggerType', description='The trigger type.

Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
        waitingResourceTime?: long(name='WaitingResourceTime', example='1710239005403'),
        waitingTriggerTime?: long(name='WaitingTriggerTime', example='1710239005403'),
        workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs.', example='1234'),
        workflowInstanceId?: long(name='WorkflowInstanceId', description='The workflow instance ID.', example='1234'),
        workflowInstanceType?: string(name='WorkflowInstanceType', description='The type of the workflow instance.

Valid values:

*   SmokeTest
*   SupplementData
*   Manual
*   ManualWorkflow
*   Normal
*   ManualFlow', example='Normal'),
        workflowName?: string(name='WorkflowName', description='The name of the workflow to which the instance belongs.', example='Test workflow'),
      }
    ](name='TaskInstances', description='The list of task instances.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PagingInfo', description='The pagination details.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskInstancesResponseBody(name='body'),
}

/**
 * @summary Queries a list of instances. You can also specify filter conditions to query specific instances.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq ListTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTaskInstancesResponse
 */
async function listTaskInstancesWithOptions(tmpReq: ListTaskInstancesRequest, runtime: Util.RuntimeOptions): ListTaskInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new ListTaskInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  if (!Util.isUnset(tmpReq.taskIds)) {
    request.taskIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.taskIds, 'TaskIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.runtimeResource)) {
    body['RuntimeResource'] = request.runtimeResource;
  }
  if (!Util.isUnset(request.sortBy)) {
    body['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskIdsShrink)) {
    body['TaskIds'] = request.taskIdsShrink;
  }
  if (!Util.isUnset(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskType)) {
    body['TaskType'] = request.taskType;
  }
  if (!Util.isUnset(request.triggerRecurrence)) {
    body['TriggerRecurrence'] = request.triggerRecurrence;
  }
  if (!Util.isUnset(request.triggerType)) {
    body['TriggerType'] = request.triggerType;
  }
  if (!Util.isUnset(request.workflowId)) {
    body['WorkflowId'] = request.workflowId;
  }
  if (!Util.isUnset(request.workflowInstanceId)) {
    body['WorkflowInstanceId'] = request.workflowInstanceId;
  }
  if (!Util.isUnset(request.workflowInstanceType)) {
    body['WorkflowInstanceType'] = request.workflowInstanceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of instances. You can also specify filter conditions to query specific instances.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListTaskInstancesRequest
 * @return ListTaskInstancesResponse
 */
async function listTaskInstances(request: ListTaskInstancesRequest): ListTaskInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTaskInstancesWithOptions(request, runtime);
}

model ListTaskOperationLogsRequest {
  date?: long(name='Date', description='The operation date, accurate to the day. The default value is the current day. You can query only the operation logs generated within the previous 31 days.', example='1710239005403'),
  id?: long(name='Id', description='The task ID.

This parameter is required.', example='1234'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
}

model ListTaskOperationLogsResponseBody = {
  pagingInfo?: {
    operationLogs?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the operation log was generated.', example='1710239005403'),
        operationContent?: string(name='OperationContent', description='The operation content.', example='Freeze tasks'),
        operationSeq?: long(name='OperationSeq', description='The serial number of the operation.', example='1111'),
        taskId?: long(name='TaskId', description='The ID of the task on which the operation was performed.', example='1234'),
        user?: string(name='User', description='The account ID of the operator.', example='1000'),
      }
    ](name='OperationLogs', description='The operation logs.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListTaskOperationLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskOperationLogsResponseBody(name='body'),
}

/**
 * @summary Queries a list of operation logs of a task by page.
 *
 * @description This API operation is available for all DataWorks editions.
 * You can call this operation to query only the operation logs generated within the previous 31 days.
 *
 * @param request ListTaskOperationLogsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTaskOperationLogsResponse
 */
async function listTaskOperationLogsWithOptions(request: ListTaskOperationLogsRequest, runtime: Util.RuntimeOptions): ListTaskOperationLogsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTaskOperationLogs',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of operation logs of a task by page.
 *
 * @description This API operation is available for all DataWorks editions.
 * You can call this operation to query only the operation logs generated within the previous 31 days.
 *
 * @param request ListTaskOperationLogsRequest
 * @return ListTaskOperationLogsResponse
 */
async function listTaskOperationLogs(request: ListTaskOperationLogsRequest): ListTaskOperationLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTaskOperationLogsWithOptions(request, runtime);
}

model ListTasksRequest {
  ids?: [ long ](name='Ids', description='The ID of the task.'),
  name?: string(name='Name', description='The name of the task. Fuzzy match is supported.', example='SQL node'),
  owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='100'),
  runtimeResource?: string(name='RuntimeResource', description='The information about the resource group. Set this parameter to the ID of a resource group for scheduling.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
  sortBy?: string(name='SortBy', description='The field that is used to sort tasks. This parameter is configured in the format of "Sorting field Sorting order". You can set the sorting order to Desc or Asc. If you do not specify the sorting order, Asc is used by default. Valid values:

*   `ModifyTime (Desc/Asc)`

*   `CreateTime (Desc/Asc)`

*   `Id (Desc/Asc)`

    Default value: `Id Desc`.', example='Id Desc'),
  taskType?: string(name='TaskType', description='The type of the task. Valid values:

*   ODPS_SQL
*   SPARK
*   PY_ODPS
*   PY_ODPS3
*   ODPS_SCRIPT
*   ODPS_MR
*   COMPONENT_SQL
*   EMR_HIVE
*   EMR_MR
*   EMR_SPARK_SQL
*   EMR_SPARK
*   EMR_SHELL
*   EMR_PRESTO
*   EMR_IMPALA
*   SPARK_STREAMING
*   EMR_KYUUBI
*   EMR_TRINO
*   HOLOGRES_SQL
*   HOLOGRES_SYNC_DDL
*   HOLOGRES_SYNC_DATA', example='ODPS_SQL'),
  triggerRecurrence?: string(name='TriggerRecurrence', description='The running mode of the task after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler.

Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
  triggerType?: string(name='TriggerType', description='The trigger type.

Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
  workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the task belongs.', example='1234'),
}

model ListTasksShrinkRequest {
  idsShrink?: string(name='Ids', description='The ID of the task.'),
  name?: string(name='Name', description='The name of the task. Fuzzy match is supported.', example='SQL node'),
  owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='100'),
  runtimeResource?: string(name='RuntimeResource', description='The information about the resource group. Set this parameter to the ID of a resource group for scheduling.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
  sortBy?: string(name='SortBy', description='The field that is used to sort tasks. This parameter is configured in the format of "Sorting field Sorting order". You can set the sorting order to Desc or Asc. If you do not specify the sorting order, Asc is used by default. Valid values:

*   `ModifyTime (Desc/Asc)`

*   `CreateTime (Desc/Asc)`

*   `Id (Desc/Asc)`

    Default value: `Id Desc`.', example='Id Desc'),
  taskType?: string(name='TaskType', description='The type of the task. Valid values:

*   ODPS_SQL
*   SPARK
*   PY_ODPS
*   PY_ODPS3
*   ODPS_SCRIPT
*   ODPS_MR
*   COMPONENT_SQL
*   EMR_HIVE
*   EMR_MR
*   EMR_SPARK_SQL
*   EMR_SPARK
*   EMR_SHELL
*   EMR_PRESTO
*   EMR_IMPALA
*   SPARK_STREAMING
*   EMR_KYUUBI
*   EMR_TRINO
*   HOLOGRES_SQL
*   HOLOGRES_SYNC_DDL
*   HOLOGRES_SYNC_DATA', example='ODPS_SQL'),
  triggerRecurrence?: string(name='TriggerRecurrence', description='The running mode of the task after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler.

Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
  triggerType?: string(name='TriggerType', description='The trigger type.

Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
  workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the task belongs.', example='1234'),
}

model ListTasksResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    tasks?: [ 
      {
        baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
        createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
        createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
        }(name='DataSource', description='The information about the associated data source.'),
        description?: string(name='Description', description='The description of the task.', example='test'),
        id?: long(name='Id', description='The task ID.', example='1234'),
        instanceMode?: string(name='InstanceMode', description='The instance generation mode. Valid values:

*   T+1
*   Immediately', example='T+1'),
        modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
        name?: string(name='Name', description='The name of the task.', example='SQL node'),
        owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
        priority?: int32(name='Priority', description='The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
        projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
        rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: seconds.', example='60'),
        rerunMode?: string(name='RerunMode', description='The rerun mode.

Valid values:

*   AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.
*   AllAllowed: The task can be rerun regardless of whether it is successfully run or fails to run.', example='AllAllowed'),
        rerunTimes?: int32(name='RerunTimes', description='The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.', example='3'),
        runtimeResource?: {
          cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
          image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
          resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
        }(name='RuntimeResource', description='The configurations of the runtime environment, such as the resource group information.'),
        scriptParameters?: string(name='ScriptParameters', description='The list of script parameters.', example='para1=$bizdate para2=$[yyyymmdd]'),
        timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='3600'),
        trigger?: {
          cron?: string(name='Cron', description='The CRON expression of the task. This parameter takes effect only if the Type parameter is set to Scheduler.', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', description='The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='9999-01-01 00:00:00'),
          recurrence?: string(name='Recurrence', description='The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler.

Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
          startTime?: string(name='StartTime', description='The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='1970-01-01 00:00:00'),
          type?: string(name='Type', description='The trigger type.

Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
        }(name='Trigger', description='The method to trigger task scheduling.'),
        type?: string(name='Type', description='The type of the task.', example='ODPS_SQL'),
        workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the task belongs.', example='1234'),
      }
    ](name='Tasks', description='The tasks.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTasksResponseBody(name='body'),
}

/**
 * @summary Queries a list of tasks by page. You can also specify filter conditions to query tasks.
 *
 * @param tmpReq ListTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTasksResponse
 */
async function listTasksWithOptions(tmpReq: ListTasksRequest, runtime: Util.RuntimeOptions): ListTasksResponse {
  Util.validateModel(tmpReq);
  var request = new ListTasksShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.runtimeResource)) {
    body['RuntimeResource'] = request.runtimeResource;
  }
  if (!Util.isUnset(request.sortBy)) {
    body['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.taskType)) {
    body['TaskType'] = request.taskType;
  }
  if (!Util.isUnset(request.triggerRecurrence)) {
    body['TriggerRecurrence'] = request.triggerRecurrence;
  }
  if (!Util.isUnset(request.triggerType)) {
    body['TriggerType'] = request.triggerType;
  }
  if (!Util.isUnset(request.workflowId)) {
    body['WorkflowId'] = request.workflowId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListTasks',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of tasks by page. You can also specify filter conditions to query tasks.
 *
 * @param request ListTasksRequest
 * @return ListTasksResponse
 */
async function listTasks(request: ListTasksRequest): ListTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTasksWithOptions(request, runtime);
}

model ListUpstreamTaskInstancesRequest {
  id?: long(name='Id', description='The instance ID.

This parameter is required.', example='1234'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
}

model ListUpstreamTaskInstancesResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    taskInstances?: [ 
      {
        baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
        bizdate?: long(name='Bizdate', description='The data timestamp.', example='1710239005403'),
        createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
        createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
        }(name='DataSource', description='The information about the associated data source.'),
        description?: string(name='Description', description='The description.', example='test'),
        envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod
*   Dev', example='Prod'),
        finishedTime?: long(name='FinishedTime', description='The time when the instance finished running.', example='1710239005403'),
        id?: long(name='Id', description='The instance ID.', example='1234'),
        modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
        owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
        periodNumber?: int32(name='PeriodNumber', description='The sequence number of the period. Indicates which cycle of the day the task instance is in.', example='1'),
        priority?: int32(name='Priority', description='The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
        projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod', deprecated=true),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
        rerunMode?: string(name='RerunMode', description='The rerun mode. Valid values:

*   AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.
*   AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to run.', example='AllAllowed'),
        runNumber?: int32(name='RunNumber', description='The number of times the instance is run. By default, the value starts from 1.', example='1'),
        runtime?: {
          gateway?: string(name='Gateway', description='The host for running.', example='cn-shanghai.1.2'),
          processId?: string(name='ProcessId', description='The instance run ID.', example='T3_123'),
        }(name='Runtime', description='The runtime information about the instance.'),
        runtimeResource?: {
          cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
          image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
          resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
        }(name='RuntimeResource', description='The configurations of the runtime environment, such as the resource group information.'),
        startedTime?: long(name='StartedTime', description='The time when the instance started to run.', example='1710239005403'),
        status?: string(name='Status', description='The status of the instance. Valid values:

*   NotRun: The instance is not run.
*   Running: The instance is running.
*   WaitTime: The instance is waiting for the scheduling time to arrive.
*   CheckingCondition: Branch conditions are being checked for the instance.
*   WaitResource: The instance is waiting for resources.
*   Failure: The instance fails to be run.
*   Success: The instance is successfully run.
*   Checking: Data quality is being checked for the instance.', example='Success'),
        stepType?: string(name='StepType', description='The scheduling dependency type. Valid values:

*   Normal: same-cycle scheduling dependency
*   CrossCycle: cross-cycle scheduling dependency', example='Normal'),
        taskId?: long(name='TaskId', description='The ID of the task for which the instance is generated.', example='1234'),
        taskName?: string(name='TaskName', description='The name of the task for which the instance is generated.', example='SQL node'),
        taskType?: string(name='TaskType', description='The type of the task for which the instance is generated.', example='ODPS_SQL'),
        timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='1'),
        triggerRecurrence?: string(name='TriggerRecurrence', description='The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler. Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
        triggerTime?: long(name='TriggerTime', description='The scheduling time.', example='1710239005403'),
        triggerType?: string(name='TriggerType', description='The trigger type. Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
        workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs.', example='1234'),
        workflowInstanceId?: long(name='WorkflowInstanceId', description='The workflow instance ID.', example='1234'),
        workflowInstanceType?: string(name='WorkflowInstanceType', description='The type of the workflow instance. Valid values:

*   SmokeTest
*   SupplementData
*   Manual
*   ManualWorkflow
*   Normal
*   ManualFlow', example='Normal'),
        workflowName?: string(name='WorkflowName', description='The name of the workflow to which the instance belongs.', example='Test workflow'),
      }
    ](name='TaskInstances', description='The instances. This parameter is deprecated and replaced by the UpstreamTaskInstances parameter.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
    upstreamTaskInstances?: [ 
      {
        dependencyType?: string(name='DependencyType', description='The scheduling dependency type. Valid values:

*   Normal
*   CrossCycle', example='Normal'),
        taskInstance?: {
          baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
          bizdate?: long(name='Bizdate', description='The data timestamp.', example='1710239005403'),
          createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
          createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
          dataSource?: {
            name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
          }(name='DataSource', description='The information about the associated data source.'),
          description?: string(name='Description', description='The description.', example='test'),
          envType?: string(name='EnvType', description='The environment in which the data source is used. Valid values:

*   Dev
*   Prod', example='Prod'),
          finishedTime?: long(name='FinishedTime', description='The time when the instance finished running.', example='1710239005403'),
          id?: long(name='Id', description='The instance ID.', example='1234'),
          modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
          modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
          owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
          periodNumber?: int32(name='PeriodNumber', description='The sequence number of the cycle. This parameter indicates the cycle of the task instance on the current day.', example='1'),
          priority?: int32(name='Priority', description='The priority of the task. Minimum value: 1. Maximum value: 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
          projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
          rerunMode?: string(name='RerunMode', description='The rerun mode.', example='AllAllowed'),
          runNumber?: int32(name='RunNumber', description='The number of times the instance is run. By default, the value starts from 1.', example='1'),
          runtime?: {
            gateway?: string(name='Gateway', description='The host for running.', example='cn-shanghai.1.2'),
            processId?: string(name='ProcessId', description='The instance run ID.', example='T3_123'),
          }(name='Runtime', description='The runtime information about the instance.'),
          runtimeResource?: {
            cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
            image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
            resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
          }(name='RuntimeResource', description='The configurations of the runtime environment, such as the resource group information.'),
          startedTime?: long(name='StartedTime', description='The time when the instance started to run.', example='1710239005403'),
          status?: string(name='Status', description='The status of the instance. Valid values:

*   NotRun: The instance is not run.
*   Running: The instance is running.
*   WaitTime: The instance is waiting for the scheduling time to arrive.
*   CheckingCondition: Branch conditions are being checked for the instance.
*   WaitResource: The instance is waiting for resources.
*   Failure: The instance fails to be run.
*   Success: The instance is successfully run.
*   Checking: Data quality is being checked for the instance.
*   WaitTrigger: The instance is waiting to be triggered by external scheduling systems.', example='Success'),
          taskId?: long(name='TaskId', description='The ID of the task for which the instance is generated.', example='1234'),
          taskName?: string(name='TaskName', description='The name of the task for which the instance is generated.', example='SQL node'),
          taskType?: string(name='TaskType', description='The type of the task for which the instance is generated.', example='ODPS_SQL'),
          timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.

Note: The value of this parameter is rounded up by hour.', example='3600'),
          triggerRecurrence?: string(name='TriggerRecurrence', description='The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler. Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
          triggerTime?: long(name='TriggerTime', description='The scheduling time.', example='1710239005403'),
          triggerType?: string(name='TriggerType', description='The trigger type. Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
          workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs.', example='1234'),
          workflowInstanceId?: long(name='WorkflowInstanceId', description='The workflow instance ID.', example='1234'),
          workflowInstanceType?: string(name='WorkflowInstanceType', description='The type of the workflow instance. Valid values:

*   Normal
*   Manual
*   SmokeTest
*   SupplementData
*   ManualWorkflow', example='Normal'),
          workflowName?: string(name='WorkflowName', description='The name of the workflow to which the instance belongs.', example='Test workflow'),
        }(name='TaskInstance', description='The information about a task instance.'),
      }
    ](name='UpstreamTaskInstances', description='The ancestor instances.'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListUpstreamTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUpstreamTaskInstancesResponseBody(name='body'),
}

/**
 * @summary Queries a list of ancestor instances of an instance by page.
 *
 * @param request ListUpstreamTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUpstreamTaskInstancesResponse
 */
async function listUpstreamTaskInstancesWithOptions(request: ListUpstreamTaskInstancesRequest, runtime: Util.RuntimeOptions): ListUpstreamTaskInstancesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUpstreamTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of ancestor instances of an instance by page.
 *
 * @param request ListUpstreamTaskInstancesRequest
 * @return ListUpstreamTaskInstancesResponse
 */
async function listUpstreamTaskInstances(request: ListUpstreamTaskInstancesRequest): ListUpstreamTaskInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUpstreamTaskInstancesWithOptions(request, runtime);
}

model ListUpstreamTasksRequest {
  id?: long(name='Id', description='The task ID.

This parameter is required.', example='1234'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
}

model ListUpstreamTasksResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    tasks?: [ 
      {
        baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
        createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
        createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
        }(name='DataSource', description='The information about the associated data source.'),
        description?: string(name='Description', description='The description of the task.', example='test'),
        envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod
*   Dev', example='Prod'),
        id?: long(name='Id', description='The task ID.', example='1234'),
        instanceMode?: string(name='InstanceMode', description='The instance generation mode. Valid values:

*   T+1
*   Immediately', example='T+1'),
        modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
        name?: string(name='Name', description='The name of the task.', example='SQL node'),
        owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
        priority?: int32(name='Priority', description='The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
        projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. This parameter is deprecated and replaced by the EnvType parameter.

Valid values:

*   Prod
*   Dev', example='Prod', deprecated=true),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
        rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: seconds.', example='60'),
        rerunMode?: string(name='RerunMode', description='The rerun mode.

Valid values:

*   AllDenied: The task cannot be rerun regardless of whether it is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.
*   AllAllowed: The task can be rerun regardless of whether it is successfully run or fails to run.', example='AllAllowed'),
        rerunTimes?: int32(name='RerunTimes', description='The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.', example='3'),
        runtimeResource?: {
          cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
          image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
          resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
        }(name='RuntimeResource', description='The configurations of the runtime environment, such as the resource group information.'),
        stepType?: string(name='StepType', description='The scheduling dependency type. Valid values:

*   Normal: same-cycle scheduling dependency
*   CrossCycle: cross-cycle scheduling dependency', example='Normal'),
        timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='3600'),
        trigger?: {
          cron?: string(name='Cron', description='The CRON expression of the task. This parameter takes effect only if the Type parameter is set to Scheduler.', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', description='The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='9999-01-01 00:00:00'),
          recurrence?: string(name='Recurrence', description='The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler.

Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
          startTime?: string(name='StartTime', description='The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='1970-01-01 00:00:00'),
          timezone?: string(name='Timezone', description='The time zone.', example='Asia/Shanghai'),
          type?: string(name='Type', description='The trigger type.

Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
        }(name='Trigger', description='The method to trigger task scheduling.'),
        type?: string(name='Type', description='The type of the task.', example='ODPS_SQL'),
        workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the task belongs.', example='1234'),
      }
    ](name='Tasks', description='The tasks. This parameter is deprecated and replaced by the UpstreamTasks parameter.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
    upstreamTasks?: [ 
      {
        dependencyType?: string(name='DependencyType', description='The scheduling dependency type. Valid values:

*   Normal: same-cycle scheduling dependency
*   CrossCycle: cross-cycle scheduling dependency', example='Normal'),
        task?: {
          baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
          createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
          createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
          dataSource?: {
            name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
          }(name='DataSource', description='The information about the associated data source.'),
          description?: string(name='Description', description='The description of the task.', example='test'),
          envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod
*   Dev', example='Prod'),
          id?: long(name='Id', description='The task ID.', example='1234'),
          instanceMode?: string(name='InstanceMode', description='The instance generation mode. Valid values:

*   T+1
*   Immediately', example='T+1'),
          modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
          modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
          name?: string(name='Name', description='The name of the task.', example='SQL node'),
          owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
          priority?: int32(name='Priority', description='The priority of the task. Valid values: 1 to 8.', example='1'),
          projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
          rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: seconds.', example='60'),
          rerunMode?: string(name='RerunMode', description='The rerun mode. Valid values:

*   AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.
*   AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to run.', example='AllAllowed'),
          rerunTimes?: int32(name='RerunTimes', description='The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.', example='3'),
          runtimeResource?: {
            cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
            image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
            resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
          }(name='RuntimeResource', description='The configurations of the runtime environment, such as the resource group information.'),
          timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='3600'),
          trigger?: {
            cron?: string(name='Cron', description='The CRON expression. This parameter takes effect only if the Type parameter is set to Scheduler.', example='00 00 00 * * ?'),
            endTime?: string(name='EndTime', description='The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='9999-01-01 00:00:00'),
            recurrence?: string(name='Recurrence', description='The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler. Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
            startTime?: string(name='StartTime', description='The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='1970-01-01 00:00:00'),
            timezone?: string(name='Timezone', description='The time zone.', example='Asia/Shanghai'),
            type?: string(name='Type', description='The trigger type. Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
          }(name='Trigger', description='The trigger method.'),
          type?: string(name='Type', description='The type of the task.', example='ODPS_SQL'),
          workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the task belongs.', example='1234'),
        }(name='Task', description='The information about the task.'),
      }
    ](name='UpstreamTasks', description='The ancestor tasks.'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListUpstreamTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUpstreamTasksResponseBody(name='body'),
}

/**
 * @summary Queries a list of ancestor tasks of a task by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListUpstreamTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUpstreamTasksResponse
 */
async function listUpstreamTasksWithOptions(request: ListUpstreamTasksRequest, runtime: Util.RuntimeOptions): ListUpstreamTasksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUpstreamTasks',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of ancestor tasks of a task by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListUpstreamTasksRequest
 * @return ListUpstreamTasksResponse
 */
async function listUpstreamTasks(request: ListUpstreamTasksRequest): ListUpstreamTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUpstreamTasksWithOptions(request, runtime);
}

model ListWorkflowDefinitionsRequest {
  name?: string(name='Name'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the workspace administrator. You can log on to the Alibaba Cloud Management Console and view the ID on the Security Settings page.', example='110755000425XXXX'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  type?: string(name='Type', description='The workflow type. This parameter specifies a filter condition.

Valid values:

*   CycleWorkflow
*   ManualWorkflow', example='CycleWorkflow'),
}

model ListWorkflowDefinitionsResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='227'),
    workflowDefinitions?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the workflow was created. This value is a UNIX timestamp.', example='1698057323000'),
        description?: string(name='Description', description='The description of the workflow.', example='Workflow description'),
        id?: long(name='Id', description='The ID of the workflow.', example='463497880880954XXXX'),
        modifyTime?: long(name='ModifyTime', description='The time when the workflow was last modified. This value is a UNIX timestamp.', example='1698057323000'),
        name?: string(name='Name', description='The name of the workflow.', example='OpenAPI test workflow Demo'),
        owner?: string(name='Owner', description='The owner.', example='110755000425XXXX'),
        projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace to which the workflow belongs.

This parameter is required.', example='4710'),
        script?: {
          id?: long(name='Id', description='The script ID.', example='698002781368644XXXX'),
          path?: string(name='Path', description='The script path.', example='XX/OpenAPI_test/workflow_test/OpenAPI_test_workflow_Demo'),
          runtime?: {
            command?: string(name='Command', description='The command.', example='WORKFLOW'),
          }(name='Runtime', description='The runtime.'),
        }(name='Script', description='The script information.'),
        type?: string(name='Type', description='The type of the workflow.

Valid values:

*   CycleWorkflow
*   ManualWorkflow', example='CycleWorkflow'),
      }
    ](name='WorkflowDefinitions', description='The workflows.'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='8C3ED0C5-ABAB-55E1-854B-DAC02B11XXXX'),
}

model ListWorkflowDefinitionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkflowDefinitionsResponseBody(name='body'),
}

/**
 * @summary Queries a list of workflows in DataStudio. You can also specify filter conditions to query specific workflows.
 *
 * @param request ListWorkflowDefinitionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWorkflowDefinitionsResponse
 */
async function listWorkflowDefinitionsWithOptions(request: ListWorkflowDefinitionsRequest, runtime: Util.RuntimeOptions): ListWorkflowDefinitionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWorkflowDefinitions',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of workflows in DataStudio. You can also specify filter conditions to query specific workflows.
 *
 * @param request ListWorkflowDefinitionsRequest
 * @return ListWorkflowDefinitionsResponse
 */
async function listWorkflowDefinitions(request: ListWorkflowDefinitionsRequest): ListWorkflowDefinitionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWorkflowDefinitionsWithOptions(request, runtime);
}

model ListWorkflowInstancesRequest {
  bizDate?: long(name='BizDate', description='The data timestamp. The value of this parameter is 00:00:00 of the day before the scheduling time of the instance. The value is a UNIX timestamp. Unit: milliseconds. Example: 1743350400000.

This parameter is required.', example='1710239005403'),
  ids?: [ long ](name='Ids', description='The IDs of the workflow instances. You can query multiple instances at a time by instance ID.'),
  name?: string(name='Name', description='The instance name. Fuzzy match is supported.', example='WorkflowInstance1'),
  owner?: string(name='Owner', description='The account ID of the workflow instance owner.', example='1000'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='100'),
  sortBy?: string(name='SortBy', description='The fields used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:

*   TriggerTime (Desc/Asc)
*   StartedTime (Desc/Asc)
*   FinishedTime (Desc/Asc)
*   CreateTime (Desc/Asc)
*   Id (Desc/Asc)

Default value: Id Desc.', example='Id Desc'),
  type?: string(name='Type', description='The type of the workflow instance. Valid values:

*   Normal
*   Manual
*   SmokeTest
*   SupplementData
*   ManualWorkflow', example='Normal'),
  workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs.', example='1234'),
}

model ListWorkflowInstancesShrinkRequest {
  bizDate?: long(name='BizDate', description='The data timestamp. The value of this parameter is 00:00:00 of the day before the scheduling time of the instance. The value is a UNIX timestamp. Unit: milliseconds. Example: 1743350400000.

This parameter is required.', example='1710239005403'),
  idsShrink?: string(name='Ids', description='The IDs of the workflow instances. You can query multiple instances at a time by instance ID.'),
  name?: string(name='Name', description='The instance name. Fuzzy match is supported.', example='WorkflowInstance1'),
  owner?: string(name='Owner', description='The account ID of the workflow instance owner.', example='1000'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='100'),
  sortBy?: string(name='SortBy', description='The fields used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:

*   TriggerTime (Desc/Asc)
*   StartedTime (Desc/Asc)
*   FinishedTime (Desc/Asc)
*   CreateTime (Desc/Asc)
*   Id (Desc/Asc)

Default value: Id Desc.', example='Id Desc'),
  type?: string(name='Type', description='The type of the workflow instance. Valid values:

*   Normal
*   Manual
*   SmokeTest
*   SupplementData
*   ManualWorkflow', example='Normal'),
  workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs.', example='1234'),
}

model ListWorkflowInstancesResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
    workflowInstances?: [ 
      {
        bizDate?: long(name='BizDate', example='1710239005403'),
        createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
        createUser?: string(name='CreateUser', description='The account ID of the creator.', example='100'),
        envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod
*   Dev', example='Prod'),
        finishedTime?: long(name='FinishedTime', description='The time when the instance finished running.', example='1710239005403'),
        id?: long(name='Id', description='The workflow instance ID.', example='1234'),
        modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='100'),
        name?: string(name='Name', description='The name of the workflow instance.', example='WorkflowInstance1'),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
        startedTime?: long(name='StartedTime', description='The time when the instance started to run.', example='1710239005403'),
        status?: string(name='Status', description='The status of the workflow instance. Valid values:

*   NotRun: The instance is not run.
*   Running: The instance is running.
*   WaitTime: The instance is waiting for the scheduling time to arrive.
*   CheckingCondition: Branch conditions are being checked for the instance.
*   WaitResource: The instance is waiting for resources.
*   Failure: The instance fails to be run.
*   Success: The instance is successfully run.
*   Checking: Data quality is being checked for the instance.', example='Success'),
        tags?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='Tags'),
        type?: string(name='Type', example='Normal'),
        workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs.', example='1234'),
        workflowParameters?: string(name='WorkflowParameters'),
      }
    ](name='WorkflowInstances', description='The workflow instances.'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListWorkflowInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkflowInstancesResponseBody(name='body'),
}

/**
 * @summary Queries a list of workflow instances by page. You can also specify filter conditions to query workflow instances.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq ListWorkflowInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWorkflowInstancesResponse
 */
async function listWorkflowInstancesWithOptions(tmpReq: ListWorkflowInstancesRequest, runtime: Util.RuntimeOptions): ListWorkflowInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new ListWorkflowInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!Util.isUnset(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.sortBy)) {
    body['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  if (!Util.isUnset(request.workflowId)) {
    body['WorkflowId'] = request.workflowId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListWorkflowInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of workflow instances by page. You can also specify filter conditions to query workflow instances.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListWorkflowInstancesRequest
 * @return ListWorkflowInstancesResponse
 */
async function listWorkflowInstances(request: ListWorkflowInstancesRequest): ListWorkflowInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWorkflowInstancesWithOptions(request, runtime);
}

model ListWorkflowsRequest {
  envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
  ids?: [ long ](name='Ids', description='The IDs of the workflows. You can query multiple workflows at a time by workflow ID.'),
  name?: string(name='Name', description='The name of the workflow. Fuzzy match is supported.', example='Workflow1'),
  owner?: string(name='Owner', description='The account ID of the workflow owner.', example='1000'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='100'),
  sortBy?: string(name='SortBy', description='The field used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:

*   ModifyTime (Desc/Asc)
*   CreateTime (Desc/Asc)
*   Id (Desc/Asc)

Default value: Id Desc.', example='Id Desc'),
  triggerType?: string(name='TriggerType', description='The trigger type. Valid values:

*   Scheduler
*   Manual', example='Scheduler'),
}

model ListWorkflowsShrinkRequest {
  envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
  idsShrink?: string(name='Ids', description='The IDs of the workflows. You can query multiple workflows at a time by workflow ID.'),
  name?: string(name='Name', description='The name of the workflow. Fuzzy match is supported.', example='Workflow1'),
  owner?: string(name='Owner', description='The account ID of the workflow owner.', example='1000'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='100'),
  sortBy?: string(name='SortBy', description='The field used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:

*   ModifyTime (Desc/Asc)
*   CreateTime (Desc/Asc)
*   Id (Desc/Asc)

Default value: Id Desc.', example='Id Desc'),
  triggerType?: string(name='TriggerType', description='The trigger type. Valid values:

*   Scheduler
*   Manual', example='Scheduler'),
}

model ListWorkflowsResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
    workflows?: [ 
      {
        clientUniqueCode?: string(name='ClientUniqueCode', description='The unique code of the client. This parameter is used to create a workflow asynchronously and implement the idempotence of the workflow. If you do not specify this parameter when you create the workflow, the system automatically generates a unique code. The unique code is uniquely associated with the workflow ID. If you specify this parameter when you update or delete the workflow, the value of this parameter must be the unique code that is used to create the workflow.', example='Workflow_0bc5213917368545132902xxxxxxxx'),
        createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
        createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
        description?: string(name='Description', description='The description.', example='test'),
        envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod
*   Dev', example='Prod'),
        id?: long(name='Id', description='The workflow ID.', example='1234'),
        modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
        name?: string(name='Name', description='The name.', example='Workflow1'),
        owner?: string(name='Owner', description='The account ID of the owner.', example='1000'),
        parameters?: string(name='Parameters', description='The parameters.', example='para1=$bizdate para2=$[yyyymmdd]'),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
        tags?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='Tags'),
        trigger?: {
          cron?: string(name='Cron', description='The CRON expression. This parameter takes effect only if the Type parameter is set to Scheduler.', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', description='The end time of the time range during which the workflow is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='9999-01-01 00:00:00'),
          recurrence?: string(name='Recurrence', description='The running mode of the workflow after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler. Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
          startTime?: string(name='StartTime', description='The start time of the time range during which the workflow is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='1970-01-01 00:00:00'),
          type?: string(name='Type', description='The trigger type. Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
        }(name='Trigger', description='The trigger method.'),
      }
    ](name='Workflows', description='The workflows.'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListWorkflowsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkflowsResponseBody(name='body'),
}

/**
 * @summary Queries a list of workflows by page. You can also specify filter conditions to query workflows.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq ListWorkflowsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWorkflowsResponse
 */
async function listWorkflowsWithOptions(tmpReq: ListWorkflowsRequest, runtime: Util.RuntimeOptions): ListWorkflowsResponse {
  Util.validateModel(tmpReq);
  var request = new ListWorkflowsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.sortBy)) {
    body['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.triggerType)) {
    body['TriggerType'] = request.triggerType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListWorkflows',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of workflows by page. You can also specify filter conditions to query workflows.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListWorkflowsRequest
 * @return ListWorkflowsResponse
 */
async function listWorkflows(request: ListWorkflowsRequest): ListWorkflowsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWorkflowsWithOptions(request, runtime);
}

model MoveFunctionRequest {
  id?: long(name='Id', description='The ID of the UDF.

This parameter is required.', example='543217824470354XXXX'),
  path?: string(name='Path', description='The path to which you want to move the UDF. You do not need to specify a UDF name in the path.

For example, if you want to move the test UDF to root/demo/test, you must set this parameter to root/demo.

This parameter is required.', example='root/demo'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID.

This parameter indicates the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='12345'),
}

model MoveFunctionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='48C0E2F0-52BA-5888-BDFA-28F1B9AFXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model MoveFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveFunctionResponseBody(name='body'),
}

/**
 * @summary Moves a user-defined function (UDF) to a path in DataStudio.
 *
 * @param request MoveFunctionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MoveFunctionResponse
 */
async function moveFunctionWithOptions(request: MoveFunctionRequest, runtime: Util.RuntimeOptions): MoveFunctionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.path)) {
    body['Path'] = request.path;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MoveFunction',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Moves a user-defined function (UDF) to a path in DataStudio.
 *
 * @param request MoveFunctionRequest
 * @return MoveFunctionResponse
 */
async function moveFunction(request: MoveFunctionRequest): MoveFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveFunctionWithOptions(request, runtime);
}

model MoveNodeRequest {
  id?: long(name='Id', description='The ID of the node.

This parameter is required.', example='652567824470354XXXX'),
  path?: string(name='Path', description='The path to which you want to move the node. You do not need to specify a node name in the path.

For example, if you want to move the test node to root/demo/test, you must set this parameter to root/demo.

This parameter is required.', example='root/demo'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You can use this parameter to specify the DataWorks workspace on which you want to perform the API operation.

This parameter is required.', example='10000'),
}

model MoveNodeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C99E2BE6-9DEA-5C2E-8F51-1DDCFEADXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model MoveNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveNodeResponseBody(name='body'),
}

/**
 * @summary Moves a node to a path in DataStudio.
 *
 * @param request MoveNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MoveNodeResponse
 */
async function moveNodeWithOptions(request: MoveNodeRequest, runtime: Util.RuntimeOptions): MoveNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.path)) {
    body['Path'] = request.path;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MoveNode',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Moves a node to a path in DataStudio.
 *
 * @param request MoveNodeRequest
 * @return MoveNodeResponse
 */
async function moveNode(request: MoveNodeRequest): MoveNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveNodeWithOptions(request, runtime);
}

model MoveResourceRequest {
  id?: long(name='Id', description='The ID of the file resource.

This parameter is required.', example='652567824470354XXXX'),
  path?: string(name='Path', description='The path to which you want to move the file resource. You do not need to specify a file resource name in the path.

For example, if you want to move the test file resource to root/demo/test, you must set this parameter to root/demo.

This parameter is required.', example='root/demo'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID.

You can use this parameter to specify the DataWorks workspace on which you want to perform the API operation.

This parameter is required.', example='10000'),
}

model MoveResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F332BED4-DD73-5972-A9C2-642BA6CFXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model MoveResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveResourceResponseBody(name='body'),
}

/**
 * @summary Moves a file resource to a path in DataStudio.
 *
 * @param request MoveResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MoveResourceResponse
 */
async function moveResourceWithOptions(request: MoveResourceRequest, runtime: Util.RuntimeOptions): MoveResourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.path)) {
    body['Path'] = request.path;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MoveResource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Moves a file resource to a path in DataStudio.
 *
 * @param request MoveResourceRequest
 * @return MoveResourceResponse
 */
async function moveResource(request: MoveResourceRequest): MoveResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveResourceWithOptions(request, runtime);
}

model MoveWorkflowDefinitionRequest {
  id?: long(name='Id', description='The ID of the workflow.

This parameter is required.', example='543217824470354XXXX'),
  path?: string(name='Path', description='The path to which you want to move the workflow. You do not need to specify a workflow name in the path.

For example, if you want to move the test workflow to root/demo/test, you must set this parameter to root/demo.

This parameter is required.', example='root/demo'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID. This parameter indicates the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10001'),
}

model MoveWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='05ADAF4F-7709-5FB1-B606-3513483FXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model MoveWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary Moves a workflow to a path in DataStudio.
 *
 * @param request MoveWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MoveWorkflowDefinitionResponse
 */
async function moveWorkflowDefinitionWithOptions(request: MoveWorkflowDefinitionRequest, runtime: Util.RuntimeOptions): MoveWorkflowDefinitionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.path)) {
    body['Path'] = request.path;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MoveWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Moves a workflow to a path in DataStudio.
 *
 * @param request MoveWorkflowDefinitionRequest
 * @return MoveWorkflowDefinitionResponse
 */
async function moveWorkflowDefinition(request: MoveWorkflowDefinitionRequest): MoveWorkflowDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveWorkflowDefinitionWithOptions(request, runtime);
}

model RemoveEntityFromMetaCollectionRequest {
  id?: string(name='Id', description='The entity ID. Currently, entities can only be tables. You can call the ListTables operation to query the ID.', example='dlf-table:123456789:test_catalog:test_database::test_table'),
  metaCollectionId?: string(name='MetaCollectionId', description='The collection ID. You can call the ListMetaCollections operation to query the ID.', example='category.123'),
}

model RemoveEntityFromMetaCollectionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='6D6CD444-DFA0-5180-9763-4A8730F2B382'),
}

model RemoveEntityFromMetaCollectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveEntityFromMetaCollectionResponseBody(name='body'),
}

/**
 * @summary 从集合中移除实体对象
 *
 * @param request RemoveEntityFromMetaCollectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveEntityFromMetaCollectionResponse
 */
async function removeEntityFromMetaCollectionWithOptions(request: RemoveEntityFromMetaCollectionRequest, runtime: Util.RuntimeOptions): RemoveEntityFromMetaCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.metaCollectionId)) {
    query['MetaCollectionId'] = request.metaCollectionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveEntityFromMetaCollection',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 从集合中移除实体对象
 *
 * @param request RemoveEntityFromMetaCollectionRequest
 * @return RemoveEntityFromMetaCollectionResponse
 */
async function removeEntityFromMetaCollection(request: RemoveEntityFromMetaCollectionRequest): RemoveEntityFromMetaCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeEntityFromMetaCollectionWithOptions(request, runtime);
}

model RemoveTaskInstanceDependenciesRequest {
  comment?: string(name='Comment', description='The remarks.', example='this is a comment'),
  id?: long(name='Id', description='The instance ID.

This parameter is required.', example='1234'),
  upstreamTaskInstanceIds?: [ long ](name='UpstreamTaskInstanceIds', description='The IDs of ancestor instances of the instance'),
}

model RemoveTaskInstanceDependenciesShrinkRequest {
  comment?: string(name='Comment', description='The remarks.', example='this is a comment'),
  id?: long(name='Id', description='The instance ID.

This parameter is required.', example='1234'),
  upstreamTaskInstanceIdsShrink?: string(name='UpstreamTaskInstanceIds', description='The IDs of ancestor instances of the instance'),
}

model RemoveTaskInstanceDependenciesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model RemoveTaskInstanceDependenciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveTaskInstanceDependenciesResponseBody(name='body'),
}

/**
 * @summary Removes multiple upstream dependencies of an instance at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq RemoveTaskInstanceDependenciesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveTaskInstanceDependenciesResponse
 */
async function removeTaskInstanceDependenciesWithOptions(tmpReq: RemoveTaskInstanceDependenciesRequest, runtime: Util.RuntimeOptions): RemoveTaskInstanceDependenciesResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveTaskInstanceDependenciesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.upstreamTaskInstanceIds)) {
    request.upstreamTaskInstanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.upstreamTaskInstanceIds, 'UpstreamTaskInstanceIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.upstreamTaskInstanceIdsShrink)) {
    body['UpstreamTaskInstanceIds'] = request.upstreamTaskInstanceIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveTaskInstanceDependencies',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Removes multiple upstream dependencies of an instance at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request RemoveTaskInstanceDependenciesRequest
 * @return RemoveTaskInstanceDependenciesResponse
 */
async function removeTaskInstanceDependencies(request: RemoveTaskInstanceDependenciesRequest): RemoveTaskInstanceDependenciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTaskInstanceDependenciesWithOptions(request, runtime);
}

model RenameFunctionRequest {
  id?: long(name='Id', description='The ID of the UDF.

This parameter is required.', example='543217824470354XXXX'),
  name?: string(name='Name', description='The new name.

This parameter is required.', example='Rename'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10002'),
}

model RenameFunctionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1ED4C97F-BA2A-57C5-BA7C-8853627EXXXX'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model RenameFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameFunctionResponseBody(name='body'),
}

/**
 * @summary Renames a user-defined function (UDF) in DataStudio.
 *
 * @param request RenameFunctionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RenameFunctionResponse
 */
async function renameFunctionWithOptions(request: RenameFunctionRequest, runtime: Util.RuntimeOptions): RenameFunctionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RenameFunction',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Renames a user-defined function (UDF) in DataStudio.
 *
 * @param request RenameFunctionRequest
 * @return RenameFunctionResponse
 */
async function renameFunction(request: RenameFunctionRequest): RenameFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return renameFunctionWithOptions(request, runtime);
}

model RenameNodeRequest {
  id?: long(name='Id', description='The ID of the node.

This parameter is required.', example='652567824470354XXXX'),
  name?: string(name='Name', description='The new name.

This parameter is required.', example='Rename'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='12345'),
}

model RenameNodeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4CDF7B72-020B-542A-8465-21CFFA81XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model RenameNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameNodeResponseBody(name='body'),
}

/**
 * @summary Renames a node in DataStudio.
 *
 * @param request RenameNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RenameNodeResponse
 */
async function renameNodeWithOptions(request: RenameNodeRequest, runtime: Util.RuntimeOptions): RenameNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RenameNode',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Renames a node in DataStudio.
 *
 * @param request RenameNodeRequest
 * @return RenameNodeResponse
 */
async function renameNode(request: RenameNodeRequest): RenameNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return renameNodeWithOptions(request, runtime);
}

model RenameResourceRequest {
  id?: long(name='Id', description='The ID of the file resource.

This parameter is required.', example='543217824470354XXXX'),
  name?: string(name='Name', description='The new name.

This parameter is required.', example='Rename'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model RenameResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4CDF7B72-020B-542A-8465-21CFFA8XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model RenameResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameResourceResponseBody(name='body'),
}

/**
 * @summary Renames a file resource in DataStudio.
 *
 * @param request RenameResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RenameResourceResponse
 */
async function renameResourceWithOptions(request: RenameResourceRequest, runtime: Util.RuntimeOptions): RenameResourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RenameResource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Renames a file resource in DataStudio.
 *
 * @param request RenameResourceRequest
 * @return RenameResourceResponse
 */
async function renameResource(request: RenameResourceRequest): RenameResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renameResourceWithOptions(request, runtime);
}

model RenameWorkflowDefinitionRequest {
  id?: long(name='Id', description='The ID of the workflow.

This parameter is required.', example='463497880880954XXXX'),
  name?: string(name='Name', description='The new name.

This parameter is required.', example='Rename'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model RenameWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can troubleshoot issues based on the ID.', example='975BD43D-C421-595C-A29C-565A8AD5XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model RenameWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary Renames a workflow in DataStudio.
 *
 * @param request RenameWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RenameWorkflowDefinitionResponse
 */
async function renameWorkflowDefinitionWithOptions(request: RenameWorkflowDefinitionRequest, runtime: Util.RuntimeOptions): RenameWorkflowDefinitionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenameWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Renames a workflow in DataStudio.
 *
 * @param request RenameWorkflowDefinitionRequest
 * @return RenameWorkflowDefinitionResponse
 */
async function renameWorkflowDefinition(request: RenameWorkflowDefinitionRequest): RenameWorkflowDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return renameWorkflowDefinitionWithOptions(request, runtime);
}

model RerunTaskInstancesRequest {
  comment?: string(name='Comment', description='Remarks.', example='this is a comment'),
  ids?: [ long ](name='Ids', description='The ID list of the task instance.'),
}

model RerunTaskInstancesShrinkRequest {
  comment?: string(name='Comment', description='Remarks.', example='this is a comment'),
  idsShrink?: string(name='Ids', description='The ID list of the task instance.'),
}

model RerunTaskInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo', description='The result of the batch operation, which is in the MAP structure. The instance ID serves as a key, and the result serves as a value.'),
}

model RerunTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RerunTaskInstancesResponseBody(name='body'),
}

/**
 * @summary Reruns multiple instances at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq RerunTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RerunTaskInstancesResponse
 */
async function rerunTaskInstancesWithOptions(tmpReq: RerunTaskInstancesRequest, runtime: Util.RuntimeOptions): RerunTaskInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new RerunTaskInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RerunTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Reruns multiple instances at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request RerunTaskInstancesRequest
 * @return RerunTaskInstancesResponse
 */
async function rerunTaskInstances(request: RerunTaskInstancesRequest): RerunTaskInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return rerunTaskInstancesWithOptions(request, runtime);
}

model RerunWorkflowInstancesRequest {
  bizdate?: long(name='Bizdate', description='The business date used for matching manual workflow instances.', example='1710239005403'),
  endTriggerTime?: long(name='EndTriggerTime', description='The end trigger time of the manual workflow instance used for matching. This parameter must be used together with the StartTriggerTime.', example='1710239005403'),
  envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

Prod Dev', example='Prod'),
  filter?: {
    rerunDownstreamEnabled?: boolean(name='RerunDownstreamEnabled', description='Specifies whether to rerun the matched instances and all downstream instances.', example='false'),
    taskIds?: [ long ](name='TaskIds', description='The internal task IDs used for matching manual workflow instances.'),
    taskInstanceStatuses?: [ string ](name='TaskInstanceStatuses', description='The statuses of internal tasks used for matching manual workflow instances.'),
    taskName?: string(name='TaskName', description='The internal task name used for matching the manual workflow instance.', example='test'),
    taskTypes?: [ string ](name='TaskTypes', description='Match internal tasks within the manual workflow by type.'),
  }(name='Filter', description='The match conditions for internal instances of manual workflow instances.'),
  ids?: [ long ](name='Ids', description='The instance IDs used for matching manual workflow instances.'),
  name?: string(name='Name', description='The manual workflow name, used for fuzzy matching.', example='test'),
  projectId?: long(name='ProjectId', description='The project ID.

This parameter is required.', example='123'),
  startTriggerTime?: long(name='StartTriggerTime', description='The start trigger time (creation time) of the manual workflow instance used for matching. This parameter must be used together with EndTriggerTime.', example='1710239005403'),
  status?: string(name='Status', description='The status used for matching manual workflow instances.

Valid values:

*   Success
*   Failure', example='Failure'),
  type?: string(name='Type', description='The type of the workflow instance. Valid values:

ManualWorkflow.

This parameter is required.', example='ManualWorkflow'),
  workflowId?: long(name='WorkflowId', description='The workflow ID.

This parameter is required.', example='123'),
}

model RerunWorkflowInstancesShrinkRequest {
  bizdate?: long(name='Bizdate', description='The business date used for matching manual workflow instances.', example='1710239005403'),
  endTriggerTime?: long(name='EndTriggerTime', description='The end trigger time of the manual workflow instance used for matching. This parameter must be used together with the StartTriggerTime.', example='1710239005403'),
  envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

Prod Dev', example='Prod'),
  filterShrink?: string(name='Filter', description='The match conditions for internal instances of manual workflow instances.'),
  idsShrink?: string(name='Ids', description='The instance IDs used for matching manual workflow instances.'),
  name?: string(name='Name', description='The manual workflow name, used for fuzzy matching.', example='test'),
  projectId?: long(name='ProjectId', description='The project ID.

This parameter is required.', example='123'),
  startTriggerTime?: long(name='StartTriggerTime', description='The start trigger time (creation time) of the manual workflow instance used for matching. This parameter must be used together with EndTriggerTime.', example='1710239005403'),
  status?: string(name='Status', description='The status used for matching manual workflow instances.

Valid values:

*   Success
*   Failure', example='Failure'),
  type?: string(name='Type', description='The type of the workflow instance. Valid values:

ManualWorkflow.

This parameter is required.', example='ManualWorkflow'),
  workflowId?: long(name='WorkflowId', description='The workflow ID.

This parameter is required.', example='123'),
}

model RerunWorkflowInstancesResponseBody = {
  operationId?: string(name='OperationId', description='The operation ID. You can use this value to query the creation result via the GetRerunWorkflowInstancesResult operation.', example='e15ad21c-b0e9-4792-8f55-b037xxxxxxxx'),
  requestId?: string(name='RequestId', description='The request ID. Used for troubleshooting and log tracking.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model RerunWorkflowInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RerunWorkflowInstancesResponseBody(name='body'),
}

/**
 * @summary Reruns workflow instances.
 *
 * @param tmpReq RerunWorkflowInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RerunWorkflowInstancesResponse
 */
async function rerunWorkflowInstancesWithOptions(tmpReq: RerunWorkflowInstancesRequest, runtime: Util.RuntimeOptions): RerunWorkflowInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new RerunWorkflowInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.filter)) {
    request.filterShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filter, 'Filter', 'json');
  }
  if (!Util.isUnset(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!Util.isUnset(request.endTriggerTime)) {
    body['EndTriggerTime'] = request.endTriggerTime;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.filterShrink)) {
    body['Filter'] = request.filterShrink;
  }
  if (!Util.isUnset(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.startTriggerTime)) {
    body['StartTriggerTime'] = request.startTriggerTime;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  if (!Util.isUnset(request.workflowId)) {
    body['WorkflowId'] = request.workflowId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RerunWorkflowInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Reruns workflow instances.
 *
 * @param request RerunWorkflowInstancesRequest
 * @return RerunWorkflowInstancesResponse
 */
async function rerunWorkflowInstances(request: RerunWorkflowInstancesRequest): RerunWorkflowInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return rerunWorkflowInstancesWithOptions(request, runtime);
}

model ResumeTaskInstancesRequest {
  comment?: string(name='Comment', description='Remarks.', example='this is a comment'),
  ids?: [ long ](name='Ids', description='The ID list of the task instance.'),
}

model ResumeTaskInstancesShrinkRequest {
  comment?: string(name='Comment', description='Remarks.', example='this is a comment'),
  idsShrink?: string(name='Ids', description='The ID list of the task instance.'),
}

model ResumeTaskInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo', description='The result of the batch operation, which is in the MAP structure. The instance ID serves as a key, and the result serves as a value.'),
}

model ResumeTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResumeTaskInstancesResponseBody(name='body'),
}

/**
 * @summary Resumes multiple suspended instances at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq ResumeTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResumeTaskInstancesResponse
 */
async function resumeTaskInstancesWithOptions(tmpReq: ResumeTaskInstancesRequest, runtime: Util.RuntimeOptions): ResumeTaskInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new ResumeTaskInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ResumeTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Resumes multiple suspended instances at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ResumeTaskInstancesRequest
 * @return ResumeTaskInstancesResponse
 */
async function resumeTaskInstances(request: ResumeTaskInstancesRequest): ResumeTaskInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeTaskInstancesWithOptions(request, runtime);
}

model RevokeMemberProjectRolesRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to query the ID.

This parameter is required.', example='105149'),
  roleCodes?: [ string ](name='RoleCodes', description='The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.

You must configure this parameter to specify the roles that you want to revoke from the member in the workspace.

This parameter is required.'),
  userId?: string(name='UserId', description='The ID of the account used by the member in the workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the ID of the account used by the member in the workspace.

This parameter is required.', example='123422344899'),
}

model RevokeMemberProjectRolesShrinkRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to query the ID.

This parameter is required.', example='105149'),
  roleCodesShrink?: string(name='RoleCodes', description='The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.

You must configure this parameter to specify the roles that you want to revoke from the member in the workspace.

This parameter is required.'),
  userId?: string(name='UserId', description='The ID of the account used by the member in the workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the ID of the account used by the member in the workspace.

This parameter is required.', example='123422344899'),
}

model RevokeMemberProjectRolesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='676271D6-53B4-57BE-89FA-72F7AE1418DF'),
}

model RevokeMemberProjectRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeMemberProjectRolesResponseBody(name='body'),
}

/**
 * @summary Revokes roles that are assigned to a member in a workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq RevokeMemberProjectRolesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RevokeMemberProjectRolesResponse
 */
async function revokeMemberProjectRolesWithOptions(tmpReq: RevokeMemberProjectRolesRequest, runtime: Util.RuntimeOptions): RevokeMemberProjectRolesResponse {
  Util.validateModel(tmpReq);
  var request = new RevokeMemberProjectRolesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.roleCodes)) {
    request.roleCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roleCodes, 'RoleCodes', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.roleCodesShrink)) {
    body['RoleCodes'] = request.roleCodesShrink;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RevokeMemberProjectRoles',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Revokes roles that are assigned to a member in a workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request RevokeMemberProjectRolesRequest
 * @return RevokeMemberProjectRolesResponse
 */
async function revokeMemberProjectRoles(request: RevokeMemberProjectRolesRequest): RevokeMemberProjectRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeMemberProjectRolesWithOptions(request, runtime);
}

model SetSuccessTaskInstancesRequest {
  comment?: string(name='Comment', description='Remarks.', example='this is a comment'),
  ids?: [ long ](name='Ids', description='The ID list of the task instance.'),
}

model SetSuccessTaskInstancesShrinkRequest {
  comment?: string(name='Comment', description='Remarks.', example='this is a comment'),
  idsShrink?: string(name='Ids', description='The ID list of the task instance.'),
}

model SetSuccessTaskInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo', description='The result of the batch operation, which is in the MAP structure. The instance ID serves as a key, and the result serves as a value.'),
}

model SetSuccessTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetSuccessTaskInstancesResponseBody(name='body'),
}

/**
 * @summary Sets the statuses of multiple instances to successful at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq SetSuccessTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetSuccessTaskInstancesResponse
 */
async function setSuccessTaskInstancesWithOptions(tmpReq: SetSuccessTaskInstancesRequest, runtime: Util.RuntimeOptions): SetSuccessTaskInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new SetSuccessTaskInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetSuccessTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Sets the statuses of multiple instances to successful at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request SetSuccessTaskInstancesRequest
 * @return SetSuccessTaskInstancesResponse
 */
async function setSuccessTaskInstances(request: SetSuccessTaskInstancesRequest): SetSuccessTaskInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setSuccessTaskInstancesWithOptions(request, runtime);
}

model StartDIJobRequest {
  DIJobId?: long(name='DIJobId', description='This parameter is deprecated. Use the Id parameter instead.', example='10000', deprecated=true),
  forceToRerun?: boolean(name='ForceToRerun', description='Specifies whether to forcefully rerun all synchronization steps. If you do not configure this parameter, the system does not perform the forcible rerun operation.

*   If the system does not perform the forcible rerun operation, only the steps that are not run start to run.
*   If the system performs the forcible rerun operation, all steps start to rerun.', example='false'),
  id?: long(name='Id', description='The ID of the synchronization task.', example='10000'),
  realtimeStartSettings?: {
    failoverSettings?: {
      interval?: long(name='Interval', description='This parameter is deprecated. Use advanced parameters for failover settings when you create a task.', example='10', deprecated=true),
      upperLimit?: long(name='UpperLimit', description='This parameter is deprecated. Use advanced parameters for failover settings when you create a task.', example='30', deprecated=true),
    }(name='FailoverSettings', description='This parameter is deprecated. Use advanced parameters for failover settings when you create a task.', deprecated=true),
    startTime?: long(name='StartTime', description='The start time.', example='1671516776'),
  }(name='RealtimeStartSettings', description='The settings for starting real-time synchronization.

    {
      "StartTime":1663765058
    }'),
}

model StartDIJobShrinkRequest {
  DIJobId?: long(name='DIJobId', description='This parameter is deprecated. Use the Id parameter instead.', example='10000', deprecated=true),
  forceToRerun?: boolean(name='ForceToRerun', description='Specifies whether to forcefully rerun all synchronization steps. If you do not configure this parameter, the system does not perform the forcible rerun operation.

*   If the system does not perform the forcible rerun operation, only the steps that are not run start to run.
*   If the system performs the forcible rerun operation, all steps start to rerun.', example='false'),
  id?: long(name='Id', description='The ID of the synchronization task.', example='10000'),
  realtimeStartSettingsShrink?: string(name='RealtimeStartSettings', description='The settings for starting real-time synchronization.

    {
      "StartTime":1663765058
    }'),
}

model StartDIJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='999431B2-6013-577F-B684-36F7433C753B'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model StartDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartDIJobResponseBody(name='body'),
}

/**
 * @summary Starts a new-version synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq StartDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartDIJobResponse
 */
async function startDIJobWithOptions(tmpReq: StartDIJobRequest, runtime: Util.RuntimeOptions): StartDIJobResponse {
  Util.validateModel(tmpReq);
  var request = new StartDIJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.realtimeStartSettings)) {
    request.realtimeStartSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.realtimeStartSettings, 'RealtimeStartSettings', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDIJob',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Starts a new-version synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request StartDIJobRequest
 * @return StartDIJobResponse
 */
async function startDIJob(request: StartDIJobRequest): StartDIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDIJobWithOptions(request, runtime);
}

model StartWorkflowInstancesRequest {
  comment?: string(name='Comment', description='The remarks.', example='this is a comment'),
  ids?: [ long ](name='Ids', description='The IDs of workflow instances.

This parameter is required.'),
}

model StartWorkflowInstancesShrinkRequest {
  comment?: string(name='Comment', description='The remarks.', example='this is a comment'),
  idsShrink?: string(name='Ids', description='The IDs of workflow instances.

This parameter is required.'),
}

model StartWorkflowInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17****'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo', description='The result of the batch operation, which is in the MAP structure. The workflow instance ID serves as a key, and the result serves as a value.'),
}

model StartWorkflowInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartWorkflowInstancesResponseBody(name='body'),
}

/**
 * @summary Starts multiple workflow instances at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq StartWorkflowInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartWorkflowInstancesResponse
 */
async function startWorkflowInstancesWithOptions(tmpReq: StartWorkflowInstancesRequest, runtime: Util.RuntimeOptions): StartWorkflowInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new StartWorkflowInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartWorkflowInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Starts multiple workflow instances at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request StartWorkflowInstancesRequest
 * @return StartWorkflowInstancesResponse
 */
async function startWorkflowInstances(request: StartWorkflowInstancesRequest): StartWorkflowInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return startWorkflowInstancesWithOptions(request, runtime);
}

model StopDIJobRequest {
  DIJobId?: long(name='DIJobId', description='This parameter is deprecated and is replaced by the Id parameter.', example='11668', deprecated=true),
  id?: long(name='Id', description='The ID of the synchronization task.', example='11668'),
  instanceId?: long(name='InstanceId', description='The instance ID.', example='1234'),
}

model StopDIJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='92F778C7-8F00-53B1-AE1A-B3B17101247D'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model StopDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDIJobResponseBody(name='body'),
}

/**
 * @summary Stops a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request StopDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopDIJobResponse
 */
async function stopDIJobWithOptions(request: StopDIJobRequest, runtime: Util.RuntimeOptions): StopDIJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDIJob',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Stops a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request StopDIJobRequest
 * @return StopDIJobResponse
 */
async function stopDIJob(request: StopDIJobRequest): StopDIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDIJobWithOptions(request, runtime);
}

model StopTaskInstancesRequest {
  comment?: string(name='Comment', description='Remarks.', example='this is a comment'),
  ids?: [ long ](name='Ids', description='The ID list of the task instance.'),
}

model StopTaskInstancesShrinkRequest {
  comment?: string(name='Comment', description='Remarks.', example='this is a comment'),
  idsShrink?: string(name='Ids', description='The ID list of the task instance.'),
}

model StopTaskInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo', description='The result of the batch operation, which is in the MAP structure. The instance ID serves as a key, and the result serves as a value.'),
}

model StopTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopTaskInstancesResponseBody(name='body'),
}

/**
 * @summary Stops multiple instances at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq StopTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopTaskInstancesResponse
 */
async function stopTaskInstancesWithOptions(tmpReq: StopTaskInstancesRequest, runtime: Util.RuntimeOptions): StopTaskInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new StopTaskInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StopTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Stops multiple instances at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request StopTaskInstancesRequest
 * @return StopTaskInstancesResponse
 */
async function stopTaskInstances(request: StopTaskInstancesRequest): StopTaskInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopTaskInstancesWithOptions(request, runtime);
}

model StopWorkflowInstancesRequest {
  comment?: string(name='Comment', description='The remarks.', example='this is a comment'),
  ids?: [ long ](name='Ids', description='The workflow instance IDs.

This parameter is required.'),
}

model StopWorkflowInstancesShrinkRequest {
  comment?: string(name='Comment', description='The remarks.', example='this is a comment'),
  idsShrink?: string(name='Ids', description='The workflow instance IDs.

This parameter is required.'),
}

model StopWorkflowInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17****'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo', description='The result of the batch operation, which is in the MAP structure. The workflow instance ID serves as a key, and the result serves as a value.'),
}

model StopWorkflowInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopWorkflowInstancesResponseBody(name='body'),
}

/**
 * @summary Stops multiple workflow instances at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq StopWorkflowInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopWorkflowInstancesResponse
 */
async function stopWorkflowInstancesWithOptions(tmpReq: StopWorkflowInstancesRequest, runtime: Util.RuntimeOptions): StopWorkflowInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new StopWorkflowInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StopWorkflowInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Stops multiple workflow instances at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request StopWorkflowInstancesRequest
 * @return StopWorkflowInstancesResponse
 */
async function stopWorkflowInstances(request: StopWorkflowInstancesRequest): StopWorkflowInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopWorkflowInstancesWithOptions(request, runtime);
}

model SubmitFileRequest {
  comment?: string(name='Comment', example='Submit a task for the first time'),
  fileId?: long(name='FileId', description='This parameter is required.', example='1000000'),
  projectId?: long(name='ProjectId', example='100001'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
  skipAllDeployFileExtensions?: boolean(name='SkipAllDeployFileExtensions', example='false'),
}

model SubmitFileResponseBody = {
  data?: long(name='Data', example='3000001'),
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model SubmitFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitFileResponseBody(name='body'),
}

/**
 * @param request SubmitFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitFileResponse
 */
async function submitFileWithOptions(request: SubmitFileRequest, runtime: Util.RuntimeOptions): SubmitFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.skipAllDeployFileExtensions)) {
    body['SkipAllDeployFileExtensions'] = request.skipAllDeployFileExtensions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitFile',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request SubmitFileRequest
 * @return SubmitFileResponse
 */
async function submitFile(request: SubmitFileRequest): SubmitFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitFileWithOptions(request, runtime);
}

model SuspendTaskInstancesRequest {
  comment?: string(name='Comment', description='Remarks.', example='this is a comment'),
  ids?: [ long ](name='Ids', description='The ID list of the task instance.'),
}

model SuspendTaskInstancesShrinkRequest {
  comment?: string(name='Comment', description='Remarks.', example='this is a comment'),
  idsShrink?: string(name='Ids', description='The ID list of the task instance.'),
}

model SuspendTaskInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo', description='The result of the batch operation, which is in the MAP structure. The instance ID serves as a key, and the result serves as a value.'),
}

model SuspendTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SuspendTaskInstancesResponseBody(name='body'),
}

/**
 * @summary Suspends multiple instances at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq SuspendTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SuspendTaskInstancesResponse
 */
async function suspendTaskInstancesWithOptions(tmpReq: SuspendTaskInstancesRequest, runtime: Util.RuntimeOptions): SuspendTaskInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new SuspendTaskInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SuspendTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Suspends multiple instances at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request SuspendTaskInstancesRequest
 * @return SuspendTaskInstancesResponse
 */
async function suspendTaskInstances(request: SuspendTaskInstancesRequest): SuspendTaskInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return suspendTaskInstancesWithOptions(request, runtime);
}

model TagDataAssetsRequest {
  autoTraceEnabled?: boolean(name='AutoTraceEnabled', description='Specifies whether to enable lineage-based automatic backtracking.', example='false'),
  dataAssetIds?: [ string ](name='DataAssetIds', description='The data asset IDs.

This parameter is required.'),
  dataAssetType?: string(name='DataAssetType', description='The type of the data asset. Valid values:

*   ACS::DataWorks::Table
*   ACS::DataWorks::Task

This parameter is required.', example='ACS::DataWorks::Task'),
  envType?: string(name='EnvType', description='The environment of the workspace to which the data asset belongs. Valid values:

*   Dev: development environment
*   Prod: production environment', example='Prod'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='10000'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.

This parameter is required.', example='key'),
      value?: string(name='Value', description='The tag value.', example='value'),
    }
  ](name='Tags', description='The tags that you want to add to data assets.

This parameter is required.'),
}

model TagDataAssetsShrinkRequest {
  autoTraceEnabled?: boolean(name='AutoTraceEnabled', description='Specifies whether to enable lineage-based automatic backtracking.', example='false'),
  dataAssetIdsShrink?: string(name='DataAssetIds', description='The data asset IDs.

This parameter is required.'),
  dataAssetType?: string(name='DataAssetType', description='The type of the data asset. Valid values:

*   ACS::DataWorks::Table
*   ACS::DataWorks::Task

This parameter is required.', example='ACS::DataWorks::Task'),
  envType?: string(name='EnvType', description='The environment of the workspace to which the data asset belongs. Valid values:

*   Dev: development environment
*   Prod: production environment', example='Prod'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='10000'),
  tagsShrink?: string(name='Tags', description='The tags that you want to add to data assets.

This parameter is required.'),
}

model TagDataAssetsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model TagDataAssetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagDataAssetsResponseBody(name='body'),
}

/**
 * @summary Adds tags to data assets.
 *
 * @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
 *
 * @param tmpReq TagDataAssetsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TagDataAssetsResponse
 */
async function tagDataAssetsWithOptions(tmpReq: TagDataAssetsRequest, runtime: Util.RuntimeOptions): TagDataAssetsResponse {
  Util.validateModel(tmpReq);
  var request = new TagDataAssetsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dataAssetIds)) {
    request.dataAssetIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataAssetIds, 'DataAssetIds', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.autoTraceEnabled)) {
    query['AutoTraceEnabled'] = request.autoTraceEnabled;
  }
  if (!Util.isUnset(request.dataAssetIdsShrink)) {
    query['DataAssetIds'] = request.dataAssetIdsShrink;
  }
  if (!Util.isUnset(request.dataAssetType)) {
    query['DataAssetType'] = request.dataAssetType;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagDataAssets',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds tags to data assets.
 *
 * @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
 *
 * @param request TagDataAssetsRequest
 * @return TagDataAssetsResponse
 */
async function tagDataAssets(request: TagDataAssetsRequest): TagDataAssetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagDataAssetsWithOptions(request, runtime);
}

model TestDataSourceConnectivityRequest {
  dataSourceId?: long(name='DataSourceId', description='The ID of the data source for which you want to test the network connectivity.

This parameter is required.', example='144544'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='10001'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
}

model TestDataSourceConnectivityResponseBody = {
  connectivity?: {
    connectMessage?: string(name='ConnectMessage', description='The error message returned if the connectivity test fails. No such a message is returned if the connectivity test is successful.'),
    connectState?: string(name='ConnectState', description='The result of the connectivity test. Valid values: Connectable: The network can be connected. ConfigError: The network can be connected, but the configurations are incorrect. Unreachable: The network cannot be connected. Unsupport: An error is reported due to other causes. For example, the desired resource group is being initialized.', example='Connectable'),
    detailLogs?: [ 
      {
        code?: string(name='Code', description='The code of the test item.', example='validate_input_parameters'),
        endTime?: long(name='EndTime', description='The end time of a step.', example='1730217604002'),
        message?: string(name='Message', description='The name of the step.'),
        startTime?: long(name='StartTime', description='The start time of a step.', example='1730217600001'),
      }
    ](name='DetailLogs', description='The detailed logs of each step in the connectivity test.'),
  }(name='Connectivity', description='The details of the connectivity test.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4CDF7B72-020B-542A-8465-21CFFA81****'),
}

model TestDataSourceConnectivityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TestDataSourceConnectivityResponseBody(name='body'),
}

/**
 * @summary Tests the connectivity between a data source and a resource group.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  Your account must be assigned one of the following roles of the desired workspace: Tenant Owner, Workspace Administrator, Deploy, Develop, Workspace Owner, and O\\&M
 *
 * @param request TestDataSourceConnectivityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TestDataSourceConnectivityResponse
 */
async function testDataSourceConnectivityWithOptions(request: TestDataSourceConnectivityRequest, runtime: Util.RuntimeOptions): TestDataSourceConnectivityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TestDataSourceConnectivity',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Tests the connectivity between a data source and a resource group.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  Your account must be assigned one of the following roles of the desired workspace: Tenant Owner, Workspace Administrator, Deploy, Develop, Workspace Owner, and O\\&M
 *
 * @param request TestDataSourceConnectivityRequest
 * @return TestDataSourceConnectivityResponse
 */
async function testDataSourceConnectivity(request: TestDataSourceConnectivityRequest): TestDataSourceConnectivityResponse {
  var runtime = new Util.RuntimeOptions{};
  return testDataSourceConnectivityWithOptions(request, runtime);
}

model TriggerSchedulerTaskInstanceRequest {
  envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
  taskId?: long(name='TaskId', description='The task ID.

This parameter is required.', example='1234'),
  triggerTime?: long(name='TriggerTime', description='The time defined by the HTTP Trigger node. This value is a UNIX timestamp.

This parameter is required.', example='1710239005403'),
}

model TriggerSchedulerTaskInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model TriggerSchedulerTaskInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TriggerSchedulerTaskInstanceResponseBody(name='body'),
}

/**
 * @summary Triggers a task to run by using an HTTP Trigger node at a specified time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request TriggerSchedulerTaskInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TriggerSchedulerTaskInstanceResponse
 */
async function triggerSchedulerTaskInstanceWithOptions(request: TriggerSchedulerTaskInstanceRequest, runtime: Util.RuntimeOptions): TriggerSchedulerTaskInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.triggerTime)) {
    body['TriggerTime'] = request.triggerTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TriggerSchedulerTaskInstance',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Triggers a task to run by using an HTTP Trigger node at a specified time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request TriggerSchedulerTaskInstanceRequest
 * @return TriggerSchedulerTaskInstanceResponse
 */
async function triggerSchedulerTaskInstance(request: TriggerSchedulerTaskInstanceRequest): TriggerSchedulerTaskInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return triggerSchedulerTaskInstanceWithOptions(request, runtime);
}

model UnTagDataAssetsRequest {
  dataAssetIds?: [ string ](name='DataAssetIds', description='The data asset IDs.

This parameter is required.'),
  dataAssetType?: string(name='DataAssetType', description='The type of the data asset. Valid values:

*   ACS::DataWorks::Table
*   ACS::DataWorks::Task

This parameter is required.', example='ACS::DataWorks::Task'),
  envType?: string(name='EnvType', description='The environment of the workspace to which the data asset belongs. Valid values:

*   Dev: development environment
*   Prod: production environment', example='Prod'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='123'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.

This parameter is required.', example='key'),
      value?: string(name='Value', description='The tag value.', example='value'),
    }
  ](name='Tags', description='The tags that you want to remove.

This parameter is required.'),
}

model UnTagDataAssetsShrinkRequest {
  dataAssetIdsShrink?: string(name='DataAssetIds', description='The data asset IDs.

This parameter is required.'),
  dataAssetType?: string(name='DataAssetType', description='The type of the data asset. Valid values:

*   ACS::DataWorks::Table
*   ACS::DataWorks::Task

This parameter is required.', example='ACS::DataWorks::Task'),
  envType?: string(name='EnvType', description='The environment of the workspace to which the data asset belongs. Valid values:

*   Dev: development environment
*   Prod: production environment', example='Prod'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='123'),
  tagsShrink?: string(name='Tags', description='The tags that you want to remove.

This parameter is required.'),
}

model UnTagDataAssetsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='8754EE08-4AA2-5F77-ADD7-754DBBDA9F75'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UnTagDataAssetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnTagDataAssetsResponseBody(name='body'),
}

/**
 * @summary Removes tags from data assets.
 *
 * @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
 *
 * @param tmpReq UnTagDataAssetsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UnTagDataAssetsResponse
 */
async function unTagDataAssetsWithOptions(tmpReq: UnTagDataAssetsRequest, runtime: Util.RuntimeOptions): UnTagDataAssetsResponse {
  Util.validateModel(tmpReq);
  var request = new UnTagDataAssetsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dataAssetIds)) {
    request.dataAssetIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataAssetIds, 'DataAssetIds', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.dataAssetIdsShrink)) {
    query['DataAssetIds'] = request.dataAssetIdsShrink;
  }
  if (!Util.isUnset(request.dataAssetType)) {
    query['DataAssetType'] = request.dataAssetType;
  }
  if (!Util.isUnset(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnTagDataAssets',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Removes tags from data assets.
 *
 * @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
 *
 * @param request UnTagDataAssetsRequest
 * @return UnTagDataAssetsResponse
 */
async function unTagDataAssets(request: UnTagDataAssetsRequest): UnTagDataAssetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return unTagDataAssetsWithOptions(request, runtime);
}

model UpdateAlertRuleRequest {
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the rule.', example='true'),
  id?: long(name='Id', description='The rule ID.', example='105412'),
  name?: string(name='Name', description='The name of the rule.', example='collection_name'),
  notification?: {
    channels?: [ string ](name='Channels', description='The alert notification channels.'),
    intervalInMinutes?: int32(name='IntervalInMinutes', description='The interval at which an alert notification is sent. Unit: minutes. Valid values: [5,10000].', example='30'),
    maximum?: int32(name='Maximum', description='The maximum number of times an alert notification can be sent within a calendar day. Valid values: [1, 10000].', example='3'),
    receivers?: [ 
      {
        extension?: string(name='Extension', description='The additional configuration of the alert recipient. If the ReceiverType parameter is set to DingdingUrl, you can set this parameter to {"atAll":true} to remind all members in a DingTalk group.', example='{"atAll":true}'),
        receiverType?: string(name='ReceiverType', description='The type of the alert recipient. Valid valves:

*   AliUid: Alibaba Cloud account ID.
*   Shift Schedules: the personnel in a shift schedule.
*   TaskOwner: the task owner. The task owner can receive custom alerts and event alerts.
*   Owner: the baseline owner. The baseline owner can receive baseline alerts.
*   WebhookUrl: URL of a custom webhook.
*   DingdingUrl: DingTalk webhook URL.
*   FeishuUrl: Lark webhook URL.
*   WeixinUrl: WeCom webhook URL.', example='TaskOwner'),
        receiverValues?: [ string ](name='ReceiverValues', description='The alert recipients.'),
      }
    ](name='Receivers', description='The alert recipients.'),
    silenceEndTime?: string(name='SilenceEndTime', description='The end time for silence. The time is in the HH:mm:ss format.', example='00:00:00'),
    silenceStartTime?: string(name='SilenceStartTime', description='The start time for silence. The time is in the HH:mm:ss format.', example='00:00:00'),
  }(name='Notification', description='The configuration for the alert notification.'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the owner of the rule.', example='193379****'),
  triggerCondition?: {
    extension?: {
      cycleUnfinished?: {
        cycleAndTime?: [ 
          {
            cycleId?: int32(name='CycleId', description='The ID of the scheduling cycle of the instance. Valid values: [1,288].', example='1'),
            time?: string(name='Time', description='The latest completion time of the instance within the scheduling cycle. The time is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='01:00'),
          }
        ](name='CycleAndTime', description='The configurations of the scheduling cycle and timeout period of the instance.'),
      }(name='CycleUnfinished', description='The configuration for an alert of the CycleUnfinished type.'),
      error?: {
        autoRerunAlertEnabled?: boolean(name='AutoRerunAlertEnabled', description='Specifies whether to trigger an alert if a batch synchronization task is automatically rerun upon a failure.', example='false'),
        streamTaskIds?: [ long ](name='StreamTaskIds', description='The IDs of the real-time computing tasks. This parameter is required when you monitor real-time computing tasks.'),
      }(name='Error', description='The configuration for an alert of the Error type.'),
      instanceErrorCount?: {
        count?: int32(name='Count', description='The maximum number of instances on which an error occurs. Valid values: [1,10000].', example='10'),
      }(name='InstanceErrorCount', description='The configuration for an alert of the InstanceErrorCount type.'),
      instanceErrorPercentage?: {
        percentage?: int32(name='Percentage', description='The maximum percentage of instances on which an error occurs in the workspace to the total number of instances. Valid values: [1-100].', example='10'),
      }(name='InstanceErrorPercentage', description='The configuration for an alert of the InstanceErrorPercentage type.'),
      instanceTransferFluctuate?: {
        percentage?: int32(name='Percentage', description='The maximum percentage of fluctuation in the number of auto triggered node instances that are generated in your workspace. Valid values: [1-100].', example='10'),
        trend?: string(name='Trend', description='The way in which the number of auto triggered node instances that are generated in your workspace fluctuates. Valid values:

*   abs: the absolute value. The number of instances increases or decreases.
*   increase: The number of instances increases.
*   decrease: The number of instances decreases.', example='abs'),
      }(name='InstanceTransferFluctuate', description='The configuration for an alert of the InstanceTransferFluctuate type.'),
      timeout?: {
        timeoutInMinutes?: int32(name='TimeoutInMinutes', description='The timeout period. Unit: minutes.', example='10'),
      }(name='Timeout', description='The configuration for an alert of the Timeout type.'),
      unFinished?: {
        unFinishedTime?: string(name='UnFinishedTime', description='The latest completion time of the instance. The period is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='12:00'),
      }(name='UnFinished', description='The configuration for an alert of the UnFinished type.'),
    }(name='Extension', description='The extended information about the rule. This parameter is required for specific types of alerts.'),
    target?: {
      allowTasks?: [ long ](name='AllowTasks', description='The nodes that are not to be monitored.'),
      ids?: [ long ](name='Ids', description='The IDs of monitored objects.'),
      type?: string(name='Type', description='The type of the monitored objects. Valid values:

*   Task: node
*   Baseline: baseline
*   project: workspace
*   BizProcess: workflow', example='Task'),
    }(name='Target', description='The monitored objects.'),
    type?: string(name='Type', description='The alert type. Valid values:

*   Finished: An instance is successfully run.
*   UnFinished: An instance does not finish running before a specified point in time.
*   Error: An error occurs on an instance.
*   CycleUnfinished: An instance does not finish running as expected within a specific cycle.
*   Timeout: An instance times out.
*   InstanceTransferComplete: An instance is generated by the auto triggered node.
*   InstanceTransferFluctuate: The number of generated instances fluctuates.
*   ExhaustedError: An error persists after an instance is automatically rerun.
*   InstanceKeyword: An instance with errors contains specified keywords.
*   InstanceErrorCount: The number of instances on which an error occurs reaches a specified threshold.
*   InstanceErrorPercentage: The proportion of instances on which an error occurs in the workspace to the total number of instances reaches a specified threshold.
*   ResourceGroupPercentage: The usage rate of the resource group reaches a specified threshold.
*   ResourceGroupWaitCount: The number of instances that are waiting for resources in the resource group reaches a specified threshold.', example='ERROR'),
  }(name='TriggerCondition', description='The alert triggering condition.'),
}

model UpdateAlertRuleShrinkRequest {
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the rule.', example='true'),
  id?: long(name='Id', description='The rule ID.', example='105412'),
  name?: string(name='Name', description='The name of the rule.', example='collection_name'),
  notificationShrink?: string(name='Notification', description='The configuration for the alert notification.'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the owner of the rule.', example='193379****'),
  triggerConditionShrink?: string(name='TriggerCondition', description='The alert triggering condition.'),
}

model UpdateAlertRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D85FEE2B-6174-5817-AF9E-FDD02FEDA5BC'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAlertRuleResponseBody(name='body'),
}

/**
 * @summary Updates the information about a custom alert monitoring rule.
 *
 * @param tmpReq UpdateAlertRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAlertRuleResponse
 */
async function updateAlertRuleWithOptions(tmpReq: UpdateAlertRuleRequest, runtime: Util.RuntimeOptions): UpdateAlertRuleResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateAlertRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.notification)) {
    request.notificationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notification, 'Notification', 'json');
  }
  if (!Util.isUnset(tmpReq.triggerCondition)) {
    request.triggerConditionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.triggerCondition, 'TriggerCondition', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.notificationShrink)) {
    query['Notification'] = request.notificationShrink;
  }
  if (!Util.isUnset(request.owner)) {
    query['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.triggerConditionShrink)) {
    query['TriggerCondition'] = request.triggerConditionShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAlertRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the information about a custom alert monitoring rule.
 *
 * @param request UpdateAlertRuleRequest
 * @return UpdateAlertRuleResponse
 */
async function updateAlertRule(request: UpdateAlertRuleRequest): UpdateAlertRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAlertRuleWithOptions(request, runtime);
}

model UpdateBusinessRequest {
  businessId?: long(name='BusinessId', description='The workflow ID.

You can call the [ListBusiness](https://help.aliyun.com/document_detail/173945.html) operation to query the ID.

This parameter is required.', example='300000'),
  businessName?: string(name='BusinessName', description='The name of the workflow.

You can call the [ListBusiness](https://help.aliyun.com/document_detail/173945.html) operation to query the name.', example='MyBusiness'),
  description?: string(name='Description', description='The description of the workflow.', example='modified from my first business'),
  owner?: string(name='Owner', description='The owner of the workflow.

You can call the [ListBusiness](https://help.aliyun.com/document_detail/173945.html) operation to query the owner.', example='348428****'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to obtain the workspace ID. You must configure either this parameter or the `ProjectIdentifier` parameter to determine the DataWorks workspace to which the operation is applied.', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', description='The name of the DataWorks workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to obtain the name. You must configure either this parameter or the `ProjectId` parameter to determine the DataWorks workspace to which the operation is applied.', example='dw_project'),
}

model UpdateBusinessResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateBusinessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBusinessResponseBody(name='body'),
}

/**
 * @summary Updates a workflow.
 *
 * @param request UpdateBusinessRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateBusinessResponse
 */
async function updateBusinessWithOptions(request: UpdateBusinessRequest, runtime: Util.RuntimeOptions): UpdateBusinessResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessId)) {
    body['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.businessName)) {
    body['BusinessName'] = request.businessName;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateBusiness',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates a workflow.
 *
 * @param request UpdateBusinessRequest
 * @return UpdateBusinessResponse
 */
async function updateBusiness(request: UpdateBusinessRequest): UpdateBusinessResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBusinessWithOptions(request, runtime);
}

model UpdateColumnBusinessMetadataRequest {
  description?: string(name='Description', example='test description'),
  id?: string(name='Id', description='The column ID. You can call the ListColumns operation to query the ID. For more information, see [Concepts related to metadata entities](https://help.aliyun.com/document_detail/2880092.html).

This parameter is required.', example='maxcompute-column:11075xxxx::test_project:test_schema:test_table:test_column'),
}

model UpdateColumnBusinessMetadataResponseBody = {
  requestId?: string(name='RequestId', example='D1E2E5BC-xxxx-xxxx-xxxx-xxxxxx'),
  success?: boolean(name='Success', example='true'),
}

model UpdateColumnBusinessMetadataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateColumnBusinessMetadataResponseBody(name='body'),
}

/**
 * @summary 更新字段业务元数据
 *
 * @param request UpdateColumnBusinessMetadataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateColumnBusinessMetadataResponse
 */
async function updateColumnBusinessMetadataWithOptions(request: UpdateColumnBusinessMetadataRequest, runtime: Util.RuntimeOptions): UpdateColumnBusinessMetadataResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateColumnBusinessMetadata',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新字段业务元数据
 *
 * @param request UpdateColumnBusinessMetadataRequest
 * @return UpdateColumnBusinessMetadataResponse
 */
async function updateColumnBusinessMetadata(request: UpdateColumnBusinessMetadataRequest): UpdateColumnBusinessMetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateColumnBusinessMetadataWithOptions(request, runtime);
}

model UpdateComponentRequest {
  componentId?: string(name='ComponentId', description='This parameter is required.', example='568780096083*******'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000'),
  spec?: string(name='Spec', description='The FlowSpec information for this UDF function. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.', example='{
    "kind": "Component",
    "version": "1.1.2",
    "spec": {
        "components": [
            {
                "id": "568780096083*******",
                "script": {
                    "content": "select \\\\"@@{para1}\\\\", \\\\"@@{para2}\\\\""
                }
            }
        ]
    }
}'),
}

model UpdateComponentResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateComponentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateComponentResponseBody(name='body'),
}

/**
 * @summary Updates components.
 *
 * @description This operation is currently in beta. To join the beta testing, please submit a request. You can call this operation after we add you to the beta program.
 *
 * @param request UpdateComponentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateComponentResponse
 */
async function updateComponentWithOptions(request: UpdateComponentRequest, runtime: Util.RuntimeOptions): UpdateComponentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.componentId)) {
    body['ComponentId'] = request.componentId;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateComponent',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates components.
 *
 * @description This operation is currently in beta. To join the beta testing, please submit a request. You can call this operation after we add you to the beta program.
 *
 * @param request UpdateComponentRequest
 * @return UpdateComponentResponse
 */
async function updateComponent(request: UpdateComponentRequest): UpdateComponentResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateComponentWithOptions(request, runtime);
}

model UpdateDIAlarmRuleRequest {
  DIAlarmRuleId?: long(name='DIAlarmRuleId', description='This parameter is deprecated. Use the Id parameter instead.', example='34982', deprecated=true),
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='1'),
  description?: string(name='Description', description='The description of the alert rule.', example='The description of the alert rule.'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the alert rule. By default, the alert rule is disabled.', example='true'),
  id?: long(name='Id', description='The alert rule Id', example='34982'),
  metricType?: string(name='MetricType', description='The metric type in the alert rule. Valid values:

*   Heartbeat
*   FailoverCount
*   Delay
*   DdlReport
*   ResourceUtilization', example='Heartbeat'),
  name?: string(name='Name', description='The name of the alert rule.', example='alarm_rule_name'),
  notificationSettings?: {
    inhibitionInterval?: long(name='InhibitionInterval', description='This parameter is deprecated and replaced by the MuteInterval parameter.', example='5', deprecated=true),
    muteInterval?: long(name='MuteInterval', description='The duration of the alert suppression interval. Default value: 5. Unit: minutes.', example='5'),
    notificationChannels?: [ 
      {
        channels?: [ string ](name='Channels', description='The alert notification method. Valid values:

*   Mail
*   Phone
*   Sms
*   Ding'),
        severity?: string(name='Severity', description='The severity level. Valid values:

*   Warning
*   Critical', example='Warning'),
      }
    ](name='NotificationChannels', description='The alert notification methods.'),
    notificationReceivers?: [ 
      {
        receiverType?: string(name='ReceiverType', description='The recipient type. Valid values: AliyunUid, DingToken, FeishuToken, and WebHookUrl.', example='DingToken'),
        receiverValues?: [ string ](name='ReceiverValues', description='The recipient.

*   If the ReceiverType parameter is set to AliyunUid, set this parameter to the Alibaba Cloud account ID of a user.
*   If the ReceiverType parameter is set to DingToken, set this parameter to the token of a DingTalk chatbot.'),
      }
    ](name='NotificationReceivers', description='The settings of alert notification recipients.'),
  }(name='NotificationSettings', description='The alert notification settings.'),
  triggerConditions?: [ 
    {
      ddlReportTags?: [ string ](name='DdlReportTags', description='This parameter is deprecated and replaced by the DdlTypes parameter.', deprecated=true),
      ddlTypes?: [ string ](name='DdlTypes', description='The types of DDL operations for which the alert rule takes effect.'),
      duration?: long(name='Duration', description='The time interval for alert calculation. Unit: minutes.', example='15'),
      severity?: string(name='Severity', description='The severity level. Valid values:

*   Warning
*   Critical', example='Warning'),
      threshold?: long(name='Threshold', description='The alert threshold.

*   If the alert rule is for task status, you do not need to specify a threshold.
*   If the alert rule is for failovers, you must specify the number of failovers.
*   If the alert rule is for latency, you must specify the latency duration, in seconds.', example='5'),
    }
  ](name='TriggerConditions', description='The conditions that can trigger the alert rule.'),
}

model UpdateDIAlarmRuleShrinkRequest {
  DIAlarmRuleId?: long(name='DIAlarmRuleId', description='This parameter is deprecated. Use the Id parameter instead.', example='34982', deprecated=true),
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='1'),
  description?: string(name='Description', description='The description of the alert rule.', example='The description of the alert rule.'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the alert rule. By default, the alert rule is disabled.', example='true'),
  id?: long(name='Id', description='The alert rule Id', example='34982'),
  metricType?: string(name='MetricType', description='The metric type in the alert rule. Valid values:

*   Heartbeat
*   FailoverCount
*   Delay
*   DdlReport
*   ResourceUtilization', example='Heartbeat'),
  name?: string(name='Name', description='The name of the alert rule.', example='alarm_rule_name'),
  notificationSettingsShrink?: string(name='NotificationSettings', description='The alert notification settings.'),
  triggerConditionsShrink?: string(name='TriggerConditions', description='The conditions that can trigger the alert rule.'),
}

model UpdateDIAlarmRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='A6C6B486-E3A2-5D52-9E76-D9380485D946'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateDIAlarmRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDIAlarmRuleResponseBody(name='body'),
}

/**
 * @summary Updates an alert rule configured for a synchronization task.
 *
 * @param tmpReq UpdateDIAlarmRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDIAlarmRuleResponse
 */
async function updateDIAlarmRuleWithOptions(tmpReq: UpdateDIAlarmRuleRequest, runtime: Util.RuntimeOptions): UpdateDIAlarmRuleResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDIAlarmRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.notificationSettings)) {
    request.notificationSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notificationSettings, 'NotificationSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.triggerConditions)) {
    request.triggerConditionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.triggerConditions, 'TriggerConditions', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDIAlarmRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates an alert rule configured for a synchronization task.
 *
 * @param request UpdateDIAlarmRuleRequest
 * @return UpdateDIAlarmRuleResponse
 */
async function updateDIAlarmRule(request: UpdateDIAlarmRuleRequest): UpdateDIAlarmRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDIAlarmRuleWithOptions(request, runtime);
}

model UpdateDIJobRequest {
  DIJobId?: long(name='DIJobId', description='This parameter is deprecated. Use the Id parameter instead.', example='11588', deprecated=true),
  description?: string(name='Description'),
  id?: long(name='Id', description='The ID of the synchronization task.', example='11588'),
  jobSettings?: {
    channelSettings?: string(name='ChannelSettings'),
    columnDataTypeSettings?: [ 
      {
        destinationDataType?: string(name='DestinationDataType'),
        sourceDataType?: string(name='SourceDataType'),
      }
    ](name='ColumnDataTypeSettings'),
    cycleScheduleSettings?: {
      scheduleParameters?: string(name='ScheduleParameters'),
    }(name='CycleScheduleSettings'),
    ddlHandlingSettings?: [ 
      {
        action?: string(name='Action'),
        type?: string(name='Type'),
      }
    ](name='DdlHandlingSettings'),
    runtimeSettings?: [ 
      {
        name?: string(name='Name'),
        value?: string(name='Value'),
      }
    ](name='RuntimeSettings'),
  }(name='JobSettings'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can call the [ListProjects](https://help.aliyun.com/document_detail/178393.html) operation to obtain the ID.', example='10000'),
  resourceSettings?: {
    offlineResourceSettings?: {
      requestedCu?: double(name='RequestedCu'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier'),
    }(name='OfflineResourceSettings'),
    realtimeResourceSettings?: {
      requestedCu?: double(name='RequestedCu'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier'),
    }(name='RealtimeResourceSettings'),
    scheduleResourceSettings?: {
      requestedCu?: double(name='RequestedCu'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier'),
    }(name='ScheduleResourceSettings'),
  }(name='ResourceSettings'),
  tableMappings?: [ 
    {
      sourceObjectSelectionRules?: [ 
        {
          action?: string(name='Action'),
          expression?: string(name='Expression'),
          expressionType?: string(name='ExpressionType'),
          objectType?: string(name='ObjectType'),
        }
      ](name='SourceObjectSelectionRules'),
      transformationRules?: [ 
        {
          ruleActionType?: string(name='RuleActionType'),
          ruleName?: string(name='RuleName'),
          ruleTargetType?: string(name='RuleTargetType'),
        }
      ](name='TransformationRules'),
    }
  ](name='TableMappings'),
  transformationRules?: [ 
    {
      ruleActionType?: string(name='RuleActionType'),
      ruleExpression?: string(name='RuleExpression'),
      ruleName?: string(name='RuleName'),
      ruleTargetType?: string(name='RuleTargetType'),
    }
  ](name='TransformationRules'),
}

model UpdateDIJobShrinkRequest {
  DIJobId?: long(name='DIJobId', description='This parameter is deprecated. Use the Id parameter instead.', example='11588', deprecated=true),
  description?: string(name='Description'),
  id?: long(name='Id', description='The ID of the synchronization task.', example='11588'),
  jobSettingsShrink?: string(name='JobSettings'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can call the [ListProjects](https://help.aliyun.com/document_detail/178393.html) operation to obtain the ID.', example='10000'),
  resourceSettingsShrink?: string(name='ResourceSettings'),
  tableMappingsShrink?: string(name='TableMappings'),
  transformationRulesShrink?: string(name='TransformationRules'),
}

model UpdateDIJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='AAC30B35-820D-5F3E-A42C-E96BB6379325'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDIJobResponseBody(name='body'),
}

/**
 * @summary Updates a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq UpdateDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDIJobResponse
 */
async function updateDIJobWithOptions(tmpReq: UpdateDIJobRequest, runtime: Util.RuntimeOptions): UpdateDIJobResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDIJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.jobSettings)) {
    request.jobSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.jobSettings, 'JobSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.resourceSettings)) {
    request.resourceSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceSettings, 'ResourceSettings', 'json');
  }
  if (!Util.isUnset(tmpReq.tableMappings)) {
    request.tableMappingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tableMappings, 'TableMappings', 'json');
  }
  if (!Util.isUnset(tmpReq.transformationRules)) {
    request.transformationRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.transformationRules, 'TransformationRules', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.DIJobId)) {
    query['DIJobId'] = request.DIJobId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.jobSettingsShrink)) {
    body['JobSettings'] = request.jobSettingsShrink;
  }
  if (!Util.isUnset(request.resourceSettingsShrink)) {
    body['ResourceSettings'] = request.resourceSettingsShrink;
  }
  if (!Util.isUnset(request.tableMappingsShrink)) {
    body['TableMappings'] = request.tableMappingsShrink;
  }
  if (!Util.isUnset(request.transformationRulesShrink)) {
    body['TransformationRules'] = request.transformationRulesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDIJob',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request UpdateDIJobRequest
 * @return UpdateDIJobResponse
 */
async function updateDIJob(request: UpdateDIJobRequest): UpdateDIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDIJobWithOptions(request, runtime);
}

model UpdateDataAssetTagRequest {
  description?: string(name='Description', description='The description of the tag.', example='This is a description.'),
  key?: string(name='Key', description='The tag key.

This parameter is required.', example='key1'),
  managers?: [ string ](name='Managers', description='The tag administrators.'),
  values?: [ string ](name='Values', description='The tag values.'),
}

model UpdateDataAssetTagShrinkRequest {
  description?: string(name='Description', description='The description of the tag.', example='This is a description.'),
  key?: string(name='Key', description='The tag key.

This parameter is required.', example='key1'),
  managersShrink?: string(name='Managers', description='The tag administrators.'),
  valuesShrink?: string(name='Values', description='The tag values.'),
}

model UpdateDataAssetTagResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0bc1ec92159376'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateDataAssetTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataAssetTagResponseBody(name='body'),
}

/**
 * @summary Updates a tag.
 *
 * @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
 *
 * @param tmpReq UpdateDataAssetTagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataAssetTagResponse
 */
async function updateDataAssetTagWithOptions(tmpReq: UpdateDataAssetTagRequest, runtime: Util.RuntimeOptions): UpdateDataAssetTagResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDataAssetTagShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.managers)) {
    request.managersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.managers, 'Managers', 'json');
  }
  if (!Util.isUnset(tmpReq.values)) {
    request.valuesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.values, 'Values', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.managersShrink)) {
    query['Managers'] = request.managersShrink;
  }
  if (!Util.isUnset(request.valuesShrink)) {
    query['Values'] = request.valuesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataAssetTag',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates a tag.
 *
 * @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
 *
 * @param request UpdateDataAssetTagRequest
 * @return UpdateDataAssetTagResponse
 */
async function updateDataAssetTag(request: UpdateDataAssetTagRequest): UpdateDataAssetTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataAssetTagWithOptions(request, runtime);
}

model UpdateDataQualityAlertRuleRequest {
  condition?: string(name='Condition', description='The alert condition of the data quality monitoring rule.', example='results.any { r -> r.status == \\\\"fail\\\\" && r.rule.severity == \\\\"High\\\\" }'),
  id?: long(name='Id', description='The ID of the alert rule.', example='105412'),
  notification?: {
    channels?: [ string ](name='Channels', description='The list of alert channels. You can set both Email and Sms at the same time. In other cases, only one channel can be set.

This parameter is required.'),
    receivers?: [ 
      {
        extension?: string(name='Extension', description='Additional configurations required for the alert recipients. When ReceiverType is DingdingUrl, you can set `{"atAll":true}` to mention all members.', example='{"atAll":true}'),
        receiverType?: string(name='ReceiverType', description='The type of alert recipients.

*   AliUid
*   WebhookUrl
*   DingdingUrl
*   WeixinUrl
*   FeishuUrl
*   TaskOwner
*   DataQualityScanOwner
*   ShiftSchedule

This parameter is required.', example='TaskOwner'),
        receiverValues?: [ string ](name='ReceiverValues', description='The value of alert recipients.'),
      }
    ](name='Receivers', description='The alert recipients.'),
  }(name='Notification', description='Alert notification configurations.'),
  projectId?: long(name='ProjectId', description='The project ID.', example='1000'),
  target?: {
    ids?: [ long ](name='Ids', description='The list of monitored target IDs. Currently, only one ID can be set.'),
    type?: string(name='Type', description='The type of the monitored target. Only DataQualityScan is supported.', example='DataQualityScan'),
  }(name='Target', description='The monitored target of the data quality monitoring rule.'),
}

model UpdateDataQualityAlertRuleShrinkRequest {
  condition?: string(name='Condition', description='The alert condition of the data quality monitoring rule.', example='results.any { r -> r.status == \\\\"fail\\\\" && r.rule.severity == \\\\"High\\\\" }'),
  id?: long(name='Id', description='The ID of the alert rule.', example='105412'),
  notificationShrink?: string(name='Notification', description='Alert notification configurations.'),
  projectId?: long(name='ProjectId', description='The project ID.', example='1000'),
  targetShrink?: string(name='Target', description='The monitored target of the data quality monitoring rule.'),
}

model UpdateDataQualityAlertRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0bc14115***159376359'),
  success?: boolean(name='Success', description='Indicates whether the alert rule was updated.', example='True'),
}

model UpdateDataQualityAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataQualityAlertRuleResponseBody(name='body'),
}

/**
 * @summary Updates a specified data quality monitoring alert rule.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq UpdateDataQualityAlertRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataQualityAlertRuleResponse
 */
async function updateDataQualityAlertRuleWithOptions(tmpReq: UpdateDataQualityAlertRuleRequest, runtime: Util.RuntimeOptions): UpdateDataQualityAlertRuleResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDataQualityAlertRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.notification)) {
    request.notificationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notification, 'Notification', 'json');
  }
  if (!Util.isUnset(tmpReq.target)) {
    request.targetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.target, 'Target', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.condition)) {
    body['Condition'] = request.condition;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.notificationShrink)) {
    body['Notification'] = request.notificationShrink;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.targetShrink)) {
    body['Target'] = request.targetShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataQualityAlertRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates a specified data quality monitoring alert rule.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request UpdateDataQualityAlertRuleRequest
 * @return UpdateDataQualityAlertRuleResponse
 */
async function updateDataQualityAlertRule(request: UpdateDataQualityAlertRuleRequest): UpdateDataQualityAlertRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataQualityAlertRuleWithOptions(request, runtime);
}

model UpdateDataQualityEvaluationTaskRequest {
  dataQualityRules?: [ 
    {
      checkingConfig?: {
        referencedSamplesFilter?: string(name='ReferencedSamplesFilter', description='The method that is used to query the referenced samples. To obtain specific types of thresholds, you must query reference values. In this example, an expression is used to specify the query method of referenced samples.', example='{"bizdate": ["-1"]}'),
        thresholds?: {
          critical?: {
            expression?: string(name='Expression', description='The threshold expression.

If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:

*   $checkValue > 0.01
*   $checkValue < -0.01
*   abs($checkValue) > 0.01

If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.', example='$checkValue > 0.01'),
            operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
            value?: string(name='Value', description='The threshold value.', example='0.01'),
          }(name='Critical', description='The threshold settings for critical alerts.'),
          expected?: {
            expression?: string(name='Expression', description='The threshold expression.

If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:

*   $checkValue > 0.01
*   $checkValue < -0.01
*   abs($checkValue) > 0.01

If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.', example='$checkValue > 0.01'),
            operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='='),
            value?: string(name='Value', description='The threshold value.', example='0'),
          }(name='Expected', description='The expected threshold setting.'),
          warned?: {
            expression?: string(name='Expression', description='The threshold expression.

If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:

*   $checkValue > 0.01
*   $checkValue < -0.01
*   abs($checkValue) > 0.01

If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.', example='$checkValue > 0.01'),
            operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
            value?: string(name='Value', description='The threshold value.', example='0.001'),
          }(name='Warned', description='The threshold settings for normal alerts.'),
        }(name='Thresholds', description='The threshold settings.'),
        type?: string(name='Type', description='The threshold calculation method. Valid values:

*   Fluctation
*   Auto
*   FluctationDiscreate
*   Average
*   Fixed', example='Fixed'),
      }(name='CheckingConfig', description='The check settings for sample data.'),
      description?: string(name='Description', description='The description of the rule.', example='OpenAPI test rules'),
      enabled?: boolean(name='Enabled', description='Specifies whether to enable the rule.', example='true'),
      errorHandlers?: [ 
        {
          errorDataFilter?: string(name='ErrorDataFilter', description='The SQL statement that is used to filter failed tasks. If you define the rule by using custom SQL statements, you must specify an SQL statement to filter failed tasks.', example='SELECT * FROM ods_d_openapi_log WHERE status = \\\\"Error\\\\"'),
          type?: string(name='Type', description='The type of the operation. Valid values:

*   SaveErrorData', example='SaveErrorData'),
        }
      ](name='ErrorHandlers', description='The operations that you can perform after the rule-based check fails.'),
      id?: long(name='Id', description='The rule ID. You can call the [ListQualityRules](https://help.aliyun.com/document_detail/173995.html) operation to query the ID of the monitoring rule.', example='1022171560'),
      name?: string(name='Name', description='The name of the monitoring rule.', example='OpenAPI test rules'),
      samplingConfig?: {
        metric?: string(name='Metric', description='The metrics used for sampling. Valid values:

*   Count: the number of rows in the table.
*   Min: the minimum value of the field.
*   Max: the maximum value of the field.
*   Avg: the average value of the field.
*   DistinctCount: the number of unique values of the field after deduplication.
*   DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
*   DuplicatedCount: the number of duplicated values of the field.
*   DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
*   TableSize: the table size.
*   NullValueCount: the number of rows in which the field value is null.
*   NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
*   GroupCount: the field value and the number of rows for each field value.
*   CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
*   CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
*   UserDefinedSql: specifies that data is sampled by executing custom SQL statements.', example='CountNotIn'),
        metricParameters?: string(name='MetricParameters', description='The parameters required for sampling.', example='{ "Columns": [ "id", "name" ] , "SQL": "select count(1) from table;"}'),
        samplingFilter?: string(name='SamplingFilter', description='The statements that are used to filter unnecessary data during sampling. The statements can be up to 16,777,215 characters in length.', example='status != \\\\"Succeeded\\\\"'),
        settingConfig?: string(name='SettingConfig', description='The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.', example='odps.sql.type.system.odps2=True,odps.sql.hive.compatible=True'),
      }(name='SamplingConfig', description='The parameters required for sampling.'),
      severity?: string(name='Severity', description='The strength of the rule. Valid values:

*   Normal
*   High', example='Normal'),
      templateCode?: string(name='TemplateCode', description='The ID of the template used by the rule.', example='SYSTEM:field:null_value:fixed:0'),
    }
  ](name='DataQualityRules', description='The list of monitoring rules that are associated with the monitor.'),
  dataSourceId?: long(name='DataSourceId', description='The data source ID. You can call the [ListDataSources](https://help.aliyun.com/document_detail/211431.html) operation to query the ID.', example='358750'),
  description?: string(name='Description', description='The description of the monitor.', example='OpenAPI data quality monitoring test.'),
  hooks?: [ 
    {
      condition?: string(name='Condition', description='The hook trigger condition. When this condition is met, the hook action is triggered. Only two conditional expressions are supported:

*   Specify only one group of rule strength type and rule check status, such as `${severity} == "High" AND ${status} == "Critical"`. In this expression, the hook trigger condition is met if severity is High and status is Critical.
*   Specify multiple groups of rule strength types and rule check status, such as `(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")`. In this expression, the hook trigger condition is met if severity is High and status is Critical, severity is Normal and status is Critical, or severity is Normal and status is Error. The enumeration of severity in a conditional expression is the same as the enumeration of severity in DataQualityRule. The enumeration of status in a conditional expression is the same as the enumeration of status in DataQualityResult.', example='${severity} == "High" AND ${status} == "Critical"'),
      type?: string(name='Type', description='The hook type. Valid values:

*   BlockTaskInstance: Blocks the running of scheduling tasks.', example='ByScheduledTaskInstance'),
    }
  ](name='Hooks', description='The hook.'),
  id?: long(name='Id', description='The ID of the monitor.

This parameter is required.', example='7227061794'),
  name?: string(name='Name', description='The name of the monitor.', example='OpenAPI data quality monitoring test.'),
  notifications?: {
    condition?: string(name='Condition', description='The notification trigger condition. When this condition is met, the alert notification is triggered. Only two conditional expressions are supported:

*   Specify only one group of rule strength type and rule check status, such as `${severity} == "High" AND ${status} == "Critical"`. In this expression, the hook trigger condition is met if severity is High and status is Critical.
*   Specify multiple groups of rule strength types and rule check status, such as `(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")`. In this expression, the hook trigger condition is met if severity is High and status is Critical, severity is Normal and status is Critical, or severity is Normal and status is Error. The enumeration of severity in a conditional expression is the same as the enumeration of severity in DataQualityRule. The enumeration of status in a conditional expression is the same as the enumeration of status in DataQualityResult.', example='${severity} == "High" AND ${status} == "Critical"'),
    notifications?: [ 
      {
        notificationChannels?: [ 
          {
            channels?: [ string ](name='Channels', description='The alert notification methods.'),
          }
        ](name='NotificationChannels', description='The alert notification methods.'),
        notificationReceivers?: [ 
          {
            extension?: string(name='Extension', description='The additional parameters that are required when alerts are sent. The parameters are JSON-formatted strings. The following keys are supported:

*   atAll: specifies that all members in a group are mentioned when alerts are sent by using DingTalk. This parameter is valid only if you set ReceiverType to DingdingUrl.', example='{  "atAll": true }'),
            receiverType?: string(name='ReceiverType', description='The type of the alert recipient.

Valid values:

*   WebhookUrl
*   FeishuUrl
*   DingdingUrl
*   WeixinUrl
*   AliUid', example='DingdingUrl'),
            receiverValues?: [ string ](name='ReceiverValues', description='The alert recipient.'),
          }
        ](name='NotificationReceivers', description='The configurations of alert recipients.'),
      }
    ](name='Notifications', description='The configurations of the alert notification.'),
  }(name='Notifications', description='The configurations of alert notifications.'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.

This parameter is required.', example='10000'),
  runtimeConf?: string(name='RuntimeConf', description='The extended configurations in JSON-formatted strings. You can use this parameter only for monitors that are used to monitor the quality of E-MapReduce (EMR) data.

*   queue: The Yarn queue used when a monitor checks the quality of EMR data. By default, the queue configured for the current workspace is used.

*   sqlEngine: The SQL engine used when a monitor checks the quality of EMR data.

    *   HIVE_SQL
    *   SPARK_SQL', example='{ "queue": "default", "sqlEngine": "SPARK_SQL" }'),
  target?: {
    databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs. Valid values:

*   maxcompute
*   hologres
*   cdh
*   analyticdb_for_mysql
*   starrocks
*   emr
*   analyticdb_for_postgresql', example='maxcompute'),
    partitionSpec?: string(name='PartitionSpec', description='The configuration of the partitioned table.', example='dt=$[yyyymmdd-1]'),
    tableGuid?: string(name='TableGuid', description='The ID of the table in Data Map.', example='odsp.openapi.ods_d_openapi_log'),
  }(name='Target', description='The monitored object of the data quality monitoring task.'),
  trigger?: {
    taskIds?: [ long ](name='TaskIds', description='The IDs of scheduling tasks. This parameter is valid only if you set Type to ByScheduledTaskInstance.'),
    type?: string(name='Type', description='The trigger type of the monitor. Valid values:

*   ByScheduledTaskInstance: The monitor is triggered by the associated scheduling tasks.
*   ByManual: The monitor is manually triggered.', example='ByScheduledTaskInstance'),
  }(name='Trigger', description='The trigger configuration of the monitor.'),
}

model UpdateDataQualityEvaluationTaskShrinkRequest {
  dataQualityRulesShrink?: string(name='DataQualityRules', description='The list of monitoring rules that are associated with the monitor.'),
  dataSourceId?: long(name='DataSourceId', description='The data source ID. You can call the [ListDataSources](https://help.aliyun.com/document_detail/211431.html) operation to query the ID.', example='358750'),
  description?: string(name='Description', description='The description of the monitor.', example='OpenAPI data quality monitoring test.'),
  hooksShrink?: string(name='Hooks', description='The hook.'),
  id?: long(name='Id', description='The ID of the monitor.

This parameter is required.', example='7227061794'),
  name?: string(name='Name', description='The name of the monitor.', example='OpenAPI data quality monitoring test.'),
  notificationsShrink?: string(name='Notifications', description='The configurations of alert notifications.'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.

This parameter is required.', example='10000'),
  runtimeConf?: string(name='RuntimeConf', description='The extended configurations in JSON-formatted strings. You can use this parameter only for monitors that are used to monitor the quality of E-MapReduce (EMR) data.

*   queue: The Yarn queue used when a monitor checks the quality of EMR data. By default, the queue configured for the current workspace is used.

*   sqlEngine: The SQL engine used when a monitor checks the quality of EMR data.

    *   HIVE_SQL
    *   SPARK_SQL', example='{ "queue": "default", "sqlEngine": "SPARK_SQL" }'),
  targetShrink?: string(name='Target', description='The monitored object of the data quality monitoring task.'),
  triggerShrink?: string(name='Trigger', description='The trigger configuration of the monitor.'),
}

model UpdateDataQualityEvaluationTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateDataQualityEvaluationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataQualityEvaluationTaskResponseBody(name='body'),
}

/**
 * @summary Updates a monitor.
 *
 * @description This API operation is supported in all DataWorks editions.
 *
 * @param tmpReq UpdateDataQualityEvaluationTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataQualityEvaluationTaskResponse
 */
async function updateDataQualityEvaluationTaskWithOptions(tmpReq: UpdateDataQualityEvaluationTaskRequest, runtime: Util.RuntimeOptions): UpdateDataQualityEvaluationTaskResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDataQualityEvaluationTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dataQualityRules)) {
    request.dataQualityRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataQualityRules, 'DataQualityRules', 'json');
  }
  if (!Util.isUnset(tmpReq.hooks)) {
    request.hooksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hooks, 'Hooks', 'json');
  }
  if (!Util.isUnset(tmpReq.notifications)) {
    request.notificationsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notifications, 'Notifications', 'json');
  }
  if (!Util.isUnset(tmpReq.target)) {
    request.targetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.target, 'Target', 'json');
  }
  if (!Util.isUnset(tmpReq.trigger)) {
    request.triggerShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.trigger, 'Trigger', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dataQualityRulesShrink)) {
    body['DataQualityRules'] = request.dataQualityRulesShrink;
  }
  if (!Util.isUnset(request.dataSourceId)) {
    body['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.hooksShrink)) {
    body['Hooks'] = request.hooksShrink;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.notificationsShrink)) {
    body['Notifications'] = request.notificationsShrink;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.runtimeConf)) {
    body['RuntimeConf'] = request.runtimeConf;
  }
  if (!Util.isUnset(request.targetShrink)) {
    body['Target'] = request.targetShrink;
  }
  if (!Util.isUnset(request.triggerShrink)) {
    body['Trigger'] = request.triggerShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataQualityEvaluationTask',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates a monitor.
 *
 * @description This API operation is supported in all DataWorks editions.
 *
 * @param request UpdateDataQualityEvaluationTaskRequest
 * @return UpdateDataQualityEvaluationTaskResponse
 */
async function updateDataQualityEvaluationTask(request: UpdateDataQualityEvaluationTaskRequest): UpdateDataQualityEvaluationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataQualityEvaluationTaskWithOptions(request, runtime);
}

model UpdateDataQualityRuleRequest {
  checkingConfig?: {
    referencedSamplesFilter?: string(name='ReferencedSamplesFilter', description='The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference values. In this example, an expression is used to specify the query method of referenced samples.', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
    thresholds?: {
      critical?: {
        expression?: string(name='Expression', description='The threshold expression.

The volatility type rule must use an expression to represent the volatility threshold. For example:

- Fluctuation rise greater than 0.01: $checkValue > 0.01
- Fluctuation drop greater than 0.01:$checkValue < -0.01
- Absolute volatility: abs($checkValue) > 0.01

You can also use expressions to configure thresholds for fixed-Value rules. If you configure them at the same time, the expression priority is higher than Operator and Value.', example='$checkValue > 0.05'),
        operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
        value?: string(name='Value', description='The threshold value.', example='100.0'),
      }(name='Critical', description='The threshold settings for critical alerts.'),
      expected?: {
        expression?: string(name='Expression', description='The threshold expression.

The volatility type rule must use an expression to represent the volatility threshold. For example:

- Fluctuation rise greater than 0.01: $checkValue > 0.01
- Fluctuation drop greater than 0.01:$checkValue < -0.01
- Absolute volatility: abs($checkValue) > 0.01

You can also use expressions to configure thresholds for fixed-Value rules. If you configure them at the same time, the expression priority is higher than Operator and Value.', example='$checkValue <= 0.01'),
        operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
        value?: string(name='Value', description='The threshold value.', example='100.0'),
      }(name='Expected', description='The expected threshold setting.'),
      warned?: {
        expression?: string(name='Expression', description='The threshold expression.

The volatility type rule must use an expression to represent the volatility threshold. For example:

- Fluctuation rise greater than 0.01: $checkValue > 0.01
- Fluctuation drop greater than 0.01:$checkValue < -0.01
- Absolute volatility: abs($checkValue) > 0.01

You can also use expressions to configure thresholds for fixed-Value rules. If you configure them at the same time, the expression priority is higher than Operator and Value.', example='$checkValue > 0.01'),
        operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
        value?: string(name='Value', description='The threshold value.', example='100.0'),
      }(name='Warned', description='The threshold settings for normal alerts.'),
    }(name='Thresholds', description='The threshold settings.'),
    type?: string(name='Type', description='The threshold calculation method. Valid values:

*   Fixed
*   Fluctation
*   FluctationDiscreate
*   Auto
*   Average
*   Variance', example='Fixed'),
  }(name='CheckingConfig', description='The check settings for sample data.'),
  description?: string(name='Description', description='The description of the rule. The description can be up to 500 characters in length.', example='this is a odps _sql task'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the rule.', example='true'),
  errorHandlers?: [ 
    {
      errorDataFilter?: string(name='ErrorDataFilter', description='The SQL statement that is used to filter failed tasks. If the rule is defined by custom SQL statements, you must specify an SQL statement to filter failed tasks.', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
      type?: string(name='Type', description='The type of the operation. Valid values:

*   SaveErrorData', example='SaveErrorData'),
    }
  ](name='ErrorHandlers', description='The operations that you can perform after the rule-based check fails.'),
  id?: long(name='Id', description='The rule ID.

This parameter is required.', example='100001'),
  name?: string(name='Name', description='The name of the rule. The name can be up to 255 characters in length and can contain digits, letters, and punctuation marks.', example='The table cannot be empty.'),
  projectId?: long(name='ProjectId', description='This parameter is required.'),
  samplingConfig?: {
    metric?: string(name='Metric', description='The metrics used for sampling. You can leave this parameter empty if you use a rule template. Valid values:

*   Count: the number of rows in the table.
*   Min: the minimum value of the field.
*   Max: the maximum value of the field.
*   Avg: the average value of the field.
*   DistinctCount: the number of unique values of the field after deduplication.
*   DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
*   DuplicatedCount: the number of duplicated values of the field.
*   DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
*   TableSize: the table size.
*   NullValueCount: the number of rows in which the field value is null.
*   NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
*   GroupCount: the field value and the number of rows for each field value.
*   CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
*   CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
*   UserDefinedSql: indicates that data is sampled by executing custom SQL statements.', example='Min'),
    metricParameters?: string(name='MetricParameters', description='The parameters required for sampling.', example='{ "Columns": [ "id", "name" ] , "SQL": "select count(1) from table;"}'),
    samplingFilter?: string(name='SamplingFilter', description='The statements that are used to filter unnecessary data during sampling. The statements can be up to 16,777,215 characters in length.', example='id IS NULL'),
    settingConfig?: string(name='SettingConfig', description='The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.', example='SET odps.sql.udf.timeout=600s; 
SET odps.sql.python.version=cp27;'),
  }(name='SamplingConfig', description='The sampling settings.'),
  severity?: string(name='Severity', description='The strength of the rule. Valid values:

*   Normal
*   High', example='High'),
  templateCode?: string(name='TemplateCode', description='The ID of the template used by the rule.', example='system::user_defined'),
}

model UpdateDataQualityRuleShrinkRequest {
  checkingConfigShrink?: string(name='CheckingConfig', description='The check settings for sample data.'),
  description?: string(name='Description', description='The description of the rule. The description can be up to 500 characters in length.', example='this is a odps _sql task'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the rule.', example='true'),
  errorHandlersShrink?: string(name='ErrorHandlers', description='The operations that you can perform after the rule-based check fails.'),
  id?: long(name='Id', description='The rule ID.

This parameter is required.', example='100001'),
  name?: string(name='Name', description='The name of the rule. The name can be up to 255 characters in length and can contain digits, letters, and punctuation marks.', example='The table cannot be empty.'),
  projectId?: long(name='ProjectId', description='This parameter is required.'),
  samplingConfigShrink?: string(name='SamplingConfig', description='The sampling settings.'),
  severity?: string(name='Severity', description='The strength of the rule. Valid values:

*   Normal
*   High', example='High'),
  templateCode?: string(name='TemplateCode', description='The ID of the template used by the rule.', example='system::user_defined'),
}

model UpdateDataQualityRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateDataQualityRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataQualityRuleResponseBody(name='body'),
}

/**
 * @summary Updates a data quality monitoring rule.
 *
 * @param tmpReq UpdateDataQualityRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataQualityRuleResponse
 */
async function updateDataQualityRuleWithOptions(tmpReq: UpdateDataQualityRuleRequest, runtime: Util.RuntimeOptions): UpdateDataQualityRuleResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDataQualityRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.checkingConfig)) {
    request.checkingConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.checkingConfig, 'CheckingConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.errorHandlers)) {
    request.errorHandlersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.errorHandlers, 'ErrorHandlers', 'json');
  }
  if (!Util.isUnset(tmpReq.samplingConfig)) {
    request.samplingConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.samplingConfig, 'SamplingConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkingConfigShrink)) {
    body['CheckingConfig'] = request.checkingConfigShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.enabled)) {
    body['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.errorHandlersShrink)) {
    body['ErrorHandlers'] = request.errorHandlersShrink;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.samplingConfigShrink)) {
    body['SamplingConfig'] = request.samplingConfigShrink;
  }
  if (!Util.isUnset(request.severity)) {
    body['Severity'] = request.severity;
  }
  if (!Util.isUnset(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataQualityRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates a data quality monitoring rule.
 *
 * @param request UpdateDataQualityRuleRequest
 * @return UpdateDataQualityRuleResponse
 */
async function updateDataQualityRule(request: UpdateDataQualityRuleRequest): UpdateDataQualityRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataQualityRuleWithOptions(request, runtime);
}

model UpdateDataQualityRuleTemplateRequest {
  checkingConfig?: {
    referencedSamplesFilter?: string(name='ReferencedSamplesFilter', description='The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference samples and perform aggregate operations on the reference values. In this example, an expression is used to specify the query method of referenced samples.', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
    type?: string(name='Type', description='The type of the monitored object. Valid values:

*   Table', example='Table'),
  }(name='CheckingConfig', description='The check settings for sample data.'),
  code?: string(name='Code', description='The code for the template.

This parameter is required.', example='USER_DEFINED:123'),
  directoryPath?: string(name='DirectoryPath', description='The directory in which the template is stored. Slashes (/) are used to separate directory levels. The name of each directory level can be up to 1,024 characters in length. It cannot contain whitespace characters or slashes (/).', example='/ods/order_data'),
  name?: string(name='Name', description='The name of the template. The name can be up to 512 characters in length and can contain digits, letters, and punctuation marks.', example='Table row Count Verification'),
  projectId?: long(name='ProjectId', description='This parameter is required.'),
  samplingConfig?: {
    metric?: string(name='Metric', description='The metrics used for sampling. Valid values:

*   Count: the number of rows in the table.
*   Min: the minimum value of the field.
*   Max: the maximum value of the field.
*   Avg: the average value of the field.
*   DistinctCount: the number of unique values of the field after deduplication.
*   DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
*   DuplicatedCount: the number of duplicated values of the field.
*   DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
*   TableSize: the table size.
*   NullValueCount: the number of rows in which the field value is null.
*   NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
*   GroupCount: the field value and the number of rows for each field value.
*   CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
*   CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
*   UserDefinedSql: indicates that data is sampled by executing custom SQL statements.', example='Max'),
    metricParameters?: string(name='MetricParameters', description='The parameters required for sampling.', example='{"SQL": "select count(1) from table;"}'),
    settingConfig?: string(name='SettingConfig', description='The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.', example='SET odps.sql.udf.timeout=600s; 
SET odps.sql.python.version=cp27;'),
  }(name='SamplingConfig', description='The sampling settings.'),
}

model UpdateDataQualityRuleTemplateShrinkRequest {
  checkingConfigShrink?: string(name='CheckingConfig', description='The check settings for sample data.'),
  code?: string(name='Code', description='The code for the template.

This parameter is required.', example='USER_DEFINED:123'),
  directoryPath?: string(name='DirectoryPath', description='The directory in which the template is stored. Slashes (/) are used to separate directory levels. The name of each directory level can be up to 1,024 characters in length. It cannot contain whitespace characters or slashes (/).', example='/ods/order_data'),
  name?: string(name='Name', description='The name of the template. The name can be up to 512 characters in length and can contain digits, letters, and punctuation marks.', example='Table row Count Verification'),
  projectId?: long(name='ProjectId', description='This parameter is required.'),
  samplingConfigShrink?: string(name='SamplingConfig', description='The sampling settings.'),
}

model UpdateDataQualityRuleTemplateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='691CA452-D37A-4ED0-9441'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateDataQualityRuleTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataQualityRuleTemplateResponseBody(name='body'),
}

/**
 * @summary Updates a data quality monitoring rule template.
 *
 * @param tmpReq UpdateDataQualityRuleTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataQualityRuleTemplateResponse
 */
async function updateDataQualityRuleTemplateWithOptions(tmpReq: UpdateDataQualityRuleTemplateRequest, runtime: Util.RuntimeOptions): UpdateDataQualityRuleTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDataQualityRuleTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.checkingConfig)) {
    request.checkingConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.checkingConfig, 'CheckingConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.samplingConfig)) {
    request.samplingConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.samplingConfig, 'SamplingConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkingConfigShrink)) {
    body['CheckingConfig'] = request.checkingConfigShrink;
  }
  if (!Util.isUnset(request.code)) {
    body['Code'] = request.code;
  }
  if (!Util.isUnset(request.directoryPath)) {
    body['DirectoryPath'] = request.directoryPath;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.samplingConfigShrink)) {
    body['SamplingConfig'] = request.samplingConfigShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataQualityRuleTemplate',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates a data quality monitoring rule template.
 *
 * @param request UpdateDataQualityRuleTemplateRequest
 * @return UpdateDataQualityRuleTemplateResponse
 */
async function updateDataQualityRuleTemplate(request: UpdateDataQualityRuleTemplateRequest): UpdateDataQualityRuleTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataQualityRuleTemplateWithOptions(request, runtime);
}

model UpdateDataQualityScanRequest {
  computeResource?: {
    envType?: string(name='EnvType', description='Workspace environment of the compute engine. Valid values:

*   Prod
*   Dev', example='Prod'),
    name?: string(name='Name', description='The name of the compute engine, which is a unique identifier.', example='auto_createAlertRule_Finished_1kUTk6'),
    runtime?: {
      engine?: string(name='Engine', description='The engine type. These settings are only supported for the EMR compute engine.This setting? Valid values:

*   Hive: Hive SQL
*   Spark: Spark SQL
*   Kyuubi', example='Hive'),
      hiveConf?: map[string]any(name='HiveConf', description='Additional Hive engine parameters. Currently, only the mapreduce.job.queuename parameter is supported.', example='mapreduce.job.queuename=dq_queue'),
      sparkConf?: map[string]any(name='SparkConf', description='Additional Spark engine parameters. Currently, only the spark.yarn.queue parameter is supported.', example='spark.yarn.queue=dq_queue'),
    }(name='Runtime', description='Additional settings for the compute engine.'),
  }(name='ComputeResource', description='The compute engine used during execution. If it\\\\"s not specified, the data source connection defined in the Spec will be used.'),
  description?: string(name='Description', description='Description of the data quality monitor.', example='Daily data quality scanning of ods tables.'),
  hooks?: [ 
    {
      condition?: string(name='Condition', description='The hook trigger condition. When this condition is met, the hook is triggered. Valid expression format:

Specifies multiple combinations of rule severity levels and rule validation statuses, such as `results.any { r -> r.status == \\\\"Fail\\\\" && r.rule.severity == \\\\"Normal\\\\" || r.status == \\\\"Error\\\\" && r.rule.severity == \\\\"High\\\\" || r.status == \\\\"Warn\\\\" && r.rule.severity == \\\\"High\\\\" }`. This means the hook is triggered if any executed rule has Fail with Normal severity, Error with High severity, or Warn with High severity. The severity values must match those defined in the Spec. The status values must match those in DataQualityResult.', example='results.any { r -> r.status == \\\\"Fail\\\\" && r.rule.severity == \\\\"Normal\\\\" || r.status == \\\\"Error\\\\" && r.rule.severity == \\\\"High\\\\" || r.status == \\\\"Warn\\\\" && r.rule.severity == \\\\"High\\\\" }'),
      type?: string(name='Type', description='The type of the hook. Valid values:

*   BlockTaskInstance: Block the scheduling of the task instance.', example='BlockTaskInstance'),
    }
  ](name='Hooks', description='The hook configuration after the data quality monitor stops.'),
  id?: long(name='Id', description='The ID of the data quality monitor.', example='10001'),
  name?: string(name='Name', description='The name of the data quality monitor.', example='data_quality_scan_001'),
  owner?: string(name='Owner', description='The user ID of the owner of the data quality monitor.', example='231263586109857423'),
  parameters?: [ 
    {
      name?: string(name='Name', description='The parameter name.', example='temp_237669.zip_byBwm_1734661241752'),
      value?: string(name='Value', description='The parameter value.', example='smtp.qiye.aliyun.com'),
    }
  ](name='Parameters', description='The definition of execution parameters for the data quality monitor.'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace where the data quality monitor resides. You can obtain the workspace ID by calling the [ListProjects](https://help.aliyun.com/document_detail/2852607.html) operation.', example='101'),
  runtimeResource?: {
    cu?: float(name='Cu', description='The default number of CUs configured for task running.', example='0.25'),
    id?: string(name='Id', description='The ID of the resource group.', example='20315'),
    image?: string(name='Image', description='The image ID of the task runtime configuration.', example='i-xxxxxx'),
  }(name='RuntimeResource', description='The resource group used during the execution of the data quality monitor.'),
  spec?: string(name='Spec', description='The Spec code of the data quality monitoring content. For more information, see [Data quality Spec configuration description](https://help.aliyun.com/document_detail/2963394.html).', example='{
    "datasets": [
        {
            "type": "Table",
            "dataSource": {
                "name": "odps_first",
                "envType": "Prod"
            },
            "tables": [
                "ods_d_user_info"
            ],
            "filter": "pt = $[yyyymmdd-1]"
        }
    ],
    "rules": [
        {
            "assertion": "row_count > 0"
        }, {
            "templateId": "SYSTEM:field:null_value:fixed",
            "pass": "when = 0",
            "name": "The id cannot be empty.",
            "severity": "High",
             "identity": "a-customized-data-quality-rule-uuid"
        }
    ]
}'),
  trigger?: {
    taskIds?: [ long ](name='TaskIds', description='If the trigger mode is BySchedule, the ID of the scheduling task that triggers the monitor must be configured.'),
    type?: string(name='Type', description='The trigger mode of the data quality monitor. Valid values:

*   ByManual: Manually triggered. Default setting.
*   BySchedule: Triggered by a scheduled task instance.', example='BySchedule'),
  }(name='Trigger', description='Trigger settings for the data quality monitor.'),
}

model UpdateDataQualityScanShrinkRequest {
  computeResourceShrink?: string(name='ComputeResource', description='The compute engine used during execution. If it\\\\"s not specified, the data source connection defined in the Spec will be used.'),
  description?: string(name='Description', description='Description of the data quality monitor.', example='Daily data quality scanning of ods tables.'),
  hooksShrink?: string(name='Hooks', description='The hook configuration after the data quality monitor stops.'),
  id?: long(name='Id', description='The ID of the data quality monitor.', example='10001'),
  name?: string(name='Name', description='The name of the data quality monitor.', example='data_quality_scan_001'),
  owner?: string(name='Owner', description='The user ID of the owner of the data quality monitor.', example='231263586109857423'),
  parametersShrink?: string(name='Parameters', description='The definition of execution parameters for the data quality monitor.'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace where the data quality monitor resides. You can obtain the workspace ID by calling the [ListProjects](https://help.aliyun.com/document_detail/2852607.html) operation.', example='101'),
  runtimeResourceShrink?: string(name='RuntimeResource', description='The resource group used during the execution of the data quality monitor.'),
  spec?: string(name='Spec', description='The Spec code of the data quality monitoring content. For more information, see [Data quality Spec configuration description](https://help.aliyun.com/document_detail/2963394.html).', example='{
    "datasets": [
        {
            "type": "Table",
            "dataSource": {
                "name": "odps_first",
                "envType": "Prod"
            },
            "tables": [
                "ods_d_user_info"
            ],
            "filter": "pt = $[yyyymmdd-1]"
        }
    ],
    "rules": [
        {
            "assertion": "row_count > 0"
        }, {
            "templateId": "SYSTEM:field:null_value:fixed",
            "pass": "when = 0",
            "name": "The id cannot be empty.",
            "severity": "High",
             "identity": "a-customized-data-quality-rule-uuid"
        }
    ]
}'),
  triggerShrink?: string(name='Trigger', description='Trigger settings for the data quality monitor.'),
}

model UpdateDataQualityScanResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A1****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model UpdateDataQualityScanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataQualityScanResponseBody(name='body'),
}

/**
 * @summary Updates a data quality monitor.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq UpdateDataQualityScanRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataQualityScanResponse
 */
async function updateDataQualityScanWithOptions(tmpReq: UpdateDataQualityScanRequest, runtime: Util.RuntimeOptions): UpdateDataQualityScanResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDataQualityScanShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.computeResource)) {
    request.computeResourceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.computeResource, 'ComputeResource', 'json');
  }
  if (!Util.isUnset(tmpReq.hooks)) {
    request.hooksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hooks, 'Hooks', 'json');
  }
  if (!Util.isUnset(tmpReq.parameters)) {
    request.parametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.parameters, 'Parameters', 'json');
  }
  if (!Util.isUnset(tmpReq.runtimeResource)) {
    request.runtimeResourceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.runtimeResource, 'RuntimeResource', 'json');
  }
  if (!Util.isUnset(tmpReq.trigger)) {
    request.triggerShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.trigger, 'Trigger', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.computeResourceShrink)) {
    body['ComputeResource'] = request.computeResourceShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.hooksShrink)) {
    body['Hooks'] = request.hooksShrink;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.parametersShrink)) {
    body['Parameters'] = request.parametersShrink;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.runtimeResourceShrink)) {
    body['RuntimeResource'] = request.runtimeResourceShrink;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  if (!Util.isUnset(request.triggerShrink)) {
    body['Trigger'] = request.triggerShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataQualityScan',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates a data quality monitor.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request UpdateDataQualityScanRequest
 * @return UpdateDataQualityScanResponse
 */
async function updateDataQualityScan(request: UpdateDataQualityScanRequest): UpdateDataQualityScanResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataQualityScanWithOptions(request, runtime);
}

model UpdateDataQualityTemplateRequest {
  id?: string(name='Id', description='The ID of the custom rule template.', example='USER_DEFINED:2001'),
  owner?: string(name='Owner', description='The account ID of the owner.', example='95279527****'),
  projectId?: long(name='ProjectId', description='The project ID.', example='100001'),
  spec?: string(name='Spec', description='Detailed configuration Spec code of the rule template. For more information, see [Data quality Spec configuration description](~2963394~).', example='{
    "assertion": "anomaly detection fro id_not_null_cnt",
    "id_not_null_cnt": {
        "query": "SELECT COUNT(*) AS cnt FROM ${tableName} WHERE dt = \\\\"$[yyyymmdd-1]\\\\";"
    },
    "identity": "819cf1f8-29be-4f94-a9d0-c5c06c0c3d2a"
}'),
}

model UpdateDataQualityTemplateResponseBody = {
  requestId?: string(name='RequestId', description='The API request ID, which is generated as a UUID.', example='0bc14115***159376359'),
  success?: boolean(name='Success', description='Indicates whether the rule template is updated.', example='true'),
}

model UpdateDataQualityTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataQualityTemplateResponseBody(name='body'),
}

/**
 * @summary Updates a data quality rule template in a project
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request UpdateDataQualityTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataQualityTemplateResponse
 */
async function updateDataQualityTemplateWithOptions(request: UpdateDataQualityTemplateRequest, runtime: Util.RuntimeOptions): UpdateDataQualityTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.owner)) {
    query['Owner'] = request.owner;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataQualityTemplate',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates a data quality rule template in a project
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request UpdateDataQualityTemplateRequest
 * @return UpdateDataQualityTemplateResponse
 */
async function updateDataQualityTemplate(request: UpdateDataQualityTemplateRequest): UpdateDataQualityTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataQualityTemplateWithOptions(request, runtime);
}

model UpdateDataSourceRequest {
  connectionProperties?: string(name='ConnectionProperties', description='The connection configurations of the data source, including the connection address, access identity, and environment information. The envType parameter specifies the environment in which the data source is used. Valid values of the envType parameter:

*   Dev: development environment
*   Prod: production environment

The parameters that you need to configure for the data source vary based on the mode in which the data source is added. For more information, see [Data source connection information (ConnectionProperties)](https://help.aliyun.com/document_detail/2852465.html).

This parameter is required.', example='{
	"envType": "Prod",
	"regionId": "cn-beijing",
    "instanceId": "hgprecn-cn-x0r3oun4k001",
    "database": "testdb",
    "securityProtocol": "authTypeNone",
    "authType": "Executor",
    "authIdentity": "1107550004253538"
}'),
  connectionPropertiesMode?: string(name='ConnectionPropertiesMode', description='The mode in which the data source is added. The mode varies based on the data source type. Valid values:

*   InstanceMode: instance mode
*   UrlMode: connection string mode', example='UrlMode'),
  description?: string(name='Description', description='The description of the data source. The description cannot exceed 3,000 characters in length.', example='test'),
  id?: long(name='Id', description='The data source ID.

This parameter is required.', example='16033'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='5678'),
}

model UpdateDataSourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='102E8E24-0387-531D-8A75-1C0AE7DD03E5'),
  success?: boolean(name='Success', description='Whether the data source has been modified:

- true: Yes
- false: no', example='true'),
}

model UpdateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSourceResponseBody(name='body'),
}

/**
 * @summary Modifies a data source by ID.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Tenant Administrator, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request UpdateDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataSourceResponse
 */
async function updateDataSourceWithOptions(request: UpdateDataSourceRequest, runtime: Util.RuntimeOptions): UpdateDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionProperties)) {
    query['ConnectionProperties'] = request.connectionProperties;
  }
  if (!Util.isUnset(request.connectionPropertiesMode)) {
    query['ConnectionPropertiesMode'] = request.connectionPropertiesMode;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataSource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies a data source by ID.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Tenant Administrator, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request UpdateDataSourceRequest
 * @return UpdateDataSourceResponse
 */
async function updateDataSource(request: UpdateDataSourceRequest): UpdateDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataSourceWithOptions(request, runtime);
}

model UpdateFileRequest {
  advancedSettings?: string(name='AdvancedSettings', example='{"queue":"default","SPARK_CONF":"--conf spark.driver.memory=2g"}'),
  applyScheduleImmediately?: boolean(name='ApplyScheduleImmediately', example='true'),
  autoParsing?: boolean(name='AutoParsing', example='true'),
  autoRerunIntervalMillis?: int32(name='AutoRerunIntervalMillis', example='120000'),
  autoRerunTimes?: int32(name='AutoRerunTimes', example='3'),
  connectionName?: string(name='ConnectionName', example='odps_source'),
  content?: string(name='Content', example='SELECT "1";'),
  cronExpress?: string(name='CronExpress', example='00 00-59/5 1-23 * * ?'),
  cycleType?: string(name='CycleType', example='NOT_DAY'),
  dependentNodeIdList?: string(name='DependentNodeIdList', example='5,10,15,20'),
  dependentType?: string(name='DependentType', example='USER_DEFINE'),
  endEffectDate?: long(name='EndEffectDate', example='4155787800000'),
  fileDescription?: string(name='FileDescription', example='Here is the file description'),
  fileFolderPath?: string(name='FileFolderPath', example='Business_process/First_Business_Process/data_integration/Folder_1/Folder_2'),
  fileId?: long(name='FileId', description='This parameter is required.', example='100000001'),
  fileName?: string(name='FileName', example='ods_user_info_d'),
  ignoreParentSkipRunningProperty?: boolean(name='IgnoreParentSkipRunningProperty', example='true'),
  imageId?: string(name='ImageId', example='m-uf6d7npxk1hhek8ng0cb'),
  inputList?: string(name='InputList', example='project_root,project.file1,project.001_out'),
  inputParameters?: string(name='InputParameters', example='[{"ValueSource": "project_001.first_node:bizdate_param","ParameterName": "bizdate_input"}]'),
  outputList?: string(name='OutputList', example='dw_project.ods_user_info_d'),
  outputParameters?: string(name='OutputParameters', example='[{"Type": 1,"Value": "${bizdate}","ParameterName": "bizdate_param"}]'),
  owner?: string(name='Owner', example='18023848927592'),
  paraValue?: string(name='ParaValue', example='x=a y=b z=c'),
  projectId?: long(name='ProjectId', example='100001'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
  rerunMode?: string(name='RerunMode', example='ALL_ALLOWED'),
  resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', example='default_group'),
  schedulerType?: string(name='SchedulerType', example='NORMAL'),
  startEffectDate?: long(name='StartEffectDate', example='936923400000'),
  startImmediately?: boolean(name='StartImmediately', example='true'),
  stop?: boolean(name='Stop', example='false'),
  timeout?: int32(name='Timeout', example='1'),
}

model UpdateFileResponseBody = {
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFGH-IJKLMNOPQ'),
  success?: boolean(name='Success', example='true'),
}

model UpdateFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFileResponseBody(name='body'),
}

/**
 * @param request UpdateFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateFileResponse
 */
async function updateFileWithOptions(request: UpdateFileRequest, runtime: Util.RuntimeOptions): UpdateFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.advancedSettings)) {
    body['AdvancedSettings'] = request.advancedSettings;
  }
  if (!Util.isUnset(request.applyScheduleImmediately)) {
    body['ApplyScheduleImmediately'] = request.applyScheduleImmediately;
  }
  if (!Util.isUnset(request.autoParsing)) {
    body['AutoParsing'] = request.autoParsing;
  }
  if (!Util.isUnset(request.autoRerunIntervalMillis)) {
    body['AutoRerunIntervalMillis'] = request.autoRerunIntervalMillis;
  }
  if (!Util.isUnset(request.autoRerunTimes)) {
    body['AutoRerunTimes'] = request.autoRerunTimes;
  }
  if (!Util.isUnset(request.connectionName)) {
    body['ConnectionName'] = request.connectionName;
  }
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.cronExpress)) {
    body['CronExpress'] = request.cronExpress;
  }
  if (!Util.isUnset(request.cycleType)) {
    body['CycleType'] = request.cycleType;
  }
  if (!Util.isUnset(request.dependentNodeIdList)) {
    body['DependentNodeIdList'] = request.dependentNodeIdList;
  }
  if (!Util.isUnset(request.dependentType)) {
    body['DependentType'] = request.dependentType;
  }
  if (!Util.isUnset(request.endEffectDate)) {
    body['EndEffectDate'] = request.endEffectDate;
  }
  if (!Util.isUnset(request.fileDescription)) {
    body['FileDescription'] = request.fileDescription;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.ignoreParentSkipRunningProperty)) {
    body['IgnoreParentSkipRunningProperty'] = request.ignoreParentSkipRunningProperty;
  }
  if (!Util.isUnset(request.imageId)) {
    body['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.inputList)) {
    body['InputList'] = request.inputList;
  }
  if (!Util.isUnset(request.inputParameters)) {
    body['InputParameters'] = request.inputParameters;
  }
  if (!Util.isUnset(request.outputList)) {
    body['OutputList'] = request.outputList;
  }
  if (!Util.isUnset(request.outputParameters)) {
    body['OutputParameters'] = request.outputParameters;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.paraValue)) {
    body['ParaValue'] = request.paraValue;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.rerunMode)) {
    body['RerunMode'] = request.rerunMode;
  }
  if (!Util.isUnset(request.resourceGroupIdentifier)) {
    body['ResourceGroupIdentifier'] = request.resourceGroupIdentifier;
  }
  if (!Util.isUnset(request.schedulerType)) {
    body['SchedulerType'] = request.schedulerType;
  }
  if (!Util.isUnset(request.startEffectDate)) {
    body['StartEffectDate'] = request.startEffectDate;
  }
  if (!Util.isUnset(request.startImmediately)) {
    body['StartImmediately'] = request.startImmediately;
  }
  if (!Util.isUnset(request.stop)) {
    body['Stop'] = request.stop;
  }
  if (!Util.isUnset(request.timeout)) {
    body['Timeout'] = request.timeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFile',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request UpdateFileRequest
 * @return UpdateFileResponse
 */
async function updateFile(request: UpdateFileRequest): UpdateFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFileWithOptions(request, runtime);
}

model UpdateFolderRequest {
  folderId?: string(name='FolderId', description='This parameter is required.', example='2735c2c19d58'),
  folderName?: string(name='FolderName', description='This parameter is required.', example='MySecondFolder'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
}

model UpdateFolderResponseBody = {
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFolderResponseBody(name='body'),
}

/**
 * @param request UpdateFolderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateFolderResponse
 */
async function updateFolderWithOptions(request: UpdateFolderRequest, runtime: Util.RuntimeOptions): UpdateFolderResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.folderId)) {
    body['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.folderName)) {
    body['FolderName'] = request.folderName;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFolder',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request UpdateFolderRequest
 * @return UpdateFolderResponse
 */
async function updateFolder(request: UpdateFolderRequest): UpdateFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFolderWithOptions(request, runtime);
}

model UpdateFunctionRequest {
  id?: long(name='Id', description='The ID of the UDF.

This parameter is required.', example='463497880880954XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000'),
  spec?: string(name='Spec', description='The FlowSpec field information about the UDF. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.', example='{
    "version": "1.1.0",
    "kind": "Function",
    "spec": {
        "functions": [
            {
                "name": "FunctionName",
                "script": {
                    "content": "{\\\\"name\\\\": \\\\"FunctionName\\\\", \\\\"datasource\\\\": {\\\\"type\\\\": \\\\"odps\\\\", \\\\"name\\\\": \\\\"odps_first\\\\"}, \\\\"runtimeResource\\\\": {\\\\"resourceGroup\\\\": \\\\"S_res_group_XXXX_XXXX\\\\"}}",
                    "path": "XXX/OpenAPI/Function/FunctionName",
                    "runtime": {
                        "command": "ODPS_FUNCTION"
                    }
                },
                "datasource": {
                    "name": "odps_first",
                    "type": "odps"
                },
                "runtimeResource": {
                    "resourceGroup": "S_res_group_XXXX_XXXX"
                }
            }
        ]
    }
}'),
}

model UpdateFunctionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can troubleshoot issues based on the ID.', example='12123960-CB2C-5086-868E-C6C1D024XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true

false', example='true'),
}

model UpdateFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFunctionResponseBody(name='body'),
}

/**
 * @summary Updates the basic information about a user-defined function (UDF) in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateFunctionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateFunctionResponse
 */
async function updateFunctionWithOptions(request: UpdateFunctionRequest, runtime: Util.RuntimeOptions): UpdateFunctionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFunction',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the basic information about a user-defined function (UDF) in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateFunctionRequest
 * @return UpdateFunctionResponse
 */
async function updateFunction(request: UpdateFunctionRequest): UpdateFunctionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFunctionWithOptions(request, runtime);
}

model UpdateIDEEventResultRequest {
  checkResult?: string(name='CheckResult', example='OK'),
  checkResultTip?: string(name='CheckResultTip', example='Succeeded'),
  extensionCode?: string(name='ExtensionCode', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
  messageId?: string(name='MessageId', description='扩展点消息UUID', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model UpdateIDEEventResultResponseBody = {
  requestId?: string(name='RequestId', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model UpdateIDEEventResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIDEEventResultResponseBody(name='body'),
}

/**
 * @summary 回调扩展点消息的检查结果
 *
 * @param request UpdateIDEEventResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateIDEEventResultResponse
 */
async function updateIDEEventResultWithOptions(request: UpdateIDEEventResultRequest, runtime: Util.RuntimeOptions): UpdateIDEEventResultResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkResult)) {
    body['CheckResult'] = request.checkResult;
  }
  if (!Util.isUnset(request.checkResultTip)) {
    body['CheckResultTip'] = request.checkResultTip;
  }
  if (!Util.isUnset(request.extensionCode)) {
    body['ExtensionCode'] = request.extensionCode;
  }
  if (!Util.isUnset(request.messageId)) {
    body['MessageId'] = request.messageId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateIDEEventResult',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 回调扩展点消息的检查结果
 *
 * @param request UpdateIDEEventResultRequest
 * @return UpdateIDEEventResultResponse
 */
async function updateIDEEventResult(request: UpdateIDEEventResultRequest): UpdateIDEEventResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIDEEventResultWithOptions(request, runtime);
}

model UpdateMetaCollectionRequest {
  administrators?: [ string ](name='Administrators', description='The collection administrator IDs. This parameter is available only for data albums. The administrator must be an account within the same tenant.'),
  description?: string(name='Description', example='new comment'),
  id?: string(name='Id', description='The collection ID.

This parameter is required.', example='category.123'),
  name?: string(name='Name', example='new_name'),
}

model UpdateMetaCollectionShrinkRequest {
  administratorsShrink?: string(name='Administrators', description='The collection administrator IDs. This parameter is available only for data albums. The administrator must be an account within the same tenant.'),
  description?: string(name='Description', example='new comment'),
  id?: string(name='Id', description='The collection ID.

This parameter is required.', example='category.123'),
  name?: string(name='Name', example='new_name'),
}

model UpdateMetaCollectionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='0E1C0122-F79F-5C26-B546-47A321691868'),
}

model UpdateMetaCollectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMetaCollectionResponseBody(name='body'),
}

/**
 * @summary Updates the information about a collection in Data Map, including the collection name, description, and administrator. Collections include categories and data albums. If you want to update the information about a data album, the account that you use must be attached the AliyunDataWorksFullAccess policy, or you are the data album creator or administrator.
 *
 * @param tmpReq UpdateMetaCollectionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateMetaCollectionResponse
 */
async function updateMetaCollectionWithOptions(tmpReq: UpdateMetaCollectionRequest, runtime: Util.RuntimeOptions): UpdateMetaCollectionResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateMetaCollectionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.administrators)) {
    request.administratorsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.administrators, 'Administrators', 'simple');
  }
  var query = {};
  if (!Util.isUnset(request.administratorsShrink)) {
    query['Administrators'] = request.administratorsShrink;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMetaCollection',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the information about a collection in Data Map, including the collection name, description, and administrator. Collections include categories and data albums. If you want to update the information about a data album, the account that you use must be attached the AliyunDataWorksFullAccess policy, or you are the data album creator or administrator.
 *
 * @param request UpdateMetaCollectionRequest
 * @return UpdateMetaCollectionResponse
 */
async function updateMetaCollection(request: UpdateMetaCollectionRequest): UpdateMetaCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMetaCollectionWithOptions(request, runtime);
}

model UpdateNodeRequest {
  id?: long(name='Id', description='The ID of the node.

This parameter is required.', example='652567824470354XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000'),
  spec?: string(name='Spec', description='{ "title": "CycleWorkflow Schema", "description": "the JSON schema that is used to configure the auto triggered workflow and nodes in the workflow", "type": "object", "required": [ "version", "kind", "spec" ], "properties": { "version": { "type": "string", "const": "1.1.0", "description": "the schema version. The value is fixed to 1.1.0" }, "kind": { "type": "string", "enum": [ "Workflow", "Node" ], "description": "the resource type" }, "spec": { "type": "object", "description": "the key configurations of the workflow", "required": [ "nodes" ], "properties": { "nodes": { "type": "array", "description": "the nodes in the workflow", "items": { "type": "object", "required": [ "name", "script" ], "properties": { "recurrence": { "type": "string", "enum": [ "Normal", "Pause", "Skip", "NoneAuto" ], "description": "the running mode of the node. Valid values: Normal, Pause, Skip, and NoneAuto" }, "id": { "type": "string", "description": "the node ID" }, "timeout": { "type": "integer", "minimum": 0, "description": "the timeout period. Unit: seconds" }, "instanceMode": { "type": "string", "enum": [ "T+1", "Immediately" ], "description": "the instance generation mode. Valid values: T+1 and Immediately" }, "rerunMode": { "type": "string", "enum": [ "Allowed", "Denied", "FailureAllowed" ], "description": "the rerun mode. Valid values: AllAllowed, Denied, and FailureAllowed" }, "rerunTimes": { "type": "integer", "minimum": 0, "description": "the maximum number of reruns allowed after a failure" }, "rerunInterval": { "type": "integer", "minimum": 0, "description": "the rerun interval. Unit: seconds" }, "datasource": { "type": "object", "description": "the configurations of the data source", "required": [ "name", "type" ], "properties": { "name": { "type": "string", "description": "the name of the data source" }, "type": { "type": "string", "enum": [ "odps" ], "description": "the type of the data source. Only MaxCompute data sources are supported" } } }, "script": { "type": "object", "description": "the script configurations of the node", "required": [ "path", "runtime" ], "properties": { "language": { "type": "string", "description": "the programming language of the script" }, "path": { "type": "string", "description": "the storage path of the script file. The storage path ends with the node name and does not require a file extension" }, "runtime": { "type": "object", "description": "the configurations of the runtime environment", "required": [ "command" ], "properties": { "command": { "type": "string", "enum": [ "ODPS_SQL" ], "Description": "the command" }, "cu": { "type": "string", "description": "the unit of the computing resource" } } } } }, "trigger": { "type": "object", "description": "the configurations of the node trigger", "required": [ "type" ], "properties": { "type": { "type": "string", "enum": [ "Scheduler", "Manual", "Streaming", "None" ], "description": "the trigger type. Valid values: Scheduler, Manual, Streaming, and None" }, "cron": { "type": "string", "description": "the cron expression, which is suitable for only auto triggered nodes" }, "startTime": { "type": "string", "format": "yyyy-MM-dd hh:mm:ss", "description": "the start time for scheduling" }, "endTime": { "type": "string", "format": "yyyy-MM-dd hh:mm:ss", "description": "the end time for scheduling" } } }, "runtimeResource": { "type": "object", "description": "the resource configurations for running", "required": [ "resourceGroup" ], "properties": { "resourceGroup": { "type": "string", "description": "the name of the resource group" } } }, "name": { "type": "string", "description": "the name of the node" }, "owner": { "type": "string", "description": "the node owner" }, "inputs": { "type": "object", "description": "the node input parameters", "properties": { "nodeOutputs": { "type": "array", "description": "the node dependencies", "items": { "type": "object", "required": [ "data" ], "properties": { "data": { "type": "string", "description": "the identifier of the node dependency" }, "refTableName": { "type": "string", "description": "the name of the table that is associated with the node. You must configure this parameter if the artifactType parameter is set to Table" }, "isDefault": { "type": "boolean", "description": "specifies whether the table is the default input table“ } } } } } }, "outputs": { "type": "object", "description": "the node output parameters", "properties": { "nodeOutputs": { "type": "array", "description": "the node dependencies", "items": { "type": "object", "required": [ "data" ], "properties": { "data": { "type": "string", "description": "the identifier of the node dependency" }, "refTableName": { "type": "string", "description": "the name of the table that is associated with the node. You must configure this parameter if the artifactType parameter is set to Table" }, "isDefault": { "type": "boolean", "description": "specifies whether the table is the default output table“ } } } } } } } } } } } } }

This parameter is required.', example='{
    "version": "1.1.0",
    "kind": "Node",
    "spec": {
        "nodes": [
            {
                "id": "860438872620113XXXX",
                "recurrence": "Normal",
                "timeout": 0,
                "instanceMode": "T+1",
                "rerunMode": "Allowed",
                "rerunTimes": 3,
                "rerunInterval": 180000,
                "datasource": {
                    "name": "odps_test",
                    "type": "odps"
                },
                "script": {
                    "path": "XX/OpenAPI_Test/odpsSQL_Test",
                    "runtime": {
                        "command": "ODPS_SQL"
                    },
                    "content": "select now();"
                },
                "trigger": {
                    "type": "Scheduler",
                    "cron": "00 00 00 * * ?",
                    "startTime": "1970-01-01 00:00:00",
                    "endTime": "9999-01-01 00:00:00",
                    "timezone": "Asia/Shanghai",
                    "delaySeconds": 0
                },
                "runtimeResource": {
                    "resourceGroup": "S_res_group_XXXX_XXXX"
                },
                "name": "odpsSQL_Test",
                "inputs": {
                    "nodeOutputs": [
                        {
                            "data": "lwttest_standard_root",
                            "artifactType": "NodeOutput"
                        }
                    ]
                },
                "outputs": {
                    "nodeOutputs": [
                        {
                            "data": "output_data",
                            "artifactType": "NodeOutput",
                            "refTableName": "odpsSQL_Test"
                        }
                    ]
                }
            }
        ],
        "flow": [
            {
                "nodeId": "860438872620113XXXX",
                "depends": [
                    {
                        "type": "Normal",
                        "output": "project_root"
                    }
                ]
            }
        ]
    }
}'),
}

model UpdateNodeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can troubleshoot issues based on the ID.', example='99EBE7CF-69C0-5089-BE3E-79563C31XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNodeResponseBody(name='body'),
}

/**
 * @summary Updates the basic information about a node in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateNodeResponse
 */
async function updateNodeWithOptions(request: UpdateNodeRequest, runtime: Util.RuntimeOptions): UpdateNodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNode',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the basic information about a node in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateNodeRequest
 * @return UpdateNodeResponse
 */
async function updateNode(request: UpdateNodeRequest): UpdateNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNodeWithOptions(request, runtime);
}

model UpdateProjectRequest {
  description?: string(name='Description', description='The description of the workspace.', example='Financial analysis group project data development'),
  devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', description='Specifies whether to enable the development environment. Valid values:

*   true: enables the development environment. In this case, the development environment is isolated from the production environment in the workspace.
*   false: disables the development environment. In this case, only the production environment is used in the workspace.', example='true'),
  devRoleDisabled?: boolean(name='DevRoleDisabled', description='Specifies whether to disable the Develop role. Valid values:

*   false (default)
*   true

Note: If you disable the Develop role, you cannot assume the Develop role to develop nodes in workflows and edit node code. The Develop role cannot be enabled again after it is disabled.', example='true'),
  displayName?: string(name='DisplayName', description='The display name of the workspace.', example='Sora financial analysis Space'),
  id?: long(name='Id', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the workspace management page to obtain the ID.

This parameter is used to determine the DataWorks workspaces used for this API call.

This parameter is required.', example='123456'),
  paiTaskEnabled?: boolean(name='PaiTaskEnabled', description='Specifies whether to enable scheduling of Platform for AI (PAI) tasks. Valid values:

*   true: enables scheduling of PAI tasks. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
*   false: disables scheduling of PAI tasks.', example='true'),
  status?: string(name='Status', description='Specifies whether to disable or enable the workspace. Valid values:

*   Available: enables the workspace.
*   Forbidden: disables the workspace.', example='Forbidden'),
}

model UpdateProjectResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request. It is used to locate logs and troubleshoot problems.', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
}

model UpdateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProjectResponseBody(name='body'),
}

/**
 * @summary Updates a DataWorks workspace.
 *
 * @param request UpdateProjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateProjectResponse
 */
async function updateProjectWithOptions(request: UpdateProjectRequest, runtime: Util.RuntimeOptions): UpdateProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.devEnvironmentEnabled)) {
    body['DevEnvironmentEnabled'] = request.devEnvironmentEnabled;
  }
  if (!Util.isUnset(request.devRoleDisabled)) {
    body['DevRoleDisabled'] = request.devRoleDisabled;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.paiTaskEnabled)) {
    body['PaiTaskEnabled'] = request.paiTaskEnabled;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProject',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates a DataWorks workspace.
 *
 * @param request UpdateProjectRequest
 * @return UpdateProjectResponse
 */
async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProjectWithOptions(request, runtime);
}

model UpdateResourceRequest {
  id?: long(name='Id', description='The ID of the file resource.

This parameter is required.', example='543217824470354XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000'),
  resourceFile?: string(name='ResourceFile'),
  spec?: string(name='Spec', description='The FlowSpec field information about the file resource. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.', example='{
    "version": "1.1.0",
    "kind": "Resource",
    "spec": {
        "fileResources": [
            {
                "name": "OpenAPI_Test_Resource.py",
                "script": {
                    "content": "",
                    "path": "XX/OpenAPI_Test/Resources_Test/OpenAPI_Test_Resource.py",
                    "runtime": {
                        "command": "ODPS_PYTHON"
                    }
                },
                "type": "python",
                "file": {
                    "storage": {}
                },
                "datasource": {
                    "name": "odps_first",
                    "type": "odps"
                }
            }
        ]
    }
}'),
}

model UpdateResourceAdvanceRequest {
  id?: long(name='Id', description='The ID of the file resource.

This parameter is required.', example='543217824470354XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000'),
  resourceFileObject?: readable(name='ResourceFile'),
  spec?: string(name='Spec', description='The FlowSpec field information about the file resource. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.', example='{
    "version": "1.1.0",
    "kind": "Resource",
    "spec": {
        "fileResources": [
            {
                "name": "OpenAPI_Test_Resource.py",
                "script": {
                    "content": "",
                    "path": "XX/OpenAPI_Test/Resources_Test/OpenAPI_Test_Resource.py",
                    "runtime": {
                        "command": "ODPS_PYTHON"
                    }
                },
                "type": "python",
                "file": {
                    "storage": {}
                },
                "datasource": {
                    "name": "odps_first",
                    "type": "odps"
                }
            }
        ]
    }
}'),
}

model UpdateResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can troubleshoot issues based on the ID.', example='4CDF7B72-020B-542A-8465-21CFFA81XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourceResponseBody(name='body'),
}

/**
 * @summary Updates the basic information about a file resource in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateResourceResponse
 */
async function updateResourceWithOptions(request: UpdateResourceRequest, runtime: Util.RuntimeOptions): UpdateResourceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.resourceFile)) {
    body['ResourceFile'] = request.resourceFile;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateResource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the basic information about a file resource in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateResourceRequest
 * @return UpdateResourceResponse
 */
async function updateResource(request: UpdateResourceRequest): UpdateResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateResourceWithOptions(request, runtime);
}

async function updateResourceAdvance(request: UpdateResourceAdvanceRequest, runtime: Util.RuntimeOptions): UpdateResourceResponse {
  // Step 0: init client
  var credentialModel: Credential.CredentialModel = null;
  if (Util.isUnset(@credential)) {
    throw {
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.empty(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApi.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'dataworks-public',
    RegionId = @regionId,
  };
  var authReq = new OpenApi.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApi.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new FileForm.FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var updateResourceReq = new UpdateResourceRequest{};
  OpenApiUtil.convert(request, updateResourceReq);

  if(!Util.isUnset(request.resourceFileObject)) {
    var tmpResp0: any = authClient.callApi(authParams, authReq, runtime);
    authResponse = Util.assertAsMap(tmpResp0);
    tmpBody = Util.assertAsMap(authResponse['body']);
    useAccelerate = Util.assertAsBoolean(tmpBody['UseAccelerate']);
    authResponseBody = Util.stringifyMapValue(tmpBody);
    fileObj = new FileForm.FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.resourceFileObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    updateResourceReq.resourceFile = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var updateResourceResp = updateResourceWithOptions(updateResourceReq, runtime);
  return updateResourceResp;
}

model UpdateResourceGroupRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='The ID of the new Alibaba Cloud resource group.', example='rg-aek2kqofrgXXXXX'),
  id?: string(name='Id', description='The ID of the resource group.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
  name?: string(name='Name', description='The new name that you want to change for the resource group.', example='common_resource_group'),
  remark?: string(name='Remark', description='The new remarks that you want to modify for the resource group.', example='Create a common resource group for common tasks'),
}

model UpdateResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourceGroupResponseBody(name='body'),
}

/**
 * @summary Updates basic information about a resource group.
 *
 * @description You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 *
 * @param request UpdateResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateResourceGroupResponse
 */
async function updateResourceGroupWithOptions(request: UpdateResourceGroupRequest, runtime: Util.RuntimeOptions): UpdateResourceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.aliyunResourceGroupId)) {
    body['AliyunResourceGroupId'] = request.aliyunResourceGroupId;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateResourceGroup',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates basic information about a resource group.
 *
 * @description You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 *
 * @param request UpdateResourceGroupRequest
 * @return UpdateResourceGroupResponse
 */
async function updateResourceGroup(request: UpdateResourceGroupRequest): UpdateResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateResourceGroupWithOptions(request, runtime);
}

model UpdateRouteRequest {
  destinationCidr?: string(name='DestinationCidr', description='The destination CIDR block of the route that you want to update.

This parameter is required.', example='192.168.0.0/16'),
  id?: long(name='Id', description='The route ID of the network resource.

This parameter is required.', example='1000'),
}

model UpdateRouteResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRouteResponseBody(name='body'),
}

/**
 * @summary Updates the information about a route.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request UpdateRouteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateRouteResponse
 */
async function updateRouteWithOptions(request: UpdateRouteRequest, runtime: Util.RuntimeOptions): UpdateRouteResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.destinationCidr)) {
    body['DestinationCidr'] = request.destinationCidr;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRoute',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the information about a route.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request UpdateRouteRequest
 * @return UpdateRouteResponse
 */
async function updateRoute(request: UpdateRouteRequest): UpdateRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRouteWithOptions(request, runtime);
}

model UpdateTableBusinessMetadataRequest {
  id?: string(name='Id', description='The data table ID. You can call the ListTables operation to query the ID.

This parameter is required.', example='maxcompute-table:123456XXX::test_project::test_tbl
dlf-table:123456XXX:test_catalog:test_db::test_tbl
hms-table:c-abc123xxx::test_db::test_tbl
holo-table:h-abc123xxx::test_db:test_schema:test_tbl'),
  readme?: string(name='Readme', example='## introduction'),
}

model UpdateTableBusinessMetadataResponseBody = {
  requestId?: string(name='RequestId', example='7C352CB7-CD88-XXXXXXX'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTableBusinessMetadataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTableBusinessMetadataResponseBody(name='body'),
}

/**
 * @summary Updates the business metadata of a table in Data Map. Currently, only the usage notes of a table can be updated.
 *
 * @param request UpdateTableBusinessMetadataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateTableBusinessMetadataResponse
 */
async function updateTableBusinessMetadataWithOptions(request: UpdateTableBusinessMetadataRequest, runtime: Util.RuntimeOptions): UpdateTableBusinessMetadataResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.readme)) {
    body['Readme'] = request.readme;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTableBusinessMetadata',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the business metadata of a table in Data Map. Currently, only the usage notes of a table can be updated.
 *
 * @param request UpdateTableBusinessMetadataRequest
 * @return UpdateTableBusinessMetadataResponse
 */
async function updateTableBusinessMetadata(request: UpdateTableBusinessMetadataRequest): UpdateTableBusinessMetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTableBusinessMetadataWithOptions(request, runtime);
}

model UpdateTaskRequest {
  clientUniqueCode?: string(name='ClientUniqueCode', description='The unique code of the client. This code uniquely identifies a task. This parameter is used to create a task asynchronously and implement the idempotence of the task. If you do not specify this parameter when you create the task, the system automatically generates a unique code. The unique code is uniquely associated with the task ID. If you specify this parameter when you update or delete the task, the value of this parameter must be the unique code that is used to create the task.', example='Task_0bc5213917368545132902xxxxxxxx'),
  dataSource?: {
    name?: string(name='Name', description='The name of the data source.', example='odps_test'),
  }(name='DataSource', description='The information about the associated data source.'),
  dependencies?: [ 
    {
      type?: string(name='Type', description='The dependency type. Valid values:

*   CrossCycleDependsOnChildren: Depends on level-1 downstream nodes across cycles
*   CrossCycleDependsOnSelf: Depends on itself across cycles.
*   CrossCycleDependsOnOtherNode: Depends on other nodes across cycles.
*   Normal: Depends on nodes in the same cycle.

This parameter is required.', example='Normal'),
      upstreamOutput?: string(name='UpstreamOutput', description='The output identifier of the upstream task. (This parameter is returned only if `Normal` is set and the node input is configured.)', example='pre.odps_sql_demo_0'),
      upstreamTaskId?: long(name='UpstreamTaskId', description='The ID of the upstream task. (This parameter is returned only if `Normal` or `CrossCycleDependsOnOtherNode` is set and the node input is not configured.)', example='1234'),
    }
  ](name='Dependencies', description='The dependency information.'),
  description?: string(name='Description', description='The description of the task.', example='test'),
  envType?: string(name='EnvType', description='The project environment.

*   Prod
*   Dev', example='Prod'),
  id?: long(name='Id', description='The task ID.

This parameter is required.', example='1234'),
  inputs?: {
    variables?: [ 
      {
        name?: string(name='Name', description='The name of the variable.', example='key1'),
        type?: string(name='Type', description='The type. Valid values:

*   Constant: constant.
*   PassThrough: node output.
*   System: variable.
*   NodeOutput: script output.

This parameter is required.', example='Constant'),
        value?: string(name='Value', description='The value of the variable.', example='value1'),
      }
    ](name='Variables', description='The variables.'),
  }(name='Inputs', description='The input information.'),
  instanceMode?: string(name='InstanceMode', description='The instance generation mode. Valid values:

*   T+1: the next day
*   Immediately', example='T+1'),
  name?: string(name='Name', description='Name.', example='SQL node'),
  outputs?: {
    taskOutputs?: [ 
      {
        output?: string(name='Output', description='The identifier of the output.', example='pre.odps_sql_demo_0'),
      }
    ](name='TaskOutputs', description='The task outputs.'),
    variables?: [ 
      {
        name?: string(name='Name', description='The name of the variable.', example='key1'),
        type?: string(name='Type', description='The type. Valid values:

*   Constant: constant.
*   PassThrough: node output.
*   System: variable.
*   NodeOutput: script output.

This parameter is required.', example='Constant'),
        value?: string(name='Value', description='The value of the variable.', example='value1'),
      }
    ](name='Variables', description='The variables.'),
  }(name='Outputs', description='The output information.'),
  owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
  rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: seconds.', example='60'),
  rerunMode?: string(name='RerunMode', description='The rerun mode. Valid values:

*   AllDenied: The task cannot be rerun.
*   FailureAllowed: The task can be rerun only after it fails.
*   AllAllowed: The task can always be rerun.', example='AllAllowed'),
  rerunTimes?: int32(name='RerunTimes', description='The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.', example='3'),
  runtimeResource?: {
    cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
    image?: string(name='Image', description='The image ID used in the task runtime configuration.', example='i-xxxxxx'),
    resourceGroupId?: string(name='ResourceGroupId', description='The identifier of the scheduling resource group used in the task runtime configuration.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
  }(name='RuntimeResource', description='Runtime environment configurations, such as resource group information.'),
  script?: {
    content?: string(name='Content', description='The script content.', example='echo "helloWorld"', deprecated=true),
    parameters?: string(name='Parameters', description='The script parameter list.', example='para1=$bizdate'),
  }(name='Script', description='The run script information.'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of a tag.

This parameter is required.', example='key1'),
      value?: string(name='Value', description='The value of a tag.', example='value1'),
    }
  ](name='Tags', description='The tags.'),
  timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='3600'),
  trigger?: {
    cron?: string(name='Cron', description='The Cron expression. This parameter takes effect only if the Type parameter is set to Scheduler.', example='00 00 00 * * ?'),
    cycleType?: string(name='CycleType'),
    endTime?: string(name='EndTime', description='The expiration time of periodic triggering. Takes effect only when type is set to Scheduler. The value of this parameter is in the`yyyy-mm-dd hh:mm:ss` format.', example='9999-01-01 00:00:00'),
    recurrence?: string(name='Recurrence', description='The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler. Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
    startTime?: string(name='StartTime', description='The time when periodic triggering takes effect. This parameter takes effect only if the Type parameter is set to Scheduler. The value of this parameter is in the`yyyy-mm-dd hh:mm:ss` format.', example='1970-01-01 00:00:00'),
    type?: string(name='Type', description='The triggering type. Valid values:

*   Scheduler: periodically triggered
*   Manual', example='Scheduler'),
  }(name='Trigger', description='The triggering method.'),
}

model UpdateTaskShrinkRequest {
  clientUniqueCode?: string(name='ClientUniqueCode', description='The unique code of the client. This code uniquely identifies a task. This parameter is used to create a task asynchronously and implement the idempotence of the task. If you do not specify this parameter when you create the task, the system automatically generates a unique code. The unique code is uniquely associated with the task ID. If you specify this parameter when you update or delete the task, the value of this parameter must be the unique code that is used to create the task.', example='Task_0bc5213917368545132902xxxxxxxx'),
  dataSourceShrink?: string(name='DataSource', description='The information about the associated data source.'),
  dependenciesShrink?: string(name='Dependencies', description='The dependency information.'),
  description?: string(name='Description', description='The description of the task.', example='test'),
  envType?: string(name='EnvType', description='The project environment.

*   Prod
*   Dev', example='Prod'),
  id?: long(name='Id', description='The task ID.

This parameter is required.', example='1234'),
  inputsShrink?: string(name='Inputs', description='The input information.'),
  instanceMode?: string(name='InstanceMode', description='The instance generation mode. Valid values:

*   T+1: the next day
*   Immediately', example='T+1'),
  name?: string(name='Name', description='Name.', example='SQL node'),
  outputsShrink?: string(name='Outputs', description='The output information.'),
  owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
  rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: seconds.', example='60'),
  rerunMode?: string(name='RerunMode', description='The rerun mode. Valid values:

*   AllDenied: The task cannot be rerun.
*   FailureAllowed: The task can be rerun only after it fails.
*   AllAllowed: The task can always be rerun.', example='AllAllowed'),
  rerunTimes?: int32(name='RerunTimes', description='The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.', example='3'),
  runtimeResourceShrink?: string(name='RuntimeResource', description='Runtime environment configurations, such as resource group information.'),
  scriptShrink?: string(name='Script', description='The run script information.'),
  tagsShrink?: string(name='Tags', description='The tags.'),
  timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='3600'),
  triggerShrink?: string(name='Trigger', description='The triggering method.'),
}

model UpdateTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskResponseBody(name='body'),
}

/**
 * @summary Update a task. The changes are synchronized to Data Studio, which creates a new saved version.
 *
 * @param tmpReq UpdateTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateTaskResponse
 */
async function updateTaskWithOptions(tmpReq: UpdateTaskRequest, runtime: Util.RuntimeOptions): UpdateTaskResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dataSource)) {
    request.dataSourceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataSource, 'DataSource', 'json');
  }
  if (!Util.isUnset(tmpReq.dependencies)) {
    request.dependenciesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dependencies, 'Dependencies', 'json');
  }
  if (!Util.isUnset(tmpReq.inputs)) {
    request.inputsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.inputs, 'Inputs', 'json');
  }
  if (!Util.isUnset(tmpReq.outputs)) {
    request.outputsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.outputs, 'Outputs', 'json');
  }
  if (!Util.isUnset(tmpReq.runtimeResource)) {
    request.runtimeResourceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.runtimeResource, 'RuntimeResource', 'json');
  }
  if (!Util.isUnset(tmpReq.script)) {
    request.scriptShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.script, 'Script', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  if (!Util.isUnset(tmpReq.trigger)) {
    request.triggerShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.trigger, 'Trigger', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientUniqueCode)) {
    body['ClientUniqueCode'] = request.clientUniqueCode;
  }
  if (!Util.isUnset(request.dataSourceShrink)) {
    body['DataSource'] = request.dataSourceShrink;
  }
  if (!Util.isUnset(request.dependenciesShrink)) {
    body['Dependencies'] = request.dependenciesShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.inputsShrink)) {
    body['Inputs'] = request.inputsShrink;
  }
  if (!Util.isUnset(request.instanceMode)) {
    body['InstanceMode'] = request.instanceMode;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.outputsShrink)) {
    body['Outputs'] = request.outputsShrink;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.rerunInterval)) {
    body['RerunInterval'] = request.rerunInterval;
  }
  if (!Util.isUnset(request.rerunMode)) {
    body['RerunMode'] = request.rerunMode;
  }
  if (!Util.isUnset(request.rerunTimes)) {
    body['RerunTimes'] = request.rerunTimes;
  }
  if (!Util.isUnset(request.runtimeResourceShrink)) {
    body['RuntimeResource'] = request.runtimeResourceShrink;
  }
  if (!Util.isUnset(request.scriptShrink)) {
    body['Script'] = request.scriptShrink;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    body['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.timeout)) {
    body['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.triggerShrink)) {
    body['Trigger'] = request.triggerShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTask',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Update a task. The changes are synchronized to Data Studio, which creates a new saved version.
 *
 * @param request UpdateTaskRequest
 * @return UpdateTaskResponse
 */
async function updateTask(request: UpdateTaskRequest): UpdateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTaskWithOptions(request, runtime);
}

model UpdateTaskInstancesRequest {
  comment?: string(name='Comment', description='The remarks.', example='this is a comment'),
  taskInstances?: [ 
    {
      dataSource?: {
        name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
      }(name='DataSource', description='The information about the associated data source.'),
      id?: long(name='Id', description='The instance ID.

This parameter is required.', example='1234'),
      priority?: int32(name='Priority', description='The priority of the instance. Valid values: 1, 3, 5, 7, and 8.

A larger value indicates a higher priority. Default value: 1.', example='1'),
      runtimeResource?: string(name='RuntimeResource', description='The resource group information. Set this parameter to the ID of a resource group for scheduling.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
    }
  ](name='TaskInstances', description='The instances.'),
}

model UpdateTaskInstancesShrinkRequest {
  comment?: string(name='Comment', description='The remarks.', example='this is a comment'),
  taskInstancesShrink?: string(name='TaskInstances', description='The instances.'),
}

model UpdateTaskInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo', description='The result of the batch operation, which is in the MAP structure. The instance ID serves as a key, and the result serves as a value.'),
}

model UpdateTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskInstancesResponseBody(name='body'),
}

/**
 * @summary Modifies properties configured for multiple instances at a time. The properties include the priority, resource group for scheduling, and data source.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq UpdateTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateTaskInstancesResponse
 */
async function updateTaskInstancesWithOptions(tmpReq: UpdateTaskInstancesRequest, runtime: Util.RuntimeOptions): UpdateTaskInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateTaskInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.taskInstances)) {
    request.taskInstancesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.taskInstances, 'TaskInstances', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.taskInstancesShrink)) {
    body['TaskInstances'] = request.taskInstancesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies properties configured for multiple instances at a time. The properties include the priority, resource group for scheduling, and data source.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request UpdateTaskInstancesRequest
 * @return UpdateTaskInstancesResponse
 */
async function updateTaskInstances(request: UpdateTaskInstancesRequest): UpdateTaskInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTaskInstancesWithOptions(request, runtime);
}

model UpdateUdfFileRequest {
  className?: string(name='ClassName', description='This parameter is required.', example='com.alibaba.DataWorks.api.udf.StringConcat'),
  cmdDescription?: string(name='CmdDescription', example='StringConcat(String... substrs)'),
  example?: string(name='Example', example='StringConcat(\\\\"a\\\\", \\\\"b\\\\", \\\\"c\\\\")'),
  fileFolderPath?: string(name='FileFolderPath', example='Business_process/First_Business_Process/function/string_processing_function'),
  fileId?: string(name='FileId', description='This parameter is required.', example='10000001'),
  functionType?: string(name='FunctionType', description='This parameter is required.', example='STRING'),
  parameterDescription?: string(name='ParameterDescription', example='List of strings to be connected'),
  projectId?: long(name='ProjectId', example='10000'),
  projectIdentifier?: string(name='ProjectIdentifier', example='dw_project'),
  resources?: string(name='Resources', description='This parameter is required.', example='string-concat-1.0.0.jar,commons-lang-2.6.jar'),
  returnValue?: string(name='ReturnValue', example='New strings generated by concatenating all strings before and after the input order'),
  udfDescription?: string(name='UdfDescription', example='Concatenate several strings to generate a new string'),
}

model UpdateUdfFileResponseBody = {
  errorCode?: string(name='ErrorCode', example='Invalid.Tenant.ConnectionNotExists'),
  errorMessage?: string(name='ErrorMessage', example='The connection does not exist.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='0000-ABCD-EFG****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateUdfFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUdfFileResponseBody(name='body'),
}

/**
 * @param request UpdateUdfFileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateUdfFileResponse
 */
async function updateUdfFileWithOptions(request: UpdateUdfFileRequest, runtime: Util.RuntimeOptions): UpdateUdfFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.className)) {
    body['ClassName'] = request.className;
  }
  if (!Util.isUnset(request.cmdDescription)) {
    body['CmdDescription'] = request.cmdDescription;
  }
  if (!Util.isUnset(request.example)) {
    body['Example'] = request.example;
  }
  if (!Util.isUnset(request.fileFolderPath)) {
    body['FileFolderPath'] = request.fileFolderPath;
  }
  if (!Util.isUnset(request.fileId)) {
    body['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.functionType)) {
    body['FunctionType'] = request.functionType;
  }
  if (!Util.isUnset(request.parameterDescription)) {
    body['ParameterDescription'] = request.parameterDescription;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.projectIdentifier)) {
    body['ProjectIdentifier'] = request.projectIdentifier;
  }
  if (!Util.isUnset(request.resources)) {
    body['Resources'] = request.resources;
  }
  if (!Util.isUnset(request.returnValue)) {
    body['ReturnValue'] = request.returnValue;
  }
  if (!Util.isUnset(request.udfDescription)) {
    body['UdfDescription'] = request.udfDescription;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUdfFile',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request UpdateUdfFileRequest
 * @return UpdateUdfFileResponse
 */
async function updateUdfFile(request: UpdateUdfFileRequest): UpdateUdfFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUdfFileWithOptions(request, runtime);
}

model UpdateWorkflowRequest {
  clientUniqueCode?: string(name='ClientUniqueCode', description='The unique code of the client. This parameter is used to create a workflow asynchronously and implement the idempotence of the workflow. If you do not specify this parameter when you create the workflow, the system automatically generates a unique code. The unique code is uniquely associated with the workflow ID. If you specify this parameter when you update or delete the workflow, the value of this parameter must be the unique code that is used to create the workflow.', example='Workflow_0bc5213917368545132902xxxxxxxx'),
  dependencies?: [ 
    {
      type?: string(name='Type', description='The dependency type. Valid values:

*   CrossCycleDependsOnChildren: cross-cycle dependency on level-1 descendant nodes
*   CrossCycleDependsOnSelf: cross-cycle dependency on the current node
*   CrossCycleDependsOnOtherNode: cross-cycle dependency on other nodes
*   Normal: same-cycle scheduling dependency

This parameter is required.', example='Normal'),
      upstreamOutput?: string(name='UpstreamOutput', description='The identifier of the output of the ancestor task. This parameter is returned only if `same-cycle scheduling dependencies` and the node input are configured.', example='pre.odps_sql_demo_0'),
      upstreamTaskId?: long(name='UpstreamTaskId', description='The ancestor task ID. This parameter is returned only if `cross-cycle scheduling dependencies` or `same-cycle scheduling dependencies` and the node input are not configured.', example='1234'),
    }
  ](name='Dependencies', description='The dependency information.'),
  description?: string(name='Description', description='The description.', example='test'),
  envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
  id?: long(name='Id', description='The workflow ID.

This parameter is required.', example='1234'),
  instanceMode?: string(name='InstanceMode'),
  name?: string(name='Name', description='The name of the workflow.

This parameter is required.', example='My Workflow'),
  outputs?: {
    taskOutputs?: [ 
      {
        output?: string(name='Output', description='The identifier of the output.', example='pre.odps_sql_demo_0'),
      }
    ](name='TaskOutputs', description='The task outputs.'),
  }(name='Outputs', description='The output information.'),
  owner?: string(name='Owner', description='The account ID of the owner.

This parameter is required.', example='1000'),
  parameters?: string(name='Parameters', description='The parameters.', example='para1=$bizdate para2=$[yyyymmdd]'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.

This parameter is required.', example='key1'),
      value?: string(name='Value', description='The tag value.', example='value1'),
    }
  ](name='Tags', description='The tags.'),
  tasks?: [ 
    {
      baseLineId?: long(name='BaseLineId', description='The baseline ID.', example='1234'),
      clientUniqueCode?: string(name='ClientUniqueCode', description='The unique code of the client. This parameter is used to create a task asynchronously and implement the idempotence of the task. If you do not specify this parameter when you create the workflow, the system automatically generates a unique code. The unique code is uniquely associated with the workflow ID. If you specify this parameter when you update or delete the workflow, the value of this parameter must be the unique code that is used to create the workflow.', example='Task_0bc5213917368545132902xxxxxxxx'),
      dataSource?: {
        name?: string(name='Name', description='The name of the data source.', example='odps_test'),
      }(name='DataSource', description='The information about the associated data source.'),
      dependencies?: [ 
        {
          type?: string(name='Type', description='The dependency type. Valid values:

*   CrossCycleDependsOnChildren: cross-cycle dependency on level-1 descendant nodes
*   CrossCycleDependsOnSelf: cross-cycle dependency on the current node
*   CrossCycleDependsOnOtherNode: cross-cycle dependency on other nodes
*   Normal: same-cycle scheduling dependency

This parameter is required.', example='Normal'),
          upstreamOutput?: string(name='UpstreamOutput', description='The identifier of the output of the ancestor task. This parameter is returned only if `same-cycle scheduling dependencies` and the node input are configured.', example='pre.odps_sql_demo_0'),
          upstreamTaskId?: long(name='UpstreamTaskId', description='The ancestor task ID. This parameter is returned only if `cross-cycle scheduling dependencies` or `same-cycle scheduling dependencies` and the node input are not configured.', example='1234'),
        }
      ](name='Dependencies', description='The dependency information.'),
      description?: string(name='Description', description='The description.', example='Test'),
      envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod
*   Dev', example='Prod'),
      id?: long(name='Id', description='The task ID. If you configure this parameter, full update is performed on the task. If you do not configure this parameter, another task is created.', example='1234'),
      inputs?: {
        variables?: [ 
          {
            name?: string(name='Name', description='The name of the variable.', example='key1'),
            type?: string(name='Type', description='The type. Valid values:

*   Constant: constant
*   PassThrough: node output
*   System: variable
*   NodeOutput: script output

This parameter is required.', example='Constant'),
            value?: string(name='Value', description='The value of the variable.', example='value1'),
          }
        ](name='Variables', description='The variables.'),
      }(name='Inputs', description='The input information.'),
      name?: string(name='Name', description='The name of the task.

This parameter is required.', example='SQL node'),
      outputs?: {
        taskOutputs?: [ 
          {
            output?: string(name='Output', description='The identifier of the output.', example='pre.odps_sql_demo_0'),
          }
        ](name='TaskOutputs', description='The task outputs.'),
        variables?: [ 
          {
            name?: string(name='Name', description='The name of the variable.', example='key1'),
            type?: string(name='Type', description='The type. Valid values:

*   Constant: constant
*   PassThrough: node output
*   System: variable
*   NodeOutput: script output

This parameter is required.', example='Constant'),
            value?: string(name='Value', description='The value of the variable.', example='value1'),
          }
        ](name='Variables', description='The variables.'),
      }(name='Outputs', description='The output information.'),
      owner?: string(name='Owner', description='The account ID of the owner.

This parameter is required.', example='1000'),
      rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: seconds.', example='60'),
      rerunMode?: string(name='RerunMode', description='The rerun mode. Valid values:

*   AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.
*   AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to run.

This parameter is required.', example='AllAllowed'),
      rerunTimes?: int32(name='RerunTimes', description='The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.', example='3'),
      runtimeResource?: {
        cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
        image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.

This parameter is required.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
      }(name='RuntimeResource', description='The configurations of the runtime environment, such as the resource group information.

This parameter is required.'),
      script?: {
        content?: string(name='Content', description='The script content.', example='echo "helloWorld"'),
        parameters?: string(name='Parameters', description='The script parameters.', example='para1=$bizdate'),
      }(name='Script', description='The script information.'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.

This parameter is required.', example='key1'),
          value?: string(name='Value', description='The tag value.', example='value1'),
        }
      ](name='Tags', description='The tags.'),
      timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='3600'),
      trigger?: {
        recurrence?: string(name='Recurrence', description='The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler. Valid values:

*   Pause
*   Skip
*   Normal

This parameter is required.', example='Normal'),
        type?: string(name='Type', description='The trigger type. Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
      }(name='Trigger', description='The trigger method.

This parameter is required.'),
      type?: string(name='Type', description='The type of the task.

This parameter is required.', example='ODPS_SQL'),
    }
  ](name='Tasks', description='The tasks.'),
  trigger?: {
    cron?: string(name='Cron', description='The CRON expression. This parameter takes effect only if the Type parameter is set to Scheduler.', example='00 00 00 * * ?'),
    endTime?: string(name='EndTime', description='The end time of the time range during which the workflow is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler. The value of this parameter is in the `yyyy-mm-dd hh:mm:ss` format.', example='9999-01-01 00:00:00'),
    startTime?: string(name='StartTime', description='The start time of the time range during which the workflow is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler. The value of this parameter is in the `yyyy-mm-dd hh:mm:ss` format.', example='1970-01-01 00:00:00'),
    type?: string(name='Type', description='The trigger type. Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger

This parameter is required.', example='Scheduler'),
  }(name='Trigger', description='The trigger method.

This parameter is required.'),
}

model UpdateWorkflowShrinkRequest {
  clientUniqueCode?: string(name='ClientUniqueCode', description='The unique code of the client. This parameter is used to create a workflow asynchronously and implement the idempotence of the workflow. If you do not specify this parameter when you create the workflow, the system automatically generates a unique code. The unique code is uniquely associated with the workflow ID. If you specify this parameter when you update or delete the workflow, the value of this parameter must be the unique code that is used to create the workflow.', example='Workflow_0bc5213917368545132902xxxxxxxx'),
  dependenciesShrink?: string(name='Dependencies', description='The dependency information.'),
  description?: string(name='Description', description='The description.', example='test'),
  envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
  id?: long(name='Id', description='The workflow ID.

This parameter is required.', example='1234'),
  instanceMode?: string(name='InstanceMode'),
  name?: string(name='Name', description='The name of the workflow.

This parameter is required.', example='My Workflow'),
  outputsShrink?: string(name='Outputs', description='The output information.'),
  owner?: string(name='Owner', description='The account ID of the owner.

This parameter is required.', example='1000'),
  parameters?: string(name='Parameters', description='The parameters.', example='para1=$bizdate para2=$[yyyymmdd]'),
  tagsShrink?: string(name='Tags', description='The tags.'),
  tasksShrink?: string(name='Tasks', description='The tasks.'),
  triggerShrink?: string(name='Trigger', description='The trigger method.

This parameter is required.'),
}

model UpdateWorkflowResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateWorkflowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkflowResponseBody(name='body'),
}

/**
 * @summary Updates a specified workflow in full update mode.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq UpdateWorkflowRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWorkflowResponse
 */
async function updateWorkflowWithOptions(tmpReq: UpdateWorkflowRequest, runtime: Util.RuntimeOptions): UpdateWorkflowResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateWorkflowShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dependencies)) {
    request.dependenciesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dependencies, 'Dependencies', 'json');
  }
  if (!Util.isUnset(tmpReq.outputs)) {
    request.outputsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.outputs, 'Outputs', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  if (!Util.isUnset(tmpReq.tasks)) {
    request.tasksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tasks, 'Tasks', 'json');
  }
  if (!Util.isUnset(tmpReq.trigger)) {
    request.triggerShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.trigger, 'Trigger', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientUniqueCode)) {
    body['ClientUniqueCode'] = request.clientUniqueCode;
  }
  if (!Util.isUnset(request.dependenciesShrink)) {
    body['Dependencies'] = request.dependenciesShrink;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.instanceMode)) {
    body['InstanceMode'] = request.instanceMode;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.outputsShrink)) {
    body['Outputs'] = request.outputsShrink;
  }
  if (!Util.isUnset(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.parameters)) {
    body['Parameters'] = request.parameters;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    body['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.tasksShrink)) {
    body['Tasks'] = request.tasksShrink;
  }
  if (!Util.isUnset(request.triggerShrink)) {
    body['Trigger'] = request.triggerShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkflow',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates a specified workflow in full update mode.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request UpdateWorkflowRequest
 * @return UpdateWorkflowResponse
 */
async function updateWorkflow(request: UpdateWorkflowRequest): UpdateWorkflowResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWorkflowWithOptions(request, runtime);
}

model UpdateWorkflowDefinitionRequest {
  id?: long(name='Id', description='The ID of the workflow.

This parameter is required.', example='652567824470354XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10001'),
  spec?: string(name='Spec', description='The FlowSpec field information about the workflow. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.', example='{
    "kind": "CycleWorkflow",
    "version": "1.1.0",
    "spec": {
        "name": "OpenAPI Test Workflow Demo",
        "type": "CycleWorkflow",
        "id": "652567824470354XXXX",
        "workflows": [
            {
                "id": "652567824470354XXXX",
                "script": {
                    "path": "XX/OpenAPI_Test/Workflow_Test/OpenAPI_Test_Workflow_Demo",
                    "runtime": {
                        "command": "WORKFLOW"
                    }
                },
                "trigger": {
                    "type": "Scheduler",
                    "cron": "00 02 00 * * ?",
                    "startTime": "1970-01-01 00:00:00",
                    "endTime": "9999-01-01 00:00:00",
                    "timezone": "Asia/Shanghai",
                    "delaySeconds": 0
                },
                "strategy": {
                    "timeout": 0,
                    "instanceMode": "T+1",
                    "rerunMode": "Allowed",
                    "rerunTimes": 3,
                    "rerunInterval": 180000,
                    "failureStrategy": "Break"
                },
                "name": "OpenAPI Test Workflow Demo",
                "inputs": {},
                "outputs": {
                    "nodeOutputs": [
                        {
                            "data": "workflow_output",
                            "artifactType": "NodeOutput",
                            "refTableName": "OpenAPI_Test_Workflow_Demo"
                        }
                    ]
                },
                "nodes": [],
                "dependencies": []
            }
        ]
    }
}'),
}

model UpdateWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='20BF7E80-668A-5620-8AD8-879B8FEAXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary Updates the basic information about a workflow in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @description >  You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows in the FlowSpec filed, only the first workflow is created. Other specified workflows and the nodes in the workflows are ignored. You can call the UpdateNode operation to update a node.
 *
 * @param request UpdateWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWorkflowDefinitionResponse
 */
async function updateWorkflowDefinitionWithOptions(request: UpdateWorkflowDefinitionRequest, runtime: Util.RuntimeOptions): UpdateWorkflowDefinitionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the basic information about a workflow in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @description >  You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows in the FlowSpec filed, only the first workflow is created. Other specified workflows and the nodes in the workflows are ignored. You can call the UpdateNode operation to update a node.
 *
 * @param request UpdateWorkflowDefinitionRequest
 * @return UpdateWorkflowDefinitionResponse
 */
async function updateWorkflowDefinition(request: UpdateWorkflowDefinitionRequest): UpdateWorkflowDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWorkflowDefinitionWithOptions(request, runtime);
}

api _postOSSObject(bucketName: string, data: object): object {
  var form = Util.assertAsMap(data);
  var boundary = FileForm.getBoundary();
  var host = Util.assertAsString(form.host);
  __request.protocol = 'HTTPS';
  __request.method = 'POST';
  __request.pathname = `/`;
  __request.headers = {
    host = host,
    date = Util.getDateUTCString(),
    user-agent = Util.getUserAgent(''),
  };
  __request.headers.content-type = `multipart/form-data; boundary=${boundary}`;
  __request.body = FileForm.toFileForm(form, boundary);
} returns {
  var respMap : object = null;
  var bodyStr = Util.readAsString(__response.body);
  if (Util.is4xx(__response.statusCode) || Util.is5xx(__response.statusCode)) {
    respMap = XML.parseXml(bodyStr, null);
    var err = Util.assertAsMap(respMap.Error);
    throw {
      code = err.Code,
      message = err.Message,
      data = {
        httpCode = __response.statusCode,
        requestId = err.RequestId,
        hostId = err.HostId,
      }
    };
  }
  respMap = XML.parseXml(bodyStr, null);
  return {
    ...respMap,
  };
}
