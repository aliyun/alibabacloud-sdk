/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'dataworks.ap-northeast-1.aliyuncs.com',
    'ap-south-1' = 'dataworks.ap-south-1.aliyuncs.com',
    'ap-southeast-1' = 'dataworks.ap-southeast-1.aliyuncs.com',
    'ap-southeast-2' = 'dataworks.ap-southeast-2.aliyuncs.com',
    'ap-southeast-3' = 'dataworks.ap-southeast-3.aliyuncs.com',
    'ap-southeast-5' = 'dataworks.ap-southeast-5.aliyuncs.com',
    'cn-beijing' = 'dataworks.cn-beijing.aliyuncs.com',
    'cn-chengdu' = 'dataworks.cn-chengdu.aliyuncs.com',
    'cn-hangzhou' = 'dataworks.cn-hangzhou.aliyuncs.com',
    'cn-hongkong' = 'dataworks.cn-hongkong.aliyuncs.com',
    'cn-huhehaote' = 'dataworks.aliyuncs.com',
    'cn-qingdao' = 'dataworks.aliyuncs.com',
    'cn-shanghai' = 'dataworks.cn-shanghai.aliyuncs.com',
    'cn-shenzhen' = 'dataworks.cn-shenzhen.aliyuncs.com',
    'cn-zhangjiakou' = 'dataworks.aliyuncs.com',
    'eu-central-1' = 'dataworks.eu-central-1.aliyuncs.com',
    'eu-west-1' = 'dataworks.eu-west-1.aliyuncs.com',
    'me-east-1' = 'dataworks.me-east-1.aliyuncs.com',
    'us-east-1' = 'dataworks.us-east-1.aliyuncs.com',
    'us-west-1' = 'dataworks.us-west-1.aliyuncs.com',
    'cn-hangzhou-finance' = 'dataworks.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'dataworks.aliyuncs.com',
    'cn-shanghai-finance-1' = 'dataworks.aliyuncs.com',
    'cn-north-2-gov-1' = 'dataworks.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('dataworks-public', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DataQualityEvaluationTask {
  dataSourceId?: long(name='DataSourceId', example='201'),
  description?: string(name='Description', example='This is a daily run data quality evaluation plan.'),
  hooks?: [ 
    {
      condition?: string(name='Condition', example='${severity} == "High" AND ${status} == "Critical"'),
      type?: string(name='Type', example='BlockTaskInstance'),
    }
  ](name='Hooks'),
  id?: long(name='Id', example='10001'),
  name?: string(name='Name', example='质量校验任务'),
  notifications?: [ 
    {
      condition?: string(name='Condition', example='${blockType} == "Strong"'),
      notifications?: [ 
        {
          notificationChannels?: [ 
            {
              channels?: [ string ](name='Channels'),
            }
          ](name='NotificationChannels'),
          notificationReceivers?: [ 
            {
              extension?: string(name='Extension', example='{"atAll":"true"}'),
              receiverType?: string(name='ReceiverType', example='AliUid'),
              receiverValues?: [ string ](name='ReceiverValues'),
            }
          ](name='NotificationReceivers'),
        }
      ](name='Notifications'),
    }
  ](name='Notifications'),
  projectId?: long(name='ProjectId', example='100'),
  runtimeConf?: string(name='RuntimeConf', example='{ "queue": "default", "sqlEngine": "SPARK_SQL" }'),
  target?: {
    databaseType?: string(name='DatabaseType', example='maxcompute'),
    partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
    tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
    type?: string(name='Type', example='Table'),
  }(name='Target'),
  tenantId?: long(name='TenantId', example='10'),
  trigger?: {
    taskIds?: [ long ](name='TaskIds'),
    type?: string(name='Type', example='ByScheduledTaskInstance'),
  }(name='Trigger'),
}

model DataQualityEvaluationTaskInstance {
  createTime?: long(name='CreateTime', example='1710239005403'),
  finishTime?: long(name='FinishTime', example='1710239005403'),
  id?: long(name='Id', example='10001'),
  status?: string(name='Status', example='Passed'),
  task?: {
    dataSourceId?: long(name='DataSourceId', example='201'),
    hooks?: [ 
      {
        condition?: string(name='Condition', example='${severity} == "High" AND ${status} == "Critical"'),
        type?: string(name='Type', example='BlockTaskInstance'),
      }
    ](name='Hooks'),
    id?: long(name='Id', example='10001'),
    name?: string(name='Name', example='质量校验任务'),
    notifications?: [ 
      {
        condition?: string(name='Condition', example='${blockType} == "Strong"'),
        notifications?: [ 
          {
            notificationChannels?: [ 
              {
                channels?: [ string ](name='Channels'),
              }
            ](name='NotificationChannels'),
            notificationReceivers?: [ 
              {
                extension?: string(name='Extension', example='{"atAll":"true"}'),
                receiverType?: string(name='ReceiverType', example='AliUid'),
                receiverValues?: [ string ](name='ReceiverValues'),
              }
            ](name='NotificationReceivers'),
          }
        ](name='Notifications'),
      }
    ](name='Notifications'),
    projectId?: long(name='ProjectId'),
    runtimeConf?: string(name='RuntimeConf', example='{ "queue": "default", "sqlEngine": "SPARK_SQL" }'),
    target?: {
      databaseType?: string(name='DatabaseType', example='maxcompute'),
      partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
      tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
      type?: string(name='Type', example='Table'),
    }(name='Target'),
    tenantId?: long(name='TenantId'),
    trigger?: {
      taskIds?: [ long ](name='TaskIds'),
      type?: string(name='Type', example='ByScheduledTaskInstance'),
    }(name='Trigger'),
  }(name='Task'),
}

model DataQualityResult {
  details?: [ 
    {
      checkedValue?: string(name='CheckedValue', example='100.0'),
      referencedValue?: string(name='ReferencedValue', example='0.0'),
      status?: string(name='Status', example='Passed'),
    }
  ](name='Details'),
  id?: long(name='Id', example='10001'),
  rule?: {
    checkingConfig?: {
      referencedSamplesFilter?: string(name='ReferencedSamplesFilter', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
      thresholds?: {
        critical?: {
          operator?: string(name='Operator', example='>'),
          value?: string(name='Value', example='100.0'),
        }(name='Critical'),
        expected?: {
          operator?: string(name='Operator', example='>'),
          value?: string(name='Value', example='100.0'),
        }(name='Expected'),
        warned?: {
          operator?: string(name='Operator', example='>'),
          value?: string(name='Value', example='100.0'),
        }(name='Warned'),
      }(name='Thresholds'),
      type?: string(name='Type', example='Fixed'),
    }(name='CheckingConfig'),
    description?: string(name='Description', example='this is a odps _sql task'),
    enabled?: boolean(name='Enabled', example='true'),
    errorHandlers?: [ 
      {
        errorDataFilter?: string(name='ErrorDataFilter', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
        type?: string(name='Type', example='SaveErrorData'),
      }
    ](name='ErrorHandlers'),
    id?: long(name='Id', example='100001'),
    name?: string(name='Name', example='表不能为空'),
    projectId?: long(name='ProjectId', example='100'),
    samplingConfig?: {
      metric?: string(name='Metric', example='Min'),
      metricParameters?: string(name='MetricParameters', example='{ "Columns": [ "id", "name" ] }'),
      samplingFilter?: string(name='SamplingFilter', example='id IS NULL'),
      settingConfig?: string(name='SettingConfig', example='SET odps.sql.udf.timeout=600s;'),
    }(name='SamplingConfig'),
    severity?: string(name='Severity', example='High'),
    target?: {
      databaseType?: string(name='DatabaseType', example='maxcompute'),
      partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
      tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
      type?: string(name='Type', example='Table'),
    }(name='Target'),
    templateCode?: string(name='TemplateCode', example='SYSTEM:user_defined_sql'),
    tenantId?: long(name='TenantId', example='1'),
  }(name='Rule'),
  sample?: string(name='Sample', example='[   {     "gender": "male",     "_count": 100   }, {     "gender": "female",     "_count": 100   } ]'),
  status?: string(name='Status', example='Passed'),
  taskInstanceId?: long(name='TaskInstanceId', example='20001'),
}

model DataQualityRule {
  checkingConfig?: {
    referencedSamplesFilter?: string(name='ReferencedSamplesFilter', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
    thresholds?: {
      critical?: {
        expression?: string(name='Expression', example='波动率类型规则使用，通过表达式来表示波动阈值。如：波动上升大于0.01： $checkValue > 0.01  波动下降大于0.01：$checkValue < -0.01   波动率绝对值：abs($checkValue) > 0.01'),
        operator?: string(name='Operator', example='>'),
        value?: string(name='Value', example='100.0'),
      }(name='Critical'),
      expected?: {
        expression?: string(name='Expression', example='波动率类型规则使用，通过表达式来表示波动阈值。如：波动上升大于0.01： $checkValue > 0.01  波动下降大于0.01：$checkValue < -0.01   波动率绝对值：abs($checkValue) > 0.01'),
        operator?: string(name='Operator', example='>'),
        value?: string(name='Value', example='100.0'),
      }(name='Expected'),
      warned?: {
        expression?: string(name='Expression', example='波动率类型规则使用，通过表达式来表示波动阈值。如：波动上升大于0.01： $checkValue > 0.01  波动下降大于0.01：$checkValue < -0.01   波动率绝对值：abs($checkValue) > 0.01'),
        operator?: string(name='Operator', example='>'),
        value?: string(name='Value', example='100.0'),
      }(name='Warned'),
    }(name='Thresholds'),
    type?: string(name='Type', example='Fixed'),
  }(name='CheckingConfig'),
  description?: string(name='Description', example='this is a odps _sql task'),
  enabled?: boolean(name='Enabled', example='true'),
  errorHandlers?: [ 
    {
      errorDataFilter?: string(name='ErrorDataFilter', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
      type?: string(name='Type', example='SaveErrorData'),
    }
  ](name='ErrorHandlers'),
  id?: long(name='Id', example='1'),
  name?: string(name='Name', example='表不能为空'),
  projectId?: long(name='ProjectId', example='100'),
  samplingConfig?: {
    metric?: string(name='Metric', example='Min'),
    metricParameters?: string(name='MetricParameters', example='{ "Columns": [ "id", "name" ] }'),
    samplingFilter?: string(name='SamplingFilter', example='id IS NULL'),
    settingConfig?: string(name='SettingConfig', example='SET odps.sql.udf.timeout=600s;'),
  }(name='SamplingConfig'),
  severity?: string(name='Severity', example='High'),
  target?: {
    databaseType?: string(name='DatabaseType', example='maxcompute'),
    partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
    tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
    type?: string(name='Type', example='Table'),
  }(name='Target'),
  templateCode?: string(name='TemplateCode', example='SYSTEM:user_defined_sql'),
  tenantId?: long(name='TenantId', example='1'),
}

model DataQualityRuleTemplate {
  checkingConfig?: {
    referencedSamplesFilter?: string(name='ReferencedSamplesFilter', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
    type?: string(name='Type', example='Fixed'),
  }(name='CheckingConfig'),
  code?: string(name='Code'),
  directoryPath?: string(name='DirectoryPath', example='/ods/订单数据'),
  name?: string(name='Name'),
  projectId?: long(name='ProjectId'),
  samplingConfig?: {
    metric?: string(name='Metric', example='Min'),
    metricParameters?: string(name='MetricParameters', example='{ "SQL": "SELECT min(id) from table;" }'),
    settingConfig?: string(name='SettingConfig', example='SET odps.sql.udf.timeout=600s;'),
  }(name='SamplingConfig'),
  tenantId?: long(name='TenantId'),
  visibleScope?: string(name='VisibleScope', example='Project'),
}

model SuccessInfoValue = {
  success?: boolean(name='Success', example='true'),
  message?: string(name='Message'),
}

model AbolishDeploymentRequest {
  id?: string(name='Id', description='The ID of the process.

This parameter is required.', example='1606087c-9ac4-43f0-83a8-0b5ced21XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model AbolishDeploymentResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='55D786C9-DD57-524D-884C-C5239278XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model AbolishDeploymentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AbolishDeploymentResponseBody(name='body'),
}

/**
 * @summary Terminates the process for deploying or undeploying an entity. The process is not deleted and can still be queried by calling query operations.
 *
 * @param request AbolishDeploymentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AbolishDeploymentResponse
 */
async function abolishDeploymentWithOptions(request: AbolishDeploymentRequest, runtime: $RuntimeOptions): AbolishDeploymentResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'AbolishDeployment',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Terminates the process for deploying or undeploying an entity. The process is not deleted and can still be queried by calling query operations.
 *
 * @param request AbolishDeploymentRequest
 * @return AbolishDeploymentResponse
 */
async function abolishDeployment(request: AbolishDeploymentRequest): AbolishDeploymentResponse {
  var runtime = new $RuntimeOptions{};
  return abolishDeploymentWithOptions(request, runtime);
}

model AssociateProjectToResourceGroupRequest {
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace with which you want to associate the resource group.

This parameter is required.', example='1000'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
}

model AssociateProjectToResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model AssociateProjectToResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateProjectToResourceGroupResponseBody(name='body'),
}

/**
 * @summary Associates a resource group with a workspace.
 *
 * @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 * 2.  Your account must be assigned one of the following roles of the desired workspace:
 * *   Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request AssociateProjectToResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AssociateProjectToResourceGroupResponse
 */
async function associateProjectToResourceGroupWithOptions(request: AssociateProjectToResourceGroupRequest, runtime: $RuntimeOptions): AssociateProjectToResourceGroupResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'AssociateProjectToResourceGroup',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Associates a resource group with a workspace.
 *
 * @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 * 2.  Your account must be assigned one of the following roles of the desired workspace:
 * *   Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request AssociateProjectToResourceGroupRequest
 * @return AssociateProjectToResourceGroupResponse
 */
async function associateProjectToResourceGroup(request: AssociateProjectToResourceGroupRequest): AssociateProjectToResourceGroupResponse {
  var runtime = new $RuntimeOptions{};
  return associateProjectToResourceGroupWithOptions(request, runtime);
}

model AttachDataQualityRulesToEvaluationTaskRequest {
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', description='This parameter is required.', example='200001'),
  dataQualityRuleIds?: [ long ](name='DataQualityRuleIds', description='This parameter is required.'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='10000'),
}

model AttachDataQualityRulesToEvaluationTaskShrinkRequest {
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', description='This parameter is required.', example='200001'),
  dataQualityRuleIdsShrink?: string(name='DataQualityRuleIds', description='This parameter is required.'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='10000'),
}

model AttachDataQualityRulesToEvaluationTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='E6F0DBDD-5AD8-4870-A6A0'),
  success?: boolean(name='Success', example='true'),
}

model AttachDataQualityRulesToEvaluationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachDataQualityRulesToEvaluationTaskResponseBody(name='body'),
}

/**
 * @summary 把数据质量规则关联到数据质量校验任务上
 *
 * @param tmpReq AttachDataQualityRulesToEvaluationTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AttachDataQualityRulesToEvaluationTaskResponse
 */
async function attachDataQualityRulesToEvaluationTaskWithOptions(tmpReq: AttachDataQualityRulesToEvaluationTaskRequest, runtime: $RuntimeOptions): AttachDataQualityRulesToEvaluationTaskResponse {
  tmpReq.validate();
  var request = new AttachDataQualityRulesToEvaluationTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.dataQualityRuleIds)) {
    request.dataQualityRuleIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataQualityRuleIds, 'DataQualityRuleIds', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.dataQualityEvaluationTaskId)) {
    body['DataQualityEvaluationTaskId'] = request.dataQualityEvaluationTaskId;
  }
  if (!$isNull(request.dataQualityRuleIdsShrink)) {
    body['DataQualityRuleIds'] = request.dataQualityRuleIdsShrink;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'AttachDataQualityRulesToEvaluationTask',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 把数据质量规则关联到数据质量校验任务上
 *
 * @param request AttachDataQualityRulesToEvaluationTaskRequest
 * @return AttachDataQualityRulesToEvaluationTaskResponse
 */
async function attachDataQualityRulesToEvaluationTask(request: AttachDataQualityRulesToEvaluationTaskRequest): AttachDataQualityRulesToEvaluationTaskResponse {
  var runtime = new $RuntimeOptions{};
  return attachDataQualityRulesToEvaluationTaskWithOptions(request, runtime);
}

model BatchUpdateTasksRequest {
  comment?: string(name='Comment', example='this is a comment'),
  tasks?: [ 
    {
      dataSource?: {
        name?: string(name='Name', example='odps_test'),
      }(name='DataSource'),
      description?: string(name='Description', example='test'),
      envType?: string(name='EnvType', example='Prod'),
      id?: long(name='Id', description='This parameter is required.', example='1234'),
      name?: string(name='Name'),
      owner?: string(name='Owner', example='1000'),
      rerunInterval?: int32(name='RerunInterval', example='60'),
      rerunMode?: string(name='RerunMode', example='AllAllowed'),
      rerunTimes?: int32(name='RerunTimes', example='3'),
      runtimeResource?: {
        cu?: string(name='Cu', example='0.25'),
        image?: string(name='Image', example='i-xxxxxx'),
        resourceGroupId?: string(name='ResourceGroupId', example='S_res_group_524258031846018_1684XXXXXXXXX'),
      }(name='RuntimeResource'),
      tags?: [ 
        {
          key?: string(name='Key', description='This parameter is required.', example='key1'),
          value?: string(name='Value', example='value1'),
        }
      ](name='Tags'),
      timeout?: int32(name='Timeout', example='3600'),
      trigger?: {
        cron?: string(name='Cron', example='00 00 00 * * ?'),
        endTime?: string(name='EndTime', example='9999-01-01 00:00:00'),
        recurrence?: string(name='Recurrence', example='Normal'),
        startTime?: string(name='StartTime', example='1970-01-01 00:00:00'),
        type?: string(name='Type', example='Scheduler'),
      }(name='Trigger'),
    }
  ](name='Tasks'),
}

model BatchUpdateTasksShrinkRequest {
  comment?: string(name='Comment', example='this is a comment'),
  tasksShrink?: string(name='Tasks'),
}

model BatchUpdateTasksResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo'),
}

model BatchUpdateTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchUpdateTasksResponseBody(name='body'),
}

/**
 * @param tmpReq BatchUpdateTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchUpdateTasksResponse
 */
async function batchUpdateTasksWithOptions(tmpReq: BatchUpdateTasksRequest, runtime: $RuntimeOptions): BatchUpdateTasksResponse {
  tmpReq.validate();
  var request = new BatchUpdateTasksShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.tasks)) {
    request.tasksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tasks, 'Tasks', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!$isNull(request.tasksShrink)) {
    body['Tasks'] = request.tasksShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'BatchUpdateTasks',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @param request BatchUpdateTasksRequest
 * @return BatchUpdateTasksResponse
 */
async function batchUpdateTasks(request: BatchUpdateTasksRequest): BatchUpdateTasksResponse {
  var runtime = new $RuntimeOptions{};
  return batchUpdateTasksWithOptions(request, runtime);
}

model CloneDataSourceRequest {
  cloneDataSourceName?: string(name='CloneDataSourceName', description='The name of the destination data source The name can contain letters, digits, and underscores (_), and must start with a letter. It cannot exceed 60 characters in length.

This parameter is required.', example='demo_holo_datasource'),
  id?: long(name='Id', description='The data source ID.

This parameter is required.', example='16036'),
}

model CloneDataSourceResponseBody = {
  id?: long(name='Id', description='The ID of the cloned data source.', example='19715'),
  requestId?: string(name='RequestId', example='FCD583B9-346B-5E75-82C1-4A7C192C48DB'),
}

model CloneDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloneDataSourceResponseBody(name='body'),
}

/**
 * @summary Clones an existing data source.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request CloneDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CloneDataSourceResponse
 */
async function cloneDataSourceWithOptions(request: CloneDataSourceRequest, runtime: $RuntimeOptions): CloneDataSourceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.cloneDataSourceName)) {
    query['CloneDataSourceName'] = request.cloneDataSourceName;
  }
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CloneDataSource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Clones an existing data source.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request CloneDataSourceRequest
 * @return CloneDataSourceResponse
 */
async function cloneDataSource(request: CloneDataSourceRequest): CloneDataSourceResponse {
  var runtime = new $RuntimeOptions{};
  return cloneDataSourceWithOptions(request, runtime);
}

model CreateAlertRuleRequest {
  enabled?: boolean(name='Enabled', description='Indicates whether the rule is enabled.

This parameter is required.', example='true'),
  name?: string(name='Name', description='The name of the rule.

This parameter is required.', example='xm_create_test'),
  notification?: {
    channels?: [ string ](name='Channels', description='The alert channels.

This parameter is required.'),
    intervalInMinutes?: int32(name='IntervalInMinutes', description='The interval at which an alert notification is sent. Unit: minutes. Valid values: 5 to 10,000.', example='30'),
    maximum?: int32(name='Maximum', description='The maximum number of times an alert notification is sent within one calendar day. Valid values: 1 to 10,000.', example='3'),
    receivers?: [ 
      {
        extension?: string(name='Extension', description='The additional configuration of the alert recipient. If the ReceiverType parameter is set to DingdingUrl, you can set this parameter to {"atAll":true} to remind all members in a DingTalk group.', example='{"atAll":true}'),
        receiverType?: string(name='ReceiverType', description='The type of the alert recipient. Valid valves:

*   AliUid: Alibaba Cloud account ID.
*   Shift Schedules: The personnel in a shift schedule.
*   TaskOwner: The node owner. This parameter is available for custom alerts and event alerts.
*   Owner: The baseline owner. This parameter is available for baseline alerts.
*   WebhookUrl: URL of a custom webhook.
*   DingdingUrl: DingTalk chatbot URL.
*   FeishuUrl: Lark chatbot URL.
*   WeixinUrl: WeCom chatbot URL.', example='TaskOwner'),
        receiverValues?: [ string ](name='ReceiverValues', description='The IDs of the alert recipients.'),
      }
    ](name='Receivers', description='The alert recipient.

This parameter is required.'),
    silenceEndTime?: string(name='SilenceEndTime', description='The end of the time range for silence. The time is in the HH:mm:ss format.', example='00:00:00'),
    silenceStartTime?: string(name='SilenceStartTime', description='The beginning of the time range for silence. The time is in the HH:mm:ss format.', example='00:00:00'),
  }(name='Notification', description='The configuration for the alert notification.'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the creator of the rule.

This parameter is required.', example='279114181716147735'),
  triggerCondition?: {
    extension?: {
      cycleUnfinished?: {
        cycleAndTime?: [ 
          {
            cycleId?: int32(name='CycleId', description='The ID of the scheduling cycle of the instance. Valid values: [1,288].', example='1'),
            time?: string(name='Time', description='The latest completion time of the instance within the scheduling cycle. The time is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='12:00'),
          }
        ](name='CycleAndTime', description='The configurations of the scheduling cycle and timeout period of the instance.'),
      }(name='CycleUnfinished', description='The configuration for an alert of the CycleUnfinished type.'),
      error?: {
        autoRerunAlertEnabled?: boolean(name='AutoRerunAlertEnabled', example='false'),
        streamTaskIds?: [ long ](name='StreamTaskIds', description='The IDs of the real-time computing tasks. This parameter is required when you monitor real-time computing tasks.'),
      }(name='Error', description='The configuration for an alert of the Error type.'),
      instanceErrorCount?: {
        count?: int32(name='Count', description='The maximum number of instances on which an error occurs. Valid values: [1,10000].', example='5'),
      }(name='InstanceErrorCount', description='The configuration for an alert of the InstanceErrorCount type.'),
      instanceErrorPercentage?: {
        percentage?: int32(name='Percentage', description='The maximum percentage of instances on which an error occurs in the workspace to the total number of instances. Valid values: [1-100].', example='5'),
      }(name='InstanceErrorPercentage', description='The configuration for an alert of the InstanceErrorPercentage type.'),
      instanceTransferFluctuate?: {
        percentage?: int32(name='Percentage', description='The maximum percentage of fluctuation in the number of auto triggered node instances that are generated in your workspace. Valid values: [1-100].', example='10'),
        trend?: string(name='Trend', description='The way in which the number of auto triggered node instances that are generated in your workspace fluctuates. Valid values:

*   abs: the absolute value. The number of instances increases or decreases.
*   increase: The number of instances increases.
*   decrease: The number of instances decreases.', example='abs'),
      }(name='InstanceTransferFluctuate', description='The configuration for an alert of the InstanceTransferFluctuate type.'),
      timeout?: {
        timeoutInMinutes?: int32(name='TimeoutInMinutes', description='The timeout period. Unit: minutes. Valid values: [1, 21600].', example='10'),
      }(name='Timeout', description='The configuration for an alert of the Timeout type.'),
      unFinished?: {
        unFinishedTime?: string(name='UnFinishedTime', description='The latest completion time of the instance. The period is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='30:00'),
      }(name='UnFinished', description='The configuration for an alert of the UnFinished type.'),
    }(name='Extension', description='The extended information about the rule. This parameter is required for specific types of alerts.'),
    target?: {
      allowTasks?: [ long ](name='AllowTasks', description='The nodes that are not to be monitored.'),
      ids?: [ long ](name='Ids', description='The IDs of monitored objects.'),
      type?: string(name='Type', description='The type of the monitored objects. Valid values:

*   Task: node
*   Baseline: baseline
*   Project: workspace
*   BizProcess: workflow', example='Task'),
    }(name='Target', description='The monitored objects.'),
    type?: string(name='Type', description='The alert type. Valid values:

*   Finished: An instance is successfully run.
*   UnFinished: An instance does not finish running before a specified point in time.
*   Error: An error occurs on an instance.
*   CycleUnfinished: An instance does not finish running as expected within a specific cycle.
*   Timeout: An instance times out.
*   InstanceTransferComplete: An instance is generated by the auto triggered node.
*   InstanceTransferFluctuate: The number of generated instances fluctuates.
*   ExhaustedError: An error persists after an instance is automatically rerun.
*   InstanceKeyword: An instance with errors contains specified keywords.
*   InstanceErrorCount: The number of instances on which an error occurs reaches a specified threshold.
*   InstanceErrorPercentage: The proportion of instances on which an error occurs in the workspace to the total number of instances reaches a specified threshold.
*   ResourceGroupPercentage: The usage rate of the resource group reaches a specified threshold.
*   ResourceGroupWaitCount: The number of instances that are waiting for resources in the resource group reaches a specified threshold.', example='Error'),
  }(name='TriggerCondition', description='The alert triggering condition.

This parameter is required.'),
}

model CreateAlertRuleShrinkRequest {
  enabled?: boolean(name='Enabled', description='Indicates whether the rule is enabled.

This parameter is required.', example='true'),
  name?: string(name='Name', description='The name of the rule.

This parameter is required.', example='xm_create_test'),
  notificationShrink?: string(name='Notification', description='The configuration for the alert notification.'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the creator of the rule.

This parameter is required.', example='279114181716147735'),
  triggerConditionShrink?: string(name='TriggerCondition', description='The alert triggering condition.

This parameter is required.'),
}

model CreateAlertRuleResponseBody = {
  id?: long(name='Id', description='The rule ID.', example='123123'),
  requestId?: string(name='RequestId', description='The request ID.', example='A6C6B486-E3A2-5D52-9E76-D9380485D946'),
}

model CreateAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAlertRuleResponseBody(name='body'),
}

/**
 * @summary Creates a custom monitoring alert rule.
 *
 * @param tmpReq CreateAlertRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAlertRuleResponse
 */
async function createAlertRuleWithOptions(tmpReq: CreateAlertRuleRequest, runtime: $RuntimeOptions): CreateAlertRuleResponse {
  tmpReq.validate();
  var request = new CreateAlertRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.notification)) {
    request.notificationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notification, 'Notification', 'json');
  }
  if (!$isNull(tmpReq.triggerCondition)) {
    request.triggerConditionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.triggerCondition, 'TriggerCondition', 'json');
  }
  var query = {};
  if (!$isNull(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.notificationShrink)) {
    query['Notification'] = request.notificationShrink;
  }
  if (!$isNull(request.owner)) {
    query['Owner'] = request.owner;
  }
  if (!$isNull(request.triggerConditionShrink)) {
    query['TriggerCondition'] = request.triggerConditionShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateAlertRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a custom monitoring alert rule.
 *
 * @param request CreateAlertRuleRequest
 * @return CreateAlertRuleResponse
 */
async function createAlertRule(request: CreateAlertRuleRequest): CreateAlertRuleResponse {
  var runtime = new $RuntimeOptions{};
  return createAlertRuleWithOptions(request, runtime);
}

model CreateDIAlarmRuleRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='ABFUOEUOTRTRJKE'),
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task with which the alert rule is associated.

This parameter is required.', example='1'),
  description?: string(name='Description', description='The description of the alert rule.', example='The description of the alert rule.'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the alert rule. By default, the alert rule is disabled.', example='true'),
  metricType?: string(name='MetricType', description='The metric type in the alert rule. Valid values:

*   Heartbeat
*   FailoverCount
*   Delay
*   DdlReport
*   ResourceUtilization

This parameter is required.', example='Heartbeat'),
  name?: string(name='Name', description='The name of the alert rule.

This parameter is required.', example='alartRule'),
  notificationSettings?: {
    inhibitionInterval?: int32(name='InhibitionInterval', description='The duration of the alert suppression interval. Default value: 5. Unit: minutes.', example='5', deprecated=true),
    muteInterval?: int32(name='MuteInterval', description='告警抑制间隔时长，单位分钟，默认5分钟。', example='5'),
    notificationChannels?: [ 
      {
        channels?: [ string ](name='Channels', description='The alert notification methods. Valid values:

*   Mail
*   Phone
*   Sms
*   Ding'),
        severity?: string(name='Severity', description='The severity level. Valid values:

*   Warning
*   Critical', example='Warning'),
      }
    ](name='NotificationChannels', description='The alert notification methods.'),
    notificationReceivers?: [ 
      {
        receiverType?: string(name='ReceiverType', description='The recipient type. Valid values: AliyunUid, DingToken, FeishuToken, and WebHookUrl.', example='DingToken'),
        receiverValues?: [ string ](name='ReceiverValues', description='The recipient.

*   If the ReceiverType parameter is set to AliyunUid, set this parameter to the Alibaba Cloud account ID of a user.
*   If the ReceiverType parameter is set to DingToken, set this parameter to the token of a DingTalk chatbot.'),
      }
    ](name='NotificationReceivers', description='The settings of alert notification recipients.'),
  }(name='NotificationSettings', description='The alert notification settings.

This parameter is required.'),
  triggerConditions?: [ 
    {
      ddlReportTags?: [ string ](name='DdlReportTags', description='The types of DDL operations for which the alert rule takes effect.', deprecated=true),
      ddlTypes?: [ string ](name='DdlTypes', description='在DDL通知的时候才生效，需要生效的DDL列表。'),
      duration?: long(name='Duration', description='The time interval for alert calculation. Unit: minutes.', example='10'),
      severity?: string(name='Severity', description='The severity level. Valid values:

*   Warning
*   Critical', example='Warning'),
      threshold?: long(name='Threshold', description='The alert threshold.

*   If the alert rule is for task status, you do not need to specify a threshold.
*   If the alert rule is for failovers, you must specify the number of failovers.
*   If the alert rule is for latency, you must specify the latency duration, in seconds.', example='10'),
    }
  ](name='TriggerConditions', description='The conditions that can trigger the alert rule.

This parameter is required.'),
}

model CreateDIAlarmRuleShrinkRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='ABFUOEUOTRTRJKE'),
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task with which the alert rule is associated.

This parameter is required.', example='1'),
  description?: string(name='Description', description='The description of the alert rule.', example='The description of the alert rule.'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the alert rule. By default, the alert rule is disabled.', example='true'),
  metricType?: string(name='MetricType', description='The metric type in the alert rule. Valid values:

*   Heartbeat
*   FailoverCount
*   Delay
*   DdlReport
*   ResourceUtilization

This parameter is required.', example='Heartbeat'),
  name?: string(name='Name', description='The name of the alert rule.

This parameter is required.', example='alartRule'),
  notificationSettingsShrink?: string(name='NotificationSettings', description='The alert notification settings.

This parameter is required.'),
  triggerConditionsShrink?: string(name='TriggerConditions', description='The conditions that can trigger the alert rule.

This parameter is required.'),
}

model CreateDIAlarmRuleResponseBody = {
  DIAlarmRuleId?: string(name='DIAlarmRuleId', description='This parameter is deprecated and is replaced by the Id parameter.', example='1', deprecated=true),
  id?: long(name='Id', description='The ID of the alert rule.', example='1'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='C636A747-7E4E-594D-94CD-2B4F8A9A9A63'),
}

model CreateDIAlarmRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDIAlarmRuleResponseBody(name='body'),
}

/**
 * @summary Creates an alert rule for a synchronization task.
 *
 * @param tmpReq CreateDIAlarmRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDIAlarmRuleResponse
 */
async function createDIAlarmRuleWithOptions(tmpReq: CreateDIAlarmRuleRequest, runtime: $RuntimeOptions): CreateDIAlarmRuleResponse {
  tmpReq.validate();
  var request = new CreateDIAlarmRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.notificationSettings)) {
    request.notificationSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notificationSettings, 'NotificationSettings', 'json');
  }
  if (!$isNull(tmpReq.triggerConditions)) {
    request.triggerConditionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.triggerConditions, 'TriggerConditions', 'json');
  }
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDIAlarmRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates an alert rule for a synchronization task.
 *
 * @param request CreateDIAlarmRuleRequest
 * @return CreateDIAlarmRuleResponse
 */
async function createDIAlarmRule(request: CreateDIAlarmRuleRequest): CreateDIAlarmRuleResponse {
  var runtime = new $RuntimeOptions{};
  return createDIAlarmRuleWithOptions(request, runtime);
}

model CreateDIJobRequest {
  description?: string(name='Description', description='The description of the synchronization task.', example='The description of the synchronization task.'),
  destinationDataSourceSettings?: [ 
    {
      dataSourceName?: string(name='DataSourceName', description='The name of the data source.', example='holo_datasource_1'),
    }
  ](name='DestinationDataSourceSettings', description='The settings of the destination. Only a single destination is supported.

This parameter is required.'),
  destinationDataSourceType?: string(name='DestinationDataSourceType', description='The destination type. Valid values: Hologres and Hive.

This parameter is required.', example='Hologres'),
  jobName?: string(name='JobName', description='This parameter is deprecated and is replaced by the Name parameter.', example='mysql_to_holo_sync_8772', deprecated=true),
  jobSettings?: {
    channelSettings?: string(name='ChannelSettings', description='The channel control settings for the synchronization task. The value of this parameter must be a JSON string.', example='{"structInfo":"MANAGED","storageType":"TEXTFILE","writeMode":"APPEND","partitionColumns":[{"columnName":"pt","columnType":"STRING","comment":""}],"fieldDelimiter":""}'),
    columnDataTypeSettings?: [ 
      {
        destinationDataType?: string(name='DestinationDataType', description='The data type of the destination field.', example='text'),
        sourceDataType?: string(name='SourceDataType', description='The data type of the source field.', example='bigint'),
      }
    ](name='ColumnDataTypeSettings', description='The data type mappings between source fields and destination fields.'),
    cycleScheduleSettings?: {
      cycleMigrationType?: string(name='CycleMigrationType', description='The synchronization type that requires periodic scheduling. Valid values:

*   Full: full synchronization
*   OfflineIncremental: batch incremental synchronization', example='Full'),
      scheduleParameters?: string(name='ScheduleParameters', description='The scheduling parameters.', example='bizdate=$bizdate'),
    }(name='CycleScheduleSettings', description='The settings for periodic scheduling.'),
    ddlHandlingSettings?: [ 
      {
        action?: string(name='Action', description='The processing policy. Valid values:

*   Ignore: ignores a DDL message.
*   Critical: reports an error for a DDL message.
*   Normal: normally processes a DDL message.', example='Critical'),
        type?: string(name='Type', description='The type of the DDL operation. Valid values:

*   RenameColumn
*   ModifyColumn
*   CreateTable
*   TruncateTable
*   DropTable
*   DropColumn
*   AddColumn', example='AddColumn'),
      }
    ](name='DdlHandlingSettings', description='The processing settings for DDL messages.'),
    runtimeSettings?: [ 
      {
        name?: string(name='Name', description='The name of the configuration item. Valid values:

*   runtime.offline.speed.limit.mb: specifies the maximum transmission rate that is allowed for a batch synchronization task. This configuration item takes effect only when runtime.offline.speed.limit.enable is set to true.
*   runtime.offline.speed.limit.enable: specifies whether throttling is enabled for a batch synchronization task.
*   dst.offline.connection.max: specifies the maximum number of connections that are allowed for writing data to the destination of a batch synchronization task.
*   runtime.offline.concurrent: specifies the maximum number of parallel threads that are allowed for a batch synchronization task.
*   dst.realtime.connection.max: specifies the maximum number of connections that are allowed for writing data to the destination of a real-time synchronization task.
*   runtime.enable.auto.create.schema: specifies whether schemas are automatically created in the destination of a synchronization task.
*   src.offline.datasource.max.connection: specifies the maximum number of connections that are allowed for reading data from the source of a batch synchronization task.
*   runtime.realtime.concurrent: specifies the maximum number of parallel threads that are allowed for a real-time synchronization task.', example='runtime.offline.concurrent'),
        value?: string(name='Value', description='The value of the configuration item.', example='1'),
      }
    ](name='RuntimeSettings', description='The runtime settings.'),
  }(name='JobSettings', description='The settings for the dimension of the synchronization task. The settings include processing policies for DDL messages, policies for data type mappings between source fields and destination fields, and runtime parameters of the synchronization task.'),
  migrationType?: string(name='MigrationType', description='The synchronization type. Valid values:

*   FullAndRealtimeIncremental: one-time full synchronization and real-time incremental synchronization
*   RealtimeIncremental: real-time incremental synchronization
*   Full: full synchronization
*   OfflineIncremental: batch incremental synchronization
*   FullAndOfflineIncremental: one-time full synchronization and batch incremental synchronization

This parameter is required.', example='FullAndRealtimeIncremental'),
  name?: string(name='Name', description='The name of the synchronization task.', example='mysql_to_holo_sync_8772'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000'),
  resourceSettings?: {
    offlineResourceSettings?: {
      requestedCu?: double(name='RequestedCu', description='The number of compute units (CUs) in the resource group for Data Integration that are used for batch synchronization.', example='2.0'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group for Data Integration used for batch synchronization.', example='S_res_group_111_222'),
    }(name='OfflineResourceSettings', description='The resource used for batch synchronization.'),
    realtimeResourceSettings?: {
      requestedCu?: double(name='RequestedCu', description='The number of CUs in the resource group for Data Integration that are used for real-time synchronization.', example='2.0'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group for Data Integration used for real-time synchronization.', example='S_res_group_111_222'),
    }(name='RealtimeResourceSettings', description='The resource used for real-time synchronization.'),
    scheduleResourceSettings?: {
      requestedCu?: double(name='RequestedCu', description='The number of CUs in the resource group for scheduling that are used for batch synchronization.', example='2.0'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group for scheduling used for batch synchronization.', example='S_res_group_235454102432001_1579085295030'),
    }(name='ScheduleResourceSettings', description='The resource used for scheduling.'),
  }(name='ResourceSettings', description='The resource settings.

This parameter is required.'),
  sourceDataSourceSettings?: [ 
    {
      dataSourceName?: string(name='DataSourceName', description='The name of the data source.', example='mysql_datasource_1'),
      dataSourceProperties?: {
        encoding?: string(name='Encoding', description='The encoding format of the database.', example='UTF-8'),
        timezone?: string(name='Timezone', description='The time zone.', example='GMT+8'),
      }(name='DataSourceProperties', description='The properties of the data source.'),
    }
  ](name='SourceDataSourceSettings', description='The settings of the source. Only a single source is supported.

This parameter is required.'),
  sourceDataSourceType?: string(name='SourceDataSourceType', description='The source type. Set this parameter to MySQL.

This parameter is required.', example='MySQL'),
  tableMappings?: [ 
    {
      sourceObjectSelectionRules?: [ 
        {
          action?: string(name='Action', description='The operation that is performed to select objects. Valid values: Include and Exclude.', example='Include'),
          expression?: string(name='Expression', description='The expression.', example='mysql_table_1'),
          expressionType?: string(name='ExpressionType', description='The expression type. Valid values: Exact and Regex.', example='Exact'),
          objectType?: string(name='ObjectType', description='The object type. Valid values:

*   Table
*   Database', example='Table'),
        }
      ](name='SourceObjectSelectionRules', description='The list of rules used to select synchronization objects in the source. The objects can be databases or tables.'),
      transformationRules?: [ 
        {
          ruleActionType?: string(name='RuleActionType', description='The action type. Valid values:

*   DefinePrimaryKey
*   Rename
*   AddColumn
*   HandleDml
*   DefineIncrementalCondition
*   DefineCycleScheduleSettings
*   DefineRuntimeSettings
*   DefinePartitionKey', example='Rename'),
          ruleName?: string(name='RuleName', description='The name of the rule. If the values of the RuleActionType parameter and the RuleTargetType parameter are the same for multiple transformation rules, you must make sure that the transformation rule names are unique.', example='rename_rule_1'),
          ruleTargetType?: string(name='RuleTargetType', description='The type of the object on which you want to perform the action. Valid values:

*   Table
*   Schema', example='Table'),
        }
      ](name='TransformationRules', description='The list of transformation rules that you want to apply to the synchronization objects selected from the source. Each entry in the list defines a transformation rule.'),
    }
  ](name='TableMappings', description='The list of mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. Each entry in the list displays a mapping between a rule used to select synchronization objects and a transformation rule applied to the selected synchronization objects.

This parameter is required.'),
  transformationRules?: [ 
    {
      ruleActionType?: string(name='RuleActionType', description='The action type. Valid values:

*   DefinePrimaryKey
*   Rename
*   AddColumn
*   HandleDml
*   DefineIncrementalCondition
*   DefineCycleScheduleSettings
*   DefineRuntimeSettings
*   DefinePartitionKey', example='Rename'),
      ruleExpression?: string(name='RuleExpression', description='The expression of the rule. The expression must be a JSON string.

Example of a renaming rule: {"expression":"${srcDatasourceName}_${srcDatabaseName}_0922","variables":[{"variableName":"srcDatabaseName","variableRules":[{"from":"fromdb","to":"todb"}]}]}

*   expression: the expression of the renaming rule. You can use the following variables in an expression: ${srcDatasourceName}, ${srcDatabaseName}, and ${srcTableName}. ${srcDatasourceName} specifies the name of the source. ${srcDatabaseName} specifies the name of a source database. ${srcTableName} specifies the name of a source table.
*   variables: the generation rule for a variable used in the expression of the renaming rule. The default value of the specified variable is the original value of the object indicated by the variable. You can define a group of string replacement rules to change the original values based on your business requirements. variableName: the name of the variable. The variable name cannot be enclosed in ${}. variableRules: the string replacement rules for variables. The system runs the string replacement rules in sequence. from specifies the original string. to specifies the new string.

Example of a rule used to add a specific field to the destination and assign a value to the field: {"columns":[{"columnName":"my_add_column","columnValueType":"Constant","columnValue":"123"}]}

*   If you do not configure such a rule, no fields are added to the destination and no values are assigned by default.
*   columnName: the name of the field that you want to add.
*   columnValueType: the value type of the field. Valid values: Constant and Variable.
*   columnValue: the value of the field. If you set the valueType parameter to Constant, set the columnValue parameter to a custom constant of the STRING type. If you set the valueType parameter to Variable, set the columnValue to a built-in variable. The following built-in variables are supported: EXECUTE_TIME (LONG data type), DB_NAME_SRC (STRING data type), DATASOURCE_NAME_SRC (STRING data type), TABLE_NAME_SRC (STRING data type), DB_NAME_DEST (STRING data type), DATASOURCE_NAME_DEST (STRING data type), TABLE_NAME_DEST (STRING data type), and DB_NAME_SRC_TRANSED (STRING data type). EXECUTE_TIME specifies the execution time. DB_NAME_SRC specifies the name of a source database. DATASOURCE_NAME_SRC specifies the name of the source. TABLE_NAME_SRC specifies the name of a source table. DB_NAME_DEST specifies the name of a destination database. DATASOURCE_NAME_DEST specifies the name of the destination. TABLE_NAME_DEST specifies the name of a destination table. DB_NAME_SRC_TRANSED specifies the database name obtained after a transformation.

Example of a rule used to specify primary key fields for a destination table: {"columns":["ukcolumn1","ukcolumn2"]}

*   If you do not configure such a rule, the primary key fields in the mapped source table are used for the destination table by default.
*   If the destination table is an existing table, Data Integration does not modify the schema of the destination table. If the specified primary key fields do not exist in the destination table, an error is reported when the synchronization task starts to run.
*   If the destination table is automatically created by the system, Data Integration automatically creates the schema of the destination table. The schema contains the primary key fields that you specify. If the specified primary key fields do not exist in the destination table, an error is reported when the synchronization task starts to run.

Example of a rule used to process DML messages: {"dmlPolicies":[{"dmlType":"Delete","dmlAction":"Filter","filterCondition":"id > 1"}]}

*   If you do not configure such a rule, the default processing policy for messages generated for insert, update, and delete operations is Normal.
*   dmlType: the DML operation. Valid values: Insert, Update, and Delete.
*   dmlAction: the processing policy for DML messages. Valid values: Normal, Ignore, Filter, and LogicalDelete. Filter indicates conditional processing. You can set the dmlAction parameter to Filter only when the dmlType parameter is set to Update or Delete.
*   filterCondition: the condition used to filter DML messages. This parameter is required only when the dmlAction parameter is set to Filter.', example='{"expression":"${srcDatasoureName}_${srcDatabaseName}"}'),
      ruleName?: string(name='RuleName', description='The name of the rule. If the values of the RuleActionType parameter and the RuleTargetType parameter are the same for multiple transformation rules, you must make sure that the transformation rule names are unique.', example='rename_rule_1'),
      ruleTargetType?: string(name='RuleTargetType', description='The type of the object on which you want to perform the action. Valid values:

*   Table
*   Schema', example='Table'),
    }
  ](name='TransformationRules', description='The list of transformation rules for objects involved in the synchronization task. Each entry in the list defines a transformation rule.'),
}

model CreateDIJobShrinkRequest {
  description?: string(name='Description', description='The description of the synchronization task.', example='The description of the synchronization task.'),
  destinationDataSourceSettingsShrink?: string(name='DestinationDataSourceSettings', description='The settings of the destination. Only a single destination is supported.

This parameter is required.'),
  destinationDataSourceType?: string(name='DestinationDataSourceType', description='The destination type. Valid values: Hologres and Hive.

This parameter is required.', example='Hologres'),
  jobName?: string(name='JobName', description='This parameter is deprecated and is replaced by the Name parameter.', example='mysql_to_holo_sync_8772', deprecated=true),
  jobSettingsShrink?: string(name='JobSettings', description='The settings for the dimension of the synchronization task. The settings include processing policies for DDL messages, policies for data type mappings between source fields and destination fields, and runtime parameters of the synchronization task.'),
  migrationType?: string(name='MigrationType', description='The synchronization type. Valid values:

*   FullAndRealtimeIncremental: one-time full synchronization and real-time incremental synchronization
*   RealtimeIncremental: real-time incremental synchronization
*   Full: full synchronization
*   OfflineIncremental: batch incremental synchronization
*   FullAndOfflineIncremental: one-time full synchronization and batch incremental synchronization

This parameter is required.', example='FullAndRealtimeIncremental'),
  name?: string(name='Name', description='The name of the synchronization task.', example='mysql_to_holo_sync_8772'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000'),
  resourceSettingsShrink?: string(name='ResourceSettings', description='The resource settings.

This parameter is required.'),
  sourceDataSourceSettingsShrink?: string(name='SourceDataSourceSettings', description='The settings of the source. Only a single source is supported.

This parameter is required.'),
  sourceDataSourceType?: string(name='SourceDataSourceType', description='The source type. Set this parameter to MySQL.

This parameter is required.', example='MySQL'),
  tableMappingsShrink?: string(name='TableMappings', description='The list of mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. Each entry in the list displays a mapping between a rule used to select synchronization objects and a transformation rule applied to the selected synchronization objects.

This parameter is required.'),
  transformationRulesShrink?: string(name='TransformationRules', description='The list of transformation rules for objects involved in the synchronization task. Each entry in the list defines a transformation rule.'),
}

model CreateDIJobResponseBody = {
  DIJobId?: long(name='DIJobId', description='This parameter is deprecated and is replaced by the Id parameter.', example='11792', deprecated=true),
  id?: long(name='Id', description='The ID of the synchronization task.', example='11792'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='4F6AB6B3-41FB-5EBB-AFB2-0C98D49DA2BB'),
}

model CreateDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDIJobResponseBody(name='body'),
}

/**
 * @summary Creates a new-version synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq CreateDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDIJobResponse
 */
async function createDIJobWithOptions(tmpReq: CreateDIJobRequest, runtime: $RuntimeOptions): CreateDIJobResponse {
  tmpReq.validate();
  var request = new CreateDIJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.destinationDataSourceSettings)) {
    request.destinationDataSourceSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.destinationDataSourceSettings, 'DestinationDataSourceSettings', 'json');
  }
  if (!$isNull(tmpReq.jobSettings)) {
    request.jobSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.jobSettings, 'JobSettings', 'json');
  }
  if (!$isNull(tmpReq.resourceSettings)) {
    request.resourceSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceSettings, 'ResourceSettings', 'json');
  }
  if (!$isNull(tmpReq.sourceDataSourceSettings)) {
    request.sourceDataSourceSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceDataSourceSettings, 'SourceDataSourceSettings', 'json');
  }
  if (!$isNull(tmpReq.tableMappings)) {
    request.tableMappingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tableMappings, 'TableMappings', 'json');
  }
  if (!$isNull(tmpReq.transformationRules)) {
    request.transformationRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.transformationRules, 'TransformationRules', 'json');
  }
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDIJob',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a new-version synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request CreateDIJobRequest
 * @return CreateDIJobResponse
 */
async function createDIJob(request: CreateDIJobRequest): CreateDIJobResponse {
  var runtime = new $RuntimeOptions{};
  return createDIJobWithOptions(request, runtime);
}

model CreateDataAssetTagRequest {
  description?: string(name='Description'),
  key?: string(name='Key', description='This parameter is required.', example='key1'),
  managers?: [ string ](name='Managers'),
  valueType?: string(name='ValueType', example='String'),
  values?: [ string ](name='Values'),
}

model CreateDataAssetTagShrinkRequest {
  description?: string(name='Description'),
  key?: string(name='Key', description='This parameter is required.', example='key1'),
  managersShrink?: string(name='Managers'),
  valueType?: string(name='ValueType', example='String'),
  valuesShrink?: string(name='Values'),
}

model CreateDataAssetTagResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='0bc1ec92159376'),
  success?: boolean(name='Success', example='true'),
}

model CreateDataAssetTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataAssetTagResponseBody(name='body'),
}

/**
 * @summary 创建标签
 *
 * @param tmpReq CreateDataAssetTagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataAssetTagResponse
 */
async function createDataAssetTagWithOptions(tmpReq: CreateDataAssetTagRequest, runtime: $RuntimeOptions): CreateDataAssetTagResponse {
  tmpReq.validate();
  var request = new CreateDataAssetTagShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.managers)) {
    request.managersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.managers, 'Managers', 'json');
  }
  if (!$isNull(tmpReq.values)) {
    request.valuesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.values, 'Values', 'json');
  }
  var query = {};
  if (!$isNull(request.description)) {
    query['Description'] = request.description;
  }
  if (!$isNull(request.key)) {
    query['Key'] = request.key;
  }
  if (!$isNull(request.managersShrink)) {
    query['Managers'] = request.managersShrink;
  }
  if (!$isNull(request.valueType)) {
    query['ValueType'] = request.valueType;
  }
  if (!$isNull(request.valuesShrink)) {
    query['Values'] = request.valuesShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDataAssetTag',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建标签
 *
 * @param request CreateDataAssetTagRequest
 * @return CreateDataAssetTagResponse
 */
async function createDataAssetTag(request: CreateDataAssetTagRequest): CreateDataAssetTagResponse {
  var runtime = new $RuntimeOptions{};
  return createDataAssetTagWithOptions(request, runtime);
}

model CreateDataQualityEvaluationTaskRequest {
  dataQualityRules?: [ 
    {
      checkingConfig?: {
        referencedSamplesFilter?: string(name='ReferencedSamplesFilter', description='The method that is used to query the referenced samples. To obtain specific types of thresholds, you must query reference values. In this example, an expression is used to specify the query method of referenced samples.', example='{"bizdate": ["-1"]}'),
        thresholds?: {
          critical?: {
            expression?: string(name='Expression'),
            operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
            value?: string(name='Value', description='The threshold value.', example='0.01'),
          }(name='Critical', description='The threshold settings for critical alerts.'),
          expected?: {
            expression?: string(name='Expression'),
            operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='='),
            value?: string(name='Value', description='The threshold value.', example='0'),
          }(name='Expected', description='The expected threshold setting.'),
          warned?: {
            expression?: string(name='Expression'),
            operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
            value?: string(name='Value', description='The threshold value.', example='0.001'),
          }(name='Warned', description='The threshold settings for normal alerts.'),
        }(name='Thresholds', description='The threshold settings.'),
        type?: string(name='Type', description='The threshold calculation method. Valid values:

*   Fixed
*   Fluctuation
*   FluctuationDiscreate
*   Auto
*   Average', example='Fixed'),
      }(name='CheckingConfig', description='The check settings for sample data.'),
      description?: string(name='Description', description='The description of the monitoring rule.'),
      enabled?: boolean(name='Enabled', description='Specifies whether to enable the monitoring rule.', example='true'),
      errorHandlers?: [ 
        {
          errorDataFilter?: string(name='ErrorDataFilter', description='The SQL statement that is used to filter failed tasks. If you define the rule by using custom SQL statements, you must specify an SQL statement to filter failed tasks.', example='SELECT * FROM ods_api_log WHERE status = \\\\"Error\\\\";'),
          type?: string(name='Type', description='The type of the operation. Valid values:

*   SaveErrorData', example='SaveErrorData'),
        }
      ](name='ErrorHandlers', description='The operations that you can perform after the rule-based check.'),
      id?: long(name='Id', description='The rule ID.', example='2176'),
      name?: string(name='Name', description='The name of the monitoring rule.'),
      samplingConfig?: {
        metric?: string(name='Metric', description='The metrics used for sampling. Valid values:

*   Count: the number of rows in the table.
*   Min: the minimum value of the field.
*   Max: the maximum value of the field.
*   Avg: the average value of the field.
*   DistinctCount: the number of unique values of the field after deduplication.
*   DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
*   DuplicatedCount: the number of duplicated values of the field.
*   DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
*   TableSize: the table size.
*   NullValueCount: the number of rows in which the field value is null.
*   NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
*   GroupCount: the field value and the number of rows for each field value.
*   CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
*   CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
*   UserDefinedSql: specifies that data is sampled by executing custom SQL statements.', example='NullValueCount'),
        metricParameters?: string(name='MetricParameters', description='The parameters required for sampling.', example='{ "Columns": [ "id", "name" ] , "SQL": "select count(1) from table;"}'),
        samplingFilter?: string(name='SamplingFilter', description='The statements that are used to filter unnecessary data during sampling. The statements can be up to 16,777,215 characters in length.', example='status != \\\\"Succeeded\\\\"'),
        settingConfig?: string(name='SettingConfig', description='The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.', example='odps.sql.type.system.odps2=True,odps.sql.hive.compatible=True'),
      }(name='SamplingConfig', description='The parameters required for sampling.'),
      severity?: string(name='Severity', description='The strength of the monitoring rule. Valid values:

*   Normal
*   High', example='High'),
      templateCode?: string(name='TemplateCode', description='The ID of the template used by the monitoring rule.', example='SYSTEM:field:null_value:fixed:0'),
    }
  ](name='DataQualityRules', description='The list of monitoring rules that are associated with the monitor. If you configure the ID of a monitoring rule by using the DataQualityRule.Id parameter, the system associates the rule with a created monitor. If you do not configure the ID of a monitoring rule, the system creates a new monitoring rule by using other fields and associates the rule with a created monitor.'),
  dataSourceId?: long(name='DataSourceId', description='The data source ID. You can call the [ListDataSources](https://help.aliyun.com/document_detail/211431.html) operation to query the ID.', example='1'),
  description?: string(name='Description', description='The description of the monitor.'),
  hooks?: [ 
    {
      condition?: string(name='Condition', description='The hook trigger condition. When this condition is met, the hook action is triggered. Only two conditional expressions are supported:

1.  Specify only one group of rule strength type and rule check status, such as `${severity} == "High" AND ${status} == "Critical"`. In this expression, the hook trigger condition is met if severity is High and status is Critical.
2.  Specify multiple groups of rule strength types and rule check status, such as `(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")`. In this expression, the hook trigger condition is met if severity is High and status is Critical, severity is Normal and status is Critical, or severity is Normal and status is Error. The enumeration of severity in a conditional expression is the same as the enumeration of severity in DataQualityRule. The enumeration of status in a conditional expression is the same as the enumeration of status in DataQualityResult.', example='(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")'),
      type?: string(name='Type', description='The hook type. Only one hook type is supported.

*   BlockTaskInstance: Blocks the running of scheduling tasks. A monitor is triggered by scheduling tasks. After a monitor finishes running, the monitor determines whether to block the running of scheduling tasks based on the hook condition.', example='BlockTaskInstance'),
    }
  ](name='Hooks', description='The hook.'),
  name?: string(name='Name', description='The name of the monitor.

This parameter is required.'),
  notifications?: {
    condition?: string(name='Condition', description='The notification trigger condition. When this condition is met, the alert notification is triggered. Only two conditional expressions are supported:

Specify only one group of rule strength type and rule check status, such as `${severity} == "High" AND ${status} == "Critical"`. In this expression, the hook trigger condition is met if severity is High and status is Critical. Specify multiple groups of rule strength types and rule check status, such as `(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")`. In this expression, the hook trigger condition is met if severity is High and status is Critical, severity is Normal and status is Critical, or severity is Normal and status is Error. The enumeration of severity in a conditional expression is the same as the enumeration of severity in DataQualityRule. The enumeration of status in a conditional expression is the same as the enumeration of status in DataQualityResult.', example='(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")'),
    notifications?: [ 
      {
        notificationChannels?: [ 
          {
            channels?: [ string ](name='Channels', description='The alert notification method.'),
          }
        ](name='NotificationChannels', description='The alert notification method.'),
        notificationReceivers?: [ 
          {
            extension?: string(name='Extension', description='The additional parameters that are required when alerts are sent. The parameters are JSON-formatted strings. The following keys are supported:

*   atAll: specifies that all members in a group are mentioned when alerts are sent by using DingTalk. This parameter is valid only if you set ReceiverType to DingdingUrl.', example='{  "atAll": true }'),
            receiverType?: string(name='ReceiverType', description='The type of the alert recipient.

Valid values:

*   WebhookUrl
*   FeishuUrl
*   DingdingUrl
*   WeixinUrl
*   AliUid', example='DingdingUrl'),
            receiverValues?: [ string ](name='ReceiverValues', description='The alert recipient.'),
          }
        ](name='NotificationReceivers', description='The configurations of alert recipients.'),
      }
    ](name='Notifications', description='The configurations of the alert notification.'),
  }(name='Notifications', description='The configurations of alert notifications.'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You can use this parameter to specify the DataWorks workspace on which you want to perform the API operation.', example='10000'),
  runtimeConf?: string(name='RuntimeConf', description='The extended configurations in JSON-formatted strings. You can use this parameter only for monitors that are used to monitor the quality of E-MapReduce (EMR) data.

*   queue: The Yarn queue used when a monitor checks the quality of EMR data. By default, the queue configured for the current workspace is used.

*   sqlEngine: The SQL engine used when a monitor checks the quality of EMR data.

    *   HIVE_SQL
    *   SPARK_SQL', example='{ "queue": "default", "sqlEngine": "SPARK_SQL" }'),
  target?: {
    databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs.', example='maxcompute'),
    partitionSpec?: string(name='PartitionSpec', description='The partition configuration of the partitioned table.', example='pt=$[yyyymmdd-1]'),
    tableGuid?: string(name='TableGuid', description='The ID of the table in Data Map.', example='odps.api_test.ods_openapi_log_d'),
  }(name='Target', description='The monitored object of the monitor.'),
  trigger?: {
    taskIds?: [ long ](name='TaskIds', description='The IDs of scheduling tasks. This parameter is valid only if you set Type to ByScheduledTaskInstance.'),
    type?: string(name='Type', description='The trigger type of the monitor. Valid values:

*   ByManual (default): The monitor is manually triggered.
*   ByScheduledTaskInstance: The monitor is triggered by the associated scheduling tasks.', example='ByScheduledTaskInstance'),
  }(name='Trigger', description='The trigger configuration of the monitor.'),
}

model CreateDataQualityEvaluationTaskShrinkRequest {
  dataQualityRulesShrink?: string(name='DataQualityRules', description='The list of monitoring rules that are associated with the monitor. If you configure the ID of a monitoring rule by using the DataQualityRule.Id parameter, the system associates the rule with a created monitor. If you do not configure the ID of a monitoring rule, the system creates a new monitoring rule by using other fields and associates the rule with a created monitor.'),
  dataSourceId?: long(name='DataSourceId', description='The data source ID. You can call the [ListDataSources](https://help.aliyun.com/document_detail/211431.html) operation to query the ID.', example='1'),
  description?: string(name='Description', description='The description of the monitor.'),
  hooksShrink?: string(name='Hooks', description='The hook.'),
  name?: string(name='Name', description='The name of the monitor.

This parameter is required.'),
  notificationsShrink?: string(name='Notifications', description='The configurations of alert notifications.'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You can use this parameter to specify the DataWorks workspace on which you want to perform the API operation.', example='10000'),
  runtimeConf?: string(name='RuntimeConf', description='The extended configurations in JSON-formatted strings. You can use this parameter only for monitors that are used to monitor the quality of E-MapReduce (EMR) data.

*   queue: The Yarn queue used when a monitor checks the quality of EMR data. By default, the queue configured for the current workspace is used.

*   sqlEngine: The SQL engine used when a monitor checks the quality of EMR data.

    *   HIVE_SQL
    *   SPARK_SQL', example='{ "queue": "default", "sqlEngine": "SPARK_SQL" }'),
  targetShrink?: string(name='Target', description='The monitored object of the monitor.'),
  triggerShrink?: string(name='Trigger', description='The trigger configuration of the monitor.'),
}

model CreateDataQualityEvaluationTaskResponseBody = {
  id?: long(name='Id', description='The ID of the new monitor.', example='10001'),
  requestId?: string(name='RequestId', description='Id of the request', example='2d9ce-38ef-4923-baf6-391a7e656'),
}

model CreateDataQualityEvaluationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataQualityEvaluationTaskResponseBody(name='body'),
}

/**
 * @summary Creates a monitor in DataWorks Data Quality.
 *
 * @description This API operation is supported in all DataWorks editions.
 *
 * @param tmpReq CreateDataQualityEvaluationTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataQualityEvaluationTaskResponse
 */
async function createDataQualityEvaluationTaskWithOptions(tmpReq: CreateDataQualityEvaluationTaskRequest, runtime: $RuntimeOptions): CreateDataQualityEvaluationTaskResponse {
  tmpReq.validate();
  var request = new CreateDataQualityEvaluationTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.dataQualityRules)) {
    request.dataQualityRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataQualityRules, 'DataQualityRules', 'json');
  }
  if (!$isNull(tmpReq.hooks)) {
    request.hooksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hooks, 'Hooks', 'json');
  }
  if (!$isNull(tmpReq.notifications)) {
    request.notificationsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notifications, 'Notifications', 'json');
  }
  if (!$isNull(tmpReq.target)) {
    request.targetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.target, 'Target', 'json');
  }
  if (!$isNull(tmpReq.trigger)) {
    request.triggerShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.trigger, 'Trigger', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.dataQualityRulesShrink)) {
    body['DataQualityRules'] = request.dataQualityRulesShrink;
  }
  if (!$isNull(request.dataSourceId)) {
    body['DataSourceId'] = request.dataSourceId;
  }
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.hooksShrink)) {
    body['Hooks'] = request.hooksShrink;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.notificationsShrink)) {
    body['Notifications'] = request.notificationsShrink;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.runtimeConf)) {
    body['RuntimeConf'] = request.runtimeConf;
  }
  if (!$isNull(request.targetShrink)) {
    body['Target'] = request.targetShrink;
  }
  if (!$isNull(request.triggerShrink)) {
    body['Trigger'] = request.triggerShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDataQualityEvaluationTask',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a monitor in DataWorks Data Quality.
 *
 * @description This API operation is supported in all DataWorks editions.
 *
 * @param request CreateDataQualityEvaluationTaskRequest
 * @return CreateDataQualityEvaluationTaskResponse
 */
async function createDataQualityEvaluationTask(request: CreateDataQualityEvaluationTaskRequest): CreateDataQualityEvaluationTaskResponse {
  var runtime = new $RuntimeOptions{};
  return createDataQualityEvaluationTaskWithOptions(request, runtime);
}

model CreateDataQualityEvaluationTaskInstanceRequest {
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', description='This parameter is required.', example='200001'),
  parameters?: string(name='Parameters', description='This parameter is required.', example='{ "triggerTime": 1733284062000 }'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='10000'),
  runtimeResource?: {
    cu?: double(name='Cu', example='0.25'),
    resourceGroupId?: string(name='ResourceGroupId', example='63900680'),
  }(name='RuntimeResource'),
}

model CreateDataQualityEvaluationTaskInstanceShrinkRequest {
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', description='This parameter is required.', example='200001'),
  parameters?: string(name='Parameters', description='This parameter is required.', example='{ "triggerTime": 1733284062000 }'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='10000'),
  runtimeResourceShrink?: string(name='RuntimeResource'),
}

model CreateDataQualityEvaluationTaskInstanceResponseBody = {
  id?: long(name='Id', example='22130'),
  requestId?: string(name='RequestId', description='Id of the request', example='ecb967ec-c137-48****'),
}

model CreateDataQualityEvaluationTaskInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataQualityEvaluationTaskInstanceResponseBody(name='body'),
}

/**
 * @summary 创建数据质量校验任务实例
 *
 * @param tmpReq CreateDataQualityEvaluationTaskInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataQualityEvaluationTaskInstanceResponse
 */
async function createDataQualityEvaluationTaskInstanceWithOptions(tmpReq: CreateDataQualityEvaluationTaskInstanceRequest, runtime: $RuntimeOptions): CreateDataQualityEvaluationTaskInstanceResponse {
  tmpReq.validate();
  var request = new CreateDataQualityEvaluationTaskInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.runtimeResource)) {
    request.runtimeResourceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.runtimeResource, 'RuntimeResource', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.dataQualityEvaluationTaskId)) {
    body['DataQualityEvaluationTaskId'] = request.dataQualityEvaluationTaskId;
  }
  if (!$isNull(request.parameters)) {
    body['Parameters'] = request.parameters;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.runtimeResourceShrink)) {
    body['RuntimeResource'] = request.runtimeResourceShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDataQualityEvaluationTaskInstance',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建数据质量校验任务实例
 *
 * @param request CreateDataQualityEvaluationTaskInstanceRequest
 * @return CreateDataQualityEvaluationTaskInstanceResponse
 */
async function createDataQualityEvaluationTaskInstance(request: CreateDataQualityEvaluationTaskInstanceRequest): CreateDataQualityEvaluationTaskInstanceResponse {
  var runtime = new $RuntimeOptions{};
  return createDataQualityEvaluationTaskInstanceWithOptions(request, runtime);
}

model CreateDataQualityRuleRequest {
  checkingConfig?: {
    referencedSamplesFilter?: string(name='ReferencedSamplesFilter', description='The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference values. In this example, an expression is used to specify the query method of referenced samples.', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
    thresholds?: {
      critical?: {
        expression?: string(name='Expression', example='$checkValue > 0.05'),
        operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
        value?: string(name='Value', description='The threshold value.', example='100.0'),
      }(name='Critical', description='The threshold settings for critical alerts.'),
      expected?: {
        expression?: string(name='Expression', example='$checkValue <= 0.01'),
        operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
        value?: string(name='Value', description='The threshold value.', example='100.0'),
      }(name='Expected', description='The expected threshold setting.'),
      warned?: {
        expression?: string(name='Expression', example='$checkValue > 0.01'),
        operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
        value?: string(name='Value', description='The threshold value.', example='100.0'),
      }(name='Warned', description='The threshold settings for normal alerts.'),
    }(name='Thresholds', description='The threshold settings.'),
    type?: string(name='Type', description='The method that is used to calculate a threshold. You can leave this parameter empty if you use a rule template. Valid values:

*   Fixed
*   Fluctation
*   FluctationDiscreate
*   Auto
*   Average
*   Variance', example='Fixed'),
  }(name='CheckingConfig', description='The check settings for sample data.'),
  description?: string(name='Description', description='The description of the rule. The description can be up to 500 characters in length.', example='this is a odps _sql task'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the monitoring rule.', example='true'),
  errorHandlers?: [ 
    {
      errorDataFilter?: string(name='ErrorDataFilter', description='The SQL statement that is used to filter failed tasks. If the rule is defined by custom SQL statements, you must specify an SQL statement to filter failed tasks.', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
      type?: string(name='Type', description='The type of the operation. Valid values:

*   SaveErrorData', example='SaveErrorData'),
    }
  ](name='ErrorHandlers', description='The operations that you can perform after the rule-based check fails.'),
  name?: string(name='Name', description='The name of the rule.

This parameter is required.'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='10726'),
  samplingConfig?: {
    metric?: string(name='Metric', description='The metrics used for sampling. Valid values:

*   Count: the number of rows in the table.
*   Min: the minimum value of the field.
*   Max: the maximum value of the field.
*   Avg: the average value of the field.
*   DistinctCount: the number of unique values of the field after deduplication.
*   DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
*   DuplicatedCount: the number of duplicated values of the field.
*   DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
*   TableSize: the table size.
*   NullValueCount: the number of rows in which the field value is null.
*   NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
*   GroupCount: the field value and the number of rows for each field value.
*   CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
*   CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
*   UserDefinedSql: indicates that data is sampled by executing custom SQL statements.', example='Count'),
    metricParameters?: string(name='MetricParameters', description='The parameters required for sampling.', example='{ "Columns": [ "id", "name" ] , "SQL": "select count(1) from table;"}'),
    samplingFilter?: string(name='SamplingFilter', description='The statements that are used to filter unnecessary data during sampling. The statements can be up to 16,777,215 characters in length.', example='id IS NULL'),
    settingConfig?: string(name='SettingConfig', description='The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.', example='SET odps.sql.udf.timeout=600s; 
SET odps.sql.python.version=cp27;'),
  }(name='SamplingConfig', description='The sampling settings.'),
  severity?: string(name='Severity', description='The strength of the rule.

*   Normal
*   High', example='Normal'),
  target?: {
    databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs. Valid values:

*   maxcompute
*   emr
*   cdh
*   hologres
*   analyticdb_for_postgresql
*   analyticdb_for_mysql
*   starrocks', example='maxcompute'),
    partitionSpec?: string(name='PartitionSpec', description='The configuration of the partitioned table.', example='ds=$[yyyymmdd-1]'),
    tableGuid?: string(name='TableGuid', description='The ID of the table that is limited by the rule in Data Map.

This parameter is required.', example='odps.unit_test.tb_unit_test'),
    type?: string(name='Type', description='The type of the monitored object. Valid values:

*   Table', example='Table'),
  }(name='Target', description='The monitored object of the rule.'),
  templateCode?: string(name='TemplateCode', description='The ID of the template used by the rule.', example='system::user_defined'),
}

model CreateDataQualityRuleShrinkRequest {
  checkingConfigShrink?: string(name='CheckingConfig', description='The check settings for sample data.'),
  description?: string(name='Description', description='The description of the rule. The description can be up to 500 characters in length.', example='this is a odps _sql task'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the monitoring rule.', example='true'),
  errorHandlersShrink?: string(name='ErrorHandlers', description='The operations that you can perform after the rule-based check fails.'),
  name?: string(name='Name', description='The name of the rule.

This parameter is required.'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='10726'),
  samplingConfigShrink?: string(name='SamplingConfig', description='The sampling settings.'),
  severity?: string(name='Severity', description='The strength of the rule.

*   Normal
*   High', example='Normal'),
  targetShrink?: string(name='Target', description='The monitored object of the rule.'),
  templateCode?: string(name='TemplateCode', description='The ID of the template used by the rule.', example='system::user_defined'),
}

model CreateDataQualityRuleResponseBody = {
  id?: long(name='Id', example='19715'),
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
}

model CreateDataQualityRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataQualityRuleResponseBody(name='body'),
}

/**
 * @summary Creates a data quality monitoring rule.
 *
 * @param tmpReq CreateDataQualityRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataQualityRuleResponse
 */
async function createDataQualityRuleWithOptions(tmpReq: CreateDataQualityRuleRequest, runtime: $RuntimeOptions): CreateDataQualityRuleResponse {
  tmpReq.validate();
  var request = new CreateDataQualityRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.checkingConfig)) {
    request.checkingConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.checkingConfig, 'CheckingConfig', 'json');
  }
  if (!$isNull(tmpReq.errorHandlers)) {
    request.errorHandlersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.errorHandlers, 'ErrorHandlers', 'json');
  }
  if (!$isNull(tmpReq.samplingConfig)) {
    request.samplingConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.samplingConfig, 'SamplingConfig', 'json');
  }
  if (!$isNull(tmpReq.target)) {
    request.targetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.target, 'Target', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.checkingConfigShrink)) {
    body['CheckingConfig'] = request.checkingConfigShrink;
  }
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.enabled)) {
    body['Enabled'] = request.enabled;
  }
  if (!$isNull(request.errorHandlersShrink)) {
    body['ErrorHandlers'] = request.errorHandlersShrink;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.samplingConfigShrink)) {
    body['SamplingConfig'] = request.samplingConfigShrink;
  }
  if (!$isNull(request.severity)) {
    body['Severity'] = request.severity;
  }
  if (!$isNull(request.targetShrink)) {
    body['Target'] = request.targetShrink;
  }
  if (!$isNull(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDataQualityRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a data quality monitoring rule.
 *
 * @param request CreateDataQualityRuleRequest
 * @return CreateDataQualityRuleResponse
 */
async function createDataQualityRule(request: CreateDataQualityRuleRequest): CreateDataQualityRuleResponse {
  var runtime = new $RuntimeOptions{};
  return createDataQualityRuleWithOptions(request, runtime);
}

model CreateDataQualityRuleTemplateRequest {
  checkingConfig?: {
    referencedSamplesFilter?: string(name='ReferencedSamplesFilter', description='The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference samples and perform aggregate operations on the reference values. In this example, an expression is used to specify the query method of referenced samples.', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
    type?: string(name='Type', description='The threshold calculation method. Valid values:

*   Fixed
*   Fluctation
*   FluctationDiscreate
*   Auto
*   Average
*   Variance', example='Fixed'),
  }(name='CheckingConfig', description='The check settings for sample data.'),
  directoryPath?: string(name='DirectoryPath', description='The directory in which the template is stored. Slashes (/) are used to separate directory levels. The name of each directory level can be up to 1,024 characters in length. It cannot contain whitespace characters or slashes (/).'),
  name?: string(name='Name', description='The name of the template. The name can be up to 512 characters in length and can contain digits, letters, and punctuation marks.

This parameter is required.'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='12345'),
  samplingConfig?: {
    metric?: string(name='Metric', description='The metrics used for sampling. Valid values:

*   Count: the number of rows in the table.
*   Min: the minimum value of the field.
*   Max: the maximum value of the field.
*   Avg: the average value of the field.
*   DistinctCount: the number of unique values of the field after deduplication.
*   DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
*   DuplicatedCount: the number of duplicated values of the field.
*   DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
*   TableSize: the table size.
*   NullValueCount: the number of rows in which the field value is null.
*   NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
*   GroupCount: the field value and the number of rows for each field value.
*   CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
*   CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
*   UserDefinedSql: indicates that data is sampled by executing custom SQL statements.', example='Count'),
    metricParameters?: string(name='MetricParameters', description='The parameters required for sampling.', example='{"SQL": "select count(1) from table;"}'),
    settingConfig?: string(name='SettingConfig', description='The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.', example='SET odps.sql.udf.timeout=600s; 
SET odps.sql.python.version=cp27;'),
  }(name='SamplingConfig', description='The sampling settings.'),
  visibleScope?: string(name='VisibleScope', description='The applicable scope of the template. Valid values:

*   Tenant: The template is available in all workspaces in the current tenant.
*   Project: The template is available only in the current workspace.', example='Project'),
}

model CreateDataQualityRuleTemplateShrinkRequest {
  checkingConfigShrink?: string(name='CheckingConfig', description='The check settings for sample data.'),
  directoryPath?: string(name='DirectoryPath', description='The directory in which the template is stored. Slashes (/) are used to separate directory levels. The name of each directory level can be up to 1,024 characters in length. It cannot contain whitespace characters or slashes (/).'),
  name?: string(name='Name', description='The name of the template. The name can be up to 512 characters in length and can contain digits, letters, and punctuation marks.

This parameter is required.'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='12345'),
  samplingConfigShrink?: string(name='SamplingConfig', description='The sampling settings.'),
  visibleScope?: string(name='VisibleScope', description='The applicable scope of the template. Valid values:

*   Tenant: The template is available in all workspaces in the current tenant.
*   Project: The template is available only in the current workspace.', example='Project'),
}

model CreateDataQualityRuleTemplateResponseBody = {
  code?: string(name='Code', example='UserDefined:3001'),
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
}

model CreateDataQualityRuleTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataQualityRuleTemplateResponseBody(name='body'),
}

/**
 * @summary Creates a data quality monitoring rule template.
 *
 * @param tmpReq CreateDataQualityRuleTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataQualityRuleTemplateResponse
 */
async function createDataQualityRuleTemplateWithOptions(tmpReq: CreateDataQualityRuleTemplateRequest, runtime: $RuntimeOptions): CreateDataQualityRuleTemplateResponse {
  tmpReq.validate();
  var request = new CreateDataQualityRuleTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.checkingConfig)) {
    request.checkingConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.checkingConfig, 'CheckingConfig', 'json');
  }
  if (!$isNull(tmpReq.samplingConfig)) {
    request.samplingConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.samplingConfig, 'SamplingConfig', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.checkingConfigShrink)) {
    body['CheckingConfig'] = request.checkingConfigShrink;
  }
  if (!$isNull(request.directoryPath)) {
    body['DirectoryPath'] = request.directoryPath;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.samplingConfigShrink)) {
    body['SamplingConfig'] = request.samplingConfigShrink;
  }
  if (!$isNull(request.visibleScope)) {
    body['VisibleScope'] = request.visibleScope;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDataQualityRuleTemplate',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a data quality monitoring rule template.
 *
 * @param request CreateDataQualityRuleTemplateRequest
 * @return CreateDataQualityRuleTemplateResponse
 */
async function createDataQualityRuleTemplate(request: CreateDataQualityRuleTemplateRequest): CreateDataQualityRuleTemplateResponse {
  var runtime = new $RuntimeOptions{};
  return createDataQualityRuleTemplateWithOptions(request, runtime);
}

model CreateDataSourceRequest {
  connectionProperties?: string(name='ConnectionProperties', description='The connection configurations of the data source, including the connection address, access identity, and environment information. The envType parameter specifies the environment in which the data source is used. Valid values of the envType parameter:

*   Dev: development environment
*   Prod: production environment

The parameters that you need to configure to the data source vary based on the mode in which the data source is added. For more information, see [Data source connection information (ConnectionProperties)](https://help.aliyun.com/document_detail/2852465.html).

This parameter is required.', example='{
	"envType": "Prod",
	"regionId": "cn-beijing",
    "instanceId": "hgprecn-cn-x0r3oun4k001",
    "database": "testdb",
    "securityProtocol": "authTypeNone",
    "authType": "Executor",
    "authIdentity": "1107550004253538"
}'),
  connectionPropertiesMode?: string(name='ConnectionPropertiesMode', description='The mode in which you want to add the data source. The mode varies based on the data source type. Valid values for MySQL data sources:

*   InstanceMode: instance mode
*   UrlMode: connection string mode

This parameter is required.', example='UrlMode'),
  description?: string(name='Description', description='The description of the data source. The description cannot exceed 3,000 characters in length.', example='this is a holo datasource'),
  name?: string(name='Name', description='The name of the data source. The name can be up to 255 characters in length and can contain letters, digits, and underscores (_). The name must start with a letter.

This parameter is required.', example='demo_holo_datasource'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='2'),
  type?: string(name='Type', description='The type of the data source. More than 70 types of data sources are supported in DataWorks.

This parameter is required.', example='hologres'),
}

model CreateDataSourceResponseBody = {
  id?: long(name='Id', description='The data source ID.', example='22130'),
  requestId?: string(name='RequestId', example='B62EC203-B39E-5DC1-B5B8-EB3C61707009'),
}

model CreateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSourceResponseBody(name='body'),
}

/**
 * @summary Adds a data source to the development environment or production environment of a workspace.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request CreateDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataSourceResponse
 */
async function createDataSourceWithOptions(request: CreateDataSourceRequest, runtime: $RuntimeOptions): CreateDataSourceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.connectionProperties)) {
    query['ConnectionProperties'] = request.connectionProperties;
  }
  if (!$isNull(request.connectionPropertiesMode)) {
    query['ConnectionPropertiesMode'] = request.connectionPropertiesMode;
  }
  if (!$isNull(request.description)) {
    query['Description'] = request.description;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDataSource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Adds a data source to the development environment or production environment of a workspace.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request CreateDataSourceRequest
 * @return CreateDataSourceResponse
 */
async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  var runtime = new $RuntimeOptions{};
  return createDataSourceWithOptions(request, runtime);
}

model CreateDataSourceSharedRuleRequest {
  dataSourceId?: long(name='DataSourceId', description='The data source ID.

This parameter is required.', example='144544'),
  envType?: string(name='EnvType', description='This parameter is required.', example='Dev'),
  sharedUser?: string(name='SharedUser', description='The user with which you want to share the data source. If you do not configure this parameter, the data source is shared to an entire workspace.', example='1107550004253538'),
  targetProjectId?: long(name='TargetProjectId', description='The ID of the workspace to which you want to share the data source. You cannot share the data source to the workspace with which the data source is associated.

This parameter is required.', example='106560'),
}

model CreateDataSourceSharedRuleResponseBody = {
  id?: long(name='Id', description='The sharing rule ID.', example='105412'),
  requestId?: string(name='RequestId', example='46F594E6-84AB-5FA5-8144-6F3D149961E1'),
}

model CreateDataSourceSharedRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSourceSharedRuleResponseBody(name='body'),
}

/**
 * @summary Creates a rule for sharing a data source to other workspaces or RAM users.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  If you want to share a data source from Workspace A to Workspace B, you must have the permissions to share the data source in both workspaces. You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
 *
 * @param request CreateDataSourceSharedRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataSourceSharedRuleResponse
 */
async function createDataSourceSharedRuleWithOptions(request: CreateDataSourceSharedRuleRequest, runtime: $RuntimeOptions): CreateDataSourceSharedRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!$isNull(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!$isNull(request.sharedUser)) {
    query['SharedUser'] = request.sharedUser;
  }
  if (!$isNull(request.targetProjectId)) {
    query['TargetProjectId'] = request.targetProjectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDataSourceSharedRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a rule for sharing a data source to other workspaces or RAM users.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  If you want to share a data source from Workspace A to Workspace B, you must have the permissions to share the data source in both workspaces. You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
 *
 * @param request CreateDataSourceSharedRuleRequest
 * @return CreateDataSourceSharedRuleResponse
 */
async function createDataSourceSharedRule(request: CreateDataSourceSharedRuleRequest): CreateDataSourceSharedRuleResponse {
  var runtime = new $RuntimeOptions{};
  return createDataSourceSharedRuleWithOptions(request, runtime);
}

model CreateDeploymentRequest {
  description?: string(name='Description', description='The description of the process.'),
  objectIds?: [ string ](name='ObjectIds', description='The IDs of entities to which you want to apply the process.

>  A process can be applied to only a single entity and its child entities. If you specify multiple entities in the array, the process is applied only to the first entity in the array and its child entities. Make sure that the array in your request contains only one element. Extra elements will be ignored.

This parameter is required.'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  type?: string(name='Type', description='Specifies whether to deploy or undeploy the entity. Valid values:

*   Online: deploys the entity.
*   Offline: undeploys the entity.

This parameter is required.', example='Online'),
}

model CreateDeploymentShrinkRequest {
  description?: string(name='Description', description='The description of the process.'),
  objectIdsShrink?: string(name='ObjectIds', description='The IDs of entities to which you want to apply the process.

>  A process can be applied to only a single entity and its child entities. If you specify multiple entities in the array, the process is applied only to the first entity in the array and its child entities. Make sure that the array in your request contains only one element. Extra elements will be ignored.

This parameter is required.'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  type?: string(name='Type', description='Specifies whether to deploy or undeploy the entity. Valid values:

*   Online: deploys the entity.
*   Offline: undeploys the entity.

This parameter is required.', example='Online'),
}

model CreateDeploymentResponseBody = {
  id?: string(name='Id', description='The ID of the process.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX'),
  requestId?: string(name='RequestId', description='The request ID.', example='7C352CB7-CD88-50CF-9D0D-E81BDF02XXXX'),
}

model CreateDeploymentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDeploymentResponseBody(name='body'),
}

/**
 * @summary Creates a process for deploying or undeploying an entity in DataStudio.
 *
 * @description >  You cannot use this API operation to create a process for multiple entities at a time. If you specify multiple entities in a request, the system creates a process only for the first entity.
 *
 * @param tmpReq CreateDeploymentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDeploymentResponse
 */
async function createDeploymentWithOptions(tmpReq: CreateDeploymentRequest, runtime: $RuntimeOptions): CreateDeploymentResponse {
  tmpReq.validate();
  var request = new CreateDeploymentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.objectIds)) {
    request.objectIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.objectIds, 'ObjectIds', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.objectIdsShrink)) {
    body['ObjectIds'] = request.objectIdsShrink;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDeployment',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a process for deploying or undeploying an entity in DataStudio.
 *
 * @description >  You cannot use this API operation to create a process for multiple entities at a time. If you specify multiple entities in a request, the system creates a process only for the first entity.
 *
 * @param request CreateDeploymentRequest
 * @return CreateDeploymentResponse
 */
async function createDeployment(request: CreateDeploymentRequest): CreateDeploymentResponse {
  var runtime = new $RuntimeOptions{};
  return createDeploymentWithOptions(request, runtime);
}

model CreateFunctionRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='12345'),
  spec?: string(name='Spec', description='The FlowSpec field information about the UDF. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.'),
}

model CreateFunctionResponseBody = {
  id?: long(name='Id', description='The ID of the UDF.', example='580667964888595XXXX'),
  requestId?: string(name='RequestId', description='The request ID.', example='AE49C88D-5BEE-5ADD-8B8C-C4BBC0D7XXXX'),
}

model CreateFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFunctionResponseBody(name='body'),
}

/**
 * @summary Creates a user-defined function (UDF) in DataStudio. The information about the UDF is described by using FlowSpec.
 *
 * @description >  You cannot use this API operation to create multiple UDFs at a time. If you specify multiple UDFs by using FlowSpec, the system creates only the first specified UDF.
 *
 * @param request CreateFunctionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFunctionResponse
 */
async function createFunctionWithOptions(request: CreateFunctionRequest, runtime: $RuntimeOptions): CreateFunctionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateFunction',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a user-defined function (UDF) in DataStudio. The information about the UDF is described by using FlowSpec.
 *
 * @description >  You cannot use this API operation to create multiple UDFs at a time. If you specify multiple UDFs by using FlowSpec, the system creates only the first specified UDF.
 *
 * @param request CreateFunctionRequest
 * @return CreateFunctionResponse
 */
async function createFunction(request: CreateFunctionRequest): CreateFunctionResponse {
  var runtime = new $RuntimeOptions{};
  return createFunctionWithOptions(request, runtime);
}

model CreateNetworkRequest {
  clientToken?: string(name='ClientToken', description='This parameter is required.', example='eb870033-74c8-4b1b-9664-04c4e7cc3465'),
  resourceGroupId?: string(name='ResourceGroupId', description='This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
  vpcId?: string(name='VpcId', description='This parameter is required.', example='vpc-m2et4f3oc8msfbccXXXXX'),
  vswitchId?: string(name='VswitchId', description='This parameter is required.', example='vsw-uf8usrhs7hjd9amsXXXXX'),
}

model CreateNetworkResponseBody = {
  id?: long(name='Id', example='1000'),
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', example='true'),
}

model CreateNetworkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNetworkResponseBody(name='body'),
}

/**
 * @summary Creates a network and associates the network with a general resource group.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request CreateNetworkRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateNetworkResponse
 */
async function createNetworkWithOptions(request: CreateNetworkRequest, runtime: $RuntimeOptions): CreateNetworkResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!$isNull(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!$isNull(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  if (!$isNull(request.vswitchId)) {
    body['VswitchId'] = request.vswitchId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateNetwork',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a network and associates the network with a general resource group.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request CreateNetworkRequest
 * @return CreateNetworkResponse
 */
async function createNetwork(request: CreateNetworkRequest): CreateNetworkResponse {
  var runtime = new $RuntimeOptions{};
  return createNetworkWithOptions(request, runtime);
}

model CreateNodeRequest {
  containerId?: long(name='ContainerId', description='The container ID. If you want to create a node in a container, you must configure this parameter to specify the container. The container can be a workflow or a node in a container.

>  If you configure this parameter, the path field defined in FlowSpec becomes invalid.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='123456'),
  scene?: string(name='Scene', description='The scene of the node. This parameter determines the location (the DataStudio pane or the Manual pane) of the node. You can set this parameter to DATAWORKS_MANUAL_WORKFLOW only if the ContainerId parameter is configured and the container specified by ContainerId is a manually triggered workflow.

Valid values:

*   DATAWORKS_PROJECT
*   DATAWORKS_MANUAL_WORKFLOW
*   DATAWORKS_MANUAL_TASK

This parameter is required.', example='DATAWORKS_PROJECT'),
  spec?: string(name='Spec', description='The FlowSpec field information about the node. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.'),
}

model CreateNodeResponseBody = {
  id?: long(name='Id', description='The ID of the node.', example='860438872620113XXXX'),
  requestId?: string(name='RequestId', description='The request ID.', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
}

model CreateNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNodeResponseBody(name='body'),
}

/**
 * @summary Creates a node in DataStudio. The information about the node is described by using FlowSpec.
 *
 * @description >  You cannot use this API operation to create multiple nodes at a time. If you specify multiple nodes by using FlowSpec, the system creates only the first specified node.
 *
 * @param request CreateNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateNodeResponse
 */
async function createNodeWithOptions(request: CreateNodeRequest, runtime: $RuntimeOptions): CreateNodeResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.containerId)) {
    body['ContainerId'] = request.containerId;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.scene)) {
    body['Scene'] = request.scene;
  }
  if (!$isNull(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateNode',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a node in DataStudio. The information about the node is described by using FlowSpec.
 *
 * @description >  You cannot use this API operation to create multiple nodes at a time. If you specify multiple nodes by using FlowSpec, the system creates only the first specified node.
 *
 * @param request CreateNodeRequest
 * @return CreateNodeResponse
 */
async function createNode(request: CreateNodeRequest): CreateNodeResponse {
  var runtime = new $RuntimeOptions{};
  return createNodeWithOptions(request, runtime);
}

model CreateProjectRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='The ID of the Alibaba Cloud resource group to which the workspace belongs. You can log on to the [Resource Management console](https://resourcemanager.console.aliyun.com/resource-groups) and go to the Resource Group page to query the ID.

You can configure this parameter to specify an Alibaba Cloud resource group that you want to use to manage the workspace.', example='rg-acfmzbn7pti3zff'),
  aliyunResourceTags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='batch'),
      value?: string(name='Value', description='The tag value.', example='blue'),
    }
  ](name='AliyunResourceTags', description='The tags.'),
  description?: string(name='Description', description='The description of the workspace.'),
  devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', description='Specifies whether to enable the development environment. Valid values:

*   true : enables the development environment. In this case, the development environment is isolated from the production environment in the workspace.
*   false: disables the development environment. In this case, only the production environment is used in the workspace.', example='false'),
  devRoleDisabled?: boolean(name='DevRoleDisabled', description='Specifies whether to disable the Develop role. Valid values:

*   false (default)
*   true', example='true'),
  displayName?: string(name='DisplayName', description='The display name of the workspace.

This parameter is required.'),
  name?: string(name='Name', description='The name of the workspace.

This parameter is required.', example='sora_finance'),
  paiTaskEnabled?: boolean(name='PaiTaskEnabled', description='Specifies whether to enable scheduling of Platform for AI (PAI) tasks. Valid values:

*   true: enables scheduling of PAI tasks. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
*   false: disables scheduling of PAI tasks.', example='true'),
}

model CreateProjectShrinkRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='The ID of the Alibaba Cloud resource group to which the workspace belongs. You can log on to the [Resource Management console](https://resourcemanager.console.aliyun.com/resource-groups) and go to the Resource Group page to query the ID.

You can configure this parameter to specify an Alibaba Cloud resource group that you want to use to manage the workspace.', example='rg-acfmzbn7pti3zff'),
  aliyunResourceTagsShrink?: string(name='AliyunResourceTags', description='The tags.'),
  description?: string(name='Description', description='The description of the workspace.'),
  devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', description='Specifies whether to enable the development environment. Valid values:

*   true : enables the development environment. In this case, the development environment is isolated from the production environment in the workspace.
*   false: disables the development environment. In this case, only the production environment is used in the workspace.', example='false'),
  devRoleDisabled?: boolean(name='DevRoleDisabled', description='Specifies whether to disable the Develop role. Valid values:

*   false (default)
*   true', example='true'),
  displayName?: string(name='DisplayName', description='The display name of the workspace.

This parameter is required.'),
  name?: string(name='Name', description='The name of the workspace.

This parameter is required.', example='sora_finance'),
  paiTaskEnabled?: boolean(name='PaiTaskEnabled', description='Specifies whether to enable scheduling of Platform for AI (PAI) tasks. Valid values:

*   true: enables scheduling of PAI tasks. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
*   false: disables scheduling of PAI tasks.', example='true'),
}

model CreateProjectResponseBody = {
  id?: long(name='Id', example='123456'),
  projectId?: long(name='ProjectId', description='The workspace ID.', example='123456', deprecated=true),
  requestId?: string(name='RequestId', description='The request ID.', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
}

model CreateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProjectResponseBody(name='body'),
}

/**
 * @summary Creates a workspace.
 *
 * @param tmpReq CreateProjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateProjectResponse
 */
async function createProjectWithOptions(tmpReq: CreateProjectRequest, runtime: $RuntimeOptions): CreateProjectResponse {
  tmpReq.validate();
  var request = new CreateProjectShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.aliyunResourceTags)) {
    request.aliyunResourceTagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.aliyunResourceTags, 'AliyunResourceTags', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.aliyunResourceGroupId)) {
    body['AliyunResourceGroupId'] = request.aliyunResourceGroupId;
  }
  if (!$isNull(request.aliyunResourceTagsShrink)) {
    body['AliyunResourceTags'] = request.aliyunResourceTagsShrink;
  }
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.devEnvironmentEnabled)) {
    body['DevEnvironmentEnabled'] = request.devEnvironmentEnabled;
  }
  if (!$isNull(request.devRoleDisabled)) {
    body['DevRoleDisabled'] = request.devRoleDisabled;
  }
  if (!$isNull(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.paiTaskEnabled)) {
    body['PaiTaskEnabled'] = request.paiTaskEnabled;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateProject',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a workspace.
 *
 * @param request CreateProjectRequest
 * @return CreateProjectResponse
 */
async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  var runtime = new $RuntimeOptions{};
  return createProjectWithOptions(request, runtime);
}

model CreateProjectMemberRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='24054'),
  roleCodes?: [ string ](name='RoleCodes', description='The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.

This parameter specifies the roles that you can assign to a member when you add the member.

This parameter is required.'),
  userId?: string(name='UserId', description='The ID of the account that you want to add to the workspace as a member. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click **Tenant Members and Roles**. On the Tenant Members and Roles page, view the ID of the account that you want to add to the workspace as a member.

This parameter is required.', example='123422344899'),
}

model CreateProjectMemberShrinkRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='24054'),
  roleCodesShrink?: string(name='RoleCodes', description='The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.

This parameter specifies the roles that you can assign to a member when you add the member.

This parameter is required.'),
  userId?: string(name='UserId', description='The ID of the account that you want to add to the workspace as a member. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click **Tenant Members and Roles**. On the Tenant Members and Roles page, view the ID of the account that you want to add to the workspace as a member.

This parameter is required.', example='123422344899'),
}

model CreateProjectMemberResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='2B2F0B26-9253-5780-B6DB-F1A886D44D6F'),
}

model CreateProjectMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProjectMemberResponseBody(name='body'),
}

/**
 * @summary Adds a workspace member and assigns a workspace-level role to the member.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq CreateProjectMemberRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateProjectMemberResponse
 */
async function createProjectMemberWithOptions(tmpReq: CreateProjectMemberRequest, runtime: $RuntimeOptions): CreateProjectMemberResponse {
  tmpReq.validate();
  var request = new CreateProjectMemberShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.roleCodes)) {
    request.roleCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roleCodes, 'RoleCodes', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.roleCodesShrink)) {
    body['RoleCodes'] = request.roleCodesShrink;
  }
  if (!$isNull(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateProjectMember',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Adds a workspace member and assigns a workspace-level role to the member.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request CreateProjectMemberRequest
 * @return CreateProjectMemberResponse
 */
async function createProjectMember(request: CreateProjectMemberRequest): CreateProjectMemberResponse {
  var runtime = new $RuntimeOptions{};
  return createProjectMemberWithOptions(request, runtime);
}

model CreateResourceRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='123456'),
  spec?: string(name='Spec', description='The FlowSpec field information about the file resource. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.'),
}

model CreateResourceResponseBody = {
  id?: long(name='Id', description='The ID of the file resource.', example='631478864897630XXXX'),
  requestId?: string(name='RequestId', description='The request ID.', example='A5B97987-66EA-5563-9599-A2752292XXXX'),
}

model CreateResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceResponseBody(name='body'),
}

/**
 * @summary Creates a file resource in DataStudio. The information about the file resource is described by using FlowSpec.
 *
 * @description >  You cannot use this API operation to create multiple file resources at a time. If you specify multiple file resources by using FlowSpec, the system creates only the first specified resource.
 *
 * @param request CreateResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateResourceResponse
 */
async function createResourceWithOptions(request: CreateResourceRequest, runtime: $RuntimeOptions): CreateResourceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateResource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a file resource in DataStudio. The information about the file resource is described by using FlowSpec.
 *
 * @description >  You cannot use this API operation to create multiple file resources at a time. If you specify multiple file resources by using FlowSpec, the system creates only the first specified resource.
 *
 * @param request CreateResourceRequest
 * @return CreateResourceResponse
 */
async function createResource(request: CreateResourceRequest): CreateResourceResponse {
  var runtime = new $RuntimeOptions{};
  return createResourceWithOptions(request, runtime);
}

model CreateResourceGroupRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', example='rg-aek2kqofrgXXXXX'),
  aliyunResourceTags?: [ 
    {
      key?: string(name='Key', example='key'),
      value?: string(name='Value', example='value'),
    }
  ](name='AliyunResourceTags'),
  autoRenewEnabled?: boolean(name='AutoRenewEnabled'),
  clientToken?: string(name='ClientToken', description='This parameter is required.', example='eb870033-74c8-4b1b-9664-04c4e7cc3465'),
  name?: string(name='Name', description='This parameter is required.', example='common_resource_group'),
  paymentDuration?: int32(name='PaymentDuration', example='1'),
  paymentDurationUnit?: string(name='PaymentDurationUnit', example='Month'),
  paymentType?: string(name='PaymentType', description='This parameter is required.', example='PrePaid'),
  remark?: string(name='Remark', example='创建用于普通任务的通用资源组'),
  spec?: int32(name='Spec', description='The specifications of the resource group. Unit: compute unit (CU). This parameter is required only when you set the PaymentType parameter to PrePaid.', example='2'),
  vpcId?: string(name='VpcId', description='This parameter is required.', example='vpc-m2et4f3oc8msfbccXXXXX'),
  vswitchId?: string(name='VswitchId', description='This parameter is required.', example='vsw-uf8usrhs7hjd9amsXXXXX'),
}

model CreateResourceGroupShrinkRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', example='rg-aek2kqofrgXXXXX'),
  aliyunResourceTagsShrink?: string(name='AliyunResourceTags'),
  autoRenewEnabled?: boolean(name='AutoRenewEnabled'),
  clientToken?: string(name='ClientToken', description='This parameter is required.', example='eb870033-74c8-4b1b-9664-04c4e7cc3465'),
  name?: string(name='Name', description='This parameter is required.', example='common_resource_group'),
  paymentDuration?: int32(name='PaymentDuration', example='1'),
  paymentDurationUnit?: string(name='PaymentDurationUnit', example='Month'),
  paymentType?: string(name='PaymentType', description='This parameter is required.', example='PrePaid'),
  remark?: string(name='Remark', example='创建用于普通任务的通用资源组'),
  spec?: int32(name='Spec', description='The specifications of the resource group. Unit: compute unit (CU). This parameter is required only when you set the PaymentType parameter to PrePaid.', example='2'),
  vpcId?: string(name='VpcId', description='This parameter is required.', example='vpc-m2et4f3oc8msfbccXXXXX'),
  vswitchId?: string(name='VswitchId', description='This parameter is required.', example='vsw-uf8usrhs7hjd9amsXXXXX'),
}

model CreateResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  resourceGroupOrder?: {
    id?: string(name='Id', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
    orderId?: long(name='OrderId', example='2391982058XXXXX'),
    orderInstanceId?: string(name='OrderInstanceId', example='c442b330-3b10-4584-959e-736e4edXXXXX'),
  }(name='ResourceGroupOrder'),
  success?: boolean(name='Success', example='true'),
}

model CreateResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceGroupResponseBody(name='body'),
}

/**
 * @summary Creates a serverless resource group.
 *
 * @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 * 2.  **Before you call this API operation, you must make sure that you have a good command of the billing details and [pricing](https://help.aliyun.com/document_detail/2680173.html) of serverless resource groups.
 *
 * @param tmpReq CreateResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateResourceGroupResponse
 */
async function createResourceGroupWithOptions(tmpReq: CreateResourceGroupRequest, runtime: $RuntimeOptions): CreateResourceGroupResponse {
  tmpReq.validate();
  var request = new CreateResourceGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.aliyunResourceTags)) {
    request.aliyunResourceTagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.aliyunResourceTags, 'AliyunResourceTags', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.aliyunResourceGroupId)) {
    body['AliyunResourceGroupId'] = request.aliyunResourceGroupId;
  }
  if (!$isNull(request.aliyunResourceTagsShrink)) {
    body['AliyunResourceTags'] = request.aliyunResourceTagsShrink;
  }
  if (!$isNull(request.autoRenewEnabled)) {
    body['AutoRenewEnabled'] = request.autoRenewEnabled;
  }
  if (!$isNull(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.paymentDuration)) {
    body['PaymentDuration'] = request.paymentDuration;
  }
  if (!$isNull(request.paymentDurationUnit)) {
    body['PaymentDurationUnit'] = request.paymentDurationUnit;
  }
  if (!$isNull(request.paymentType)) {
    body['PaymentType'] = request.paymentType;
  }
  if (!$isNull(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!$isNull(request.spec)) {
    body['Spec'] = request.spec;
  }
  if (!$isNull(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  if (!$isNull(request.vswitchId)) {
    body['VswitchId'] = request.vswitchId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateResourceGroup',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a serverless resource group.
 *
 * @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 * 2.  **Before you call this API operation, you must make sure that you have a good command of the billing details and [pricing](https://help.aliyun.com/document_detail/2680173.html) of serverless resource groups.
 *
 * @param request CreateResourceGroupRequest
 * @return CreateResourceGroupResponse
 */
async function createResourceGroup(request: CreateResourceGroupRequest): CreateResourceGroupResponse {
  var runtime = new $RuntimeOptions{};
  return createResourceGroupWithOptions(request, runtime);
}

model CreateRouteRequest {
  destinationCidr?: string(name='DestinationCidr', description='This parameter is required.', example='192.168.0.0/16'),
  networkId?: long(name='NetworkId', description='This parameter is required.', example='1000'),
}

model CreateRouteResponseBody = {
  id?: long(name='Id', example='1000'),
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRouteResponseBody(name='body'),
}

/**
 * @summary Creates a route for a network.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request CreateRouteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRouteResponse
 */
async function createRouteWithOptions(request: CreateRouteRequest, runtime: $RuntimeOptions): CreateRouteResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.destinationCidr)) {
    body['DestinationCidr'] = request.destinationCidr;
  }
  if (!$isNull(request.networkId)) {
    body['NetworkId'] = request.networkId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateRoute',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a route for a network.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request CreateRouteRequest
 * @return CreateRouteResponse
 */
async function createRoute(request: CreateRouteRequest): CreateRouteResponse {
  var runtime = new $RuntimeOptions{};
  return createRouteWithOptions(request, runtime);
}

model CreateWorkflowDefinitionRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000'),
  spec?: string(name='Spec', description='The FlowSpec field information about the workflow. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow/).

This parameter is required.'),
}

model CreateWorkflowDefinitionResponseBody = {
  id?: long(name='Id', description='The ID of the workflow.', example='463497880880954XXXX'),
  requestId?: string(name='RequestId', description='The request ID.', example='0EF298E5-0940-5AC7-9CB0-65025070XXXX'),
}

model CreateWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary Creates a workflow in a directory of DataStudio.
 *
 * @description > You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system creates only the first specified workflow. Other specified workflows and the nodes in the workflows are ignored. You can call the CreateNode operation to create a node.
 *
 * @param request CreateWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWorkflowDefinitionResponse
 */
async function createWorkflowDefinitionWithOptions(request: CreateWorkflowDefinitionRequest, runtime: $RuntimeOptions): CreateWorkflowDefinitionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a workflow in a directory of DataStudio.
 *
 * @description > You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system creates only the first specified workflow. Other specified workflows and the nodes in the workflows are ignored. You can call the CreateNode operation to create a node.
 *
 * @param request CreateWorkflowDefinitionRequest
 * @return CreateWorkflowDefinitionResponse
 */
async function createWorkflowDefinition(request: CreateWorkflowDefinitionRequest): CreateWorkflowDefinitionResponse {
  var runtime = new $RuntimeOptions{};
  return createWorkflowDefinitionWithOptions(request, runtime);
}

model CreateWorkflowInstancesRequest {
  autoStartEnabled?: boolean(name='AutoStartEnabled', example='true'),
  comment?: string(name='Comment', example='create for test'),
  defaultRunProperties?: {
    alert?: {
      noticeType?: string(name='NoticeType', example='Sms'),
      type?: string(name='Type', example='Succes'),
    }(name='Alert'),
    analysis?: {
      blocked?: boolean(name='Blocked', description='This parameter is required.', example='true'),
      enabled?: boolean(name='Enabled', description='This parameter is required.', example='true'),
    }(name='Analysis', description='This parameter is required.'),
    excludeProjectIds?: [ long ](name='ExcludeProjectIds'),
    excludeTaskIds?: [ long ](name='ExcludeTaskIds'),
    includeProjectIds?: [ long ](name='IncludeProjectIds'),
    includeTaskIds?: [ long ](name='IncludeTaskIds'),
    mode?: string(name='Mode', example='ManualSelection'),
    order?: string(name='Order', example='Asc'),
    parallelism?: int32(name='Parallelism', description='This parameter is required.', example='2'),
    rootTaskIds?: [ long ](name='RootTaskIds'),
    runPolicy?: {
      endTime?: string(name='EndTime', example='23:59:59'),
      immediately?: boolean(name='Immediately', example='false'),
      startTime?: string(name='StartTime', example='00:00:00'),
      type?: string(name='Type', example='Daily'),
    }(name='RunPolicy'),
    runtimeResource?: string(name='RuntimeResource', example='S_res_group_524258031846018_1684XXXXXXXXX'),
  }(name='DefaultRunProperties'),
  envType?: string(name='EnvType', example='Prod'),
  name?: string(name='Name', description='This parameter is required.', example='WorkflowInstance1'),
  periods?: {
    bizDates?: [ 
      {
        endBizDate?: string(name='EndBizDate', description='This parameter is required.', example='2024-11-24'),
        startBizDate?: string(name='StartBizDate', description='This parameter is required.', example='2024-11-20'),
      }
    ](name='BizDates', description='This parameter is required.'),
    endTime?: string(name='EndTime', example='23:59:59'),
    startTime?: string(name='StartTime', example='00:00:00'),
  }(name='Periods'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='100'),
  taskParameters?: string(name='TaskParameters', example='{
  "1001": "key1=val2 key2=val2", 
  "1002": "key1=val2 key2=val2"
}'),
  type?: string(name='Type', description='This parameter is required.', example='SupplementData'),
  workflowId?: long(name='WorkflowId', description='This parameter is required.', example='1'),
  workflowParameters?: string(name='WorkflowParameters', example='{ 
  "key1": "value1", 
  "key2": "value2" 
}'),
}

model CreateWorkflowInstancesShrinkRequest {
  autoStartEnabled?: boolean(name='AutoStartEnabled', example='true'),
  comment?: string(name='Comment', example='create for test'),
  defaultRunPropertiesShrink?: string(name='DefaultRunProperties'),
  envType?: string(name='EnvType', example='Prod'),
  name?: string(name='Name', description='This parameter is required.', example='WorkflowInstance1'),
  periodsShrink?: string(name='Periods'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='100'),
  taskParameters?: string(name='TaskParameters', example='{
  "1001": "key1=val2 key2=val2", 
  "1002": "key1=val2 key2=val2"
}'),
  type?: string(name='Type', description='This parameter is required.', example='SupplementData'),
  workflowId?: long(name='WorkflowId', description='This parameter is required.', example='1'),
  workflowParameters?: string(name='WorkflowParameters', example='{ 
  "key1": "value1", 
  "key2": "value2" 
}'),
}

model CreateWorkflowInstancesResponseBody = {
  operationId?: string(name='OperationId', example='e15ad21c-b0e9-4792-8f55-b037xxxxxxxx'),
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model CreateWorkflowInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkflowInstancesResponseBody(name='body'),
}

/**
 * @param tmpReq CreateWorkflowInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWorkflowInstancesResponse
 */
async function createWorkflowInstancesWithOptions(tmpReq: CreateWorkflowInstancesRequest, runtime: $RuntimeOptions): CreateWorkflowInstancesResponse {
  tmpReq.validate();
  var request = new CreateWorkflowInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.defaultRunProperties)) {
    request.defaultRunPropertiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.defaultRunProperties, 'DefaultRunProperties', 'json');
  }
  if (!$isNull(tmpReq.periods)) {
    request.periodsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.periods, 'Periods', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.autoStartEnabled)) {
    body['AutoStartEnabled'] = request.autoStartEnabled;
  }
  if (!$isNull(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!$isNull(request.defaultRunPropertiesShrink)) {
    body['DefaultRunProperties'] = request.defaultRunPropertiesShrink;
  }
  if (!$isNull(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.periodsShrink)) {
    body['Periods'] = request.periodsShrink;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.taskParameters)) {
    body['TaskParameters'] = request.taskParameters;
  }
  if (!$isNull(request.type)) {
    body['Type'] = request.type;
  }
  if (!$isNull(request.workflowId)) {
    body['WorkflowId'] = request.workflowId;
  }
  if (!$isNull(request.workflowParameters)) {
    body['WorkflowParameters'] = request.workflowParameters;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateWorkflowInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @param request CreateWorkflowInstancesRequest
 * @return CreateWorkflowInstancesResponse
 */
async function createWorkflowInstances(request: CreateWorkflowInstancesRequest): CreateWorkflowInstancesResponse {
  var runtime = new $RuntimeOptions{};
  return createWorkflowInstancesWithOptions(request, runtime);
}

model DeleteAlertRuleRequest {
  id?: long(name='Id', description='The rule ID.', example='105412'),
}

model DeleteAlertRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='8754EE08-4AA2-5F77-ADD7-754DBBDA9F75'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAlertRuleResponseBody(name='body'),
}

/**
 * @summary Deletes a custom alert monitoring rule.
 *
 * @param request DeleteAlertRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAlertRuleResponse
 */
async function deleteAlertRuleWithOptions(request: DeleteAlertRuleRequest, runtime: $RuntimeOptions): DeleteAlertRuleResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteAlertRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a custom alert monitoring rule.
 *
 * @param request DeleteAlertRuleRequest
 * @return DeleteAlertRuleResponse
 */
async function deleteAlertRule(request: DeleteAlertRuleRequest): DeleteAlertRuleResponse {
  var runtime = new $RuntimeOptions{};
  return deleteAlertRuleWithOptions(request, runtime);
}

model DeleteDIAlarmRuleRequest {
  DIAlarmRuleId?: long(name='DIAlarmRuleId', description='This parameter is deprecated. Use the Id parameter instead.', example='2', deprecated=true),
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='1'),
  id?: long(name='Id', description='The ID of the synchronization task.', example='2'),
}

model DeleteDIAlarmRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='C99E2BE6-9DEA-5C2E-8F51-1DDCFEADE490'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteDIAlarmRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDIAlarmRuleResponseBody(name='body'),
}

/**
 * @summary Deletes an alert rule configured for a synchronization task.
 *
 * @param request DeleteDIAlarmRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDIAlarmRuleResponse
 */
async function deleteDIAlarmRuleWithOptions(request: DeleteDIAlarmRuleRequest, runtime: $RuntimeOptions): DeleteDIAlarmRuleResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDIAlarmRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes an alert rule configured for a synchronization task.
 *
 * @param request DeleteDIAlarmRuleRequest
 * @return DeleteDIAlarmRuleResponse
 */
async function deleteDIAlarmRule(request: DeleteDIAlarmRuleRequest): DeleteDIAlarmRuleResponse {
  var runtime = new $RuntimeOptions{};
  return deleteDIAlarmRuleWithOptions(request, runtime);
}

model DeleteDIJobRequest {
  DIJobId?: long(name='DIJobId', description='This parameter is deprecated. Use the Id parameter instead.', example='11126', deprecated=true),
  id?: long(name='Id', description='The ID of the synchronization task.', example='11126'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='108864'),
}

model DeleteDIJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can troubleshoot issues based on the ID.', example='D33D4A51-5845-579A-B4BA-FAADD0F83D53'),
  success?: boolean(name='Success', description='true', example='true'),
}

model DeleteDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDIJobResponseBody(name='body'),
}

/**
 * @summary Deletes a new-version synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDIJobResponse
 */
async function deleteDIJobWithOptions(request: DeleteDIJobRequest, runtime: $RuntimeOptions): DeleteDIJobResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDIJob',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a new-version synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteDIJobRequest
 * @return DeleteDIJobResponse
 */
async function deleteDIJob(request: DeleteDIJobRequest): DeleteDIJobResponse {
  var runtime = new $RuntimeOptions{};
  return deleteDIJobWithOptions(request, runtime);
}

model DeleteDataAssetTagRequest {
  key?: string(name='Key', description='This parameter is required.', example='key1'),
  values?: [ string ](name='Values'),
}

model DeleteDataAssetTagShrinkRequest {
  key?: string(name='Key', description='This parameter is required.', example='key1'),
  valuesShrink?: string(name='Values'),
}

model DeleteDataAssetTagResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='0bc1411515937635973****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataAssetTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataAssetTagResponseBody(name='body'),
}

/**
 * @summary 删除标签
 *
 * @param tmpReq DeleteDataAssetTagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataAssetTagResponse
 */
async function deleteDataAssetTagWithOptions(tmpReq: DeleteDataAssetTagRequest, runtime: $RuntimeOptions): DeleteDataAssetTagResponse {
  tmpReq.validate();
  var request = new DeleteDataAssetTagShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.values)) {
    request.valuesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.values, 'Values', 'json');
  }
  var query = {};
  if (!$isNull(request.key)) {
    query['Key'] = request.key;
  }
  if (!$isNull(request.valuesShrink)) {
    query['Values'] = request.valuesShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDataAssetTag',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除标签
 *
 * @param request DeleteDataAssetTagRequest
 * @return DeleteDataAssetTagResponse
 */
async function deleteDataAssetTag(request: DeleteDataAssetTagRequest): DeleteDataAssetTagResponse {
  var runtime = new $RuntimeOptions{};
  return deleteDataAssetTagWithOptions(request, runtime);
}

model DeleteDataQualityEvaluationTaskRequest {
  id?: long(name='Id', example='123123'),
  projectId?: long(name='ProjectId', example='10000'),
}

model DeleteDataQualityEvaluationTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='0bc1ec92159376****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataQualityEvaluationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataQualityEvaluationTaskResponseBody(name='body'),
}

/**
 * @summary 删除数据质量校验任务
 *
 * @param request DeleteDataQualityEvaluationTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataQualityEvaluationTaskResponse
 */
async function deleteDataQualityEvaluationTaskWithOptions(request: DeleteDataQualityEvaluationTaskRequest, runtime: $RuntimeOptions): DeleteDataQualityEvaluationTaskResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDataQualityEvaluationTask',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除数据质量校验任务
 *
 * @param request DeleteDataQualityEvaluationTaskRequest
 * @return DeleteDataQualityEvaluationTaskResponse
 */
async function deleteDataQualityEvaluationTask(request: DeleteDataQualityEvaluationTaskRequest): DeleteDataQualityEvaluationTaskResponse {
  var runtime = new $RuntimeOptions{};
  return deleteDataQualityEvaluationTaskWithOptions(request, runtime);
}

model DeleteDataQualityRuleRequest {
  id?: long(name='Id', description='The rule ID.

This parameter is required.', example='19715'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='17302'),
}

model DeleteDataQualityRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteDataQualityRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataQualityRuleResponseBody(name='body'),
}

/**
 * @summary Deletes a data quality monitoring rule.
 *
 * @param request DeleteDataQualityRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataQualityRuleResponse
 */
async function deleteDataQualityRuleWithOptions(request: DeleteDataQualityRuleRequest, runtime: $RuntimeOptions): DeleteDataQualityRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDataQualityRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a data quality monitoring rule.
 *
 * @param request DeleteDataQualityRuleRequest
 * @return DeleteDataQualityRuleResponse
 */
async function deleteDataQualityRule(request: DeleteDataQualityRuleRequest): DeleteDataQualityRuleResponse {
  var runtime = new $RuntimeOptions{};
  return deleteDataQualityRuleWithOptions(request, runtime);
}

model DeleteDataQualityRuleTemplateRequest {
  code?: string(name='Code', description='The code for the template.

This parameter is required.', example='USER_DEFINED:123'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='10001'),
}

model DeleteDataQualityRuleTemplateResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteDataQualityRuleTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataQualityRuleTemplateResponseBody(name='body'),
}

/**
 * @summary Deletes a data quality monitoring rule template.
 *
 * @param request DeleteDataQualityRuleTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataQualityRuleTemplateResponse
 */
async function deleteDataQualityRuleTemplateWithOptions(request: DeleteDataQualityRuleTemplateRequest, runtime: $RuntimeOptions): DeleteDataQualityRuleTemplateResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.code)) {
    query['Code'] = request.code;
  }
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDataQualityRuleTemplate',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a data quality monitoring rule template.
 *
 * @param request DeleteDataQualityRuleTemplateRequest
 * @return DeleteDataQualityRuleTemplateResponse
 */
async function deleteDataQualityRuleTemplate(request: DeleteDataQualityRuleTemplateRequest): DeleteDataQualityRuleTemplateResponse {
  var runtime = new $RuntimeOptions{};
  return deleteDataQualityRuleTemplateWithOptions(request, runtime);
}

model DeleteDataSourceRequest {
  id?: long(name='Id', description='The data source ID.

This parameter is required.', example='1234'),
}

model DeleteDataSourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B56432E0-2112-5C97-88D0-AA0AE5C75C74'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceResponseBody(name='body'),
}

/**
 * @summary Removes a data source by ID.
 *
 * @description 1.  This API operation is available for all Dataworks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request DeleteDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataSourceResponse
 */
async function deleteDataSourceWithOptions(request: DeleteDataSourceRequest, runtime: $RuntimeOptions): DeleteDataSourceResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDataSource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Removes a data source by ID.
 *
 * @description 1.  This API operation is available for all Dataworks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request DeleteDataSourceRequest
 * @return DeleteDataSourceResponse
 */
async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  var runtime = new $RuntimeOptions{};
  return deleteDataSourceWithOptions(request, runtime);
}

model DeleteDataSourceSharedRuleRequest {
  id?: long(name='Id', description='The sharing rule ID.

This parameter is required.', example='22127'),
}

model DeleteDataSourceSharedRuleResponseBody = {
  requestId?: string(name='RequestId', example='64B-587A-8CED-969E1973887FXXX-TT'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataSourceSharedRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceSharedRuleResponseBody(name='body'),
}

/**
 * @summary Deletes a sharing rule of a data source by ID.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  If you want to delete a sharing rule of a data source from Workspace A to Workspace B, you must have the permissions to share the data source in Workspace A or Workspace B. You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
 *
 * @param request DeleteDataSourceSharedRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataSourceSharedRuleResponse
 */
async function deleteDataSourceSharedRuleWithOptions(request: DeleteDataSourceSharedRuleRequest, runtime: $RuntimeOptions): DeleteDataSourceSharedRuleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDataSourceSharedRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a sharing rule of a data source by ID.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  If you want to delete a sharing rule of a data source from Workspace A to Workspace B, you must have the permissions to share the data source in Workspace A or Workspace B. You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
 *
 * @param request DeleteDataSourceSharedRuleRequest
 * @return DeleteDataSourceSharedRuleResponse
 */
async function deleteDataSourceSharedRule(request: DeleteDataSourceSharedRuleRequest): DeleteDataSourceSharedRuleResponse {
  var runtime = new $RuntimeOptions{};
  return deleteDataSourceSharedRuleWithOptions(request, runtime);
}

model DeleteFunctionRequest {
  id?: long(name='Id', description='The ID of the UDF.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model DeleteFunctionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='88198F19-A36B-52A9-AE44-4518A688XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFunctionResponseBody(name='body'),
}

/**
 * @summary Deletes a user-defined function (UDF) in DataStudio.
 *
 * @description >  A UDF that is deployed cannot be deleted. If you want to delete such a UDF, you must first undeploy the UDF.
 *
 * @param request DeleteFunctionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFunctionResponse
 */
async function deleteFunctionWithOptions(request: DeleteFunctionRequest, runtime: $RuntimeOptions): DeleteFunctionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteFunction',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a user-defined function (UDF) in DataStudio.
 *
 * @description >  A UDF that is deployed cannot be deleted. If you want to delete such a UDF, you must first undeploy the UDF.
 *
 * @param request DeleteFunctionRequest
 * @return DeleteFunctionResponse
 */
async function deleteFunction(request: DeleteFunctionRequest): DeleteFunctionResponse {
  var runtime = new $RuntimeOptions{};
  return deleteFunctionWithOptions(request, runtime);
}

model DeleteNetworkRequest {
  id?: long(name='Id', description='This parameter is required.', example='1000'),
}

model DeleteNetworkResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteNetworkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNetworkResponseBody(name='body'),
}

/**
 * @summary Disassociates and deletes a network from a general resource group.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteNetworkRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteNetworkResponse
 */
async function deleteNetworkWithOptions(request: DeleteNetworkRequest, runtime: $RuntimeOptions): DeleteNetworkResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteNetwork',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Disassociates and deletes a network from a general resource group.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteNetworkRequest
 * @return DeleteNetworkResponse
 */
async function deleteNetwork(request: DeleteNetworkRequest): DeleteNetworkResponse {
  var runtime = new $RuntimeOptions{};
  return deleteNetworkWithOptions(request, runtime);
}

model DeleteNodeRequest {
  id?: long(name='Id', description='The ID of the node.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model DeleteNodeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A1E54497-5122-505E-91C6-BAC14980XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true\\\\
false', example='true'),
}

model DeleteNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNodeResponseBody(name='body'),
}

/**
 * @summary Deletes a node from DataStudio.
 *
 * @description >  A node that is deployed cannot be deleted. If you want to delete such a node, you must first undeploy the node.
 *
 * @param request DeleteNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteNodeResponse
 */
async function deleteNodeWithOptions(request: DeleteNodeRequest, runtime: $RuntimeOptions): DeleteNodeResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteNode',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a node from DataStudio.
 *
 * @description >  A node that is deployed cannot be deleted. If you want to delete such a node, you must first undeploy the node.
 *
 * @param request DeleteNodeRequest
 * @return DeleteNodeResponse
 */
async function deleteNode(request: DeleteNodeRequest): DeleteNodeResponse {
  var runtime = new $RuntimeOptions{};
  return deleteNodeWithOptions(request, runtime);
}

model DeleteProjectRequest {
  id?: long(name='Id', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='123456'),
}

model DeleteProjectResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
}

model DeleteProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProjectResponseBody(name='body'),
}

/**
 * @summary Deletes a DataWorks workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteProjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteProjectResponse
 */
async function deleteProjectWithOptions(request: DeleteProjectRequest, runtime: $RuntimeOptions): DeleteProjectResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteProject',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a DataWorks workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteProjectRequest
 * @return DeleteProjectResponse
 */
async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  var runtime = new $RuntimeOptions{};
  return deleteProjectWithOptions(request, runtime);
}

model DeleteProjectMemberRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='534752'),
  userId?: string(name='UserId', description='The ID of the account used by the member in the workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the ID of the account used by the member in the workspace.

This parameter is required.', example='123422344899'),
}

model DeleteProjectMemberResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='1FF0465F-209C-5964-8F30-FAF21B677CC6'),
}

model DeleteProjectMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProjectMemberResponseBody(name='body'),
}

/**
 * @summary Removes a workspace member and the workspace-level roles that are assigned to the member.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteProjectMemberRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteProjectMemberResponse
 */
async function deleteProjectMemberWithOptions(request: DeleteProjectMemberRequest, runtime: $RuntimeOptions): DeleteProjectMemberResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteProjectMember',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Removes a workspace member and the workspace-level roles that are assigned to the member.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteProjectMemberRequest
 * @return DeleteProjectMemberResponse
 */
async function deleteProjectMember(request: DeleteProjectMemberRequest): DeleteProjectMemberResponse {
  var runtime = new $RuntimeOptions{};
  return deleteProjectMemberWithOptions(request, runtime);
}

model DeleteResourceRequest {
  id?: long(name='Id', description='The ID of the file resource.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model DeleteResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='88198F19-A36B-52A9-AE44-4518A688XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceResponseBody(name='body'),
}

/**
 * @summary Deletes a file resource from DataStudio.
 *
 * @description >  A file resource that is deployed cannot be deleted. If you want to delete such a file resource, you must first undeploy the file resource.
 *
 * @param request DeleteResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteResourceResponse
 */
async function deleteResourceWithOptions(request: DeleteResourceRequest, runtime: $RuntimeOptions): DeleteResourceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteResource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a file resource from DataStudio.
 *
 * @description >  A file resource that is deployed cannot be deleted. If you want to delete such a file resource, you must first undeploy the file resource.
 *
 * @param request DeleteResourceRequest
 * @return DeleteResourceResponse
 */
async function deleteResource(request: DeleteResourceRequest): DeleteResourceResponse {
  var runtime = new $RuntimeOptions{};
  return deleteResourceWithOptions(request, runtime);
}

model DeleteResourceGroupRequest {
  id?: string(name='Id', description='The ID of the resource group.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
}

model DeleteResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceGroupResponseBody(name='body'),
}

/**
 * @summary Deletes a serverless resource group.
 *
 * @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 * 2.  **Before you call this API operation, you must make sure that you have a good command of the billing details and [pricing](https://help.aliyun.com/document_detail/2680173.html) of serverless resource groups.
 *
 * @param request DeleteResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteResourceGroupResponse
 */
async function deleteResourceGroupWithOptions(request: DeleteResourceGroupRequest, runtime: $RuntimeOptions): DeleteResourceGroupResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteResourceGroup',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a serverless resource group.
 *
 * @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 * 2.  **Before you call this API operation, you must make sure that you have a good command of the billing details and [pricing](https://help.aliyun.com/document_detail/2680173.html) of serverless resource groups.
 *
 * @param request DeleteResourceGroupRequest
 * @return DeleteResourceGroupResponse
 */
async function deleteResourceGroup(request: DeleteResourceGroupRequest): DeleteResourceGroupResponse {
  var runtime = new $RuntimeOptions{};
  return deleteResourceGroupWithOptions(request, runtime);
}

model DeleteRouteRequest {
  id?: long(name='Id', description='This parameter is required.', example='1000'),
}

model DeleteRouteResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRouteResponseBody(name='body'),
}

/**
 * @summary Deletes a route from a network resource.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteRouteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRouteResponse
 */
async function deleteRouteWithOptions(request: DeleteRouteRequest, runtime: $RuntimeOptions): DeleteRouteResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteRoute',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a route from a network resource.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteRouteRequest
 * @return DeleteRouteResponse
 */
async function deleteRoute(request: DeleteRouteRequest): DeleteRouteResponse {
  var runtime = new $RuntimeOptions{};
  return deleteRouteWithOptions(request, runtime);
}

model DeleteTaskRequest {
  id?: long(name='Id', description='The task ID.

This parameter is required.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
}

model DeleteTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTaskResponseBody(name='body'),
}

/**
 * @summary Deletes a task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteTaskResponse
 */
async function deleteTaskWithOptions(request: DeleteTaskRequest, runtime: $RuntimeOptions): DeleteTaskResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.projectEnv)) {
    query['ProjectEnv'] = request.projectEnv;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteTask',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request DeleteTaskRequest
 * @return DeleteTaskResponse
 */
async function deleteTask(request: DeleteTaskRequest): DeleteTaskResponse {
  var runtime = new $RuntimeOptions{};
  return deleteTaskWithOptions(request, runtime);
}

model DeleteWorkflowRequest {
  clientUniqueCode?: string(name='ClientUniqueCode', example='Workflow_0bc5213917368545132902xxxxxxxx'),
  envType?: string(name='EnvType', example='Prod'),
  id?: long(name='Id', description='This parameter is required.', example='1234'),
}

model DeleteWorkflowResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  success?: boolean(name='Success', example='true'),
}

model DeleteWorkflowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkflowResponseBody(name='body'),
}

/**
 * @param request DeleteWorkflowRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWorkflowResponse
 */
async function deleteWorkflowWithOptions(request: DeleteWorkflowRequest, runtime: $RuntimeOptions): DeleteWorkflowResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  var body : map[string]any = {};
  if (!$isNull(request.clientUniqueCode)) {
    body['ClientUniqueCode'] = request.clientUniqueCode;
  }
  if (!$isNull(request.envType)) {
    body['EnvType'] = request.envType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteWorkflow',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @param request DeleteWorkflowRequest
 * @return DeleteWorkflowResponse
 */
async function deleteWorkflow(request: DeleteWorkflowRequest): DeleteWorkflowResponse {
  var runtime = new $RuntimeOptions{};
  return deleteWorkflowWithOptions(request, runtime);
}

model DeleteWorkflowDefinitionRequest {
  id?: long(name='Id', description='The ID of the workflow.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000'),
}

model DeleteWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B17730C0-D959-548A-AE23-E754177CXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DeleteWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary Deletes a workflow from DataStudio.
 *
 * @description >  A workflow that is deployed cannot be deleted. If you want to delete such a workflow, you must first undeploy the workflow.
 *
 * @param request DeleteWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteWorkflowDefinitionResponse
 */
async function deleteWorkflowDefinitionWithOptions(request: DeleteWorkflowDefinitionRequest, runtime: $RuntimeOptions): DeleteWorkflowDefinitionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a workflow from DataStudio.
 *
 * @description >  A workflow that is deployed cannot be deleted. If you want to delete such a workflow, you must first undeploy the workflow.
 *
 * @param request DeleteWorkflowDefinitionRequest
 * @return DeleteWorkflowDefinitionResponse
 */
async function deleteWorkflowDefinition(request: DeleteWorkflowDefinitionRequest): DeleteWorkflowDefinitionResponse {
  var runtime = new $RuntimeOptions{};
  return deleteWorkflowDefinitionWithOptions(request, runtime);
}

model DetachDataQualityRulesFromEvaluationTaskRequest {
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', description='This parameter is required.', example='10000'),
  dataQualityRuleIds?: [ long ](name='DataQualityRuleIds', description='This parameter is required.'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='10002'),
}

model DetachDataQualityRulesFromEvaluationTaskShrinkRequest {
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', description='This parameter is required.', example='10000'),
  dataQualityRuleIdsShrink?: string(name='DataQualityRuleIds', description='This parameter is required.'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='10002'),
}

model DetachDataQualityRulesFromEvaluationTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
  success?: boolean(name='Success', example='true'),
}

model DetachDataQualityRulesFromEvaluationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachDataQualityRulesFromEvaluationTaskResponseBody(name='body'),
}

/**
 * @summary 取消数据质量规则和数据质量校验任务的关联
 *
 * @param tmpReq DetachDataQualityRulesFromEvaluationTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetachDataQualityRulesFromEvaluationTaskResponse
 */
async function detachDataQualityRulesFromEvaluationTaskWithOptions(tmpReq: DetachDataQualityRulesFromEvaluationTaskRequest, runtime: $RuntimeOptions): DetachDataQualityRulesFromEvaluationTaskResponse {
  tmpReq.validate();
  var request = new DetachDataQualityRulesFromEvaluationTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.dataQualityRuleIds)) {
    request.dataQualityRuleIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataQualityRuleIds, 'DataQualityRuleIds', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.dataQualityEvaluationTaskId)) {
    body['DataQualityEvaluationTaskId'] = request.dataQualityEvaluationTaskId;
  }
  if (!$isNull(request.dataQualityRuleIdsShrink)) {
    body['DataQualityRuleIds'] = request.dataQualityRuleIdsShrink;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DetachDataQualityRulesFromEvaluationTask',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 取消数据质量规则和数据质量校验任务的关联
 *
 * @param request DetachDataQualityRulesFromEvaluationTaskRequest
 * @return DetachDataQualityRulesFromEvaluationTaskResponse
 */
async function detachDataQualityRulesFromEvaluationTask(request: DetachDataQualityRulesFromEvaluationTaskRequest): DetachDataQualityRulesFromEvaluationTaskResponse {
  var runtime = new $RuntimeOptions{};
  return detachDataQualityRulesFromEvaluationTaskWithOptions(request, runtime);
}

model DissociateProjectFromResourceGroupRequest {
  projectId?: long(name='ProjectId', description='The ID of the workspace from which you want to disassociate the resource group.

This parameter is required.', example='1000'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
}

model DissociateProjectFromResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DissociateProjectFromResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DissociateProjectFromResourceGroupResponseBody(name='body'),
}

/**
 * @summary Disassociates a resource group from a workspace.
 *
 * @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 * 2.  Your account must be assigned one of the following roles of the desired workspace:
 * *   Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request DissociateProjectFromResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DissociateProjectFromResourceGroupResponse
 */
async function dissociateProjectFromResourceGroupWithOptions(request: DissociateProjectFromResourceGroupRequest, runtime: $RuntimeOptions): DissociateProjectFromResourceGroupResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DissociateProjectFromResourceGroup',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Disassociates a resource group from a workspace.
 *
 * @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 * 2.  Your account must be assigned one of the following roles of the desired workspace:
 * *   Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request DissociateProjectFromResourceGroupRequest
 * @return DissociateProjectFromResourceGroupResponse
 */
async function dissociateProjectFromResourceGroup(request: DissociateProjectFromResourceGroupRequest): DissociateProjectFromResourceGroupResponse {
  var runtime = new $RuntimeOptions{};
  return dissociateProjectFromResourceGroupWithOptions(request, runtime);
}

model ExecDeploymentStageRequest {
  code?: string(name='Code', description='The code of the stage in the process. You can call the GetDeployment operation to query the code.

This parameter is required.', example='DEV_CHECK'),
  id?: string(name='Id', description='The ID of the process.

This parameter is required.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model ExecDeploymentStageResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true

*   false

    **

    **Note:** The value of this parameter indicates only whether the stage is triggered but does not indicate whether the execution of the stage is successful.', example='true'),
}

model ExecDeploymentStageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecDeploymentStageResponseBody(name='body'),
}

/**
 * @summary Executes a stage in a process.
 *
 * @description >  The stages in a process are sequential. For more information, see the GetDeployment operation. Skipping or repeating a stage is not allowed.
 * >  The execution of a stage is asynchronous. The response of this operation indicates only whether a stage is triggered but does not indicate whether the execution of the stage is successful. You can call the GetDeployment operation to check whether the execution is successful.
 *
 * @param request ExecDeploymentStageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExecDeploymentStageResponse
 */
async function execDeploymentStageWithOptions(request: ExecDeploymentStageRequest, runtime: $RuntimeOptions): ExecDeploymentStageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var body : map[string]any = {};
  if (!$isNull(request.code)) {
    body['Code'] = request.code;
  }
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ExecDeploymentStage',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Executes a stage in a process.
 *
 * @description >  The stages in a process are sequential. For more information, see the GetDeployment operation. Skipping or repeating a stage is not allowed.
 * >  The execution of a stage is asynchronous. The response of this operation indicates only whether a stage is triggered but does not indicate whether the execution of the stage is successful. You can call the GetDeployment operation to check whether the execution is successful.
 *
 * @param request ExecDeploymentStageRequest
 * @return ExecDeploymentStageResponse
 */
async function execDeploymentStage(request: ExecDeploymentStageRequest): ExecDeploymentStageResponse {
  var runtime = new $RuntimeOptions{};
  return execDeploymentStageWithOptions(request, runtime);
}

model ExecuteAdhocWorkflowInstanceRequest {
  bizDate?: long(name='BizDate', description='This parameter is required.'),
  envType?: string(name='EnvType', example='Prod'),
  name?: string(name='Name', description='This parameter is required.', example='WorkflowInstance1'),
  owner?: string(name='Owner', description='This parameter is required.', example='1000'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='100'),
  tasks?: [ 
    {
      clientUniqueCode?: string(name='ClientUniqueCode', description='This parameter is required.', example='Task_0bc5213917368545132902xxxxxxxx'),
      dataSource?: {
        name?: string(name='Name', example='mysql_test'),
      }(name='DataSource'),
      dependencies?: [ 
        {
          upstreamOutput?: string(name='UpstreamOutput', example='pre.odps_sql_demo_0'),
        }
      ](name='Dependencies'),
      inputs?: {
        variables?: [ 
          {
            name?: string(name='Name', example='key1'),
            value?: string(name='Value', example='Value1'),
          }
        ](name='Variables'),
      }(name='Inputs'),
      name?: string(name='Name', description='This parameter is required.'),
      outputs?: {
        taskOutputs?: [ 
          {
            output?: string(name='Output', example='pre.odps_sql_demo_0'),
          }
        ](name='TaskOutputs'),
        variables?: [ 
          {
            name?: string(name='Name', example='key1'),
            type?: string(name='Type', example='Constant'),
            value?: string(name='Value', example='value1'),
          }
        ](name='Variables'),
      }(name='Outputs'),
      owner?: string(name='Owner', description='This parameter is required.', example='1000'),
      runtimeResource?: {
        cu?: string(name='Cu', example='0.25'),
        image?: string(name='Image', example='i-xxxxxx'),
        resourceGroupId?: string(name='ResourceGroupId', description='This parameter is required.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
      }(name='RuntimeResource', description='This parameter is required.'),
      script?: {
        content?: string(name='Content', example='echo "helloWorld"'),
        parameters?: string(name='Parameters', example='para1=$bizdate'),
      }(name='Script'),
      timeout?: int32(name='Timeout', example='3600'),
      type?: string(name='Type', description='This parameter is required.', example='ODPS_SQL'),
    }
  ](name='Tasks', description='This parameter is required.'),
}

model ExecuteAdhocWorkflowInstanceShrinkRequest {
  bizDate?: long(name='BizDate', description='This parameter is required.'),
  envType?: string(name='EnvType', example='Prod'),
  name?: string(name='Name', description='This parameter is required.', example='WorkflowInstance1'),
  owner?: string(name='Owner', description='This parameter is required.', example='1000'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='100'),
  tasksShrink?: string(name='Tasks', description='This parameter is required.'),
}

model ExecuteAdhocWorkflowInstanceResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  workflowInstanceId?: long(name='WorkflowInstanceId', example='1234'),
}

model ExecuteAdhocWorkflowInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteAdhocWorkflowInstanceResponseBody(name='body'),
}

/**
 * @param tmpReq ExecuteAdhocWorkflowInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExecuteAdhocWorkflowInstanceResponse
 */
async function executeAdhocWorkflowInstanceWithOptions(tmpReq: ExecuteAdhocWorkflowInstanceRequest, runtime: $RuntimeOptions): ExecuteAdhocWorkflowInstanceResponse {
  tmpReq.validate();
  var request = new ExecuteAdhocWorkflowInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.tasks)) {
    request.tasksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tasks, 'Tasks', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!$isNull(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.tasksShrink)) {
    body['Tasks'] = request.tasksShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ExecuteAdhocWorkflowInstance',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @param request ExecuteAdhocWorkflowInstanceRequest
 * @return ExecuteAdhocWorkflowInstanceResponse
 */
async function executeAdhocWorkflowInstance(request: ExecuteAdhocWorkflowInstanceRequest): ExecuteAdhocWorkflowInstanceResponse {
  var runtime = new $RuntimeOptions{};
  return executeAdhocWorkflowInstanceWithOptions(request, runtime);
}

model GetAlertRuleRequest {
  id?: string(name='Id', description='The rule ID.', example='28547072'),
}

model GetAlertRuleResponseBody = {
  alertRule?: {
    enabled?: boolean(name='Enabled', description='Indicates whether the rule is enabled.', example='true'),
    id?: long(name='Id', description='The rule ID.', example='16035'),
    name?: string(name='Name', description='The name of the rule.', example='error_rule'),
    notification?: {
      channels?: [ string ](name='Channels', description='The alert notification channels.'),
      intervalInMinutes?: int32(name='IntervalInMinutes', description='The interval at which an alert notification is sent. Unit: minutes. Valid values: [5,10000].', example='30'),
      maximum?: int32(name='Maximum', description='The maximum number of times an alert notification can be sent within a calendar day. Valid values: [1, 10000].', example='3'),
      receivers?: [ 
        {
          extension?: string(name='Extension', description='The additional configuration of the alert recipient. If the ReceiverType parameter is set to DingdingUrl, you can set this parameter to {"atAll":true} to remind all members in a DingTalk group.', example='{"atAll":true}'),
          receiverType?: string(name='ReceiverType', description='The type of the alert recipient. Valid valves:

*   AliUid: Alibaba Cloud account ID.
*   Shift Schedules: the personnel in a shift schedule.
*   TaskOwner: the task owner. The task owner can receive custom alerts and event alerts.
*   Owner: the baseline owner. The baseline owner can receive baseline alerts.
*   WebhookUrl: URL of a custom webhook.
*   DingdingUrl: DingTalk webhook URL.
*   FeishuUrl: Lark webhook URL.
*   WeixinUrl: WeCom webhook URL.', example='WebhookUrl'),
          receiverValues?: [ string ](name='ReceiverValues', description='The alert recipients.'),
        }
      ](name='Receivers', description='The alert recipients.'),
      silenceEndTime?: string(name='SilenceEndTime', description='The end time for silence. The time is in the HH:mm:ss format.', example='00:00:00'),
      silenceStartTime?: string(name='SilenceStartTime', description='The start time for silence. The time is in the HH:mm:ss format.', example='00:00:00'),
    }(name='Notification', description='The configuration for the alert notification.'),
    owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the owner of the rule.', example='279961421580845157'),
    triggerCondition?: {
      extension?: {
        cycleUnfinished?: {
          cycleAndTime?: [ 
            {
              cycleId?: int32(name='CycleId', description='The ID of the scheduling cycle of the instance. Valid values: [1,288].', example='1'),
              time?: string(name='Time', description='The latest completion time of the instance within the scheduling cycle. The time is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='12:00'),
            }
          ](name='CycleAndTime', description='The configurations of the scheduling cycle and timeout period of the instance.'),
        }(name='CycleUnfinished', description='The configuration for an alert of the CycleUnfinished type.'),
        error?: {
          autoRerunAlertEnabled?: boolean(name='AutoRerunAlertEnabled'),
          streamTaskIds?: [ long ](name='StreamTaskIds', description='The IDs of the real-time computing tasks. This parameter is required when you monitor real-time computing tasks.'),
        }(name='Error', description='The configuration for an alert of the Error type.'),
        instanceErrorCount?: {
          count?: int32(name='Count', description='The maximum number of instances on which an error occurs. Valid values: [1,10000].', example='10'),
        }(name='InstanceErrorCount', description='The configuration for an alert of the InstanceErrorCount type.'),
        instanceErrorPercentage?: {
          percentage?: int32(name='Percentage', description='The maximum percentage of instances on which an error occurs in the workspace to the total number of instances. Valid values: [1-100].', example='10'),
        }(name='InstanceErrorPercentage', description='The configuration for an alert of the InstanceErrorPercentage type.'),
        instanceTransferFluctuate?: {
          percentage?: int32(name='Percentage', description='The maximum percentage of fluctuation in the number of auto triggered node instances that are generated in your workspace. Valid values: [1-100].', example='10'),
          trend?: string(name='Trend', description='The way in which the number of auto triggered node instances that are generated in your workspace fluctuates. Valid values:

*   abs: the absolute value. The number of instances increases or decreases.
*   increase: The number of instances increases.
*   decrease: The number of instances decreases.', example='10'),
        }(name='InstanceTransferFluctuate', description='The configuration for an alert of the InstanceTransferFluctuate type.'),
        timeout?: {
          timeoutInMinutes?: int32(name='TimeoutInMinutes', description='The timeout period. Unit: minutes. Valid values: [1, 21600].', example='10'),
        }(name='Timeout', description='The configuration for an alert of the Timeout type.'),
        unFinished?: {
          unFinishedTime?: string(name='UnFinishedTime', description='The latest completion time of the instance. The period is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='12:00'),
        }(name='UnFinished', description='The configuration for an alert of the UnFinished type.'),
      }(name='Extension', description='The extended information about the rule. This parameter is required for specific types of alerts.'),
      target?: {
        allowTasks?: [ long ](name='AllowTasks', description='The nodes that are not to be monitored.'),
        ids?: [ long ](name='Ids', description='The IDs of monitored objects.'),
        type?: string(name='Type', description='The type of the monitored objects. Valid values:

*   Task: node
*   Baseline: baseline
*   Project: workspace
*   BizProcess: workflow', example='Task'),
      }(name='Target', description='The monitored objects.'),
      type?: string(name='Type', description='The alert type. Valid values:

*   Finished: An instance is successfully run.
*   UnFinished: An instance does not finish running before a specified point in time.
*   Error: An error occurs on an instance.
*   CycleUnfinished: An instance does not finish running as expected within a specific cycle.
*   Timeout: An instance times out.
*   InstanceTransferComplete: An instance is generated by the auto triggered node.
*   InstanceTransferFluctuate: The number of generated instances fluctuates.
*   ExhaustedError: An error persists after an instance is automatically rerun.
*   InstanceKeyword: An instance with errors contains specified keywords.
*   InstanceErrorCount: The number of instances on which an error occurs reaches a specified threshold.
*   InstanceErrorPercentage: The proportion of instances on which an error occurs in the workspace to the total number of instances reaches a specified threshold.
*   ResourceGroupPercentage: The usage rate of the resource group reaches a specified threshold.
*   ResourceGroupWaitCount: The number of instances that are waiting for resources in the resource group reaches a specified threshold.', example='Error'),
    }(name='TriggerCondition', description='The alert triggering condition.'),
  }(name='AlertRule', description='The information about the rule.'),
  requestId?: string(name='RequestId', description='The request ID.', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model GetAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlertRuleResponseBody(name='body'),
}

/**
 * @summary Queries a list of custom alert monitoring rules.
 *
 * @param request GetAlertRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAlertRuleResponse
 */
async function getAlertRuleWithOptions(request: GetAlertRuleRequest, runtime: $RuntimeOptions): GetAlertRuleResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetAlertRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of custom alert monitoring rules.
 *
 * @param request GetAlertRuleRequest
 * @return GetAlertRuleResponse
 */
async function getAlertRule(request: GetAlertRuleRequest): GetAlertRuleResponse {
  var runtime = new $RuntimeOptions{};
  return getAlertRuleWithOptions(request, runtime);
}

model GetCreateWorkflowInstancesResultRequest {
  operationId?: string(name='OperationId', description='This parameter is required.', example='e15ad21c-b0e9-4792-8f55-b037xxxxxxxx'),
}

model GetCreateWorkflowInstancesResultResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  result?: {
    failureMessage?: string(name='FailureMessage', example='Invalid Param xxx'),
    status?: string(name='Status', example='Created'),
    workflowInstanceIds?: [ long ](name='WorkflowInstanceIds'),
  }(name='Result'),
}

model GetCreateWorkflowInstancesResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCreateWorkflowInstancesResultResponseBody(name='body'),
}

/**
 * @summary 查询异步创建工作流实例的结果
 *
 * @param request GetCreateWorkflowInstancesResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCreateWorkflowInstancesResultResponse
 */
async function getCreateWorkflowInstancesResultWithOptions(request: GetCreateWorkflowInstancesResultRequest, runtime: $RuntimeOptions): GetCreateWorkflowInstancesResultResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCreateWorkflowInstancesResult',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 查询异步创建工作流实例的结果
 *
 * @param request GetCreateWorkflowInstancesResultRequest
 * @return GetCreateWorkflowInstancesResultResponse
 */
async function getCreateWorkflowInstancesResult(request: GetCreateWorkflowInstancesResultRequest): GetCreateWorkflowInstancesResultResponse {
  var runtime = new $RuntimeOptions{};
  return getCreateWorkflowInstancesResultWithOptions(request, runtime);
}

model GetDIJobRequest {
  DIJobId?: long(name='DIJobId', description='This parameter is deprecated. Use the Id parameter instead.', example='11588', deprecated=true),
  id?: long(name='Id', description='The ID of the synchronization task.', example='11588'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000'),
  withDetails?: boolean(name='WithDetails', description='Specifies whether to return detailed configuration information, including TransformationRules, TableMappings, and JobSettings. Valid values: true and false. Default value: true.', example='true'),
}

model GetDIJobResponseBody = {
  pagingInfo?: {
    DIJobId?: string(name='DIJobId', description='This parameter is deprecated. Use the Id parameter instead.', example='32601', deprecated=true),
    description?: string(name='Description', description='The description of the synchronization task.', example='description'),
    destinationDataSourceSettings?: [ 
      {
        dataSourceName?: string(name='DataSourceName', description='The name of the data source.', example='dw_mysql'),
      }
    ](name='DestinationDataSourceSettings', description='The properties of the destination.'),
    destinationDataSourceType?: string(name='DestinationDataSourceType', description='The destination type. The value Hologres is returned.', example='Hologres'),
    id?: long(name='Id', description='The ID of the synchronization task.', example='32601'),
    jobName?: string(name='JobName', description='The name of the synchronization task.', example='imp_ods_dms_det_dealer_info_df'),
    jobSettings?: {
      channelSettings?: string(name='ChannelSettings', description='The channel control settings for the synchronization task. The value of this parameter is a JSON string.', example='{"structInfo":"MANAGED","storageType":"TEXTFILE","writeMode":"APPEND","partitionColumns":[{"columnName":"pt","columnType":"STRING","comment":""}],"fieldDelimiter":""}'),
      columnDataTypeSettings?: [ 
        {
          destinationDataType?: string(name='DestinationDataType', description='The data type of the destination field.', example='text'),
          sourceDataType?: string(name='SourceDataType', description='The data type of the source field.', example='bigint'),
        }
      ](name='ColumnDataTypeSettings', description='The data type mappings between source fields and destination fields.'),
      cycleScheduleSettings?: {
        cycleMigrationType?: string(name='CycleMigrationType', description='The synchronization type that requires periodic scheduling. Valid values:

*   Full: full synchronization
*   OfflineIncremental: batch incremental synchronization', example='Full'),
        scheduleParameters?: string(name='ScheduleParameters', description='The scheduling parameters.', example='bizdate=$bizdate'),
      }(name='CycleScheduleSettings', description='The settings for periodic scheduling.'),
      ddlHandlingSettings?: [ 
        {
          action?: string(name='Action', description='The processing policy for a specific type of DDL message. Valid values:

*   Ignore: ignores a DDL message.
*   Critical: reports an error for a DDL message.
*   Normal: normally processes a DDL message.', example='Ignore'),
          type?: string(name='Type', description='The DDL operation type. Valid values:

*   RenameColumn
*   ModifyColumn
*   CreateTable
*   TruncateTable
*   DropTable', example='CreateTable'),
        }
      ](name='DdlHandlingSettings', description='The DDL operation types. Valid values:

*   RenameColumn
*   ModifyColumn
*   CreateTable
*   TruncateTable
*   DropTable
*   DropColumn
*   AddColumn'),
      runtimeSettings?: [ 
        {
          name?: string(name='Name', description='The name of the configuration item. Valid values:

*   runtime.offline.speed.limit.mb: indicates the maximum transmission rate that is allowed for a batch synchronization task. This configuration item takes effect only when runtime.offline.speed.limit.enable is set to true.
*   runtime.offline.speed.limit.enable: indicates whether throttling is enabled for a batch synchronization task.
*   dst.offline.connection.max: indicates the maximum number of connections that are allowed for writing data to the destination of a batch synchronization task.
*   runtime.offline.concurrent: indicates the maximum number of parallel threads that are allowed for a batch synchronization task.
*   dst.realtime.connection.max: indicates the maximum number of connections that are allowed for writing data to the destination of a real-time synchronization task.
*   runtime.enable.auto.create.schema: indicates whether schemas are automatically created in the destination of a synchronization task.
*   src.offline.datasource.max.connection: indicates the maximum number of connections that are allowed for reading data from the source of a batch synchronization task.
*   runtime.realtime.concurrent: indicates the maximum number of parallel threads that are allowed for a real-time synchronization task.', example='runtime.offline.concurrent'),
          value?: string(name='Value', description='The value of the configuration item.', example='1'),
        }
      ](name='RuntimeSettings', description='The runtime settings.'),
    }(name='JobSettings', description='The runtime settings.'),
    jobStatus?: string(name='JobStatus', description='The status of the job.', example='Running'),
    migrationType?: string(name='MigrationType', description='The synchronization type. Valid values:

*   FullAndRealtimeIncremental: one-time full synchronization and real-time incremental synchronization
*   RealtimeIncremental: real-time incremental synchronization
*   Full: full synchronization
*   OfflineIncremental: batch incremental synchronization
*   FullAndOfflineIncremental: one-time full synchronization and batch incremental synchronization', example='FullAndRealtimeIncremental'),
    projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter indicates the DataWorks workspace to which the API operation is applied.', example='98330'),
    resourceSettings?: {
      offlineResourceSettings?: {
        requestedCu?: double(name='RequestedCu', description='The number of compute units (CUs) in the resource group for scheduling that are used for batch synchronization.', example='2.0'),
        resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group for Data Integration used for batch synchronization.', example='S_res_group_7708_1667792816832'),
      }(name='OfflineResourceSettings', description='The resource used for batch synchronization.'),
      realtimeResourceSettings?: {
        requestedCu?: double(name='RequestedCu', description='The number of CUs in the resource group for Data Integration that are used for real-time synchronization.', example='2.0'),
        resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group for Data Integration used for real-time synchronization.', example='S_res_group_235454102432001_1579085295030'),
      }(name='RealtimeResourceSettings', description='The resource used for real-time synchronization.'),
      scheduleResourceSettings?: {
        requestedCu?: double(name='RequestedCu', description='The number of CUs in the resource group for Data Integration that are used for scheduling.', example='2.0'),
        resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group for scheduling used by the synchronization task.', example='S_res_group_235454102432001_1718359176885'),
      }(name='ScheduleResourceSettings', description='The resource used for scheduling.'),
    }(name='ResourceSettings', description='The resource settings.'),
    sourceDataSourceSettings?: [ 
      {
        dataSourceName?: string(name='DataSourceName', description='The name of the data source.', example='dw_mysql'),
        dataSourceProperties?: {
          encoding?: string(name='Encoding', description='The encoding format of the database.', example='UTF-8'),
          timezone?: string(name='Timezone', description='The time zone.', example='GMT+8'),
        }(name='DataSourceProperties', description='The properties of the data source.'),
      }
    ](name='SourceDataSourceSettings', description='The settings of the source. Only a single source is supported.'),
    sourceDataSourceType?: string(name='SourceDataSourceType', description='The source type. The value MySQL is returned.', example='Mysql'),
    tableMappings?: [ 
      {
        sourceObjectSelectionRules?: [ 
          {
            action?: string(name='Action', description='The operation that is performed to select objects. Valid values: Include and Exclude.', example='Include'),
            expression?: string(name='Expression', description='The expression.', example='mysql_table_1'),
            expressionType?: string(name='ExpressionType', description='The expression type. Valid values: Exact and Regex.', example='Exact'),
            objectType?: string(name='ObjectType', description='The object type. Valid values:

*   Table
*   Database', example='Table'),
          }
        ](name='SourceObjectSelectionRules', description='The list of rules used to select synchronization objects in the source. The objects can be databases or tables.'),
        transformationRules?: [ 
          {
            ruleActionType?: string(name='RuleActionType', description='The action type. Valid values:

*   DefinePrimaryKey
*   Rename
*   AddColumn
*   HandleDml', example='AddColumn'),
            ruleName?: string(name='RuleName', description='The name of the rule. If the values of the RuleActionType parameter and the RuleTargetType parameter are the same for multiple transformation rules, you must make sure that the transformation rule names are unique.', example='rename_rule_1'),
            ruleTargetType?: string(name='RuleTargetType', description='The type of the object on which the action is performed. Valid values:

*   Table
*   Schema', example='Table'),
          }
        ](name='TransformationRules', description='The list of transformation rules that are applied to the synchronization objects selected from the source. Each entry in the list defines a transformation rule.'),
      }
    ](name='TableMappings', description='The list of mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. Each entry in the list displays a mapping between a rule used to select synchronization objects and a transformation rule applied to the selected synchronization objects.'),
    transformationRules?: [ 
      {
        ruleActionType?: string(name='RuleActionType', description='The action type. Valid values:

*   DefinePrimaryKey
*   Rename
*   AddColumn
*   HandleDml
*   DefineIncrementalCondition
*   DefineCycleScheduleSettings
*   DefineRuntimeSettings
*   DefinePartitionKey', example='Rename'),
        ruleExpression?: string(name='RuleExpression', description='The expression of the rule. The expression is a JSON string.

Example of a renaming rule: {"expression":"${srcDatasourceName}_${srcDatabaseName}_0922","variables":[{"variableName":"srcDatabaseName","variableRules":[{"from":"fromdb","to":"todb"}]}]}.

expression: the expression of the renaming rule. The expression may contain the following variables: ${srcDatasourceName}, ${srcDatabaseName}, and ${srcTableName}. ${srcDatasourceName} indicates the name of the source. ${srcDatabaseName} indicates the name of a source database. ${srcTableName} indicates the name of a source table. variables: the generation rule for a variable used in the expression of the renaming rule. The default value of the specified variable is the original value of the object indicated by the variable. You can define a group of string replacement rules to change the original values based on your business requirements. variableName: the name of the variable. The variable name is not enclosed in ${}. variableRules: the string replacement rules for variables. The system runs the string replacement rules in sequence. from indicates the original string. to indicates the new string. Example of a rule used to add a specific field to the destination and assign a value to the field: {"columns":[{"columnName":"my_add_column","columnValueType":"Constant","columnValue":"123"}]}.

If no rule of this type is configured, no fields are added to the destination and no values are assigned by default. columnName: the name of the field that is added. columnValueType: the value type of the field. Valid values: Constant and Variable. columnValue: the value of the field. If the value of the columnValueType parameter is Constant, the value of the columnValue parameter is a constant of the STRING data type. If the value of the columnValueType parameter is Variable, the value of the columnValue parameter is a built-in variable. The following built-in variables are supported: EXECUTE_TIME (LONG data type), DB_NAME_SRC (STRING data type), DATASOURCE_NAME_SRC (STRING data type), TABLE_NAME_SRC (STRING data type), DB_NAME_DEST (STRING data type), DATASOURCE_NAME_DEST (STRING data type), TABLE_NAME_DEST (STRING data type), and DB_NAME_SRC_TRANSED (STRING data type). EXECUTE_TIME indicates the execution time. DB_NAME_SRC indicates the name of a source database. DATASOURCE_NAME_SRC indicates the name of the source. TABLE_NAME_SRC indicates the name of a source table. DB_NAME_DEST indicates the name of a destination database. DATASOURCE_NAME_DEST indicates the name of the destination. TABLE_NAME_DEST indicates the name of a destination table. DB_NAME_SRC_TRANSED indicates the database name obtained after a transformation. Example of a rule used to specify primary key fields for a destination table: {"columns":["ukcolumn1","ukcolumn2"]}.

If no rule of this type is configured, the primary key fields in the mapped source table are used for the destination table by default. If the destination table is an existing table, Data Integration does not modify the schema of the destination table. If the specified primary key fields do not exist in the destination table, an error is reported when the synchronization task starts to run. If the destination table is automatically created by the system, Data Integration automatically creates the schema of the destination table. The schema contains the primary key fields that you specify. If the specified primary key fields do not exist in the destination table, an error is reported when the synchronization task starts to run. Example of a rule used to process DML messages: {"dmlPolicies":[{"dmlType":"Delete","dmlAction":"Filter","filterCondition":"id > 1"}]}.

If no rule of this type is configured, the default processing policy for messages generated for insert, update, and delete operations is Normal. dmlType: the DML operation. Valid values: Insert, Update, and Delete. dmlAction: the processing policy for DML messages. Valid values: Normal, Ignore, Filter, and LogicalDelete. Filter indicates conditional processing. The value Filter is returned for the dmlAction parameter only when the value of the dmlType parameter is Update or Delete. filterCondition: the condition used to filter DML messages. This parameter is returned only when the value of the dmlAction parameter is Filter.', example='{"expression":"${srcDatasoureName}_${srcDatabaseName}"}'),
        ruleName?: string(name='RuleName', description='The name of the rule. If the values of the RuleActionType parameter and the RuleTargetType parameter are the same for multiple transformation rules, you must make sure that the transformation rule names are unique.', example='rename_rule_1'),
        ruleTargetType?: string(name='RuleTargetType', description='The type of the object on which the action is performed. Valid values:

*   Table
*   Schema', example='Table'),
      }
    ](name='TransformationRules', description='The list of transformation rules that are applied to the synchronization objects selected from the source. Each entry in the list defines a transformation rule.'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='C99E2BE6-9DEA-5C2E-8F51-1DDCFEADE490'),
}

model GetDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDIJobResponseBody(name='body'),
}

/**
 * @summary Queries the information about a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDIJobResponse
 */
async function getDIJobWithOptions(request: GetDIJobRequest, runtime: $RuntimeOptions): GetDIJobResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDIJob',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDIJobRequest
 * @return GetDIJobResponse
 */
async function getDIJob(request: GetDIJobRequest): GetDIJobResponse {
  var runtime = new $RuntimeOptions{};
  return getDIJobWithOptions(request, runtime);
}

model GetDIJobLogRequest {
  DIJobId?: long(name='DIJobId', description='This parameter is deprecated. Use the Id parameter instead.', example='10000', deprecated=true),
  failoverId?: long(name='FailoverId', description='The failover ID.', example='10'),
  id?: long(name='Id', description='The ID of the synchronization task.', example='10000'),
  instanceId?: long(name='InstanceId', description='The instance ID.', example='6153616438'),
}

model GetDIJobLogResponseBody = {
  log?: string(name='Log', description='The log.', example='>>>>>>>> stdout:n++++++++++++++++++executing sql: create database if not exists jindo_test location \\\\"oss://pangbei-hdfs/tmp/hive\\\\" n++n'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='1AFAE64E-D1BE-432B-A9****'),
}

model GetDIJobLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDIJobLogResponseBody(name='body'),
}

/**
 * @summary Obtains logs generated for a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDIJobLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDIJobLogResponse
 */
async function getDIJobLogWithOptions(request: GetDIJobLogRequest, runtime: $RuntimeOptions): GetDIJobLogResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDIJobLog',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Obtains logs generated for a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDIJobLogRequest
 * @return GetDIJobLogResponse
 */
async function getDIJobLog(request: GetDIJobLogRequest): GetDIJobLogResponse {
  var runtime = new $RuntimeOptions{};
  return getDIJobLogWithOptions(request, runtime);
}

model GetDataQualityEvaluationTaskRequest {
  id?: long(name='Id', example='1006455182'),
}

model GetDataQualityEvaluationTaskResponseBody = {
  dataQualityEvaluationTask?: {
    dataSourceId?: long(name='DataSourceId'),
    description?: string(name='Description', description='质量监控任务描述'),
    hooks?: [ 
      {
        condition?: string(name='Condition', description='Hook触发条件', example='(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")'),
        type?: string(name='Type', description='The hook type. Only one hook type is supported.

*

Valid values:

*   BlockTaskInstance: Blocks the running of scheduling tasks. A monitor is triggered by scheduling tasks. After a monitor finishes running, the monitor determines whether to block the running of scheduling tasks based on the hook condition.', example='BlockTaskInstance'),
      }
    ](name='Hooks', description='The hook.'),
    id?: long(name='Id', description='代表资源一级ID的资源属性字段', example='2178'),
    name?: string(name='Name', description='质量监控任务名称

This parameter is required.'),
    notifications?: {
      condition?: string(name='Condition', description='通知触发条件', example='(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")'),
      notifications?: [ 
        {
          notificationChannels?: [ 
            {
              channels?: [ string ](name='Channels', description='The alert notification method.'),
            }
          ](name='NotificationChannels', description='The alert notification method.'),
          notificationReceivers?: [ 
            {
              extension?: string(name='Extension', description='扩展信息，格式为 json，例如钉钉机器人支持 at 所有人', example='{  "atAll": true }'),
              receiverType?: string(name='ReceiverType', description='The additional parameters that are required when alerts are sent. The parameters are JSON-formatted strings. The following keys are supported:

*   atAll: specifies that all members in a group are mentioned when alerts are sent by using DingTalk. This parameter is valid only if you set ReceiverType to DingdingUrl.

Valid values:

*   WebhookUrl
*   FeishuUrl
*   DingdingUrl
*   WeixinUrl
*   AliUid', example='DingdingUrl'),
              receiverValues?: [ string ](name='ReceiverValues', description='告警接收人'),
            }
          ](name='NotificationReceivers', description='The configurations of alert recipients.'),
        }
      ](name='Notifications', description='The configurations of the alert notification.'),
    }(name='Notifications', description='The configurations of alert notifications.'),
    projectId?: long(name='ProjectId', description='项目空间Id', example='2626'),
    runtimeConf?: string(name='RuntimeConf', description='使用数据源时的一些设置，目前只支持指定EMR的yarn队列、采集EMR表时把SQL引擎指定为SPARK-SQL', example='{ "queue": "default", "sqlEngine": "SPARK_SQL" }'),
    target?: {
      databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs.

Valid values:

*   maxcompute
*   hologres
*   cdh
*   analyticdb_for_mysql
*   starrocks
*   emr
*   analyticdb_for_postgresql', example='maxcompute'),
      partitionSpec?: string(name='PartitionSpec', example='pt=$[yyyymmdd-1]'),
      tableGuid?: string(name='TableGuid', description='表在数据地图中的唯一ID', example='odps.meta_open_api_test_sz.test_partition_tbl'),
      type?: string(name='Type', description='监控对象类型', example='Table'),
    }(name='Target', description='The monitored object of the monitor.'),
    trigger?: {
      taskIds?: [ long ](name='TaskIds', description='具体指明哪些调度节点的实例执行成功后可以触发'),
      type?: string(name='Type', description='The trigger type of the monitor.

*
*

Valid values:

*   ByManual (default): The monitor is manually triggered.
*   ByScheduledTaskInstance: The monitor is triggered by associated scheduling tasks.
*   ByQualityNode: The monitor is triggered by created data quality monitoring nodes.', example='ByScheduledTaskInstance'),
    }(name='Trigger', description='The trigger configuration of the monitor.'),
  }(name='DataQualityEvaluationTask', description='The details of the monitor.'),
  requestId?: string(name='RequestId', description='Id of the request', example='SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF'),
}

model GetDataQualityEvaluationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataQualityEvaluationTaskResponseBody(name='body'),
}

/**
 * @summary 查询数据质量校验任务详情
 *
 * @param request GetDataQualityEvaluationTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataQualityEvaluationTaskResponse
 */
async function getDataQualityEvaluationTaskWithOptions(request: GetDataQualityEvaluationTaskRequest, runtime: $RuntimeOptions): GetDataQualityEvaluationTaskResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDataQualityEvaluationTask',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 查询数据质量校验任务详情
 *
 * @param request GetDataQualityEvaluationTaskRequest
 * @return GetDataQualityEvaluationTaskResponse
 */
async function getDataQualityEvaluationTask(request: GetDataQualityEvaluationTaskRequest): GetDataQualityEvaluationTaskResponse {
  var runtime = new $RuntimeOptions{};
  return getDataQualityEvaluationTaskWithOptions(request, runtime);
}

model GetDataQualityEvaluationTaskInstanceRequest {
  id?: long(name='Id', description='This parameter is required.', example='7227550902'),
}

model GetDataQualityEvaluationTaskInstanceResponseBody = {
  dataQualityEvaluationTaskInstance?: {
    createTime?: long(name='CreateTime', example='1716344665000'),
    finishTime?: long(name='FinishTime', example='1716344665000'),
    id?: long(name='Id', example='7234231689'),
    parameters?: string(name='Parameters', example='{ "triggerTime": 1733284062000 }'),
    projectId?: long(name='ProjectId', example='98330'),
    status?: string(name='Status', example='Passed'),
    task?: {
      description?: string(name='Description'),
      hooks?: [ 
        {
          condition?: string(name='Condition', example='(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")'),
          type?: string(name='Type', example='BlockTaskInstance'),
        }
      ](name='Hooks'),
      id?: long(name='Id', example='28544990'),
      name?: string(name='Name'),
      notifications?: {
        condition?: string(name='Condition', example='${severity} == "High" AND ${status} == "Critical"'),
        notifications?: [ 
          {
            notificationChannels?: [ 
              {
                channels?: [ string ](name='Channels'),
              }
            ](name='NotificationChannels'),
            notificationReceivers?: [ 
              {
                extension?: string(name='Extension', example='{ "atAll": true }'),
                receiverType?: string(name='ReceiverType', example='DingdingUrl'),
                receiverValues?: [ string ](name='ReceiverValues'),
              }
            ](name='NotificationReceivers'),
          }
        ](name='Notifications'),
      }(name='Notifications'),
      projectId?: long(name='ProjectId', example='20629'),
      runtimeConf?: string(name='RuntimeConf', example='{ "queue": "default" }'),
      target?: {
        databaseType?: string(name='DatabaseType', example='maxcompute'),
        partitionSpec?: string(name='PartitionSpec', example='pt=$[yyyymmdd-1]'),
        tableGuid?: string(name='TableGuid', example='odps.api_trace.ods_d_api_log'),
        type?: string(name='Type', example='Table'),
      }(name='Target'),
      trigger?: {
        taskIds?: [ long ](name='TaskIds'),
        type?: string(name='Type', example='ByScheduledTaskInstance'),
      }(name='Trigger'),
    }(name='Task'),
    triggerContext?: string(name='TriggerContext', example='{ "triggerClient": "CWF2", "triggerClientId": 70001238945 }'),
  }(name='DataQualityEvaluationTaskInstance'),
  requestId?: string(name='RequestId', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model GetDataQualityEvaluationTaskInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataQualityEvaluationTaskInstanceResponseBody(name='body'),
}

/**
 * @summary 获取数据质量校验任务实例详情
 *
 * @param request GetDataQualityEvaluationTaskInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataQualityEvaluationTaskInstanceResponse
 */
async function getDataQualityEvaluationTaskInstanceWithOptions(request: GetDataQualityEvaluationTaskInstanceRequest, runtime: $RuntimeOptions): GetDataQualityEvaluationTaskInstanceResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDataQualityEvaluationTaskInstance',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取数据质量校验任务实例详情
 *
 * @param request GetDataQualityEvaluationTaskInstanceRequest
 * @return GetDataQualityEvaluationTaskInstanceResponse
 */
async function getDataQualityEvaluationTaskInstance(request: GetDataQualityEvaluationTaskInstanceRequest): GetDataQualityEvaluationTaskInstanceResponse {
  var runtime = new $RuntimeOptions{};
  return getDataQualityEvaluationTaskInstanceWithOptions(request, runtime);
}

model GetDataQualityRuleRequest {
  id?: long(name='Id', description='This parameter is required.', example='19715'),
}

model GetDataQualityRuleResponseBody = {
  dataQualityRule?: {
    checkingConfig?: {
      referencedSamplesFilter?: string(name='ReferencedSamplesFilter', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
      thresholds?: {
        critical?: {
          expression?: string(name='Expression', description='The threshold expression.', example='$checkValue > 0.05'),
          operator?: string(name='Operator', example='>'),
          value?: string(name='Value', example='100.0'),
        }(name='Critical', description='The threshold settings for critical alerts.'),
        expected?: {
          expression?: string(name='Expression', description='The threshold expression.', example='$checkValue <= 0.01'),
          operator?: string(name='Operator', example='>'),
          value?: string(name='Value', example='100.0'),
        }(name='Expected', description='The expected threshold setting.'),
        warned?: {
          expression?: string(name='Expression', description='The threshold expression.', example='$checkValue > 0.01'),
          operator?: string(name='Operator', example='>'),
          value?: string(name='Value', example='100.0'),
        }(name='Warned', description='The threshold settings for normal alerts.'),
      }(name='Thresholds', description='The threshold settings.'),
      type?: string(name='Type', example='Fixed'),
    }(name='CheckingConfig', description='The check settings for sample data.'),
    description?: string(name='Description', example='this is a odps _sql task'),
    enabled?: boolean(name='Enabled', example='true'),
    errorHandlers?: [ 
      {
        errorDataFilter?: string(name='ErrorDataFilter', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
        type?: string(name='Type', example='SaveErrorData'),
      }
    ](name='ErrorHandlers'),
    id?: long(name='Id', example='16033'),
    name?: string(name='Name'),
    projectId?: long(name='ProjectId', example='1948'),
    samplingConfig?: {
      metric?: string(name='Metric', example='Max'),
      metricParameters?: string(name='MetricParameters', example='{ "Columns": [ "id", "name" ] , "SQL": "select count(1) from table;"}'),
      samplingFilter?: string(name='SamplingFilter', example='id IS NULL'),
      settingConfig?: string(name='SettingConfig', example='SET odps.sql.udf.timeout=600s; 
SET odps.sql.python.version=cp27;'),
    }(name='SamplingConfig'),
    severity?: string(name='Severity', example='High'),
    target?: {
      databaseType?: string(name='DatabaseType', example='maxcompute'),
      partitionSpec?: string(name='PartitionSpec', example='ds=$[yyyymmdd-1]'),
      tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
      type?: string(name='Type', example='Table'),
    }(name='Target'),
    templateCode?: string(name='TemplateCode', example='system::user_defined'),
  }(name='DataQualityRule', description='The information about the rule.'),
  requestId?: string(name='RequestId', example='691CA452-D37A-4ED0-9441'),
}

model GetDataQualityRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataQualityRuleResponseBody(name='body'),
}

/**
 * @summary 查询质量规则详情
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDataQualityRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataQualityRuleResponse
 */
async function getDataQualityRuleWithOptions(request: GetDataQualityRuleRequest, runtime: $RuntimeOptions): GetDataQualityRuleResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDataQualityRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 查询质量规则详情
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDataQualityRuleRequest
 * @return GetDataQualityRuleResponse
 */
async function getDataQualityRule(request: GetDataQualityRuleRequest): GetDataQualityRuleResponse {
  var runtime = new $RuntimeOptions{};
  return getDataQualityRuleWithOptions(request, runtime);
}

model GetDataQualityRuleTemplateRequest {
  code?: string(name='Code', description='The code for the template.

This parameter is required.', example='USER_DEFINED:123'),
}

model GetDataQualityRuleTemplateResponseBody = {
  dataQualityRuleTemplate?: {
    checkingConfig?: {
      referencedSamplesFilter?: string(name='ReferencedSamplesFilter', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
      type?: string(name='Type', example='Fixed'),
    }(name='CheckingConfig'),
    code?: string(name='Code', example='USER_DEFINED:123'),
    directoryPath?: string(name='DirectoryPath'),
    name?: string(name='Name'),
    projectId?: long(name='ProjectId', example='4020'),
    samplingConfig?: {
      metric?: string(name='Metric', example='Max'),
      metricParameters?: string(name='MetricParameters', example='{"SQL": "select count(1) from table;"}'),
      settingConfig?: string(name='SettingConfig', example='SET odps.sql.udf.timeout=600s; 
SET odps.sql.python.version=cp27;'),
    }(name='SamplingConfig'),
    visibleScope?: string(name='VisibleScope', example='Project'),
  }(name='DataQualityRuleTemplate', description='The information about the template.'),
  requestId?: string(name='RequestId', example='691CA452-D37A-4ED0-9441'),
}

model GetDataQualityRuleTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataQualityRuleTemplateResponseBody(name='body'),
}

/**
 * @summary Queries the information about a data quality monitoring rule template.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDataQualityRuleTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataQualityRuleTemplateResponse
 */
async function getDataQualityRuleTemplateWithOptions(request: GetDataQualityRuleTemplateRequest, runtime: $RuntimeOptions): GetDataQualityRuleTemplateResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDataQualityRuleTemplate',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a data quality monitoring rule template.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetDataQualityRuleTemplateRequest
 * @return GetDataQualityRuleTemplateResponse
 */
async function getDataQualityRuleTemplate(request: GetDataQualityRuleTemplateRequest): GetDataQualityRuleTemplateResponse {
  var runtime = new $RuntimeOptions{};
  return getDataQualityRuleTemplateWithOptions(request, runtime);
}

model GetDataSourceRequest {
  id?: long(name='Id', description='The data source ID.

This parameter is required.', example='16035'),
}

model GetDataSourceResponseBody = {
  dataSource?: {
    connectionProperties?: any(name='ConnectionProperties', description='The connection configurations of the data source, including the connection address, access identity, and environment information. The envType parameter specifies the environment in which the data source is used. Valid values of the envType parameter:

*   Dev: development environment
*   Prod: production environment

The parameters that you need to configure for the data source vary based on the mode in which the data source is added. For more information, see [Data source connection information (ConnectionProperties)](https://help.aliyun.com/document_detail/2852465.html).', example='{
	"envType": "Prod",
	"regionId": "cn-beijing",
    "instanceId": "hgprecn-cn-x0r3oun4k001",
    "database": "testdb",
    "securityProtocol": "authTypeNone",
    "authType": "Executor",
    "authIdentity": "1107550004253538"
}'),
    connectionPropertiesMode?: string(name='ConnectionPropertiesMode', description='The mode in which the data source is added. The mode varies based on the data source type. Valid values:

*   InstanceMode: instance mode
*   UrlMode: connection string mode
*   CdhMode: CDH cluster mode', example='UrlMode'),
    createTime?: long(name='CreateTime', description='The time when the data source was added. This value is a UNIX timestamp.', example='1698286929333'),
    createUser?: string(name='CreateUser', description='The ID of the user who adds the data source.', example='1107550004253538'),
    description?: string(name='Description', description='The description of the data source.', example='test'),
    id?: long(name='Id', description='The data source ID.', example='16738'),
    modifyTime?: long(name='ModifyTime', description='The time when the data source was last modified. This value is a UNIX timestamp.', example='1698286929333'),
    modifyUser?: string(name='ModifyUser', description='The ID of the user who modifies the data source.', example='1107550004253538'),
    name?: string(name='Name', description='The name of the data source.', example='test'),
    projectId?: long(name='ProjectId', description='The ID of the workspace with which the data source is associated.', example='52660'),
    qualifiedName?: string(name='QualifiedName', description='The unique business key of the data source. For example, the unique business key of a Hologres data source is in the `${tenantOwnerId}:${regionId}:${type}:${instanceId}:${database}` format.', example='1107550004253538:cn-beijing:holo:hgprecn-cn-x0r3oun4k001:testdb'),
    type?: string(name='Type', description='The type of the data source.', example='hologres'),
  }(name='DataSource', description='The information about the data source.'),
  requestId?: string(name='RequestId', description='The request ID.', example='9252F32F-D855-549E-8898-61CF5A733050'),
}

model GetDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataSourceResponseBody(name='body'),
}

/**
 * @summary Queries a data source by ID.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Deployment, Development, Project Owner, and O\\&M
 *
 * @param request GetDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataSourceResponse
 */
async function getDataSourceWithOptions(request: GetDataSourceRequest, runtime: $RuntimeOptions): GetDataSourceResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDataSource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a data source by ID.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Deployment, Development, Project Owner, and O\\&M
 *
 * @param request GetDataSourceRequest
 * @return GetDataSourceResponse
 */
async function getDataSource(request: GetDataSourceRequest): GetDataSourceResponse {
  var runtime = new $RuntimeOptions{};
  return getDataSourceWithOptions(request, runtime);
}

model GetDeploymentRequest {
  id?: string(name='Id', description='The ID of the process.

This parameter is required.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model GetDeploymentResponseBody = {
  pipeline?: {
    createTime?: long(name='CreateTime', description='The time when the process was created. This value is a UNIX timestamp.', example='1724984066000'),
    creator?: string(name='Creator', description='The creator of the process.', example='137946317766XXXX'),
    id?: string(name='Id', description='The ID of the process.', example='a7ef0634-20ec-4a7c-a214-54020f91XXXX'),
    message?: string(name='Message', description='The error message returned when the process fails.'),
    modifyTime?: long(name='ModifyTime', description='The time when the process was modified. This value is a UNIX timestamp.', example='1724984066000'),
    projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='56160'),
    stages?: [ 
      {
        code?: string(name='Code', description='The code of the stage.', example='DEV_CHECK'),
        description?: string(name='Description', description='The description of the stage.'),
        detail?: map[string]any(name='Detail', description='The details of the stage.'),
        message?: string(name='Message', description='The error message returned for the stage.'),
        name?: string(name='Name', description='The name of the stage.'),
        status?: string(name='Status', description='The status of the stage.

Valid values:

*   Init
*   Running
*   Success
*   Fail
*   Termination
*   Cancel', example='INIT'),
        step?: int32(name='Step', description='The step number of the stage.', example='1'),
        type?: string(name='Type', description='The type of the stage.

Valid values:

*   Deploy
*   Check
*   Offline
*   Build
*   Delete', example='BUILD'),
      }
    ](name='Stages', description='The information about stages in the process.'),
    status?: string(name='Status', description='The status of the process.

Valid values:

*   Init
*   Running
*   Success
*   Fail
*   Termination
*   Cancel', example='RUNNING'),
  }(name='Pipeline', description='The information about the process.'),
  requestId?: string(name='RequestId', description='The request ID.', example='08468352-032C-5262-AEDC-68C9FA05XXXX'),
}

model GetDeploymentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeploymentResponseBody(name='body'),
}

/**
 * @summary Queries the information about a process for deploying or undeploying an entity.
 *
 * @param request GetDeploymentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDeploymentResponse
 */
async function getDeploymentWithOptions(request: GetDeploymentRequest, runtime: $RuntimeOptions): GetDeploymentResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDeployment',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a process for deploying or undeploying an entity.
 *
 * @param request GetDeploymentRequest
 * @return GetDeploymentResponse
 */
async function getDeployment(request: GetDeploymentRequest): GetDeploymentResponse {
  var runtime = new $RuntimeOptions{};
  return getDeploymentWithOptions(request, runtime);
}

model GetFunctionRequest {
  id?: long(name='Id', description='The ID of the UDF.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000'),
}

model GetFunctionResponseBody = {
  function?: {
    createTime?: long(name='CreateTime', description='The time when the UDF was created. This value is a UNIX timestamp.', example='1724505917000'),
    id?: long(name='Id', description='The ID of the UDF.', example='860438872620113XXXX'),
    modifyTime?: long(name='ModifyTime', description='The time when the UDF was last modified. This value is a UNIX timestamp.', example='1724506661000'),
    name?: string(name='Name', description='The name of the UDF.'),
    owner?: string(name='Owner', description='The owner of the UDF.', example='110755000425XXXX'),
    projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace to which the UDF belongs.', example='10000'),
    spec?: string(name='Spec', description='The FlowSpec field information about the UDF. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).'),
  }(name='Function', description='The information about the UDF.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6CF95929-6D12-5A88-8CC3-4B2F4C2EXXXX'),
}

model GetFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFunctionResponseBody(name='body'),
}

/**
 * @summary Queries the information about a user-defined function (UDF) in DataStudio.
 *
 * @param request GetFunctionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFunctionResponse
 */
async function getFunctionWithOptions(request: GetFunctionRequest, runtime: $RuntimeOptions): GetFunctionResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetFunction',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a user-defined function (UDF) in DataStudio.
 *
 * @param request GetFunctionRequest
 * @return GetFunctionResponse
 */
async function getFunction(request: GetFunctionRequest): GetFunctionResponse {
  var runtime = new $RuntimeOptions{};
  return getFunctionWithOptions(request, runtime);
}

model GetJobStatusRequest {
  jobId?: string(name='JobId', description='The ID of the asynchronous task that is generated after you call an asynchronous operation.

This parameter is required.', example='70ecdaec-bf21-4c11-8ecb-4f77453ceea8'),
}

model GetJobStatusResponseBody = {
  jobStatus?: {
    completed?: string(name='Completed', description='Indicates whether the asynchronous task is complete. Valid values: True False', example='False'),
    createTime?: string(name='CreateTime', description='The time when the asynchronous task was created.', example='1729063449802'),
    error?: string(name='Error', description='The error message returned if the asynchronous task fails.', example='Not Found'),
    jobId?: string(name='JobId', description='The ID of the asynchronous task.', example='C664CDE3-9C0B-5792-B17F-6C543783BBBC'),
    jobType?: string(name='JobType', description='The type of the asynchronous task. Valid values:

*   **Create**: The asynchronous task is used to create an object.
*   **Update**: The asynchronous task is used to update an object.
*   **Cancel**: The asynchronous task is used to cancel an operation.', example='Create'),
    status?: string(name='Status', description='The status of the asynchronous task. Valid values:

*   **Success**
*   **Fail**
*   **Cancel**
*   **Running**', example='Success'),
  }(name='JobStatus', description='The real-time status information of the asynchronous task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5E2BFE96-C0E0-5A98-85C8-633EC803198D'),
}

model GetJobStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobStatusResponseBody(name='body'),
}

/**
 * @summary Queries the status information of an asynchronous task. After you call an asynchronous operation, an asynchronous task is generated. You can call the GetJobStatus operation to query the status of the asynchronous task.
 *
 * @param request GetJobStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetJobStatusResponse
 */
async function getJobStatusWithOptions(request: GetJobStatusRequest, runtime: $RuntimeOptions): GetJobStatusResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetJobStatus',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the status information of an asynchronous task. After you call an asynchronous operation, an asynchronous task is generated. You can call the GetJobStatus operation to query the status of the asynchronous task.
 *
 * @param request GetJobStatusRequest
 * @return GetJobStatusResponse
 */
async function getJobStatus(request: GetJobStatusRequest): GetJobStatusResponse {
  var runtime = new $RuntimeOptions{};
  return getJobStatusWithOptions(request, runtime);
}

model GetNetworkRequest {
  id?: long(name='Id', description='This parameter is required.', example='1000'),
}

model GetNetworkResponseBody = {
  network?: {
    createTime?: long(name='CreateTime', example='1727055811000'),
    createUser?: string(name='CreateUser', example='11075500042XXXXX'),
    id?: long(name='Id', example='1000'),
    resourceGroupId?: string(name='ResourceGroupId', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
    securityGroupId?: string(name='SecurityGroupId', example='sg-2ze13vamugr7jenXXXXX'),
    status?: string(name='Status', description='The status of the network resource. Valid values:

*   Pending: The network resource is waiting to be created.
*   Creating: The network resource is being created.
*   Running: The network resource is running as expected.
*   Deleting: The network resource is being deleted.
*   Deleted: The network resource is deleted.', example='Running'),
    vpcId?: string(name='VpcId', example='vpc-m2et4f3oc8msfbccXXXXX'),
    vswitchId?: string(name='VswitchId', example='vsw-uf8usrhs7hjd9amsXXXXX'),
  }(name='Network', description='The information about the network resource.'),
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetNetworkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNetworkResponseBody(name='body'),
}

/**
 * @summary Queries the information about a network resource.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetNetworkRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNetworkResponse
 */
async function getNetworkWithOptions(request: GetNetworkRequest, runtime: $RuntimeOptions): GetNetworkResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetNetwork',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a network resource.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetNetworkRequest
 * @return GetNetworkResponse
 */
async function getNetwork(request: GetNetworkRequest): GetNetworkResponse {
  var runtime = new $RuntimeOptions{};
  return getNetworkWithOptions(request, runtime);
}

model GetNodeRequest {
  id?: long(name='Id', description='The ID of the node.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000'),
}

model GetNodeResponseBody = {
  node?: {
    createTime?: long(name='CreateTime', description='The time when the node was created. This value is a UNIX timestamp.', example='1700539206000'),
    id?: long(name='Id', description='The ID of the node.', example='860438872620113XXXX'),
    modifyTime?: long(name='ModifyTime', description='The time when the node was last modified. This value is a UNIX timestamp.', example='1700539206000'),
    name?: string(name='Name', description='The name of the node.'),
    owner?: string(name='Owner', description='The owner of the node.', example='196596664824XXXX'),
    projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='10000'),
    spec?: string(name='Spec', description='The FlowSpec field information about this node. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow).'),
  }(name='Node', description='The information about the node.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model GetNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeResponseBody(name='body'),
}

/**
 * @summary Queries the information about a node in DataStudio.
 *
 * @param request GetNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNodeResponse
 */
async function getNodeWithOptions(request: GetNodeRequest, runtime: $RuntimeOptions): GetNodeResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetNode',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a node in DataStudio.
 *
 * @param request GetNodeRequest
 * @return GetNodeResponse
 */
async function getNode(request: GetNodeRequest): GetNodeResponse {
  var runtime = new $RuntimeOptions{};
  return getNodeWithOptions(request, runtime);
}

model GetProjectRequest {
  id?: long(name='Id', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='123456'),
}

model GetProjectResponseBody = {
  project?: {
    aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='The ID of the Alibaba Cloud resource group to which the workspace belongs.', example='rg-acfmzbn7pti3zfa'),
    aliyunResourceTags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='batch'),
        value?: string(name='Value', description='The tag value.', example='blue'),
      }
    ](name='AliyunResourceTags', description='The tags.'),
    description?: string(name='Description', description='The description of the workspace.'),
    devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', description='Indicates whether the development environment is enabled. Valid values:

*   true: The development environment is enabled. In this case, the development environment is isolated from the production environment in the workspace.
*   false: The development environment is disabled. In this case, only the production environment is used in the workspace.', example='true'),
    devRoleDisabled?: boolean(name='DevRoleDisabled', description='Indicates whether the Develop role is disabled. Valid values:

*   false
*   true', example='false'),
    displayName?: string(name='DisplayName', description='The display name of the workspace.'),
    id?: long(name='Id', description='The workspace ID.', example='28477242'),
    name?: string(name='Name', description='The name of the workspace.', example='sora_finance'),
    owner?: string(name='Owner', description='The ID of the Alibaba Cloud account to which the workspace belongs.', example='207947397706614299'),
    paiTaskEnabled?: boolean(name='PaiTaskEnabled', description='Indicates whether scheduling of PAI tasks is enabled. Valid values:

*   true: Scheduling of PAI tasks is enabled. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
*   false: Scheduling of PAI tasks is disabled.', example='true'),
    status?: string(name='Status', description='The status of the workspace. Valid values:

*   Available
*   Initializing
*   InitFailed
*   Forbidden
*   Deleting
*   DeleteFailed
*   Frozen
*   Updating
*   UpdateFailed', example='Available'),
  }(name='Project', description='The information about the workspace.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model GetProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectResponseBody(name='body'),
}

/**
 * @summary Queries the information about a DataWorks workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetProjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetProjectResponse
 */
async function getProjectWithOptions(request: GetProjectRequest, runtime: $RuntimeOptions): GetProjectResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetProject',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a DataWorks workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetProjectRequest
 * @return GetProjectResponse
 */
async function getProject(request: GetProjectRequest): GetProjectResponse {
  var runtime = new $RuntimeOptions{};
  return getProjectWithOptions(request, runtime);
}

model GetProjectMemberRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='88757'),
  userId?: string(name='UserId', description='The ID of the account used by the member. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the IDs of the accounts used by the members in the workspace.

This parameter is required.', example='123422344899'),
}

model GetProjectMemberResponseBody = {
  projectMember?: {
    projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='88757'),
    roles?: [ 
      {
        code?: string(name='Code', description='The code of the role. Valid values:

*   role_project_admin: Workspace Administrator
*   role_project_dev: Develop
*   role_project_dg_admin: Data Governance Administrator
*   role_project_guest: Visitor
*   role_project_security: Security Administrator
*   role_project_deploy: Deploy
*   role_project_owner: Workspace Owner
*   role_project_data_analyst: Data Analyst
*   role_project_pe: O\\\\&M
*   role_project_erd: Model Designer', example='role_project_guest'),
        name?: string(name='Name', description='The name of the role.'),
        type?: string(name='Type', description='The type of the role. Valid values:

*   UserCustom: custom role
*   System: built-in role', example='System'),
      }
    ](name='Roles', description='The roles that are assigned to the member in the workspace.'),
    status?: string(name='Status', description='The status of the member.

*   Normal
*   Forbidden', example='Normal'),
    userId?: string(name='UserId', description='The ID of the account used by the member in the workspace.', example='123422344899'),
  }(name='ProjectMember', description='The details about the member in the workspace.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
}

model GetProjectMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectMemberResponseBody(name='body'),
}

/**
 * @summary Queries the details about a member in a workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetProjectMemberRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetProjectMemberResponse
 */
async function getProjectMemberWithOptions(request: GetProjectMemberRequest, runtime: $RuntimeOptions): GetProjectMemberResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetProjectMember',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the details about a member in a workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetProjectMemberRequest
 * @return GetProjectMemberResponse
 */
async function getProjectMember(request: GetProjectMemberRequest): GetProjectMemberResponse {
  var runtime = new $RuntimeOptions{};
  return getProjectMemberWithOptions(request, runtime);
}

model GetProjectRoleRequest {
  code?: string(name='Code', description='The code of the role in the DataWorks workspace.

Valid values:

*   role_project_admin: workspace administrator
*   role_project_dev: developer
*   role_project_dg_admin: data governance administrator
*   role_project_guest: visitor
*   role_project_security: security administrator
*   role_project_deploy: deployer
*   role_project_owner: workspace owner
*   role_project_data_analyst: data analyst
*   role_project_pe: O\\\\&M engineer
*   role_project_erd: model designer

This parameter is required.', example='role_project_guest'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10002'),
}

model GetProjectRoleResponseBody = {
  projectRole?: {
    code?: string(name='Code', description='The code of the role in the DataWorks workspace.

Valid values:

*   role_project_admin: workspace administrator
*   role_project_dev: developer
*   role_project_dg_admin: data governance administrator
*   role_project_guest: visitor
*   role_project_security: security administrator
*   role_project_deploy: deployer
*   role_project_owner: workspace owner
*   role_project_data_analyst: data analyst
*   role_project_pe: O\\\\&M engineer
*   role_project_erd: model designer', example='role_project_guest'),
    name?: string(name='Name', description='The name of the role in the DataWorks workspace.'),
    projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='10002'),
    type?: string(name='Type', description='The type of the role in the DataWorks workspace.

Valid values:

*   UserCustom: user-defined role
*   System: system role', example='System'),
  }(name='ProjectRole', description='The role in the DataWorks workspace.'),
  requestId?: string(name='RequestId', description='The request ID.', example='82F28E60-CF48-5EDF-AB25-D806847B97D1'),
}

model GetProjectRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectRoleResponseBody(name='body'),
}

/**
 * @summary Queries the information about a role in a DataWorks workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetProjectRoleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetProjectRoleResponse
 */
async function getProjectRoleWithOptions(request: GetProjectRoleRequest, runtime: $RuntimeOptions): GetProjectRoleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.code)) {
    query['Code'] = request.code;
  }
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetProjectRole',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a role in a DataWorks workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetProjectRoleRequest
 * @return GetProjectRoleResponse
 */
async function getProjectRole(request: GetProjectRoleRequest): GetProjectRoleResponse {
  var runtime = new $RuntimeOptions{};
  return getProjectRoleWithOptions(request, runtime);
}

model GetResourceRequest {
  id?: long(name='Id', description='The ID of the file resource.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000'),
}

model GetResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='E871F6C0-2EFF-5790-A00D-C57543EEXXXX'),
  resource?: {
    createTime?: long(name='CreateTime', description='The time when the file resource was created. This value is a UNIX timestamp.', example='1700539206000'),
    id?: long(name='Id', description='The ID of the file resource.', example='860438872620113XXXX'),
    modifyTime?: long(name='ModifyTime', description='The time when the file resource was last modified. This value is a UNIX timestamp.', example='1700539206000'),
    name?: string(name='Name', description='The name of the file resource.'),
    owner?: string(name='Owner', description='The owner of the file resource.', example='110755000425XXXX'),
    projectId?: long(name='ProjectId', description='The ID of the workspace to which the file resource belongs.', example='10000'),
    spec?: string(name='Spec', description='The FlowSpec field information about the file resource. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow).'),
  }(name='Resource', description='The information about the file resource.'),
}

model GetResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceResponseBody(name='body'),
}

/**
 * @summary Queries the information about a file resource.
 *
 * @param request GetResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetResourceResponse
 */
async function getResourceWithOptions(request: GetResourceRequest, runtime: $RuntimeOptions): GetResourceResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetResource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a file resource.
 *
 * @param request GetResourceRequest
 * @return GetResourceResponse
 */
async function getResource(request: GetResourceRequest): GetResourceResponse {
  var runtime = new $RuntimeOptions{};
  return getResourceWithOptions(request, runtime);
}

model GetResourceGroupRequest {
  id?: string(name='Id', description='This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
}

model GetResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  resourceGroup?: {
    aliyunResourceGroupId?: string(name='AliyunResourceGroupId', example='rg-aek2kqofrgXXXXX'),
    aliyunResourceTags?: [ 
      {
        key?: string(name='Key', example='key'),
        value?: string(name='Value', example='value'),
      }
    ](name='AliyunResourceTags'),
    createTime?: long(name='CreateTime', example='1727055811000'),
    createUser?: string(name='CreateUser', example='11075500042XXXXX'),
    defaultVpcId?: string(name='DefaultVpcId', example='vpc-m2et4f3oc8msfbccXXXXX'),
    defaultVswitchId?: string(name='DefaultVswitchId', example='vsw-uf8usrhs7hjd9amsXXXXX'),
    id?: string(name='Id', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
    name?: string(name='Name', example='common_resource_group'),
    orderInstanceId?: string(name='OrderInstanceId', example='c442b330-3b10-4584-959e-736e4edXXXXX'),
    paymentType?: string(name='PaymentType', example='PrePaid'),
    remark?: string(name='Remark', example='创建用于普通任务的通用资源组'),
    resourceGroupType?: string(name='ResourceGroupType', description='The type the resource group. Valid values:

*   CommonV2: serverless resource group
*   ExclusiveDataIntegration: exclusive resource group for Data Integration
*   ExclusiveScheduler: exclusive resource group for scheduling
*   ExclusiveDataService: exclusive resource group for DataService Studio', example='CommonV2'),
    spec?: {
      amount?: int32(name='Amount', description='The number of resources in the resource group.', example='1'),
      standard?: string(name='Standard', example='2CU'),
    }(name='Spec', description='The specifications of the resource group.'),
    status?: string(name='Status', description='The status of the resource group. Valid values:

*   Normal: The resource group is running or in use.
*   Stop: The resource group is expired.
*   Deleted: The resource group is released or destroyed.
*   Creating: The resource group is being started.
*   CreateFailed: The resource group fails to be started.
*   Updating: The resource group is being scaled in or out, or the configurations of the resource group are being changed.
*   UpdateFailed: The resource group fails to be scaled out or upgraded.
*   Deleting: The resource group is being released or destroyed.
*   DeleteFailed: The resource group fails to be released or destroyed.
*   Timeout: The operations that are performed on the resource group time out.', example='Normal'),
  }(name='ResourceGroup', description='The details about the resource group.'),
  success?: boolean(name='Success', example='true'),
}

model GetResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceGroupResponseBody(name='body'),
}

/**
 * @summary 根据id获取指定资源组。
 *
 * @description You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 *
 * @param request GetResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetResourceGroupResponse
 */
async function getResourceGroupWithOptions(request: GetResourceGroupRequest, runtime: $RuntimeOptions): GetResourceGroupResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetResourceGroup',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 根据id获取指定资源组。
 *
 * @description You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 *
 * @param request GetResourceGroupRequest
 * @return GetResourceGroupResponse
 */
async function getResourceGroup(request: GetResourceGroupRequest): GetResourceGroupResponse {
  var runtime = new $RuntimeOptions{};
  return getResourceGroupWithOptions(request, runtime);
}

model GetRouteRequest {
  id?: long(name='Id', description='This parameter is required.', example='1000'),
}

model GetRouteResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  route?: {
    createTime?: long(name='CreateTime', example='1727055811000'),
    destinationCidr?: string(name='DestinationCidr', example='192.168.0.0/16'),
    id?: long(name='Id', example='1000'),
    networkId?: long(name='NetworkId', description='The network ID.', example='1000'),
    resourceGroupId?: string(name='ResourceGroupId', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
    resourceId?: string(name='ResourceId', example='ns-679XXXXX'),
  }(name='Route', description='The information about the route.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRouteResponseBody(name='body'),
}

/**
 * @summary Queries the information about a route based on its ID.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetRouteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRouteResponse
 */
async function getRouteWithOptions(request: GetRouteRequest, runtime: $RuntimeOptions): GetRouteResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetRoute',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a route based on its ID.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetRouteRequest
 * @return GetRouteResponse
 */
async function getRoute(request: GetRouteRequest): GetRouteResponse {
  var runtime = new $RuntimeOptions{};
  return getRouteWithOptions(request, runtime);
}

model GetTaskRequest {
  id?: long(name='Id', description='The task ID.

This parameter is required.', example='1234'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
}

model GetTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  task?: {
    baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
    createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
    createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
    dataSource?: {
      name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
    }(name='DataSource', description='The information about the associated data source.'),
    dependencies?: [ 
      {
        type?: string(name='Type', description='The dependency type.

Valid values:

*   CrossCycleDependsOnChildren: cross-cycle dependency on the level-1 descendant nodes of a node
*   CrossCycleDependsOnSelf: cross-cycle dependency on the current node
*   CrossCycleDependsOnOtherNode: cross-cycle dependency on other nodes
*   Normal: same-cycle dependency', example='Normal'),
        upstreamOutput?: string(name='UpstreamOutput', description='上游任务的输出标识符。（`同周期依赖`返回此字段）', example='pre.odps_sql_demo_0'),
        upstreamTaskId?: string(name='UpstreamTaskId', description='上游任务的Id。（`跨周期依赖其他节点`依赖返回此字段，其他跨周期依赖类型不返回）', example='1234'),
      }
    ](name='Dependencies', description='The dependency information.'),
    description?: string(name='Description', description='The description of the task.', example='test'),
    envType?: string(name='EnvType'),
    id?: long(name='Id', description='The instance ID.', example='1234'),
    inputs?: {
      variables?: [ 
        {
          name?: string(name='Name', description='The name of the variable.', example='key1'),
          type?: string(name='Type', description='The type.

Valid values:

*   Constant: constant
*   PassThrough: parameter pass-through
*   System: variable
*   NodeOutput: script output', example='Constant'),
          value?: string(name='Value', description='The value of the variable.', example='Value1'),
        }
      ](name='Variables', description='The variables.'),
    }(name='Inputs', description='The input information.', nullable=false),
    instanceMode?: string(name='InstanceMode', description='实例生成模式。

T+1（第二天生成）

Immediately（立即生成）', example='T+1'),
    modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
    modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
    name?: string(name='Name', description='The name of the task.'),
    outputs?: {
      taskOutputs?: [ 
        {
          output?: string(name='Output', description='The identifier of the output.', example='pre.odps_sql_demo_0'),
        }
      ](name='TaskOutputs', description='The task outputs.'),
      variables?: [ 
        {
          name?: string(name='Name', description='The name of the variable.', example='key1'),
          type?: string(name='Type', description='The type.

Valid values:

*   Constant: constant
*   PassThrough: parameter pass-through
*   System: system variable
*   NodeOutput: script output', example='Constant'),
          value?: string(name='Value', description='The value of the variable.', example='value1'),
        }
      ](name='Variables', description='The variables.'),
    }(name='Outputs', description='The output information.'),
    owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
    priority?: int32(name='Priority', description='The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
    projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod', deprecated=true),
    projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
    rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: seconds.', example='60'),
    rerunMode?: string(name='RerunMode', description='The rerun mode.

Valid values:

*   AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.
*   AllAllowed: The task can be rerun regardless of whether it is successfully run or fails to run.', example='AllAllowed'),
    rerunTimes?: int32(name='RerunTimes', description='The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.', example='3'),
    runtimeResource?: {
      cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
      image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
    }(name='RuntimeResource', description='The configurations of the runtime environment, such as the resource group information.'),
    script?: {
      content?: string(name='Content', description='The script content.', example='echo "helloWorld"'),
      parameters?: string(name='Parameters', description='The script parameters.', example='para1=$bizdate'),
    }(name='Script', description='The script information.'),
    subTasks?: {
      subTasks?: [ 
        {
          baselineId?: long(name='BaselineId', description='The baseline ID.'),
          createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
          createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
          dataSource?: {
            name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
          }(name='DataSource', description='The information about the associated data source.'),
          description?: string(name='Description', description='The description of the task.', example='test'),
          envType?: string(name='EnvType'),
          id?: long(name='Id', description='The task ID.', example='1234'),
          modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
          modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
          name?: string(name='Name', description='The name of the task.'),
          owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
          priority?: int32(name='Priority', description='The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
          projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod', deprecated=true),
          projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
          rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: seconds.', example='180'),
          rerunMode?: string(name='RerunMode', description='The rerun mode.

Valid values:

*   AllDenied: The task cannot be rerun regardless of whether it is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.
*   AllAllowed: The task can be rerun regardless of whether it is successfully run or fails to run.', example='AllAllowed'),
          rerunTimes?: int32(name='RerunTimes', description='The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.', example='3'),
          runtimeResource?: {
            cu?: string(name='Cu', description='The default number of CUs configured for task running.', example='0.25'),
            image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
            resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
          }(name='RuntimeResource', description='The runtime environment configuration of the task, such as the resource group.'),
          timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='3600'),
          trigger?: {
            cron?: string(name='Cron', description='The CRON expression of the task. This parameter takes effect only if the Type parameter is set to Scheduler.', example='00 00 00 * * ?'),
            endTime?: string(name='EndTime', description='The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='9999-01-01 00:00:00'),
            recurrence?: string(name='Recurrence', description='The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler.

Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
            startTime?: string(name='StartTime', description='The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='1970-01-01 00:00:00'),
            type?: string(name='Type', description='The trigger type.

Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
          }(name='Trigger', description='The method to trigger task scheduling.'),
          type?: string(name='Type', description='The type of the task.', example='ODPS_SQL'),
          workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the task belongs.', example='1234'),
        }
      ](name='SubTasks', description='The subtasks.'),
      type?: string(name='Type', description='The type of the subtask.

Valid values:

*   DoWhile: do-while node
*   Combined: node group
*   ForEach: for-each node', example='Combined'),
    }(name='SubTasks', description='The configurations of the subtasks, such as a do-while node.'),
    tags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='key1'),
        value?: string(name='Value', description='The tag value.', example='value1'),
      }
    ](name='Tags', description='The tags.'),
    timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='3600'),
    trigger?: {
      cron?: string(name='Cron', description='The CRON expression of the task. This parameter takes effect only if the Type parameter is set to Scheduler.', example='00 00 00 * * ?'),
      endTime?: string(name='EndTime', description='The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='9999-01-01 00:00:00'),
      recurrence?: string(name='Recurrence', description='The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler.

Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
      startTime?: string(name='StartTime', description='The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='1970-01-01 00:00:00'),
      type?: string(name='Type', description='The trigger type.

Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
    }(name='Trigger', description='The method to trigger task scheduling.'),
    type?: string(name='Type', description='The type of the task.', example='ODPS_SQL'),
    workflowId?: long(name='WorkflowId', description='The workflow ID.', example='1234'),
  }(name='Task', description='The details of the task.'),
}

model GetTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskResponseBody(name='body'),
}

/**
 * @summary Queries the information about a task.
 *
 * @param request GetTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTaskResponse
 */
async function getTaskWithOptions(request: GetTaskRequest, runtime: $RuntimeOptions): GetTaskResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetTask',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a task.
 *
 * @param request GetTaskRequest
 * @return GetTaskResponse
 */
async function getTask(request: GetTaskRequest): GetTaskResponse {
  var runtime = new $RuntimeOptions{};
  return getTaskWithOptions(request, runtime);
}

model GetTaskInstanceRequest {
  id?: long(name='Id', description='The instance ID.

This parameter is required.', example='1234'),
}

model GetTaskInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  taskInstance?: {
    baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
    bizdate?: long(name='Bizdate', description='The data timestamp.', example='1710239005403'),
    createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
    createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
    dataSource?: {
      name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
    }(name='DataSource', description='The information about the associated data source.'),
    description?: string(name='Description', description='The description.', example='test'),
    finishedTime?: long(name='FinishedTime', description='The time when the instance finished running.', example='1710239005403'),
    id?: long(name='Id', description='The instance ID.', example='1234'),
    inputs?: {
      variables?: [ 
        {
          name?: string(name='Name', description='The name of the variable.', example='Key1'),
          type?: string(name='Type', description='The type. Valid values:

*   Constant: constant
*   PassThrough: node output
*   System: variable
*   NodeOutput: script output', example='Constant'),
          value?: string(name='Value', description='The value of the variable.', example='Value1'),
        }
      ](name='Variables', description='The variables.'),
    }(name='Inputs', description='The input information.'),
    modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
    modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
    outputs?: {
      taskOutputs?: [ 
        {
          output?: string(name='Output', description='The output identifier.', example='pre.odps_sql_demo_0'),
        }
      ](name='TaskOutputs', description='The task outputs.'),
      variables?: [ 
        {
          name?: string(name='Name', description='The name of the variable.', example='key1'),
          type?: string(name='Type', description='The type. Valid values:

*   Constant: constant
*   PassThrough: node output
*   System: variable
*   NodeOutput: script output', example='Constant'),
          value?: string(name='Value', description='The value of the variable.', example='value1'),
        }
      ](name='Variables', description='The variables.'),
    }(name='Outputs', description='The output information.'),
    owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
    periodNumber?: int32(name='PeriodNumber', description='The sequence number of the cycle. This parameter indicates the cycle of the task instance on the current day.', example='1'),
    priority?: int32(name='Priority', description='The task priority. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
    projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
    projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
    rerunMode?: string(name='RerunMode', description='The rerun mode. Valid values:

*   AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
*   AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.', example='AllAllowed'),
    runNumber?: int32(name='RunNumber', description='The number of times the instance is run. By default, the value starts from 1.', example='1'),
    runtime?: {
      gateway?: string(name='Gateway', description='The host for running.', example='cn-shanghai.1.2'),
      processId?: string(name='ProcessId', description='The instance run ID.', example='T3_123'),
    }(name='Runtime', description='The runtime information about the instance.'),
    runtimeResource?: {
      cu?: string(name='Cu', description='The default number of CUs configured for task running.', example='0.25'),
      image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
    }(name='RuntimeResource', description='The information about the resource group with which the instance is associated.'),
    script?: {
      content?: string(name='Content', description='The script content.', example='echo "helloWorld"'),
      parameters?: string(name='Parameters', description='The script parameters.', example='para1=$bizdate'),
    }(name='Script', description='The script information.'),
    startedTime?: long(name='StartedTime', description='The time when the instance started to run.', example='1710239005403'),
    status?: string(name='Status', description='The status of the instance. Valid values:

*   NotRun: The instance is not run.
*   Running: The instance is running.
*   WaitTime: The instance is waiting for the scheduling time to arrive.
*   CheckingCondition: Branch conditions are being checked for the instance.
*   WaitResource: The instance is waiting for resources.
*   Failure: The instance fails to be run.
*   Success: The instance is successfully run.
*   Checking: Data quality is being checked for the instance.', example='Success'),
    tags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='key1'),
        value?: string(name='Value', description='The tag value.', example='value1'),
      }
    ](name='Tags', description='The tags of the task.'),
    taskId?: long(name='TaskId', description='The ID of the task for which the instance is generated.', example='1234'),
    taskName?: string(name='TaskName', description='The name of the task for which the instance is generated.'),
    taskType?: string(name='TaskType', description='The type of the task for which the instance is generated.', example='ODPS_SQL'),
    timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.

Note: The value of this parameter is rounded up by hour.', example='1'),
    triggerRecurrence?: string(name='TriggerRecurrence', description='The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler. Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
    triggerTime?: long(name='TriggerTime', description='The scheduling time.', example='1710239005403'),
    triggerType?: string(name='TriggerType', description='The method to trigger instance scheduling. The value of the Trigger.Type parameter in the response of the GetTask operation is used. Valid values:

*   Scheduler
*   Manual', example='Scheduler'),
    workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs.', example='1234'),
    workflowInstanceId?: long(name='WorkflowInstanceId', description='The workflow instance ID.', example='1234'),
    workflowInstanceType?: string(name='WorkflowInstanceType', description='The type of the workflow instance. Valid values:

*   SmokeTest
*   SupplementData
*   Manual
*   ManualWorkflow
*   Normal
*   ManualFlow', example='Normal'),
    workflowName?: string(name='WorkflowName', description='The name of the workflow to which the instance belongs.'),
  }(name='TaskInstance', description='The details of the instance.'),
}

model GetTaskInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskInstanceResponseBody(name='body'),
}

/**
 * @summary Queries the information about an instance.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetTaskInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTaskInstanceResponse
 */
async function getTaskInstanceWithOptions(request: GetTaskInstanceRequest, runtime: $RuntimeOptions): GetTaskInstanceResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetTaskInstance',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about an instance.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetTaskInstanceRequest
 * @return GetTaskInstanceResponse
 */
async function getTaskInstance(request: GetTaskInstanceRequest): GetTaskInstanceResponse {
  var runtime = new $RuntimeOptions{};
  return getTaskInstanceWithOptions(request, runtime);
}

model GetTaskInstanceLogRequest {
  id?: long(name='Id', description='The instance ID.

This parameter is required.', example='1234'),
  runNumber?: int32(name='RunNumber', description='The sequence number of an instance run. Minimum value: 1. By default, the latest run is used.', example='1'),
}

model GetTaskInstanceLogResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  taskInstanceLog?: string(name='TaskInstanceLog', description='The run log of the instance.', example='This is running log'),
}

model GetTaskInstanceLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskInstanceLogResponseBody(name='body'),
}

/**
 * @summary Queries the run log generated during a specific run of an instance.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetTaskInstanceLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTaskInstanceLogResponse
 */
async function getTaskInstanceLogWithOptions(request: GetTaskInstanceLogRequest, runtime: $RuntimeOptions): GetTaskInstanceLogResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetTaskInstanceLog',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the run log generated during a specific run of an instance.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetTaskInstanceLogRequest
 * @return GetTaskInstanceLogResponse
 */
async function getTaskInstanceLog(request: GetTaskInstanceLogRequest): GetTaskInstanceLogResponse {
  var runtime = new $RuntimeOptions{};
  return getTaskInstanceLogWithOptions(request, runtime);
}

model GetWorkflowRequest {
  envType?: string(name='EnvType', example='Prod'),
  id?: long(name='Id', description='This parameter is required.', example='1234'),
}

model GetWorkflowResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  workflow?: {
    clientUniqueCode?: string(name='ClientUniqueCode', example='Workflow_0bc5213917368545132902xxxxxxxx'),
    createTime?: long(name='CreateTime', example='1710239005403'),
    createUser?: string(name='CreateUser', example='1000'),
    dependencies?: [ 
      {
        type?: string(name='Type', example='Normal'),
        upstreamOutput?: string(name='UpstreamOutput', example='pre.odps_sql_demo_0'),
        upstreamTaskId?: long(name='UpstreamTaskId', example='1234'),
      }
    ](name='Dependencies'),
    description?: string(name='Description'),
    envType?: string(name='EnvType', example='Prod'),
    id?: long(name='Id', example='1234'),
    modifyTime?: long(name='ModifyTime', example='1710239005403'),
    modifyUser?: string(name='ModifyUser', example='1000'),
    name?: string(name='Name'),
    outputs?: {
      taskOutputs?: [ 
        {
          output?: string(name='Output', example='pre.odps_sql_demo_0'),
        }
      ](name='TaskOutputs'),
    }(name='Outputs'),
    owner?: string(name='Owner', example='1000'),
    parameters?: string(name='Parameters', example='para1=$bizdate para2=$[yyyymmdd]'),
    projectId?: long(name='ProjectId', example='100'),
    tags?: [ 
      {
        key?: string(name='Key', example='key1'),
        value?: string(name='Value', example='value1'),
      }
    ](name='Tags'),
    tasks?: [ 
      {
        baselineId?: long(name='BaselineId', example='1234'),
        clientUniqueCode?: string(name='ClientUniqueCode', example='Task_0bc5213917368545132902xxxxxxxx'),
        createTime?: long(name='CreateTime', example='1710239005403'),
        createUser?: string(name='CreateUser', example='1000'),
        dataSource?: {
          name?: string(name='Name', example='mysql_test'),
        }(name='DataSource'),
        description?: string(name='Description', example='Test'),
        envType?: string(name='EnvType', example='Prod'),
        id?: long(name='Id', example='1234'),
        modifyTime?: long(name='ModifyTime', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', example='1000'),
        name?: string(name='Name'),
        owner?: string(name='Owner', example='1000'),
        priority?: int32(name='Priority', example='1'),
        projectId?: long(name='ProjectId', example='100'),
        rerunInterval?: int32(name='RerunInterval', example='60'),
        rerunMode?: string(name='RerunMode', example='AllAllowed'),
        rerunTimes?: int32(name='RerunTimes', example='3'),
        runtimeResource?: {
          cu?: string(name='Cu', example='0.25'),
          image?: string(name='Image', example='i-xxxxxx'),
          resourceGroupId?: string(name='ResourceGroupId', example='S_res_group_524258031846018_1684XXXXXXXXX'),
        }(name='RuntimeResource'),
        timeout?: int32(name='Timeout', example='3600'),
        triggerRecurrence?: string(name='TriggerRecurrence', example='Normal'),
        type?: string(name='Type', example='ODPS_SQL'),
        workflowId?: long(name='WorkflowId', example='1234'),
      }
    ](name='Tasks'),
    trigger?: {
      cron?: string(name='Cron', example='00 00 00 * * ?'),
      endTime?: string(name='EndTime', example='1970-01-01 00:00:00'),
      recurrence?: string(name='Recurrence', example='Normal'),
      startTime?: string(name='StartTime', example='1970-01-01 00:00:00'),
      type?: string(name='Type', example='Scheduler'),
    }(name='Trigger'),
  }(name='Workflow'),
}

model GetWorkflowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkflowResponseBody(name='body'),
}

/**
 * @param request GetWorkflowRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWorkflowResponse
 */
async function getWorkflowWithOptions(request: GetWorkflowRequest, runtime: $RuntimeOptions): GetWorkflowResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetWorkflow',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @param request GetWorkflowRequest
 * @return GetWorkflowResponse
 */
async function getWorkflow(request: GetWorkflowRequest): GetWorkflowResponse {
  var runtime = new $RuntimeOptions{};
  return getWorkflowWithOptions(request, runtime);
}

model GetWorkflowDefinitionRequest {
  id?: long(name='Id', description='The ID of the workflow.

This parameter is required.', example='860438872620113XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.', example='10000'),
}

model GetWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F2BDD628-8A21-5BD1-B930-1A2D5989XXXX'),
  workflowDefinition?: {
    createTime?: long(name='CreateTime', description='The time when the workflow was created. This value is a UNIX timestamp.', example='1708481905000'),
    id?: long(name='Id', description='The ID of the workflow.', example='463497880880954XXXX'),
    modifyTime?: long(name='ModifyTime', description='The time when the workflow was last modified. This value is a UNIX timestamp.', example='1708481905000'),
    name?: string(name='Name', description='The name of the workflow.'),
    owner?: string(name='Owner', description='The owner of the workflow.', example='110755000425XXXX'),
    projectId?: long(name='ProjectId', description='The ID of the workspace to which the workflow belongs.', example='307XXX'),
    spec?: string(name='Spec', description='The FlowSpec field information about the workflow. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow/).'),
  }(name='WorkflowDefinition', description='The information about the workflow.'),
}

model GetWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary Queries the information about a workflow.
 *
 * @param request GetWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWorkflowDefinitionResponse
 */
async function getWorkflowDefinitionWithOptions(request: GetWorkflowDefinitionRequest, runtime: $RuntimeOptions): GetWorkflowDefinitionResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a workflow.
 *
 * @param request GetWorkflowDefinitionRequest
 * @return GetWorkflowDefinitionResponse
 */
async function getWorkflowDefinition(request: GetWorkflowDefinitionRequest): GetWorkflowDefinitionResponse {
  var runtime = new $RuntimeOptions{};
  return getWorkflowDefinitionWithOptions(request, runtime);
}

model GetWorkflowInstanceRequest {
  id?: long(name='Id', description='The ID of the workflow instance.

This parameter is required.', example='1234'),
}

model GetWorkflowInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  workflowInstance?: {
    bizDate?: long(name='BizDate', example='1710239005403'),
    createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
    createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
    envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
    finishedTime?: long(name='FinishedTime', description='The time when the instance finished running.', example='1710239005403'),
    id?: long(name='Id', description='The ID of the workflow instance.', example='1234'),
    modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
    modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
    name?: string(name='Name', description='The name of the workflow instance.', example='WorkInstance1'),
    projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
    startedTime?: long(name='StartedTime', description='The time when the instance started to run.', example='1710239005403'),
    status?: string(name='Status', description='The status of the workflow instance. Valid values:

*   NotRun: The instance is not run.
*   Running: The instance is running.
*   WaitTime: The instance is waiting for the scheduling time to arrive.
*   CheckingCondition: Branch conditions are being checked for the instance.
*   WaitResource: The instance is waiting for resources.
*   Failure: The instance fails to be run.
*   Success: The instance is successfully run.
*   Checking: Data quality is being checked for the instance.', example='Success'),
    type?: string(name='Type', description='工作流类型', example='Normal'),
    workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs.', example='1234'),
  }(name='WorkflowInstance', description='The information about the workflow instance.'),
}

model GetWorkflowInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkflowInstanceResponseBody(name='body'),
}

/**
 * @summary Queries the information about a workflow instance.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetWorkflowInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWorkflowInstanceResponse
 */
async function getWorkflowInstanceWithOptions(request: GetWorkflowInstanceRequest, runtime: $RuntimeOptions): GetWorkflowInstanceResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetWorkflowInstance',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about a workflow instance.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GetWorkflowInstanceRequest
 * @return GetWorkflowInstanceResponse
 */
async function getWorkflowInstance(request: GetWorkflowInstanceRequest): GetWorkflowInstanceResponse {
  var runtime = new $RuntimeOptions{};
  return getWorkflowInstanceWithOptions(request, runtime);
}

model GrantMemberProjectRolesRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='105149'),
  roleCodes?: [ string ](name='RoleCodes', description='The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.

You must configure this parameter to specify the roles that you want to assign to members in the workspace.

This parameter is required.'),
  userId?: string(name='UserId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the IDs of the accounts used by the members in the workspace.

This parameter is required.', example='123422344899'),
}

model GrantMemberProjectRolesShrinkRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='105149'),
  roleCodesShrink?: string(name='RoleCodes', description='The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.

You must configure this parameter to specify the roles that you want to assign to members in the workspace.

This parameter is required.'),
  userId?: string(name='UserId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the IDs of the accounts used by the members in the workspace.

This parameter is required.', example='123422344899'),
}

model GrantMemberProjectRolesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='2d9ced66-38ef-4923-baf6-391dd3a7e656'),
}

model GrantMemberProjectRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantMemberProjectRolesResponseBody(name='body'),
}

/**
 * @summary Assigns roles to members in a workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq GrantMemberProjectRolesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GrantMemberProjectRolesResponse
 */
async function grantMemberProjectRolesWithOptions(tmpReq: GrantMemberProjectRolesRequest, runtime: $RuntimeOptions): GrantMemberProjectRolesResponse {
  tmpReq.validate();
  var request = new GrantMemberProjectRolesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.roleCodes)) {
    request.roleCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roleCodes, 'RoleCodes', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.roleCodesShrink)) {
    body['RoleCodes'] = request.roleCodesShrink;
  }
  if (!$isNull(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GrantMemberProjectRoles',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Assigns roles to members in a workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request GrantMemberProjectRolesRequest
 * @return GrantMemberProjectRolesResponse
 */
async function grantMemberProjectRoles(request: GrantMemberProjectRolesRequest): GrantMemberProjectRolesResponse {
  var runtime = new $RuntimeOptions{};
  return grantMemberProjectRolesWithOptions(request, runtime);
}

model ImportWorkflowDefinitionRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='123456'),
  spec?: string(name='Spec', description='The FlowSpec field information about the workflow. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow/).

This parameter is required.'),
}

model ImportWorkflowDefinitionResponseBody = {
  asyncJob?: {
    completed?: boolean(name='Completed', description='Indicates whether the asynchronous task is complete.', example='false'),
    createTime?: long(name='CreateTime', description='The time when the asynchronous task was created. This value is a UNIX timestamp.', example='1706581425000'),
    error?: string(name='Error', description='The error message returned if the asynchronous task fails.', example='target folder already exists: XXXX'),
    id?: string(name='Id', description='The ID of the asynchronous task.', example='1234567691239009XXXX'),
    progress?: int32(name='Progress', description='The progress of the asynchronous task. Valid values: 0 to 100.', example='0'),
    response?: string(name='Response', description='The response.

>  The workflow ID is returned.', example='632647691239009XXXX'),
    status?: string(name='Status', description='The status of the asynchronous task.

Valid values:

*   Running: The asynchronous task is running.
*   Success: The asynchronous task is complete.
*   Fail: The asynchronous task fails.
*   Cancel: The asynchronous task is canceled.', example='Running'),
    type?: string(name='Type', description='The type of the asynchronous task.

Valid values:

*   Create: The asynchronous task is used to create an object.
*   Cancel: The asynchronous task is used to cancel an operation.', example='Create'),
  }(name='AsyncJob', description='The status information of the asynchronous task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7C352CB7-CD88-50CF-9D0D-E81BDF020E7F'),
}

model ImportWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary Imports a workflow and its child nodes that are specified by the FlowSpec field to DataStudio.
 *
 * @description > You cannot use this API operation to import multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system imports only the first specified workflow.
 * >  ImportWorkflowDefinition is an asynchronous operation. After you send a request, an asynchronous task is generated, and the system returns the ID of the asynchronous task. You can call the GetJobStatus operation to query the status of the asynchronous task.
 *
 * @param request ImportWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ImportWorkflowDefinitionResponse
 */
async function importWorkflowDefinitionWithOptions(request: ImportWorkflowDefinitionRequest, runtime: $RuntimeOptions): ImportWorkflowDefinitionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ImportWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Imports a workflow and its child nodes that are specified by the FlowSpec field to DataStudio.
 *
 * @description > You cannot use this API operation to import multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system imports only the first specified workflow.
 * >  ImportWorkflowDefinition is an asynchronous operation. After you send a request, an asynchronous task is generated, and the system returns the ID of the asynchronous task. You can call the GetJobStatus operation to query the status of the asynchronous task.
 *
 * @param request ImportWorkflowDefinitionRequest
 * @return ImportWorkflowDefinitionResponse
 */
async function importWorkflowDefinition(request: ImportWorkflowDefinitionRequest): ImportWorkflowDefinitionResponse {
  var runtime = new $RuntimeOptions{};
  return importWorkflowDefinitionWithOptions(request, runtime);
}

model ListAlertRulesRequest {
  name?: string(name='Name', description='The name of the rule.', example='error_rule'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the owner of the rule.', example='1933790683****'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1.

This parameter is required.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Maximum value: 100.

This parameter is required.', example='10'),
  receiver?: string(name='Receiver', description='The ID of the Alibaba Cloud account used by the alert recipient.', example='1933790683****'),
  taskIds?: [ long ](name='TaskIds', description='The IDs of the scheduling tasks.'),
  types?: [ string ](name='Types', description='The alert triggering condition.'),
}

model ListAlertRulesShrinkRequest {
  name?: string(name='Name', description='The name of the rule.', example='error_rule'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the owner of the rule.', example='1933790683****'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1.

This parameter is required.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Maximum value: 100.

This parameter is required.', example='10'),
  receiver?: string(name='Receiver', description='The ID of the Alibaba Cloud account used by the alert recipient.', example='1933790683****'),
  taskIdsShrink?: string(name='TaskIds', description='The IDs of the scheduling tasks.'),
  typesShrink?: string(name='Types', description='The alert triggering condition.'),
}

model ListAlertRulesResponseBody = {
  pagingInfo?: {
    alertRules?: [ 
      {
        enabled?: boolean(name='Enabled', description='Indicates whether the rule is enabled.', example='true'),
        id?: long(name='Id', description='The rule ID.', example='22125'),
        name?: string(name='Name', description='The name of the rule.', example='error_test'),
        owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the owner of the rule.', example='1933790683****'),
        triggerCondition?: {
          extension?: {
            cycleUnfinished?: {
              cycleAndTime?: [ 
                {
                  cycleId?: int32(name='CycleId', description='The ID of the scheduling cycle of the instance. Valid values: [1,288].', example='1'),
                  time?: string(name='Time', description='The latest completion time of the instance within the scheduling cycle. The time is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='01:00'),
                }
              ](name='CycleAndTime', description='The configurations of the scheduling cycle and timeout period of the instance.'),
            }(name='CycleUnfinished', description='The configuration for an alert of the CycleUnfinished type.'),
            error?: {
              autoRerunAlertEnabled?: boolean(name='AutoRerunAlertEnabled'),
              streamTaskIds?: [ long ](name='StreamTaskIds', description='The IDs of the real-time computing tasks. This parameter is required when you monitor real-time computing tasks.'),
            }(name='Error', description='The configuration for an alert of the Error type.'),
            instanceErrorCount?: {
              count?: int32(name='Count', description='The maximum number of instances on which an error occurs. Valid values: [1,10000].', example='10'),
            }(name='InstanceErrorCount', description='The configuration for an alert of the InstanceErrorCount type.'),
            instanceErrorPercentage?: {
              percentage?: int32(name='Percentage', description='The maximum percentage of instances on which an error occurs in the workspace to the total number of instances. Valid values: [1-100].', example='10'),
            }(name='InstanceErrorPercentage', description='The configuration for an alert of the InstanceErrorPercentage type.'),
            instanceTransferFluctuate?: {
              percentage?: int32(name='Percentage', description='The maximum percentage of fluctuation in the number of auto triggered node instances that are generated in your workspace. Valid values: [1-100].', example='10'),
              trend?: string(name='Trend', description='The way in which the number of auto triggered node instances that are generated in your workspace fluctuates. Valid values:

*   abs: the absolute value. The number of instances increases or decreases.
*   increase: The number of instances increases.
*   decrease: The number of instances decreases.', example='abs'),
            }(name='InstanceTransferFluctuate', description='The configuration for an alert of the InstanceTransferFluctuate type.'),
            timeout?: {
              timeoutInMinutes?: int32(name='TimeoutInMinutes', description='The timeout period. Unit: minutes.', example='10'),
            }(name='Timeout', description='The configuration for an alert of the Timeout type.'),
            unFinished?: {
              unFinishedTime?: string(name='UnFinishedTime', description='The latest completion time of the instance. The period is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='12:00'),
            }(name='UnFinished', description='The configuration for an alert of the UnFinished type.'),
          }(name='Extension', description='The extended information about the rule. This parameter is required for specific types of alerts.'),
          target?: {
            allowTasks?: [ long ](name='AllowTasks', description='The nodes that are not to be monitored.'),
            ids?: [ long ](name='Ids', description='The IDs of monitored objects.'),
            type?: string(name='Type', description='The type of the monitored objects. Valid values:

*   Task: node
*   Baseline: baseline
*   Projec: workspace
*   BizProcess: workflow', example='Task'),
          }(name='Target', description='The monitored objects.'),
          type?: string(name='Type', description='The alert type. Valid values:

*   Finished: An instance is successfully run.
*   UnFinished: An instance does not finish running before a specified point in time.
*   Error: An error occurs on an instance.
*   CycleUnfinished: An instance does not finish running as expected within a specific cycle.
*   Timeout: An instance times out.
*   InstanceTransferComplete: An instance is generated by the auto triggered node.
*   InstanceTransferFluctuate: The number of generated instances fluctuates.
*   ExhaustedError: An error persists after an instance is automatically rerun.
*   InstanceKeyword: An instance with errors contains specified keywords.
*   InstanceErrorCount: The number of instances on which an error occurs reaches a specified threshold.
*   InstanceErrorPercentage: The proportion of instances on which an error occurs in the workspace to the total number of instances reaches a specified threshold.
*   ResourceGroupPercentage: The usage rate of the resource group reaches a specified threshold.
*   ResourceGroupWaitCount: The number of instances that are waiting for resources in the resource group reaches a specified threshold.', example='Error'),
        }(name='TriggerCondition', description='The alert triggering condition.'),
      }
    ](name='AlertRules', description='The rules.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='5'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='A6C6B486-E3A2-5D52-9E76-D9380485D946'),
}

model ListAlertRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAlertRulesResponseBody(name='body'),
}

/**
 * @summary Queries a list of custom monitoring alert rule by page.
 *
 * @param tmpReq ListAlertRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAlertRulesResponse
 */
async function listAlertRulesWithOptions(tmpReq: ListAlertRulesRequest, runtime: $RuntimeOptions): ListAlertRulesResponse {
  tmpReq.validate();
  var request = new ListAlertRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.taskIds)) {
    request.taskIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.taskIds, 'TaskIds', 'json');
  }
  if (!$isNull(tmpReq.types)) {
    request.typesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.types, 'Types', 'json');
  }
  var query = {};
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.owner)) {
    query['Owner'] = request.owner;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.receiver)) {
    query['Receiver'] = request.receiver;
  }
  if (!$isNull(request.taskIdsShrink)) {
    query['TaskIds'] = request.taskIdsShrink;
  }
  if (!$isNull(request.typesShrink)) {
    query['Types'] = request.typesShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListAlertRules',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of custom monitoring alert rule by page.
 *
 * @param request ListAlertRulesRequest
 * @return ListAlertRulesResponse
 */
async function listAlertRules(request: ListAlertRulesRequest): ListAlertRulesResponse {
  var runtime = new $RuntimeOptions{};
  return listAlertRulesWithOptions(request, runtime);
}

model ListDIAlarmRulesRequest {
  DIAlarmRuleId?: long(name='DIAlarmRuleId', description='The ID of the alert rule. If you leave this parameter empty, all alert rules of the task are queried.', example='34988'),
  jobId?: long(name='JobId', description='The ID of the task for which alert rules are configured.', example='1000001'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
}

model ListDIAlarmRulesResponseBody = {
  pagingInfo?: {
    DIJobAlarmRules?: [ 
      {
        DIAlarmRuleId?: long(name='DIAlarmRuleId', description='This parameter is deprecated. Use the Id parameter instead.', example='72402', deprecated=true),
        DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='32594'),
        description?: string(name='Description', description='The description of the alert rule.', example='rule descrition'),
        enabled?: boolean(name='Enabled', description='Indicates whether the alert rule is enabled. Valid values: True and False.', example='True'),
        id?: long(name='Id', description='The ID of the alert rule.', example='72402'),
        metricType?: string(name='MetricType', description='The metric type in the alert rule. Valid values:

*   Heartbeat
*   FailoverCount
*   Delay
*   DdlReport
*   ResourceUtilization', example='Heartbeat'),
        name?: string(name='Name', description='The name of the alert rule.', example='rule_name'),
        notificationSettings?: {
          inhibitionInterval?: long(name='InhibitionInterval', description='The duration of the alert suppression interval. Unit: minutes.', example='5', deprecated=true),
          muteInterval?: long(name='MuteInterval', description='The duration of the alert suppression interval. Unit: minutes.', example='5'),
          notificationChannels?: [ 
            {
              channels?: [ string ](name='Channels', description='The alert notification methods.'),
              severity?: string(name='Severity', description='The severity level. Valid values:

*   Warning
*   Critical', example='Critical'),
            }
          ](name='NotificationChannels', description='The alert notification methods.'),
          notificationReceivers?: [ 
            {
              receiverType?: string(name='ReceiverType', description='The recipient type. Valid values: AliyunUid, DingToken, FeishuToken, and WebHookUrl.', example='DingToken'),
              receiverValues?: [ string ](name='ReceiverValues', description='The recipient.

*   If the value of the ReceiverType parameter is AliyunUid, the value of this parameter is the Alibaba Cloud account ID of a user.
*   If the value of the ReceiverType parameter is DingToken, the value of this parameter is the token of a DingTalk chatbot.'),
            }
          ](name='NotificationReceivers', description='The settings of alert notification recipients.'),
        }(name='NotificationSettings', description='The alert notification method and recipient settings.'),
        triggerConditions?: [ 
          {
            ddlReportTags?: [ string ](name='DdlReportTags', description='The types of DDL operations for which the alert rule takes effect. This parameter is returned only if the MetricType parameter is set to DdlReport.', deprecated=true),
            ddlTypes?: [ string ](name='DdlTypes', description='The types of DDL operations for which the alert rule takes effect. This parameter is returned only if the MetricType parameter is set to DdlReport.'),
            duration?: long(name='Duration', description='The time interval for alert calculation. Unit: minutes.', example='1'),
            severity?: string(name='Severity', description='The severity level. Valid values:

*   Warning
*   Critical', example='Critical'),
            threshold?: long(name='Threshold', description='The alert threshold.

*   If the alert rule is for task status, no threshold is used.
*   If the alert rule is for failovers, the threshold is the number of failovers.
*   If the alert rule is for latency, the threshold is the latency duration, in seconds.', example='5'),
          }
        ](name='TriggerConditions', description='The conditions that are used to trigger the alert rule.'),
      }
    ](name='DIJobAlarmRules', description='The alert rules.'),
    pageNumber?: long(name='PageNumber', description='The page number. Pages start from page 1.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='90'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='74C2FECD-5B3A-554A-BCF5-351A36DE9815'),
}

model ListDIAlarmRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIAlarmRulesResponseBody(name='body'),
}

/**
 * @summary Views alert rules configured for a synchronization task.
 *
 * @param request ListDIAlarmRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDIAlarmRulesResponse
 */
async function listDIAlarmRulesWithOptions(request: ListDIAlarmRulesRequest, runtime: $RuntimeOptions): ListDIAlarmRulesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDIAlarmRules',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Views alert rules configured for a synchronization task.
 *
 * @param request ListDIAlarmRulesRequest
 * @return ListDIAlarmRulesResponse
 */
async function listDIAlarmRules(request: ListDIAlarmRulesRequest): ListDIAlarmRulesResponse {
  var runtime = new $RuntimeOptions{};
  return listDIAlarmRulesWithOptions(request, runtime);
}

model ListDIJobEventsRequest {
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='11588'),
  endTime?: long(name='EndTime', description='The end of the time range to query.

This parameter is required.', example='1717971005'),
  eventType?: string(name='EventType', description='The type of event that you want to query. Valid values: Failover, Alarm, and DDL.

This parameter is required.', example='Alarm'),
  pageNumber?: long(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query.

This parameter is required.', example='1716971005'),
}

model ListDIJobEventsResponseBody = {
  pagingInfo?: {
    DIJobEvent?: [ 
      {
        action?: string(name='Action', description='The processing result of the DDL event. Valid values: Critical, Ignore, Normal, and Warning.', example='Ignore'),
        channels?: string(name='Channels', description='The alert notification method. Valid values: Phone, Mail, Sms, Ding, and Webhook.', example='Phone'),
        createTime?: string(name='CreateTime', description='The time when the event was created.', example='1663573162'),
        detail?: string(name='Detail', description='The alert details.', example='aggregator:avg [**] for 5 minutes, service maybe abnormal'),
        dstSql?: string(name='DstSql', description='The DDL statement of the destination table.', example='alter table table2 ***'),
        dstTable?: string(name='DstTable', description='The name of the destination table.', example='table2'),
        failoverMessage?: string(name='FailoverMessage', description='The error logs for failovers.', example='2024-05-29 15:11:31,377 [main] INFO com.*.**.di.core.metrics.:21 []  {****} 
2024-05-29 15:11:31,384 [main] INFO *.aliyun.*.di.*.*.metrics.*:27 [] - Open MarioDiReporter 
2024-05-29 15:11:33,248 [flink-akka.*.*-dispatcher-17] INFO'),
        id?: string(name='Id', description='The event ID.', example='1'),
        severity?: string(name='Severity', description='The severity level of the alert. Valid values: Warning and Critical.', example='Warning'),
        srcSql?: string(name='SrcSql', description='The DDL statement of the source table.', example='alter table table1 ***'),
        srcTable?: string(name='SrcTable', description='The name of the source table.', example='table1'),
        status?: string(name='Status', description='The sending status of an alert notification. Valid values: Success, Fail, and Silence.', example='Success'),
        type?: string(name='Type', description='The type of the alert event.

*   Heartbeat
*   Delay
*   FailoverCount
*   DdlReport
*   ResourceUtilization', example='Delay'),
      }
    ](name='DIJobEvent', description='The events returned. The value of this parameter is an array.'),
    pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='2524'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='645F6D68-9C29-5961-80B1-BDD4B794C22D'),
}

model ListDIJobEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIJobEventsResponseBody(name='body'),
}

/**
 * @summary Queries events for a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDIJobEventsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDIJobEventsResponse
 */
async function listDIJobEventsWithOptions(request: ListDIJobEventsRequest, runtime: $RuntimeOptions): ListDIJobEventsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDIJobEvents',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries events for a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDIJobEventsRequest
 * @return ListDIJobEventsResponse
 */
async function listDIJobEvents(request: ListDIJobEventsRequest): ListDIJobEventsResponse {
  var runtime = new $RuntimeOptions{};
  return listDIJobEventsWithOptions(request, runtime);
}

model ListDIJobMetricsRequest {
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='11265'),
  endTime?: long(name='EndTime', description='The end of the time range to query.

This parameter is required.', example='1712205941'),
  metricName?: [ string ](name='MetricName', description='The metrics that you want to query.

This parameter is required.'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query.

This parameter is required.', example='1586509407'),
}

model ListDIJobMetricsShrinkRequest {
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='11265'),
  endTime?: long(name='EndTime', description='The end of the time range to query.

This parameter is required.', example='1712205941'),
  metricNameShrink?: string(name='MetricName', description='The metrics that you want to query.

This parameter is required.'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query.

This parameter is required.', example='1586509407'),
}

model ListDIJobMetricsResponseBody = {
  pagingInfo?: {
    jobMetrics?: [ 
      {
        name?: string(name='Name', description='The name of the metric.', example='JobDelay'),
        seriesList?: [ 
          {
            time?: long(name='Time', description='The point in time at which data is sampled based on the metric.', example='1716881141'),
            value?: double(name='Value', description='The sample value.', example='10'),
          }
        ](name='SeriesList', description='The metric data.'),
      }
    ](name='JobMetrics', description='The metrics returned.'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='691CA452-D37A-4ED0-9441'),
}

model ListDIJobMetricsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIJobMetricsResponseBody(name='body'),
}

/**
 * @summary Queries metrics for a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq ListDIJobMetricsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDIJobMetricsResponse
 */
async function listDIJobMetricsWithOptions(tmpReq: ListDIJobMetricsRequest, runtime: $RuntimeOptions): ListDIJobMetricsResponse {
  tmpReq.validate();
  var request = new ListDIJobMetricsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.metricName)) {
    request.metricNameShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.metricName, 'MetricName', 'json');
  }
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDIJobMetrics',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries metrics for a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDIJobMetricsRequest
 * @return ListDIJobMetricsResponse
 */
async function listDIJobMetrics(request: ListDIJobMetricsRequest): ListDIJobMetricsResponse {
  var runtime = new $RuntimeOptions{};
  return listDIJobMetricsWithOptions(request, runtime);
}

model ListDIJobRunDetailsRequest {
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.

This parameter is required.', example='11265'),
  instanceId?: long(name='InstanceId', description='The instance ID.', example='1234'),
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  sourceDataSourceName?: string(name='SourceDataSourceName', description='The name of the source.', example='ds_name'),
  sourceDatabaseName?: string(name='SourceDatabaseName', description='The name of the database in the source.', example='db_name'),
  sourceSchemaName?: string(name='SourceSchemaName', description='The name of the schema of the source.', example='schema_name'),
  sourceTableName?: string(name='SourceTableName', description='The name of the table in the source.', example='table_name'),
}

model ListDIJobRunDetailsResponseBody = {
  pagingInfo?: {
    jobRunInfos?: [ 
      {
        destinationDatabaseName?: string(name='DestinationDatabaseName', description='The name of the database in the destination.', example='dst_db'),
        destinationDatasourceName?: string(name='DestinationDatasourceName', description='The name of the destination.', example='dst_name'),
        destinationSchemaName?: string(name='DestinationSchemaName', description='The name of the schema of the destination.', example='dst_schema'),
        destinationTableName?: string(name='DestinationTableName', description='The name of the table in the destination.', example='dst_name'),
        fullMigrationErrorMessage?: string(name='FullMigrationErrorMessage', description='The error message that is returned if an error occurs during full batch synchronization. If no error occurs, no value is returned for this parameter.', example='sync table t1 fail.'),
        fullMigrationStatus?: string(name='FullMigrationStatus', description='The status of full batch synchronization.', example='Finished'),
        offlineErrorRecords?: long(name='OfflineErrorRecords', description='The total number of errors that occur during full synchronization.', example='0'),
        offlineTotalBytes?: long(name='OfflineTotalBytes', description='The total number of bytes that are synchronized during full synchronization.', example='100'),
        offlineTotalRecords?: long(name='OfflineTotalRecords', description='The total number of data records that are synchronized during full synchronization.', example='10'),
        realtimeMigrationErrorMessage?: string(name='RealtimeMigrationErrorMessage', description='The error message that is returned if an error occurs during real-time synchronization. If no error occurs, no value is returned for this parameter.', example='sync table t1 fail.'),
        realtimeMigrationStatus?: string(name='RealtimeMigrationStatus', description='The status of real-time synchronization.', example='Running'),
        sourceDatabaseName?: string(name='SourceDatabaseName', description='The name of the database in the source.', example='db_name'),
        sourceDatasourceName?: string(name='SourceDatasourceName', description='The name of the source.', example='ds_name'),
        sourceSchemaName?: string(name='SourceSchemaName', description='The name of the schema of the source.', example='schema_name'),
        sourceTableName?: string(name='SourceTableName', description='The name of the table in the source.', example='table_name'),
        structureMigrationErrorMessage?: string(name='StructureMigrationErrorMessage', description='The error message that is returned if an error occurs during schema synchronization. If no error occurs, no value is returned for this parameter.', example='create table t1 fail.'),
        structureMigrationStatus?: string(name='StructureMigrationStatus', description='The synchronization status of the schema.', example='Finished'),
      }
    ](name='JobRunInfos', description='The running information about the synchronization task.'),
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='131'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='691CA452-D37A-4ED0-9441'),
}

model ListDIJobRunDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIJobRunDetailsResponseBody(name='body'),
}

/**
 * @summary Queries the running information about a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDIJobRunDetailsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDIJobRunDetailsResponse
 */
async function listDIJobRunDetailsWithOptions(request: ListDIJobRunDetailsRequest, runtime: $RuntimeOptions): ListDIJobRunDetailsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDIJobRunDetails',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the running information about a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDIJobRunDetailsRequest
 * @return ListDIJobRunDetailsResponse
 */
async function listDIJobRunDetails(request: ListDIJobRunDetailsRequest): ListDIJobRunDetailsResponse {
  var runtime = new $RuntimeOptions{};
  return listDIJobRunDetailsWithOptions(request, runtime);
}

model ListDIJobsRequest {
  destinationDataSourceType?: string(name='DestinationDataSourceType', description='The destination type. If you do not configure this parameter, no limits are imposed on the tasks.', example='Hologres'),
  migrationType?: string(name='MigrationType', description='The synchronization type. Valid values:

*   FullAndRealtimeIncremental: one-time full synchronization and real-time incremental synchronization
*   RealtimeIncremental: real-time incremental synchronization
*   Full: full synchronization
*   OfflineIncremental: batch incremental synchronization
*   FullAndOfflineIncremental: one-time full synchronization and batch incremental synchronization', example='FullAndRealtimeIncremental'),
  name?: string(name='Name', description='The name of the export task.

The name of each export task must be unique. You must make sure that the names of the export tasks in the current workspace are unique.', example='test_export_01'),
  pageNumber?: long(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='1967'),
  sourceDataSourceType?: string(name='SourceDataSourceType', description='The source type. If you do not configure this parameter, no limits are imposed on the tasks.', example='MySQL'),
}

model ListDIJobsResponseBody = {
  pagingInfo?: {
    DIJobs?: [ 
      {
        DIJobId?: long(name='DIJobId', description='This parameter is deprecated. Use the Id parameter instead.', example='32599', deprecated=true),
        destinationDataSourceType?: string(name='DestinationDataSourceType', description='The destination type. Valid values: Hologres and Hive.', example='Hologres'),
        id?: long(name='Id', description='The ID of the synchronization task.', example='32599'),
        jobName?: string(name='JobName', description='The name of the synchronization task.', example='mysql_to_holo_sync_35197'),
        jobStatus?: string(name='JobStatus', description='The status of the synchronization task. Valid values:

*   Finished
*   Initialized
*   Stopped
*   Failed
*   Running
*   Stopping', example='Running'),
        migrationType?: string(name='MigrationType', description='The synchronization type. Valid values:

*   FullAndRealtimeIncremental: one-time full synchronization and real-time incremental synchronization
*   RealtimeIncremental: real-time incremental synchronization
*   Full: full synchronization
*   OfflineIncremental: batch incremental synchronization
*   FullAndOfflineIncremental: one-time full synchronization and batch incremental synchronization', example='FullAndRealtimeIncremental'),
        projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace to which the synchronization task belongs.', example='26442'),
        sourceDataSourceType?: string(name='SourceDataSourceType', description='The source type. The value MySQL is returned.', example='Mysql'),
      }
    ](name='DIJobs', description='The synchronization tasks returned.'),
    pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='12'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7263E4AC-9D2E-5B29-B8AF-7C5012E92A41'),
}

model ListDIJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDIJobsResponseBody(name='body'),
}

/**
 * @summary Queries a list of synchronization tasks.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDIJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDIJobsResponse
 */
async function listDIJobsWithOptions(request: ListDIJobsRequest, runtime: $RuntimeOptions): ListDIJobsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDIJobs',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of synchronization tasks.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDIJobsRequest
 * @return ListDIJobsResponse
 */
async function listDIJobs(request: ListDIJobsRequest): ListDIJobsResponse {
  var runtime = new $RuntimeOptions{};
  return listDIJobsWithOptions(request, runtime);
}

model ListDataAssetTagsRequest {
  category?: string(name='Category', example='Normal'),
  key?: string(name='Key', example='key1'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListDataAssetTagsResponseBody = {
  pagingInfo?: {
    dataAssetTags?: [ 
      {
        category?: string(name='Category', example='Normal'),
        createTime?: long(name='CreateTime', example='1735890003000'),
        createUser?: string(name='CreateUser', example='12345'),
        description?: string(name='Description'),
        key?: string(name='Key', example='key1'),
        managers?: [ string ](name='Managers'),
        modifyTime?: long(name='ModifyTime', example='1735890003000'),
        modifyUser?: string(name='ModifyUser', example='1234'),
        valueType?: string(name='ValueType', example='String'),
        values?: [ string ](name='Values'),
      }
    ](name='DataAssetTags'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='2524'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', description='Id of the request', example='0bc1ec92159376****'),
}

model ListDataAssetTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataAssetTagsResponseBody(name='body'),
}

/**
 * @summary 查询标签列表
 *
 * @param request ListDataAssetTagsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataAssetTagsResponse
 */
async function listDataAssetTagsWithOptions(request: ListDataAssetTagsRequest, runtime: $RuntimeOptions): ListDataAssetTagsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDataAssetTags',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 查询标签列表
 *
 * @param request ListDataAssetTagsRequest
 * @return ListDataAssetTagsResponse
 */
async function listDataAssetTags(request: ListDataAssetTagsRequest): ListDataAssetTagsResponse {
  var runtime = new $RuntimeOptions{};
  return listDataAssetTagsWithOptions(request, runtime);
}

model ListDataAssetsRequest {
  dataAssetIds?: [ string ](name='DataAssetIds'),
  dataAssetType?: string(name='DataAssetType', example='ACS::DataWorks::Task'),
  envType?: string(name='EnvType', example='Prod'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='10000'),
  tags?: [ 
    {
      key?: string(name='Key', description='This parameter is required.', example='key'),
      value?: string(name='Value', example='value'),
    }
  ](name='Tags', description='This parameter is required.'),
}

model ListDataAssetsShrinkRequest {
  dataAssetIdsShrink?: string(name='DataAssetIds'),
  dataAssetType?: string(name='DataAssetType', example='ACS::DataWorks::Task'),
  envType?: string(name='EnvType', example='Prod'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', example='10000'),
  tagsShrink?: string(name='Tags', description='This parameter is required.'),
}

model ListDataAssetsResponseBody = {
  pagingInfo?: {
    dataAssets?: [ 
      {
        dataAssetTagMappings?: [ 
          {
            autoTraceEnabled?: boolean(name='AutoTraceEnabled'),
            creator?: string(name='Creator', example='12345'),
            dataAssetId?: string(name='DataAssetId', example='7259557313'),
            key?: string(name='Key', example='key'),
            tagSource?: string(name='TagSource', example='UserDefined'),
            value?: string(name='Value', example='value'),
          }
        ](name='DataAssetTagMappings'),
        envType?: string(name='EnvType', example='Prod'),
        id?: string(name='Id', example='7259557313'),
        name?: string(name='Name', example='ali_cn_es_gfn'),
        projectId?: long(name='ProjectId', example='54275'),
        type?: string(name='Type', example='ACS::DataWorks::Task'),
      }
    ](name='DataAssets'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', description='Id of the request', example='0bc1ec92159376'),
}

model ListDataAssetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataAssetsResponseBody(name='body'),
}

/**
 * @summary ListDataAssets
 *
 * @param tmpReq ListDataAssetsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataAssetsResponse
 */
async function listDataAssetsWithOptions(tmpReq: ListDataAssetsRequest, runtime: $RuntimeOptions): ListDataAssetsResponse {
  tmpReq.validate();
  var request = new ListDataAssetsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.dataAssetIds)) {
    request.dataAssetIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataAssetIds, 'DataAssetIds', 'json');
  }
  if (!$isNull(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDataAssets',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary ListDataAssets
 *
 * @param request ListDataAssetsRequest
 * @return ListDataAssetsResponse
 */
async function listDataAssets(request: ListDataAssetsRequest): ListDataAssetsResponse {
  var runtime = new $RuntimeOptions{};
  return listDataAssetsWithOptions(request, runtime);
}

model ListDataQualityEvaluationTaskInstancesRequest {
  bizdateFrom?: string(name='BizdateFrom', description='The start time of the data quality monitoring task.', example='2024-04-01'),
  bizdateTo?: string(name='BizdateTo', description='The end time of the data quality monitoring task.', example='2024-05-01'),
  createTimeFrom?: long(name='CreateTimeFrom', description='The earliest start time at which the instances are generated.', example='1710239005403'),
  createTimeTo?: long(name='CreateTimeTo', description='The latest start time at which the instances are generated.', example='1710239005403'),
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', description='The ID of the data quality monitoring task.', example='10000'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='100'),
  tableGuid?: string(name='TableGuid', description='The ID of the table in Data Map.', example='odps.unit_test.tb_unit_test'),
  triggerClient?: string(name='TriggerClient', description='The name of the trigger module of the instance.', example='CWF2'),
  triggerClientId?: string(name='TriggerClientId', description='The ID of the instance that is generated by the task.', example='1001'),
}

model ListDataQualityEvaluationTaskInstancesResponseBody = {
  pagingInfo?: {
    dataQualityEvaluationTaskInstances?: [ 
      {
        createTime?: long(name='CreateTime', description='The time at which the instance was generated.', example='1710239005403'),
        finishTime?: long(name='FinishTime', description='The time at which the instance finished running.', example='1710239005403'),
        id?: long(name='Id', description='The ID of the instance.', example='10001'),
        parameters?: string(name='Parameters', description='The parameters configured for the instance.', example='{
  "bizdate": "20240517",
  "triggerTime": "1710239005403"
}'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='100'),
        status?: string(name='Status', description='The status of the instance. Valid values:

*   Running
*   Error
*   Passed
*   Warned
*   Critical', example='Critical'),
        task?: {
          description?: string(name='Description', description='The description of the task.', example='This is a daily run data quality evaluation plan.'),
          hooks?: [ 
            {
              condition?: string(name='Condition', description='The trigger configuration of the callback event.', example='${severity} == "High" AND ${status} == "Critical"'),
              type?: string(name='Type', description='The type of the callback event. Valid values:

*   BlockTaskInstance. The value indicates that an auto triggered node is blocked.', example='BlockTaskInstance'),
            }
          ](name='Hooks', description='The callback configurations of the task during the instance lifecycle. Blocking an auto triggered node is a type of callback event. Only this type is supported.'),
          id?: long(name='Id', description='The task ID.', example='10001'),
          name?: string(name='Name', description='The name of the task.

This parameter is required.'),
          notifications?: {
            condition?: string(name='Condition', description='The trigger condition of the alert notification.', example='${severity} == "High"'),
            notifications?: [ 
              {
                nofiticationReceivers?: [ 
                  {
                    extension?: string(name='Extension', description='The extended information in the JSON format. For example, the DingTalk chatbot can remind all members in a DingTalk group by using the at sign (@).', example='{"atAll":"true"}'),
                    receiverType?: string(name='ReceiverType', description='The type of the alert recipient. Valid values:

*   AliUid: Alibaba Cloud account ID
*   WebhookUrl: URL of a custom webhook
*   DingdingUrl: DingTalk chatbot URL
*   FeishuUrl: Lark chatbot URL
*   WeixinUrl: WeCom chatbot URL', example='AliUid'),
                    receiverValues?: [ string ](name='ReceiverValues', description='The alert recipients.'),
                  }
                ](name='NofiticationReceivers', description='The alert recipients.'),
                notificationChannels?: [ 
                  {
                    channels?: [ string ](name='Channels', description='The alert notification methods.'),
                  }
                ](name='NotificationChannels', description='The alert notification methods.'),
              }
            ](name='Notifications', description='The configurations for the alert notification.'),
          }(name='Notifications', description='The configurations for alert notifications.'),
          projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
          runtimeConf?: string(name='RuntimeConf', description='The configuration of the data source. The value of the queue field is default, and that of the sqlEngine field can be set to SPARK_SQL, KYUUBI, PRESTO_SQL, or HIVE_SQL. The value default indicates the YARN queue for E-MapReduce (EMR) tasks.', example='{ "queue": "default", "sqlEngine": "SPARK-SQL" }'),
          target?: {
            databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs. Valid values:

*   maxcompute
*   emr
*   cdh
*   hologres
*   analyticdb_for_postgresql
*   analyticdb_for_mysql
*   starrocks', example='maxcompute'),
            partitionSpec?: string(name='PartitionSpec', description='The configuration of the partitioned table.', example='ds=$[yyyymmdd-1]'),
            tableGuid?: string(name='TableGuid', description='The ID of the table in Data Map.', example='odps.unit_test.tb_unit_test'),
            type?: string(name='Type', description='The type of the monitored object. Valid values:

*   Table', example='Table'),
          }(name='Target', description='The monitored object of the task.'),
          trigger?: {
            taskIds?: [ long ](name='TaskIds', description='The IDs of the auto triggered nodes of which the instances are successfully run.'),
            type?: string(name='Type', description='The trigger condition of the task. Valid values:

*   ByScheduledTaskInstance. The value indicates that the task is triggered when the instance of an auto triggered node is successfully run.', example='ByScheduledTaskInstance'),
          }(name='Trigger', description='The trigger configuration of the task.'),
        }(name='Task', description='The snapshot of the configurations for the task when the task starts.'),
        triggerContext?: string(name='TriggerContext', description='The information about the trigger module of the instance.', example='{
  "TriggerClientId": 10001,
  "TriggerClient": "CWF2"
}'),
      }
    ](name='DataQualityEvaluationTaskInstances', description='The instances generated by the task.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='294'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
}

model ListDataQualityEvaluationTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityEvaluationTaskInstancesResponseBody(name='body'),
}

/**
 * @summary Queries a list of instances generated by a data quality monitoring task by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityEvaluationTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataQualityEvaluationTaskInstancesResponse
 */
async function listDataQualityEvaluationTaskInstancesWithOptions(request: ListDataQualityEvaluationTaskInstancesRequest, runtime: $RuntimeOptions): ListDataQualityEvaluationTaskInstancesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDataQualityEvaluationTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of instances generated by a data quality monitoring task by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityEvaluationTaskInstancesRequest
 * @return ListDataQualityEvaluationTaskInstancesResponse
 */
async function listDataQualityEvaluationTaskInstances(request: ListDataQualityEvaluationTaskInstancesRequest): ListDataQualityEvaluationTaskInstancesResponse {
  var runtime = new $RuntimeOptions{};
  return listDataQualityEvaluationTaskInstancesWithOptions(request, runtime);
}

model ListDataQualityEvaluationTasksRequest {
  name?: string(name='Name', description='The name of the data quality monitoring task. Fuzzy match is supported.'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='100'),
  tableGuid?: string(name='TableGuid', description='The ID of the table in Data Map.', example='odps.unit_test.tb_unit_test'),
}

model ListDataQualityEvaluationTasksResponseBody = {
  pagingInfo?: {
    dataQualityEvaluationTasks?: [ 
      {
        description?: string(name='Description', description='The description of the data quality monitoring task. The description can be up to 65,535 characters in length.', example='This is a daily run data quality evaluation plan'),
        hooks?: [ 
          {
            condition?: string(name='Condition', description='The trigger configuration of the callback event.', example='${severity} == "High" AND ${status} == "Critical"'),
            type?: string(name='Type', description='The type of the callback event. Valid values:

*   BlockTaskInstance. The value indicates that an auto triggered node is blocked.', example='BlockTaskInstance'),
          }
        ](name='Hooks', description='The callback configurations of the task during the instance lifecycle. Blocking an auto triggered node is a type of callback event. Only this type is supported.'),
        id?: long(name='Id', description='The ID of the data quality monitoring task.', example='10001'),
        name?: string(name='Name', description='The name of the data quality monitoring task. The name can be up to 255 characters in length and can contain digits, letters, and punctuation marks.'),
        notifications?: {
          condition?: string(name='Condition', description='The trigger condition of the alert notification.', example='${severity} == "High"'),
          notifications?: [ 
            {
              notificationChannels?: [ 
                {
                  channels?: [ string ](name='Channels', description='The alert notification methods.'),
                }
              ](name='NotificationChannels', description='The alert notification methods.'),
              notificationReceivers?: [ 
                {
                  extension?: string(name='Extension', description='The extended information in the JSON format. For example, the DingTalk chatbot can remind all members in a DingTalk group by using the at sign (@).', example='{"atAll":"true"}'),
                  receiverType?: string(name='ReceiverType', description='The type of the alert recipient. Valid values:

*   AliUid: Alibaba Cloud account ID
*   WebhookUrl: URL of a custom webhook
*   DingdingUrl: DingTalk chatbot URL
*   FeishuUrl: Lark chatbot URL
*   WeixinUrl: WeCom chatbot URL', example='AliUid'),
                  receiverValues?: [ string ](name='ReceiverValues', description='The alert recipients.'),
                }
              ](name='NotificationReceivers', description='The alert recipients.'),
            }
          ](name='Notifications', description='The configurations for the alert notification.'),
        }(name='Notifications', description='The configurations for alert notifications.'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='100'),
        runtimeConf?: string(name='RuntimeConf', description='The configuration of the data source. The value of the queue field is default, and that of the sqlEngine field can be set to SPARK_SQL, KYUUBI, PRESTO_SQL, or HIVE_SQL. The value default indicates the YARN queue for E-MapReduce (EMR) tasks.', example='{ "queue": "default", "sqlEngine": "SPARK-SQL" }'),
        target?: {
          databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs. Valid values:

*   maxcompute
*   emr
*   cdh
*   hologres
*   analyticdb_for_postgresql
*   analyticdb_for_mysql
*   starrocks', example='maxcompute'),
          partitionSpec?: string(name='PartitionSpec', description='The configuration of the partitioned table.', example='ds=$[yyyymmdd-1]'),
          tableGuid?: string(name='TableGuid', description='The ID of the table in Data Map.', example='odps.unit_test.tb_unit_test'),
          type?: string(name='Type', description='The type of the monitored object. Valid values:

*   Table', example='Table'),
        }(name='Target', description='The monitored object of the task.'),
        trigger?: {
          taskIds?: [ long ](name='TaskIds', description='The IDs of the auto triggered nodes of which the instances are successfully run. This parameter takes effect only if the Type parameter is set to ByScheduledTaskInstance.'),
          type?: string(name='Type', description='The trigger condition of the task. Valid values:

*   ByScheduledTaskInstance. The value indicates that the task is triggered when the instance of an auto triggered node is successfully run.', example='ByScheduledTaskInstance'),
        }(name='Trigger', description='The trigger configuration of the task.'),
      }
    ](name='DataQualityEvaluationTasks', description='The data quality monitoring tasks.'),
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='131'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
}

model ListDataQualityEvaluationTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityEvaluationTasksResponseBody(name='body'),
}

/**
 * @summary Queries a list of data quality monitoring tasks by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityEvaluationTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataQualityEvaluationTasksResponse
 */
async function listDataQualityEvaluationTasksWithOptions(request: ListDataQualityEvaluationTasksRequest, runtime: $RuntimeOptions): ListDataQualityEvaluationTasksResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDataQualityEvaluationTasks',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of data quality monitoring tasks by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityEvaluationTasksRequest
 * @return ListDataQualityEvaluationTasksResponse
 */
async function listDataQualityEvaluationTasks(request: ListDataQualityEvaluationTasksRequest): ListDataQualityEvaluationTasksResponse {
  var runtime = new $RuntimeOptions{};
  return listDataQualityEvaluationTasksWithOptions(request, runtime);
}

model ListDataQualityResultsRequest {
  bizdateFrom?: string(name='BizdateFrom', description='The beginning of the time range to query.', example='2024-05-01'),
  bizdateTo?: string(name='BizdateTo', description='The end of the time range to query.', example='2024-05-04'),
  createTimeFrom?: long(name='CreateTimeFrom', example='1710239005403'),
  createTimeTo?: long(name='CreateTimeTo', example='1710239005403'),
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', example='200001'),
  dataQualityEvaluationTaskInstanceId?: long(name='DataQualityEvaluationTaskInstanceId', example='10001'),
  dataQualityRuleId?: long(name='DataQualityRuleId', example='100001'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='100'),
}

model ListDataQualityResultsResponseBody = {
  pagingInfo?: {
    dataQualityResults?: [ 
      {
        createTime?: long(name='CreateTime', example='1708284916414'),
        details?: [ 
          {
            checkedValue?: string(name='CheckedValue', example='100.0'),
            referencedValue?: string(name='ReferencedValue', example='0.0'),
            status?: string(name='Status', description='The comparison result between the value of CheckedValue and the threshold. Valid values:

*   Error
*   Passed
*   Warned
*   Critical', example='PASSED'),
          }
        ](name='Details', description='The check details.'),
        id?: long(name='Id', example='16033'),
        rule?: {
          checkingConfig?: {
            referencedSamplesFilter?: string(name='ReferencedSamplesFilter', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
            thresholds?: {
              critical?: {
                expression?: string(name='Expression', example='$checkValue > 0.01'),
                operator?: string(name='Operator', description='*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
                value?: string(name='Value', example='100.0'),
              }(name='Critical', description='The threshold settings for critical alerts.'),
              expected?: {
                expression?: string(name='Expression', example='$checkValue > 0.01'),
                operator?: string(name='Operator', description='*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
                value?: string(name='Value', example='100.0'),
              }(name='Expected', description='The expected threshold setting.'),
              warned?: {
                expression?: string(name='Expression', example='$checkValue > 0.01'),
                operator?: string(name='Operator', description='*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
                value?: string(name='Value', example='100.0'),
              }(name='Warned', description='The threshold settings for normal alerts.'),
            }(name='Thresholds', description='The threshold settings.'),
            type?: string(name='Type', description='The threshold calculation method. Valid values:

*   Fixed
*   Fluctation
*   FluctationDiscreate
*   Auto
*   Average
*   Variance', example='FIXED'),
          }(name='CheckingConfig', description='The check settings for sample data.'),
          description?: string(name='Description', example='this is a odps _sql task'),
          enabled?: boolean(name='Enabled', example='true'),
          errorHandlers?: [ 
            {
              errorDataFilter?: string(name='ErrorDataFilter', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
              type?: string(name='Type', description='The type of the operation. Valid values:

*   SaveErrorData', example='SAVE_ERROR_DATA'),
            }
          ](name='ErrorHandlers', description='The operations that you can perform after the rule-based check fails.'),
          id?: long(name='Id', example='100001'),
          name?: string(name='Name'),
          projectId?: long(name='ProjectId', example='100'),
          samplingConfig?: {
            metric?: string(name='Metric', description='The metrics used for sampling. Valid values:

*   Count: the number of rows in the table.
*   Min: the minimum value of the field.
*   Max: the maximum value of the field.
*   Avg: the average value of the field.
*   DistinctCount: the number of unique values of the field after deduplication.
*   DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
*   DuplicatedCount: the number of duplicated values of the field.
*   DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
*   TableSize: the table size.
*   NullValueCount: the number of rows in which the field value is null.
*   NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
*   GroupCount: the field value and the number of rows for each field value.
*   CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
*   CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
*   UserDefinedSql: indicates that data is sampled by executing custom SQL statements.', example='COUNT'),
            metricParameters?: string(name='MetricParameters', example='{ "columns": [ "id", "name" ] }'),
            samplingFilter?: string(name='SamplingFilter', example='id IS NULL'),
            settingConfig?: string(name='SettingConfig', example='SET odps.sql.udf.timeout=600s;'),
          }(name='SamplingConfig', description='The sampling settings.'),
          severity?: string(name='Severity', description='The strength of the rule. Valid values:

*   High
*   Normal', example='NORMAL'),
          target?: {
            databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs. Valid values:

*   maxcompute
*   emr
*   cdh
*   hologres
*   analyticdb_for_postgresql
*   analyticdb_for_mysql
*   starrocks', example='MAX_COMPUTE'),
            tableGuid?: string(name='TableGuid', example='odps.unit_test.tb_unit_test'),
            type?: string(name='Type', description='The type of the monitored object. Valid values:

*   Table', example='TABLE'),
          }(name='Target', description='The monitored object of the rule.'),
          templateCode?: string(name='TemplateCode', description='The code of the template that is referenced when you create a rule.', example='system::user_defined'),
        }(name='Rule', description='The snapshot of the rule configuration when the check starts.'),
        sample?: string(name='Sample', example='[
  {
    "gender": "male",
    "_count": 100
  }, {
    "gender": "female",
    "_count": 100
  }
]'),
        status?: string(name='Status', description='The status of the check result. Valid values:

*   Running
*   Error
*   Passed
*   Warned
*   Critical', example='PASSED'),
        taskInstanceId?: long(name='TaskInstanceId', example='200001'),
      }
    ](name='DataQualityResults', description='The data quality check results.'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='219'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
}

model ListDataQualityResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityResultsResponseBody(name='body'),
}

/**
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityResultsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataQualityResultsResponse
 */
async function listDataQualityResultsWithOptions(request: ListDataQualityResultsRequest, runtime: $RuntimeOptions): ListDataQualityResultsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDataQualityResults',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityResultsRequest
 * @return ListDataQualityResultsResponse
 */
async function listDataQualityResults(request: ListDataQualityResultsRequest): ListDataQualityResultsResponse {
  var runtime = new $RuntimeOptions{};
  return listDataQualityResultsWithOptions(request, runtime);
}

model ListDataQualityRuleTemplatesRequest {
  creationSource?: string(name='CreationSource', example='System'),
  directoryPath?: string(name='DirectoryPath'),
  name?: string(name='Name'),
  pageNumber?: int32(name='PageNumber', description='The number of entries per page. Default value: 10.', example='10'),
  pageSize?: int32(name='PageSize', description='The page number. Default value: 1.', example='1'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='10000'),
}

model ListDataQualityRuleTemplatesResponseBody = {
  pagingInfo?: {
    dataQualityRuleTemplates?: [ 
      {
        checkingConfig?: {
          referencedSamplesFilter?: string(name='ReferencedSamplesFilter', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
          type?: string(name='Type', example='Fixed'),
        }(name='CheckingConfig'),
        code?: string(name='Code', example='USER_DEFINED:123'),
        directoryPath?: string(name='DirectoryPath'),
        name?: string(name='Name'),
        projectId?: long(name='ProjectId', example='2043'),
        samplingConfig?: {
          metric?: string(name='Metric', example='Max'),
          metricParameters?: string(name='MetricParameters', example='{"Sql": "select count(1) from table;"}'),
          settingConfig?: string(name='SettingConfig', example='SET odps.sql.udf.timeout=600s; 
SET odps.sql.python.version=cp27;'),
        }(name='SamplingConfig'),
        visibleScope?: string(name='VisibleScope', example='Project'),
      }
    ](name='DataQualityRuleTemplates'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='42'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='691CA452-D37A-4ED0-9441'),
}

model ListDataQualityRuleTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityRuleTemplatesResponseBody(name='body'),
}

/**
 * @summary 查询质量规则模版列表
 *
 * @param request ListDataQualityRuleTemplatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataQualityRuleTemplatesResponse
 */
async function listDataQualityRuleTemplatesWithOptions(request: ListDataQualityRuleTemplatesRequest, runtime: $RuntimeOptions): ListDataQualityRuleTemplatesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDataQualityRuleTemplates',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 查询质量规则模版列表
 *
 * @param request ListDataQualityRuleTemplatesRequest
 * @return ListDataQualityRuleTemplatesResponse
 */
async function listDataQualityRuleTemplates(request: ListDataQualityRuleTemplatesRequest): ListDataQualityRuleTemplatesResponse {
  var runtime = new $RuntimeOptions{};
  return listDataQualityRuleTemplatesWithOptions(request, runtime);
}

model ListDataQualityRulesRequest {
  dataQualityEvaluationTaskId?: long(name='DataQualityEvaluationTaskId', description='The ID of the data quality monitoring task that is associated with the rule.', example='10000'),
  name?: string(name='Name', description='The name of the rule. Fuzzy match is supported.', example='unit_test'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 200.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='10002'),
  tableGuid?: string(name='TableGuid', description='The ID of the table that is limited by the rule in Data Map.', example='odps.unit_test.tb_unit_test'),
}

model ListDataQualityRulesResponseBody = {
  pagingInfo?: {
    dataQualityRules?: [ 
      {
        checkingConfig?: {
          referencedSamplesFilter?: string(name='ReferencedSamplesFilter', description='The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference values. In this example, an expression is used to indicate the query method of referenced samples.', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
          thresholds?: {
            critical?: {
              expression?: string(name='Expression'),
              operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
              value?: string(name='Value', description='The threshold value.', example='100.0'),
            }(name='Critical', description='The threshold settings for critical alerts.'),
            expected?: {
              expression?: string(name='Expression'),
              operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
              value?: string(name='Value', description='The threshold value.', example='100.0'),
            }(name='Expected', description='The expected threshold setting.'),
            warned?: {
              expression?: string(name='Expression'),
              operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
              value?: string(name='Value', description='The threshold value.', example='100.0'),
            }(name='Warned', description='The threshold settings for normal alerts.'),
          }(name='Thresholds', description='The threshold settings.'),
          type?: string(name='Type', description='The threshold calculation method. Valid values:

*   Fixed
*   Fluctation
*   FluctationDiscreate
*   Auto
*   Average
*   Variance', example='Fixed'),
        }(name='CheckingConfig', description='The check settings for sample data.'),
        description?: string(name='Description', description='The description of the rule. The description can be up to 500 characters in length.', example='this is a odps _sql task'),
        enabled?: boolean(name='Enabled', description='Indicates whether the rule is enabled.', example='true'),
        errorHandlers?: [ 
          {
            errorDataFilter?: string(name='ErrorDataFilter', description='The SQL statement that is used to filter failed tasks. If the rule is defined by custom SQL statements, you must specify an SQL statement to filter failed tasks.', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
            type?: string(name='Type', description='The type of the operation. Valid values:

*   SaveErrorData', example='SaveErrorData'),
          }
        ](name='ErrorHandlers', description='The operations that you can perform after the rule-based check fails.'),
        id?: long(name='Id', description='The rule ID.', example='22130'),
        name?: string(name='Name', description='The rule name.'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='100001'),
        samplingConfig?: {
          metric?: string(name='Metric', description='The metrics used for sampling. Valid values:

*   Count: the number of rows in the table.
*   Min: the minimum value of the field.
*   Max: the maximum value of the field.
*   Avg: the average value of the field.
*   DistinctCount: the number of unique values of the field after deduplication.
*   DistinctPercent: the percentage of the number of unique values of the field after deduplication to the number of rows in the table.
*   DuplicatedCount: the number of duplicated values in the field.
*   DuplicatedPercent: the percentage of the number of duplicated values of the field to the number of rows in the table.
*   TableSize: the table size.
*   NullValueCount: the number of rows in which the field is set to null.
*   NullValuePercent: the percentage of the number of rows in which the field is set to null to the number of rows in the table.
*   GroupCount: the field value and the number of rows for each field value.
*   CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
*   CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
*   UserDefinedSql: indicates that the data is sampled by executing custom SQL statements.', example='Max'),
          metricParameters?: string(name='MetricParameters', description='The parameters required for sampling.', example='{ "Columns": [ "id", "name" ] , "SQL": "select count(1) from table;"}'),
          samplingFilter?: string(name='SamplingFilter', description='The statements that are used to filter unnecessary data during sampling. The statements can be up to 16,777,215 characters in length.', example='id IS NULL'),
          settingConfig?: string(name='SettingConfig', description='The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.', example='SET odps.sql.udf.timeout=600s; 
SET odps.sql.python.version=cp27;'),
        }(name='SamplingConfig', description='The settings for sampling.'),
        severity?: string(name='Severity', description='The strength of the rule. Valid values:

*   Normal
*   High', example='High'),
        target?: {
          databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs. Valid values:

*   maxcompute
*   emr
*   cdh
*   hologres
*   analyticdb_for_postgresql
*   analyticdb_for_mysql
*   starrocks', example='maxcompute'),
          tableGuid?: string(name='TableGuid', description='The ID of the table that is limited by the rule in Data Map.', example='odps.unit_test.tb_unit_test'),
          type?: string(name='Type', description='The type of the monitored object. Valid values:

*   Table', example='Table'),
        }(name='Target', description='The monitored object of the rule.'),
        templateCode?: string(name='TemplateCode', description='The ID of the template used by the rule.', example='system::user_defined'),
      }
    ](name='DataQualityRules', description='The rules.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='294'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
}

model ListDataQualityRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataQualityRulesResponseBody(name='body'),
}

/**
 * @summary Queries a list of data quality monitoring rules by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataQualityRulesResponse
 */
async function listDataQualityRulesWithOptions(request: ListDataQualityRulesRequest, runtime: $RuntimeOptions): ListDataQualityRulesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDataQualityRules',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of data quality monitoring rules by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDataQualityRulesRequest
 * @return ListDataQualityRulesResponse
 */
async function listDataQualityRules(request: ListDataQualityRulesRequest): ListDataQualityRulesResponse {
  var runtime = new $RuntimeOptions{};
  return listDataQualityRulesWithOptions(request, runtime);
}

model ListDataSourceSharedRulesRequest {
  dataSourceId?: long(name='DataSourceId', description='The data source ID.

This parameter is required.', example='1'),
  targetProjectId?: long(name='TargetProjectId', description='The ID of the workspace to which the data source is shared. You cannot share the data source to the workspace with which the data source is associated.', example='1'),
}

model ListDataSourceSharedRulesResponseBody = {
  dataSourceSharedRules?: [ 
    {
      createTime?: long(name='CreateTime', description='The time when the rule was created. This value is a UNIX timestamp.', example='1724379762000'),
      createUser?: string(name='CreateUser', description='The ID of the user who creates the rule.', example='1'),
      dataSourceId?: long(name='DataSourceId', description='The data source ID. You can call the [ListDataSources](https://help.aliyun.com/document_detail/211431.html) operation to query the ID.', example='1'),
      envType?: string(name='EnvType', example='Dev'),
      id?: long(name='Id', description='The rule ID.', example='1'),
      sharedDataSourceName?: string(name='SharedDataSourceName', description='The name of the data source in the destination workspace.', example='targetProject.datasource'),
      sharedUser?: string(name='SharedUser', description='The user in the workspace to which the data source is shared. If the data source is shared to the entire workspace, this parameter is left empty.', example='1'),
      sourceProjectId?: long(name='SourceProjectId', description='The ID of the workspace with which the data source is associated.', example='1'),
      targetProjectId?: long(name='TargetProjectId', description='The ID of the workspace to which the data source is shared.', example='1'),
    }
  ](name='DataSourceSharedRules', description='The sharing rules of the data source.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0000-ABCD-EFG****'),
}

model ListDataSourceSharedRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourceSharedRulesResponseBody(name='body'),
}

/**
 * @summary Queries a list of sharing rules of a data source.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  If you want to query the sharing rules of a data source that is associated with Workspace A, you must have the permissions to share the data source in Workspace A. You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
 *
 * @param request ListDataSourceSharedRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataSourceSharedRulesResponse
 */
async function listDataSourceSharedRulesWithOptions(request: ListDataSourceSharedRulesRequest, runtime: $RuntimeOptions): ListDataSourceSharedRulesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDataSourceSharedRules',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of sharing rules of a data source.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  If you want to query the sharing rules of a data source that is associated with Workspace A, you must have the permissions to share the data source in Workspace A. You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
 *
 * @param request ListDataSourceSharedRulesRequest
 * @return ListDataSourceSharedRulesResponse
 */
async function listDataSourceSharedRules(request: ListDataSourceSharedRulesRequest): ListDataSourceSharedRulesResponse {
  var runtime = new $RuntimeOptions{};
  return listDataSourceSharedRulesWithOptions(request, runtime);
}

model ListDataSourcesRequest {
  envType?: string(name='EnvType', description='The environment in which the data sources are used. Valid values:

*   Dev: development environment
*   Prod: production environment', example='Prod'),
  name?: string(name='Name', description='The name of the data source. Fuzzy match by data source name is supported.', example='test'),
  order?: string(name='Order', description='The order in which you want to sort the data sources. Valid values:

*   Desc: descending order
*   Asc: ascending order

Default value: Asc', example='Asc'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='17820'),
  sortBy?: string(name='SortBy', description='The field that you want to use to sort the data sources. Valid values:

*   CreateTime
*   Id
*   Name

Default value: Id', example='Id'),
  tags?: string(name='Tags', description='The tag of the data source. This parameter specifies a filter condition.

*   You can specify multiple tags, which are in the logical AND relation. For example, you can query the data sources that contain the following tags: `["tag1", "tag2", "tag3"]`.
*   If you do not configure this parameter, tag-based filtering is not performed.', example='["tag1", "tag2", "tag3"]'),
  types?: [ string ](name='Types', description='The data source types. This parameter specifies a filter condition. You can specify multiple data source types.'),
}

model ListDataSourcesShrinkRequest {
  envType?: string(name='EnvType', description='The environment in which the data sources are used. Valid values:

*   Dev: development environment
*   Prod: production environment', example='Prod'),
  name?: string(name='Name', description='The name of the data source. Fuzzy match by data source name is supported.', example='test'),
  order?: string(name='Order', description='The order in which you want to sort the data sources. Valid values:

*   Desc: descending order
*   Asc: ascending order

Default value: Asc', example='Asc'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='17820'),
  sortBy?: string(name='SortBy', description='The field that you want to use to sort the data sources. Valid values:

*   CreateTime
*   Id
*   Name

Default value: Id', example='Id'),
  tags?: string(name='Tags', description='The tag of the data source. This parameter specifies a filter condition.

*   You can specify multiple tags, which are in the logical AND relation. For example, you can query the data sources that contain the following tags: `["tag1", "tag2", "tag3"]`.
*   If you do not configure this parameter, tag-based filtering is not performed.', example='["tag1", "tag2", "tag3"]'),
  typesShrink?: string(name='Types', description='The data source types. This parameter specifies a filter condition. You can specify multiple data source types.'),
}

model ListDataSourcesResponseBody = {
  pagingInfo?: {
    dataSources?: [ 
      {
        dataSource?: [ 
          {
            connectionProperties?: any(name='ConnectionProperties', description='The connection configurations of the data source, including the connection address, access identity, and environment information. The envType parameter specifies the environment in which the data source is used. Valid values of the envType parameter:

*   Dev: development environment
*   Prod: production environment

The parameters that you need to configure for the data source vary based on the mode in which the data source is added. For more information, see [Data source connection information (ConnectionProperties)](https://help.aliyun.com/document_detail/2852465.html).', example='{
	"envType": "Prod",
	"regionId": "cn-beijing",
    "instanceId": "hgprecn-cn-x0r3oun4k001",
    "database": "testdb",
    "securityProtocol": "authTypeNone",
    "authType": "Executor",
    "authIdentity": "1107550004253538"
}'),
            connectionPropertiesMode?: string(name='ConnectionPropertiesMode', description='The mode in which the data source is added. The mode varies based on the data source type. Valid values: InstanceMode, UrlMode, and CdhMode. The value InstanceMode indicates the instance mode. The value UrlMode indicates the connection string mode. The value CdhMode indicates the CDH cluster mode.', example='UrlMode'),
            createTime?: long(name='CreateTime', description='The time when the data source was added. This value is a UNIX timestamp.', example='1648711113000'),
            createUser?: string(name='CreateUser', description='The ID of the user who adds the data source.', example='1624387842781448'),
            description?: string(name='Description', description='The description of the data source.', example='test'),
            id?: long(name='Id', description='The ID of the data source.', example='16035'),
            modifyTime?: long(name='ModifyTime', description='The time when the data source was last modified. This value is a UNIX timestamp.', example='1648711113000'),
            modifyUser?: string(name='ModifyUser', description='The ID of the user who modifies the data source.', example='1624387842781448'),
            qualifiedName?: string(name='QualifiedName', description='The unique business key of the data source. For example, the unique business key of a Hologres data source is in the `${tenantOwnerId}:${regionId}:${type}:${instanceId}:${database}` format.', example='1648711121000:cn-beijing:odps:yongxunQA_beijing_standard'),
          }
        ](name='DataSource', description='The data sources. Each element is the information of a single data source with a unique data source ID.'),
        name?: string(name='Name', description='The name of the data source.', example='test'),
        type?: string(name='Type', description='The type of the data source.', example='mysql'),
      }
    ](name='DataSources', description='The data source groups. Each element in the array indicates a data source group. Each data source group contains data sources in the development environment (if any) and the production environment.'),
    pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='131'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7BE1433F-6D55-5D86-9344-CA6F7DD19B13'),
}

model ListDataSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourcesResponseBody(name='body'),
}

/**
 * @summary Queries a list of data sources based on the business information of data sources.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Deploy, Develop, Visitor, Workspace Owner, O\\&M, Model Designer, Security Administrator, Data Analyst, OpenPlatform Administrator, and Data Governance Administrator
 *
 * @param tmpReq ListDataSourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataSourcesResponse
 */
async function listDataSourcesWithOptions(tmpReq: ListDataSourcesRequest, runtime: $RuntimeOptions): ListDataSourcesResponse {
  tmpReq.validate();
  var request = new ListDataSourcesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.types)) {
    request.typesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.types, 'Types', 'simple');
  }
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDataSources',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of data sources based on the business information of data sources.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Workspace Administrator, Deploy, Develop, Visitor, Workspace Owner, O\\&M, Model Designer, Security Administrator, Data Analyst, OpenPlatform Administrator, and Data Governance Administrator
 *
 * @param request ListDataSourcesRequest
 * @return ListDataSourcesResponse
 */
async function listDataSources(request: ListDataSourcesRequest): ListDataSourcesResponse {
  var runtime = new $RuntimeOptions{};
  return listDataSourcesWithOptions(request, runtime);
}

model ListDeploymentsRequest {
  creator?: string(name='Creator', description='The ID of the user who creates the processes. This parameter specifies a filter condition.', example='110755000425XXXX'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  status?: string(name='Status', description='The status of the processes. This parameter specifies a filter condition.

Valid values:

*   INIT
*   RUNNING
*   SUCCESS
*   FAIL
*   TERMINATION
*   CANCEL', example='RUNNING'),
}

model ListDeploymentsResponseBody = {
  pagingInfo?: {
    deployments?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the process was created. This value is a UNIX timestamp.', example='1702736654000'),
        creator?: string(name='Creator', description='The ID of the user who creates the process.', example='110755000425XXXX'),
        id?: string(name='Id', description='The process ID.', example='ddf354a5-03df-48fc-94c1-cc973f79XXXX'),
        message?: string(name='Message', description='The error message returned if the process fails.'),
        modifyTime?: long(name='ModifyTime', description='The time when the process was last modified. This value is a UNIX timestamp.', example='1702736654000'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='44683'),
        stages?: [ 
          {
            code?: string(name='Code', description='The code of the stage.', example='DEV_CHECK'),
            description?: string(name='Description', description='The description of the stage.'),
            detail?: map[string]any(name='Detail', description='The additional information about the stage.'),
            message?: string(name='Message', description='The error message returned during the stage.'),
            name?: string(name='Name', description='The name of the stage.'),
            status?: string(name='Status', description='The status of the stage.

Valid values:

*   Init
*   Running
*   Success
*   Fail
*   Termination
*   Cancel', example='RUNNING'),
            step?: int32(name='Step', description='The step number of the stage.', example='1'),
            type?: string(name='Type', description='The type of the stage. This parameter indicates the operation type in the stage.

Valid values:

*   Deploy
*   Check
*   Offline
*   Build
*   Delete', example='CHECK'),
          }
        ](name='Stages', description='The stages of the process.'),
        status?: string(name='Status', description='The status of the process.

Valid values:

*   Init
*   Running
*   Success
*   Fail
*   Termination
*   Cancel', example='RUNNING'),
      }
    ](name='Deployments', description='The deployment processes.'),
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='2524'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7C352CB7-CD88-50CF-9D0D-E81BDF02XXXX'),
}

model ListDeploymentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeploymentsResponseBody(name='body'),
}

/**
 * @summary Queries a list of processes that are used to deploy or undeploy entities in DataStudio. You can also specify filter conditions to query specific processes.
 *
 * @param request ListDeploymentsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDeploymentsResponse
 */
async function listDeploymentsWithOptions(request: ListDeploymentsRequest, runtime: $RuntimeOptions): ListDeploymentsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDeployments',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of processes that are used to deploy or undeploy entities in DataStudio. You can also specify filter conditions to query specific processes.
 *
 * @param request ListDeploymentsRequest
 * @return ListDeploymentsResponse
 */
async function listDeployments(request: ListDeploymentsRequest): ListDeploymentsResponse {
  var runtime = new $RuntimeOptions{};
  return listDeploymentsWithOptions(request, runtime);
}

model ListDownstreamTaskInstancesRequest {
  id?: long(name='Id', description='The instance ID.

This parameter is required.', example='1234'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
}

model ListDownstreamTaskInstancesResponseBody = {
  pagingInfo?: {
    downstreamTaskInstances?: [ 
      {
        dependencyType?: string(name='DependencyType', description='The dependency type.'),
        taskInstance?: {
          baselineId?: long(name='BaselineId'),
          bizdate?: long(name='Bizdate'),
          createTime?: long(name='CreateTime'),
          createUser?: string(name='CreateUser'),
          dataSource?: {
            name?: string(name='Name'),
          }(name='DataSource'),
          description?: string(name='Description'),
          envType?: string(name='EnvType'),
          finishedTime?: long(name='FinishedTime'),
          id?: long(name='Id'),
          modifyTime?: long(name='ModifyTime'),
          modifyUser?: string(name='ModifyUser'),
          owner?: string(name='Owner'),
          periodNumber?: int32(name='PeriodNumber'),
          priority?: int32(name='Priority'),
          projectId?: long(name='ProjectId'),
          rerunMode?: string(name='RerunMode', description='The rerun mode.'),
          runNumber?: int32(name='RunNumber'),
          runtime?: {
            gateway?: string(name='Gateway'),
            processId?: string(name='ProcessId'),
          }(name='Runtime'),
          runtimeResource?: {
            cu?: string(name='Cu'),
            image?: string(name='Image'),
            resourceGroupId?: string(name='ResourceGroupId'),
          }(name='RuntimeResource'),
          startedTime?: long(name='StartedTime'),
          status?: string(name='Status', description='The status of the instance.'),
          taskId?: long(name='TaskId'),
          taskName?: string(name='TaskName'),
          taskType?: string(name='TaskType', description='The task type.'),
          timeout?: int32(name='Timeout'),
          triggerRecurrence?: string(name='TriggerRecurrence'),
          triggerTime?: long(name='TriggerTime'),
          triggerType?: string(name='TriggerType'),
          workflowId?: long(name='WorkflowId'),
          workflowInstanceId?: long(name='WorkflowInstanceId'),
          workflowInstanceType?: string(name='WorkflowInstanceType'),
          workflowName?: string(name='WorkflowName'),
        }(name='TaskInstance', description='The information about a task instance.'),
      }
    ](name='DownstreamTaskInstances'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    taskInstances?: [ 
      {
        baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
        bizdate?: long(name='Bizdate', description='The data timestamp.', example='1710239005403'),
        createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
        createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
        }(name='DataSource', description='The information about the associated data source.'),
        description?: string(name='Description', description='The description.', example='test'),
        envType?: string(name='EnvType'),
        finishedTime?: long(name='FinishedTime', description='The time when the instance finished running.', example='1710239005403'),
        id?: long(name='Id', description='The instance ID.', example='1234'),
        modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
        owner?: string(name='Owner', description='The account ID of the task owner.', example='100'),
        periodNumber?: int32(name='PeriodNumber', description='The sequence number of the cycle. This parameter indicates the cycle of the task instance on the current day.', example='1'),
        priority?: int32(name='Priority', description='The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
        projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod', deprecated=true),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
        rerunMode?: string(name='RerunMode', description='The rerun mode.

Valid values:

*   AllDenied: The task cannot be rerun regardless of whether it is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.
*   AllAllowed: The task can be rerun regardless of whether it is successfully run or fails to run.', example='AllAllowed'),
        runNumber?: int32(name='RunNumber', description='The number of times the instance is run. By default, the value starts from 1.', example='1'),
        runtime?: {
          gateway?: string(name='Gateway', description='The host for running.', example='cn-shanghai.1.2'),
          processId?: string(name='ProcessId', description='The instance run ID.', example='T3_123'),
        }(name='Runtime', description='The runtime information about the instance.'),
        runtimeResource?: {
          cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
          image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
          resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
        }(name='RuntimeResource', description='The information about the resource group with which the instance is associated.'),
        startedTime?: long(name='StartedTime', description='The time when the instance started to run.', example='1710239005403'),
        status?: string(name='Status', description='The status of the instance.

Valid values:

*   NotRun: The instance is not run.
*   Running: The instance is running.
*   WaitTime: The instance is waiting for the scheduling time to arrive.
*   CheckingCondition: Branch conditions are being checked for the instance.
*   WaitResource: The instance is waiting for resources.
*   Failure: The instance fails to be run.
*   Success: The instance is successfully run.
*   Checking: Data quality is being checked for the instance.', example='Success'),
        stepType?: string(name='StepType', description='The dependency type.'),
        taskId?: long(name='TaskId', description='The ID of the task for which the instance is generated.', example='1234'),
        taskName?: string(name='TaskName', description='The name of the task for which the instance is generated.'),
        taskType?: string(name='TaskType', description='The type of the task for which the instance is generated.', example='ODPS_SQL'),
        timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.

Note: The value of this parameter is rounded up by hour.', example='1'),
        triggerRecurrence?: string(name='TriggerRecurrence', description='The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler.

Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
        triggerTime?: long(name='TriggerTime', description='The scheduling time.', example='1710239005403'),
        triggerType?: string(name='TriggerType', description='The method to trigger instance scheduling.

Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
        workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs.', example='1234'),
        workflowInstanceId?: long(name='WorkflowInstanceId', description='The workflow instance ID.', example='1234'),
        workflowInstanceType?: string(name='WorkflowInstanceType', description='The type of the workflow instance.

Valid values:

*   SmokeTest
*   SupplementData
*   Manual
*   ManualWorkflow
*   Normal
*   ManualFlow', example='Normal'),
        workflowName?: string(name='WorkflowName', description='The name of the workflow to which the instance belongs.'),
      }
    ](name='TaskInstances', description='The instances.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListDownstreamTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDownstreamTaskInstancesResponseBody(name='body'),
}

/**
 * @summary Queries a list of descendant instances of an instance by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDownstreamTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDownstreamTaskInstancesResponse
 */
async function listDownstreamTaskInstancesWithOptions(request: ListDownstreamTaskInstancesRequest, runtime: $RuntimeOptions): ListDownstreamTaskInstancesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDownstreamTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of descendant instances of an instance by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListDownstreamTaskInstancesRequest
 * @return ListDownstreamTaskInstancesResponse
 */
async function listDownstreamTaskInstances(request: ListDownstreamTaskInstancesRequest): ListDownstreamTaskInstancesResponse {
  var runtime = new $RuntimeOptions{};
  return listDownstreamTaskInstancesWithOptions(request, runtime);
}

model ListDownstreamTasksRequest {
  id?: long(name='Id', description='The task ID.

This parameter is required.', example='1234'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
}

model ListDownstreamTasksResponseBody = {
  pagingInfo?: {
    downstreamTasks?: [ 
      {
        dependencyType?: string(name='DependencyType', description='The dependency type.'),
        task?: {
          baselineId?: long(name='BaselineId', description='The ID of the baseline.'),
          createTime?: long(name='CreateTime'),
          createUser?: string(name='CreateUser'),
          dataSource?: {
            name?: string(name='Name'),
          }(name='DataSource', description='The information about the data source.'),
          description?: string(name='Description'),
          envType?: string(name='EnvType'),
          id?: long(name='Id'),
          instanceMode?: string(name='InstanceMode'),
          modifyTime?: long(name='ModifyTime'),
          modifyUser?: string(name='ModifyUser'),
          name?: string(name='Name'),
          owner?: string(name='Owner'),
          priority?: int32(name='Priority', description='The priority of the task. Valid values: 1 to 8.'),
          projectId?: long(name='ProjectId'),
          rerunInterval?: int32(name='RerunInterval', description='The interval between two consecutive reruns. Unit: seconds.'),
          rerunMode?: string(name='RerunMode', description='The rerun mode.'),
          rerunTimes?: int32(name='RerunTimes', description='The number of reruns.'),
          runtimeResource?: {
            cu?: string(name='Cu'),
            image?: string(name='Image'),
            resourceGroupId?: string(name='ResourceGroupId'),
          }(name='RuntimeResource', description='The configurations of the runtime environment, such as the resource group information.'),
          timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.'),
          trigger?: {
            cron?: string(name='Cron'),
            endTime?: string(name='EndTime'),
            recurrence?: string(name='Recurrence'),
            startTime?: string(name='StartTime'),
            timezone?: string(name='Timezone'),
            type?: string(name='Type'),
          }(name='Trigger', description='The method to trigger the running of the task.'),
          type?: string(name='Type', description='The type of the task.'),
          workflowId?: long(name='WorkflowId'),
        }(name='Task'),
      }
    ](name='DownstreamTasks'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    tasks?: [ 
      {
        baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
        createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
        createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
        }(name='DataSource', description='The information about the associated data source.'),
        description?: string(name='Description', description='The description of the task.', example='test'),
        envType?: string(name='EnvType'),
        id?: long(name='Id', description='The task ID.', example='1234'),
        instanceMode?: string(name='InstanceMode', example='T+1'),
        modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
        name?: string(name='Name', description='The name of the task.'),
        owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
        priority?: int32(name='Priority', description='The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
        projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod', deprecated=true),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
        rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: seconds.', example='60'),
        rerunMode?: string(name='RerunMode', description='The rerun mode.

Valid values:

*   AllDenied: The task cannot be rerun regardless of whether it is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.
*   AllAllowed: The task can be rerun regardless of whether it is successfully run or fails to run.', example='AllAllowed'),
        rerunTimes?: int32(name='RerunTimes', description='The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.', example='3'),
        runtimeResource?: {
          cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
          image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
          resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
        }(name='RuntimeResource', description='The configurations of the runtime environment, such as the resource group information.'),
        stepType?: string(name='StepType', example='Normal'),
        timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='3600'),
        trigger?: {
          cron?: string(name='Cron', description='The CRON expression of the task. This parameter takes effect only if the Type parameter is set to Scheduler.', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', description='The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='9999-01-01 00:00:00'),
          recurrence?: string(name='Recurrence', description='The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler.

Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
          startTime?: string(name='StartTime', description='The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='1970-01-01 00:00:00'),
          timezone?: string(name='Timezone', description='The time zone.', example='Asia/Shanghai'),
          type?: string(name='Type', description='The trigger type.

Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
        }(name='Trigger', description='The method to trigger task scheduling.'),
        type?: string(name='Type', description='The type of the task.', example='ODPS_SQL'),
        workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the task belongs.', example='1234'),
      }
    ](name='Tasks', description='The tasks.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListDownstreamTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDownstreamTasksResponseBody(name='body'),
}

/**
 * @summary Queries a list of descendant tasks of a task by page.
 *
 * @param request ListDownstreamTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDownstreamTasksResponse
 */
async function listDownstreamTasksWithOptions(request: ListDownstreamTasksRequest, runtime: $RuntimeOptions): ListDownstreamTasksResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDownstreamTasks',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of descendant tasks of a task by page.
 *
 * @param request ListDownstreamTasksRequest
 * @return ListDownstreamTasksResponse
 */
async function listDownstreamTasks(request: ListDownstreamTasksRequest): ListDownstreamTasksResponse {
  var runtime = new $RuntimeOptions{};
  return listDownstreamTasksWithOptions(request, runtime);
}

model ListFunctionsRequest {
  owner?: string(name='Owner', description='The ID of the owner of the UDF. This parameter specifies a filter condition.', example='110755000425XXXX'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1. Minimum value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='12345'),
  type?: string(name='Type', description='The UDF type. This parameter specifies a filter condition.

Valid values:

*   MATH: mathematical operation function
*   AGGREGATE: aggregate function
*   STRING: string processing function
*   DATE: date function
*   ANALYTIC: window function
*   OTHER: others', example='MATH'),
}

model ListFunctionsResponseBody = {
  pagingInfo?: {
    functions?: [ 
      {
        armResource?: string(name='ArmResource', description='The file resources in an Advanced RISC Machines (ARM) cluster.', example='xxx.jar,yyy.jar'),
        className?: string(name='ClassName', description='The fully qualified class name of the UDF.', example='com.demo.Main'),
        commandDescription?: string(name='CommandDescription', description='The description of the command.', example='testUdf(xx,yy)'),
        createTime?: long(name='CreateTime', description='The time when the UDF was created. This value is a UNIX timestamp.', example='1655953028000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='odps_first'),
          type?: string(name='Type', description='The type of the data source.', example='odps'),
        }(name='DataSource', description='The data source information about the UDF.'),
        databaseName?: string(name='DatabaseName', description='The name of the database. This parameter is returned for E-MapReduce (EMR) functions.', example='odps_first'),
        description?: string(name='Description', description='The overall description of the UDF.'),
        embeddedCode?: string(name='EmbeddedCode', description='The code of the embedded UDF.', example='print(\\\\"hello,world!\\\\")'),
        embeddedCodeType?: string(name='EmbeddedCodeType', description='The type of the nested code.

Valid values:

*   Python2
*   Python3
*   Java8
*   Java11
*   Java17', example='Python2'),
        embeddedResourceType?: string(name='EmbeddedResourceType', description='The type of the nested resource.

Valid values:

*   File: general resources
*   Embedded: embedded resources', example='File'),
        exampleDescription?: string(name='ExampleDescription', description='The description of the example.'),
        fileResource?: string(name='FileResource', description='The files resources.', example='xxx.jar,yyy.jar'),
        id?: long(name='Id', description='The ID of the UDF.', example='580667964888595XXXX'),
        modifyTime?: long(name='ModifyTime', description='The time when the UDF was last modified. This value is a UNIX timestamp.', example='1655953028000'),
        name?: string(name='Name', description='The name of the UDF.'),
        owner?: string(name='Owner', description='The owner of the UDF.', example='110755000425XXXX'),
        parameterDescription?: string(name='ParameterDescription', description='The description of the parameter.'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the UDF belongs.', example='307XXX'),
        returnValueDescription?: string(name='ReturnValueDescription', description='The description of the return value.'),
        runtimeResource?: {
          resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group used when you run the UDF.', example='S_resgrop_xxx'),
        }(name='RuntimeResource', description='The information about the resource group used when you run the UDF.'),
        script?: {
          id?: long(name='Id', description='The script ID.', example='652567824470354XXXX'),
          path?: string(name='Path', description='The script path.'),
          runtime?: {
            command?: string(name='Command', description='The command.', example='ODPS_FUNCTION'),
          }(name='Runtime', description='The runtime.'),
        }(name='Script', description='The script information about the UDF.'),
        type?: string(name='Type', description='The UDF type.

Valid values:

*   Math: mathematical operation function
*   Aggregate: aggregate function
*   String: string processing function
*   Date: date function
*   Analytic: window function
*   Other: other functions', example='MATH'),
      }
    ](name='Functions', description='The UDFs.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='294'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='89FB2BF0-EB00-5D03-9C34-05931001XXXX'),
}

model ListFunctionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFunctionsResponseBody(name='body'),
}

/**
 * @summary Queries a list of user-defined functions (UDFs) in DataStudio. You can also specify filter conditions to query specific UDFs.
 *
 * @param request ListFunctionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFunctionsResponse
 */
async function listFunctionsWithOptions(request: ListFunctionsRequest, runtime: $RuntimeOptions): ListFunctionsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListFunctions',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of user-defined functions (UDFs) in DataStudio. You can also specify filter conditions to query specific UDFs.
 *
 * @param request ListFunctionsRequest
 * @return ListFunctionsResponse
 */
async function listFunctions(request: ListFunctionsRequest): ListFunctionsResponse {
  var runtime = new $RuntimeOptions{};
  return listFunctionsWithOptions(request, runtime);
}

model ListNetworksRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId', description='This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
  sortBy?: string(name='SortBy', example='CreateTime Asc'),
}

model ListNetworksResponseBody = {
  pagingInfo?: {
    networkList?: [ 
      {
        createTime?: long(name='CreateTime', example='1727055811000'),
        createUser?: string(name='CreateUser', example='11075500042XXXXX'),
        id?: long(name='Id', example='1000'),
        resourceGroupId?: string(name='ResourceGroupId', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
        securityGroupId?: string(name='SecurityGroupId', example='sg-2ze13vamugr7jenXXXXX'),
        status?: string(name='Status', example='Running'),
        vpcId?: string(name='VpcId', example='vpc-m2et4f3oc8msfbccXXXXX'),
        vswitchId?: string(name='VswitchId', example='vsw-uf8usrhs7hjd9amsXXXXX'),
      }
    ](name='NetworkList'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='100'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', example='true'),
}

model ListNetworksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNetworksResponseBody(name='body'),
}

/**
 * @summary Queries a list of network resources of a serverless resource group.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListNetworksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNetworksResponse
 */
async function listNetworksWithOptions(request: ListNetworksRequest, runtime: $RuntimeOptions): ListNetworksResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListNetworks',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of network resources of a serverless resource group.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListNetworksRequest
 * @return ListNetworksResponse
 */
async function listNetworks(request: ListNetworksRequest): ListNetworksResponse {
  var runtime = new $RuntimeOptions{};
  return listNetworksWithOptions(request, runtime);
}

model ListNodeDependenciesRequest {
  id?: long(name='Id', description='The ID of the node.

This parameter is required.', example='860438872620113XXXX'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10001'),
}

model ListNodeDependenciesResponseBody = {
  pagingInfo?: {
    nodes?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the node was created. This value is a UNIX timestamp.', example='1724505917000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='odps_first'),
          type?: string(name='Type', description='The type of the data source.', example='odps'),
        }(name='DataSource', description='The information about the data source.'),
        description?: string(name='Description', description='The description of the node.'),
        id?: long(name='Id', description='The ID of the node.', example='723932906364267XXXX'),
        inputs?: {
          nodeOutputs?: [ 
            {
              data?: string(name='Data', description='The node output.', example='860438872620113XXXX'),
            }
          ](name='NodeOutputs', description='The node outputs.'),
          tables?: [ 
            {
              guid?: string(name='Guid', description='The table ID.', example='odps.autotest.test_output_table_1'),
            }
          ](name='Tables', description='The tables.'),
          variables?: [ 
            {
              artifactType?: string(name='ArtifactType', description='The artifact type.', example='Variable'),
              id?: long(name='Id', description='The variable ID.', example='543218872620113XXXX'),
              name?: string(name='Name', description='The name of the variable.', example='input'),
              node?: {
                output?: string(name='Output', description='The output of the node.', example='860438872620113XXXX'),
              }(name='Node', description='The node to which the variable belongs.'),
              scope?: string(name='Scope', description='The scope of the variable.

Valid values:

*   NodeParameter
*   NodeContext
*   Workflow
*   Workspace', example='NodeParameter'),
              type?: string(name='Type', description='The type of the variable.

Valid values:

*   NoKvVariableExpression
*   Constant
*   PassThrough
*   System
*   NodeOutput', example='Constant'),
              value?: string(name='Value', description='The value of the variable.', example='111'),
            }
          ](name='Variables', description='The variables.'),
        }(name='Inputs', description='The input of the node.'),
        modifyTime?: long(name='ModifyTime', description='The time when the node was last modified. This value is a UNIX timestamp.', example='1724505917000'),
        name?: string(name='Name', description='The name of the node.'),
        outputs?: {
          nodeOutputs?: [ 
            {
              data?: string(name='Data', description='The node output.', example='463497880880954XXXX'),
            }
          ](name='NodeOutputs', description='The node outputs.'),
          tables?: [ 
            {
              guid?: string(name='Guid', description='The table ID.', example='odps.autotest.test_output_table_1'),
            }
          ](name='Tables', description='The tables.'),
          variables?: [ 
            {
              artifactType?: string(name='ArtifactType', description='The artifact type.', example='Variable'),
              id?: long(name='Id', description='The variable ID.', example='543217824470354XXXX'),
              name?: string(name='Name', description='The name of the variable.', example='output'),
              node?: {
                output?: string(name='Output', description='The output of the node to which the variable belongs.', example='463497880880954XXXX'),
              }(name='Node', description='The node to which the variable belongs.'),
              scope?: string(name='Scope', description='The scope of the variable.

Valid values:

*   NodeParameter
*   NodeContext
*   Workflow
*   Workspace', example='NodeParameter'),
              type?: string(name='Type', description='The type of the variable.

Valid values:

*   NoKvVariableExpression
*   Constant
*   PassThrough
*   System
*   NodeOutput', example='Constant'),
              value?: string(name='Value', description='The value of the variable.', example='111'),
            }
          ](name='Variables', description='The variables.'),
        }(name='Outputs', description='The output of the node.'),
        owner?: string(name='Owner', description='The owner of the node.', example='110755000425XXXX'),
        projectId?: long(name='ProjectId', description='The ID of the workspace to which the node belongs.', example='65133'),
        recurrence?: string(name='Recurrence', description='The scheduling type.

Valid values:

*   Normal: The node is scheduled as expected.
*   Pause: The node is paused, and the running of its descendant nodes is blocked.
*   Skip: The node is dry run. The system does not actually run the node but directly prompts that the node is successfully run. The running duration of the node is 0 seconds. In addition, the node does not occupy resources or block the running of its descendant nodes.', example='Normal'),
        runtimeResource?: {
          resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='S_res_group_XXXX_XXXX'),
        }(name='RuntimeResource', description='The information about the resource group.'),
        script?: {
          id?: long(name='Id', description='The script ID.', example='853573334108680XXXX'),
          path?: string(name='Path', description='The script path.', example='root/demo'),
          runtime?: {
            command?: string(name='Command', description='The command used to distinguish node types.', example='ODPS_SQL'),
          }(name='Runtime', description='The runtime.'),
        }(name='Script', description='The script information.'),
        strategy?: {
          instanceMode?: string(name='InstanceMode', description='The instance generation mode.', example='T+1'),
          rerunInterval?: int32(name='RerunInterval', description='The rerun interval after a failure. Unit: milliseconds.', example='180000'),
          rerunMode?: string(name='RerunMode', description='The rerun mode.', example='Allowed'),
          rerunTimes?: int32(name='RerunTimes', description='The number of reruns after a failure.', example='3'),
          timeout?: int32(name='Timeout', description='The timeout period. Unit: milliseconds.', example='0'),
        }(name='Strategy', description='The scheduling policy.'),
        tags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='null'),
            value?: string(name='Value', description='The tag value', example='null'),
          }
        ](name='Tags', description='The tags. This parameter is not in use.'),
        taskId?: long(name='TaskId', description='The scheduling task ID.', example='580667964888595XXXX'),
        trigger?: {
          cron?: string(name='Cron', description='The CRON expression for scheduling.', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', description='The end time of the validity period of the scheduling. The time is in the yyyy-MM-dd HH:mm:ss format.', example='9999-01-01 00:00:00'),
          id?: long(name='Id', description='The trigger ID.', example='543680677872062XXXX'),
          startTime?: string(name='StartTime', description='The start time of the validity period of the scheduling. The time is in the yyyy-MM-dd HH:mm:ss format.', example='1970-01-01 00:00:00'),
          timezone?: string(name='Timezone', description='The time zone.', example='Asia/Shanghai'),
          type?: string(name='Type', description='The type of the trigger.

Valid values:

*   Scheduler
*   Manual
*   Streaming', example='Scheduler'),
        }(name='Trigger', description='The trigger.'),
      }
    ](name='Nodes', description='The descendant nodes.'),
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='90'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='204EAF68-CCE3-5112-8DA0-E7A60F02XXXX'),
}

model ListNodeDependenciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodeDependenciesResponseBody(name='body'),
}

/**
 * @summary Queries a list of descendant nodes of a node in DataStudio.
 *
 * @param request ListNodeDependenciesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNodeDependenciesResponse
 */
async function listNodeDependenciesWithOptions(request: ListNodeDependenciesRequest, runtime: $RuntimeOptions): ListNodeDependenciesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListNodeDependencies',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of descendant nodes of a node in DataStudio.
 *
 * @param request ListNodeDependenciesRequest
 * @return ListNodeDependenciesResponse
 */
async function listNodeDependencies(request: ListNodeDependenciesRequest): ListNodeDependenciesResponse {
  var runtime = new $RuntimeOptions{};
  return listNodeDependenciesWithOptions(request, runtime);
}

model ListNodesRequest {
  containerId?: long(name='ContainerId', description='The container ID. This parameter specifies a filter condition.', example='860438872620113XXXX'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='12345'),
  recurrence?: string(name='Recurrence', example='Normal'),
  rerunMode?: string(name='RerunMode', description='The rerun mode. Valid values:

*   Allowed: The nodes can be rerun regardless of whether they are successfully run or fail to run.
*   FailureAllowed: The nodes can be rerun only after they fail to run.
*   Denied: The nodes cannot be rerun regardless of whether they are successfully run or fail to run.', example='Allowed'),
  scene?: string(name='Scene', description='The scene of nodes. This parameter specifies a filter condition.

Valid values:

*   DATAWORKS_PROJECT
*   MANUAL_WORKFLOW
*   MANUAL_NODE', example='DATAWORKS_PROJECT'),
}

model ListNodesResponseBody = {
  pagingInfo?: {
    nodes?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the node was created. This value is a UNIX timestamp.', example='1722910655000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='odps_first'),
          type?: string(name='Type', description='The type of the data source.', example='odps'),
        }(name='DataSource', description='The information about the data source.'),
        description?: string(name='Description', description='The description of the node.'),
        id?: long(name='Id', description='The ID of the node.', example='860438872620113XXXX'),
        inputs?: {
          nodeOutputs?: [ 
            {
              data?: string(name='Data', description='The node output.', example='623731286945488XXXX'),
            }
          ](name='NodeOutputs', description='The node outputs.'),
          tables?: [ 
            {
              guid?: string(name='Guid', description='The table ID.', example='odps.autotest.test_output_table_1'),
            }
          ](name='Tables', description='The tables.'),
          variables?: [ 
            {
              artifactType?: string(name='ArtifactType', description='The artifact type.', example='Variable'),
              id?: long(name='Id', description='The variable ID.', example='543211286945488XXXX'),
              name?: string(name='Name', description='The name of the variable.', example='input'),
              node?: {
                output?: string(name='Output', description='The output of the node.', example='623731286945488XXXX'),
              }(name='Node', description='The node to which the variable belongs.'),
              scope?: string(name='Scope', description='The scope of the variable.

Valid values:

*   WorkSpace
*   NodeParameter
*   NodeContext
*   Workflow', example='NodeParameter'),
              type?: string(name='Type', description='The type of the variable.

Valid values:

*   NoKvVariableExpression
*   Constant
*   PassThrough
*   System
*   NodeOutput', example='Constant'),
              value?: string(name='Value', description='The value of the variable.', example='222'),
            }
          ](name='Variables', description='The variables.'),
        }(name='Inputs', description='The input of the node.'),
        modifyTime?: long(name='ModifyTime', description='The time when the node was last modified. This value is a UNIX timestamp.', example='1722910655000'),
        name?: string(name='Name', description='The name of the node.', example='test'),
        outputs?: {
          nodeOutputs?: [ 
            {
              data?: string(name='Data', description='The node output.', example='860438872620113XXXX'),
            }
          ](name='NodeOutputs', description='The node outputs.'),
          tables?: [ 
            {
              guid?: string(name='Guid', description='The table ID.', example='odps.autotest.test_output_table_1'),
            }
          ](name='Tables', description='The tables.'),
          variables?: [ 
            {
              artifactType?: string(name='ArtifactType', description='The artifact type.', example='Variable'),
              id?: long(name='Id', description='The variable ID.', example='623731286945488XXXX'),
              name?: string(name='Name', description='The name of the variable.', example='output'),
              node?: {
                output?: string(name='Output', description='The output of the node.', example='860438872620113XXXX'),
              }(name='Node', description='The node to which the variable belongs.'),
              scope?: string(name='Scope', description='The scope of the variable.

Valid values:

*   NodeParameter
*   NodeContext
*   Workflow
*   Workspace', example='NodeParameter'),
              type?: string(name='Type', description='The type of the variable.

Valid values:

*   NoKvVariableExpression
*   Constant
*   PassThrough
*   System
*   NodeOutput', example='Constant'),
              value?: string(name='Value', description='The value of the variable.', example='111'),
            }
          ](name='Variables', description='The variables.'),
        }(name='Outputs', description='The output of the node.'),
        owner?: string(name='Owner', description='The owner of the node.', example='110755000425XXXX'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.', example='33233'),
        recurrence?: string(name='Recurrence', description='The scheduling type.

Valid values:

*   Normal: The node is scheduled as expected.
*   Pause: The node is paused, and the running of its descendant nodes is blocked.
*   Skip: The node is dry run. The system does not actually run the node but directly prompts that the node is successfully run. The running duration of the node is 0 seconds. In addition, the node does not occupy resources or block the running of its descendant nodes.', example='Normal'),
        runtimeResource?: {
          resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='S_resgrop_xxx'),
        }(name='RuntimeResource', description='The information about the resource group.'),
        script?: {
          id?: long(name='Id', description='The script ID.', example='853573334108680XXXX'),
          path?: string(name='Path', description='The script path.', example='root/demo'),
          runtime?: {
            command?: string(name='Command', description='The command used to distinguish node types.', example='ODPS_SQL'),
          }(name='Runtime', description='The runtime.'),
        }(name='Script', description='The script information.'),
        strategy?: {
          instanceMode?: string(name='InstanceMode', description='The instance generation mode.', example='T+1'),
          rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: milliseconds.', example='180000'),
          rerunMode?: string(name='RerunMode', description='The rerun mode.', example='Allowed'),
          rerunTimes?: int32(name='RerunTimes', description='The number of reruns.', example='3'),
          timeout?: int32(name='Timeout', description='The timeout period.', example='0'),
        }(name='Strategy', description='The scheduling policy.'),
        tags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='null'),
            value?: string(name='Value', description='The tag value.', example='null'),
          }
        ](name='Tags', description='The tags. This parameter is not in use.'),
        taskId?: long(name='TaskId', description='The scheduling task ID.', example='88888888888'),
        trigger?: {
          cron?: string(name='Cron', description='The CRON expression for scheduling.', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', description='The end time of the validity period of the trigger.', example='9999-01-01 00:00:00'),
          id?: long(name='Id', description='The trigger ID.', example='543680677872062XXXX'),
          startTime?: string(name='StartTime', description='The start time of the validity period of the trigger.', example='1970-01-01 00:00:00'),
          timezone?: string(name='Timezone', description='The time zone.', example='Asia/Shanghai'),
          type?: string(name='Type', description='The type of the trigger.

Valid values:

*   Scheduler
*   Manual
*   Steaming

<!---->

*
*
*', example='Scheduler'),
        }(name='Trigger', description='The trigger.'),
      }
    ](name='Nodes', description='The nodes.'),
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='42'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2197B9C4-39CE-55EA-8EEA-FDBAE52DXXXX'),
}

model ListNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodesResponseBody(name='body'),
}

/**
 * @summary Queries a list of nodes in DataStudio. You can also specify filter conditions to query specific nodes.
 *
 * @param request ListNodesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNodesResponse
 */
async function listNodesWithOptions(request: ListNodesRequest, runtime: $RuntimeOptions): ListNodesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListNodes',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of nodes in DataStudio. You can also specify filter conditions to query specific nodes.
 *
 * @param request ListNodesRequest
 * @return ListNodesResponse
 */
async function listNodes(request: ListNodesRequest): ListNodesResponse {
  var runtime = new $RuntimeOptions{};
  return listNodesWithOptions(request, runtime);
}

model ListProjectMembersRequest {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='62136'),
  roleCodes?: [ string ](name='RoleCodes', description='The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.'),
  userIds?: [ string ](name='UserIds', description='The IDs of the accounts used by the members in the workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the IDs of the accounts used by the members in the workspace.'),
}

model ListProjectMembersShrinkRequest {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='62136'),
  roleCodesShrink?: string(name='RoleCodes', description='The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.'),
  userIdsShrink?: string(name='UserIds', description='The IDs of the accounts used by the members in the workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the IDs of the accounts used by the members in the workspace.'),
}

model ListProjectMembersResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    projectMembers?: [ 
      {
        projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='62136'),
        roles?: [ 
          {
            code?: string(name='Code', description='The code of the role.', example='role_project_guest'),
            name?: string(name='Name', description='The name of the role.'),
            type?: string(name='Type', description='The type of the role. Valid values:

*   UserCustom: custom role
*   System: built-in role', example='System'),
          }
        ](name='Roles', description='The roles that are assigned to the member.'),
        status?: string(name='Status', description='The status of the member. Valid values:

*   Normal
*   Forbidden', example='Normal'),
        userId?: string(name='UserId', description='The ID of the account used by the member.', example='123422344899'),
      }
    ](name='ProjectMembers', description='The members in the workspace.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='12'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='9FBBBB1F-DD5E-5D8E-8F50-37F77460F056'),
}

model ListProjectMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectMembersResponseBody(name='body'),
}

/**
 * @summary Queries details about members in a workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq ListProjectMembersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProjectMembersResponse
 */
async function listProjectMembersWithOptions(tmpReq: ListProjectMembersRequest, runtime: $RuntimeOptions): ListProjectMembersResponse {
  tmpReq.validate();
  var request = new ListProjectMembersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.roleCodes)) {
    request.roleCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roleCodes, 'RoleCodes', 'json');
  }
  if (!$isNull(tmpReq.userIds)) {
    request.userIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userIds, 'UserIds', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.roleCodesShrink)) {
    body['RoleCodes'] = request.roleCodesShrink;
  }
  if (!$isNull(request.userIdsShrink)) {
    body['UserIds'] = request.userIdsShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListProjectMembers',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries details about members in a workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListProjectMembersRequest
 * @return ListProjectMembersResponse
 */
async function listProjectMembers(request: ListProjectMembersRequest): ListProjectMembersResponse {
  var runtime = new $RuntimeOptions{};
  return listProjectMembersWithOptions(request, runtime);
}

model ListProjectRolesRequest {
  codes?: [ string ](name='Codes', description='The codes of roles in the DataWorks workspace.'),
  names?: [ string ](name='Names', description='The names of roles in the DataWorks workspace.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='21229'),
  type?: string(name='Type', description='The type of the role in the DataWorks workspace.

Valid values:

*   UserCustom: user-defined role
*   System: system role', example='System'),
}

model ListProjectRolesShrinkRequest {
  codesShrink?: string(name='Codes', description='The codes of roles in the DataWorks workspace.'),
  namesShrink?: string(name='Names', description='The names of roles in the DataWorks workspace.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='21229'),
  type?: string(name='Type', description='The type of the role in the DataWorks workspace.

Valid values:

*   UserCustom: user-defined role
*   System: system role', example='System'),
}

model ListProjectRolesResponseBody = {
  pagingInfo?: {
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    projectRoles?: [ 
      {
        code?: string(name='Code', description='The code of the role in the DataWorks workspace.', example='role_project_guest'),
        name?: string(name='Name', description='The name of the role in the DataWorks workspace.'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='21229'),
        type?: string(name='Type', description='The type of the role in the DataWorks workspace.', example='System'),
      }
    ](name='ProjectRoles', description='The roles in the DataWorks workspace.'),
    totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='42'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='61649187-0BCF-5E75-8D4B-64FDBEBBB447'),
}

model ListProjectRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectRolesResponseBody(name='body'),
}

/**
 * @summary Queries the information about roles in a DataWorks workspace by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq ListProjectRolesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProjectRolesResponse
 */
async function listProjectRolesWithOptions(tmpReq: ListProjectRolesRequest, runtime: $RuntimeOptions): ListProjectRolesResponse {
  tmpReq.validate();
  var request = new ListProjectRolesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.codes)) {
    request.codesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.codes, 'Codes', 'json');
  }
  if (!$isNull(tmpReq.names)) {
    request.namesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.names, 'Names', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.codesShrink)) {
    body['Codes'] = request.codesShrink;
  }
  if (!$isNull(request.namesShrink)) {
    body['Names'] = request.namesShrink;
  }
  if (!$isNull(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListProjectRoles',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about roles in a DataWorks workspace by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListProjectRolesRequest
 * @return ListProjectRolesResponse
 */
async function listProjectRoles(request: ListProjectRolesRequest): ListProjectRolesResponse {
  var runtime = new $RuntimeOptions{};
  return listProjectRolesWithOptions(request, runtime);
}

model ListProjectsRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='The ID of the Alibaba Cloud resource group to which the workspaces belong. You can log on to the [Resource Management console](https://resourcemanager.console.aliyun.com/resource-groups) and go to the Resource Group page to query the ID.', example='rg-acfmzbn7pti3zff'),
  aliyunResourceTags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='batch'),
      value?: string(name='Value', description='The tag value.', example='blue'),
    }
  ](name='AliyunResourceTags', description='The tags.'),
  devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', description='Specifies whether the development environment is enabled. Valid values:

*   true: The development environment is enabled. In this case, the development environment is isolated from the production environment in a workspace.
*   false: The development environment is disabled. In this case, only the production environment is used in a workspace.', example='true'),
  devRoleDisabled?: boolean(name='DevRoleDisabled', description='Specifies whether the Develop role is disabled. Valid values:

*   false (default)
*   true', example='false'),
  ids?: [ long ](name='Ids', description='The IDs of the DataWorks workspaces.'),
  names?: [ string ](name='Names', description='The names of the DataWorks workspaces.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  paiTaskEnabled?: boolean(name='PaiTaskEnabled', description='Specifies whether scheduling of Platform for AI (PAI) tasks is enabled. Valid values:

*   true: Scheduling of PAI tasks is enabled. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
*   false: Scheduling of PAI tasks is disabled.', example='true'),
  status?: string(name='Status', description='The status of the workspaces. Valid values:

*   Available
*   Initializing
*   InitFailed
*   Forbidden
*   Deleting
*   DeleteFailed
*   Frozen
*   Updating
*   UpdateFailed

<!---->

*
*
*
*
*
*
*
*
*', example='Available'),
}

model ListProjectsShrinkRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='The ID of the Alibaba Cloud resource group to which the workspaces belong. You can log on to the [Resource Management console](https://resourcemanager.console.aliyun.com/resource-groups) and go to the Resource Group page to query the ID.', example='rg-acfmzbn7pti3zff'),
  aliyunResourceTagsShrink?: string(name='AliyunResourceTags', description='The tags.'),
  devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', description='Specifies whether the development environment is enabled. Valid values:

*   true: The development environment is enabled. In this case, the development environment is isolated from the production environment in a workspace.
*   false: The development environment is disabled. In this case, only the production environment is used in a workspace.', example='true'),
  devRoleDisabled?: boolean(name='DevRoleDisabled', description='Specifies whether the Develop role is disabled. Valid values:

*   false (default)
*   true', example='false'),
  idsShrink?: string(name='Ids', description='The IDs of the DataWorks workspaces.'),
  namesShrink?: string(name='Names', description='The names of the DataWorks workspaces.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  paiTaskEnabled?: boolean(name='PaiTaskEnabled', description='Specifies whether scheduling of Platform for AI (PAI) tasks is enabled. Valid values:

*   true: Scheduling of PAI tasks is enabled. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
*   false: Scheduling of PAI tasks is disabled.', example='true'),
  status?: string(name='Status', description='The status of the workspaces. Valid values:

*   Available
*   Initializing
*   InitFailed
*   Forbidden
*   Deleting
*   DeleteFailed
*   Frozen
*   Updating
*   UpdateFailed

<!---->

*
*
*
*
*
*
*
*
*', example='Available'),
}

model ListProjectsResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='10'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='1'),
    projects?: [ 
      {
        aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='The ID of the Alibaba Cloud resource group to which the workspace belongs.', example='rg-acfmzbn7pti3zfa'),
        aliyunResourceTags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='batch'),
            value?: string(name='Value', description='The tag value.', example='blue'),
          }
        ](name='AliyunResourceTags', description='The tags.'),
        description?: string(name='Description', description='The description of the workspace.'),
        devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', description='Indicates whether the development environment is enabled. Valid values:

*   true: The development environment is enabled. In this case, the development environment is isolated from the production environment in the workspace.
*   false: The development environment is disabled. In this case, only the production environment is used in the workspace.', example='true'),
        devRoleDisabled?: boolean(name='DevRoleDisabled', description='Indicates whether the Develop role is disabled. Valid values:

*   false (default)
*   true', example='false'),
        displayName?: string(name='DisplayName', description='The display name of the workspace.'),
        id?: long(name='Id', description='The workspace ID.', example='123456'),
        name?: string(name='Name', description='The name of the workspace.', example='sora_finance'),
        owner?: string(name='Owner', description='The ID of the Alibaba Cloud account to which the workspace belongs.', example='123532153125'),
        paiTaskEnabled?: boolean(name='PaiTaskEnabled', description='Indicates whether scheduling of PAI tasks is enabled. Valid values:

*   true: Scheduling of PAI tasks is enabled. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
*   false: Scheduling of PAI tasks is disabled.', example='true'),
        status?: string(name='Status', description='The status of the workspace. Valid values:

*   Available
*   Initializing
*   InitFailed
*   Forbidden
*   Deleting
*   DeleteFailed
*   Frozen
*   Updating
*   UpdateFailed', example='Available'),
      }
    ](name='Projects', description='The workspaces.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6D24AD9A-652F-59E2-AC1F-05029300F8A4'),
}

model ListProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectsResponseBody(name='body'),
}

/**
 * @summary Queries a list of DataWorks workspaces of the tenant to which your account belongs.
 *
 * @param tmpReq ListProjectsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProjectsResponse
 */
async function listProjectsWithOptions(tmpReq: ListProjectsRequest, runtime: $RuntimeOptions): ListProjectsResponse {
  tmpReq.validate();
  var request = new ListProjectsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.aliyunResourceTags)) {
    request.aliyunResourceTagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.aliyunResourceTags, 'AliyunResourceTags', 'json');
  }
  if (!$isNull(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  if (!$isNull(tmpReq.names)) {
    request.namesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.names, 'Names', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.aliyunResourceGroupId)) {
    body['AliyunResourceGroupId'] = request.aliyunResourceGroupId;
  }
  if (!$isNull(request.aliyunResourceTagsShrink)) {
    body['AliyunResourceTags'] = request.aliyunResourceTagsShrink;
  }
  if (!$isNull(request.devEnvironmentEnabled)) {
    body['DevEnvironmentEnabled'] = request.devEnvironmentEnabled;
  }
  if (!$isNull(request.devRoleDisabled)) {
    body['DevRoleDisabled'] = request.devRoleDisabled;
  }
  if (!$isNull(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  if (!$isNull(request.namesShrink)) {
    body['Names'] = request.namesShrink;
  }
  if (!$isNull(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.paiTaskEnabled)) {
    body['PaiTaskEnabled'] = request.paiTaskEnabled;
  }
  if (!$isNull(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListProjects',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of DataWorks workspaces of the tenant to which your account belongs.
 *
 * @param request ListProjectsRequest
 * @return ListProjectsResponse
 */
async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  var runtime = new $RuntimeOptions{};
  return listProjectsWithOptions(request, runtime);
}

model ListResourceGroupsRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', example='rg-aek2kqofrgXXXXX'),
  aliyunResourceTags?: [ 
    {
      key?: string(name='Key', example='key'),
      value?: string(name='Value', example='value'),
    }
  ](name='AliyunResourceTags'),
  name?: string(name='Name', description='The name of a resource group, which is used for fuzzy match.', example='Resource'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='100'),
  paymentType?: string(name='PaymentType', description='The billing method of resource groups. Valid values:

*   PrePaid
*   PostPaid', example='PrePaid'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='1000'),
  resourceGroupTypes?: [ string ](name='ResourceGroupTypes', description='The types of resource groups to query. If you do not configure this parameter, only serverless resource groups are returned by default.'),
  sortBy?: string(name='SortBy', description='The fields used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:

*   Id (Desc/Asc): the resource group ID
*   Name (Desc/Asc): the name of the resource group
*   Remark (Desc/Asc): the remarks of the resource group
*   Type (Desc/Asc): the type of the resource group
*   Status (Desc/Asc): the status of the resource group
*   Spec (Desc/Asc): the specifications of the resource group
*   CreateUser (Desc/Asc): the creator of the resource group
*   CreateTime (Desc/Asc): the time when the route is created

Default value: CreateTime Asc', example='CreateTime Asc'),
  statuses?: [ string ](name='Statuses', description='The statuses of resource groups.'),
}

model ListResourceGroupsShrinkRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', example='rg-aek2kqofrgXXXXX'),
  aliyunResourceTagsShrink?: string(name='AliyunResourceTags'),
  name?: string(name='Name', description='The name of a resource group, which is used for fuzzy match.', example='Resource'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='100'),
  paymentType?: string(name='PaymentType', description='The billing method of resource groups. Valid values:

*   PrePaid
*   PostPaid', example='PrePaid'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.', example='1000'),
  resourceGroupTypesShrink?: string(name='ResourceGroupTypes', description='The types of resource groups to query. If you do not configure this parameter, only serverless resource groups are returned by default.'),
  sortBy?: string(name='SortBy', description='The fields used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:

*   Id (Desc/Asc): the resource group ID
*   Name (Desc/Asc): the name of the resource group
*   Remark (Desc/Asc): the remarks of the resource group
*   Type (Desc/Asc): the type of the resource group
*   Status (Desc/Asc): the status of the resource group
*   Spec (Desc/Asc): the specifications of the resource group
*   CreateUser (Desc/Asc): the creator of the resource group
*   CreateTime (Desc/Asc): the time when the route is created

Default value: CreateTime Asc', example='CreateTime Asc'),
  statusesShrink?: string(name='Statuses', description='The statuses of resource groups.'),
}

model ListResourceGroupsResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='100'),
    resourceGroupList?: [ 
      {
        aliyunResourceGroupId?: string(name='AliyunResourceGroupId', example='rg-aek2kqofrgXXXXX'),
        createTime?: long(name='CreateTime', example='1727055811000'),
        createUser?: string(name='CreateUser', example='11075500042XXXXX'),
        defaultVpcId?: string(name='DefaultVpcId', example='vpc-m2et4f3oc8msfbccXXXXX'),
        defaultVswicthId?: string(name='DefaultVswicthId', example='vsw-uf8usrhs7hjd9amsXXXXX'),
        id?: string(name='Id', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
        name?: string(name='Name', example='common_resource_group'),
        orderInstanceId?: string(name='OrderInstanceId', example='c442b330-3b10-4584-959e-736e4edXXXXX'),
        paymentType?: string(name='PaymentType', description='The billing method of the resource group. Valid values: PrePaid and PostPaid. The value PrePaid indicates the subscription billing method, and the value PostPaid indicates the pay-as-you-go billing method.', example='PrePaid'),
        remark?: string(name='Remark', example='创建用于普通任务的通用资源组'),
        resourceGroupType?: string(name='ResourceGroupType', description='The type of the resource group. Valid values:

*   CommonV2: serverless resource group
*   ExclusiveDataIntegration: exclusive resource group for Data Integration
*   ExclusiveScheduler: exclusive resource group for scheduling
*   ExclusiveDataService: exclusive resource group for DataService Studio', example='CommonV2'),
        spec?: {
          amount?: int32(name='Amount', example='1'),
          standard?: string(name='Standard', example='2CU'),
        }(name='Spec'),
        status?: string(name='Status', description='The status of the resource group. Valid values:

*   Normal: The resource group is running or in use.
*   Stop: The resource group is expired.
*   Deleted: The resource group is released or destroyed.
*   Creating: The resource group is being started.
*   CreateFailed: The resource group fails to be started.
*   Updating: The resource group is being scaled in or out, or the configurations of the resource group are being changed.
*   UpdateFailed: The resource group fails to be scaled out or upgraded.
*   Deleting: The resource group is being released or destroyed.
*   DeleteFailed: The resource group fails to be released or destroyed.
*   Timeout: The operations that are performed on the resource group time out.', example='Normal'),
      }
    ](name='ResourceGroupList', description='The resource groups returned.'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model ListResourceGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourceGroupsResponseBody(name='body'),
}

/**
 * @summary Queries a list of resource groups.
 *
 * @param tmpReq ListResourceGroupsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListResourceGroupsResponse
 */
async function listResourceGroupsWithOptions(tmpReq: ListResourceGroupsRequest, runtime: $RuntimeOptions): ListResourceGroupsResponse {
  tmpReq.validate();
  var request = new ListResourceGroupsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.aliyunResourceTags)) {
    request.aliyunResourceTagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.aliyunResourceTags, 'AliyunResourceTags', 'json');
  }
  if (!$isNull(tmpReq.resourceGroupTypes)) {
    request.resourceGroupTypesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceGroupTypes, 'ResourceGroupTypes', 'json');
  }
  if (!$isNull(tmpReq.statuses)) {
    request.statusesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.statuses, 'Statuses', 'json');
  }
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListResourceGroups',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of resource groups.
 *
 * @param request ListResourceGroupsRequest
 * @return ListResourceGroupsResponse
 */
async function listResourceGroups(request: ListResourceGroupsRequest): ListResourceGroupsResponse {
  var runtime = new $RuntimeOptions{};
  return listResourceGroupsWithOptions(request, runtime);
}

model ListResourcesRequest {
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the workspace administrator. You can log on to the Alibaba Cloud Management Console and view the ID on the Security Settings page.', example='110755000425XXXX'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10002'),
  type?: string(name='Type', description='The resource type. This parameter specifies a filter condition.

Valid values:

*   Python
*   Jar
*   Archive
*   File', example='python'),
}

model ListResourcesResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    resources?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the file resource was created. This value is a UNIX timestamp.', example='1724505917000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='odps_first'),
          type?: string(name='Type', description='The type of the data source.', example='odps'),
        }(name='DataSource', description='The information about the data source.'),
        id?: long(name='Id', description='The ID of the file resource.', example='631478864897630XXXX'),
        modifyTime?: long(name='ModifyTime', description='The times when the file resource was last modified. This value is a UNIX timestamp.', example='1724505917000'),
        name?: string(name='Name', description='The name of the file resource.', example='math.py'),
        owner?: string(name='Owner', description='The owner of the file resource.', example='110755000425XXXX'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.', example='344247'),
        script?: {
          id?: long(name='Id', description='The script ID.', example='123348864897630XXXX'),
          path?: string(name='Path', description='The script path.', example='root/demo'),
          runtime?: {
            command?: string(name='Command', description='The command used to distinguish file resource types.', example='ODPS_PYTHON'),
          }(name='Runtime', description='The runtime.'),
        }(name='Script', description='The script information.'),
        sourcePath?: string(name='SourcePath', description='The path of the source of the file resource. If the SourecType parameter is set to Local, this parameter is left empty.', example='XXX/unknown/ide/1/XXX/20240820200851_963a9da676de44ef8d06a6576a8c4d6a.py'),
        sourceType?: string(name='SourceType', description='The storage type of the source of the file resource.

Valid values:

*   Local
*   Oss', example='local'),
        targetPath?: string(name='TargetPath', description='The storage path of the destination of the file resource.', example='XXX/unknown/ide/1/XXX/20240820200851_963a9da676de44ef8d06a6576a8c4d6a.py'),
        targetType?: string(name='TargetType', description='The storage type of the destination of the file resource.

Valid values:

*   Gateway
*   Oss
*   Hdfs', example='oss'),
        type?: string(name='Type', description='The type of the file resource.

Valid values:

*   Python
*   Jar
*   Archive
*   File', example='jar'),
      }
    ](name='Resources', description='The file resources.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='131'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='99EBE7CF-69C0-5089-BE3E-79563C31XXXX'),
}

model ListResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourcesResponseBody(name='body'),
}

/**
 * @summary Queries a list of file resources in DataStudio. You can also specify filter conditions to query specific file resources.
 *
 * @param request ListResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListResourcesResponse
 */
async function listResourcesWithOptions(request: ListResourcesRequest, runtime: $RuntimeOptions): ListResourcesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListResources',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of file resources in DataStudio. You can also specify filter conditions to query specific file resources.
 *
 * @param request ListResourcesRequest
 * @return ListResourcesResponse
 */
async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  var runtime = new $RuntimeOptions{};
  return listResourcesWithOptions(request, runtime);
}

model ListRoutesRequest {
  networkId?: long(name='NetworkId', description='This parameter is required.', example='1000'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='100'),
  sortBy?: string(name='SortBy', example='CreateTime Asc'),
}

model ListRoutesResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='100'),
    routeList?: [ 
      {
        createTime?: long(name='CreateTime', example='1727055811000'),
        destinationCidr?: string(name='DestinationCidr', example='192.168.0.0/16'),
        id?: long(name='Id', example='1000'),
        networkId?: long(name='NetworkId', example='1000'),
        resourceGroupId?: string(name='ResourceGroupId', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
        resourceId?: string(name='ResourceId', example='ns-679XXXXXX'),
      }
    ](name='RouteList'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListRoutesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRoutesResponseBody(name='body'),
}

/**
 * @summary 获取网络资源的路由列表。
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListRoutesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRoutesResponse
 */
async function listRoutesWithOptions(request: ListRoutesRequest, runtime: $RuntimeOptions): ListRoutesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListRoutes',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取网络资源的路由列表。
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListRoutesRequest
 * @return ListRoutesResponse
 */
async function listRoutes(request: ListRoutesRequest): ListRoutesResponse {
  var runtime = new $RuntimeOptions{};
  return listRoutesWithOptions(request, runtime);
}

model ListTaskInstanceOperationLogsRequest {
  date?: long(name='Date', description='The operation date, accurate to the day. The default value is the current day. You can query only the operation logs generated within the previous 31 days.', example='1710239005403'),
  id?: long(name='Id', description='The instance ID.

This parameter is required.', example='1234'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
}

model ListTaskInstanceOperationLogsResponseBody = {
  pagingInfo?: {
    operationLogs?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the operation log was generated.', example='1710239005403'),
        operationContent?: string(name='OperationContent', description='The operation content.'),
        operationSeq?: long(name='OperationSeq', description='The serial number of the operation.', example='1111'),
        taskInstanceId?: long(name='TaskInstanceId', description='The ID of the instance on which the operation was performed.', example='1234'),
        user?: string(name='User', description='The account ID of the operator.', example='1000'),
      }
    ](name='OperationLogs', description='The operation logs.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListTaskInstanceOperationLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskInstanceOperationLogsResponseBody(name='body'),
}

/**
 * @summary Queries a list of operation logs of an instance by page.
 *
 * @description This API operation is available for all DataWorks editions.
 * You can call this operation to query only the operation logs generated within the previous 31 days.
 *
 * @param request ListTaskInstanceOperationLogsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTaskInstanceOperationLogsResponse
 */
async function listTaskInstanceOperationLogsWithOptions(request: ListTaskInstanceOperationLogsRequest, runtime: $RuntimeOptions): ListTaskInstanceOperationLogsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListTaskInstanceOperationLogs',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of operation logs of an instance by page.
 *
 * @description This API operation is available for all DataWorks editions.
 * You can call this operation to query only the operation logs generated within the previous 31 days.
 *
 * @param request ListTaskInstanceOperationLogsRequest
 * @return ListTaskInstanceOperationLogsResponse
 */
async function listTaskInstanceOperationLogs(request: ListTaskInstanceOperationLogsRequest): ListTaskInstanceOperationLogsResponse {
  var runtime = new $RuntimeOptions{};
  return listTaskInstanceOperationLogsWithOptions(request, runtime);
}

model ListTaskInstancesRequest {
  bizdate?: long(name='Bizdate', description='The data timestamp.

This parameter is required.', example='1710239005403'),
  id?: long(name='Id', description='The ID of the instance. The instance may be rerun. If the instance is rerun and you configure this parameter, the system returns the historical information of the instance, including the rerun information. You can use the RunNumber parameter to distinguish each entry in the historical information.', example='1234'),
  ids?: [ long ](name='Ids', description='The IDs of the instances. You can query multiple instances at a time by instance ID.'),
  owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='100'),
  runtimeResource?: string(name='RuntimeResource', description='The information about the resource group. Set this parameter to the identifier of a resource group for scheduling.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
  sortBy?: string(name='SortBy', description='The field used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:

*   `TriggerTime (Desc/Asc)`

*   `StartedTime (Desc/Asc)`

*   `FinishedTime (Desc/Asc)`

*   `CreateTime (Desc/Asc)`

*   `Id (Desc/Asc)`

    Default value: `Id Desc`.', example='Id Desc'),
  taskId?: long(name='TaskId', description='The ID of the task for which the instance is generated.', example='1234'),
  taskIds?: [ long ](name='TaskIds', description='The IDs of the tasks. You can query multiple instances at a time by task ID.'),
  taskName?: string(name='TaskName', description='The name of the task. Fuzzy match is supported.'),
  taskType?: string(name='TaskType', description='The type of the task for which the instance is generated.', example='ODPS_SQL'),
  triggerRecurrence?: string(name='TriggerRecurrence', description='The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler. Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
  triggerType?: string(name='TriggerType', description='The trigger type. Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Normal'),
  workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs.', example='1234'),
  workflowInstanceId?: long(name='WorkflowInstanceId', description='The workflow instance ID.', example='1234'),
  workflowInstanceType?: string(name='WorkflowInstanceType', description='The type of the workflow instance. Valid values:

*   SmokeTest
*   Manual
*   SupplementData
*   ManualWorkflow
*   Normal', example='Normal'),
}

model ListTaskInstancesShrinkRequest {
  bizdate?: long(name='Bizdate', description='The data timestamp.

This parameter is required.', example='1710239005403'),
  id?: long(name='Id', description='The ID of the instance. The instance may be rerun. If the instance is rerun and you configure this parameter, the system returns the historical information of the instance, including the rerun information. You can use the RunNumber parameter to distinguish each entry in the historical information.', example='1234'),
  idsShrink?: string(name='Ids', description='The IDs of the instances. You can query multiple instances at a time by instance ID.'),
  owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='100'),
  runtimeResource?: string(name='RuntimeResource', description='The information about the resource group. Set this parameter to the identifier of a resource group for scheduling.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
  sortBy?: string(name='SortBy', description='The field used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:

*   `TriggerTime (Desc/Asc)`

*   `StartedTime (Desc/Asc)`

*   `FinishedTime (Desc/Asc)`

*   `CreateTime (Desc/Asc)`

*   `Id (Desc/Asc)`

    Default value: `Id Desc`.', example='Id Desc'),
  taskId?: long(name='TaskId', description='The ID of the task for which the instance is generated.', example='1234'),
  taskIdsShrink?: string(name='TaskIds', description='The IDs of the tasks. You can query multiple instances at a time by task ID.'),
  taskName?: string(name='TaskName', description='The name of the task. Fuzzy match is supported.'),
  taskType?: string(name='TaskType', description='The type of the task for which the instance is generated.', example='ODPS_SQL'),
  triggerRecurrence?: string(name='TriggerRecurrence', description='The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler. Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
  triggerType?: string(name='TriggerType', description='The trigger type. Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Normal'),
  workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs.', example='1234'),
  workflowInstanceId?: long(name='WorkflowInstanceId', description='The workflow instance ID.', example='1234'),
  workflowInstanceType?: string(name='WorkflowInstanceType', description='The type of the workflow instance. Valid values:

*   SmokeTest
*   Manual
*   SupplementData
*   ManualWorkflow
*   Normal', example='Normal'),
}

model ListTaskInstancesResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    taskInstances?: [ 
      {
        baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
        bizdate?: long(name='Bizdate', description='The data timestamp.', example='1710239005403'),
        createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
        createUser?: string(name='CreateUser', description='The account ID of the user who creates the instance.', example='1000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
        }(name='DataSource', description='The information about the associated data source.'),
        description?: string(name='Description', description='The description.', example='test'),
        finishedTime?: long(name='FinishedTime', description='The time when the instance finished running.', example='1710239005403'),
        id?: long(name='Id', description='The instance ID.', example='1234'),
        modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', description='The account ID of the user who modifies the instance.', example='1000'),
        owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
        periodNumber?: int32(name='PeriodNumber', description='The sequence number of the cycle. This parameter indicates the cycle of the task instance on the current day.', example='1'),
        priority?: int32(name='Priority', description='The priority of the task. Minimum value: 1. Maximum value: 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
        projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
        projectId?: long(name='ProjectId', description='The DataWorks workspace ID.', example='100'),
        rerunMode?: string(name='RerunMode', description='The rerun mode

Valid values:

*   AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.
*   AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to run.', example='AllAllowed'),
        runNumber?: int32(name='RunNumber', description='The number of times the task is run. By default, the value starts from 1.', example='1'),
        runtime?: {
          gateway?: string(name='Gateway', description='The host for running.', example='cn-shanghai.1.2'),
          processId?: string(name='ProcessId', description='The instance run ID.', example='T3_123'),
        }(name='Runtime', description='The runtime information about the instance.'),
        runtimeResource?: {
          cu?: string(name='Cu', description='The default number of CUs configured for task running.', example='0.25'),
          image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
          resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
        }(name='RuntimeResource', description='The information about the resource group with which the instance is associated.'),
        startedTime?: long(name='StartedTime', description='The time when the instance started to run.', example='1710239005403'),
        status?: string(name='Status', description='The status of the instance.

Valid values:

*   NotRun: The instance is not run.
*   Running: The instance is running.
*   WaitTime: The instance is waiting for the scheduling time to arrive.
*   CheckingCondition: Branch conditions are being checked for the instance.
*   WaitResource: The instance is waiting for resources.
*   Failure: The instance fails to be run.
*   Success: The instance is successfully run.
*   Checking: Data quality is being checked for the instance.', example='Success'),
        taskId?: long(name='TaskId', description='The ID of the task for which the instance is generated.', example='1234'),
        taskName?: string(name='TaskName', description='The name of the task for which the instance is generated.'),
        taskType?: string(name='TaskType', description='The type of the task for which the instance is generated.', example='ODPS_SQL'),
        timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.

Note: The value of this parameter is rounded up by hour.', example='1'),
        triggerRecurrence?: string(name='TriggerRecurrence', description='The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler.

Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
        triggerTime?: long(name='TriggerTime', description='The scheduling time.', example='1710239005403'),
        triggerType?: string(name='TriggerType', description='The trigger type.

Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
        workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs.', example='1234'),
        workflowInstanceId?: long(name='WorkflowInstanceId', description='The workflow instance ID.', example='1234'),
        workflowInstanceType?: string(name='WorkflowInstanceType', description='The type of the workflow instance.

Valid values:

*   SmokeTest
*   SupplementData
*   Manual
*   ManualWorkflow
*   Normal
*   ManualFlow', example='Normal'),
        workflowName?: string(name='WorkflowName', description='The name of the workflow to which the instance belongs.'),
      }
    ](name='TaskInstances', description='The instances.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskInstancesResponseBody(name='body'),
}

/**
 * @summary Queries a list of instances. You can also specify filter conditions to query specific instances.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq ListTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTaskInstancesResponse
 */
async function listTaskInstancesWithOptions(tmpReq: ListTaskInstancesRequest, runtime: $RuntimeOptions): ListTaskInstancesResponse {
  tmpReq.validate();
  var request = new ListTaskInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  if (!$isNull(tmpReq.taskIds)) {
    request.taskIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.taskIds, 'TaskIds', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.bizdate)) {
    body['Bizdate'] = request.bizdate;
  }
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  if (!$isNull(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!$isNull(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.runtimeResource)) {
    body['RuntimeResource'] = request.runtimeResource;
  }
  if (!$isNull(request.sortBy)) {
    body['SortBy'] = request.sortBy;
  }
  if (!$isNull(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!$isNull(request.taskIdsShrink)) {
    body['TaskIds'] = request.taskIdsShrink;
  }
  if (!$isNull(request.taskName)) {
    body['TaskName'] = request.taskName;
  }
  if (!$isNull(request.taskType)) {
    body['TaskType'] = request.taskType;
  }
  if (!$isNull(request.triggerRecurrence)) {
    body['TriggerRecurrence'] = request.triggerRecurrence;
  }
  if (!$isNull(request.triggerType)) {
    body['TriggerType'] = request.triggerType;
  }
  if (!$isNull(request.workflowId)) {
    body['WorkflowId'] = request.workflowId;
  }
  if (!$isNull(request.workflowInstanceId)) {
    body['WorkflowInstanceId'] = request.workflowInstanceId;
  }
  if (!$isNull(request.workflowInstanceType)) {
    body['WorkflowInstanceType'] = request.workflowInstanceType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of instances. You can also specify filter conditions to query specific instances.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListTaskInstancesRequest
 * @return ListTaskInstancesResponse
 */
async function listTaskInstances(request: ListTaskInstancesRequest): ListTaskInstancesResponse {
  var runtime = new $RuntimeOptions{};
  return listTaskInstancesWithOptions(request, runtime);
}

model ListTaskOperationLogsRequest {
  date?: long(name='Date', description='The operation date, accurate to the day. The default value is the current day. You can query only the operation logs generated within the previous 31 days.', example='1710239005403'),
  id?: long(name='Id', description='The task ID.

This parameter is required.', example='1234'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
}

model ListTaskOperationLogsResponseBody = {
  pagingInfo?: {
    operationLogs?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the operation log was generated.', example='1710239005403'),
        operationContent?: string(name='OperationContent', description='The operation content.'),
        operationSeq?: long(name='OperationSeq', description='The serial number of the operation.', example='1111'),
        taskId?: long(name='TaskId', description='The ID of the task on which the operation was performed.', example='1234'),
        user?: string(name='User', description='The account ID of the operator.', example='1000'),
      }
    ](name='OperationLogs', description='The operation logs.'),
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListTaskOperationLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskOperationLogsResponseBody(name='body'),
}

/**
 * @summary Queries a list of operation logs of a task by page.
 *
 * @description This API operation is available for all DataWorks editions.
 * You can call this operation to query only the operation logs generated within the previous 31 days.
 *
 * @param request ListTaskOperationLogsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTaskOperationLogsResponse
 */
async function listTaskOperationLogsWithOptions(request: ListTaskOperationLogsRequest, runtime: $RuntimeOptions): ListTaskOperationLogsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListTaskOperationLogs',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of operation logs of a task by page.
 *
 * @description This API operation is available for all DataWorks editions.
 * You can call this operation to query only the operation logs generated within the previous 31 days.
 *
 * @param request ListTaskOperationLogsRequest
 * @return ListTaskOperationLogsResponse
 */
async function listTaskOperationLogs(request: ListTaskOperationLogsRequest): ListTaskOperationLogsResponse {
  var runtime = new $RuntimeOptions{};
  return listTaskOperationLogsWithOptions(request, runtime);
}

model ListTasksRequest {
  ids?: [ long ](name='Ids'),
  name?: string(name='Name', description='The name of the task. Fuzzy match is supported.'),
  owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='100'),
  runtimeResource?: string(name='RuntimeResource', description='The information about the resource group. Set this parameter to the ID of a resource group for scheduling.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
  sortBy?: string(name='SortBy', description='The field that is used to sort tasks. This parameter is configured in the format of "Sorting field Sorting order". You can set the sorting order to Desc or Asc. If you do not specify the sorting order, Asc is used by default. Valid values:

*   `ModifyTime (Desc/Asc)`

*   `CreateTime (Desc/Asc)`

*   `Id (Desc/Asc)`

    Default value: `Id Desc`.', example='Id Desc'),
  taskType?: string(name='TaskType', description='The type of the task.', example='ODPS_SQL'),
  triggerRecurrence?: string(name='TriggerRecurrence', description='The running mode of the task after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler.

Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
  triggerType?: string(name='TriggerType', description='The trigger type.

Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
  workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the task belongs.', example='1234'),
}

model ListTasksShrinkRequest {
  idsShrink?: string(name='Ids'),
  name?: string(name='Name', description='The name of the task. Fuzzy match is supported.'),
  owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
  projectId?: long(name='ProjectId', description='The workspace ID.

This parameter is required.', example='100'),
  runtimeResource?: string(name='RuntimeResource', description='The information about the resource group. Set this parameter to the ID of a resource group for scheduling.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
  sortBy?: string(name='SortBy', description='The field that is used to sort tasks. This parameter is configured in the format of "Sorting field Sorting order". You can set the sorting order to Desc or Asc. If you do not specify the sorting order, Asc is used by default. Valid values:

*   `ModifyTime (Desc/Asc)`

*   `CreateTime (Desc/Asc)`

*   `Id (Desc/Asc)`

    Default value: `Id Desc`.', example='Id Desc'),
  taskType?: string(name='TaskType', description='The type of the task.', example='ODPS_SQL'),
  triggerRecurrence?: string(name='TriggerRecurrence', description='The running mode of the task after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler.

Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
  triggerType?: string(name='TriggerType', description='The trigger type.

Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
  workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the task belongs.', example='1234'),
}

model ListTasksResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    tasks?: [ 
      {
        baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
        createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
        createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
        }(name='DataSource', description='The information about the associated data source.'),
        description?: string(name='Description', description='The description of the task.', example='test'),
        id?: long(name='Id', description='The task ID.', example='1234'),
        instanceMode?: string(name='InstanceMode', example='T+1'),
        modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
        name?: string(name='Name', description='The name of the task.'),
        owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
        priority?: int32(name='Priority', description='The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
        projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
        rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: seconds.', example='60'),
        rerunMode?: string(name='RerunMode', description='The rerun mode.

Valid values:

*   AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.
*   AllAllowed: The task can be rerun regardless of whether it is successfully run or fails to run.', example='AllAllowed'),
        rerunTimes?: int32(name='RerunTimes', description='The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.', example='3'),
        runtimeResource?: {
          cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
          image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
          resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
        }(name='RuntimeResource', description='The configurations of the runtime environment, such as the resource group information.'),
        scriptParameters?: string(name='ScriptParameters', example='para1=$bizdate para2=$[yyyymmdd]'),
        timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='3600'),
        trigger?: {
          cron?: string(name='Cron', description='The CRON expression of the task. This parameter takes effect only if the Type parameter is set to Scheduler.', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', description='The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='9999-01-01 00:00:00'),
          recurrence?: string(name='Recurrence', description='The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler.

Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
          startTime?: string(name='StartTime', description='The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='1970-01-01 00:00:00'),
          type?: string(name='Type', description='The trigger type.

Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
        }(name='Trigger', description='The method to trigger task scheduling.'),
        type?: string(name='Type', description='The type of the task.', example='ODPS_SQL'),
        workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the task belongs.', example='1234'),
      }
    ](name='Tasks', description='The tasks.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTasksResponseBody(name='body'),
}

/**
 * @summary Queries a list of tasks by page. You can also specify filter conditions to query tasks.
 *
 * @param tmpReq ListTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTasksResponse
 */
async function listTasksWithOptions(tmpReq: ListTasksRequest, runtime: $RuntimeOptions): ListTasksResponse {
  tmpReq.validate();
  var request = new ListTasksShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!$isNull(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.projectEnv)) {
    body['ProjectEnv'] = request.projectEnv;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.runtimeResource)) {
    body['RuntimeResource'] = request.runtimeResource;
  }
  if (!$isNull(request.sortBy)) {
    body['SortBy'] = request.sortBy;
  }
  if (!$isNull(request.taskType)) {
    body['TaskType'] = request.taskType;
  }
  if (!$isNull(request.triggerRecurrence)) {
    body['TriggerRecurrence'] = request.triggerRecurrence;
  }
  if (!$isNull(request.triggerType)) {
    body['TriggerType'] = request.triggerType;
  }
  if (!$isNull(request.workflowId)) {
    body['WorkflowId'] = request.workflowId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListTasks',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of tasks by page. You can also specify filter conditions to query tasks.
 *
 * @param request ListTasksRequest
 * @return ListTasksResponse
 */
async function listTasks(request: ListTasksRequest): ListTasksResponse {
  var runtime = new $RuntimeOptions{};
  return listTasksWithOptions(request, runtime);
}

model ListUpstreamTaskInstancesRequest {
  id?: long(name='Id', description='The instance ID.

This parameter is required.', example='1234'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
}

model ListUpstreamTaskInstancesResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    taskInstances?: [ 
      {
        baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
        bizdate?: long(name='Bizdate', description='The data timestamp.', example='1710239005403'),
        createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
        createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
        }(name='DataSource', description='The information about the associated data source.'),
        description?: string(name='Description', description='The description.', example='test'),
        envType?: string(name='EnvType'),
        finishedTime?: long(name='FinishedTime', description='The time when the instance finished running.', example='1710239005403'),
        id?: long(name='Id', description='The instance ID.', example='1234'),
        modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
        owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
        periodNumber?: int32(name='PeriodNumber', example='1'),
        priority?: int32(name='Priority', description='The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
        projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod', deprecated=true),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
        rerunMode?: string(name='RerunMode', description='The rerun mode.

Valid values:

*   AllDenied: The task cannot be rerun regardless of whether it is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.
*   AllAllowed: The task can be rerun regardless of whether it is successfully run or fails to run.', example='AllAllowed'),
        runNumber?: int32(name='RunNumber', description='The number of times the instance is run. By default, the value starts from 1.', example='1'),
        runtime?: {
          gateway?: string(name='Gateway', description='The host for running.', example='cn-shanghai.1.2'),
          processId?: string(name='ProcessId', description='The instance run ID.', example='T3_123'),
        }(name='Runtime', description='The runtime information about the instance.'),
        runtimeResource?: {
          cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
          image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
          resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
        }(name='RuntimeResource', description='The information about the resource group with which the instance is associated.'),
        startedTime?: long(name='StartedTime', description='The time when the instance started to run.', example='1710239005403'),
        status?: string(name='Status', description='The status of the instance.

Valid values:

*   NotRun: The instance is not run.
*   Running: The instance is running.
*   WaitTime: The instance is waiting for the scheduling time to arrive.
*   CheckingCondition: Branch conditions are being checked for the instance.
*   WaitResource: The instance is waiting for resources.
*   Failure: The instance fails to be run.
*   Success: The instance is successfully run.
*   Checking: Data quality is being checked for the instance.', example='Success'),
        stepType?: string(name='StepType', description='The dependency type.'),
        taskId?: long(name='TaskId', description='The ID of the task for which the instance is generated.', example='1234'),
        taskName?: string(name='TaskName', description='The name of the task for which the instance is generated.'),
        taskType?: string(name='TaskType', description='The type of the task for which the instance is generated.', example='ODPS_SQL'),
        timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='1'),
        triggerRecurrence?: string(name='TriggerRecurrence', description='The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler.

Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
        triggerTime?: long(name='TriggerTime', description='The scheduling time.', example='1710239005403'),
        triggerType?: string(name='TriggerType', description='The method to trigger instance scheduling.

Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
        workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the instance belongs.', example='1234'),
        workflowInstanceId?: long(name='WorkflowInstanceId', description='The workflow instance ID.', example='1234'),
        workflowInstanceType?: string(name='WorkflowInstanceType', description='The type of the workflow instance.

Valid values:

*   SmokeTest
*   SupplementData
*   Manual
*   ManualWorkflow
*   Normal
*   ManualFlow', example='Normal'),
        workflowName?: string(name='WorkflowName', description='The name of the workflow to which the instance belongs.'),
      }
    ](name='TaskInstances', description='The instances.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
    upstreamTaskInstances?: [ 
      {
        dependencyType?: string(name='DependencyType', description='The dependency type.'),
        taskInstance?: {
          baselineId?: long(name='BaselineId'),
          bizdate?: long(name='Bizdate'),
          createTime?: long(name='CreateTime'),
          createUser?: string(name='CreateUser'),
          dataSource?: {
            name?: string(name='Name'),
          }(name='DataSource'),
          description?: string(name='Description'),
          envType?: string(name='EnvType'),
          finishedTime?: long(name='FinishedTime'),
          id?: long(name='Id'),
          modifyTime?: long(name='ModifyTime'),
          modifyUser?: string(name='ModifyUser'),
          owner?: string(name='Owner'),
          periodNumber?: int32(name='PeriodNumber'),
          priority?: int32(name='Priority'),
          projectId?: long(name='ProjectId'),
          rerunMode?: string(name='RerunMode', description='The rerun mode.'),
          runNumber?: int32(name='RunNumber'),
          runtime?: {
            gateway?: string(name='Gateway'),
            processId?: string(name='ProcessId'),
          }(name='Runtime'),
          runtimeResource?: {
            cu?: string(name='Cu'),
            image?: string(name='Image'),
            resourceGroupId?: string(name='ResourceGroupId'),
          }(name='RuntimeResource'),
          startedTime?: long(name='StartedTime'),
          status?: string(name='Status', description='The status of the instance.'),
          taskId?: long(name='TaskId'),
          taskName?: string(name='TaskName'),
          taskType?: string(name='TaskType', description='The task type.'),
          timeout?: int32(name='Timeout'),
          triggerRecurrence?: string(name='TriggerRecurrence'),
          triggerTime?: long(name='TriggerTime'),
          triggerType?: string(name='TriggerType'),
          workflowId?: long(name='WorkflowId'),
          workflowInstanceId?: long(name='WorkflowInstanceId'),
          workflowInstanceType?: string(name='WorkflowInstanceType'),
          workflowName?: string(name='WorkflowName'),
        }(name='TaskInstance', description='The information about a task instance.'),
      }
    ](name='UpstreamTaskInstances'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListUpstreamTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUpstreamTaskInstancesResponseBody(name='body'),
}

/**
 * @summary Queries a list of ancestor instances of an instance by page.
 *
 * @param request ListUpstreamTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUpstreamTaskInstancesResponse
 */
async function listUpstreamTaskInstancesWithOptions(request: ListUpstreamTaskInstancesRequest, runtime: $RuntimeOptions): ListUpstreamTaskInstancesResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListUpstreamTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of ancestor instances of an instance by page.
 *
 * @param request ListUpstreamTaskInstancesRequest
 * @return ListUpstreamTaskInstancesResponse
 */
async function listUpstreamTaskInstances(request: ListUpstreamTaskInstancesRequest): ListUpstreamTaskInstancesResponse {
  var runtime = new $RuntimeOptions{};
  return listUpstreamTaskInstancesWithOptions(request, runtime);
}

model ListUpstreamTasksRequest {
  id?: long(name='Id', description='The task ID.

This parameter is required.', example='1234'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
}

model ListUpstreamTasksResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    tasks?: [ 
      {
        baselineId?: long(name='BaselineId', description='The baseline ID.', example='1234'),
        createTime?: long(name='CreateTime', description='The creation time.', example='1710239005403'),
        createUser?: string(name='CreateUser', description='The account ID of the creator.', example='1000'),
        dataSource?: {
          name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
        }(name='DataSource', description='The information about the associated data source.'),
        description?: string(name='Description', description='The description of the task.', example='test'),
        envType?: string(name='EnvType'),
        id?: long(name='Id', description='The task ID.', example='1234'),
        instanceMode?: string(name='InstanceMode', description='The instance generation mode. Valid values:

T+1

Immediately', example='T+1'),
        modifyTime?: long(name='ModifyTime', description='The modification time.', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', description='The account ID of the modifier.', example='1000'),
        name?: string(name='Name', description='The name of the task.'),
        owner?: string(name='Owner', description='The account ID of the task owner.', example='1000'),
        priority?: int32(name='Priority', description='The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.', example='1'),
        projectEnv?: string(name='ProjectEnv', description='The environment of the workspace.

Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod', deprecated=true),
        projectId?: long(name='ProjectId', description='The workspace ID.', example='100'),
        rerunInterval?: int32(name='RerunInterval', description='The rerun interval. Unit: seconds.', example='60'),
        rerunMode?: string(name='RerunMode', description='The rerun mode.

Valid values:

*   AllDenied: The task cannot be rerun regardless of whether it is successfully run or fails to run.
*   FailureAllowed: The task can be rerun only after it fails to run.
*   AllAllowed: The task can be rerun regardless of whether it is successfully run or fails to run.', example='AllAllowed'),
        rerunTimes?: int32(name='RerunTimes', description='The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.', example='3'),
        runtimeResource?: {
          cu?: string(name='Cu', description='The default number of compute units (CUs) configured for task running.', example='0.25'),
          image?: string(name='Image', description='The ID of the image configured for task running.', example='i-xxxxxx'),
          resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group for scheduling configured for task running.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
        }(name='RuntimeResource', description='The configurations of the runtime environment, such as the resource group information.'),
        stepType?: string(name='StepType', description='The scheduling dependency type. Valid values:

Normal: same-cycle scheduling dependency

CrossCycle: cross-cycle scheduling dependency', example='Normal'),
        timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.', example='3600'),
        trigger?: {
          cron?: string(name='Cron', description='The CRON expression of the task. This parameter takes effect only if the Type parameter is set to Scheduler.', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', description='The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='9999-01-01 00:00:00'),
          recurrence?: string(name='Recurrence', description='The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler.

Valid values:

*   Pause
*   Skip
*   Normal', example='Normal'),
          startTime?: string(name='StartTime', description='The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.', example='1970-01-01 00:00:00'),
          timezone?: string(name='Timezone', description='The time zone.', example='Asia/Shanghai'),
          type?: string(name='Type', description='The trigger type.

Valid values:

*   Scheduler: scheduling cycle-based trigger
*   Manual: manual trigger', example='Scheduler'),
        }(name='Trigger', description='The method to trigger task scheduling.'),
        type?: string(name='Type', description='The type of the task.', example='ODPS_SQL'),
        workflowId?: long(name='WorkflowId', description='The ID of the workflow to which the task belongs.', example='1234'),
      }
    ](name='Tasks', description='The tasks.'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
    upstreamTasks?: [ 
      {
        dependencyType?: string(name='DependencyType', description='The dependency type.'),
        task?: {
          baselineId?: long(name='BaselineId', description='The ID of the baseline.'),
          createTime?: long(name='CreateTime'),
          createUser?: string(name='CreateUser'),
          dataSource?: {
            name?: string(name='Name'),
          }(name='DataSource', description='The information about the data source.'),
          description?: string(name='Description'),
          envType?: string(name='EnvType'),
          id?: long(name='Id'),
          instanceMode?: string(name='InstanceMode'),
          modifyTime?: long(name='ModifyTime'),
          modifyUser?: string(name='ModifyUser'),
          name?: string(name='Name'),
          owner?: string(name='Owner'),
          priority?: int32(name='Priority', description='The priority of the task. Valid values: 1 to 8.'),
          projectId?: long(name='ProjectId'),
          rerunInterval?: int32(name='RerunInterval', description='The interval between two consecutive reruns. Unit: seconds.'),
          rerunMode?: string(name='RerunMode', description='The rerun mode.'),
          rerunTimes?: int32(name='RerunTimes', description='The number of reruns.'),
          runtimeResource?: {
            cu?: string(name='Cu'),
            image?: string(name='Image'),
            resourceGroupId?: string(name='ResourceGroupId'),
          }(name='RuntimeResource', description='The configurations of the runtime environment, such as the resource group information.'),
          timeout?: int32(name='Timeout', description='The timeout period of task running. Unit: seconds.'),
          trigger?: {
            cron?: string(name='Cron'),
            endTime?: string(name='EndTime'),
            recurrence?: string(name='Recurrence'),
            startTime?: string(name='StartTime'),
            timezone?: string(name='Timezone'),
            type?: string(name='Type'),
          }(name='Trigger', description='The method to trigger the running of the task.'),
          type?: string(name='Type', description='The type of the task.'),
          workflowId?: long(name='WorkflowId'),
        }(name='Task'),
      }
    ](name='UpstreamTasks'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListUpstreamTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUpstreamTasksResponseBody(name='body'),
}

/**
 * @summary Queries a list of ancestor tasks of a task by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListUpstreamTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUpstreamTasksResponse
 */
async function listUpstreamTasksWithOptions(request: ListUpstreamTasksRequest, runtime: $RuntimeOptions): ListUpstreamTasksResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListUpstreamTasks',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of ancestor tasks of a task by page.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ListUpstreamTasksRequest
 * @return ListUpstreamTasksResponse
 */
async function listUpstreamTasks(request: ListUpstreamTasksRequest): ListUpstreamTasksResponse {
  var runtime = new $RuntimeOptions{};
  return listUpstreamTasksWithOptions(request, runtime);
}

model ListWorkflowDefinitionsRequest {
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the workspace administrator. You can log on to the Alibaba Cloud Management Console and view the ID on the Security Settings page.', example='110755000425XXXX'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
  type?: string(name='Type', description='The workflow type. This parameter specifies a filter condition.

Valid values:

*   CycleWorkflow
*   ManualWorkflow', example='CycleWorkflow'),
}

model ListWorkflowDefinitionsResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='227'),
    workflowDefinitions?: [ 
      {
        createTime?: long(name='CreateTime', description='The time when the workflow was created. This value is a UNIX timestamp.', example='1698057323000'),
        description?: string(name='Description', description='The description of the workflow.'),
        id?: long(name='Id', description='The ID of the workflow.', example='463497880880954XXXX'),
        modifyTime?: long(name='ModifyTime', description='The times when the workflow was last modified. This value is a UNIX timestamp.', example='1698057323000'),
        name?: string(name='Name', description='The name of the workflow.'),
        owner?: string(name='Owner', description='The owner.', example='110755000425XXXX'),
        projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace to which the workflow belongs.

This parameter is required.', example='4710'),
        script?: {
          id?: long(name='Id', description='The script ID.', example='698002781368644XXXX'),
          path?: string(name='Path', description='The script path.'),
          runtime?: {
            command?: string(name='Command', description='The command.', example='WORKFLOW'),
          }(name='Runtime', description='The runtime.'),
        }(name='Script', description='The script information.'),
        type?: string(name='Type', description='The type of the workflow.

Valid values:

*   CycleWorkflow
*   ManualWorkflow', example='CycleWorkflow'),
      }
    ](name='WorkflowDefinitions', description='The workflows.'),
  }(name='PagingInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='8C3ED0C5-ABAB-55E1-854B-DAC02B11XXXX'),
}

model ListWorkflowDefinitionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkflowDefinitionsResponseBody(name='body'),
}

/**
 * @summary Queries a list of workflows in DataStudio. You can also specify filter conditions to query specific workflows.
 *
 * @param request ListWorkflowDefinitionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWorkflowDefinitionsResponse
 */
async function listWorkflowDefinitionsWithOptions(request: ListWorkflowDefinitionsRequest, runtime: $RuntimeOptions): ListWorkflowDefinitionsResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListWorkflowDefinitions',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries a list of workflows in DataStudio. You can also specify filter conditions to query specific workflows.
 *
 * @param request ListWorkflowDefinitionsRequest
 * @return ListWorkflowDefinitionsResponse
 */
async function listWorkflowDefinitions(request: ListWorkflowDefinitionsRequest): ListWorkflowDefinitionsResponse {
  var runtime = new $RuntimeOptions{};
  return listWorkflowDefinitionsWithOptions(request, runtime);
}

model ListWorkflowInstancesRequest {
  bizDate?: long(name='BizDate', description='This parameter is required.'),
  ids?: [ long ](name='Ids'),
  name?: string(name='Name', example='WorkflowInstance1'),
  owner?: string(name='Owner', example='1000'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='100'),
  sortBy?: string(name='SortBy', example='Id Desc'),
  type?: string(name='Type'),
  workflowId?: long(name='WorkflowId', example='1234'),
}

model ListWorkflowInstancesShrinkRequest {
  bizDate?: long(name='BizDate', description='This parameter is required.'),
  idsShrink?: string(name='Ids'),
  name?: string(name='Name', example='WorkflowInstance1'),
  owner?: string(name='Owner', example='1000'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='100'),
  sortBy?: string(name='SortBy', example='Id Desc'),
  type?: string(name='Type'),
  workflowId?: long(name='WorkflowId', example='1234'),
}

model ListWorkflowInstancesResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
    workflowInstances?: [ 
      {
        bizDate?: long(name='BizDate'),
        createTime?: long(name='CreateTime', example='1710239005403'),
        createUser?: string(name='CreateUser', example='100'),
        envType?: string(name='EnvType', example='Prod'),
        finishedTime?: long(name='FinishedTime', example='1710239005403'),
        id?: long(name='Id', example='1234'),
        modifyTime?: long(name='ModifyTime', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', example='100'),
        name?: string(name='Name', example='WorkflowInstance1'),
        projectId?: long(name='ProjectId', example='100'),
        startedTime?: long(name='StartedTime', example='1710239005403'),
        status?: string(name='Status', example='Success'),
        type?: string(name='Type'),
        workflowId?: long(name='WorkflowId', example='1234'),
      }
    ](name='WorkflowInstances'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListWorkflowInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkflowInstancesResponseBody(name='body'),
}

/**
 * @param tmpReq ListWorkflowInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWorkflowInstancesResponse
 */
async function listWorkflowInstancesWithOptions(tmpReq: ListWorkflowInstancesRequest, runtime: $RuntimeOptions): ListWorkflowInstancesResponse {
  tmpReq.validate();
  var request = new ListWorkflowInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.bizDate)) {
    body['BizDate'] = request.bizDate;
  }
  if (!$isNull(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!$isNull(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.sortBy)) {
    body['SortBy'] = request.sortBy;
  }
  if (!$isNull(request.type)) {
    body['Type'] = request.type;
  }
  if (!$isNull(request.workflowId)) {
    body['WorkflowId'] = request.workflowId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListWorkflowInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @param request ListWorkflowInstancesRequest
 * @return ListWorkflowInstancesResponse
 */
async function listWorkflowInstances(request: ListWorkflowInstancesRequest): ListWorkflowInstancesResponse {
  var runtime = new $RuntimeOptions{};
  return listWorkflowInstancesWithOptions(request, runtime);
}

model ListWorkflowsRequest {
  envType?: string(name='EnvType', example='Prod'),
  ids?: [ long ](name='Ids'),
  name?: string(name='Name', example='Workflow1'),
  owner?: string(name='Owner', example='1000'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='100'),
  sortBy?: string(name='SortBy', example='Id Desc'),
  triggerType?: string(name='TriggerType', example='Scheduler'),
}

model ListWorkflowsShrinkRequest {
  envType?: string(name='EnvType', example='Prod'),
  idsShrink?: string(name='Ids'),
  name?: string(name='Name', example='Workflow1'),
  owner?: string(name='Owner', example='1000'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  projectId?: long(name='ProjectId', description='This parameter is required.', example='100'),
  sortBy?: string(name='SortBy', example='Id Desc'),
  triggerType?: string(name='TriggerType', example='Scheduler'),
}

model ListWorkflowsResponseBody = {
  pagingInfo?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
    workflows?: [ 
      {
        clientUniqueCode?: string(name='ClientUniqueCode', example='Workflow_0bc5213917368545132902xxxxxxxx'),
        createTime?: long(name='CreateTime', example='1710239005403'),
        createUser?: string(name='CreateUser', example='1000'),
        description?: string(name='Description', example='test'),
        envType?: string(name='EnvType', example='Prod'),
        id?: long(name='Id', example='1234'),
        modifyTime?: long(name='ModifyTime', example='1710239005403'),
        modifyUser?: string(name='ModifyUser', example='1000'),
        name?: string(name='Name', example='Workflow1'),
        owner?: string(name='Owner', example='1000'),
        parameters?: string(name='Parameters', example='para1=$bizdate para2=$[yyyymmdd]'),
        projectId?: long(name='ProjectId', example='100'),
        trigger?: {
          cron?: string(name='Cron', example='00 00 00 * * ?'),
          endTime?: string(name='EndTime', example='9999-01-01 00:00:00'),
          recurrence?: string(name='Recurrence', example='Normal'),
          startTime?: string(name='StartTime', example='1970-01-01 00:00:00'),
          type?: string(name='Type', example='Scheduler'),
        }(name='Trigger'),
      }
    ](name='Workflows'),
  }(name='PagingInfo'),
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
}

model ListWorkflowsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkflowsResponseBody(name='body'),
}

/**
 * @param tmpReq ListWorkflowsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListWorkflowsResponse
 */
async function listWorkflowsWithOptions(tmpReq: ListWorkflowsRequest, runtime: $RuntimeOptions): ListWorkflowsResponse {
  tmpReq.validate();
  var request = new ListWorkflowsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!$isNull(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!$isNull(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.sortBy)) {
    body['SortBy'] = request.sortBy;
  }
  if (!$isNull(request.triggerType)) {
    body['TriggerType'] = request.triggerType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListWorkflows',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @param request ListWorkflowsRequest
 * @return ListWorkflowsResponse
 */
async function listWorkflows(request: ListWorkflowsRequest): ListWorkflowsResponse {
  var runtime = new $RuntimeOptions{};
  return listWorkflowsWithOptions(request, runtime);
}

model MoveFunctionRequest {
  id?: long(name='Id', description='The ID of the UDF.

This parameter is required.', example='543217824470354XXXX'),
  path?: string(name='Path', description='The path to which you want to move the UDF. You do not need to specify a UDF name in the path.

For example, if you want to move the test UDF to root/demo/test, you must set this parameter to root/demo.

This parameter is required.', example='root/demo'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='12345'),
}

model MoveFunctionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='48C0E2F0-52BA-5888-BDFA-28F1B9AFXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model MoveFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveFunctionResponseBody(name='body'),
}

/**
 * @summary Moves a user-defined function (UDF) to a path in DataStudio.
 *
 * @param request MoveFunctionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MoveFunctionResponse
 */
async function moveFunctionWithOptions(request: MoveFunctionRequest, runtime: $RuntimeOptions): MoveFunctionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.path)) {
    body['Path'] = request.path;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'MoveFunction',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Moves a user-defined function (UDF) to a path in DataStudio.
 *
 * @param request MoveFunctionRequest
 * @return MoveFunctionResponse
 */
async function moveFunction(request: MoveFunctionRequest): MoveFunctionResponse {
  var runtime = new $RuntimeOptions{};
  return moveFunctionWithOptions(request, runtime);
}

model MoveNodeRequest {
  id?: long(name='Id', description='The ID of the node.

This parameter is required.', example='652567824470354XXXX'),
  path?: string(name='Path', description='The path to which you want to move the node. You do not need to specify a node name in the path.

For example, if you want to move the test node to root/demo/test, you must set this parameter to root/demo.

This parameter is required.', example='root/demo'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model MoveNodeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C99E2BE6-9DEA-5C2E-8F51-1DDCFEADXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model MoveNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveNodeResponseBody(name='body'),
}

/**
 * @summary Moves a node to a path in DataStudio.
 *
 * @param request MoveNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MoveNodeResponse
 */
async function moveNodeWithOptions(request: MoveNodeRequest, runtime: $RuntimeOptions): MoveNodeResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.path)) {
    body['Path'] = request.path;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'MoveNode',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Moves a node to a path in DataStudio.
 *
 * @param request MoveNodeRequest
 * @return MoveNodeResponse
 */
async function moveNode(request: MoveNodeRequest): MoveNodeResponse {
  var runtime = new $RuntimeOptions{};
  return moveNodeWithOptions(request, runtime);
}

model MoveResourceRequest {
  id?: long(name='Id', description='The ID of the file resource.

This parameter is required.', example='652567824470354XXXX'),
  path?: string(name='Path', description='The path to which you want to move the file resource. You do not need to specify a file resource name in the path.

For example, if you want to move the test file resource to root/demo/test, you must set this parameter to root/demo.

This parameter is required.', example='root/demo'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model MoveResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F332BED4-DD73-5972-A9C2-642BA6CFXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model MoveResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveResourceResponseBody(name='body'),
}

/**
 * @summary Moves a file resource to a path in DataStudio.
 *
 * @param request MoveResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MoveResourceResponse
 */
async function moveResourceWithOptions(request: MoveResourceRequest, runtime: $RuntimeOptions): MoveResourceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.path)) {
    body['Path'] = request.path;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'MoveResource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Moves a file resource to a path in DataStudio.
 *
 * @param request MoveResourceRequest
 * @return MoveResourceResponse
 */
async function moveResource(request: MoveResourceRequest): MoveResourceResponse {
  var runtime = new $RuntimeOptions{};
  return moveResourceWithOptions(request, runtime);
}

model MoveWorkflowDefinitionRequest {
  id?: long(name='Id', description='The ID of the workflow.

This parameter is required.', example='543217824470354XXXX'),
  path?: string(name='Path', description='The path to which you want to move the workflow. You do not need to specify a workflow name in the path.

For example, if you want to move the test workflow to root/demo/test, you must set this parameter to root/demo.

This parameter is required.', example='root/demo'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10001'),
}

model MoveWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='05ADAF4F-7709-5FB1-B606-3513483FXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model MoveWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary Moves a workflow to a path in DataStudio.
 *
 * @param request MoveWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MoveWorkflowDefinitionResponse
 */
async function moveWorkflowDefinitionWithOptions(request: MoveWorkflowDefinitionRequest, runtime: $RuntimeOptions): MoveWorkflowDefinitionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.path)) {
    body['Path'] = request.path;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'MoveWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Moves a workflow to a path in DataStudio.
 *
 * @param request MoveWorkflowDefinitionRequest
 * @return MoveWorkflowDefinitionResponse
 */
async function moveWorkflowDefinition(request: MoveWorkflowDefinitionRequest): MoveWorkflowDefinitionResponse {
  var runtime = new $RuntimeOptions{};
  return moveWorkflowDefinitionWithOptions(request, runtime);
}

model RemoveTaskInstanceDependenciesRequest {
  comment?: string(name='Comment', description='The remarks.', example='this is a comment'),
  id?: long(name='Id', description='The instance ID.

This parameter is required.', example='1234'),
  upstreamTaskInstanceIds?: [ long ](name='UpstreamTaskInstanceIds', description='The IDs of ancestor instances of the instance'),
}

model RemoveTaskInstanceDependenciesShrinkRequest {
  comment?: string(name='Comment', description='The remarks.', example='this is a comment'),
  id?: long(name='Id', description='The instance ID.

This parameter is required.', example='1234'),
  upstreamTaskInstanceIdsShrink?: string(name='UpstreamTaskInstanceIds', description='The IDs of ancestor instances of the instance'),
}

model RemoveTaskInstanceDependenciesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model RemoveTaskInstanceDependenciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveTaskInstanceDependenciesResponseBody(name='body'),
}

/**
 * @summary Removes multiple upstream dependencies of an instance at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq RemoveTaskInstanceDependenciesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveTaskInstanceDependenciesResponse
 */
async function removeTaskInstanceDependenciesWithOptions(tmpReq: RemoveTaskInstanceDependenciesRequest, runtime: $RuntimeOptions): RemoveTaskInstanceDependenciesResponse {
  tmpReq.validate();
  var request = new RemoveTaskInstanceDependenciesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.upstreamTaskInstanceIds)) {
    request.upstreamTaskInstanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.upstreamTaskInstanceIds, 'UpstreamTaskInstanceIds', 'json');
  }
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  var body : map[string]any = {};
  if (!$isNull(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!$isNull(request.upstreamTaskInstanceIdsShrink)) {
    body['UpstreamTaskInstanceIds'] = request.upstreamTaskInstanceIdsShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RemoveTaskInstanceDependencies',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Removes multiple upstream dependencies of an instance at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request RemoveTaskInstanceDependenciesRequest
 * @return RemoveTaskInstanceDependenciesResponse
 */
async function removeTaskInstanceDependencies(request: RemoveTaskInstanceDependenciesRequest): RemoveTaskInstanceDependenciesResponse {
  var runtime = new $RuntimeOptions{};
  return removeTaskInstanceDependenciesWithOptions(request, runtime);
}

model RenameFunctionRequest {
  id?: long(name='Id', description='The ID of the UDF.

This parameter is required.', example='543217824470354XXXX'),
  name?: string(name='Name', description='The new name.

This parameter is required.'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10002'),
}

model RenameFunctionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1ED4C97F-BA2A-57C5-BA7C-8853627EXXXX'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model RenameFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameFunctionResponseBody(name='body'),
}

/**
 * @summary Renames a user-defined function (UDF) in DataStudio.
 *
 * @param request RenameFunctionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RenameFunctionResponse
 */
async function renameFunctionWithOptions(request: RenameFunctionRequest, runtime: $RuntimeOptions): RenameFunctionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RenameFunction',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Renames a user-defined function (UDF) in DataStudio.
 *
 * @param request RenameFunctionRequest
 * @return RenameFunctionResponse
 */
async function renameFunction(request: RenameFunctionRequest): RenameFunctionResponse {
  var runtime = new $RuntimeOptions{};
  return renameFunctionWithOptions(request, runtime);
}

model RenameNodeRequest {
  id?: long(name='Id', description='The ID of the node.

This parameter is required.', example='652567824470354XXXX'),
  name?: string(name='Name', description='The new name.

This parameter is required.'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='12345'),
}

model RenameNodeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4CDF7B72-020B-542A-8465-21CFFA81XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model RenameNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameNodeResponseBody(name='body'),
}

/**
 * @summary Renames a node in DataStudio.
 *
 * @param request RenameNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RenameNodeResponse
 */
async function renameNodeWithOptions(request: RenameNodeRequest, runtime: $RuntimeOptions): RenameNodeResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RenameNode',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Renames a node in DataStudio.
 *
 * @param request RenameNodeRequest
 * @return RenameNodeResponse
 */
async function renameNode(request: RenameNodeRequest): RenameNodeResponse {
  var runtime = new $RuntimeOptions{};
  return renameNodeWithOptions(request, runtime);
}

model RenameResourceRequest {
  id?: long(name='Id', description='The ID of the file resource.

This parameter is required.', example='543217824470354XXXX'),
  name?: string(name='Name', description='The new name.

This parameter is required.'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model RenameResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4CDF7B72-020B-542A-8465-21CFFA8XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model RenameResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameResourceResponseBody(name='body'),
}

/**
 * @summary Renames a file resource in DataStudio.
 *
 * @param request RenameResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RenameResourceResponse
 */
async function renameResourceWithOptions(request: RenameResourceRequest, runtime: $RuntimeOptions): RenameResourceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RenameResource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Renames a file resource in DataStudio.
 *
 * @param request RenameResourceRequest
 * @return RenameResourceResponse
 */
async function renameResource(request: RenameResourceRequest): RenameResourceResponse {
  var runtime = new $RuntimeOptions{};
  return renameResourceWithOptions(request, runtime);
}

model RenameWorkflowDefinitionRequest {
  id?: long(name='Id', description='The unique identifier of the workflow.

This parameter is required.', example='463497880880954XXXX'),
  name?: string(name='Name', description='The new name.

This parameter is required.'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.

This parameter is required.', example='10000'),
}

model RenameWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can troubleshoot issues based on the ID.', example='975BD43D-C421-595C-A29C-565A8AD5XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model RenameWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary Renames a workflow in DataStudio.
 *
 * @param request RenameWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RenameWorkflowDefinitionResponse
 */
async function renameWorkflowDefinitionWithOptions(request: RenameWorkflowDefinitionRequest, runtime: $RuntimeOptions): RenameWorkflowDefinitionResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'RenameWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Renames a workflow in DataStudio.
 *
 * @param request RenameWorkflowDefinitionRequest
 * @return RenameWorkflowDefinitionResponse
 */
async function renameWorkflowDefinition(request: RenameWorkflowDefinitionRequest): RenameWorkflowDefinitionResponse {
  var runtime = new $RuntimeOptions{};
  return renameWorkflowDefinitionWithOptions(request, runtime);
}

model RerunTaskInstancesRequest {
  comment?: string(name='Comment', example='this is a comment'),
  ids?: [ long ](name='Ids'),
}

model RerunTaskInstancesShrinkRequest {
  comment?: string(name='Comment', example='this is a comment'),
  idsShrink?: string(name='Ids'),
}

model RerunTaskInstancesResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo', description='The result of the batch operation, which is in the MAP structure. The instance ID serves as a key, and the result serves as a value.'),
}

model RerunTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RerunTaskInstancesResponseBody(name='body'),
}

/**
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq RerunTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RerunTaskInstancesResponse
 */
async function rerunTaskInstancesWithOptions(tmpReq: RerunTaskInstancesRequest, runtime: $RuntimeOptions): RerunTaskInstancesResponse {
  tmpReq.validate();
  var request = new RerunTaskInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!$isNull(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RerunTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request RerunTaskInstancesRequest
 * @return RerunTaskInstancesResponse
 */
async function rerunTaskInstances(request: RerunTaskInstancesRequest): RerunTaskInstancesResponse {
  var runtime = new $RuntimeOptions{};
  return rerunTaskInstancesWithOptions(request, runtime);
}

model ResumeTaskInstancesRequest {
  comment?: string(name='Comment', example='this is a comment'),
  ids?: [ long ](name='Ids'),
}

model ResumeTaskInstancesShrinkRequest {
  comment?: string(name='Comment', example='this is a comment'),
  idsShrink?: string(name='Ids'),
}

model ResumeTaskInstancesResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo', description='The result of the batch operation, which is in the MAP structure. The instance ID serves as a key, and the result serves as a value.'),
}

model ResumeTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResumeTaskInstancesResponseBody(name='body'),
}

/**
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq ResumeTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResumeTaskInstancesResponse
 */
async function resumeTaskInstancesWithOptions(tmpReq: ResumeTaskInstancesRequest, runtime: $RuntimeOptions): ResumeTaskInstancesResponse {
  tmpReq.validate();
  var request = new ResumeTaskInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!$isNull(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ResumeTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request ResumeTaskInstancesRequest
 * @return ResumeTaskInstancesResponse
 */
async function resumeTaskInstances(request: ResumeTaskInstancesRequest): ResumeTaskInstancesResponse {
  var runtime = new $RuntimeOptions{};
  return resumeTaskInstancesWithOptions(request, runtime);
}

model RevokeMemberProjectRolesRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to query the ID.

This parameter is required.', example='105149'),
  roleCodes?: [ string ](name='RoleCodes', description='The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.

You must configure this parameter to specify the roles that you want to revoke from the member in the workspace.

This parameter is required.'),
  userId?: string(name='UserId', description='The ID of the account used by the member in the workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the ID of the account used by the member in the workspace.

This parameter is required.', example='123422344899'),
}

model RevokeMemberProjectRolesShrinkRequest {
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to query the ID.

This parameter is required.', example='105149'),
  roleCodesShrink?: string(name='RoleCodes', description='The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.

You must configure this parameter to specify the roles that you want to revoke from the member in the workspace.

This parameter is required.'),
  userId?: string(name='UserId', description='The ID of the account used by the member in the workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the ID of the account used by the member in the workspace.

This parameter is required.', example='123422344899'),
}

model RevokeMemberProjectRolesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='676271D6-53B4-57BE-89FA-72F7AE1418DF'),
}

model RevokeMemberProjectRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeMemberProjectRolesResponseBody(name='body'),
}

/**
 * @summary Revokes roles that are assigned to a member in a workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq RevokeMemberProjectRolesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RevokeMemberProjectRolesResponse
 */
async function revokeMemberProjectRolesWithOptions(tmpReq: RevokeMemberProjectRolesRequest, runtime: $RuntimeOptions): RevokeMemberProjectRolesResponse {
  tmpReq.validate();
  var request = new RevokeMemberProjectRolesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.roleCodes)) {
    request.roleCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roleCodes, 'RoleCodes', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.roleCodesShrink)) {
    body['RoleCodes'] = request.roleCodesShrink;
  }
  if (!$isNull(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RevokeMemberProjectRoles',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Revokes roles that are assigned to a member in a workspace.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request RevokeMemberProjectRolesRequest
 * @return RevokeMemberProjectRolesResponse
 */
async function revokeMemberProjectRoles(request: RevokeMemberProjectRolesRequest): RevokeMemberProjectRolesResponse {
  var runtime = new $RuntimeOptions{};
  return revokeMemberProjectRolesWithOptions(request, runtime);
}

model SetSuccessTaskInstancesRequest {
  comment?: string(name='Comment', example='this is a comment'),
  ids?: [ long ](name='Ids'),
}

model SetSuccessTaskInstancesShrinkRequest {
  comment?: string(name='Comment', example='this is a comment'),
  idsShrink?: string(name='Ids'),
}

model SetSuccessTaskInstancesResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo', description='The result of the batch operation, which is in the MAP structure. The instance ID serves as a key, and the result serves as a value.'),
}

model SetSuccessTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetSuccessTaskInstancesResponseBody(name='body'),
}

/**
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq SetSuccessTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetSuccessTaskInstancesResponse
 */
async function setSuccessTaskInstancesWithOptions(tmpReq: SetSuccessTaskInstancesRequest, runtime: $RuntimeOptions): SetSuccessTaskInstancesResponse {
  tmpReq.validate();
  var request = new SetSuccessTaskInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!$isNull(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'SetSuccessTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request SetSuccessTaskInstancesRequest
 * @return SetSuccessTaskInstancesResponse
 */
async function setSuccessTaskInstances(request: SetSuccessTaskInstancesRequest): SetSuccessTaskInstancesResponse {
  var runtime = new $RuntimeOptions{};
  return setSuccessTaskInstancesWithOptions(request, runtime);
}

model StartDIJobRequest {
  DIJobId?: long(name='DIJobId', description='This parameter is deprecated. Use the Id parameter instead.', example='10000', deprecated=true),
  forceToRerun?: boolean(name='ForceToRerun', description='Deprecated', example='false'),
  id?: long(name='Id', description='The ID of the synchronization task.', example='10000'),
  realtimeStartSettings?: {
    failoverSettings?: {
      interval?: long(name='Interval', description='The failover interval. Unit: minutes.', example='10', deprecated=true),
      upperLimit?: long(name='UpperLimit', description='The maximum number of failovers allowed.', example='30', deprecated=true),
    }(name='FailoverSettings', description='The failover settings.', deprecated=true),
    startTime?: long(name='StartTime', description='The start time.', example='1671516776'),
  }(name='RealtimeStartSettings', description='The settings for starting real-time synchronization.'),
}

model StartDIJobShrinkRequest {
  DIJobId?: long(name='DIJobId', description='This parameter is deprecated. Use the Id parameter instead.', example='10000', deprecated=true),
  forceToRerun?: boolean(name='ForceToRerun', description='Deprecated', example='false'),
  id?: long(name='Id', description='The ID of the synchronization task.', example='10000'),
  realtimeStartSettingsShrink?: string(name='RealtimeStartSettings', description='The settings for starting real-time synchronization.'),
}

model StartDIJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='999431B2-6013-577F-B684-36F7433C753B'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model StartDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartDIJobResponseBody(name='body'),
}

/**
 * @summary Starts a new-version synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq StartDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartDIJobResponse
 */
async function startDIJobWithOptions(tmpReq: StartDIJobRequest, runtime: $RuntimeOptions): StartDIJobResponse {
  tmpReq.validate();
  var request = new StartDIJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.realtimeStartSettings)) {
    request.realtimeStartSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.realtimeStartSettings, 'RealtimeStartSettings', 'json');
  }
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'StartDIJob',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Starts a new-version synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request StartDIJobRequest
 * @return StartDIJobResponse
 */
async function startDIJob(request: StartDIJobRequest): StartDIJobResponse {
  var runtime = new $RuntimeOptions{};
  return startDIJobWithOptions(request, runtime);
}

model StartWorkflowInstancesRequest {
  comment?: string(name='Comment', description='The remarks.', example='this is a comment'),
  ids?: [ long ](name='Ids', description='The IDs of workflow instances.

This parameter is required.'),
}

model StartWorkflowInstancesShrinkRequest {
  comment?: string(name='Comment', description='The remarks.', example='this is a comment'),
  idsShrink?: string(name='Ids', description='The IDs of workflow instances.

This parameter is required.'),
}

model StartWorkflowInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17****'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo', description='The result of the batch operation, which is in the MAP structure. The workflow instance ID serves as a key, and the result serves as a value.'),
}

model StartWorkflowInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartWorkflowInstancesResponseBody(name='body'),
}

/**
 * @summary Starts multiple workflow instances at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq StartWorkflowInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartWorkflowInstancesResponse
 */
async function startWorkflowInstancesWithOptions(tmpReq: StartWorkflowInstancesRequest, runtime: $RuntimeOptions): StartWorkflowInstancesResponse {
  tmpReq.validate();
  var request = new StartWorkflowInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!$isNull(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'StartWorkflowInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Starts multiple workflow instances at a time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request StartWorkflowInstancesRequest
 * @return StartWorkflowInstancesResponse
 */
async function startWorkflowInstances(request: StartWorkflowInstancesRequest): StartWorkflowInstancesResponse {
  var runtime = new $RuntimeOptions{};
  return startWorkflowInstancesWithOptions(request, runtime);
}

model StopDIJobRequest {
  DIJobId?: long(name='DIJobId', description='This parameter is deprecated and is replaced by the Id parameter.', example='11668', deprecated=true),
  id?: long(name='Id', description='The ID of the synchronization task.', example='11668'),
  instanceId?: long(name='InstanceId', description='The instance ID.', example='1234'),
}

model StopDIJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='92F778C7-8F00-53B1-AE1A-B3B17101247D'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model StopDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDIJobResponseBody(name='body'),
}

/**
 * @summary Stops a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request StopDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopDIJobResponse
 */
async function stopDIJobWithOptions(request: StopDIJobRequest, runtime: $RuntimeOptions): StopDIJobResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'StopDIJob',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Stops a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request StopDIJobRequest
 * @return StopDIJobResponse
 */
async function stopDIJob(request: StopDIJobRequest): StopDIJobResponse {
  var runtime = new $RuntimeOptions{};
  return stopDIJobWithOptions(request, runtime);
}

model StopTaskInstancesRequest {
  comment?: string(name='Comment', example='this is a comment'),
  ids?: [ long ](name='Ids'),
}

model StopTaskInstancesShrinkRequest {
  comment?: string(name='Comment', example='this is a comment'),
  idsShrink?: string(name='Ids'),
}

model StopTaskInstancesResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo', description='The result of the batch operation, which is in the MAP structure. The instance ID serves as a key, and the result serves as a value.'),
}

model StopTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopTaskInstancesResponseBody(name='body'),
}

/**
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq StopTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopTaskInstancesResponse
 */
async function stopTaskInstancesWithOptions(tmpReq: StopTaskInstancesRequest, runtime: $RuntimeOptions): StopTaskInstancesResponse {
  tmpReq.validate();
  var request = new StopTaskInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!$isNull(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'StopTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request StopTaskInstancesRequest
 * @return StopTaskInstancesResponse
 */
async function stopTaskInstances(request: StopTaskInstancesRequest): StopTaskInstancesResponse {
  var runtime = new $RuntimeOptions{};
  return stopTaskInstancesWithOptions(request, runtime);
}

model StopWorkflowInstancesRequest {
  comment?: string(name='Comment', example='this is a comment'),
  ids?: [ long ](name='Ids', description='This parameter is required.'),
}

model StopWorkflowInstancesShrinkRequest {
  comment?: string(name='Comment', example='this is a comment'),
  idsShrink?: string(name='Ids', description='This parameter is required.'),
}

model StopWorkflowInstancesResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17****'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo'),
}

model StopWorkflowInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopWorkflowInstancesResponseBody(name='body'),
}

/**
 * @param tmpReq StopWorkflowInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopWorkflowInstancesResponse
 */
async function stopWorkflowInstancesWithOptions(tmpReq: StopWorkflowInstancesRequest, runtime: $RuntimeOptions): StopWorkflowInstancesResponse {
  tmpReq.validate();
  var request = new StopWorkflowInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!$isNull(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'StopWorkflowInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @param request StopWorkflowInstancesRequest
 * @return StopWorkflowInstancesResponse
 */
async function stopWorkflowInstances(request: StopWorkflowInstancesRequest): StopWorkflowInstancesResponse {
  var runtime = new $RuntimeOptions{};
  return stopWorkflowInstancesWithOptions(request, runtime);
}

model SuspendTaskInstancesRequest {
  comment?: string(name='Comment', example='this is a comment'),
  ids?: [ long ](name='Ids'),
}

model SuspendTaskInstancesShrinkRequest {
  comment?: string(name='Comment', example='this is a comment'),
  idsShrink?: string(name='Ids'),
}

model SuspendTaskInstancesResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo', description='The result of the batch operation, which is in the MAP structure. The instance ID serves as a key, and the result serves as a value.'),
}

model SuspendTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SuspendTaskInstancesResponseBody(name='body'),
}

/**
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq SuspendTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SuspendTaskInstancesResponse
 */
async function suspendTaskInstancesWithOptions(tmpReq: SuspendTaskInstancesRequest, runtime: $RuntimeOptions): SuspendTaskInstancesResponse {
  tmpReq.validate();
  var request = new SuspendTaskInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.ids)) {
    request.idsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ids, 'Ids', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!$isNull(request.idsShrink)) {
    body['Ids'] = request.idsShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'SuspendTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request SuspendTaskInstancesRequest
 * @return SuspendTaskInstancesResponse
 */
async function suspendTaskInstances(request: SuspendTaskInstancesRequest): SuspendTaskInstancesResponse {
  var runtime = new $RuntimeOptions{};
  return suspendTaskInstancesWithOptions(request, runtime);
}

model TagDataAssetsRequest {
  autoTraceEnabled?: boolean(name='AutoTraceEnabled', example='false'),
  dataAssetIds?: [ string ](name='DataAssetIds', description='This parameter is required.'),
  dataAssetType?: string(name='DataAssetType', description='This parameter is required.', example='ACS::DataWorks::Task'),
  envType?: string(name='EnvType', example='Prod'),
  projectId?: long(name='ProjectId', example='10000'),
  tags?: [ 
    {
      key?: string(name='Key', description='This parameter is required.', example='key'),
      value?: string(name='Value', example='value'),
    }
  ](name='Tags', description='This parameter is required.'),
}

model TagDataAssetsShrinkRequest {
  autoTraceEnabled?: boolean(name='AutoTraceEnabled', example='false'),
  dataAssetIdsShrink?: string(name='DataAssetIds', description='This parameter is required.'),
  dataAssetType?: string(name='DataAssetType', description='This parameter is required.', example='ACS::DataWorks::Task'),
  envType?: string(name='EnvType', example='Prod'),
  projectId?: long(name='ProjectId', example='10000'),
  tagsShrink?: string(name='Tags', description='This parameter is required.'),
}

model TagDataAssetsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='0bc1ec92159376'),
  success?: string(name='Success', example='true'),
}

model TagDataAssetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagDataAssetsResponseBody(name='body'),
}

/**
 * @summary 为资产绑定标签
 *
 * @param tmpReq TagDataAssetsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TagDataAssetsResponse
 */
async function tagDataAssetsWithOptions(tmpReq: TagDataAssetsRequest, runtime: $RuntimeOptions): TagDataAssetsResponse {
  tmpReq.validate();
  var request = new TagDataAssetsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.dataAssetIds)) {
    request.dataAssetIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataAssetIds, 'DataAssetIds', 'json');
  }
  if (!$isNull(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!$isNull(request.autoTraceEnabled)) {
    query['AutoTraceEnabled'] = request.autoTraceEnabled;
  }
  if (!$isNull(request.dataAssetIdsShrink)) {
    query['DataAssetIds'] = request.dataAssetIdsShrink;
  }
  if (!$isNull(request.dataAssetType)) {
    query['DataAssetType'] = request.dataAssetType;
  }
  if (!$isNull(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'TagDataAssets',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 为资产绑定标签
 *
 * @param request TagDataAssetsRequest
 * @return TagDataAssetsResponse
 */
async function tagDataAssets(request: TagDataAssetsRequest): TagDataAssetsResponse {
  var runtime = new $RuntimeOptions{};
  return tagDataAssetsWithOptions(request, runtime);
}

model TriggerSchedulerTaskInstanceRequest {
  envType?: string(name='EnvType', description='The environment of the workspace. Valid values:

*   Prod: production environment
*   Dev: development environment', example='Prod'),
  taskId?: long(name='TaskId', description='The task ID.

This parameter is required.', example='1234'),
  triggerTime?: long(name='TriggerTime', description='The time defined by the HTTP Trigger node.

This parameter is required.', example='1710239005403'),
}

model TriggerSchedulerTaskInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model TriggerSchedulerTaskInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TriggerSchedulerTaskInstanceResponseBody(name='body'),
}

/**
 * @summary Triggers a task to run by using an HTTP Trigger node at a specified time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request TriggerSchedulerTaskInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TriggerSchedulerTaskInstanceResponse
 */
async function triggerSchedulerTaskInstanceWithOptions(request: TriggerSchedulerTaskInstanceRequest, runtime: $RuntimeOptions): TriggerSchedulerTaskInstanceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.envType)) {
    query['EnvType'] = request.envType;
  }
  var body : map[string]any = {};
  if (!$isNull(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!$isNull(request.triggerTime)) {
    body['TriggerTime'] = request.triggerTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'TriggerSchedulerTaskInstance',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Triggers a task to run by using an HTTP Trigger node at a specified time.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request TriggerSchedulerTaskInstanceRequest
 * @return TriggerSchedulerTaskInstanceResponse
 */
async function triggerSchedulerTaskInstance(request: TriggerSchedulerTaskInstanceRequest): TriggerSchedulerTaskInstanceResponse {
  var runtime = new $RuntimeOptions{};
  return triggerSchedulerTaskInstanceWithOptions(request, runtime);
}

model UnTagDataAssetsRequest {
  dataAssetIds?: [ string ](name='DataAssetIds', description='This parameter is required.'),
  dataAssetType?: string(name='DataAssetType', description='This parameter is required.', example='ACS::DataWorks::Task'),
  envType?: string(name='EnvType', example='Prod'),
  projectId?: long(name='ProjectId', example='123'),
  tags?: [ 
    {
      key?: string(name='Key', description='This parameter is required.', example='key'),
      value?: string(name='Value', example='value'),
    }
  ](name='Tags', description='This parameter is required.'),
}

model UnTagDataAssetsShrinkRequest {
  dataAssetIdsShrink?: string(name='DataAssetIds', description='This parameter is required.'),
  dataAssetType?: string(name='DataAssetType', description='This parameter is required.', example='ACS::DataWorks::Task'),
  envType?: string(name='EnvType', example='Prod'),
  projectId?: long(name='ProjectId', example='123'),
  tagsShrink?: string(name='Tags', description='This parameter is required.'),
}

model UnTagDataAssetsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='8754EE08-4AA2-5F77-ADD7-754DBBDA9F75'),
  success?: string(name='Success', example='true'),
}

model UnTagDataAssetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnTagDataAssetsResponseBody(name='body'),
}

/**
 * @summary 为资产解绑标签关系
 *
 * @param tmpReq UnTagDataAssetsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UnTagDataAssetsResponse
 */
async function unTagDataAssetsWithOptions(tmpReq: UnTagDataAssetsRequest, runtime: $RuntimeOptions): UnTagDataAssetsResponse {
  tmpReq.validate();
  var request = new UnTagDataAssetsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.dataAssetIds)) {
    request.dataAssetIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataAssetIds, 'DataAssetIds', 'json');
  }
  if (!$isNull(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!$isNull(request.dataAssetIdsShrink)) {
    query['DataAssetIds'] = request.dataAssetIdsShrink;
  }
  if (!$isNull(request.dataAssetType)) {
    query['DataAssetType'] = request.dataAssetType;
  }
  if (!$isNull(request.envType)) {
    query['EnvType'] = request.envType;
  }
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UnTagDataAssets',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 为资产解绑标签关系
 *
 * @param request UnTagDataAssetsRequest
 * @return UnTagDataAssetsResponse
 */
async function unTagDataAssets(request: UnTagDataAssetsRequest): UnTagDataAssetsResponse {
  var runtime = new $RuntimeOptions{};
  return unTagDataAssetsWithOptions(request, runtime);
}

model UpdateAlertRuleRequest {
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the rule.', example='true'),
  id?: long(name='Id', description='The rule ID.', example='105412'),
  name?: string(name='Name', description='The name of the rule.', example='collection_name'),
  notification?: {
    channels?: [ string ](name='Channels', description='The alert notification channels.'),
    intervalInMinutes?: int32(name='IntervalInMinutes', description='The interval at which an alert notification is sent. Unit: minutes. Valid values: [5,10000].', example='30'),
    maximum?: int32(name='Maximum', description='The maximum number of times an alert notification can be sent within a calendar day. Valid values: [1, 10000].', example='3'),
    receivers?: [ 
      {
        extension?: string(name='Extension', description='The additional configuration of the alert recipient. If the ReceiverType parameter is set to DingdingUrl, you can set this parameter to {"atAll":true} to remind all members in a DingTalk group.', example='{"atAll":true}'),
        receiverType?: string(name='ReceiverType', description='The type of the alert recipient. Valid valves:

*   AliUid: Alibaba Cloud account ID.
*   Shift Schedules: the personnel in a shift schedule.
*   TaskOwner: the task owner. The task owner can receive custom alerts and event alerts.
*   Owner: the baseline owner. The baseline owner can receive baseline alerts.
*   WebhookUrl: URL of a custom webhook.
*   DingdingUrl: DingTalk webhook URL.
*   FeishuUrl: Lark webhook URL.
*   WeixinUrl: WeCom webhook URL.', example='TaskOwner'),
        receiverValues?: [ string ](name='ReceiverValues', description='The alert recipients.'),
      }
    ](name='Receivers', description='The alert recipients.'),
    silenceEndTime?: string(name='SilenceEndTime', description='The end time for silence. The time is in the HH:mm:ss format.', example='00:00:00'),
    silenceStartTime?: string(name='SilenceStartTime', description='The start time for silence. The time is in the HH:mm:ss format.', example='00:00:00'),
  }(name='Notification', description='The configuration for the alert notification.'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the owner of the rule.', example='193379****'),
  triggerCondition?: {
    extension?: {
      cycleUnfinished?: {
        cycleAndTime?: [ 
          {
            cycleId?: int32(name='CycleId', description='The ID of the scheduling cycle of the instance. Valid values: [1,288].', example='1'),
            time?: string(name='Time', description='The latest completion time of the instance within the scheduling cycle. The time is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='01:00'),
          }
        ](name='CycleAndTime', description='The configurations of the scheduling cycle and timeout period of the instance.'),
      }(name='CycleUnfinished', description='The configuration for an alert of the CycleUnfinished type.'),
      error?: {
        autoRerunAlertEnabled?: boolean(name='AutoRerunAlertEnabled', description='Specifies whether to trigger an alert if a batch synchronization task is automatically rerun upon a failure.', example='false'),
        streamTaskIds?: [ long ](name='StreamTaskIds', description='The IDs of the real-time computing tasks. This parameter is required when you monitor real-time computing tasks.'),
      }(name='Error', description='The configuration for an alert of the Error type.'),
      instanceErrorCount?: {
        count?: int32(name='Count', description='The maximum number of instances on which an error occurs. Valid values: [1,10000].', example='10'),
      }(name='InstanceErrorCount', description='The configuration for an alert of the InstanceErrorCount type.'),
      instanceErrorPercentage?: {
        percentage?: int32(name='Percentage', description='The maximum percentage of instances on which an error occurs in the workspace to the total number of instances. Valid values: [1-100].', example='10'),
      }(name='InstanceErrorPercentage', description='The configuration for an alert of the InstanceErrorPercentage type.'),
      instanceTransferFluctuate?: {
        percentage?: int32(name='Percentage', description='The maximum percentage of fluctuation in the number of auto triggered node instances that are generated in your workspace. Valid values: [1-100].', example='10'),
        trend?: string(name='Trend', description='The way in which the number of auto triggered node instances that are generated in your workspace fluctuates. Valid values:

*   abs: the absolute value. The number of instances increases or decreases.
*   increase: The number of instances increases.
*   decrease: The number of instances decreases.', example='abs'),
      }(name='InstanceTransferFluctuate', description='The configuration for an alert of the InstanceTransferFluctuate type.'),
      timeout?: {
        timeoutInMinutes?: int32(name='TimeoutInMinutes', description='The timeout period. Unit: minutes.', example='10'),
      }(name='Timeout', description='The configuration for an alert of the Timeout type.'),
      unFinished?: {
        unFinishedTime?: string(name='UnFinishedTime', description='The latest completion time of the instance. The period is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].', example='12:00'),
      }(name='UnFinished', description='The configuration for an alert of the UnFinished type.'),
    }(name='Extension', description='The extended information about the rule. This parameter is required for specific types of alerts.'),
    target?: {
      allowTasks?: [ long ](name='AllowTasks', description='The nodes that are not to be monitored.'),
      ids?: [ long ](name='Ids', description='The IDs of monitored objects.'),
      type?: string(name='Type', description='The type of the monitored objects. Valid values:

*   Task: node
*   Baseline: baseline
*   project: workspace
*   BizProcess: workflow', example='Task'),
    }(name='Target', description='The monitored objects.'),
    type?: string(name='Type', description='The alert type. Valid values:

*   Finished: An instance is successfully run.
*   UnFinished: An instance does not finish running before a specified point in time.
*   Error: An error occurs on an instance.
*   CycleUnfinished: An instance does not finish running as expected within a specific cycle.
*   Timeout: An instance times out.
*   InstanceTransferComplete: An instance is generated by the auto triggered node.
*   InstanceTransferFluctuate: The number of generated instances fluctuates.
*   ExhaustedError: An error persists after an instance is automatically rerun.
*   InstanceKeyword: An instance with errors contains specified keywords.
*   InstanceErrorCount: The number of instances on which an error occurs reaches a specified threshold.
*   InstanceErrorPercentage: The proportion of instances on which an error occurs in the workspace to the total number of instances reaches a specified threshold.
*   ResourceGroupPercentage: The usage rate of the resource group reaches a specified threshold.
*   ResourceGroupWaitCount: The number of instances that are waiting for resources in the resource group reaches a specified threshold.', example='ERROR'),
  }(name='TriggerCondition', description='The alert triggering condition.'),
}

model UpdateAlertRuleShrinkRequest {
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the rule.', example='true'),
  id?: long(name='Id', description='The rule ID.', example='105412'),
  name?: string(name='Name', description='The name of the rule.', example='collection_name'),
  notificationShrink?: string(name='Notification', description='The configuration for the alert notification.'),
  owner?: string(name='Owner', description='The ID of the Alibaba Cloud account used by the owner of the rule.', example='193379****'),
  triggerConditionShrink?: string(name='TriggerCondition', description='The alert triggering condition.'),
}

model UpdateAlertRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D85FEE2B-6174-5817-AF9E-FDD02FEDA5BC'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAlertRuleResponseBody(name='body'),
}

/**
 * @summary Updates a custom alert monitoring rule.
 *
 * @param tmpReq UpdateAlertRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAlertRuleResponse
 */
async function updateAlertRuleWithOptions(tmpReq: UpdateAlertRuleRequest, runtime: $RuntimeOptions): UpdateAlertRuleResponse {
  tmpReq.validate();
  var request = new UpdateAlertRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.notification)) {
    request.notificationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notification, 'Notification', 'json');
  }
  if (!$isNull(tmpReq.triggerCondition)) {
    request.triggerConditionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.triggerCondition, 'TriggerCondition', 'json');
  }
  var query = {};
  if (!$isNull(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.notificationShrink)) {
    query['Notification'] = request.notificationShrink;
  }
  if (!$isNull(request.owner)) {
    query['Owner'] = request.owner;
  }
  if (!$isNull(request.triggerConditionShrink)) {
    query['TriggerCondition'] = request.triggerConditionShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateAlertRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates a custom alert monitoring rule.
 *
 * @param request UpdateAlertRuleRequest
 * @return UpdateAlertRuleResponse
 */
async function updateAlertRule(request: UpdateAlertRuleRequest): UpdateAlertRuleResponse {
  var runtime = new $RuntimeOptions{};
  return updateAlertRuleWithOptions(request, runtime);
}

model UpdateDIAlarmRuleRequest {
  DIAlarmRuleId?: long(name='DIAlarmRuleId', description='This parameter is deprecated. Use the Id parameter instead.', example='34982', deprecated=true),
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='1'),
  description?: string(name='Description', description='The description of the alert rule.', example='The description of the alert rule.'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the alert rule. By default, the alert rule is disabled.', example='true'),
  id?: long(name='Id', description='The alert rule Id', example='34982'),
  metricType?: string(name='MetricType', description='The metric type in the alert rule. Valid values:

*   Heartbeat
*   FailoverCount
*   Delay
*   DdlReport
*   ResourceUtilization', example='Heartbeat'),
  name?: string(name='Name', description='The name of the alert rule.', example='alarm_rule_name'),
  notificationSettings?: {
    inhibitionInterval?: long(name='InhibitionInterval', description='The duration of the alert suppression interval. Default value: 5. Unit: minutes.', example='5', deprecated=true),
    muteInterval?: long(name='MuteInterval', description='The duration of the alert suppression interval. Default value: 5. Unit: minutes.', example='5'),
    notificationChannels?: [ 
      {
        channels?: [ string ](name='Channels', description='The alert notification method. Valid values:

*   Mail
*   Phone
*   Sms
*   Ding'),
        severity?: string(name='Severity', description='The severity level. Valid values:

*   Warning
*   Critical', example='Warning'),
      }
    ](name='NotificationChannels', description='The alert notification methods.'),
    notificationReceivers?: [ 
      {
        receiverType?: string(name='ReceiverType', description='The recipient type. Valid values: AliyunUid, DingToken, FeishuToken, and WebHookUrl.', example='DingToken'),
        receiverValues?: [ string ](name='ReceiverValues', description='The recipient.

*   If the ReceiverType parameter is set to AliyunUid, set this parameter to the Alibaba Cloud account ID of a user.
*   If the ReceiverType parameter is set to DingToken, set this parameter to the token of a DingTalk chatbot.'),
      }
    ](name='NotificationReceivers', description='The settings of alert notification recipients.'),
  }(name='NotificationSettings', description='The alert notification settings.'),
  triggerConditions?: [ 
    {
      ddlReportTags?: [ string ](name='DdlReportTags', description='The types of DDL operations for which the alert rule takes effect.', deprecated=true),
      ddlTypes?: [ string ](name='DdlTypes', description='The types of DDL operations for which the alert rule takes effect.'),
      duration?: long(name='Duration', description='The time interval for alert calculation. Unit: minutes.', example='15'),
      severity?: string(name='Severity', description='The severity level. Valid values:

*   Warning
*   Critical', example='Warning'),
      threshold?: long(name='Threshold', description='The alert threshold.

*   If the alert rule is for task status, you do not need to specify a threshold.
*   If the alert rule is for failovers, you must specify the number of failovers.
*   If the alert rule is for latency, you must specify the latency duration, in seconds.', example='5'),
    }
  ](name='TriggerConditions', description='The conditions that can trigger the alert rule.'),
}

model UpdateDIAlarmRuleShrinkRequest {
  DIAlarmRuleId?: long(name='DIAlarmRuleId', description='This parameter is deprecated. Use the Id parameter instead.', example='34982', deprecated=true),
  DIJobId?: long(name='DIJobId', description='The ID of the synchronization task.', example='1'),
  description?: string(name='Description', description='The description of the alert rule.', example='The description of the alert rule.'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the alert rule. By default, the alert rule is disabled.', example='true'),
  id?: long(name='Id', description='The alert rule Id', example='34982'),
  metricType?: string(name='MetricType', description='The metric type in the alert rule. Valid values:

*   Heartbeat
*   FailoverCount
*   Delay
*   DdlReport
*   ResourceUtilization', example='Heartbeat'),
  name?: string(name='Name', description='The name of the alert rule.', example='alarm_rule_name'),
  notificationSettingsShrink?: string(name='NotificationSettings', description='The alert notification settings.'),
  triggerConditionsShrink?: string(name='TriggerConditions', description='The conditions that can trigger the alert rule.'),
}

model UpdateDIAlarmRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='A6C6B486-E3A2-5D52-9E76-D9380485D946'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateDIAlarmRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDIAlarmRuleResponseBody(name='body'),
}

/**
 * @summary Updates an alert rule configured for a synchronization task.
 *
 * @param tmpReq UpdateDIAlarmRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDIAlarmRuleResponse
 */
async function updateDIAlarmRuleWithOptions(tmpReq: UpdateDIAlarmRuleRequest, runtime: $RuntimeOptions): UpdateDIAlarmRuleResponse {
  tmpReq.validate();
  var request = new UpdateDIAlarmRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.notificationSettings)) {
    request.notificationSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notificationSettings, 'NotificationSettings', 'json');
  }
  if (!$isNull(tmpReq.triggerConditions)) {
    request.triggerConditionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.triggerConditions, 'TriggerConditions', 'json');
  }
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDIAlarmRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates an alert rule configured for a synchronization task.
 *
 * @param request UpdateDIAlarmRuleRequest
 * @return UpdateDIAlarmRuleResponse
 */
async function updateDIAlarmRule(request: UpdateDIAlarmRuleRequest): UpdateDIAlarmRuleResponse {
  var runtime = new $RuntimeOptions{};
  return updateDIAlarmRuleWithOptions(request, runtime);
}

model UpdateDIJobRequest {
  DIJobId?: long(name='DIJobId', description='This parameter is deprecated. Use the Id parameter instead.', example='11588', deprecated=true),
  description?: string(name='Description', description='The description of the synchronization task.', example='The description of the synchronization task.'),
  id?: long(name='Id', description='The ID of the synchronization task.', example='11588'),
  jobSettings?: {
    channelSettings?: string(name='ChannelSettings', description='The channel control settings for the synchronization task. The value of this parameter must be a JSON string.', example='{"structInfo":"MANAGED","storageType":"TEXTFILE","writeMode":"APPEND","partitionColumns":[{"columnName":"pt","columnType":"STRING","comment":""}],"fieldDelimiter":""}'),
    columnDataTypeSettings?: [ 
      {
        destinationDataType?: string(name='DestinationDataType', description='The data type of the destination field.', example='text'),
        sourceDataType?: string(name='SourceDataType', description='The data type of the source field.', example='bigint'),
      }
    ](name='ColumnDataTypeSettings', description='The data type mappings between source fields and destination fields.'),
    cycleScheduleSettings?: {
      scheduleParameters?: string(name='ScheduleParameters', description='The scheduling parameters.', example='bizdate=$bizdate'),
    }(name='CycleScheduleSettings', description='The settings for periodic scheduling.'),
    ddlHandlingSettings?: [ 
      {
        action?: string(name='Action', description='The processing policy. Valid values:

*   Ignore: ignores a DDL message.
*   Critical: reports an error for a DDL message.
*   Normal: normally processes a DDL message.', example='Critical'),
        type?: string(name='Type', description='The type of the DDL operation. Valid values:

*   RenameColumn
*   ModifyColumn
*   CreateTable
*   TruncateTable
*   DropTable
*   DropColumn
*   AddColumn', example='AddColumn'),
      }
    ](name='DdlHandlingSettings', description='The processing settings for DDL messages.'),
    runtimeSettings?: [ 
      {
        name?: string(name='Name', description='The name of the configuration item. Valid values:

*   runtime.offline.speed.limit.mb: indicates the maximum transmission rate that is allowed for a batch synchronization task. This configuration item takes effect only when runtime.offline.speed.limit.enable is set to true.
*   runtime.offline.speed.limit.enable: indicates whether throttling is enabled for a batch synchronization task.
*   dst.offline.connection.max: indicates the maximum number of connections that are allowed for writing data to the destination of a batch synchronization task.
*   runtime.offline.concurrent: indicates the maximum number of parallel threads that are allowed for a batch synchronization task.
*   dst.realtime.connection.max: indicates the maximum number of connections that are allowed for writing data to the destination of a real-time synchronization task.
*   runtime.enable.auto.create.schema: indicates whether schemas are automatically created in the destination of a synchronization task.
*   src.offline.datasource.max.connection: indicates the maximum number of connections that are allowed for reading data from the source of a batch synchronization task.
*   runtime.realtime.concurrent: indicates the maximum number of parallel threads that are allowed for a real-time synchronization task.', example='runtime.offline.concurrent'),
        value?: string(name='Value', description='The value of the configuration item.', example='1'),
      }
    ](name='RuntimeSettings', description='The runtime settings.'),
  }(name='JobSettings', description='The settings for the dimension of the synchronization task. The settings include processing policies for DDL messages, policies for data type mappings between source fields and destination fields, and runtime parameters of the synchronization task.'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.

You must configure this parameter to specify the DataWorks workspace to which the operation is applied.', example='10000'),
  resourceSettings?: {
    offlineResourceSettings?: {
      requestedCu?: double(name='RequestedCu', description='The number of compute units (CUs) in the resource group for Data Integration that are used for batch synchronization.', example='2.0'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group for Data Integration used for batch synchronization.', example='S_res_group_111_222'),
    }(name='OfflineResourceSettings', description='The resource used for batch synchronization.'),
    realtimeResourceSettings?: {
      requestedCu?: double(name='RequestedCu', description='The number of CUs in the resource group for Data Integration that are used for real-time synchronization.', example='2.0'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group for Data Integration used for real-time synchronization.', example='S_res_group_111_222'),
    }(name='RealtimeResourceSettings', description='The resource used for real-time synchronization.'),
    scheduleResourceSettings?: {
      requestedCu?: double(name='RequestedCu', description='The number of CUs in the resource group for scheduling that are used for batch synchronization.', example='2.0'),
      resourceGroupIdentifier?: string(name='ResourceGroupIdentifier', description='The identifier of the resource group for scheduling used for batch synchronization.', example='S_res_group_235454102432001_1721021993437'),
    }(name='ScheduleResourceSettings', description='The resource used for scheduling.'),
  }(name='ResourceSettings', description='The resource settings.'),
  tableMappings?: [ 
    {
      sourceObjectSelectionRules?: [ 
        {
          action?: string(name='Action', description='The operation that is performed to select objects. Valid values: Include and Exclude.', example='Include'),
          expression?: string(name='Expression', description='The expression.', example='mysql_table_1'),
          expressionType?: string(name='ExpressionType', description='The expression type. Valid values: Exact and Regex.', example='Exact'),
          objectType?: string(name='ObjectType', description='The object type. Valid values:

*   Table
*   Database', example='Table'),
        }
      ](name='SourceObjectSelectionRules', description='The list of rules used to select synchronization objects in the source. The objects can be databases or tables.'),
      transformationRules?: [ 
        {
          ruleActionType?: string(name='RuleActionType', description='The action type. Valid values:

*   DefinePrimaryKey
*   Rename
*   AddColumn
*   HandleDml', example='Rename'),
          ruleName?: string(name='RuleName', description='The name of the rule. If the values of the RuleActionType parameter and the RuleTargetType parameter are the same for multiple transformation rules, you must make sure that the transformation rule names are unique.', example='rename_rule_1'),
          ruleTargetType?: string(name='RuleTargetType', description='The type of the object on which you want to perform the action. Valid values:

*   Table
*   Schema', example='Table'),
        }
      ](name='TransformationRules', description='The list of transformation rules that you want to apply to the synchronization objects selected from the source. Each entry in the list defines a transformation rule.'),
    }
  ](name='TableMappings', description='The list of mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. Each entry in the list displays a mapping between a rule used to select synchronization objects and a transformation rule applied to the selected synchronization objects.'),
  transformationRules?: [ 
    {
      ruleActionType?: string(name='RuleActionType', description='The action type. Valid values:

*   DefinePrimaryKey
*   Rename
*   AddColumn
*   HandleDml', example='Rename'),
      ruleExpression?: string(name='RuleExpression', description='The expression of the rule. The expression must be a JSON string.

Example of a renaming rule: {"expression":"${srcDatasourceName}_${srcDatabaseName}_0922","variables":[{"variableName":"srcDatabaseName","variableRules":[{"from":"fromdb","to":"todb"}]}]}.

expression: the expression of the renaming rule. The expression may contain the following variables: ${srcDatasourceName}, ${srcDatabaseName}, and ${srcTableName}. ${srcDatasourceName} indicates the name of the source. ${srcDatabaseName} indicates the name of a source database. ${srcTableName} indicates the name of a source table. variables: the generation rule for a variable used in the expression of the renaming rule. The default value of the specified variable is the original value of the object indicated by the variable. You can define a group of string replacement rules to change the original values based on your business requirements. variableName: the name of the variable. The variable name cannot be enclosed in ${}. variableRules: the string replacement rules for variables. The system runs the string replacement rules in sequence. from specifies the original string. to specifies the new string. Example of a rule used to add a specific field to the destination and assign a value to the field: {"columns":[{"columnName":"my_add_column","columnValueType":"Constant","columnValue":"123"}]}.

If you do not configure such a rule, no fields are added to the destination and no values are assigned by default. columnName: the name of the field that you want to add. columnValueType: the value type of the field. Valid values: Constant and Variable. columnValue: the value of the field. If you set the valueType parameter to Constant, set the columnValue parameter to a custom constant of the STRING type. If you set the valueType parameter to Variable, set the columnValue to a built-in variable. The following built-in variables are supported: EXECUTE_TIME (LONG data type), DB_NAME_SRC (STRING data type), DATASOURCE_NAME_SRC (STRING data type), TABLE_NAME_SRC (STRING data type), DB_NAME_DEST (STRING data type), DATASOURCE_NAME_DEST (STRING data type), TABLE_NAME_DEST (STRING data type), and DB_NAME_SRC_TRANSED (STRING data type). EXECUTE_TIME specifies the execution time. DB_NAME_SRC indicates the name of a source database. DATASOURCE_NAME_SRC specifies the name of the source. TABLE_NAME_SRC specifies the name of a source table. DB_NAME_DEST specifies the name of a destination database. DATASOURCE_NAME_DEST specifies the name of the destination. TABLE_NAME_DEST specifies the name of a destination table. DB_NAME_SRC_TRANSED specifies the database name obtained after a transformation. Example of a rule used to specify primary key fields for a destination table: {"columns":["ukcolumn1","ukcolumn2"]}.

If you do not configure such a rule, the primary key fields in the mapped source table are used for the destination table by default. If the destination table is an existing table, Data Integration does not modify the schema of the destination table. If the specified primary key fields do not exist in the destination table, an error is reported when the synchronization task starts to run. If the destination table is automatically created by the system, Data Integration automatically creates the schema of the destination table. The schema contains the primary key fields that you specify. If the specified primary key fields do not exist in the destination table, an error is reported when the synchronization task starts to run. Example of a rule used to process DML messages: {"dmlPolicies":[{"dmlType":"Delete","dmlAction":"Filter","filterCondition":"id > 1"}]}.

If you do not configure such a rule, the default processing policy for messages generated for insert, update, and delete operations is Normal. dmlType: the DML operation. Valid values: Insert, Update, and Delete. dmlAction: the processing policy for DML messages. Valid values: Normal, Ignore, Filter, and LogicalDelete. Filter indicates conditional processing. You can set the dmlAction parameter to Filter only when the dmlType parameter is set to Update or Delete. filterCondition: the condition used to filter DML messages. This parameter is required only when the dmlAction parameter is set to Filter.', example='{"expression":"${srcDatasoureName}_${srcDatabaseName}"}'),
      ruleName?: string(name='RuleName', description='The name of the rule. If the values of the RuleActionType parameter and the RuleTargetType parameter are the same for multiple transformation rules, you must make sure that the transformation rule names are unique.', example='rename_rule_1'),
      ruleTargetType?: string(name='RuleTargetType', description='The type of the object on which you want to perform the action. Valid values:

*   Table
*   Schema', example='Table'),
    }
  ](name='TransformationRules', description='The list of transformation rules for objects involved in the synchronization task. Each entry in the list defines a transformation rule.'),
}

model UpdateDIJobShrinkRequest {
  DIJobId?: long(name='DIJobId', description='This parameter is deprecated. Use the Id parameter instead.', example='11588', deprecated=true),
  description?: string(name='Description', description='The description of the synchronization task.', example='The description of the synchronization task.'),
  id?: long(name='Id', description='The ID of the synchronization task.', example='11588'),
  jobSettingsShrink?: string(name='JobSettings', description='The settings for the dimension of the synchronization task. The settings include processing policies for DDL messages, policies for data type mappings between source fields and destination fields, and runtime parameters of the synchronization task.'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.

You must configure this parameter to specify the DataWorks workspace to which the operation is applied.', example='10000'),
  resourceSettingsShrink?: string(name='ResourceSettings', description='The resource settings.'),
  tableMappingsShrink?: string(name='TableMappings', description='The list of mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. Each entry in the list displays a mapping between a rule used to select synchronization objects and a transformation rule applied to the selected synchronization objects.'),
  transformationRulesShrink?: string(name='TransformationRules', description='The list of transformation rules for objects involved in the synchronization task. Each entry in the list defines a transformation rule.'),
}

model UpdateDIJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can locate logs and troubleshoot issues based on the ID.', example='AAC30B35-820D-5F3E-A42C-E96BB6379325'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateDIJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDIJobResponseBody(name='body'),
}

/**
 * @summary Updates a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq UpdateDIJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDIJobResponse
 */
async function updateDIJobWithOptions(tmpReq: UpdateDIJobRequest, runtime: $RuntimeOptions): UpdateDIJobResponse {
  tmpReq.validate();
  var request = new UpdateDIJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.jobSettings)) {
    request.jobSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.jobSettings, 'JobSettings', 'json');
  }
  if (!$isNull(tmpReq.resourceSettings)) {
    request.resourceSettingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceSettings, 'ResourceSettings', 'json');
  }
  if (!$isNull(tmpReq.tableMappings)) {
    request.tableMappingsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tableMappings, 'TableMappings', 'json');
  }
  if (!$isNull(tmpReq.transformationRules)) {
    request.transformationRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.transformationRules, 'TransformationRules', 'json');
  }
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDIJob',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates a synchronization task.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request UpdateDIJobRequest
 * @return UpdateDIJobResponse
 */
async function updateDIJob(request: UpdateDIJobRequest): UpdateDIJobResponse {
  var runtime = new $RuntimeOptions{};
  return updateDIJobWithOptions(request, runtime);
}

model UpdateDataAssetTagRequest {
  description?: string(name='Description'),
  key?: string(name='Key', description='This parameter is required.', example='key1'),
  managers?: [ string ](name='Managers'),
  values?: [ string ](name='Values'),
}

model UpdateDataAssetTagShrinkRequest {
  description?: string(name='Description'),
  key?: string(name='Key', description='This parameter is required.', example='key1'),
  managersShrink?: string(name='Managers'),
  valuesShrink?: string(name='Values'),
}

model UpdateDataAssetTagResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='0bc1ec92159376'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDataAssetTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataAssetTagResponseBody(name='body'),
}

/**
 * @summary 更新标签
 *
 * @param tmpReq UpdateDataAssetTagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataAssetTagResponse
 */
async function updateDataAssetTagWithOptions(tmpReq: UpdateDataAssetTagRequest, runtime: $RuntimeOptions): UpdateDataAssetTagResponse {
  tmpReq.validate();
  var request = new UpdateDataAssetTagShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.managers)) {
    request.managersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.managers, 'Managers', 'json');
  }
  if (!$isNull(tmpReq.values)) {
    request.valuesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.values, 'Values', 'json');
  }
  var query = {};
  if (!$isNull(request.description)) {
    query['Description'] = request.description;
  }
  if (!$isNull(request.key)) {
    query['Key'] = request.key;
  }
  if (!$isNull(request.managersShrink)) {
    query['Managers'] = request.managersShrink;
  }
  if (!$isNull(request.valuesShrink)) {
    query['Values'] = request.valuesShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDataAssetTag',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 更新标签
 *
 * @param request UpdateDataAssetTagRequest
 * @return UpdateDataAssetTagResponse
 */
async function updateDataAssetTag(request: UpdateDataAssetTagRequest): UpdateDataAssetTagResponse {
  var runtime = new $RuntimeOptions{};
  return updateDataAssetTagWithOptions(request, runtime);
}

model UpdateDataQualityEvaluationTaskRequest {
  dataQualityRules?: [ 
    {
      checkingConfig?: {
        referencedSamplesFilter?: string(name='ReferencedSamplesFilter', description='The method that is used to query the referenced samples. To obtain specific types of thresholds, you must query reference values. In this example, an expression is used to specify the query method of referenced samples.', example='{"bizdate": ["-1"]}'),
        thresholds?: {
          critical?: {
            expression?: string(name='Expression'),
            operator?: string(name='Operator', description='The comparison operator. Valid values:

*
*
*
*
*
*

Valid values:

*   <=
*   <
*   ! =
*   \\\\=
*   \\\\>
*   \\\\>=', example='>'),
            value?: string(name='Value', description='The threshold value.', example='0.01'),
          }(name='Critical', description='The threshold settings for critical alerts.'),
          expected?: {
            expression?: string(name='Expression'),
            operator?: string(name='Operator', description='The comparison operator. Valid values:

*
*
*
*   <=
*   !=
*   \\\\=

Valid values:

*   <=
*   <
*   ! =
*   \\\\=
*   \\\\>
*   \\\\>=', example='='),
            value?: string(name='Value', description='The threshold value.', example='0'),
          }(name='Expected', description='The expected threshold setting.'),
          warned?: {
            expression?: string(name='Expression'),
            operator?: string(name='Operator', description='The comparison operator. Valid values:

*
*
*
*
*
*

Valid values:

*   <=
*   <
*   ! =
*   \\\\=
*   \\\\>
*   \\\\>=', example='>'),
            value?: string(name='Value', description='The threshold value.', example='0.001'),
          }(name='Warned', description='The threshold settings for normal alerts.'),
        }(name='Thresholds', description='The threshold settings.'),
        type?: string(name='Type', description='The threshold calculation method.

*
*
*
*
*

Valid values:

*   Fluctuation
*   Auto
*   FluctationDiscreate
*   Average
*   Fixed', example='Fixed'),
      }(name='CheckingConfig', description='The check settings for sample data.'),
      description?: string(name='Description', description='The description of the rule.'),
      enabled?: boolean(name='Enabled', description='Specifies whether to enable the rule.', example='true'),
      errorHandlers?: [ 
        {
          errorDataFilter?: string(name='ErrorDataFilter', description='The SQL statement that is used to filter failed tasks. If you define the rule by using custom SQL statements, you must specify an SQL statement to filter failed tasks.', example='SELECT * FROM ods_d_openapi_log WHERE status = \\\\"Error\\\\"'),
          type?: string(name='Type', description='The type of the operation.

*

Valid values:

*   SaveErrorData', example='SaveErrorData'),
        }
      ](name='ErrorHandlers', description='The operations that you can perform after the rule-based check fails.'),
      id?: long(name='Id', description='The rule ID. You can call the [ListQualityRules](https://help.aliyun.com/document_detail/173995.html) operation to query the ID of the monitoring rule.', example='1022171560'),
      name?: string(name='Name', description='The name of the monitoring rule.'),
      samplingConfig?: {
        metric?: string(name='Metric', description='The metrics used for sampling.

*
*
*
*
*
*
*
*
*
*
*
*
*
*
*

Valid values:

*   DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
*   DuplicatedCount: the number of duplicated values of the field.
*   TableSize: the table size.
*   CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
*   Max: the maximum value of the field.
*   GroupCount: the field value and the number of rows for each field value.
*   Count: the number of rows in the table.
*   CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
*   Min: the minimum value of the field.
*   Avg: the average value of the field.
*   DistinctCount: the number of unique values of the field after deduplication.
*   NullValueCount: the number of rows in which the field value is null.
*   UserDefinedSql: specifies that data is sampled by executing custom SQL statements.
*   NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
*   DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.', example='CountNotIn'),
        metricParameters?: string(name='MetricParameters', description='The parameters required for sampling.', example='{ "Columns": [ "id", "name" ] , "SQL": "select count(1) from table;"}'),
        samplingFilter?: string(name='SamplingFilter', description='The statements that are used to filter unnecessary data during sampling. The statements can be up to 16,777,215 characters in length.', example='status != \\\\"Succeeded\\\\"'),
        settingConfig?: string(name='SettingConfig', description='The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.', example='odps.sql.type.system.odps2=True,odps.sql.hive.compatible=True'),
      }(name='SamplingConfig', description='The parameters required for sampling.'),
      severity?: string(name='Severity', description='The strength of the rule.

*
*

Valid values:

*   High
*   Normal', example='Normal'),
      templateCode?: string(name='TemplateCode', description='The ID of the template used by the rule.', example='SYSTEM:field:null_value:fixed:0'),
    }
  ](name='DataQualityRules', description='The list of monitoring rules that are associated with the monitor.'),
  dataSourceId?: long(name='DataSourceId', description='The data source ID. You can call the [ListDataSources](https://help.aliyun.com/document_detail/211431.html) operation to query the ID.', example='358750'),
  description?: string(name='Description', description='The description of the monitor.'),
  hooks?: [ 
    {
      condition?: string(name='Condition', description='The hook trigger condition. When this condition is met, the hook action is triggered. Only two conditional expressions are supported:

*   Specify only one group of rule strength type and rule check status, such as ${severity} == "High" AND ${status} == "Critical". In this expression, the hook trigger condition is met if severity is High and status is Critical.
*   Specify multiple groups of rule strength types and rule check status, such as (${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error"). In this expression, the hook trigger condition is met if severity is High and status is Critical, severity is Normal and status is Critical, or severity is Normal and status is Error. The enumeration of severity in a conditional expression is the same as the enumeration of severity in DataQualityRule. The enumeration of status in a conditional expression is the same as the enumeration of status in DataQualityResult.', example='${severity} == "High" AND ${status} == "Critical"'),
      type?: string(name='Type', description='The hook type. Valid values:

*   BlockTaskInstance: Blocks the running of scheduling tasks.', example='ByScheduledTaskInstance'),
    }
  ](name='Hooks', description='The hook.'),
  id?: long(name='Id', description='The ID of the monitor.

This parameter is required.', example='7227061794'),
  name?: string(name='Name', description='The name of the monitor.'),
  notifications?: {
    condition?: string(name='Condition', description='The notification trigger condition. When this condition is met, the alert notification is triggered. Only two conditional expressions are supported:

*   Specify only one group of rule strength type and rule check status, such as ${severity} == "High" AND ${status} == "Critical". In this expression, the hook trigger condition is met if severity is High and status is Critical.
*   Specify multiple groups of rule strength types and rule check status, such as (${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error"). In this expression, the hook trigger condition is met if severity is High and status is Critical, severity is Normal and status is Critical, or severity is Normal and status is Error. The enumeration of severity in a conditional expression is the same as the enumeration of severity in DataQualityRule. The enumeration of status in a conditional expression is the same as the enumeration of status in DataQualityResult.', example='${severity} == "High" AND ${status} == "Critical"'),
    notifications?: [ 
      {
        notificationChannels?: [ 
          {
            channels?: [ string ](name='Channels', description='The alert notification method.'),
          }
        ](name='NotificationChannels', description='The alert notification method.'),
        notificationReceivers?: [ 
          {
            extension?: string(name='Extension', description='The additional parameters that are required when alerts are sent. The parameters are JSON-formatted strings. The following keys are supported:

*   atAll: specifies that all members in a group are mentioned when alerts are sent by using DingTalk. This parameter is valid only if you set ReceiverType to DingdingUrl.

Valid values:

*   WebhookUrl
*   FeishuUrl
*   DingdingUrl
*   WeixinUrl
*   AliUid', example='{  "atAll": true }'),
            receiverType?: string(name='ReceiverType', description='The type of the alert recipient.', example='DingdingUrl'),
            receiverValues?: [ string ](name='ReceiverValues', description='The alert recipient.'),
          }
        ](name='NotificationReceivers', description='The configurations of alert recipients.'),
      }
    ](name='Notifications', description='The configurations of the alert notification.'),
  }(name='Notifications', description='The configurations of alert notifications.'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.

This parameter is required.', example='10000'),
  runtimeConf?: string(name='RuntimeConf', description='The extended configurations in JSON-formatted strings. You can use this parameter only for monitors that are used to monitor the quality of E-MapReduce (EMR) data.

*   queue: The Yarn queue used when a monitor checks the quality of EMR data. By default, the queue configured for the current workspace is used.

*   sqlEngine: The SQL engine used when a monitor checks the quality of EMR data.

    *   HIVE_SQL
    *   SPARK_SQL', example='{ "queue": "default", "sqlEngine": "SPARK_SQL" }'),
  target?: {
    databaseType?: string(name='DatabaseType', description='The type of the database to which the table belongs.

Valid values:

*   maxcompute
*   hologres
*   cdh
*   analyticdb_for_mysql
*   starrocks
*   emr
*   analyticdb_for_postgresql', example='maxcompute'),
    partitionSpec?: string(name='PartitionSpec', description='The configuration of the partitioned table.', example='dt=$[yyyymmdd-1]'),
    tableGuid?: string(name='TableGuid', description='The ID of the table in Data Map.', example='odsp.openapi.ods_d_openapi_log'),
  }(name='Target', description='The monitored object of the data quality monitoring task.'),
  trigger?: {
    taskIds?: [ long ](name='TaskIds', description='The IDs of scheduling tasks. This parameter is valid only if you set Type to ByScheduledTaskInstance.'),
    type?: string(name='Type', description='The trigger type of the monitor.

*
*

Valid values:

*   ByScheduledTaskInstance: The monitor is triggered by the associated scheduling tasks.
*   ByManual: The monitor is manually triggered.', example='ByScheduledTaskInstance'),
  }(name='Trigger', description='The trigger configuration of the monitor.'),
}

model UpdateDataQualityEvaluationTaskShrinkRequest {
  dataQualityRulesShrink?: string(name='DataQualityRules', description='The list of monitoring rules that are associated with the monitor.'),
  dataSourceId?: long(name='DataSourceId', description='The data source ID. You can call the [ListDataSources](https://help.aliyun.com/document_detail/211431.html) operation to query the ID.', example='358750'),
  description?: string(name='Description', description='The description of the monitor.'),
  hooksShrink?: string(name='Hooks', description='The hook.'),
  id?: long(name='Id', description='The ID of the monitor.

This parameter is required.', example='7227061794'),
  name?: string(name='Name', description='The name of the monitor.'),
  notificationsShrink?: string(name='Notifications', description='The configurations of alert notifications.'),
  projectId?: long(name='ProjectId', description='The ID of the DataWorks workspace.

This parameter is required.', example='10000'),
  runtimeConf?: string(name='RuntimeConf', description='The extended configurations in JSON-formatted strings. You can use this parameter only for monitors that are used to monitor the quality of E-MapReduce (EMR) data.

*   queue: The Yarn queue used when a monitor checks the quality of EMR data. By default, the queue configured for the current workspace is used.

*   sqlEngine: The SQL engine used when a monitor checks the quality of EMR data.

    *   HIVE_SQL
    *   SPARK_SQL', example='{ "queue": "default", "sqlEngine": "SPARK_SQL" }'),
  targetShrink?: string(name='Target', description='The monitored object of the data quality monitoring task.'),
  triggerShrink?: string(name='Trigger', description='The trigger configuration of the monitor.'),
}

model UpdateDataQualityEvaluationTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='8abcb91f-d266-4073-b907-2ed670378ed1'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateDataQualityEvaluationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataQualityEvaluationTaskResponseBody(name='body'),
}

/**
 * @summary Updates a monitor.
 *
 * @description This API operation is supported in all DataWorks editions.
 *
 * @param tmpReq UpdateDataQualityEvaluationTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataQualityEvaluationTaskResponse
 */
async function updateDataQualityEvaluationTaskWithOptions(tmpReq: UpdateDataQualityEvaluationTaskRequest, runtime: $RuntimeOptions): UpdateDataQualityEvaluationTaskResponse {
  tmpReq.validate();
  var request = new UpdateDataQualityEvaluationTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.dataQualityRules)) {
    request.dataQualityRulesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataQualityRules, 'DataQualityRules', 'json');
  }
  if (!$isNull(tmpReq.hooks)) {
    request.hooksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hooks, 'Hooks', 'json');
  }
  if (!$isNull(tmpReq.notifications)) {
    request.notificationsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notifications, 'Notifications', 'json');
  }
  if (!$isNull(tmpReq.target)) {
    request.targetShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.target, 'Target', 'json');
  }
  if (!$isNull(tmpReq.trigger)) {
    request.triggerShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.trigger, 'Trigger', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.dataQualityRulesShrink)) {
    body['DataQualityRules'] = request.dataQualityRulesShrink;
  }
  if (!$isNull(request.dataSourceId)) {
    body['DataSourceId'] = request.dataSourceId;
  }
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.hooksShrink)) {
    body['Hooks'] = request.hooksShrink;
  }
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.notificationsShrink)) {
    body['Notifications'] = request.notificationsShrink;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.runtimeConf)) {
    body['RuntimeConf'] = request.runtimeConf;
  }
  if (!$isNull(request.targetShrink)) {
    body['Target'] = request.targetShrink;
  }
  if (!$isNull(request.triggerShrink)) {
    body['Trigger'] = request.triggerShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDataQualityEvaluationTask',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates a monitor.
 *
 * @description This API operation is supported in all DataWorks editions.
 *
 * @param request UpdateDataQualityEvaluationTaskRequest
 * @return UpdateDataQualityEvaluationTaskResponse
 */
async function updateDataQualityEvaluationTask(request: UpdateDataQualityEvaluationTaskRequest): UpdateDataQualityEvaluationTaskResponse {
  var runtime = new $RuntimeOptions{};
  return updateDataQualityEvaluationTaskWithOptions(request, runtime);
}

model UpdateDataQualityRuleRequest {
  checkingConfig?: {
    referencedSamplesFilter?: string(name='ReferencedSamplesFilter', description='The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference values. In this example, an expression is used to specify the query method of referenced samples.', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
    thresholds?: {
      critical?: {
        expression?: string(name='Expression', example='$checkValue > 0.05'),
        operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
        value?: string(name='Value', description='The threshold value.', example='100.0'),
      }(name='Critical', description='The threshold settings for critical alerts.'),
      expected?: {
        expression?: string(name='Expression', example='$checkValue <= 0.01'),
        operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
        value?: string(name='Value', description='The threshold value.', example='100.0'),
      }(name='Expected', description='The expected threshold setting.'),
      warned?: {
        expression?: string(name='Expression', example='$checkValue > 0.01'),
        operator?: string(name='Operator', description='The comparison operator. Valid values:

*   \\\\>
*   \\\\>=
*   <
*   <=
*   !=
*   \\\\=', example='>'),
        value?: string(name='Value', description='The threshold value.', example='100.0'),
      }(name='Warned', description='The threshold settings for normal alerts.'),
    }(name='Thresholds', description='The threshold settings.'),
    type?: string(name='Type', description='The threshold calculation method. Valid values:

*   Fixed
*   Fluctation
*   FluctationDiscreate
*   Auto
*   Average
*   Variance', example='Fixed'),
  }(name='CheckingConfig', description='The check settings for sample data.'),
  description?: string(name='Description', description='The description of the rule. The description can be up to 500 characters in length.', example='this is a odps _sql task'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the rule.', example='true'),
  errorHandlers?: [ 
    {
      errorDataFilter?: string(name='ErrorDataFilter', description='The SQL statement that is used to filter failed tasks. If the rule is defined by custom SQL statements, you must specify an SQL statement to filter failed tasks.', example='SELECT * FROM tb_api_log WHERE id IS NULL'),
      type?: string(name='Type', description='The type of the operation. Valid values:

*   SaveErrorData', example='SaveErrorData'),
    }
  ](name='ErrorHandlers', description='The operations that you can perform after the rule-based check fails.'),
  id?: long(name='Id', description='The rule ID.

This parameter is required.', example='100001'),
  name?: string(name='Name', description='The name of the rule. The name can be up to 255 characters in length and can contain digits, letters, and punctuation marks.'),
  projectId?: long(name='ProjectId', description='This parameter is required.'),
  samplingConfig?: {
    metric?: string(name='Metric', description='The metrics used for sampling. You can leave this parameter empty if you use a rule template. Valid values:

*   Count: the number of rows in the table.
*   Min: the minimum value of the field.
*   Max: the maximum value of the field.
*   Avg: the average value of the field.
*   DistinctCount: the number of unique values of the field after deduplication.
*   DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
*   DuplicatedCount: the number of duplicated values of the field.
*   DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
*   TableSize: the table size.
*   NullValueCount: the number of rows in which the field value is null.
*   NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
*   GroupCount: the field value and the number of rows for each field value.
*   CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
*   CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
*   UserDefinedSql: indicates that data is sampled by executing custom SQL statements.', example='Min'),
    metricParameters?: string(name='MetricParameters', description='The parameters required for sampling.', example='{ "Columns": [ "id", "name" ] , "SQL": "select count(1) from table;"}'),
    samplingFilter?: string(name='SamplingFilter', description='The statements that are used to filter unnecessary data during sampling. The statements can be up to 16,777,215 characters in length.', example='id IS NULL'),
    settingConfig?: string(name='SettingConfig', description='The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.', example='SET odps.sql.udf.timeout=600s; 
SET odps.sql.python.version=cp27;'),
  }(name='SamplingConfig', description='The sampling settings.'),
  severity?: string(name='Severity', description='The strength of the rule.

*   Normal
*   High', example='High'),
  templateCode?: string(name='TemplateCode', description='The ID of the template used by the rule.', example='system::user_defined'),
}

model UpdateDataQualityRuleShrinkRequest {
  checkingConfigShrink?: string(name='CheckingConfig', description='The check settings for sample data.'),
  description?: string(name='Description', description='The description of the rule. The description can be up to 500 characters in length.', example='this is a odps _sql task'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the rule.', example='true'),
  errorHandlersShrink?: string(name='ErrorHandlers', description='The operations that you can perform after the rule-based check fails.'),
  id?: long(name='Id', description='The rule ID.

This parameter is required.', example='100001'),
  name?: string(name='Name', description='The name of the rule. The name can be up to 255 characters in length and can contain digits, letters, and punctuation marks.'),
  projectId?: long(name='ProjectId', description='This parameter is required.'),
  samplingConfigShrink?: string(name='SamplingConfig', description='The sampling settings.'),
  severity?: string(name='Severity', description='The strength of the rule.

*   Normal
*   High', example='High'),
  templateCode?: string(name='TemplateCode', description='The ID of the template used by the rule.', example='system::user_defined'),
}

model UpdateDataQualityRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateDataQualityRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataQualityRuleResponseBody(name='body'),
}

/**
 * @summary Updates a data quality monitoring rule.
 *
 * @param tmpReq UpdateDataQualityRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataQualityRuleResponse
 */
async function updateDataQualityRuleWithOptions(tmpReq: UpdateDataQualityRuleRequest, runtime: $RuntimeOptions): UpdateDataQualityRuleResponse {
  tmpReq.validate();
  var request = new UpdateDataQualityRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.checkingConfig)) {
    request.checkingConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.checkingConfig, 'CheckingConfig', 'json');
  }
  if (!$isNull(tmpReq.errorHandlers)) {
    request.errorHandlersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.errorHandlers, 'ErrorHandlers', 'json');
  }
  if (!$isNull(tmpReq.samplingConfig)) {
    request.samplingConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.samplingConfig, 'SamplingConfig', 'json');
  }
  var query = {};
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var body : map[string]any = {};
  if (!$isNull(request.checkingConfigShrink)) {
    body['CheckingConfig'] = request.checkingConfigShrink;
  }
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.enabled)) {
    body['Enabled'] = request.enabled;
  }
  if (!$isNull(request.errorHandlersShrink)) {
    body['ErrorHandlers'] = request.errorHandlersShrink;
  }
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.samplingConfigShrink)) {
    body['SamplingConfig'] = request.samplingConfigShrink;
  }
  if (!$isNull(request.severity)) {
    body['Severity'] = request.severity;
  }
  if (!$isNull(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDataQualityRule',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates a data quality monitoring rule.
 *
 * @param request UpdateDataQualityRuleRequest
 * @return UpdateDataQualityRuleResponse
 */
async function updateDataQualityRule(request: UpdateDataQualityRuleRequest): UpdateDataQualityRuleResponse {
  var runtime = new $RuntimeOptions{};
  return updateDataQualityRuleWithOptions(request, runtime);
}

model UpdateDataQualityRuleTemplateRequest {
  checkingConfig?: {
    referencedSamplesFilter?: string(name='ReferencedSamplesFilter', description='The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference samples and perform aggregate operations on the reference values. In this example, an expression is used to specify the query method of referenced samples.', example='{ "bizdate": [ "-1", "-7", "-1m" ] }'),
    type?: string(name='Type', description='The type of the monitored object. Valid values:

*   Table', example='Table'),
  }(name='CheckingConfig', description='The check settings for sample data.'),
  code?: string(name='Code', description='The code for the template.

This parameter is required.', example='USER_DEFINED:123'),
  directoryPath?: string(name='DirectoryPath', description='The directory in which the template is stored. Slashes (/) are used to separate directory levels. The name of each directory level can be up to 1,024 characters in length. It cannot contain whitespace characters or slashes (/).'),
  name?: string(name='Name', description='The name of the template. The name can be up to 512 characters in length and can contain digits, letters, and punctuation marks.'),
  projectId?: long(name='ProjectId', description='This parameter is required.'),
  samplingConfig?: {
    metric?: string(name='Metric', description='The metrics used for sampling. Valid values:

*   Count: the number of rows in the table.
*   Min: the minimum value of the field.
*   Max: the maximum value of the field.
*   Avg: the average value of the field.
*   DistinctCount: the number of unique values of the field after deduplication.
*   DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
*   DuplicatedCount: the number of duplicated values of the field.
*   DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
*   TableSize: the table size.
*   NullValueCount: the number of rows in which the field value is null.
*   NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
*   GroupCount: the field value and the number of rows for each field value.
*   CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
*   CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
*   UserDefinedSql: indicates that data is sampled by executing custom SQL statements.', example='Max'),
    metricParameters?: string(name='MetricParameters', description='The parameters required for sampling.', example='{"SQL": "select count(1) from table;"}'),
    settingConfig?: string(name='SettingConfig', description='The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.', example='SET odps.sql.udf.timeout=600s; 
SET odps.sql.python.version=cp27;'),
  }(name='SamplingConfig', description='The sampling settings.'),
}

model UpdateDataQualityRuleTemplateShrinkRequest {
  checkingConfigShrink?: string(name='CheckingConfig', description='The check settings for sample data.'),
  code?: string(name='Code', description='The code for the template.

This parameter is required.', example='USER_DEFINED:123'),
  directoryPath?: string(name='DirectoryPath', description='The directory in which the template is stored. Slashes (/) are used to separate directory levels. The name of each directory level can be up to 1,024 characters in length. It cannot contain whitespace characters or slashes (/).'),
  name?: string(name='Name', description='The name of the template. The name can be up to 512 characters in length and can contain digits, letters, and punctuation marks.'),
  projectId?: long(name='ProjectId', description='This parameter is required.'),
  samplingConfigShrink?: string(name='SamplingConfig', description='The sampling settings.'),
}

model UpdateDataQualityRuleTemplateResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='691CA452-D37A-4ED0-9441'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateDataQualityRuleTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataQualityRuleTemplateResponseBody(name='body'),
}

/**
 * @summary Updates a data quality monitoring rule template.
 *
 * @param tmpReq UpdateDataQualityRuleTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataQualityRuleTemplateResponse
 */
async function updateDataQualityRuleTemplateWithOptions(tmpReq: UpdateDataQualityRuleTemplateRequest, runtime: $RuntimeOptions): UpdateDataQualityRuleTemplateResponse {
  tmpReq.validate();
  var request = new UpdateDataQualityRuleTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.checkingConfig)) {
    request.checkingConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.checkingConfig, 'CheckingConfig', 'json');
  }
  if (!$isNull(tmpReq.samplingConfig)) {
    request.samplingConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.samplingConfig, 'SamplingConfig', 'json');
  }
  var query = {};
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var body : map[string]any = {};
  if (!$isNull(request.checkingConfigShrink)) {
    body['CheckingConfig'] = request.checkingConfigShrink;
  }
  if (!$isNull(request.code)) {
    body['Code'] = request.code;
  }
  if (!$isNull(request.directoryPath)) {
    body['DirectoryPath'] = request.directoryPath;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.samplingConfigShrink)) {
    body['SamplingConfig'] = request.samplingConfigShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDataQualityRuleTemplate',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates a data quality monitoring rule template.
 *
 * @param request UpdateDataQualityRuleTemplateRequest
 * @return UpdateDataQualityRuleTemplateResponse
 */
async function updateDataQualityRuleTemplate(request: UpdateDataQualityRuleTemplateRequest): UpdateDataQualityRuleTemplateResponse {
  var runtime = new $RuntimeOptions{};
  return updateDataQualityRuleTemplateWithOptions(request, runtime);
}

model UpdateDataSourceRequest {
  connectionProperties?: string(name='ConnectionProperties', description='The connection configurations of the data source, including the connection address, access identity, and environment information. The envType parameter specifies the environment in which the data source is used. Valid values of the envType parameter:

*   Dev: development environment
*   Prod: production environment

The parameters that you need to configure to the data source vary based on the mode in which the data source is added. For more information, see [Data source connection information (ConnectionProperties)](https://help.aliyun.com/document_detail/2852465.html).

This parameter is required.', example='{
	"envType": "Prod",
	"regionId": "cn-beijing",
    "instanceId": "hgprecn-cn-x0r3oun4k001",
    "database": "testdb",
    "securityProtocol": "authTypeNone",
    "authType": "Executor",
    "authIdentity": "1107550004253538"
}'),
  connectionPropertiesMode?: string(name='ConnectionPropertiesMode', description='The mode in which the data source is added. The mode varies based on the data source type. Valid values:

*   InstanceMode: instance mode
*   UrlMode: connection string mode
*   CdhMode: CDH cluster mode', example='UrlMode'),
  description?: string(name='Description', description='The description of the data source. The description cannot exceed 3,000 characters in length.', example='test'),
  id?: long(name='Id', description='The data source ID.

This parameter is required.', example='16033'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID.

This parameter is required.', example='5678'),
}

model UpdateDataSourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='102E8E24-0387-531D-8A75-1C0AE7DD03E5'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSourceResponseBody(name='body'),
}

/**
 * @summary Modifies a data source by ID.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Tenant Administrator, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request UpdateDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataSourceResponse
 */
async function updateDataSourceWithOptions(request: UpdateDataSourceRequest, runtime: $RuntimeOptions): UpdateDataSourceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.connectionProperties)) {
    query['ConnectionProperties'] = request.connectionProperties;
  }
  if (!$isNull(request.connectionPropertiesMode)) {
    query['ConnectionPropertiesMode'] = request.connectionPropertiesMode;
  }
  if (!$isNull(request.description)) {
    query['Description'] = request.description;
  }
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDataSource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Modifies a data source by ID.
 *
 * @description 1.  This API operation is available for all DataWorks editions.
 * 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
 * *   Tenant Owner, Tenant Administrator, Workspace Administrator, Workspace Owner, and O\\&M
 *
 * @param request UpdateDataSourceRequest
 * @return UpdateDataSourceResponse
 */
async function updateDataSource(request: UpdateDataSourceRequest): UpdateDataSourceResponse {
  var runtime = new $RuntimeOptions{};
  return updateDataSourceWithOptions(request, runtime);
}

model UpdateFunctionRequest {
  id?: long(name='Id', description='The ID of the UDF.

This parameter is required.', example='463497880880954XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000'),
  spec?: string(name='Spec', description='The FlowSpec field information about the UDF. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.'),
}

model UpdateFunctionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='12123960-CB2C-5086-868E-C6C1D024XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true

false', example='true'),
}

model UpdateFunctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFunctionResponseBody(name='body'),
}

/**
 * @summary Updates the basic information about a user-defined function (UDF) in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateFunctionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateFunctionResponse
 */
async function updateFunctionWithOptions(request: UpdateFunctionRequest, runtime: $RuntimeOptions): UpdateFunctionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateFunction',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates the basic information about a user-defined function (UDF) in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateFunctionRequest
 * @return UpdateFunctionResponse
 */
async function updateFunction(request: UpdateFunctionRequest): UpdateFunctionResponse {
  var runtime = new $RuntimeOptions{};
  return updateFunctionWithOptions(request, runtime);
}

model UpdateNodeRequest {
  id?: long(name='Id', description='The ID of the node.

This parameter is required.', example='652567824470354XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000'),
  spec?: string(name='Spec', description='The FlowSpec field information about the node. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.'),
}

model UpdateNodeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='99EBE7CF-69C0-5089-BE3E-79563C31XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNodeResponseBody(name='body'),
}

/**
 * @summary Updates the basic information about a node in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateNodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateNodeResponse
 */
async function updateNodeWithOptions(request: UpdateNodeRequest, runtime: $RuntimeOptions): UpdateNodeResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateNode',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates the basic information about a node in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateNodeRequest
 * @return UpdateNodeResponse
 */
async function updateNode(request: UpdateNodeRequest): UpdateNodeResponse {
  var runtime = new $RuntimeOptions{};
  return updateNodeWithOptions(request, runtime);
}

model UpdateProjectRequest {
  description?: string(name='Description', description='The description of the workspace.'),
  devEnvironmentEnabled?: boolean(name='DevEnvironmentEnabled', description='Specifies whether to enable the development environment. Valid values:

*   true: enables the development environment. In this case, the development environment is isolated from the production environment in the workspace.
*   false: disables the development environment. In this case, only the production environment is used in the workspace.', example='true'),
  devRoleDisabled?: boolean(name='DevRoleDisabled', description='Specifies whether to disable the Develop role. Valid values:

*   false (default)
*   true

Note: If you disable the Develop role, you cannot assume the Develop role to develop nodes in workflows and edit node code. The Develop role cannot be enabled again after it is disabled.', example='true'),
  displayName?: string(name='DisplayName', description='The display name of the workspace.'),
  id?: long(name='Id', description='This parameter is required.', example='123456'),
  paiTaskEnabled?: boolean(name='PaiTaskEnabled', description='Specifies whether to enable scheduling of Platform for AI (PAI) tasks. Valid values:

*   true: enables scheduling of PAI tasks. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
*   false: disables scheduling of PAI tasks.', example='true'),
  status?: string(name='Status', description='Specifies whether to disable or enable the workspace. Valid values:

*   Available: enables the workspace.
*   Forbidden: disables the workspace.', example='Forbidden'),
}

model UpdateProjectResponseBody = {
  requestId?: string(name='RequestId', example='AFBB799F-8578-51C5-A766-E922EDB8XXXX'),
}

model UpdateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProjectResponseBody(name='body'),
}

/**
 * @summary Updates a DataWorks workspace.
 *
 * @param request UpdateProjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateProjectResponse
 */
async function updateProjectWithOptions(request: UpdateProjectRequest, runtime: $RuntimeOptions): UpdateProjectResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.devEnvironmentEnabled)) {
    body['DevEnvironmentEnabled'] = request.devEnvironmentEnabled;
  }
  if (!$isNull(request.devRoleDisabled)) {
    body['DevRoleDisabled'] = request.devRoleDisabled;
  }
  if (!$isNull(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.paiTaskEnabled)) {
    body['PaiTaskEnabled'] = request.paiTaskEnabled;
  }
  if (!$isNull(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateProject',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates a DataWorks workspace.
 *
 * @param request UpdateProjectRequest
 * @return UpdateProjectResponse
 */
async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  var runtime = new $RuntimeOptions{};
  return updateProjectWithOptions(request, runtime);
}

model UpdateResourceRequest {
  id?: long(name='Id', description='The ID of the file resource.

This parameter is required.', example='543217824470354XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10000'),
  spec?: string(name='Spec', description='The FlowSpec field information about the file resource. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.'),
}

model UpdateResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4CDF7B72-020B-542A-8465-21CFFA81XXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourceResponseBody(name='body'),
}

/**
 * @summary Updates the basic information about a file resource in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateResourceResponse
 */
async function updateResourceWithOptions(request: UpdateResourceRequest, runtime: $RuntimeOptions): UpdateResourceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateResource',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates the basic information about a file resource in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateResourceRequest
 * @return UpdateResourceResponse
 */
async function updateResource(request: UpdateResourceRequest): UpdateResourceResponse {
  var runtime = new $RuntimeOptions{};
  return updateResourceWithOptions(request, runtime);
}

model UpdateResourceGroupRequest {
  aliyunResourceGroupId?: string(name='AliyunResourceGroupId', description='The ID of the resource group.', example='rg-aek2kqofrgXXXXX'),
  id?: string(name='Id', description='The ID of the resource group.

This parameter is required.', example='Serverless_res_group_524257424564736_6831777003XXXXX'),
  name?: string(name='Name', description='The new name that you want to change for the resource group.', example='common_resource_group'),
  remark?: string(name='Remark', description='The new remarks that you want to modify for the resource group.', example='创建用于普通任务的通用资源组'),
}

model UpdateResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to locate logs and troubleshoot issues.', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourceGroupResponseBody(name='body'),
}

/**
 * @summary Updates basic information about a resource group.
 *
 * @description You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 *
 * @param request UpdateResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateResourceGroupResponse
 */
async function updateResourceGroupWithOptions(request: UpdateResourceGroupRequest, runtime: $RuntimeOptions): UpdateResourceGroupResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.aliyunResourceGroupId)) {
    body['AliyunResourceGroupId'] = request.aliyunResourceGroupId;
  }
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.remark)) {
    body['Remark'] = request.remark;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateResourceGroup',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates basic information about a resource group.
 *
 * @description You can use this API operation only in DataWorks Basic Edition or an advanced edition.
 *
 * @param request UpdateResourceGroupRequest
 * @return UpdateResourceGroupResponse
 */
async function updateResourceGroup(request: UpdateResourceGroupRequest): UpdateResourceGroupResponse {
  var runtime = new $RuntimeOptions{};
  return updateResourceGroupWithOptions(request, runtime);
}

model UpdateRouteRequest {
  destinationCidr?: string(name='DestinationCidr', description='The destination CIDR block of the route that you want to update.

This parameter is required.', example='192.168.0.0/16'),
  id?: long(name='Id', description='This parameter is required.', example='1000'),
}

model UpdateRouteResponseBody = {
  requestId?: string(name='RequestId', example='6A6CBE87-9F91-1323-B680-E7A7065XXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRouteResponseBody(name='body'),
}

/**
 * @summary Updates the information about a route.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request UpdateRouteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateRouteResponse
 */
async function updateRouteWithOptions(request: UpdateRouteRequest, runtime: $RuntimeOptions): UpdateRouteResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.destinationCidr)) {
    body['DestinationCidr'] = request.destinationCidr;
  }
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateRoute',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates the information about a route.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request UpdateRouteRequest
 * @return UpdateRouteResponse
 */
async function updateRoute(request: UpdateRouteRequest): UpdateRouteResponse {
  var runtime = new $RuntimeOptions{};
  return updateRouteWithOptions(request, runtime);
}

model UpdateTaskRequest {
  clientUniqueCode?: string(name='ClientUniqueCode', example='Task_0bc5213917368545132902xxxxxxxx'),
  dataSource?: {
    name?: string(name='Name', example='odps_test'),
  }(name='DataSource'),
  dependencies?: [ 
    {
      type?: string(name='Type', description='This parameter is required.', example='Normal'),
      upstreamOutput?: string(name='UpstreamOutput', example='pre.odps_sql_demo_0'),
      upstreamTaskId?: long(name='UpstreamTaskId', example='1234'),
    }
  ](name='Dependencies'),
  description?: string(name='Description', example='test'),
  envType?: string(name='EnvType', example='Prod'),
  id?: long(name='Id', description='This parameter is required.', example='1234'),
  inputs?: {
    variables?: [ 
      {
        name?: string(name='Name', example='key1'),
        type?: string(name='Type', description='This parameter is required.', example='Constant'),
        value?: string(name='Value', example='value1'),
      }
    ](name='Variables'),
  }(name='Inputs'),
  instanceMode?: string(name='InstanceMode', example='T+1'),
  name?: string(name='Name', description='This parameter is required.'),
  outputs?: {
    taskOutputs?: [ 
      {
        output?: string(name='Output', example='pre.odps_sql_demo_0'),
      }
    ](name='TaskOutputs'),
    variables?: [ 
      {
        name?: string(name='Name', example='key1'),
        type?: string(name='Type', description='This parameter is required.', example='Constant'),
        value?: string(name='Value', example='value1'),
      }
    ](name='Variables'),
  }(name='Outputs'),
  owner?: string(name='Owner', description='This parameter is required.', example='1000'),
  rerunInterval?: int32(name='RerunInterval', example='60'),
  rerunMode?: string(name='RerunMode', description='This parameter is required.', example='AllAllowed'),
  rerunTimes?: int32(name='RerunTimes', example='3'),
  runtimeResource?: {
    cu?: string(name='Cu', example='0.25'),
    image?: string(name='Image', example='i-xxxxxx'),
    resourceGroupId?: string(name='ResourceGroupId', description='This parameter is required.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
  }(name='RuntimeResource', description='This parameter is required.'),
  script?: {
    content?: string(name='Content', example='echo "helloWorld"'),
    parameters?: string(name='Parameters', example='para1=$bizdate'),
  }(name='Script'),
  tags?: [ 
    {
      key?: string(name='Key', description='This parameter is required.', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tags'),
  timeout?: int32(name='Timeout', example='3600'),
  trigger?: {
    cron?: string(name='Cron', example='00 00 00 * * ?'),
    endTime?: string(name='EndTime', example='9999-01-01 00:00:00'),
    recurrence?: string(name='Recurrence', example='Normal'),
    startTime?: string(name='StartTime', example='1970-01-01 00:00:00'),
    type?: string(name='Type', description='This parameter is required.', example='Scheduler'),
  }(name='Trigger', description='This parameter is required.'),
}

model UpdateTaskShrinkRequest {
  clientUniqueCode?: string(name='ClientUniqueCode', example='Task_0bc5213917368545132902xxxxxxxx'),
  dataSourceShrink?: string(name='DataSource'),
  dependenciesShrink?: string(name='Dependencies'),
  description?: string(name='Description', example='test'),
  envType?: string(name='EnvType', example='Prod'),
  id?: long(name='Id', description='This parameter is required.', example='1234'),
  inputsShrink?: string(name='Inputs'),
  instanceMode?: string(name='InstanceMode', example='T+1'),
  name?: string(name='Name', description='This parameter is required.'),
  outputsShrink?: string(name='Outputs'),
  owner?: string(name='Owner', description='This parameter is required.', example='1000'),
  rerunInterval?: int32(name='RerunInterval', example='60'),
  rerunMode?: string(name='RerunMode', description='This parameter is required.', example='AllAllowed'),
  rerunTimes?: int32(name='RerunTimes', example='3'),
  runtimeResourceShrink?: string(name='RuntimeResource', description='This parameter is required.'),
  scriptShrink?: string(name='Script'),
  tagsShrink?: string(name='Tags'),
  timeout?: int32(name='Timeout', example='3600'),
  triggerShrink?: string(name='Trigger', description='This parameter is required.'),
}

model UpdateTaskResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskResponseBody(name='body'),
}

/**
 * @param tmpReq UpdateTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateTaskResponse
 */
async function updateTaskWithOptions(tmpReq: UpdateTaskRequest, runtime: $RuntimeOptions): UpdateTaskResponse {
  tmpReq.validate();
  var request = new UpdateTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.dataSource)) {
    request.dataSourceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataSource, 'DataSource', 'json');
  }
  if (!$isNull(tmpReq.dependencies)) {
    request.dependenciesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dependencies, 'Dependencies', 'json');
  }
  if (!$isNull(tmpReq.inputs)) {
    request.inputsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.inputs, 'Inputs', 'json');
  }
  if (!$isNull(tmpReq.outputs)) {
    request.outputsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.outputs, 'Outputs', 'json');
  }
  if (!$isNull(tmpReq.runtimeResource)) {
    request.runtimeResourceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.runtimeResource, 'RuntimeResource', 'json');
  }
  if (!$isNull(tmpReq.script)) {
    request.scriptShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.script, 'Script', 'json');
  }
  if (!$isNull(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  if (!$isNull(tmpReq.trigger)) {
    request.triggerShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.trigger, 'Trigger', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.clientUniqueCode)) {
    body['ClientUniqueCode'] = request.clientUniqueCode;
  }
  if (!$isNull(request.dataSourceShrink)) {
    body['DataSource'] = request.dataSourceShrink;
  }
  if (!$isNull(request.dependenciesShrink)) {
    body['Dependencies'] = request.dependenciesShrink;
  }
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.inputsShrink)) {
    body['Inputs'] = request.inputsShrink;
  }
  if (!$isNull(request.instanceMode)) {
    body['InstanceMode'] = request.instanceMode;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.outputsShrink)) {
    body['Outputs'] = request.outputsShrink;
  }
  if (!$isNull(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!$isNull(request.rerunInterval)) {
    body['RerunInterval'] = request.rerunInterval;
  }
  if (!$isNull(request.rerunMode)) {
    body['RerunMode'] = request.rerunMode;
  }
  if (!$isNull(request.rerunTimes)) {
    body['RerunTimes'] = request.rerunTimes;
  }
  if (!$isNull(request.runtimeResourceShrink)) {
    body['RuntimeResource'] = request.runtimeResourceShrink;
  }
  if (!$isNull(request.scriptShrink)) {
    body['Script'] = request.scriptShrink;
  }
  if (!$isNull(request.tagsShrink)) {
    body['Tags'] = request.tagsShrink;
  }
  if (!$isNull(request.timeout)) {
    body['Timeout'] = request.timeout;
  }
  if (!$isNull(request.triggerShrink)) {
    body['Trigger'] = request.triggerShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateTask',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @param request UpdateTaskRequest
 * @return UpdateTaskResponse
 */
async function updateTask(request: UpdateTaskRequest): UpdateTaskResponse {
  var runtime = new $RuntimeOptions{};
  return updateTaskWithOptions(request, runtime);
}

model UpdateTaskInstancesRequest {
  comment?: string(name='Comment', description='The remarks.', example='this is a comment'),
  taskInstances?: [ 
    {
      dataSource?: {
        name?: string(name='Name', description='The name of the data source.', example='mysql_test'),
      }(name='DataSource', description='The information about the associated data source.'),
      id?: long(name='Id', description='The instance ID.

This parameter is required.', example='1234'),
      priority?: int32(name='Priority', description='The priority of the instance. Valid values: 1, 3, 5, 7, and 8.

A larger value indicates a higher priority. Default value: 1.', example='1'),
      runtimeResource?: string(name='RuntimeResource', description='The resource group information. Set this parameter to the ID of a resource group for scheduling.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
    }
  ](name='TaskInstances', description='The instances.'),
}

model UpdateTaskInstancesShrinkRequest {
  comment?: string(name='Comment', description='The remarks.', example='this is a comment'),
  taskInstancesShrink?: string(name='TaskInstances', description='The instances.'),
}

model UpdateTaskInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  successInfo?: map[string]SuccessInfoValue(name='SuccessInfo', description='The result of the batch operation, which is in the MAP structure. The instance ID serves as a key, and the result serves as a value.'),
}

model UpdateTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskInstancesResponseBody(name='body'),
}

/**
 * @summary Modifies properties configured for multiple instances at a time. The properties include the priority, resource group for scheduling, and data source.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param tmpReq UpdateTaskInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateTaskInstancesResponse
 */
async function updateTaskInstancesWithOptions(tmpReq: UpdateTaskInstancesRequest, runtime: $RuntimeOptions): UpdateTaskInstancesResponse {
  tmpReq.validate();
  var request = new UpdateTaskInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.taskInstances)) {
    request.taskInstancesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.taskInstances, 'TaskInstances', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.comment)) {
    body['Comment'] = request.comment;
  }
  if (!$isNull(request.taskInstancesShrink)) {
    body['TaskInstances'] = request.taskInstancesShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateTaskInstances',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Modifies properties configured for multiple instances at a time. The properties include the priority, resource group for scheduling, and data source.
 *
 * @description This API operation is available for all DataWorks editions.
 *
 * @param request UpdateTaskInstancesRequest
 * @return UpdateTaskInstancesResponse
 */
async function updateTaskInstances(request: UpdateTaskInstancesRequest): UpdateTaskInstancesResponse {
  var runtime = new $RuntimeOptions{};
  return updateTaskInstancesWithOptions(request, runtime);
}

model UpdateWorkflowRequest {
  clientUniqueCode?: string(name='ClientUniqueCode', example='Workflow_0bc5213917368545132902xxxxxxxx'),
  dependencies?: [ 
    {
      type?: string(name='Type', description='This parameter is required.', example='Normal'),
      upstreamOutput?: string(name='UpstreamOutput', example='pre.odps_sql_demo_0'),
      upstreamTaskId?: long(name='UpstreamTaskId', example='1234'),
    }
  ](name='Dependencies'),
  description?: string(name='Description', example='test'),
  envType?: string(name='EnvType', example='Prod'),
  id?: long(name='Id', description='This parameter is required.', example='1234'),
  name?: string(name='Name', description='This parameter is required.'),
  outputs?: {
    taskOutputs?: [ 
      {
        output?: string(name='Output', example='pre.odps_sql_demo_0'),
      }
    ](name='TaskOutputs'),
  }(name='Outputs'),
  owner?: string(name='Owner', description='This parameter is required.', example='1000'),
  parameters?: string(name='Parameters', example='para1=$bizdate para2=$[yyyymmdd]'),
  tags?: [ 
    {
      key?: string(name='Key', description='This parameter is required.', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tags'),
  tasks?: [ 
    {
      baseLineId?: long(name='BaseLineId', example='1234'),
      clientUniqueCode?: string(name='ClientUniqueCode', example='Task_0bc5213917368545132902xxxxxxxx'),
      dataSource?: {
        name?: string(name='Name', example='odps_test'),
      }(name='DataSource'),
      dependencies?: [ 
        {
          type?: string(name='Type', description='This parameter is required.', example='Normal'),
          upstreamOutput?: string(name='UpstreamOutput', example='pre.odps_sql_demo_0'),
          upstreamTaskId?: long(name='UpstreamTaskId', example='1234'),
        }
      ](name='Dependencies'),
      description?: string(name='Description', example='Test'),
      envType?: string(name='EnvType', example='Prod'),
      id?: long(name='Id', description='This parameter is required.', example='1234'),
      inputs?: {
        variables?: [ 
          {
            name?: string(name='Name', example='key1'),
            type?: string(name='Type', description='This parameter is required.', example='Constant'),
            value?: string(name='Value', example='value1'),
          }
        ](name='Variables'),
      }(name='Inputs'),
      name?: string(name='Name', description='This parameter is required.'),
      outputs?: {
        taskOutputs?: [ 
          {
            output?: string(name='Output', example='pre.odps_sql_demo_0'),
          }
        ](name='TaskOutputs'),
        variables?: [ 
          {
            name?: string(name='Name', example='key1'),
            type?: string(name='Type', description='This parameter is required.', example='Constant'),
            value?: string(name='Value', example='value1'),
          }
        ](name='Variables'),
      }(name='Outputs'),
      owner?: string(name='Owner', description='This parameter is required.', example='1000'),
      rerunInterval?: int32(name='RerunInterval', example='60'),
      rerunMode?: string(name='RerunMode', description='This parameter is required.', example='AllAllowed'),
      rerunTimes?: int32(name='RerunTimes', example='3'),
      runtimeResource?: {
        cu?: string(name='Cu', example='0.25'),
        image?: string(name='Image', example='i-xxxxxx'),
        resourceGroupId?: string(name='ResourceGroupId', description='This parameter is required.', example='S_res_group_524258031846018_1684XXXXXXXXX'),
      }(name='RuntimeResource', description='This parameter is required.'),
      script?: {
        content?: string(name='Content', example='echo "helloWorld"'),
        parameters?: string(name='Parameters', example='para1=$bizdate'),
      }(name='Script'),
      tags?: [ 
        {
          key?: string(name='Key', description='This parameter is required.', example='key1'),
          value?: string(name='Value', example='value1'),
        }
      ](name='Tags'),
      timeout?: int32(name='Timeout', example='3600'),
      trigger?: {
        recurrence?: string(name='Recurrence', description='This parameter is required.', example='Normal'),
        type?: string(name='Type', example='Scheduler'),
      }(name='Trigger', description='This parameter is required.'),
      type?: string(name='Type', description='This parameter is required.', example='ODPS_SQL'),
    }
  ](name='Tasks'),
  trigger?: {
    cron?: string(name='Cron', example='00 00 00 * * ?'),
    endTime?: string(name='EndTime', example='9999-01-01 00:00:00'),
    startTime?: string(name='StartTime', example='1970-01-01 00:00:00'),
    type?: string(name='Type', description='This parameter is required.', example='Scheduler'),
  }(name='Trigger', description='This parameter is required.'),
}

model UpdateWorkflowShrinkRequest {
  clientUniqueCode?: string(name='ClientUniqueCode', example='Workflow_0bc5213917368545132902xxxxxxxx'),
  dependenciesShrink?: string(name='Dependencies'),
  description?: string(name='Description', example='test'),
  envType?: string(name='EnvType', example='Prod'),
  id?: long(name='Id', description='This parameter is required.', example='1234'),
  name?: string(name='Name', description='This parameter is required.'),
  outputsShrink?: string(name='Outputs'),
  owner?: string(name='Owner', description='This parameter is required.', example='1000'),
  parameters?: string(name='Parameters', example='para1=$bizdate para2=$[yyyymmdd]'),
  tagsShrink?: string(name='Tags'),
  tasksShrink?: string(name='Tasks'),
  triggerShrink?: string(name='Trigger', description='This parameter is required.'),
}

model UpdateWorkflowResponseBody = {
  requestId?: string(name='RequestId', example='22C97E95-F023-56B5-8852-B1A77A17XXXX'),
  success?: boolean(name='Success', example='true'),
}

model UpdateWorkflowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkflowResponseBody(name='body'),
}

/**
 * @param tmpReq UpdateWorkflowRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWorkflowResponse
 */
async function updateWorkflowWithOptions(tmpReq: UpdateWorkflowRequest, runtime: $RuntimeOptions): UpdateWorkflowResponse {
  tmpReq.validate();
  var request = new UpdateWorkflowShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.dependencies)) {
    request.dependenciesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dependencies, 'Dependencies', 'json');
  }
  if (!$isNull(tmpReq.outputs)) {
    request.outputsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.outputs, 'Outputs', 'json');
  }
  if (!$isNull(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  if (!$isNull(tmpReq.tasks)) {
    request.tasksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tasks, 'Tasks', 'json');
  }
  if (!$isNull(tmpReq.trigger)) {
    request.triggerShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.trigger, 'Trigger', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.clientUniqueCode)) {
    body['ClientUniqueCode'] = request.clientUniqueCode;
  }
  if (!$isNull(request.dependenciesShrink)) {
    body['Dependencies'] = request.dependenciesShrink;
  }
  if (!$isNull(request.description)) {
    body['Description'] = request.description;
  }
  if (!$isNull(request.envType)) {
    body['EnvType'] = request.envType;
  }
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.outputsShrink)) {
    body['Outputs'] = request.outputsShrink;
  }
  if (!$isNull(request.owner)) {
    body['Owner'] = request.owner;
  }
  if (!$isNull(request.parameters)) {
    body['Parameters'] = request.parameters;
  }
  if (!$isNull(request.tagsShrink)) {
    body['Tags'] = request.tagsShrink;
  }
  if (!$isNull(request.tasksShrink)) {
    body['Tasks'] = request.tasksShrink;
  }
  if (!$isNull(request.triggerShrink)) {
    body['Trigger'] = request.triggerShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateWorkflow',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @param request UpdateWorkflowRequest
 * @return UpdateWorkflowResponse
 */
async function updateWorkflow(request: UpdateWorkflowRequest): UpdateWorkflowResponse {
  var runtime = new $RuntimeOptions{};
  return updateWorkflowWithOptions(request, runtime);
}

model UpdateWorkflowDefinitionRequest {
  id?: long(name='Id', description='The ID of the workflow.

This parameter is required.', example='652567824470354XXXX'),
  projectId?: long(name='ProjectId', description='The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.

This parameter is required.', example='10001'),
  spec?: string(name='Spec', description='The FlowSpec field information about the workflow. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).

This parameter is required.'),
}

model UpdateWorkflowDefinitionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='20BF7E80-668A-5620-8AD8-879B8FEAXXXX'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateWorkflowDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkflowDefinitionResponseBody(name='body'),
}

/**
 * @summary Updates the basic information about a workflow in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateWorkflowDefinitionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateWorkflowDefinitionResponse
 */
async function updateWorkflowDefinitionWithOptions(request: UpdateWorkflowDefinitionRequest, runtime: $RuntimeOptions): UpdateWorkflowDefinitionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.id)) {
    body['Id'] = request.id;
  }
  if (!$isNull(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.spec)) {
    body['Spec'] = request.spec;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateWorkflowDefinition',
    version = '2024-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates the basic information about a workflow in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
 *
 * @param request UpdateWorkflowDefinitionRequest
 * @return UpdateWorkflowDefinitionResponse
 */
async function updateWorkflowDefinition(request: UpdateWorkflowDefinitionRequest): UpdateWorkflowDefinitionResponse {
  var runtime = new $RuntimeOptions{};
  return updateWorkflowDefinitionWithOptions(request, runtime);
}

