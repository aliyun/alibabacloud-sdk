/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('lmztest', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model GetProductComponentDetailRequest {
  uid?: string(name='uid'),
  versionUID?: string(name='versionUID'),
  productComponentVersionRelationUID?: string(name='productComponentVersionRelationUID'),
  testField?: string(name='testField'),
  testF1?: string(name='TestF1'),
  testRelease?: string(name='TestRelease'),
  testField2?: string(name='testField2'),
}

model GetProductComponentDetailResponseBody = {
  data?: {
    appVersion?: string(name='appVersion'),
    category?: string(name='category'),
    childrenComponentVersionList?: [ 
      {
        appVersion?: string(name='appVersion'),
        category?: string(name='category'),
        class?: string(name='class'),
        componentName?: string(name='componentName'),
        componentUID?: string(name='componentUID'),
        description?: string(name='description'),
        documents?: [ string ](name='documents'),
        enable?: boolean(name='enable'),
        imagesMapping?: string(name='imagesMapping'),
        namespace?: string(name='namespace'),
        orchestrationValues?: string(name='orchestrationValues'),
        packageURL?: string(name='packageURL'),
        parentComponent?: boolean(name='parentComponent'),
        priority?: int32(name='priority'),
        productComponentVersionUID?: string(name='productComponentVersionUID'),
        provider?: string(name='provider'),
        readme?: string(name='readme'),
        resources?: string(name='resources'),
        singleton?: boolean(name='singleton'),
        uid?: string(name='uid'),
        version?: string(name='version'),
      }
    ](name='childrenComponentVersionList'),
    class?: string(name='class'),
    componentName?: string(name='componentName'),
    componentUID?: string(name='componentUID'),
    description?: string(name='description'),
    documents?: [ string ](name='documents'),
    enable?: boolean(name='enable'),
    hasDependency?: boolean(name='hasDependency'),
    imagesMapping?: string(name='imagesMapping'),
    namespace?: string(name='namespace'),
    orchestrationValues?: string(name='orchestrationValues'),
    packageURL?: string(name='packageURL'),
    parentComponent?: boolean(name='parentComponent'),
    priority?: int32(name='priority'),
    productComponentVersionUID?: string(name='productComponentVersionUID'),
    provider?: string(name='provider'),
    readme?: string(name='readme'),
    resources?: string(name='resources'),
    singleton?: boolean(name='singleton'),
    uid?: string(name='uid'),
    version?: string(name='version'),
  }(name='data'),
  errCode?: string(name='errCode'),
  success?: boolean(name='success'),
}

model GetProductComponentDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProductComponentDetailResponseBody(name='body'),
}

async function getProductComponentDetailWithOptions(request: GetProductComponentDetailRequest, runtime: Util.RuntimeOptions): GetProductComponentDetailResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProductComponentDetail',
    version = '2010-01-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProductComponentDetail(request: GetProductComponentDetailRequest): GetProductComponentDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProductComponentDetailWithOptions(request, runtime);
}

model QkTestResponseBody = {
  requestId?: string(name='RequestId'),
}

model QkTestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QkTestResponseBody(name='body'),
}

async function qkTestWithOptions(runtime: Util.RuntimeOptions): QkTestResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'QkTest',
    version = '2010-01-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function qkTest(): QkTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return qkTestWithOptions(runtime);
}

model TestProRequest {
  uid?: string(name='uid'),
  versionUID?: string(name='versionUID'),
  productComponentVersionRelationUID?: string(name='productComponentVersionRelationUID'),
  testField?: string(name='testField'),
  testField2?: string(name='testField2'),
  testFieldTwo?: string(name='testFieldTwo'),
  testField4?: string(name='testField4'),
  testField5?: string(name='testField5'),
  testField6?: string(name='testField6'),
  testField3?: string(name='testField3'),
}

model TestProResponseBody = {
  data?: {
    appVersion?: string(name='appVersion'),
    category?: string(name='category'),
    childrenComponentVersionList?: [ 
      {
        appVersion?: string(name='appVersion'),
        category?: string(name='category'),
        class?: string(name='class'),
        componentName?: string(name='componentName'),
        componentUID?: string(name='componentUID'),
        description?: string(name='description'),
        documents?: [ string ](name='documents'),
        enable?: boolean(name='enable'),
        imagesMapping?: string(name='imagesMapping'),
        namespace?: string(name='namespace'),
        orchestrationValues?: string(name='orchestrationValues'),
        packageURL?: string(name='packageURL'),
        parentComponent?: boolean(name='parentComponent'),
        priority?: int32(name='priority'),
        productComponentVersionUID?: string(name='productComponentVersionUID'),
        provider?: string(name='provider'),
        readme?: string(name='readme'),
        resources?: string(name='resources'),
        singleton?: boolean(name='singleton'),
        uid?: string(name='uid'),
        version?: string(name='version'),
      }
    ](name='childrenComponentVersionList'),
    class?: string(name='class'),
    componentName?: string(name='componentName'),
    componentUID?: string(name='componentUID'),
    description?: string(name='description'),
    documents?: [ string ](name='documents'),
    enable?: boolean(name='enable'),
    hasDependency?: boolean(name='hasDependency'),
    imagesMapping?: string(name='imagesMapping'),
    namespace?: string(name='namespace'),
    orchestrationValues?: string(name='orchestrationValues'),
    packageURL?: string(name='packageURL'),
    parentComponent?: boolean(name='parentComponent'),
    priority?: int32(name='priority'),
    productComponentVersionUID?: string(name='productComponentVersionUID'),
    provider?: string(name='provider'),
    readme?: string(name='readme'),
    resources?: string(name='resources'),
    singleton?: boolean(name='singleton'),
    uid?: string(name='uid'),
    version?: string(name='version'),
  }(name='data'),
  errCode?: string(name='errCode'),
  success?: boolean(name='success'),
}

model TestProResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TestProResponseBody(name='body'),
}

async function testProWithOptions(request: TestProRequest, runtime: Util.RuntimeOptions): TestProResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TestPro',
    version = '2010-01-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function testPro(request: TestProRequest): TestProResponse {
  var runtime = new Util.RuntimeOptions{};
  return testProWithOptions(request, runtime);
}

