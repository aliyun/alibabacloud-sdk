/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'adb.aliyuncs.com',
    cn-beijing = 'adb.aliyuncs.com',
    cn-hangzhou = 'adb.aliyuncs.com',
    cn-shanghai = 'adb.aliyuncs.com',
    cn-shenzhen = 'adb.aliyuncs.com',
    cn-hongkong = 'adb.aliyuncs.com',
    ap-southeast-1 = 'adb.aliyuncs.com',
    us-west-1 = 'adb.aliyuncs.com',
    us-east-1 = 'adb.aliyuncs.com',
    cn-hangzhou-finance = 'adb.aliyuncs.com',
    cn-north-2-gov-1 = 'adb.aliyuncs.com',
    ap-northeast-2-pop = 'adb.ap-northeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'adb.aliyuncs.com',
    cn-beijing-finance-pop = 'adb.aliyuncs.com',
    cn-beijing-gov-1 = 'adb.aliyuncs.com',
    cn-beijing-nu16-b01 = 'adb.aliyuncs.com',
    cn-edge-1 = 'adb.aliyuncs.com',
    cn-fujian = 'adb.aliyuncs.com',
    cn-haidian-cm12-c01 = 'adb.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'adb.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'adb.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'adb.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'adb.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'adb.aliyuncs.com',
    cn-hangzhou-test-306 = 'adb.aliyuncs.com',
    cn-hongkong-finance-pop = 'adb.aliyuncs.com',
    cn-qingdao-nebula = 'adb.aliyuncs.com',
    cn-shanghai-et15-b01 = 'adb.aliyuncs.com',
    cn-shanghai-et2-b01 = 'adb.aliyuncs.com',
    cn-shanghai-finance-1 = 'adb.aliyuncs.com',
    cn-shanghai-inner = 'adb.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'adb.aliyuncs.com',
    cn-shenzhen-finance-1 = 'adb.aliyuncs.com',
    cn-shenzhen-inner = 'adb.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'adb.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'adb.aliyuncs.com',
    cn-wuhan = 'adb.aliyuncs.com',
    cn-yushanfang = 'adb.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'adb.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'adb.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'adb.aliyuncs.com',
    eu-west-1-oxs = 'adb.ap-northeast-1.aliyuncs.com',
    me-east-1 = 'adb.ap-northeast-1.aliyuncs.com',
    rus-west-1-pop = 'adb.ap-northeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('adb', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model Detail {
  DBClusterId?: string(name='DBClusterId'),
  data?: string(name='Data'),
  durationInMillis?: long(name='DurationInMillis'),
  estimateExecutionCpuTimeInSeconds?: long(name='EstimateExecutionCpuTimeInSeconds'),
  lastAttemptId?: string(name='LastAttemptId'),
  lastUpdatedTimeInMillis?: long(name='LastUpdatedTimeInMillis'),
  logRootPath?: string(name='LogRootPath'),
  resourceGroupName?: string(name='ResourceGroupName'),
  startedTimeInMillis?: long(name='StartedTimeInMillis'),
  submittedTimeInMillis?: long(name='SubmittedTimeInMillis'),
  terminatedTimeInMillis?: long(name='TerminatedTimeInMillis'),
  webUiAddress?: string(name='WebUiAddress'),
}

model Filters {
  appIdRegex?: string(name='AppIdRegex'),
  appNameRegex?: string(name='AppNameRegex'),
  appState?: string(name='AppState'),
  appType?: string(name='AppType'),
  executionTimeRange?: {
    maxTimeInSeconds?: long(name='MaxTimeInSeconds'),
    minTimeInSeconds?: long(name='MinTimeInSeconds'),
  }(name='ExecutionTimeRange'),
  submitTimeRange?: {
    maxTimeInMills?: long(name='MaxTimeInMills'),
    minTimeInMills?: long(name='MinTimeInMills'),
  }(name='SubmitTimeRange'),
  termiatedTimeRange?: {
    maxTimeInMills?: long(name='MaxTimeInMills'),
    minTimeInMills?: long(name='MinTimeInMills'),
  }(name='TermiatedTimeRange'),
}

model SparkAppInfo {
  appId?: string(name='AppId'),
  appName?: string(name='AppName'),
  detail?: Detail(name='Detail'),
  message?: string(name='Message'),
  state?: string(name='State'),
}

model SparkAttemptInfo {
  attemptId?: string(name='AttemptId'),
  detail?: Detail(name='Detail'),
  message?: string(name='Message'),
  state?: string(name='State'),
}

model StatementInfo {
  code?: string(name='Code'),
  completedTimeInMills?: long(name='CompletedTimeInMills'),
  output?: string(name='Output'),
  process?: float(name='Process'),
  startedTimeInMills?: long(name='StartedTimeInMills'),
  state?: string(name='State'),
  statementId?: string(name='StatementId'),
}

model AllocateClusterPublicConnectionRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix'),
  DBClusterId?: string(name='DBClusterId'),
}

model AllocateClusterPublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllocateClusterPublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateClusterPublicConnectionResponseBody(name='body'),
}

async function allocateClusterPublicConnectionWithOptions(request: AllocateClusterPublicConnectionRequest, runtime: Util.RuntimeOptions): AllocateClusterPublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionStringPrefix)) {
    query['ConnectionStringPrefix'] = request.connectionStringPrefix;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateClusterPublicConnection',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocateClusterPublicConnection(request: AllocateClusterPublicConnectionRequest): AllocateClusterPublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateClusterPublicConnectionWithOptions(request, runtime);
}

model AuthenticationRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model AuthenticationResponseBody = {
  code?: long(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AuthenticationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AuthenticationResponseBody(name='body'),
}

async function authenticationWithOptions(request: AuthenticationRequest, runtime: Util.RuntimeOptions): AuthenticationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Authentication',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function authentication(request: AuthenticationRequest): AuthenticationResponse {
  var runtime = new Util.RuntimeOptions{};
  return authenticationWithOptions(request, runtime);
}

model BindAccountRequest {
  accountName?: string(name='AccountName'),
  DBClusterId?: string(name='DBClusterId'),
  ramUser?: string(name='RamUser'),
}

model BindAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindAccountResponseBody(name='body'),
}

async function bindAccountWithOptions(request: BindAccountRequest, runtime: Util.RuntimeOptions): BindAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.ramUser)) {
    query['RamUser'] = request.ramUser;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindAccount',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindAccount(request: BindAccountRequest): BindAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindAccountWithOptions(request, runtime);
}

model CancelAsyncSqlByJobIdRequest {
  DBClusterId?: string(name='DBClusterId'),
  engine?: string(name='Engine'),
  jobId?: string(name='JobId'),
  regionId?: string(name='RegionId'),
}

model CancelAsyncSqlByJobIdResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelAsyncSqlByJobIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelAsyncSqlByJobIdResponseBody(name='body'),
}

async function cancelAsyncSqlByJobIdWithOptions(request: CancelAsyncSqlByJobIdRequest, runtime: Util.RuntimeOptions): CancelAsyncSqlByJobIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelAsyncSqlByJobId',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelAsyncSqlByJobId(request: CancelAsyncSqlByJobIdRequest): CancelAsyncSqlByJobIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelAsyncSqlByJobIdWithOptions(request, runtime);
}

model CheckBindRamUserRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model CheckBindRamUserResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model CheckBindRamUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckBindRamUserResponseBody(name='body'),
}

async function checkBindRamUserWithOptions(request: CheckBindRamUserRequest, runtime: Util.RuntimeOptions): CheckBindRamUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckBindRamUser',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkBindRamUser(request: CheckBindRamUserRequest): CheckBindRamUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkBindRamUserWithOptions(request, runtime);
}

model CreateAccountRequest {
  accountDescription?: string(name='AccountDescription'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  accountType?: string(name='AccountType'),
  DBClusterId?: string(name='DBClusterId'),
}

model CreateAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccountWithOptions(request: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountDescription)) {
    query['AccountDescription'] = request.accountDescription;
  }
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.accountType)) {
    query['AccountType'] = request.accountType;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAccount',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model CreateAdbMySqlDevParametersRequest {
  DBClusterId?: string(name='DBClusterId'),
  devParamName?: string(name='DevParamName'),
  devParamProps?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='DevParamProps'),
  regionId?: string(name='RegionId'),
}

model CreateAdbMySqlDevParametersResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateAdbMySqlDevParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAdbMySqlDevParametersResponseBody(name='body'),
}

async function createAdbMySqlDevParametersWithOptions(request: CreateAdbMySqlDevParametersRequest, runtime: Util.RuntimeOptions): CreateAdbMySqlDevParametersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.devParamName)) {
    query['DevParamName'] = request.devParamName;
  }
  if (!Util.isUnset(request.devParamProps)) {
    query['DevParamProps'] = request.devParamProps;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAdbMySqlDevParameters',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAdbMySqlDevParameters(request: CreateAdbMySqlDevParametersRequest): CreateAdbMySqlDevParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAdbMySqlDevParametersWithOptions(request, runtime);
}

model CreateAlertGroupRequest {
  alertInstanceIds?: string(name='AlertInstanceIds'),
  DBClusterId?: string(name='DBClusterId'),
  description?: string(name='Description'),
  groupName?: string(name='GroupName'),
  regionId?: string(name='RegionId'),
}

model CreateAlertGroupResponseBody = {
  code?: long(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateAlertGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAlertGroupResponseBody(name='body'),
}

async function createAlertGroupWithOptions(request: CreateAlertGroupRequest, runtime: Util.RuntimeOptions): CreateAlertGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alertInstanceIds)) {
    query['AlertInstanceIds'] = request.alertInstanceIds;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAlertGroup',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAlertGroup(request: CreateAlertGroupRequest): CreateAlertGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAlertGroupWithOptions(request, runtime);
}

model CreateAlertInstanceRequest {
  DBClusterId?: string(name='DBClusterId'),
  instanceName?: string(name='InstanceName'),
  instanceParams?: string(name='InstanceParams'),
  pluginId?: int32(name='PluginId'),
  regionId?: string(name='RegionId'),
}

model CreateAlertInstanceResponseBody = {
  code?: long(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateAlertInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAlertInstanceResponseBody(name='body'),
}

async function createAlertInstanceWithOptions(request: CreateAlertInstanceRequest, runtime: Util.RuntimeOptions): CreateAlertInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceParams)) {
    query['InstanceParams'] = request.instanceParams;
  }
  if (!Util.isUnset(request.pluginId)) {
    query['PluginId'] = request.pluginId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAlertInstance',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAlertInstance(request: CreateAlertInstanceRequest): CreateAlertInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAlertInstanceWithOptions(request, runtime);
}

model CreateDBClusterRequest {
  computeResource?: string(name='ComputeResource'),
  DBClusterDescription?: string(name='DBClusterDescription'),
  DBClusterId?: string(name='DBClusterId'),
  DBClusterNetworkType?: string(name='DBClusterNetworkType'),
  DBClusterVersion?: string(name='DBClusterVersion'),
  enableDefaultResourcePool?: boolean(name='EnableDefaultResourcePool'),
  mode?: string(name='Mode'),
  payType?: string(name='PayType'),
  period?: string(name='Period'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  storageResource?: string(name='StorageResource'),
  usedTime?: string(name='UsedTime'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  zoneId?: string(name='ZoneId'),
}

model CreateDBClusterResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateDBClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDBClusterResponseBody(name='body'),
}

async function createDBClusterWithOptions(request: CreateDBClusterRequest, runtime: Util.RuntimeOptions): CreateDBClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.computeResource)) {
    query['ComputeResource'] = request.computeResource;
  }
  if (!Util.isUnset(request.DBClusterDescription)) {
    query['DBClusterDescription'] = request.DBClusterDescription;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.DBClusterNetworkType)) {
    query['DBClusterNetworkType'] = request.DBClusterNetworkType;
  }
  if (!Util.isUnset(request.DBClusterVersion)) {
    query['DBClusterVersion'] = request.DBClusterVersion;
  }
  if (!Util.isUnset(request.enableDefaultResourcePool)) {
    query['EnableDefaultResourcePool'] = request.enableDefaultResourcePool;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.storageResource)) {
    query['StorageResource'] = request.storageResource;
  }
  if (!Util.isUnset(request.usedTime)) {
    query['UsedTime'] = request.usedTime;
  }
  if (!Util.isUnset(request.VPCId)) {
    query['VPCId'] = request.VPCId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDBCluster',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDBCluster(request: CreateDBClusterRequest): CreateDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBClusterWithOptions(request, runtime);
}

model CreateDBResourceGroupRequest {
  DBClusterId?: string(name='DBClusterId'),
  groupName?: string(name='GroupName'),
  groupType?: string(name='GroupType'),
  maxComputeResource?: string(name='MaxComputeResource'),
  minComputeResource?: string(name='MinComputeResource'),
}

model CreateDBResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDBResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDBResourceGroupResponseBody(name='body'),
}

async function createDBResourceGroupWithOptions(request: CreateDBResourceGroupRequest, runtime: Util.RuntimeOptions): CreateDBResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.maxComputeResource)) {
    query['MaxComputeResource'] = request.maxComputeResource;
  }
  if (!Util.isUnset(request.minComputeResource)) {
    query['MinComputeResource'] = request.minComputeResource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDBResourceGroup',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDBResourceGroup(request: CreateDBResourceGroupRequest): CreateDBResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBResourceGroupWithOptions(request, runtime);
}

model CreateDirectoryRequest {
  DBClusterId?: string(name='DBClusterId'),
  isLeaf?: boolean(name='IsLeaf'),
  name?: string(name='Name'),
  parentId?: long(name='ParentId'),
  payload?: long(name='Payload'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
}

model CreateDirectoryResponseBody = {
  code?: long(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDirectoryResponseBody(name='body'),
}

async function createDirectoryWithOptions(request: CreateDirectoryRequest, runtime: Util.RuntimeOptions): CreateDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.isLeaf)) {
    query['IsLeaf'] = request.isLeaf;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentId)) {
    query['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.payload)) {
    query['Payload'] = request.payload;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDirectory',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDirectory(request: CreateDirectoryRequest): CreateDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDirectoryWithOptions(request, runtime);
}

model CreateOssSubDirectoryRequest {
  DBClusterId?: string(name='DBClusterId'),
  path?: string(name='Path'),
}

model CreateOssSubDirectoryResponseBody = {
  data?: {
    clientCRC?: long(name='ClientCRC'),
    ETag?: string(name='ETag'),
    requestId?: string(name='RequestId'),
    serverCRC?: long(name='ServerCRC'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateOssSubDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOssSubDirectoryResponseBody(name='body'),
}

async function createOssSubDirectoryWithOptions(request: CreateOssSubDirectoryRequest, runtime: Util.RuntimeOptions): CreateOssSubDirectoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.path)) {
    body['Path'] = request.path;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOssSubDirectory',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOssSubDirectory(request: CreateOssSubDirectoryRequest): CreateOssSubDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOssSubDirectoryWithOptions(request, runtime);
}

model CreateProcessDefinitionRequest {
  DBClusterId?: string(name='DBClusterId'),
  description?: string(name='Description'),
  globalParams?: [ 
    {
      direct?: string(name='Direct'),
      prop?: string(name='Prop'),
      type?: string(name='Type'),
      value?: string(name='Value'),
    }
  ](name='GlobalParams'),
  locations?: [ 
    {
      taskCode?: long(name='TaskCode'),
      x?: long(name='X'),
      y?: long(name='Y'),
    }
  ](name='Locations'),
  name?: string(name='Name'),
  parentDirectoryId?: long(name='ParentDirectoryId'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
  taskDefinitions?: [ 
    {
      code?: long(name='Code'),
      createTime?: string(name='CreateTime'),
      delayTime?: long(name='DelayTime'),
      description?: string(name='Description'),
      environmentCode?: long(name='EnvironmentCode'),
      failRetryInterval?: long(name='FailRetryInterval'),
      failRetryTimes?: long(name='FailRetryTimes'),
      flag?: string(name='Flag'),
      id?: long(name='Id'),
      modifyBy?: string(name='ModifyBy'),
      name?: string(name='Name'),
      operateTime?: string(name='OperateTime'),
      operator?: long(name='Operator'),
      projectCode?: long(name='ProjectCode'),
      projectName?: string(name='ProjectName'),
      resourceIds?: string(name='ResourceIds'),
      taskParamJson?: string(name='TaskParamJson'),
      taskPriority?: string(name='TaskPriority'),
      taskType?: string(name='TaskType'),
      timeout?: long(name='Timeout'),
      timeoutFlag?: string(name='TimeoutFlag'),
      timeoutNotifyStrategy?: string(name='TimeoutNotifyStrategy'),
      updateTime?: string(name='UpdateTime'),
      userId?: long(name='UserId'),
      userName?: string(name='UserName'),
      version?: long(name='Version'),
      workerGroup?: string(name='WorkerGroup'),
    }
  ](name='TaskDefinitions'),
  taskRelations?: [ 
    {
      conditionParams?: string(name='ConditionParams'),
      conditionType?: string(name='ConditionType'),
      createTime?: string(name='CreateTime'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      operateTime?: string(name='OperateTime'),
      operator?: long(name='Operator'),
      postTaskCode?: long(name='PostTaskCode'),
      postTaskVersion?: long(name='PostTaskVersion'),
      preTaskCode?: long(name='PreTaskCode'),
      preTaskVersion?: long(name='PreTaskVersion'),
      processCode?: long(name='ProcessCode'),
      processDefinitionVersion?: long(name='ProcessDefinitionVersion'),
      projectCode?: long(name='ProjectCode'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='TaskRelations'),
  timeout?: long(name='Timeout'),
}

model CreateProcessDefinitionResponseBody = {
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateProcessDefinitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProcessDefinitionResponseBody(name='body'),
}

async function createProcessDefinitionWithOptions(request: CreateProcessDefinitionRequest, runtime: Util.RuntimeOptions): CreateProcessDefinitionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.globalParams)) {
    query['GlobalParams'] = request.globalParams;
  }
  if (!Util.isUnset(request.locations)) {
    query['Locations'] = request.locations;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentDirectoryId)) {
    query['ParentDirectoryId'] = request.parentDirectoryId;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.taskDefinitions)) {
    query['TaskDefinitions'] = request.taskDefinitions;
  }
  if (!Util.isUnset(request.taskRelations)) {
    query['TaskRelations'] = request.taskRelations;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProcessDefinition',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProcessDefinition(request: CreateProcessDefinitionRequest): CreateProcessDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProcessDefinitionWithOptions(request, runtime);
}

model CreateProjectRequest {
  DBClusterId?: string(name='DBClusterId'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  regionId?: string(name='RegionId'),
}

model CreateProjectResponseBody = {
  code?: long(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProjectResponseBody(name='body'),
}

async function createProjectWithOptions(request: CreateProjectRequest, runtime: Util.RuntimeOptions): CreateProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProject',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProjectWithOptions(request, runtime);
}

model CreateSparkTemplateRequest {
  appType?: string(name='AppType'),
  DBClusterId?: string(name='DBClusterId'),
  name?: string(name='Name'),
  parentId?: long(name='ParentId'),
  type?: string(name='Type'),
}

model CreateSparkTemplateResponseBody = {
  data?: {
    succeeded?: boolean(name='Succeeded'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model CreateSparkTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSparkTemplateResponseBody(name='body'),
}

async function createSparkTemplateWithOptions(request: CreateSparkTemplateRequest, runtime: Util.RuntimeOptions): CreateSparkTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentId)) {
    body['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSparkTemplate',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSparkTemplate(request: CreateSparkTemplateRequest): CreateSparkTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSparkTemplateWithOptions(request, runtime);
}

model CreateSqlTemplateRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  templateGroupId?: long(name='TemplateGroupId'),
  templateName?: string(name='TemplateName'),
  templateValue?: string(name='TemplateValue'),
}

model CreateSqlTemplateResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateSqlTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSqlTemplateResponseBody(name='body'),
}

async function createSqlTemplateWithOptions(request: CreateSqlTemplateRequest, runtime: Util.RuntimeOptions): CreateSqlTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.templateGroupId)) {
    query['TemplateGroupId'] = request.templateGroupId;
  }
  if (!Util.isUnset(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.templateValue)) {
    query['TemplateValue'] = request.templateValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSqlTemplate',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSqlTemplate(request: CreateSqlTemplateRequest): CreateSqlTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSqlTemplateWithOptions(request, runtime);
}

model CreateSqlTemplateGroupRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  templateGroupName?: string(name='TemplateGroupName'),
}

model CreateSqlTemplateGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateSqlTemplateGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSqlTemplateGroupResponseBody(name='body'),
}

async function createSqlTemplateGroupWithOptions(request: CreateSqlTemplateGroupRequest, runtime: Util.RuntimeOptions): CreateSqlTemplateGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.templateGroupName)) {
    query['TemplateGroupName'] = request.templateGroupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSqlTemplateGroup',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSqlTemplateGroup(request: CreateSqlTemplateGroupRequest): CreateSqlTemplateGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSqlTemplateGroupWithOptions(request, runtime);
}

model CreateTaskDefinitionCodeRequest {
  DBClusterId?: string(name='DBClusterId'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
}

model CreateTaskDefinitionCodeResponseBody = {
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateTaskDefinitionCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTaskDefinitionCodeResponseBody(name='body'),
}

async function createTaskDefinitionCodeWithOptions(request: CreateTaskDefinitionCodeRequest, runtime: Util.RuntimeOptions): CreateTaskDefinitionCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTaskDefinitionCode',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTaskDefinitionCode(request: CreateTaskDefinitionCodeRequest): CreateTaskDefinitionCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTaskDefinitionCodeWithOptions(request, runtime);
}

model DeleteAccountRequest {
  accountName?: string(name='AccountName'),
  DBClusterId?: string(name='DBClusterId'),
}

model DeleteAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccountWithOptions(request: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAccount',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model DeleteAdbMySqlDevParametersRequest {
  DBClusterId?: string(name='DBClusterId'),
  devParamsId?: long(name='DevParamsId'),
  regionId?: string(name='RegionId'),
}

model DeleteAdbMySqlDevParametersResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteAdbMySqlDevParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAdbMySqlDevParametersResponseBody(name='body'),
}

async function deleteAdbMySqlDevParametersWithOptions(request: DeleteAdbMySqlDevParametersRequest, runtime: Util.RuntimeOptions): DeleteAdbMySqlDevParametersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.devParamsId)) {
    query['DevParamsId'] = request.devParamsId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAdbMySqlDevParameters',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAdbMySqlDevParameters(request: DeleteAdbMySqlDevParametersRequest): DeleteAdbMySqlDevParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAdbMySqlDevParametersWithOptions(request, runtime);
}

model DeleteAlertGroupRequest {
  alertGroupId?: int32(name='AlertGroupId'),
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model DeleteAlertGroupResponseBody = {
  code?: long(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteAlertGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAlertGroupResponseBody(name='body'),
}

async function deleteAlertGroupWithOptions(request: DeleteAlertGroupRequest, runtime: Util.RuntimeOptions): DeleteAlertGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alertGroupId)) {
    query['AlertGroupId'] = request.alertGroupId;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAlertGroup',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAlertGroup(request: DeleteAlertGroupRequest): DeleteAlertGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAlertGroupWithOptions(request, runtime);
}

model DeleteAlertInstanceRequest {
  DBClusterId?: string(name='DBClusterId'),
  instanceId?: int32(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model DeleteAlertInstanceResponseBody = {
  code?: long(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteAlertInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAlertInstanceResponseBody(name='body'),
}

async function deleteAlertInstanceWithOptions(request: DeleteAlertInstanceRequest, runtime: Util.RuntimeOptions): DeleteAlertInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAlertInstance',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAlertInstance(request: DeleteAlertInstanceRequest): DeleteAlertInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAlertInstanceWithOptions(request, runtime);
}

model DeleteDBClusterRequest {
  DBClusterId?: string(name='DBClusterId'),
  fixCode?: string(name='FixCode'),
  force?: boolean(name='Force'),
  payType?: string(name='PayType'),
  regionId?: string(name='RegionId'),
}

model DeleteDBClusterResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  requestId?: string(name='RequestId'),
  taskId?: int32(name='TaskId'),
}

model DeleteDBClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDBClusterResponseBody(name='body'),
}

async function deleteDBClusterWithOptions(request: DeleteDBClusterRequest, runtime: Util.RuntimeOptions): DeleteDBClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.fixCode)) {
    query['FixCode'] = request.fixCode;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDBCluster',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDBCluster(request: DeleteDBClusterRequest): DeleteDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBClusterWithOptions(request, runtime);
}

model DeleteDBResourceGroupRequest {
  DBClusterId?: string(name='DBClusterId'),
  groupName?: string(name='GroupName'),
}

model DeleteDBResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDBResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDBResourceGroupResponseBody(name='body'),
}

async function deleteDBResourceGroupWithOptions(request: DeleteDBResourceGroupRequest, runtime: Util.RuntimeOptions): DeleteDBResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDBResourceGroup',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDBResourceGroup(request: DeleteDBResourceGroupRequest): DeleteDBResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBResourceGroupWithOptions(request, runtime);
}

model DeleteDirectoryRequest {
  DBClusterId?: string(name='DBClusterId'),
  directoryId?: long(name='DirectoryId'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
}

model DeleteDirectoryResponseBody = {
  code?: long(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDirectoryResponseBody(name='body'),
}

async function deleteDirectoryWithOptions(request: DeleteDirectoryRequest, runtime: Util.RuntimeOptions): DeleteDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDirectory',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDirectory(request: DeleteDirectoryRequest): DeleteDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDirectoryWithOptions(request, runtime);
}

model DeleteProcessDefinitionRequest {
  DBClusterId?: string(name='DBClusterId'),
  directoryId?: long(name='DirectoryId'),
  processCode?: long(name='ProcessCode'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
}

model DeleteProcessDefinitionResponseBody = {
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteProcessDefinitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProcessDefinitionResponseBody(name='body'),
}

async function deleteProcessDefinitionWithOptions(request: DeleteProcessDefinitionRequest, runtime: Util.RuntimeOptions): DeleteProcessDefinitionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.processCode)) {
    query['ProcessCode'] = request.processCode;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProcessDefinition',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProcessDefinition(request: DeleteProcessDefinitionRequest): DeleteProcessDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProcessDefinitionWithOptions(request, runtime);
}

model DeleteProcessInstanceRequest {
  DBClusterId?: string(name='DBClusterId'),
  processInstanceId?: long(name='ProcessInstanceId'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
}

model DeleteProcessInstanceResponseBody = {
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteProcessInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProcessInstanceResponseBody(name='body'),
}

async function deleteProcessInstanceWithOptions(request: DeleteProcessInstanceRequest, runtime: Util.RuntimeOptions): DeleteProcessInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.processInstanceId)) {
    query['ProcessInstanceId'] = request.processInstanceId;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProcessInstance',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProcessInstance(request: DeleteProcessInstanceRequest): DeleteProcessInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProcessInstanceWithOptions(request, runtime);
}

model DeleteProjectRequest {
  DBClusterId?: string(name='DBClusterId'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
}

model DeleteProjectResponseBody = {
  code?: long(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProjectResponseBody(name='body'),
}

async function deleteProjectWithOptions(request: DeleteProjectRequest, runtime: Util.RuntimeOptions): DeleteProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProject',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProjectWithOptions(request, runtime);
}

model DeleteScheduleRequest {
  DBClusterId?: string(name='DBClusterId'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
  scheduleId?: long(name='ScheduleId'),
}

model DeleteScheduleResponseBody = {
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteScheduleResponseBody(name='body'),
}

async function deleteScheduleWithOptions(request: DeleteScheduleRequest, runtime: Util.RuntimeOptions): DeleteScheduleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.scheduleId)) {
    query['ScheduleId'] = request.scheduleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSchedule',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSchedule(request: DeleteScheduleRequest): DeleteScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScheduleWithOptions(request, runtime);
}

model DeleteSparkTemplateRequest {
  DBClusterId?: string(name='DBClusterId'),
  id?: long(name='Id'),
}

model DeleteSparkTemplateResponseBody = {
  data?: {
    succeeded?: boolean(name='Succeeded'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DeleteSparkTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSparkTemplateResponseBody(name='body'),
}

async function deleteSparkTemplateWithOptions(request: DeleteSparkTemplateRequest, runtime: Util.RuntimeOptions): DeleteSparkTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSparkTemplate',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSparkTemplate(request: DeleteSparkTemplateRequest): DeleteSparkTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSparkTemplateWithOptions(request, runtime);
}

model DeleteSparkTemplateFileRequest {
  DBClusterId?: string(name='DBClusterId'),
  id?: long(name='Id'),
}

model DeleteSparkTemplateFileResponseBody = {
  data?: {
    succeeded?: boolean(name='Succeeded'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DeleteSparkTemplateFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSparkTemplateFileResponseBody(name='body'),
}

async function deleteSparkTemplateFileWithOptions(request: DeleteSparkTemplateFileRequest, runtime: Util.RuntimeOptions): DeleteSparkTemplateFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSparkTemplateFile',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSparkTemplateFile(request: DeleteSparkTemplateFileRequest): DeleteSparkTemplateFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSparkTemplateFileWithOptions(request, runtime);
}

model DeleteSqlTemplateRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  templateId?: long(name='TemplateId'),
}

model DeleteSqlTemplateResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSqlTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSqlTemplateResponseBody(name='body'),
}

async function deleteSqlTemplateWithOptions(request: DeleteSqlTemplateRequest, runtime: Util.RuntimeOptions): DeleteSqlTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSqlTemplate',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSqlTemplate(request: DeleteSqlTemplateRequest): DeleteSqlTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSqlTemplateWithOptions(request, runtime);
}

model DeleteSqlTemplateGroupRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  templateGroupId?: long(name='TemplateGroupId'),
}

model DeleteSqlTemplateGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSqlTemplateGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSqlTemplateGroupResponseBody(name='body'),
}

async function deleteSqlTemplateGroupWithOptions(request: DeleteSqlTemplateGroupRequest, runtime: Util.RuntimeOptions): DeleteSqlTemplateGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.templateGroupId)) {
    query['TemplateGroupId'] = request.templateGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSqlTemplateGroup',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSqlTemplateGroup(request: DeleteSqlTemplateGroupRequest): DeleteSqlTemplateGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSqlTemplateGroupWithOptions(request, runtime);
}

model DescribeAccountsRequest {
  accountName?: string(name='AccountName'),
  DBClusterId?: string(name='DBClusterId'),
  ownerId?: string(name='OwnerId'),
}

model DescribeAccountsResponseBody = {
  accountList?: {
    DBAccount?: [ 
    {
      accountDescription?: string(name='AccountDescription'),
      accountName?: string(name='AccountName'),
      accountStatus?: string(name='AccountStatus'),
      accountType?: string(name='AccountType'),
      ramUsers?: string(name='RamUsers'),
    }
  ](name='DBAccount')
  }(name='AccountList'),
  requestId?: string(name='RequestId'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccountsResponseBody(name='body'),
}

async function describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: Util.RuntimeOptions): DescribeAccountsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccounts',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountsWithOptions(request, runtime);
}

model DescribeAdbMySqlColumnsRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  schema?: string(name='Schema'),
  tableName?: string(name='TableName'),
}

model DescribeAdbMySqlColumnsResponseBody = {
  columns?: [ 
    {
      comment?: string(name='Comment'),
      name?: string(name='Name'),
      type?: string(name='Type'),
    }
  ](name='Columns'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  schema?: string(name='Schema'),
  success?: boolean(name='Success'),
  tableName?: string(name='TableName'),
}

model DescribeAdbMySqlColumnsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAdbMySqlColumnsResponseBody(name='body'),
}

async function describeAdbMySqlColumnsWithOptions(request: DescribeAdbMySqlColumnsRequest, runtime: Util.RuntimeOptions): DescribeAdbMySqlColumnsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAdbMySqlColumns',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAdbMySqlColumns(request: DescribeAdbMySqlColumnsRequest): DescribeAdbMySqlColumnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAdbMySqlColumnsWithOptions(request, runtime);
}

model DescribeAdbMySqlDevParameterAttributeRequest {
  DBClusterId?: string(name='DBClusterId'),
  devParamsId?: long(name='DevParamsId'),
  regionId?: string(name='RegionId'),
}

model DescribeAdbMySqlDevParameterAttributeResponseBody = {
  devParam?: {
    DBClusterId?: string(name='DBClusterId'),
    devParamId?: long(name='DevParamId'),
    devParamName?: string(name='DevParamName'),
    devParamProps?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='DevParamProps'),
    regionId?: string(name='RegionId'),
  }(name='DevParam'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeAdbMySqlDevParameterAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAdbMySqlDevParameterAttributeResponseBody(name='body'),
}

async function describeAdbMySqlDevParameterAttributeWithOptions(request: DescribeAdbMySqlDevParameterAttributeRequest, runtime: Util.RuntimeOptions): DescribeAdbMySqlDevParameterAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.devParamsId)) {
    query['DevParamsId'] = request.devParamsId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAdbMySqlDevParameterAttribute',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAdbMySqlDevParameterAttribute(request: DescribeAdbMySqlDevParameterAttributeRequest): DescribeAdbMySqlDevParameterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAdbMySqlDevParameterAttributeWithOptions(request, runtime);
}

model DescribeAdbMySqlDevParametersRequest {
  DBClusterId?: string(name='DBClusterId'),
  devParamName?: string(name='DevParamName'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  regionId?: string(name='RegionId'),
}

model DescribeAdbMySqlDevParametersResponseBody = {
  devParams?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      devParamId?: long(name='DevParamId'),
      devParamName?: string(name='DevParamName'),
      devParamProps?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='DevParamProps'),
      regionId?: string(name='RegionId'),
    }
  ](name='DevParams'),
  message?: string(name='Message'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model DescribeAdbMySqlDevParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAdbMySqlDevParametersResponseBody(name='body'),
}

async function describeAdbMySqlDevParametersWithOptions(request: DescribeAdbMySqlDevParametersRequest, runtime: Util.RuntimeOptions): DescribeAdbMySqlDevParametersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.devParamName)) {
    query['DevParamName'] = request.devParamName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAdbMySqlDevParameters',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAdbMySqlDevParameters(request: DescribeAdbMySqlDevParametersRequest): DescribeAdbMySqlDevParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAdbMySqlDevParametersWithOptions(request, runtime);
}

model DescribeAdbMySqlSchemasRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model DescribeAdbMySqlSchemasResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  schemas?: [ string ](name='Schemas'),
  success?: boolean(name='Success'),
}

model DescribeAdbMySqlSchemasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAdbMySqlSchemasResponseBody(name='body'),
}

async function describeAdbMySqlSchemasWithOptions(request: DescribeAdbMySqlSchemasRequest, runtime: Util.RuntimeOptions): DescribeAdbMySqlSchemasResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAdbMySqlSchemas',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAdbMySqlSchemas(request: DescribeAdbMySqlSchemasRequest): DescribeAdbMySqlSchemasResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAdbMySqlSchemasWithOptions(request, runtime);
}

model DescribeAdbMySqlTablesRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  schema?: string(name='Schema'),
}

model DescribeAdbMySqlTablesResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  schema?: string(name='Schema'),
  success?: boolean(name='Success'),
  tables?: [ string ](name='Tables'),
}

model DescribeAdbMySqlTablesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAdbMySqlTablesResponseBody(name='body'),
}

async function describeAdbMySqlTablesWithOptions(request: DescribeAdbMySqlTablesRequest, runtime: Util.RuntimeOptions): DescribeAdbMySqlTablesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAdbMySqlTables',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAdbMySqlTables(request: DescribeAdbMySqlTablesRequest): DescribeAdbMySqlTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAdbMySqlTablesWithOptions(request, runtime);
}

model DescribeAdbSparkLogsRequest {
  appId?: string(name='AppId'),
  regionId?: string(name='RegionId'),
}

model DescribeAdbSparkLogsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  sparkLogs?: string(name='SparkLogs'),
  success?: boolean(name='Success'),
}

model DescribeAdbSparkLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAdbSparkLogsResponseBody(name='body'),
}

async function describeAdbSparkLogsWithOptions(request: DescribeAdbSparkLogsRequest, runtime: Util.RuntimeOptions): DescribeAdbSparkLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAdbSparkLogs',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAdbSparkLogs(request: DescribeAdbSparkLogsRequest): DescribeAdbSparkLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAdbSparkLogsWithOptions(request, runtime);
}

model DescribeAlertGroupRequest {
  alertGroupId?: int32(name='AlertGroupId'),
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model DescribeAlertGroupResponseBody = {
  alertGroups?: [ 
    {
      alertInstances?: [ 
        {
          instanceId?: int32(name='InstanceId'),
          instanceName?: string(name='InstanceName'),
        }
      ](name='AlertInstances'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      groupId?: long(name='GroupId'),
      groupName?: string(name='GroupName'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='AlertGroups'),
  code?: long(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeAlertGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertGroupResponseBody(name='body'),
}

async function describeAlertGroupWithOptions(request: DescribeAlertGroupRequest, runtime: Util.RuntimeOptions): DescribeAlertGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alertGroupId)) {
    query['AlertGroupId'] = request.alertGroupId;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlertGroup',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlertGroup(request: DescribeAlertGroupRequest): DescribeAlertGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertGroupWithOptions(request, runtime);
}

model DescribeAlertInstanceRequest {
  DBClusterId?: string(name='DBClusterId'),
  instanceId?: int32(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeAlertInstanceResponseBody = {
  alertInstances?: [ 
    {
      createTime?: string(name='CreateTime'),
      instanceId?: long(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceParams?: string(name='InstanceParams'),
      pluginId?: int32(name='PluginId'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='AlertInstances'),
  code?: long(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeAlertInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlertInstanceResponseBody(name='body'),
}

async function describeAlertInstanceWithOptions(request: DescribeAlertInstanceRequest, runtime: Util.RuntimeOptions): DescribeAlertInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlertInstance',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlertInstance(request: DescribeAlertInstanceRequest): DescribeAlertInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlertInstanceWithOptions(request, runtime);
}

model DescribeApsResourceGroupsRequest {
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeApsResourceGroupsResponseBody = {
  data?: {
    resourceGroups?: [ 
      {
        available?: boolean(name='Available'),
        cuOptions?: [ long ](name='CuOptions'),
        groupName?: string(name='GroupName'),
        groupType?: string(name='GroupType'),
        maxComputeResource?: int32(name='MaxComputeResource'),
        minComputeResource?: int32(name='MinComputeResource'),
      }
    ](name='ResourceGroups'),
    step?: long(name='Step'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeApsResourceGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApsResourceGroupsResponseBody(name='body'),
}

async function describeApsResourceGroupsWithOptions(request: DescribeApsResourceGroupsRequest, runtime: Util.RuntimeOptions): DescribeApsResourceGroupsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApsResourceGroups',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApsResourceGroups(request: DescribeApsResourceGroupsRequest): DescribeApsResourceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApsResourceGroupsWithOptions(request, runtime);
}

model DescribeAsyncResultsByJobIdRequest {
  DBClusterId?: string(name='DBClusterId'),
  engine?: string(name='Engine'),
  jobId?: string(name='JobId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  regionId?: string(name='RegionId'),
}

model DescribeAsyncResultsByJobIdResponseBody = {
  engine?: string(name='Engine'),
  message?: string(name='Message'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  resultDataList?: [ any ](name='ResultDataList'),
  resultHeaders?: [ string ](name='ResultHeaders'),
  success?: boolean(name='Success'),
}

model DescribeAsyncResultsByJobIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAsyncResultsByJobIdResponseBody(name='body'),
}

async function describeAsyncResultsByJobIdWithOptions(request: DescribeAsyncResultsByJobIdRequest, runtime: Util.RuntimeOptions): DescribeAsyncResultsByJobIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAsyncResultsByJobId',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAsyncResultsByJobId(request: DescribeAsyncResultsByJobIdRequest): DescribeAsyncResultsByJobIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAsyncResultsByJobIdWithOptions(request, runtime);
}

model DescribeAsyncResultsDownloadUrlByJobIdRequest {
  DBClusterId?: string(name='DBClusterId'),
  jobId?: string(name='JobId'),
  regionId?: string(name='RegionId'),
}

model DescribeAsyncResultsDownloadUrlByJobIdResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  url?: string(name='Url'),
}

model DescribeAsyncResultsDownloadUrlByJobIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAsyncResultsDownloadUrlByJobIdResponseBody(name='body'),
}

async function describeAsyncResultsDownloadUrlByJobIdWithOptions(request: DescribeAsyncResultsDownloadUrlByJobIdRequest, runtime: Util.RuntimeOptions): DescribeAsyncResultsDownloadUrlByJobIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAsyncResultsDownloadUrlByJobId',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAsyncResultsDownloadUrlByJobId(request: DescribeAsyncResultsDownloadUrlByJobIdRequest): DescribeAsyncResultsDownloadUrlByJobIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAsyncResultsDownloadUrlByJobIdWithOptions(request, runtime);
}

model DescribeAsyncStatusByJobIdRequest {
  DBClusterId?: string(name='DBClusterId'),
  engine?: string(name='Engine'),
  jobId?: string(name='JobId'),
  regionId?: string(name='RegionId'),
}

model DescribeAsyncStatusByJobIdResponseBody = {
  jobStatus?: {
    affectRows?: long(name='AffectRows'),
    createTime?: string(name='CreateTime'),
    endTime?: string(name='EndTime'),
    engine?: string(name='Engine'),
    jobId?: string(name='JobId'),
    message?: string(name='Message'),
    processId?: string(name='ProcessId'),
    progress?: string(name='Progress'),
    readable?: boolean(name='Readable'),
    sql?: string(name='Sql'),
    startTime?: string(name='StartTime'),
    status?: string(name='Status'),
    url?: string(name='Url'),
  }(name='JobStatus'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeAsyncStatusByJobIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAsyncStatusByJobIdResponseBody(name='body'),
}

async function describeAsyncStatusByJobIdWithOptions(request: DescribeAsyncStatusByJobIdRequest, runtime: Util.RuntimeOptions): DescribeAsyncStatusByJobIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAsyncStatusByJobId',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAsyncStatusByJobId(request: DescribeAsyncStatusByJobIdRequest): DescribeAsyncStatusByJobIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAsyncStatusByJobIdWithOptions(request, runtime);
}

model DescribeAuditLogConfigRequest {
  DBClusterId?: string(name='DBClusterId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeAuditLogConfigResponseBody = {
  auditLogStatus?: string(name='AuditLogStatus'),
  DBClusterId?: string(name='DBClusterId'),
  requestId?: string(name='RequestId'),
}

model DescribeAuditLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAuditLogConfigResponseBody(name='body'),
}

async function describeAuditLogConfigWithOptions(request: DescribeAuditLogConfigRequest, runtime: Util.RuntimeOptions): DescribeAuditLogConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAuditLogConfig',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAuditLogConfig(request: DescribeAuditLogConfigRequest): DescribeAuditLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuditLogConfigWithOptions(request, runtime);
}

model DescribeAuditLogRecordsRequest {
  DBClusterId?: string(name='DBClusterId'),
  DBName?: string(name='DBName'),
  endTime?: string(name='EndTime'),
  hostAddress?: string(name='HostAddress'),
  order?: string(name='Order'),
  orderType?: string(name='OrderType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  proxyUser?: string(name='ProxyUser'),
  queryKeyword?: string(name='QueryKeyword'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sqlType?: string(name='SqlType'),
  startTime?: string(name='StartTime'),
  succeed?: string(name='Succeed'),
  user?: string(name='User'),
}

model DescribeAuditLogRecordsResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  items?: [ 
    {
      connId?: string(name='ConnId'),
      DBName?: string(name='DBName'),
      executeTime?: string(name='ExecuteTime'),
      hostAddress?: string(name='HostAddress'),
      processID?: string(name='ProcessID'),
      SQLText?: string(name='SQLText'),
      SQLType?: string(name='SQLType'),
      succeed?: string(name='Succeed'),
      totalTime?: string(name='TotalTime'),
      user?: string(name='User'),
    }
  ](name='Items'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model DescribeAuditLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAuditLogRecordsResponseBody(name='body'),
}

async function describeAuditLogRecordsWithOptions(request: DescribeAuditLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeAuditLogRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.DBName)) {
    query['DBName'] = request.DBName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.hostAddress)) {
    query['HostAddress'] = request.hostAddress;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.proxyUser)) {
    query['ProxyUser'] = request.proxyUser;
  }
  if (!Util.isUnset(request.queryKeyword)) {
    query['QueryKeyword'] = request.queryKeyword;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sqlType)) {
    query['SqlType'] = request.sqlType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.succeed)) {
    query['Succeed'] = request.succeed;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAuditLogRecords',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAuditLogRecords(request: DescribeAuditLogRecordsRequest): DescribeAuditLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuditLogRecordsWithOptions(request, runtime);
}

model DescribeClusterAccessWhiteListRequest {
  DBClusterId?: string(name='DBClusterId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
}

model DescribeClusterAccessWhiteListResponseBody = {
  items?: {
    IPArray?: [ 
    {
      DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute'),
      DBClusterIPArrayName?: string(name='DBClusterIPArrayName'),
      securityIPList?: string(name='SecurityIPList'),
    }
  ](name='IPArray')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeClusterAccessWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterAccessWhiteListResponseBody(name='body'),
}

async function describeClusterAccessWhiteListWithOptions(request: DescribeClusterAccessWhiteListRequest, runtime: Util.RuntimeOptions): DescribeClusterAccessWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterAccessWhiteList',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterAccessWhiteList(request: DescribeClusterAccessWhiteListRequest): DescribeClusterAccessWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterAccessWhiteListWithOptions(request, runtime);
}

model DescribeClusterNetInfoRequest {
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeClusterNetInfoResponseBody = {
  clusterNetworkType?: string(name='ClusterNetworkType'),
  items?: {
    address?: [ 
    {
      connectionString?: string(name='ConnectionString'),
      connectionStringPrefix?: string(name='ConnectionStringPrefix'),
      IPAddress?: string(name='IPAddress'),
      netType?: string(name='NetType'),
      port?: string(name='Port'),
      VPCId?: string(name='VPCId'),
      vSwitchId?: string(name='VSwitchId'),
    }
  ](name='Address')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeClusterNetInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterNetInfoResponseBody(name='body'),
}

async function describeClusterNetInfoWithOptions(request: DescribeClusterNetInfoRequest, runtime: Util.RuntimeOptions): DescribeClusterNetInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterNetInfo',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterNetInfo(request: DescribeClusterNetInfoRequest): DescribeClusterNetInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterNetInfoWithOptions(request, runtime);
}

model DescribeDBClusterAttributeRequest {
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeDBClusterAttributeResponseBody = {
  items?: {
    DBCluster?: [ 
    {
      category?: string(name='Category'),
      commodityCode?: string(name='CommodityCode'),
      computeResource?: string(name='ComputeResource'),
      connectionString?: string(name='ConnectionString'),
      creationTime?: string(name='CreationTime'),
      DBClusterDescription?: string(name='DBClusterDescription'),
      DBClusterId?: string(name='DBClusterId'),
      DBClusterNetworkType?: string(name='DBClusterNetworkType'),
      DBClusterStatus?: string(name='DBClusterStatus'),
      DBClusterType?: string(name='DBClusterType'),
      DBNodeClass?: string(name='DBNodeClass'),
      DBNodeCount?: long(name='DBNodeCount'),
      DBNodeStorage?: long(name='DBNodeStorage'),
      DBVersion?: string(name='DBVersion'),
      diskType?: string(name='DiskType'),
      dtsJobId?: string(name='DtsJobId'),
      elasticIOResource?: int32(name='ElasticIOResource'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      executorCount?: string(name='ExecutorCount'),
      expireTime?: string(name='ExpireTime'),
      expired?: string(name='Expired'),
      kmsId?: string(name='KmsId'),
      lockMode?: string(name='LockMode'),
      lockReason?: string(name='LockReason'),
      maintainTime?: string(name='MaintainTime'),
      mode?: string(name='Mode'),
      payType?: string(name='PayType'),
      port?: int32(name='Port'),
      rdsInstanceId?: string(name='RdsInstanceId'),
      regionId?: string(name='RegionId'),
      reservedACU?: string(name='ReservedACU'),
      resourceGroupId?: string(name='ResourceGroupId'),
      storageResource?: string(name='StorageResource'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      userENIStatus?: boolean(name='UserENIStatus'),
      VPCCloudInstanceId?: string(name='VPCCloudInstanceId'),
      VPCId?: string(name='VPCId'),
      vSwitchId?: string(name='VSwitchId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DBCluster')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBClusterAttributeResponseBody(name='body'),
}

async function describeDBClusterAttributeWithOptions(request: DescribeDBClusterAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBClusterAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBClusterAttribute',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBClusterAttribute(request: DescribeDBClusterAttributeRequest): DescribeDBClusterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterAttributeWithOptions(request, runtime);
}

model DescribeDBClusterForecastRequest {
  DBClusterId?: string(name='DBClusterId'),
  metricType?: string(name='MetricType'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
}

model DescribeDBClusterForecastResponseBody = {
  performances?: [ 
    {
      key?: string(name='Key'),
      series?: [ 
        {
          name?: string(name='Name'),
          values?: string(name='Values'),
        }
      ](name='Series'),
      unit?: string(name='Unit'),
    }
  ](name='Performances'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterForecastResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBClusterForecastResponseBody(name='body'),
}

async function describeDBClusterForecastWithOptions(request: DescribeDBClusterForecastRequest, runtime: Util.RuntimeOptions): DescribeDBClusterForecastResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.metricType)) {
    query['MetricType'] = request.metricType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBClusterForecast',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBClusterForecast(request: DescribeDBClusterForecastRequest): DescribeDBClusterForecastResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterForecastWithOptions(request, runtime);
}

model DescribeDBClusterHealthStatusRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model DescribeDBClusterHealthStatusResponseBody = {
  CS?: {
    activeCount?: long(name='ActiveCount'),
    expectedCount?: long(name='ExpectedCount'),
    riskCount?: long(name='RiskCount'),
    status?: string(name='Status'),
    unavailableCount?: long(name='UnavailableCount'),
  }(name='CS'),
  executor?: {
    activeCount?: long(name='ActiveCount'),
    expectedCount?: long(name='ExpectedCount'),
    riskCount?: long(name='RiskCount'),
    status?: string(name='Status'),
    unavailableCount?: long(name='UnavailableCount'),
  }(name='Executor'),
  instanceStatus?: string(name='InstanceStatus'),
  requestId?: string(name='RequestId'),
  worker?: {
    activeCount?: long(name='ActiveCount'),
    expectedCount?: long(name='ExpectedCount'),
    riskCount?: long(name='RiskCount'),
    status?: string(name='Status'),
    unavailableCount?: long(name='UnavailableCount'),
  }(name='Worker'),
}

model DescribeDBClusterHealthStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBClusterHealthStatusResponseBody(name='body'),
}

async function describeDBClusterHealthStatusWithOptions(request: DescribeDBClusterHealthStatusRequest, runtime: Util.RuntimeOptions): DescribeDBClusterHealthStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBClusterHealthStatus',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBClusterHealthStatus(request: DescribeDBClusterHealthStatusRequest): DescribeDBClusterHealthStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterHealthStatusWithOptions(request, runtime);
}

model DescribeDBClusterPerformanceRequest {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  key?: string(name='Key'),
  regionId?: string(name='RegionId'),
  resourcePools?: string(name='ResourcePools'),
  startTime?: string(name='StartTime'),
}

model DescribeDBClusterPerformanceResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  performances?: [ 
    {
      key?: string(name='Key'),
      series?: [ 
        {
          name?: string(name='Name'),
          tags?: string(name='Tags'),
          values?: [ string ](name='Values'),
        }
      ](name='Series'),
      unit?: string(name='Unit'),
    }
  ](name='Performances'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDBClusterPerformanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBClusterPerformanceResponseBody(name='body'),
}

async function describeDBClusterPerformanceWithOptions(request: DescribeDBClusterPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBClusterPerformanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourcePools)) {
    query['ResourcePools'] = request.resourcePools;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBClusterPerformance',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBClusterPerformance(request: DescribeDBClusterPerformanceRequest): DescribeDBClusterPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterPerformanceWithOptions(request, runtime);
}

model DescribeDBClustersRequest {
  DBClusterDescription?: string(name='DBClusterDescription'),
  DBClusterIds?: string(name='DBClusterIds'),
  DBClusterStatus?: string(name='DBClusterStatus'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeDBClustersResponseBody = {
  items?: {
    DBCluster?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      computeResource?: string(name='ComputeResource'),
      connectionString?: string(name='ConnectionString'),
      createTime?: string(name='CreateTime'),
      DBClusterDescription?: string(name='DBClusterDescription'),
      DBClusterId?: string(name='DBClusterId'),
      DBClusterNetworkType?: string(name='DBClusterNetworkType'),
      DBClusterStatus?: string(name='DBClusterStatus'),
      DBClusterType?: string(name='DBClusterType'),
      DBNodeClass?: string(name='DBNodeClass'),
      DBNodeStorage?: long(name='DBNodeStorage'),
      DBVersion?: string(name='DBVersion'),
      diskType?: string(name='DiskType'),
      engine?: string(name='Engine'),
      expireTime?: string(name='ExpireTime'),
      expired?: string(name='Expired'),
      lockMode?: string(name='LockMode'),
      lockReason?: string(name='LockReason'),
      mode?: string(name='Mode'),
      payType?: string(name='PayType'),
      port?: string(name='Port'),
      regionId?: string(name='RegionId'),
      reservedACU?: string(name='ReservedACU'),
      resourceGroupId?: string(name='ResourceGroupId'),
      storageResource?: string(name='StorageResource'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      VPCId?: string(name='VPCId'),
      vSwitchId?: string(name='VSwitchId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DBCluster')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDBClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBClustersResponseBody(name='body'),
}

async function describeDBClustersWithOptions(request: DescribeDBClustersRequest, runtime: Util.RuntimeOptions): DescribeDBClustersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterDescription)) {
    query['DBClusterDescription'] = request.DBClusterDescription;
  }
  if (!Util.isUnset(request.DBClusterIds)) {
    query['DBClusterIds'] = request.DBClusterIds;
  }
  if (!Util.isUnset(request.DBClusterStatus)) {
    query['DBClusterStatus'] = request.DBClusterStatus;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBClusters',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBClusters(request: DescribeDBClustersRequest): DescribeDBClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClustersWithOptions(request, runtime);
}

model DescribeDBResourceGroupRequest {
  DBClusterId?: string(name='DBClusterId'),
  groupName?: string(name='GroupName'),
  groupType?: string(name='GroupType'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
}

model DescribeDBResourceGroupResponseBody = {
  groupsInfo?: [ 
    {
      createTime?: string(name='CreateTime'),
      groupName?: string(name='GroupName'),
      groupType?: string(name='GroupType'),
      groupUsers?: string(name='GroupUsers'),
      maxComputeResource?: string(name='MaxComputeResource'),
      minComputeResource?: string(name='MinComputeResource'),
      status?: string(name='Status'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='GroupsInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeDBResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBResourceGroupResponseBody(name='body'),
}

async function describeDBResourceGroupWithOptions(request: DescribeDBResourceGroupRequest, runtime: Util.RuntimeOptions): DescribeDBResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBResourceGroup',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBResourceGroup(request: DescribeDBResourceGroupRequest): DescribeDBResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBResourceGroupWithOptions(request, runtime);
}

model DescribeDiagnosisDimensionsRequest {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  lang?: string(name='Lang'),
  queryCondition?: string(name='QueryCondition'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
}

model DescribeDiagnosisDimensionsResponseBody = {
  clientIps?: [ string ](name='ClientIps'),
  databases?: [ string ](name='Databases'),
  requestId?: string(name='RequestId'),
  resourceGroups?: [ string ](name='ResourceGroups'),
  userNames?: [ string ](name='UserNames'),
}

model DescribeDiagnosisDimensionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosisDimensionsResponseBody(name='body'),
}

async function describeDiagnosisDimensionsWithOptions(request: DescribeDiagnosisDimensionsRequest, runtime: Util.RuntimeOptions): DescribeDiagnosisDimensionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.queryCondition)) {
    query['QueryCondition'] = request.queryCondition;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosisDimensions',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosisDimensions(request: DescribeDiagnosisDimensionsRequest): DescribeDiagnosisDimensionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosisDimensionsWithOptions(request, runtime);
}

model DescribeDiagnosisRecordsRequest {
  clientIp?: string(name='ClientIp'),
  DBClusterId?: string(name='DBClusterId'),
  database?: string(name='Database'),
  endTime?: string(name='EndTime'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  maxPeakMemory?: long(name='MaxPeakMemory'),
  maxScanSize?: long(name='MaxScanSize'),
  minPeakMemory?: long(name='MinPeakMemory'),
  minScanSize?: long(name='MinScanSize'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  patternId?: long(name='PatternId'),
  queryCondition?: string(name='QueryCondition'),
  regionId?: string(name='RegionId'),
  resourceGroup?: string(name='ResourceGroup'),
  startTime?: string(name='StartTime'),
  userName?: string(name='UserName'),
}

model DescribeDiagnosisRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  querys?: [ 
    {
      clientIp?: string(name='ClientIp'),
      cost?: long(name='Cost'),
      database?: string(name='Database'),
      etlWriteRows?: long(name='EtlWriteRows'),
      executionTime?: long(name='ExecutionTime'),
      outputDataSize?: long(name='OutputDataSize'),
      outputRows?: long(name='OutputRows'),
      peakMemory?: long(name='PeakMemory'),
      processId?: string(name='ProcessId'),
      queueTime?: long(name='QueueTime'),
      rcHost?: string(name='RcHost'),
      resourceCostRank?: int32(name='ResourceCostRank'),
      resourceGroup?: string(name='ResourceGroup'),
      SQL?: string(name='SQL'),
      SQLTruncated?: boolean(name='SQLTruncated'),
      SQLTruncatedThreshold?: long(name='SQLTruncatedThreshold'),
      scanRows?: long(name='ScanRows'),
      scanSize?: long(name='ScanSize'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
      totalPlanningTime?: long(name='TotalPlanningTime'),
      totalStages?: int32(name='TotalStages'),
      userName?: string(name='UserName'),
    }
  ](name='Querys'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDiagnosisRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosisRecordsResponseBody(name='body'),
}

async function describeDiagnosisRecordsWithOptions(request: DescribeDiagnosisRecordsRequest, runtime: Util.RuntimeOptions): DescribeDiagnosisRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.maxPeakMemory)) {
    query['MaxPeakMemory'] = request.maxPeakMemory;
  }
  if (!Util.isUnset(request.maxScanSize)) {
    query['MaxScanSize'] = request.maxScanSize;
  }
  if (!Util.isUnset(request.minPeakMemory)) {
    query['MinPeakMemory'] = request.minPeakMemory;
  }
  if (!Util.isUnset(request.minScanSize)) {
    query['MinScanSize'] = request.minScanSize;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.patternId)) {
    query['PatternId'] = request.patternId;
  }
  if (!Util.isUnset(request.queryCondition)) {
    query['QueryCondition'] = request.queryCondition;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroup)) {
    query['ResourceGroup'] = request.resourceGroup;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosisRecords',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosisRecords(request: DescribeDiagnosisRecordsRequest): DescribeDiagnosisRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosisRecordsWithOptions(request, runtime);
}

model DescribeDiagnosisSQLInfoRequest {
  DBClusterId?: string(name='DBClusterId'),
  lang?: string(name='Lang'),
  processId?: string(name='ProcessId'),
  processRcHost?: string(name='ProcessRcHost'),
  processStartTime?: long(name='ProcessStartTime'),
  processState?: string(name='ProcessState'),
  regionId?: string(name='RegionId'),
}

model DescribeDiagnosisSQLInfoResponseBody = {
  diagnosisSQLInfo?: string(name='DiagnosisSQLInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeDiagnosisSQLInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosisSQLInfoResponseBody(name='body'),
}

async function describeDiagnosisSQLInfoWithOptions(request: DescribeDiagnosisSQLInfoRequest, runtime: Util.RuntimeOptions): DescribeDiagnosisSQLInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosisSQLInfo',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosisSQLInfo(request: DescribeDiagnosisSQLInfoRequest): DescribeDiagnosisSQLInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosisSQLInfoWithOptions(request, runtime);
}

model DescribeDirectoryRequest {
  DBClusterId?: string(name='DBClusterId'),
  parentId?: long(name='ParentId'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
}

model DescribeDirectoryResponseBody = {
  code?: long(name='Code'),
  directories?: [ 
    {
      id?: long(name='Id'),
      isLeaf?: boolean(name='IsLeaf'),
      name?: string(name='Name'),
      parentId?: long(name='ParentId'),
      payload?: long(name='Payload'),
      projectCode?: long(name='ProjectCode'),
    }
  ](name='Directories'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDirectoryResponseBody(name='body'),
}

async function describeDirectoryWithOptions(request: DescribeDirectoryRequest, runtime: Util.RuntimeOptions): DescribeDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.parentId)) {
    query['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDirectory',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDirectory(request: DescribeDirectoryRequest): DescribeDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDirectoryWithOptions(request, runtime);
}

model DescribeDownloadRecordsRequest {
  DBClusterId?: string(name='DBClusterId'),
  lang?: string(name='Lang'),
  regionId?: string(name='RegionId'),
}

model DescribeDownloadRecordsResponseBody = {
  records?: [ 
    {
      downloadId?: long(name='DownloadId'),
      exceptionMsg?: string(name='ExceptionMsg'),
      fileName?: string(name='FileName'),
      status?: string(name='Status'),
      url?: string(name='Url'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId'),
}

model DescribeDownloadRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDownloadRecordsResponseBody(name='body'),
}

async function describeDownloadRecordsWithOptions(request: DescribeDownloadRecordsRequest, runtime: Util.RuntimeOptions): DescribeDownloadRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDownloadRecords',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDownloadRecords(request: DescribeDownloadRecordsRequest): DescribeDownloadRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDownloadRecordsWithOptions(request, runtime);
}

model DescribePatternPerformanceRequest {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  key?: string(name='Key'),
  patternId?: string(name='PatternId'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
}

model DescribePatternPerformanceResponseBody = {
  endTime?: string(name='EndTime'),
  performances?: [ 
    {
      key?: string(name='Key'),
      series?: [ 
        {
          name?: string(name='Name'),
          values?: [ string ](name='Values'),
        }
      ](name='Series'),
      unit?: string(name='Unit'),
    }
  ](name='Performances'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribePatternPerformanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePatternPerformanceResponseBody(name='body'),
}

async function describePatternPerformanceWithOptions(request: DescribePatternPerformanceRequest, runtime: Util.RuntimeOptions): DescribePatternPerformanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.patternId)) {
    query['PatternId'] = request.patternId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePatternPerformance',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePatternPerformance(request: DescribePatternPerformanceRequest): DescribePatternPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePatternPerformanceWithOptions(request, runtime);
}

model DescribeProcessDefinitionAttributeRequest {
  DBClusterId?: string(name='DBClusterId'),
  processCode?: long(name='ProcessCode'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
}

model DescribeProcessDefinitionAttributeResponseBody = {
  dagData?: {
    processDefinition?: {
      code?: long(name='Code'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      flag?: string(name='Flag'),
      globalParamJson?: string(name='GlobalParamJson'),
      id?: long(name='Id'),
      locationJson?: string(name='LocationJson'),
      modifyBy?: string(name='ModifyBy'),
      name?: string(name='Name'),
      projectCode?: long(name='ProjectCode'),
      projectName?: string(name='ProjectName'),
      releaseState?: string(name='ReleaseState'),
      scheduleReleaseState?: string(name='ScheduleReleaseState'),
      tenantCode?: string(name='TenantCode'),
      tenantId?: long(name='TenantId'),
      timeout?: long(name='Timeout'),
      updateTime?: string(name='UpdateTime'),
      userId?: long(name='UserId'),
      userName?: string(name='UserName'),
      version?: long(name='Version'),
      warningGroupId?: long(name='WarningGroupId'),
    }(name='ProcessDefinition'),
    processTaskRelations?: [ 
      {
        conditionParams?: string(name='ConditionParams'),
        conditionType?: string(name='ConditionType'),
        createTime?: string(name='CreateTime'),
        id?: long(name='Id'),
        name?: string(name='Name'),
        postTaskCode?: long(name='PostTaskCode'),
        postTaskVersion?: long(name='PostTaskVersion'),
        preTaskCode?: long(name='PreTaskCode'),
        preTaskVersion?: long(name='PreTaskVersion'),
        processCode?: long(name='ProcessCode'),
        processDefinitionVersion?: long(name='ProcessDefinitionVersion'),
        projectCode?: long(name='ProjectCode'),
        updateTime?: string(name='UpdateTime'),
      }
    ](name='ProcessTaskRelations'),
    taskDefinitions?: [ 
      {
        code?: long(name='Code'),
        createTime?: string(name='CreateTime'),
        delayTime?: long(name='DelayTime'),
        description?: string(name='Description'),
        environmentCode?: long(name='EnvironmentCode'),
        failRetryInterval?: long(name='FailRetryInterval'),
        failRetryTimes?: long(name='FailRetryTimes'),
        flag?: string(name='Flag'),
        id?: long(name='Id'),
        modifyBy?: string(name='ModifyBy'),
        name?: string(name='Name'),
        projectCode?: long(name='ProjectCode'),
        projectName?: string(name='ProjectName'),
        resourceIds?: string(name='ResourceIds'),
        taskParams?: string(name='TaskParams'),
        taskPriority?: string(name='TaskPriority'),
        taskType?: string(name='TaskType'),
        timeout?: long(name='Timeout'),
        timeoutFlag?: string(name='TimeoutFlag'),
        timeoutNotifyStrategy?: string(name='TimeoutNotifyStrategy'),
        updateTime?: string(name='UpdateTime'),
        userId?: long(name='UserId'),
        userName?: string(name='UserName'),
        version?: long(name='Version'),
        workerGroup?: string(name='WorkerGroup'),
      }
    ](name='TaskDefinitions'),
  }(name='DagData'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeProcessDefinitionAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProcessDefinitionAttributeResponseBody(name='body'),
}

async function describeProcessDefinitionAttributeWithOptions(request: DescribeProcessDefinitionAttributeRequest, runtime: Util.RuntimeOptions): DescribeProcessDefinitionAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.processCode)) {
    query['ProcessCode'] = request.processCode;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProcessDefinitionAttribute',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProcessDefinitionAttribute(request: DescribeProcessDefinitionAttributeRequest): DescribeProcessDefinitionAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProcessDefinitionAttributeWithOptions(request, runtime);
}

model DescribeProcessDefinitionsRequest {
  DBClusterId?: string(name='DBClusterId'),
  filterEmptyGlobal?: boolean(name='FilterEmptyGlobal'),
  name?: string(name='Name'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
}

model DescribeProcessDefinitionsResponseBody = {
  message?: string(name='Message'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  processDefinitions?: [ 
    {
      code?: long(name='Code'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      directoryId?: long(name='DirectoryId'),
      flag?: string(name='Flag'),
      globalParamJson?: string(name='GlobalParamJson'),
      id?: long(name='Id'),
      locationJson?: string(name='LocationJson'),
      modifyBy?: string(name='ModifyBy'),
      name?: string(name='Name'),
      parentDirectoryId?: long(name='ParentDirectoryId'),
      parentDirectoryName?: string(name='ParentDirectoryName'),
      projectCode?: long(name='ProjectCode'),
      projectName?: string(name='ProjectName'),
      releaseState?: string(name='ReleaseState'),
      scheduleReleaseState?: string(name='ScheduleReleaseState'),
      tenantCode?: string(name='TenantCode'),
      tenantId?: long(name='TenantId'),
      timeout?: long(name='Timeout'),
      updateTime?: string(name='UpdateTime'),
      userId?: long(name='UserId'),
      userName?: string(name='UserName'),
      version?: long(name='Version'),
      warningGroupId?: long(name='WarningGroupId'),
    }
  ](name='ProcessDefinitions'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model DescribeProcessDefinitionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProcessDefinitionsResponseBody(name='body'),
}

async function describeProcessDefinitionsWithOptions(request: DescribeProcessDefinitionsRequest, runtime: Util.RuntimeOptions): DescribeProcessDefinitionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.filterEmptyGlobal)) {
    query['FilterEmptyGlobal'] = request.filterEmptyGlobal;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProcessDefinitions',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProcessDefinitions(request: DescribeProcessDefinitionsRequest): DescribeProcessDefinitionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProcessDefinitionsWithOptions(request, runtime);
}

model DescribeProcessInstanceAttributeRequest {
  DBClusterId?: string(name='DBClusterId'),
  processInstanceId?: long(name='ProcessInstanceId'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
}

model DescribeProcessInstanceAttributeResponseBody = {
  message?: string(name='Message'),
  processInstance?: {
    commandParam?: string(name='CommandParam'),
    commandStartTime?: string(name='CommandStartTime'),
    commandType?: string(name='CommandType'),
    dagData?: {
      processDefinition?: {
        code?: long(name='Code'),
        createTime?: string(name='CreateTime'),
        description?: string(name='Description'),
        flag?: string(name='Flag'),
        globalParamJson?: string(name='GlobalParamJson'),
        id?: long(name='Id'),
        locationJson?: string(name='LocationJson'),
        modifyBy?: string(name='ModifyBy'),
        name?: string(name='Name'),
        projectCode?: long(name='ProjectCode'),
        projectName?: string(name='ProjectName'),
        releaseState?: string(name='ReleaseState'),
        scheduleReleaseState?: string(name='ScheduleReleaseState'),
        tenantCode?: string(name='TenantCode'),
        tenantId?: long(name='TenantId'),
        timeout?: long(name='Timeout'),
        updateTime?: string(name='UpdateTime'),
        userId?: long(name='UserId'),
        userName?: string(name='UserName'),
        version?: long(name='Version'),
        warningGroupId?: long(name='WarningGroupId'),
      }(name='ProcessDefinition'),
      processTaskRelations?: [ 
        {
          conditionParams?: string(name='ConditionParams'),
          conditionType?: string(name='ConditionType'),
          createTime?: string(name='CreateTime'),
          id?: long(name='Id'),
          name?: string(name='Name'),
          postTaskCode?: long(name='PostTaskCode'),
          postTaskVersion?: long(name='PostTaskVersion'),
          preTaskCode?: long(name='PreTaskCode'),
          preTaskVersion?: long(name='PreTaskVersion'),
          processCode?: long(name='ProcessCode'),
          processDefinitionVersion?: long(name='ProcessDefinitionVersion'),
          projectCode?: long(name='ProjectCode'),
          updateTime?: string(name='UpdateTime'),
        }
      ](name='ProcessTaskRelations'),
      taskDefinitions?: [ 
        {
          code?: long(name='Code'),
          createTime?: string(name='CreateTime'),
          delayTime?: long(name='DelayTime'),
          description?: string(name='Description'),
          environmentCode?: long(name='EnvironmentCode'),
          failRetryInterval?: long(name='FailRetryInterval'),
          failRetryTimes?: long(name='FailRetryTimes'),
          flag?: string(name='Flag'),
          id?: long(name='Id'),
          modifyBy?: string(name='ModifyBy'),
          name?: string(name='Name'),
          projectCode?: long(name='ProjectCode'),
          projectName?: string(name='ProjectName'),
          resourceIds?: string(name='ResourceIds'),
          taskParams?: string(name='TaskParams'),
          taskPriority?: string(name='TaskPriority'),
          taskType?: string(name='TaskType'),
          timeout?: long(name='Timeout'),
          timeoutFlag?: string(name='TimeoutFlag'),
          timeoutNotifyStrategy?: string(name='TimeoutNotifyStrategy'),
          updateTime?: string(name='UpdateTime'),
          userId?: long(name='UserId'),
          userName?: string(name='UserName'),
          version?: long(name='Version'),
          workerGroup?: string(name='WorkerGroup'),
        }
      ](name='TaskDefinitions'),
    }(name='DagData'),
    dependenceScheduleTimes?: string(name='DependenceScheduleTimes'),
    dryRun?: long(name='DryRun'),
    duration?: string(name='Duration'),
    endTime?: string(name='EndTime'),
    environmentCode?: long(name='EnvironmentCode'),
    executorId?: long(name='ExecutorId'),
    executorName?: string(name='ExecutorName'),
    failureStrategy?: string(name='FailureStrategy'),
    globalParams?: string(name='GlobalParams'),
    historyCmd?: string(name='HistoryCmd'),
    locations?: string(name='Locations'),
    maxTryTimes?: long(name='MaxTryTimes'),
    name?: string(name='Name'),
    nextProcessInstanceId?: long(name='NextProcessInstanceId'),
    processCode?: long(name='ProcessCode'),
    processDefinitionVersion?: long(name='ProcessDefinitionVersion'),
    processInstanceId?: long(name='ProcessInstanceId'),
    processInstancePriority?: string(name='ProcessInstancePriority'),
    queue?: string(name='Queue'),
    recovery?: string(name='Recovery'),
    runTimes?: long(name='RunTimes'),
    scheduleTime?: string(name='ScheduleTime'),
    startTime?: string(name='StartTime'),
    state?: string(name='State'),
    subProcessEnum?: string(name='SubProcessEnum'),
    taskDependType?: string(name='TaskDependType'),
    tenantCode?: string(name='TenantCode'),
    tenantId?: long(name='TenantId'),
    timeout?: long(name='Timeout'),
    varPool?: string(name='VarPool'),
    warningGroupId?: long(name='WarningGroupId'),
    warningType?: string(name='WarningType'),
    workerGroup?: string(name='WorkerGroup'),
  }(name='ProcessInstance'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeProcessInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProcessInstanceAttributeResponseBody(name='body'),
}

async function describeProcessInstanceAttributeWithOptions(request: DescribeProcessInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeProcessInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.processInstanceId)) {
    query['ProcessInstanceId'] = request.processInstanceId;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProcessInstanceAttribute',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProcessInstanceAttribute(request: DescribeProcessInstanceAttributeRequest): DescribeProcessInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProcessInstanceAttributeWithOptions(request, runtime);
}

model DescribeProcessInstanceStatisticsRequest {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
}

model DescribeProcessInstanceStatisticsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  states?: [ 
    {
      count?: long(name='Count'),
      stateType?: string(name='StateType'),
    }
  ](name='States'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model DescribeProcessInstanceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProcessInstanceStatisticsResponseBody(name='body'),
}

async function describeProcessInstanceStatisticsWithOptions(request: DescribeProcessInstanceStatisticsRequest, runtime: Util.RuntimeOptions): DescribeProcessInstanceStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProcessInstanceStatistics',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProcessInstanceStatistics(request: DescribeProcessInstanceStatisticsRequest): DescribeProcessInstanceStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProcessInstanceStatisticsWithOptions(request, runtime);
}

model DescribeProcessInstanceTasksRequest {
  DBClusterId?: string(name='DBClusterId'),
  processInstanceId?: long(name='ProcessInstanceId'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
}

model DescribeProcessInstanceTasksResponseBody = {
  message?: string(name='Message'),
  processInstanceState?: string(name='ProcessInstanceState'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskInstances?: [ 
    {
      alertFlag?: string(name='AlertFlag'),
      appLink?: string(name='AppLink'),
      delayTime?: long(name='DelayTime'),
      dependency?: {
        dependTasks?: [ 
          {
            dependItems?: [ 
              {
                cycle?: string(name='Cycle'),
                dateValue?: string(name='DateValue'),
                depTasks?: long(name='DepTasks'),
                dependResult?: string(name='DependResult'),
                processCode?: long(name='ProcessCode'),
                projectCode?: long(name='ProjectCode'),
                status?: string(name='Status'),
              }
            ](name='DependItems'),
            relation?: string(name='Relation'),
          }
        ](name='DependTasks'),
        localParams?: [ 
          {
            direct?: string(name='Direct'),
            prop?: string(name='Prop'),
            type?: string(name='Type'),
            value?: string(name='Value'),
          }
        ](name='LocalParams'),
        relation?: string(name='Relation'),
        varPools?: [ 
          {
            direct?: string(name='Direct'),
            prop?: string(name='Prop'),
            type?: string(name='Type'),
            value?: string(name='Value'),
          }
        ](name='VarPools'),
      }(name='Dependency'),
      dependentResult?: string(name='DependentResult'),
      dryRun?: long(name='DryRun'),
      duration?: string(name='Duration'),
      endTime?: string(name='EndTime'),
      environmentCode?: long(name='EnvironmentCode'),
      environmentConfig?: string(name='EnvironmentConfig'),
      executorId?: long(name='ExecutorId'),
      executorName?: string(name='ExecutorName'),
      firstSubmitTime?: string(name='FirstSubmitTime'),
      flag?: string(name='Flag'),
      id?: long(name='Id'),
      maxRetryTimes?: long(name='MaxRetryTimes'),
      name?: string(name='Name'),
      pid?: long(name='Pid'),
      processDefine?: {
        code?: long(name='Code'),
        createTime?: string(name='CreateTime'),
        description?: string(name='Description'),
        flag?: string(name='Flag'),
        globalParamJson?: string(name='GlobalParamJson'),
        id?: long(name='Id'),
        locationJson?: string(name='LocationJson'),
        modifyBy?: string(name='ModifyBy'),
        name?: string(name='Name'),
        projectCode?: long(name='ProjectCode'),
        projectName?: string(name='ProjectName'),
        releaseState?: string(name='ReleaseState'),
        scheduleReleaseState?: string(name='ScheduleReleaseState'),
        tenantCode?: string(name='TenantCode'),
        tenantId?: long(name='TenantId'),
        timeout?: long(name='Timeout'),
        updateTime?: string(name='UpdateTime'),
        userId?: long(name='UserId'),
        userName?: string(name='UserName'),
        version?: long(name='Version'),
        warningGroupId?: long(name='WarningGroupId'),
      }(name='ProcessDefine'),
      processInstance?: {
        commandParam?: string(name='CommandParam'),
        commandStartTime?: string(name='CommandStartTime'),
        commandType?: string(name='CommandType'),
        dependenceScheduleTimes?: string(name='DependenceScheduleTimes'),
        dryRun?: long(name='DryRun'),
        duration?: string(name='Duration'),
        endTime?: string(name='EndTime'),
        environmentCode?: long(name='EnvironmentCode'),
        executorId?: long(name='ExecutorId'),
        executorName?: string(name='ExecutorName'),
        failureStrategy?: string(name='FailureStrategy'),
        globalParams?: string(name='GlobalParams'),
        historyCmd?: string(name='HistoryCmd'),
        locations?: string(name='Locations'),
        maxTryTimes?: long(name='MaxTryTimes'),
        name?: string(name='Name'),
        nextProcessInstanceId?: long(name='NextProcessInstanceId'),
        processCode?: long(name='ProcessCode'),
        processDefinitionVersion?: long(name='ProcessDefinitionVersion'),
        processInstanceId?: long(name='ProcessInstanceId'),
        processInstancePriority?: string(name='ProcessInstancePriority'),
        queue?: string(name='Queue'),
        recovery?: string(name='Recovery'),
        runTimes?: long(name='RunTimes'),
        scheduleTime?: string(name='ScheduleTime'),
        startTime?: string(name='StartTime'),
        state?: string(name='State'),
        subProcessEnum?: string(name='SubProcessEnum'),
        taskDependType?: string(name='TaskDependType'),
        tenantCode?: string(name='TenantCode'),
        tenantId?: long(name='TenantId'),
        timeout?: long(name='Timeout'),
        varPool?: string(name='VarPool'),
        warningGroupId?: long(name='WarningGroupId'),
        warningType?: string(name='WarningType'),
        workerGroup?: string(name='WorkerGroup'),
      }(name='ProcessInstance'),
      processInstanceName?: string(name='ProcessInstanceName'),
      processInstancePriority?: string(name='ProcessInstancePriority'),
      processIntanceId?: long(name='ProcessIntanceId'),
      resources?: string(name='Resources'),
      retryInterval?: long(name='RetryInterval'),
      retryTimes?: long(name='RetryTimes'),
      startTime?: string(name='StartTime'),
      state?: string(name='State'),
      submitTime?: string(name='SubmitTime'),
      switchDependency?: {
        dependRelation?: string(name='DependRelation'),
        localParams?: [ 
          {
            direct?: string(name='Direct'),
            prop?: string(name='Prop'),
            type?: string(name='Type'),
            value?: string(name='Value'),
          }
        ](name='LocalParams'),
        nextNodes?: [ string ](name='NextNodes'),
        relation?: string(name='Relation'),
        varPools?: [ 
          {
            direct?: string(name='Direct'),
            prop?: string(name='Prop'),
            type?: string(name='Type'),
            value?: string(name='Value'),
          }
        ](name='VarPools'),
      }(name='SwitchDependency'),
      taskCode?: long(name='TaskCode'),
      taskDefine?: {
        code?: long(name='Code'),
        createTime?: string(name='CreateTime'),
        delayTime?: long(name='DelayTime'),
        description?: string(name='Description'),
        environmentCode?: long(name='EnvironmentCode'),
        failRetryInterval?: long(name='FailRetryInterval'),
        failRetryTimes?: long(name='FailRetryTimes'),
        flag?: string(name='Flag'),
        id?: long(name='Id'),
        modifyBy?: string(name='ModifyBy'),
        name?: string(name='Name'),
        projectCode?: long(name='ProjectCode'),
        projectName?: string(name='ProjectName'),
        resourceIds?: string(name='ResourceIds'),
        taskParams?: string(name='TaskParams'),
        taskPriority?: string(name='TaskPriority'),
        taskType?: string(name='TaskType'),
        timeout?: long(name='Timeout'),
        timeoutFlag?: string(name='TimeoutFlag'),
        timeoutNotifyStrategy?: string(name='TimeoutNotifyStrategy'),
        updateTime?: string(name='UpdateTime'),
        userId?: long(name='UserId'),
        userName?: string(name='UserName'),
        version?: long(name='Version'),
        workerGroup?: string(name='WorkerGroup'),
      }(name='TaskDefine'),
      taskDefinitionVersion?: long(name='TaskDefinitionVersion'),
      taskInstancePriority?: string(name='TaskInstancePriority'),
      taskParams?: string(name='TaskParams'),
      taskType?: string(name='TaskType'),
      varPool?: string(name='VarPool'),
      workerGroup?: string(name='WorkerGroup'),
    }
  ](name='TaskInstances'),
}

model DescribeProcessInstanceTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProcessInstanceTasksResponseBody(name='body'),
}

async function describeProcessInstanceTasksWithOptions(request: DescribeProcessInstanceTasksRequest, runtime: Util.RuntimeOptions): DescribeProcessInstanceTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.processInstanceId)) {
    query['ProcessInstanceId'] = request.processInstanceId;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProcessInstanceTasks',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProcessInstanceTasks(request: DescribeProcessInstanceTasksRequest): DescribeProcessInstanceTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProcessInstanceTasksWithOptions(request, runtime);
}

model DescribeProcessInstancesRequest {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  executorName?: string(name='ExecutorName'),
  name?: string(name='Name'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  processCode?: long(name='ProcessCode'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
  stateType?: string(name='StateType'),
}

model DescribeProcessInstancesResponseBody = {
  message?: string(name='Message'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  processInstances?: [ 
    {
      commandParam?: string(name='CommandParam'),
      commandStartTime?: string(name='CommandStartTime'),
      commandType?: string(name='CommandType'),
      dependenceScheduleTimes?: string(name='DependenceScheduleTimes'),
      directoryId?: long(name='DirectoryId'),
      dryRun?: long(name='DryRun'),
      duration?: string(name='Duration'),
      endTime?: string(name='EndTime'),
      environmentCode?: long(name='EnvironmentCode'),
      executorId?: long(name='ExecutorId'),
      executorName?: string(name='ExecutorName'),
      failureStrategy?: string(name='FailureStrategy'),
      globalParams?: string(name='GlobalParams'),
      historyCmd?: string(name='HistoryCmd'),
      locations?: string(name='Locations'),
      maxTryTimes?: long(name='MaxTryTimes'),
      name?: string(name='Name'),
      nextProcessInstanceId?: long(name='NextProcessInstanceId'),
      parentDirectoryId?: long(name='ParentDirectoryId'),
      parentDirectoryName?: string(name='ParentDirectoryName'),
      processCode?: long(name='ProcessCode'),
      processDefinitionVersion?: long(name='ProcessDefinitionVersion'),
      processInstanceId?: long(name='ProcessInstanceId'),
      processInstancePriority?: string(name='ProcessInstancePriority'),
      queue?: string(name='Queue'),
      recovery?: string(name='Recovery'),
      runTimes?: long(name='RunTimes'),
      scheduleTime?: string(name='ScheduleTime'),
      startTime?: string(name='StartTime'),
      state?: string(name='State'),
      subProcessEnum?: string(name='SubProcessEnum'),
      taskDependType?: string(name='TaskDependType'),
      tenantCode?: string(name='TenantCode'),
      tenantId?: long(name='TenantId'),
      timeout?: long(name='Timeout'),
      varPool?: string(name='VarPool'),
      warningGroupId?: long(name='WarningGroupId'),
      warningType?: string(name='WarningType'),
      workerGroup?: string(name='WorkerGroup'),
    }
  ](name='ProcessInstances'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model DescribeProcessInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProcessInstancesResponseBody(name='body'),
}

async function describeProcessInstancesWithOptions(request: DescribeProcessInstancesRequest, runtime: Util.RuntimeOptions): DescribeProcessInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.executorName)) {
    query['ExecutorName'] = request.executorName;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.processCode)) {
    query['ProcessCode'] = request.processCode;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.stateType)) {
    query['StateType'] = request.stateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProcessInstances',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProcessInstances(request: DescribeProcessInstancesRequest): DescribeProcessInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProcessInstancesWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
      zones?: {
        zone?: [ 
        {
          localName?: string(name='LocalName'),
          vpcEnabled?: boolean(name='VpcEnabled'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='Zone')
      }(name='Zones'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeSQLPatternAttributeRequest {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  lang?: string(name='Lang'),
  patternId?: long(name='PatternId'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
}

model DescribeSQLPatternAttributeResponseBody = {
  patternDetail?: {
    averageMemory?: string(name='AverageMemory'),
    averageQueryTime?: string(name='AverageQueryTime'),
    queryCount?: long(name='QueryCount'),
    SQLPattern?: string(name='SQLPattern'),
    totalQueryTime?: string(name='TotalQueryTime'),
  }(name='PatternDetail'),
  requestId?: string(name='RequestId'),
}

model DescribeSQLPatternAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLPatternAttributeResponseBody(name='body'),
}

async function describeSQLPatternAttributeWithOptions(request: DescribeSQLPatternAttributeRequest, runtime: Util.RuntimeOptions): DescribeSQLPatternAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.patternId)) {
    query['PatternId'] = request.patternId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLPatternAttribute',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLPatternAttribute(request: DescribeSQLPatternAttributeRequest): DescribeSQLPatternAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLPatternAttributeWithOptions(request, runtime);
}

model DescribeSQLPatternsRequest {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
}

model DescribeSQLPatternsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  patternDetails?: [ 
    {
      accessIp?: string(name='AccessIp'),
      averageExecutionTime?: double(name='AverageExecutionTime'),
      averagePeakMemory?: double(name='AveragePeakMemory'),
      averageQueryTime?: double(name='AverageQueryTime'),
      averageScanSize?: double(name='AverageScanSize'),
      blockable?: boolean(name='Blockable'),
      failedCount?: long(name='FailedCount'),
      maxExecutionTime?: long(name='MaxExecutionTime'),
      maxPeakMemory?: long(name='MaxPeakMemory'),
      maxQueryTime?: long(name='MaxQueryTime'),
      maxScanSize?: long(name='MaxScanSize'),
      patternCreationTime?: string(name='PatternCreationTime'),
      patternId?: string(name='PatternId'),
      queryCount?: long(name='QueryCount'),
      SQLPattern?: string(name='SQLPattern'),
      tables?: string(name='Tables'),
      user?: string(name='User'),
    }
  ](name='PatternDetails'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSQLPatternsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLPatternsResponseBody(name='body'),
}

async function describeSQLPatternsWithOptions(request: DescribeSQLPatternsRequest, runtime: Util.RuntimeOptions): DescribeSQLPatternsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLPatterns',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLPatterns(request: DescribeSQLPatternsRequest): DescribeSQLPatternsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLPatternsWithOptions(request, runtime);
}

model DescribeScheduleRequest {
  DBClusterId?: string(name='DBClusterId'),
  processCode?: long(name='ProcessCode'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
}

model DescribeScheduleResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  schedule?: {
    createTime?: string(name='CreateTime'),
    crontab?: string(name='Crontab'),
    definitionDescription?: string(name='DefinitionDescription'),
    endTime?: string(name='EndTime'),
    environmentCode?: long(name='EnvironmentCode'),
    failureStrategy?: string(name='FailureStrategy'),
    processCode?: long(name='ProcessCode'),
    processDefinitionName?: string(name='ProcessDefinitionName'),
    processInstancePriority?: string(name='ProcessInstancePriority'),
    projectName?: string(name='ProjectName'),
    releaseState?: string(name='ReleaseState'),
    scheduleId?: long(name='ScheduleId'),
    startTime?: string(name='StartTime'),
    timeZoneId?: string(name='TimeZoneId'),
    updateTime?: string(name='UpdateTime'),
    userId?: long(name='UserId'),
    userName?: string(name='UserName'),
    warningGroupId?: long(name='WarningGroupId'),
    warningType?: string(name='WarningType'),
    workerGroup?: string(name='WorkerGroup'),
  }(name='Schedule'),
  success?: boolean(name='Success'),
}

model DescribeScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeScheduleResponseBody(name='body'),
}

async function describeScheduleWithOptions(request: DescribeScheduleRequest, runtime: Util.RuntimeOptions): DescribeScheduleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.processCode)) {
    query['ProcessCode'] = request.processCode;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSchedule',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSchedule(request: DescribeScheduleRequest): DescribeScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScheduleWithOptions(request, runtime);
}

model DescribeSparkCodeLogRequest {
  DBClusterId?: string(name='DBClusterId'),
  jobId?: long(name='JobId'),
  regionId?: string(name='RegionId'),
}

model DescribeSparkCodeLogResponseBody = {
  log?: string(name='Log'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeSparkCodeLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSparkCodeLogResponseBody(name='body'),
}

async function describeSparkCodeLogWithOptions(request: DescribeSparkCodeLogRequest, runtime: Util.RuntimeOptions): DescribeSparkCodeLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSparkCodeLog',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSparkCodeLog(request: DescribeSparkCodeLogRequest): DescribeSparkCodeLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSparkCodeLogWithOptions(request, runtime);
}

model DescribeSparkCodeOutputRequest {
  DBClusterId?: string(name='DBClusterId'),
  jobId?: long(name='JobId'),
  regionId?: string(name='RegionId'),
}

model DescribeSparkCodeOutputResponseBody = {
  message?: string(name='Message'),
  output?: string(name='Output'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeSparkCodeOutputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSparkCodeOutputResponseBody(name='body'),
}

async function describeSparkCodeOutputWithOptions(request: DescribeSparkCodeOutputRequest, runtime: Util.RuntimeOptions): DescribeSparkCodeOutputResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSparkCodeOutput',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSparkCodeOutput(request: DescribeSparkCodeOutputRequest): DescribeSparkCodeOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSparkCodeOutputWithOptions(request, runtime);
}

model DescribeSparkCodeWebUiRequest {
  DBClusterId?: string(name='DBClusterId'),
  jobId?: long(name='JobId'),
  regionId?: string(name='RegionId'),
}

model DescribeSparkCodeWebUiResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  url?: string(name='Url'),
}

model DescribeSparkCodeWebUiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSparkCodeWebUiResponseBody(name='body'),
}

async function describeSparkCodeWebUiWithOptions(request: DescribeSparkCodeWebUiRequest, runtime: Util.RuntimeOptions): DescribeSparkCodeWebUiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSparkCodeWebUi',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSparkCodeWebUi(request: DescribeSparkCodeWebUiRequest): DescribeSparkCodeWebUiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSparkCodeWebUiWithOptions(request, runtime);
}

model DescribeSqlEditorHistoryRequest {
  DBClusterId?: string(name='DBClusterId'),
  databaseUser?: string(name='DatabaseUser'),
  endTime?: string(name='EndTime'),
  order?: string(name='Order'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceGroup?: string(name='ResourceGroup'),
  sql?: string(name='Sql'),
  startTime?: string(name='StartTime'),
  statusList?: string(name='StatusList'),
}

model DescribeSqlEditorHistoryResponseBody = {
  message?: string(name='Message'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  sqlHistorys?: [ 
    {
      affectRows?: long(name='AffectRows'),
      aliyunUserId?: string(name='AliyunUserId'),
      async?: boolean(name='Async'),
      createTime?: string(name='CreateTime'),
      DBClusterId?: string(name='DBClusterId'),
      databaseUser?: string(name='DatabaseUser'),
      diagnosis?: boolean(name='Diagnosis'),
      enable?: boolean(name='Enable'),
      endTime?: string(name='EndTime'),
      engine?: string(name='Engine'),
      jobId?: string(name='JobId'),
      message?: string(name='Message'),
      processId?: string(name='ProcessId'),
      progress?: string(name='Progress'),
      readable?: boolean(name='Readable'),
      regionId?: string(name='RegionId'),
      resourceAllocated?: long(name='ResourceAllocated'),
      resourceGroup?: string(name='ResourceGroup'),
      sql?: string(name='Sql'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
      timeCost?: long(name='TimeCost'),
      url?: string(name='Url'),
    }
  ](name='SqlHistorys'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model DescribeSqlEditorHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSqlEditorHistoryResponseBody(name='body'),
}

async function describeSqlEditorHistoryWithOptions(request: DescribeSqlEditorHistoryRequest, runtime: Util.RuntimeOptions): DescribeSqlEditorHistoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.databaseUser)) {
    query['DatabaseUser'] = request.databaseUser;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroup)) {
    query['ResourceGroup'] = request.resourceGroup;
  }
  if (!Util.isUnset(request.sql)) {
    query['Sql'] = request.sql;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.statusList)) {
    query['StatusList'] = request.statusList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSqlEditorHistory',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSqlEditorHistory(request: DescribeSqlEditorHistoryRequest): DescribeSqlEditorHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSqlEditorHistoryWithOptions(request, runtime);
}

model DescribeSqlEditorHistoryDimensionsRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model DescribeSqlEditorHistoryDimensionsResponseBody = {
  databaseUsers?: [ string ](name='DatabaseUsers'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeSqlEditorHistoryDimensionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSqlEditorHistoryDimensionsResponseBody(name='body'),
}

async function describeSqlEditorHistoryDimensionsWithOptions(request: DescribeSqlEditorHistoryDimensionsRequest, runtime: Util.RuntimeOptions): DescribeSqlEditorHistoryDimensionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSqlEditorHistoryDimensions',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSqlEditorHistoryDimensions(request: DescribeSqlEditorHistoryDimensionsRequest): DescribeSqlEditorHistoryDimensionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSqlEditorHistoryDimensionsWithOptions(request, runtime);
}

model DescribeSqlPatternRequest {
  DBClusterId?: string(name='DBClusterId'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  sqlPattern?: string(name='SqlPattern'),
  startTime?: string(name='StartTime'),
  type?: string(name='Type'),
}

model DescribeSqlPatternResponseBody = {
  items?: [ 
    {
      accessIP?: string(name='AccessIP'),
      avgCpuTime?: string(name='AvgCpuTime'),
      avgPeakMemory?: string(name='AvgPeakMemory'),
      avgScanSize?: string(name='AvgScanSize'),
      avgStageCount?: string(name='AvgStageCount'),
      avgTaskCount?: string(name='AvgTaskCount'),
      instanceName?: string(name='InstanceName'),
      maxCpuTime?: string(name='MaxCpuTime'),
      maxPeakMemory?: string(name='MaxPeakMemory'),
      maxScanSize?: string(name='MaxScanSize'),
      maxStageCount?: string(name='MaxStageCount'),
      maxTaskCount?: string(name='MaxTaskCount'),
      pattern?: string(name='Pattern'),
      queryCount?: string(name='QueryCount'),
      reportDate?: string(name='ReportDate'),
      user?: string(name='User'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSqlPatternResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSqlPatternResponseBody(name='body'),
}

async function describeSqlPatternWithOptions(request: DescribeSqlPatternRequest, runtime: Util.RuntimeOptions): DescribeSqlPatternResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sqlPattern)) {
    query['SqlPattern'] = request.sqlPattern;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSqlPattern',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSqlPattern(request: DescribeSqlPatternRequest): DescribeSqlPatternResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSqlPatternWithOptions(request, runtime);
}

model DescribeSqlResultsExportHistoryRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model DescribeSqlResultsExportHistoryResponseBody = {
  message?: string(name='Message'),
  records?: [ 
    {
      exceptionMsg?: string(name='ExceptionMsg'),
      fileName?: string(name='FileName'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      url?: string(name='Url'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeSqlResultsExportHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSqlResultsExportHistoryResponseBody(name='body'),
}

async function describeSqlResultsExportHistoryWithOptions(request: DescribeSqlResultsExportHistoryRequest, runtime: Util.RuntimeOptions): DescribeSqlResultsExportHistoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSqlResultsExportHistory',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSqlResultsExportHistory(request: DescribeSqlResultsExportHistoryRequest): DescribeSqlResultsExportHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSqlResultsExportHistoryWithOptions(request, runtime);
}

model DescribeSqlTemplateAttributeRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  templateId?: long(name='TemplateId'),
}

model DescribeSqlTemplateAttributeResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  sqlTemplate?: {
    DBClusterId?: string(name='DBClusterId'),
    regionId?: string(name='RegionId'),
    templateId?: long(name='TemplateId'),
    templateName?: string(name='TemplateName'),
    templateValue?: string(name='TemplateValue'),
  }(name='SqlTemplate'),
  success?: boolean(name='Success'),
}

model DescribeSqlTemplateAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSqlTemplateAttributeResponseBody(name='body'),
}

async function describeSqlTemplateAttributeWithOptions(request: DescribeSqlTemplateAttributeRequest, runtime: Util.RuntimeOptions): DescribeSqlTemplateAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSqlTemplateAttribute',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSqlTemplateAttribute(request: DescribeSqlTemplateAttributeRequest): DescribeSqlTemplateAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSqlTemplateAttributeWithOptions(request, runtime);
}

model DescribeSqlTemplateGroupAttributeRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  templateGroupId?: long(name='TemplateGroupId'),
}

model DescribeSqlTemplateGroupAttributeResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  sqlTemplateGroup?: {
    DBClusterId?: string(name='DBClusterId'),
    regionId?: string(name='RegionId'),
    templateGroupId?: long(name='TemplateGroupId'),
    templateGroupName?: string(name='TemplateGroupName'),
  }(name='SqlTemplateGroup'),
  success?: boolean(name='Success'),
}

model DescribeSqlTemplateGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSqlTemplateGroupAttributeResponseBody(name='body'),
}

async function describeSqlTemplateGroupAttributeWithOptions(request: DescribeSqlTemplateGroupAttributeRequest, runtime: Util.RuntimeOptions): DescribeSqlTemplateGroupAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.templateGroupId)) {
    query['TemplateGroupId'] = request.templateGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSqlTemplateGroupAttribute',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSqlTemplateGroupAttribute(request: DescribeSqlTemplateGroupAttributeRequest): DescribeSqlTemplateGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSqlTemplateGroupAttributeWithOptions(request, runtime);
}

model DescribeSqlTemplateGroupsRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model DescribeSqlTemplateGroupsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  sqlTemplateGroups?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      regionId?: string(name='RegionId'),
      templateGroupId?: long(name='TemplateGroupId'),
      templateGroupName?: string(name='TemplateGroupName'),
    }
  ](name='SqlTemplateGroups'),
  success?: boolean(name='Success'),
}

model DescribeSqlTemplateGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSqlTemplateGroupsResponseBody(name='body'),
}

async function describeSqlTemplateGroupsWithOptions(request: DescribeSqlTemplateGroupsRequest, runtime: Util.RuntimeOptions): DescribeSqlTemplateGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSqlTemplateGroups',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSqlTemplateGroups(request: DescribeSqlTemplateGroupsRequest): DescribeSqlTemplateGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSqlTemplateGroupsWithOptions(request, runtime);
}

model DescribeSqlTemplatesRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  templateGroupId?: long(name='TemplateGroupId'),
  templateName?: string(name='TemplateName'),
}

model DescribeSqlTemplatesResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  sqlTemplateGroups?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      regionId?: string(name='RegionId'),
      sqlTemplates?: [ 
        {
          DBClusterId?: string(name='DBClusterId'),
          regionId?: string(name='RegionId'),
          templateId?: long(name='TemplateId'),
          templateName?: string(name='TemplateName'),
          templateValue?: string(name='TemplateValue'),
        }
      ](name='SqlTemplates'),
      templateGroupId?: long(name='TemplateGroupId'),
      templateGroupName?: string(name='TemplateGroupName'),
    }
  ](name='SqlTemplateGroups'),
  success?: boolean(name='Success'),
}

model DescribeSqlTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSqlTemplatesResponseBody(name='body'),
}

async function describeSqlTemplatesWithOptions(request: DescribeSqlTemplatesRequest, runtime: Util.RuntimeOptions): DescribeSqlTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.templateGroupId)) {
    query['TemplateGroupId'] = request.templateGroupId;
  }
  if (!Util.isUnset(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSqlTemplates',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSqlTemplates(request: DescribeSqlTemplatesRequest): DescribeSqlTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSqlTemplatesWithOptions(request, runtime);
}

model DescribeTableAccessCountRequest {
  DBClusterId?: string(name='DBClusterId'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
  tableName?: string(name='TableName'),
}

model DescribeTableAccessCountResponseBody = {
  items?: [ 
    {
      accessCount?: string(name='AccessCount'),
      instanceName?: string(name='InstanceName'),
      reportDate?: string(name='ReportDate'),
      tableName?: string(name='TableName'),
      tableSchema?: string(name='TableSchema'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeTableAccessCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTableAccessCountResponseBody(name='body'),
}

async function describeTableAccessCountWithOptions(request: DescribeTableAccessCountRequest, runtime: Util.RuntimeOptions): DescribeTableAccessCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTableAccessCount',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTableAccessCount(request: DescribeTableAccessCountRequest): DescribeTableAccessCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTableAccessCountWithOptions(request, runtime);
}

model DescribeTaskInstanceStatisticsRequest {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
}

model DescribeTaskInstanceStatisticsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  states?: [ 
    {
      count?: long(name='Count'),
      stateType?: string(name='StateType'),
    }
  ](name='States'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model DescribeTaskInstanceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTaskInstanceStatisticsResponseBody(name='body'),
}

async function describeTaskInstanceStatisticsWithOptions(request: DescribeTaskInstanceStatisticsRequest, runtime: Util.RuntimeOptions): DescribeTaskInstanceStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTaskInstanceStatistics',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTaskInstanceStatistics(request: DescribeTaskInstanceStatisticsRequest): DescribeTaskInstanceStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTaskInstanceStatisticsWithOptions(request, runtime);
}

model DownloadDiagnosisRecordsRequest {
  clientIp?: string(name='ClientIp'),
  DBClusterId?: string(name='DBClusterId'),
  database?: string(name='Database'),
  endTime?: string(name='EndTime'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  maxPeakMemory?: long(name='MaxPeakMemory'),
  maxScanSize?: long(name='MaxScanSize'),
  minPeakMemory?: long(name='MinPeakMemory'),
  minScanSize?: long(name='MinScanSize'),
  queryCondition?: string(name='QueryCondition'),
  regionId?: string(name='RegionId'),
  resourceGroup?: string(name='ResourceGroup'),
  startTime?: string(name='StartTime'),
  userName?: string(name='UserName'),
}

model DownloadDiagnosisRecordsResponseBody = {
  downloadId?: int32(name='DownloadId'),
  requestId?: string(name='RequestId'),
}

model DownloadDiagnosisRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DownloadDiagnosisRecordsResponseBody(name='body'),
}

async function downloadDiagnosisRecordsWithOptions(request: DownloadDiagnosisRecordsRequest, runtime: Util.RuntimeOptions): DownloadDiagnosisRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.maxPeakMemory)) {
    query['MaxPeakMemory'] = request.maxPeakMemory;
  }
  if (!Util.isUnset(request.maxScanSize)) {
    query['MaxScanSize'] = request.maxScanSize;
  }
  if (!Util.isUnset(request.minPeakMemory)) {
    query['MinPeakMemory'] = request.minPeakMemory;
  }
  if (!Util.isUnset(request.minScanSize)) {
    query['MinScanSize'] = request.minScanSize;
  }
  if (!Util.isUnset(request.queryCondition)) {
    query['QueryCondition'] = request.queryCondition;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroup)) {
    query['ResourceGroup'] = request.resourceGroup;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DownloadDiagnosisRecords',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function downloadDiagnosisRecords(request: DownloadDiagnosisRecordsRequest): DownloadDiagnosisRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return downloadDiagnosisRecordsWithOptions(request, runtime);
}

model EnableAlertServiceRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model EnableAlertServiceResponseBody = {
  code?: long(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableAlertServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableAlertServiceResponseBody(name='body'),
}

async function enableAlertServiceWithOptions(request: EnableAlertServiceRequest, runtime: Util.RuntimeOptions): EnableAlertServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableAlertService',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableAlertService(request: EnableAlertServiceRequest): EnableAlertServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableAlertServiceWithOptions(request, runtime);
}

model ExecuteAsyncSqlRequest {
  DBClusterId?: string(name='DBClusterId'),
  devParamsId?: long(name='DevParamsId'),
  engine?: string(name='Engine'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  processDefinitionCode?: long(name='ProcessDefinitionCode'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
  resourceGroup?: string(name='ResourceGroup'),
  saveHistory?: boolean(name='SaveHistory'),
  schema?: string(name='Schema'),
  sql?: string(name='Sql'),
  temporaryParamProps?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='TemporaryParamProps'),
}

model ExecuteAsyncSqlResponseBody = {
  costTime?: long(name='CostTime'),
  createTime?: string(name='CreateTime'),
  engine?: string(name='Engine'),
  jobId?: string(name='JobId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resourceGroup?: string(name='ResourceGroup'),
  resultDataList?: [ string ](name='ResultDataList'),
  resultHeaders?: [ string ](name='ResultHeaders'),
  resultPageNumber?: long(name='ResultPageNumber'),
  resultPageSize?: long(name='ResultPageSize'),
  resultRows?: long(name='ResultRows'),
  resultTotalCount?: long(name='ResultTotalCount'),
  SQL?: string(name='SQL'),
  SQLErrorCode?: string(name='SQLErrorCode'),
  SQLErrorMessage?: string(name='SQLErrorMessage'),
  SQLStatus?: boolean(name='SQLStatus'),
  SQLType?: string(name='SQLType'),
  success?: boolean(name='Success'),
}

model ExecuteAsyncSqlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExecuteAsyncSqlResponseBody(name='body'),
}

async function executeAsyncSqlWithOptions(request: ExecuteAsyncSqlRequest, runtime: Util.RuntimeOptions): ExecuteAsyncSqlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.devParamsId)) {
    query['DevParamsId'] = request.devParamsId;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.processDefinitionCode)) {
    query['ProcessDefinitionCode'] = request.processDefinitionCode;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroup)) {
    query['ResourceGroup'] = request.resourceGroup;
  }
  if (!Util.isUnset(request.saveHistory)) {
    query['SaveHistory'] = request.saveHistory;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.sql)) {
    query['Sql'] = request.sql;
  }
  if (!Util.isUnset(request.temporaryParamProps)) {
    query['TemporaryParamProps'] = request.temporaryParamProps;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteAsyncSql',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function executeAsyncSql(request: ExecuteAsyncSqlRequest): ExecuteAsyncSqlResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeAsyncSqlWithOptions(request, runtime);
}

model ExecuteProcessInstanceRequest {
  DBClusterId?: string(name='DBClusterId'),
  executeType?: string(name='ExecuteType'),
  processInstanceId?: long(name='ProcessInstanceId'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
}

model ExecuteProcessInstanceResponseBody = {
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExecuteProcessInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExecuteProcessInstanceResponseBody(name='body'),
}

async function executeProcessInstanceWithOptions(request: ExecuteProcessInstanceRequest, runtime: Util.RuntimeOptions): ExecuteProcessInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.executeType)) {
    query['ExecuteType'] = request.executeType;
  }
  if (!Util.isUnset(request.processInstanceId)) {
    query['ProcessInstanceId'] = request.processInstanceId;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteProcessInstance',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function executeProcessInstance(request: ExecuteProcessInstanceRequest): ExecuteProcessInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeProcessInstanceWithOptions(request, runtime);
}

model ExecuteSyncSqlRequest {
  DBClusterId?: string(name='DBClusterId'),
  devParamsId?: long(name='DevParamsId'),
  engine?: string(name='Engine'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  processDefinitionCode?: long(name='ProcessDefinitionCode'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
  resourceGroup?: string(name='ResourceGroup'),
  saveHistory?: boolean(name='SaveHistory'),
  schema?: string(name='Schema'),
  sql?: string(name='Sql'),
  temporaryParamProps?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='TemporaryParamProps'),
}

model ExecuteSyncSqlResponseBody = {
  costTime?: long(name='CostTime'),
  createTime?: string(name='CreateTime'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resourceGroup?: string(name='ResourceGroup'),
  resultDataList?: [ string ](name='ResultDataList'),
  resultHeaders?: [ string ](name='ResultHeaders'),
  resultPageNumber?: long(name='ResultPageNumber'),
  resultPageSize?: long(name='ResultPageSize'),
  resultRows?: long(name='ResultRows'),
  resultTotalCount?: long(name='ResultTotalCount'),
  SQL?: string(name='SQL'),
  SQLErrorCode?: string(name='SQLErrorCode'),
  SQLErrorMessage?: string(name='SQLErrorMessage'),
  SQLStatus?: boolean(name='SQLStatus'),
  SQLType?: string(name='SQLType'),
  success?: boolean(name='Success'),
}

model ExecuteSyncSqlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExecuteSyncSqlResponseBody(name='body'),
}

async function executeSyncSqlWithOptions(request: ExecuteSyncSqlRequest, runtime: Util.RuntimeOptions): ExecuteSyncSqlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.devParamsId)) {
    query['DevParamsId'] = request.devParamsId;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.processDefinitionCode)) {
    query['ProcessDefinitionCode'] = request.processDefinitionCode;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroup)) {
    query['ResourceGroup'] = request.resourceGroup;
  }
  if (!Util.isUnset(request.saveHistory)) {
    query['SaveHistory'] = request.saveHistory;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.sql)) {
    query['Sql'] = request.sql;
  }
  if (!Util.isUnset(request.temporaryParamProps)) {
    query['TemporaryParamProps'] = request.temporaryParamProps;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteSyncSql',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function executeSyncSql(request: ExecuteSyncSqlRequest): ExecuteSyncSqlResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeSyncSqlWithOptions(request, runtime);
}

model ExportSqlResultsRequest {
  DBClusterId?: string(name='DBClusterId'),
  devParamsId?: long(name='DevParamsId'),
  processDefinitionCode?: long(name='ProcessDefinitionCode'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
  resourcePool?: string(name='ResourcePool'),
  schema?: string(name='Schema'),
  sql?: string(name='Sql'),
  temporaryParamProps?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='TemporaryParamProps'),
}

model ExportSqlResultsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExportSqlResultsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportSqlResultsResponseBody(name='body'),
}

async function exportSqlResultsWithOptions(request: ExportSqlResultsRequest, runtime: Util.RuntimeOptions): ExportSqlResultsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.devParamsId)) {
    query['DevParamsId'] = request.devParamsId;
  }
  if (!Util.isUnset(request.processDefinitionCode)) {
    query['ProcessDefinitionCode'] = request.processDefinitionCode;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourcePool)) {
    query['ResourcePool'] = request.resourcePool;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.sql)) {
    query['Sql'] = request.sql;
  }
  if (!Util.isUnset(request.temporaryParamProps)) {
    query['TemporaryParamProps'] = request.temporaryParamProps;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportSqlResults',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function exportSqlResults(request: ExportSqlResultsRequest): ExportSqlResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportSqlResultsWithOptions(request, runtime);
}

model GetLakehouseValidResourceGroupsRequest {
  groupsInfo?: string(name='GroupsInfo'),
}

model GetLakehouseValidResourceGroupsResponseBody = {
  data?: {
    lakehouseMinComputeResource?: long(name='LakehouseMinComputeResource'),
    validPoolsInfo?: [ 
      {
        available?: boolean(name='Available'),
        cuOptions?: [ long ](name='CuOptions'),
        groupName?: string(name='GroupName'),
        groupType?: string(name='GroupType'),
        maxComputeResource?: string(name='MaxComputeResource'),
        minComputeResource?: string(name='MinComputeResource'),
      }
    ](name='ValidPoolsInfo'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetLakehouseValidResourceGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLakehouseValidResourceGroupsResponseBody(name='body'),
}

async function getLakehouseValidResourceGroupsWithOptions(request: GetLakehouseValidResourceGroupsRequest, runtime: Util.RuntimeOptions): GetLakehouseValidResourceGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupsInfo)) {
    query['GroupsInfo'] = request.groupsInfo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLakehouseValidResourceGroups',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLakehouseValidResourceGroups(request: GetLakehouseValidResourceGroupsRequest): GetLakehouseValidResourceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLakehouseValidResourceGroupsWithOptions(request, runtime);
}

model GetSparkAppAttemptLogRequest {
  attemptId?: string(name='AttemptId'),
  logLength?: long(name='LogLength'),
}

model GetSparkAppAttemptLogResponseBody = {
  data?: {
    logContent?: string(name='LogContent'),
    message?: string(name='Message'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSparkAppAttemptLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkAppAttemptLogResponseBody(name='body'),
}

async function getSparkAppAttemptLogWithOptions(request: GetSparkAppAttemptLogRequest, runtime: Util.RuntimeOptions): GetSparkAppAttemptLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.attemptId)) {
    body['AttemptId'] = request.attemptId;
  }
  if (!Util.isUnset(request.logLength)) {
    body['LogLength'] = request.logLength;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkAppAttemptLog',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkAppAttemptLog(request: GetSparkAppAttemptLogRequest): GetSparkAppAttemptLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkAppAttemptLogWithOptions(request, runtime);
}

model GetSparkAppInfoRequest {
  appId?: string(name='AppId'),
}

model GetSparkAppInfoResponseBody = {
  data?: SparkAppInfo(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSparkAppInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkAppInfoResponseBody(name='body'),
}

async function getSparkAppInfoWithOptions(request: GetSparkAppInfoRequest, runtime: Util.RuntimeOptions): GetSparkAppInfoResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkAppInfo',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkAppInfo(request: GetSparkAppInfoRequest): GetSparkAppInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkAppInfoWithOptions(request, runtime);
}

model GetSparkAppLogRequest {
  appId?: string(name='AppId'),
  logLength?: long(name='LogLength'),
}

model GetSparkAppLogResponseBody = {
  data?: {
    logContent?: string(name='LogContent'),
    message?: string(name='Message'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSparkAppLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkAppLogResponseBody(name='body'),
}

async function getSparkAppLogWithOptions(request: GetSparkAppLogRequest, runtime: Util.RuntimeOptions): GetSparkAppLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.logLength)) {
    body['LogLength'] = request.logLength;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkAppLog',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkAppLog(request: GetSparkAppLogRequest): GetSparkAppLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkAppLogWithOptions(request, runtime);
}

model GetSparkAppStateRequest {
  appId?: string(name='AppId'),
}

model GetSparkAppStateResponseBody = {
  data?: {
    appId?: string(name='AppId'),
    appName?: string(name='AppName'),
    message?: string(name='Message'),
    state?: string(name='State'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSparkAppStateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkAppStateResponseBody(name='body'),
}

async function getSparkAppStateWithOptions(request: GetSparkAppStateRequest, runtime: Util.RuntimeOptions): GetSparkAppStateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkAppState',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkAppState(request: GetSparkAppStateRequest): GetSparkAppStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkAppStateWithOptions(request, runtime);
}

model GetSparkAppWebUiAddressRequest {
  appId?: string(name='AppId'),
}

model GetSparkAppWebUiAddressResponseBody = {
  data?: {
    appId?: string(name='AppId'),
    expirationTimeInMillis?: long(name='ExpirationTimeInMillis'),
    webUiAddress?: string(name='WebUiAddress'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSparkAppWebUiAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkAppWebUiAddressResponseBody(name='body'),
}

async function getSparkAppWebUiAddressWithOptions(request: GetSparkAppWebUiAddressRequest, runtime: Util.RuntimeOptions): GetSparkAppWebUiAddressResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkAppWebUiAddress',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkAppWebUiAddress(request: GetSparkAppWebUiAddressRequest): GetSparkAppWebUiAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkAppWebUiAddressWithOptions(request, runtime);
}

model GetSparkTemplateFileContentRequest {
  DBClusterId?: string(name='DBClusterId'),
  id?: long(name='Id'),
}

model GetSparkTemplateFileContentResponseBody = {
  data?: {
    appType?: string(name='AppType'),
    content?: string(name='Content'),
    id?: long(name='Id'),
    resourceGroupName?: string(name='ResourceGroupName'),
    type?: string(name='Type'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSparkTemplateFileContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkTemplateFileContentResponseBody(name='body'),
}

async function getSparkTemplateFileContentWithOptions(request: GetSparkTemplateFileContentRequest, runtime: Util.RuntimeOptions): GetSparkTemplateFileContentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkTemplateFileContent',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkTemplateFileContent(request: GetSparkTemplateFileContentRequest): GetSparkTemplateFileContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkTemplateFileContentWithOptions(request, runtime);
}

model GetSparkTemplateFolderTreeRequest {
  DBClusterId?: string(name='DBClusterId'),
}

model GetSparkTemplateFolderTreeResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSparkTemplateFolderTreeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkTemplateFolderTreeResponseBody(name='body'),
}

async function getSparkTemplateFolderTreeWithOptions(request: GetSparkTemplateFolderTreeRequest, runtime: Util.RuntimeOptions): GetSparkTemplateFolderTreeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkTemplateFolderTree',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkTemplateFolderTree(request: GetSparkTemplateFolderTreeRequest): GetSparkTemplateFolderTreeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkTemplateFolderTreeWithOptions(request, runtime);
}

model GetSparkTemplateFullTreeRequest {
  DBClusterId?: string(name='DBClusterId'),
}

model GetSparkTemplateFullTreeResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetSparkTemplateFullTreeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkTemplateFullTreeResponseBody(name='body'),
}

async function getSparkTemplateFullTreeWithOptions(request: GetSparkTemplateFullTreeRequest, runtime: Util.RuntimeOptions): GetSparkTemplateFullTreeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkTemplateFullTree',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkTemplateFullTree(request: GetSparkTemplateFullTreeRequest): GetSparkTemplateFullTreeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkTemplateFullTreeWithOptions(request, runtime);
}

model GrantProjectRequest {
  DBClusterId?: string(name='DBClusterId'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
  users?: [ 
    {
      userId?: string(name='UserId'),
      userName?: string(name='UserName'),
    }
  ](name='Users'),
}

model GrantProjectResponseBody = {
  code?: long(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GrantProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GrantProjectResponseBody(name='body'),
}

async function grantProjectWithOptions(request: GrantProjectRequest, runtime: Util.RuntimeOptions): GrantProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.users)) {
    query['Users'] = request.users;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GrantProject',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function grantProject(request: GrantProjectRequest): GrantProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantProjectWithOptions(request, runtime);
}

model KillSparkAppRequest {
  appId?: string(name='AppId'),
}

model KillSparkAppResponseBody = {
  data?: {
    appId?: string(name='AppId'),
    appName?: string(name='AppName'),
    message?: string(name='Message'),
    state?: string(name='State'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model KillSparkAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: KillSparkAppResponseBody(name='body'),
}

async function killSparkAppWithOptions(request: KillSparkAppRequest, runtime: Util.RuntimeOptions): KillSparkAppResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'KillSparkApp',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function killSparkApp(request: KillSparkAppRequest): KillSparkAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return killSparkAppWithOptions(request, runtime);
}

model ListAuthorizedUsersRequest {
  DBClusterId?: string(name='DBClusterId'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
  users?: [ 
    {
      userId?: string(name='UserId'),
      userName?: string(name='UserName'),
    }
  ](name='Users'),
}

model ListAuthorizedUsersResponseBody = {
  code?: long(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  users?: [ 
    {
      userId?: string(name='UserId'),
      userName?: string(name='UserName'),
      userRole?: string(name='UserRole'),
    }
  ](name='Users'),
}

model ListAuthorizedUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAuthorizedUsersResponseBody(name='body'),
}

async function listAuthorizedUsersWithOptions(request: ListAuthorizedUsersRequest, runtime: Util.RuntimeOptions): ListAuthorizedUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.users)) {
    query['Users'] = request.users;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAuthorizedUsers',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAuthorizedUsers(request: ListAuthorizedUsersRequest): ListAuthorizedUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAuthorizedUsersWithOptions(request, runtime);
}

model ListProjectsRequest {
  DBClusterId?: string(name='DBClusterId'),
  name?: string(name='Name'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  regionId?: string(name='RegionId'),
}

model ListProjectsResponseBody = {
  code?: long(name='Code'),
  message?: string(name='Message'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  projects?: [ 
    {
      code?: string(name='Code'),
      creatorId?: string(name='CreatorId'),
      creatorName?: string(name='CreatorName'),
      description?: string(name='Description'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      processDefinitionCount?: long(name='ProcessDefinitionCount'),
      processInstanceRunningCount?: long(name='ProcessInstanceRunningCount'),
    }
  ](name='Projects'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model ListProjectsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectsResponseBody(name='body'),
}

async function listProjectsWithOptions(request: ListProjectsRequest, runtime: Util.RuntimeOptions): ListProjectsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjects',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProjectsWithOptions(request, runtime);
}

model ListSparkAppAttemptsRequest {
  appId?: string(name='AppId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model ListSparkAppAttemptsResponseBody = {
  data?: {
    attemptInfoList?: [
      SparkAttemptInfo
    ](name='AttemptInfoList'),
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model ListSparkAppAttemptsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSparkAppAttemptsResponseBody(name='body'),
}

async function listSparkAppAttemptsWithOptions(request: ListSparkAppAttemptsRequest, runtime: Util.RuntimeOptions): ListSparkAppAttemptsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSparkAppAttempts',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSparkAppAttempts(request: ListSparkAppAttemptsRequest): ListSparkAppAttemptsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSparkAppAttemptsWithOptions(request, runtime);
}

model ListSparkAppsRequest {
  DBClusterId?: string(name='DBClusterId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  resourceGroupName?: string(name='ResourceGroupName'),
}

model ListSparkAppsResponseBody = {
  data?: {
    appInfoList?: [
      SparkAppInfo
    ](name='AppInfoList'),
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListSparkAppsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSparkAppsResponseBody(name='body'),
}

async function listSparkAppsWithOptions(request: ListSparkAppsRequest, runtime: Util.RuntimeOptions): ListSparkAppsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupName)) {
    query['ResourceGroupName'] = request.resourceGroupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSparkApps',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSparkApps(request: ListSparkAppsRequest): ListSparkAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSparkAppsWithOptions(request, runtime);
}

model ListTaskInstancesRequest {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  processInstanceId?: int32(name='ProcessInstanceId'),
  processInstanceName?: string(name='ProcessInstanceName'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
  stateType?: string(name='StateType'),
  taskName?: string(name='TaskName'),
}

model ListTaskInstancesResponseBody = {
  code?: long(name='Code'),
  message?: string(name='Message'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskInstances?: [ 
    {
      alertFlag?: string(name='AlertFlag'),
      appLink?: string(name='AppLink'),
      dryRun?: int32(name='DryRun'),
      duration?: string(name='Duration'),
      endTime?: string(name='EndTime'),
      executorName?: string(name='ExecutorName'),
      firstSubmitTime?: string(name='FirstSubmitTime'),
      id?: int32(name='Id'),
      maxRetryTimes?: int32(name='MaxRetryTimes'),
      name?: string(name='Name'),
      pid?: int32(name='Pid'),
      processInstanceId?: int32(name='ProcessInstanceId'),
      processInstanceName?: string(name='ProcessInstanceName'),
      retryInterval?: int32(name='RetryInterval'),
      retryTimes?: int32(name='RetryTimes'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
      submitTime?: string(name='SubmitTime'),
      taskCode?: long(name='TaskCode'),
      taskDefinitionVersion?: int32(name='TaskDefinitionVersion'),
      taskType?: string(name='TaskType'),
    }
  ](name='TaskInstances'),
  totalCount?: long(name='TotalCount'),
}

model ListTaskInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTaskInstancesResponseBody(name='body'),
}

async function listTaskInstancesWithOptions(request: ListTaskInstancesRequest, runtime: Util.RuntimeOptions): ListTaskInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.processInstanceId)) {
    query['ProcessInstanceId'] = request.processInstanceId;
  }
  if (!Util.isUnset(request.processInstanceName)) {
    query['ProcessInstanceName'] = request.processInstanceName;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.stateType)) {
    query['StateType'] = request.stateType;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTaskInstances',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTaskInstances(request: ListTaskInstancesRequest): ListTaskInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTaskInstancesWithOptions(request, runtime);
}

model ListUnauthorizedUsersRequest {
  DBClusterId?: string(name='DBClusterId'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
  users?: [ 
    {
      userId?: string(name='UserId'),
      userName?: string(name='UserName'),
    }
  ](name='Users'),
}

model ListUnauthorizedUsersResponseBody = {
  code?: long(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  users?: [ 
    {
      userId?: string(name='UserId'),
      userName?: string(name='UserName'),
      userRole?: string(name='UserRole'),
    }
  ](name='Users'),
}

model ListUnauthorizedUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUnauthorizedUsersResponseBody(name='body'),
}

async function listUnauthorizedUsersWithOptions(request: ListUnauthorizedUsersRequest, runtime: Util.RuntimeOptions): ListUnauthorizedUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.users)) {
    query['Users'] = request.users;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUnauthorizedUsers',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUnauthorizedUsers(request: ListUnauthorizedUsersRequest): ListUnauthorizedUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUnauthorizedUsersWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest {
  accountDescription?: string(name='AccountDescription'),
  accountName?: string(name='AccountName'),
  DBClusterId?: string(name='DBClusterId'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountDescription)) {
    query['AccountDescription'] = request.accountDescription;
  }
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccountDescription',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model ModifyAdbMySqlDevParametersRequest {
  DBClusterId?: string(name='DBClusterId'),
  devParamName?: string(name='DevParamName'),
  devParamProps?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='DevParamProps'),
  devParamsId?: long(name='DevParamsId'),
  regionId?: string(name='RegionId'),
}

model ModifyAdbMySqlDevParametersResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyAdbMySqlDevParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAdbMySqlDevParametersResponseBody(name='body'),
}

async function modifyAdbMySqlDevParametersWithOptions(request: ModifyAdbMySqlDevParametersRequest, runtime: Util.RuntimeOptions): ModifyAdbMySqlDevParametersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.devParamName)) {
    query['DevParamName'] = request.devParamName;
  }
  if (!Util.isUnset(request.devParamProps)) {
    query['DevParamProps'] = request.devParamProps;
  }
  if (!Util.isUnset(request.devParamsId)) {
    query['DevParamsId'] = request.devParamsId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAdbMySqlDevParameters',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAdbMySqlDevParameters(request: ModifyAdbMySqlDevParametersRequest): ModifyAdbMySqlDevParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAdbMySqlDevParametersWithOptions(request, runtime);
}

model ModifyAlertGroupRequest {
  alertGroupId?: int32(name='AlertGroupId'),
  alertInstanceIds?: string(name='AlertInstanceIds'),
  DBClusterId?: string(name='DBClusterId'),
  description?: string(name='Description'),
  groupName?: string(name='GroupName'),
  regionId?: string(name='RegionId'),
}

model ModifyAlertGroupResponseBody = {
  code?: long(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyAlertGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAlertGroupResponseBody(name='body'),
}

async function modifyAlertGroupWithOptions(request: ModifyAlertGroupRequest, runtime: Util.RuntimeOptions): ModifyAlertGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alertGroupId)) {
    query['AlertGroupId'] = request.alertGroupId;
  }
  if (!Util.isUnset(request.alertInstanceIds)) {
    query['AlertInstanceIds'] = request.alertInstanceIds;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAlertGroup',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAlertGroup(request: ModifyAlertGroupRequest): ModifyAlertGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAlertGroupWithOptions(request, runtime);
}

model ModifyAlertInstanceRequest {
  DBClusterId?: string(name='DBClusterId'),
  instanceId?: int32(name='InstanceId'),
  instanceName?: string(name='InstanceName'),
  instanceParams?: string(name='InstanceParams'),
  regionId?: string(name='RegionId'),
}

model ModifyAlertInstanceResponseBody = {
  code?: long(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyAlertInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAlertInstanceResponseBody(name='body'),
}

async function modifyAlertInstanceWithOptions(request: ModifyAlertInstanceRequest, runtime: Util.RuntimeOptions): ModifyAlertInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceParams)) {
    query['InstanceParams'] = request.instanceParams;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAlertInstance',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAlertInstance(request: ModifyAlertInstanceRequest): ModifyAlertInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAlertInstanceWithOptions(request, runtime);
}

model ModifyAuditLogConfigRequest {
  auditLogStatus?: string(name='AuditLogStatus'),
  DBClusterId?: string(name='DBClusterId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyAuditLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
  updateSucceed?: boolean(name='UpdateSucceed'),
}

model ModifyAuditLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAuditLogConfigResponseBody(name='body'),
}

async function modifyAuditLogConfigWithOptions(request: ModifyAuditLogConfigRequest, runtime: Util.RuntimeOptions): ModifyAuditLogConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.auditLogStatus)) {
    query['AuditLogStatus'] = request.auditLogStatus;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAuditLogConfig',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAuditLogConfig(request: ModifyAuditLogConfigRequest): ModifyAuditLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAuditLogConfigWithOptions(request, runtime);
}

model ModifyClusterAccessWhiteListRequest {
  DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute'),
  DBClusterIPArrayName?: string(name='DBClusterIPArrayName'),
  DBClusterId?: string(name='DBClusterId'),
  modifyMode?: string(name='ModifyMode'),
  securityIps?: string(name='SecurityIps'),
}

model ModifyClusterAccessWhiteListResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  requestId?: string(name='RequestId'),
  taskId?: int32(name='TaskId'),
}

model ModifyClusterAccessWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClusterAccessWhiteListResponseBody(name='body'),
}

async function modifyClusterAccessWhiteListWithOptions(request: ModifyClusterAccessWhiteListRequest, runtime: Util.RuntimeOptions): ModifyClusterAccessWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterIPArrayAttribute)) {
    query['DBClusterIPArrayAttribute'] = request.DBClusterIPArrayAttribute;
  }
  if (!Util.isUnset(request.DBClusterIPArrayName)) {
    query['DBClusterIPArrayName'] = request.DBClusterIPArrayName;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.modifyMode)) {
    query['ModifyMode'] = request.modifyMode;
  }
  if (!Util.isUnset(request.securityIps)) {
    query['SecurityIps'] = request.securityIps;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClusterAccessWhiteList',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyClusterAccessWhiteList(request: ModifyClusterAccessWhiteListRequest): ModifyClusterAccessWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyClusterAccessWhiteListWithOptions(request, runtime);
}

model ModifyClusterConnectionStringRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix'),
  currentConnectionString?: string(name='CurrentConnectionString'),
  DBClusterId?: string(name='DBClusterId'),
  port?: int32(name='Port'),
}

model ModifyClusterConnectionStringResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyClusterConnectionStringResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClusterConnectionStringResponseBody(name='body'),
}

async function modifyClusterConnectionStringWithOptions(request: ModifyClusterConnectionStringRequest, runtime: Util.RuntimeOptions): ModifyClusterConnectionStringResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionStringPrefix)) {
    query['ConnectionStringPrefix'] = request.connectionStringPrefix;
  }
  if (!Util.isUnset(request.currentConnectionString)) {
    query['CurrentConnectionString'] = request.currentConnectionString;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClusterConnectionString',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyClusterConnectionString(request: ModifyClusterConnectionStringRequest): ModifyClusterConnectionStringResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyClusterConnectionStringWithOptions(request, runtime);
}

model ModifyDBClusterRequest {
  computeResource?: string(name='ComputeResource'),
  DBClusterId?: string(name='DBClusterId'),
  mode?: string(name='Mode'),
  modifyType?: string(name='ModifyType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  storageResource?: string(name='StorageResource'),
}

model ModifyDBClusterResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBClusterResponseBody(name='body'),
}

async function modifyDBClusterWithOptions(request: ModifyDBClusterRequest, runtime: Util.RuntimeOptions): ModifyDBClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.computeResource)) {
    query['ComputeResource'] = request.computeResource;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.modifyType)) {
    query['ModifyType'] = request.modifyType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.storageResource)) {
    query['StorageResource'] = request.storageResource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBCluster',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBCluster(request: ModifyDBClusterRequest): ModifyDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterWithOptions(request, runtime);
}

model ModifyDBClusterDescriptionRequest {
  DBClusterDescription?: string(name='DBClusterDescription'),
  DBClusterId?: string(name='DBClusterId'),
}

model ModifyDBClusterDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBClusterDescriptionResponseBody(name='body'),
}

async function modifyDBClusterDescriptionWithOptions(request: ModifyDBClusterDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBClusterDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterDescription)) {
    query['DBClusterDescription'] = request.DBClusterDescription;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBClusterDescription',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBClusterDescription(request: ModifyDBClusterDescriptionRequest): ModifyDBClusterDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterDescriptionWithOptions(request, runtime);
}

model ModifyDBClusterMaintainTimeRequest {
  DBClusterId?: string(name='DBClusterId'),
  maintainTime?: string(name='MaintainTime'),
}

model ModifyDBClusterMaintainTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBClusterMaintainTimeResponseBody(name='body'),
}

async function modifyDBClusterMaintainTimeWithOptions(request: ModifyDBClusterMaintainTimeRequest, runtime: Util.RuntimeOptions): ModifyDBClusterMaintainTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.maintainTime)) {
    query['MaintainTime'] = request.maintainTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBClusterMaintainTime',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBClusterMaintainTime(request: ModifyDBClusterMaintainTimeRequest): ModifyDBClusterMaintainTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterMaintainTimeWithOptions(request, runtime);
}

model ModifyDBResourceGroupRequest {
  DBClusterId?: string(name='DBClusterId'),
  groupName?: string(name='GroupName'),
  groupType?: string(name='GroupType'),
  maxComputeResource?: string(name='MaxComputeResource'),
  minComputeResource?: string(name='MinComputeResource'),
}

model ModifyDBResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBResourceGroupResponseBody(name='body'),
}

async function modifyDBResourceGroupWithOptions(request: ModifyDBResourceGroupRequest, runtime: Util.RuntimeOptions): ModifyDBResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.maxComputeResource)) {
    query['MaxComputeResource'] = request.maxComputeResource;
  }
  if (!Util.isUnset(request.minComputeResource)) {
    query['MinComputeResource'] = request.minComputeResource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBResourceGroup',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBResourceGroup(request: ModifyDBResourceGroupRequest): ModifyDBResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBResourceGroupWithOptions(request, runtime);
}

model ModifyDirectoryRequest {
  DBClusterId?: string(name='DBClusterId'),
  directoryId?: long(name='DirectoryId'),
  name?: string(name='Name'),
  parentId?: long(name='ParentId'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
}

model ModifyDirectoryResponseBody = {
  code?: long(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDirectoryResponseBody(name='body'),
}

async function modifyDirectoryWithOptions(request: ModifyDirectoryRequest, runtime: Util.RuntimeOptions): ModifyDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentId)) {
    query['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDirectory',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDirectory(request: ModifyDirectoryRequest): ModifyDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDirectoryWithOptions(request, runtime);
}

model ModifyProcessDefinitionRequest {
  DBClusterId?: string(name='DBClusterId'),
  description?: string(name='Description'),
  directoryId?: long(name='DirectoryId'),
  globalParams?: [ 
    {
      direct?: string(name='Direct'),
      prop?: string(name='Prop'),
      type?: string(name='Type'),
      value?: string(name='Value'),
    }
  ](name='GlobalParams'),
  locations?: [ 
    {
      taskCode?: long(name='TaskCode'),
      x?: long(name='X'),
      y?: long(name='Y'),
    }
  ](name='Locations'),
  name?: string(name='Name'),
  parentDirectoryId?: long(name='ParentDirectoryId'),
  processCode?: long(name='ProcessCode'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
  taskDefinitions?: [ 
    {
      code?: long(name='Code'),
      createTime?: string(name='CreateTime'),
      delayTime?: long(name='DelayTime'),
      description?: string(name='Description'),
      environmentCode?: long(name='EnvironmentCode'),
      failRetryInterval?: long(name='FailRetryInterval'),
      failRetryTimes?: long(name='FailRetryTimes'),
      flag?: string(name='Flag'),
      id?: long(name='Id'),
      modifyBy?: string(name='ModifyBy'),
      name?: string(name='Name'),
      operateTime?: string(name='OperateTime'),
      operator?: long(name='Operator'),
      projectCode?: long(name='ProjectCode'),
      projectName?: string(name='ProjectName'),
      resourceIds?: string(name='ResourceIds'),
      taskParamJson?: string(name='TaskParamJson'),
      taskPriority?: string(name='TaskPriority'),
      taskType?: string(name='TaskType'),
      timeout?: long(name='Timeout'),
      timeoutFlag?: string(name='TimeoutFlag'),
      timeoutNotifyStrategy?: string(name='TimeoutNotifyStrategy'),
      updateTime?: string(name='UpdateTime'),
      userId?: long(name='UserId'),
      userName?: string(name='UserName'),
      version?: long(name='Version'),
      workerGroup?: string(name='WorkerGroup'),
    }
  ](name='TaskDefinitions'),
  taskRelations?: [ 
    {
      conditionParams?: string(name='ConditionParams'),
      conditionType?: string(name='ConditionType'),
      createTime?: string(name='CreateTime'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      operateTime?: string(name='OperateTime'),
      operator?: long(name='Operator'),
      postTaskCode?: long(name='PostTaskCode'),
      postTaskVersion?: long(name='PostTaskVersion'),
      preTaskCode?: long(name='PreTaskCode'),
      preTaskVersion?: long(name='PreTaskVersion'),
      processCode?: long(name='ProcessCode'),
      processDefinitionVersion?: long(name='ProcessDefinitionVersion'),
      projectCode?: long(name='ProjectCode'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='TaskRelations'),
}

model ModifyProcessDefinitionResponseBody = {
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyProcessDefinitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyProcessDefinitionResponseBody(name='body'),
}

async function modifyProcessDefinitionWithOptions(request: ModifyProcessDefinitionRequest, runtime: Util.RuntimeOptions): ModifyProcessDefinitionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.globalParams)) {
    query['GlobalParams'] = request.globalParams;
  }
  if (!Util.isUnset(request.locations)) {
    query['Locations'] = request.locations;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentDirectoryId)) {
    query['ParentDirectoryId'] = request.parentDirectoryId;
  }
  if (!Util.isUnset(request.processCode)) {
    query['ProcessCode'] = request.processCode;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.taskDefinitions)) {
    query['TaskDefinitions'] = request.taskDefinitions;
  }
  if (!Util.isUnset(request.taskRelations)) {
    query['TaskRelations'] = request.taskRelations;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyProcessDefinition',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyProcessDefinition(request: ModifyProcessDefinitionRequest): ModifyProcessDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyProcessDefinitionWithOptions(request, runtime);
}

model ModifyProcessInstanceRequest {
  DBClusterId?: string(name='DBClusterId'),
  flag?: string(name='Flag'),
  globalParams?: [ 
    {
      direct?: string(name='Direct'),
      prop?: string(name='Prop'),
      type?: string(name='Type'),
      value?: string(name='Value'),
    }
  ](name='GlobalParams'),
  locations?: [ 
    {
      taskCode?: long(name='TaskCode'),
      x?: long(name='X'),
      y?: long(name='Y'),
    }
  ](name='Locations'),
  processInstanceId?: long(name='ProcessInstanceId'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
  scheduleTime?: string(name='ScheduleTime'),
  syncDefine?: boolean(name='SyncDefine'),
  taskDefinitions?: [ 
    {
      code?: long(name='Code'),
      createTime?: string(name='CreateTime'),
      delayTime?: long(name='DelayTime'),
      description?: string(name='Description'),
      environmentCode?: long(name='EnvironmentCode'),
      failRetryInterval?: long(name='FailRetryInterval'),
      failRetryTimes?: long(name='FailRetryTimes'),
      flag?: string(name='Flag'),
      id?: long(name='Id'),
      modifyBy?: string(name='ModifyBy'),
      name?: string(name='Name'),
      operateTime?: string(name='OperateTime'),
      operator?: long(name='Operator'),
      projectCode?: long(name='ProjectCode'),
      projectName?: string(name='ProjectName'),
      resourceIds?: string(name='ResourceIds'),
      taskParamJson?: string(name='TaskParamJson'),
      taskPriority?: string(name='TaskPriority'),
      taskType?: string(name='TaskType'),
      timeout?: long(name='Timeout'),
      timeoutFlag?: string(name='TimeoutFlag'),
      timeoutNotifyStrategy?: string(name='TimeoutNotifyStrategy'),
      updateTime?: string(name='UpdateTime'),
      userId?: long(name='UserId'),
      userName?: string(name='UserName'),
      version?: long(name='Version'),
      workerGroup?: string(name='WorkerGroup'),
    }
  ](name='TaskDefinitions'),
  taskRelations?: [ 
    {
      conditionParams?: string(name='ConditionParams'),
      conditionType?: string(name='ConditionType'),
      createTime?: string(name='CreateTime'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      operateTime?: string(name='OperateTime'),
      operator?: long(name='Operator'),
      postTaskCode?: long(name='PostTaskCode'),
      postTaskVersion?: long(name='PostTaskVersion'),
      preTaskCode?: long(name='PreTaskCode'),
      preTaskVersion?: long(name='PreTaskVersion'),
      processCode?: long(name='ProcessCode'),
      processDefinitionVersion?: long(name='ProcessDefinitionVersion'),
      projectCode?: long(name='ProjectCode'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='TaskRelations'),
  timeout?: long(name='Timeout'),
}

model ModifyProcessInstanceResponseBody = {
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyProcessInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyProcessInstanceResponseBody(name='body'),
}

async function modifyProcessInstanceWithOptions(request: ModifyProcessInstanceRequest, runtime: Util.RuntimeOptions): ModifyProcessInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.flag)) {
    query['Flag'] = request.flag;
  }
  if (!Util.isUnset(request.globalParams)) {
    query['GlobalParams'] = request.globalParams;
  }
  if (!Util.isUnset(request.locations)) {
    query['Locations'] = request.locations;
  }
  if (!Util.isUnset(request.processInstanceId)) {
    query['ProcessInstanceId'] = request.processInstanceId;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.scheduleTime)) {
    query['ScheduleTime'] = request.scheduleTime;
  }
  if (!Util.isUnset(request.syncDefine)) {
    query['SyncDefine'] = request.syncDefine;
  }
  if (!Util.isUnset(request.taskDefinitions)) {
    query['TaskDefinitions'] = request.taskDefinitions;
  }
  if (!Util.isUnset(request.taskRelations)) {
    query['TaskRelations'] = request.taskRelations;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyProcessInstance',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyProcessInstance(request: ModifyProcessInstanceRequest): ModifyProcessInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyProcessInstanceWithOptions(request, runtime);
}

model ModifyProjectRequest {
  DBClusterId?: string(name='DBClusterId'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
}

model ModifyProjectResponseBody = {
  code?: long(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyProjectResponseBody(name='body'),
}

async function modifyProjectWithOptions(request: ModifyProjectRequest, runtime: Util.RuntimeOptions): ModifyProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyProject',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyProject(request: ModifyProjectRequest): ModifyProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyProjectWithOptions(request, runtime);
}

model ModifySqlTemplateRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  templateGroupId?: long(name='TemplateGroupId'),
  templateId?: long(name='TemplateId'),
  templateName?: string(name='TemplateName'),
  templateValue?: string(name='TemplateValue'),
}

model ModifySqlTemplateResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifySqlTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySqlTemplateResponseBody(name='body'),
}

async function modifySqlTemplateWithOptions(request: ModifySqlTemplateRequest, runtime: Util.RuntimeOptions): ModifySqlTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.templateGroupId)) {
    query['TemplateGroupId'] = request.templateGroupId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.templateValue)) {
    query['TemplateValue'] = request.templateValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySqlTemplate',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySqlTemplate(request: ModifySqlTemplateRequest): ModifySqlTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySqlTemplateWithOptions(request, runtime);
}

model ModifySqlTemplateGroupRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  templateGroupId?: long(name='TemplateGroupId'),
  templateGroupName?: string(name='TemplateGroupName'),
}

model ModifySqlTemplateGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifySqlTemplateGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySqlTemplateGroupResponseBody(name='body'),
}

async function modifySqlTemplateGroupWithOptions(request: ModifySqlTemplateGroupRequest, runtime: Util.RuntimeOptions): ModifySqlTemplateGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.templateGroupId)) {
    query['TemplateGroupId'] = request.templateGroupId;
  }
  if (!Util.isUnset(request.templateGroupName)) {
    query['TemplateGroupName'] = request.templateGroupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySqlTemplateGroup',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySqlTemplateGroup(request: ModifySqlTemplateGroupRequest): ModifySqlTemplateGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySqlTemplateGroupWithOptions(request, runtime);
}

model QueryAlertGroupListRequest {
  DBClusterId?: string(name='DBClusterId'),
  name?: string(name='Name'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  regionId?: string(name='RegionId'),
}

model QueryAlertGroupListResponseBody = {
  alertGroups?: [ 
    {
      alertInstances?: [ 
        {
          instanceId?: int32(name='InstanceId'),
          instanceName?: string(name='InstanceName'),
        }
      ](name='AlertInstances'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      groupId?: long(name='GroupId'),
      groupName?: string(name='GroupName'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='AlertGroups'),
  code?: long(name='Code'),
  message?: string(name='Message'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model QueryAlertGroupListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAlertGroupListResponseBody(name='body'),
}

async function queryAlertGroupListWithOptions(request: QueryAlertGroupListRequest, runtime: Util.RuntimeOptions): QueryAlertGroupListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAlertGroupList',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAlertGroupList(request: QueryAlertGroupListRequest): QueryAlertGroupListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAlertGroupListWithOptions(request, runtime);
}

model QueryAlertInstanceListRequest {
  DBClusterId?: string(name='DBClusterId'),
  name?: string(name='Name'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  regionId?: string(name='RegionId'),
}

model QueryAlertInstanceListResponseBody = {
  alertInstances?: [ 
    {
      createTime?: string(name='CreateTime'),
      instanceId?: long(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      pluginId?: int32(name='PluginId'),
      pluginName?: string(name='PluginName'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='AlertInstances'),
  code?: long(name='Code'),
  message?: string(name='Message'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model QueryAlertInstanceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAlertInstanceListResponseBody(name='body'),
}

async function queryAlertInstanceListWithOptions(request: QueryAlertInstanceListRequest, runtime: Util.RuntimeOptions): QueryAlertInstanceListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAlertInstanceList',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAlertInstanceList(request: QueryAlertInstanceListRequest): QueryAlertInstanceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAlertInstanceListWithOptions(request, runtime);
}

model QueryAlertServiceRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model QueryAlertServiceResponseBody = {
  code?: long(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAlertServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAlertServiceResponseBody(name='body'),
}

async function queryAlertServiceWithOptions(request: QueryAlertServiceRequest, runtime: Util.RuntimeOptions): QueryAlertServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAlertService',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAlertService(request: QueryAlertServiceRequest): QueryAlertServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAlertServiceWithOptions(request, runtime);
}

model QueryTaskLogRequest {
  DBClusterId?: string(name='DBClusterId'),
  limit?: int32(name='Limit'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
  skipLineNum?: int32(name='SkipLineNum'),
  taskInstanceId?: long(name='TaskInstanceId'),
}

model QueryTaskLogResponseBody = {
  code?: long(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTaskLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTaskLogResponseBody(name='body'),
}

async function queryTaskLogWithOptions(request: QueryTaskLogRequest, runtime: Util.RuntimeOptions): QueryTaskLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.skipLineNum)) {
    query['SkipLineNum'] = request.skipLineNum;
  }
  if (!Util.isUnset(request.taskInstanceId)) {
    query['TaskInstanceId'] = request.taskInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTaskLog',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTaskLog(request: QueryTaskLogRequest): QueryTaskLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTaskLogWithOptions(request, runtime);
}

model ReleaseClusterPublicConnectionRequest {
  DBClusterId?: string(name='DBClusterId'),
}

model ReleaseClusterPublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseClusterPublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseClusterPublicConnectionResponseBody(name='body'),
}

async function releaseClusterPublicConnectionWithOptions(request: ReleaseClusterPublicConnectionRequest, runtime: Util.RuntimeOptions): ReleaseClusterPublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseClusterPublicConnection',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseClusterPublicConnection(request: ReleaseClusterPublicConnectionRequest): ReleaseClusterPublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseClusterPublicConnectionWithOptions(request, runtime);
}

model ReleaseProcessDefinitionRequest {
  DBClusterId?: string(name='DBClusterId'),
  processCode?: long(name='ProcessCode'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
  releaseState?: string(name='ReleaseState'),
}

model ReleaseProcessDefinitionResponseBody = {
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReleaseProcessDefinitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseProcessDefinitionResponseBody(name='body'),
}

async function releaseProcessDefinitionWithOptions(request: ReleaseProcessDefinitionRequest, runtime: Util.RuntimeOptions): ReleaseProcessDefinitionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.processCode)) {
    query['ProcessCode'] = request.processCode;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.releaseState)) {
    query['ReleaseState'] = request.releaseState;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseProcessDefinition',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseProcessDefinition(request: ReleaseProcessDefinitionRequest): ReleaseProcessDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseProcessDefinitionWithOptions(request, runtime);
}

model ResetAccountPasswordRequest {
  accountDescription?: string(name='AccountDescription'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  DBClusterId?: string(name='DBClusterId'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetAccountPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountDescription)) {
    query['AccountDescription'] = request.accountDescription;
  }
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetAccountPassword',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountPasswordWithOptions(request, runtime);
}

model RevokeProjectRequest {
  DBClusterId?: string(name='DBClusterId'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
  users?: [ 
    {
      userId?: string(name='UserId'),
      userName?: string(name='UserName'),
    }
  ](name='Users'),
}

model RevokeProjectResponseBody = {
  code?: long(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RevokeProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeProjectResponseBody(name='body'),
}

async function revokeProjectWithOptions(request: RevokeProjectRequest, runtime: Util.RuntimeOptions): RevokeProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.users)) {
    query['Users'] = request.users;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeProject',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeProject(request: RevokeProjectRequest): RevokeProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeProjectWithOptions(request, runtime);
}

model StartCheckProcessDefinitionRequest {
  DBClusterId?: string(name='DBClusterId'),
  processCode?: long(name='ProcessCode'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
}

model StartCheckProcessDefinitionResponseBody = {
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StartCheckProcessDefinitionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartCheckProcessDefinitionResponseBody(name='body'),
}

async function startCheckProcessDefinitionWithOptions(request: StartCheckProcessDefinitionRequest, runtime: Util.RuntimeOptions): StartCheckProcessDefinitionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.processCode)) {
    query['ProcessCode'] = request.processCode;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartCheckProcessDefinition',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startCheckProcessDefinition(request: StartCheckProcessDefinitionRequest): StartCheckProcessDefinitionResponse {
  var runtime = new Util.RuntimeOptions{};
  return startCheckProcessDefinitionWithOptions(request, runtime);
}

model StartProcessInstanceRequest {
  DBClusterId?: string(name='DBClusterId'),
  dryRun?: long(name='DryRun'),
  environmentCode?: long(name='EnvironmentCode'),
  execType?: string(name='ExecType'),
  expectedParallelismNumber?: long(name='ExpectedParallelismNumber'),
  failureStrategy?: string(name='FailureStrategy'),
  processCode?: long(name='ProcessCode'),
  processInstancePriority?: string(name='ProcessInstancePriority'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
  runMode?: string(name='RunMode'),
  scheduleEndTime?: string(name='ScheduleEndTime'),
  scheduleStartTime?: string(name='ScheduleStartTime'),
  startNodeList?: string(name='StartNodeList'),
  startParams?: string(name='StartParams'),
  taskDependType?: string(name='TaskDependType'),
  timeout?: long(name='Timeout'),
  warningGroupId?: long(name='WarningGroupId'),
  warningType?: string(name='WarningType'),
  workerGroup?: string(name='WorkerGroup'),
}

model StartProcessInstanceResponseBody = {
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StartProcessInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartProcessInstanceResponseBody(name='body'),
}

async function startProcessInstanceWithOptions(request: StartProcessInstanceRequest, runtime: Util.RuntimeOptions): StartProcessInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.environmentCode)) {
    query['EnvironmentCode'] = request.environmentCode;
  }
  if (!Util.isUnset(request.execType)) {
    query['ExecType'] = request.execType;
  }
  if (!Util.isUnset(request.expectedParallelismNumber)) {
    query['ExpectedParallelismNumber'] = request.expectedParallelismNumber;
  }
  if (!Util.isUnset(request.failureStrategy)) {
    query['FailureStrategy'] = request.failureStrategy;
  }
  if (!Util.isUnset(request.processCode)) {
    query['ProcessCode'] = request.processCode;
  }
  if (!Util.isUnset(request.processInstancePriority)) {
    query['ProcessInstancePriority'] = request.processInstancePriority;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.runMode)) {
    query['RunMode'] = request.runMode;
  }
  if (!Util.isUnset(request.scheduleEndTime)) {
    query['ScheduleEndTime'] = request.scheduleEndTime;
  }
  if (!Util.isUnset(request.scheduleStartTime)) {
    query['ScheduleStartTime'] = request.scheduleStartTime;
  }
  if (!Util.isUnset(request.startNodeList)) {
    query['StartNodeList'] = request.startNodeList;
  }
  if (!Util.isUnset(request.startParams)) {
    query['StartParams'] = request.startParams;
  }
  if (!Util.isUnset(request.taskDependType)) {
    query['TaskDependType'] = request.taskDependType;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.warningGroupId)) {
    query['WarningGroupId'] = request.warningGroupId;
  }
  if (!Util.isUnset(request.warningType)) {
    query['WarningType'] = request.warningType;
  }
  if (!Util.isUnset(request.workerGroup)) {
    query['WorkerGroup'] = request.workerGroup;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartProcessInstance',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startProcessInstance(request: StartProcessInstanceRequest): StartProcessInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startProcessInstanceWithOptions(request, runtime);
}

model SubmitSparkAppRequest {
  agentSource?: string(name='AgentSource'),
  agentVersion?: string(name='AgentVersion'),
  appName?: string(name='AppName'),
  appType?: string(name='AppType'),
  DBClusterId?: string(name='DBClusterId'),
  data?: string(name='Data'),
  resourceGroupName?: string(name='ResourceGroupName'),
  templateFileId?: long(name='TemplateFileId'),
}

model SubmitSparkAppResponseBody = {
  data?: {
    appId?: string(name='AppId'),
    appName?: string(name='AppName'),
    message?: string(name='Message'),
    state?: string(name='State'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model SubmitSparkAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitSparkAppResponseBody(name='body'),
}

async function submitSparkAppWithOptions(request: SubmitSparkAppRequest, runtime: Util.RuntimeOptions): SubmitSparkAppResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.agentSource)) {
    body['AgentSource'] = request.agentSource;
  }
  if (!Util.isUnset(request.agentVersion)) {
    body['AgentVersion'] = request.agentVersion;
  }
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.data)) {
    body['Data'] = request.data;
  }
  if (!Util.isUnset(request.resourceGroupName)) {
    body['ResourceGroupName'] = request.resourceGroupName;
  }
  if (!Util.isUnset(request.templateFileId)) {
    body['TemplateFileId'] = request.templateFileId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitSparkApp',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitSparkApp(request: SubmitSparkAppRequest): SubmitSparkAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSparkAppWithOptions(request, runtime);
}

model UnbindAccountRequest {
  accountName?: string(name='AccountName'),
  DBClusterId?: string(name='DBClusterId'),
}

model UnbindAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindAccountResponseBody(name='body'),
}

async function unbindAccountWithOptions(request: UnbindAccountRequest, runtime: Util.RuntimeOptions): UnbindAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindAccount',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindAccount(request: UnbindAccountRequest): UnbindAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindAccountWithOptions(request, runtime);
}

model UpdateScheduleRequest {
  DBClusterId?: string(name='DBClusterId'),
  failureStrategy?: string(name='FailureStrategy'),
  processCode?: long(name='ProcessCode'),
  processInstancePriority?: string(name='ProcessInstancePriority'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
  releaseState?: string(name='ReleaseState'),
  scheduleId?: long(name='ScheduleId'),
  scheduleParamJson?: string(name='ScheduleParamJson'),
  warningType?: string(name='WarningType'),
}

model UpdateScheduleResponseBody = {
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateScheduleResponseBody(name='body'),
}

async function updateScheduleWithOptions(request: UpdateScheduleRequest, runtime: Util.RuntimeOptions): UpdateScheduleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.failureStrategy)) {
    query['FailureStrategy'] = request.failureStrategy;
  }
  if (!Util.isUnset(request.processCode)) {
    query['ProcessCode'] = request.processCode;
  }
  if (!Util.isUnset(request.processInstancePriority)) {
    query['ProcessInstancePriority'] = request.processInstancePriority;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.releaseState)) {
    query['ReleaseState'] = request.releaseState;
  }
  if (!Util.isUnset(request.scheduleId)) {
    query['ScheduleId'] = request.scheduleId;
  }
  if (!Util.isUnset(request.scheduleParamJson)) {
    query['ScheduleParamJson'] = request.scheduleParamJson;
  }
  if (!Util.isUnset(request.warningType)) {
    query['WarningType'] = request.warningType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSchedule',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSchedule(request: UpdateScheduleRequest): UpdateScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateScheduleWithOptions(request, runtime);
}

model UpdateSparkTemplateFileRequest {
  content?: string(name='Content'),
  DBClusterId?: string(name='DBClusterId'),
  id?: long(name='Id'),
  resourceGroupName?: string(name='ResourceGroupName'),
}

model UpdateSparkTemplateFileResponseBody = {
  data?: {
    succeeded?: boolean(name='Succeeded'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model UpdateSparkTemplateFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSparkTemplateFileResponseBody(name='body'),
}

async function updateSparkTemplateFileWithOptions(request: UpdateSparkTemplateFileRequest, runtime: Util.RuntimeOptions): UpdateSparkTemplateFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.resourceGroupName)) {
    body['ResourceGroupName'] = request.resourceGroupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSparkTemplateFile',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSparkTemplateFile(request: UpdateSparkTemplateFileRequest): UpdateSparkTemplateFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSparkTemplateFileWithOptions(request, runtime);
}

