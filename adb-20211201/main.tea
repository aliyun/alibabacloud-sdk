/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'adb.aliyuncs.com',
    cn-beijing = 'adb.aliyuncs.com',
    cn-hangzhou = 'adb.aliyuncs.com',
    cn-shanghai = 'adb.aliyuncs.com',
    cn-shenzhen = 'adb.aliyuncs.com',
    cn-hongkong = 'adb.aliyuncs.com',
    ap-southeast-1 = 'adb.aliyuncs.com',
    us-west-1 = 'adb.aliyuncs.com',
    us-east-1 = 'adb.aliyuncs.com',
    cn-hangzhou-finance = 'adb.aliyuncs.com',
    cn-north-2-gov-1 = 'adb.aliyuncs.com',
    ap-northeast-2-pop = 'adb.ap-northeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'adb.aliyuncs.com',
    cn-beijing-finance-pop = 'adb.aliyuncs.com',
    cn-beijing-gov-1 = 'adb.aliyuncs.com',
    cn-beijing-nu16-b01 = 'adb.aliyuncs.com',
    cn-edge-1 = 'adb.aliyuncs.com',
    cn-fujian = 'adb.aliyuncs.com',
    cn-haidian-cm12-c01 = 'adb.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'adb.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'adb.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'adb.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'adb.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'adb.aliyuncs.com',
    cn-hangzhou-test-306 = 'adb.aliyuncs.com',
    cn-hongkong-finance-pop = 'adb.aliyuncs.com',
    cn-qingdao-nebula = 'adb.aliyuncs.com',
    cn-shanghai-et15-b01 = 'adb.aliyuncs.com',
    cn-shanghai-et2-b01 = 'adb.aliyuncs.com',
    cn-shanghai-finance-1 = 'adb.aliyuncs.com',
    cn-shanghai-inner = 'adb.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'adb.aliyuncs.com',
    cn-shenzhen-finance-1 = 'adb.aliyuncs.com',
    cn-shenzhen-inner = 'adb.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'adb.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'adb.aliyuncs.com',
    cn-wuhan = 'adb.aliyuncs.com',
    cn-yushanfang = 'adb.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'adb.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'adb.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'adb.aliyuncs.com',
    eu-west-1-oxs = 'adb.ap-northeast-1.aliyuncs.com',
    me-east-1 = 'adb.ap-northeast-1.aliyuncs.com',
    rus-west-1-pop = 'adb.ap-northeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('adb', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ColDetailModel {
  columnName?: string(name='ColumnName'),
  createTime?: string(name='CreateTime'),
  description?: string(name='Description'),
  distributeKey?: boolean(name='DistributeKey'),
  nullable?: boolean(name='Nullable'),
  partitionKey?: boolean(name='PartitionKey'),
  primaryKey?: boolean(name='PrimaryKey'),
  schemaName?: string(name='SchemaName'),
  tableName?: string(name='TableName'),
  type?: string(name='Type'),
  updateTime?: string(name='UpdateTime'),
}

model CstoreIndexModel {
  columnOrds?: [ string ](name='ColumnOrds'),
  createTime?: string(name='CreateTime'),
  databaseName?: string(name='DatabaseName'),
  indexColumns?: [
    FieldSchemaModel
  ](name='IndexColumns'),
  indexName?: string(name='IndexName'),
  indexType?: string(name='IndexType'),
  options?: map[string]string(name='Options'),
  physicalTableName?: string(name='PhysicalTableName'),
  updateTime?: string(name='UpdateTime'),
}

model DatabaseSummaryModel {
  createTime?: string(name='CreateTime'),
  description?: string(name='Description'),
  owner?: string(name='Owner'),
  schemaName?: string(name='SchemaName'),
  updateTime?: string(name='UpdateTime'),
}

model Detail {
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kv****'),
  data?: string(name='Data', example='{     "name": "SparkPi",     "file": "local:///tmp/spark-examples.jar",     "className": "org.apache.spark.examples.SparkPi",     "args": [         "1000000"     ],     "conf": {         "spark.driver.resourceSpec": "small",         "spark.executor.instances": 1,         "spark.executor.resourceSpec": "small"     } }'),
  durationInMillis?: long(name='DurationInMillis', example='100'),
  estimateExecutionCpuTimeInSeconds?: long(name='EstimateExecutionCpuTimeInSeconds', example='100'),
  lastAttemptId?: string(name='LastAttemptId', example='s202204291426hzpre60cfa*****-0003'),
  lastUpdatedTimeInMillis?: long(name='LastUpdatedTimeInMillis', example='1651213645200'),
  logRootPath?: string(name='LogRootPath', example='oss://<bucket-name>/logs/driver'),
  resourceGroupName?: string(name='ResourceGroupName', example='spark-rg'),
  startedTimeInMillis?: long(name='StartedTimeInMillis', example='1651213645010'),
  submittedTimeInMillis?: long(name='SubmittedTimeInMillis', example='1651213645000'),
  terminatedTimeInMillis?: long(name='TerminatedTimeInMillis', example='1651213645300'),
  webUiAddress?: string(name='WebUiAddress', example='https://sparkui.aliyuncs.com/token=xxx'),
}

model FieldSchemaModel {
  autoIncrement?: boolean(name='AutoIncrement'),
  columnRawName?: string(name='ColumnRawName'),
  comment?: string(name='Comment'),
  compressFloatUseShort?: boolean(name='CompressFloatUseShort'),
  compression?: string(name='Compression'),
  createTime?: string(name='CreateTime'),
  dataType?: string(name='DataType'),
  databaseName?: string(name='DatabaseName'),
  defaultValue?: string(name='DefaultValue'),
  delimiter?: string(name='Delimiter'),
  encode?: string(name='Encode'),
  isPartitionKey?: boolean(name='IsPartitionKey'),
  mappedName?: string(name='MappedName'),
  name?: string(name='Name'),
  nullable?: boolean(name='Nullable'),
  onUpdate?: string(name='OnUpdate'),
  ordinalPosition?: long(name='OrdinalPosition'),
  physicalColumnName?: string(name='PhysicalColumnName'),
  pkPosition?: long(name='PkPosition'),
  precision?: long(name='Precision'),
  primarykey?: boolean(name='Primarykey'),
  scale?: long(name='Scale'),
  tableName?: string(name='TableName'),
  tokenizer?: string(name='Tokenizer'),
  type?: string(name='Type'),
  updateTime?: string(name='UpdateTime'),
  valueType?: string(name='ValueType'),
}

model Filters {
  appIdRegex?: string(name='AppIdRegex'),
  appNameRegex?: string(name='AppNameRegex'),
  appState?: string(name='AppState'),
  appType?: string(name='AppType'),
  executionTimeRange?: {
    maxTimeInSeconds?: long(name='MaxTimeInSeconds'),
    minTimeInSeconds?: long(name='MinTimeInSeconds'),
  }(name='ExecutionTimeRange'),
  submitTimeRange?: {
    maxTimeInMills?: long(name='MaxTimeInMills'),
    minTimeInMills?: long(name='MinTimeInMills'),
  }(name='SubmitTimeRange'),
  termiatedTimeRange?: {
    maxTimeInMills?: long(name='MaxTimeInMills'),
    minTimeInMills?: long(name='MinTimeInMills'),
  }(name='TermiatedTimeRange'),
}

model LogAnalyzeResult {
  appErrorAdvice?: string(name='AppErrorAdvice'),
  appErrorCode?: string(name='AppErrorCode', example='EXCEEDED_QUOTA'),
  appErrorLog?: string(name='AppErrorLog', example='exception: xxxx'),
}

model SerDeInfoModel {
  name?: string(name='Name'),
  parameters?: map[string]string(name='Parameters'),
  serDeId?: long(name='SerDeId'),
  serializationLib?: string(name='SerializationLib'),
}

model SparkAnalyzeLogTask {
  DBClusterId?: string(name='DBClusterId', example='amv-adbxxxxx'),
  result?: LogAnalyzeResult(name='Result'),
  ruleMatched?: boolean(name='RuleMatched', example='true'),
  startedTimeInMillis?: long(name='StartedTimeInMillis', example='1672123543000'),
  submittedTimeInMillis?: long(name='SubmittedTimeInMillis', example='1672123543000'),
  taskErrMsg?: string(name='TaskErrMsg', example='Driver log not found'),
  taskId?: long(name='TaskId', example='10'),
  taskState?: string(name='TaskState', example='WAITING'),
  terminatedTimeInMillis?: long(name='TerminatedTimeInMillis', example='1672123543000'),
  userId?: long(name='UserId', example='13719918xxx'),
}

model SparkAppInfo {
  appId?: string(name='AppId', example='s202207151211hz0cb4*****'),
  appName?: string(name='AppName', example='Spark Test'),
  DBClusterId?: string(name='DBClusterId', example='amv-23xxxx'),
  detail?: Detail(name='Detail'),
  message?: string(name='Message', example='WARN: Disk is full'),
  state?: string(name='State', example='FAILED'),
}

model SparkAttemptInfo {
  attemptId?: string(name='AttemptId', example='s202207151211hz0cb4200*****-0001'),
  detail?: Detail(name='Detail'),
  message?: string(name='Message', example='WARN: Disk is full'),
  state?: string(name='State', example='RUNNING'),
}

model SparkSession {
  active?: string(name='Active', example='true'),
  aliyunUid?: long(name='AliyunUid', example='11123123'),
  sessionId?: long(name='SessionId', example='15'),
  state?: string(name='State', example='idle'),
}

model Statement {
  aliyunUid?: long(name='AliyunUid', example='1111111'),
  code?: string(name='Code', example='SELECT * FROM table'),
  codeState?: string(name='CodeState', example='Waiting'),
  codeType?: string(name='CodeType', example='SQL'),
  endTime?: long(name='EndTime', example='1658987911000'),
  error?: string(name='Error', example='Disk is full'),
  haveRows?: boolean(name='HaveRows', example='true'),
  output?: string(name='Output', example='Spark is running, the ouput is...'),
  resourceGroup?: string(name='ResourceGroup', example='rg1'),
  sessionId?: long(name='SessionId', example='10'),
  startTime?: long(name='StartTime', example='1658977911000'),
  statementId?: long(name='StatementId', example='100'),
  totalCount?: long(name='TotalCount', example='1000'),
}

model StatementInfo {
  code?: string(name='Code'),
  completedTimeInMills?: long(name='CompletedTimeInMills'),
  output?: string(name='Output'),
  process?: float(name='Process'),
  startedTimeInMills?: long(name='StartedTimeInMills'),
  state?: string(name='State'),
  statementId?: string(name='StatementId'),
}

model StorageDescriptorModel {
  compressed?: boolean(name='Compressed'),
  inputFormat?: string(name='InputFormat'),
  location?: string(name='Location'),
  numBuckets?: long(name='NumBuckets'),
  outputFormat?: string(name='OutputFormat'),
  parameters?: map[string]string(name='Parameters'),
  sdId?: long(name='SdId'),
  serDeInfo?: SerDeInfoModel(name='SerDeInfo'),
  storedAsSubDirectories?: boolean(name='StoredAsSubDirectories'),
}

model TableDetailModel {
  catalog?: string(name='Catalog'),
  columns?: [
    ColDetailModel
  ](name='Columns'),
  createTime?: string(name='CreateTime'),
  description?: string(name='Description'),
  owner?: string(name='Owner'),
  schemaName?: string(name='SchemaName'),
  tableName?: string(name='TableName'),
  tableType?: string(name='TableType'),
  updateTime?: string(name='UpdateTime'),
}

model TableModel {
  archiveType?: string(name='ArchiveType'),
  blockSize?: long(name='BlockSize'),
  bucket?: long(name='Bucket'),
  bucketCount?: long(name='BucketCount'),
  cols?: [
    FieldSchemaModel
  ](name='Cols'),
  comment?: string(name='Comment'),
  compression?: string(name='Compression'),
  createTime?: string(name='CreateTime'),
  currentVersion?: long(name='CurrentVersion'),
  dbName?: string(name='DbName'),
  dictEncode?: boolean(name='DictEncode'),
  distributeColumns?: [
    FieldSchemaModel
  ](name='DistributeColumns'),
  distributeType?: string(name='DistributeType'),
  enableDfs?: boolean(name='EnableDfs'),
  hotPartitionCount?: long(name='HotPartitionCount'),
  indexes?: [
    CstoreIndexModel
  ](name='Indexes'),
  isAllIndex?: boolean(name='IsAllIndex'),
  isFulltextDict?: boolean(name='IsFulltextDict'),
  maxColumnId?: long(name='MaxColumnId'),
  parameters?: map[string]string(name='Parameters'),
  partitionColumn?: string(name='PartitionColumn'),
  partitionCount?: long(name='PartitionCount'),
  partitionKeys?: [
    FieldSchemaModel
  ](name='PartitionKeys'),
  partitionType?: string(name='PartitionType'),
  physicalDatabaseName?: string(name='PhysicalDatabaseName'),
  physicalTableName?: string(name='PhysicalTableName'),
  previousVersion?: long(name='PreviousVersion'),
  rawTableName?: string(name='RawTableName'),
  routeColumns?: [
    FieldSchemaModel
  ](name='RouteColumns'),
  routeEffectiveColumn?: FieldSchemaModel(name='RouteEffectiveColumn'),
  routeType?: string(name='RouteType'),
  rtEngineType?: string(name='RtEngineType'),
  rtIndexAll?: boolean(name='RtIndexAll'),
  rtModeType?: string(name='RtModeType'),
  sd?: StorageDescriptorModel(name='Sd'),
  storagePolicy?: string(name='StoragePolicy'),
  subpartitionColumn?: string(name='SubpartitionColumn'),
  subpartitionCount?: long(name='SubpartitionCount'),
  subpartitionType?: string(name='SubpartitionType'),
  tableEngineName?: string(name='TableEngineName'),
  tableName?: string(name='TableName'),
  tableType?: string(name='TableType'),
  tblId?: long(name='TblId'),
  temporary?: boolean(name='Temporary'),
  updateTime?: string(name='UpdateTime'),
  viewExpandedText?: string(name='ViewExpandedText'),
  viewOriginalText?: string(name='ViewOriginalText'),
  viewSecurityMode?: string(name='ViewSecurityMode'),
}

model TableSummaryModel {
  createTime?: string(name='CreateTime'),
  description?: string(name='Description'),
  owner?: string(name='Owner'),
  SQL?: string(name='SQL'),
  schemaName?: string(name='SchemaName'),
  tableName?: string(name='TableName'),
  tableSize?: long(name='TableSize'),
  tableType?: string(name='TableType'),
  updateTime?: string(name='UpdateTime'),
}

model AllocateClusterPublicConnectionRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix', example='test12'),
  DBClusterId?: string(name='DBClusterId', example='amv-bp1z5d2q71is2****'),
}

model AllocateClusterPublicConnectionResponseBody = {
  requestId?: string(name='RequestId', example='868EF07F-D0B2-5043-B092-0C14CD00B65A'),
}

model AllocateClusterPublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateClusterPublicConnectionResponseBody(name='body'),
}

async function allocateClusterPublicConnectionWithOptions(request: AllocateClusterPublicConnectionRequest, runtime: Util.RuntimeOptions): AllocateClusterPublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionStringPrefix)) {
    query['ConnectionStringPrefix'] = request.connectionStringPrefix;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateClusterPublicConnection',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocateClusterPublicConnection(request: AllocateClusterPublicConnectionRequest): AllocateClusterPublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateClusterPublicConnectionWithOptions(request, runtime);
}

model BindAccountRequest {
  accountName?: string(name='AccountName', example='test_accout'),
  DBClusterId?: string(name='DBClusterId', example='amv-wz99d9nh532****'),
  ramUser?: string(name='RamUser', example='1444832459****'),
}

model BindAccountResponseBody = {
  requestId?: string(name='RequestId', example='DFF27323-3868-5F8A-917D-5D1D06B6BC0D'),
}

model BindAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindAccountResponseBody(name='body'),
}

async function bindAccountWithOptions(request: BindAccountRequest, runtime: Util.RuntimeOptions): BindAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.ramUser)) {
    query['RamUser'] = request.ramUser;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindAccount',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindAccount(request: BindAccountRequest): BindAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindAccountWithOptions(request, runtime);
}

model CheckBindRamUserRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model CheckBindRamUserResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model CheckBindRamUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckBindRamUserResponseBody(name='body'),
}

async function checkBindRamUserWithOptions(request: CheckBindRamUserRequest, runtime: Util.RuntimeOptions): CheckBindRamUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckBindRamUser',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkBindRamUser(request: CheckBindRamUserRequest): CheckBindRamUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkBindRamUserWithOptions(request, runtime);
}

model CreateAccountRequest {
  accountDescription?: string(name='AccountDescription'),
  accountName?: string(name='AccountName', example='test_accout'),
  accountPassword?: string(name='AccountPassword', example='Test_accout1'),
  accountType?: string(name='AccountType', example='Normal'),
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
}

model CreateAccountResponseBody = {
  requestId?: string(name='RequestId', example='2FED790E-FB61-4721-8C1C-07C627FA5A19'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccountWithOptions(request: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountDescription)) {
    query['AccountDescription'] = request.accountDescription;
  }
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.accountType)) {
    query['AccountType'] = request.accountType;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAccount',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model CreateDBClusterRequest {
  computeResource?: string(name='ComputeResource', example='16ACU'),
  DBClusterDescription?: string(name='DBClusterDescription', example='test'),
  DBClusterNetworkType?: string(name='DBClusterNetworkType', example='VPC'),
  DBClusterVersion?: string(name='DBClusterVersion', example='5.0'),
  enableDefaultResourcePool?: boolean(name='EnableDefaultResourcePool', example='true'),
  payType?: string(name='PayType', example='Prepaid'),
  period?: string(name='Period', example='Month'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  storageResource?: string(name='StorageResource', example='24ACU'),
  usedTime?: string(name='UsedTime', example='3'),
  VPCId?: string(name='VPCId', example='vpc-bp1at5ze0t5u3xtqn****'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1aadw9k19x6cis9****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
}

model CreateDBClusterResponseBody = {
  DBClusterId?: string(name='DBClusterId', example='amv-bp1r053byu48p****'),
  orderId?: string(name='OrderId', example='202353278****'),
  requestId?: string(name='RequestId', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-4690g37929****'),
}

model CreateDBClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDBClusterResponseBody(name='body'),
}

async function createDBClusterWithOptions(request: CreateDBClusterRequest, runtime: Util.RuntimeOptions): CreateDBClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.computeResource)) {
    query['ComputeResource'] = request.computeResource;
  }
  if (!Util.isUnset(request.DBClusterDescription)) {
    query['DBClusterDescription'] = request.DBClusterDescription;
  }
  if (!Util.isUnset(request.DBClusterNetworkType)) {
    query['DBClusterNetworkType'] = request.DBClusterNetworkType;
  }
  if (!Util.isUnset(request.DBClusterVersion)) {
    query['DBClusterVersion'] = request.DBClusterVersion;
  }
  if (!Util.isUnset(request.enableDefaultResourcePool)) {
    query['EnableDefaultResourcePool'] = request.enableDefaultResourcePool;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.storageResource)) {
    query['StorageResource'] = request.storageResource;
  }
  if (!Util.isUnset(request.usedTime)) {
    query['UsedTime'] = request.usedTime;
  }
  if (!Util.isUnset(request.VPCId)) {
    query['VPCId'] = request.VPCId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDBCluster',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDBCluster(request: CreateDBClusterRequest): CreateDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBClusterWithOptions(request, runtime);
}

model CreateDBResourceGroupRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
  groupName?: string(name='GroupName', example='test_group'),
  groupType?: string(name='GroupType', example='Job'),
  maxComputeResource?: string(name='MaxComputeResource', example='48'),
  minComputeResource?: string(name='MinComputeResource', example='0'),
}

model CreateDBResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='A94B6C02-7BD4-5D67-9776-3AC8317E8DD5'),
}

model CreateDBResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDBResourceGroupResponseBody(name='body'),
}

async function createDBResourceGroupWithOptions(request: CreateDBResourceGroupRequest, runtime: Util.RuntimeOptions): CreateDBResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.maxComputeResource)) {
    query['MaxComputeResource'] = request.maxComputeResource;
  }
  if (!Util.isUnset(request.minComputeResource)) {
    query['MinComputeResource'] = request.minComputeResource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDBResourceGroup',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDBResourceGroup(request: CreateDBResourceGroupRequest): CreateDBResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBResourceGroupWithOptions(request, runtime);
}

model CreateOssSubDirectoryRequest {
  DBClusterId?: string(name='DBClusterId'),
  path?: string(name='Path'),
}

model CreateOssSubDirectoryResponseBody = {
  data?: {
    clientCRC?: long(name='ClientCRC'),
    ETag?: string(name='ETag'),
    requestId?: string(name='RequestId'),
    serverCRC?: long(name='ServerCRC'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateOssSubDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOssSubDirectoryResponseBody(name='body'),
}

async function createOssSubDirectoryWithOptions(request: CreateOssSubDirectoryRequest, runtime: Util.RuntimeOptions): CreateOssSubDirectoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.path)) {
    body['Path'] = request.path;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOssSubDirectory',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOssSubDirectory(request: CreateOssSubDirectoryRequest): CreateOssSubDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOssSubDirectoryWithOptions(request, runtime);
}

model CreateSparkTemplateRequest {
  appType?: string(name='AppType', example='SQL'),
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
  name?: string(name='Name', example='batchfile'),
  parentId?: long(name='ParentId', example='10'),
  type?: string(name='Type', example='file'),
}

model CreateSparkTemplateResponseBody = {
  data?: {
    succeeded?: boolean(name='Succeeded', example='True'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model CreateSparkTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSparkTemplateResponseBody(name='body'),
}

async function createSparkTemplateWithOptions(request: CreateSparkTemplateRequest, runtime: Util.RuntimeOptions): CreateSparkTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentId)) {
    body['ParentId'] = request.parentId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSparkTemplate',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSparkTemplate(request: CreateSparkTemplateRequest): CreateSparkTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSparkTemplateWithOptions(request, runtime);
}

model DeleteAccountRequest {
  accountName?: string(name='AccountName', example='test_accout'),
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
}

model DeleteAccountResponseBody = {
  requestId?: string(name='RequestId', example='2FED790E-FB61-4721-8C1C-07C627FA5A19'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccountWithOptions(request: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAccount',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model DeleteDBClusterRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-bp1r053byu48p****'),
}

model DeleteDBClusterResponseBody = {
  DBClusterId?: string(name='DBClusterId', example='amv-bp1r053byu48p****'),
  requestId?: string(name='RequestId', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DeleteDBClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDBClusterResponseBody(name='body'),
}

async function deleteDBClusterWithOptions(request: DeleteDBClusterRequest, runtime: Util.RuntimeOptions): DeleteDBClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDBCluster',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDBCluster(request: DeleteDBClusterRequest): DeleteDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBClusterWithOptions(request, runtime);
}

model DeleteDBResourceGroupRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
  groupName?: string(name='GroupName', example='test_group'),
}

model DeleteDBResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='A94B6C02-7BD4-5D67-9776-3AC8317E8DD3'),
}

model DeleteDBResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDBResourceGroupResponseBody(name='body'),
}

async function deleteDBResourceGroupWithOptions(request: DeleteDBResourceGroupRequest, runtime: Util.RuntimeOptions): DeleteDBResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDBResourceGroup',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDBResourceGroup(request: DeleteDBResourceGroupRequest): DeleteDBResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBResourceGroupWithOptions(request, runtime);
}

model DeleteProcessInstanceRequest {
  DBClusterId?: string(name='DBClusterId'),
  processInstanceId?: long(name='ProcessInstanceId'),
  projectCode?: long(name='ProjectCode'),
  regionId?: string(name='RegionId'),
}

model DeleteProcessInstanceResponseBody = {
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteProcessInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProcessInstanceResponseBody(name='body'),
}

async function deleteProcessInstanceWithOptions(request: DeleteProcessInstanceRequest, runtime: Util.RuntimeOptions): DeleteProcessInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.processInstanceId)) {
    query['ProcessInstanceId'] = request.processInstanceId;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProcessInstance',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProcessInstance(request: DeleteProcessInstanceRequest): DeleteProcessInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProcessInstanceWithOptions(request, runtime);
}

model DeleteSparkTemplateRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
  id?: long(name='Id', example='725204'),
}

model DeleteSparkTemplateResponseBody = {
  data?: {
    succeeded?: boolean(name='Succeeded', example='True'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model DeleteSparkTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSparkTemplateResponseBody(name='body'),
}

async function deleteSparkTemplateWithOptions(request: DeleteSparkTemplateRequest, runtime: Util.RuntimeOptions): DeleteSparkTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSparkTemplate',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSparkTemplate(request: DeleteSparkTemplateRequest): DeleteSparkTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSparkTemplateWithOptions(request, runtime);
}

model DeleteSparkTemplateFileRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-bp1y769u11748****'),
  id?: long(name='Id', example='284'),
}

model DeleteSparkTemplateFileResponseBody = {
  data?: {
    succeeded?: boolean(name='Succeeded', example='true'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C3A9594F-1D40-4472-A96C-8FB8AA20D38C'),
}

model DeleteSparkTemplateFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSparkTemplateFileResponseBody(name='body'),
}

async function deleteSparkTemplateFileWithOptions(request: DeleteSparkTemplateFileRequest, runtime: Util.RuntimeOptions): DeleteSparkTemplateFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSparkTemplateFile',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSparkTemplateFile(request: DeleteSparkTemplateFileRequest): DeleteSparkTemplateFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSparkTemplateFileWithOptions(request, runtime);
}

model DescribeAccountsRequest {
  accountName?: string(name='AccountName', example='test_accout'),
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
  ownerId?: string(name='OwnerId'),
}

model DescribeAccountsResponseBody = {
  accountList?: {
    DBAccount?: [ 
    {
      accountDescription?: string(name='AccountDescription'),
      accountName?: string(name='AccountName', example='test_accout'),
      accountStatus?: string(name='AccountStatus', example='Available'),
      accountType?: string(name='AccountType', example='Normal'),
      ramUsers?: string(name='RamUsers', example='1958134230****'),
    }
  ](name='DBAccount')
  }(name='AccountList'),
  requestId?: string(name='RequestId', example='9CCFAAB4-97B7-5800-B9F2-685EB596E3EF'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccountsResponseBody(name='body'),
}

async function describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: Util.RuntimeOptions): DescribeAccountsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccounts',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountsWithOptions(request, runtime);
}

model DescribeAdbMySqlColumnsRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
  schema?: string(name='Schema'),
  tableName?: string(name='TableName'),
}

model DescribeAdbMySqlColumnsResponseBody = {
  columns?: [ 
    {
      comment?: string(name='Comment'),
      name?: string(name='Name'),
      type?: string(name='Type'),
    }
  ](name='Columns'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  schema?: string(name='Schema'),
  success?: boolean(name='Success'),
  tableName?: string(name='TableName'),
}

model DescribeAdbMySqlColumnsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAdbMySqlColumnsResponseBody(name='body'),
}

async function describeAdbMySqlColumnsWithOptions(request: DescribeAdbMySqlColumnsRequest, runtime: Util.RuntimeOptions): DescribeAdbMySqlColumnsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAdbMySqlColumns',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAdbMySqlColumns(request: DescribeAdbMySqlColumnsRequest): DescribeAdbMySqlColumnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAdbMySqlColumnsWithOptions(request, runtime);
}

model DescribeAdbMySqlSchemasRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-bp1r053byu48p****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeAdbMySqlSchemasResponseBody = {
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
  schemas?: [ string ](name='Schemas'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAdbMySqlSchemasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAdbMySqlSchemasResponseBody(name='body'),
}

async function describeAdbMySqlSchemasWithOptions(request: DescribeAdbMySqlSchemasRequest, runtime: Util.RuntimeOptions): DescribeAdbMySqlSchemasResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAdbMySqlSchemas',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAdbMySqlSchemas(request: DescribeAdbMySqlSchemasRequest): DescribeAdbMySqlSchemasResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAdbMySqlSchemasWithOptions(request, runtime);
}

model DescribeAdbMySqlTablesRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  schema?: string(name='Schema', example='adb_demo'),
}

model DescribeAdbMySqlTablesResponseBody = {
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='7A7D49E3-5585-5DF8-B62C-75C46B4991DC'),
  schema?: string(name='Schema', example='adb_demo'),
  success?: boolean(name='Success', example='true'),
  tables?: [ string ](name='Tables'),
}

model DescribeAdbMySqlTablesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAdbMySqlTablesResponseBody(name='body'),
}

async function describeAdbMySqlTablesWithOptions(request: DescribeAdbMySqlTablesRequest, runtime: Util.RuntimeOptions): DescribeAdbMySqlTablesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.schema)) {
    query['Schema'] = request.schema;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAdbMySqlTables',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAdbMySqlTables(request: DescribeAdbMySqlTablesRequest): DescribeAdbMySqlTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAdbMySqlTablesWithOptions(request, runtime);
}

model DescribeApsActionLogsRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-bp1r053byu48p****'),
  endTime?: string(name='EndTime', example='2023-02-11T09:30:00Z'),
  keyword?: string(name='Keyword', example='table_test'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  proxyUser?: string(name='ProxyUser'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  stage?: string(name='Stage', example='FullDataSync'),
  startTime?: string(name='StartTime', example='2023-02-11T08:30:00Z'),
  state?: string(name='State', example='INFO,WARN,ERROR'),
  workloadId?: string(name='WorkloadId', example='aps-hz109vpvt4fg8528d****'),
}

model DescribeApsActionLogsResponseBody = {
  actionLogs?: [ 
    {
      context?: string(name='Context', example='DDL migration job finished'),
      stage?: string(name='Stage', example='FullDataSync'),
      state?: string(name='State', example='INFO,WARN,ERROR'),
      time?: string(name='Time', example='2023-02-01T05:46:30Z'),
    }
  ](name='ActionLogs'),
  DBClusterId?: string(name='DBClusterId', example='amv-bp1r053byu48p****'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: string(name='PageSize', example='30'),
  requestId?: string(name='RequestId', example='A5EDBA27-AF3E-5966-9503-FD1557E19167'),
  totalCount?: string(name='TotalCount', example='3'),
  workloadId?: string(name='WorkloadId', example='aps-hz109vpvt4fg8528d****'),
}

model DescribeApsActionLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApsActionLogsResponseBody(name='body'),
}

async function describeApsActionLogsWithOptions(request: DescribeApsActionLogsRequest, runtime: Util.RuntimeOptions): DescribeApsActionLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.proxyUser)) {
    query['ProxyUser'] = request.proxyUser;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.stage)) {
    query['Stage'] = request.stage;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.state)) {
    query['State'] = request.state;
  }
  if (!Util.isUnset(request.workloadId)) {
    query['WorkloadId'] = request.workloadId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApsActionLogs',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApsActionLogs(request: DescribeApsActionLogsRequest): DescribeApsActionLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApsActionLogsWithOptions(request, runtime);
}

model DescribeApsResourceGroupsRequest {
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeApsResourceGroupsResponseBody = {
  data?: {
    resourceGroups?: [ 
      {
        available?: boolean(name='Available'),
        cuOptions?: [ long ](name='CuOptions'),
        groupName?: string(name='GroupName'),
        groupType?: string(name='GroupType'),
        maxComputeResource?: int32(name='MaxComputeResource'),
        minComputeResource?: int32(name='MinComputeResource'),
      }
    ](name='ResourceGroups'),
    step?: long(name='Step'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeApsResourceGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApsResourceGroupsResponseBody(name='body'),
}

async function describeApsResourceGroupsWithOptions(request: DescribeApsResourceGroupsRequest, runtime: Util.RuntimeOptions): DescribeApsResourceGroupsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApsResourceGroups',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApsResourceGroups(request: DescribeApsResourceGroupsRequest): DescribeApsResourceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApsResourceGroupsWithOptions(request, runtime);
}

model DescribeAuditLogConfigRequest {
  DBClusterId?: string(name='DBClusterId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeAuditLogConfigResponseBody = {
  auditLogStatus?: string(name='AuditLogStatus'),
  DBClusterId?: string(name='DBClusterId'),
  requestId?: string(name='RequestId'),
}

model DescribeAuditLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAuditLogConfigResponseBody(name='body'),
}

async function describeAuditLogConfigWithOptions(request: DescribeAuditLogConfigRequest, runtime: Util.RuntimeOptions): DescribeAuditLogConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAuditLogConfig',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAuditLogConfig(request: DescribeAuditLogConfigRequest): DescribeAuditLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuditLogConfigWithOptions(request, runtime);
}

model DescribeAuditLogRecordsRequest {
  DBClusterId?: string(name='DBClusterId'),
  DBName?: string(name='DBName'),
  endTime?: string(name='EndTime'),
  hostAddress?: string(name='HostAddress'),
  order?: string(name='Order'),
  orderType?: string(name='OrderType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  proxyUser?: string(name='ProxyUser'),
  queryKeyword?: string(name='QueryKeyword'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sqlType?: string(name='SqlType'),
  startTime?: string(name='StartTime'),
  succeed?: string(name='Succeed'),
  user?: string(name='User'),
}

model DescribeAuditLogRecordsResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  items?: [ 
    {
      connId?: string(name='ConnId'),
      DBName?: string(name='DBName'),
      executeTime?: string(name='ExecuteTime'),
      hostAddress?: string(name='HostAddress'),
      processID?: string(name='ProcessID'),
      SQLText?: string(name='SQLText'),
      SQLType?: string(name='SQLType'),
      succeed?: string(name='Succeed'),
      totalTime?: string(name='TotalTime'),
      user?: string(name='User'),
    }
  ](name='Items'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model DescribeAuditLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAuditLogRecordsResponseBody(name='body'),
}

async function describeAuditLogRecordsWithOptions(request: DescribeAuditLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeAuditLogRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.DBName)) {
    query['DBName'] = request.DBName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.hostAddress)) {
    query['HostAddress'] = request.hostAddress;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.proxyUser)) {
    query['ProxyUser'] = request.proxyUser;
  }
  if (!Util.isUnset(request.queryKeyword)) {
    query['QueryKeyword'] = request.queryKeyword;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sqlType)) {
    query['SqlType'] = request.sqlType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.succeed)) {
    query['Succeed'] = request.succeed;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAuditLogRecords',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAuditLogRecords(request: DescribeAuditLogRecordsRequest): DescribeAuditLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuditLogRecordsWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest {
  DBClusterId?: string(name='DBClusterId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeBackupPolicyResponseBody = {
  backupRetentionPeriod?: int32(name='BackupRetentionPeriod'),
  enableBackupLog?: string(name='EnableBackupLog'),
  logBackupRetentionPeriod?: int32(name='LogBackupRetentionPeriod'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupPolicy',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model DescribeBackupsRequest {
  backupId?: string(name='BackupId'),
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeBackupsResponseBody = {
  items?: {
    backup?: [ 
    {
      backupEndTime?: string(name='BackupEndTime'),
      backupId?: string(name='BackupId'),
      backupMethod?: string(name='BackupMethod'),
      backupSize?: int32(name='BackupSize'),
      backupStartTime?: string(name='BackupStartTime'),
      backupType?: string(name='BackupType'),
      DBClusterId?: string(name='DBClusterId'),
    }
  ](name='Backup')
  }(name='Items'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model DescribeBackupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupsResponseBody(name='body'),
}

async function describeBackupsWithOptions(request: DescribeBackupsRequest, runtime: Util.RuntimeOptions): DescribeBackupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupId)) {
    query['BackupId'] = request.backupId;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackups',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackups(request: DescribeBackupsRequest): DescribeBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupsWithOptions(request, runtime);
}

model DescribeClusterAccessWhiteListRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
}

model DescribeClusterAccessWhiteListResponseBody = {
  items?: {
    IPArray?: [ 
    {
      DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute', example='hidden'),
      DBClusterIPArrayName?: string(name='DBClusterIPArrayName', example='test'),
      securityIPList?: string(name='SecurityIPList', example='127.0.xx.xx'),
    }
  ](name='IPArray')
  }(name='Items'),
  requestId?: string(name='RequestId', example='370D09FD-442A-5225-AAD3-7362CAE39177'),
}

model DescribeClusterAccessWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterAccessWhiteListResponseBody(name='body'),
}

async function describeClusterAccessWhiteListWithOptions(request: DescribeClusterAccessWhiteListRequest, runtime: Util.RuntimeOptions): DescribeClusterAccessWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterAccessWhiteList',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterAccessWhiteList(request: DescribeClusterAccessWhiteListRequest): DescribeClusterAccessWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterAccessWhiteListWithOptions(request, runtime);
}

model DescribeClusterNetInfoRequest {
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeClusterNetInfoResponseBody = {
  clusterNetworkType?: string(name='ClusterNetworkType'),
  items?: {
    address?: [ 
    {
      connectionString?: string(name='ConnectionString'),
      connectionStringPrefix?: string(name='ConnectionStringPrefix'),
      IPAddress?: string(name='IPAddress'),
      netType?: string(name='NetType'),
      port?: string(name='Port'),
      VPCId?: string(name='VPCId'),
      vSwitchId?: string(name='VSwitchId'),
    }
  ](name='Address')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeClusterNetInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterNetInfoResponseBody(name='body'),
}

async function describeClusterNetInfoWithOptions(request: DescribeClusterNetInfoRequest, runtime: Util.RuntimeOptions): DescribeClusterNetInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterNetInfo',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterNetInfo(request: DescribeClusterNetInfoRequest): DescribeClusterNetInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterNetInfoWithOptions(request, runtime);
}

model DescribeDBClusterAttributeRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-wz9509beptiz****'),
}

model DescribeDBClusterAttributeResponseBody = {
  items?: {
    DBCluster?: [ 
    {
      commodityCode?: string(name='CommodityCode', example='ads_pre'),
      computeResource?: string(name='ComputeResource', example='16ACU'),
      computeResourceTotal?: string(name='ComputeResourceTotal'),
      connectionString?: string(name='ConnectionString', example='amv-wz9509beptiz****.ads.aliyuncs.com'),
      creationTime?: string(name='CreationTime', example='2022-07-01T09:50:18Z'),
      DBClusterDescription?: string(name='DBClusterDescription', example='adb_test'),
      DBClusterId?: string(name='DBClusterId', example='amv-wz9509beptiz****'),
      DBClusterNetworkType?: string(name='DBClusterNetworkType', example='VPC'),
      DBClusterStatus?: string(name='DBClusterStatus', example='Running'),
      DBClusterType?: string(name='DBClusterType', example='Common'),
      DBVersion?: string(name='DBVersion', example='5.0'),
      engine?: string(name='Engine', example='AnalyticDB'),
      engineVersion?: string(name='EngineVersion', example='3.1.16'),
      expireTime?: string(name='ExpireTime', example='2022-10-01T09:50:18Z'),
      expired?: string(name='Expired', example='false'),
      lockMode?: string(name='LockMode', example='ManualLock'),
      lockReason?: string(name='LockReason', example='instance_expire'),
      maintainTime?: string(name='MaintainTime', example='04:00Z-05:00Z'),
      mode?: string(name='Mode', example='flexible'),
      payType?: string(name='PayType', example='Prepaid'),
      port?: int32(name='Port', example='3306'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      reservedACU?: string(name='ReservedACU', example='24ACU'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmyiu4ekp****'),
      storageResource?: string(name='StorageResource', example='24ACU'),
      storageResourceTotal?: string(name='StorageResourceTotal'),
      userENIStatus?: boolean(name='UserENIStatus', example='false'),
      VPCId?: string(name='VPCId', example='vpc-bp13h7uzhulpu****'),
      vSwitchId?: string(name='VSwitchId', example='vsw-uf629gydd54ld****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
    }
  ](name='DBCluster')
  }(name='Items'),
  requestId?: string(name='RequestId', example='A5C433C2-001F-58E3-99F5-3274C14DF8BD'),
}

model DescribeDBClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBClusterAttributeResponseBody(name='body'),
}

async function describeDBClusterAttributeWithOptions(request: DescribeDBClusterAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBClusterAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBClusterAttribute',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBClusterAttribute(request: DescribeDBClusterAttributeRequest): DescribeDBClusterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterAttributeWithOptions(request, runtime);
}

model DescribeDBClusterForecastRequest {
  DBClusterId?: string(name='DBClusterId'),
  metricType?: string(name='MetricType'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
}

model DescribeDBClusterForecastResponseBody = {
  performances?: [ 
    {
      key?: string(name='Key'),
      series?: [ 
        {
          name?: string(name='Name'),
          values?: string(name='Values'),
        }
      ](name='Series'),
      unit?: string(name='Unit'),
    }
  ](name='Performances'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterForecastResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBClusterForecastResponseBody(name='body'),
}

async function describeDBClusterForecastWithOptions(request: DescribeDBClusterForecastRequest, runtime: Util.RuntimeOptions): DescribeDBClusterForecastResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.metricType)) {
    query['MetricType'] = request.metricType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBClusterForecast',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBClusterForecast(request: DescribeDBClusterForecastRequest): DescribeDBClusterForecastResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterForecastWithOptions(request, runtime);
}

model DescribeDBClusterHealthStatusRequest {
  DBClusterId?: string(name='DBClusterId'),
  regionId?: string(name='RegionId'),
}

model DescribeDBClusterHealthStatusResponseBody = {
  CS?: {
    activeCount?: long(name='ActiveCount'),
    expectedCount?: long(name='ExpectedCount'),
    riskCount?: long(name='RiskCount'),
    status?: string(name='Status'),
    unavailableCount?: long(name='UnavailableCount'),
  }(name='CS'),
  executor?: {
    activeCount?: long(name='ActiveCount'),
    expectedCount?: long(name='ExpectedCount'),
    riskCount?: long(name='RiskCount'),
    status?: string(name='Status'),
    unavailableCount?: long(name='UnavailableCount'),
  }(name='Executor'),
  instanceStatus?: string(name='InstanceStatus'),
  requestId?: string(name='RequestId'),
  worker?: {
    activeCount?: long(name='ActiveCount'),
    expectedCount?: long(name='ExpectedCount'),
    riskCount?: long(name='RiskCount'),
    status?: string(name='Status'),
    unavailableCount?: long(name='UnavailableCount'),
  }(name='Worker'),
}

model DescribeDBClusterHealthStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBClusterHealthStatusResponseBody(name='body'),
}

async function describeDBClusterHealthStatusWithOptions(request: DescribeDBClusterHealthStatusRequest, runtime: Util.RuntimeOptions): DescribeDBClusterHealthStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBClusterHealthStatus',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBClusterHealthStatus(request: DescribeDBClusterHealthStatusRequest): DescribeDBClusterHealthStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterHealthStatusWithOptions(request, runtime);
}

model DescribeDBClusterPerformanceRequest {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  key?: string(name='Key'),
  regionId?: string(name='RegionId'),
  resourcePools?: string(name='ResourcePools'),
  startTime?: string(name='StartTime'),
}

model DescribeDBClusterPerformanceResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  performances?: [ 
    {
      key?: string(name='Key'),
      series?: [ 
        {
          name?: string(name='Name'),
          tags?: string(name='Tags'),
          values?: [ string ](name='Values'),
        }
      ](name='Series'),
      unit?: string(name='Unit'),
    }
  ](name='Performances'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDBClusterPerformanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBClusterPerformanceResponseBody(name='body'),
}

async function describeDBClusterPerformanceWithOptions(request: DescribeDBClusterPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBClusterPerformanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourcePools)) {
    query['ResourcePools'] = request.resourcePools;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBClusterPerformance',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBClusterPerformance(request: DescribeDBClusterPerformanceRequest): DescribeDBClusterPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterPerformanceWithOptions(request, runtime);
}

model DescribeDBClustersRequest {
  DBClusterDescription?: string(name='DBClusterDescription', example='test'),
  DBClusterIds?: string(name='DBClusterIds', example='amv-bp1r053byu48p****'),
  DBClusterStatus?: string(name='DBClusterStatus', example='Running'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-4690g37929****'),
}

model DescribeDBClustersResponseBody = {
  items?: {
    DBCluster?: [ 
    {
      commodityCode?: string(name='CommodityCode', example='ads_pre'),
      computeResource?: string(name='ComputeResource', example='16ACU'),
      connectionString?: string(name='ConnectionString', example='amv-bp163885f8q21****.ads.aliyuncs.com'),
      createTime?: string(name='CreateTime', example='2022-04-01T09:50:18Z'),
      DBClusterDescription?: string(name='DBClusterDescription', example='adb_test'),
      DBClusterId?: string(name='DBClusterId', example='amv-bp163885f8q21****'),
      DBClusterNetworkType?: string(name='DBClusterNetworkType', example='VPC'),
      DBClusterStatus?: string(name='DBClusterStatus', example='Running'),
      DBClusterType?: string(name='DBClusterType', example='Common'),
      DBVersion?: string(name='DBVersion', example='5.0'),
      engine?: string(name='Engine', example='AnalyticDB'),
      expireTime?: string(name='ExpireTime', example='2022-07-01T09:50:18Z'),
      expired?: string(name='Expired', example='false'),
      lockMode?: string(name='LockMode', example='Unlock'),
      lockReason?: string(name='LockReason', example='instance_expired'),
      mode?: string(name='Mode', example='flexible'),
      payType?: string(name='PayType', example='Prepaid'),
      port?: string(name='Port', example='3306'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      reservedACU?: string(name='ReservedACU', example='32ACU'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmyiu4ekp****'),
      storageResource?: string(name='StorageResource', example='24ACU'),
      VPCId?: string(name='VPCId', example='vpc-bp13h7uzhulpuxvnp****'),
      vSwitchId?: string(name='VSwitchId', example='vsw-bp1syh8vvw8yech7n****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
    }
  ](name='DBCluster')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  requestId?: string(name='RequestId', example='A5EDBA27-AF3E-5966-9503-FD1557E19167'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeDBClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBClustersResponseBody(name='body'),
}

async function describeDBClustersWithOptions(request: DescribeDBClustersRequest, runtime: Util.RuntimeOptions): DescribeDBClustersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterDescription)) {
    query['DBClusterDescription'] = request.DBClusterDescription;
  }
  if (!Util.isUnset(request.DBClusterIds)) {
    query['DBClusterIds'] = request.DBClusterIds;
  }
  if (!Util.isUnset(request.DBClusterStatus)) {
    query['DBClusterStatus'] = request.DBClusterStatus;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBClusters',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBClusters(request: DescribeDBClustersRequest): DescribeDBClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClustersWithOptions(request, runtime);
}

model DescribeDBResourceGroupRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
  groupName?: string(name='GroupName', example='test_group'),
  groupType?: string(name='GroupType', example='Job'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
}

model DescribeDBResourceGroupResponseBody = {
  groupsInfo?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-08-29T03:34:30Z'),
      elasticMinComputeResource?: string(name='ElasticMinComputeResource'),
      groupName?: string(name='GroupName', example='test1'),
      groupType?: string(name='GroupType', example='Job'),
      groupUsers?: string(name='GroupUsers', example='testb,testc'),
      maxComputeResource?: string(name='MaxComputeResource', example='512'),
      minComputeResource?: string(name='MinComputeResource', example='0'),
      status?: string(name='Status', example='ok'),
      updateTime?: string(name='UpdateTime', example='2022-08-31T03:34:30Z'),
    }
  ](name='GroupsInfo'),
  requestId?: string(name='RequestId', example='A94B6C02-7BD4-5D67-9776-3AC8317E8DD3'),
}

model DescribeDBResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBResourceGroupResponseBody(name='body'),
}

async function describeDBResourceGroupWithOptions(request: DescribeDBResourceGroupRequest, runtime: Util.RuntimeOptions): DescribeDBResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBResourceGroup',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBResourceGroup(request: DescribeDBResourceGroupRequest): DescribeDBResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBResourceGroupWithOptions(request, runtime);
}

model DescribeDiagnosisDimensionsRequest {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  lang?: string(name='Lang'),
  queryCondition?: string(name='QueryCondition'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
}

model DescribeDiagnosisDimensionsResponseBody = {
  clientIps?: [ string ](name='ClientIps'),
  databases?: [ string ](name='Databases'),
  requestId?: string(name='RequestId'),
  resourceGroups?: [ string ](name='ResourceGroups'),
  userNames?: [ string ](name='UserNames'),
}

model DescribeDiagnosisDimensionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosisDimensionsResponseBody(name='body'),
}

async function describeDiagnosisDimensionsWithOptions(request: DescribeDiagnosisDimensionsRequest, runtime: Util.RuntimeOptions): DescribeDiagnosisDimensionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.queryCondition)) {
    query['QueryCondition'] = request.queryCondition;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosisDimensions',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosisDimensions(request: DescribeDiagnosisDimensionsRequest): DescribeDiagnosisDimensionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosisDimensionsWithOptions(request, runtime);
}

model DescribeDiagnosisRecordsRequest {
  clientIp?: string(name='ClientIp'),
  DBClusterId?: string(name='DBClusterId'),
  database?: string(name='Database'),
  endTime?: string(name='EndTime'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  maxPeakMemory?: long(name='MaxPeakMemory'),
  maxScanSize?: long(name='MaxScanSize'),
  minPeakMemory?: long(name='MinPeakMemory'),
  minScanSize?: long(name='MinScanSize'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  patternId?: string(name='PatternId'),
  queryCondition?: string(name='QueryCondition'),
  regionId?: string(name='RegionId'),
  resourceGroup?: string(name='ResourceGroup'),
  startTime?: string(name='StartTime'),
  userName?: string(name='UserName'),
}

model DescribeDiagnosisRecordsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  querys?: [ 
    {
      clientIp?: string(name='ClientIp'),
      cost?: long(name='Cost'),
      database?: string(name='Database'),
      etlWriteRows?: long(name='EtlWriteRows'),
      executionTime?: long(name='ExecutionTime'),
      outputDataSize?: long(name='OutputDataSize'),
      outputRows?: long(name='OutputRows'),
      peakMemory?: long(name='PeakMemory'),
      processId?: string(name='ProcessId'),
      queueTime?: long(name='QueueTime'),
      rcHost?: string(name='RcHost'),
      resourceCostRank?: int32(name='ResourceCostRank'),
      resourceGroup?: string(name='ResourceGroup'),
      SQL?: string(name='SQL'),
      SQLTruncated?: boolean(name='SQLTruncated'),
      SQLTruncatedThreshold?: long(name='SQLTruncatedThreshold'),
      scanRows?: long(name='ScanRows'),
      scanSize?: long(name='ScanSize'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
      totalPlanningTime?: long(name='TotalPlanningTime'),
      totalStages?: int32(name='TotalStages'),
      userName?: string(name='UserName'),
    }
  ](name='Querys'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDiagnosisRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosisRecordsResponseBody(name='body'),
}

async function describeDiagnosisRecordsWithOptions(request: DescribeDiagnosisRecordsRequest, runtime: Util.RuntimeOptions): DescribeDiagnosisRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.maxPeakMemory)) {
    query['MaxPeakMemory'] = request.maxPeakMemory;
  }
  if (!Util.isUnset(request.maxScanSize)) {
    query['MaxScanSize'] = request.maxScanSize;
  }
  if (!Util.isUnset(request.minPeakMemory)) {
    query['MinPeakMemory'] = request.minPeakMemory;
  }
  if (!Util.isUnset(request.minScanSize)) {
    query['MinScanSize'] = request.minScanSize;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.patternId)) {
    query['PatternId'] = request.patternId;
  }
  if (!Util.isUnset(request.queryCondition)) {
    query['QueryCondition'] = request.queryCondition;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroup)) {
    query['ResourceGroup'] = request.resourceGroup;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosisRecords',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosisRecords(request: DescribeDiagnosisRecordsRequest): DescribeDiagnosisRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosisRecordsWithOptions(request, runtime);
}

model DescribeDiagnosisSQLInfoRequest {
  DBClusterId?: string(name='DBClusterId'),
  lang?: string(name='Lang'),
  processId?: string(name='ProcessId'),
  processRcHost?: string(name='ProcessRcHost'),
  processStartTime?: long(name='ProcessStartTime'),
  processState?: string(name='ProcessState'),
  regionId?: string(name='RegionId'),
}

model DescribeDiagnosisSQLInfoResponseBody = {
  diagnosisSQLInfo?: string(name='DiagnosisSQLInfo'),
  requestId?: string(name='RequestId'),
  stageInfos?: [ 
    {
      inputDataSize?: long(name='InputDataSize'),
      inputRows?: long(name='InputRows'),
      operatorCost?: long(name='OperatorCost'),
      outputDataSize?: long(name='OutputDataSize'),
      outputRows?: long(name='OutputRows'),
      peakMemory?: long(name='PeakMemory'),
      progress?: double(name='Progress'),
      stageId?: string(name='StageId'),
      state?: string(name='State'),
    }
  ](name='StageInfos'),
}

model DescribeDiagnosisSQLInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosisSQLInfoResponseBody(name='body'),
}

async function describeDiagnosisSQLInfoWithOptions(request: DescribeDiagnosisSQLInfoRequest, runtime: Util.RuntimeOptions): DescribeDiagnosisSQLInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosisSQLInfo',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosisSQLInfo(request: DescribeDiagnosisSQLInfoRequest): DescribeDiagnosisSQLInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosisSQLInfoWithOptions(request, runtime);
}

model DescribeDownloadRecordsRequest {
  DBClusterId?: string(name='DBClusterId'),
  lang?: string(name='Lang'),
  regionId?: string(name='RegionId'),
}

model DescribeDownloadRecordsResponseBody = {
  records?: [ 
    {
      downloadId?: long(name='DownloadId'),
      exceptionMsg?: string(name='ExceptionMsg'),
      fileName?: string(name='FileName'),
      status?: string(name='Status'),
      url?: string(name='Url'),
    }
  ](name='Records'),
  requestId?: string(name='RequestId'),
}

model DescribeDownloadRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDownloadRecordsResponseBody(name='body'),
}

async function describeDownloadRecordsWithOptions(request: DescribeDownloadRecordsRequest, runtime: Util.RuntimeOptions): DescribeDownloadRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDownloadRecords',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDownloadRecords(request: DescribeDownloadRecordsRequest): DescribeDownloadRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDownloadRecordsWithOptions(request, runtime);
}

model DescribePatternPerformanceRequest {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  key?: string(name='Key'),
  patternId?: string(name='PatternId'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
}

model DescribePatternPerformanceResponseBody = {
  endTime?: string(name='EndTime'),
  performances?: [ 
    {
      key?: string(name='Key'),
      series?: [ 
        {
          name?: string(name='Name'),
          values?: [ string ](name='Values'),
        }
      ](name='Series'),
      unit?: string(name='Unit'),
    }
  ](name='Performances'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribePatternPerformanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePatternPerformanceResponseBody(name='body'),
}

async function describePatternPerformanceWithOptions(request: DescribePatternPerformanceRequest, runtime: Util.RuntimeOptions): DescribePatternPerformanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.patternId)) {
    query['PatternId'] = request.patternId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePatternPerformance',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePatternPerformance(request: DescribePatternPerformanceRequest): DescribePatternPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePatternPerformanceWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='en-US'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName', example='China (Hangzhou)'),
      regionEndpoint?: string(name='RegionEndpoint', example='adb.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      zones?: {
        zone?: [ 
        {
          localName?: string(name='LocalName', example='Hangzhou Zone H'),
          vpcEnabled?: boolean(name='VpcEnabled', example='true'),
          zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
        }
      ](name='Zone')
      }(name='Zones'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId', example='421794A3-72A5-5D27-9E8B-A75A4C503E17'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeSQLPatternAttributeRequest {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  lang?: string(name='Lang'),
  patternId?: long(name='PatternId'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
}

model DescribeSQLPatternAttributeResponseBody = {
  patternDetail?: {
    averageMemory?: string(name='AverageMemory'),
    averageQueryTime?: string(name='AverageQueryTime'),
    queryCount?: long(name='QueryCount'),
    SQLPattern?: string(name='SQLPattern'),
    totalQueryTime?: string(name='TotalQueryTime'),
  }(name='PatternDetail'),
  requestId?: string(name='RequestId'),
}

model DescribeSQLPatternAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLPatternAttributeResponseBody(name='body'),
}

async function describeSQLPatternAttributeWithOptions(request: DescribeSQLPatternAttributeRequest, runtime: Util.RuntimeOptions): DescribeSQLPatternAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.patternId)) {
    query['PatternId'] = request.patternId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLPatternAttribute',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLPatternAttribute(request: DescribeSQLPatternAttributeRequest): DescribeSQLPatternAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLPatternAttributeWithOptions(request, runtime);
}

model DescribeSQLPatternsRequest {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
}

model DescribeSQLPatternsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  patternDetails?: [ 
    {
      accessIp?: string(name='AccessIp'),
      averageExecutionTime?: double(name='AverageExecutionTime'),
      averagePeakMemory?: double(name='AveragePeakMemory'),
      averageQueryTime?: double(name='AverageQueryTime'),
      averageScanSize?: double(name='AverageScanSize'),
      blockable?: boolean(name='Blockable'),
      failedCount?: long(name='FailedCount'),
      maxExecutionTime?: long(name='MaxExecutionTime'),
      maxPeakMemory?: long(name='MaxPeakMemory'),
      maxQueryTime?: long(name='MaxQueryTime'),
      maxScanSize?: long(name='MaxScanSize'),
      patternCreationTime?: string(name='PatternCreationTime'),
      patternId?: string(name='PatternId'),
      queryCount?: long(name='QueryCount'),
      SQLPattern?: string(name='SQLPattern'),
      tables?: string(name='Tables'),
      user?: string(name='User'),
    }
  ](name='PatternDetails'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSQLPatternsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSQLPatternsResponseBody(name='body'),
}

async function describeSQLPatternsWithOptions(request: DescribeSQLPatternsRequest, runtime: Util.RuntimeOptions): DescribeSQLPatternsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSQLPatterns',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSQLPatterns(request: DescribeSQLPatternsRequest): DescribeSQLPatternsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLPatternsWithOptions(request, runtime);
}

model DescribeSparkCodeLogRequest {
  DBClusterId?: string(name='DBClusterId'),
  jobId?: long(name='JobId'),
  regionId?: string(name='RegionId'),
}

model DescribeSparkCodeLogResponseBody = {
  log?: string(name='Log'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeSparkCodeLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSparkCodeLogResponseBody(name='body'),
}

async function describeSparkCodeLogWithOptions(request: DescribeSparkCodeLogRequest, runtime: Util.RuntimeOptions): DescribeSparkCodeLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSparkCodeLog',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSparkCodeLog(request: DescribeSparkCodeLogRequest): DescribeSparkCodeLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSparkCodeLogWithOptions(request, runtime);
}

model DescribeSparkCodeOutputRequest {
  DBClusterId?: string(name='DBClusterId'),
  jobId?: long(name='JobId'),
  regionId?: string(name='RegionId'),
}

model DescribeSparkCodeOutputResponseBody = {
  message?: string(name='Message'),
  output?: string(name='Output'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeSparkCodeOutputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSparkCodeOutputResponseBody(name='body'),
}

async function describeSparkCodeOutputWithOptions(request: DescribeSparkCodeOutputRequest, runtime: Util.RuntimeOptions): DescribeSparkCodeOutputResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSparkCodeOutput',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSparkCodeOutput(request: DescribeSparkCodeOutputRequest): DescribeSparkCodeOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSparkCodeOutputWithOptions(request, runtime);
}

model DescribeSparkCodeWebUiRequest {
  DBClusterId?: string(name='DBClusterId'),
  jobId?: long(name='JobId'),
  regionId?: string(name='RegionId'),
}

model DescribeSparkCodeWebUiResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  url?: string(name='Url'),
}

model DescribeSparkCodeWebUiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSparkCodeWebUiResponseBody(name='body'),
}

async function describeSparkCodeWebUiWithOptions(request: DescribeSparkCodeWebUiRequest, runtime: Util.RuntimeOptions): DescribeSparkCodeWebUiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSparkCodeWebUi',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSparkCodeWebUi(request: DescribeSparkCodeWebUiRequest): DescribeSparkCodeWebUiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSparkCodeWebUiWithOptions(request, runtime);
}

model DescribeSqlPatternRequest {
  DBClusterId?: string(name='DBClusterId'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  sqlPattern?: string(name='SqlPattern'),
  startTime?: string(name='StartTime'),
  type?: string(name='Type'),
}

model DescribeSqlPatternResponseBody = {
  items?: [ 
    {
      accessIP?: string(name='AccessIP'),
      avgCpuTime?: string(name='AvgCpuTime'),
      avgPeakMemory?: string(name='AvgPeakMemory'),
      avgScanSize?: string(name='AvgScanSize'),
      avgStageCount?: string(name='AvgStageCount'),
      avgTaskCount?: string(name='AvgTaskCount'),
      instanceName?: string(name='InstanceName'),
      maxCpuTime?: string(name='MaxCpuTime'),
      maxPeakMemory?: string(name='MaxPeakMemory'),
      maxScanSize?: string(name='MaxScanSize'),
      maxStageCount?: string(name='MaxStageCount'),
      maxTaskCount?: string(name='MaxTaskCount'),
      pattern?: string(name='Pattern'),
      queryCount?: string(name='QueryCount'),
      reportDate?: string(name='ReportDate'),
      user?: string(name='User'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSqlPatternResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSqlPatternResponseBody(name='body'),
}

async function describeSqlPatternWithOptions(request: DescribeSqlPatternRequest, runtime: Util.RuntimeOptions): DescribeSqlPatternResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sqlPattern)) {
    query['SqlPattern'] = request.sqlPattern;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSqlPattern',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSqlPattern(request: DescribeSqlPatternRequest): DescribeSqlPatternResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSqlPatternWithOptions(request, runtime);
}

model DescribeTableAccessCountRequest {
  DBClusterId?: string(name='DBClusterId'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
  tableName?: string(name='TableName'),
}

model DescribeTableAccessCountResponseBody = {
  items?: [ 
    {
      accessCount?: string(name='AccessCount'),
      instanceName?: string(name='InstanceName'),
      reportDate?: string(name='ReportDate'),
      tableName?: string(name='TableName'),
      tableSchema?: string(name='TableSchema'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeTableAccessCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTableAccessCountResponseBody(name='body'),
}

async function describeTableAccessCountWithOptions(request: DescribeTableAccessCountRequest, runtime: Util.RuntimeOptions): DescribeTableAccessCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTableAccessCount',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTableAccessCount(request: DescribeTableAccessCountRequest): DescribeTableAccessCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTableAccessCountWithOptions(request, runtime);
}

model DownloadDiagnosisRecordsRequest {
  clientIp?: string(name='ClientIp'),
  DBClusterId?: string(name='DBClusterId'),
  database?: string(name='Database'),
  endTime?: string(name='EndTime'),
  keyword?: string(name='Keyword'),
  lang?: string(name='Lang'),
  maxPeakMemory?: long(name='MaxPeakMemory'),
  maxScanSize?: long(name='MaxScanSize'),
  minPeakMemory?: long(name='MinPeakMemory'),
  minScanSize?: long(name='MinScanSize'),
  queryCondition?: string(name='QueryCondition'),
  regionId?: string(name='RegionId'),
  resourceGroup?: string(name='ResourceGroup'),
  startTime?: string(name='StartTime'),
  userName?: string(name='UserName'),
}

model DownloadDiagnosisRecordsResponseBody = {
  downloadId?: int32(name='DownloadId'),
  requestId?: string(name='RequestId'),
}

model DownloadDiagnosisRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DownloadDiagnosisRecordsResponseBody(name='body'),
}

async function downloadDiagnosisRecordsWithOptions(request: DownloadDiagnosisRecordsRequest, runtime: Util.RuntimeOptions): DownloadDiagnosisRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.maxPeakMemory)) {
    query['MaxPeakMemory'] = request.maxPeakMemory;
  }
  if (!Util.isUnset(request.maxScanSize)) {
    query['MaxScanSize'] = request.maxScanSize;
  }
  if (!Util.isUnset(request.minPeakMemory)) {
    query['MinPeakMemory'] = request.minPeakMemory;
  }
  if (!Util.isUnset(request.minScanSize)) {
    query['MinScanSize'] = request.minScanSize;
  }
  if (!Util.isUnset(request.queryCondition)) {
    query['QueryCondition'] = request.queryCondition;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroup)) {
    query['ResourceGroup'] = request.resourceGroup;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DownloadDiagnosisRecords',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function downloadDiagnosisRecords(request: DownloadDiagnosisRecordsRequest): DownloadDiagnosisRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return downloadDiagnosisRecordsWithOptions(request, runtime);
}

model GetLakehouseValidResourceGroupsRequest {
  groupsInfo?: string(name='GroupsInfo'),
}

model GetLakehouseValidResourceGroupsResponseBody = {
  data?: {
    lakehouseMinComputeResource?: long(name='LakehouseMinComputeResource'),
    validPoolsInfo?: [ 
      {
        available?: boolean(name='Available'),
        cuOptions?: [ long ](name='CuOptions'),
        groupName?: string(name='GroupName'),
        groupType?: string(name='GroupType'),
        maxComputeResource?: string(name='MaxComputeResource'),
        minComputeResource?: string(name='MinComputeResource'),
      }
    ](name='ValidPoolsInfo'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetLakehouseValidResourceGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLakehouseValidResourceGroupsResponseBody(name='body'),
}

async function getLakehouseValidResourceGroupsWithOptions(request: GetLakehouseValidResourceGroupsRequest, runtime: Util.RuntimeOptions): GetLakehouseValidResourceGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupsInfo)) {
    query['GroupsInfo'] = request.groupsInfo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLakehouseValidResourceGroups',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLakehouseValidResourceGroups(request: GetLakehouseValidResourceGroupsRequest): GetLakehouseValidResourceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLakehouseValidResourceGroupsWithOptions(request, runtime);
}

model GetSparkAppAttemptLogRequest {
  attemptId?: string(name='AttemptId', example='s202207151211hz****-0001'),
  logLength?: long(name='LogLength', example='20'),
}

model GetSparkAppAttemptLogResponseBody = {
  data?: {
    DBClusterId?: string(name='DBClusterId'),
    logContent?: string(name='LogContent', example='22/04/22 15:30:49 INFO Utils: Start the dump task because s202207151211hz****-0001 app end, the interval is 238141ms;22/04/22 15:30:49 INFO AbstractConnector: Stopped Spark@5e774d9d{HTTP/1.1, (http/1.1)}{0.0.0.0:4040}'),
    message?: string(name='Message', example='WARNING: log file maybe deleted, please check oss path: oss://TestBucketName/applog/'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C3A9594F-1D40-4472-A96C-8FB8AA20D38C'),
}

model GetSparkAppAttemptLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkAppAttemptLogResponseBody(name='body'),
}

async function getSparkAppAttemptLogWithOptions(request: GetSparkAppAttemptLogRequest, runtime: Util.RuntimeOptions): GetSparkAppAttemptLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.attemptId)) {
    body['AttemptId'] = request.attemptId;
  }
  if (!Util.isUnset(request.logLength)) {
    body['LogLength'] = request.logLength;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkAppAttemptLog',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkAppAttemptLog(request: GetSparkAppAttemptLogRequest): GetSparkAppAttemptLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkAppAttemptLogWithOptions(request, runtime);
}

model GetSparkAppInfoRequest {
  appId?: string(name='AppId', example='s202205201533hz1209892000****'),
}

model GetSparkAppInfoResponseBody = {
  data?: SparkAppInfo(name='Data', example='{     \\"name\\": \\"SparkPi\\",     \\"file\\": \\"local:///tmp/spark-examples.jar\\",     \\"className\\": \\"org.apache.spark.examples.SparkPi\\",     \\"args\\": [         \\"1000000\\"     ],     \\"conf\\": {         \\"spark.driver.resourceSpec\\": \\"small\\",         \\"spark.executor.instances\\": 1,         \\"spark.executor.resourceSpec\\": \\"small\\"     } }",
      "EstimateExecutionCpuTimeInSeconds" : 100,
      "LogRootPath" : "oss://test/logs/driver",
      "LastAttemptId" : "s202204291426hzpre60cfabb0000004-0003",
      "WebUiAddress" : "https://sparkui.aliyuncs.com/token=xxx",
      "SubmittedTimeInMillis" : 1651213645000,
      "StartedTimeInMillis" : 1651213645010,
      "LastUpdatedTimeInMillis" : 1651213645200,
      "TerminatedTimeInMillis" : 1651213645300,
      "DBClusterId" : "am-dbclusterid",
      "ResourceGroupName" : "spark-rg",
      "DurationInMillis" : 100
    }'),
  requestId?: string(name='RequestId', example='D65A809F-34CE-4550-9BC1-0ED21ETG380'),
}

model GetSparkAppInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkAppInfoResponseBody(name='body'),
}

async function getSparkAppInfoWithOptions(request: GetSparkAppInfoRequest, runtime: Util.RuntimeOptions): GetSparkAppInfoResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkAppInfo',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkAppInfo(request: GetSparkAppInfoRequest): GetSparkAppInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkAppInfoWithOptions(request, runtime);
}

model GetSparkAppLogRequest {
  appId?: string(name='AppId', example='s202206061441hz22a35ab000****'),
  logLength?: long(name='LogLength', example='20'),
}

model GetSparkAppLogResponseBody = {
  data?: {
    DBClusterId?: string(name='DBClusterId'),
    logContent?: string(name='LogContent', example='22/04/22 15:30:49 INFO Utils: Start the dump task because s202206061441hz22a35ab000****-0001 app end, the interval is 238141ms;22/04/22 15:30:49 INFO AbstractConnector: Stopped Spark@5e774d9d{HTTP/1.1, (http/1.1)}{0.0.0.0:4040}'),
    message?: string(name='Message', example='WARNING:  log file maybe deleted, please check oss path: oss://TestBucketName/applog/'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C3A9594F-1D40-4472-A96C-8FB8AA20D38C'),
}

model GetSparkAppLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkAppLogResponseBody(name='body'),
}

async function getSparkAppLogWithOptions(request: GetSparkAppLogRequest, runtime: Util.RuntimeOptions): GetSparkAppLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.logLength)) {
    body['LogLength'] = request.logLength;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkAppLog',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkAppLog(request: GetSparkAppLogRequest): GetSparkAppLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkAppLogWithOptions(request, runtime);
}

model GetSparkAppMetricsRequest {
  appId?: string(name='AppId', example='s202204221525hzca7d8140000003'),
}

model GetSparkAppMetricsResponseBody = {
  data?: {
    appId?: string(name='AppId', example='s202302051515shfa865f80003691'),
    attemptId?: string(name='AttemptId', example='s202301061000hz57d797b0000201-0001'),
    eventLogPath?: string(name='EventLogPath', example='oss://path/to/eventLog'),
    finished?: boolean(name='Finished', example='True'),
    scanMetrics?: {
      outputRowsCount?: long(name='OutputRowsCount', example='1000'),
      totalReadFileSizeInByte?: long(name='TotalReadFileSizeInByte', example='10000'),
    }(name='ScanMetrics'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model GetSparkAppMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkAppMetricsResponseBody(name='body'),
}

async function getSparkAppMetricsWithOptions(request: GetSparkAppMetricsRequest, runtime: Util.RuntimeOptions): GetSparkAppMetricsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkAppMetrics',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkAppMetrics(request: GetSparkAppMetricsRequest): GetSparkAppMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkAppMetricsWithOptions(request, runtime);
}

model GetSparkAppStateRequest {
  appId?: string(name='AppId', example='s202204191546hzpread6a896000****'),
}

model GetSparkAppStateResponseBody = {
  data?: {
    appId?: string(name='AppId', example='s202204191546hzpread6a896000****'),
    appName?: string(name='AppName', example='test'),
    DBClusterId?: string(name='DBClusterId', example='amv-clusterxxx'),
    message?: string(name='Message', example='Insufficient resources.'),
    state?: string(name='State', example='COMPLETED'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='D65A809F-34CE-4550-9BC1-0ED21ETG380'),
}

model GetSparkAppStateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkAppStateResponseBody(name='body'),
}

async function getSparkAppStateWithOptions(request: GetSparkAppStateRequest, runtime: Util.RuntimeOptions): GetSparkAppStateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkAppState',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkAppState(request: GetSparkAppStateRequest): GetSparkAppStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkAppStateWithOptions(request, runtime);
}

model GetSparkAppWebUiAddressRequest {
  appId?: string(name='AppId', example='s202205201533hz1209892000****'),
}

model GetSparkAppWebUiAddressResponseBody = {
  data?: {
    appId?: string(name='AppId', example='s202205201533hz1209892000****'),
    DBClusterId?: string(name='DBClusterId', example='amv-clusterxxx'),
    expirationTimeInMillis?: long(name='ExpirationTimeInMillis', example='1655801973000'),
    webUiAddress?: string(name='WebUiAddress', example='https://adbsparkui-cn-hangzhou.aliyuncs.com/?token=****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='D65A809F-34CE-4550-9BC1-0ED21ETG380'),
}

model GetSparkAppWebUiAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkAppWebUiAddressResponseBody(name='body'),
}

async function getSparkAppWebUiAddressWithOptions(request: GetSparkAppWebUiAddressRequest, runtime: Util.RuntimeOptions): GetSparkAppWebUiAddressResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkAppWebUiAddress',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkAppWebUiAddress(request: GetSparkAppWebUiAddressRequest): GetSparkAppWebUiAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkAppWebUiAddressWithOptions(request, runtime);
}

model GetSparkConfigLogPathRequest {
  DBClusterId?: string(name='DBClusterId', example='am-adsdxxxx'),
}

model GetSparkConfigLogPathResponseBody = {
  data?: {
    defaultLogPath?: string(name='DefaultLogPath', example='oss://aliyun-oa-adb-spark-1111-oss-cn-hanghzou/spark-logs'),
    isLogPathExists?: boolean(name='IsLogPathExists', example='true'),
    modifiedTimestamp?: string(name='ModifiedTimestamp', example='1675654361000'),
    modifiedUid?: string(name='ModifiedUid', example='10130223128xxx'),
    recordedLogPath?: string(name='RecordedLogPath', example='oss://test/spark-logs/'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request', example='1919-xxx-ssdfsdff'),
}

model GetSparkConfigLogPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkConfigLogPathResponseBody(name='body'),
}

async function getSparkConfigLogPathWithOptions(request: GetSparkConfigLogPathRequest, runtime: Util.RuntimeOptions): GetSparkConfigLogPathResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkConfigLogPath',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkConfigLogPath(request: GetSparkConfigLogPathRequest): GetSparkConfigLogPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkConfigLogPathWithOptions(request, runtime);
}

model GetSparkLogAnalyzeTaskRequest {
  taskId?: long(name='TaskId', example='12'),
}

model GetSparkLogAnalyzeTaskResponseBody = {
  data?: SparkAnalyzeLogTask(name='Data'),
  requestId?: string(name='RequestId', example='1DF5AF5B-C803-1861-A0FF-63666A557709'),
}

model GetSparkLogAnalyzeTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkLogAnalyzeTaskResponseBody(name='body'),
}

async function getSparkLogAnalyzeTaskWithOptions(request: GetSparkLogAnalyzeTaskRequest, runtime: Util.RuntimeOptions): GetSparkLogAnalyzeTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkLogAnalyzeTask',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkLogAnalyzeTask(request: GetSparkLogAnalyzeTaskRequest): GetSparkLogAnalyzeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkLogAnalyzeTaskWithOptions(request, runtime);
}

model GetSparkSQLEngineStateRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
  resourceGroupName?: string(name='ResourceGroupName', example='test_instance'),
}

model GetSparkSQLEngineStateResponseBody = {
  data?: {
    appId?: string(name='AppId', example='s202207151211hz0c****'),
    config?: string(name='Config', example='{"key1": "value1", "key2": "value2"}'),
    jars?: string(name='Jars', example='oss://test-bucket/test.jar'),
    maxExecutor?: string(name='MaxExecutor', example='3'),
    minExecutor?: string(name='MinExecutor', example='1'),
    slotNum?: string(name='SlotNum', example='2'),
    state?: string(name='State', example='COMPLETED'),
    submittedTimeInMillis?: string(name='SubmittedTimeInMillis', example='1651213645000'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request', example='xxxx-xxx-xx'),
}

model GetSparkSQLEngineStateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkSQLEngineStateResponseBody(name='body'),
}

async function getSparkSQLEngineStateWithOptions(request: GetSparkSQLEngineStateRequest, runtime: Util.RuntimeOptions): GetSparkSQLEngineStateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.resourceGroupName)) {
    body['ResourceGroupName'] = request.resourceGroupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkSQLEngineState',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkSQLEngineState(request: GetSparkSQLEngineStateRequest): GetSparkSQLEngineStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkSQLEngineStateWithOptions(request, runtime);
}

model GetSparkTemplateFileContentRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-8vbn8pq537k8w****'),
  id?: long(name='Id', example='725204'),
}

model GetSparkTemplateFileContentResponseBody = {
  data?: {
    appType?: string(name='AppType', example='SQL'),
    content?: string(name='Content', example='set spark.driver.resourceSpec=medium;set spark.executor.instances=2;set spark.executor.resourceSpec=medium;set spark.app.name=Spark SQL Test;'),
    id?: long(name='Id', example='725204'),
    resourceGroupName?: string(name='ResourceGroupName', example='test'),
    type?: string(name='Type', example='file'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='D65A809F-34CE-4550-9BC1-0ED21ETG380'),
}

model GetSparkTemplateFileContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkTemplateFileContentResponseBody(name='body'),
}

async function getSparkTemplateFileContentWithOptions(request: GetSparkTemplateFileContentRequest, runtime: Util.RuntimeOptions): GetSparkTemplateFileContentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkTemplateFileContent',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkTemplateFileContent(request: GetSparkTemplateFileContentRequest): GetSparkTemplateFileContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkTemplateFileContentWithOptions(request, runtime);
}

model GetSparkTemplateFolderTreeRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
}

model GetSparkTemplateFolderTreeResponseBody = {
  data?: string(name='Data', example='{           "Uid":195813423****,           "Type":"FOLDER",          "Parent":-1,           "Children":[              {                     "LastModified":1647853173,               "Uid":195813423****,                     "Type":"FOLDER",                     "Parent":0,                     "Id":157,                     "Name":"t"         }       ],            "Id":725204,            "Name":"root"      }'),
  requestId?: string(name='RequestId', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model GetSparkTemplateFolderTreeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkTemplateFolderTreeResponseBody(name='body'),
}

async function getSparkTemplateFolderTreeWithOptions(request: GetSparkTemplateFolderTreeRequest, runtime: Util.RuntimeOptions): GetSparkTemplateFolderTreeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkTemplateFolderTree',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkTemplateFolderTree(request: GetSparkTemplateFolderTreeRequest): GetSparkTemplateFolderTreeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkTemplateFolderTreeWithOptions(request, runtime);
}

model GetSparkTemplateFullTreeRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
}

model GetSparkTemplateFullTreeResponseBody = {
  data?: string(name='Data', example='{     "Uid": 10415777****,     "Type": "FOLDER",     "Parent": -1,     "Children": [       {         "LastModified": 1648544748,         "Uid": 104157779****,         "Type": "FILE",         "Parent": 0,         "Id": s202204132****,         "AppType": "SQL",         "Name": "f"       },       {         "LastModified": 1648544956,         "Uid": 1041577795****,         "Type": "FOLDER",         "Parent": 0,         "Id": 157,         "Name": "f3333"       }     ],     "Id": 725204,     "Name": "root"   }'),
  requestId?: string(name='RequestId', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model GetSparkTemplateFullTreeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSparkTemplateFullTreeResponseBody(name='body'),
}

async function getSparkTemplateFullTreeWithOptions(request: GetSparkTemplateFullTreeRequest, runtime: Util.RuntimeOptions): GetSparkTemplateFullTreeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSparkTemplateFullTree',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSparkTemplateFullTree(request: GetSparkTemplateFullTreeRequest): GetSparkTemplateFullTreeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSparkTemplateFullTreeWithOptions(request, runtime);
}

model GetViewDDLRequest {
  DBClusterId?: string(name='DBClusterId', example='am-bp1ub9grke1****'),
  regionId?: string(name='RegionId'),
  schemaName?: string(name='SchemaName', example='adb_demo'),
  viewName?: string(name='ViewName', example='v_modbus'),
}

model GetViewDDLResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='421794A3-72A5-5D27-9E8B-A75A4C503E17'),
  SQL?: string(name='SQL', example='CREATE VIEW `test`.`test_view` AS SELECT
  `id`
, `name`
FROM
  `test_tbl_adb`'),
}

model GetViewDDLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetViewDDLResponseBody(name='body'),
}

async function getViewDDLWithOptions(request: GetViewDDLRequest, runtime: Util.RuntimeOptions): GetViewDDLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.schemaName)) {
    query['SchemaName'] = request.schemaName;
  }
  if (!Util.isUnset(request.viewName)) {
    query['ViewName'] = request.viewName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetViewDDL',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getViewDDL(request: GetViewDDLRequest): GetViewDDLResponse {
  var runtime = new Util.RuntimeOptions{};
  return getViewDDLWithOptions(request, runtime);
}

model KillSparkAppRequest {
  appId?: string(name='AppId', example='s202204132018hzprec1ac****'),
}

model KillSparkAppResponseBody = {
  data?: {
    appId?: string(name='AppId', example='s202204132018hzprec1ac****'),
    appName?: string(name='AppName', example='LAKEHOUSE-1-1'),
    DBClusterId?: string(name='DBClusterId', example='amv-clusterxxx'),
    message?: string(name='Message', example='[Advisor] Advisor feature is not available for instance: am-2ze292w4fyglwxxxx'),
    state?: string(name='State', example='running'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='69D0810B-F9F5-5F4C-A57F-DF36133B63C9'),
}

model KillSparkAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: KillSparkAppResponseBody(name='body'),
}

async function killSparkAppWithOptions(request: KillSparkAppRequest, runtime: Util.RuntimeOptions): KillSparkAppResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'KillSparkApp',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function killSparkApp(request: KillSparkAppRequest): KillSparkAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return killSparkAppWithOptions(request, runtime);
}

model KillSparkLogAnalyzeTaskRequest {
  taskId?: long(name='TaskId', example='15'),
}

model KillSparkLogAnalyzeTaskResponseBody = {
  data?: SparkAnalyzeLogTask(name='Data'),
  requestId?: string(name='RequestId', example='1DF5AF5B-C803-1861-A0FF-63666A557709'),
}

model KillSparkLogAnalyzeTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: KillSparkLogAnalyzeTaskResponseBody(name='body'),
}

async function killSparkLogAnalyzeTaskWithOptions(request: KillSparkLogAnalyzeTaskRequest, runtime: Util.RuntimeOptions): KillSparkLogAnalyzeTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'KillSparkLogAnalyzeTask',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function killSparkLogAnalyzeTask(request: KillSparkLogAnalyzeTaskRequest): KillSparkLogAnalyzeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return killSparkLogAnalyzeTaskWithOptions(request, runtime);
}

model KillSparkSQLEngineRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-8vbn8pq537k8w****'),
  resourceGroupName?: string(name='ResourceGroupName', example='spark_test'),
}

model KillSparkSQLEngineResponseBody = {
  data?: boolean(name='Data', example='ture'),
  requestId?: string(name='RequestId', example='D65A809F-34CE-4550-9BC1-0ED21ETG380'),
}

model KillSparkSQLEngineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: KillSparkSQLEngineResponseBody(name='body'),
}

async function killSparkSQLEngineWithOptions(request: KillSparkSQLEngineRequest, runtime: Util.RuntimeOptions): KillSparkSQLEngineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.resourceGroupName)) {
    body['ResourceGroupName'] = request.resourceGroupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'KillSparkSQLEngine',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function killSparkSQLEngine(request: KillSparkSQLEngineRequest): KillSparkSQLEngineResponse {
  var runtime = new Util.RuntimeOptions{};
  return killSparkSQLEngineWithOptions(request, runtime);
}

model ListSparkAppAttemptsRequest {
  appId?: string(name='AppId', example='s202204132018hzprec1ac****'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
}

model ListSparkAppAttemptsResponseBody = {
  data?: {
    attemptInfoList?: [
      SparkAttemptInfo
    ](name='AttemptInfoList'),
    pageNumber?: long(name='PageNumber', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='3'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model ListSparkAppAttemptsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSparkAppAttemptsResponseBody(name='body'),
}

async function listSparkAppAttemptsWithOptions(request: ListSparkAppAttemptsRequest, runtime: Util.RuntimeOptions): ListSparkAppAttemptsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSparkAppAttempts',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSparkAppAttempts(request: ListSparkAppAttemptsRequest): ListSparkAppAttemptsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSparkAppAttemptsWithOptions(request, runtime);
}

model ListSparkAppsRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='30'),
  resourceGroupName?: string(name='ResourceGroupName', example='test_instance'),
}

model ListSparkAppsResponseBody = {
  data?: {
    appInfoList?: [
      SparkAppInfo
    ](name='AppInfoList'),
    pageNumber?: long(name='PageNumber', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='1'),
  }(name='Data'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='D65A809F-34CE-4550-9BC1-0ED21ETG380'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListSparkAppsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSparkAppsResponseBody(name='body'),
}

async function listSparkAppsWithOptions(request: ListSparkAppsRequest, runtime: Util.RuntimeOptions): ListSparkAppsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupName)) {
    query['ResourceGroupName'] = request.resourceGroupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSparkApps',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSparkApps(request: ListSparkAppsRequest): ListSparkAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSparkAppsWithOptions(request, runtime);
}

model ListSparkLogAnalyzeTasksRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-9scxs****'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
}

model ListSparkLogAnalyzeTasksResponseBody = {
  data?: {
    pageNumber?: long(name='PageNumber', example='1'),
    pageSize?: long(name='PageSize', example='20'),
    taskList?: [
      SparkAnalyzeLogTask
    ](name='TaskList'),
    totalCount?: long(name='TotalCount', example='100'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='1DF5AF5B-C803-1861-A0FF-63666A557709'),
}

model ListSparkLogAnalyzeTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSparkLogAnalyzeTasksResponseBody(name='body'),
}

async function listSparkLogAnalyzeTasksWithOptions(request: ListSparkLogAnalyzeTasksRequest, runtime: Util.RuntimeOptions): ListSparkLogAnalyzeTasksResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListSparkLogAnalyzeTasks',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSparkLogAnalyzeTasks(request: ListSparkLogAnalyzeTasksRequest): ListSparkLogAnalyzeTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSparkLogAnalyzeTasksWithOptions(request, runtime);
}

model ListSparkTemplateFileIdsRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
}

model ListSparkTemplateFileIdsResponseBody = {
  data?: [ long ](name='Data'),
  requestId?: string(name='RequestId', description='Id of the request', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model ListSparkTemplateFileIdsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSparkTemplateFileIdsResponseBody(name='body'),
}

async function listSparkTemplateFileIdsWithOptions(request: ListSparkTemplateFileIdsRequest, runtime: Util.RuntimeOptions): ListSparkTemplateFileIdsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListSparkTemplateFileIds',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSparkTemplateFileIds(request: ListSparkTemplateFileIdsRequest): ListSparkTemplateFileIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSparkTemplateFileIdsWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest {
  accountDescription?: string(name='AccountDescription', example='AccDesc'),
  accountName?: string(name='AccountName', example='testacc'),
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountDescription)) {
    query['AccountDescription'] = request.accountDescription;
  }
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccountDescription',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model ModifyAuditLogConfigRequest {
  auditLogStatus?: string(name='AuditLogStatus'),
  DBClusterId?: string(name='DBClusterId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyAuditLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
  updateSucceed?: boolean(name='UpdateSucceed'),
}

model ModifyAuditLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAuditLogConfigResponseBody(name='body'),
}

async function modifyAuditLogConfigWithOptions(request: ModifyAuditLogConfigRequest, runtime: Util.RuntimeOptions): ModifyAuditLogConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.auditLogStatus)) {
    query['AuditLogStatus'] = request.auditLogStatus;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAuditLogConfig',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAuditLogConfig(request: ModifyAuditLogConfigRequest): ModifyAuditLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAuditLogConfigWithOptions(request, runtime);
}

model ModifyBackupPolicyRequest {
  backupRetentionPeriod?: string(name='BackupRetentionPeriod'),
  DBClusterId?: string(name='DBClusterId'),
  enableBackupLog?: string(name='EnableBackupLog'),
  logBackupRetentionPeriod?: int32(name='LogBackupRetentionPeriod'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicyWithOptions(request: ModifyBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyBackupPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupRetentionPeriod)) {
    query['BackupRetentionPeriod'] = request.backupRetentionPeriod;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.enableBackupLog)) {
    query['EnableBackupLog'] = request.enableBackupLog;
  }
  if (!Util.isUnset(request.logBackupRetentionPeriod)) {
    query['LogBackupRetentionPeriod'] = request.logBackupRetentionPeriod;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.preferredBackupPeriod)) {
    query['PreferredBackupPeriod'] = request.preferredBackupPeriod;
  }
  if (!Util.isUnset(request.preferredBackupTime)) {
    query['PreferredBackupTime'] = request.preferredBackupTime;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBackupPolicy',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackupPolicyWithOptions(request, runtime);
}

model ModifyClusterAccessWhiteListRequest {
  DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute', example='hidden'),
  DBClusterIPArrayName?: string(name='DBClusterIPArrayName', example='test'),
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
  modifyMode?: string(name='ModifyMode', example='Cover'),
  securityIps?: string(name='SecurityIps', example='10.23.xx.xx'),
}

model ModifyClusterAccessWhiteListResponseBody = {
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
  requestId?: string(name='RequestId', example='370D09FD-442A-5225-AAD3-7362CAE39177'),
  taskId?: int32(name='TaskId', example='1564657730'),
}

model ModifyClusterAccessWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClusterAccessWhiteListResponseBody(name='body'),
}

async function modifyClusterAccessWhiteListWithOptions(request: ModifyClusterAccessWhiteListRequest, runtime: Util.RuntimeOptions): ModifyClusterAccessWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterIPArrayAttribute)) {
    query['DBClusterIPArrayAttribute'] = request.DBClusterIPArrayAttribute;
  }
  if (!Util.isUnset(request.DBClusterIPArrayName)) {
    query['DBClusterIPArrayName'] = request.DBClusterIPArrayName;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.modifyMode)) {
    query['ModifyMode'] = request.modifyMode;
  }
  if (!Util.isUnset(request.securityIps)) {
    query['SecurityIps'] = request.securityIps;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClusterAccessWhiteList',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyClusterAccessWhiteList(request: ModifyClusterAccessWhiteListRequest): ModifyClusterAccessWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyClusterAccessWhiteListWithOptions(request, runtime);
}

model ModifyClusterConnectionStringRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix', example='test-123'),
  currentConnectionString?: string(name='CurrentConnectionString', example='amv-bp11q28kvl688****.ads.aliyuncs.com'),
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
  port?: int32(name='Port', example='3306'),
}

model ModifyClusterConnectionStringResponseBody = {
  requestId?: string(name='RequestId', example='370D09FD-442A-5225-AAD3-7362CAE39177'),
}

model ModifyClusterConnectionStringResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClusterConnectionStringResponseBody(name='body'),
}

async function modifyClusterConnectionStringWithOptions(request: ModifyClusterConnectionStringRequest, runtime: Util.RuntimeOptions): ModifyClusterConnectionStringResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionStringPrefix)) {
    query['ConnectionStringPrefix'] = request.connectionStringPrefix;
  }
  if (!Util.isUnset(request.currentConnectionString)) {
    query['CurrentConnectionString'] = request.currentConnectionString;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClusterConnectionString',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyClusterConnectionString(request: ModifyClusterConnectionStringRequest): ModifyClusterConnectionStringResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyClusterConnectionStringWithOptions(request, runtime);
}

model ModifyDBClusterRequest {
  computeResource?: string(name='ComputeResource', example='16ACU'),
  DBClusterId?: string(name='DBClusterId', example='amv-bp1r053byu48p****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  storageResource?: string(name='StorageResource', example='24ACU'),
}

model ModifyDBClusterResponseBody = {
  DBClusterId?: string(name='DBClusterId', example='amv-bp1r053byu48p****'),
  orderId?: string(name='OrderId', example='2035629****'),
  requestId?: string(name='RequestId', example='0D6BF3E2-41D8-57F6-9A62-A13A70377952'),
}

model ModifyDBClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBClusterResponseBody(name='body'),
}

async function modifyDBClusterWithOptions(request: ModifyDBClusterRequest, runtime: Util.RuntimeOptions): ModifyDBClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.computeResource)) {
    query['ComputeResource'] = request.computeResource;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.storageResource)) {
    query['StorageResource'] = request.storageResource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBCluster',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBCluster(request: ModifyDBClusterRequest): ModifyDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterWithOptions(request, runtime);
}

model ModifyDBClusterDescriptionRequest {
  DBClusterDescription?: string(name='DBClusterDescription', example='adb_test'),
  DBClusterId?: string(name='DBClusterId', example='amv-bp1r053byu48p****'),
}

model ModifyDBClusterDescriptionResponseBody = {
  requestId?: string(name='RequestId', example='17F57FEE-EA4F-4337-8D2E-9C23CAA63D74'),
}

model ModifyDBClusterDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBClusterDescriptionResponseBody(name='body'),
}

async function modifyDBClusterDescriptionWithOptions(request: ModifyDBClusterDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBClusterDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterDescription)) {
    query['DBClusterDescription'] = request.DBClusterDescription;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBClusterDescription',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBClusterDescription(request: ModifyDBClusterDescriptionRequest): ModifyDBClusterDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterDescriptionWithOptions(request, runtime);
}

model ModifyDBClusterMaintainTimeRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-bp1r053byu48p****'),
  maintainTime?: string(name='MaintainTime', example='22:00Z-23:00Z'),
}

model ModifyDBClusterMaintainTimeResponseBody = {
  requestId?: string(name='RequestId', example='65BDA532-28AF-4122-AA39-B382721EEE64'),
}

model ModifyDBClusterMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBClusterMaintainTimeResponseBody(name='body'),
}

async function modifyDBClusterMaintainTimeWithOptions(request: ModifyDBClusterMaintainTimeRequest, runtime: Util.RuntimeOptions): ModifyDBClusterMaintainTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.maintainTime)) {
    query['MaintainTime'] = request.maintainTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBClusterMaintainTime',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBClusterMaintainTime(request: ModifyDBClusterMaintainTimeRequest): ModifyDBClusterMaintainTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterMaintainTimeWithOptions(request, runtime);
}

model ModifyDBResourceGroupRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-bp1r053byu48p****'),
  groupName?: string(name='GroupName', example='test'),
  groupType?: string(name='GroupType', example='Interactive'),
  maxComputeResource?: string(name='MaxComputeResource', example='48'),
  minComputeResource?: string(name='MinComputeResource', example='0'),
}

model ModifyDBResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='805F14E1-0186-520E-A6D5-30188D94E8DA'),
}

model ModifyDBResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBResourceGroupResponseBody(name='body'),
}

async function modifyDBResourceGroupWithOptions(request: ModifyDBResourceGroupRequest, runtime: Util.RuntimeOptions): ModifyDBResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.maxComputeResource)) {
    query['MaxComputeResource'] = request.maxComputeResource;
  }
  if (!Util.isUnset(request.minComputeResource)) {
    query['MinComputeResource'] = request.minComputeResource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBResourceGroup',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBResourceGroup(request: ModifyDBResourceGroupRequest): ModifyDBResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBResourceGroupWithOptions(request, runtime);
}

model PreloadSparkAppMetricsRequest {
  appId?: string(name='AppId', example='s202204221525hzca7d8140000003'),
}

model PreloadSparkAppMetricsResponseBody = {
  data?: {
    appId?: string(name='AppId', example='s202212181815shaccb8be0000253'),
    attemptId?: string(name='AttemptId', example='s202301061000hz57d797b0000201-0001'),
    eventLogPath?: string(name='EventLogPath', example='oss://path/to/eventLog'),
    finished?: boolean(name='Finished', example='True'),
    scanMetrics?: {
      outputRowsCount?: long(name='OutputRowsCount', example='1000'),
      totalReadFileSizeInByte?: long(name='TotalReadFileSizeInByte', example='10000'),
    }(name='ScanMetrics'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request', example='84489769-3065-5A28-A4CB-977CD426F1C3'),
}

model PreloadSparkAppMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PreloadSparkAppMetricsResponseBody(name='body'),
}

async function preloadSparkAppMetricsWithOptions(request: PreloadSparkAppMetricsRequest, runtime: Util.RuntimeOptions): PreloadSparkAppMetricsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PreloadSparkAppMetrics',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function preloadSparkAppMetrics(request: PreloadSparkAppMetricsRequest): PreloadSparkAppMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return preloadSparkAppMetricsWithOptions(request, runtime);
}

model ReleaseClusterPublicConnectionRequest {
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
}

model ReleaseClusterPublicConnectionResponseBody = {
  requestId?: string(name='RequestId', example='A94B6C02-7BD4-5D67-9776-3AC8317E8DD5'),
}

model ReleaseClusterPublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseClusterPublicConnectionResponseBody(name='body'),
}

async function releaseClusterPublicConnectionWithOptions(request: ReleaseClusterPublicConnectionRequest, runtime: Util.RuntimeOptions): ReleaseClusterPublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseClusterPublicConnection',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseClusterPublicConnection(request: ReleaseClusterPublicConnectionRequest): ReleaseClusterPublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseClusterPublicConnectionWithOptions(request, runtime);
}

model ResetAccountPasswordRequest {
  accountDescription?: string(name='AccountDescription', example='AccDesc'),
  accountName?: string(name='AccountName', example='test_accout'),
  accountPassword?: string(name='AccountPassword', example='Test_accout1'),
  DBClusterId?: string(name='DBClusterId', example='amv-bp11q28kvl688****'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId', example='1AD222E9-E606-4A42-BF6D-8A4442913CEF'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetAccountPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountDescription)) {
    query['AccountDescription'] = request.accountDescription;
  }
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetAccountPassword',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountPasswordWithOptions(request, runtime);
}

model SetSparkAppLogRootPathRequest {
  DBClusterId?: string(name='DBClusterId', example='am-dbclusterid'),
  ossLogPath?: string(name='OssLogPath', example='oss://path/to/log'),
  useDefaultOss?: boolean(name='UseDefaultOss', example='true'),
}

model SetSparkAppLogRootPathResponseBody = {
  data?: {
    defaultLogPath?: string(name='DefaultLogPath', example='oss://path/to/log'),
    isLogPathExists?: boolean(name='IsLogPathExists', example='true'),
    modifiedTimestamp?: string(name='ModifiedTimestamp', example='1675236908'),
    modifiedUid?: string(name='ModifiedUid', example='1111111'),
    recordedLogPath?: string(name='RecordedLogPath', example='oss://path/to/log'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request', example='D65A809F-34CE-4550-9BC1-0ED21ETG380'),
}

model SetSparkAppLogRootPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetSparkAppLogRootPathResponseBody(name='body'),
}

async function setSparkAppLogRootPathWithOptions(request: SetSparkAppLogRootPathRequest, runtime: Util.RuntimeOptions): SetSparkAppLogRootPathResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.ossLogPath)) {
    body['OssLogPath'] = request.ossLogPath;
  }
  if (!Util.isUnset(request.useDefaultOss)) {
    body['UseDefaultOss'] = request.useDefaultOss;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetSparkAppLogRootPath',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setSparkAppLogRootPath(request: SetSparkAppLogRootPathRequest): SetSparkAppLogRootPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return setSparkAppLogRootPathWithOptions(request, runtime);
}

model SubmitSparkAppRequest {
  agentSource?: string(name='AgentSource', example='Console'),
  agentVersion?: string(name='AgentVersion', example='1.091'),
  appName?: string(name='AppName', example='TestApp'),
  appType?: string(name='AppType', example='SQL'),
  DBClusterId?: string(name='DBClusterId', example='am-dbclusterid'),
  data?: string(name='Data', example='deleteSparkTemplate'),
  resourceGroupName?: string(name='ResourceGroupName', example='rg-spark'),
  templateFileId?: long(name='TemplateFileId', example='15'),
}

model SubmitSparkAppResponseBody = {
  data?: {
    appId?: string(name='AppId'),
    appName?: string(name='AppName'),
    message?: string(name='Message'),
    state?: string(name='State'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model SubmitSparkAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitSparkAppResponseBody(name='body'),
}

async function submitSparkAppWithOptions(request: SubmitSparkAppRequest, runtime: Util.RuntimeOptions): SubmitSparkAppResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.agentSource)) {
    body['AgentSource'] = request.agentSource;
  }
  if (!Util.isUnset(request.agentVersion)) {
    body['AgentVersion'] = request.agentVersion;
  }
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.appType)) {
    body['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.data)) {
    body['Data'] = request.data;
  }
  if (!Util.isUnset(request.resourceGroupName)) {
    body['ResourceGroupName'] = request.resourceGroupName;
  }
  if (!Util.isUnset(request.templateFileId)) {
    body['TemplateFileId'] = request.templateFileId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitSparkApp',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitSparkApp(request: SubmitSparkAppRequest): SubmitSparkAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSparkAppWithOptions(request, runtime);
}

model SubmitSparkLogAnalyzeTaskRequest {
  appId?: string(name='AppId', example='s202301121553hzd9c6f7xxxx'),
}

model SubmitSparkLogAnalyzeTaskResponseBody = {
  data?: SparkAnalyzeLogTask(name='Data'),
  requestId?: string(name='RequestId', example='1DF5AF5B-C803-1861-A0FF-63666A557709'),
}

model SubmitSparkLogAnalyzeTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitSparkLogAnalyzeTaskResponseBody(name='body'),
}

async function submitSparkLogAnalyzeTaskWithOptions(request: SubmitSparkLogAnalyzeTaskRequest, runtime: Util.RuntimeOptions): SubmitSparkLogAnalyzeTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SubmitSparkLogAnalyzeTask',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitSparkLogAnalyzeTask(request: SubmitSparkLogAnalyzeTaskRequest): SubmitSparkLogAnalyzeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSparkLogAnalyzeTaskWithOptions(request, runtime);
}

model UnbindAccountRequest {
  accountName?: string(name='AccountName', example='test_accout'),
  DBClusterId?: string(name='DBClusterId', example='amv-wz99d9nh5****'),
}

model UnbindAccountResponseBody = {
  requestId?: string(name='RequestId', example='93E85E5C-C805-5837-8713-05B69A504EE5'),
}

model UnbindAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindAccountResponseBody(name='body'),
}

async function unbindAccountWithOptions(request: UnbindAccountRequest, runtime: Util.RuntimeOptions): UnbindAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    query['DBClusterId'] = request.DBClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindAccount',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindAccount(request: UnbindAccountRequest): UnbindAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindAccountWithOptions(request, runtime);
}

model UpdateSparkTemplateFileRequest {
  content?: string(name='Content', example='set spark.driver.resourceSpec=medium;set spark.executor.instances=2;set spark.executor.resourceSpec=medium;set spark.app.name=Spark SQL Test;'),
  DBClusterId?: string(name='DBClusterId', example='amv-pz5vp4585l466****'),
  id?: long(name='Id', example='718056'),
  resourceGroupName?: string(name='ResourceGroupName', example='adb'),
}

model UpdateSparkTemplateFileResponseBody = {
  data?: {
    succeeded?: boolean(name='Succeeded', example='True'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C3A9594F-1D40-4472-A96C-8FB8AA20D38C'),
}

model UpdateSparkTemplateFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSparkTemplateFileResponseBody(name='body'),
}

async function updateSparkTemplateFileWithOptions(request: UpdateSparkTemplateFileRequest, runtime: Util.RuntimeOptions): UpdateSparkTemplateFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.DBClusterId)) {
    body['DBClusterId'] = request.DBClusterId;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.resourceGroupName)) {
    body['ResourceGroupName'] = request.resourceGroupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSparkTemplateFile',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSparkTemplateFile(request: UpdateSparkTemplateFileRequest): UpdateSparkTemplateFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSparkTemplateFileWithOptions(request, runtime);
}

