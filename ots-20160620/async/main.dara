/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Ots';
  @version = '2016-06-20';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BindInstance2VpcRequest {
  instanceName: string(name='InstanceName', position='Query'),
  instanceVpcName: string(name='InstanceVpcName', position='Query'),
  network?: string(name='Network', position='Query'),
  regionNo?: string(name='RegionNo', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  virtualSwitchId: string(name='VirtualSwitchId', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
}

model BindInstance2VpcResponseBody = {
  domain?: string(name='Domain'),
  endpoint?: string(name='Endpoint'),
  requestId?: string(name='RequestId'),
}

model BindInstance2VpcResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindInstance2VpcResponseBody(name='body'),
}

async function bindInstance2Vpc(request: BindInstance2VpcRequest): BindInstance2VpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindInstance2Vpc', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceName: string(name='InstanceName', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTagsRequest {
  instanceName: string(name='InstanceName', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tagInfo?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagInfo', position='Query'),
}

model DeleteTagsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTagsResponseBody(name='body'),
}

async function deleteTags(request: DeleteTagsRequest): DeleteTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTags', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceName: string(name='InstanceName', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetInstanceResponseBody = {
  instanceInfo?: {
    clusterType?: string(name='ClusterType'),
    createTime?: string(name='CreateTime'),
    description?: string(name='Description'),
    instanceName?: string(name='InstanceName'),
    network?: string(name='Network'),
    quota?: {
      entityQuota?: int32(name='EntityQuota'),
    }(name='Quota'),
    readCapacity?: int32(name='ReadCapacity'),
    status?: int32(name='Status'),
    tagInfos?: {
      tagInfo?: [ 
      {
        tagKey?: string(name='TagKey'),
        tagValue?: string(name='TagValue'),
      }
    ](name='TagInfo')
    }(name='TagInfos'),
    userId?: string(name='UserId'),
    writeCapacity?: int32(name='WriteCapacity'),
  }(name='InstanceInfo'),
  requestId?: string(name='RequestId'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstance', 'GET', '/', 'json', false, 'json', request);
}

model GetOtsServiceStatusRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model GetOtsServiceStatusResponseBody = {
  data?: boolean(name='Data'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errCode?: string(name='ErrCode'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetOtsServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOtsServiceStatusResponseBody(name='body'),
}

async function getOtsServiceStatus(request: GetOtsServiceStatusRequest): GetOtsServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOtsServiceStatus', 'GET', '/', 'json', false, 'json', request);
}

model InsertInstanceRequest {
  clusterType?: string(name='ClusterType', example='HYBRID', position='Query'),
  description?: string(name='Description', position='Query'),
  instanceName: string(name='InstanceName', example='rec-ots-demo-002', position='Query'),
  network?: string(name='Network', example='VPC_CONSOLE', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tagInfo?: [ 
    {
      tagKey?: string(name='TagKey', example='Environment'),
      tagValue?: string(name='TagValue', example='hangzhou'),
    }
  ](name='TagInfo', position='Query'),
}

model InsertInstanceResponseBody = {
  requestId?: string(name='RequestId', example='C8CE3585-A59B-55E9-BC00-02823DD29217'),
}

model InsertInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InsertInstanceResponseBody(name='body'),
}

async function insertInstance(request: InsertInstanceRequest): InsertInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertInstance', 'POST', '/', 'json', false, 'json', request);
}

model InsertTagsRequest {
  instanceName: string(name='InstanceName', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tagInfo?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagInfo', position='Query'),
}

model InsertTagsResponseBody = {
  requestId?: string(name='RequestId'),
}

model InsertTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InsertTagsResponseBody(name='body'),
}

async function insertTags(request: InsertTagsRequest): InsertTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertTags', 'POST', '/', 'json', false, 'json', request);
}

model ListClusterTypeRequest {
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListClusterTypeResponseBody = {
  clusterTypeDetailList?: {
    clusterTypeDetail?: [ 
    {
      clusterType?: string(name='ClusterType'),
      isMultiAZ?: boolean(name='IsMultiAZ'),
    }
  ](name='ClusterTypeDetail')
  }(name='ClusterTypeDetailList'),
  clusterTypeInfos?: {
    clusterType?: [ string ](name='ClusterType')
  }(name='ClusterTypeInfos'),
  requestId?: string(name='RequestId'),
}

model ListClusterTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClusterTypeResponseBody(name='body'),
}

async function listClusterType(request: ListClusterTypeRequest): ListClusterTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusterType', 'GET', '/', 'json', false, 'json', request);
}

model ListInstanceRequest {
  pageNum?: long(name='PageNum', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tagInfo?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagInfo', position='Query'),
}

model ListInstanceResponseBody = {
  instanceInfos?: {
    instanceInfo?: [ 
    {
      instanceName?: string(name='InstanceName'),
      timestamp?: string(name='Timestamp'),
    }
  ](name='InstanceInfo')
  }(name='InstanceInfos'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceResponseBody(name='body'),
}

async function listInstance(request: ListInstanceRequest): ListInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstance', 'GET', '/', 'json', false, 'json', request);
}

model ListTagsRequest {
  instanceName?: string(name='InstanceName', position='Query'),
  pageNum?: long(name='PageNum', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tagInfo?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagInfo', position='Query'),
}

model ListTagsResponseBody = {
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  tagInfos?: {
    tagInfo?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagInfo')
  }(name='TagInfos'),
  totalCount?: long(name='TotalCount'),
}

model ListTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagsResponseBody(name='body'),
}

async function listTags(request: ListTagsRequest): ListTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTags', 'POST', '/', 'json', false, 'json', request);
}

model ListVpcInfoByInstanceRequest {
  instanceName: string(name='InstanceName', position='Query'),
  pageNum?: long(name='PageNum', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListVpcInfoByInstanceResponseBody = {
  instanceName?: string(name='InstanceName'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
  vpcInfos?: {
    vpcInfo?: [ 
    {
      domain?: string(name='Domain'),
      endpoint?: string(name='Endpoint'),
      instanceVpcName?: string(name='InstanceVpcName'),
      regionNo?: string(name='RegionNo'),
      vpcId?: string(name='VpcId'),
    }
  ](name='VpcInfo')
  }(name='VpcInfos'),
}

model ListVpcInfoByInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVpcInfoByInstanceResponseBody(name='body'),
}

async function listVpcInfoByInstance(request: ListVpcInfoByInstanceRequest): ListVpcInfoByInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpcInfoByInstance', 'GET', '/', 'json', false, 'json', request);
}

model ListVpcInfoByVpcRequest {
  pageNum?: long(name='PageNum', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tagInfo?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagInfo', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
}

model ListVpcInfoByVpcResponseBody = {
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
  vpcId?: string(name='VpcId'),
  vpcInfos?: {
    vpcInfo?: [ 
    {
      domain?: string(name='Domain'),
      endpoint?: string(name='Endpoint'),
      instanceName?: string(name='InstanceName'),
      instanceVpcName?: string(name='InstanceVpcName'),
      regionNo?: string(name='RegionNo'),
    }
  ](name='VpcInfo')
  }(name='VpcInfos'),
}

model ListVpcInfoByVpcResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVpcInfoByVpcResponseBody(name='body'),
}

async function listVpcInfoByVpc(request: ListVpcInfoByVpcRequest): ListVpcInfoByVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpcInfoByVpc', 'GET', '/', 'json', false, 'json', request);
}

model OpenOtsServiceRequest {
}

model OpenOtsServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenOtsServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenOtsServiceResponseBody(name='body'),
}

async function openOtsService(request: OpenOtsServiceRequest): OpenOtsServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenOtsService', 'POST', '/', 'json', false, 'json', request);
}

model UnbindInstance2VpcRequest {
  instanceName: string(name='InstanceName', position='Query'),
  instanceVpcName: string(name='InstanceVpcName', position='Query'),
  regionNo?: string(name='RegionNo', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnbindInstance2VpcResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindInstance2VpcResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindInstance2VpcResponseBody(name='body'),
}

async function unbindInstance2Vpc(request: UnbindInstance2VpcRequest): UnbindInstance2VpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindInstance2Vpc', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceRequest {
  instanceName: string(name='InstanceName', position='Query'),
  network?: string(name='Network', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInstanceResponseBody(name='body'),
}

async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstance', 'POST', '/', 'json', false, 'json', request);
}

