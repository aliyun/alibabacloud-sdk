/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('ots', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model BindInstance2VpcRequest {
  instanceName?: string(name='InstanceName'),
  instanceVpcName?: string(name='InstanceVpcName'),
  network?: string(name='Network'),
  regionNo?: string(name='RegionNo'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  virtualSwitchId?: string(name='VirtualSwitchId'),
  vpcId?: string(name='VpcId'),
}

model BindInstance2VpcResponseBody = {
  domain?: string(name='Domain'),
  endpoint?: string(name='Endpoint'),
  requestId?: string(name='RequestId'),
}

model BindInstance2VpcResponse = {
  headers: map[string]string(name='headers'),
  body: BindInstance2VpcResponseBody(name='body'),
}

async function bindInstance2VpcWithOptions(request: BindInstance2VpcRequest, runtime: Util.RuntimeOptions): BindInstance2VpcResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindInstance2Vpc', '2016-06-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindInstance2Vpc(request: BindInstance2VpcRequest): BindInstance2VpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindInstance2VpcWithOptions(request, runtime);
}

model DeleteInstanceRequest {
  instanceName?: string(name='InstanceName'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteInstance', '2016-06-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model DeleteTagsRequest {
  instanceName?: string(name='InstanceName'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tagInfo?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagInfo'),
}

model DeleteTagsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTagsResponseBody(name='body'),
}

async function deleteTagsWithOptions(request: DeleteTagsRequest, runtime: Util.RuntimeOptions): DeleteTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteTags', '2016-06-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteTags(request: DeleteTagsRequest): DeleteTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTagsWithOptions(request, runtime);
}

model GetInstanceRequest {
  instanceName?: string(name='InstanceName'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetInstanceResponseBody = {
  instanceInfo?: {
    clusterType?: string(name='ClusterType'),
    createTime?: string(name='CreateTime'),
    description?: string(name='Description'),
    instanceName?: string(name='InstanceName'),
    network?: string(name='Network'),
    quota?: {
      entityQuota?: int32(name='EntityQuota'),
    }(name='Quota'),
    readCapacity?: int32(name='ReadCapacity'),
    status?: int32(name='Status'),
    tagInfos?: {
      tagInfo?: [ 
      {
        tagKey?: string(name='TagKey'),
        tagValue?: string(name='TagValue'),
      }
    ](name='TagInfo')
    }(name='TagInfos'),
    userId?: string(name='UserId'),
    writeCapacity?: int32(name='WriteCapacity'),
  }(name='InstanceInfo'),
  requestId?: string(name='RequestId'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstanceWithOptions(request: GetInstanceRequest, runtime: Util.RuntimeOptions): GetInstanceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetInstance', '2016-06-20', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceWithOptions(request, runtime);
}

model GetOtsServiceStatusRequest {
  ownerId?: long(name='OwnerId', description='ownerId'),
}

model GetOtsServiceStatusResponseBody = {
  data?: map[string]any(name='Data', description='data'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage'),
  errCode?: string(name='ErrCode', description='errCode'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model GetOtsServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetOtsServiceStatusResponseBody(name='body'),
}

async function getOtsServiceStatusWithOptions(request: GetOtsServiceStatusRequest, runtime: Util.RuntimeOptions): GetOtsServiceStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetOtsServiceStatus', '2016-06-20', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getOtsServiceStatus(request: GetOtsServiceStatusRequest): GetOtsServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOtsServiceStatusWithOptions(request, runtime);
}

model InsertInstanceRequest {
  clusterType?: string(name='ClusterType'),
  description?: string(name='Description'),
  instanceName?: string(name='InstanceName'),
  network?: string(name='Network'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tagInfo?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagInfo'),
}

model InsertInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model InsertInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: InsertInstanceResponseBody(name='body'),
}

async function insertInstanceWithOptions(request: InsertInstanceRequest, runtime: Util.RuntimeOptions): InsertInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InsertInstance', '2016-06-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function insertInstance(request: InsertInstanceRequest): InsertInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return insertInstanceWithOptions(request, runtime);
}

model InsertTagsRequest {
  instanceName?: string(name='InstanceName'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tagInfo?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagInfo'),
}

model InsertTagsResponseBody = {
  requestId?: string(name='RequestId'),
}

model InsertTagsResponse = {
  headers: map[string]string(name='headers'),
  body: InsertTagsResponseBody(name='body'),
}

async function insertTagsWithOptions(request: InsertTagsRequest, runtime: Util.RuntimeOptions): InsertTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InsertTags', '2016-06-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function insertTags(request: InsertTagsRequest): InsertTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return insertTagsWithOptions(request, runtime);
}

model ListClusterTypeRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListClusterTypeResponseBody = {
  clusterTypeInfos?: {
    clusterType?: [ string ](name='ClusterType')
  }(name='ClusterTypeInfos'),
  requestId?: string(name='RequestId'),
}

model ListClusterTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ListClusterTypeResponseBody(name='body'),
}

async function listClusterTypeWithOptions(request: ListClusterTypeRequest, runtime: Util.RuntimeOptions): ListClusterTypeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListClusterType', '2016-06-20', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listClusterType(request: ListClusterTypeRequest): ListClusterTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClusterTypeWithOptions(request, runtime);
}

model ListInstanceRequest {
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tagInfo?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagInfo'),
}

model ListInstanceResponseBody = {
  instanceInfos?: {
    instanceInfo?: [ 
    {
      instanceName?: string(name='InstanceName'),
      timestamp?: string(name='Timestamp'),
    }
  ](name='InstanceInfo')
  }(name='InstanceInfos'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstanceResponseBody(name='body'),
}

async function listInstanceWithOptions(request: ListInstanceRequest, runtime: Util.RuntimeOptions): ListInstanceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListInstance', '2016-06-20', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listInstance(request: ListInstanceRequest): ListInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceWithOptions(request, runtime);
}

model ListTagsRequest {
  instanceName?: string(name='InstanceName'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tagInfo?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagInfo'),
}

model ListTagsResponseBody = {
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  tagInfos?: {
    tagInfo?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagInfo')
  }(name='TagInfos'),
  totalCount?: long(name='TotalCount'),
}

model ListTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagsResponseBody(name='body'),
}

async function listTagsWithOptions(request: ListTagsRequest, runtime: Util.RuntimeOptions): ListTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTags', '2016-06-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTags(request: ListTagsRequest): ListTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagsWithOptions(request, runtime);
}

model ListVpcInfoByInstanceRequest {
  instanceName?: string(name='InstanceName'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListVpcInfoByInstanceResponseBody = {
  instanceName?: string(name='InstanceName'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
  vpcInfos?: {
    vpcInfo?: [ 
    {
      domain?: string(name='Domain'),
      endpoint?: string(name='Endpoint'),
      instanceVpcName?: string(name='InstanceVpcName'),
      regionNo?: string(name='RegionNo'),
      vpcId?: string(name='VpcId'),
    }
  ](name='VpcInfo')
  }(name='VpcInfos'),
}

model ListVpcInfoByInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcInfoByInstanceResponseBody(name='body'),
}

async function listVpcInfoByInstanceWithOptions(request: ListVpcInfoByInstanceRequest, runtime: Util.RuntimeOptions): ListVpcInfoByInstanceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListVpcInfoByInstance', '2016-06-20', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listVpcInfoByInstance(request: ListVpcInfoByInstanceRequest): ListVpcInfoByInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcInfoByInstanceWithOptions(request, runtime);
}

model ListVpcInfoByVpcRequest {
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tagInfo?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagInfo'),
  vpcId?: string(name='VpcId'),
}

model ListVpcInfoByVpcResponseBody = {
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
  vpcId?: string(name='VpcId'),
  vpcInfos?: {
    vpcInfo?: [ 
    {
      domain?: string(name='Domain'),
      endpoint?: string(name='Endpoint'),
      instanceName?: string(name='InstanceName'),
      instanceVpcName?: string(name='InstanceVpcName'),
      regionNo?: string(name='RegionNo'),
    }
  ](name='VpcInfo')
  }(name='VpcInfos'),
}

model ListVpcInfoByVpcResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcInfoByVpcResponseBody(name='body'),
}

async function listVpcInfoByVpcWithOptions(request: ListVpcInfoByVpcRequest, runtime: Util.RuntimeOptions): ListVpcInfoByVpcResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListVpcInfoByVpc', '2016-06-20', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listVpcInfoByVpc(request: ListVpcInfoByVpcRequest): ListVpcInfoByVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVpcInfoByVpcWithOptions(request, runtime);
}

model OpenOtsServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenOtsServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenOtsServiceResponseBody(name='body'),
}

async function openOtsServiceWithOptions(runtime: Util.RuntimeOptions): OpenOtsServiceResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('OpenOtsService', '2016-06-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function openOtsService(): OpenOtsServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openOtsServiceWithOptions(runtime);
}

model UnbindInstance2VpcRequest {
  instanceName?: string(name='InstanceName'),
  instanceVpcName?: string(name='InstanceVpcName'),
  regionNo?: string(name='RegionNo'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UnbindInstance2VpcResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindInstance2VpcResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindInstance2VpcResponseBody(name='body'),
}

async function unbindInstance2VpcWithOptions(request: UnbindInstance2VpcRequest, runtime: Util.RuntimeOptions): UnbindInstance2VpcResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnbindInstance2Vpc', '2016-06-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unbindInstance2Vpc(request: UnbindInstance2VpcRequest): UnbindInstance2VpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindInstance2VpcWithOptions(request, runtime);
}

model UpdateInstanceRequest {
  instanceName?: string(name='InstanceName'),
  network?: string(name='Network'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdateInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceResponseBody(name='body'),
}

async function updateInstanceWithOptions(request: UpdateInstanceRequest, runtime: Util.RuntimeOptions): UpdateInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateInstance', '2016-06-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInstanceWithOptions(request, runtime);
}

