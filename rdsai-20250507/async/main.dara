/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'RdsAi';
  @version = '2025-05-07';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateAppInstanceRequest {
  appName?: string(name='AppName', example='test-supabase', position='Query'),
  appType?: string(name='AppType', example='supabase', position='Query'),
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz****', position='Query'),
  DBInstanceName?: string(name='DBInstanceName', example='pgm-2ze49qv594vi****', position='Query'),
  dashboardPassword?: string(name='DashboardPassword', example='test_Password', position='Query'),
  dashboardUsername?: string(name='DashboardUsername', example='supabase', position='Query'),
  databasePassword?: string(name='DatabasePassword', example='test_Password', position='Query'),
  instanceClass?: string(name='InstanceClass', example='rdsai.supabase.basic', position='Query'),
  publicNetworkAccessEnabled?: boolean(name='PublicNetworkAccessEnabled', example='false', position='Query'),
  regionId?: string(name='RegionId', example='cn-beijing', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-9dp2hkpm22gxscfgy****', position='Query'),
}

model CreateAppInstanceResponseBody = {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  requestId?: string(name='RequestId', example='FE9C65D7-930F-57A5-A207-8C396329241C'),
}

model CreateAppInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAppInstance  CreateAppInstanceRequest
  * @return CreateAppInstanceResponse
 */
async function createAppInstance(request: CreateAppInstanceRequest): CreateAppInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAppInstanceRequest {
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz****', position='Query'),
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****', position='Query'),
  regionId?: string(name='RegionId', example='cn-beijing', position='Query'),
}

model DeleteAppInstanceResponseBody = {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba***'),
  requestId?: string(name='RequestId', example='FE9C65D7-930F-57A5-A207-8C396329241C'),
}

model DeleteAppInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAppInstance  DeleteAppInstanceRequest
  * @return DeleteAppInstanceResponse
 */
async function deleteAppInstance(request: DeleteAppInstanceRequest): DeleteAppInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAppInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppInstanceAttributeRequest {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****', position='Query'),
  regionId?: string(name='RegionId', example='cn-beijing', position='Query'),
}

model DescribeAppInstanceAttributeResponseBody = {
  appName?: string(name='AppName', example='test-supabase'),
  appType?: string(name='AppType', example='supabase'),
  DBInstanceName?: string(name='DBInstanceName', example='pgm-2ze49qv594vi****'),
  instanceClass?: string(name='InstanceClass', example='rdsai.supabase.basic'),
  instanceMinorVersion?: string(name='InstanceMinorVersion', example='20241231'),
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  publicConnectionString?: string(name='PublicConnectionString', example='8.152. XXX.XXX:8000'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  requestId?: string(name='RequestId', example='FE9C65D7-930F-57A5-A207-8C396329241C'),
  status?: string(name='Status', example='Running'),
  vSwitchId?: string(name='VSwitchId', example='vsw-2zeaepb8k4ku05ov2****'),
  vpcConnectionString?: string(name='VpcConnectionString', example='172.16.XXX.XXX:8000'),
  zoneId?: string(name='ZoneId', example='cn-beijing-i'),
}

model DescribeAppInstanceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppInstanceAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAppInstanceAttribute  DescribeAppInstanceAttributeRequest
  * @return DescribeAppInstanceAttributeResponse
 */
async function describeAppInstanceAttribute(request: DescribeAppInstanceAttributeRequest): DescribeAppInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppInstancesRequest {
  appType?: string(name='AppType', example='supabase', position='Query'),
  DBInstanceName?: string(name='DBInstanceName', example='pgm-2ze49qv594vi****', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  regionId?: string(name='RegionId', example='cn-beijing', position='Query'),
}

model DescribeAppInstancesResponseBody = {
  instances?: [ 
    {
      appName?: string(name='AppName', example='test-supabase'),
      appType?: string(name='AppType', example='supabase'),
      DBInstanceName?: string(name='DBInstanceName', example='pgm-2ze49qv594vi****'),
      instanceClass?: string(name='InstanceClass', example='rdsai.supabase.basic'),
      instanceMinorVersion?: string(name='InstanceMinorVersion', example='20241231'),
      instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
      publicConnectionString?: string(name='PublicConnectionString', example='8.152. XXX.XXX:8000'),
      regionId?: string(name='RegionId', example='cn-beijing'),
      status?: string(name='Status', example='Running'),
      vSwitchId?: string(name='VSwitchId', example='vsw-2zeaepb8k4ku05ov2****'),
      vpcConnectionString?: string(name='VpcConnectionString', example='172.16.XXX.XXX:8000'),
    }
  ](name='Instances'),
  maxResults?: long(name='MaxResults', example='None'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='32DEFB4A-861F-5D1D-ADD5-918E4FD7AB8C'),
  totalCount?: long(name='TotalCount', example='20'),
}

model DescribeAppInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAppInstances  DescribeAppInstancesRequest
  * @return DescribeAppInstancesResponse
 */
async function describeAppInstances(request: DescribeAppInstancesRequest): DescribeAppInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceAuthInfoRequest {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****', position='Query'),
  regionId?: string(name='RegionId', example='cn-beijing', position='Query'),
}

model DescribeInstanceAuthInfoResponseBody = {
  apiKeys?: {
    anonKey?: string(name='AnonKey', description='Supabase ANON_KEY', example='eyxxxJ9.ey****'),
    serviceKey?: string(name='ServiceKey', description='Supabase SERVICE_ROLE_KEY', example='eyxxxJ9.ey****KfQ.DaYxxxt4Q'),
  }(name='ApiKeys', description='API Keys'),
  jwtSecret?: string(name='JwtSecret', example='i5o1XAp4sR*****oyOb3O'),
  requestId?: string(name='RequestId', example='87249A6F-xxx-804C-E1E0AD1FAD90'),
}

model DescribeInstanceAuthInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceAuthInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeInstanceAuthInfo  DescribeInstanceAuthInfoRequest
  * @return DescribeInstanceAuthInfoResponse
 */
async function describeInstanceAuthInfo(request: DescribeInstanceAuthInfoRequest): DescribeInstanceAuthInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceAuthInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceEndpointsRequest {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****', position='Query'),
  regionId?: string(name='RegionId', example='cn-beijing', position='Query'),
}

model DescribeInstanceEndpointsResponseBody = {
  instanceEndpoints?: [ 
    {
      connectionString?: string(name='ConnectionString', example='8.152.XXX.XXX:8000'),
      ip?: string(name='IP', example='8.152.XXX.XXX'),
      ipType?: string(name='IpType', example='public'),
      port?: string(name='Port', example='8000'),
    }
  ](name='InstanceEndpoints'),
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  requestId?: string(name='RequestId', example='32DEFB4A-861F-5D1D-ADD5-918E4FD7AB8C'),
}

model DescribeInstanceEndpointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceEndpointsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeInstanceEndpoints  DescribeInstanceEndpointsRequest
  * @return DescribeInstanceEndpointsResponse
 */
async function describeInstanceEndpoints(request: DescribeInstanceEndpointsRequest): DescribeInstanceEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceEndpoints', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceIpWhitelistRequest {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****', position='Query'),
  regionId?: string(name='RegionId', example='cn-beijing', position='Query'),
}

model DescribeInstanceIpWhitelistResponseBody = {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  ipWhiteListGroups?: [ 
    {
      groupName?: string(name='GroupName', example='default'),
      ipWhitelist?: string(name='IpWhitelist', example='192.168.XXX.XXX/24,10.0.XXX.XXX/24'),
    }
  ](name='IpWhiteListGroups'),
  requestId?: string(name='RequestId', example='32DEFB4A-861F-5D1D-ADD5-918E4FD7AB8C'),
}

model DescribeInstanceIpWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceIpWhitelistResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeInstanceIpWhitelist  DescribeInstanceIpWhitelistRequest
  * @return DescribeInstanceIpWhitelistResponse
 */
async function describeInstanceIpWhitelist(request: DescribeInstanceIpWhitelistRequest): DescribeInstanceIpWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceIpWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceIpWhitelistRequest {
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz****', position='Query'),
  groupName?: string(name='GroupName', example='default', position='Query'),
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****', position='Query'),
  ipWhitelist?: string(name='IpWhitelist', example='10.23.XXX.XXX', position='Query'),
  modifyMode?: string(name='ModifyMode', example='Cover', position='Query'),
  regionId?: string(name='RegionId', example='cn-beijing', position='Query'),
}

model ModifyInstanceIpWhitelistResponseBody = {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  requestId?: string(name='RequestId', example='87249A6F-xxx-804C-E1E0AD1FAD90'),
}

model ModifyInstanceIpWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceIpWhitelistResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyInstanceIpWhitelist  ModifyInstanceIpWhitelistRequest
  * @return ModifyInstanceIpWhitelistResponse
 */
async function modifyInstanceIpWhitelist(request: ModifyInstanceIpWhitelistRequest): ModifyInstanceIpWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceIpWhitelist', 'POST', '/', 'json', false, 'json', request);
}

