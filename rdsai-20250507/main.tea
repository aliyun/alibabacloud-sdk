/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('rdsai', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateAppInstanceRequest {
  appName?: string(name='AppName', example='test-supabase'),
  appType?: string(name='AppType', example='supabase'),
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz****'),
  DBInstanceConfig?: {
    DBInstanceClass?: string(name='DBInstanceClass', example='pg.n2.2c.1m'),
    DBInstanceStorage?: int32(name='DBInstanceStorage', example='100'),
    payType?: string(name='PayType', example='Postpaid'),
  }(name='DBInstanceConfig'),
  DBInstanceName?: string(name='DBInstanceName', example='pgm-2ze49qv594vi****'),
  dashboardPassword?: string(name='DashboardPassword', example='test_Password'),
  dashboardUsername?: string(name='DashboardUsername', example='supabase'),
  databasePassword?: string(name='DatabasePassword', example='test_Password'),
  instanceClass?: string(name='InstanceClass', example='rdsai.supabase.basic'),
  publicNetworkAccessEnabled?: boolean(name='PublicNetworkAccessEnabled', example='false'),
  RAGEnabled?: boolean(name='RAGEnabled'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  vSwitchId?: string(name='VSwitchId', example='vsw-9dp2hkpm22gxscfgy****'),
}

model CreateAppInstanceShrinkRequest {
  appName?: string(name='AppName', example='test-supabase'),
  appType?: string(name='AppType', example='supabase'),
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz****'),
  DBInstanceConfigShrink?: string(name='DBInstanceConfig'),
  DBInstanceName?: string(name='DBInstanceName', example='pgm-2ze49qv594vi****'),
  dashboardPassword?: string(name='DashboardPassword', example='test_Password'),
  dashboardUsername?: string(name='DashboardUsername', example='supabase'),
  databasePassword?: string(name='DatabasePassword', example='test_Password'),
  instanceClass?: string(name='InstanceClass', example='rdsai.supabase.basic'),
  publicNetworkAccessEnabled?: boolean(name='PublicNetworkAccessEnabled', example='false'),
  RAGEnabled?: boolean(name='RAGEnabled'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  vSwitchId?: string(name='VSwitchId', example='vsw-9dp2hkpm22gxscfgy****'),
}

model CreateAppInstanceResponseBody = {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  requestId?: string(name='RequestId', example='FE9C65D7-930F-57A5-A207-8C396329241C'),
}

model CreateAppInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppInstanceResponseBody(name='body'),
}

/**
 * @summary 创建应用服务实例
 *
 * @param tmpReq CreateAppInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAppInstanceResponse
 */
async function createAppInstanceWithOptions(tmpReq: CreateAppInstanceRequest, runtime: Util.RuntimeOptions): CreateAppInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAppInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.DBInstanceConfig)) {
    request.DBInstanceConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.DBInstanceConfig, 'DBInstanceConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.appType)) {
    query['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DBInstanceConfigShrink)) {
    query['DBInstanceConfig'] = request.DBInstanceConfigShrink;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.dashboardPassword)) {
    query['DashboardPassword'] = request.dashboardPassword;
  }
  if (!Util.isUnset(request.dashboardUsername)) {
    query['DashboardUsername'] = request.dashboardUsername;
  }
  if (!Util.isUnset(request.databasePassword)) {
    query['DatabasePassword'] = request.databasePassword;
  }
  if (!Util.isUnset(request.instanceClass)) {
    query['InstanceClass'] = request.instanceClass;
  }
  if (!Util.isUnset(request.publicNetworkAccessEnabled)) {
    query['PublicNetworkAccessEnabled'] = request.publicNetworkAccessEnabled;
  }
  if (!Util.isUnset(request.RAGEnabled)) {
    query['RAGEnabled'] = request.RAGEnabled;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAppInstance',
    version = '2025-05-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建应用服务实例
 *
 * @param request CreateAppInstanceRequest
 * @return CreateAppInstanceResponse
 */
async function createAppInstance(request: CreateAppInstanceRequest): CreateAppInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppInstanceWithOptions(request, runtime);
}

model DeleteAppInstanceRequest {
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz****'),
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model DeleteAppInstanceResponseBody = {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba***'),
  requestId?: string(name='RequestId', example='FE9C65D7-930F-57A5-A207-8C396329241C'),
}

model DeleteAppInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppInstanceResponseBody(name='body'),
}

/**
 * @summary 删除应用服务实例
 *
 * @param request DeleteAppInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAppInstanceResponse
 */
async function deleteAppInstanceWithOptions(request: DeleteAppInstanceRequest, runtime: Util.RuntimeOptions): DeleteAppInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAppInstance',
    version = '2025-05-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除应用服务实例
 *
 * @param request DeleteAppInstanceRequest
 * @return DeleteAppInstanceResponse
 */
async function deleteAppInstance(request: DeleteAppInstanceRequest): DeleteAppInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppInstanceWithOptions(request, runtime);
}

model DescribeAppInstanceAttributeRequest {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model DescribeAppInstanceAttributeResponseBody = {
  appName?: string(name='AppName', example='test-supabase'),
  appType?: string(name='AppType', example='supabase'),
  DBInstanceName?: string(name='DBInstanceName', example='pgm-2ze49qv594vi****'),
  instanceClass?: string(name='InstanceClass', example='rdsai.supabase.basic'),
  instanceMinorVersion?: string(name='InstanceMinorVersion', example='20241231'),
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  publicConnectionString?: string(name='PublicConnectionString', example='8.152. XXX.XXX:8000'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  requestId?: string(name='RequestId', example='FE9C65D7-930F-57A5-A207-8C396329241C'),
  status?: string(name='Status', example='Running'),
  vSwitchId?: string(name='VSwitchId', example='vsw-2zeaepb8k4ku05ov2****'),
  vpcConnectionString?: string(name='VpcConnectionString', example='172.16.XXX.XXX:8000'),
  zoneId?: string(name='ZoneId', example='cn-beijing-i'),
}

model DescribeAppInstanceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppInstanceAttributeResponseBody(name='body'),
}

/**
 * @summary 查询应用服务详情
 *
 * @param request DescribeAppInstanceAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAppInstanceAttributeResponse
 */
async function describeAppInstanceAttributeWithOptions(request: DescribeAppInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeAppInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAppInstanceAttribute',
    version = '2025-05-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询应用服务详情
 *
 * @param request DescribeAppInstanceAttributeRequest
 * @return DescribeAppInstanceAttributeResponse
 */
async function describeAppInstanceAttribute(request: DescribeAppInstanceAttributeRequest): DescribeAppInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppInstanceAttributeWithOptions(request, runtime);
}

model DescribeAppInstancesRequest {
  appType?: string(name='AppType', example='supabase'),
  DBInstanceName?: string(name='DBInstanceName', example='pgm-2ze49qv594vi****'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model DescribeAppInstancesResponseBody = {
  instances?: [ 
    {
      appName?: string(name='AppName', example='test-supabase'),
      appType?: string(name='AppType', example='supabase'),
      DBInstanceName?: string(name='DBInstanceName', example='pgm-2ze49qv594vi****'),
      instanceClass?: string(name='InstanceClass', example='rdsai.supabase.basic'),
      instanceMinorVersion?: string(name='InstanceMinorVersion', example='20241231'),
      instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
      publicConnectionString?: string(name='PublicConnectionString', example='8.152. XXX.XXX:8000'),
      regionId?: string(name='RegionId', example='cn-beijing'),
      status?: string(name='Status', example='Running'),
      vSwitchId?: string(name='VSwitchId', example='vsw-2zeaepb8k4ku05ov2****'),
      vpcConnectionString?: string(name='VpcConnectionString', example='172.16.XXX.XXX:8000'),
    }
  ](name='Instances'),
  maxResults?: long(name='MaxResults', example='None'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='32DEFB4A-861F-5D1D-ADD5-918E4FD7AB8C'),
  totalCount?: long(name='TotalCount', example='20'),
}

model DescribeAppInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppInstancesResponseBody(name='body'),
}

/**
 * @summary 查询应用服务列表
 *
 * @param request DescribeAppInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAppInstancesResponse
 */
async function describeAppInstancesWithOptions(request: DescribeAppInstancesRequest, runtime: Util.RuntimeOptions): DescribeAppInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appType)) {
    query['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAppInstances',
    version = '2025-05-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询应用服务列表
 *
 * @param request DescribeAppInstancesRequest
 * @return DescribeAppInstancesResponse
 */
async function describeAppInstances(request: DescribeAppInstancesRequest): DescribeAppInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppInstancesWithOptions(request, runtime);
}

model DescribeInstanceAuthInfoRequest {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model DescribeInstanceAuthInfoResponseBody = {
  apiKeys?: {
    anonKey?: string(name='AnonKey', description='Supabase ANON_KEY', example='eyxxxJ9.ey****'),
    serviceKey?: string(name='ServiceKey', description='Supabase SERVICE_ROLE_KEY', example='eyxxxJ9.ey****KfQ.DaYxxxt4Q'),
  }(name='ApiKeys', description='API Keys'),
  configList?: [ 
    {
      name?: string(name='Name'),
      value?: string(name='Value'),
    }
  ](name='ConfigList'),
  instanceName?: string(name='InstanceName'),
  jwtSecret?: string(name='JwtSecret', example='i5o1XAp4sR*****oyOb3O'),
  requestId?: string(name='RequestId', example='87249A6F-xxx-804C-E1E0AD1FAD90'),
}

model DescribeInstanceAuthInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceAuthInfoResponseBody(name='body'),
}

/**
 * @summary 查看实例认证信息
 *
 * @param request DescribeInstanceAuthInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstanceAuthInfoResponse
 */
async function describeInstanceAuthInfoWithOptions(request: DescribeInstanceAuthInfoRequest, runtime: Util.RuntimeOptions): DescribeInstanceAuthInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceAuthInfo',
    version = '2025-05-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看实例认证信息
 *
 * @param request DescribeInstanceAuthInfoRequest
 * @return DescribeInstanceAuthInfoResponse
 */
async function describeInstanceAuthInfo(request: DescribeInstanceAuthInfoRequest): DescribeInstanceAuthInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAuthInfoWithOptions(request, runtime);
}

model DescribeInstanceEndpointsRequest {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model DescribeInstanceEndpointsResponseBody = {
  instanceEndpoints?: [ 
    {
      connectionString?: string(name='ConnectionString', example='8.152.XXX.XXX:8000'),
      IP?: string(name='IP', example='8.152.XXX.XXX'),
      ipType?: string(name='IpType', example='public'),
      port?: string(name='Port', example='8000'),
    }
  ](name='InstanceEndpoints'),
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  requestId?: string(name='RequestId', example='32DEFB4A-861F-5D1D-ADD5-918E4FD7AB8C'),
}

model DescribeInstanceEndpointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceEndpointsResponseBody(name='body'),
}

/**
 * @summary 查看服务连接信息
 *
 * @param request DescribeInstanceEndpointsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstanceEndpointsResponse
 */
async function describeInstanceEndpointsWithOptions(request: DescribeInstanceEndpointsRequest, runtime: Util.RuntimeOptions): DescribeInstanceEndpointsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceEndpoints',
    version = '2025-05-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看服务连接信息
 *
 * @param request DescribeInstanceEndpointsRequest
 * @return DescribeInstanceEndpointsResponse
 */
async function describeInstanceEndpoints(request: DescribeInstanceEndpointsRequest): DescribeInstanceEndpointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceEndpointsWithOptions(request, runtime);
}

model DescribeInstanceIpWhitelistRequest {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model DescribeInstanceIpWhitelistResponseBody = {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  ipWhiteListGroups?: [ 
    {
      groupName?: string(name='GroupName', example='default'),
      ipWhitelist?: string(name='IpWhitelist', example='192.168.XXX.XXX/24,10.0.XXX.XXX/24'),
    }
  ](name='IpWhiteListGroups'),
  requestId?: string(name='RequestId', example='32DEFB4A-861F-5D1D-ADD5-918E4FD7AB8C'),
}

model DescribeInstanceIpWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceIpWhitelistResponseBody(name='body'),
}

/**
 * @summary 查询服务白名单
 *
 * @param request DescribeInstanceIpWhitelistRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstanceIpWhitelistResponse
 */
async function describeInstanceIpWhitelistWithOptions(request: DescribeInstanceIpWhitelistRequest, runtime: Util.RuntimeOptions): DescribeInstanceIpWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceIpWhitelist',
    version = '2025-05-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询服务白名单
 *
 * @param request DescribeInstanceIpWhitelistRequest
 * @return DescribeInstanceIpWhitelistResponse
 */
async function describeInstanceIpWhitelist(request: DescribeInstanceIpWhitelistRequest): DescribeInstanceIpWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceIpWhitelistWithOptions(request, runtime);
}

model DescribeInstanceRAGConfigRequest {
  instanceName?: string(name='InstanceName', description='This parameter is required.', example='ra-supabase-8moov5lxba***'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model DescribeInstanceRAGConfigResponseBody = {
  configList?: [ 
    {
      name?: string(name='Name', example='LLM_MODEL'),
      value?: string(name='Value', example='qwen-flash'),
    }
  ](name='ConfigList'),
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  requestId?: string(name='RequestId', example='FE9C65D7-930F-57A5-A207-8C396329241C'),
  status?: boolean(name='Status', example='true'),
}

model DescribeInstanceRAGConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceRAGConfigResponseBody(name='body'),
}

/**
 * @summary 查看实例RAG配置
 *
 * @param request DescribeInstanceRAGConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstanceRAGConfigResponse
 */
async function describeInstanceRAGConfigWithOptions(request: DescribeInstanceRAGConfigRequest, runtime: Util.RuntimeOptions): DescribeInstanceRAGConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceRAGConfig',
    version = '2025-05-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看实例RAG配置
 *
 * @param request DescribeInstanceRAGConfigRequest
 * @return DescribeInstanceRAGConfigResponse
 */
async function describeInstanceRAGConfig(request: DescribeInstanceRAGConfigRequest): DescribeInstanceRAGConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceRAGConfigWithOptions(request, runtime);
}

model DescribeInstanceSSLRequest {
  instanceName?: string(name='InstanceName', description='This parameter is required.', example='ra-supabase-8moov5lxba****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model DescribeInstanceSSLResponseBody = {
  CAType?: string(name='CAType', example='custom'),
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  requestId?: string(name='RequestId', example='32DEFB4A-861F-5D1D-ADD5-918E4FD7AB8C'),
  SSLEnabled?: string(name='SSLEnabled', example='1'),
  serverCert?: string(name='ServerCert', example='-----BEGIN CERTIFICATE-----MIID*****QqEP-----END CERTIFICATE-----'),
  serverKey?: string(name='ServerKey', example='-----BEGIN PRIVATE KEY-----MIIE****ihfg==-----END PRIVATE KEY-----'),
}

model DescribeInstanceSSLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceSSLResponseBody(name='body'),
}

/**
 * @summary 查看实例SSL配置
 *
 * @param request DescribeInstanceSSLRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstanceSSLResponse
 */
async function describeInstanceSSLWithOptions(request: DescribeInstanceSSLRequest, runtime: Util.RuntimeOptions): DescribeInstanceSSLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceSSL',
    version = '2025-05-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看实例SSL配置
 *
 * @param request DescribeInstanceSSLRequest
 * @return DescribeInstanceSSLResponse
 */
async function describeInstanceSSL(request: DescribeInstanceSSLRequest): DescribeInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSSLWithOptions(request, runtime);
}

model DescribeInstanceStorageConfigRequest {
  instanceName?: string(name='InstanceName', description='This parameter is required.', example='ra-supabase-8moov5lxba****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model DescribeInstanceStorageConfigResponseBody = {
  configList?: [ 
    {
      name?: string(name='Name', example='REGION'),
      value?: string(name='Value', example='cn-beijing'),
    }
  ](name='ConfigList'),
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  requestId?: string(name='RequestId', example='FE9C65D7-930F-57A5-A207-8C396329241C'),
}

model DescribeInstanceStorageConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceStorageConfigResponseBody(name='body'),
}

/**
 * @summary 查看实例存储配置
 *
 * @param request DescribeInstanceStorageConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstanceStorageConfigResponse
 */
async function describeInstanceStorageConfigWithOptions(request: DescribeInstanceStorageConfigRequest, runtime: Util.RuntimeOptions): DescribeInstanceStorageConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceStorageConfig',
    version = '2025-05-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看实例存储配置
 *
 * @param request DescribeInstanceStorageConfigRequest
 * @return DescribeInstanceStorageConfigResponse
 */
async function describeInstanceStorageConfig(request: DescribeInstanceStorageConfigRequest): DescribeInstanceStorageConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceStorageConfigWithOptions(request, runtime);
}

model ModifyInstanceAuthConfigRequest {
  configList?: [ 
    {
      name?: string(name='Name', example='GOTRUE_SITE_URL'),
      value?: string(name='Value', example='http://8.152. XXX.XXX'),
    }
  ](name='ConfigList'),
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model ModifyInstanceAuthConfigShrinkRequest {
  configListShrink?: string(name='ConfigList'),
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model ModifyInstanceAuthConfigResponseBody = {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  requestId?: string(name='RequestId', example='FE9C65D7-930F-57A5-A207-8C396329241C'),
}

model ModifyInstanceAuthConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceAuthConfigResponseBody(name='body'),
}

/**
 * @summary 修改Supabase Auth相关配置
 *
 * @param tmpReq ModifyInstanceAuthConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyInstanceAuthConfigResponse
 */
async function modifyInstanceAuthConfigWithOptions(tmpReq: ModifyInstanceAuthConfigRequest, runtime: Util.RuntimeOptions): ModifyInstanceAuthConfigResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyInstanceAuthConfigShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.configList)) {
    request.configListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configList, 'ConfigList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.configListShrink)) {
    query['ConfigList'] = request.configListShrink;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceAuthConfig',
    version = '2025-05-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改Supabase Auth相关配置
 *
 * @param request ModifyInstanceAuthConfigRequest
 * @return ModifyInstanceAuthConfigResponse
 */
async function modifyInstanceAuthConfig(request: ModifyInstanceAuthConfigRequest): ModifyInstanceAuthConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAuthConfigWithOptions(request, runtime);
}

model ModifyInstanceIpWhitelistRequest {
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz****'),
  groupName?: string(name='GroupName', example='default'),
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  ipWhitelist?: string(name='IpWhitelist', example='10.23.XXX.XXX'),
  modifyMode?: string(name='ModifyMode', example='Cover'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model ModifyInstanceIpWhitelistResponseBody = {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  requestId?: string(name='RequestId', example='87249A6F-xxx-804C-E1E0AD1FAD90'),
}

model ModifyInstanceIpWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceIpWhitelistResponseBody(name='body'),
}

/**
 * @summary 修改服务白名单
 *
 * @param request ModifyInstanceIpWhitelistRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyInstanceIpWhitelistResponse
 */
async function modifyInstanceIpWhitelistWithOptions(request: ModifyInstanceIpWhitelistRequest, runtime: Util.RuntimeOptions): ModifyInstanceIpWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.ipWhitelist)) {
    query['IpWhitelist'] = request.ipWhitelist;
  }
  if (!Util.isUnset(request.modifyMode)) {
    query['ModifyMode'] = request.modifyMode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceIpWhitelist',
    version = '2025-05-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改服务白名单
 *
 * @param request ModifyInstanceIpWhitelistRequest
 * @return ModifyInstanceIpWhitelistResponse
 */
async function modifyInstanceIpWhitelist(request: ModifyInstanceIpWhitelistRequest): ModifyInstanceIpWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceIpWhitelistWithOptions(request, runtime);
}

model ModifyInstanceRAGConfigRequest {
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz****'),
  configList?: [ 
    {
      name?: string(name='Name', example='LLM_MODEL'),
      value?: string(name='Value', example='qwen-flash'),
    }
  ](name='ConfigList'),
  instanceName?: string(name='InstanceName', description='This parameter is required.', example='ra-supabase-8moov5lxba****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  status?: boolean(name='Status', example='true'),
}

model ModifyInstanceRAGConfigShrinkRequest {
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz****'),
  configListShrink?: string(name='ConfigList'),
  instanceName?: string(name='InstanceName', description='This parameter is required.', example='ra-supabase-8moov5lxba****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  status?: boolean(name='Status', example='true'),
}

model ModifyInstanceRAGConfigResponseBody = {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  requestId?: string(name='RequestId', example='FE9C65D7-930F-57A5-A207-8C396329241C'),
  status?: string(name='Status', example='true'),
}

model ModifyInstanceRAGConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceRAGConfigResponseBody(name='body'),
}

/**
 * @summary 修改实例RAG配置
 *
 * @param tmpReq ModifyInstanceRAGConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyInstanceRAGConfigResponse
 */
async function modifyInstanceRAGConfigWithOptions(tmpReq: ModifyInstanceRAGConfigRequest, runtime: Util.RuntimeOptions): ModifyInstanceRAGConfigResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyInstanceRAGConfigShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.configList)) {
    request.configListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configList, 'ConfigList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configListShrink)) {
    query['ConfigList'] = request.configListShrink;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceRAGConfig',
    version = '2025-05-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改实例RAG配置
 *
 * @param request ModifyInstanceRAGConfigRequest
 * @return ModifyInstanceRAGConfigResponse
 */
async function modifyInstanceRAGConfig(request: ModifyInstanceRAGConfigRequest): ModifyInstanceRAGConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceRAGConfigWithOptions(request, runtime);
}

model ModifyInstanceSSLRequest {
  CAType?: string(name='CAType', example='custom'),
  instanceName?: string(name='InstanceName', description='This parameter is required.', example='ra-supabase-8moov5lxba****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  SSLEnabled?: int32(name='SSLEnabled', description='This parameter is required.', example='1'),
  serverCert?: string(name='ServerCert', example='-----BEGIN CERTIFICATE-----MIID*****QqEP-----END CERTIFICATE-----'),
  serverKey?: string(name='ServerKey', example='-----BEGIN PRIVATE KEY-----MIIE****ihfg==-----END PRIVATE KEY-----'),
}

model ModifyInstanceSSLResponseBody = {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  requestId?: string(name='RequestId', example='FE9C65D7-930F-57A5-A207-8C396329241C'),
}

model ModifyInstanceSSLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceSSLResponseBody(name='body'),
}

/**
 * @summary 修改实例SSL配置
 *
 * @param request ModifyInstanceSSLRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyInstanceSSLResponse
 */
async function modifyInstanceSSLWithOptions(request: ModifyInstanceSSLRequest, runtime: Util.RuntimeOptions): ModifyInstanceSSLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.CAType)) {
    query['CAType'] = request.CAType;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.SSLEnabled)) {
    query['SSLEnabled'] = request.SSLEnabled;
  }
  if (!Util.isUnset(request.serverCert)) {
    query['ServerCert'] = request.serverCert;
  }
  if (!Util.isUnset(request.serverKey)) {
    query['ServerKey'] = request.serverKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceSSL',
    version = '2025-05-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改实例SSL配置
 *
 * @param request ModifyInstanceSSLRequest
 * @return ModifyInstanceSSLResponse
 */
async function modifyInstanceSSL(request: ModifyInstanceSSLRequest): ModifyInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceSSLWithOptions(request, runtime);
}

model ModifyInstanceStorageConfigRequest {
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz****'),
  configList?: [ 
    {
      name?: string(name='Name', example='TENANT_ID'),
      value?: string(name='Value', example='test-prefix'),
    }
  ](name='ConfigList'),
  instanceName?: string(name='InstanceName', description='This parameter is required.', example='ra-supabase-8moov5lxba****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model ModifyInstanceStorageConfigShrinkRequest {
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz****'),
  configListShrink?: string(name='ConfigList'),
  instanceName?: string(name='InstanceName', description='This parameter is required.', example='ra-supabase-8moov5lxba****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model ModifyInstanceStorageConfigResponseBody = {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  requestId?: string(name='RequestId', example='FE9C65D7-930F-57A5-A207-8C396329241C'),
}

model ModifyInstanceStorageConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceStorageConfigResponseBody(name='body'),
}

/**
 * @summary 修改实例存储配置
 *
 * @param tmpReq ModifyInstanceStorageConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyInstanceStorageConfigResponse
 */
async function modifyInstanceStorageConfigWithOptions(tmpReq: ModifyInstanceStorageConfigRequest, runtime: Util.RuntimeOptions): ModifyInstanceStorageConfigResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyInstanceStorageConfigShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.configList)) {
    request.configListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configList, 'ConfigList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configListShrink)) {
    query['ConfigList'] = request.configListShrink;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceStorageConfig',
    version = '2025-05-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改实例存储配置
 *
 * @param request ModifyInstanceStorageConfigRequest
 * @return ModifyInstanceStorageConfigResponse
 */
async function modifyInstanceStorageConfig(request: ModifyInstanceStorageConfigRequest): ModifyInstanceStorageConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceStorageConfigWithOptions(request, runtime);
}

model ResetInstancePasswordRequest {
  dashboardPassword?: string(name='DashboardPassword', description='This parameter is required.', example='test_Password'),
  instanceName?: string(name='InstanceName', description='This parameter is required.', example='ra-supabase-8moov5lxba****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model ResetInstancePasswordResponseBody = {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  requestId?: string(name='RequestId', example='FE9C65D7-930F-57A5-A207-8C396329241C'),
}

model ResetInstancePasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetInstancePasswordResponseBody(name='body'),
}

/**
 * @summary 重置实例密码
 *
 * @param request ResetInstancePasswordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResetInstancePasswordResponse
 */
async function resetInstancePasswordWithOptions(request: ResetInstancePasswordRequest, runtime: Util.RuntimeOptions): ResetInstancePasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dashboardPassword)) {
    query['DashboardPassword'] = request.dashboardPassword;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetInstancePassword',
    version = '2025-05-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 重置实例密码
 *
 * @param request ResetInstancePasswordRequest
 * @return ResetInstancePasswordResponse
 */
async function resetInstancePassword(request: ResetInstancePasswordRequest): ResetInstancePasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetInstancePasswordWithOptions(request, runtime);
}

model RestartInstanceRequest {
  instanceName?: string(name='InstanceName', description='This parameter is required.', example='ra-supabase-8moov5lxba****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model RestartInstanceResponseBody = {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  requestId?: string(name='RequestId', example='FE9C65D7-930F-57A5-A207-8C396329241C'),
}

model RestartInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartInstanceResponseBody(name='body'),
}

/**
 * @summary 重启实例
 *
 * @param request RestartInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RestartInstanceResponse
 */
async function restartInstanceWithOptions(request: RestartInstanceRequest, runtime: Util.RuntimeOptions): RestartInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestartInstance',
    version = '2025-05-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 重启实例
 *
 * @param request RestartInstanceRequest
 * @return RestartInstanceResponse
 */
async function restartInstance(request: RestartInstanceRequest): RestartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartInstanceWithOptions(request, runtime);
}

model StartInstanceRequest {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model StartInstanceResponseBody = {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  requestId?: string(name='RequestId', example='FE9C65D7-930F-57A5-A207-8C396329241C'),
}

model StartInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartInstanceResponseBody(name='body'),
}

/**
 * @summary 启动实例
 *
 * @param request StartInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartInstanceResponse
 */
async function startInstanceWithOptions(request: StartInstanceRequest, runtime: Util.RuntimeOptions): StartInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartInstance',
    version = '2025-05-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 启动实例
 *
 * @param request StartInstanceRequest
 * @return StartInstanceResponse
 */
async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startInstanceWithOptions(request, runtime);
}

model StopInstanceRequest {
  instanceName?: string(name='InstanceName', description='This parameter is required.', example='ra-supabase-8moov5lxba****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model StopInstanceResponseBody = {
  instanceName?: string(name='InstanceName', example='ra-supabase-8moov5lxba****'),
  requestId?: string(name='RequestId', example='FE9C65D7-930F-57A5-A207-8C396329241C'),
}

model StopInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopInstanceResponseBody(name='body'),
}

/**
 * @summary 暂停实例
 *
 * @param request StopInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopInstanceResponse
 */
async function stopInstanceWithOptions(request: StopInstanceRequest, runtime: Util.RuntimeOptions): StopInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopInstance',
    version = '2025-05-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 暂停实例
 *
 * @param request StopInstanceRequest
 * @return StopInstanceResponse
 */
async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstanceWithOptions(request, runtime);
}

