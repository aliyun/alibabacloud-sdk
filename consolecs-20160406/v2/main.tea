/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('consolecs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model GetOpenApiListRequest {
  requestId?: string(name='RequestId'),
}

model GetOpenApiListResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  openApiString?: string(name='OpenApiString'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetOpenApiListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOpenApiListResponseBody(name='body'),
}

/**
 * @param request GetOpenApiListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOpenApiListResponse
 */
async function getOpenApiListWithOptions(request: GetOpenApiListRequest, runtime: $RuntimeOptions): GetOpenApiListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetOpenApiList',
    version = '2016-04-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request GetOpenApiListRequest
 * @return GetOpenApiListResponse
 */
async function getOpenApiList(request: GetOpenApiListRequest): GetOpenApiListResponse {
  var runtime = new $RuntimeOptions{};
  return getOpenApiListWithOptions(request, runtime);
}

model ListConsoleProductResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      belongedCategory?: string(name='BelongedCategory'),
      categories?: [ string ](name='Categories'),
      channelLinks?: [ string ](name='ChannelLinks'),
      docId?: string(name='DocId'),
      keywords?: [ string ](name='Keywords'),
      names?: string(name='Names'),
      pinyin?: string(name='Pinyin'),
      productId?: string(name='ProductId'),
      relatedConsoleAppId?: string(name='RelatedConsoleAppId'),
      relatedPipId?: string(name='RelatedPipId'),
      showInNav?: boolean(name='ShowInNav'),
      supportedAccounts?: [ string ](name='SupportedAccounts'),
      supportedChannels?: [ string ](name='SupportedChannels'),
      tag?: string(name='Tag'),
      tagExpireTime?: string(name='TagExpireTime'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListConsoleProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConsoleProductResponseBody(name='body'),
}

/**
 * @param request ListConsoleProductRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListConsoleProductResponse
 */
async function listConsoleProductWithOptions(runtime: $RuntimeOptions): ListConsoleProductResponse {
  var req = new OpenApiUtil.OpenApiRequest{};
  var params = new OpenApiUtil.Params{
    action = 'ListConsoleProduct',
    version = '2016-04-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @return ListConsoleProductResponse
 */
async function listConsoleProduct(): ListConsoleProductResponse {
  var runtime = new $RuntimeOptions{};
  return listConsoleProductWithOptions(runtime);
}

