/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Consolecs';
  @version = '2016-04-06';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GetOpenApiListRequest {
  requestId?: string(name='RequestId', position='Query'),
}

model GetOpenApiListResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  openApiString?: string(name='OpenApiString'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetOpenApiListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOpenApiListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOpenApiList  GetOpenApiListRequest
  * @return GetOpenApiListResponse
 */
async function getOpenApiList(request: GetOpenApiListRequest): GetOpenApiListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOpenApiList', 'POST', '/', 'json', false, 'json', request);
}

model ListConsoleProductRequest {
}

model ListConsoleProductResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      belongedCategory?: string(name='BelongedCategory'),
      categories?: [ string ](name='Categories'),
      channelLinks?: [ string ](name='ChannelLinks'),
      docId?: string(name='DocId'),
      keywords?: [ string ](name='Keywords'),
      names?: string(name='Names'),
      pinyin?: string(name='Pinyin'),
      productId?: string(name='ProductId'),
      relatedConsoleAppId?: string(name='RelatedConsoleAppId'),
      relatedPipId?: string(name='RelatedPipId'),
      showInNav?: boolean(name='ShowInNav'),
      supportedAccounts?: [ string ](name='SupportedAccounts'),
      supportedChannels?: [ string ](name='SupportedChannels'),
      tag?: string(name='Tag'),
      tagExpireTime?: string(name='TagExpireTime'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListConsoleProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConsoleProductResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListConsoleProduct  ListConsoleProductRequest
  * @return ListConsoleProductResponse
 */
async function listConsoleProduct(request: ListConsoleProductRequest): ListConsoleProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConsoleProduct', 'POST', '/', 'json', false, 'json', request);
}

