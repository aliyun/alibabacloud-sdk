/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('lvwangwatermark', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddAudioAsyncRequest {
  sourceIp?: string(name='SourceIp'),
  watermarkId?: string(name='WatermarkId'),
  urlList?: [ 
    {
      sourceUrl?: string(name='sourceUrl'),
      dataId?: string(name='dataId'),
    }
  ](name='urlList'),
}

model AddAudioAsyncResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      taskUid?: string(name='TaskUid'),
      dataId?: string(name='DataId'),
    }
  ](name='Data'),
}

model AddAudioAsyncResponse = {
  headers: map[string]string(name='headers'),
  body: AddAudioAsyncResponseBody(name='body'),
}

async function addAudioAsyncWithOptions(request: AddAudioAsyncRequest, runtime: Util.RuntimeOptions): AddAudioAsyncResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddAudioAsync', '2021-01-04', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addAudioAsync(request: AddAudioAsyncRequest): AddAudioAsyncResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAudioAsyncWithOptions(request, runtime);
}

model AddImageAsyncRequest {
  sourceIp?: string(name='SourceIp'),
  watermarkId?: string(name='WatermarkId'),
  urlList?: [ 
    {
      sourceUrl?: string(name='sourceUrl'),
      dataId?: string(name='dataId'),
    }
  ](name='urlList'),
}

model AddImageAsyncResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      taskUid?: string(name='TaskUid'),
      dataId?: string(name='DataId'),
    }
  ](name='Data'),
}

model AddImageAsyncResponse = {
  headers: map[string]string(name='headers'),
  body: AddImageAsyncResponseBody(name='body'),
}

async function addImageAsyncWithOptions(request: AddImageAsyncRequest, runtime: Util.RuntimeOptions): AddImageAsyncResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddImageAsync', '2021-01-04', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addImageAsync(request: AddImageAsyncRequest): AddImageAsyncResponse {
  var runtime = new Util.RuntimeOptions{};
  return addImageAsyncWithOptions(request, runtime);
}

model AddImageSyncRequest {
  sourceIp?: string(name='SourceIp'),
  watermarkId?: string(name='WatermarkId'),
  urlList?: [ 
    {
      sourceUrl?: string(name='sourceUrl'),
      dataId?: string(name='dataId'),
    }
  ](name='urlList'),
}

model AddImageSyncResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      resultUrl?: string(name='ResultUrl'),
      dataId?: string(name='dataId'),
    }
  ](name='Data'),
}

model AddImageSyncResponse = {
  headers: map[string]string(name='headers'),
  body: AddImageSyncResponseBody(name='body'),
}

async function addImageSyncWithOptions(request: AddImageSyncRequest, runtime: Util.RuntimeOptions): AddImageSyncResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddImageSync', '2021-01-04', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addImageSync(request: AddImageSyncRequest): AddImageSyncResponse {
  var runtime = new Util.RuntimeOptions{};
  return addImageSyncWithOptions(request, runtime);
}

model AddVideoAsyncRequest {
  sourceIp?: string(name='SourceIp'),
  watermarkId?: string(name='WatermarkId'),
  urlList?: [ 
    {
      sourceUrl?: string(name='sourceUrl'),
      dataId?: string(name='dataId'),
    }
  ](name='urlList'),
}

model AddVideoAsyncResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      taskUid?: string(name='TaskUid'),
      dataId?: string(name='DataId'),
    }
  ](name='Data'),
}

model AddVideoAsyncResponse = {
  headers: map[string]string(name='headers'),
  body: AddVideoAsyncResponseBody(name='body'),
}

async function addVideoAsyncWithOptions(request: AddVideoAsyncRequest, runtime: Util.RuntimeOptions): AddVideoAsyncResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddVideoAsync', '2021-01-04', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addVideoAsync(request: AddVideoAsyncRequest): AddVideoAsyncResponse {
  var runtime = new Util.RuntimeOptions{};
  return addVideoAsyncWithOptions(request, runtime);
}

model GetAudioAddRequest {
  sourceIp?: string(name='SourceIp'),
  taskId?: string(name='TaskId'),
}

model GetAudioAddResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    status?: string(name='Status'),
    sourceUrl?: string(name='SourceUrl'),
    dataId?: string(name='DataId'),
    gmtModified?: long(name='GmtModified'),
    mediaType?: string(name='MediaType'),
    msg?: string(name='Msg'),
    taskUid?: string(name='TaskUid'),
    appId?: long(name='AppId'),
    gmtCreate?: long(name='GmtCreate'),
    optType?: string(name='OptType'),
    finishedTime?: long(name='FinishedTime'),
    id?: long(name='Id'),
  }(name='Data'),
}

model GetAudioAddResponse = {
  headers: map[string]string(name='headers'),
  body: GetAudioAddResponseBody(name='body'),
}

async function getAudioAddWithOptions(request: GetAudioAddRequest, runtime: Util.RuntimeOptions): GetAudioAddResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAudioAdd', '2021-01-04', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAudioAdd(request: GetAudioAddRequest): GetAudioAddResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAudioAddWithOptions(request, runtime);
}

model GetAudioAsyncRequest {
  sourceIp?: string(name='SourceIp'),
  appId?: int32(name='AppId'),
  urlList?: [ 
    {
      sourceUrl?: string(name='sourceUrl'),
      dataId?: string(name='dataId'),
    }
  ](name='urlList'),
}

model GetAudioAsyncResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      taskUid?: string(name='TaskUid'),
      dataId?: string(name='DataId'),
    }
  ](name='Data'),
}

model GetAudioAsyncResponse = {
  headers: map[string]string(name='headers'),
  body: GetAudioAsyncResponseBody(name='body'),
}

async function getAudioAsyncWithOptions(request: GetAudioAsyncRequest, runtime: Util.RuntimeOptions): GetAudioAsyncResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAudioAsync', '2021-01-04', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAudioAsync(request: GetAudioAsyncRequest): GetAudioAsyncResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAudioAsyncWithOptions(request, runtime);
}

model GetAudioExtractRequest {
  sourceIp?: string(name='SourceIp'),
  taskId?: string(name='TaskId'),
}

model GetAudioExtractResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    status?: string(name='Status'),
    sourceUrl?: string(name='SourceUrl'),
    resultUrl?: string(name='ResultUrl'),
    dataId?: string(name='DataId'),
    gmtModified?: long(name='GmtModified'),
    mediaType?: string(name='MediaType'),
    msg?: string(name='Msg'),
    taskUid?: string(name='TaskUid'),
    appId?: long(name='AppId'),
    gmtCreate?: long(name='GmtCreate'),
    optType?: string(name='OptType'),
    finishedTime?: long(name='FinishedTime'),
    id?: long(name='Id'),
  }(name='Data'),
}

model GetAudioExtractResponse = {
  headers: map[string]string(name='headers'),
  body: GetAudioExtractResponseBody(name='body'),
}

async function getAudioExtractWithOptions(request: GetAudioExtractRequest, runtime: Util.RuntimeOptions): GetAudioExtractResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAudioExtract', '2021-01-04', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAudioExtract(request: GetAudioExtractRequest): GetAudioExtractResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAudioExtractWithOptions(request, runtime);
}

model GetAudioTraceRequest {
  sourceIp?: string(name='SourceIp'),
  appId?: long(name='AppId'),
  fileUid?: string(name='FileUid'),
  userInfoList?: [ string ](name='userInfoList'),
}

model GetAudioTraceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      resultUrl?: string(name='ResultUrl'),
      userInfo?: string(name='UserInfo'),
    }
  ](name='Data'),
}

model GetAudioTraceResponse = {
  headers: map[string]string(name='headers'),
  body: GetAudioTraceResponseBody(name='body'),
}

async function getAudioTraceWithOptions(request: GetAudioTraceRequest, runtime: Util.RuntimeOptions): GetAudioTraceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAudioTrace', '2021-01-04', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAudioTrace(request: GetAudioTraceRequest): GetAudioTraceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAudioTraceWithOptions(request, runtime);
}

model GetImageAsyncRequest {
  sourceIp?: string(name='SourceIp'),
  appId?: long(name='AppId'),
  urlList?: [ 
    {
      sourceUrl?: string(name='sourceUrl'),
      dataId?: string(name='dataId'),
    }
  ](name='urlList'),
}

model GetImageAsyncResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      taskUid?: string(name='TaskUid'),
      dataId?: string(name='DataId'),
    }
  ](name='Data'),
}

model GetImageAsyncResponse = {
  headers: map[string]string(name='headers'),
  body: GetImageAsyncResponseBody(name='body'),
}

async function getImageAsyncWithOptions(request: GetImageAsyncRequest, runtime: Util.RuntimeOptions): GetImageAsyncResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetImageAsync', '2021-01-04', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getImageAsync(request: GetImageAsyncRequest): GetImageAsyncResponse {
  var runtime = new Util.RuntimeOptions{};
  return getImageAsyncWithOptions(request, runtime);
}

model GetImageSyncRequest {
  sourceIp?: string(name='SourceIp'),
  appId?: long(name='AppId'),
  urlList?: [ 
    {
      sourceUrl?: string(name='sourceUrl'),
      dataId?: string(name='dataId'),
    }
  ](name='urlList'),
}

model GetImageSyncResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      resultUrl?: string(name='ResultUrl'),
      dataId?: string(name='dataId'),
    }
  ](name='Data'),
}

model GetImageSyncResponse = {
  headers: map[string]string(name='headers'),
  body: GetImageSyncResponseBody(name='body'),
}

async function getImageSyncWithOptions(request: GetImageSyncRequest, runtime: Util.RuntimeOptions): GetImageSyncResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetImageSync', '2021-01-04', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getImageSync(request: GetImageSyncRequest): GetImageSyncResponse {
  var runtime = new Util.RuntimeOptions{};
  return getImageSyncWithOptions(request, runtime);
}

model GetVideoAddRequest {
  sourceIp?: string(name='SourceIp'),
  taskId?: string(name='TaskId'),
}

model GetVideoAddResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    status?: string(name='Status'),
    sourceUrl?: string(name='SourceUrl'),
    dataId?: string(name='DataId'),
    gmtModified?: long(name='GmtModified'),
    mediaType?: string(name='MediaType'),
    msg?: string(name='Msg'),
    taskUid?: string(name='TaskUid'),
    appId?: long(name='AppId'),
    gmtCreate?: long(name='GmtCreate'),
    optType?: string(name='OptType'),
    finishedTime?: long(name='FinishedTime'),
    id?: long(name='Id'),
  }(name='Data'),
}

model GetVideoAddResponse = {
  headers: map[string]string(name='headers'),
  body: GetVideoAddResponseBody(name='body'),
}

async function getVideoAddWithOptions(request: GetVideoAddRequest, runtime: Util.RuntimeOptions): GetVideoAddResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetVideoAdd', '2021-01-04', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getVideoAdd(request: GetVideoAddRequest): GetVideoAddResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVideoAddWithOptions(request, runtime);
}

model GetVideoAsyncRequest {
  sourceIp?: string(name='SourceIp'),
  appId?: long(name='AppId'),
  urlList?: [ 
    {
      sourceUrl?: string(name='sourceUrl'),
      waterMarkType?: string(name='waterMarkType'),
      dataId?: string(name='dataId'),
    }
  ](name='urlList'),
}

model GetVideoAsyncResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      taskUid?: string(name='TaskUid'),
      dataId?: string(name='DataId'),
    }
  ](name='Data'),
}

model GetVideoAsyncResponse = {
  headers: map[string]string(name='headers'),
  body: GetVideoAsyncResponseBody(name='body'),
}

async function getVideoAsyncWithOptions(request: GetVideoAsyncRequest, runtime: Util.RuntimeOptions): GetVideoAsyncResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetVideoAsync', '2021-01-04', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getVideoAsync(request: GetVideoAsyncRequest): GetVideoAsyncResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVideoAsyncWithOptions(request, runtime);
}

model GetVideoExtractRequest {
  sourceIp?: string(name='SourceIp'),
  taskId?: string(name='TaskId'),
}

model GetVideoExtractResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    status?: string(name='Status'),
    sourceUrl?: string(name='SourceUrl'),
    resultUrl?: string(name='ResultUrl'),
    dataId?: string(name='DataId'),
    gmtModified?: long(name='GmtModified'),
    mediaType?: string(name='MediaType'),
    msg?: string(name='Msg'),
    taskUid?: string(name='TaskUid'),
    appId?: long(name='AppId'),
    gmtCreate?: long(name='GmtCreate'),
    optType?: string(name='OptType'),
    finishedTime?: long(name='FinishedTime'),
    id?: long(name='Id'),
  }(name='Data'),
}

model GetVideoExtractResponse = {
  headers: map[string]string(name='headers'),
  body: GetVideoExtractResponseBody(name='body'),
}

async function getVideoExtractWithOptions(request: GetVideoExtractRequest, runtime: Util.RuntimeOptions): GetVideoExtractResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetVideoExtract', '2021-01-04', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getVideoExtract(request: GetVideoExtractRequest): GetVideoExtractResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVideoExtractWithOptions(request, runtime);
}

model GetVideoTraceRequest {
  sourceIp?: string(name='SourceIp'),
  appId?: long(name='AppId'),
  fileUid?: string(name='FileUid'),
  userInfoList?: [ string ](name='userInfoList'),
}

model GetVideoTraceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      resultUrl?: string(name='ResultUrl'),
      userInfo?: string(name='UserInfo'),
    }
  ](name='Data'),
}

model GetVideoTraceResponse = {
  headers: map[string]string(name='headers'),
  body: GetVideoTraceResponseBody(name='body'),
}

async function getVideoTraceWithOptions(request: GetVideoTraceRequest, runtime: Util.RuntimeOptions): GetVideoTraceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetVideoTrace', '2021-01-04', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getVideoTrace(request: GetVideoTraceRequest): GetVideoTraceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVideoTraceWithOptions(request, runtime);
}

