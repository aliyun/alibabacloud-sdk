/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cciotgw', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model GetIoTCloudConnectorGatewayRequest {
  regionId?: string(name='RegionId'),
  ioTCloudConnectorGatewayId?: string(name='IoTCloudConnectorGatewayId'),
}

model GetIoTCloudConnectorGatewayResponseBody = {
  requestId?: string(name='RequestId'),
  spec?: string(name='Spec'),
  resourceUid?: long(name='ResourceUid'),
  description?: string(name='Description'),
  state?: string(name='State'),
  scheduleFactor?: map[string]any(name='ScheduleFactor'),
  apn?: string(name='Apn'),
  forwardingUnitCount?: int32(name='ForwardingUnitCount'),
  name?: string(name='Name'),
  isp?: string(name='Isp'),
  ioTCloudConnectorGatewayId?: string(name='IoTCloudConnectorGatewayId'),
  forwardingUnitIds?: [ string ](name='ForwardingUnitIds'),
  featureList?: [ string ](name='FeatureList'),
  zoneList?: [ string ](name='ZoneList'),
}

model GetIoTCloudConnectorGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: GetIoTCloudConnectorGatewayResponseBody(name='body'),
}

async function getIoTCloudConnectorGatewayWithOptions(request: GetIoTCloudConnectorGatewayRequest, runtime: Util.RuntimeOptions): GetIoTCloudConnectorGatewayResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetIoTCloudConnectorGateway', '2021-07-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getIoTCloudConnectorGateway(request: GetIoTCloudConnectorGatewayRequest): GetIoTCloudConnectorGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIoTCloudConnectorGatewayWithOptions(request, runtime);
}

model AllocateIpsRequest {
  ips?: [ string ](name='Ips'),
  regionId?: string(name='RegionId'),
  isp?: string(name='Isp'),
  apn?: string(name='Apn'),
  cciotGwId?: string(name='CciotGwId'),
  clientToken?: string(name='ClientToken'),
  ipCount?: int32(name='IpCount'),
  dryRun?: boolean(name='DryRun'),
  aliUid?: string(name='AliUid'),
}

model AllocateIpsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  asynToken?: string(name='AsynToken'),
}

model AllocateIpsResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateIpsResponseBody(name='body'),
}

async function allocateIpsWithOptions(request: AllocateIpsRequest, runtime: Util.RuntimeOptions): AllocateIpsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AllocateIps', '2021-07-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function allocateIps(request: AllocateIpsRequest): AllocateIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateIpsWithOptions(request, runtime);
}

model QueryAsynTokenResultRequest {
  regionId?: string(name='RegionId'),
  asynToken?: string(name='AsynToken'),
}

model QueryAsynTokenResultResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  data?: {
    result?: string(name='Result'),
    status?: string(name='Status'),
  }(name='Data'),
}

model QueryAsynTokenResultResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAsynTokenResultResponseBody(name='body'),
}

async function queryAsynTokenResultWithOptions(request: QueryAsynTokenResultRequest, runtime: Util.RuntimeOptions): QueryAsynTokenResultResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('QueryAsynTokenResult', '2021-07-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function queryAsynTokenResult(request: QueryAsynTokenResultRequest): QueryAsynTokenResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAsynTokenResultWithOptions(request, runtime);
}

model GetIpStatusRequest {
  regionId?: string(name='RegionId'),
  isp?: string(name='Isp'),
  apn?: string(name='Apn'),
  cciotGwId?: string(name='CciotGwId'),
  ip?: string(name='Ip'),
}

model GetIpStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  status?: string(name='Status'),
}

model GetIpStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetIpStatusResponseBody(name='body'),
}

async function getIpStatusWithOptions(request: GetIpStatusRequest, runtime: Util.RuntimeOptions): GetIpStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetIpStatus', '2021-07-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getIpStatus(request: GetIpStatusRequest): GetIpStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIpStatusWithOptions(request, runtime);
}

model ModifyIpStatusRequest {
  ipList?: [ string ](name='IpList'),
  regionId?: string(name='RegionId'),
  isp?: string(name='Isp'),
  apn?: string(name='Apn'),
  cciotGwId?: string(name='CciotGwId'),
  clientToken?: string(name='ClientToken'),
  status?: string(name='Status'),
}

model ModifyIpStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  errorIpList?: [ 
    {
      cause?: string(name='Cause'),
      ip?: string(name='Ip'),
    }
  ](name='ErrorIpList'),
}

model ModifyIpStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIpStatusResponseBody(name='body'),
}

async function modifyIpStatusWithOptions(request: ModifyIpStatusRequest, runtime: Util.RuntimeOptions): ModifyIpStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ModifyIpStatus', '2021-07-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function modifyIpStatus(request: ModifyIpStatusRequest): ModifyIpStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIpStatusWithOptions(request, runtime);
}

model GetFreeIpCountRequest {
  regionId?: string(name='RegionId'),
  isp?: string(name='Isp'),
  apn?: string(name='Apn'),
  cciotGwId?: string(name='CciotGwId'),
}

model GetFreeIpCountResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  count?: int32(name='Count'),
}

model GetFreeIpCountResponse = {
  headers: map[string]string(name='headers'),
  body: GetFreeIpCountResponseBody(name='body'),
}

async function getFreeIpCountWithOptions(request: GetFreeIpCountRequest, runtime: Util.RuntimeOptions): GetFreeIpCountResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetFreeIpCount', '2021-07-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getFreeIpCount(request: GetFreeIpCountRequest): GetFreeIpCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFreeIpCountWithOptions(request, runtime);
}

model ListResultTokenUrlRequest {
  regionId?: string(name='RegionId'),
  asynToken?: string(name='AsynToken'),
}

model ListResultTokenUrlResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  ossUrls?: [ string ](name='OssUrls'),
}

model ListResultTokenUrlResponse = {
  headers: map[string]string(name='headers'),
  body: ListResultTokenUrlResponseBody(name='body'),
}

async function listResultTokenUrlWithOptions(request: ListResultTokenUrlRequest, runtime: Util.RuntimeOptions): ListResultTokenUrlResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListResultTokenUrl', '2021-07-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listResultTokenUrl(request: ListResultTokenUrlRequest): ListResultTokenUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResultTokenUrlWithOptions(request, runtime);
}

model ListGreInterfacesRequest {
  regionId?: string(name='RegionId'),
  ioTCloudConnectorGatewayId?: string(name='IoTCloudConnectorGatewayId'),
  greInterfaceId?: string(name='GreInterfaceId'),
}

model ListGreInterfacesResponseBody = {
  requestId?: string(name='RequestId'),
  ioTCloudConnectorGatewayId?: string(name='IoTCloudConnectorGatewayId'),
  greInterface?: [ 
    {
      customerIp?: string(name='CustomerIp'),
      customerTunnelIp?: string(name='CustomerTunnelIp'),
      localTunnelIp?: string(name='LocalTunnelIp'),
      state?: string(name='State'),
      enableKeepalive?: boolean(name='EnableKeepalive'),
      greGwId?: string(name='GreGwId'),
      forwardingUnitId?: string(name='ForwardingUnitId'),
      localIp?: string(name='LocalIp'),
      greInterfaceId?: string(name='GreInterfaceId'),
      greCidrs?: string(name='GreCidrs'),
      ioTCloudConnectorGatewayId?: string(name='IoTCloudConnectorGatewayId'),
    }
  ](name='GreInterface'),
}

model ListGreInterfacesResponse = {
  headers: map[string]string(name='headers'),
  body: ListGreInterfacesResponseBody(name='body'),
}

async function listGreInterfacesWithOptions(request: ListGreInterfacesRequest, runtime: Util.RuntimeOptions): ListGreInterfacesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListGreInterfaces', '2021-07-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listGreInterfaces(request: ListGreInterfacesRequest): ListGreInterfacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGreInterfacesWithOptions(request, runtime);
}

model ListIoTCloudConnectorGatewaysRequest {
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListIoTCloudConnectorGatewaysResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  ioTCloudConnectorGateways?: [ 
    {
      spec?: string(name='Spec'),
      resourceUid?: long(name='ResourceUid'),
      description?: string(name='Description'),
      state?: string(name='State'),
      scheduleFactor?: map[string]any(name='ScheduleFactor'),
      apn?: string(name='Apn'),
      forwardingUnitCount?: int32(name='ForwardingUnitCount'),
      name?: string(name='Name'),
      isp?: string(name='Isp'),
      ioTCloudConnectorGatewayId?: string(name='IoTCloudConnectorGatewayId'),
      forwardingUnitIds?: [ string ](name='ForwardingUnitIds'),
      featureList?: [ string ](name='FeatureList'),
      zoneList?: [ string ](name='ZoneList'),
    }
  ](name='IoTCloudConnectorGateways'),
}

model ListIoTCloudConnectorGatewaysResponse = {
  headers: map[string]string(name='headers'),
  body: ListIoTCloudConnectorGatewaysResponseBody(name='body'),
}

async function listIoTCloudConnectorGatewaysWithOptions(request: ListIoTCloudConnectorGatewaysRequest, runtime: Util.RuntimeOptions): ListIoTCloudConnectorGatewaysResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListIoTCloudConnectorGateways', '2021-07-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listIoTCloudConnectorGateways(request: ListIoTCloudConnectorGatewaysRequest): ListIoTCloudConnectorGatewaysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIoTCloudConnectorGatewaysWithOptions(request, runtime);
}

