/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'alikafka';
  @version = '2018-10-15';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateConsumerGroupRequest {
  consumerId: string(name='ConsumerId', description='This parameter is required.', example='consumer_group_test', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='alikafka_pre-cn-0pp1954n****', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model CreateConsumerGroupResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='B191CC4D-B067-4508-987A-ACDA8D89****'),
  success?: boolean(name='Success', example='true'),
}

model CreateConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateConsumerGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateConsumerGroup  CreateConsumerGroupRequest
  * @return CreateConsumerGroupResponse
 */
async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateTopicRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='alikafka_pre-cn-mp919o4v****', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  remark: string(name='Remark', description='This parameter is required.', example='alikafka_topic_test', position='Query'),
  topic: string(name='Topic', description='This parameter is required.', example='alikafka_topic_test', position='Query'),
}

model CreateTopicResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='9C0F207C-77A6-43E5-991C-9D98510A****'),
  success?: boolean(name='Success', example='true'),
}

model CreateTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTopicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTopic  CreateTopicRequest
  * @return CreateTopicResponse
 */
async function createTopic(request: CreateTopicRequest): CreateTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTopic', 'POST', '/', 'json', false, 'json', request);
}

model DeleteConsumerGroupRequest {
  consumerId: string(name='ConsumerId', description='This parameter is required.', example='testconsumer', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='alikafka_post-cn-mp91a44k****', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteConsumerGroupResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='1AA2A2AD-2727-4573-B1C7-A0388BCD****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConsumerGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteConsumerGroup  DeleteConsumerGroupRequest
  * @return DeleteConsumerGroupResponse
 */
async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTopicRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='alikafka_post-cn-mp91a44k****', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  topic: string(name='Topic', description='This parameter is required.', example='Kafkatest', position='Query'),
}

model DeleteTopicResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success'),
  requestId?: string(name='RequestId', example='9B618B3F-9506-4661-A211-D00C4556****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteTopicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTopicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTopic  DeleteTopicRequest
  * @return DeleteTopicResponse
 */
async function deleteTopic(request: DeleteTopicRequest): DeleteTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTopic', 'POST', '/', 'json', false, 'json', request);
}

model GetConsumerListRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='alikafka_post-cn-v0h18sav****', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model GetConsumerListResponseBody = {
  code?: int32(name='Code', example='200'),
  consumerList?: {
    consumerVO?: [ 
    {
      consumerId?: string(name='ConsumerId', example='CID_c34a6f44915f80d70cb42c4b14ee40c3_4'),
      instanceId?: string(name='InstanceId', example='alikafka_post-cn-v0h18sav0001'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='ConsumerVO')
  }(name='ConsumerList'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', example='808F042B-CB9A-4FBC-9009-00E7DDB6****'),
  success?: boolean(name='Success', example='true'),
}

model GetConsumerListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConsumerListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetConsumerList  GetConsumerListRequest
  * @return GetConsumerListResponse
 */
async function getConsumerList(request: GetConsumerListRequest): GetConsumerListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConsumerList', 'POST', '/', 'json', false, 'json', request);
}

model GetConsumerProgressRequest {
  consumerId: string(name='ConsumerId', description='Consumer Group IDã€‚

This parameter is required.', example='kafka-test', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='alikafka_pre-cn-mp919o4v****', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model GetConsumerProgressResponseBody = {
  code?: int32(name='Code', example='200'),
  consumerProgress?: {
    lastTimestamp?: long(name='LastTimestamp', example='1566874931671'),
    topicList?: {
      topicList?: [ 
      {
        lastTimestamp?: long(name='LastTimestamp', example='1566874931649'),
        offsetList?: {
          offsetList?: [ 
          {
            brokerOffset?: long(name='BrokerOffset', example='9'),
            consumerOffset?: long(name='ConsumerOffset', example='9'),
            lastTimestamp?: long(name='LastTimestamp', example='1566874931649'),
            partition?: int32(name='Partition', example='0'),
          }
        ](name='OffsetList')
        }(name='OffsetList'),
        topic?: string(name='Topic', example='kafka-test'),
        totalDiff?: long(name='TotalDiff', example='0'),
      }
    ](name='TopicList')
    }(name='TopicList'),
    totalDiff?: long(name='TotalDiff', example='0'),
    state?: string(name='state'),
  }(name='ConsumerProgress'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', example='252820E1-A2E6-45F2-B4C9-1056B8CE****'),
  success?: boolean(name='Success', example='true'),
}

model GetConsumerProgressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConsumerProgressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetConsumerProgress  GetConsumerProgressRequest
  * @return GetConsumerProgressResponse
 */
async function getConsumerProgress(request: GetConsumerProgressRequest): GetConsumerProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConsumerProgress', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceListRequest {
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model GetInstanceListResponseBody = {
  code?: int32(name='Code', example='200'),
  instanceList?: {
    instanceVO?: [ 
    {
      createTime?: long(name='CreateTime', example='1566215995000'),
      deployType?: int32(name='DeployType', example='4'),
      endPoint?: string(name='EndPoint', example='192.168.0.212:9092,192.168.0.210:9092,192.168.0.211:****'),
      expiredTime?: long(name='ExpiredTime', example='1568908800000'),
      instanceId?: string(name='InstanceId', example='alikafka_pre-cn-mp919o4v****'),
      name?: string(name='Name', example='alikafka_pre-cn-mp919o4v****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      serviceStatus?: int32(name='ServiceStatus', example='5'),
      sslEndPoint?: string(name='SslEndPoint', example='47.111.110.11:9093,121.40.96.141:9093,47.111.118.133:****'),
      upgradeServiceDetailInfo?: {
        upgradeServiceDetailInfoVO?: [ 
        {
          current2OpenSourceVersion?: string(name='Current2OpenSourceVersion', example='0.10'),
        }
      ](name='UpgradeServiceDetailInfoVO')
      }(name='UpgradeServiceDetailInfo'),
      vSwitchId?: string(name='VSwitchId', description='VSwitch IDã€‚', example='vsw-bp13rg6bcpkxofr78****'),
      vpcId?: string(name='VpcId', description='VPC IDã€‚', example='vpc-bp1l6hrlykj3405r7****'),
    }
  ](name='InstanceVO')
  }(name='InstanceList'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', example='ABA4A7FD-E10F-45C7-9774-A5236015****'),
  success?: boolean(name='Success', example='true'),
}

model GetInstanceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceList  GetInstanceListRequest
  * @return GetInstanceListResponse
 */
async function getInstanceList(request: GetInstanceListRequest): GetInstanceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceList', 'POST', '/', 'json', false, 'json', request);
}

model GetTopicListRequest {
  currentPage?: string(name='CurrentPage', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='alikafka_pre-cn-0pp1954n2003', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetTopicListResponseBody = {
  code?: int32(name='Code', example='200'),
  currentPage?: int32(name='CurrentPage', example='1'),
  message?: string(name='Message', example='operation success.'),
  pageSize?: int32(name='PageSize', example='10000'),
  requestId?: string(name='RequestId', example='82BD585C-17A1-486E-B3E8-AABCE8EE****'),
  success?: boolean(name='Success', example='true'),
  topicList?: {
    topicVO?: [ 
    {
      createTime?: long(name='CreateTime', example='1566804394000'),
      instanceId?: string(name='InstanceId', example='alikafka_pre-cn-0pp1954n****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      remark?: string(name='Remark', example='kafka_test_topic'),
      status?: int32(name='Status', example='0'),
      statusName?: string(name='StatusName'),
      topic?: string(name='Topic', example='poptest'),
    }
  ](name='TopicVO')
  }(name='TopicList'),
  total?: int32(name='Total', example='12'),
}

model GetTopicListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTopicListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTopicList  GetTopicListRequest
  * @return GetTopicListResponse
 */
async function getTopicList(request: GetTopicListRequest): GetTopicListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTopicList', 'POST', '/', 'json', false, 'json', request);
}

model GetTopicStatusRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='alikafka_pre-cn-v0h15tjmo003', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  topic: string(name='Topic', description='This parameter is required.', example='normal_topic_9d034262835916103455551be06cc2dc_6', position='Query'),
}

model GetTopicStatusResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', example='E475C7E2-8C35-46EF-BE7D-5D2A9F5D****'),
  success?: boolean(name='Success', example='true'),
  topicStatus?: {
    lastTimeStamp?: long(name='LastTimeStamp', example='1566470063575'),
    offsetTable?: {
      offsetTable?: [ 
      {
        lastUpdateTimestamp?: long(name='LastUpdateTimestamp', example='1566470063547'),
        maxOffset?: long(name='MaxOffset', example='76'),
        minOffset?: long(name='MinOffset', example='0'),
        partition?: int32(name='Partition', example='0'),
        topic?: string(name='Topic', example='testkafka'),
      }
    ](name='OffsetTable')
    }(name='OffsetTable'),
    totalCount?: long(name='TotalCount', example='423'),
  }(name='TopicStatus'),
}

model GetTopicStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTopicStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTopicStatus  GetTopicStatusRequest
  * @return GetTopicStatusResponse
 */
async function getTopicStatus(request: GetTopicStatusRequest): GetTopicStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTopicStatus', 'POST', '/', 'json', false, 'json', request);
}

