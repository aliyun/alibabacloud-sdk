/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'alikafka.aliyuncs.com',
    ap-southeast-2 = 'alikafka.aliyuncs.com',
    cn-beijing-finance-1 = 'alikafka.aliyuncs.com',
    cn-beijing-finance-pop = 'alikafka.aliyuncs.com',
    cn-beijing-gov-1 = 'alikafka.aliyuncs.com',
    cn-beijing-nu16-b01 = 'alikafka.aliyuncs.com',
    cn-edge-1 = 'alikafka.aliyuncs.com',
    cn-fujian = 'alikafka.aliyuncs.com',
    cn-haidian-cm12-c01 = 'alikafka.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'alikafka.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'alikafka.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'alikafka.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'alikafka.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'alikafka.aliyuncs.com',
    cn-hangzhou-test-306 = 'alikafka.aliyuncs.com',
    cn-hongkong-finance-pop = 'alikafka.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'alikafka.aliyuncs.com',
    cn-qingdao-nebula = 'alikafka.aliyuncs.com',
    cn-shanghai-et15-b01 = 'alikafka.aliyuncs.com',
    cn-shanghai-et2-b01 = 'alikafka.aliyuncs.com',
    cn-shanghai-inner = 'alikafka.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'alikafka.aliyuncs.com',
    cn-shenzhen-inner = 'alikafka.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'alikafka.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'alikafka.aliyuncs.com',
    cn-wuhan = 'alikafka.aliyuncs.com',
    cn-wulanchabu = 'alikafka.aliyuncs.com',
    cn-yushanfang = 'alikafka.aliyuncs.com',
    cn-zhangbei = 'alikafka.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'alikafka.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'alikafka.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'alikafka.aliyuncs.com',
    eu-west-1-oxs = 'alikafka.aliyuncs.com',
    me-east-1 = 'alikafka.aliyuncs.com',
    rus-west-1-pop = 'alikafka.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('alikafka', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateConsumerGroupRequest {
  consumerId?: string(name='ConsumerId'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model CreateConsumerGroupResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConsumerGroupResponseBody(name='body'),
}

async function createConsumerGroupWithOptions(request: CreateConsumerGroupRequest, runtime: Util.RuntimeOptions): CreateConsumerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consumerId)) {
    query['ConsumerId'] = request.consumerId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateConsumerGroup',
    version = '2018-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConsumerGroupWithOptions(request, runtime);
}

model CreateTopicRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  remark?: string(name='Remark'),
  topic?: string(name='Topic'),
}

model CreateTopicResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTopicResponseBody(name='body'),
}

async function createTopicWithOptions(request: CreateTopicRequest, runtime: Util.RuntimeOptions): CreateTopicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTopic',
    version = '2018-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTopic(request: CreateTopicRequest): CreateTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTopicWithOptions(request, runtime);
}

model DeleteConsumerGroupRequest {
  consumerId?: string(name='ConsumerId'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model DeleteConsumerGroupResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteConsumerGroupResponseBody(name='body'),
}

async function deleteConsumerGroupWithOptions(request: DeleteConsumerGroupRequest, runtime: Util.RuntimeOptions): DeleteConsumerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consumerId)) {
    query['ConsumerId'] = request.consumerId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteConsumerGroup',
    version = '2018-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConsumerGroupWithOptions(request, runtime);
}

model DeleteTopicRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  topic?: string(name='Topic'),
}

model DeleteTopicResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTopicResponseBody(name='body'),
}

async function deleteTopicWithOptions(request: DeleteTopicRequest, runtime: Util.RuntimeOptions): DeleteTopicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTopic',
    version = '2018-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTopic(request: DeleteTopicRequest): DeleteTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTopicWithOptions(request, runtime);
}

model GetConsumerListRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model GetConsumerListResponseBody = {
  code?: int32(name='Code'),
  consumerList?: {
    consumerVO?: [ 
    {
      consumerId?: string(name='ConsumerId'),
      instanceId?: string(name='InstanceId'),
      regionId?: string(name='RegionId'),
    }
  ](name='ConsumerVO')
  }(name='ConsumerList'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetConsumerListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConsumerListResponseBody(name='body'),
}

async function getConsumerListWithOptions(request: GetConsumerListRequest, runtime: Util.RuntimeOptions): GetConsumerListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetConsumerList',
    version = '2018-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConsumerList(request: GetConsumerListRequest): GetConsumerListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConsumerListWithOptions(request, runtime);
}

model GetConsumerProgressRequest {
  consumerId?: string(name='ConsumerId'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model GetConsumerProgressResponseBody = {
  code?: int32(name='Code'),
  consumerProgress?: {
    lastTimestamp?: long(name='LastTimestamp'),
    topicList?: {
      topicList?: [ 
      {
        lastTimestamp?: long(name='LastTimestamp'),
        offsetList?: {
          offsetList?: [ 
          {
            brokerOffset?: long(name='BrokerOffset'),
            consumerOffset?: long(name='ConsumerOffset'),
            lastTimestamp?: long(name='LastTimestamp'),
            partition?: int32(name='Partition'),
          }
        ](name='OffsetList')
        }(name='OffsetList'),
        topic?: string(name='Topic'),
        totalDiff?: long(name='TotalDiff'),
      }
    ](name='TopicList')
    }(name='TopicList'),
    totalDiff?: long(name='TotalDiff'),
  }(name='ConsumerProgress'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetConsumerProgressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConsumerProgressResponseBody(name='body'),
}

async function getConsumerProgressWithOptions(request: GetConsumerProgressRequest, runtime: Util.RuntimeOptions): GetConsumerProgressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consumerId)) {
    query['ConsumerId'] = request.consumerId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetConsumerProgress',
    version = '2018-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConsumerProgress(request: GetConsumerProgressRequest): GetConsumerProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConsumerProgressWithOptions(request, runtime);
}

model GetInstanceListRequest {
  regionId?: string(name='RegionId'),
}

model GetInstanceListResponseBody = {
  code?: int32(name='Code'),
  instanceList?: {
    instanceVO?: [ 
    {
      createTime?: long(name='CreateTime'),
      deployType?: int32(name='DeployType'),
      endPoint?: string(name='EndPoint'),
      expiredTime?: long(name='ExpiredTime'),
      instanceId?: string(name='InstanceId'),
      name?: string(name='Name'),
      regionId?: string(name='RegionId'),
      serviceStatus?: int32(name='ServiceStatus'),
      sslEndPoint?: string(name='SslEndPoint'),
      upgradeServiceDetailInfo?: {
        upgradeServiceDetailInfoVO?: [ 
        {
          current2OpenSourceVersion?: string(name='Current2OpenSourceVersion'),
        }
      ](name='UpgradeServiceDetailInfoVO')
      }(name='UpgradeServiceDetailInfo'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
    }
  ](name='InstanceVO')
  }(name='InstanceList'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetInstanceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceListResponseBody(name='body'),
}

async function getInstanceListWithOptions(request: GetInstanceListRequest, runtime: Util.RuntimeOptions): GetInstanceListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceList',
    version = '2018-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstanceList(request: GetInstanceListRequest): GetInstanceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceListWithOptions(request, runtime);
}

model GetTopicListRequest {
  currentPage?: string(name='CurrentPage'),
  instanceId?: string(name='InstanceId'),
  pageSize?: string(name='PageSize'),
  regionId?: string(name='RegionId'),
}

model GetTopicListResponseBody = {
  code?: int32(name='Code'),
  currentPage?: int32(name='CurrentPage'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  topicList?: {
    topicVO?: [ 
    {
      createTime?: long(name='CreateTime'),
      instanceId?: string(name='InstanceId'),
      regionId?: string(name='RegionId'),
      remark?: string(name='Remark'),
      status?: int32(name='Status'),
      statusName?: string(name='StatusName'),
      topic?: string(name='Topic'),
    }
  ](name='TopicVO')
  }(name='TopicList'),
  total?: int32(name='Total'),
}

model GetTopicListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTopicListResponseBody(name='body'),
}

async function getTopicListWithOptions(request: GetTopicListRequest, runtime: Util.RuntimeOptions): GetTopicListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTopicList',
    version = '2018-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTopicList(request: GetTopicListRequest): GetTopicListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTopicListWithOptions(request, runtime);
}

model GetTopicStatusRequest {
  instanceId?: string(name='InstanceId'),
  topic?: string(name='Topic'),
}

model GetTopicStatusResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  topicStatus?: {
    lastTimeStamp?: long(name='LastTimeStamp'),
    offsetTable?: {
      offsetTable?: [ 
      {
        lastUpdateTimestamp?: long(name='LastUpdateTimestamp'),
        maxOffset?: long(name='MaxOffset'),
        minOffset?: long(name='MinOffset'),
        partition?: int32(name='Partition'),
        topic?: string(name='Topic'),
      }
    ](name='OffsetTable')
    }(name='OffsetTable'),
    totalCount?: long(name='TotalCount'),
  }(name='TopicStatus'),
}

model GetTopicStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTopicStatusResponseBody(name='body'),
}

async function getTopicStatusWithOptions(request: GetTopicStatusRequest, runtime: Util.RuntimeOptions): GetTopicStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTopicStatus',
    version = '2018-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTopicStatus(request: GetTopicStatusRequest): GetTopicStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTopicStatusWithOptions(request, runtime);
}

