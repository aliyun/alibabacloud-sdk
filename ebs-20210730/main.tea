/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('ebs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  replicaGroupId?: string(name='ReplicaGroupId', example='pg-myreplica****'),
  replicaPairId?: string(name='ReplicaPairId', example='pair-cn-dsa****'),
}

model AddDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model AddDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDiskReplicaPairResponseBody(name='body'),
}

async function addDiskReplicaPairWithOptions(request: AddDiskReplicaPairRequest, runtime: Util.RuntimeOptions): AddDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addDiskReplicaPair(request: AddDiskReplicaPairRequest): AddDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDiskReplicaPairWithOptions(request, runtime);
}

model ApplyLensServiceResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model ApplyLensServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyLensServiceResponseBody(name='body'),
}

async function applyLensServiceWithOptions(runtime: Util.RuntimeOptions): ApplyLensServiceResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ApplyLensService',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyLensService(): ApplyLensServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyLensServiceWithOptions(runtime);
}

model CancelLensServiceResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model CancelLensServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelLensServiceResponseBody(name='body'),
}

async function cancelLensServiceWithOptions(runtime: Util.RuntimeOptions): CancelLensServiceResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'CancelLensService',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelLensService(): CancelLensServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelLensServiceWithOptions(runtime);
}

model CreateDedicatedBlockStorageClusterRequest {
  azone?: string(name='Azone', example='cn-heyuan-b'),
  capacity?: long(name='Capacity', example='61440'),
  dbscId?: string(name='DbscId', example='test1233'),
  dbscName?: string(name='DbscName', example='myDBSCCluster'),
  regionId?: string(name='RegionId', example='cn-heyuan'),
  resourceGroupId?: string(name='ResourceGroupId'),
  type?: string(name='Type', example='Premium'),
}

model CreateDedicatedBlockStorageClusterResponseBody = {
  dbscId?: string(name='DbscId', example='dbsc-f8z4d3k4nsgg9okb****'),
  orderId?: string(name='OrderId', example='50155660025****'),
  requestId?: string(name='RequestId', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model CreateDedicatedBlockStorageClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDedicatedBlockStorageClusterResponseBody(name='body'),
}

async function createDedicatedBlockStorageClusterWithOptions(request: CreateDedicatedBlockStorageClusterRequest, runtime: Util.RuntimeOptions): CreateDedicatedBlockStorageClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.azone)) {
    query['Azone'] = request.azone;
  }
  if (!Util.isUnset(request.capacity)) {
    query['Capacity'] = request.capacity;
  }
  if (!Util.isUnset(request.dbscId)) {
    query['DbscId'] = request.dbscId;
  }
  if (!Util.isUnset(request.dbscName)) {
    query['DbscName'] = request.dbscName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDedicatedBlockStorageCluster',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDedicatedBlockStorageCluster(request: CreateDedicatedBlockStorageClusterRequest): CreateDedicatedBlockStorageClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedBlockStorageClusterWithOptions(request, runtime);
}

model CreateDiskReplicaGroupRequest {
  bandwidth?: long(name='Bandwidth', example='5'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  description?: string(name='Description', example='This is description.'),
  destinationRegionId?: string(name='DestinationRegionId', example='cn-shanghai'),
  destinationZoneId?: string(name='DestinationZoneId', example='cn-shanghai-e'),
  groupName?: string(name='GroupName', example='myreplicagrouptest'),
  RPO?: long(name='RPO', example='900'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  sourceZoneId?: string(name='SourceZoneId', example='cn-beijing-f'),
}

model CreateDiskReplicaGroupResponseBody = {
  replicaGroupId?: string(name='ReplicaGroupId', example='pg-xxxxxxx'),
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model CreateDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDiskReplicaGroupResponseBody(name='body'),
}

async function createDiskReplicaGroupWithOptions(request: CreateDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): CreateDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destinationRegionId)) {
    query['DestinationRegionId'] = request.destinationRegionId;
  }
  if (!Util.isUnset(request.destinationZoneId)) {
    query['DestinationZoneId'] = request.destinationZoneId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.RPO)) {
    query['RPO'] = request.RPO;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceZoneId)) {
    query['SourceZoneId'] = request.sourceZoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDiskReplicaGroup(request: CreateDiskReplicaGroupRequest): CreateDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiskReplicaGroupWithOptions(request, runtime);
}

model CreateDiskReplicaPairRequest {
  bandwidth?: long(name='Bandwidth', example='10240'),
  chargeType?: string(name='ChargeType', example='PrePay'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  description?: string(name='Description', example='This is description.'),
  destinationDiskId?: string(name='DestinationDiskId', example='d-sa1f82p58p1tdw9g****'),
  destinationRegionId?: string(name='DestinationRegionId', example='cn-shanghai'),
  destinationZoneId?: string(name='DestinationZoneId', example='cn-shanghai-e'),
  diskId?: string(name='DiskId', example='d-iq80sgp4d0xbk24q****'),
  pairName?: string(name='PairName', example='TestReplicaPair'),
  period?: long(name='Period', example='1'),
  periodUnit?: string(name='PeriodUnit', example='Month'),
  RPO?: long(name='RPO', example='900'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  sourceZoneId?: string(name='SourceZoneId', example='cn-beijing-f'),
}

model CreateDiskReplicaPairResponseBody = {
  orderId?: string(name='OrderId', example='123456****'),
  replicaPairId?: string(name='ReplicaPairId', example='pair-cn-dsa****'),
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model CreateDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDiskReplicaPairResponseBody(name='body'),
}

async function createDiskReplicaPairWithOptions(request: CreateDiskReplicaPairRequest, runtime: Util.RuntimeOptions): CreateDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destinationDiskId)) {
    query['DestinationDiskId'] = request.destinationDiskId;
  }
  if (!Util.isUnset(request.destinationRegionId)) {
    query['DestinationRegionId'] = request.destinationRegionId;
  }
  if (!Util.isUnset(request.destinationZoneId)) {
    query['DestinationZoneId'] = request.destinationZoneId;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.pairName)) {
    query['PairName'] = request.pairName;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.RPO)) {
    query['RPO'] = request.RPO;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceZoneId)) {
    query['SourceZoneId'] = request.sourceZoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDiskReplicaPair(request: CreateDiskReplicaPairRequest): CreateDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiskReplicaPairWithOptions(request, runtime);
}

model DeleteDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  replicaGroupId?: string(name='ReplicaGroupId', example='pg-myreplica****'),
}

model DeleteDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model DeleteDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDiskReplicaGroupResponseBody(name='body'),
}

async function deleteDiskReplicaGroupWithOptions(request: DeleteDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): DeleteDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDiskReplicaGroup(request: DeleteDiskReplicaGroupRequest): DeleteDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDiskReplicaGroupWithOptions(request, runtime);
}

model DeleteDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  replicaPairId?: string(name='ReplicaPairId', example='pair-cn-dsa****'),
}

model DeleteDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', example='A37597A6-BB99-19B3-85EA-4C2B91F0****'),
}

model DeleteDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDiskReplicaPairResponseBody(name='body'),
}

async function deleteDiskReplicaPairWithOptions(request: DeleteDiskReplicaPairRequest, runtime: Util.RuntimeOptions): DeleteDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDiskReplicaPair(request: DeleteDiskReplicaPairRequest): DeleteDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDiskReplicaPairWithOptions(request, runtime);
}

model DescribeDedicatedBlockStorageClusterDisksRequest {
  dbscId?: string(name='DbscId', example='dbsc-cn-od43bf****'),
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAAdDWBF2'),
  regionId?: string(name='RegionId', example='cn-heyuan'),
}

model DescribeDedicatedBlockStorageClusterDisksResponseBody = {
  disks?: {
    disk?: [ 
      {
        attachedTime?: string(name='AttachedTime', example='2021-06-07T06:08:56Z'),
        bdfId?: string(name='BdfId', example='null'),
        category?: string(name='Category', example='cloud_essd'),
        deleteAutoSnapshot?: boolean(name='DeleteAutoSnapshot', example='false'),
        deleteWithInstance?: boolean(name='DeleteWithInstance', example='true'),
        description?: string(name='Description', example='testDescription'),
        detachedTime?: string(name='DetachedTime', example='2021-06-07T21:01:22Z'),
        device?: string(name='Device', example='/dev/xvdb'),
        diskChargeType?: string(name='DiskChargeType', example='PrePaid'),
        diskId?: string(name='DiskId', example='d-bp67acfmxazb4p****'),
        diskName?: string(name='DiskName', example='testDiskName'),
        enableAutoSnapshot?: boolean(name='EnableAutoSnapshot', example='false'),
        encrypted?: boolean(name='Encrypted', example='false'),
        IOPS?: long(name='IOPS', example='4000'),
        imageId?: string(name='ImageId', example='m-bp13aqm171qynt3u***'),
        instanceId?: string(name='InstanceId', example='i-bp67acfmxazb4q****'),
        KMSKeyId?: string(name='KMSKeyId', example='0e478b7a-4262-4802-b8cb-00d3fb40****'),
        mountInstanceNum?: int32(name='MountInstanceNum', example='1'),
        multiAttach?: string(name='MultiAttach', example='Disabled'),
        performanceLevel?: string(name='PerformanceLevel', example='PL0'),
        portable?: boolean(name='Portable', example='false'),
        regionId?: string(name='RegionId', example='cn-heyuan'),
        size?: int32(name='Size', example='60'),
        sourceSnapshotId?: string(name='SourceSnapshotId', example='s-bp67acfmxazb4p****'),
        status?: string(name='Status', example='In_use'),
        storageClusterId?: string(name='StorageClusterId', example='dbsc-j5e1sf2vaf5he8m2****'),
        storageSetId?: string(name='StorageSetId', example='ss-i-bp1j4i2jdf3owlhe****'),
        storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber', example='11'),
        tags?: [ 
          {
            tagKey?: string(name='TagKey', example='TestKey'),
            tagValue?: string(name='TagValue', example='TestValue'),
          }
        ](name='Tags'),
        type?: string(name='Type', example='all'),
        zoneId?: string(name='ZoneId', example='cn-heyuan-i'),
      }
    ](name='Disk'),
  }(name='Disks'),
  nextToken?: string(name='NextToken', example='AAAAAdDWBF2'),
  requestId?: string(name='RequestId', example='11B55F58-D3A4-4A9B-9596-342420D0****'),
}

model DescribeDedicatedBlockStorageClusterDisksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDedicatedBlockStorageClusterDisksResponseBody(name='body'),
}

async function describeDedicatedBlockStorageClusterDisksWithOptions(request: DescribeDedicatedBlockStorageClusterDisksRequest, runtime: Util.RuntimeOptions): DescribeDedicatedBlockStorageClusterDisksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbscId)) {
    query['DbscId'] = request.dbscId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedBlockStorageClusterDisks',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDedicatedBlockStorageClusterDisks(request: DescribeDedicatedBlockStorageClusterDisksRequest): DescribeDedicatedBlockStorageClusterDisksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedBlockStorageClusterDisksWithOptions(request, runtime);
}

model DescribeDedicatedBlockStorageClustersRequest {
  azoneId?: string(name='AzoneId', example='cn-heyuan-b'),
  category?: string(name='Category', example='cloud_essd'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dedicatedBlockStorageClusterId?: [ string ](name='DedicatedBlockStorageClusterId'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAAdDWBF2'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId', example='cn-heyuan'),
  resourceGroupId?: string(name='ResourceGroupId'),
  status?: [ string ](name='Status'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeDedicatedBlockStorageClustersResponseBody = {
  dedicatedBlockStorageClusters?: [ 
    {
      category?: string(name='Category', example='cloud_essd'),
      createTime?: string(name='CreateTime', example='1657113211'),
      dedicatedBlockStorageClusterCapacity?: {
        availableCapacity?: long(name='AvailableCapacity', example='61440'),
        deliveryCapacity?: long(name='DeliveryCapacity'),
        totalCapacity?: long(name='TotalCapacity', example='61440'),
        usedCapacity?: long(name='UsedCapacity'),
      }(name='DedicatedBlockStorageClusterCapacity'),
      dedicatedBlockStorageClusterId?: string(name='DedicatedBlockStorageClusterId', example='dbsc-f8z4d3k4nsgg9okb****'),
      dedicatedBlockStorageClusterName?: string(name='DedicatedBlockStorageClusterName', example='myDBSCCluster'),
      description?: string(name='Description', example='This is description.'),
      expiredTime?: string(name='ExpiredTime', example='1673020800'),
      performanceLevel?: string(name='PerformanceLevel', example='PL0'),
      regionId?: string(name='RegionId', example='cn-heyuan'),
      resourceGroupId?: string(name='ResourceGroupId'),
      status?: string(name='Status', example='Running'),
      supportedCategory?: string(name='SupportedCategory', example='cloud_essd'),
      tags?: [ 
        {
          tagKey?: string(name='TagKey', example='testKey'),
          tagValue?: string(name='TagValue', example='testValue'),
        }
      ](name='Tags'),
      type?: string(name='Type', example='Standard'),
      zoneId?: string(name='ZoneId', example='cn-heyuan-b'),
    }
  ](name='DedicatedBlockStorageClusters'),
  nextToken?: string(name='NextToken', example='AAAAAdDWBF2'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId', example='11B55F58-D3A4-4A9B-9596-342420D0****'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDedicatedBlockStorageClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDedicatedBlockStorageClustersResponseBody(name='body'),
}

async function describeDedicatedBlockStorageClustersWithOptions(request: DescribeDedicatedBlockStorageClustersRequest, runtime: Util.RuntimeOptions): DescribeDedicatedBlockStorageClustersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.azoneId)) {
    body['AzoneId'] = request.azoneId;
  }
  if (!Util.isUnset(request.category)) {
    body['Category'] = request.category;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dedicatedBlockStorageClusterId)) {
    body['DedicatedBlockStorageClusterId'] = request.dedicatedBlockStorageClusterId;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedBlockStorageClusters',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDedicatedBlockStorageClusters(request: DescribeDedicatedBlockStorageClustersRequest): DescribeDedicatedBlockStorageClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedBlockStorageClustersWithOptions(request, runtime);
}

model DescribeDiskEventsRequest {
  diskCategory?: string(name='DiskCategory', example='cloud_essd'),
  diskId?: string(name='DiskId', example='d-bp67acfmxazb4p****'),
  endTime?: string(name='EndTime', example='2022-06-01T05:00:00Z'),
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime', example='2022-06-01T03:00:00Z'),
  type?: string(name='Type', example='DataNeedProtect'),
}

model DescribeDiskEventsResponseBody = {
  diskEvents?: [ 
    {
      description?: string(name='Description', example='This is description.'),
      diskId?: string(name='DiskId', example='d-bp1bq5g3dxxo1x4o****'),
      recommendAction?: string(name='RecommendAction', example='NoAction'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: string(name='Status', example='Solved'),
      timestamp?: string(name='Timestamp', example='2022-06-01T08:00:00Z'),
      type?: string(name='Type', example='DataNeedProtect'),
    }
  ](name='DiskEvents'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  totalCount?: long(name='TotalCount', example='20'),
}

model DescribeDiskEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiskEventsResponseBody(name='body'),
}

async function describeDiskEventsWithOptions(request: DescribeDiskEventsRequest, runtime: Util.RuntimeOptions): DescribeDiskEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskCategory)) {
    query['DiskCategory'] = request.diskCategory;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiskEvents',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiskEvents(request: DescribeDiskEventsRequest): DescribeDiskEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskEventsWithOptions(request, runtime);
}

model DescribeDiskMonitorDataRequest {
  diskId?: string(name='DiskId', example='d-bp67acfmxazb4p****'),
  endTime?: string(name='EndTime', example='2022-06-01T05:00:00Z'),
  period?: long(name='Period', example='5'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime', example='2022-06-01T03:00:00Z'),
  type?: string(name='Type', example='basic'),
}

model DescribeDiskMonitorDataResponseBody = {
  monitorData?: [ 
    {
      BPSPercent?: long(name='BPSPercent', example='80(%)'),
      burstIOCount?: long(name='BurstIOCount', example='0'),
      diskId?: string(name='DiskId', example='d-bp1bq5g3dxxo1x4o****'),
      IOPSPercent?: long(name='IOPSPercent', example='80(%)'),
      readBPS?: long(name='ReadBPS', example='10'),
      readIOPS?: long(name='ReadIOPS', example='2000'),
      timestamp?: string(name='Timestamp', example='2022-06-01T08:00:00Z'),
      writeBPS?: long(name='WriteBPS', example='204'),
      writeIOPS?: long(name='WriteIOPS', example='2000'),
    }
  ](name='MonitorData'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  totalCount?: long(name='TotalCount', example='15'),
}

model DescribeDiskMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiskMonitorDataResponseBody(name='body'),
}

async function describeDiskMonitorDataWithOptions(request: DescribeDiskMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeDiskMonitorDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiskMonitorData',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiskMonitorData(request: DescribeDiskMonitorDataRequest): DescribeDiskMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskMonitorDataWithOptions(request, runtime);
}

model DescribeDiskMonitorDataListRequest {
  diskIds?: string(name='DiskIds', example='["d-bp67acfmxazb4p****","d-bp67acfmxazs5t****"]'),
  endTime?: string(name='EndTime', example='2022-06-01T05:00:00Z'),
  maxResults?: string(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='e71d8a535bd9c****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime', example='2022-06-01T03:00:00Z'),
  type?: string(name='Type', example='pro'),
}

model DescribeDiskMonitorDataListResponseBody = {
  monitorData?: [ 
    {
      burstIOCount?: long(name='BurstIOCount', example='2000'),
      diskId?: string(name='DiskId', example='d-bp67acfmxazb4p****'),
      timestamp?: string(name='Timestamp', example='2022-06-01T08:00:00Z'),
    }
  ](name='MonitorData'),
  nextToken?: string(name='NextToken', example='e71d8a535bd9c****'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  totalCount?: long(name='TotalCount', example='3'),
}

model DescribeDiskMonitorDataListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiskMonitorDataListResponseBody(name='body'),
}

async function describeDiskMonitorDataListWithOptions(request: DescribeDiskMonitorDataListRequest, runtime: Util.RuntimeOptions): DescribeDiskMonitorDataListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskIds)) {
    query['DiskIds'] = request.diskIds;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiskMonitorDataList',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiskMonitorDataList(request: DescribeDiskMonitorDataListRequest): DescribeDiskMonitorDataListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskMonitorDataListWithOptions(request, runtime);
}

model DescribeDiskReplicaGroupsRequest {
  groupIds?: string(name='GroupIds', example='AAAAAdDWBF2****'),
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAAdDWBF2****'),
  pageNumber?: int32(name='PageNumber', example='5'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  site?: string(name='Site', example='production'),
}

model DescribeDiskReplicaGroupsResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAdDWBF2****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  replicaGroups?: [ 
    {
      bandwidth?: long(name='Bandwidth', example='0'),
      description?: string(name='Description', example='This is description.'),
      destinationRegionId?: string(name='DestinationRegionId', example='cn-shanghai'),
      destinationZoneId?: string(name='DestinationZoneId', example='cn-shanghai-e'),
      groupName?: string(name='GroupName', example='myreplicagrouptest'),
      lastRecoverPoint?: long(name='LastRecoverPoint', example='1637835114'),
      pairIds?: [ bytes ](name='PairIds'),
      pairNumber?: long(name='PairNumber', example='2'),
      primaryRegion?: string(name='PrimaryRegion', example='cn-beijing'),
      primaryZone?: string(name='PrimaryZone', example='cn-beijing-h'),
      RPO?: long(name='RPO', example='180'),
      replicaGroupId?: string(name='ReplicaGroupId', example='pg-myreplica****'),
      site?: string(name='Site', example='production'),
      sourceRegionId?: string(name='SourceRegionId', example='cn-beijing'),
      sourceZoneId?: string(name='SourceZoneId', example='cn-beijing-f'),
      standbyRegion?: string(name='StandbyRegion', example='cn-shanghai'),
      standbyZone?: string(name='StandbyZone', example='cn-shanghai-e'),
      status?: string(name='Status', example='created'),
    }
  ](name='ReplicaGroups'),
  requestId?: string(name='RequestId', example='AAA478A0-BEE6-1D42-BEB6-A9CFEAD6****'),
  totalCount?: long(name='TotalCount', example='60'),
}

model DescribeDiskReplicaGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiskReplicaGroupsResponseBody(name='body'),
}

async function describeDiskReplicaGroupsWithOptions(request: DescribeDiskReplicaGroupsRequest, runtime: Util.RuntimeOptions): DescribeDiskReplicaGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupIds)) {
    query['GroupIds'] = request.groupIds;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.site)) {
    query['Site'] = request.site;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiskReplicaGroups',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiskReplicaGroups(request: DescribeDiskReplicaGroupsRequest): DescribeDiskReplicaGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskReplicaGroupsWithOptions(request, runtime);
}

model DescribeDiskReplicaPairProgressRequest {
  regionId?: string(name='RegionId', example='cn-beijing'),
  replicaPairId?: string(name='ReplicaPairId', example='pair-cn-tl32ribst0z'),
}

model DescribeDiskReplicaPairProgressResponseBody = {
  progress?: int32(name='Progress', example='100'),
  recoverPoint?: long(name='RecoverPoint', example='1661917424'),
  requestId?: string(name='RequestId', example='AAA478A0-BEE6-1D42-BEB6-A9CFEAD6****'),
}

model DescribeDiskReplicaPairProgressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiskReplicaPairProgressResponseBody(name='body'),
}

async function describeDiskReplicaPairProgressWithOptions(request: DescribeDiskReplicaPairProgressRequest, runtime: Util.RuntimeOptions): DescribeDiskReplicaPairProgressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiskReplicaPairProgress',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiskReplicaPairProgress(request: DescribeDiskReplicaPairProgressRequest): DescribeDiskReplicaPairProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskReplicaPairProgressWithOptions(request, runtime);
}

model DescribeDiskReplicaPairsRequest {
  maxResults?: long(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='AAAAAdDWBF2****'),
  pageNumber?: int32(name='PageNumber', example='5'),
  pageSize?: int32(name='PageSize', example='10'),
  pairIds?: string(name='PairIds', example='pair-cn-dsa****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  replicaGroupId?: string(name='ReplicaGroupId', example='pg-****'),
  site?: string(name='Site', example='production'),
}

model DescribeDiskReplicaPairsResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAdDWBF2****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  replicaPairs?: [ 
    {
      bandwidth?: long(name='Bandwidth', example='10240'),
      chargeType?: string(name='ChargeType', example='PREPAY'),
      createTime?: long(name='CreateTime', example='1649750977'),
      description?: string(name='Description', example='This is description.'),
      destinationDiskId?: string(name='DestinationDiskId', example='d-asdfjl2342kj2l3k4****'),
      destinationRegion?: string(name='DestinationRegion', example='cn-shanghai'),
      destinationZoneId?: string(name='DestinationZoneId', example='cn-shanghai-b'),
      expiredTime?: long(name='ExpiredTime', example='1649750977'),
      lastRecoverPoint?: long(name='LastRecoverPoint', example='1649751977'),
      pairName?: string(name='PairName', example='TestReplicaPair'),
      primaryRegion?: string(name='PrimaryRegion', example='cn-beijing'),
      primaryZone?: string(name='PrimaryZone', example='cn-beijing-a'),
      RPO?: long(name='RPO', example='900'),
      replicaGroupId?: string(name='ReplicaGroupId', example='pg-xxxx****'),
      replicaGroupName?: string(name='ReplicaGroupName', example='pg-name****'),
      replicaPairId?: string(name='ReplicaPairId', example='pair-cn-dsa****'),
      site?: string(name='Site', example='production'),
      sourceDiskId?: string(name='SourceDiskId', example='d-bp131n0q38u3a4zi****'),
      sourceRegion?: string(name='SourceRegion', example='cn-beijing'),
      sourceZoneId?: string(name='SourceZoneId', example='cn-beijing-a'),
      standbyRegion?: string(name='StandbyRegion', example='cn-shanghai'),
      standbyZone?: string(name='StandbyZone', example='cn-shanghai-b'),
      status?: string(name='Status', example='created'),
      statusMessage?: string(name='StatusMessage', example='PrePayOrderExpired'),
    }
  ](name='ReplicaPairs'),
  requestId?: string(name='RequestId', example='AAA478A0-BEE6-1D42-BEB6-A9CFEAD6****'),
  totalCount?: long(name='TotalCount', example='60'),
}

model DescribeDiskReplicaPairsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiskReplicaPairsResponseBody(name='body'),
}

async function describeDiskReplicaPairsWithOptions(request: DescribeDiskReplicaPairsRequest, runtime: Util.RuntimeOptions): DescribeDiskReplicaPairsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pairIds)) {
    query['PairIds'] = request.pairIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  if (!Util.isUnset(request.site)) {
    query['Site'] = request.site;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiskReplicaPairs',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiskReplicaPairs(request: DescribeDiskReplicaPairsRequest): DescribeDiskReplicaPairsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskReplicaPairsWithOptions(request, runtime);
}

model DescribeLensServiceStatusResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  status?: string(name='Status', example='Available'),
}

model DescribeLensServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLensServiceStatusResponseBody(name='body'),
}

async function describeLensServiceStatusWithOptions(runtime: Util.RuntimeOptions): DescribeLensServiceStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeLensServiceStatus',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLensServiceStatus(): DescribeLensServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLensServiceStatusWithOptions(runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  resourceType?: string(name='ResourceType', example='ear'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint', example='ebs.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      zones?: [ 
        {
          localName?: string(name='LocalName'),
          resourceTypes?: [ string ](name='ResourceTypes'),
          zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
        }
      ](name='Zones'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='17EE62D8-064E-5404-8B0D-72122478****'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model FailoverDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  replicaGroupId?: string(name='ReplicaGroupId', example='group-myreplica****'),
}

model FailoverDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model FailoverDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FailoverDiskReplicaGroupResponseBody(name='body'),
}

async function failoverDiskReplicaGroupWithOptions(request: FailoverDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): FailoverDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FailoverDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function failoverDiskReplicaGroup(request: FailoverDiskReplicaGroupRequest): FailoverDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return failoverDiskReplicaGroupWithOptions(request, runtime);
}

model FailoverDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  replicaPairId?: string(name='ReplicaPairId', example='pair-cn-dsa****'),
}

model FailoverDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model FailoverDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FailoverDiskReplicaPairResponseBody(name='body'),
}

async function failoverDiskReplicaPairWithOptions(request: FailoverDiskReplicaPairRequest, runtime: Util.RuntimeOptions): FailoverDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FailoverDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function failoverDiskReplicaPair(request: FailoverDiskReplicaPairRequest): FailoverDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return failoverDiskReplicaPairWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****'),
  nextToken?: string(name='NextToken', example='token123'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', example='disk-123'),
  resourceType?: string(name='ResourceType', example='pair'),
  tag?: [ 
    {
      key?: string(name='Key', example='tag-key'),
      value?: string(name='Value', example='tag-value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', example='484256DA-D816-44D2-9D86-B6EE4D5B****'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', example='pair-cn-c4d2t7f****'),
      resourceType?: string(name='ResourceType', example='pair'),
      tagKey?: string(name='TagKey', example='TestKey'),
      tagValue?: string(name='TagValue', example='TestValue'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyDedicatedBlockStorageClusterAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  dbscId?: string(name='DbscId', example='dbsc-cn-od43bf****'),
  dbscName?: string(name='DbscName', example='my-test-dbsc'),
  description?: string(name='Description', example='test'),
  regionId?: string(name='RegionId', example='cn-heyuan'),
}

model ModifyDedicatedBlockStorageClusterAttributeResponseBody = {
  requestId?: string(name='RequestId', example='11B55F58-D3A4-4A9B-9596-342420D0****'),
}

model ModifyDedicatedBlockStorageClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDedicatedBlockStorageClusterAttributeResponseBody(name='body'),
}

async function modifyDedicatedBlockStorageClusterAttributeWithOptions(request: ModifyDedicatedBlockStorageClusterAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedBlockStorageClusterAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dbscId)) {
    query['DbscId'] = request.dbscId;
  }
  if (!Util.isUnset(request.dbscName)) {
    query['DbscName'] = request.dbscName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedBlockStorageClusterAttribute',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDedicatedBlockStorageClusterAttribute(request: ModifyDedicatedBlockStorageClusterAttributeRequest): ModifyDedicatedBlockStorageClusterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedBlockStorageClusterAttributeWithOptions(request, runtime);
}

model ModifyDiskReplicaGroupRequest {
  bandwidth?: long(name='Bandwidth', example='-'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  description?: string(name='Description', example='This is description.'),
  groupName?: string(name='GroupName', example='myreplicagrouptest'),
  RPO?: long(name='RPO', example='900'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  replicaGroupId?: string(name='ReplicaGroupId', example='pg-myreplica****'),
}

model ModifyDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model ModifyDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDiskReplicaGroupResponseBody(name='body'),
}

async function modifyDiskReplicaGroupWithOptions(request: ModifyDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): ModifyDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.RPO)) {
    query['RPO'] = request.RPO;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDiskReplicaGroup(request: ModifyDiskReplicaGroupRequest): ModifyDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiskReplicaGroupWithOptions(request, runtime);
}

model ModifyDiskReplicaPairRequest {
  bandwidth?: long(name='Bandwidth', example='10240'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  description?: string(name='Description', example='This is description.'),
  pairName?: string(name='PairName', example='TestReplicaPair'),
  RPO?: long(name='RPO', example='900'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  replicaPairId?: string(name='ReplicaPairId', example='pair-cn-dsa****'),
}

model ModifyDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model ModifyDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDiskReplicaPairResponseBody(name='body'),
}

async function modifyDiskReplicaPairWithOptions(request: ModifyDiskReplicaPairRequest, runtime: Util.RuntimeOptions): ModifyDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.pairName)) {
    query['PairName'] = request.pairName;
  }
  if (!Util.isUnset(request.RPO)) {
    query['RPO'] = request.RPO;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDiskReplicaPair(request: ModifyDiskReplicaPairRequest): ModifyDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiskReplicaPairWithOptions(request, runtime);
}

model RemoveDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  replicaGroupId?: string(name='ReplicaGroupId', example='pg-myreplica****'),
  replicaPairId?: string(name='ReplicaPairId', example='pair-cn-dsa****'),
}

model RemoveDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model RemoveDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveDiskReplicaPairResponseBody(name='body'),
}

async function removeDiskReplicaPairWithOptions(request: RemoveDiskReplicaPairRequest, runtime: Util.RuntimeOptions): RemoveDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeDiskReplicaPair(request: RemoveDiskReplicaPairRequest): RemoveDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDiskReplicaPairWithOptions(request, runtime);
}

model ReprotectDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  replicaGroupId?: string(name='ReplicaGroupId', example='pg-myreplica****'),
}

model ReprotectDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model ReprotectDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReprotectDiskReplicaGroupResponseBody(name='body'),
}

async function reprotectDiskReplicaGroupWithOptions(request: ReprotectDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): ReprotectDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReprotectDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reprotectDiskReplicaGroup(request: ReprotectDiskReplicaGroupRequest): ReprotectDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return reprotectDiskReplicaGroupWithOptions(request, runtime);
}

model ReprotectDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  replicaPairId?: string(name='ReplicaPairId', example='pair-cn-dsa****'),
}

model ReprotectDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model ReprotectDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReprotectDiskReplicaPairResponseBody(name='body'),
}

async function reprotectDiskReplicaPairWithOptions(request: ReprotectDiskReplicaPairRequest, runtime: Util.RuntimeOptions): ReprotectDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReprotectDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reprotectDiskReplicaPair(request: ReprotectDiskReplicaPairRequest): ReprotectDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return reprotectDiskReplicaPairWithOptions(request, runtime);
}

model StartDiskMonitorRequest {
  diskIds?: [ string ](name='DiskIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model StartDiskMonitorShrinkRequest {
  diskIdsShrink?: string(name='DiskIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model StartDiskMonitorResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model StartDiskMonitorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDiskMonitorResponseBody(name='body'),
}

async function startDiskMonitorWithOptions(tmpReq: StartDiskMonitorRequest, runtime: Util.RuntimeOptions): StartDiskMonitorResponse {
  Util.validateModel(tmpReq);
  var request = new StartDiskMonitorShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.diskIds)) {
    request.diskIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.diskIds, 'DiskIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.diskIdsShrink)) {
    query['DiskIds'] = request.diskIdsShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDiskMonitor',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startDiskMonitor(request: StartDiskMonitorRequest): StartDiskMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDiskMonitorWithOptions(request, runtime);
}

model StartDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  oneShot?: boolean(name='OneShot', example='false'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  replicaGroupId?: string(name='ReplicaGroupId', example='pg-myreplica****'),
}

model StartDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model StartDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDiskReplicaGroupResponseBody(name='body'),
}

async function startDiskReplicaGroupWithOptions(request: StartDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): StartDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.oneShot)) {
    query['OneShot'] = request.oneShot;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startDiskReplicaGroup(request: StartDiskReplicaGroupRequest): StartDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDiskReplicaGroupWithOptions(request, runtime);
}

model StartDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  oneShot?: boolean(name='OneShot', example='false'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  replicaPairId?: string(name='ReplicaPairId', example='pair-cn-dsa****'),
}

model StartDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', example='A37597A6-BB99-19B3-85EA-4C2B91F0****'),
}

model StartDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDiskReplicaPairResponseBody(name='body'),
}

async function startDiskReplicaPairWithOptions(request: StartDiskReplicaPairRequest, runtime: Util.RuntimeOptions): StartDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.oneShot)) {
    query['OneShot'] = request.oneShot;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startDiskReplicaPair(request: StartDiskReplicaPairRequest): StartDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDiskReplicaPairWithOptions(request, runtime);
}

model StopDiskMonitorRequest {
  diskIds?: [ string ](name='DiskIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model StopDiskMonitorShrinkRequest {
  diskIdsShrink?: string(name='DiskIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model StopDiskMonitorResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model StopDiskMonitorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopDiskMonitorResponseBody(name='body'),
}

async function stopDiskMonitorWithOptions(tmpReq: StopDiskMonitorRequest, runtime: Util.RuntimeOptions): StopDiskMonitorResponse {
  Util.validateModel(tmpReq);
  var request = new StopDiskMonitorShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.diskIds)) {
    request.diskIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.diskIds, 'DiskIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.diskIdsShrink)) {
    query['DiskIds'] = request.diskIdsShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDiskMonitor',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopDiskMonitor(request: StopDiskMonitorRequest): StopDiskMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDiskMonitorWithOptions(request, runtime);
}

model StopDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  replicaGroupId?: string(name='ReplicaGroupId', example='pg-myreplica****'),
}

model StopDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model StopDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopDiskReplicaGroupResponseBody(name='body'),
}

async function stopDiskReplicaGroupWithOptions(request: StopDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): StopDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopDiskReplicaGroup(request: StopDiskReplicaGroupRequest): StopDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDiskReplicaGroupWithOptions(request, runtime);
}

model StopDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  replicaPairId?: string(name='ReplicaPairId', example='pair-cn-dsa****'),
}

model StopDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', example='A37597A6-BB99-19B3-85EA-4C2B91F0****'),
}

model StopDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopDiskReplicaPairResponseBody(name='body'),
}

async function stopDiskReplicaPairWithOptions(request: StopDiskReplicaPairRequest, runtime: Util.RuntimeOptions): StopDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopDiskReplicaPair(request: StopDiskReplicaPairRequest): StopDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDiskReplicaPairWithOptions(request, runtime);
}

model TagResourcesRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', example='disk-123'),
  resourceType?: string(name='ResourceType', example='ear'),
  tag?: [ 
    {
      key?: string(name='Key', example='tag-key'),
      value?: string(name='Value', example='tag-value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', example='false'),
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', example='disk-123'),
  resourceType?: string(name='ResourceType', example='pair'),
  tagKey?: [ string ](name='TagKey', example='disk-123'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='C46FF5A8-C5F0-4024-8262-B16B6392****'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

