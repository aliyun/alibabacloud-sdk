/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('ebs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  regionId?: string(name='RegionId', description='The ID of the replication pair. You can call the [DescribeDiskReplicaPairs](~~354206~~) operation to query the IDs of existing replication pairs.', example='cn-beijing'),
  replicaGroupId?: string(name='ReplicaGroupId', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='pg-myreplica****'),
  replicaPairId?: string(name='ReplicaPairId', description='The ID of the request.', example='pair-cn-dsa****'),
}

model AddDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model AddDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDiskReplicaPairResponseBody(name='body'),
}

/**
  * The region ID of the replication pair-consistent group.
  *
  * @param request AddDiskReplicaPairRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddDiskReplicaPairResponse
 */
async function addDiskReplicaPairWithOptions(request: AddDiskReplicaPairRequest, runtime: Util.RuntimeOptions): AddDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The region ID of the replication pair-consistent group.
  *
  * @param request AddDiskReplicaPairRequest
  * @return AddDiskReplicaPairResponse
 */
async function addDiskReplicaPair(request: AddDiskReplicaPairRequest): AddDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDiskReplicaPairWithOptions(request, runtime);
}

model ApplyLensServiceResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model ApplyLensServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyLensServiceResponseBody(name='body'),
}

async function applyLensServiceWithOptions(runtime: Util.RuntimeOptions): ApplyLensServiceResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ApplyLensService',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyLensService(): ApplyLensServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyLensServiceWithOptions(runtime);
}

model CancelLensServiceResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model CancelLensServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelLensServiceResponseBody(name='body'),
}

async function cancelLensServiceWithOptions(runtime: Util.RuntimeOptions): CancelLensServiceResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'CancelLensService',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelLensService(): CancelLensServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelLensServiceWithOptions(runtime);
}

model ChangeResourceGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  newResourceGroupId?: string(name='NewResourceGroupId', example='rg-123'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', example='pair-123'),
  resourceType?: string(name='ResourceType', example='diskreplicapair'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroupWithOptions(request: ChangeResourceGroupRequest, runtime: Util.RuntimeOptions): ChangeResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.newResourceGroupId)) {
    query['NewResourceGroupId'] = request.newResourceGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeResourceGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeResourceGroupWithOptions(request, runtime);
}

model CreateDedicatedBlockStorageClusterRequest {
  azone?: string(name='Azone', description='The ID of the zone in which to create the dedicated block storage cluster. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.', example='cn-heyuan-b'),
  capacity?: long(name='Capacity', description='The capacity of the dedicated block storage cluster. Valid values: 61440 to 2334720. Unit: GiB. 2,334,720 GiB is equal to 2,280 TiB. The capacity increases in a minimum increment of 12,288 GB.

>  If the capacity of a dedicated block storage cluster is less than 576 TiB, the maximum throughput supported per TiB does not exceed 52 MB/s. If the capacity of a dedicated block storage cluster is greater than 576 TiB, the maximum throughput supported per TiB does not exceed 26 MB/s.', example='61440'),
  dbscId?: string(name='DbscId', deprecated='true'),
  dbscName?: string(name='DbscName', description='The name of the dedicated block storage cluster.', example='myDBSCCluster'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  regionId?: string(name='RegionId', description='The ID of the region in which to create the dedicated block storage cluster. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-heyuan'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmvs*******'),
  tag?: [ 
    {
      key?: string(name='Key', example='tag-key'),
      value?: string(name='Value', example='tag-value'),
    }
  ](name='Tag'),
  type?: string(name='Type', description='The type of the dedicated block storage cluster. Valid values:

*   Standard: basic type. When you set Type to Standard, enhanced SSDs (ESSDs) at performance level 0 (PL0 ESSDs) can be created in the dedicated block storage cluster.
*   Premium: performance type. When you set Type to Premium, ESSDs at performance level 1 (PL1 ESSDs) can be created in the dedicated block storage cluster.

Default value: Premium.

For more information about ESSDs, see [ESSDs](~~122389~~).', example='Premium'),
}

model CreateDedicatedBlockStorageClusterResponseBody = {
  dbscId?: string(name='DbscId', description='The ID of the dedicated block storage cluster.', example='dbsc-f8z4d3k4nsgg9okb****'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='50155660025****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F****'),
}

model CreateDedicatedBlockStorageClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDedicatedBlockStorageClusterResponseBody(name='body'),
}

/**
  * Dedicated block storage clusters are physically isolated from public block storage clusters. The owner of each dedicated block storage cluster has exclusive access to all resources in the cluster. For more information, see [Overview](~~208883~~).
  * Disks created in a dedicated block storage cluster can be attached only to Elastic Compute Service (ECS) instances that reside in the same zone as the cluster. Before you create a dedicated block storage cluster, decide the regions and zones in which to deploy your cloud resources.
  * Dedicated block storage clusters are classified into basic and performance types. When you create a dedicated block storage cluster, select a cluster type based on your business requirements.
  * You are charged for creating dedicated block storage clusters. For more information, see [~~208884~~](~~208884~~).
  *
  * @param request CreateDedicatedBlockStorageClusterRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDedicatedBlockStorageClusterResponse
 */
async function createDedicatedBlockStorageClusterWithOptions(request: CreateDedicatedBlockStorageClusterRequest, runtime: Util.RuntimeOptions): CreateDedicatedBlockStorageClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.azone)) {
    query['Azone'] = request.azone;
  }
  if (!Util.isUnset(request.capacity)) {
    query['Capacity'] = request.capacity;
  }
  if (!Util.isUnset(request.dbscId)) {
    query['DbscId'] = request.dbscId;
  }
  if (!Util.isUnset(request.dbscName)) {
    query['DbscName'] = request.dbscName;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDedicatedBlockStorageCluster',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Dedicated block storage clusters are physically isolated from public block storage clusters. The owner of each dedicated block storage cluster has exclusive access to all resources in the cluster. For more information, see [Overview](~~208883~~).
  * Disks created in a dedicated block storage cluster can be attached only to Elastic Compute Service (ECS) instances that reside in the same zone as the cluster. Before you create a dedicated block storage cluster, decide the regions and zones in which to deploy your cloud resources.
  * Dedicated block storage clusters are classified into basic and performance types. When you create a dedicated block storage cluster, select a cluster type based on your business requirements.
  * You are charged for creating dedicated block storage clusters. For more information, see [~~208884~~](~~208884~~).
  *
  * @param request CreateDedicatedBlockStorageClusterRequest
  * @return CreateDedicatedBlockStorageClusterResponse
 */
async function createDedicatedBlockStorageCluster(request: CreateDedicatedBlockStorageClusterRequest): CreateDedicatedBlockStorageClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedBlockStorageClusterWithOptions(request, runtime);
}

model CreateDiskReplicaGroupRequest {
  bandwidth?: long(name='Bandwidth', description='The bandwidth value. Unit: Mbit/s.

>  This parameter is unavailable.', example='5'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-42665544****'),
  description?: string(name='Description', description='The description of the replication pair-consistent group. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is description.'),
  destinationRegionId?: string(name='DestinationRegionId', description='The region ID of the secondary site.', example='cn-shanghai'),
  destinationZoneId?: string(name='DestinationZoneId', description='The zone ID of the secondary site.', example='cn-shanghai-e'),
  groupName?: string(name='GroupName', description='The name of the replication pair-consistent group. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='myreplicagrouptest'),
  RPO?: long(name='RPO', description='The RPO of the replication pair-consistent group. Unit: seconds. Set the value to 900.', example='900'),
  regionId?: string(name='RegionId', description='The ID of the region in which to create the replication pair-consistent group. The primary site is deployed in this region.', example='cn-beijing'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmvs*******'),
  sourceZoneId?: string(name='SourceZoneId', description='The zone ID of the primary site.', example='cn-beijing-f'),
  tag?: [ 
    {
      key?: string(name='Key', example='tag-key'),
      value?: string(name='Value', example='tag-value'),
    }
  ](name='Tag'),
}

model CreateDiskReplicaGroupResponseBody = {
  replicaGroupId?: string(name='ReplicaGroupId', description='The ID of the replication pair-consistent group.', example='pg-xxxxxxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model CreateDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDiskReplicaGroupResponseBody(name='body'),
}

/**
  * The replication pair-consistent group feature allows you to batch manage multiple disks in disaster recovery scenarios. You can restore the data of all disks in the same replication pair-consistent group to the same point in time to allow for disaster recovery of one or more instances.
  * When you create a replication pair-consistent group, take note of the following items:
  * *   The replication pair-consistent group feature is supported in the China (Hangzhou), China (Shanghai), China (Beijing), China (Shenzhen), China (Heyuan), China (Chengdu), China (Hong Kong), Singapore, US (Silicon Valley), and US (Virginia) regions.
  * *   Replication pair-consistent groups support disaster recovery across zones within the same region and disaster recovery across regions.
  * *   A replication pair and a replication pair-consistent group replicate in the same direction if they have the same primary region (production region), primary zone (production zone), secondary region (disaster recovery region), and secondary zone (disaster recovery zone). Replication pairs can be added only to a replication pair-consistent group that replicates in the same direction as them.
  * *   After replication pairs are added to a replication pair-consistent group, the recovery point objective (RPO) of the group takes effect on the pairs in place of their original RPOs.
  *
  * @param request CreateDiskReplicaGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDiskReplicaGroupResponse
 */
async function createDiskReplicaGroupWithOptions(request: CreateDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): CreateDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destinationRegionId)) {
    query['DestinationRegionId'] = request.destinationRegionId;
  }
  if (!Util.isUnset(request.destinationZoneId)) {
    query['DestinationZoneId'] = request.destinationZoneId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.RPO)) {
    query['RPO'] = request.RPO;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceZoneId)) {
    query['SourceZoneId'] = request.sourceZoneId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The replication pair-consistent group feature allows you to batch manage multiple disks in disaster recovery scenarios. You can restore the data of all disks in the same replication pair-consistent group to the same point in time to allow for disaster recovery of one or more instances.
  * When you create a replication pair-consistent group, take note of the following items:
  * *   The replication pair-consistent group feature is supported in the China (Hangzhou), China (Shanghai), China (Beijing), China (Shenzhen), China (Heyuan), China (Chengdu), China (Hong Kong), Singapore, US (Silicon Valley), and US (Virginia) regions.
  * *   Replication pair-consistent groups support disaster recovery across zones within the same region and disaster recovery across regions.
  * *   A replication pair and a replication pair-consistent group replicate in the same direction if they have the same primary region (production region), primary zone (production zone), secondary region (disaster recovery region), and secondary zone (disaster recovery zone). Replication pairs can be added only to a replication pair-consistent group that replicates in the same direction as them.
  * *   After replication pairs are added to a replication pair-consistent group, the recovery point objective (RPO) of the group takes effect on the pairs in place of their original RPOs.
  *
  * @param request CreateDiskReplicaGroupRequest
  * @return CreateDiskReplicaGroupResponse
 */
async function createDiskReplicaGroup(request: CreateDiskReplicaGroupRequest): CreateDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiskReplicaGroupWithOptions(request, runtime);
}

model CreateDiskReplicaPairRequest {
  bandwidth?: long(name='Bandwidth', description='The recovery point objective (RPO) of the replication pair. Unit: seconds. Set the value to 900.', example='10240'),
  chargeType?: string(name='ChargeType', description='The subscription duration of the replication pair. This parameter is required when the `ChargeType` parameter is set to PREPAY. The unit of the subscription duration is specified by the `PeriodUnit` parameter.

*   Valid values when the `PeriodUnit` parameter is set to Week: 1, 2, 3, and 4.
*   Valid values when the `PeriodUnit` parameter is set to Month: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, and 60.', example='PREPAY'),
  clientToken?: string(name='ClientToken', description='The bandwidth to use to asynchronously replicate data between the primary disk and secondary disk. Unit: Kbit/s. Valid values:

*   10240 : equal to 10 Mbit/s
*   20480 : equal to 20 Mbit/s
*   51200 : equal to 50 Mbit/s
*   102400 : equal to 100 Mbit/s

Default value: 10240.

When you set the ChargeType parameter to POSTPAY, the Bandwidth parameter is automatically set to 0 and cannot be modified. The value 0 indicates that bandwidth is dynamically allocated based on the volume of data that is asynchronously replicated from the primary disk to the secondary disk.', example='123e4567-e89b-12d3-a456-42665544****'),
  description?: string(name='Description', description='The billing method of the replication pair. Valid values:

*   PREPAY: subscription
*   POSTPAY: pay-as-you-go

Default value: POSTPAY.', example='This is description.'),
  destinationDiskId?: string(name='DestinationDiskId', description='The zone ID of the secondary disk.', example='d-sa1f82p58p1tdw9g****'),
  destinationRegionId?: string(name='DestinationRegionId', description='The ID of the secondary disk.', example='cn-shanghai'),
  destinationZoneId?: string(name='DestinationZoneId', description='The name of the replication pair. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).', example='cn-shanghai-e'),
  diskId?: string(name='DiskId', description='The region ID of the secondary disk. You can call the [DescribeRegions](~~354276~~) operation to query the most recent list of regions in which async replication is supported.', example='d-iq80sgp4d0xbk24q****'),
  pairName?: string(name='PairName', description='The description of the replication pair. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='TestReplicaPair'),
  period?: long(name='Period', description='The unit of the subscription duration of the replication pair. Valid values:

*   Week.
*   Month

Default value: Month.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='Month'),
  RPO?: long(name='RPO', description='The ID of the resource group to which to assign the replication pair.', example='900'),
  regionId?: string(name='RegionId', description='The zone ID of the primary disk.', example='cn-shanghai'),
  resourceGroupId?: string(name='ResourceGroupId', description='The key of tag N to add to the replication pair.', example='rg-acfmvs****'),
  sourceZoneId?: string(name='SourceZoneId', description='The ID of the primary disk.', example='cn-beijing-f'),
  tag?: [ 
    {
      key?: string(name='Key', description='The value of tag N to add to the replication pair.', example='TestKey'),
      value?: string(name='Value', description='The ID of the request.', example='TestValue'),
    }
  ](name='Tag'),
}

model CreateDiskReplicaPairResponseBody = {
  orderId?: string(name='OrderId', example='123456****'),
  replicaPairId?: string(name='ReplicaPairId', description='The ID of the order.', example='pair-cn-dsa****'),
  requestId?: string(name='RequestId', description='The ID of the replication pair.', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model CreateDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDiskReplicaPairResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to **CreateDiskReplicaPair**.
  *
  * @param request CreateDiskReplicaPairRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDiskReplicaPairResponse
 */
async function createDiskReplicaPairWithOptions(request: CreateDiskReplicaPairRequest, runtime: Util.RuntimeOptions): CreateDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destinationDiskId)) {
    query['DestinationDiskId'] = request.destinationDiskId;
  }
  if (!Util.isUnset(request.destinationRegionId)) {
    query['DestinationRegionId'] = request.destinationRegionId;
  }
  if (!Util.isUnset(request.destinationZoneId)) {
    query['DestinationZoneId'] = request.destinationZoneId;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.pairName)) {
    query['PairName'] = request.pairName;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.RPO)) {
    query['RPO'] = request.RPO;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceZoneId)) {
    query['SourceZoneId'] = request.sourceZoneId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The operation that you want to perform. Set the value to **CreateDiskReplicaPair**.
  *
  * @param request CreateDiskReplicaPairRequest
  * @return CreateDiskReplicaPairResponse
 */
async function createDiskReplicaPair(request: CreateDiskReplicaPairRequest): CreateDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiskReplicaPairWithOptions(request, runtime);
}

model DeleteDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-42665544****'),
  regionId?: string(name='RegionId', description='The region ID of the replication pair-consistent group.', example='cn-beijing'),
  replicaGroupId?: string(name='ReplicaGroupId', description='The ID of the replication pair-consistent group. You can call the [DescribeDiskReplicaGroups](~~426614~~) operation to query the IDs of replication pair-consistent groups.', example='pg-myreplica****'),
}

model DeleteDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model DeleteDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDiskReplicaGroupResponseBody(name='body'),
}

/**
  * *   The replication pair-consistent group feature is supported in the China (Hangzhou), China (Shanghai), China (Beijing), China (Shenzhen), China (Heyuan), China (Chengdu), China (Hong Kong), Singapore (Singapore), US (Silicon Valley), and US (Virginia) regions.
  * *   Before you can delete a replication pair-consistent group, make sure that no replication pairs are present in the group.
  * *   The replication pair-consistent group that you want to delete must be in the **Created** (`created`), **Creation Failed** (`create_failed`), **Stopped** (`stopped`), **Failover Failed** (`failovered`), **Deleting** (`deleting`), **Deletion Failed** (`delete_failed`), or **Invalid** (`invalid`) state.
  *
  * @param request DeleteDiskReplicaGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteDiskReplicaGroupResponse
 */
async function deleteDiskReplicaGroupWithOptions(request: DeleteDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): DeleteDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The replication pair-consistent group feature is supported in the China (Hangzhou), China (Shanghai), China (Beijing), China (Shenzhen), China (Heyuan), China (Chengdu), China (Hong Kong), Singapore (Singapore), US (Silicon Valley), and US (Virginia) regions.
  * *   Before you can delete a replication pair-consistent group, make sure that no replication pairs are present in the group.
  * *   The replication pair-consistent group that you want to delete must be in the **Created** (`created`), **Creation Failed** (`create_failed`), **Stopped** (`stopped`), **Failover Failed** (`failovered`), **Deleting** (`deleting`), **Deletion Failed** (`delete_failed`), or **Invalid** (`invalid`) state.
  *
  * @param request DeleteDiskReplicaGroupRequest
  * @return DeleteDiskReplicaGroupResponse
 */
async function deleteDiskReplicaGroup(request: DeleteDiskReplicaGroupRequest): DeleteDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDiskReplicaGroupWithOptions(request, runtime);
}

model DeleteDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How do I ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-42665544****'),
  regionId?: string(name='RegionId', description='The region ID of the primary disk in the replication pair. You can call the [DescribeDiskReplicaPairs](~~354206~~) operation to query the region information of replication pairs.', example='cn-beijing'),
  replicaPairId?: string(name='ReplicaPairId', description='The ID of the replication pair.', example='pair-cn-dsa****'),
}

model DeleteDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A37597A6-BB99-19B3-85EA-4C2B91F0****'),
}

model DeleteDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDiskReplicaPairResponseBody(name='body'),
}

/**
  * *   The async replication feature is supported in the China (Hangzhou), China (Shanghai), China (Beijing), China (Shenzhen), China (Heyuan), China (Chengdu), China (Hong Kong), Singapore (Singapore), US (Silicon Valley), and US (Virginia) regions.
  * *   Only replication pairs that are in the **Stopped** (`stopped`), **Invalid** (`invalid`), or **Failed Over** (`failovered`) state can be deleted. This operation deletes only replication pairs. The primary and secondary disks in the deleted replication pairs are retained.
  * *   To delete a replication pair, you must call this operation in the region where the primary disk is located. After the replication pair is deleted, the functionality limits are lifted from the primary and secondary disks. For example, you can attach the secondary disk, resize the disk, or read data from or write data to the disk.
  *
  * @param request DeleteDiskReplicaPairRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteDiskReplicaPairResponse
 */
async function deleteDiskReplicaPairWithOptions(request: DeleteDiskReplicaPairRequest, runtime: Util.RuntimeOptions): DeleteDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The async replication feature is supported in the China (Hangzhou), China (Shanghai), China (Beijing), China (Shenzhen), China (Heyuan), China (Chengdu), China (Hong Kong), Singapore (Singapore), US (Silicon Valley), and US (Virginia) regions.
  * *   Only replication pairs that are in the **Stopped** (`stopped`), **Invalid** (`invalid`), or **Failed Over** (`failovered`) state can be deleted. This operation deletes only replication pairs. The primary and secondary disks in the deleted replication pairs are retained.
  * *   To delete a replication pair, you must call this operation in the region where the primary disk is located. After the replication pair is deleted, the functionality limits are lifted from the primary and secondary disks. For example, you can attach the secondary disk, resize the disk, or read data from or write data to the disk.
  *
  * @param request DeleteDiskReplicaPairRequest
  * @return DeleteDiskReplicaPairResponse
 */
async function deleteDiskReplicaPair(request: DeleteDiskReplicaPairRequest): DeleteDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDiskReplicaPairWithOptions(request, runtime);
}

model DescribeDedicatedBlockStorageClusterDisksRequest {
  dbscId?: string(name='DbscId', description='The ID of the dedicated block storage cluster.', example='dbsc-cn-od43bf****'),
  maxResults?: long(name='MaxResults', description='The maximum number of entries to return on each page. Maximum value: 500.

Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the NextToken value returned in the previous call to the DescribeDedicatedBlockStorageClusterDisks operation. Leave this parameter empty the first time you call this operation.', example='AAAAAdDWBF2'),
  regionId?: string(name='RegionId', description='The ID of the region where the dedicated block storage cluster resides. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-heyuan'),
}

model DescribeDedicatedBlockStorageClusterDisksResponseBody = {
  disks?: {
    disk?: [ 
      {
        attachedTime?: string(name='AttachedTime', description='The time when the cloud disk was last attached. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mmZ format. The time is displayed in UTC.', example='2021-06-07T06:08:56Z'),
        bdfId?: string(name='BdfId', description='This parameter is currently in invitational preview and unavailable for general users.', example='null'),
        burstingEnabled?: boolean(name='BurstingEnabled'),
        category?: string(name='Category', description='The category of the disk. A value of cloud_essd indicates that the disk is an ESSD.', example='cloud_essd'),
        deleteAutoSnapshot?: boolean(name='DeleteAutoSnapshot', description='Indicates whether the automatic snapshots of the cloud disk are deleted when the disk is released. Valid values:

*   true: The automatic snapshots of the cloud disk are deleted when the disk is released.
*   false: The automatic snapshots of the cloud disk are retained when the disk is released.

Snapshots that are created by calling the [CreateSnapshot](~~25524~~) operation or by using the Elastic Compute Service (ECS) console are retained and not affected by this parameter.', example='false'),
        deleteWithInstance?: boolean(name='DeleteWithInstance', description='Indicates whether the cloud disk is released when its associated instance is released. Valid values:

*   true: The cloud disk is released when its associated instance is released.
*   false: The cloud disk is retained when its associated instance is released.', example='true'),
        description?: string(name='Description', description='The description of the cloud disk.', example='testDescription'),
        detachedTime?: string(name='DetachedTime', description='The time when the cloud disk was last detached.', example='2021-06-07T21:01:22Z'),
        device?: string(name='Device', description='The device name of the cloud disk on its associated instance. Example: /dev/xvdb. Take note of the following items:

*   This parameter has a value only when the `Status` value is `In_use`.
*   This parameter is empty for cloud disks that have the multi-attach feature enabled. You can query the attachment information of the cloud disk based on the `Attachment` values.

>  This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='/dev/xvdb'),
        diskChargeType?: string(name='DiskChargeType', description='The billing method of the cloud disk. Valid values:

*   PrePaid: subscription
*   PostPaid: pay-as-you-go', example='PrePaid'),
        diskId?: string(name='DiskId', description='The ID of the cloud disk.', example='d-bp67acfmxazb4p****'),
        diskName?: string(name='DiskName', description='The name of the cloud disk.', example='testDiskName'),
        enableAutoSnapshot?: boolean(name='EnableAutoSnapshot', description='Indicates whether the automatic snapshot policy feature is enabled for the cloud disk.', example='false'),
        encrypted?: boolean(name='Encrypted', description='Indicates whether the cloud disk is encrypted.', example='false'),
        IOPS?: long(name='IOPS', description='The maximum number of IOPS.', example='4000'),
        imageId?: string(name='ImageId', description='The ID of the image that was used to create the instance. This parameter is empty unless the cloud disk was created from an image. The value of this parameter remains unchanged throughout the lifecycle of the cloud disk.', example='m-bp13aqm171qynt3u***'),
        instanceId?: string(name='InstanceId', description='The ID of the instance to which the cloud disk is attached. Take note of the following items:

*   This parameter has a value only when the `Status` value is `In_use`.
*   This parameter is empty for cloud disks that have the multi-attach feature enabled. You can query the attachment information of the cloud disk based on the `Attachment` values.', example='i-bp67acfmxazb4q****'),
        KMSKeyId?: string(name='KMSKeyId', description='The ID of the Key Management Service (KMS) key used by the cloud disk.', example='0e478b7a-4262-4802-b8cb-00d3fb40****'),
        mountInstanceNum?: int32(name='MountInstanceNum', description='The number of instances to which the Shared Block Storage device is attached.', example='1'),
        multiAttach?: string(name='MultiAttach', description='Indicates whether the multi-attach feature was enabled for the cloud disk.', example='Disabled'),
        performanceLevel?: string(name='PerformanceLevel', description='The performance level of the enhanced SSD (ESSD). Valid values:

*   PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.', example='PL0'),
        portable?: boolean(name='Portable', description='Indicates whether the cloud disk is removable.', example='false'),
        provisionedIops?: long(name='ProvisionedIops'),
        regionId?: string(name='RegionId', description='The region ID of cloud disk.', example='cn-heyuan'),
        size?: int32(name='Size', description='The size of the disk. Unit: GiB.', example='60'),
        sourceSnapshotId?: string(name='SourceSnapshotId', description='The ID of the snapshot that was used to create the cloud disk.

This parameter is empty unless the cloud disk was created from a snapshot. The value of this parameter remains unchanged throughout the lifecycle of the cloud disk.', example='s-bp67acfmxazb4p****'),
        status?: string(name='Status', description='The state of the cloud disk. For more information, see [Disk states](~~25689~~). Valid values:

*   In_use
*   Available
*   Attaching
*   Detaching
*   Creating
*   ReIniting', example='In_use'),
        storageClusterId?: string(name='StorageClusterId', description='The ID of the dedicated block storage cluster to which the cloud disk belongs. If your cloud disk belongs to the public block storage cluster, an empty value is returned.', example='dbsc-j5e1sf2vaf5he8m2****'),
        storageSetId?: string(name='StorageSetId', description='The ID of the storage set.', example='ss-i-bp1j4i2jdf3owlhe****'),
        storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber', description='The maximum number of partitions in the storage set.', example='11'),
        tags?: [ 
          {
            tagKey?: string(name='TagKey', description='The tag key of the cloud disk.', example='TestKey'),
            tagValue?: string(name='TagValue', description='The tag value of the cloud disk.', example='TestValue'),
          }
        ](name='Tags', description='The tags of the cloud disk.'),
        throughput?: long(name='Throughput'),
        type?: string(name='Type', description='The type of the disk. Valid values:

*   system: system disk
*   data: data disk', example='all'),
        zoneId?: string(name='ZoneId', description='The zone ID of cloud disk.', example='cn-heyuan-i'),
      }
    ](name='Disk', description='Details about the cloud disks.'),
  }(name='Disks', description='Details about the cloud disks.'),
  nextToken?: string(name='NextToken', description='The query token returned in this call.', example='AAAAAdDWBF2'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='11B55F58-D3A4-4A9B-9596-342420D0****'),
}

model DescribeDedicatedBlockStorageClusterDisksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDedicatedBlockStorageClusterDisksResponseBody(name='body'),
}

/**
  * *   You can use one of the following methods to check the responses:
  *     *   Method 1: Use `NextToken` to configure the query token. Set the value to the `NextToken` value that is returned in the last call to the DescribeDisks operation. Then, use `MaxResults` to specify the maximum number of entries to return on each page.
  *     *   Method 2: Use `PageSize` to specify the number of entries to return on each page and then use `PageNumber` to specify the number of the page to return.
  *         You can use only one of the preceding methods. If a large number of entries are to be returned, we recommend that you use method 1. When `NextToken` is specified, `PageSize` and `PageNumber` do not take effect and `TotalCount` in the response is invalid.
  * *   A disk that has the multi-attach feature enabled can be attached to multiple instances. You can query the attachment information of the disk based on the `Attachment` values in the response.
  * When you call an API operation by using Alibaba Cloud CLI, you must specify request parameter values of different data types in the required formats. For more information, see [Parameter format overview](~~110340~~).
  *
  * @param request DescribeDedicatedBlockStorageClusterDisksRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDedicatedBlockStorageClusterDisksResponse
 */
async function describeDedicatedBlockStorageClusterDisksWithOptions(request: DescribeDedicatedBlockStorageClusterDisksRequest, runtime: Util.RuntimeOptions): DescribeDedicatedBlockStorageClusterDisksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbscId)) {
    query['DbscId'] = request.dbscId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedBlockStorageClusterDisks',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can use one of the following methods to check the responses:
  *     *   Method 1: Use `NextToken` to configure the query token. Set the value to the `NextToken` value that is returned in the last call to the DescribeDisks operation. Then, use `MaxResults` to specify the maximum number of entries to return on each page.
  *     *   Method 2: Use `PageSize` to specify the number of entries to return on each page and then use `PageNumber` to specify the number of the page to return.
  *         You can use only one of the preceding methods. If a large number of entries are to be returned, we recommend that you use method 1. When `NextToken` is specified, `PageSize` and `PageNumber` do not take effect and `TotalCount` in the response is invalid.
  * *   A disk that has the multi-attach feature enabled can be attached to multiple instances. You can query the attachment information of the disk based on the `Attachment` values in the response.
  * When you call an API operation by using Alibaba Cloud CLI, you must specify request parameter values of different data types in the required formats. For more information, see [Parameter format overview](~~110340~~).
  *
  * @param request DescribeDedicatedBlockStorageClusterDisksRequest
  * @return DescribeDedicatedBlockStorageClusterDisksResponse
 */
async function describeDedicatedBlockStorageClusterDisks(request: DescribeDedicatedBlockStorageClusterDisksRequest): DescribeDedicatedBlockStorageClusterDisksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedBlockStorageClusterDisksWithOptions(request, runtime);
}

model DescribeDedicatedBlockStorageClustersRequest {
  azoneId?: string(name='AzoneId', description='The zone ID of the dedicated block storage cluster. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.', example='cn-heyuan-b'),
  category?: string(name='Category', description='The category of disks that can be created in the dedicated block storage cluster.

Set the value to cloud_essd. Only enhanced SSDs (ESSDs) can be created in dedicated block storage clusters.', example='cloud_essd'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  dedicatedBlockStorageClusterId?: [ string ](name='DedicatedBlockStorageClusterId'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Maximum value: 500.

Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the NextToken value returned in the previous call to the DescribeDedicatedBlockStorageClusters operation. Leave this parameter empty the first time you call this operation.', example='AAAAAdDWBF2'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the dedicated block storage cluster. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-heyuan'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmvs4****'),
  status?: [ string ](name='Status'),
  tag?: [ 
    {
      key?: string(name='Key', example='TestKey'),
      value?: string(name='Value', example='TestValue'),
    }
  ](name='Tag'),
}

model DescribeDedicatedBlockStorageClustersResponseBody = {
  dedicatedBlockStorageClusters?: [ 
    {
      category?: string(name='Category', description='The category of disks that can be created in the dedicated block storage cluster.', example='cloud_essd'),
      createTime?: string(name='CreateTime', description='The time when the dedicated block storage cluster was created. The value is a UNIX timestamp. Unit: seconds.', example='1657113211'),
      dedicatedBlockStorageClusterCapacity?: {
        availableCapacity?: long(name='AvailableCapacity', description='The available capacity of the dedicated block storage cluster. Unit: GiB.', example='61440'),
        deliveryCapacity?: long(name='DeliveryCapacity', example='0'),
        totalCapacity?: long(name='TotalCapacity', description='The total capacity of the dedicated block storage cluster. Unit: GiB.', example='61440'),
        usedCapacity?: long(name='UsedCapacity', example='1440'),
      }(name='DedicatedBlockStorageClusterCapacity', description='Details about the storage capacity of the dedicated block storage cluster.'),
      dedicatedBlockStorageClusterId?: string(name='DedicatedBlockStorageClusterId', description='The ID of the dedicated block storage cluster.', example='dbsc-f8z4d3k4nsgg9okb****'),
      dedicatedBlockStorageClusterName?: string(name='DedicatedBlockStorageClusterName', description='The name of the dedicated block storage cluster.', example='myDBSCCluster'),
      description?: string(name='Description', description='The description of the dedicated block storage cluster.', example='This is description.'),
      expiredTime?: string(name='ExpiredTime', description='The time when the dedicated block storage cluster expires. The value is a UNIX timestamp. Unit: seconds.', example='1673020800'),
      performanceLevel?: string(name='PerformanceLevel', description='The performance level of disks. Valid values:

*   PL0
*   PL1
*   PL2
*   PL3

>  This parameter is valid only when SupportedCategory is set to cloud_essd.', example='PL0'),
      regionId?: string(name='RegionId', description='The region ID of the dedicated block storage cluster.', example='cn-heyuan'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzsoux****'),
      status?: string(name='Status', description='The state of the dedicated block storage cluster. Valid values:

*   Preparing: The cluster is pending delivery.
*   Running: The cluster is running.
*   Expired: The cluster has expired.
*   Offline: The cluster is offline.', example='Running'),
      supportedCategory?: string(name='SupportedCategory', description='This parameter is not supported.', example='cloud_essd'),
      tags?: [ 
        {
          tagKey?: string(name='TagKey', example='testKey'),
          tagValue?: string(name='TagValue', example='testValue'),
        }
      ](name='Tags'),
      type?: string(name='Type', description='The type of the dedicated block storage cluster. Valid values:

*   Standard: a standard dedicated block storage cluster. ESSDs at performance level 0 (PL0 ESSDs) can be created in standard dedicated block storage clusters.
*   Premium: a performance dedicated block storage cluster. ESSDs at performance level 1 (PL1 ESSDs) can be created in performance dedicated block storage clusters.', example='Standard'),
      zoneId?: string(name='ZoneId', description='The zone ID of the dedicated block storage cluster.', example='cn-heyuan-b'),
    }
  ](name='DedicatedBlockStorageClusters', description='Details about the dedicated block storage clusters.'),
  nextToken?: string(name='NextToken', description='The query token returned in this call.', example='AAAAAdDWBF2'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='11B55F58-D3A4-4A9B-9596-342420D0****'),
  totalCount?: long(name='TotalCount', example='20'),
}

model DescribeDedicatedBlockStorageClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDedicatedBlockStorageClustersResponseBody(name='body'),
}

/**
  * >  Dedicated Block Storage Cluster is supported in the China (Heyuan), Indonesia (Jakarta), and China (Shenzhen) regions.
  * *   You can specify multiple request parameters to be queried. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions.
  * *   We recommend that you use the NextToken and MaxResults parameters to perform a paged query. During a paged query, when you call the DescribeDedicatedBlockStorageClusters operation to retrieve the first page of results, set MaxResults to specify the maximum number of entries to return in the call. The return value of NextToken is a pagination token, which can be used in the next call to retrieve a new page of results. When you call the DescribeDedicatedBlockStorageClusters operation to retrieve a new page of results, set NextToken to the NextToken value returned in the previous call and set MaxResults to specify the maximum number of entries to return in this call.
  *
  * @param request DescribeDedicatedBlockStorageClustersRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDedicatedBlockStorageClustersResponse
 */
async function describeDedicatedBlockStorageClustersWithOptions(request: DescribeDedicatedBlockStorageClustersRequest, runtime: Util.RuntimeOptions): DescribeDedicatedBlockStorageClustersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.azoneId)) {
    body['AzoneId'] = request.azoneId;
  }
  if (!Util.isUnset(request.category)) {
    body['Category'] = request.category;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dedicatedBlockStorageClusterId)) {
    body['DedicatedBlockStorageClusterId'] = request.dedicatedBlockStorageClusterId;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedBlockStorageClusters',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  Dedicated Block Storage Cluster is supported in the China (Heyuan), Indonesia (Jakarta), and China (Shenzhen) regions.
  * *   You can specify multiple request parameters to be queried. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions.
  * *   We recommend that you use the NextToken and MaxResults parameters to perform a paged query. During a paged query, when you call the DescribeDedicatedBlockStorageClusters operation to retrieve the first page of results, set MaxResults to specify the maximum number of entries to return in the call. The return value of NextToken is a pagination token, which can be used in the next call to retrieve a new page of results. When you call the DescribeDedicatedBlockStorageClusters operation to retrieve a new page of results, set NextToken to the NextToken value returned in the previous call and set MaxResults to specify the maximum number of entries to return in this call.
  *
  * @param request DescribeDedicatedBlockStorageClustersRequest
  * @return DescribeDedicatedBlockStorageClustersResponse
 */
async function describeDedicatedBlockStorageClusters(request: DescribeDedicatedBlockStorageClustersRequest): DescribeDedicatedBlockStorageClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedBlockStorageClustersWithOptions(request, runtime);
}

model DescribeDiskEventsRequest {
  diskCategory?: string(name='DiskCategory', example='cloud_essd'),
  diskId?: string(name='DiskId', example='d-bp67acfmxazb4p****'),
  endTime?: string(name='EndTime', example='2022-06-01T05:00:00Z'),
  maxResults?: long(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime', example='2022-06-01T03:00:00Z'),
  type?: string(name='Type', example='DataNeedProtect'),
}

model DescribeDiskEventsResponseBody = {
  diskEvents?: [ 
    {
      description?: string(name='Description', example='This is description.'),
      diskId?: string(name='DiskId', example='d-bp1bq5g3dxxo1x4o****'),
      recommendAction?: string(name='RecommendAction', example='NoAction'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: string(name='Status', example='Solved'),
      timestamp?: string(name='Timestamp', example='2022-06-01T08:00:00Z'),
      type?: string(name='Type', example='DataNeedProtect'),
    }
  ](name='DiskEvents'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  totalCount?: long(name='TotalCount', example='20'),
}

model DescribeDiskEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiskEventsResponseBody(name='body'),
}

async function describeDiskEventsWithOptions(request: DescribeDiskEventsRequest, runtime: Util.RuntimeOptions): DescribeDiskEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskCategory)) {
    query['DiskCategory'] = request.diskCategory;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiskEvents',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiskEvents(request: DescribeDiskEventsRequest): DescribeDiskEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskEventsWithOptions(request, runtime);
}

model DescribeDiskMonitorDataRequest {
  diskId?: string(name='DiskId', example='d-bp67acfmxazb4p****'),
  endTime?: string(name='EndTime', example='2022-06-01T05:00:00Z'),
  period?: long(name='Period', example='5'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime', example='2022-06-01T03:00:00Z'),
  type?: string(name='Type', example='basic'),
}

model DescribeDiskMonitorDataResponseBody = {
  monitorData?: [ 
    {
      BPSPercent?: long(name='BPSPercent', example='80(%)'),
      burstIOCount?: long(name='BurstIOCount', example='0'),
      diskId?: string(name='DiskId', example='d-bp1bq5g3dxxo1x4o****'),
      IOPSPercent?: long(name='IOPSPercent', example='80(%)'),
      readBPS?: long(name='ReadBPS', example='10'),
      readIOPS?: long(name='ReadIOPS', example='2000'),
      timestamp?: string(name='Timestamp', example='2022-06-01T08:00:00Z'),
      writeBPS?: long(name='WriteBPS', example='204'),
      writeIOPS?: long(name='WriteIOPS', example='2000'),
    }
  ](name='MonitorData'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  totalCount?: long(name='TotalCount', example='15'),
}

model DescribeDiskMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiskMonitorDataResponseBody(name='body'),
}

async function describeDiskMonitorDataWithOptions(request: DescribeDiskMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeDiskMonitorDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiskMonitorData',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiskMonitorData(request: DescribeDiskMonitorDataRequest): DescribeDiskMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskMonitorDataWithOptions(request, runtime);
}

model DescribeDiskMonitorDataListRequest {
  diskIds?: string(name='DiskIds', example='["d-bp67acfmxazb4p****","d-bp67acfmxazs5t****"]'),
  endTime?: string(name='EndTime', example='2022-06-01T05:00:00Z'),
  maxResults?: string(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='e71d8a535bd9c****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime', example='2022-06-01T03:00:00Z'),
  type?: string(name='Type', example='pro'),
}

model DescribeDiskMonitorDataListResponseBody = {
  monitorData?: [ 
    {
      burstIOCount?: long(name='BurstIOCount', example='2000'),
      diskId?: string(name='DiskId', example='d-bp67acfmxazb4p****'),
      timestamp?: string(name='Timestamp', example='2022-06-01T08:00:00Z'),
    }
  ](name='MonitorData'),
  nextToken?: string(name='NextToken', example='e71d8a535bd9c****'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  totalCount?: long(name='TotalCount', example='3'),
}

model DescribeDiskMonitorDataListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiskMonitorDataListResponseBody(name='body'),
}

async function describeDiskMonitorDataListWithOptions(request: DescribeDiskMonitorDataListRequest, runtime: Util.RuntimeOptions): DescribeDiskMonitorDataListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskIds)) {
    query['DiskIds'] = request.diskIds;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiskMonitorDataList',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiskMonitorDataList(request: DescribeDiskMonitorDataListRequest): DescribeDiskMonitorDataListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskMonitorDataListWithOptions(request, runtime);
}

model DescribeDiskReplicaGroupsRequest {
  groupIds?: string(name='GroupIds', description='The number of the page to return.', example='AAAAAdDWBF2****'),
  maxResults?: long(name='MaxResults', description='The IDs of replication pair-consistent groups. You can specify the IDs of one or more replication pair-consistent groups. Separate the IDs with commas (,).

This parameter is empty by default, which indicates that all replication pair-consistent groups in the specified region are queried.', example='10'),
  nextToken?: string(name='NextToken', description='The type of the site from which the information of replication pair-consistent groups is retrieved. This parameter is used for scenarios where data is replicated across zones in replication pairs.

*   If the Site parameter is not specified, information such as the state of replication pair-consistent groups at the primary site is queried and returned.

*   Otherwise, information such as the state of replication pair-consistent groups at the site specified by the Site parameter is queried and returned. Valid values:

    *   production: primary site
    *   backup: secondary site', example='AAAAAdDWBF2****'),
  pageNumber?: int32(name='PageNumber', description='The ID of the request.', example='5'),
  pageSize?: int32(name='PageSize', description='The query token returned in this call.', example='10'),
  regionId?: string(name='RegionId', description='The query token. Set the value to the NextToken value returned in the previous call to the DescribeDiskReplicaGroups operation. Leave this parameter empty the first time you call this operation. When NextToken is specified, the PageSize and PageNumber request parameters do not take effect and the TotalCount response parameter is invalid.', example='cn-beijing'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekz*****'),
  site?: string(name='Site', description='The number of entries to return on each page.

Valid values: 1 to 100.', example='production'),
  tag?: [ 
    {
      key?: string(name='Key', example='tag-key'),
      value?: string(name='Value', example='tag-value'),
    }
  ](name='Tag'),
}

model DescribeDiskReplicaGroupsResponseBody = {
  nextToken?: string(name='NextToken', description='The ID of the replication pair-consistent group.', example='AAAAAdDWBF2****'),
  pageNumber?: int32(name='PageNumber', description='The total number of entries returned.', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  replicaGroups?: [ 
    {
      bandwidth?: long(name='Bandwidth', description='The number of entries returned per page.', example='0'),
      description?: string(name='Description', description='The recovery point objective (RPO) of the replication pair-consistent group. Unit: seconds.', example='This is description.'),
      destinationRegionId?: string(name='DestinationRegionId', description='The name of the replication pair-consistent group.', example='cn-shanghai'),
      destinationZoneId?: string(name='DestinationZoneId', description='The description of the replication pair-consistent group.', example='cn-shanghai-e'),
      groupName?: string(name='GroupName', description='The state of the replication pair-consistent group. Valid values:

*   invalid: The replication pair-consistent group is invalid, which indicates that abnormal replication pairs are present in the replication pair-consistent group.
*   creating: The replication pair-consistent group is being created.
*   created: The replication pair-consistent group is created.
*   create_failed: The replication pair-consistent group cannot be created.
*   manual_syncing: Data is being manually synchronized between the disks in the replication pair-consistent group. The first time data is being manually synchronized between the disks in a replication pair-consistent group, the replication pair-consistent group is in this state.
*   syncing: Data is being synchronized between the disks in the replication pair-consistent group. While data is being asynchronously replicated from the primary disks to the secondary disks not for the first time, the replication pair-consistent group is in this state.
*   normal: The replication pair-consistent group is working as expected. When the system finishes replicating data from the primary disks to the secondary disks within the current replication cycle, the replication pair-consistent group enters this state.
*   stopping: The replication pair-consistent group is being stopped.
*   stopped: The replication pair-consistent group is stopped.
*   stop_failed: The replication pair-consistent group cannot be stopped.
*   failovering: A failover is being performed.
*   failovered: A failover is performed.
*   failover_failed: A failover cannot be performed.
*   reprotecting: A reverse replication is being performed.
*   reprotect_failed: A reverse replication cannot be performed.
*   deleting: The replication pair-consistent group is being deleted.
*   delete_failed: The replication pair-consistent group cannot be deleted.
*   deleted: The replication pair-consistent group is deleted.', example='myreplicagrouptest'),
      lastRecoverPoint?: long(name='LastRecoverPoint', description='The IDs of the replications pairs that belong to the replication pair-consistent group.', example='1637835114'),
      pairIds?: [ bytes ](name='PairIds', description='The initial source region (primary region) of the replication pair-consistent group.'),
      pairNumber?: long(name='PairNumber', description='The initial destination region (secondary region) of the replication pair-consistent group.', example='2'),
      primaryRegion?: string(name='PrimaryRegion', description='The initial source zone (primary zone) of the replication pair-consistent group.', example='cn-beijing'),
      primaryZone?: string(name='PrimaryZone', description='The bandwidth value. Unit: Mbit/s. This parameter is unavailable and has a system-preset value.', example='cn-beijing-h'),
      RPO?: long(name='RPO', description='The type of the site from which the information of the replication pair and replication pair-consistent group is obtained. Valid values:

*   production: primary site
*   backup: secondary site', example='180'),
      replicaGroupId?: string(name='ReplicaGroupId', description='The ID of the zone in which the primary site is deployed.', example='pg-myreplica****'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2a*******'),
      site?: string(name='Site', description='The number of replications pairs that belong to the replication pair-consistent group.', example='production'),
      sourceRegionId?: string(name='SourceRegionId', description='The ID of the region in which the secondary site is deployed.', example='cn-beijing'),
      sourceZoneId?: string(name='SourceZoneId', description='The ID of the zone in which the secondary site is deployed.', example='cn-beijing-f'),
      standbyRegion?: string(name='StandbyRegion', description='The initial destination zone (secondary zone) of the replication pair-consistent group.', example='cn-shanghai'),
      standbyZone?: string(name='StandbyZone', description='The page number of the returned page.', example='cn-shanghai-e'),
      status?: string(name='Status', description='The time when data was last replicated from the primary disks to the secondary disks in the replication pair-consistent group. The value of this parameter is a timestamp. Unit: seconds.', example='created'),
      tags?: [ 
        {
          tagKey?: string(name='TagKey', example='testKey'),
          tagValue?: string(name='TagValue', example='testValue'),
        }
      ](name='Tags'),
    }
  ](name='ReplicaGroups', description='The ID of the region in which the primary site is deployed.'),
  requestId?: string(name='RequestId', description='Details about the replication pair-consistent groups.', example='AAA478A0-BEE6-1D42-BEB6-A9CFEAD6****'),
  totalCount?: long(name='TotalCount', example='60'),
}

model DescribeDiskReplicaGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiskReplicaGroupsResponseBody(name='body'),
}

/**
  * The region ID of the replication pair-consistent group.
  *
  * @param request DescribeDiskReplicaGroupsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDiskReplicaGroupsResponse
 */
async function describeDiskReplicaGroupsWithOptions(request: DescribeDiskReplicaGroupsRequest, runtime: Util.RuntimeOptions): DescribeDiskReplicaGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupIds)) {
    query['GroupIds'] = request.groupIds;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.site)) {
    query['Site'] = request.site;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiskReplicaGroups',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The region ID of the replication pair-consistent group.
  *
  * @param request DescribeDiskReplicaGroupsRequest
  * @return DescribeDiskReplicaGroupsResponse
 */
async function describeDiskReplicaGroups(request: DescribeDiskReplicaGroupsRequest): DescribeDiskReplicaGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskReplicaGroupsWithOptions(request, runtime);
}

model DescribeDiskReplicaPairProgressRequest {
  regionId?: string(name='RegionId', example='cn-beijing'),
  replicaPairId?: string(name='ReplicaPairId', example='pair-cn-tl32ribst0z'),
}

model DescribeDiskReplicaPairProgressResponseBody = {
  progress?: int32(name='Progress', example='100'),
  recoverPoint?: long(name='RecoverPoint', example='1661917424'),
  requestId?: string(name='RequestId', example='AAA478A0-BEE6-1D42-BEB6-A9CFEAD6****'),
}

model DescribeDiskReplicaPairProgressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiskReplicaPairProgressResponseBody(name='body'),
}

async function describeDiskReplicaPairProgressWithOptions(request: DescribeDiskReplicaPairProgressRequest, runtime: Util.RuntimeOptions): DescribeDiskReplicaPairProgressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiskReplicaPairProgress',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiskReplicaPairProgress(request: DescribeDiskReplicaPairProgressRequest): DescribeDiskReplicaPairProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskReplicaPairProgressWithOptions(request, runtime);
}

model DescribeDiskReplicaPairsRequest {
  maxResults?: long(name='MaxResults', description='The maximum number of entries to return on each page.

Valid values: 1 to 500.

Default value: 10.', example='1'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the NextToken value returned in the previous call to the DescribeDiskReplicaPairs operation. Leave this parameter empty the first time you call this operation. When NextToken is specified, the PageSize and PageNumber request parameters do not take effect and the TotalCount response parameter is invalid.', example='AAAAAdDWBF2****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='5'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100.', example='10'),
  pairIds?: string(name='PairIds', description='The IDs of replication pairs. You can specify the IDs of one or more replication pairs and separate the IDs with commas (,). Example: `pair-cn-dsa****,pair-cn-asd****`.

This parameter is empty by default, which indicates that all replication pairs in the specified region are queried.', example='pair-cn-dsa****'),
  regionId?: string(name='RegionId', description='The region ID of the primary or secondary disk in the replication pair. You can call the [DescribeRegions](~~354276~~) operation to query the most recent list of regions in which async replication is supported.', example='cn-beijing'),
  replicaGroupId?: string(name='ReplicaGroupId', description='The ID of the replication pair-consistent group. You can specify the ID of a replication pair-consistent group to query the replication pairs that are added to this group. Example: `pg-****`.

This parameter is empty by default, which indicates that all replication pairs in the specified region are queried.

>  If you set this parameter to `-`, replication pairs that are not added to replication pair-consistent groups are queried.', example='pg-****'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the replication pair belongs.', example='rg-acfmvs******'),
  site?: string(name='Site', description='The type of the site from which the information of replication pairs is retrieved. Valid values:

*   production: primary site
*   backup: secondary site

Default value: production.', example='production'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the replication pair.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the replication pair.', example='TestValue'),
    }
  ](name='Tag'),
}

model DescribeDiskReplicaPairsResponseBody = {
  nextToken?: string(name='NextToken', description='The query token returned in this call.', example='AAAAAdDWBF2****'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Valid values: 1 to 100.', example='10'),
  replicaPairs?: [ 
    {
      bandwidth?: long(name='Bandwidth', description='The bandwidth used to asynchronously replicate data from the primary disk to the secondary disk. Unit: Kbit/s.', example='10240'),
      chargeType?: string(name='ChargeType', description='The billing method of the replication pair.

Valid values:

*   PREPAY: subscription
*   POSTPAY: pay-as-you-go', example='PREPAY'),
      createTime?: long(name='CreateTime', description='The time when the replication pair was created. The value of this parameter is a timestamp. Unit: seconds.', example='1649750977'),
      description?: string(name='Description', description='The description of the replication pair.', example='This is description.'),
      destinationDiskId?: string(name='DestinationDiskId', description='The ID of the secondary disk.', example='d-asdfjl2342kj2l3k4****'),
      destinationRegion?: string(name='DestinationRegion', description='The region ID of the secondary disk.', example='cn-shanghai'),
      destinationZoneId?: string(name='DestinationZoneId', description='The zone ID of the secondary disk.', example='cn-shanghai-b'),
      expiredTime?: long(name='ExpiredTime', description='The time when the replication pair expires. The value of this parameter is a timestamp. Unit: seconds.', example='1649750977'),
      lastRecoverPoint?: long(name='LastRecoverPoint', description='The time when data was last replicated from the primary disk to the secondary disk in the replication pair. The value of this parameter is a timestamp. Unit: seconds.', example='1649751977'),
      pairName?: string(name='PairName', description='The name of the replication pair.', example='TestReplicaPair'),
      primaryRegion?: string(name='PrimaryRegion', description='The initial source region (primary region) of the replication pair.', example='cn-beijing'),
      primaryZone?: string(name='PrimaryZone', description='The initial source zone (primary zone) of the replication pair.', example='cn-beijing-a'),
      RPO?: long(name='RPO', description='The recovery point objective (RPO) of the replication pair. Unit: seconds.', example='900'),
      replicaGroupId?: string(name='ReplicaGroupId', description='The ID of the replication pair-consistent group to which the replication pair belongs.', example='pg-xxxx****'),
      replicaGroupName?: string(name='ReplicaGroupName', description='The name of the replication pair-consistent group to which the replication pair belongs.', example='pg-name****'),
      replicaPairId?: string(name='ReplicaPairId', description='The ID of the replication pair.', example='pair-cn-dsa****'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the replication pair belongs.', example='rg-acfmvs*****'),
      site?: string(name='Site', description='The type of the site from which the information of the replication pair and replication pair-consistent group is obtained. Valid values:

*   production: primary site
*   backup: secondary site', example='production'),
      sourceDiskId?: string(name='SourceDiskId', description='The ID of the primary disk.', example='d-bp131n0q38u3a4zi****'),
      sourceRegion?: string(name='SourceRegion', description='The region ID of the primary disk.', example='cn-beijing'),
      sourceZoneId?: string(name='SourceZoneId', description='The zone ID of the primary disk.', example='cn-beijing-a'),
      standbyRegion?: string(name='StandbyRegion', description='The initial destination region (secondary region) of the replication pair.', example='cn-shanghai'),
      standbyZone?: string(name='StandbyZone', description='The initial destination zone (secondary zone) of the replication pair.', example='cn-shanghai-b'),
      status?: string(name='Status', description='The state of the replication pair. Valid values:

*   invalid: The replication pair is invalid. When a replication pair becomes abnormal, it enters this state.
*   creating: The replication pair is being created.
*   created: The replication pair is created.
*   create_failed: The replication pair cannot be created.
*   initial_syncing: Data is synchronized from the primary disk to the secondary disk for the first time. After a replication pair is created and activated, the replication pair is in this state the first time data is synchronized from the primary disk to the secondary disk.
*   manual_syncing: Data is being manually synchronized from the primary disk to the secondary disk. After data is manually synchronized from the primary disk to the secondary disk, the replication pair returns to the Stopped state. The first time data is manually synchronized from the primary disk to the secondary disk, the replication pair is in the manual_syncing state during the synchronization.
*   syncing: Data is being synchronized from the primary disk to the secondary disk. While data is being asynchronously replicated from the primary disk to the secondary disk not for the first time, the replication pair is in this state.
*   normal: The replication pair is working as expected. When the system finishes replicating data from the primary disk to the secondary disk within the current replication cycle, the replication pair enters this state.
*   stopping: The replication pair is being stopped.
*   stopped: The replication pair is stopped.
*   stop_failed: The replication pair cannot be stopped.
*   failovering: A failover is being performed.
*   failovered: A failover is performed.
*   failover_failed: A failover cannot be performed.
*   reprotecting: A reverse replication is being performed.
*   reprotect_failed: A reverse replication cannot be performed.
*   deleting: The replication pair is being deleted.
*   delete_failed: The replication pair cannot be deleted.
*   deleted: The replication pair is deleted.', example='created'),
      statusMessage?: string(name='StatusMessage', description='The message that describes the state of the replication pair. This parameter has a value when `Status` has a value of invalid or `create_failed`. Valid values:

*   PrePayOrderExpired: The replication pair has expired.
*   PostPayOrderCeaseService: The pay-as-you-go replication pair has been stopped due to an overdue payment.
*   DeviceRemoved: The primary or secondary disk has been deleted.
*   DeviceKeyChanged: The `DeviceKey` mapping of the primary or secondary disk has changed.
*   DeviceSizeChanged: The `DeviceSize` value of the primary or secondary disk has changed.
*   OperationDenied.QuotaExceed: The maximum number of replication pairs that can be created has been reached.', example='PrePayOrderExpired'),
      tags?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the replication pair.', example='testKey'),
          tagValue?: string(name='TagValue', description='The tag value of the replication pair.', example='testValue'),
        }
      ](name='Tags', description='The tags of the replication pair.'),
    }
  ](name='ReplicaPairs', description='Details about the replication pairs.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AAA478A0-BEE6-1D42-BEB6-A9CFEAD6****'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='60'),
}

model DescribeDiskReplicaPairsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiskReplicaPairsResponseBody(name='body'),
}

/**
  * *   The async replication feature is supported in the China (Hangzhou), China (Shanghai), China (Beijing), China (Shenzhen), China (Heyuan), China (Chengdu), China (Hong Kong), Singapore, US (Silicon Valley), and US (Virginia) regions.
  * *   When you call this operation for a specific region, if the primary disk (source disk) or secondary disk (destination disk) of a replication pair resides within the region, the information of the replication pair is displayed in the response.
  * *   If you want to perform a paged query, configure the `NextToken` and `MaxResults` parameters. During a paged query, when you call the DescribeDiskReplicaPairs operation to retrieve the first page of results, set `MaxResults` to limit the maximum number of entries to return in the call. The return value of NextToken is a pagination token, which can be used in the next call to retrieve a new page of results. When you call the DescribeDiskReplicaPairs operation to retrieve a new page of results, set NextToken to the NextToken value returned in the previous call and set MaxResults to specify the maximum number of entries to return in this call.
  *
  * @param request DescribeDiskReplicaPairsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDiskReplicaPairsResponse
 */
async function describeDiskReplicaPairsWithOptions(request: DescribeDiskReplicaPairsRequest, runtime: Util.RuntimeOptions): DescribeDiskReplicaPairsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pairIds)) {
    query['PairIds'] = request.pairIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.site)) {
    query['Site'] = request.site;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiskReplicaPairs',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The async replication feature is supported in the China (Hangzhou), China (Shanghai), China (Beijing), China (Shenzhen), China (Heyuan), China (Chengdu), China (Hong Kong), Singapore, US (Silicon Valley), and US (Virginia) regions.
  * *   When you call this operation for a specific region, if the primary disk (source disk) or secondary disk (destination disk) of a replication pair resides within the region, the information of the replication pair is displayed in the response.
  * *   If you want to perform a paged query, configure the `NextToken` and `MaxResults` parameters. During a paged query, when you call the DescribeDiskReplicaPairs operation to retrieve the first page of results, set `MaxResults` to limit the maximum number of entries to return in the call. The return value of NextToken is a pagination token, which can be used in the next call to retrieve a new page of results. When you call the DescribeDiskReplicaPairs operation to retrieve a new page of results, set NextToken to the NextToken value returned in the previous call and set MaxResults to specify the maximum number of entries to return in this call.
  *
  * @param request DescribeDiskReplicaPairsRequest
  * @return DescribeDiskReplicaPairsResponse
 */
async function describeDiskReplicaPairs(request: DescribeDiskReplicaPairsRequest): DescribeDiskReplicaPairsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskReplicaPairsWithOptions(request, runtime);
}

model DescribeLensServiceStatusResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  status?: string(name='Status', example='Available'),
}

model DescribeLensServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLensServiceStatusResponseBody(name='body'),
}

async function describeLensServiceStatusWithOptions(runtime: Util.RuntimeOptions): DescribeLensServiceStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeLensServiceStatus',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLensServiceStatus(): DescribeLensServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLensServiceStatusWithOptions(runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The name of the region.', example='zh-CN'),
  regionId?: string(name='RegionId', description='The endpoint of the region.', example='cn-beijing'),
  resourceType?: string(name='ResourceType', description='Details about the regions.', example='ear'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The name of the zone.'),
      regionEndpoint?: string(name='RegionEndpoint', description='The ID of the zone.', example='ebs.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The type of resource. Valid values:

*   ear: async replication
*   lend: CloudLens for EBS
*   dbsc: Dedicated Block Storage Cluster', example='cn-hangzhou'),
      zones?: [ 
        {
          localName?: string(name='LocalName'),
          resourceTypes?: [ string ](name='ResourceTypes'),
          zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
        }
      ](name='Zones'),
    }
  ](name='Regions', description='Details about the zones.'),
  requestId?: string(name='RequestId', description='The ID of the region.', example='17EE62D8-064E-5404-8B0D-72122478****'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model FailoverDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', description='The ID of the request.', example='123e4567-e89b-12d3-a456-42665544****'),
  regionId?: string(name='RegionId', description='The ID of the replication pair-consistent group.', example='cn-shanghai'),
  replicaGroupId?: string(name='ReplicaGroupId', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='group-myreplica****'),
}

model FailoverDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model FailoverDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FailoverDiskReplicaGroupResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to **FailoverDiskReplicaGroup**.
  *
  * @param request FailoverDiskReplicaGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return FailoverDiskReplicaGroupResponse
 */
async function failoverDiskReplicaGroupWithOptions(request: FailoverDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): FailoverDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FailoverDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The operation that you want to perform. Set the value to **FailoverDiskReplicaGroup**.
  *
  * @param request FailoverDiskReplicaGroupRequest
  * @return FailoverDiskReplicaGroupResponse
 */
async function failoverDiskReplicaGroup(request: FailoverDiskReplicaGroupRequest): FailoverDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return failoverDiskReplicaGroupWithOptions(request, runtime);
}

model FailoverDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  replicaPairId?: string(name='ReplicaPairId', example='pair-cn-dsa****'),
}

model FailoverDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model FailoverDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FailoverDiskReplicaPairResponseBody(name='body'),
}

/**
  * The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).
  *
  * @param request FailoverDiskReplicaPairRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return FailoverDiskReplicaPairResponse
 */
async function failoverDiskReplicaPairWithOptions(request: FailoverDiskReplicaPairRequest, runtime: Util.RuntimeOptions): FailoverDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FailoverDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).
  *
  * @param request FailoverDiskReplicaPairRequest
  * @return FailoverDiskReplicaPairResponse
 */
async function failoverDiskReplicaPair(request: FailoverDiskReplicaPairRequest): FailoverDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return failoverDiskReplicaPairWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='0c593ea1-3bea-11e9-b96b-88e9fe63****'),
  nextToken?: string(name='NextToken', description='The token used to start the next query.', example='token123'),
  regionId?: string(name='RegionId', description='The region ID of the resource. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', example='disk-123'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   dbsc: dedicated block storage cluster
*   pair: replication pair
*   group: replication pair-consistent group', example='diskreplicagroup'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N used for exact search of EBS resources. The tag key must be 1 to 128 characters in length. Valid values of N: 1 to 20.

The `Tag.N` parameter pair (Tag.N.Key and Tag.N.Value) is used for exact search of EBS resources that have specified tags added. Each tag is a key-value pair.

*   If you specify only `Tag.N.Key`, all EBS resources whose tags contain the specified tag key are returned.
*   If you specify only `Tag.N.Value`, the `InvalidParameter.TagValue` error is returned.
*   If you specify multiple tag key-value pairs at the same time, only EBS resources that match all tag key-value pairs are returned.', example='tag-key'),
      value?: string(name='Value', description='The value of tag N used for exact search of EBS resources. The tag value must be 1 to 128 characters in length. Valid values of N: 1 to 20.', example='tag-value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The token used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', description='The ID of the request. The request ID is returned regardless of whether the call is successful.', example='484256DA-D816-44D2-9D86-B6EE4D5B****'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='pair-cn-c4d2t7f****'),
      resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   dbsc: dedicated block storage cluster
*   pair: replication pair
*   group: replication pair-consistent group', example='pair'),
      tagKey?: string(name='TagKey', description='The tag key of the resource.', example='TestKey'),
      tagValue?: string(name='TagValue', description='The tag value of the resource.', example='TestValue'),
    }
  ](name='TagResources', description='Details about the resources and tags, including resource IDs, resource types, and tag key-value pairs.'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

/**
  * Specify at least one of the following parameters or parameter pairs in a request to determine a query object:
  * *   `ResourceId.N`
  * *   `Tag.N` parameter pair (`Tag.N.Key` and `Tag.N.Value`)
  * If you set `Tag.N` and `ResourceId.N` at the same time, the EBS resources that match both the parameters are returned.
  *
  * @param request ListTagResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListTagResourcesResponse
 */
async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Specify at least one of the following parameters or parameter pairs in a request to determine a query object:
  * *   `ResourceId.N`
  * *   `Tag.N` parameter pair (`Tag.N.Key` and `Tag.N.Value`)
  * If you set `Tag.N` and `ResourceId.N` at the same time, the EBS resources that match both the parameters are returned.
  *
  * @param request ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyDedicatedBlockStorageClusterAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests.

The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How do I ensure idempotence ](~~25693~~).', example='123e4567-e89b-12d3-a456-42665544****'),
  dbscId?: string(name='DbscId', description='The ID of the dedicated block storage cluster.', example='dbsc-cn-od43bf****'),
  dbscName?: string(name='DbscName', description='The new name of the dedicated block storage cluster.', example='my-test-dbsc'),
  description?: string(name='Description', description='The new description of dedicated block storage cluster.', example='test'),
  regionId?: string(name='RegionId', description='The region ID of the dedicated block storage cluster. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-heyuan'),
}

model ModifyDedicatedBlockStorageClusterAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='11B55F58-D3A4-4A9B-9596-342420D0****'),
}

model ModifyDedicatedBlockStorageClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDedicatedBlockStorageClusterAttributeResponseBody(name='body'),
}

/**
  * You can call this operation to modify the information of a dedicated block storage cluster. The information includes the name and description of the cluster.
  *
  * @param request ModifyDedicatedBlockStorageClusterAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDedicatedBlockStorageClusterAttributeResponse
 */
async function modifyDedicatedBlockStorageClusterAttributeWithOptions(request: ModifyDedicatedBlockStorageClusterAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedBlockStorageClusterAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dbscId)) {
    query['DbscId'] = request.dbscId;
  }
  if (!Util.isUnset(request.dbscName)) {
    query['DbscName'] = request.dbscName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedBlockStorageClusterAttribute',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to modify the information of a dedicated block storage cluster. The information includes the name and description of the cluster.
  *
  * @param request ModifyDedicatedBlockStorageClusterAttributeRequest
  * @return ModifyDedicatedBlockStorageClusterAttributeResponse
 */
async function modifyDedicatedBlockStorageClusterAttribute(request: ModifyDedicatedBlockStorageClusterAttributeRequest): ModifyDedicatedBlockStorageClusterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedBlockStorageClusterAttributeWithOptions(request, runtime);
}

model ModifyDiskReplicaGroupRequest {
  bandwidth?: long(name='Bandwidth', example='-'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-42665544****'),
  description?: string(name='Description', description='The description of the replication pair-consistent group. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is description.'),
  groupName?: string(name='GroupName', description='The name of the replication pair-consistent group. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='myreplicagrouptest'),
  RPO?: long(name='RPO', description='The RPO of the replication pair-consistent group. Unit: seconds. Valid value: 900.', example='900'),
  regionId?: string(name='RegionId', description='The region ID of the replication pair-consistent group.', example='cn-beijing'),
  replicaGroupId?: string(name='ReplicaGroupId', description='The ID of the replication pair-consistent group. You can call the [DescribeDiskReplicaGroups](~~426614~~) operation to query the IDs of replication pair-consistent groups.', example='pg-myreplica****'),
}

model ModifyDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model ModifyDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDiskReplicaGroupResponseBody(name='body'),
}

/**
  * *   The replication pair-consistent group feature is supported in the China (Hangzhou), China (Shanghai), China (Beijing), China (Shenzhen), China (Heyuan), China (Chengdu), China (Hong Kong), Singapore (Singapore), US (Silicon Valley), and US (Virginia) regions.
  * *   The replication pair-consistent group must be in the **Created** (`created`) or **Stopped** (`stopped`) state.
  *
  * @param request ModifyDiskReplicaGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDiskReplicaGroupResponse
 */
async function modifyDiskReplicaGroupWithOptions(request: ModifyDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): ModifyDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.RPO)) {
    query['RPO'] = request.RPO;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The replication pair-consistent group feature is supported in the China (Hangzhou), China (Shanghai), China (Beijing), China (Shenzhen), China (Heyuan), China (Chengdu), China (Hong Kong), Singapore (Singapore), US (Silicon Valley), and US (Virginia) regions.
  * *   The replication pair-consistent group must be in the **Created** (`created`) or **Stopped** (`stopped`) state.
  *
  * @param request ModifyDiskReplicaGroupRequest
  * @return ModifyDiskReplicaGroupResponse
 */
async function modifyDiskReplicaGroup(request: ModifyDiskReplicaGroupRequest): ModifyDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiskReplicaGroupWithOptions(request, runtime);
}

model ModifyDiskReplicaPairRequest {
  bandwidth?: long(name='Bandwidth', example='10240'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  description?: string(name='Description', description='The ID of the request.', example='This is description.'),
  pairName?: string(name='PairName', description='The recovery point objective (RPO) of the replication pair. Unit: seconds. Set the value to 900.', example='TestReplicaPair'),
  RPO?: long(name='RPO', example='900'),
  regionId?: string(name='RegionId', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How do I ensure idempotence ](~~25693~~).', example='cn-beijing'),
  replicaPairId?: string(name='ReplicaPairId', description='The bandwidth used to asynchronously replicate data between the primary and secondary disks. Unit: Kbit/s. Valid values:

*   10240: equal to 10 Mbit/s
*   20480: equal to 20 Mbit/s
*   51200: equal to 50 Mbit/s
*   102400: equal to 100 Mbit/s

Default value: 10240.', example='pair-cn-dsa****'),
}

model ModifyDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model ModifyDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDiskReplicaPairResponseBody(name='body'),
}

/**
  * The name of the replication pair.
  *
  * @param request ModifyDiskReplicaPairRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDiskReplicaPairResponse
 */
async function modifyDiskReplicaPairWithOptions(request: ModifyDiskReplicaPairRequest, runtime: Util.RuntimeOptions): ModifyDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.pairName)) {
    query['PairName'] = request.pairName;
  }
  if (!Util.isUnset(request.RPO)) {
    query['RPO'] = request.RPO;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The name of the replication pair.
  *
  * @param request ModifyDiskReplicaPairRequest
  * @return ModifyDiskReplicaPairResponse
 */
async function modifyDiskReplicaPair(request: ModifyDiskReplicaPairRequest): ModifyDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiskReplicaPairWithOptions(request, runtime);
}

model RemoveDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-42665544****'),
  regionId?: string(name='RegionId', description='The region ID of the replication pair-consistent group.', example='cn-beijing'),
  replicaGroupId?: string(name='ReplicaGroupId', description='The ID of the replication pair-consistent group.', example='pg-myreplica****'),
  replicaPairId?: string(name='ReplicaPairId', description='The ID of the replication pair.', example='pair-cn-dsa****'),
}

model RemoveDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model RemoveDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveDiskReplicaPairResponseBody(name='body'),
}

/**
  * *   The replication pair-consistent group feature is supported in the China (Hangzhou), China (Shanghai), China (Beijing), China (Shenzhen), China (Heyuan), China (Chengdu), China (Hong Kong), Singapore (Singapore), US (Silicon Valley), and US (Virginia) regions.
  * *   The replication pair-consistent group from which you want to remove a replication pair must be in the **Created** (`created`), **Stopped** (`stopped`), or **Invalid** (`invalid`) state.
  *
  * @param request RemoveDiskReplicaPairRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RemoveDiskReplicaPairResponse
 */
async function removeDiskReplicaPairWithOptions(request: RemoveDiskReplicaPairRequest, runtime: Util.RuntimeOptions): RemoveDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The replication pair-consistent group feature is supported in the China (Hangzhou), China (Shanghai), China (Beijing), China (Shenzhen), China (Heyuan), China (Chengdu), China (Hong Kong), Singapore (Singapore), US (Silicon Valley), and US (Virginia) regions.
  * *   The replication pair-consistent group from which you want to remove a replication pair must be in the **Created** (`created`), **Stopped** (`stopped`), or **Invalid** (`invalid`) state.
  *
  * @param request RemoveDiskReplicaPairRequest
  * @return RemoveDiskReplicaPairResponse
 */
async function removeDiskReplicaPair(request: RemoveDiskReplicaPairRequest): RemoveDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDiskReplicaPairWithOptions(request, runtime);
}

model ReprotectDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', description='The ID of the request.', example='123e4567-e89b-12d3-a456-42665544****'),
  regionId?: string(name='RegionId', description='The ID of the replication pair-consistent group. You can call the [DescribeDiskReplicaGroups](~~426614~~) operation to query the IDs of replication pair-consistent groups.', example='cn-shanghai'),
  replicaGroupId?: string(name='ReplicaGroupId', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='pg-myreplica****'),
}

model ReprotectDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model ReprotectDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReprotectDiskReplicaGroupResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to **ReprotectDiskReplicaGroup**.
  *
  * @param request ReprotectDiskReplicaGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ReprotectDiskReplicaGroupResponse
 */
async function reprotectDiskReplicaGroupWithOptions(request: ReprotectDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): ReprotectDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReprotectDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The operation that you want to perform. Set the value to **ReprotectDiskReplicaGroup**.
  *
  * @param request ReprotectDiskReplicaGroupRequest
  * @return ReprotectDiskReplicaGroupResponse
 */
async function reprotectDiskReplicaGroup(request: ReprotectDiskReplicaGroupRequest): ReprotectDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return reprotectDiskReplicaGroupWithOptions(request, runtime);
}

model ReprotectDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  replicaPairId?: string(name='ReplicaPairId', example='pair-cn-dsa****'),
}

model ReprotectDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model ReprotectDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReprotectDiskReplicaPairResponseBody(name='body'),
}

/**
  * The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).
  *
  * @param request ReprotectDiskReplicaPairRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ReprotectDiskReplicaPairResponse
 */
async function reprotectDiskReplicaPairWithOptions(request: ReprotectDiskReplicaPairRequest, runtime: Util.RuntimeOptions): ReprotectDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReprotectDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).
  *
  * @param request ReprotectDiskReplicaPairRequest
  * @return ReprotectDiskReplicaPairResponse
 */
async function reprotectDiskReplicaPair(request: ReprotectDiskReplicaPairRequest): ReprotectDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return reprotectDiskReplicaPairWithOptions(request, runtime);
}

model StartDiskMonitorRequest {
  diskIds?: [ string ](name='DiskIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model StartDiskMonitorShrinkRequest {
  diskIdsShrink?: string(name='DiskIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model StartDiskMonitorResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model StartDiskMonitorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDiskMonitorResponseBody(name='body'),
}

async function startDiskMonitorWithOptions(tmpReq: StartDiskMonitorRequest, runtime: Util.RuntimeOptions): StartDiskMonitorResponse {
  Util.validateModel(tmpReq);
  var request = new StartDiskMonitorShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.diskIds)) {
    request.diskIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.diskIds, 'DiskIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.diskIdsShrink)) {
    query['DiskIds'] = request.diskIdsShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDiskMonitor',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startDiskMonitor(request: StartDiskMonitorRequest): StartDiskMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDiskMonitorWithOptions(request, runtime);
}

model StartDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', description='Specifies whether to immediately synchronize data once. Valid values:

*   true: immediately synchronizes data once.
*   false: synchronizes data based on the RPO of the replication pair-consistent group.

Default value: false.', example='123e4567-e89b-12d3-a456-42665544****'),
  oneShot?: boolean(name='OneShot', description='The ID of the request.', example='false'),
  regionId?: string(name='RegionId', description='The ID of the replication pair-consistent group.', example='cn-beijing'),
  replicaGroupId?: string(name='ReplicaGroupId', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='pg-myreplica****'),
}

model StartDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model StartDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDiskReplicaGroupResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to **StartDiskReplicaGroup**.
  *
  * @param request StartDiskReplicaGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StartDiskReplicaGroupResponse
 */
async function startDiskReplicaGroupWithOptions(request: StartDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): StartDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.oneShot)) {
    query['OneShot'] = request.oneShot;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The operation that you want to perform. Set the value to **StartDiskReplicaGroup**.
  *
  * @param request StartDiskReplicaGroupRequest
  * @return StartDiskReplicaGroupResponse
 */
async function startDiskReplicaGroup(request: StartDiskReplicaGroupRequest): StartDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDiskReplicaGroupWithOptions(request, runtime);
}

model StartDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  oneShot?: boolean(name='OneShot', example='false'),
  regionId?: string(name='RegionId', description='The ID of the request.', example='cn-beijing'),
  replicaPairId?: string(name='ReplicaPairId', example='pair-cn-dsa****'),
}

model StartDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', example='A37597A6-BB99-19B3-85EA-4C2B91F0****'),
}

model StartDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDiskReplicaPairResponseBody(name='body'),
}

/**
  * The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).
  *
  * @param request StartDiskReplicaPairRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StartDiskReplicaPairResponse
 */
async function startDiskReplicaPairWithOptions(request: StartDiskReplicaPairRequest, runtime: Util.RuntimeOptions): StartDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.oneShot)) {
    query['OneShot'] = request.oneShot;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).
  *
  * @param request StartDiskReplicaPairRequest
  * @return StartDiskReplicaPairResponse
 */
async function startDiskReplicaPair(request: StartDiskReplicaPairRequest): StartDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDiskReplicaPairWithOptions(request, runtime);
}

model StopDiskMonitorRequest {
  diskIds?: [ string ](name='DiskIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model StopDiskMonitorShrinkRequest {
  diskIdsShrink?: string(name='DiskIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model StopDiskMonitorResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model StopDiskMonitorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopDiskMonitorResponseBody(name='body'),
}

async function stopDiskMonitorWithOptions(tmpReq: StopDiskMonitorRequest, runtime: Util.RuntimeOptions): StopDiskMonitorResponse {
  Util.validateModel(tmpReq);
  var request = new StopDiskMonitorShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.diskIds)) {
    request.diskIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.diskIds, 'DiskIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.diskIdsShrink)) {
    query['DiskIds'] = request.diskIdsShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDiskMonitor',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopDiskMonitor(request: StopDiskMonitorRequest): StopDiskMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDiskMonitorWithOptions(request, runtime);
}

model StopDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-42665544****'),
  regionId?: string(name='RegionId', description='The region ID of the replication pair-consistent group.', example='cn-beijing'),
  replicaGroupId?: string(name='ReplicaGroupId', description='The ID of the replication pair-consistent group. You can call the [DescribeDiskReplicaGroups](~~426614~~) operation to query the IDs of replication pair-consistent groups.', example='pg-myreplica****'),
}

model StopDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C123F94F-4E38-19AE-942A-A8D6F44F****'),
}

model StopDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopDiskReplicaGroupResponseBody(name='body'),
}

/**
  * *   The replication pair-consistent group feature is supported in the China (Hangzhou), China (Shanghai), China (Beijing), China (Shenzhen), China (Heyuan), China (Chengdu), China (Hong Kong), Singapore (Singapore), US (Silicon Valley), and US (Virginia) regions.
  * *   The replication pair-consistent group that you want to stop must be in the **One-time Syncing** (`manual_syncing`), **Syncing** (`syncing`), **Normal** (`normal`), **Stopping** (`stopping`), **Stop Failed** (`stop_failed`), or **Stopped** (`stopped`) state.
  * *   When a replication pair-consistent group is stopped, it enters the **Stopped** (`stopped`) state. If a replication pair-consistent group cannot be stopped, the state of the group remains unchanged or changes to **Stop Failed** (`stop_failed`). In this case, try again later.
  *
  * @param request StopDiskReplicaGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StopDiskReplicaGroupResponse
 */
async function stopDiskReplicaGroupWithOptions(request: StopDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): StopDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The replication pair-consistent group feature is supported in the China (Hangzhou), China (Shanghai), China (Beijing), China (Shenzhen), China (Heyuan), China (Chengdu), China (Hong Kong), Singapore (Singapore), US (Silicon Valley), and US (Virginia) regions.
  * *   The replication pair-consistent group that you want to stop must be in the **One-time Syncing** (`manual_syncing`), **Syncing** (`syncing`), **Normal** (`normal`), **Stopping** (`stopping`), **Stop Failed** (`stop_failed`), or **Stopped** (`stopped`) state.
  * *   When a replication pair-consistent group is stopped, it enters the **Stopped** (`stopped`) state. If a replication pair-consistent group cannot be stopped, the state of the group remains unchanged or changes to **Stop Failed** (`stop_failed`). In this case, try again later.
  *
  * @param request StopDiskReplicaGroupRequest
  * @return StopDiskReplicaGroupResponse
 */
async function stopDiskReplicaGroup(request: StopDiskReplicaGroupRequest): StopDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDiskReplicaGroupWithOptions(request, runtime);
}

model StopDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How do I ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-42665544****'),
  regionId?: string(name='RegionId', description='The region ID of the primary or secondary disk in the replication pair. You can call the [DescribeDiskReplicaPairs](~~354206~~) operation to query the region information of replication pairs.', example='cn-hangzhou'),
  replicaPairId?: string(name='ReplicaPairId', description='The ID of the replication pair.', example='pair-cn-dsa****'),
}

model StopDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A37597A6-BB99-19B3-85EA-4C2B91F0****'),
}

model StopDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopDiskReplicaPairResponseBody(name='body'),
}

/**
  * *   The async replication feature is supported in the China (Hangzhou), China (Shanghai), China (Beijing), China (Shenzhen), China (Heyuan), China (Chengdu), China (Hong Kong), Singapore (Singapore), US (Silicon Valley), and US (Virginia) regions.
  * *   Only replication pairs that are in the **Initial Syncing** (`initial_syncing`), **Syncing** (`syncing`), **One-time Syncing** (`manual_syncing`), or **Normal** (`normal`) state can be stopped. When a replication pair is stopped, it enters the Stopped (`stopped`) state. The secondary disk rolls back to the point in time when the last asynchronous replication was complete and drops all the data that is being replicated from the primary disk.
  *
  * @param request StopDiskReplicaPairRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StopDiskReplicaPairResponse
 */
async function stopDiskReplicaPairWithOptions(request: StopDiskReplicaPairRequest, runtime: Util.RuntimeOptions): StopDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The async replication feature is supported in the China (Hangzhou), China (Shanghai), China (Beijing), China (Shenzhen), China (Heyuan), China (Chengdu), China (Hong Kong), Singapore (Singapore), US (Silicon Valley), and US (Virginia) regions.
  * *   Only replication pairs that are in the **Initial Syncing** (`initial_syncing`), **Syncing** (`syncing`), **One-time Syncing** (`manual_syncing`), or **Normal** (`normal`) state can be stopped. When a replication pair is stopped, it enters the Stopped (`stopped`) state. The secondary disk rolls back to the point in time when the last asynchronous replication was complete and drops all the data that is being replicated from the primary disk.
  *
  * @param request StopDiskReplicaPairRequest
  * @return StopDiskReplicaPairResponse
 */
async function stopDiskReplicaPair(request: StopDiskReplicaPairRequest): StopDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDiskReplicaPairWithOptions(request, runtime);
}

model TagResourcesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='0c593ea1-3bea-11e9-b96b-88e9fe63****'),
  regionId?: string(name='RegionId', description='The region ID of the resource. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', example='disk-123'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   dbsc: dedicated block storage cluster
*   pair: replication pair
*   group: replication pair-consistent group', example='diskreplicagroup'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `acs:` or `aliyun`.', example='tag-key'),
      value?: string(name='Value', description='The value of tag N to add to the resource. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot start with `acs:` or contain `http://` or `https://`.', example='tag-value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request. The request ID is returned regardless of whether the call is successful.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

/**
  * Before you add tags to a resource, Alibaba Cloud checks the number of existing tags of the resource. If the maximum number of tags is reached, an error message is returned. For more information, see the "Tag limits" section in [Limits](~~25412~~).
  *
  * @param request TagResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return TagResourcesResponse
 */
async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you add tags to a resource, Alibaba Cloud checks the number of existing tags of the resource. If the maximum number of tags is reached, an error message is returned. For more information, see the "Tag limits" section in [Limits](~~25412~~).
  *
  * @param request TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags from the resource. This parameter is valid only when the TagKey.N parameter is not specified. Valid values:

*   true: removes all tags from the resource.
*   false: does not remove all tags from the resource.

Default value: false.', example='false'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='0c593ea1-3bea-11e9-b96b-88e9fe63****'),
  regionId?: string(name='RegionId', description='The region ID of the resource. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', example='disk-123'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   dbsc: dedicated block storage cluster
*   pair: the replication pair.
*   group: replication pair-consistent group', example='diskreplicapair'),
  tagKey?: [ string ](name='TagKey', example='disk-123'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request. The request ID is returned regardless of whether the call is successful.', example='C46FF5A8-C5F0-4024-8262-B16B6392****'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

/**
  * *   You can remove up to 20 tags at a time.
  * *   After a tag is removed from an EBS resource, the tag is automatically deleted if the tag is not added to any instance.
  *
  * @param request UntagResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UntagResourcesResponse
 */
async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can remove up to 20 tags at a time.
  * *   After a tag is removed from an EBS resource, the tag is automatically deleted if the tag is not added to any instance.
  *
  * @param request UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

