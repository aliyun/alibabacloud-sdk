/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  

  checkConfig(config);
  @endpoint = getEndpoint('ebs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateDiskReplicaPairRequest {
  bandwidth?: long(name='Bandwidth'),
  chargeType?: string(name='ChargeType'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  destinationDiskId?: string(name='DestinationDiskId'),
  destinationRegionId?: string(name='DestinationRegionId'),
  destinationZoneId?: string(name='DestinationZoneId'),
  diskId?: string(name='DiskId'),
  pairName?: string(name='PairName'),
  period?: long(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  sourceRegionId?: string(name='SourceRegionId'),
  sourceZoneId?: string(name='SourceZoneId'),
}

model CreateDiskReplicaPairResponseBody = {
  orderId?: string(name='OrderId'),
  replicaPairId?: string(name='ReplicaPairId'),
  requestId?: string(name='RequestId'),
}

model CreateDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDiskReplicaPairResponseBody(name='body'),
}

async function createDiskReplicaPairWithOptions(request: CreateDiskReplicaPairRequest, runtime: Util.RuntimeOptions): CreateDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  query["Bandwidth"] = request.bandwidth;
  query["ChargeType"] = request.chargeType;
  query["ClientToken"] = request.clientToken;
  query["Description"] = request.description;
  query["DestinationDiskId"] = request.destinationDiskId;
  query["DestinationRegionId"] = request.destinationRegionId;
  query["DestinationZoneId"] = request.destinationZoneId;
  query["DiskId"] = request.diskId;
  query["PairName"] = request.pairName;
  query["Period"] = request.period;
  query["PeriodUnit"] = request.periodUnit;
  query["SourceRegionId"] = request.sourceRegionId;
  query["SourceZoneId"] = request.sourceZoneId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDiskReplicaPair(request: CreateDiskReplicaPairRequest): CreateDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiskReplicaPairWithOptions(request, runtime);
}

model DeleteDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  replicaPairId?: string(name='ReplicaPairId'),
}

model DeleteDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDiskReplicaPairResponseBody(name='body'),
}

async function deleteDiskReplicaPairWithOptions(request: DeleteDiskReplicaPairRequest, runtime: Util.RuntimeOptions): DeleteDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  query["ClientToken"] = request.clientToken;
  query["RegionId"] = request.regionId;
  query["ReplicaPairId"] = request.replicaPairId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDiskReplicaPair(request: DeleteDiskReplicaPairRequest): DeleteDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDiskReplicaPairWithOptions(request, runtime);
}

model DescribeDiskReplicaPairsRequest {
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  pairIds?: string(name='PairIds'),
  regionId?: string(name='RegionId'),
}

model DescribeDiskReplicaPairsResponseBody = {
  nextToken?: string(name='NextToken'),
  replicaPairs?: [ 
    {
      asyncCycle?: long(name='AsyncCycle'),
      bandwidth?: long(name='Bandwidth'),
      description?: string(name='Description'),
      destinationDiskId?: string(name='DestinationDiskId'),
      destinationRegion?: string(name='DestinationRegion'),
      lastRPO?: long(name='LastRPO'),
      pairName?: string(name='PairName'),
      replicaPairId?: string(name='ReplicaPairId'),
      sourceDiskId?: string(name='SourceDiskId'),
      sourceRegion?: string(name='SourceRegion'),
      status?: string(name='Status'),
      statusMessage?: string(name='StatusMessage'),
    }
  ](name='ReplicaPairs'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeDiskReplicaPairsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiskReplicaPairsResponseBody(name='body'),
}

async function describeDiskReplicaPairsWithOptions(request: DescribeDiskReplicaPairsRequest, runtime: Util.RuntimeOptions): DescribeDiskReplicaPairsResponse {
  Util.validateModel(request);
  var query = {};
  query["MaxResults"] = request.maxResults;
  query["NextToken"] = request.nextToken;
  query["PairIds"] = request.pairIds;
  query["RegionId"] = request.regionId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiskReplicaPairs',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiskReplicaPairs(request: DescribeDiskReplicaPairsRequest): DescribeDiskReplicaPairsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskReplicaPairsWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
  resourceType?: string(name='ResourceType'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
      zones?: [ 
        {
          localName?: string(name='LocalName'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='Zones'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  query["AcceptLanguage"] = request.acceptLanguage;
  query["ResourceType"] = request.resourceType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model FailoverDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  replicaPairId?: string(name='ReplicaPairId'),
}

model FailoverDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model FailoverDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: FailoverDiskReplicaPairResponseBody(name='body'),
}

async function failoverDiskReplicaPairWithOptions(request: FailoverDiskReplicaPairRequest, runtime: Util.RuntimeOptions): FailoverDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  query["ClientToken"] = request.clientToken;
  query["RegionId"] = request.regionId;
  query["ReplicaPairId"] = request.replicaPairId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'FailoverDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function failoverDiskReplicaPair(request: FailoverDiskReplicaPairRequest): FailoverDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return failoverDiskReplicaPairWithOptions(request, runtime);
}

model ModifyDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  pairName?: string(name='PairName'),
  regionId?: string(name='RegionId'),
  replicaPairId?: string(name='ReplicaPairId'),
}

model ModifyDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ModifyDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDiskReplicaPairResponseBody(name='body'),
}

async function modifyDiskReplicaPairWithOptions(request: ModifyDiskReplicaPairRequest, runtime: Util.RuntimeOptions): ModifyDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  query["ClientToken"] = request.clientToken;
  query["Description"] = request.description;
  query["PairName"] = request.pairName;
  query["RegionId"] = request.regionId;
  query["ReplicaPairId"] = request.replicaPairId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDiskReplicaPair(request: ModifyDiskReplicaPairRequest): ModifyDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiskReplicaPairWithOptions(request, runtime);
}

model ReprotectDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  replicaPairId?: string(name='ReplicaPairId'),
}

model ReprotectDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ReprotectDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: ReprotectDiskReplicaPairResponseBody(name='body'),
}

async function reprotectDiskReplicaPairWithOptions(request: ReprotectDiskReplicaPairRequest, runtime: Util.RuntimeOptions): ReprotectDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  query["ClientToken"] = request.clientToken;
  query["RegionId"] = request.regionId;
  query["ReplicaPairId"] = request.replicaPairId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ReprotectDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reprotectDiskReplicaPair(request: ReprotectDiskReplicaPairRequest): ReprotectDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return reprotectDiskReplicaPairWithOptions(request, runtime);
}

model StartDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  replicaPairId?: string(name='ReplicaPairId'),
}

model StartDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StartDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: StartDiskReplicaPairResponseBody(name='body'),
}

async function startDiskReplicaPairWithOptions(request: StartDiskReplicaPairRequest, runtime: Util.RuntimeOptions): StartDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  query["ClientToken"] = request.clientToken;
  query["RegionId"] = request.regionId;
  query["ReplicaPairId"] = request.replicaPairId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'StartDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startDiskReplicaPair(request: StartDiskReplicaPairRequest): StartDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDiskReplicaPairWithOptions(request, runtime);
}

model StopDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  replicaPairId?: string(name='ReplicaPairId'),
}

model StopDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: StopDiskReplicaPairResponseBody(name='body'),
}

async function stopDiskReplicaPairWithOptions(request: StopDiskReplicaPairRequest, runtime: Util.RuntimeOptions): StopDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  query["ClientToken"] = request.clientToken;
  query["RegionId"] = request.regionId;
  query["ReplicaPairId"] = request.replicaPairId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'StopDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopDiskReplicaPair(request: StopDiskReplicaPairRequest): StopDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDiskReplicaPairWithOptions(request, runtime);
}

