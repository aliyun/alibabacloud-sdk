/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('ebs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  replicaGroupId?: string(name='ReplicaGroupId'),
  replicaPairId?: string(name='ReplicaPairId'),
}

model AddDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDiskReplicaPairResponseBody(name='body'),
}

async function addDiskReplicaPairWithOptions(request: AddDiskReplicaPairRequest, runtime: Util.RuntimeOptions): AddDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addDiskReplicaPair(request: AddDiskReplicaPairRequest): AddDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDiskReplicaPairWithOptions(request, runtime);
}

model CreateDedicatedBlockStorageClusterRequest {
  azone?: string(name='Azone'),
  capacity?: long(name='Capacity'),
  dbscId?: string(name='DbscId'),
  dbscName?: string(name='DbscName'),
  regionId?: string(name='RegionId'),
  type?: string(name='Type'),
}

model CreateDedicatedBlockStorageClusterResponseBody = {
  dbscId?: string(name='DbscId'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateDedicatedBlockStorageClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDedicatedBlockStorageClusterResponseBody(name='body'),
}

async function createDedicatedBlockStorageClusterWithOptions(request: CreateDedicatedBlockStorageClusterRequest, runtime: Util.RuntimeOptions): CreateDedicatedBlockStorageClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.azone)) {
    query['Azone'] = request.azone;
  }
  if (!Util.isUnset(request.capacity)) {
    query['Capacity'] = request.capacity;
  }
  if (!Util.isUnset(request.dbscId)) {
    query['DbscId'] = request.dbscId;
  }
  if (!Util.isUnset(request.dbscName)) {
    query['DbscName'] = request.dbscName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDedicatedBlockStorageCluster',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDedicatedBlockStorageCluster(request: CreateDedicatedBlockStorageClusterRequest): CreateDedicatedBlockStorageClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedBlockStorageClusterWithOptions(request, runtime);
}

model CreateDiskReplicaGroupRequest {
  bandwidth?: long(name='Bandwidth'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  destinationRegionId?: string(name='DestinationRegionId'),
  destinationZoneId?: string(name='DestinationZoneId'),
  groupName?: string(name='GroupName'),
  RPO?: long(name='RPO'),
  regionId?: string(name='RegionId'),
  sourceZoneId?: string(name='SourceZoneId'),
}

model CreateDiskReplicaGroupResponseBody = {
  replicaGroupId?: string(name='ReplicaGroupId'),
  requestId?: string(name='RequestId'),
}

model CreateDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDiskReplicaGroupResponseBody(name='body'),
}

async function createDiskReplicaGroupWithOptions(request: CreateDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): CreateDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destinationRegionId)) {
    query['DestinationRegionId'] = request.destinationRegionId;
  }
  if (!Util.isUnset(request.destinationZoneId)) {
    query['DestinationZoneId'] = request.destinationZoneId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.RPO)) {
    query['RPO'] = request.RPO;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceZoneId)) {
    query['SourceZoneId'] = request.sourceZoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDiskReplicaGroup(request: CreateDiskReplicaGroupRequest): CreateDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiskReplicaGroupWithOptions(request, runtime);
}

model CreateDiskReplicaPairRequest {
  bandwidth?: long(name='Bandwidth'),
  chargeType?: string(name='ChargeType'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  destinationDiskId?: string(name='DestinationDiskId'),
  destinationRegionId?: string(name='DestinationRegionId'),
  destinationZoneId?: string(name='DestinationZoneId'),
  diskId?: string(name='DiskId'),
  pairName?: string(name='PairName'),
  period?: long(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  RPO?: long(name='RPO'),
  regionId?: string(name='RegionId'),
  sourceZoneId?: string(name='SourceZoneId'),
}

model CreateDiskReplicaPairResponseBody = {
  orderId?: string(name='OrderId'),
  replicaPairId?: string(name='ReplicaPairId'),
  requestId?: string(name='RequestId'),
}

model CreateDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDiskReplicaPairResponseBody(name='body'),
}

async function createDiskReplicaPairWithOptions(request: CreateDiskReplicaPairRequest, runtime: Util.RuntimeOptions): CreateDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destinationDiskId)) {
    query['DestinationDiskId'] = request.destinationDiskId;
  }
  if (!Util.isUnset(request.destinationRegionId)) {
    query['DestinationRegionId'] = request.destinationRegionId;
  }
  if (!Util.isUnset(request.destinationZoneId)) {
    query['DestinationZoneId'] = request.destinationZoneId;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.pairName)) {
    query['PairName'] = request.pairName;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.RPO)) {
    query['RPO'] = request.RPO;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceZoneId)) {
    query['SourceZoneId'] = request.sourceZoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDiskReplicaPair(request: CreateDiskReplicaPairRequest): CreateDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiskReplicaPairWithOptions(request, runtime);
}

model DeleteDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  replicaGroupId?: string(name='ReplicaGroupId'),
}

model DeleteDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDiskReplicaGroupResponseBody(name='body'),
}

async function deleteDiskReplicaGroupWithOptions(request: DeleteDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): DeleteDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDiskReplicaGroup(request: DeleteDiskReplicaGroupRequest): DeleteDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDiskReplicaGroupWithOptions(request, runtime);
}

model DeleteDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  replicaPairId?: string(name='ReplicaPairId'),
}

model DeleteDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDiskReplicaPairResponseBody(name='body'),
}

async function deleteDiskReplicaPairWithOptions(request: DeleteDiskReplicaPairRequest, runtime: Util.RuntimeOptions): DeleteDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDiskReplicaPair(request: DeleteDiskReplicaPairRequest): DeleteDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDiskReplicaPairWithOptions(request, runtime);
}

model DescribeDedicatedBlockStorageClusterDisksRequest {
  dbscId?: string(name='DbscId'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
}

model DescribeDedicatedBlockStorageClusterDisksResponseBody = {
  disks?: {
    disk?: [ 
      {
        attachedTime?: string(name='AttachedTime'),
        bdfId?: string(name='BdfId'),
        category?: string(name='Category'),
        deleteAutoSnapshot?: boolean(name='DeleteAutoSnapshot'),
        deleteWithInstance?: boolean(name='DeleteWithInstance'),
        description?: string(name='Description'),
        detachedTime?: string(name='DetachedTime'),
        device?: string(name='Device'),
        diskChargeType?: string(name='DiskChargeType'),
        diskId?: string(name='DiskId'),
        diskName?: string(name='DiskName'),
        enableAutoSnapshot?: boolean(name='EnableAutoSnapshot'),
        encrypted?: boolean(name='Encrypted'),
        IOPS?: long(name='IOPS'),
        imageId?: string(name='ImageId'),
        instanceId?: string(name='InstanceId'),
        KMSKeyId?: string(name='KMSKeyId'),
        mountInstanceNum?: int32(name='MountInstanceNum'),
        multiAttach?: string(name='MultiAttach'),
        performanceLevel?: string(name='PerformanceLevel'),
        portable?: boolean(name='Portable'),
        regionId?: string(name='RegionId'),
        size?: int32(name='Size'),
        sourceSnapshotId?: string(name='SourceSnapshotId'),
        status?: string(name='Status'),
        storageClusterId?: string(name='StorageClusterId'),
        storageSetId?: string(name='StorageSetId'),
        storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber'),
        tags?: [ 
          {
            tagKey?: string(name='TagKey'),
            tagValue?: string(name='TagValue'),
          }
        ](name='Tags'),
        type?: string(name='Type'),
        zoneId?: string(name='ZoneId'),
      }
    ](name='Disk'),
  }(name='Disks'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeDedicatedBlockStorageClusterDisksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDedicatedBlockStorageClusterDisksResponseBody(name='body'),
}

async function describeDedicatedBlockStorageClusterDisksWithOptions(request: DescribeDedicatedBlockStorageClusterDisksRequest, runtime: Util.RuntimeOptions): DescribeDedicatedBlockStorageClusterDisksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbscId)) {
    query['DbscId'] = request.dbscId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedBlockStorageClusterDisks',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDedicatedBlockStorageClusterDisks(request: DescribeDedicatedBlockStorageClusterDisksRequest): DescribeDedicatedBlockStorageClusterDisksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedBlockStorageClusterDisksWithOptions(request, runtime);
}

model DescribeDedicatedBlockStorageClustersRequest {
  azoneId?: string(name='AzoneId'),
  category?: string(name='Category'),
  clientToken?: string(name='ClientToken'),
  dedicatedBlockStorageClusterId?: [ string ](name='DedicatedBlockStorageClusterId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  status?: [ string ](name='Status'),
}

model DescribeDedicatedBlockStorageClustersResponseBody = {
  dedicatedBlockStorageClusters?: [ 
    {
      category?: string(name='Category'),
      createTime?: string(name='CreateTime'),
      dedicatedBlockStorageClusterCapacity?: {
        availableCapacity?: long(name='AvailableCapacity'),
        deliveryCapacity?: long(name='DeliveryCapacity'),
        totalCapacity?: long(name='TotalCapacity'),
        usedCapacity?: long(name='UsedCapacity'),
      }(name='DedicatedBlockStorageClusterCapacity'),
      dedicatedBlockStorageClusterId?: string(name='DedicatedBlockStorageClusterId'),
      dedicatedBlockStorageClusterName?: string(name='DedicatedBlockStorageClusterName'),
      description?: string(name='Description'),
      expiredTime?: string(name='ExpiredTime'),
      performanceLevel?: string(name='PerformanceLevel'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      supportedCategory?: string(name='SupportedCategory'),
      type?: string(name='Type'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DedicatedBlockStorageClusters'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeDedicatedBlockStorageClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDedicatedBlockStorageClustersResponseBody(name='body'),
}

async function describeDedicatedBlockStorageClustersWithOptions(request: DescribeDedicatedBlockStorageClustersRequest, runtime: Util.RuntimeOptions): DescribeDedicatedBlockStorageClustersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.azoneId)) {
    body['AzoneId'] = request.azoneId;
  }
  if (!Util.isUnset(request.category)) {
    body['Category'] = request.category;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dedicatedBlockStorageClusterId)) {
    body['DedicatedBlockStorageClusterId'] = request.dedicatedBlockStorageClusterId;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedBlockStorageClusters',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDedicatedBlockStorageClusters(request: DescribeDedicatedBlockStorageClustersRequest): DescribeDedicatedBlockStorageClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedBlockStorageClustersWithOptions(request, runtime);
}

model DescribeDiskReplicaGroupsRequest {
  groupIds?: string(name='GroupIds'),
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  site?: string(name='Site'),
}

model DescribeDiskReplicaGroupsResponseBody = {
  nextToken?: string(name='NextToken'),
  replicaGroups?: [ 
    {
      bandwidth?: long(name='Bandwidth'),
      description?: string(name='Description'),
      destinationRegionId?: string(name='DestinationRegionId'),
      destinationZoneId?: string(name='DestinationZoneId'),
      groupName?: string(name='GroupName'),
      lastRecoverPoint?: long(name='LastRecoverPoint'),
      pairIds?: [ bytes ](name='PairIds'),
      pairNumber?: long(name='PairNumber'),
      primaryRegion?: string(name='PrimaryRegion'),
      primaryZone?: string(name='PrimaryZone'),
      RPO?: long(name='RPO'),
      replicaGroupId?: string(name='ReplicaGroupId'),
      site?: string(name='Site'),
      sourceRegionId?: string(name='SourceRegionId'),
      sourceZoneId?: string(name='SourceZoneId'),
      standbyRegion?: string(name='StandbyRegion'),
      standbyZone?: string(name='StandbyZone'),
      status?: string(name='Status'),
    }
  ](name='ReplicaGroups'),
  requestId?: string(name='RequestId'),
}

model DescribeDiskReplicaGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiskReplicaGroupsResponseBody(name='body'),
}

async function describeDiskReplicaGroupsWithOptions(request: DescribeDiskReplicaGroupsRequest, runtime: Util.RuntimeOptions): DescribeDiskReplicaGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupIds)) {
    query['GroupIds'] = request.groupIds;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.site)) {
    query['Site'] = request.site;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiskReplicaGroups',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiskReplicaGroups(request: DescribeDiskReplicaGroupsRequest): DescribeDiskReplicaGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskReplicaGroupsWithOptions(request, runtime);
}

model DescribeDiskReplicaPairProgressRequest {
  regionId?: string(name='RegionId'),
  replicaPairId?: string(name='ReplicaPairId'),
}

model DescribeDiskReplicaPairProgressResponseBody = {
  progress?: int32(name='Progress'),
  recoverPoint?: long(name='RecoverPoint'),
  requestId?: string(name='RequestId'),
}

model DescribeDiskReplicaPairProgressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiskReplicaPairProgressResponseBody(name='body'),
}

async function describeDiskReplicaPairProgressWithOptions(request: DescribeDiskReplicaPairProgressRequest, runtime: Util.RuntimeOptions): DescribeDiskReplicaPairProgressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiskReplicaPairProgress',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiskReplicaPairProgress(request: DescribeDiskReplicaPairProgressRequest): DescribeDiskReplicaPairProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskReplicaPairProgressWithOptions(request, runtime);
}

model DescribeDiskReplicaPairsRequest {
  maxResults?: long(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  pairIds?: string(name='PairIds'),
  regionId?: string(name='RegionId'),
  replicaGroupId?: string(name='ReplicaGroupId'),
  site?: string(name='Site'),
}

model DescribeDiskReplicaPairsResponseBody = {
  nextToken?: string(name='NextToken'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  replicaPairs?: [ 
    {
      bandwidth?: long(name='Bandwidth'),
      chargeType?: string(name='ChargeType'),
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      destinationDiskId?: string(name='DestinationDiskId'),
      destinationRegion?: string(name='DestinationRegion'),
      destinationZoneId?: string(name='DestinationZoneId'),
      expiredTime?: long(name='ExpiredTime'),
      lastRecoverPoint?: long(name='LastRecoverPoint'),
      pairName?: string(name='PairName'),
      primaryRegion?: string(name='PrimaryRegion'),
      primaryZone?: string(name='PrimaryZone'),
      RPO?: long(name='RPO'),
      replicaGroupId?: string(name='ReplicaGroupId'),
      replicaGroupName?: string(name='ReplicaGroupName'),
      replicaPairId?: string(name='ReplicaPairId'),
      site?: string(name='Site'),
      sourceDiskId?: string(name='SourceDiskId'),
      sourceRegion?: string(name='SourceRegion'),
      sourceZoneId?: string(name='SourceZoneId'),
      standbyRegion?: string(name='StandbyRegion'),
      standbyZone?: string(name='StandbyZone'),
      status?: string(name='Status'),
      statusMessage?: string(name='StatusMessage'),
    }
  ](name='ReplicaPairs'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDiskReplicaPairsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiskReplicaPairsResponseBody(name='body'),
}

async function describeDiskReplicaPairsWithOptions(request: DescribeDiskReplicaPairsRequest, runtime: Util.RuntimeOptions): DescribeDiskReplicaPairsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pairIds)) {
    query['PairIds'] = request.pairIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  if (!Util.isUnset(request.site)) {
    query['Site'] = request.site;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiskReplicaPairs',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiskReplicaPairs(request: DescribeDiskReplicaPairsRequest): DescribeDiskReplicaPairsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskReplicaPairsWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
      zones?: [ 
        {
          localName?: string(name='LocalName'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='Zones'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model FailoverDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  replicaGroupId?: string(name='ReplicaGroupId'),
}

model FailoverDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model FailoverDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FailoverDiskReplicaGroupResponseBody(name='body'),
}

async function failoverDiskReplicaGroupWithOptions(request: FailoverDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): FailoverDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FailoverDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function failoverDiskReplicaGroup(request: FailoverDiskReplicaGroupRequest): FailoverDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return failoverDiskReplicaGroupWithOptions(request, runtime);
}

model FailoverDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  replicaPairId?: string(name='ReplicaPairId'),
}

model FailoverDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId'),
}

model FailoverDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FailoverDiskReplicaPairResponseBody(name='body'),
}

async function failoverDiskReplicaPairWithOptions(request: FailoverDiskReplicaPairRequest, runtime: Util.RuntimeOptions): FailoverDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FailoverDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function failoverDiskReplicaPair(request: FailoverDiskReplicaPairRequest): FailoverDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return failoverDiskReplicaPairWithOptions(request, runtime);
}

model ModifyDedicatedBlockStorageClusterAttributeRequest {
  clientToken?: string(name='ClientToken'),
  dbscId?: string(name='DbscId'),
  dbscName?: string(name='DbscName'),
  description?: string(name='Description'),
  regionId?: string(name='RegionId'),
}

model ModifyDedicatedBlockStorageClusterAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedBlockStorageClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDedicatedBlockStorageClusterAttributeResponseBody(name='body'),
}

async function modifyDedicatedBlockStorageClusterAttributeWithOptions(request: ModifyDedicatedBlockStorageClusterAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedBlockStorageClusterAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dbscId)) {
    query['DbscId'] = request.dbscId;
  }
  if (!Util.isUnset(request.dbscName)) {
    query['DbscName'] = request.dbscName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedBlockStorageClusterAttribute',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDedicatedBlockStorageClusterAttribute(request: ModifyDedicatedBlockStorageClusterAttributeRequest): ModifyDedicatedBlockStorageClusterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedBlockStorageClusterAttributeWithOptions(request, runtime);
}

model ModifyDiskReplicaGroupRequest {
  bandwidth?: long(name='Bandwidth'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  groupName?: string(name='GroupName'),
  RPO?: long(name='RPO'),
  regionId?: string(name='RegionId'),
  replicaGroupId?: string(name='ReplicaGroupId'),
}

model ModifyDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDiskReplicaGroupResponseBody(name='body'),
}

async function modifyDiskReplicaGroupWithOptions(request: ModifyDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): ModifyDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.RPO)) {
    query['RPO'] = request.RPO;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDiskReplicaGroup(request: ModifyDiskReplicaGroupRequest): ModifyDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiskReplicaGroupWithOptions(request, runtime);
}

model ModifyDiskReplicaPairRequest {
  bandwidth?: long(name='Bandwidth'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  pairName?: string(name='PairName'),
  RPO?: long(name='RPO'),
  regionId?: string(name='RegionId'),
  replicaPairId?: string(name='ReplicaPairId'),
}

model ModifyDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDiskReplicaPairResponseBody(name='body'),
}

async function modifyDiskReplicaPairWithOptions(request: ModifyDiskReplicaPairRequest, runtime: Util.RuntimeOptions): ModifyDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.pairName)) {
    query['PairName'] = request.pairName;
  }
  if (!Util.isUnset(request.RPO)) {
    query['RPO'] = request.RPO;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDiskReplicaPair(request: ModifyDiskReplicaPairRequest): ModifyDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiskReplicaPairWithOptions(request, runtime);
}

model RemoveDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  replicaGroupId?: string(name='ReplicaGroupId'),
  replicaPairId?: string(name='ReplicaPairId'),
}

model RemoveDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveDiskReplicaPairResponseBody(name='body'),
}

async function removeDiskReplicaPairWithOptions(request: RemoveDiskReplicaPairRequest, runtime: Util.RuntimeOptions): RemoveDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeDiskReplicaPair(request: RemoveDiskReplicaPairRequest): RemoveDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDiskReplicaPairWithOptions(request, runtime);
}

model ReprotectDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  replicaGroupId?: string(name='ReplicaGroupId'),
}

model ReprotectDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReprotectDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReprotectDiskReplicaGroupResponseBody(name='body'),
}

async function reprotectDiskReplicaGroupWithOptions(request: ReprotectDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): ReprotectDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReprotectDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reprotectDiskReplicaGroup(request: ReprotectDiskReplicaGroupRequest): ReprotectDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return reprotectDiskReplicaGroupWithOptions(request, runtime);
}

model ReprotectDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  replicaPairId?: string(name='ReplicaPairId'),
}

model ReprotectDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReprotectDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReprotectDiskReplicaPairResponseBody(name='body'),
}

async function reprotectDiskReplicaPairWithOptions(request: ReprotectDiskReplicaPairRequest, runtime: Util.RuntimeOptions): ReprotectDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReprotectDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reprotectDiskReplicaPair(request: ReprotectDiskReplicaPairRequest): ReprotectDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return reprotectDiskReplicaPairWithOptions(request, runtime);
}

model StartDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken'),
  oneShot?: boolean(name='OneShot'),
  regionId?: string(name='RegionId'),
  replicaGroupId?: string(name='ReplicaGroupId'),
}

model StartDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDiskReplicaGroupResponseBody(name='body'),
}

async function startDiskReplicaGroupWithOptions(request: StartDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): StartDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.oneShot)) {
    query['OneShot'] = request.oneShot;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startDiskReplicaGroup(request: StartDiskReplicaGroupRequest): StartDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDiskReplicaGroupWithOptions(request, runtime);
}

model StartDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken'),
  oneShot?: boolean(name='OneShot'),
  regionId?: string(name='RegionId'),
  replicaPairId?: string(name='ReplicaPairId'),
}

model StartDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDiskReplicaPairResponseBody(name='body'),
}

async function startDiskReplicaPairWithOptions(request: StartDiskReplicaPairRequest, runtime: Util.RuntimeOptions): StartDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.oneShot)) {
    query['OneShot'] = request.oneShot;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startDiskReplicaPair(request: StartDiskReplicaPairRequest): StartDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDiskReplicaPairWithOptions(request, runtime);
}

model StopDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  replicaGroupId?: string(name='ReplicaGroupId'),
}

model StopDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopDiskReplicaGroupResponseBody(name='body'),
}

async function stopDiskReplicaGroupWithOptions(request: StopDiskReplicaGroupRequest, runtime: Util.RuntimeOptions): StopDiskReplicaGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaGroupId)) {
    query['ReplicaGroupId'] = request.replicaGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDiskReplicaGroup',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopDiskReplicaGroup(request: StopDiskReplicaGroupRequest): StopDiskReplicaGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDiskReplicaGroupWithOptions(request, runtime);
}

model StopDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  replicaPairId?: string(name='ReplicaPairId'),
}

model StopDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopDiskReplicaPairResponseBody(name='body'),
}

async function stopDiskReplicaPairWithOptions(request: StopDiskReplicaPairRequest, runtime: Util.RuntimeOptions): StopDiskReplicaPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.replicaPairId)) {
    query['ReplicaPairId'] = request.replicaPairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDiskReplicaPair',
    version = '2021-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopDiskReplicaPair(request: StopDiskReplicaPairRequest): StopDiskReplicaPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDiskReplicaPairWithOptions(request, runtime);
}

