/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ebs';
  @version = '2021-07-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model AddDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: AddDiskReplicaPairResponseBody(name='body'),
}

async function addDiskReplicaPair(request: AddDiskReplicaPairRequest): AddDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model CreateDedicatedBlockStorageClusterRequest {
  azone: string(name='Azone', description='专属块存储集群所在的可用区ID。您可以调用DescribeZones
查看阿里云地域下的可用区。', position='Query'),
  capacity: long(name='Capacity', description='专属集群容量，单位为GiB，范围为[61440, 2334720]，最小递增步长为12288GiB', minimum=61440, maximum=2334720, position='Query'),
  dbscId?: string(name='DbscId', description='专属集群虚拟ID，可填任意字符串，不影响最终生成的专属集群ID', position='Query'),
  dbscName: string(name='DbscName', description='专属集群名称', position='Query'),
  regionId: string(name='RegionId', description='专属块存储集群所在的地域ID。您可以调用DescribeRegions
查看最新的阿里云地域列表。', position='Query'),
  type: string(name='Type', description='专属块存储集群性能类型。可能值：
Standard：基础型。该类型的专属块存储集群中可创建ESSD PL0云盘。
Premium：性能型。该类型的专属块存储集群中可创建ESSD PL1云盘。', position='Query'),
}

model CreateDedicatedBlockStorageClusterResponseBody = {
  dbscId?: string(name='DbscId', description='Id of the dbsc'),
  orderId?: string(name='OrderId', description='Id of the order'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateDedicatedBlockStorageClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedBlockStorageClusterResponseBody(name='body'),
}

async function createDedicatedBlockStorageCluster(request: CreateDedicatedBlockStorageClusterRequest): CreateDedicatedBlockStorageClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDedicatedBlockStorageCluster', 'POST', '/', 'json', false, 'json', request);
}

model CreateDiskReplicaGroupRequest {
  bandwidth?: long(name='Bandwidth', description='带宽值，单位为Kbps。公共云暂不支持。', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  destinationRegionId: string(name='DestinationRegionId', position='Query'),
  destinationZoneId: string(name='DestinationZoneId', position='Query'),
  groupName?: string(name='GroupName', minLength=2, maxLength=128, position='Query'),
  RPO?: long(name='RPO', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  sourceZoneId: string(name='SourceZoneId', position='Query'),
}

model CreateDiskReplicaGroupResponseBody = {
  replicaGroupId?: string(name='ReplicaGroupId'),
  requestId?: string(name='RequestId'),
}

model CreateDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDiskReplicaGroupResponseBody(name='body'),
}

async function createDiskReplicaGroup(request: CreateDiskReplicaGroupRequest): CreateDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateDiskReplicaPairRequest {
  bandwidth?: long(name='Bandwidth', position='Query'),
  chargeType?: string(name='ChargeType', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  destinationDiskId: string(name='DestinationDiskId', position='Query'),
  destinationRegionId: string(name='DestinationRegionId', position='Query'),
  destinationZoneId: string(name='DestinationZoneId', position='Query'),
  diskId: string(name='DiskId', position='Query'),
  pairName?: string(name='PairName', position='Query'),
  period?: long(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  RPO?: long(name='RPO', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  sourceZoneId: string(name='SourceZoneId', position='Query'),
}

model CreateDiskReplicaPairResponseBody = {
  orderId?: string(name='OrderId'),
  replicaPairId?: string(name='ReplicaPairId'),
  requestId?: string(name='RequestId'),
}

model CreateDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDiskReplicaPairResponseBody(name='body'),
}

async function createDiskReplicaPair(request: CreateDiskReplicaPairRequest): CreateDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
}

model DeleteDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDiskReplicaGroupResponseBody(name='body'),
}

async function deleteDiskReplicaGroup(request: DeleteDiskReplicaGroupRequest): DeleteDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model DeleteDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDiskReplicaPairResponseBody(name='body'),
}

async function deleteDiskReplicaPair(request: DeleteDiskReplicaPairRequest): DeleteDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedBlockStorageClusterDisksRequest {
  dbscId: string(name='DbscId', description='专属块存储集群ID', position='Query'),
  maxResults?: long(name='MaxResults', description='分页查询时每页的最大条目数。最大值为500。

默认值：10', position='Query'),
  nextToken?: string(name='NextToken', description='查询凭证（Token）。取值为上一次调用该接口返回的NextToken参数值，初次调用接口时无需设置该参数。', position='Query'),
  regionId: string(name='RegionId', description='专属块存储集群所在的地域ID。您可以调用DescribeRegions
查看最新的阿里云地域列表。', position='Query'),
}

model DescribeDedicatedBlockStorageClusterDisksResponseBody = {
  disks?: {
    disk?: [ 
      {
        attachedTime?: string(name='AttachedTime'),
        bdfId?: string(name='BdfId'),
        category?: string(name='Category'),
        deleteAutoSnapshot?: boolean(name='DeleteAutoSnapshot'),
        deleteWithInstance?: boolean(name='DeleteWithInstance'),
        description?: string(name='Description'),
        detachedTime?: string(name='DetachedTime'),
        device?: string(name='Device'),
        diskChargeType?: string(name='DiskChargeType'),
        diskId?: string(name='DiskId'),
        diskName?: string(name='DiskName'),
        enableAutoSnapshot?: boolean(name='EnableAutoSnapshot'),
        encrypted?: boolean(name='Encrypted'),
        IOPS?: long(name='IOPS'),
        imageId?: string(name='ImageId'),
        instanceId?: string(name='InstanceId'),
        KMSKeyId?: string(name='KMSKeyId'),
        mountInstanceNum?: int32(name='MountInstanceNum'),
        multiAttach?: string(name='MultiAttach'),
        performanceLevel?: string(name='PerformanceLevel'),
        portable?: boolean(name='Portable'),
        regionId?: string(name='RegionId'),
        size?: int32(name='Size'),
        sourceSnapshotId?: string(name='SourceSnapshotId'),
        status?: string(name='Status'),
        storageClusterId?: string(name='StorageClusterId'),
        storageSetId?: string(name='StorageSetId'),
        storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber'),
        tags?: [ 
          {
            tagKey?: string(name='TagKey'),
            tagValue?: string(name='TagValue'),
          }
        ](name='Tags'),
        type?: string(name='Type'),
        zoneId?: string(name='ZoneId'),
      }
    ](name='Disk', description='参考ECS DescribeDisks接口的返回结果
https://help.aliyun.com/document_detail/25514.html'),
  }(name='Disks'),
  nextToken?: string(name='NextToken', description='本次调用返回的查询凭证值。'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeDedicatedBlockStorageClusterDisksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedBlockStorageClusterDisksResponseBody(name='body'),
}

async function describeDedicatedBlockStorageClusterDisks(request: DescribeDedicatedBlockStorageClusterDisksRequest): DescribeDedicatedBlockStorageClusterDisksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedBlockStorageClusterDisks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedBlockStorageClustersRequest {
  azoneId?: string(name='AzoneId', description='专属块存储集群所在的可用区ID。您可以调用DescribeZones
查看阿里云地域下的可用区。', position='Body'),
  category?: string(name='Category', description='专属块存储集群可创建的云盘类型。
取值仅支持cloud_essd，即ESSD云盘。', position='Body'),
  clientToken?: string(name='ClientToken', description='客户端幂等token', position='Body'),
  dedicatedBlockStorageClusterId?: [ string ](name='DedicatedBlockStorageClusterId', description='专属块存储集群ID，参数前缀DedicatedBlockStorageClusterId，后缀.n为可查询的多个专属存储集群id', position='Body'),
  maxResults?: int32(name='MaxResults', description='分页大小, 默认值10', position='Body'),
  nextToken?: string(name='NextToken', description='查询凭证（Token），取值为上一次API调用返回的NextToken参数值', position='Body'),
  regionId: string(name='RegionId', description='专属块存储集群所在的地域ID。您可以调用DescribeRegions
查看最新的阿里云地域列表。', position='Body'),
  status?: [ string ](name='Status', description='专属块存储集群的状态。取值范围：
Preparing：待交付
Running：运行中
Expired：集群到期
Offline：下线
N表示可同时设置多个状态，N的取值范围为1~4。', position='Body'),
}

model DescribeDedicatedBlockStorageClustersResponseBody = {
  dedicatedBlockStorageClusters?: [ 
    {
      category?: string(name='Category', description='云盘类型，暂时只会返回cloud_essd'),
      createTime?: string(name='CreateTime', description='专属块存储集群创建时间的时间戳，单位为秒'),
      dedicatedBlockStorageClusterCapacity?: {
        availableCapacity?: long(name='AvailableCapacity', description='当前集群的可用容量，单位为GB'),
        deliveryCapacity?: long(name='DeliveryCapacity', description='待交付容量，单位为GB。'),
        totalCapacity?: long(name='TotalCapacity', description='当前集群总容量，单位为GB'),
        usedCapacity?: long(name='UsedCapacity', description='当前集群的已使用（已创盘）容量，单位为GB'),
      }(name='DedicatedBlockStorageClusterCapacity', description='专属块存储集群存储容量，单位为GB'),
      dedicatedBlockStorageClusterId?: string(name='DedicatedBlockStorageClusterId', description='专属块存储集群id'),
      dedicatedBlockStorageClusterName?: string(name='DedicatedBlockStorageClusterName', description='专属块存储集群名称'),
      description?: string(name='Description', description='专属块存储集群描述'),
      expiredTime?: string(name='ExpiredTime', description='专属块存储集群到期时间的时间戳，单位为秒'),
      performanceLevel?: string(name='PerformanceLevel', description='云盘性能等级，可能值：
PL0 
PL1 
PL2 
PL3
仅在SupportedCategory = cloud_essd有效'),
      regionId?: string(name='RegionId', description='专属块存储集群所在地域id'),
      status?: string(name='Status', description='专属块存储集群的状态。可能值：
Preparing：待交付
Running：运行中
Expired：集群到期
Offline：下线'),
      supportedCategory?: string(name='SupportedCategory', description='支持的云盘类型（新版），与ECS的云盘类型项对应'),
      type?: string(name='Type', description='专属块存储集群性能类型。可能值：
Standard：基础型。该类型的专属块存储集群中可创建ESSD PL0云盘。
Premium：性能型。该类型的专属块存储集群中可创建ESSD PL1云盘。'),
      zoneId?: string(name='ZoneId', description='专属块存储集群可用区id'),
    }
  ](name='DedicatedBlockStorageClusters', description='由一个或多个集群组成的数组'),
  nextToken?: string(name='NextToken', description='本次调用返回的查询凭证值'),
  requestId?: string(name='RequestId', description='RrequestId'),
}

model DescribeDedicatedBlockStorageClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedBlockStorageClustersResponseBody(name='body'),
}

async function describeDedicatedBlockStorageClusters(request: DescribeDedicatedBlockStorageClustersRequest): DescribeDedicatedBlockStorageClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedBlockStorageClusters', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDiskReplicaGroupsRequest {
  groupIds?: string(name='GroupIds', position='Query'),
  maxResults?: long(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  site?: string(name='Site', description='production或backup，表示数据从主或备站点获取，默认为production。', position='Query'),
}

model DescribeDiskReplicaGroupsResponseBody = {
  nextToken?: string(name='NextToken'),
  replicaGroups?: [ 
    {
      bandwidth?: long(name='Bandwidth', description='带宽值，单位为Kbps。公共云暂不支持。'),
      description?: string(name='Description'),
      destinationRegionId?: string(name='DestinationRegionId'),
      destinationZoneId?: string(name='DestinationZoneId'),
      groupName?: string(name='GroupName'),
      lastRecoverPoint?: long(name='LastRecoverPoint'),
      pairIds?: [ bytes ](name='PairIds'),
      pairNumber?: long(name='PairNumber', description='复制组中的复制对个数'),
      primaryRegion?: string(name='PrimaryRegion', description='复制组的初始源地域。'),
      primaryZone?: string(name='PrimaryZone', description='复制组的初始源可用区。'),
      RPO?: long(name='RPO'),
      replicaGroupId?: string(name='ReplicaGroupId'),
      site?: string(name='Site', description='pair信息的后端站点来源，production或backup'),
      sourceRegionId?: string(name='SourceRegionId'),
      sourceZoneId?: string(name='SourceZoneId'),
      standbyRegion?: string(name='StandbyRegion', description='复制组的初始目的地域。'),
      standbyZone?: string(name='StandbyZone', description='复制组的初始目的可用区。'),
      status?: string(name='Status'),
    }
  ](name='ReplicaGroups'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeDiskReplicaGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiskReplicaGroupsResponseBody(name='body'),
}

async function describeDiskReplicaGroups(request: DescribeDiskReplicaGroupsRequest): DescribeDiskReplicaGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiskReplicaGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiskReplicaPairProgressRequest {
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model DescribeDiskReplicaPairProgressResponseBody = {
  progress?: int32(name='Progress', description='同步进度'),
  recoverPoint?: long(name='RecoverPoint', description='最近一次恢复点的时间戳。有条件返回，复制对start后，才会返回该字段。'),
  requestId?: string(name='RequestId'),
}

model DescribeDiskReplicaPairProgressResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiskReplicaPairProgressResponseBody(name='body'),
}

async function describeDiskReplicaPairProgress(request: DescribeDiskReplicaPairProgressRequest): DescribeDiskReplicaPairProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiskReplicaPairProgress', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiskReplicaPairsRequest {
  maxResults?: long(name='MaxResults', description='分页查询时每页的最大条目数。取值范围：1~500

默认值：10', position='Query'),
  nextToken?: string(name='NextToken', description='查询凭证（Token）。取值为上一次调用该接口返回的NextToken参数值，初次调用接口时无需设置该参数。如果设置了NextToken，则请求参数PageSize和PageNumber将失效，且返回数据中的TotalCount无效。', position='Query'),
  pageNumber?: int32(name='PageNumber', description='分页查询时的页码。', position='Query'),
  pageSize?: int32(name='PageSize', description='分页查询时设置的每页行数。', position='Query'),
  pairIds?: string(name='PairIds', description='异步复制关系ID列表。您可以指定一个或多个异步复制关系ID进行查询。格式为：pair-cn-dsa****,pair-cn-asd****。

默认值为空，表示查询当前地域下所有的异步复制关系。', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId?: string(name='ReplicaGroupId', description='所属复制组id。', position='Query'),
  site?: string(name='Site', description='production或backup，表示获取本地为生产站点或灾备站点的复制对数据，默认为production。', position='Query'),
}

model DescribeDiskReplicaPairsResponseBody = {
  nextToken?: string(name='NextToken', description='查询凭证（Token）。取值为上一次调用该接口返回的NextToken参数值，初次调用接口时无需设置该参数。如果设置了NextToken，则请求参数PageSize和PageNumber将失效，且返回数据中的TotalCount无效。'),
  pageNumber?: int32(name='PageNumber', description='参数页码。'),
  pageSize?: int32(name='PageSize', description='参数页行数。'),
  replicaPairs?: [ 
    {
      bandwidth?: long(name='Bandwidth', description='异步复制时使用的带宽。单位为Kbps。'),
      chargeType?: string(name='ChargeType', description='付费类型。PREPAY：预付费；POSTPAY：后付费。'),
      createTime?: long(name='CreateTime', description='创建时间。1970年1月1日0点0分以来的秒数。'),
      description?: string(name='Description'),
      destinationDiskId?: string(name='DestinationDiskId'),
      destinationRegion?: string(name='DestinationRegion'),
      destinationZoneId?: string(name='DestinationZoneId', description='从盘所属的可用区。'),
      expiredTime?: long(name='ExpiredTime'),
      lastRecoverPoint?: long(name='LastRecoverPoint', description='最近一次异步复制操作完成的时间。该参数以时间戳的形式提供返回值。单位为秒。'),
      pairName?: string(name='PairName'),
      primaryRegion?: string(name='PrimaryRegion', description='复制对的初始源地域。'),
      primaryZone?: string(name='PrimaryZone', description='复制对的初始源可用区。'),
      RPO?: long(name='RPO', description='复制对的RPO值。单位为秒。'),
      replicaGroupId?: string(name='ReplicaGroupId', description='所属复制组id。'),
      replicaGroupName?: string(name='ReplicaGroupName', description='所属复制组名称。'),
      replicaPairId?: string(name='ReplicaPairId'),
      site?: string(name='Site', description='复制对信息的后端站点来源，production或backup。'),
      sourceDiskId?: string(name='SourceDiskId'),
      sourceRegion?: string(name='SourceRegion'),
      sourceZoneId?: string(name='SourceZoneId', description='主盘所属的可用区。'),
      standbyRegion?: string(name='StandbyRegion', description='复制对的初始目的地域。'),
      standbyZone?: string(name='StandbyZone', description='复制对的初始目的可用区。'),
      status?: string(name='Status', description='异步复制关系的状态。可能值：

- invalid：失效。该状态表示异步复制关系存在异常。
- creating：创建中。
- created：已创建。
- create_failed：创建失败。
- initial_syncing：初始同步中。异步复制在创建并启动后，主盘数据初次异步复制到从盘的过程中，将处于该状态。
- syncing：同步中。主盘和从盘之间非第一次进行异步复制数据时，将处于该状态。
- manual_syncing：单次同步中。单次同步，同步完成后恢复到stopped状态。如果是第一次单次同步，则同步中也显示为状态manual_syncing。
- normal：正常。当异步复制的当前周期内数据复制完成时，将处于该状态。
- stopping：停止中。
- stopped：已停止。
- stop_failed：停止失败。
- failovering：故障切换中。
- failovered：故障切换完成。
- failover_failed：故障切换失败。
- reprotecting：反向复制操作中。
- reprotect_failed：反向复制失败。
- deleting：删除中。
- delete_failed：删除失败。
- deleted：已删除。'),
      statusMessage?: string(name='StatusMessage', description='复制对的状态提示信息。比如invalid时，可能值：DeviceRemoved：主盘或者从盘被删除。DeviceKeyChanged：主盘或从盘的DeviceKey映射发生变化。'),
    }
  ](name='ReplicaPairs'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: long(name='TotalCount', description='分页查询时的结果总条数。'),
}

model DescribeDiskReplicaPairsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiskReplicaPairsResponseBody(name='body'),
}

async function describeDiskReplicaPairs(request: DescribeDiskReplicaPairsRequest): DescribeDiskReplicaPairsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiskReplicaPairs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
      zones?: [ 
        {
          localName?: string(name='LocalName'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='Zones'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model FailoverDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
}

model FailoverDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model FailoverDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: FailoverDiskReplicaGroupResponseBody(name='body'),
}

async function failoverDiskReplicaGroup(request: FailoverDiskReplicaGroupRequest): FailoverDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FailoverDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model FailoverDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model FailoverDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model FailoverDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: FailoverDiskReplicaPairResponseBody(name='body'),
}

async function failoverDiskReplicaPair(request: FailoverDiskReplicaPairRequest): FailoverDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FailoverDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  clientToken?: string(name='ClientToken', description='客户端幂等token', position='Query'),
  nextToken?: string(name='NextToken', description='下一个查询开始Token', position='Query'),
  regionId: string(name='RegionId', description='地域', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='资源ID，n的取值范围为 [1, 50]', position='Query'),
  resourceType: string(name='ResourceType', description='资源类型定义', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='资源的标签键'),
      value?: string(name='Value', description='资源的标签值'),
    }
  ](name='Tag', description='标签键值对。n的取值范围为 [1, 20]', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='下一个查询开始Token'),
  requestId?: string(name='RequestId', description='请求 ID。无论调用接口成功与否，我们都会返回请求 ID。'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='资源ID'),
      resourceType?: string(name='ResourceType', description='资源类型'),
      tagKey?: string(name='TagKey', description='资源的标签键'),
      tagValue?: string(name='TagValue', description='资源的标签值'),
    }
  ](name='TagResources', description='资源标签列表'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDedicatedBlockStorageClusterAttributeRequest {
  clientToken?: string(name='ClientToken', description='客户端幂等token', position='Query'),
  dbscId: string(name='DbscId', description='专属集群ID', position='Query'),
  dbscName: string(name='DbscName', description='修改后的专属集群名称，不为空', position='Query'),
  description?: string(name='Description', description='修改后的专属集群描述信息', position='Query'),
  regionId: string(name='RegionId', description='专属块存储集群所在的地域ID。您可以调用DescribeRegions
查看最新的阿里云地域列表。', position='Query'),
}

model ModifyDedicatedBlockStorageClusterAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedBlockStorageClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedBlockStorageClusterAttributeResponseBody(name='body'),
}

async function modifyDedicatedBlockStorageClusterAttribute(request: ModifyDedicatedBlockStorageClusterAttributeRequest): ModifyDedicatedBlockStorageClusterAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDedicatedBlockStorageClusterAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDiskReplicaGroupRequest {
  bandwidth?: long(name='Bandwidth', description='带宽值，单位kbps。公共云暂不支持。', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  RPO?: long(name='RPO', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
}

model ModifyDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ModifyDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDiskReplicaGroupResponseBody(name='body'),
}

async function modifyDiskReplicaGroup(request: ModifyDiskReplicaGroupRequest): ModifyDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDiskReplicaPairRequest {
  bandwidth?: long(name='Bandwidth', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  pairName?: string(name='PairName', position='Query'),
  RPO?: long(name='RPO', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model ModifyDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ModifyDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDiskReplicaPairResponseBody(name='body'),
}

async function modifyDiskReplicaPair(request: ModifyDiskReplicaPairRequest): ModifyDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model RemoveDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model RemoveDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RemoveDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDiskReplicaPairResponseBody(name='body'),
}

async function removeDiskReplicaPair(request: RemoveDiskReplicaPairRequest): RemoveDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model ReprotectDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
}

model ReprotectDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ReprotectDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ReprotectDiskReplicaGroupResponseBody(name='body'),
}

async function reprotectDiskReplicaGroup(request: ReprotectDiskReplicaGroupRequest): ReprotectDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReprotectDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model ReprotectDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model ReprotectDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ReprotectDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: ReprotectDiskReplicaPairResponseBody(name='body'),
}

async function reprotectDiskReplicaPair(request: ReprotectDiskReplicaPairRequest): ReprotectDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReprotectDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model StartDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  oneShot?: boolean(name='OneShot', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
}

model StartDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StartDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: StartDiskReplicaGroupResponseBody(name='body'),
}

async function startDiskReplicaGroup(request: StartDiskReplicaGroupRequest): StartDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model StartDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  oneShot?: boolean(name='OneShot', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model StartDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StartDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: StartDiskReplicaPairResponseBody(name='body'),
}

async function startDiskReplicaPair(request: StartDiskReplicaPairRequest): StartDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model StopDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
}

model StopDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: StopDiskReplicaGroupResponseBody(name='body'),
}

async function stopDiskReplicaGroup(request: StopDiskReplicaGroupRequest): StopDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model StopDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model StopDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: StopDiskReplicaPairResponseBody(name='body'),
}

async function stopDiskReplicaPair(request: StopDiskReplicaPairRequest): StopDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  clientToken?: string(name='ClientToken', description='客户端幂等token', position='Query'),
  regionId: string(name='RegionId', description='地域', position='Query'),
  resourceId: [ string ](name='ResourceId', description='资源ID，n的取值范围为 [1, 50]', position='Query'),
  resourceType: string(name='ResourceType', description='资源类型定义', position='Query'),
  tag: [ 
    {
      key: string(name='Key', description='资源的标签键'),
      value: string(name='Value', description='资源的标签值'),
    }
  ](name='Tag', description='标签键值对。n的取值范围为 [1, 20]', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='请求 ID。无论调用接口成功与否，我们都会返回请求 ID。'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='是否全部删除，只针对TagKey.N为空时有效', position='Query'),
  clientToken?: string(name='ClientToken', description='客户端幂等token', position='Query'),
  regionId: string(name='RegionId', description='地域', position='Query'),
  resourceId: [ string ](name='ResourceId', description='资源ID，n的取值范围为 [1, 50]', position='Query'),
  resourceType: string(name='ResourceType', description='资源类型定义', position='Query'),
  tagKey?: [ string ](name='TagKey', description='标签键。n 的取值范围为 [1, 20]', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='请求 ID。无论调用接口成功与否，我们都会返回请求 ID。'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

