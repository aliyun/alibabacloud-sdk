/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ebs';
  @version = '2021-07-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model AddDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: AddDiskReplicaPairResponseBody(name='body'),
}

async function addDiskReplicaPair(request: AddDiskReplicaPairRequest): AddDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model CreateDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  destinationRegionId: string(name='DestinationRegionId', position='Query'),
  destinationZoneId: string(name='DestinationZoneId', position='Query'),
  groupName?: string(name='GroupName', minLength=2, maxLength=128, position='Query'),
  RPO?: long(name='RPO', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  sourceZoneId: string(name='SourceZoneId', position='Query'),
}

model CreateDiskReplicaGroupResponseBody = {
  replicaGroupId?: string(name='ReplicaGroupId'),
  requestId?: string(name='RequestId'),
}

model CreateDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDiskReplicaGroupResponseBody(name='body'),
}

async function createDiskReplicaGroup(request: CreateDiskReplicaGroupRequest): CreateDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateDiskReplicaPairRequest {
  bandwidth?: long(name='Bandwidth', position='Query'),
  chargeType?: string(name='ChargeType', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  destinationDiskId: string(name='DestinationDiskId', position='Query'),
  destinationRegionId: string(name='DestinationRegionId', position='Query'),
  destinationZoneId: string(name='DestinationZoneId', position='Query'),
  diskId: string(name='DiskId', position='Query'),
  pairName?: string(name='PairName', position='Query'),
  period?: long(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  RPO?: long(name='RPO', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  sourceZoneId: string(name='SourceZoneId', position='Query'),
}

model CreateDiskReplicaPairResponseBody = {
  orderId?: string(name='OrderId'),
  replicaPairId?: string(name='ReplicaPairId'),
  requestId?: string(name='RequestId'),
}

model CreateDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDiskReplicaPairResponseBody(name='body'),
}

async function createDiskReplicaPair(request: CreateDiskReplicaPairRequest): CreateDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
}

model DeleteDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDiskReplicaGroupResponseBody(name='body'),
}

async function deleteDiskReplicaGroup(request: DeleteDiskReplicaGroupRequest): DeleteDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model DeleteDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDiskReplicaPairResponseBody(name='body'),
}

async function deleteDiskReplicaPair(request: DeleteDiskReplicaPairRequest): DeleteDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiskReplicaGroupsRequest {
  groupIds?: string(name='GroupIds', position='Query'),
  maxResults?: long(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  site?: string(name='Site', description='production或backup，表示数据从主或备站点获取，默认为production。', position='Query'),
}

model DescribeDiskReplicaGroupsResponseBody = {
  nextToken?: string(name='NextToken'),
  replicaGroups?: [ 
    {
      description?: string(name='Description'),
      destinationRegionId?: string(name='DestinationRegionId'),
      destinationZoneId?: string(name='DestinationZoneId'),
      groupName?: string(name='GroupName'),
      lastRecoverPoint?: long(name='LastRecoverPoint'),
      pairIds?: [ bytes ](name='PairIds'),
      pairNumber?: long(name='PairNumber', description='复制组中的复制对个数'),
      RPO?: long(name='RPO'),
      replicaGroupId?: string(name='ReplicaGroupId'),
      site?: string(name='Site', description='pair信息的后端站点来源，production或backup'),
      sourceRegionId?: string(name='SourceRegionId'),
      sourceZoneId?: string(name='SourceZoneId'),
      status?: string(name='Status'),
    }
  ](name='ReplicaGroups'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeDiskReplicaGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiskReplicaGroupsResponseBody(name='body'),
}

async function describeDiskReplicaGroups(request: DescribeDiskReplicaGroupsRequest): DescribeDiskReplicaGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiskReplicaGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiskReplicaPairProgressRequest {
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model DescribeDiskReplicaPairProgressResponseBody = {
  progress?: int32(name='Progress', description='同步进度'),
  recoverPoint?: long(name='RecoverPoint', description='最近一次恢复点的时间戳。有条件返回，复制对start后，才会返回该字段。'),
  requestId?: string(name='RequestId'),
}

model DescribeDiskReplicaPairProgressResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiskReplicaPairProgressResponseBody(name='body'),
}

async function describeDiskReplicaPairProgress(request: DescribeDiskReplicaPairProgressRequest): DescribeDiskReplicaPairProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiskReplicaPairProgress', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiskReplicaPairsRequest {
  maxResults?: long(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  pairIds?: string(name='PairIds', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId?: string(name='ReplicaGroupId', position='Query'),
  site?: string(name='Site', description='production或backup，表示数据从主或备站点获取，默认为production。', position='Query'),
}

model DescribeDiskReplicaPairsResponseBody = {
  nextToken?: string(name='NextToken'),
  replicaPairs?: [ 
    {
      bandwidth?: long(name='Bandwidth'),
      chargeType?: string(name='ChargeType'),
      createTime?: long(name='CreateTime', description='创建时间。1970年1月1日0点0分以来的毫秒数'),
      description?: string(name='Description'),
      destinationDiskId?: string(name='DestinationDiskId'),
      destinationRegion?: string(name='DestinationRegion'),
      destinationZoneId?: string(name='DestinationZoneId'),
      lastRecoverPoint?: long(name='LastRecoverPoint'),
      pairName?: string(name='PairName'),
      primaryRegion?: string(name='PrimaryRegion', description='pair的初始源地域'),
      primaryZone?: string(name='PrimaryZone', description='pair的初始源可用区'),
      RPO?: long(name='RPO'),
      replicaGroupId?: string(name='ReplicaGroupId'),
      replicaGroupName?: string(name='ReplicaGroupName'),
      replicaPairId?: string(name='ReplicaPairId'),
      site?: string(name='Site', description='pair信息的后端站点来源，production或backup'),
      sourceDiskId?: string(name='SourceDiskId'),
      sourceRegion?: string(name='SourceRegion'),
      sourceZoneId?: string(name='SourceZoneId'),
      standbyRegion?: string(name='StandbyRegion', description='pair的初始目的地域'),
      standbyZone?: string(name='StandbyZone', description='pair的初始目的可用区'),
      status?: string(name='Status'),
      statusMessage?: string(name='StatusMessage'),
    }
  ](name='ReplicaPairs'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeDiskReplicaPairsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiskReplicaPairsResponseBody(name='body'),
}

async function describeDiskReplicaPairs(request: DescribeDiskReplicaPairsRequest): DescribeDiskReplicaPairsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiskReplicaPairs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
      zones?: [ 
        {
          localName?: string(name='LocalName'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='Zones'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model FailoverDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
}

model FailoverDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model FailoverDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: FailoverDiskReplicaGroupResponseBody(name='body'),
}

async function failoverDiskReplicaGroup(request: FailoverDiskReplicaGroupRequest): FailoverDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FailoverDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model FailoverDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model FailoverDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model FailoverDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: FailoverDiskReplicaPairResponseBody(name='body'),
}

async function failoverDiskReplicaPair(request: FailoverDiskReplicaPairRequest): FailoverDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FailoverDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  RPO?: long(name='RPO', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
}

model ModifyDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ModifyDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDiskReplicaGroupResponseBody(name='body'),
}

async function modifyDiskReplicaGroup(request: ModifyDiskReplicaGroupRequest): ModifyDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDiskReplicaPairRequest {
  bandwidth?: long(name='Bandwidth', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  pairName?: string(name='PairName', position='Query'),
  RPO?: long(name='RPO', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model ModifyDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ModifyDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDiskReplicaPairResponseBody(name='body'),
}

async function modifyDiskReplicaPair(request: ModifyDiskReplicaPairRequest): ModifyDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model RemoveDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model RemoveDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RemoveDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDiskReplicaPairResponseBody(name='body'),
}

async function removeDiskReplicaPair(request: RemoveDiskReplicaPairRequest): RemoveDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model ReprotectDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', description='用户选择的新生产Region，必须与SourceZoneId成对出现。不指定则默认是反向。', position='Query'),
  sourceZoneId?: string(name='SourceZoneId', description='用户选择的新生产可用区，必须与SourceRegionId成对出现。不指定则默认是反向。', position='Query'),
}

model ReprotectDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ReprotectDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ReprotectDiskReplicaGroupResponseBody(name='body'),
}

async function reprotectDiskReplicaGroup(request: ReprotectDiskReplicaGroupRequest): ReprotectDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReprotectDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model ReprotectDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model ReprotectDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ReprotectDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: ReprotectDiskReplicaPairResponseBody(name='body'),
}

async function reprotectDiskReplicaPair(request: ReprotectDiskReplicaPairRequest): ReprotectDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReprotectDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model StartDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  oneShot?: boolean(name='OneShot', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
}

model StartDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StartDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: StartDiskReplicaGroupResponseBody(name='body'),
}

async function startDiskReplicaGroup(request: StartDiskReplicaGroupRequest): StartDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model StartDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  oneShot?: boolean(name='OneShot', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model StartDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StartDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: StartDiskReplicaPairResponseBody(name='body'),
}

async function startDiskReplicaPair(request: StartDiskReplicaPairRequest): StartDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model StopDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
}

model StopDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: StopDiskReplicaGroupResponseBody(name='body'),
}

async function stopDiskReplicaGroup(request: StopDiskReplicaGroupRequest): StopDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model StopDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model StopDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: StopDiskReplicaPairResponseBody(name='body'),
}

async function stopDiskReplicaPair(request: StopDiskReplicaPairRequest): StopDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

