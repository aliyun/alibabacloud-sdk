/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ebs';
  @version = '2021-07-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model AddDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: AddDiskReplicaPairResponseBody(name='body'),
}

async function addDiskReplicaPair(request: AddDiskReplicaPairRequest): AddDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model ApplyDiskSecondLevelMonitorRequest {
  diskIds?: [ string ](name='DiskIds', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ApplyDiskSecondLevelMonitorResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ApplyDiskSecondLevelMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyDiskSecondLevelMonitorResponseBody(name='body'),
}

async function applyDiskSecondLevelMonitor(request: ApplyDiskSecondLevelMonitorRequest): ApplyDiskSecondLevelMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyDiskSecondLevelMonitor', 'POST', '/', 'json', false, 'json', request);
}

model ApplySecondLevelMonitorRequest {
}

model ApplySecondLevelMonitorResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ApplySecondLevelMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: ApplySecondLevelMonitorResponseBody(name='body'),
}

async function applySecondLevelMonitor(request: ApplySecondLevelMonitorRequest): ApplySecondLevelMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplySecondLevelMonitor', 'POST', '/', 'json', false, 'json', request);
}

model CancelDiskSecondLevelMonitorRequest {
  diskIds?: [ string ](name='DiskIds', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model CancelDiskSecondLevelMonitorResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CancelDiskSecondLevelMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: CancelDiskSecondLevelMonitorResponseBody(name='body'),
}

async function cancelDiskSecondLevelMonitor(request: CancelDiskSecondLevelMonitorRequest): CancelDiskSecondLevelMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelDiskSecondLevelMonitor', 'POST', '/', 'json', false, 'json', request);
}

model CancelSecondLevelMonitorRequest {
}

model CancelSecondLevelMonitorResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CancelSecondLevelMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: CancelSecondLevelMonitorResponseBody(name='body'),
}

async function cancelSecondLevelMonitor(request: CancelSecondLevelMonitorRequest): CancelSecondLevelMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelSecondLevelMonitor', 'POST', '/', 'json', false, 'json', request);
}

model CreateDbscRequest {
  azone: string(name='Azone', position='Query'),
  capacity: long(name='Capacity', minimum=71680, maximum=2359296, position='Query'),
  dbscId: string(name='DbscId', position='Query'),
  dbscName: string(name='DbscName', position='Query'),
  ioType: string(name='IoType', position='Query'),
  performanceLevel: string(name='PerformanceLevel', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model CreateDbscResponseBody = {
  dbscId?: string(name='DbscId'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateDbscResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDbscResponseBody(name='body'),
}

async function createDbsc(request: CreateDbscRequest): CreateDbscResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDbsc', 'POST', '/', 'json', false, 'json', request);
}

model CreateDedicatedBlockStorageClusterRequest {
  azone: string(name='Azone', position='Query'),
  capacity: long(name='Capacity', minimum=71680, maximum=2359296, position='Query'),
  dbscId: string(name='DbscId', position='Query'),
  dbscName: string(name='DbscName', position='Query'),
  ioType: string(name='IoType', position='Query'),
  performanceLevel: string(name='PerformanceLevel', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model CreateDedicatedBlockStorageClusterResponseBody = {
  dbscId?: string(name='DbscId', description='Id of the dbsc'),
  orderId?: string(name='OrderId', description='Id of the order'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateDedicatedBlockStorageClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedBlockStorageClusterResponseBody(name='body'),
}

async function createDedicatedBlockStorageCluster(request: CreateDedicatedBlockStorageClusterRequest): CreateDedicatedBlockStorageClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDedicatedBlockStorageCluster', 'POST', '/', 'json', false, 'json', request);
}

model CreateDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  destinationRegionId: string(name='DestinationRegionId', position='Query'),
  destinationZoneId: string(name='DestinationZoneId', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  RPO?: long(name='RPO', position='Query'),
  sourceRegionId: string(name='SourceRegionId', position='Query'),
  sourceZoneId: string(name='SourceZoneId', position='Query'),
}

model CreateDiskReplicaGroupResponseBody = {
  replicaGroupId?: string(name='ReplicaGroupId'),
  requestId?: string(name='RequestId'),
}

model CreateDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDiskReplicaGroupResponseBody(name='body'),
}

async function createDiskReplicaGroup(request: CreateDiskReplicaGroupRequest): CreateDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateDiskReplicaPairRequest {
  bandwidth?: long(name='Bandwidth', position='Query'),
  chargeType?: string(name='ChargeType', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  destinationDiskId: string(name='DestinationDiskId', position='Query'),
  destinationRegionId: string(name='DestinationRegionId', position='Query'),
  destinationZoneId?: string(name='DestinationZoneId', position='Query'),
  diskId: string(name='DiskId', position='Query'),
  pairName?: string(name='PairName', position='Query'),
  period?: long(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  sourceRegionId: string(name='SourceRegionId', position='Query'),
  sourceZoneId?: string(name='SourceZoneId', position='Query'),
}

model CreateDiskReplicaPairResponseBody = {
  orderId?: string(name='OrderId'),
  replicaPairId?: string(name='ReplicaPairId'),
  requestId?: string(name='RequestId'),
}

model CreateDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDiskReplicaPairResponseBody(name='body'),
}

async function createDiskReplicaPair(request: CreateDiskReplicaPairRequest): CreateDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model CreateReplicaPairRequest {
  regionId: string(name='RegionId', position='Query'),
}

model CreateReplicaPairResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: CreateReplicaPairResponseBody(name='body'),
}

async function createReplicaPair(request: CreateReplicaPairRequest): CreateReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
}

model DeleteDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDiskReplicaGroupResponseBody(name='body'),
}

async function deleteDiskReplicaGroup(request: DeleteDiskReplicaGroupRequest): DeleteDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model DeleteDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDiskReplicaPairResponseBody(name='body'),
}

async function deleteDiskReplicaPair(request: DeleteDiskReplicaPairRequest): DeleteDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDbscRequest {
  maxResults?: long(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeDbscResponseBody = {
  nextToken?: string(name='NextToken'),
  replicaPairs?: [ 
    {
      dbscId?: string(name='DbscId'),
      dbscName?: string(name='DbscName'),
      description?: string(name='Description'),
      region?: string(name='Region'),
      status?: string(name='Status'),
    }
  ](name='ReplicaPairs'),
  requestId?: string(name='RequestId'),
}

model DescribeDbscResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDbscResponseBody(name='body'),
}

async function describeDbsc(request: DescribeDbscRequest): DescribeDbscResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDbsc', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDbscInstanceRequest {
  azone: string(name='Azone', position='Query'),
  dbscId: string(name='DbscId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeDbscInstanceResponseBody = {
  dbsc?: {
    capacity?: long(name='Capacity', description='capacity of the dbsc'),
    cluster?: string(name='Cluster', description='cluster of the dbsc'),
    dbscId?: string(name='DbscId', description='Id of the dbsc'),
    dbscName?: string(name='DbscName', description='name of the dbsc'),
    deployStatus?: string(name='DeployStatus', description='deployStatus of the dbsc'),
    freeSize?: long(name='FreeSize', description='freeSize of the dbsc'),
    ioType?: string(name='IoType', description='ioType of the dbsc'),
    performanceLevel?: string(name='PerformanceLevel', description='performanceLevel of the dbsc'),
    serverCount?: long(name='ServerCount', description='serverCount of the dbsc'),
    soldRatio?: double(name='SoldRatio', description='soldRatio of the dbsc'),
    soldSize?: long(name='SoldSize', description='soldSize of the dbsc'),
    status?: string(name='Status', description='status of the dbsc'),
  }(name='Dbsc'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeDbscInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDbscInstanceResponseBody(name='body'),
}

async function describeDbscInstance(request: DescribeDbscInstanceRequest): DescribeDbscInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDbscInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDbscInstanceStatusRequest {
  dbscId: string(name='DbscId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeDbscInstanceStatusResponseBody = {
  dbscInstanceStatus?: {
    clusterName?: string(name='ClusterName'),
    clusterOpsStatus?: string(name='ClusterOpsStatus'),
    dbscId?: string(name='DbscId'),
    deployStatus?: string(name='DeployStatus'),
    freeSize?: long(name='FreeSize'),
    serverCount?: long(name='ServerCount'),
    soldRatio?: double(name='SoldRatio'),
    soldSize?: long(name='SoldSize'),
    totalSize?: long(name='TotalSize'),
  }(name='DbscInstanceStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeDbscInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDbscInstanceStatusResponseBody(name='body'),
}

async function describeDbscInstanceStatus(request: DescribeDbscInstanceStatusRequest): DescribeDbscInstanceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDbscInstanceStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedBlockStorageClusterInstanceStatusRequest {
  dbscId: string(name='DbscId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeDedicatedBlockStorageClusterInstanceStatusResponseBody = {
  dbscInstanceStatus?: {
    clusterName?: string(name='ClusterName', description='cluster name of the dbsc'),
    clusterOpsStatus?: string(name='ClusterOpsStatus', description='status of health'),
    dbscId?: string(name='DbscId', description='Id of the dbsc'),
    deployStatus?: string(name='DeployStatus', description='deploy status of the dbsc'),
    freeSize?: long(name='FreeSize', description='free size of the dbsc'),
    serverCount?: long(name='ServerCount', description='server count of the dbsc'),
    soldRatio?: double(name='SoldRatio', description='sold ratio of the dbsc'),
    soldSize?: long(name='SoldSize', description='sold size of the dbsc'),
    totalSize?: long(name='TotalSize', description='capacity of the dbsc'),
  }(name='DbscInstanceStatus'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeDedicatedBlockStorageClusterInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedBlockStorageClusterInstanceStatusResponseBody(name='body'),
}

async function describeDedicatedBlockStorageClusterInstanceStatus(request: DescribeDedicatedBlockStorageClusterInstanceStatusRequest): DescribeDedicatedBlockStorageClusterInstanceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedBlockStorageClusterInstanceStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedBlockStorageClustersRequest {
  maxResults?: long(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeDedicatedBlockStorageClustersResponseBody = {
  dedicatedBlockStorageClusters?: [ 
    {
      azone?: string(name='Azone'),
      capacity?: long(name='Capacity'),
      dbscId?: string(name='DbscId'),
      dbscName?: string(name='DbscName'),
      ioType?: string(name='IoType'),
      performanceLevel?: string(name='PerformanceLevel'),
      region?: string(name='Region'),
      status?: string(name='Status'),
    }
  ](name='DedicatedBlockStorageClusters'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeDedicatedBlockStorageClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedBlockStorageClustersResponseBody(name='body'),
}

async function describeDedicatedBlockStorageClusters(request: DescribeDedicatedBlockStorageClustersRequest): DescribeDedicatedBlockStorageClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedBlockStorageClusters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiskEventsRequest {
  diskCategory?: string(name='DiskCategory', position='Query'),
  diskId?: string(name='DiskId', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  maxResults?: long(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  type?: string(name='Type', position='Query'),
}

model DescribeDiskEventsResponseBody = {
  diskEvents?: [ 
    {
      description?: string(name='Description'),
      diskId?: string(name='DiskId'),
      recommandAction?: string(name='RecommandAction'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      timestamp?: string(name='Timestamp'),
      type?: string(name='Type'),
    }
  ](name='DiskEvents'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDiskEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiskEventsResponseBody(name='body'),
}

async function describeDiskEvents(request: DescribeDiskEventsRequest): DescribeDiskEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiskEvents', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiskReplicaGroupsRequest {
  groupIds?: string(name='GroupIds', position='Query'),
  maxResults?: long(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeDiskReplicaGroupsResponseBody = {
  nextToken?: string(name='NextToken'),
  replicaGroups?: [ 
    {
      bandwidth?: long(name='Bandwidth'),
      description?: string(name='Description'),
      destinationRegionId?: string(name='DestinationRegionId'),
      destinationZoneId?: string(name='DestinationZoneId'),
      groupName?: string(name='GroupName'),
      lastRPO?: long(name='LastRPO'),
      pairIds?: [ bytes ](name='PairIds'),
      RPO?: long(name='RPO'),
      replicaGroupId?: string(name='ReplicaGroupId'),
      sourceRegionId?: string(name='SourceRegionId'),
      sourceZoneId?: string(name='SourceZoneId'),
      status?: string(name='Status'),
    }
  ](name='ReplicaGroups'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeDiskReplicaGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiskReplicaGroupsResponseBody(name='body'),
}

async function describeDiskReplicaGroups(request: DescribeDiskReplicaGroupsRequest): DescribeDiskReplicaGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiskReplicaGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiskReplicaPairStatusRequest {
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeDiskReplicaPairStatusResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ string ](name='data'),
}

model DescribeDiskReplicaPairStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiskReplicaPairStatusResponseBody(name='body'),
}

async function describeDiskReplicaPairStatus(request: DescribeDiskReplicaPairStatusRequest): DescribeDiskReplicaPairStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiskReplicaPairStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiskReplicaPairsRequest {
  maxResults?: long(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  pairIds?: string(name='PairIds', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeDiskReplicaPairsResponseBody = {
  nextToken?: string(name='NextToken'),
  replicaPairs?: [ 
    {
      asyncCycle?: long(name='AsyncCycle'),
      bandwidth?: long(name='Bandwidth'),
      description?: string(name='Description'),
      destinationDiskId?: string(name='DestinationDiskId'),
      destinationRegion?: string(name='DestinationRegion'),
      lastRPO?: long(name='LastRPO'),
      pairName?: string(name='PairName'),
      replicaPairId?: string(name='ReplicaPairId'),
      sourceDiskId?: string(name='SourceDiskId'),
      sourceRegion?: string(name='SourceRegion'),
      status?: string(name='Status'),
      statusMessage?: string(name='StatusMessage'),
    }
  ](name='ReplicaPairs'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeDiskReplicaPairsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiskReplicaPairsResponseBody(name='body'),
}

async function describeDiskReplicaPairs(request: DescribeDiskReplicaPairsRequest): DescribeDiskReplicaPairsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiskReplicaPairs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiskSecondLevelMonitorRequest {
  diskId?: string(name='DiskId', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  period?: long(name='Period', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDiskSecondLevelMonitorResponseBody = {
  monitorData?: [ 
    {
      BPSPercent?: long(name='BPSPercent'),
      diskId?: string(name='DiskId'),
      IOPSPercent?: long(name='IOPSPercent'),
      readBPS?: long(name='ReadBPS'),
      readIOPS?: long(name='ReadIOPS'),
      timestamp?: string(name='Timestamp'),
      writeBPS?: long(name='WriteBPS'),
      writeIOPS?: long(name='WriteIOPS'),
    }
  ](name='MonitorData'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDiskSecondLevelMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiskSecondLevelMonitorResponseBody(name='body'),
}

async function describeDiskSecondLevelMonitor(request: DescribeDiskSecondLevelMonitorRequest): DescribeDiskSecondLevelMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiskSecondLevelMonitor', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDisksRequest {
  regionId?: string(name='RegionId', position='Query'),
  searchKey?: string(name='SearchKey', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model DescribeDisksResponseBody = {
  disks?: {
    disk?: [ 
      {
        diskId?: string(name='DiskId'),
        showName?: string(name='ShowName'),
      }
    ](name='Disk'),
  }(name='Disks'),
  requestId?: string(name='RequestId'),
}

model DescribeDisksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDisksResponseBody(name='body'),
}

async function describeDisks(request: DescribeDisksRequest): DescribeDisksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDisks', 'GET', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceType?: string(name='ResourceType', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
      zones?: [ 
        {
          localName?: string(name='LocalName'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='Zones'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeReplicaPairsRequest {
  maxResults?: long(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeReplicaPairsResponseBody = {
  diskReplicaPairs?: [ 
    {
      description?: string(name='Description'),
      destinationDiskId?: string(name='DestinationDiskId'),
      destinationRegion?: string(name='DestinationRegion'),
      pairName?: string(name='PairName'),
      replicaPairId?: string(name='ReplicaPairId'),
      sourceDiskId?: string(name='SourceDiskId'),
      sourceRegion?: string(name='SourceRegion'),
      status?: string(name='Status'),
    }
  ](name='DiskReplicaPairs'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeReplicaPairsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeReplicaPairsResponseBody(name='body'),
}

async function describeReplicaPairs(request: DescribeReplicaPairsRequest): DescribeReplicaPairsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeReplicaPairs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecondMonitorServiceStatusRequest {
}

model DescribeSecondMonitorServiceStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  status?: string(name='Status', description='Status of service'),
}

model DescribeSecondMonitorServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecondMonitorServiceStatusResponseBody(name='body'),
}

async function describeSecondMonitorServiceStatus(request: DescribeSecondMonitorServiceStatusRequest): DescribeSecondMonitorServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecondMonitorServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model FailoverDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
}

model FailoverDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model FailoverDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: FailoverDiskReplicaGroupResponseBody(name='body'),
}

async function failoverDiskReplicaGroup(request: FailoverDiskReplicaGroupRequest): FailoverDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FailoverDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model FailoverDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model FailoverDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model FailoverDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: FailoverDiskReplicaPairResponseBody(name='body'),
}

async function failoverDiskReplicaPair(request: FailoverDiskReplicaPairRequest): FailoverDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FailoverDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  RPO?: long(name='RPO', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
}

model ModifyDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ModifyDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDiskReplicaGroupResponseBody(name='body'),
}

async function modifyDiskReplicaGroup(request: ModifyDiskReplicaGroupRequest): ModifyDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  pairName?: string(name='PairName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model ModifyDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ModifyDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDiskReplicaPairResponseBody(name='body'),
}

async function modifyDiskReplicaPair(request: ModifyDiskReplicaPairRequest): ModifyDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model ModifyReplicaPairRequest {
  description?: string(name='Description', position='Query'),
  pairName?: string(name='PairName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model ModifyReplicaPairResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyReplicaPairResponseBody(name='body'),
}

async function modifyReplicaPair(request: ModifyReplicaPairRequest): ModifyReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model RemoveDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model RemoveDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RemoveDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDiskReplicaPairResponseBody(name='body'),
}

async function removeDiskReplicaPair(request: RemoveDiskReplicaPairRequest): RemoveDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model ReprotectDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', description='用户选择的新生产Region，必须与SourceZoneId成对出现。不指定则默认是反向。', position='Query'),
  sourceZoneId?: string(name='SourceZoneId', description='用户选择的新生产可用区，必须与SourceRegionId成对出现。不指定则默认是反向。', position='Query'),
}

model ReprotectDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ReprotectDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ReprotectDiskReplicaGroupResponseBody(name='body'),
}

async function reprotectDiskReplicaGroup(request: ReprotectDiskReplicaGroupRequest): ReprotectDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReprotectDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model ReprotectDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model ReprotectDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ReprotectDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: ReprotectDiskReplicaPairResponseBody(name='body'),
}

async function reprotectDiskReplicaPair(request: ReprotectDiskReplicaPairRequest): ReprotectDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReprotectDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model StartDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  oneShot?: boolean(name='OneShot', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
}

model StartDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StartDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: StartDiskReplicaGroupResponseBody(name='body'),
}

async function startDiskReplicaGroup(request: StartDiskReplicaGroupRequest): StartDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model StartDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model StartDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StartDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: StartDiskReplicaPairResponseBody(name='body'),
}

async function startDiskReplicaPair(request: StartDiskReplicaPairRequest): StartDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model StopDiskReplicaGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaGroupId: string(name='ReplicaGroupId', position='Query'),
}

model StopDiskReplicaGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopDiskReplicaGroupResponse = {
  headers: map[string]string(name='headers'),
  body: StopDiskReplicaGroupResponseBody(name='body'),
}

async function stopDiskReplicaGroup(request: StopDiskReplicaGroupRequest): StopDiskReplicaGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDiskReplicaGroup', 'POST', '/', 'json', false, 'json', request);
}

model StopDiskReplicaPairRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  replicaPairId: string(name='ReplicaPairId', position='Query'),
}

model StopDiskReplicaPairResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopDiskReplicaPairResponse = {
  headers: map[string]string(name='headers'),
  body: StopDiskReplicaPairResponseBody(name='body'),
}

async function stopDiskReplicaPair(request: StopDiskReplicaPairRequest): StopDiskReplicaPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDiskReplicaPair', 'POST', '/', 'json', false, 'json', request);
}

model TestDescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceType?: string(name='ResourceType', position='Query'),
}

model TestDescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
      zones?: [ 
        {
          localName?: string(name='LocalName'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='Zones'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId'),
}

model TestDescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: TestDescribeRegionsResponseBody(name='body'),
}

async function testDescribeRegions(request: TestDescribeRegionsRequest): TestDescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TestDescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

