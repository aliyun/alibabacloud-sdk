import OSS;
import OpenPlatform;
import RPCUtil;
import OSSUtil;
import Util;
import Credential;
import FileForm;

type @endpoint = string
type @regionId = string
type @protocol = string
type @userAgent = string
type @endpointType = string
type @readTimeout = number
type @connectTimeout = number
type @httpProxy = string
type @httpsProxy = string
type @socks5Proxy = string
type @socks5NetWork = string
type @noProxy = string
type @maxIdleConns = number
type @openPlatformEndpoint = string
type @credential = Credential

model Config {
  accessKeyId?: string,
  accessKeySecret?: string,
  type?: string,
  securityToken?: string,
  endpoint: string,
  protocol?: string,
  regionId: string,
  userAgent?: string,
  readTimeout?: number,
  connectTimeout?: number,
  httpProxy?: string,
  httpsProxy?: string,
  noProxy?: string,
  socks5Proxy?: string,
  socks5NetWork?: string,
  maxIdleConns?: number,
  endpointType?: string,
  openPlatformEndpoint?: string,
}

init(config: Config){
  if (Util.isUnset(config)) {
    throw {
      name = "ParameterMissing",
      message = "'config' can not be unset"
    };
  }

  if (Util.empty(config.regionId)) {
    throw {
      name = "ParameterMissing",
      message = "'config.regionId' can not be empty"
    };
  }

  if (Util.empty(config.endpoint)) {
    throw {
      name = "ParameterMissing",
      message = "'config.endpoint' can not be empty"
    };
  }

  if (Util.empty(config.type)) {
    config.type = 'access_key';
  }
  var credentialConfig = new Credential.Config{
    accessKeyId =  config.accessKeyId,
    type = config.type,
    accessKeySecret =  config.accessKeySecret,
    securityToken = config.securityToken,
  };
  @credential = new Credential(credentialConfig);
  @endpoint = config.endpoint;
  @protocol = config.protocol;
  @regionId = config.regionId;
  @userAgent = config.userAgent;
  @readTimeout = config.readTimeout;
  @connectTimeout = config.connectTimeout;
  @httpProxy = config.httpProxy;
  @httpsProxy = config.httpsProxy;
  @noProxy = config.noProxy;
  @socks5Proxy = config.socks5Proxy;
  @socks5NetWork = config.socks5NetWork;
  @maxIdleConns = config.maxIdleConns;
  @endpointType = config.endpointType;
  @openPlatformEndpoint = config.openPlatformEndpoint;
}

api _request(action: string, protocol: string, method: string, request: object, runtime: Util.RuntimeOptions): object {
  __request.protocol = Util.defaultString(@protocol, protocol);
  __request.method = method;
  __request.pathname = '/';
  var accessKeyId = getAccessKeyId();
  var accessKeySecret = getAccessKeySecret();
  __request.query = RPCUtil.query({
    Action = action,
    Format = 'json',
    RegionId = @regionId,
    Timestamp = RPCUtil.getTimestamp(),
    Version = '2019-09-30',
    SignatureMethod = 'HMAC-SHA1',
    SignatureVersion = '1.0',
    SignatureNonce = Util.getNonce(),
    AccessKeyId = accessKeyId,
    ...request,
  });
  __request.headers = {
    host = RPCUtil.getHost('imagerecog', @regionId, @endpoint),
    user-agent = getUserAgent(),
  };
  __request.query.Signature = RPCUtil.getSignature(__request, accessKeySecret);
} returns {
  var obj = Util.readAsJSON(__response.body);
  var body = Util.assertAsMap(obj);
  if (Util.is4xx(__response.statusCode) || Util.is5xx(__response.statusCode)) {
  throw {
      message = body.Message,
      data = body,
      code = body.Code,
    }
  }
  return body;
} runtime {
  timeouted = 'retry',
  readTimeout = Util.defaultNumber(runtime.readTimeout, @readTimeout),
  connectTimeout = Util.defaultNumber(runtime.connectTimeout, @connectTimeout),
  httpProxy = Util.defaultString(runtime.httpProxy, @httpProxy),
  httpsProxy = Util.defaultString(runtime.httpsProxy, @httpsProxy),
  noProxy = Util.defaultString(runtime.noProxy, @noProxy),
  maxIdleConns = Util.defaultNumber(runtime.maxIdleConns, @maxIdleConns),
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 3)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

model RecognizeLogoRequest = {
  tasks: [
    {
      imageURL: string(name='ImageURL', description='imageUrl'),
    }
  ](name='Tasks', description='tasks'),
}

model RecognizeLogoResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    elements: [
      {
        taskId: string(name='TaskId', description='taskId'),
        imageURL: string(name='ImageURL', description='imageUrl'),
        results: [
          {
            label: string(name='Label', description='label'),
            suggestion: string(name='Suggestion', description='suggestion'),
            rate: float(name='Rate', description='rate'),
            logosData: [
              {
                name: string(name='Name', description='name'),
                type: string(name='Type', description='type'),
                x: float(name='X', description='x'),
                y: float(name='Y', description='y'),
                h: float(name='H', description='h'),
                w: float(name='W', description='w'),
              }
            ](name='LogosData', description='LogosData'),
          }
        ](name='Results', description='results'),
      }
    ](name='Elements', description='elements'),
  }(name='Data', description='data'),
}

async function recognizeLogo(request: RecognizeLogoRequest, runtime: Util.RuntimeOptions): RecognizeLogoResponse {
  return _request('RecognizeLogo', 'HTTPS', 'POST', request, runtime);
}

model TaggingImageRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model TaggingImageResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    tags: [
      {
        confidence: float(name='Confidence', description='confidence'),
        value: string(name='Value', description='value'),
      }
    ](name='Tags', description='tags'),
  }(name='Data', description='data'),
}

async function taggingImage(request: TaggingImageRequest, runtime: Util.RuntimeOptions): TaggingImageResponse {
  return _request('TaggingImage', 'HTTPS', 'POST', request, runtime);
}

model TaggingImageAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function taggingImageAdvance(request: TaggingImageAdvanceRequest, runtime: Util.RuntimeOptions): TaggingImageResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new OpenPlatform.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imagerecog',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var taggingImagereq = new TaggingImageRequest{};
  RPCUtil.convert(request, taggingImagereq);
  taggingImagereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var taggingImageResp = taggingImage(taggingImagereq, runtime);
  return taggingImageResp;
}

model RecognizeSceneRequest = {
  imageURL: string(name='ImageURL', description='imageUrl'),
}

model RecognizeSceneResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    tags: [
      {
        confidence: float(name='Confidence', description='confidence'),
        value: string(name='Value', description='value'),
      }
    ](name='Tags', description='tags'),
  }(name='Data', description='data'),
}

async function recognizeScene(request: RecognizeSceneRequest, runtime: Util.RuntimeOptions): RecognizeSceneResponse {
  return _request('RecognizeScene', 'HTTPS', 'POST', request, runtime);
}

model RecognizeSceneAdvanceRequest = {
  imageURLObject: readable(description='ImageURLObject', name='ImageURLObject'),
}

async function recognizeSceneAdvance(request: RecognizeSceneAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeSceneResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new OpenPlatform.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imagerecog',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeScenereq = new RecognizeSceneRequest{};
  RPCUtil.convert(request, recognizeScenereq);
  recognizeScenereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeSceneResp = recognizeScene(recognizeScenereq, runtime);
  return recognizeSceneResp;
}

model RecognizeImageColorRequest = {
  url: string(name='Url', description='url'),
  colorCount?: integer(name='ColorCount', description='colorCount'),
}

model RecognizeImageColorResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    colorTemplateList: [
      {
        color: string(name='Color', description='color'),
        label: string(name='Label', description='label'),
        percentage: float(name='Percentage', description='percentage'),
      }
    ](name='ColorTemplateList', description='colorTemplateList'),
  }(name='Data', description='data'),
}

async function recognizeImageColor(request: RecognizeImageColorRequest, runtime: Util.RuntimeOptions): RecognizeImageColorResponse {
  return _request('RecognizeImageColor', 'HTTPS', 'POST', request, runtime);
}

model RecognizeImageColorAdvanceRequest = {
  urlObject: readable(description='UrlObject', name='UrlObject'),
  colorCount?: integer(name='ColorCount', description='colorCount'),
}

async function recognizeImageColorAdvance(request: RecognizeImageColorAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeImageColorResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new OpenPlatform.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imagerecog',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.urlObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeImageColorreq = new RecognizeImageColorRequest{};
  RPCUtil.convert(request, recognizeImageColorreq);
  recognizeImageColorreq.url = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeImageColorResp = recognizeImageColor(recognizeImageColorreq, runtime);
  return recognizeImageColorResp;
}

model DetectImageElementsRequest = {
  url: string(name='Url', description='url'),
}

model DetectImageElementsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    elements: [
      {
        type: string(name='Type', description='type'),
        x: integer(name='X', description='x'),
        y: integer(name='Y', description='y'),
        width: integer(name='Width', description='width'),
        height: integer(name='Height', description='height'),
        score: float(name='Score', description='score'),
      }
    ](name='Elements', description='elements'),
  }(name='Data', description='data'),
}

async function detectImageElements(request: DetectImageElementsRequest, runtime: Util.RuntimeOptions): DetectImageElementsResponse {
  return _request('DetectImageElements', 'HTTPS', 'POST', request, runtime);
}

model DetectImageElementsAdvanceRequest = {
  urlObject: readable(description='UrlObject', name='UrlObject'),
}

async function detectImageElementsAdvance(request: DetectImageElementsAdvanceRequest, runtime: Util.RuntimeOptions): DetectImageElementsResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new OpenPlatform.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imagerecog',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.urlObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var detectImageElementsreq = new DetectImageElementsRequest{};
  RPCUtil.convert(request, detectImageElementsreq);
  detectImageElementsreq.url = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectImageElementsResp = detectImageElements(detectImageElementsreq, runtime);
  return detectImageElementsResp;
}

model RecognizeImageStyleRequest = {
  url: string(name='Url', description='url'),
}

model RecognizeImageStyleResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
  }(name='Data', description='data'),
}

async function recognizeImageStyle(request: RecognizeImageStyleRequest, runtime: Util.RuntimeOptions): RecognizeImageStyleResponse {
  return _request('RecognizeImageStyle', 'HTTPS', 'POST', request, runtime);
}

model RecognizeImageStyleAdvanceRequest = {
  urlObject: readable(description='UrlObject', name='UrlObject'),
}

async function recognizeImageStyleAdvance(request: RecognizeImageStyleAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeImageStyleResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new OpenPlatform.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imagerecog',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUpload(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.urlObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeImageStylereq = new RecognizeImageStyleRequest{};
  RPCUtil.convert(request, recognizeImageStylereq);
  recognizeImageStylereq.url = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeImageStyleResp = recognizeImageStyle(recognizeImageStylereq, runtime);
  return recognizeImageStyleResp;
}

function getUserAgent(): string {
  var userAgent = Util.getUserAgent(@userAgent);
  return userAgent;
}

async function getAccessKeyId(): string{
  if (Util.isUnset(@credential)) {
    return '';
  }
  var accessKeyId = @credential.getAccessKeyId();
  return accessKeyId;
}

async function getAccessKeySecret(): string{
  if (Util.isUnset(@credential)) {
    return '';
  }
  var secret = @credential.getAccessKeySecret();
  return secret;
}

