/**
 *
 */
import Credential;
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('imagerecog', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ClassifyingRubbishRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/imagerecog/ClassifyingRubbish/ClassifyingRubbish6.jpg'),
}

model ClassifyingRubbishAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/imagerecog/ClassifyingRubbish/ClassifyingRubbish6.jpg'),
}

model ClassifyingRubbishResponseBody = {
  data?: {
    elements?: [ 
      {
        category?: string(name='Category'),
        categoryScore?: float(name='CategoryScore', example='0.9406'),
        rubbish?: string(name='Rubbish'),
        rubbishScore?: float(name='RubbishScore', example='0.9406'),
      }
    ](name='Elements'),
    sensitive?: boolean(name='Sensitive', example='false'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='1619647E-92ED-5641-A1D9-F05C33FD294A'),
}

model ClassifyingRubbishResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ClassifyingRubbishResponseBody(name='body'),
}

/**
 * @param request ClassifyingRubbishRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ClassifyingRubbishResponse
 */
@context("classifyingRubbishWithContext")
async function classifyingRubbishWithOptions(request: ClassifyingRubbishRequest, runtime: $RuntimeOptions): ClassifyingRubbishResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ClassifyingRubbish',
    version = '2019-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request ClassifyingRubbishRequest
 * @return ClassifyingRubbishResponse
 */
async function classifyingRubbish(request: ClassifyingRubbishRequest): ClassifyingRubbishResponse {
  var runtime = new $RuntimeOptions{};
  return classifyingRubbishWithOptions(request, runtime);
}

async function classifyingRubbishAdvance(request: ClassifyingRubbishAdvanceRequest, runtime: $RuntimeOptions): ClassifyingRubbishResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'imagerecog',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var classifyingRubbishReq = new ClassifyingRubbishRequest{};
  OpenApiUtil.convert(request, classifyingRubbishReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    classifyingRubbishReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var classifyingRubbishResp = classifyingRubbishWithOptions(classifyingRubbishReq, runtime);
  return classifyingRubbishResp;
}

model DetectImageElementsRequest {
  url?: string(name='Url', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/imagerecog/DetectImageElements/DetectImageElements5.jpg'),
}

model DetectImageElementsAdvanceRequest {
  urlObject?: readable(name='Url', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/imagerecog/DetectImageElements/DetectImageElements5.jpg'),
}

model DetectImageElementsResponseBody = {
  data?: {
    elements?: [ 
      {
        height?: int32(name='Height', example='354'),
        score?: float(name='Score', example='0.997097373008728'),
        type?: string(name='Type', example='majorhuman'),
        width?: int32(name='Width', example='285'),
        x?: int32(name='X', example='287'),
        y?: int32(name='Y', example='78'),
      }
    ](name='Elements'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='7EE82437-AEC4-5AAF-819F-AB28C23EE0FC'),
}

model DetectImageElementsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectImageElementsResponseBody(name='body'),
}

/**
 * @param request DetectImageElementsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetectImageElementsResponse
 */
@context("detectImageElementsWithContext")
async function detectImageElementsWithOptions(request: DetectImageElementsRequest, runtime: $RuntimeOptions): DetectImageElementsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.url)) {
    body['Url'] = request.url;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DetectImageElements',
    version = '2019-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DetectImageElementsRequest
 * @return DetectImageElementsResponse
 */
async function detectImageElements(request: DetectImageElementsRequest): DetectImageElementsResponse {
  var runtime = new $RuntimeOptions{};
  return detectImageElementsWithOptions(request, runtime);
}

async function detectImageElementsAdvance(request: DetectImageElementsAdvanceRequest, runtime: $RuntimeOptions): DetectImageElementsResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'imagerecog',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var detectImageElementsReq = new DetectImageElementsRequest{};
  OpenApiUtil.convert(request, detectImageElementsReq);

  if(!$isNull(request.urlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.urlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    detectImageElementsReq.url = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var detectImageElementsResp = detectImageElementsWithOptions(detectImageElementsReq, runtime);
  return detectImageElementsResp;
}

model EvaluateCertificateQualityRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='https://viapi-doc.oss-cn-shanghai.aliyuncs.com/imagerecog/xxxxx.jpg'),
  type?: string(name='Type', description='This parameter is required.', example='BusinessLicense'),
}

model EvaluateCertificateQualityAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='https://viapi-doc.oss-cn-shanghai.aliyuncs.com/imagerecog/xxxxx.jpg'),
  type?: string(name='Type', description='This parameter is required.', example='BusinessLicense'),
}

model EvaluateCertificateQualityResponseBody = {
  data?: {
    elements?: [ 
      {
        pass?: string(name='Pass', example='false'),
        score?: string(name='Score', example='0.06514739990234375'),
        value?: string(name='Value', example='lackoffront'),
      }
    ](name='Elements'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='656318DC-3856-43E3-9147-859532721AD6'),
}

model EvaluateCertificateQualityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EvaluateCertificateQualityResponseBody(name='body'),
}

/**
 * @param request EvaluateCertificateQualityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EvaluateCertificateQualityResponse
 */
@context("evaluateCertificateQualityWithContext")
async function evaluateCertificateQualityWithOptions(request: EvaluateCertificateQualityRequest, runtime: $RuntimeOptions): EvaluateCertificateQualityResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  if (!$isNull(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EvaluateCertificateQuality',
    version = '2019-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request EvaluateCertificateQualityRequest
 * @return EvaluateCertificateQualityResponse
 */
async function evaluateCertificateQuality(request: EvaluateCertificateQualityRequest): EvaluateCertificateQualityResponse {
  var runtime = new $RuntimeOptions{};
  return evaluateCertificateQualityWithOptions(request, runtime);
}

async function evaluateCertificateQualityAdvance(request: EvaluateCertificateQualityAdvanceRequest, runtime: $RuntimeOptions): EvaluateCertificateQualityResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'imagerecog',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var evaluateCertificateQualityReq = new EvaluateCertificateQualityRequest{};
  OpenApiUtil.convert(request, evaluateCertificateQualityReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    evaluateCertificateQualityReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var evaluateCertificateQualityResp = evaluateCertificateQualityWithOptions(evaluateCertificateQualityReq, runtime);
  return evaluateCertificateQualityResp;
}

model GetAsyncJobResultRequest {
  jobId?: string(name='JobId', description='This parameter is required.', example='72CFDC08-3FEF-56AA-91E5-B14DE31C09C2'),
}

model GetAsyncJobResultResponseBody = {
  data?: {
    errorCode?: string(name='ErrorCode', example='InvalidParameter'),
    errorMessage?: string(name='ErrorMessage', example='paramsIllegal'),
    jobId?: string(name='JobId', example='72CFDC08-3FEF-56AA-91E5-B14DE31C09C2'),
    result?: string(name='Result', example='{\\\\"tags\\\\":[{\\\\"confidence\\\\":-1,\\\\"value\\\\":\\\\"{\\\\\\\\\\\\"tagInfo\\\\\\\\\\\\": {\\\\\\\\\\\\"humanInfo\\\\\\\\\\\\": [[{\\\\\\\\\\\\"category\\\\\\\\\\\\": \\\\\\\\\\\\"human-real-normal\\\\\\\\\\\\", \\\\\\\\\\\\"score\\\\\\\\\\\\": 0.9690580798778683, \\\\\\\\\\\\"bbox\\\\\\\\\\\\": [77, 280, 431, 569], \\\\\\\\\\\\"cloth_category\\\\\\\\\\\\": \\\\\\\\\\\\"modern\\\\\\\\\\\\", \\\\\\\\\\\\"cloth_category_score\\\\\\\\\\\\": 0.7393399477005005}]], \\\\\\\\\\\\"sceneInfo\\\\\\\\\\\\": [[{\\\\\\\\\\\\"category\\\\\\\\\\\\": \\\\\\\\\\\\"gamescreen-gameeffect\\\\\\\\\\\\", \\\\\\\\\\\\"score\\\\\\\\\\\\": 0.44200169294841274}]], \\\\\\\\\\\\"objectInfo\\\\\\\\\\\\": [null]}}\\\\"}]}'),
    status?: string(name='Status', example='PROCESS_SUCCESS'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='572974F0-1014-5C60-97EE-DBFFC0FF7616'),
}

model GetAsyncJobResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAsyncJobResultResponseBody(name='body'),
}

/**
 * @param request GetAsyncJobResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAsyncJobResultResponse
 */
@context("getAsyncJobResultWithContext")
async function getAsyncJobResultWithOptions(request: GetAsyncJobResultRequest, runtime: $RuntimeOptions): GetAsyncJobResultResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetAsyncJobResult',
    version = '2019-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request GetAsyncJobResultRequest
 * @return GetAsyncJobResultResponse
 */
async function getAsyncJobResult(request: GetAsyncJobResultRequest): GetAsyncJobResultResponse {
  var runtime = new $RuntimeOptions{};
  return getAsyncJobResultWithOptions(request, runtime);
}

model RecognizeFoodRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/imagerecog/RecognizeFood/RecognizeFood5.jpg'),
}

model RecognizeFoodAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/imagerecog/RecognizeFood/RecognizeFood5.jpg'),
}

model RecognizeFoodResponseBody = {
  data?: {
    topFives?: [ 
      {
        calorie?: string(name='Calorie', example='208'),
        category?: string(name='Category'),
        score?: float(name='Score', example='0.2083740234375'),
      }
    ](name='TopFives'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='4C2369C5-54E0-4B9F-8ACB-80C4F50AD2DB'),
}

model RecognizeFoodResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecognizeFoodResponseBody(name='body'),
}

/**
 * @summary 菜品识别
 *
 * @param request RecognizeFoodRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RecognizeFoodResponse
 */
@context("recognizeFoodWithContext")
async function recognizeFoodWithOptions(request: RecognizeFoodRequest, runtime: $RuntimeOptions): RecognizeFoodResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RecognizeFood',
    version = '2019-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 菜品识别
 *
 * @param request RecognizeFoodRequest
 * @return RecognizeFoodResponse
 */
async function recognizeFood(request: RecognizeFoodRequest): RecognizeFoodResponse {
  var runtime = new $RuntimeOptions{};
  return recognizeFoodWithOptions(request, runtime);
}

async function recognizeFoodAdvance(request: RecognizeFoodAdvanceRequest, runtime: $RuntimeOptions): RecognizeFoodResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'imagerecog',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var recognizeFoodReq = new RecognizeFoodRequest{};
  OpenApiUtil.convert(request, recognizeFoodReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    recognizeFoodReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var recognizeFoodResp = recognizeFoodWithOptions(recognizeFoodReq, runtime);
  return recognizeFoodResp;
}

model RecognizeImageColorRequest {
  colorCount?: int32(name='ColorCount', example='5'),
  url?: string(name='Url', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/imagerecog/RecognizeImageColor/RecognizeImageColor1.jpg'),
}

model RecognizeImageColorAdvanceRequest {
  colorCount?: int32(name='ColorCount', example='5'),
  urlObject?: readable(name='Url', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/imagerecog/RecognizeImageColor/RecognizeImageColor1.jpg'),
}

model RecognizeImageColorResponseBody = {
  data?: {
    colorTemplateList?: [ 
      {
        color?: string(name='Color', example='270315'),
        label?: string(name='Label', example='red'),
        percentage?: float(name='Percentage', example='0.459527'),
      }
    ](name='ColorTemplateList'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='CCC7C1D9-8C0F-58AD-ADE3-C331B83BD6F2'),
}

model RecognizeImageColorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecognizeImageColorResponseBody(name='body'),
}

/**
 * @param request RecognizeImageColorRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RecognizeImageColorResponse
 */
@context("recognizeImageColorWithContext")
async function recognizeImageColorWithOptions(request: RecognizeImageColorRequest, runtime: $RuntimeOptions): RecognizeImageColorResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.colorCount)) {
    body['ColorCount'] = request.colorCount;
  }
  if (!$isNull(request.url)) {
    body['Url'] = request.url;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RecognizeImageColor',
    version = '2019-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request RecognizeImageColorRequest
 * @return RecognizeImageColorResponse
 */
async function recognizeImageColor(request: RecognizeImageColorRequest): RecognizeImageColorResponse {
  var runtime = new $RuntimeOptions{};
  return recognizeImageColorWithOptions(request, runtime);
}

async function recognizeImageColorAdvance(request: RecognizeImageColorAdvanceRequest, runtime: $RuntimeOptions): RecognizeImageColorResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'imagerecog',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var recognizeImageColorReq = new RecognizeImageColorRequest{};
  OpenApiUtil.convert(request, recognizeImageColorReq);

  if(!$isNull(request.urlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.urlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    recognizeImageColorReq.url = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var recognizeImageColorResp = recognizeImageColorWithOptions(recognizeImageColorReq, runtime);
  return recognizeImageColorResp;
}

model RecognizeImageStyleRequest {
  url?: string(name='Url', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/imagerecog/RecognizeImageStyle/RecognizeImageStyle1.jpg'),
}

model RecognizeImageStyleAdvanceRequest {
  urlObject?: readable(name='Url', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/imagerecog/RecognizeImageStyle/RecognizeImageStyle1.jpg'),
}

model RecognizeImageStyleResponseBody = {
  data?: {
    styles?: [ string ](name='Styles'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='66FC3009-9A7A-4D29-8B70-D6EB256EF590'),
}

model RecognizeImageStyleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecognizeImageStyleResponseBody(name='body'),
}

/**
 * @param request RecognizeImageStyleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RecognizeImageStyleResponse
 */
@context("recognizeImageStyleWithContext")
async function recognizeImageStyleWithOptions(request: RecognizeImageStyleRequest, runtime: $RuntimeOptions): RecognizeImageStyleResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.url)) {
    body['Url'] = request.url;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RecognizeImageStyle',
    version = '2019-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request RecognizeImageStyleRequest
 * @return RecognizeImageStyleResponse
 */
async function recognizeImageStyle(request: RecognizeImageStyleRequest): RecognizeImageStyleResponse {
  var runtime = new $RuntimeOptions{};
  return recognizeImageStyleWithOptions(request, runtime);
}

async function recognizeImageStyleAdvance(request: RecognizeImageStyleAdvanceRequest, runtime: $RuntimeOptions): RecognizeImageStyleResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'imagerecog',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var recognizeImageStyleReq = new RecognizeImageStyleRequest{};
  OpenApiUtil.convert(request, recognizeImageStyleReq);

  if(!$isNull(request.urlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.urlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    recognizeImageStyleReq.url = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var recognizeImageStyleResp = recognizeImageStyleWithOptions(recognizeImageStyleReq, runtime);
  return recognizeImageStyleResp;
}

model RecognizeSceneRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/imagerecog/RecognizeScene/RecognizeScene1.jpg'),
}

model RecognizeSceneAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/imagerecog/RecognizeScene/RecognizeScene1.jpg'),
}

model RecognizeSceneResponseBody = {
  data?: {
    tags?: [ 
      {
        confidence?: float(name='Confidence', example='79'),
        value?: string(name='Value'),
      }
    ](name='Tags'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='AC79F887-5CCB-42BE-8AC3-4D455EFEDB94'),
}

model RecognizeSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecognizeSceneResponseBody(name='body'),
}

/**
 * @param request RecognizeSceneRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RecognizeSceneResponse
 */
@context("recognizeSceneWithContext")
async function recognizeSceneWithOptions(request: RecognizeSceneRequest, runtime: $RuntimeOptions): RecognizeSceneResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RecognizeScene',
    version = '2019-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request RecognizeSceneRequest
 * @return RecognizeSceneResponse
 */
async function recognizeScene(request: RecognizeSceneRequest): RecognizeSceneResponse {
  var runtime = new $RuntimeOptions{};
  return recognizeSceneWithOptions(request, runtime);
}

async function recognizeSceneAdvance(request: RecognizeSceneAdvanceRequest, runtime: $RuntimeOptions): RecognizeSceneResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'imagerecog',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var recognizeSceneReq = new RecognizeSceneRequest{};
  OpenApiUtil.convert(request, recognizeSceneReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    recognizeSceneReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var recognizeSceneResp = recognizeSceneWithOptions(recognizeSceneReq, runtime);
  return recognizeSceneResp;
}

model TaggingAdImageRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='https://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/DetectImageElements/xxxx.png'),
}

model TaggingAdImageAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='https://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/DetectImageElements/xxxx.png'),
}

model TaggingAdImageResponseBody = {
  data?: {
    tagInfo?: map[string]any(name='TagInfo'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='572974F0-1014-5C60-97EE-DBFFC0FF7616'),
}

model TaggingAdImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TaggingAdImageResponseBody(name='body'),
}

/**
 * @summary 广告素材分析
 *
 * @param request TaggingAdImageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TaggingAdImageResponse
 */
@context("taggingAdImageWithContext")
async function taggingAdImageWithOptions(request: TaggingAdImageRequest, runtime: $RuntimeOptions): TaggingAdImageResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'TaggingAdImage',
    version = '2019-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 广告素材分析
 *
 * @param request TaggingAdImageRequest
 * @return TaggingAdImageResponse
 */
async function taggingAdImage(request: TaggingAdImageRequest): TaggingAdImageResponse {
  var runtime = new $RuntimeOptions{};
  return taggingAdImageWithOptions(request, runtime);
}

async function taggingAdImageAdvance(request: TaggingAdImageAdvanceRequest, runtime: $RuntimeOptions): TaggingAdImageResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'imagerecog',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var taggingAdImageReq = new TaggingAdImageRequest{};
  OpenApiUtil.convert(request, taggingAdImageReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    taggingAdImageReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var taggingAdImageResp = taggingAdImageWithOptions(taggingAdImageReq, runtime);
  return taggingAdImageResp;
}

model TaggingImageRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/imagerecog/TaggingImage/TaggingImage1.jpg'),
}

model TaggingImageAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/imagerecog/TaggingImage/TaggingImage1.jpg'),
}

model TaggingImageResponseBody = {
  data?: {
    tags?: [ 
      {
        confidence?: float(name='Confidence', example='65'),
        value?: string(name='Value'),
      }
    ](name='Tags'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='70ED13B0-BC22-576D-9CCF-1CC12FEAC477'),
}

model TaggingImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TaggingImageResponseBody(name='body'),
}

/**
 * @param request TaggingImageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TaggingImageResponse
 */
@context("taggingImageWithContext")
async function taggingImageWithOptions(request: TaggingImageRequest, runtime: $RuntimeOptions): TaggingImageResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'TaggingImage',
    version = '2019-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request TaggingImageRequest
 * @return TaggingImageResponse
 */
async function taggingImage(request: TaggingImageRequest): TaggingImageResponse {
  var runtime = new $RuntimeOptions{};
  return taggingImageWithOptions(request, runtime);
}

async function taggingImageAdvance(request: TaggingImageAdvanceRequest, runtime: $RuntimeOptions): TaggingImageResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'imagerecog',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var taggingImageReq = new TaggingImageRequest{};
  OpenApiUtil.convert(request, taggingImageReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    taggingImageReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var taggingImageResp = taggingImageWithOptions(taggingImageReq, runtime);
  return taggingImageResp;
}

api _postOSSObject(bucketName: string, form: object): object {
  var boundary = $Form.getBoundary();
  __request.protocol = 'HTTPS';
  __request.method = 'POST';
  __request.pathname = `/`;
  __request.headers = {
    host = $string(form.host),
    date = OpenApiUtil.getDateUTCString(),
    user-agent = OpenApiUtil.getUserAgent(''),
  };
  __request.headers.content-type = `multipart/form-data; boundary=${boundary}`;
  __request.body = $Form.toFileForm(form, boundary);
} returns {
  var respMap : object = null;
  var bodyStr = $Stream.readAsString(__response.body);
  if ((__response.statusCode >= 400) && (__response.statusCode < 600)) {
    respMap = $XML.parseXml(bodyStr, null);
    var err = $object(respMap.Error);
    throw new OpenApi.Client{
      code = $string(err.Code),
      message = $string(err.Message),
      data = {
        httpCode = __response.statusCode,
        requestId = $string(err.RequestId),
        hostId = $string(err.HostId),
      }
    };
  }
  respMap = $XML.parseXml(bodyStr, null);
  return {
    ...respMap,
  };
}
