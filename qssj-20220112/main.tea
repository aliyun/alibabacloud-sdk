/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('qssj', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model GetAgeDistributionRequest {
  cateIds?: string(name='CateIds'),
}

model GetAgeDistributionResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      ageRange?: string(name='AgeRange'),
      saleNumbers?: long(name='SaleNumbers'),
      searchNumbers?: long(name='SearchNumbers'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: string(name='SuccessResponse'),
}

model GetAgeDistributionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAgeDistributionResponseBody(name='body'),
}

async function getAgeDistributionWithOptions(request: GetAgeDistributionRequest, runtime: Util.RuntimeOptions): GetAgeDistributionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cateIds)) {
    query['CateIds'] = request.cateIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAgeDistribution',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAgeDistribution(request: GetAgeDistributionRequest): GetAgeDistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAgeDistributionWithOptions(request, runtime);
}

model GetAllTrendCategoryResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      categoryId?: long(name='CategoryId'),
      categoryLevel?: int32(name='CategoryLevel'),
      categoryName?: string(name='CategoryName'),
      childCategory?: [ any ](name='ChildCategory'),
      superCategoryName?: string(name='SuperCategoryName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetAllTrendCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAllTrendCategoryResponseBody(name='body'),
}

async function getAllTrendCategoryWithOptions(runtime: Util.RuntimeOptions): GetAllTrendCategoryResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetAllTrendCategory',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAllTrendCategory(): GetAllTrendCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAllTrendCategoryWithOptions(runtime);
}

model GetCrowdLabelRequest {
  cateIds?: string(name='CateIds'),
}

model GetCrowdLabelResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      closingDate?: string(name='ClosingDate'),
      labelName?: string(name='LabelName'),
      orderAmount?: double(name='OrderAmount'),
      purchaseAmount?: double(name='PurchaseAmount'),
      searchVolume?: double(name='SearchVolume'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  successResponse?: string(name='SuccessResponse'),
}

model GetCrowdLabelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCrowdLabelResponseBody(name='body'),
}

async function getCrowdLabelWithOptions(request: GetCrowdLabelRequest, runtime: Util.RuntimeOptions): GetCrowdLabelResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.cateIds)) {
    body['CateIds'] = request.cateIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetCrowdLabel',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCrowdLabel(request: GetCrowdLabelRequest): GetCrowdLabelResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCrowdLabelWithOptions(request, runtime);
}

model GetCrowdReginRequest {
  cateIds?: string(name='CateIds'),
}

model GetCrowdReginResponseBody = {
  code?: string(name='Code'),
  data?: {
    saleNumbers?: [ 
      {
        name?: string(name='Name'),
        value?: long(name='Value'),
      }
    ](name='SaleNumbers'),
    searchNumbers?: [ 
      {
        name?: string(name='Name'),
        value?: long(name='Value'),
      }
    ](name='SearchNumbers'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetCrowdReginResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCrowdReginResponseBody(name='body'),
}

async function getCrowdReginWithOptions(request: GetCrowdReginRequest, runtime: Util.RuntimeOptions): GetCrowdReginResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cateIds)) {
    query['CateIds'] = request.cateIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCrowdRegin',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCrowdRegin(request: GetCrowdReginRequest): GetCrowdReginResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCrowdReginWithOptions(request, runtime);
}

model GetOpportunityMarketRequest {
  cateIds?: string(name='CateIds'),
  timeDisplay?: long(name='TimeDisplay'),
}

model GetOpportunityMarketResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      cateName?: string(name='CateName'),
      opportunityIndex?: double(name='OpportunityIndex'),
      relativeCommodity?: double(name='RelativeCommodity'),
      relativeDischarge?: double(name='RelativeDischarge'),
      timeUnit?: string(name='TimeUnit'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetOpportunityMarketResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOpportunityMarketResponseBody(name='body'),
}

async function getOpportunityMarketWithOptions(request: GetOpportunityMarketRequest, runtime: Util.RuntimeOptions): GetOpportunityMarketResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.cateIds)) {
    body['CateIds'] = request.cateIds;
  }
  if (!Util.isUnset(request.timeDisplay)) {
    body['TimeDisplay'] = request.timeDisplay;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetOpportunityMarket',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOpportunityMarket(request: GetOpportunityMarketRequest): GetOpportunityMarketResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOpportunityMarketWithOptions(request, runtime);
}

model GetPriceRangeRequest {
  cateIds?: string(name='CateIds'),
}

model GetPriceRangeResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      closingDate?: string(name='ClosingDate'),
      goodsSales?: long(name='GoodsSales'),
      priceRange?: string(name='PriceRange'),
      salesVolume?: double(name='SalesVolume'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  successResponse?: string(name='SuccessResponse'),
}

model GetPriceRangeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPriceRangeResponseBody(name='body'),
}

async function getPriceRangeWithOptions(request: GetPriceRangeRequest, runtime: Util.RuntimeOptions): GetPriceRangeResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.cateIds)) {
    body['CateIds'] = request.cateIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetPriceRange',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPriceRange(request: GetPriceRangeRequest): GetPriceRangeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPriceRangeWithOptions(request, runtime);
}

model GetSexRatioRequest {
  cateIds?: string(name='CateIds'),
}

model GetSexRatioResponseBody = {
  code?: string(name='Code'),
  data?: {
    saleNumbers?: [ 
      {
        name?: string(name='Name'),
        value?: long(name='Value'),
      }
    ](name='SaleNumbers'),
    searchNumbers?: [ 
      {
        name?: string(name='Name'),
        value?: long(name='Value'),
      }
    ](name='SearchNumbers'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: string(name='SuccessResponse'),
}

model GetSexRatioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSexRatioResponseBody(name='body'),
}

async function getSexRatioWithOptions(request: GetSexRatioRequest, runtime: Util.RuntimeOptions): GetSexRatioResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cateIds)) {
    query['CateIds'] = request.cateIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSexRatio',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSexRatio(request: GetSexRatioRequest): GetSexRatioResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSexRatioWithOptions(request, runtime);
}

model GetStoreSalesVolumeTopRequest {
  cateIds?: string(name='CateIds'),
}

model GetStoreSalesVolumeTopResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      shopName?: string(name='ShopName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetStoreSalesVolumeTopResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetStoreSalesVolumeTopResponseBody(name='body'),
}

async function getStoreSalesVolumeTopWithOptions(request: GetStoreSalesVolumeTopRequest, runtime: Util.RuntimeOptions): GetStoreSalesVolumeTopResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.cateIds)) {
    body['CateIds'] = request.cateIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetStoreSalesVolumeTop',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getStoreSalesVolumeTop(request: GetStoreSalesVolumeTopRequest): GetStoreSalesVolumeTopResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStoreSalesVolumeTopWithOptions(request, runtime);
}

model GetStoreSearchTopRequest {
  cateIds?: string(name='CateIds'),
}

model GetStoreSearchTopResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      shopName?: string(name='ShopName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetStoreSearchTopResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetStoreSearchTopResponseBody(name='body'),
}

async function getStoreSearchTopWithOptions(request: GetStoreSearchTopRequest, runtime: Util.RuntimeOptions): GetStoreSearchTopResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.cateIds)) {
    body['CateIds'] = request.cateIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetStoreSearchTop',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getStoreSearchTop(request: GetStoreSearchTopRequest): GetStoreSearchTopResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStoreSearchTopWithOptions(request, runtime);
}

model GetStyleTopRequest {
  cateIds?: string(name='CateIds', description='A short description of struct'),
  sortOrder?: long(name='SortOrder'),
  timeDisplay?: long(name='TimeDisplay'),
}

model GetStyleTopResponseBody = {
  code?: string(name='Code', description='Id of the request'),
  data?: [ 
    {
      cateName?: string(name='CateName'),
      color?: string(name='Color'),
      images?: [ string ](name='Images'),
      material?: string(name='Material'),
      productLink?: string(name='ProductLink'),
      salesVolume?: double(name='SalesVolume'),
      searchVolume?: double(name='SearchVolume'),
      style?: string(name='Style'),
      title?: string(name='Title'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  successResponse?: string(name='SuccessResponse'),
}

model GetStyleTopResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetStyleTopResponseBody(name='body'),
}

async function getStyleTopWithOptions(request: GetStyleTopRequest, runtime: Util.RuntimeOptions): GetStyleTopResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.cateIds)) {
    body['CateIds'] = request.cateIds;
  }
  if (!Util.isUnset(request.sortOrder)) {
    body['SortOrder'] = request.sortOrder;
  }
  if (!Util.isUnset(request.timeDisplay)) {
    body['TimeDisplay'] = request.timeDisplay;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetStyleTop',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getStyleTop(request: GetStyleTopRequest): GetStyleTopResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStyleTopWithOptions(request, runtime);
}

model GetTrendImageDetailRequest {
  aiImgId?: string(name='AiImgId'),
}

model GetTrendImageDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    aiImgId?: string(name='AiImgId'),
    aiImgUrl?: string(name='AiImgUrl'),
    multiPictUrl?: string(name='MultiPictUrl'),
    population?: string(name='Population'),
    priceMax?: long(name='PriceMax'),
    priceMin?: long(name='PriceMin'),
    similarGoods?: [ 
      {
        aiImgUrl?: string(name='AiImgUrl'),
        goodsSales?: long(name='GoodsSales'),
        searchVolume?: long(name='SearchVolume'),
      }
    ](name='SimilarGoods'),
    tags?: string(name='Tags'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetTrendImageDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTrendImageDetailResponseBody(name='body'),
}

async function getTrendImageDetailWithOptions(request: GetTrendImageDetailRequest, runtime: Util.RuntimeOptions): GetTrendImageDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aiImgId)) {
    query['AiImgId'] = request.aiImgId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTrendImageDetail',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTrendImageDetail(request: GetTrendImageDetailRequest): GetTrendImageDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTrendImageDetailWithOptions(request, runtime);
}

model GetTrendImageListRequest {
  cateIds?: string(name='CateIds'),
  query?: string(name='Query'),
}

model GetTrendImageListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      aiImgId?: string(name='AiImgId'),
      aiImgUrl?: string(name='AiImgUrl'),
      population?: string(name='Population'),
      priceMax?: long(name='PriceMax'),
      priceMin?: long(name='PriceMin'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetTrendImageListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTrendImageListResponseBody(name='body'),
}

async function getTrendImageListWithOptions(request: GetTrendImageListRequest, runtime: Util.RuntimeOptions): GetTrendImageListResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.cateIds)) {
    body['CateIds'] = request.cateIds;
  }
  if (!Util.isUnset(request.query)) {
    body['Query'] = request.query;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTrendImageList',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTrendImageList(request: GetTrendImageListRequest): GetTrendImageListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTrendImageListWithOptions(request, runtime);
}

model GetTrendIndexRequest {
  cateIds?: string(name='CateIds'),
  monthNum?: int32(name='MonthNum'),
}

model GetTrendIndexResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      brandIndex?: float(name='BrandIndex'),
      ECommerceIndex?: float(name='ECommerceIndex'),
      institutionalIndex?: float(name='InstitutionalIndex'),
      mediaIndex?: float(name='MediaIndex'),
      socialIndex?: float(name='SocialIndex'),
      yearMonth?: string(name='YearMonth'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetTrendIndexResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTrendIndexResponseBody(name='body'),
}

async function getTrendIndexWithOptions(request: GetTrendIndexRequest, runtime: Util.RuntimeOptions): GetTrendIndexResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.cateIds)) {
    body['CateIds'] = request.cateIds;
  }
  if (!Util.isUnset(request.monthNum)) {
    body['MonthNum'] = request.monthNum;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTrendIndex',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTrendIndex(request: GetTrendIndexRequest): GetTrendIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTrendIndexWithOptions(request, runtime);
}

model GetTrendSearchRecordRequest {
  key?: string(name='Key'),
}

model GetTrendSearchRecordResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      id?: long(name='Id'),
      queryKey?: string(name='QueryKey'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetTrendSearchRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTrendSearchRecordResponseBody(name='body'),
}

async function getTrendSearchRecordWithOptions(request: GetTrendSearchRecordRequest, runtime: Util.RuntimeOptions): GetTrendSearchRecordResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.key)) {
    body['Key'] = request.key;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTrendSearchRecord',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTrendSearchRecord(request: GetTrendSearchRecordRequest): GetTrendSearchRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTrendSearchRecordWithOptions(request, runtime);
}

model GetTrendStatisticRequest {
  cateIds?: string(name='CateIds'),
}

model GetTrendStatisticResponseBody = {
  code?: string(name='Code'),
  data?: {
    commodityCount?: long(name='CommodityCount'),
    sales?: double(name='Sales'),
    shopCount?: long(name='ShopCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetTrendStatisticResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTrendStatisticResponseBody(name='body'),
}

async function getTrendStatisticWithOptions(request: GetTrendStatisticRequest, runtime: Util.RuntimeOptions): GetTrendStatisticResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.cateIds)) {
    body['CateIds'] = request.cateIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTrendStatistic',
    version = '2022-01-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTrendStatistic(request: GetTrendStatisticRequest): GetTrendStatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTrendStatisticWithOptions(request, runtime);
}

