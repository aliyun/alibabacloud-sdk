/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'qssj';
  @version = '2022-01-12';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GetAgeDistributionRequest {
  cateIds: string(name='CateIds', position='Query'),
}

model GetAgeDistributionResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      ageRange?: string(name='AgeRange'),
      saleNumbers?: long(name='SaleNumbers'),
      searchNumbers?: long(name='SearchNumbers'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: string(name='SuccessResponse'),
}

model GetAgeDistributionResponse = {
  headers: map[string]string(name='headers'),
  body: GetAgeDistributionResponseBody(name='body'),
}

async function getAgeDistribution(request: GetAgeDistributionRequest): GetAgeDistributionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAgeDistribution', 'POST', '/', 'json', false, 'json', request);
}

model GetAllTrendCategoryRequest {
}

model GetAllTrendCategoryResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      categoryId?: long(name='CategoryId'),
      categoryLevel?: int32(name='CategoryLevel'),
      categoryName?: string(name='CategoryName'),
      childCategory?: [ any ](name='ChildCategory'),
      superCategoryName?: string(name='SuperCategoryName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetAllTrendCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllTrendCategoryResponseBody(name='body'),
}

async function getAllTrendCategory(request: GetAllTrendCategoryRequest): GetAllTrendCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAllTrendCategory', 'POST', '/', 'json', false, 'json', request);
}

model GetCrowdLabelRequest {
  cateIds: string(name='CateIds', position='Body'),
}

model GetCrowdLabelResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      closingDate?: string(name='ClosingDate'),
      labelName?: string(name='LabelName'),
      orderAmount?: double(name='OrderAmount'),
      purchaseAmount?: double(name='PurchaseAmount'),
      searchVolume?: double(name='SearchVolume'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  successResponse?: string(name='SuccessResponse'),
}

model GetCrowdLabelResponse = {
  headers: map[string]string(name='headers'),
  body: GetCrowdLabelResponseBody(name='body'),
}

async function getCrowdLabel(request: GetCrowdLabelRequest): GetCrowdLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCrowdLabel', 'POST', '/', 'json', true, 'form', request);
}

model GetCrowdReginRequest {
  cateIds: string(name='CateIds', position='Query'),
}

model GetCrowdReginResponseBody = {
  code?: string(name='Code'),
  data?: {
    saleNumbers?: [ 
      {
        name?: string(name='Name'),
        value?: long(name='Value'),
      }
    ](name='SaleNumbers'),
    searchNumbers?: [ 
      {
        name?: string(name='Name'),
        value?: long(name='Value'),
      }
    ](name='SearchNumbers'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetCrowdReginResponse = {
  headers: map[string]string(name='headers'),
  body: GetCrowdReginResponseBody(name='body'),
}

async function getCrowdRegin(request: GetCrowdReginRequest): GetCrowdReginResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCrowdRegin', 'POST', '/', 'json', false, 'json', request);
}

model GetOpportunityMarketRequest {
  cateIds: string(name='CateIds', position='Body'),
  timeDisplay: long(name='TimeDisplay', position='Body'),
}

model GetOpportunityMarketResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      cateName?: string(name='CateName'),
      opportunityIndex?: double(name='OpportunityIndex'),
      relativeCommodity?: double(name='RelativeCommodity'),
      relativeDischarge?: double(name='RelativeDischarge'),
      timeUnit?: string(name='TimeUnit'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetOpportunityMarketResponse = {
  headers: map[string]string(name='headers'),
  body: GetOpportunityMarketResponseBody(name='body'),
}

async function getOpportunityMarket(request: GetOpportunityMarketRequest): GetOpportunityMarketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOpportunityMarket', 'POST', '/', 'json', true, 'form', request);
}

model GetPriceRangeRequest {
  cateIds: string(name='CateIds', position='Body'),
}

model GetPriceRangeResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      closingDate?: string(name='ClosingDate'),
      goodsSales?: long(name='GoodsSales'),
      priceRange?: string(name='PriceRange'),
      salesVolume?: double(name='SalesVolume'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  successResponse?: string(name='SuccessResponse'),
}

model GetPriceRangeResponse = {
  headers: map[string]string(name='headers'),
  body: GetPriceRangeResponseBody(name='body'),
}

async function getPriceRange(request: GetPriceRangeRequest): GetPriceRangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPriceRange', 'POST', '/', 'json', true, 'form', request);
}

model GetSexRatioRequest {
  cateIds: string(name='CateIds', position='Query'),
}

model GetSexRatioResponseBody = {
  code?: string(name='Code'),
  data?: {
    saleNumbers?: [ 
      {
        name?: string(name='Name'),
        value?: long(name='Value'),
      }
    ](name='SaleNumbers'),
    searchNumbers?: [ 
      {
        name?: string(name='Name'),
        value?: long(name='Value'),
      }
    ](name='SearchNumbers'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: string(name='SuccessResponse'),
}

model GetSexRatioResponse = {
  headers: map[string]string(name='headers'),
  body: GetSexRatioResponseBody(name='body'),
}

async function getSexRatio(request: GetSexRatioRequest): GetSexRatioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSexRatio', 'POST', '/', 'json', false, 'json', request);
}

model GetStoreSalesVolumeTopRequest {
  cateIds: string(name='CateIds', position='Body'),
}

model GetStoreSalesVolumeTopResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      shopName?: string(name='ShopName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetStoreSalesVolumeTopResponse = {
  headers: map[string]string(name='headers'),
  body: GetStoreSalesVolumeTopResponseBody(name='body'),
}

async function getStoreSalesVolumeTop(request: GetStoreSalesVolumeTopRequest): GetStoreSalesVolumeTopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStoreSalesVolumeTop', 'POST', '/', 'json', true, 'form', request);
}

model GetStoreSearchTopRequest {
  cateIds: string(name='CateIds', position='Body'),
}

model GetStoreSearchTopResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      shopName?: string(name='ShopName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetStoreSearchTopResponse = {
  headers: map[string]string(name='headers'),
  body: GetStoreSearchTopResponseBody(name='body'),
}

async function getStoreSearchTop(request: GetStoreSearchTopRequest): GetStoreSearchTopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStoreSearchTop', 'POST', '/', 'json', true, 'form', request);
}

model GetStyleTopRequest {
  cateIds: string(name='CateIds', description='A short description of struct', position='Body'),
  sortOrder: long(name='SortOrder', position='Body'),
  timeDisplay: long(name='TimeDisplay', position='Body'),
}

model GetStyleTopResponseBody = {
  code?: string(name='Code', description='Id of the request'),
  data?: [ 
    {
      cateName?: string(name='CateName'),
      color?: string(name='Color'),
      images?: [ string ](name='Images'),
      material?: string(name='Material'),
      productLink?: string(name='ProductLink'),
      salesVolume?: double(name='SalesVolume'),
      searchVolume?: double(name='SearchVolume'),
      style?: string(name='Style'),
      title?: string(name='Title'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  successResponse?: string(name='SuccessResponse'),
}

model GetStyleTopResponse = {
  headers: map[string]string(name='headers'),
  body: GetStyleTopResponseBody(name='body'),
}

async function getStyleTop(request: GetStyleTopRequest): GetStyleTopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStyleTop', 'POST', '/', 'json', true, 'form', request);
}

model GetTrendImageDetailRequest {
  aiImgId: string(name='AiImgId', position='Query'),
}

model GetTrendImageDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    aiImgId?: string(name='AiImgId'),
    aiImgUrl?: string(name='AiImgUrl'),
    multiPictUrl?: string(name='MultiPictUrl'),
    population?: string(name='Population'),
    priceMax?: long(name='PriceMax'),
    priceMin?: long(name='PriceMin'),
    similarGoods?: [ 
      {
        aiImgUrl?: string(name='AiImgUrl'),
        goodsSales?: long(name='GoodsSales'),
        searchVolume?: long(name='SearchVolume'),
      }
    ](name='SimilarGoods'),
    tags?: string(name='Tags'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetTrendImageDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrendImageDetailResponseBody(name='body'),
}

async function getTrendImageDetail(request: GetTrendImageDetailRequest): GetTrendImageDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrendImageDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetTrendImageListRequest {
  cateIds: string(name='CateIds', position='Body'),
  query?: string(name='Query', position='Body'),
}

model GetTrendImageListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      aiImgId?: string(name='AiImgId'),
      aiImgUrl?: string(name='AiImgUrl'),
      population?: string(name='Population'),
      priceMax?: long(name='PriceMax'),
      priceMin?: long(name='PriceMin'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetTrendImageListResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrendImageListResponseBody(name='body'),
}

async function getTrendImageList(request: GetTrendImageListRequest): GetTrendImageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrendImageList', 'POST', '/', 'json', true, 'form', request);
}

model GetTrendIndexRequest {
  cateIds: string(name='CateIds', position='Body'),
  monthNum?: int32(name='MonthNum', position='Body'),
}

model GetTrendIndexResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      brandIndex?: float(name='BrandIndex'),
      eCommerceIndex?: float(name='ECommerceIndex'),
      institutionalIndex?: float(name='InstitutionalIndex'),
      mediaIndex?: float(name='MediaIndex'),
      socialIndex?: float(name='SocialIndex'),
      trendIndex?: float(name='TrendIndex'),
      yearMonth?: string(name='YearMonth'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetTrendIndexResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrendIndexResponseBody(name='body'),
}

async function getTrendIndex(request: GetTrendIndexRequest): GetTrendIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrendIndex', 'POST', '/', 'json', true, 'form', request);
}

model GetTrendSearchRecordRequest {
  key?: string(name='Key', position='Body'),
}

model GetTrendSearchRecordResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      id?: long(name='Id'),
      queryKey?: string(name='QueryKey'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetTrendSearchRecordResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrendSearchRecordResponseBody(name='body'),
}

async function getTrendSearchRecord(request: GetTrendSearchRecordRequest): GetTrendSearchRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrendSearchRecord', 'POST', '/', 'json', true, 'form', request);
}

model GetTrendStatisticRequest {
  cateIds: string(name='CateIds', position='Body'),
}

model GetTrendStatisticResponseBody = {
  code?: string(name='Code'),
  data?: {
    commodityCount?: long(name='CommodityCount'),
    sales?: double(name='Sales'),
    shopCount?: long(name='ShopCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  successResponse?: boolean(name='SuccessResponse'),
}

model GetTrendStatisticResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrendStatisticResponseBody(name='body'),
}

async function getTrendStatistic(request: GetTrendStatisticRequest): GetTrendStatisticResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrendStatistic', 'POST', '/', 'json', true, 'form', request);
}

