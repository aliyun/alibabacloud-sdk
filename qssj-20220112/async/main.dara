/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'qssj';
  @version = '2022-01-12';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GetAgeDistributionRequest {
  cateIds: string(name='CateIds', example='[1623]', position='Query'),
  endingDate?: string(name='EndingDate', position='Query'),
  startDate?: string(name='StartDate', position='Query'),
}

model GetAgeDistributionResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      ageRange?: string(name='AgeRange', example='26-30'),
      saleNumbers?: long(name='SaleNumbers', example='10'),
      searchNumbers?: long(name='SearchNumbers', example='10'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='33d70ec3-6bbe-47b7-9c23-cd31075ddc1f'),
  successResponse?: string(name='SuccessResponse', example='true'),
}

model GetAgeDistributionResponse = {
  headers: map[string]string(name='headers'),
  body: GetAgeDistributionResponseBody(name='body'),
}

async function getAgeDistribution(request: GetAgeDistributionRequest): GetAgeDistributionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAgeDistribution', 'POST', '/', 'json', false, 'json', request);
}

model GetAllTrendCategoryRequest {
}

model GetAllTrendCategoryResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      categoryId?: long(name='CategoryId', example='201241307'),
      categoryLevel?: int32(name='CategoryLevel', example='2'),
      categoryName?: string(name='CategoryName'),
      childCategory?: [ any ](name='ChildCategory'),
      superCategoryName?: string(name='SuperCategoryName'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='33d70ec3-6bbe-47b7-9c23-cd31075ddc1f'),
  successResponse?: boolean(name='SuccessResponse', example='true'),
}

model GetAllTrendCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllTrendCategoryResponseBody(name='body'),
}

async function getAllTrendCategory(request: GetAllTrendCategoryRequest): GetAllTrendCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAllTrendCategory', 'POST', '/', 'json', false, 'json', request);
}

model GetCrowdDataRequest {
  cateIds: string(name='CateIds', example='[1623]', position='Body'),
  endingDate?: string(name='EndingDate', example='20220201', position='Body'),
  pageIndex?: long(name='PageIndex', example='1', position='Body'),
  startDate?: string(name='StartDate', example='20220101', position='Body'),
}

model GetCrowdDataResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      age?: int32(name='Age', example='22'),
      buyerId?: long(name='BuyerId', example='555'),
      cateId?: long(name='CateId', example='1623'),
      cateName?: string(name='CateName'),
      classification?: string(name='Classification'),
      classificationNew?: string(name='ClassificationNew', example='“-1”'),
      gender?: string(name='Gender', example='“F”'),
      onlineDate?: string(name='OnlineDate', example='20220531'),
      orderAmount?: double(name='OrderAmount', example='4123.2'),
      orderQuantity?: long(name='OrderQuantity', example='421'),
      province?: string(name='Province'),
      searchVolume?: long(name='SearchVolume', example='61522'),
      trendLevel?: string(name='TrendLevel'),
    }
  ](name='Data'),
  message?: string(name='Message', example='“success”'),
  requestId?: string(name='RequestId', description='Id of the request', example='33d70ec3-6bbe-47b7-9c23-cd31075ddc1f'),
  successResponse?: string(name='SuccessResponse', example='“true”'),
}

model GetCrowdDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetCrowdDataResponseBody(name='body'),
}

async function getCrowdData(request: GetCrowdDataRequest): GetCrowdDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCrowdData', 'POST', '/', 'json', true, 'form', request);
}

model GetCrowdLabelRequest {
  cateIds: string(name='CateIds', example='[1623]', position='Body'),
  endingDate?: string(name='EndingDate', position='Body'),
  startDate?: string(name='StartDate', position='Body'),
}

model GetCrowdLabelResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      closingDate?: string(name='ClosingDate', example='20220518'),
      labelName?: string(name='LabelName'),
      orderAmount?: double(name='OrderAmount', example='51263.16'),
      purchaseAmount?: double(name='PurchaseAmount', example='591.33'),
      searchVolume?: double(name='SearchVolume', example='27036.0'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='33d70ec3-6bbe-47b7-9c23-cd31075ddc1f'),
  successResponse?: string(name='SuccessResponse', example='true'),
}

model GetCrowdLabelResponse = {
  headers: map[string]string(name='headers'),
  body: GetCrowdLabelResponseBody(name='body'),
}

async function getCrowdLabel(request: GetCrowdLabelRequest): GetCrowdLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCrowdLabel', 'POST', '/', 'json', true, 'form', request);
}

model GetCrowdReginRequest {
  cateIds: string(name='CateIds', example='[1623]', position='Query'),
  endingDate?: string(name='EndingDate', position='Query'),
  startDate?: string(name='StartDate', position='Query'),
}

model GetCrowdReginResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    saleNumbers?: [ 
      {
        name?: string(name='Name'),
        value?: long(name='Value', example='4709889'),
      }
    ](name='SaleNumbers'),
    searchNumbers?: [ 
      {
        name?: string(name='Name'),
        value?: long(name='Value', example='40578'),
      }
    ](name='SearchNumbers'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='33d70ec3-6bbe-47b7-9c23-cd31075ddc1f'),
  successResponse?: boolean(name='SuccessResponse', example='true'),
}

model GetCrowdReginResponse = {
  headers: map[string]string(name='headers'),
  body: GetCrowdReginResponseBody(name='body'),
}

async function getCrowdRegin(request: GetCrowdReginRequest): GetCrowdReginResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCrowdRegin', 'POST', '/', 'json', false, 'json', request);
}

model GetOpportunityMarketRequest {
  cateIds: string(name='CateIds', example='[1623]', position='Body'),
  timeDisplay: long(name='TimeDisplay', example='4', position='Body'),
}

model GetOpportunityMarketResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      cateName?: string(name='CateName'),
      opportunityIndex?: double(name='OpportunityIndex', example='0.59'),
      relativeCommodity?: double(name='RelativeCommodity', example='0.99'),
      relativeDischarge?: double(name='RelativeDischarge', example='0.75'),
      timeUnit?: string(name='TimeUnit', example='202201'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='33d70ec3-6bbe-47b7-9c23-cd31075ddc1f'),
  successResponse?: boolean(name='SuccessResponse', example='true'),
}

model GetOpportunityMarketResponse = {
  headers: map[string]string(name='headers'),
  body: GetOpportunityMarketResponseBody(name='body'),
}

async function getOpportunityMarket(request: GetOpportunityMarketRequest): GetOpportunityMarketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOpportunityMarket', 'POST', '/', 'json', true, 'form', request);
}

model GetPriceRangeRequest {
  brandNames?: string(name='BrandNames', position='Body'),
  cateIds?: string(name='CateIds', example='[1623]', position='Body'),
  endingDate?: string(name='EndingDate', position='Body'),
  section?: long(name='Section', position='Body'),
  shopIds?: string(name='ShopIds', position='Body'),
  startDate?: string(name='StartDate', position='Body'),
}

model GetPriceRangeResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      closingDate?: string(name='ClosingDate', example='20220518'),
      goodsSales?: long(name='GoodsSales', example='1092707'),
      priceRange?: string(name='PriceRange', example='0~100'),
      salesVolume?: double(name='SalesVolume', example='35840300.33'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='33d70ec3-6bbe-47b7-9c23-cd31075ddc1f'),
  successResponse?: string(name='SuccessResponse', example='true'),
}

model GetPriceRangeResponse = {
  headers: map[string]string(name='headers'),
  body: GetPriceRangeResponseBody(name='body'),
}

async function getPriceRange(request: GetPriceRangeRequest): GetPriceRangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPriceRange', 'POST', '/', 'json', true, 'form', request);
}

model GetSexRatioRequest {
  cateIds: string(name='CateIds', example='[1623]', position='Query'),
  endingDate?: string(name='EndingDate', position='Query'),
  startDate?: string(name='StartDate', position='Query'),
}

model GetSexRatioResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    saleNumbers?: [ 
      {
        name?: string(name='Name', example='M'),
        value?: long(name='Value', example='2665206'),
      }
    ](name='SaleNumbers'),
    searchNumbers?: [ 
      {
        name?: string(name='Name', example='M'),
        value?: long(name='Value', example='45474'),
      }
    ](name='SearchNumbers'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='33d70ec3-6bbe-47b7-9c23-cd31075ddc1f'),
  successResponse?: string(name='SuccessResponse', example='true'),
}

model GetSexRatioResponse = {
  headers: map[string]string(name='headers'),
  body: GetSexRatioResponseBody(name='body'),
}

async function getSexRatio(request: GetSexRatioRequest): GetSexRatioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSexRatio', 'POST', '/', 'json', false, 'json', request);
}

model GetStoreSalesVolumeTopRequest {
  brandNames?: string(name='BrandNames', position='Body'),
  cateIds?: string(name='CateIds', example='[1623]', position='Body'),
  endingDate?: string(name='EndingDate', position='Body'),
  endingPrice?: string(name='EndingPrice', position='Body'),
  endingSalesVolume?: string(name='EndingSalesVolume', position='Body'),
  pageIndex?: long(name='PageIndex', position='Body'),
  shopIds?: string(name='ShopIds', position='Body'),
  startDate?: string(name='StartDate', position='Body'),
  startPrice?: string(name='StartPrice', position='Body'),
  startSalesVolume?: string(name='StartSalesVolume', position='Body'),
}

model GetStoreSalesVolumeTopResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      commodityQuantity?: long(name='CommodityQuantity'),
      salesVolume?: long(name='SalesVolume'),
      searchVolume?: long(name='SearchVolume'),
      shopId?: long(name='ShopId'),
      shopName?: string(name='ShopName'),
      totalSales?: double(name='TotalSales'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='33d70ec3-6bbe-47b7-9c23-cd31075ddc1f'),
  successResponse?: boolean(name='SuccessResponse', example='true'),
}

model GetStoreSalesVolumeTopResponse = {
  headers: map[string]string(name='headers'),
  body: GetStoreSalesVolumeTopResponseBody(name='body'),
}

async function getStoreSalesVolumeTop(request: GetStoreSalesVolumeTopRequest): GetStoreSalesVolumeTopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStoreSalesVolumeTop', 'POST', '/', 'json', true, 'form', request);
}

model GetStoreSearchTopRequest {
  brandNames?: string(name='BrandNames', position='Body'),
  cateIds?: string(name='CateIds', example='[1623]', position='Body'),
  endingDate?: string(name='EndingDate', position='Body'),
  endingPrice?: string(name='EndingPrice', position='Body'),
  endingSalesVolume?: string(name='EndingSalesVolume', position='Body'),
  pageIndex?: long(name='PageIndex', position='Body'),
  shopIds?: string(name='ShopIds', position='Body'),
  startDate?: string(name='StartDate', position='Body'),
  startPrice?: string(name='StartPrice', position='Body'),
  startSalesVolume?: string(name='StartSalesVolume', position='Body'),
}

model GetStoreSearchTopResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      commodityQuantity?: long(name='CommodityQuantity'),
      salesVolume?: long(name='SalesVolume'),
      searchVolume?: long(name='SearchVolume'),
      shopId?: long(name='ShopId'),
      shopName?: string(name='ShopName'),
      totalSales?: double(name='TotalSales'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='33d70ec3-6bbe-47b7-9c23-cd31075ddc1f'),
  successResponse?: boolean(name='SuccessResponse', example='true'),
}

model GetStoreSearchTopResponse = {
  headers: map[string]string(name='headers'),
  body: GetStoreSearchTopResponseBody(name='body'),
}

async function getStoreSearchTop(request: GetStoreSearchTopRequest): GetStoreSearchTopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStoreSearchTop', 'POST', '/', 'json', true, 'form', request);
}

model GetStyleOnlineRequest {
  brandNames?: string(name='BrandNames', position='Query'),
  cateIds?: string(name='CateIds', example='[1623]', position='Query'),
  endingDate?: string(name='EndingDate', example='20220201', position='Query'),
  pageIndex?: long(name='PageIndex', example='1', position='Query'),
  shopIds?: string(name='ShopIds', example='[571926]', position='Query'),
  startDate?: string(name='StartDate', example='20220101', position='Query'),
}

model GetStyleOnlineResponseBody = {
  code?: string(name='Code', example='"OK"'),
  data?: [ 
    {
      attributeContent?: string(name='AttributeContent'),
      brandName?: string(name='BrandName'),
      buyerTags?: string(name='BuyerTags'),
      cateName?: string(name='CateName'),
      color?: string(name='Color'),
      exposureValue?: long(name='ExposureValue', example='1379'),
      images?: [ string ](name='Images'),
      material?: string(name='Material'),
      price?: double(name='Price', example='464'),
      productLink?: string(name='ProductLink', example='"https://item.taobao.com/auction/noitem.htm?itemid=643170318769"'),
      salesVolume?: double(name='SalesVolume', example='736'),
      searchVolume?: double(name='SearchVolume', example='13263'),
      shopId?: long(name='ShopId', example='5367123'),
      shopName?: string(name='ShopName'),
      style?: string(name='Style'),
      title?: string(name='Title'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='33d70ec3-6bbe-47b7-9c23-cd31075ddc1f'),
  successResponse?: string(name='SuccessResponse', example='true'),
}

model GetStyleOnlineResponse = {
  headers: map[string]string(name='headers'),
  body: GetStyleOnlineResponseBody(name='body'),
}

async function getStyleOnline(request: GetStyleOnlineRequest): GetStyleOnlineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStyleOnline', 'POST', '/', 'json', false, 'json', request);
}

model GetStyleTopRequest {
  brandNames?: string(name='BrandNames', position='Body'),
  cateIds?: string(name='CateIds', description='A short description of struct', example='[1623]', position='Body'),
  endingDate?: string(name='EndingDate', position='Body'),
  endingPrice?: string(name='EndingPrice', position='Body'),
  pageIndex?: long(name='PageIndex', example='1', position='Body'),
  shopIds?: string(name='ShopIds', position='Body'),
  sortOrder: long(name='SortOrder', example='1', position='Body'),
  startDate?: string(name='StartDate', position='Body'),
  startPrice?: string(name='StartPrice', position='Body'),
  timeDisplay: long(name='TimeDisplay', example='6', position='Body'),
}

model GetStyleTopResponseBody = {
  code?: string(name='Code', description='Id of the request', example='OK'),
  data?: [ 
    {
      attributeContent?: string(name='AttributeContent'),
      brandName?: string(name='BrandName'),
      buyerTags?: string(name='BuyerTags'),
      cateName?: string(name='CateName'),
      color?: string(name='Color'),
      exposureValue?: long(name='ExposureValue'),
      images?: [ string ](name='Images'),
      material?: string(name='Material'),
      price?: double(name='Price'),
      productLink?: string(name='ProductLink', example='"https://item.taobao.com/auction/noitem.htm?itemid=643170318769"'),
      sales?: double(name='Sales'),
      salesVolume?: long(name='SalesVolume', example='736'),
      searchVolume?: double(name='SearchVolume', example='13263'),
      shopId?: long(name='ShopId'),
      shopName?: string(name='ShopName'),
      style?: string(name='Style'),
      title?: string(name='Title'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='33d70ec3-6bbe-47b7-9c23-cd31075ddc1f'),
  successResponse?: string(name='SuccessResponse', example='true'),
}

model GetStyleTopResponse = {
  headers: map[string]string(name='headers'),
  body: GetStyleTopResponseBody(name='body'),
}

async function getStyleTop(request: GetStyleTopRequest): GetStyleTopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStyleTop', 'POST', '/', 'json', true, 'form', request);
}

model GetTrendImageDetailRequest {
  aiImgId: string(name='AiImgId', example='[f93f34271c93c026aba75ca1b9f9fd2b]', position='Query'),
}

model GetTrendImageDetailResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    aiImgId?: string(name='AiImgId', example='f93f34271c93c026aba75ca1b9f9fd2b'),
    aiImgUrl?: string(name='AiImgUrl'),
    multiPictUrl?: string(name='MultiPictUrl'),
    population?: string(name='Population', example='-1'),
    priceMax?: long(name='PriceMax'),
    priceMin?: long(name='PriceMin'),
    similarGoods?: [ 
      {
        aiImgUrl?: string(name='AiImgUrl', example='"https://img.alicdn.com/imgextra/O1CN01hmx9pJ2MhTW9iEJd9_!!2638679859.jpg"'),
        goodsSales?: long(name='GoodsSales', example='-1'),
        searchVolume?: long(name='SearchVolume', example='-1'),
      }
    ](name='SimilarGoods'),
    tags?: string(name='Tags'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='33d70ec3-6bbe-47b7-9c23-cd31075ddc1f'),
  successResponse?: boolean(name='SuccessResponse', example='true'),
}

model GetTrendImageDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrendImageDetailResponseBody(name='body'),
}

async function getTrendImageDetail(request: GetTrendImageDetailRequest): GetTrendImageDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrendImageDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetTrendImageListRequest {
  cateIds: string(name='CateIds', example='[1623]', position='Body'),
  query?: string(name='Query', position='Body'),
}

model GetTrendImageListResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      aiImgId?: string(name='AiImgId', example='f93f34271c93c026aba75ca1b9f9fd2b'),
      aiImgUrl?: string(name='AiImgUrl'),
      population?: string(name='Population'),
      priceMax?: long(name='PriceMax'),
      priceMin?: long(name='PriceMin'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='33d70ec3-6bbe-47b7-9c23-cd31075ddc1f'),
  successResponse?: boolean(name='SuccessResponse', example='true'),
}

model GetTrendImageListResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrendImageListResponseBody(name='body'),
}

async function getTrendImageList(request: GetTrendImageListRequest): GetTrendImageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrendImageList', 'POST', '/', 'json', true, 'form', request);
}

model GetTrendIndexRequest {
  cateIds: string(name='CateIds', example='[1623]', position='Body'),
  monthNum?: int32(name='MonthNum', example='1', position='Body'),
}

model GetTrendIndexResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      brandIndex?: float(name='BrandIndex', example='0.80329525'),
      eCommerceIndex?: float(name='ECommerceIndex', example='4.5877037'),
      institutionalIndex?: float(name='InstitutionalIndex', example='0.81578285'),
      mediaIndex?: float(name='MediaIndex', example='0.80389094'),
      socialIndex?: float(name='SocialIndex', example='0.84380144'),
      trendIndex?: float(name='TrendIndex'),
      yearMonth?: string(name='YearMonth', example='202111'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='33d70ec3-6bbe-47b7-9c23-cd31075ddc1f'),
  successResponse?: boolean(name='SuccessResponse', example='true'),
}

model GetTrendIndexResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrendIndexResponseBody(name='body'),
}

async function getTrendIndex(request: GetTrendIndexRequest): GetTrendIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrendIndex', 'POST', '/', 'json', true, 'form', request);
}

model GetTrendSearchRecordRequest {
  key?: string(name='Key', position='Body'),
}

model GetTrendSearchRecordResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      id?: long(name='Id'),
      queryKey?: string(name='QueryKey'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='33d70ec3-6bbe-47b7-9c23-cd31075ddc1f'),
  successResponse?: boolean(name='SuccessResponse', example='true'),
}

model GetTrendSearchRecordResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrendSearchRecordResponseBody(name='body'),
}

async function getTrendSearchRecord(request: GetTrendSearchRecordRequest): GetTrendSearchRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrendSearchRecord', 'POST', '/', 'json', true, 'form', request);
}

model GetTrendStatisticRequest {
  brandNames?: string(name='BrandNames', position='Body'),
  cateIds?: string(name='CateIds', example='[1623]', position='Body'),
  endingDate?: string(name='EndingDate', position='Body'),
  shopIds?: string(name='ShopIds', position='Body'),
  startDate?: string(name='StartDate', position='Body'),
}

model GetTrendStatisticResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    brandCount?: long(name='BrandCount'),
    commodityCount?: long(name='CommodityCount', example='66417189'),
    exposureValue?: long(name='ExposureValue'),
    hits?: long(name='Hits'),
    sales?: double(name='Sales', example='3145796461.2734184'),
    salesVolume?: long(name='SalesVolume'),
    shopCount?: long(name='ShopCount', example='1936264'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='33d70ec3-6bbe-47b7-9c23-cd31075ddc1f'),
  successResponse?: boolean(name='SuccessResponse', example='true'),
}

model GetTrendStatisticResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrendStatisticResponseBody(name='body'),
}

async function getTrendStatistic(request: GetTrendStatisticRequest): GetTrendStatisticResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrendStatistic', 'POST', '/', 'json', true, 'form', request);
}

model GetTrendWordAndIndexRequest {
  cateIds: string(name='CateIds', example='[1623]', position='Body'),
  endingDate?: string(name='EndingDate', example='202202', position='Body'),
  pageIndex?: long(name='PageIndex', example='1', position='Body'),
  startDate?: string(name='StartDate', example='202201', position='Body'),
}

model GetTrendWordAndIndexResponseBody = {
  code?: string(name='Code', example='"OK"'),
  data?: [ 
    {
      brandIndex?: float(name='BrandIndex', example='1.0023898331'),
      cateId?: long(name='CateId', example='1623'),
      cateName?: string(name='CateName'),
      ecommerceIndex?: float(name='EcommerceIndex', example='1.236972369'),
      institutionalIndex?: float(name='InstitutionalIndex', example='0.438129369'),
      mediaIndex?: float(name='MediaIndex', example='0.9732739173'),
      socialIndex?: float(name='SocialIndex', example='1.6200038123'),
      trendIndex?: float(name='TrendIndex', example='1.000000730'),
      trendWord?: string(name='TrendWord'),
      yearMonth?: string(name='YearMonth', example='"202205"'),
    }
  ](name='Data'),
  massage?: string(name='Massage', example='“success”'),
  requestId?: string(name='RequestId', description='Id of the request', example='33d70ec3-6bbe-47b7-9c23-cd31075ddc1f'),
  successResponse?: string(name='SuccessResponse', example='“true”'),
}

model GetTrendWordAndIndexResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrendWordAndIndexResponseBody(name='body'),
}

async function getTrendWordAndIndex(request: GetTrendWordAndIndexRequest): GetTrendWordAndIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrendWordAndIndex', 'POST', '/', 'json', true, 'form', request);
}

