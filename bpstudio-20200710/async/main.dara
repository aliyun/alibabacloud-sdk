/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'BPStudio';
  @version = '2020-07-10';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BillingApplicationRequest {
  month?: int32(name='Month', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', position='Body'),
  year?: int32(name='Year', position='Body'),
}

model BillingApplicationResponseBody = {
  code?: int32(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model BillingApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: BillingApplicationResponseBody(name='body'),
}

async function billingApplication(request: BillingApplicationRequest): BillingApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BillingApplication', 'POST', '/', 'json', true, 'form', request);
}

model GetDeployDetailRequest {
  appId: string(name='AppId', position='Body'),
  maxResults: long(name='MaxResults', position='Body'),
  nextToken: long(name='NextToken', position='Body'),
  refId?: string(name='RefId', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', position='Body'),
  resourceId?: string(name='ResourceId', position='Body'),
  resourceName?: string(name='ResourceName', position='Body'),
  resourceType?: string(name='ResourceType', position='Body'),
}

model GetDeployDetailResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      appId?: string(name='AppId'),
      createTime?: long(name='CreateTime'),
      currentProcess?: string(name='CurrentProcess'),
      deletingNodeList?: [  map[string]any ](name='DeletingNodeList'),
      deployPercent?: double(name='DeployPercent'),
      deployedNodeList?: [  map[string]any ](name='DeployedNodeList'),
      deployingNodeList?: [  map[string]any ](name='DeployingNodeList'),
      error?: string(name='Error'),
      executionTime?: int32(name='ExecutionTime'),
      failStatus?: int32(name='FailStatus'),
      orderIdList?: [ string ](name='OrderIdList'),
      pdfUrl?: string(name='PdfUrl'),
      resourceGroupId?: string(name='ResourceGroupId'),
      resourceList?: [ 
        {
          buyDuration?: string(name='BuyDuration'),
          chargeType?: string(name='ChargeType'),
          executionStrategy?: string(name='ExecutionStrategy'),
          modifiedTime?: long(name='ModifiedTime'),
          monitorURL?: string(name='MonitorURL'),
          nodeName?: string(name='NodeName'),
          operation?: {
            name?: string(name='Name'),
            operations?: map[string]any(name='Operations'),
          }(name='Operation'),
          refId?: long(name='RefId'),
          remark?: string(name='Remark'),
          resourceCode?: string(name='ResourceCode'),
          resourceId?: string(name='ResourceId'),
          resourceType?: string(name='ResourceType'),
          status?: string(name='Status'),
        }
      ](name='ResourceList'),
      status?: string(name='Status'),
      terraformScriptUrl?: string(name='TerraformScriptUrl'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  nextToken?: long(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model GetDeployDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeployDetailResponseBody(name='body'),
}

async function getDeployDetail(request: GetDeployDetailRequest): GetDeployDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeployDetail', 'POST', '/', 'json', true, 'form', request);
}

