/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('bpstudio', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model BillingApplicationRequest {
  month?: int32(name='Month'),
  resourceGroupId?: string(name='ResourceGroupId'),
  year?: int32(name='Year'),
}

model BillingApplicationResponseBody = {
  code?: int32(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model BillingApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BillingApplicationResponseBody(name='body'),
}

async function billingApplicationWithOptions(request: BillingApplicationRequest, runtime: Util.RuntimeOptions): BillingApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.month)) {
    body['Month'] = request.month;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.year)) {
    body['Year'] = request.year;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BillingApplication',
    version = '2020-07-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function billingApplication(request: BillingApplicationRequest): BillingApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return billingApplicationWithOptions(request, runtime);
}

model GetDeployDetailRequest {
  appId?: string(name='AppId'),
  maxResults?: long(name='MaxResults'),
  nextToken?: long(name='NextToken'),
  refId?: string(name='RefId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceId?: string(name='ResourceId'),
  resourceName?: string(name='ResourceName'),
  resourceType?: string(name='ResourceType'),
}

model GetDeployDetailResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      appId?: string(name='AppId'),
      createTime?: long(name='CreateTime'),
      currentProcess?: string(name='CurrentProcess'),
      deletingNodeList?: [  map[string]any ](name='DeletingNodeList'),
      deployPercent?: double(name='DeployPercent'),
      deployedNodeList?: [  map[string]any ](name='DeployedNodeList'),
      deployingNodeList?: [  map[string]any ](name='DeployingNodeList'),
      error?: string(name='Error'),
      executionTime?: int32(name='ExecutionTime'),
      failStatus?: int32(name='FailStatus'),
      orderIdList?: [ string ](name='OrderIdList'),
      pdfUrl?: string(name='PdfUrl'),
      resourceGroupId?: string(name='ResourceGroupId'),
      resourceList?: [ 
        {
          buyDuration?: string(name='BuyDuration'),
          chargeType?: string(name='ChargeType'),
          executionStrategy?: string(name='ExecutionStrategy'),
          modifiedTime?: long(name='ModifiedTime'),
          monitorURL?: string(name='MonitorURL'),
          nodeName?: string(name='NodeName'),
          operation?: {
            name?: string(name='Name'),
            operations?: map[string]any(name='Operations'),
          }(name='Operation'),
          refId?: long(name='RefId'),
          remark?: string(name='Remark'),
          resourceCode?: string(name='ResourceCode'),
          resourceId?: string(name='ResourceId'),
          resourceType?: string(name='ResourceType'),
          status?: string(name='Status'),
        }
      ](name='ResourceList'),
      status?: string(name='Status'),
      terraformScriptUrl?: string(name='TerraformScriptUrl'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  nextToken?: long(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model GetDeployDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeployDetailResponseBody(name='body'),
}

async function getDeployDetailWithOptions(request: GetDeployDetailRequest, runtime: Util.RuntimeOptions): GetDeployDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.refId)) {
    body['RefId'] = request.refId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceId)) {
    body['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceName)) {
    body['ResourceName'] = request.resourceName;
  }
  if (!Util.isUnset(request.resourceType)) {
    body['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDeployDetail',
    version = '2020-07-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDeployDetail(request: GetDeployDetailRequest): GetDeployDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeployDetailWithOptions(request, runtime);
}

